function appendLog(e){document.getElementById("log").innerText=document.getElementById("log").innerText+e,document.getElementById("log").scrollTop=document.getElementById("log").scrollHeight}const commandQueue=["ver"];let readyToExec=!0;const availHardware={1617064809234:{name:"8 channel - VMLS",desc:"8 channel - Vending machine for liquid detergents",firmware:{folder:"ver006/automatic_soap_dispenser/automatic_soap_dispenser.ino",board:"arduino:avr:uno",burnItems:["bootloader","burn"],programmer:"arduinoasisp",globalConfigs:[{id:"NUMBER_OF_CHEMICALS",name:"Number of products",desc:"The number of maximum products allowed with this card",type:"number",min:5,max:8,value:5},{id:"MAX_MONEY_PER_LITER",name:"Maximum money per liter",desc:"The money that user can set for a product.",type:"number",min:100,max:1e3,value:100},{id:"HIDE_PRICE_AFTER_x_SECONDS",name:"Hides price after (seconds)",desc:"The price shown will be hiden after the above selected time.",type:"number",min:10,max:900,value:10},{id:"REMOVE_CREDIT_AFTER_x_SECONDS",name:"Credit is removed after (seconds)",desc:"After above selected time the credit is set to zero when no activity is registered.",type:"number",min:60,max:3600,value:600},{id:"RESET_LCD_AFTER_x_MINUTES",name:"Resets LCD screen (minutes)",desc:"It helps rectify problems caused due to serial communication.",type:"number",min:60,max:1440,value:60},{id:"RESET_SYSTEM_AFTER_x_MINUTES",name:"Resets entire system (minutes)",desc:"A reset is required to keep the timer work properly.",type:"number",min:1440,max:14400,value:1440}],directives:[{id:"PROGRAM_SUMMARY",name:"Program the summary",desc:"Include the firmware that programs the sales summary",value:!1},{id:"PROGRAM_FROM_APP",value:"true",hide:!0},{id:"PROGRAM_FROM_APP",value:"true",hide:!0}]}},1617070729488:{name:"32 channel - VMLS",desc:"32 channel - Vending machine for liquid detergents",firmware:{folder:"ver006/automatic_soap_dispenser/automatic_soap_dispenser.ino",board:"arduino:avr:uno",burnItems:["bootloader","burn"],programmer:"arduinoasisp",globalConfigs:[{id:"NUMBER_OF_CHEMICALS",name:"Number of products",desc:"The number of maximum products allowed with this card",type:"number",min:5,max:32,value:5},{id:"MAX_MONEY_PER_LITER",name:"Maximum money per liter",desc:"The money that user can set for a product.",type:"number",min:100,max:1e3,value:100},{id:"HIDE_PRICE_AFTER_x_SECONDS",name:"Hides price after (seconds)",desc:"The price shown will be hiden after the above selected time.",type:"number",min:10,max:900,value:10},{id:"REMOVE_CREDIT_AFTER_x_SECONDS",name:"Credit is removed after (seconds)",desc:"After above selected time the credit is set to zero when no activity is registered.",type:"number",min:60,max:3600,value:600},{id:"RESET_LCD_AFTER_x_MINUTES",name:"Resets LCD screen (minutes)",desc:"It helps rectify problems caused due to serial communication.",type:"number",min:60,max:1440,value:60},{id:"RESET_SYSTEM_AFTER_x_MINUTES",name:"Resets entire system (minutes)",desc:"A reset is required to keep the timer work properly.",type:"number",min:1440,max:14400,value:1440}],directives:[{id:"PROGRAM_SUMMARY",name:"Program the summary",desc:"Include the firmware that programs the sales summary",value:!1},{id:"PROGRAM_FROM_APP",value:"true",hide:!0},{id:"PROGRAM_FROM_APP",value:"true",hide:!0}]}},1619070266072:{name:"32 channel - VMLS - SMD",desc:"32 channel - Vending machine for liquid detergents with SMD",firmware:{folder:"ver006/automatic_soap_dispenser/automatic_soap_dispenser.ino",board:"arduino:avr:uno",burnItems:["bootloader","burn"],programmer:"arduinoasisp",globalConfigs:[{id:"NUMBER_OF_CHEMICALS",name:"Number of products",desc:"The number of maximum products allowed with this card",type:"number",min:5,max:32,value:5},{id:"MAX_MONEY_PER_LITER",name:"Maximum money per liter",desc:"The money that user can set for a product.",type:"number",min:100,max:1e3,value:100},{id:"HIDE_PRICE_AFTER_x_SECONDS",name:"Hides price after (seconds)",desc:"The price shown will be hiden after the above selected time.",type:"number",min:10,max:900,value:10},{id:"REMOVE_CREDIT_AFTER_x_SECONDS",name:"Credit is removed after (seconds)",desc:"After above selected time the credit is set to zero when no activity is registered.",type:"number",min:60,max:3600,value:600},{id:"RESET_LCD_AFTER_x_MINUTES",name:"Resets LCD screen (minutes)",desc:"It helps rectify problems caused due to serial communication.",type:"number",min:60,max:1440,value:60},{id:"RESET_SYSTEM_AFTER_x_MINUTES",name:"Resets entire system (minutes)",desc:"A reset is required to keep the timer work properly.",type:"number",min:1440,max:14400,value:1440}],directives:[{id:"PROGRAM_SUMMARY",name:"Program the summary",desc:"Include the firmware that programs the sales summary",value:!1},{id:"PROGRAM_SD",name:"Program the SD Card",desc:"Include the firmware that programs the sales summary",value:!1},{id:"PROGRAM_FROM_APP",value:"true",hide:!0},{id:"IS_SMD_MICRO",value:"true",hide:!0},{id:"PROGRAM_FROM_APP",value:"true",hide:!0}]}},1620570420374:{name:"32 channel - VMLS - With Power Supply",desc:"32 channel - Vending machine for liquid detergents with power supply",firmware:{folder:"ver006/automatic_soap_dispenser/automatic_soap_dispenser.ino",board:"arduino:avr:uno",burnItems:["bootloader","burn"],programmer:"arduinoasisp",globalConfigs:[{id:"NUMBER_OF_CHEMICALS",name:"Number of products",desc:"The number of maximum products allowed with this card",type:"number",min:5,max:32,value:5},{id:"MAX_MONEY_PER_LITER",name:"Maximum money per liter",desc:"The money that user can set for a product.",type:"number",min:100,max:1e3,value:100},{id:"HIDE_PRICE_AFTER_x_SECONDS",name:"Hides price after (seconds)",desc:"The price shown will be hiden after the above selected time.",type:"number",min:10,max:900,value:10},{id:"REMOVE_CREDIT_AFTER_x_SECONDS",name:"Credit is removed after (seconds)",desc:"After above selected time the credit is set to zero when no activity is registered.",type:"number",min:60,max:3600,value:600},{id:"RESET_LCD_AFTER_x_MINUTES",name:"Resets LCD screen (minutes)",desc:"It helps rectify problems caused due to serial communication.",type:"number",min:60,max:1440,value:60},{id:"RESET_SYSTEM_AFTER_x_MINUTES",name:"Resets entire system (minutes)",desc:"A reset is required to keep the timer work properly.",type:"number",min:1440,max:14400,value:1440}],directives:[{id:"PROGRAM_SUMMARY",name:"Program the summary",desc:"Include the firmware that programs the sales summary",value:!1},{id:"PROGRAM_SD",name:"Program the SD card",desc:"Include the firmware that programs the sales summary",value:!1},{id:"PROGRAM_FROM_APP",value:"true",hide:!0},{id:"IS_SMD_MICRO",value:"true",hide:!0},{id:"PROGRAM_FROM_APP",value:"true",hide:!0}]}}},app={data:()=>({avHw:availHardware,selHardware:"",hardware:{},autoUpdate:0,port:""}),watch:{selHardware(e,r){this.hardware=JSON.parse(JSON.stringify(this.avHw[e])),this.autoUpdate++},hardware(e,r){for(let r=0;r<e.firmware.globalConfigs.length;r++)e.firmware.globalConfigs.value>e.firmware.globalConfigs.max&&(e.firmware.globalConfigs.value=max),e.firmware.globalConfigs.value<e.firmware.globalConfigs.min&&(e.firmware.globalConfigs.value=min);console.log(e)}},methods:{prepareFlags:function(){let e="";for(let r=0;r<this.hardware.firmware.globalConfigs.length;r++)e+=" -D"+this.hardware.firmware.globalConfigs[r].id+"="+this.hardware.firmware.globalConfigs[r].value;for(let r=0;r<this.hardware.firmware.directives.length;r++)this.hardware.firmware.directives[r].value&&(e+=" -D"+this.hardware.firmware.directives[r].id);return' --build-property build.extra_flags="'+e+'"'},compile:function(){commandQueue.push({name:"Compile",instruction:"arduino-cli compile --fqbn arduino:avr:uno ./firmware/"+this.hardware.firmware.folder+" --programmer arduinoasisp -v --clean "+this.prepareFlags()})},burn:function(){""===this.port?(appendLog("Port cannot be empty.\nShowing the list of available ports\n"),this.getPorts()):(this.hardware.firmware.burnItems.indexOf("bootloader")>=0&&commandQueue.push({name:"Burning bootloader",instruction:"arduino-cli burn-bootloader --fqbn "+this.hardware.firmware.board+(this.hardware.firmware.programmer?" --programmer "+this.hardware.firmware.programmer:" ")+" -v --port  "+this.port}),this.hardware.firmware.burnItems.indexOf("burn")>=0&&commandQueue.push({name:"Burning bootloader",instruction:"arduino-cli compile --fqbn "+this.hardware.firmware.board+" ./firmware/"+this.hardware.firmware.folder+" "+(this.hardware.firmware.programmer?" --programmer "+this.hardware.firmware.programmer:" ")+" -u -t -v --clean -p "+this.port+this.prepareFlags()}))},getPorts:function(){commandQueue.push({name:"Get ports list",instruction:"arduino-cli board list"})},clearLog:function(){document.getElementById("log").innerText=""}}};Vue.createApp(app).mount("#app");const{ipcRenderer:ipcRenderer}=require("electron");ipcRenderer.on("asynchronous-reply",(e,r)=>{try{document.getElementById("executingText").innerText="[Idle]",appendLog(r),appendLog("-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-\n"),appendLog("『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』\n"),appendLog("[Done]\n"),appendLog("『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』『🙏』\n"),appendLog("-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-\n")}catch(e){console.log(e)}readyToExec=!0}),setInterval(()=>{if(readyToExec&&commandQueue.length>0)try{let e=commandQueue.shift();document.getElementById("executingText").innerHTML="[Executing]: <tt class='w3-small'>"+e.name+"</tt>",appendLog("-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-\n"),appendLog("『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』\n"),appendLog("[Executing]: "+e.name+" >> "+e.instruction+"\n"),appendLog("『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』『🐨』\n"),appendLog("-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-҉-\n"),ipcRenderer.send("exec",e.instruction),readyToExec=!1}catch(e){console.log(e)}},200);