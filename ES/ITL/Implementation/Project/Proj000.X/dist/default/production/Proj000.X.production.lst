

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Wed Oct 26 17:31:49 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text14,local,class=CODE,merge=1,delta=2
    16                           	psect	text25,local,class=CODE,merge=1,delta=2
    17                           	psect	text31,local,class=CODE,merge=1,delta=2
    18                           	psect	text33,local,class=CODE,merge=1,delta=2
    19                           	psect	text34,local,class=CODE,merge=1,delta=2
    20                           	psect	pa_nodes,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     	;# 
    23  0001                     	;# 
    24  0002                     	;# 
    25  0003                     	;# 
    26  0004                     	;# 
    27  0005                     	;# 
    28  0006                     	;# 
    29  0007                     	;# 
    30  0009                     	;# 
    31  000A                     	;# 
    32  000B                     	;# 
    33  000C                     	;# 
    34  000D                     	;# 
    35  000E                     	;# 
    36  000E                     	;# 
    37  000F                     	;# 
    38  0010                     	;# 
    39  0011                     	;# 
    40  0012                     	;# 
    41  0013                     	;# 
    42  0014                     	;# 
    43  0015                     	;# 
    44  0015                     	;# 
    45  0016                     	;# 
    46  0017                     	;# 
    47  0018                     	;# 
    48  0019                     	;# 
    49  001A                     	;# 
    50  001B                     	;# 
    51  001B                     	;# 
    52  001C                     	;# 
    53  001D                     	;# 
    54  001E                     	;# 
    55  001F                     	;# 
    56  0081                     	;# 
    57  0085                     	;# 
    58  0086                     	;# 
    59  0087                     	;# 
    60  0089                     	;# 
    61  008C                     	;# 
    62  008D                     	;# 
    63  008E                     	;# 
    64  008F                     	;# 
    65  0090                     	;# 
    66  0091                     	;# 
    67  0092                     	;# 
    68  0093                     	;# 
    69  0093                     	;# 
    70  0093                     	;# 
    71  0094                     	;# 
    72  0095                     	;# 
    73  0096                     	;# 
    74  0097                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009A                     	;# 
    78  009B                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  009F                     	;# 
    83  0105                     	;# 
    84  0107                     	;# 
    85  0108                     	;# 
    86  0109                     	;# 
    87  010C                     	;# 
    88  010C                     	;# 
    89  010D                     	;# 
    90  010E                     	;# 
    91  010F                     	;# 
    92  0185                     	;# 
    93  0187                     	;# 
    94  0188                     	;# 
    95  0189                     	;# 
    96  018C                     	;# 
    97  018D                     	;# 
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0009                     	;# 
   107  000A                     	;# 
   108  000B                     	;# 
   109  000C                     	;# 
   110  000D                     	;# 
   111  000E                     	;# 
   112  000E                     	;# 
   113  000F                     	;# 
   114  0010                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  001D                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  0081                     	;# 
   133  0085                     	;# 
   134  0086                     	;# 
   135  0087                     	;# 
   136  0089                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  008F                     	;# 
   141  0090                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0093                     	;# 
   146  0093                     	;# 
   147  0094                     	;# 
   148  0095                     	;# 
   149  0096                     	;# 
   150  0097                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009A                     	;# 
   154  009B                     	;# 
   155  009C                     	;# 
   156  009D                     	;# 
   157  009E                     	;# 
   158  009F                     	;# 
   159  0105                     	;# 
   160  0107                     	;# 
   161  0108                     	;# 
   162  0109                     	;# 
   163  010C                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  0185                     	;# 
   169  0187                     	;# 
   170  0188                     	;# 
   171  0189                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  000E                     	;# 
   189  000F                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0013                     	;# 
   194  0014                     	;# 
   195  0015                     	;# 
   196  0015                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001B                     	;# 
   204  001C                     	;# 
   205  001D                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  0081                     	;# 
   209  0085                     	;# 
   210  0086                     	;# 
   211  0087                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  008F                     	;# 
   217  0090                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0093                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009A                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  0105                     	;# 
   236  0107                     	;# 
   237  0108                     	;# 
   238  0109                     	;# 
   239  010C                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  0185                     	;# 
   245  0187                     	;# 
   246  0188                     	;# 
   247  0189                     	;# 
   248  018C                     	;# 
   249  018D                     	;# 
   250  0000                     	;# 
   251  0001                     	;# 
   252  0002                     	;# 
   253  0003                     	;# 
   254  0004                     	;# 
   255  0005                     	;# 
   256  0006                     	;# 
   257  0007                     	;# 
   258  0009                     	;# 
   259  000A                     	;# 
   260  000B                     	;# 
   261  000C                     	;# 
   262  000D                     	;# 
   263  000E                     	;# 
   264  000E                     	;# 
   265  000F                     	;# 
   266  0010                     	;# 
   267  0011                     	;# 
   268  0012                     	;# 
   269  0013                     	;# 
   270  0014                     	;# 
   271  0015                     	;# 
   272  0015                     	;# 
   273  0016                     	;# 
   274  0017                     	;# 
   275  0018                     	;# 
   276  0019                     	;# 
   277  001A                     	;# 
   278  001B                     	;# 
   279  001B                     	;# 
   280  001C                     	;# 
   281  001D                     	;# 
   282  001E                     	;# 
   283  001F                     	;# 
   284  0081                     	;# 
   285  0085                     	;# 
   286  0086                     	;# 
   287  0087                     	;# 
   288  0089                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  008F                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0093                     	;# 
   297  0093                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0098                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  009F                     	;# 
   311  0105                     	;# 
   312  0107                     	;# 
   313  0108                     	;# 
   314  0109                     	;# 
   315  010C                     	;# 
   316  010C                     	;# 
   317  010D                     	;# 
   318  010E                     	;# 
   319  010F                     	;# 
   320  0185                     	;# 
   321  0187                     	;# 
   322  0188                     	;# 
   323  0189                     	;# 
   324  018C                     	;# 
   325  018D                     	;# 
   326  0000                     	;# 
   327  0001                     	;# 
   328  0002                     	;# 
   329  0003                     	;# 
   330  0004                     	;# 
   331  0005                     	;# 
   332  0006                     	;# 
   333  0007                     	;# 
   334  0009                     	;# 
   335  000A                     	;# 
   336  000B                     	;# 
   337  000C                     	;# 
   338  000D                     	;# 
   339  000E                     	;# 
   340  000E                     	;# 
   341  000F                     	;# 
   342  0010                     	;# 
   343  0011                     	;# 
   344  0012                     	;# 
   345  0013                     	;# 
   346  0014                     	;# 
   347  0015                     	;# 
   348  0015                     	;# 
   349  0016                     	;# 
   350  0017                     	;# 
   351  0018                     	;# 
   352  0019                     	;# 
   353  001A                     	;# 
   354  001B                     	;# 
   355  001B                     	;# 
   356  001C                     	;# 
   357  001D                     	;# 
   358  001E                     	;# 
   359  001F                     	;# 
   360  0081                     	;# 
   361  0085                     	;# 
   362  0086                     	;# 
   363  0087                     	;# 
   364  0089                     	;# 
   365  008C                     	;# 
   366  008D                     	;# 
   367  008E                     	;# 
   368  008F                     	;# 
   369  0090                     	;# 
   370  0091                     	;# 
   371  0092                     	;# 
   372  0093                     	;# 
   373  0093                     	;# 
   374  0093                     	;# 
   375  0094                     	;# 
   376  0095                     	;# 
   377  0096                     	;# 
   378  0097                     	;# 
   379  0098                     	;# 
   380  0099                     	;# 
   381  009A                     	;# 
   382  009B                     	;# 
   383  009C                     	;# 
   384  009D                     	;# 
   385  009E                     	;# 
   386  009F                     	;# 
   387  0105                     	;# 
   388  0107                     	;# 
   389  0108                     	;# 
   390  0109                     	;# 
   391  010C                     	;# 
   392  010C                     	;# 
   393  010D                     	;# 
   394  010E                     	;# 
   395  010F                     	;# 
   396  0185                     	;# 
   397  0187                     	;# 
   398  0188                     	;# 
   399  0189                     	;# 
   400  018C                     	;# 
   401  018D                     	;# 
   402  0000                     	;# 
   403  0001                     	;# 
   404  0002                     	;# 
   405  0003                     	;# 
   406  0004                     	;# 
   407  0005                     	;# 
   408  0006                     	;# 
   409  0007                     	;# 
   410  0009                     	;# 
   411  000A                     	;# 
   412  000B                     	;# 
   413  000C                     	;# 
   414  000D                     	;# 
   415  000E                     	;# 
   416  000E                     	;# 
   417  000F                     	;# 
   418  0010                     	;# 
   419  0011                     	;# 
   420  0012                     	;# 
   421  0013                     	;# 
   422  0014                     	;# 
   423  0015                     	;# 
   424  0015                     	;# 
   425  0016                     	;# 
   426  0017                     	;# 
   427  0018                     	;# 
   428  0019                     	;# 
   429  001A                     	;# 
   430  001B                     	;# 
   431  001B                     	;# 
   432  001C                     	;# 
   433  001D                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  0081                     	;# 
   437  0085                     	;# 
   438  0086                     	;# 
   439  0087                     	;# 
   440  0089                     	;# 
   441  008C                     	;# 
   442  008D                     	;# 
   443  008E                     	;# 
   444  008F                     	;# 
   445  0090                     	;# 
   446  0091                     	;# 
   447  0092                     	;# 
   448  0093                     	;# 
   449  0093                     	;# 
   450  0093                     	;# 
   451  0094                     	;# 
   452  0095                     	;# 
   453  0096                     	;# 
   454  0097                     	;# 
   455  0098                     	;# 
   456  0099                     	;# 
   457  009A                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  009F                     	;# 
   463  0105                     	;# 
   464  0107                     	;# 
   465  0108                     	;# 
   466  0109                     	;# 
   467  010C                     	;# 
   468  010C                     	;# 
   469  010D                     	;# 
   470  010E                     	;# 
   471  010F                     	;# 
   472  0185                     	;# 
   473  0187                     	;# 
   474  0188                     	;# 
   475  0189                     	;# 
   476  018C                     	;# 
   477  018D                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0009                     	;# 
   487  000A                     	;# 
   488  000B                     	;# 
   489  000C                     	;# 
   490  000D                     	;# 
   491  000E                     	;# 
   492  000E                     	;# 
   493  000F                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0013                     	;# 
   498  0014                     	;# 
   499  0015                     	;# 
   500  0015                     	;# 
   501  0016                     	;# 
   502  0017                     	;# 
   503  0018                     	;# 
   504  0019                     	;# 
   505  001A                     	;# 
   506  001B                     	;# 
   507  001B                     	;# 
   508  001C                     	;# 
   509  001D                     	;# 
   510  001E                     	;# 
   511  001F                     	;# 
   512  0081                     	;# 
   513  0085                     	;# 
   514  0086                     	;# 
   515  0087                     	;# 
   516  0089                     	;# 
   517  008C                     	;# 
   518  008D                     	;# 
   519  008E                     	;# 
   520  008F                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0093                     	;# 
   525  0093                     	;# 
   526  0093                     	;# 
   527  0094                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0098                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  009F                     	;# 
   539  0105                     	;# 
   540  0107                     	;# 
   541  0108                     	;# 
   542  0109                     	;# 
   543  010C                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  010F                     	;# 
   548  0185                     	;# 
   549  0187                     	;# 
   550  0188                     	;# 
   551  0189                     	;# 
   552  018C                     	;# 
   553  018D                     	;# 
   554  0013                     _SSPBUF	set	19
   555  0014                     _SSPCON	set	20
   556  00C4                     _CREN	set	196
   557  0028                     _RA0	set	40
   558  0029                     _RA1	set	41
   559  002A                     _RA2	set	42
   560  002B                     _RA3	set	43
   561  002C                     _RA4	set	44
   562  002D                     _RA5	set	45
   563  00C7                     _SPEN	set	199
   564  0099                     _SPBRG	set	153
   565  009A                     _SPBRGH	set	154
   566  0093                     _SSPADD	set	147
   567  0091                     _SSPCON2	set	145
   568  0094                     _SSPSTAT	set	148
   569  0085                     _TRISAbits	set	133
   570  048D                     _ACKDT	set	1165
   571  048C                     _ACKEN	set	1164
   572  04C2                     _BRGH	set	1218
   573  048A                     _PEN	set	1162
   574  048B                     _RCEN	set	1163
   575  0488                     _SEN	set	1160
   576  04C4                     _SYNC	set	1220
   577  043B                     _TRISC3	set	1083
   578  043C                     _TRISC4	set	1084
   579  04C5                     _TXEN	set	1221
   580  010D                     _EEADR	set	269
   581  010C                     _EEDATA	set	268
   582  0188                     _ANSEL	set	392
   583  0189                     _ANSELH	set	393
   584  018C                     _EECON1	set	396
   585  0C3B                     _BRG16	set	3131
   586  0C60                     _RD	set	3168
   587  0C61                     _WR	set	3169
   588                           
   589                           	psect	strings
   590  0003                     __pstrings:	
   591  0003                     stringtab:	
   592  0003                     __stringtab:	
   593  0003                     stringcode:	
   594                           ;	String table - string pointers are 1 byte each
   595                           
   596  0003                     stringdir:	
   597  0003  3000               	movlw	high stringdir
   598  0004  008A               	movwf	10
   599  0005  0804               	movf	4,w
   600  0006  0A84               	incf	4,f
   601  0007  0782               	addwf	2,f
   602  0008                     __stringbase:	
   603  0008  3400               	retlw	0
   604  0009                     __end_of__stringtab:	
   605  0009                     STR_1:	
   606  0009  342D               	retlw	45	;'-'
   607  000A  3420               	retlw	32	;' '
   608  000B  3420               	retlw	32	;' '
   609  000C  342D               	retlw	45	;'-'
   610  000D  3400               	retlw	0
   611  000C                     
   612                           ; #config settings
   613  0000                     
   614                           	psect	cinit
   615  07E4                     start_initialization:	
   616  07E4                     __initialization:	
   617  07E4  30A0               	movlw	low __pbssBANK1
   618                           
   619                           ; Clear objects allocated to BANK1
   620  07E5  1383               	bcf	3,7	;select IRP bank0
   621  07E6  0084               	movwf	4
   622  07E7  30BC               	movlw	low (__pbssBANK1+28)
   623  07E8  120A  118A  202C  120A  118A  	fcall	clear_ram0
   624  07ED  3090               	movlw	low __pbssBANK3
   625                           
   626                           ; Clear objects allocated to BANK3
   627  07EE  1783               	bsf	3,7	;select IRP bank2
   628  07EF  0084               	movwf	4
   629  07F0  30EA               	movlw	low (__pbssBANK3+90)
   630  07F1  120A  118A  202C  120A  118A  	fcall	clear_ram0
   631                           
   632                           ; Clear objects allocated to BANK2
   633  07F6  3010               	movlw	low __pbssBANK2
   634  07F7  0084               	movwf	4
   635  07F8  306A               	movlw	low (__pbssBANK2+90)
   636  07F9  120A  118A  202C   	fcall	clear_ram0
   637  07FC                     end_of_initialization:	
   638                           ;End of C runtime variable initialization code
   639                           
   640  07FC                     __end_of__initialization:	
   641  07FC  0183               	clrf	3
   642  07FD  120A  158A  2B41   	ljmp	_main	;jump to C main() function
   643                           
   644                           	psect	bssBANK1
   645  00A0                     __pbssBANK1:	
   646  00A0                     _C:	
   647  00A0                     	ds	12
   648  00AC                     _S:	
   649  00AC                     	ds	4
   650  00B0                     _S_InUse:	
   651  00B0                     	ds	4
   652  00B4                     _C_S:	
   653  00B4                     	ds	2
   654  00B6                     _C_T:	
   655  00B6                     	ds	2
   656  00B8                     _CONFIG0:	
   657  00B8                     	ds	1
   658  00B9                     _C_D:	
   659  00B9                     	ds	1
   660  00BA                     _Cycle:	
   661  00BA                     	ds	1
   662  00BB                     _PresentState:	
   663  00BB                     	ds	1
   664                           
   665                           	psect	bssBANK3
   666  0190                     __pbssBANK3:	
   667  0190                     _C_ON:	
   668  0190                     	ds	90
   669                           
   670                           	psect	bssBANK2
   671  0110                     __pbssBANK2:	
   672  0110                     _C_BLINK:	
   673  0110                     	ds	90
   674                           
   675                           	psect	clrtext
   676  002C                     clear_ram0:	
   677                           ;	Called with FSR containing the base address, and
   678                           ;	W with the last address+1
   679                           
   680  002C  0064               	clrwdt	;clear the watchdog before getting into this loop
   681  002D                     clrloop0:	
   682  002D  0180               	clrf	0	;clear RAM location pointed to by FSR
   683  002E  0A84               	incf	4,f	;increment pointer
   684  002F  0604               	xorwf	4,w	;XOR with final address
   685  0030  1903               	btfsc	3,2	;have we reached the end yet?
   686  0031  3400               	retlw	0	;all done for this memory range, return
   687  0032  0604               	xorwf	4,w	;XOR again to restore value
   688  0033  282D               	goto	clrloop0	;do the next byte
   689                           
   690                           	psect	cstackBANK1
   691  00BC                     __pcstackBANK1:	
   692  00BC                     _UART_Init$937:	
   693                           
   694                           ; 3 bytes @ 0x0
   695  00BC                     	ds	3
   696  00BF                     _UART_Init$938:	
   697                           
   698                           ; 3 bytes @ 0x3
   699  00BF                     	ds	3
   700  00C2                     UART_Init@x:	
   701                           
   702                           ; 2 bytes @ 0x6
   703  00C2                     	ds	2
   704  00C4                     ??_main:	
   705                           
   706                           ; 1 bytes @ 0x8
   707  00C4                     	ds	3
   708                           
   709                           	psect	cstackCOMMON
   710  0070                     __pcstackCOMMON:	
   711  0070                     ?_eeprom_read:	
   712  0070                     ??_eeprom_read:	
   713                           ; 1 bytes @ 0x0
   714                           
   715  0070                     ?_Lcd_Delay5500us:	
   716                           ; 1 bytes @ 0x0
   717                           
   718  0070                     ??_Lcd_Delay5500us:	
   719                           ; 1 bytes @ 0x0
   720                           
   721  0070                     ?_Lcd_Delay5us:	
   722                           ; 1 bytes @ 0x0
   723                           
   724  0070                     ??_Lcd_Delay5us:	
   725                           ; 1 bytes @ 0x0
   726                           
   727  0070                     ?_Lcd_Command:	
   728                           ; 1 bytes @ 0x0
   729                           
   730  0070                     ?_Lcd_CharCP:	
   731                           ; 1 bytes @ 0x0
   732                           
   733  0070                     ?_GetCyclePeriod:	
   734                           ; 1 bytes @ 0x0
   735                           
   736  0070                     ?_ReadVars:	
   737                           ; 1 bytes @ 0x0
   738                           
   739  0070                     ?_Lcd_Init:	
   740                           ; 1 bytes @ 0x0
   741                           
   742  0070                     ?_I2C_Master_Wait:	
   743                           ; 1 bytes @ 0x0
   744                           
   745  0070                     ??_I2C_Master_Wait:	
   746                           ; 1 bytes @ 0x0
   747                           
   748  0070                     ?_I2C_Master_Start:	
   749                           ; 1 bytes @ 0x0
   750                           
   751  0070                     ??_I2C_Master_Start:	
   752                           ; 1 bytes @ 0x0
   753                           
   754  0070                     ?_I2C_Master_Stop:	
   755                           ; 1 bytes @ 0x0
   756                           
   757  0070                     ??_I2C_Master_Stop:	
   758                           ; 1 bytes @ 0x0
   759                           
   760  0070                     ?_I2C_Master_Write:	
   761                           ; 1 bytes @ 0x0
   762                           
   763  0070                     ?_DetermineCycleChange:	
   764                           ; 1 bytes @ 0x0
   765                           
   766  0070                     ??_DetermineCycleChange:	
   767                           ; 1 bytes @ 0x0
   768                           
   769  0070                     ?_ChangeTheCycle:	
   770                           ; 1 bytes @ 0x0
   771                           
   772  0070                     ?_GetCycleSecond:	
   773                           ; 1 bytes @ 0x0
   774                           
   775  0070                     ?_GetStates:	
   776                           ; 1 bytes @ 0x0
   777                           
   778  0070                     ?_PutOnOff:	
   779                           ; 1 bytes @ 0x0
   780                           
   781  0070                     ?_main:	
   782                           ; 1 bytes @ 0x0
   783                           
   784  0070                     ?_I2C_Master_Read:	
   785                           ; 1 bytes @ 0x0
   786                           
   787  0070                     ?___wmul:	
   788                           ; 2 bytes @ 0x0
   789                           
   790  0070                     ?___ftpack:	
   791                           ; 2 bytes @ 0x0
   792                           
   793  0070                     ?_frexp:	
   794                           ; 3 bytes @ 0x0
   795                           
   796  0070                     ?___lmul:	
   797                           ; 3 bytes @ 0x0
   798                           
   799  0070                     ?___aldiv:	
   800                           ; 4 bytes @ 0x0
   801                           
   802  0070                     ?___lldiv:	
   803                           ; 4 bytes @ 0x0
   804                           
   805  0070                     eeprom_read@addr:	
   806                           ; 4 bytes @ 0x0
   807                           
   808  0070                     I2C_Master_Write@d:	
   809                           ; 1 bytes @ 0x0
   810                           
   811  0070                     I2C_Master_Read@a:	
   812                           ; 2 bytes @ 0x0
   813                           
   814  0070                     ___wmul@multiplier:	
   815                           ; 2 bytes @ 0x0
   816                           
   817  0070                     ___ftpack@arg:	
   818                           ; 2 bytes @ 0x0
   819                           
   820  0070                     frexp@value:	
   821                           ; 3 bytes @ 0x0
   822                           
   823  0070                     ___lmul@multiplier:	
   824                           ; 3 bytes @ 0x0
   825                           
   826  0070                     ___aldiv@divisor:	
   827                           ; 4 bytes @ 0x0
   828                           
   829  0070                     ___lldiv@divisor:	
   830                           ; 4 bytes @ 0x0
   831                           
   832                           
   833                           ; 4 bytes @ 0x0
   834  0070                     	ds	2
   835  0072                     ??_Lcd_Command:	
   836  0072                     ??_Lcd_CharCP:	
   837                           ; 1 bytes @ 0x2
   838                           
   839  0072                     ??_I2C_Master_Write:	
   840                           ; 1 bytes @ 0x2
   841                           
   842  0072                     ??_I2C_Master_Read:	
   843                           ; 1 bytes @ 0x2
   844                           
   845  0072                     I2C_Master_Read@temp:	
   846                           ; 1 bytes @ 0x2
   847                           
   848  0072                     ___wmul@multiplicand:	
   849                           ; 2 bytes @ 0x2
   850                           
   851                           
   852                           ; 2 bytes @ 0x2
   853  0072                     	ds	1
   854  0073                     Lcd_CharCP@c:	
   855  0073                     Lcd_Command@command:	
   856                           ; 1 bytes @ 0x3
   857                           
   858  0073                     ___ftpack@exp:	
   859                           ; 1 bytes @ 0x3
   860                           
   861  0073                     frexp@eptr:	
   862                           ; 1 bytes @ 0x3
   863                           
   864                           
   865                           ; 1 bytes @ 0x3
   866  0073                     	ds	1
   867  0074                     ??_frexp:	
   868  0074                     ??_Lcd_Init:	
   869                           ; 1 bytes @ 0x4
   870                           
   871  0074                     ?_Lcd_Text:	
   872                           ; 1 bytes @ 0x4
   873                           
   874  0074                     ?_I2C_ReadAtAddress:	
   875                           ; 1 bytes @ 0x4
   876                           
   877  0074                     ??___wmul:	
   878                           ; 1 bytes @ 0x4
   879                           
   880  0074                     Lcd_Init@data:	
   881                           ; 1 bytes @ 0x4
   882                           
   883  0074                     Lcd_Text@x:	
   884                           ; 1 bytes @ 0x4
   885                           
   886  0074                     I2C_ReadAtAddress@IntAdd:	
   887                           ; 1 bytes @ 0x4
   888                           
   889  0074                     ___ftpack@sign:	
   890                           ; 1 bytes @ 0x4
   891                           
   892  0074                     ___wmul@product:	
   893                           ; 1 bytes @ 0x4
   894                           
   895  0074                     ___lmul@multiplicand:	
   896                           ; 2 bytes @ 0x4
   897                           
   898  0074                     ___aldiv@dividend:	
   899                           ; 4 bytes @ 0x4
   900                           
   901  0074                     ___lldiv@dividend:	
   902                           ; 4 bytes @ 0x4
   903                           
   904                           
   905                           ; 4 bytes @ 0x4
   906  0074                     	ds	1
   907  0075                     ??___ftpack:	
   908  0075                     ??_I2C_ReadAtAddress:	
   909                           ; 1 bytes @ 0x5
   910                           
   911  0075                     Lcd_Text@buffer:	
   912                           ; 1 bytes @ 0x5
   913                           
   914  0075                     I2C_ReadAtAddress@data:	
   915                           ; 1 bytes @ 0x5
   916                           
   917                           
   918                           ; 1 bytes @ 0x5
   919  0075                     	ds	1
   920  0076                     ??_Lcd_Text:	
   921  0076                     Lcd_Text@y:	
   922                           ; 1 bytes @ 0x6
   923                           
   924  0076                     I2C_ReadAtAddress@DevID:	
   925                           ; 1 bytes @ 0x6
   926                           
   927                           
   928                           ; 1 bytes @ 0x6
   929  0076                     	ds	1
   930  0077                     Lcd_Text@data:	
   931                           
   932                           ; 1 bytes @ 0x7
   933  0077                     	ds	1
   934  0078                     ??___lmul:	
   935  0078                     ??___aldiv:	
   936                           ; 1 bytes @ 0x8
   937                           
   938  0078                     ??___lldiv:	
   939                           ; 1 bytes @ 0x8
   940                           
   941  0078                     ?___altoft:	
   942                           ; 1 bytes @ 0x8
   943                           
   944  0078                     ___aldiv@counter:	
   945                           ; 3 bytes @ 0x8
   946                           
   947  0078                     ___lmul@product:	
   948                           ; 1 bytes @ 0x8
   949                           
   950  0078                     ___altoft@c:	
   951                           ; 4 bytes @ 0x8
   952                           
   953  0078                     ___lldiv@quotient:	
   954                           ; 4 bytes @ 0x8
   955                           
   956                           
   957                           ; 4 bytes @ 0x8
   958  0078                     	ds	1
   959  0079                     ___aldiv@sign:	
   960                           
   961                           ; 1 bytes @ 0x9
   962  0079                     	ds	1
   963  007A                     DetermineCycleChange@MinPos:	
   964  007A                     ___aldiv@quotient:	
   965                           ; 1 bytes @ 0xA
   966                           
   967                           
   968                           ; 4 bytes @ 0xA
   969  007A                     	ds	1
   970  007B                     DetermineCycleChange@PrevCycle:	
   971                           
   972                           ; 1 bytes @ 0xB
   973  007B                     	ds	1
   974  007C                     ??___altoft:	
   975  007C                     DetermineCycleChange@i:	
   976                           ; 1 bytes @ 0xC
   977                           
   978  007C                     ___altoft@exp:	
   979                           ; 1 bytes @ 0xC
   980                           
   981  007C                     ___lldiv@counter:	
   982                           ; 1 bytes @ 0xC
   983                           
   984                           
   985                           ; 1 bytes @ 0xC
   986  007C                     	ds	1
   987  007D                     ___altoft@sign:	
   988                           
   989                           ; 1 bytes @ 0xD
   990  007D                     	ds	1
   991  007E                     ??_round:	
   992  007E                     ??_trunc:	
   993                           ; 1 bytes @ 0xE
   994                           
   995  007E                     ??_Lcd_WriteChar:	
   996                           ; 1 bytes @ 0xE
   997                           
   998  007E                     ??_UART_Init:	
   999                           ; 1 bytes @ 0xE
  1000                           
  1001  007E                     ??_ChangeTheCycle:	
  1002                           ; 1 bytes @ 0xE
  1003                           
  1004  007E                     ??___bmul:	
  1005                           ; 1 bytes @ 0xE
  1006                           
  1007  007E                     ??___ftsub:	
  1008                           ; 1 bytes @ 0xE
  1009                           
  1010                           
  1011                           	psect	cstackBANK0
  1012  0020                     __pcstackBANK0:	
  1013                           ; 1 bytes @ 0xE
  1014                           
  1015  0020                     ?_I2C_Master_Init:	
  1016  0020                     ?___bmul:	
  1017                           ; 1 bytes @ 0x0
  1018                           
  1019  0020                     ?___ftmul:	
  1020                           ; 1 bytes @ 0x0
  1021                           
  1022  0020                     ?_GetModValue:	
  1023                           ; 3 bytes @ 0x0
  1024                           
  1025  0020                     ?_ReadRTCAsSec:	
  1026                           ; 4 bytes @ 0x0
  1027                           
  1028  0020                     ___bmul@multiplicand:	
  1029                           ; 4 bytes @ 0x0
  1030                           
  1031  0020                     ___ftmul@f1:	
  1032                           ; 1 bytes @ 0x0
  1033                           
  1034  0020                     I2C_Master_Init@c:	
  1035                           ; 3 bytes @ 0x0
  1036                           
  1037  0020                     GetModValue@a:	
  1038                           ; 4 bytes @ 0x0
  1039                           
  1040                           
  1041                           ; 4 bytes @ 0x0
  1042  0020                     	ds	1
  1043  0021                     ___bmul@product:	
  1044                           
  1045                           ; 1 bytes @ 0x1
  1046  0021                     	ds	1
  1047  0022                     ___bmul@multiplier:	
  1048                           
  1049                           ; 1 bytes @ 0x2
  1050  0022                     	ds	1
  1051  0023                     ??_GetCyclePeriod:	
  1052  0023                     ??_ReadVars:	
  1053                           ; 1 bytes @ 0x3
  1054                           
  1055  0023                     ?_Lcd_WriteChar:	
  1056                           ; 1 bytes @ 0x3
  1057                           
  1058  0023                     ??_GetStates:	
  1059                           ; 1 bytes @ 0x3
  1060                           
  1061  0023                     Lcd_WriteChar@x:	
  1062                           ; 1 bytes @ 0x3
  1063                           
  1064  0023                     ___ftmul@f2:	
  1065                           ; 1 bytes @ 0x3
  1066                           
  1067                           
  1068                           ; 3 bytes @ 0x3
  1069  0023                     	ds	1
  1070  0024                     ??_I2C_Master_Init:	
  1071  0024                     ??_ReadRTCAsSec:	
  1072                           ; 1 bytes @ 0x4
  1073                           
  1074  0024                     Lcd_WriteChar@c:	
  1075                           ; 1 bytes @ 0x4
  1076                           
  1077  0024                     GetCyclePeriod@i:	
  1078                           ; 1 bytes @ 0x4
  1079                           
  1080  0024                     GetStates@TempVar:	
  1081                           ; 1 bytes @ 0x4
  1082                           
  1083  0024                     GetModValue@b:	
  1084                           ; 2 bytes @ 0x4
  1085                           
  1086                           
  1087                           ; 4 bytes @ 0x4
  1088  0024                     	ds	1
  1089  0025                     Lcd_WriteChar@y:	
  1090                           
  1091                           ; 1 bytes @ 0x5
  1092  0025                     	ds	1
  1093  0026                     ??___ftmul:	
  1094  0026                     Lcd_WriteChar@data:	
  1095                           ; 1 bytes @ 0x6
  1096                           
  1097  0026                     GetStates@i:	
  1098                           ; 1 bytes @ 0x6
  1099                           
  1100                           
  1101                           ; 1 bytes @ 0x6
  1102  0026                     	ds	1
  1103  0027                     ?_WriteLongInt:	
  1104  0027                     WriteLongInt@x:	
  1105                           ; 1 bytes @ 0x7
  1106                           
  1107                           
  1108                           ; 1 bytes @ 0x7
  1109  0027                     	ds	1
  1110  0028                     ??_GetModValue:	
  1111  0028                     WriteLongInt@Val:	
  1112                           ; 1 bytes @ 0x8
  1113                           
  1114                           
  1115                           ; 4 bytes @ 0x8
  1116  0028                     	ds	1
  1117  0029                     ___ftmul@exp:	
  1118                           
  1119                           ; 1 bytes @ 0x9
  1120  0029                     	ds	1
  1121  002A                     ___ftmul@f3_as_product:	
  1122                           
  1123                           ; 3 bytes @ 0xA
  1124  002A                     	ds	1
  1125  002B                     _ReadRTCAsSec$939:	
  1126                           
  1127                           ; 2 bytes @ 0xB
  1128  002B                     	ds	1
  1129  002C                     WriteLongInt@size:	
  1130  002C                     GetModValue@TempVar:	
  1131                           ; 1 bytes @ 0xC
  1132                           
  1133                           
  1134                           ; 4 bytes @ 0xC
  1135  002C                     	ds	1
  1136  002D                     WriteLongInt@Sign:	
  1137  002D                     ___ftmul@cntr:	
  1138                           ; 1 bytes @ 0xD
  1139                           
  1140  002D                     ReadRTCAsSec@Out:	
  1141                           ; 1 bytes @ 0xD
  1142                           
  1143                           
  1144                           ; 4 bytes @ 0xD
  1145  002D                     	ds	1
  1146  002E                     ??_WriteLongInt:	
  1147  002E                     ___ftmul@sign:	
  1148                           ; 1 bytes @ 0xE
  1149                           
  1150                           
  1151                           ; 1 bytes @ 0xE
  1152  002E                     	ds	1
  1153  002F                     ?___ftdiv:	
  1154  002F                     WriteLongInt@POS:	
  1155                           ; 3 bytes @ 0xF
  1156                           
  1157  002F                     ___ftdiv@f2:	
  1158                           ; 1 bytes @ 0xF
  1159                           
  1160                           
  1161                           ; 3 bytes @ 0xF
  1162  002F                     	ds	1
  1163  0030                     ??_GetCycleSecond:	
  1164  0030                     WriteLongInt@y:	
  1165                           ; 1 bytes @ 0x10
  1166                           
  1167                           
  1168                           ; 1 bytes @ 0x10
  1169  0030                     	ds	1
  1170  0031                     ??_PutOnOff:	
  1171  0031                     ReadRTCAsSec@TempVar000:	
  1172                           ; 1 bytes @ 0x11
  1173                           
  1174                           
  1175                           ; 1 bytes @ 0x11
  1176  0031                     	ds	1
  1177  0032                     ReadVars@i:	
  1178  0032                     ___ftdiv@f1:	
  1179                           ; 1 bytes @ 0x12
  1180                           
  1181                           
  1182                           ; 3 bytes @ 0x12
  1183  0032                     	ds	1
  1184  0033                     ReadVars@i_34:	
  1185  0033                     PutOnOff@Temp_PORT:	
  1186                           ; 1 bytes @ 0x13
  1187                           
  1188                           
  1189                           ; 1 bytes @ 0x13
  1190  0033                     	ds	1
  1191  0034                     ReadVars@j:	
  1192  0034                     PutOnOff@i:	
  1193                           ; 1 bytes @ 0x14
  1194                           
  1195                           
  1196                           ; 1 bytes @ 0x14
  1197  0034                     	ds	1
  1198  0035                     ??___ftdiv:	
  1199  0035                     ReadVars@k:	
  1200                           ; 1 bytes @ 0x15
  1201                           
  1202  0035                     GetCycleSecond@PrevCycle:	
  1203                           ; 1 bytes @ 0x15
  1204                           
  1205  0035                     PutOnOff@i_345:	
  1206                           ; 1 bytes @ 0x15
  1207                           
  1208                           
  1209                           ; 1 bytes @ 0x15
  1210  0035                     	ds	1
  1211  0036                     GetCycleSecond@TempVar:	
  1212                           
  1213                           ; 1 bytes @ 0x16
  1214  0036                     	ds	2
  1215  0038                     ___ftdiv@cntr:	
  1216                           
  1217                           ; 1 bytes @ 0x18
  1218  0038                     	ds	1
  1219  0039                     ___ftdiv@f3:	
  1220                           
  1221                           ; 3 bytes @ 0x19
  1222  0039                     	ds	3
  1223  003C                     ___ftdiv@exp:	
  1224                           
  1225                           ; 1 bytes @ 0x1C
  1226  003C                     	ds	1
  1227  003D                     ___ftdiv@sign:	
  1228                           
  1229                           ; 1 bytes @ 0x1D
  1230  003D                     	ds	1
  1231  003E                     ?___ftadd:	
  1232  003E                     ___ftadd@f1:	
  1233                           ; 3 bytes @ 0x1E
  1234                           
  1235                           
  1236                           ; 3 bytes @ 0x1E
  1237  003E                     	ds	3
  1238  0041                     ___ftadd@f2:	
  1239                           
  1240                           ; 3 bytes @ 0x21
  1241  0041                     	ds	3
  1242  0044                     ??___ftadd:	
  1243                           
  1244                           ; 1 bytes @ 0x24
  1245  0044                     	ds	3
  1246  0047                     ___ftadd@sign:	
  1247                           
  1248                           ; 1 bytes @ 0x27
  1249  0047                     	ds	1
  1250  0048                     ___ftadd@exp2:	
  1251                           
  1252                           ; 1 bytes @ 0x28
  1253  0048                     	ds	1
  1254  0049                     ___ftadd@exp1:	
  1255                           
  1256                           ; 1 bytes @ 0x29
  1257  0049                     	ds	1
  1258  004A                     ?___fttol:	
  1259  004A                     ___fttol@f1:	
  1260                           ; 4 bytes @ 0x2A
  1261                           
  1262                           
  1263                           ; 3 bytes @ 0x2A
  1264  004A                     	ds	4
  1265  004E                     ??___fttol:	
  1266                           
  1267                           ; 1 bytes @ 0x2E
  1268  004E                     	ds	3
  1269  0051                     ___fttol@sign1:	
  1270                           
  1271                           ; 1 bytes @ 0x31
  1272  0051                     	ds	1
  1273  0052                     ___fttol@lval:	
  1274                           
  1275                           ; 4 bytes @ 0x32
  1276  0052                     	ds	4
  1277  0056                     ___fttol@exp1:	
  1278                           
  1279                           ; 1 bytes @ 0x36
  1280  0056                     	ds	1
  1281  0057                     ?_trunc:	
  1282  0057                     trunc@x:	
  1283                           ; 3 bytes @ 0x37
  1284                           
  1285                           
  1286                           ; 3 bytes @ 0x37
  1287  0057                     	ds	3
  1288  005A                     trunc@i:	
  1289                           
  1290                           ; 3 bytes @ 0x3A
  1291  005A                     	ds	3
  1292  005D                     trunc@expon:	
  1293                           
  1294                           ; 2 bytes @ 0x3D
  1295  005D                     	ds	2
  1296  005F                     ?___ftsub:	
  1297  005F                     ___ftsub@f2:	
  1298                           ; 3 bytes @ 0x3F
  1299                           
  1300                           
  1301                           ; 3 bytes @ 0x3F
  1302  005F                     	ds	3
  1303  0062                     ___ftsub@f1:	
  1304                           
  1305                           ; 3 bytes @ 0x42
  1306  0062                     	ds	3
  1307  0065                     ?_round:	
  1308  0065                     round@x:	
  1309                           ; 3 bytes @ 0x45
  1310                           
  1311                           
  1312                           ; 3 bytes @ 0x45
  1313  0065                     	ds	3
  1314  0068                     round@f:	
  1315                           
  1316                           ; 3 bytes @ 0x48
  1317  0068                     	ds	3
  1318  006B                     ?_UART_Init:	
  1319  006B                     UART_Init@baudrate:	
  1320                           ; 1 bytes @ 0x4B
  1321                           
  1322                           
  1323                           ; 4 bytes @ 0x4B
  1324  006B                     	ds	4
  1325  006F                     main@Firm_Cicle:	
  1326                           
  1327                           ; 1 bytes @ 0x4F
  1328  006F                     	ds	1
  1329                           
  1330                           	psect	maintext
  1331  0B41                     __pmaintext:	
  1332 ;;
  1333 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1334 ;;
  1335 ;; *************** function _main *****************
  1336 ;; Defined at:
  1337 ;;		line 47 in file "main.c"
  1338 ;; Parameters:    Size  Location     Type
  1339 ;;		None
  1340 ;; Auto vars:     Size  Location     Type
  1341 ;;  Firm_Cicle      1   79[BANK0 ] unsigned char 
  1342 ;;  TempValue       1    0        unsigned char 
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : B00/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       0       0       0       0
  1353 ;;      Locals:         0       1       0       0       0
  1354 ;;      Temps:          0       0       3       0       0
  1355 ;;      Totals:         0       1       3       0       0
  1356 ;;Total ram usage:        4 bytes
  1357 ;; Hardware stack levels required when called:    5
  1358 ;; This function calls:
  1359 ;;		_ChangeTheCycle
  1360 ;;		_DetermineCycleChange
  1361 ;;		_GetCyclePeriod
  1362 ;;		_GetCycleSecond
  1363 ;;		_GetStates
  1364 ;;		_I2C_Master_Init
  1365 ;;		_Lcd_Init
  1366 ;;		_Lcd_Text
  1367 ;;		_PutOnOff
  1368 ;;		_ReadRTCAsSec
  1369 ;;		_ReadVars
  1370 ;;		_UART_Init
  1371 ;;		_WriteLongInt
  1372 ;; This function is called by:
  1373 ;;		Startup code after reset
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           
  1378                           ;psect for function _main
  1379  0B41                     _main:	
  1380                           
  1381                           ;main.c: 50: Lcd_Init();
  1382                           
  1383                           ;incstack = 0
  1384                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1385  0B41  120A  158A  26DE  120A  158A  	fcall	_Lcd_Init
  1386                           
  1387                           ;main.c: 51: Lcd_Text(1,11,"-  -");
  1388  0B46  300B               	movlw	11
  1389  0B47  00F4               	movwf	Lcd_Text@x
  1390  0B48  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1391  0B49  00F5               	movwf	Lcd_Text@buffer
  1392  0B4A  3001               	movlw	1
  1393  0B4B  120A  158A  2612  120A  158A  	fcall	_Lcd_Text
  1394                           
  1395                           ;main.c: 52: Lcd_Text(2,14,"-");
  1396  0B50  300E               	movlw	14
  1397  0B51  00F4               	movwf	Lcd_Text@x
  1398  0B52  3004               	movlw	(low (((STR_1+3)-__stringbase)| (0+32768)))& (0+255)
  1399  0B53  00F5               	movwf	Lcd_Text@buffer
  1400  0B54  3002               	movlw	2
  1401  0B55  120A  158A  2612  120A  158A  	fcall	_Lcd_Text
  1402                           
  1403                           ;main.c: 54: I2C_Master_Init(400000);
  1404  0B5A  3000               	movlw	0
  1405  0B5B  1283               	bcf	3,5	;RP0=0, select bank0
  1406  0B5C  1303               	bcf	3,6	;RP1=0, select bank0
  1407  0B5D  00A3               	movwf	I2C_Master_Init@c+3
  1408  0B5E  3006               	movlw	6
  1409  0B5F  00A2               	movwf	I2C_Master_Init@c+2
  1410  0B60  301A               	movlw	26
  1411  0B61  00A1               	movwf	I2C_Master_Init@c+1
  1412  0B62  3080               	movlw	128
  1413  0B63  00A0               	movwf	I2C_Master_Init@c
  1414  0B64  120A  118A  2034  120A  158A  	fcall	_I2C_Master_Init
  1415                           
  1416                           ;main.c: 55: UART_Init(9600);
  1417  0B69  3000               	movlw	0
  1418  0B6A  1283               	bcf	3,5	;RP0=0, select bank0
  1419  0B6B  00EE               	movwf	UART_Init@baudrate+3
  1420  0B6C  00ED               	movwf	UART_Init@baudrate+2
  1421  0B6D  3025               	movlw	37
  1422  0B6E  00EC               	movwf	UART_Init@baudrate+1
  1423  0B6F  3080               	movlw	128
  1424  0B70  00EB               	movwf	UART_Init@baudrate
  1425  0B71  120A  118A  2499  120A  158A  	fcall	_UART_Init
  1426                           
  1427                           ;main.c: 56: char TempValue;
  1428                           ;main.c: 58: ReadVars();
  1429  0B76  120A  118A  217A  120A  158A  	fcall	_ReadVars
  1430                           
  1431                           ;main.c: 60: S = ReadRTCAsSec()+C_D;
  1432  0B7B  120A  158A  220E  120A  158A  	fcall	_ReadRTCAsSec
  1433  0B80  0823               	movf	?_ReadRTCAsSec+3,w
  1434  0B81  1683               	bsf	3,5	;RP0=1, select bank1
  1435  0B82  00AF               	movwf	(_S+3)^(0+128)	;volatile
  1436  0B83  1283               	bcf	3,5	;RP0=0, select bank0
  1437  0B84  0822               	movf	?_ReadRTCAsSec+2,w
  1438  0B85  1683               	bsf	3,5	;RP0=1, select bank1
  1439  0B86  00AE               	movwf	(_S+2)^(0+128)	;volatile
  1440  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0B88  0821               	movf	?_ReadRTCAsSec+1,w
  1442  0B89  1683               	bsf	3,5	;RP0=1, select bank1
  1443  0B8A  00AD               	movwf	(_S+1)^(0+128)	;volatile
  1444  0B8B  1283               	bcf	3,5	;RP0=0, select bank0
  1445  0B8C  0820               	movf	?_ReadRTCAsSec,w
  1446  0B8D  1683               	bsf	3,5	;RP0=1, select bank1
  1447  0B8E  00AC               	movwf	_S^(0+128)	;volatile
  1448  0B8F  0839               	movf	_C_D^(0+128),w	;volatile
  1449  0B90  07AC               	addwf	_S^(0+128),f	;volatile
  1450  0B91  3001               	movlw	1
  1451  0B92  1803               	skipnc
  1452  0B93  07AD               	addwf	(_S+1)^(0+128),f	;volatile
  1453  0B94  1803               	skipnc
  1454  0B95  07AE               	addwf	(_S+2)^(0+128),f	;volatile
  1455  0B96  1803               	skipnc
  1456  0B97  07AF               	addwf	(_S+3)^(0+128),f	;volatile
  1457                           
  1458                           ;main.c: 61: if (S>86400)
  1459  0B98  1BAF               	btfsc	(_S+3)^(0+128),7	;volatile
  1460  0B99  2BAA               	goto	l2925
  1461  0B9A  082F               	movf	(_S+3)^(0+128),w	;volatile
  1462  0B9B  1D03               	btfss	3,2
  1463  0B9C  2BA9               	goto	l2923
  1464  0B9D  3001               	movlw	1
  1465  0B9E  022E               	subwf	(_S+2)^(0+128),w	;volatile
  1466  0B9F  1D03               	skipz
  1467  0BA0  2BA7               	goto	u3603
  1468  0BA1  3051               	movlw	81
  1469  0BA2  022D               	subwf	(_S+1)^(0+128),w	;volatile
  1470  0BA3  1D03               	skipz
  1471  0BA4  2BA7               	goto	u3603
  1472  0BA5  3081               	movlw	129
  1473  0BA6  022C               	subwf	_S^(0+128),w	;volatile
  1474  0BA7                     u3603:	
  1475  0BA7  1C03               	btfss	3,0
  1476  0BA8  2BAA               	goto	l2925
  1477  0BA9                     l2923:	
  1478                           
  1479                           ;main.c: 62: S=-86400;
  1480  0BA9  246D               	fcall	PL16	;call to abstracted procedure
  1481  0BAA                     l2925:	
  1482                           
  1483                           ;main.c: 64: DetermineCycleChange();
  1484  0BAA  120A  158A  2512  120A  158A  	fcall	_DetermineCycleChange
  1485                           
  1486                           ;main.c: 65: ChangeTheCycle();
  1487  0BAF  120A  158A  2502  120A  158A  	fcall	_ChangeTheCycle
  1488                           
  1489                           ;main.c: 66: GetCyclePeriod();
  1490  0BB4  120A  158A  25DC  120A  158A  	fcall	_GetCyclePeriod
  1491                           
  1492                           ;main.c: 69: char Firm_Cicle = 0x00;
  1493  0BB9  01EF               	clrf	main@Firm_Cicle
  1494                           
  1495                           ;main.c: 72: S_InUse = S;
  1496  0BBA  1683               	bsf	3,5	;RP0=1, select bank1
  1497  0BBB  082F               	movf	(_S+3)^(0+128),w	;volatile
  1498  0BBC  00B3               	movwf	(_S_InUse+3)^(0+128)	;volatile
  1499  0BBD  082E               	movf	(_S+2)^(0+128),w	;volatile
  1500  0BBE  00B2               	movwf	(_S_InUse+2)^(0+128)	;volatile
  1501  0BBF  082D               	movf	(_S+1)^(0+128),w	;volatile
  1502  0BC0  00B1               	movwf	(_S_InUse+1)^(0+128)	;volatile
  1503  0BC1  082C               	movf	_S^(0+128),w	;volatile
  1504  0BC2  00B0               	movwf	_S_InUse^(0+128)	;volatile
  1505  0BC3                     l2935:	
  1506                           
  1507                           ;main.c: 75: GetCycleSecond();
  1508  0BC3  120A  158A  2476  120A  158A  	fcall	_GetCycleSecond
  1509                           
  1510                           ;main.c: 76: GetStates();
  1511  0BC8  120A  118A  20A9  120A  158A  	fcall	_GetStates
  1512                           
  1513                           ;main.c: 77: PutOnOff();
  1514  0BCD  120A  118A  20D7  120A  158A  	fcall	_PutOnOff
  1515                           
  1516                           ;main.c: 78: CONFIG0.bits.b7 = !CONFIG0.bits.b7;
  1517  0BD2  1003               	clrc
  1518  0BD3  1683               	bsf	3,5	;RP0=1, select bank1
  1519  0BD4  1FB8               	btfss	_CONFIG0^(0+128),7	;volatile
  1520  0BD5  1403               	setc
  1521  0BD6  1C03               	btfss	3,0
  1522  0BD7  2BDC               	goto	u3610
  1523  0BD8  1683               	bsf	3,5	;RP0=1, select bank1
  1524  0BD9  1303               	bcf	3,6	;RP1=0, select bank1
  1525  0BDA  17B8               	bsf	_CONFIG0^(0+128),7	;volatile
  1526  0BDB  2BDF               	goto	u3624
  1527  0BDC                     u3610:	
  1528  0BDC  1683               	bsf	3,5	;RP0=1, select bank1
  1529  0BDD  1303               	bcf	3,6	;RP1=0, select bank1
  1530  0BDE  13B8               	bcf	_CONFIG0^(0+128),7	;volatile
  1531  0BDF                     u3624:	
  1532                           
  1533                           ;main.c: 81: Firm_Cicle++;
  1534  0BDF  1283               	bcf	3,5	;RP0=0, select bank0
  1535  0BE0  0AEF               	incf	main@Firm_Cicle,f
  1536                           
  1537                           ;main.c: 82: if (Firm_Cicle == (1000/1000)) {
  1538  0BE1  0B6F               	decfsz	main@Firm_Cicle,w
  1539  0BE2  2C00               	goto	l2953
  1540                           
  1541                           ;main.c: 83: Firm_Cicle=0;
  1542  0BE3  01EF               	clrf	main@Firm_Cicle
  1543                           
  1544                           ;main.c: 84: S++;
  1545  0BE4  1683               	bsf	3,5	;RP0=1, select bank1
  1546  0BE5  0AAC               	incf	_S^(0+128),f	;volatile
  1547  0BE6  1903               	skipnz
  1548  0BE7  0AAD               	incf	(_S+1)^(0+128),f	;volatile
  1549  0BE8  1903               	skipnz
  1550  0BE9  0AAE               	incf	(_S+2)^(0+128),f	;volatile
  1551  0BEA  1903               	skipnz
  1552  0BEB  0AAF               	incf	(_S+3)^(0+128),f	;volatile
  1553                           
  1554                           ;main.c: 86: if (S>=86400)
  1555  0BEC  1BAF               	btfsc	(_S+3)^(0+128),7	;volatile
  1556  0BED  2C00               	goto	l2953
  1557  0BEE  082F               	movf	(_S+3)^(0+128),w	;volatile
  1558  0BEF  1D03               	btfss	3,2
  1559  0BF0  2BFD               	goto	l2951
  1560  0BF1  3001               	movlw	1
  1561  0BF2  022E               	subwf	(_S+2)^(0+128),w	;volatile
  1562  0BF3  1D03               	skipz
  1563  0BF4  2BFB               	goto	u3643
  1564  0BF5  3051               	movlw	81
  1565  0BF6  022D               	subwf	(_S+1)^(0+128),w	;volatile
  1566  0BF7  1D03               	skipz
  1567  0BF8  2BFB               	goto	u3643
  1568  0BF9  3080               	movlw	128
  1569  0BFA  022C               	subwf	_S^(0+128),w	;volatile
  1570  0BFB                     u3643:	
  1571  0BFB  1C03               	btfss	3,0
  1572  0BFC  2C00               	goto	l2953
  1573  0BFD                     l2951:	
  1574                           
  1575                           ;main.c: 87: S=-86400;
  1576  0BFD  246D  120A  158A   	fcall	PL16	;call to abstracted procedure
  1577  0C00                     l2953:	
  1578                           
  1579                           ;main.c: 88: }
  1580                           ;main.c: 91: WriteLongInt(1,9,PresentState,2,0);
  1581  0C00  3009               	movlw	9
  1582  0C01  1283               	bcf	3,5	;RP0=0, select bank0
  1583  0C02  00A7               	movwf	WriteLongInt@x
  1584  0C03  1683               	bsf	3,5	;RP0=1, select bank1
  1585  0C04  083B               	movf	_PresentState^(0+128),w	;volatile
  1586  0C05  2463               	fcall	PL6	;call to abstracted procedure
  1587  0C06  120A  118A  2259  120A  158A  	fcall	_WriteLongInt
  1588                           
  1589                           ;main.c: 92: WriteLongInt(1,12,C_S,2,0);
  1590  0C0B  300C               	movlw	12
  1591  0C0C  00A7               	movwf	WriteLongInt@x
  1592  0C0D  1683               	bsf	3,5	;RP0=1, select bank1
  1593  0C0E  0834               	movf	_C_S^(0+128),w	;volatile
  1594  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  1595  0C10  00A8               	movwf	WriteLongInt@Val
  1596  0C11  1683               	bsf	3,5	;RP0=1, select bank1
  1597  0C12  0835               	movf	(_C_S+1)^(0+128),w	;volatile
  1598  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  1599  0C14  00A9               	movwf	WriteLongInt@Val+1
  1600  0C15  3002               	movlw	2
  1601  0C16  01AA               	clrf	WriteLongInt@Val+2
  1602  0C17  01AB               	clrf	WriteLongInt@Val+3
  1603  0C18  00AC               	movwf	WriteLongInt@size
  1604  0C19  3001               	movlw	1
  1605  0C1A  01AD               	clrf	WriteLongInt@Sign
  1606  0C1B  120A  118A  2259  120A  158A  	fcall	_WriteLongInt
  1607                           
  1608                           ;main.c: 93: WriteLongInt(1,15,Cycle,2,0);
  1609  0C20  300F               	movlw	15
  1610  0C21  00A7               	movwf	WriteLongInt@x
  1611  0C22  1683               	bsf	3,5	;RP0=1, select bank1
  1612  0C23  083A               	movf	_Cycle^(0+128),w	;volatile
  1613  0C24  2463               	fcall	PL6	;call to abstracted procedure
  1614  0C25  120A  118A  2259  120A  158A  	fcall	_WriteLongInt
  1615                           
  1616                           ;main.c: 94: WriteLongInt(2,9,S,5,0);
  1617  0C2A  3009               	movlw	9
  1618  0C2B  00A7               	movwf	WriteLongInt@x
  1619  0C2C  1683               	bsf	3,5	;RP0=1, select bank1
  1620  0C2D  082F               	movf	(_S+3)^(0+128),w	;volatile
  1621  0C2E  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0C2F  00AB               	movwf	WriteLongInt@Val+3
  1623  0C30  1683               	bsf	3,5	;RP0=1, select bank1
  1624  0C31  082E               	movf	(_S+2)^(0+128),w	;volatile
  1625  0C32  1283               	bcf	3,5	;RP0=0, select bank0
  1626  0C33  00AA               	movwf	WriteLongInt@Val+2
  1627  0C34  1683               	bsf	3,5	;RP0=1, select bank1
  1628  0C35  082D               	movf	(_S+1)^(0+128),w	;volatile
  1629  0C36  1283               	bcf	3,5	;RP0=0, select bank0
  1630  0C37  00A9               	movwf	WriteLongInt@Val+1
  1631  0C38  1683               	bsf	3,5	;RP0=1, select bank1
  1632  0C39  082C               	movf	_S^(0+128),w	;volatile
  1633  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  1634  0C3B  00A8               	movwf	WriteLongInt@Val
  1635  0C3C  3005               	movlw	5
  1636  0C3D  00AC               	movwf	WriteLongInt@size
  1637  0C3E  3002               	movlw	2
  1638  0C3F  01AD               	clrf	WriteLongInt@Sign
  1639  0C40  120A  118A  2259  120A  158A  	fcall	_WriteLongInt
  1640                           
  1641                           ;main.c: 95: WriteLongInt(2,15,Firm_Cicle,2,0);
  1642  0C45  300F               	movlw	15
  1643  0C46  00A7               	movwf	WriteLongInt@x
  1644  0C47  086F               	movf	main@Firm_Cicle,w
  1645  0C48  00A8               	movwf	WriteLongInt@Val
  1646  0C49  3002               	movlw	2
  1647  0C4A  01A9               	clrf	WriteLongInt@Val+1
  1648  0C4B  01AA               	clrf	WriteLongInt@Val+2
  1649  0C4C  01AB               	clrf	WriteLongInt@Val+3
  1650  0C4D  00AC               	movwf	WriteLongInt@size
  1651  0C4E  01AD               	clrf	WriteLongInt@Sign
  1652  0C4F  120A  118A  2259  120A  158A  	fcall	_WriteLongInt
  1653                           
  1654                           ;main.c: 98: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1655  0C54  3006               	movlw	6
  1656  0C55  1683               	bsf	3,5	;RP0=1, select bank1
  1657  0C56  00C6               	movwf	(??_main^(0+128)+2)
  1658  0C57  3013               	movlw	19
  1659  0C58  00C5               	movwf	(??_main^(0+128)+1)
  1660  0C59  30B1               	movlw	177
  1661  0C5A  00C4               	movwf	??_main^(0+128)
  1662  0C5B                     u3657:	
  1663  0C5B  0BC4               	decfsz	??_main^(0+128),f
  1664  0C5C  2C5B               	goto	u3657
  1665  0C5D  0BC5               	decfsz	(??_main^(0+128)+1),f
  1666  0C5E  2C5B               	goto	u3657
  1667  0C5F  0BC6               	decfsz	(??_main^(0+128)+2),f
  1668  0C60  2C5B               	goto	u3657
  1669  0C61  2C62               	nop2
  1670  0C62  2BC3               	goto	l2935
  1671  0C63                     __end_of_main:	
  1672  0C63                     PL6:	
  1673  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  1674  0C64  00A8               	movwf	WriteLongInt@Val
  1675  0C65  3002               	movlw	2
  1676  0C66  01A9               	clrf	WriteLongInt@Val+1
  1677  0C67  01AA               	clrf	WriteLongInt@Val+2
  1678  0C68  01AB               	clrf	WriteLongInt@Val+3
  1679  0C69  00AC               	movwf	WriteLongInt@size
  1680  0C6A  3001               	movlw	1
  1681  0C6B  01AD               	clrf	WriteLongInt@Sign
  1682  0C6C  0008               	return
  1683  0C6D                     __end_ofPL6:	
  1684  0C6D                     PL16:	
  1685  0C6D  30FF               	movlw	255
  1686  0C6E  00AF               	movwf	(_S+3)^(0+128)	;volatile
  1687  0C6F  30FE               	movlw	254
  1688  0C70  00AE               	movwf	(_S+2)^(0+128)	;volatile
  1689  0C71  30AE               	movlw	174
  1690  0C72  00AD               	movwf	(_S+1)^(0+128)	;volatile
  1691  0C73  3080               	movlw	128
  1692  0C74  00AC               	movwf	_S^(0+128)	;volatile
  1693  0C75  0008               	return
  1694  0C76                     __end_ofPL16:	
  1695                           
  1696                           	psect	text2
  1697  0427                     __ptext2:	
  1698 ;; *************** function _round *****************
  1699 ;; Defined at:
  1700 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\round.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  x               3   69[BANK0 ] unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  f               3   72[BANK0 ] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  3   69[BANK0 ] unsigned char 
  1707 ;; Registers used:
  1708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1709 ;; Tracked objects:
  1710 ;;		On entry : 300/0
  1711 ;;		On exit  : 300/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       3       0       0       0
  1715 ;;      Locals:         0       3       0       0       0
  1716 ;;      Temps:          0       0       0       0       0
  1717 ;;      Totals:         0       6       0       0       0
  1718 ;;Total ram usage:        6 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    3
  1721 ;; This function calls:
  1722 ;;		___ftadd
  1723 ;;		___ftsub
  1724 ;;		_trunc
  1725 ;; This function is called by:
  1726 ;;		_UART_Init
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           
  1731                           ;psect for function _round
  1732  0427                     _round:	
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1736  0427  27DD  120A  118A   	fcall	PL34	;call to abstracted procedure
  1737  042A  2462  120A  118A   	fcall	_trunc
  1738  042D  0857               	movf	?_trunc,w
  1739  042E  00DF               	movwf	___ftsub@f2
  1740  042F  0858               	movf	?_trunc+1,w
  1741  0430  00E0               	movwf	___ftsub@f2+1
  1742  0431  0859               	movf	?_trunc+2,w
  1743  0432  00E1               	movwf	___ftsub@f2+2
  1744  0433  0865               	movf	round@x,w
  1745  0434  00E2               	movwf	___ftsub@f1
  1746  0435  0866               	movf	round@x+1,w
  1747  0436  00E3               	movwf	___ftsub@f1+1
  1748  0437  0867               	movf	round@x+2,w
  1749  0438  00E4               	movwf	___ftsub@f1+2
  1750  0439  2777  120A  118A   	fcall	___ftsub
  1751  043C  085F               	movf	?___ftsub,w
  1752  043D  00E8               	movwf	round@f
  1753  043E  0860               	movf	?___ftsub+1,w
  1754  043F  00E9               	movwf	round@f+1
  1755  0440  0861               	movf	?___ftsub+2,w
  1756  0441  00EA               	movwf	round@f+2
  1757  0442  0868               	movf	round@f,w
  1758  0443  00BE               	movwf	___ftadd@f1
  1759  0444  0869               	movf	round@f+1,w
  1760  0445  00BF               	movwf	___ftadd@f1+1
  1761  0446  086A               	movf	round@f+2,w
  1762  0447  00C0               	movwf	___ftadd@f1+2
  1763  0448  0865               	movf	round@x,w
  1764  0449  00C1               	movwf	___ftadd@f2
  1765  044A  0866               	movf	round@x+1,w
  1766  044B  00C2               	movwf	___ftadd@f2+1
  1767  044C  0867               	movf	round@x+2,w
  1768  044D  00C3               	movwf	___ftadd@f2+2
  1769  044E  262D  120A  118A   	fcall	___ftadd
  1770  0451  083E               	movf	?___ftadd,w
  1771  0452  00E5               	movwf	round@x
  1772  0453  083F               	movf	?___ftadd+1,w
  1773  0454  00E6               	movwf	round@x+1
  1774  0455  0840               	movf	?___ftadd+2,w
  1775  0456  00E7               	movwf	round@x+2
  1776  0457  27DD  120A  118A   	fcall	PL34	;call to abstracted procedure
  1777  045A  2462               	fcall	_trunc
  1778  045B  0857               	movf	?_trunc,w
  1779  045C  00E5               	movwf	?_round
  1780  045D  0858               	movf	?_trunc+1,w
  1781  045E  00E6               	movwf	?_round+1
  1782  045F  0859               	movf	?_trunc+2,w
  1783  0460  00E7               	movwf	?_round+2
  1784  0461  0008               	return
  1785  0462                     __end_of_round:	
  1786  0462                     __ptext3:	
  1787 ;; *************** function _trunc *****************
  1788 ;; Defined at:
  1789 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\trunc.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  x               3   55[BANK0 ] unsigned char 
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  i               3   58[BANK0 ] unsigned char 
  1794 ;;  expon           2   61[BANK0 ] int 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  3   55[BANK0 ] int 
  1797 ;; Registers used:
  1798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1799 ;; Tracked objects:
  1800 ;;		On entry : 300/0
  1801 ;;		On exit  : 300/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1804 ;;      Params:         0       3       0       0       0
  1805 ;;      Locals:         0       5       0       0       0
  1806 ;;      Temps:          0       0       0       0       0
  1807 ;;      Totals:         0       8       0       0       0
  1808 ;;Total ram usage:        8 bytes
  1809 ;; Hardware stack levels used:    1
  1810 ;; Hardware stack levels required when called:    2
  1811 ;; This function calls:
  1812 ;;		___altoft
  1813 ;;		___fttol
  1814 ;;		_frexp
  1815 ;; This function is called by:
  1816 ;;		_round
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function _trunc
  1822  0462                     _trunc:	
  1823                           
  1824                           ;incstack = 0
  1825                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1826  0462  0857               	movf	trunc@x,w
  1827  0463  00F0               	movwf	frexp@value
  1828  0464  0858               	movf	trunc@x+1,w
  1829  0465  00F1               	movwf	frexp@value+1
  1830  0466  0859               	movf	trunc@x+2,w
  1831  0467  00F2               	movwf	frexp@value+2
  1832  0468  305D               	movlw	(low (trunc@expon| 0))& (0+255)
  1833  0469  00F3               	movwf	frexp@eptr
  1834  046A  2792  120A  118A   	fcall	_frexp
  1835  046D  1FDE               	btfss	trunc@expon+1,7
  1836  046E  2C73               	goto	l2359
  1837  046F  01D7               	clrf	?_trunc
  1838  0470  01D8               	clrf	?_trunc+1
  1839  0471  01D9               	clrf	?_trunc+2
  1840  0472  0008               	return
  1841  0473                     l2359:	
  1842  0473  3000               	movlw	0
  1843  0474  025E               	subwf	trunc@expon+1,w
  1844  0475  3015               	movlw	21
  1845  0476  1903               	skipnz
  1846  0477  025D               	subwf	trunc@expon,w
  1847  0478  1803               	btfsc	3,0
  1848  0479  0008               	return
  1849  047A  0857               	movf	trunc@x,w
  1850  047B  00CA               	movwf	___fttol@f1
  1851  047C  0858               	movf	trunc@x+1,w
  1852  047D  00CB               	movwf	___fttol@f1+1
  1853  047E  0859               	movf	trunc@x+2,w
  1854  047F  00CC               	movwf	___fttol@f1+2
  1855  0480  271C  120A  118A   	fcall	___fttol
  1856  0483  084D               	movf	?___fttol+3,w
  1857  0484  00FB               	movwf	___altoft@c+3
  1858  0485  084C               	movf	?___fttol+2,w
  1859  0486  00FA               	movwf	___altoft@c+2
  1860  0487  084B               	movf	?___fttol+1,w
  1861  0488  00F9               	movwf	___altoft@c+1
  1862  0489  084A               	movf	?___fttol,w
  1863  048A  00F8               	movwf	___altoft@c
  1864  048B  26ED               	fcall	___altoft
  1865  048C  0878               	movf	?___altoft,w
  1866  048D  00DA               	movwf	trunc@i
  1867  048E  0879               	movf	?___altoft+1,w
  1868  048F  00DB               	movwf	trunc@i+1
  1869  0490  087A               	movf	?___altoft+2,w
  1870  0491  00DC               	movwf	trunc@i+2
  1871  0492  085A               	movf	trunc@i,w
  1872  0493  00D7               	movwf	?_trunc
  1873  0494  085B               	movf	trunc@i+1,w
  1874  0495  00D8               	movwf	?_trunc+1
  1875  0496  085C               	movf	trunc@i+2,w
  1876  0497  00D9               	movwf	?_trunc+2
  1877  0498  0008               	return
  1878  0499                     __end_of_trunc:	
  1879  0499                     __ptext1:	
  1880 ;; *************** function _UART_Init *****************
  1881 ;; Defined at:
  1882 ;;		line 3 in file "libs/gsk_usart.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  baudrate        4   75[BANK0 ] const long 
  1885 ;; Auto vars:     Size  Location     Type
  1886 ;;  x               2    6[BANK1 ] unsigned int 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  1    wreg      unsigned char 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1891 ;; Tracked objects:
  1892 ;;		On entry : 300/0
  1893 ;;		On exit  : 300/100
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1896 ;;      Params:         0       4       0       0       0
  1897 ;;      Locals:         0       0       8       0       0
  1898 ;;      Temps:          0       0       0       0       0
  1899 ;;      Totals:         0       4       8       0       0
  1900 ;;Total ram usage:       12 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    4
  1903 ;; This function calls:
  1904 ;;		___altoft
  1905 ;;		___ftadd
  1906 ;;		___ftdiv
  1907 ;;		___ftmul
  1908 ;;		___fttol
  1909 ;;		_round
  1910 ;; This function is called by:
  1911 ;;		_main
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           
  1916                           ;psect for function _UART_Init
  1917  0499                     _UART_Init:	
  1918                           
  1919                           ;gsk_usart.c: 4: uint16_t x;
  1920                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  1921                           
  1922                           ;incstack = 0
  1923                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1924  0499  3024               	movlw	36
  1925  049A  00B2               	movwf	___ftdiv@f1
  1926  049B  3074               	movlw	116
  1927  049C  00B3               	movwf	___ftdiv@f1+1
  1928  049D  304A               	movlw	74
  1929  049E  00B4               	movwf	___ftdiv@f1+2
  1930  049F  086E               	movf	UART_Init@baudrate+3,w
  1931  04A0  00FB               	movwf	___altoft@c+3
  1932  04A1  086D               	movf	UART_Init@baudrate+2,w
  1933  04A2  00FA               	movwf	___altoft@c+2
  1934  04A3  086C               	movf	UART_Init@baudrate+1,w
  1935  04A4  00F9               	movwf	___altoft@c+1
  1936  04A5  086B               	movf	UART_Init@baudrate,w
  1937  04A6  00F8               	movwf	___altoft@c
  1938  04A7  26ED  120A  118A   	fcall	___altoft
  1939  04AA  0878               	movf	?___altoft,w
  1940  04AB  00A3               	movwf	___ftmul@f2
  1941  04AC  0879               	movf	?___altoft+1,w
  1942  04AD  00A4               	movwf	___ftmul@f2+1
  1943  04AE  087A               	movf	?___altoft+2,w
  1944  04AF  00A5               	movwf	___ftmul@f2+2
  1945  04B0  3080               	movlw	128
  1946  04B1  01A0               	clrf	___ftmul@f1
  1947  04B2  00A1               	movwf	___ftmul@f1+1
  1948  04B3  3040               	movlw	64
  1949  04B4  00A2               	movwf	___ftmul@f1+2
  1950  04B5  257E  120A  118A   	fcall	___ftmul
  1951  04B8  0820               	movf	?___ftmul,w
  1952  04B9  00AF               	movwf	___ftdiv@f2
  1953  04BA  0821               	movf	?___ftmul+1,w
  1954  04BB  00B0               	movwf	___ftdiv@f2+1
  1955  04BC  0822               	movf	?___ftmul+2,w
  1956  04BD  00B1               	movwf	___ftdiv@f2+2
  1957  04BE  2516  120A  118A   	fcall	___ftdiv
  1958  04C1  082F               	movf	?___ftdiv,w
  1959  04C2  1683               	bsf	3,5	;RP0=1, select bank1
  1960  04C3  00BC               	movwf	_UART_Init$937^(0+128)
  1961  04C4  1283               	bcf	3,5	;RP0=0, select bank0
  1962  04C5  0830               	movf	?___ftdiv+1,w
  1963  04C6  1683               	bsf	3,5	;RP0=1, select bank1
  1964  04C7  00BD               	movwf	(_UART_Init$937+1)^(0+128)
  1965  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1966  04C9  0831               	movf	?___ftdiv+2,w
  1967  04CA  1683               	bsf	3,5	;RP0=1, select bank1
  1968  04CB  00BE               	movwf	(_UART_Init$937+2)^(0+128)
  1969                           
  1970                           ;gsk_usart.c: 4: uint16_t x;
  1971                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  1972  04CC  083C               	movf	_UART_Init$937^(0+128),w
  1973  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1974  04CE  00E5               	movwf	round@x
  1975  04CF  1683               	bsf	3,5	;RP0=1, select bank1
  1976  04D0  083D               	movf	(_UART_Init$937+1)^(0+128),w
  1977  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1978  04D2  00E6               	movwf	round@x+1
  1979  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  1980  04D4  083E               	movf	(_UART_Init$937+2)^(0+128),w
  1981  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  1982  04D6  00E7               	movwf	round@x+2
  1983  04D7  2427  120A  118A   	fcall	_round
  1984  04DA  0865               	movf	?_round,w
  1985  04DB  1683               	bsf	3,5	;RP0=1, select bank1
  1986  04DC  00BF               	movwf	_UART_Init$938^(0+128)
  1987  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1988  04DE  0866               	movf	?_round+1,w
  1989  04DF  1683               	bsf	3,5	;RP0=1, select bank1
  1990  04E0  00C0               	movwf	(_UART_Init$938+1)^(0+128)
  1991  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  1992  04E2  0867               	movf	?_round+2,w
  1993  04E3  1683               	bsf	3,5	;RP0=1, select bank1
  1994  04E4  00C1               	movwf	(_UART_Init$938+2)^(0+128)
  1995                           
  1996                           ;gsk_usart.c: 4: uint16_t x;
  1997                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  1998  04E5  083F               	movf	_UART_Init$938^(0+128),w
  1999  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  2000  04E7  00C1               	movwf	___ftadd@f2
  2001  04E8  1683               	bsf	3,5	;RP0=1, select bank1
  2002  04E9  0840               	movf	(_UART_Init$938+1)^(0+128),w
  2003  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  2004  04EB  00C2               	movwf	___ftadd@f2+1
  2005  04EC  1683               	bsf	3,5	;RP0=1, select bank1
  2006  04ED  0841               	movf	(_UART_Init$938+2)^(0+128),w
  2007  04EE  1283               	bcf	3,5	;RP0=0, select bank0
  2008  04EF  00C3               	movwf	___ftadd@f2+2
  2009  04F0  3080               	movlw	128
  2010  04F1  01BE               	clrf	___ftadd@f1
  2011  04F2  00BF               	movwf	___ftadd@f1+1
  2012  04F3  30BF               	movlw	191
  2013  04F4  00C0               	movwf	___ftadd@f1+2
  2014  04F5  262D  120A  118A   	fcall	___ftadd
  2015  04F8  083E               	movf	?___ftadd,w
  2016  04F9  00CA               	movwf	___fttol@f1
  2017  04FA  083F               	movf	?___ftadd+1,w
  2018  04FB  00CB               	movwf	___fttol@f1+1
  2019  04FC  0840               	movf	?___ftadd+2,w
  2020  04FD  00CC               	movwf	___fttol@f1+2
  2021  04FE  271C               	fcall	___fttol
  2022  04FF  084B               	movf	?___fttol+1,w
  2023  0500  1683               	bsf	3,5	;RP0=1, select bank1
  2024  0501  00C3               	movwf	(UART_Init@x+1)^(0+128)
  2025  0502  1283               	bcf	3,5	;RP0=0, select bank0
  2026  0503  084A               	movf	?___fttol,w
  2027  0504  1683               	bsf	3,5	;RP0=1, select bank1
  2028  0505  00C2               	movwf	UART_Init@x^(0+128)
  2029                           
  2030                           ;gsk_usart.c: 6: SPBRG = x;
  2031  0506  0099               	movwf	25	;volatile
  2032                           
  2033                           ;gsk_usart.c: 7: SPBRGH = (x>>8);
  2034  0507  0843               	movf	(UART_Init@x^(0+128)+1),w
  2035  0508  009A               	movwf	26	;volatile
  2036                           
  2037                           ;gsk_usart.c: 8: BRGH = 1;
  2038  0509  1518               	bsf	24,2	;volatile
  2039                           
  2040                           ;gsk_usart.c: 9: BRG16 = 1;
  2041  050A  1703               	bsf	3,6	;RP1=1, select bank3
  2042  050B  1587               	bsf	7,3	;volatile
  2043                           
  2044                           ;gsk_usart.c: 10: CREN = 1;
  2045  050C  1283               	bcf	3,5	;RP0=0, select bank0
  2046  050D  1303               	bcf	3,6	;RP1=0, select bank0
  2047  050E  1618               	bsf	24,4	;volatile
  2048                           
  2049                           ;gsk_usart.c: 11: SYNC = 0;
  2050  050F  1683               	bsf	3,5	;RP0=1, select bank1
  2051  0510  1218               	bcf	24,4	;volatile
  2052                           
  2053                           ;gsk_usart.c: 12: SPEN = 1;
  2054  0511  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0512  1798               	bsf	24,7	;volatile
  2056                           
  2057                           ;gsk_usart.c: 15: TXEN = 1;
  2058  0513  1683               	bsf	3,5	;RP0=1, select bank1
  2059  0514  1698               	bsf	24,5	;volatile
  2060  0515  0008               	return
  2061  0516                     __end_of_UART_Init:	
  2062  0516                     __ptext10:	
  2063 ;; *************** function ___ftdiv *****************
  2064 ;; Defined at:
  2065 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  f2              3   15[BANK0 ] float 
  2068 ;;  f1              3   18[BANK0 ] float 
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  f3              3   25[BANK0 ] float 
  2071 ;;  sign            1   29[BANK0 ] unsigned char 
  2072 ;;  exp             1   28[BANK0 ] unsigned char 
  2073 ;;  cntr            1   24[BANK0 ] unsigned char 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  3   15[BANK0 ] float 
  2076 ;; Registers used:
  2077 ;;		wreg, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 300/0
  2080 ;;		On exit  : 300/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2083 ;;      Params:         0       6       0       0       0
  2084 ;;      Locals:         0       6       0       0       0
  2085 ;;      Temps:          0       3       0       0       0
  2086 ;;      Totals:         0      15       0       0       0
  2087 ;;Total ram usage:       15 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    1
  2090 ;; This function calls:
  2091 ;;		___ftpack
  2092 ;; This function is called by:
  2093 ;;		_UART_Init
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           
  2098                           ;psect for function ___ftdiv
  2099  0516                     ___ftdiv:	
  2100                           
  2101                           ;incstack = 0
  2102                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2103  0516  0832               	movf	___ftdiv@f1,w
  2104  0517  00B5               	movwf	??___ftdiv
  2105  0518  0833               	movf	___ftdiv@f1+1,w
  2106  0519  00B6               	movwf	??___ftdiv+1
  2107  051A  0834               	movf	___ftdiv@f1+2,w
  2108  051B  00B7               	movwf	??___ftdiv+2
  2109  051C  1003               	clrc
  2110  051D  0D36               	rlf	??___ftdiv+1,w
  2111  051E  0D37               	rlf	??___ftdiv+2,w
  2112  051F  00BC               	movwf	___ftdiv@exp
  2113  0520  083C               	movf	___ftdiv@exp,w
  2114  0521  1D03               	btfss	3,2
  2115  0522  2D27               	goto	l2501
  2116  0523  01AF               	clrf	?___ftdiv
  2117  0524  01B0               	clrf	?___ftdiv+1
  2118  0525  01B1               	clrf	?___ftdiv+2
  2119  0526  0008               	return
  2120  0527                     l2501:	
  2121  0527  082F               	movf	___ftdiv@f2,w
  2122  0528  00B5               	movwf	??___ftdiv
  2123  0529  0830               	movf	___ftdiv@f2+1,w
  2124  052A  00B6               	movwf	??___ftdiv+1
  2125  052B  0831               	movf	___ftdiv@f2+2,w
  2126  052C  00B7               	movwf	??___ftdiv+2
  2127  052D  1003               	clrc
  2128  052E  0D36               	rlf	??___ftdiv+1,w
  2129  052F  0D37               	rlf	??___ftdiv+2,w
  2130  0530  00BD               	movwf	___ftdiv@sign
  2131  0531  083D               	movf	___ftdiv@sign,w
  2132  0532  1D03               	btfss	3,2
  2133  0533  2D38               	goto	l801
  2134  0534  01AF               	clrf	?___ftdiv
  2135  0535  01B0               	clrf	?___ftdiv+1
  2136  0536  01B1               	clrf	?___ftdiv+2
  2137  0537  0008               	return
  2138  0538                     l801:	
  2139  0538  3089               	movlw	137
  2140  0539  01B9               	clrf	___ftdiv@f3
  2141  053A  01BA               	clrf	___ftdiv@f3+1
  2142  053B  01BB               	clrf	___ftdiv@f3+2
  2143  053C  073D               	addwf	___ftdiv@sign,w
  2144  053D  00B5               	movwf	??___ftdiv
  2145  053E  02BC               	subwf	___ftdiv@exp,f
  2146  053F  0834               	movf	___ftdiv@f1+2,w
  2147  0540  00BD               	movwf	___ftdiv@sign
  2148  0541  0831               	movf	___ftdiv@f2+2,w
  2149  0542  06BD               	xorwf	___ftdiv@sign,f
  2150  0543  3080               	movlw	128
  2151  0544  05BD               	andwf	___ftdiv@sign,f
  2152  0545  3018               	movlw	24
  2153  0546  17B3               	bsf	___ftdiv@f1+1,7
  2154  0547  01B4               	clrf	___ftdiv@f1+2
  2155  0548  17B0               	bsf	___ftdiv@f2+1,7
  2156  0549  01B1               	clrf	___ftdiv@f2+2
  2157  054A  00B8               	movwf	___ftdiv@cntr
  2158  054B                     l2523:	
  2159  054B  1003               	clrc
  2160  054C  0DB9               	rlf	___ftdiv@f3,f
  2161  054D  0DBA               	rlf	___ftdiv@f3+1,f
  2162  054E  0DBB               	rlf	___ftdiv@f3+2,f
  2163  054F  0831               	movf	___ftdiv@f2+2,w
  2164  0550  0234               	subwf	___ftdiv@f1+2,w
  2165  0551  1D03               	skipz
  2166  0552  2D59               	goto	u3115
  2167  0553  0830               	movf	___ftdiv@f2+1,w
  2168  0554  0233               	subwf	___ftdiv@f1+1,w
  2169  0555  1D03               	skipz
  2170  0556  2D59               	goto	u3115
  2171  0557  082F               	movf	___ftdiv@f2,w
  2172  0558  0232               	subwf	___ftdiv@f1,w
  2173  0559                     u3115:	
  2174  0559  1C03               	skipc
  2175  055A  2D67               	goto	L2
  2176  055B  082F               	movf	___ftdiv@f2,w
  2177  055C  02B2               	subwf	___ftdiv@f1,f
  2178  055D  0830               	movf	___ftdiv@f2+1,w
  2179  055E  1C03               	skipc
  2180  055F  0F30               	incfsz	___ftdiv@f2+1,w
  2181  0560  02B3               	subwf	___ftdiv@f1+1,f
  2182  0561  0831               	movf	___ftdiv@f2+2,w
  2183  0562  1C03               	skipc
  2184  0563  0A31               	incf	___ftdiv@f2+2,w
  2185  0564  02B4               	subwf	___ftdiv@f1+2,f
  2186  0565  1439               	bsf	___ftdiv@f3,0
  2187  0566  1003               	clrc
  2188  0567                     L2:	
  2189  0567  0DB2               	rlf	___ftdiv@f1,f
  2190  0568  0DB3               	rlf	___ftdiv@f1+1,f
  2191  0569  0DB4               	rlf	___ftdiv@f1+2,f
  2192  056A  0BB8               	decfsz	___ftdiv@cntr,f
  2193  056B  2D4B               	goto	l2523
  2194  056C  0839               	movf	___ftdiv@f3,w
  2195  056D  00F0               	movwf	___ftpack@arg
  2196  056E  083A               	movf	___ftdiv@f3+1,w
  2197  056F  00F1               	movwf	___ftpack@arg+1
  2198  0570  083B               	movf	___ftdiv@f3+2,w
  2199  0571  00F2               	movwf	___ftpack@arg+2
  2200  0572  083C               	movf	___ftdiv@exp,w
  2201  0573  00F3               	movwf	___ftpack@exp
  2202  0574  083D               	movf	___ftdiv@sign,w
  2203  0575  00F4               	movwf	___ftpack@sign
  2204  0576  25EB               	fcall	___ftpack
  2205  0577  0870               	movf	?___ftpack,w
  2206  0578  00AF               	movwf	?___ftdiv
  2207  0579  0871               	movf	?___ftpack+1,w
  2208  057A  00B0               	movwf	?___ftdiv+1
  2209  057B  0872               	movf	?___ftpack+2,w
  2210  057C  00B1               	movwf	?___ftdiv+2
  2211  057D  0008               	return
  2212  057E                     __end_of___ftdiv:	
  2213  057E                     __ptext9:	
  2214 ;; *************** function ___ftmul *****************
  2215 ;; Defined at:
  2216 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  2217 ;; Parameters:    Size  Location     Type
  2218 ;;  f1              3    0[BANK0 ] float 
  2219 ;;  f2              3    3[BANK0 ] float 
  2220 ;; Auto vars:     Size  Location     Type
  2221 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  2222 ;;  sign            1   14[BANK0 ] unsigned char 
  2223 ;;  cntr            1   13[BANK0 ] unsigned char 
  2224 ;;  exp             1    9[BANK0 ] unsigned char 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  3    0[BANK0 ] float 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0, pclath, cstack
  2229 ;; Tracked objects:
  2230 ;;		On entry : 300/0
  2231 ;;		On exit  : 300/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2234 ;;      Params:         0       6       0       0       0
  2235 ;;      Locals:         0       6       0       0       0
  2236 ;;      Temps:          0       3       0       0       0
  2237 ;;      Totals:         0      15       0       0       0
  2238 ;;Total ram usage:       15 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    1
  2241 ;; This function calls:
  2242 ;;		___ftpack
  2243 ;; This function is called by:
  2244 ;;		_UART_Init
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           
  2249                           ;psect for function ___ftmul
  2250  057E                     ___ftmul:	
  2251                           
  2252                           ;incstack = 0
  2253                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2254  057E  0820               	movf	___ftmul@f1,w
  2255  057F  00A6               	movwf	??___ftmul
  2256  0580  0821               	movf	___ftmul@f1+1,w
  2257  0581  00A7               	movwf	??___ftmul+1
  2258  0582  0822               	movf	___ftmul@f1+2,w
  2259  0583  00A8               	movwf	??___ftmul+2
  2260  0584  1003               	clrc
  2261  0585  0D27               	rlf	??___ftmul+1,w
  2262  0586  0D28               	rlf	??___ftmul+2,w
  2263  0587  00A9               	movwf	___ftmul@exp
  2264  0588  0829               	movf	___ftmul@exp,w
  2265  0589  1D03               	btfss	3,2
  2266  058A  2D8F               	goto	l2541
  2267  058B  01A0               	clrf	?___ftmul
  2268  058C  01A1               	clrf	?___ftmul+1
  2269  058D  01A2               	clrf	?___ftmul+2
  2270  058E  0008               	return
  2271  058F                     l2541:	
  2272  058F  0823               	movf	___ftmul@f2,w
  2273  0590  00A6               	movwf	??___ftmul
  2274  0591  0824               	movf	___ftmul@f2+1,w
  2275  0592  00A7               	movwf	??___ftmul+1
  2276  0593  0825               	movf	___ftmul@f2+2,w
  2277  0594  00A8               	movwf	??___ftmul+2
  2278  0595  1003               	clrc
  2279  0596  0D27               	rlf	??___ftmul+1,w
  2280  0597  0D28               	rlf	??___ftmul+2,w
  2281  0598  00AE               	movwf	___ftmul@sign
  2282  0599  082E               	movf	___ftmul@sign,w
  2283  059A  1D03               	btfss	3,2
  2284  059B  2DA0               	goto	l2545
  2285  059C  01A0               	clrf	?___ftmul
  2286  059D  01A1               	clrf	?___ftmul+1
  2287  059E  01A2               	clrf	?___ftmul+2
  2288  059F  0008               	return
  2289  05A0                     l2545:	
  2290  05A0  082E               	movf	___ftmul@sign,w
  2291  05A1  3E7B               	addlw	123
  2292  05A2  07A9               	addwf	___ftmul@exp,f
  2293  05A3  0822               	movf	___ftmul@f1+2,w
  2294  05A4  00AE               	movwf	___ftmul@sign
  2295  05A5  0825               	movf	___ftmul@f2+2,w
  2296  05A6  06AE               	xorwf	___ftmul@sign,f
  2297  05A7  3080               	movlw	128
  2298  05A8  05AE               	andwf	___ftmul@sign,f
  2299  05A9  3007               	movlw	7
  2300  05AA  17A1               	bsf	___ftmul@f1+1,7
  2301  05AB  17A4               	bsf	___ftmul@f2+1,7
  2302  05AC  01A5               	clrf	___ftmul@f2+2
  2303  05AD  01AA               	clrf	___ftmul@f3_as_product
  2304  05AE  01AB               	clrf	___ftmul@f3_as_product+1
  2305  05AF  01AC               	clrf	___ftmul@f3_as_product+2
  2306  05B0  00AD               	movwf	___ftmul@cntr
  2307  05B1                     l2563:	
  2308  05B1  1C20               	btfss	___ftmul@f1,0
  2309  05B2  2DBA               	goto	l2567
  2310  05B3  27CB  120A  118A   	fcall	PL4	;call to abstracted procedure
  2311  05B6  1803               	skipnc
  2312  05B7  0A25               	incf	___ftmul@f2+2,w
  2313  05B8  1D03               	btfss	3,2
  2314  05B9  07AC               	addwf	___ftmul@f3_as_product+2,f
  2315  05BA                     l2567:	
  2316  05BA  1003               	clrc
  2317  05BB  0CA2               	rrf	___ftmul@f1+2,f
  2318  05BC  0CA1               	rrf	___ftmul@f1+1,f
  2319  05BD  0CA0               	rrf	___ftmul@f1,f
  2320  05BE  1003               	clrc
  2321  05BF  0DA3               	rlf	___ftmul@f2,f
  2322  05C0  0DA4               	rlf	___ftmul@f2+1,f
  2323  05C1  0DA5               	rlf	___ftmul@f2+2,f
  2324  05C2  0BAD               	decfsz	___ftmul@cntr,f
  2325  05C3  2DB1               	goto	l2563
  2326  05C4  3009               	movlw	9
  2327  05C5  00AD               	movwf	___ftmul@cntr
  2328  05C6                     l2575:	
  2329  05C6  1C20               	btfss	___ftmul@f1,0
  2330  05C7  2DCF               	goto	l2579
  2331  05C8  27CB  120A  118A   	fcall	PL4	;call to abstracted procedure
  2332  05CB  1803               	skipnc
  2333  05CC  0A25               	incf	___ftmul@f2+2,w
  2334  05CD  1D03               	btfss	3,2
  2335  05CE  07AC               	addwf	___ftmul@f3_as_product+2,f
  2336  05CF                     l2579:	
  2337  05CF  1003               	clrc
  2338  05D0  0CA2               	rrf	___ftmul@f1+2,f
  2339  05D1  0CA1               	rrf	___ftmul@f1+1,f
  2340  05D2  0CA0               	rrf	___ftmul@f1,f
  2341  05D3  1003               	clrc
  2342  05D4  0CAC               	rrf	___ftmul@f3_as_product+2,f
  2343  05D5  0CAB               	rrf	___ftmul@f3_as_product+1,f
  2344  05D6  0CAA               	rrf	___ftmul@f3_as_product,f
  2345  05D7  0BAD               	decfsz	___ftmul@cntr,f
  2346  05D8  2DC6               	goto	l2575
  2347  05D9  082A               	movf	___ftmul@f3_as_product,w
  2348  05DA  00F0               	movwf	___ftpack@arg
  2349  05DB  082B               	movf	___ftmul@f3_as_product+1,w
  2350  05DC  00F1               	movwf	___ftpack@arg+1
  2351  05DD  082C               	movf	___ftmul@f3_as_product+2,w
  2352  05DE  00F2               	movwf	___ftpack@arg+2
  2353  05DF  0829               	movf	___ftmul@exp,w
  2354  05E0  00F3               	movwf	___ftpack@exp
  2355  05E1  082E               	movf	___ftmul@sign,w
  2356  05E2  00F4               	movwf	___ftpack@sign
  2357  05E3  25EB               	fcall	___ftpack
  2358  05E4  0870               	movf	?___ftpack,w
  2359  05E5  00A0               	movwf	?___ftmul
  2360  05E6  0871               	movf	?___ftpack+1,w
  2361  05E7  00A1               	movwf	?___ftmul+1
  2362  05E8  0872               	movf	?___ftpack+2,w
  2363  05E9  00A2               	movwf	?___ftmul+2
  2364  05EA  0008               	return
  2365  05EB                     __end_of___ftmul:	
  2366  05EB                     __ptext11:	
  2367 ;; *************** function ___ftpack *****************
  2368 ;; Defined at:
  2369 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  arg             3    0[COMMON] unsigned um
  2372 ;;  exp             1    3[COMMON] unsigned char 
  2373 ;;  sign            1    4[COMMON] unsigned char 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  3    0[COMMON] float 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0
  2380 ;; Tracked objects:
  2381 ;;		On entry : 300/0
  2382 ;;		On exit  : 300/0
  2383 ;;		Unchanged: 300/0
  2384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2385 ;;      Params:         5       0       0       0       0
  2386 ;;      Locals:         0       0       0       0       0
  2387 ;;      Temps:          3       0       0       0       0
  2388 ;;      Totals:         8       0       0       0       0
  2389 ;;Total ram usage:        8 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		___altoft
  2395 ;;		___ftadd
  2396 ;;		___ftdiv
  2397 ;;		___ftmul
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           
  2402                           ;psect for function ___ftpack
  2403  05EB                     ___ftpack:	
  2404                           
  2405                           ;incstack = 0
  2406                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2407  05EB  0873               	movf	___ftpack@exp,w
  2408  05EC  1903               	btfsc	3,2
  2409  05ED  2DF3               	goto	l747
  2410  05EE  0872               	movf	___ftpack@arg+2,w
  2411  05EF  0471               	iorwf	___ftpack@arg+1,w
  2412  05F0  0470               	iorwf	___ftpack@arg,w
  2413  05F1  1D03               	skipz
  2414  05F2  2DFC               	goto	l1997
  2415  05F3                     l747:	
  2416  05F3  01F0               	clrf	?___ftpack
  2417  05F4  01F1               	clrf	?___ftpack+1
  2418  05F5  01F2               	clrf	?___ftpack+2
  2419  05F6  0008               	return
  2420  05F7                     l1995:	
  2421  05F7  0AF3               	incf	___ftpack@exp,f
  2422  05F8  1003               	clrc
  2423  05F9  0CF2               	rrf	___ftpack@arg+2,f
  2424  05FA  0CF1               	rrf	___ftpack@arg+1,f
  2425  05FB  0CF0               	rrf	___ftpack@arg,f
  2426  05FC                     l1997:	
  2427  05FC  30FE               	movlw	254
  2428  05FD  0572               	andwf	___ftpack@arg+2,w
  2429  05FE  1903               	btfsc	3,2
  2430  05FF  2E0B               	goto	l2001
  2431  0600  2DF7               	goto	l1995
  2432  0601                     l1999:	
  2433  0601  0AF3               	incf	___ftpack@exp,f
  2434  0602  0AF0               	incf	___ftpack@arg,f
  2435  0603  1903               	skipnz
  2436  0604  0AF1               	incf	___ftpack@arg+1,f
  2437  0605  1903               	skipnz
  2438  0606  0AF2               	incf	___ftpack@arg+2,f
  2439  0607  1003               	clrc
  2440  0608  0CF2               	rrf	___ftpack@arg+2,f
  2441  0609  0CF1               	rrf	___ftpack@arg+1,f
  2442  060A  0CF0               	rrf	___ftpack@arg,f
  2443  060B                     l2001:	
  2444  060B  30FF               	movlw	255
  2445  060C  0572               	andwf	___ftpack@arg+2,w
  2446  060D  1903               	btfsc	3,2
  2447  060E  2E19               	goto	l2005
  2448  060F  2E01               	goto	l1999
  2449  0610                     l2007:	
  2450  0610  3002               	movlw	2
  2451  0611  0273               	subwf	___ftpack@exp,w
  2452  0612  1C03               	btfss	3,0
  2453  0613  2E1B               	goto	l759
  2454  0614  03F3               	decf	___ftpack@exp,f
  2455  0615  1003               	clrc
  2456  0616  0DF0               	rlf	___ftpack@arg,f
  2457  0617  0DF1               	rlf	___ftpack@arg+1,f
  2458  0618  0DF2               	rlf	___ftpack@arg+2,f
  2459  0619                     l2005:	
  2460  0619  1FF1               	btfss	___ftpack@arg+1,7
  2461  061A  2E10               	goto	l2007
  2462  061B                     l759:	
  2463  061B  1C73               	btfss	___ftpack@exp,0
  2464  061C  13F1               	bcf	___ftpack@arg+1,7
  2465  061D  1003               	clrc
  2466  061E  0CF3               	rrf	___ftpack@exp,f
  2467  061F  0873               	movf	___ftpack@exp,w
  2468  0620  00F7               	movwf	??___ftpack+2
  2469  0621  01F6               	clrf	??___ftpack+1
  2470  0622  01F5               	clrf	??___ftpack
  2471  0623  0875               	movf	??___ftpack,w
  2472  0624  04F0               	iorwf	___ftpack@arg,f
  2473  0625  0876               	movf	??___ftpack+1,w
  2474  0626  04F1               	iorwf	___ftpack@arg+1,f
  2475  0627  0877               	movf	??___ftpack+2,w
  2476  0628  04F2               	iorwf	___ftpack@arg+2,f
  2477  0629  0874               	movf	___ftpack@sign,w
  2478  062A  1D03               	btfss	3,2
  2479  062B  17F2               	bsf	___ftpack@arg+2,7
  2480  062C  0008               	return
  2481  062D                     __end_of___ftpack:	
  2482  062D                     __ptext8:	
  2483 ;; *************** function ___ftadd *****************
  2484 ;; Defined at:
  2485 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  2486 ;; Parameters:    Size  Location     Type
  2487 ;;  f1              3   30[BANK0 ] float 
  2488 ;;  f2              3   33[BANK0 ] float 
  2489 ;; Auto vars:     Size  Location     Type
  2490 ;;  exp1            1   41[BANK0 ] unsigned char 
  2491 ;;  exp2            1   40[BANK0 ] unsigned char 
  2492 ;;  sign            1   39[BANK0 ] unsigned char 
  2493 ;; Return value:  Size  Location     Type
  2494 ;;                  3   30[BANK0 ] float 
  2495 ;; Registers used:
  2496 ;;		wreg, status,2, status,0, pclath, cstack
  2497 ;; Tracked objects:
  2498 ;;		On entry : 300/0
  2499 ;;		On exit  : 300/0
  2500 ;;		Unchanged: 0/0
  2501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2502 ;;      Params:         0       6       0       0       0
  2503 ;;      Locals:         0       3       0       0       0
  2504 ;;      Temps:          0       3       0       0       0
  2505 ;;      Totals:         0      12       0       0       0
  2506 ;;Total ram usage:       12 bytes
  2507 ;; Hardware stack levels used:    1
  2508 ;; Hardware stack levels required when called:    1
  2509 ;; This function calls:
  2510 ;;		___ftpack
  2511 ;; This function is called by:
  2512 ;;		_UART_Init
  2513 ;;		___ftsub
  2514 ;;		_round
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           
  2519                           ;psect for function ___ftadd
  2520  062D                     ___ftadd:	
  2521                           
  2522                           ;incstack = 0
  2523                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  2524  062D  083E               	movf	___ftadd@f1,w
  2525  062E  00C4               	movwf	??___ftadd
  2526  062F  083F               	movf	___ftadd@f1+1,w
  2527  0630  00C5               	movwf	??___ftadd+1
  2528  0631  0840               	movf	___ftadd@f1+2,w
  2529  0632  00C6               	movwf	??___ftadd+2
  2530  0633  1003               	clrc
  2531  0634  0D45               	rlf	??___ftadd+1,w
  2532  0635  0D46               	rlf	??___ftadd+2,w
  2533  0636  00C9               	movwf	___ftadd@exp1
  2534  0637  0841               	movf	___ftadd@f2,w
  2535  0638  00C4               	movwf	??___ftadd
  2536  0639  0842               	movf	___ftadd@f2+1,w
  2537  063A  00C5               	movwf	??___ftadd+1
  2538  063B  0843               	movf	___ftadd@f2+2,w
  2539  063C  00C6               	movwf	??___ftadd+2
  2540  063D  1003               	clrc
  2541  063E  0D45               	rlf	??___ftadd+1,w
  2542  063F  0D46               	rlf	??___ftadd+2,w
  2543  0640  00C8               	movwf	___ftadd@exp2
  2544  0641  0849               	movf	___ftadd@exp1,w
  2545  0642  1903               	btfsc	3,2
  2546  0643  2E50               	goto	l2111
  2547  0644  0848               	movf	___ftadd@exp2,w
  2548  0645  0249               	subwf	___ftadd@exp1,w
  2549  0646  0848               	movf	___ftadd@exp2,w
  2550  0647  1803               	skipnc
  2551  0648  2E58               	goto	L1
  2552  0649  00C4               	movwf	??___ftadd
  2553  064A  0849               	movf	___ftadd@exp1,w
  2554  064B  02C4               	subwf	??___ftadd,f
  2555  064C  3019               	movlw	25
  2556  064D  0244               	subwf	??___ftadd,w
  2557  064E  1C03               	skipc
  2558  064F  2E57               	goto	l2115
  2559  0650                     l2111:	
  2560  0650  0841               	movf	___ftadd@f2,w
  2561  0651  00BE               	movwf	?___ftadd
  2562  0652  0842               	movf	___ftadd@f2+1,w
  2563  0653  00BF               	movwf	?___ftadd+1
  2564  0654  0843               	movf	___ftadd@f2+2,w
  2565  0655  00C0               	movwf	?___ftadd+2
  2566  0656  0008               	return
  2567  0657                     l2115:	
  2568  0657  0848               	movf	___ftadd@exp2,w
  2569  0658                     L1:	
  2570  0658  1903               	btfsc	3,2
  2571  0659  0008               	return
  2572  065A  0849               	movf	___ftadd@exp1,w
  2573  065B  0248               	subwf	___ftadd@exp2,w
  2574  065C  1803               	skipnc
  2575  065D  2E66               	goto	l2121
  2576  065E  0849               	movf	___ftadd@exp1,w
  2577  065F  00C4               	movwf	??___ftadd
  2578  0660  0848               	movf	___ftadd@exp2,w
  2579  0661  02C4               	subwf	??___ftadd,f
  2580  0662  3019               	movlw	25
  2581  0663  0244               	subwf	??___ftadd,w
  2582  0664  1803               	btfsc	3,0
  2583  0665  0008               	return
  2584  0666                     l2121:	
  2585  0666  3006               	movlw	6
  2586  0667  00C7               	movwf	___ftadd@sign
  2587  0668  1BC0               	btfsc	___ftadd@f1+2,7
  2588  0669  17C7               	bsf	___ftadd@sign,7
  2589  066A  1BC3               	btfsc	___ftadd@f2+2,7
  2590  066B  1747               	bsf	___ftadd@sign,6
  2591  066C  17BF               	bsf	___ftadd@f1+1,7
  2592  066D  01C0               	clrf	___ftadd@f1+2
  2593  066E  17C2               	bsf	___ftadd@f2+1,7
  2594  066F  01C3               	clrf	___ftadd@f2+2
  2595  0670  0848               	movf	___ftadd@exp2,w
  2596  0671  0249               	subwf	___ftadd@exp1,w
  2597  0672  1803               	skipnc
  2598  0673  2E8D               	goto	l2143
  2599  0674                     l2133:	
  2600  0674  1003               	clrc
  2601  0675  0DC1               	rlf	___ftadd@f2,f
  2602  0676  0DC2               	rlf	___ftadd@f2+1,f
  2603  0677  0DC3               	rlf	___ftadd@f2+2,f
  2604  0678  03C8               	decf	___ftadd@exp2,f
  2605  0679  0848               	movf	___ftadd@exp2,w
  2606  067A  0649               	xorwf	___ftadd@exp1,w
  2607  067B  1903               	skipnz
  2608  067C  2E88               	goto	l2141
  2609  067D  03C7               	decf	___ftadd@sign,f
  2610  067E  0847               	movf	___ftadd@sign,w
  2611  067F  3907               	andlw	7
  2612  0680  1903               	btfsc	3,2
  2613  0681  2E88               	goto	l2141
  2614  0682  2E74               	goto	l2133
  2615  0683                     l2139:	
  2616  0683  1003               	clrc
  2617  0684  0CC0               	rrf	___ftadd@f1+2,f
  2618  0685  0CBF               	rrf	___ftadd@f1+1,f
  2619  0686  0CBE               	rrf	___ftadd@f1,f
  2620  0687  0AC9               	incf	___ftadd@exp1,f
  2621  0688                     l2141:	
  2622  0688  0849               	movf	___ftadd@exp1,w
  2623  0689  0648               	xorwf	___ftadd@exp2,w
  2624  068A  1903               	btfsc	3,2
  2625  068B  2EA9               	goto	l783
  2626  068C  2E83               	goto	l2139
  2627  068D                     l2143:	
  2628  068D  0849               	movf	___ftadd@exp1,w
  2629  068E  0248               	subwf	___ftadd@exp2,w
  2630  068F  1803               	skipnc
  2631  0690  2EA9               	goto	l783
  2632  0691                     l2145:	
  2633  0691  1003               	clrc
  2634  0692  0DBE               	rlf	___ftadd@f1,f
  2635  0693  0DBF               	rlf	___ftadd@f1+1,f
  2636  0694  0DC0               	rlf	___ftadd@f1+2,f
  2637  0695  03C9               	decf	___ftadd@exp1,f
  2638  0696  0848               	movf	___ftadd@exp2,w
  2639  0697  0649               	xorwf	___ftadd@exp1,w
  2640  0698  1903               	skipnz
  2641  0699  2EA5               	goto	l2153
  2642  069A  03C7               	decf	___ftadd@sign,f
  2643  069B  0847               	movf	___ftadd@sign,w
  2644  069C  3907               	andlw	7
  2645  069D  1903               	btfsc	3,2
  2646  069E  2EA5               	goto	l2153
  2647  069F  2E91               	goto	l2145
  2648  06A0                     l2151:	
  2649  06A0  1003               	clrc
  2650  06A1  0CC3               	rrf	___ftadd@f2+2,f
  2651  06A2  0CC2               	rrf	___ftadd@f2+1,f
  2652  06A3  0CC1               	rrf	___ftadd@f2,f
  2653  06A4  0AC8               	incf	___ftadd@exp2,f
  2654  06A5                     l2153:	
  2655  06A5  0849               	movf	___ftadd@exp1,w
  2656  06A6  0648               	xorwf	___ftadd@exp2,w
  2657  06A7  1D03               	skipz
  2658  06A8  2EA0               	goto	l2151
  2659  06A9                     l783:	
  2660  06A9  1FC7               	btfss	___ftadd@sign,7
  2661  06AA  2EB4               	goto	l2159
  2662  06AB  30FF               	movlw	255
  2663  06AC  06BE               	xorwf	___ftadd@f1,f
  2664  06AD  06BF               	xorwf	___ftadd@f1+1,f
  2665  06AE  06C0               	xorwf	___ftadd@f1+2,f
  2666  06AF  0ABE               	incf	___ftadd@f1,f
  2667  06B0  1903               	skipnz
  2668  06B1  0ABF               	incf	___ftadd@f1+1,f
  2669  06B2  1903               	skipnz
  2670  06B3  0AC0               	incf	___ftadd@f1+2,f
  2671  06B4                     l2159:	
  2672  06B4  1F47               	btfss	___ftadd@sign,6
  2673  06B5  2EBF               	goto	l2165
  2674  06B6  30FF               	movlw	255
  2675  06B7  06C1               	xorwf	___ftadd@f2,f
  2676  06B8  06C2               	xorwf	___ftadd@f2+1,f
  2677  06B9  06C3               	xorwf	___ftadd@f2+2,f
  2678  06BA  0AC1               	incf	___ftadd@f2,f
  2679  06BB  1903               	skipnz
  2680  06BC  0AC2               	incf	___ftadd@f2+1,f
  2681  06BD  1903               	skipnz
  2682  06BE  0AC3               	incf	___ftadd@f2+2,f
  2683  06BF                     l2165:	
  2684  06BF  01C7               	clrf	___ftadd@sign
  2685  06C0  083E               	movf	___ftadd@f1,w
  2686  06C1  07C1               	addwf	___ftadd@f2,f
  2687  06C2  083F               	movf	___ftadd@f1+1,w
  2688  06C3  1103               	clrz
  2689  06C4  1803               	skipnc
  2690  06C5  0A3F               	incf	___ftadd@f1+1,w
  2691  06C6  1D03               	btfss	3,2
  2692  06C7  07C2               	addwf	___ftadd@f2+1,f
  2693  06C8  0840               	movf	___ftadd@f1+2,w
  2694  06C9  1103               	clrz
  2695  06CA  1803               	skipnc
  2696  06CB  0A40               	incf	___ftadd@f1+2,w
  2697  06CC  1D03               	btfss	3,2
  2698  06CD  07C3               	addwf	___ftadd@f2+2,f
  2699  06CE  1FC3               	btfss	___ftadd@f2+2,7
  2700  06CF  2EDB               	goto	l2177
  2701  06D0  30FF               	movlw	255
  2702  06D1  06C1               	xorwf	___ftadd@f2,f
  2703  06D2  06C2               	xorwf	___ftadd@f2+1,f
  2704  06D3  06C3               	xorwf	___ftadd@f2+2,f
  2705  06D4  0AC1               	incf	___ftadd@f2,f
  2706  06D5  1903               	skipnz
  2707  06D6  0AC2               	incf	___ftadd@f2+1,f
  2708  06D7  1903               	skipnz
  2709  06D8  0AC3               	incf	___ftadd@f2+2,f
  2710  06D9  01C7               	clrf	___ftadd@sign
  2711  06DA  0AC7               	incf	___ftadd@sign,f
  2712  06DB                     l2177:	
  2713  06DB  0841               	movf	___ftadd@f2,w
  2714  06DC  00F0               	movwf	___ftpack@arg
  2715  06DD  0842               	movf	___ftadd@f2+1,w
  2716  06DE  00F1               	movwf	___ftpack@arg+1
  2717  06DF  0843               	movf	___ftadd@f2+2,w
  2718  06E0  00F2               	movwf	___ftpack@arg+2
  2719  06E1  0849               	movf	___ftadd@exp1,w
  2720  06E2  00F3               	movwf	___ftpack@exp
  2721  06E3  0847               	movf	___ftadd@sign,w
  2722  06E4  00F4               	movwf	___ftpack@sign
  2723  06E5  25EB               	fcall	___ftpack
  2724  06E6  0870               	movf	?___ftpack,w
  2725  06E7  00BE               	movwf	?___ftadd
  2726  06E8  0871               	movf	?___ftpack+1,w
  2727  06E9  00BF               	movwf	?___ftadd+1
  2728  06EA  0872               	movf	?___ftpack+2,w
  2729  06EB  00C0               	movwf	?___ftadd+2
  2730  06EC  0008               	return
  2731  06ED                     __end_of___ftadd:	
  2732  06ED                     __ptext6:	
  2733 ;; *************** function ___altoft *****************
  2734 ;; Defined at:
  2735 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  c               4    8[COMMON] long 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  sign            1   13[COMMON] unsigned char 
  2740 ;;  exp             1   12[COMMON] unsigned char 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  3    8[COMMON] float 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 300/0
  2747 ;;		On exit  : 300/0
  2748 ;;		Unchanged: 300/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2750 ;;      Params:         4       0       0       0       0
  2751 ;;      Locals:         2       0       0       0       0
  2752 ;;      Temps:          0       0       0       0       0
  2753 ;;      Totals:         6       0       0       0       0
  2754 ;;Total ram usage:        6 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    1
  2757 ;; This function calls:
  2758 ;;		___ftpack
  2759 ;; This function is called by:
  2760 ;;		_UART_Init
  2761 ;;		_trunc
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function ___altoft
  2767  06ED                     ___altoft:	
  2768  06ED  308E               	movlw	142
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2772  06EE  01FD               	clrf	___altoft@sign
  2773  06EF  00FC               	movwf	___altoft@exp
  2774  06F0  1FFB               	btfss	___altoft@c+3,7
  2775  06F1  2EFF               	goto	l2099
  2776  06F2  09F8               	comf	___altoft@c,f
  2777  06F3  09F9               	comf	___altoft@c+1,f
  2778  06F4  09FA               	comf	___altoft@c+2,f
  2779  06F5  09FB               	comf	___altoft@c+3,f
  2780  06F6  0AF8               	incf	___altoft@c,f
  2781  06F7  1903               	skipnz
  2782  06F8  0AF9               	incf	___altoft@c+1,f
  2783  06F9  1903               	skipnz
  2784  06FA  0AFA               	incf	___altoft@c+2,f
  2785  06FB  1903               	skipnz
  2786  06FC  0AFB               	incf	___altoft@c+3,f
  2787  06FD  01FD               	clrf	___altoft@sign
  2788  06FE  0AFD               	incf	___altoft@sign,f
  2789  06FF                     l2099:	
  2790  06FF  30FF               	movlw	255
  2791  0700  057B               	andwf	___altoft@c+3,w
  2792  0701  1903               	btfsc	3,2
  2793  0702  2F0A               	goto	l2101
  2794  0703  1003               	clrc
  2795  0704  0CFB               	rrf	___altoft@c+3,f
  2796  0705  0CFA               	rrf	___altoft@c+2,f
  2797  0706  0CF9               	rrf	___altoft@c+1,f
  2798  0707  0CF8               	rrf	___altoft@c,f
  2799  0708  0AFC               	incf	___altoft@exp,f
  2800  0709  2EFF               	goto	l2099
  2801  070A                     l2101:	
  2802  070A  0878               	movf	___altoft@c,w
  2803  070B  00F0               	movwf	___ftpack@arg
  2804  070C  0879               	movf	___altoft@c+1,w
  2805  070D  00F1               	movwf	___ftpack@arg+1
  2806  070E  087A               	movf	___altoft@c+2,w
  2807  070F  00F2               	movwf	___ftpack@arg+2
  2808  0710  087C               	movf	___altoft@exp,w
  2809  0711  00F3               	movwf	___ftpack@exp
  2810  0712  087D               	movf	___altoft@sign,w
  2811  0713  00F4               	movwf	___ftpack@sign
  2812  0714  25EB               	fcall	___ftpack
  2813  0715  0870               	movf	?___ftpack,w
  2814  0716  00F8               	movwf	?___altoft
  2815  0717  0871               	movf	?___ftpack+1,w
  2816  0718  00F9               	movwf	?___altoft+1
  2817  0719  0872               	movf	?___ftpack+2,w
  2818  071A  00FA               	movwf	?___altoft+2
  2819  071B  0008               	return
  2820  071C                     __end_of___altoft:	
  2821  071C                     __ptext5:	
  2822 ;; *************** function ___fttol *****************
  2823 ;; Defined at:
  2824 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  f1              3   42[BANK0 ] float 
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  lval            4   50[BANK0 ] unsigned long 
  2829 ;;  exp1            1   54[BANK0 ] unsigned char 
  2830 ;;  sign1           1   49[BANK0 ] unsigned char 
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  4   42[BANK0 ] long 
  2833 ;; Registers used:
  2834 ;;		wreg, status,2, status,0
  2835 ;; Tracked objects:
  2836 ;;		On entry : 300/0
  2837 ;;		On exit  : 300/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2840 ;;      Params:         0       4       0       0       0
  2841 ;;      Locals:         0       6       0       0       0
  2842 ;;      Temps:          0       3       0       0       0
  2843 ;;      Totals:         0      13       0       0       0
  2844 ;;Total ram usage:       13 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; This function calls:
  2847 ;;		Nothing
  2848 ;; This function is called by:
  2849 ;;		_UART_Init
  2850 ;;		_trunc
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           
  2855                           ;psect for function ___fttol
  2856  071C                     ___fttol:	
  2857                           
  2858                           ;incstack = 0
  2859                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2860  071C  27D6  120A  118A   	fcall	PL24	;call to abstracted procedure
  2861  071F  1003               	clrc
  2862  0720  0D4F               	rlf	??___fttol+1,w
  2863  0721  0D50               	rlf	??___fttol+2,w
  2864  0722  00D6               	movwf	___fttol@exp1
  2865  0723  0856               	movf	___fttol@exp1,w
  2866  0724  1D03               	btfss	3,2
  2867  0725  2F2B               	goto	l2185
  2868  0726                     l2183:	
  2869  0726  01CA               	clrf	?___fttol
  2870  0727  01CB               	clrf	?___fttol+1
  2871  0728  01CC               	clrf	?___fttol+2
  2872  0729  01CD               	clrf	?___fttol+3
  2873  072A  0008               	return
  2874  072B                     l2185:	
  2875  072B  27D6  120A  118A   	fcall	PL24	;call to abstracted procedure
  2876  072E  3017               	movlw	23
  2877  072F                     u2585:	
  2878  072F  1003               	clrc
  2879  0730  0CD0               	rrf	??___fttol+2,f
  2880  0731  0CCF               	rrf	??___fttol+1,f
  2881  0732  0CCE               	rrf	??___fttol,f
  2882  0733  3EFF               	addlw	-1
  2883  0734  1D03               	skipz
  2884  0735  2F2F               	goto	u2585
  2885  0736  084E               	movf	??___fttol,w
  2886  0737  00D1               	movwf	___fttol@sign1
  2887  0738  17CB               	bsf	___fttol@f1+1,7
  2888  0739  01CC               	clrf	___fttol@f1+2
  2889  073A  084A               	movf	___fttol@f1,w
  2890  073B  00D2               	movwf	___fttol@lval
  2891  073C  084B               	movf	___fttol@f1+1,w
  2892  073D  00D3               	movwf	___fttol@lval+1
  2893  073E  084C               	movf	___fttol@f1+2,w
  2894  073F  00D4               	movwf	___fttol@lval+2
  2895  0740  308E               	movlw	142
  2896  0741  01D5               	clrf	___fttol@lval+3
  2897  0742  02D6               	subwf	___fttol@exp1,f
  2898  0743  1FD6               	btfss	___fttol@exp1,7
  2899  0744  2F52               	goto	l2205
  2900  0745  0856               	movf	___fttol@exp1,w
  2901  0746  3A80               	xorlw	128
  2902  0747  3E8F               	addlw	143
  2903  0748  1C03               	btfss	3,0
  2904  0749  2F26               	goto	l2183
  2905  074A                     l2201:	
  2906  074A  1003               	clrc
  2907  074B  0CD5               	rrf	___fttol@lval+3,f
  2908  074C  0CD4               	rrf	___fttol@lval+2,f
  2909  074D  0CD3               	rrf	___fttol@lval+1,f
  2910  074E  0CD2               	rrf	___fttol@lval,f
  2911  074F  0FD6               	incfsz	___fttol@exp1,f
  2912  0750  2F4A               	goto	l2201
  2913  0751  2F60               	goto	l2213
  2914  0752                     l2205:	
  2915  0752  3018               	movlw	24
  2916  0753  0256               	subwf	___fttol@exp1,w
  2917  0754  1803               	btfsc	3,0
  2918  0755  2F26               	goto	l2183
  2919  0756                     l2211:	
  2920  0756  0856               	movf	___fttol@exp1,w
  2921  0757  1903               	btfsc	3,2
  2922  0758  2F60               	goto	l2213
  2923  0759  1003               	clrc
  2924  075A  0DD2               	rlf	___fttol@lval,f
  2925  075B  0DD3               	rlf	___fttol@lval+1,f
  2926  075C  0DD4               	rlf	___fttol@lval+2,f
  2927  075D  0DD5               	rlf	___fttol@lval+3,f
  2928  075E  03D6               	decf	___fttol@exp1,f
  2929  075F  2F56               	goto	l2211
  2930  0760                     l2213:	
  2931  0760  0851               	movf	___fttol@sign1,w
  2932  0761  1903               	btfsc	3,2
  2933  0762  2F6E               	goto	l2217
  2934  0763  09D2               	comf	___fttol@lval,f
  2935  0764  09D3               	comf	___fttol@lval+1,f
  2936  0765  09D4               	comf	___fttol@lval+2,f
  2937  0766  09D5               	comf	___fttol@lval+3,f
  2938  0767  0AD2               	incf	___fttol@lval,f
  2939  0768  1903               	skipnz
  2940  0769  0AD3               	incf	___fttol@lval+1,f
  2941  076A  1903               	skipnz
  2942  076B  0AD4               	incf	___fttol@lval+2,f
  2943  076C  1903               	skipnz
  2944  076D  0AD5               	incf	___fttol@lval+3,f
  2945  076E                     l2217:	
  2946  076E  0855               	movf	___fttol@lval+3,w
  2947  076F  00CD               	movwf	?___fttol+3
  2948  0770  0854               	movf	___fttol@lval+2,w
  2949  0771  00CC               	movwf	?___fttol+2
  2950  0772  0853               	movf	___fttol@lval+1,w
  2951  0773  00CB               	movwf	?___fttol+1
  2952  0774  0852               	movf	___fttol@lval,w
  2953  0775  00CA               	movwf	?___fttol
  2954  0776  0008               	return
  2955  0777                     __end_of___fttol:	
  2956  0777                     __ptext7:	
  2957 ;; *************** function ___ftsub *****************
  2958 ;; Defined at:
  2959 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  f2              3   63[BANK0 ] float 
  2962 ;;  f1              3   66[BANK0 ] float 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  3   63[BANK0 ] float 
  2967 ;; Registers used:
  2968 ;;		wreg, status,2, status,0, pclath, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 300/0
  2971 ;;		On exit  : 300/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2974 ;;      Params:         0       6       0       0       0
  2975 ;;      Locals:         0       0       0       0       0
  2976 ;;      Temps:          0       0       0       0       0
  2977 ;;      Totals:         0       6       0       0       0
  2978 ;;Total ram usage:        6 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    2
  2981 ;; This function calls:
  2982 ;;		___ftadd
  2983 ;; This function is called by:
  2984 ;;		_round
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           
  2989                           ;psect for function ___ftsub
  2990  0777                     ___ftsub:	
  2991                           
  2992                           ;incstack = 0
  2993                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  2994  0777  0861               	movf	___ftsub@f2+2,w
  2995  0778  0460               	iorwf	___ftsub@f2+1,w
  2996  0779  045F               	iorwf	___ftsub@f2,w
  2997  077A  1903               	skipnz
  2998  077B  2F7E               	goto	l2349
  2999  077C  3080               	movlw	128
  3000  077D  06E1               	xorwf	___ftsub@f2+2,f
  3001  077E                     l2349:	
  3002  077E  0862               	movf	___ftsub@f1,w
  3003  077F  00BE               	movwf	___ftadd@f1
  3004  0780  0863               	movf	___ftsub@f1+1,w
  3005  0781  00BF               	movwf	___ftadd@f1+1
  3006  0782  0864               	movf	___ftsub@f1+2,w
  3007  0783  00C0               	movwf	___ftadd@f1+2
  3008  0784  085F               	movf	___ftsub@f2,w
  3009  0785  00C1               	movwf	___ftadd@f2
  3010  0786  0860               	movf	___ftsub@f2+1,w
  3011  0787  00C2               	movwf	___ftadd@f2+1
  3012  0788  0861               	movf	___ftsub@f2+2,w
  3013  0789  00C3               	movwf	___ftadd@f2+2
  3014  078A  262D               	fcall	___ftadd
  3015  078B  083E               	movf	?___ftadd,w
  3016  078C  00DF               	movwf	?___ftsub
  3017  078D  083F               	movf	?___ftadd+1,w
  3018  078E  00E0               	movwf	?___ftsub+1
  3019  078F  0840               	movf	?___ftadd+2,w
  3020  0790  00E1               	movwf	?___ftsub+2
  3021  0791  0008               	return
  3022  0792                     __end_of___ftsub:	
  3023  0792                     __ptext4:	
  3024 ;; *************** function _frexp *****************
  3025 ;; Defined at:
  3026 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  value           3    0[COMMON] int 
  3029 ;;  eptr            1    3[COMMON] PTR int 
  3030 ;;		 -> trunc@expon(2), 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  3    0[COMMON] PTR int 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3037 ;; Tracked objects:
  3038 ;;		On entry : 300/0
  3039 ;;		On exit  : B00/0
  3040 ;;		Unchanged: 300/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3042 ;;      Params:         4       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0
  3044 ;;      Temps:          2       0       0       0       0
  3045 ;;      Totals:         6       0       0       0       0
  3046 ;;Total ram usage:        6 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; This function calls:
  3049 ;;		Nothing
  3050 ;; This function is called by:
  3051 ;;		_trunc
  3052 ;; This function uses a non-reentrant model
  3053 ;;
  3054                           
  3055                           
  3056                           ;psect for function _frexp
  3057  0792                     _frexp:	
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3061  0792  0872               	movf	frexp@value+2,w
  3062  0793  0471               	iorwf	frexp@value+1,w
  3063  0794  0470               	iorwf	frexp@value,w
  3064  0795  1D03               	skipz
  3065  0796  2F9E               	goto	l2227
  3066  0797  0873               	movf	frexp@eptr,w
  3067  0798  0084               	movwf	4
  3068  0799  1383               	bcf	3,7	;select IRP bank0
  3069  079A  0180               	clrf	0
  3070  079B  0A84               	incf	4,f
  3071  079C  0180               	clrf	0
  3072  079D  0008               	return
  3073  079E                     l2227:	
  3074  079E  0872               	movf	frexp@value+2,w
  3075  079F  397F               	andlw	127
  3076  07A0  00F4               	movwf	??_frexp
  3077  07A1  01F5               	clrf	??_frexp+1
  3078  07A2  1003               	clrc
  3079  07A3  0DF4               	rlf	??_frexp,f
  3080  07A4  0DF5               	rlf	??_frexp+1,f
  3081  07A5  0873               	movf	frexp@eptr,w
  3082  07A6  0084               	movwf	4
  3083  07A7  0874               	movf	??_frexp,w
  3084  07A8  1383               	bcf	3,7	;select IRP bank0
  3085  07A9  0080               	movwf	0
  3086  07AA  0A84               	incf	4,f
  3087  07AB  0875               	movf	??_frexp+1,w
  3088  07AC  0080               	movwf	0
  3089  07AD  0D71               	rlf	frexp@value+1,w
  3090  07AE  0D71               	rlf	frexp@value+1,w
  3091  07AF  3901               	andlw	1
  3092  07B0  00F4               	movwf	??_frexp
  3093  07B1  01F5               	clrf	??_frexp+1
  3094  07B2  0873               	movf	frexp@eptr,w
  3095  07B3  0084               	movwf	4
  3096  07B4  0874               	movf	??_frexp,w
  3097  07B5  0480               	iorwf	0,f
  3098  07B6  0A84               	incf	4,f
  3099  07B7  0875               	movf	??_frexp+1,w
  3100  07B8  0480               	iorwf	0,f
  3101  07B9  0873               	movf	frexp@eptr,w
  3102  07BA  0084               	movwf	4
  3103  07BB  3082               	movlw	130
  3104  07BC  0780               	addwf	0,f
  3105  07BD  0F84               	incfsz	4,f
  3106  07BE  0800               	movf	0,w
  3107  07BF  1803               	skipnc
  3108  07C0  0A00               	incf	0,w
  3109  07C1  00FF               	movwf	127
  3110  07C2  3EFF               	addlw	255
  3111  07C3  0080               	movwf	0
  3112  07C4  0384               	decf	4,f
  3113  07C5  0872               	movf	frexp@value+2,w
  3114  07C6  3980               	andlw	-128
  3115  07C7  383F               	iorlw	63
  3116  07C8  00F2               	movwf	frexp@value+2
  3117  07C9  13F1               	bcf	frexp@value+1,7
  3118  07CA  0008               	return
  3119  07CB                     __end_of_frexp:	
  3120  07CB                     PL4:	
  3121  07CB  0823               	movf	___ftmul@f2,w
  3122  07CC  07AA               	addwf	___ftmul@f3_as_product,f
  3123  07CD  0824               	movf	___ftmul@f2+1,w
  3124  07CE  1103               	clrz
  3125  07CF  1803               	skipnc
  3126  07D0  0A24               	incf	___ftmul@f2+1,w
  3127  07D1  1D03               	btfss	3,2
  3128  07D2  07AB               	addwf	___ftmul@f3_as_product+1,f
  3129  07D3  0825               	movf	___ftmul@f2+2,w
  3130  07D4  1103               	clrz
  3131  07D5  0008               	return
  3132  07D6                     __end_ofPL4:	
  3133  07D6                     PL24:	
  3134  07D6  084A               	movf	___fttol@f1,w
  3135  07D7  00CE               	movwf	??___fttol
  3136  07D8  084B               	movf	___fttol@f1+1,w
  3137  07D9  00CF               	movwf	??___fttol+1
  3138  07DA  084C               	movf	___fttol@f1+2,w
  3139  07DB  00D0               	movwf	??___fttol+2
  3140  07DC  0008               	return
  3141  07DD                     __end_ofPL24:	
  3142  07DD                     PL34:	
  3143  07DD  0865               	movf	round@x,w
  3144  07DE  00D7               	movwf	trunc@x
  3145  07DF  0866               	movf	round@x+1,w
  3146  07E0  00D8               	movwf	trunc@x+1
  3147  07E1  0867               	movf	round@x+2,w
  3148  07E2  00D9               	movwf	trunc@x+2
  3149  07E3  0008               	return
  3150  07E4                     __end_ofPL34:	
  3151                           
  3152                           	psect	text14
  3153  0A0E                     __ptext14:	
  3154 ;; *************** function _ReadRTCAsSec *****************
  3155 ;; Defined at:
  3156 ;;		line 27 in file "libs/gsk_RTC_GPS.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;		None
  3159 ;; Auto vars:     Size  Location     Type
  3160 ;;  Out             4   13[BANK0 ] unsigned long 
  3161 ;;  TempVar000      1   17[BANK0 ] unsigned char 
  3162 ;; Return value:  Size  Location     Type
  3163 ;;                  4    0[BANK0 ] unsigned long 
  3164 ;; Registers used:
  3165 ;;		wreg, status,2, status,0, pclath, cstack
  3166 ;; Tracked objects:
  3167 ;;		On entry : B00/800
  3168 ;;		On exit  : 300/0
  3169 ;;		Unchanged: 0/0
  3170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3171 ;;      Params:         0       4       0       0       0
  3172 ;;      Locals:         0       7       0       0       0
  3173 ;;      Temps:          0       7       0       0       0
  3174 ;;      Totals:         0      18       0       0       0
  3175 ;;Total ram usage:       18 bytes
  3176 ;; Hardware stack levels used:    1
  3177 ;; Hardware stack levels required when called:    3
  3178 ;; This function calls:
  3179 ;;		_I2C_ReadAtAddress
  3180 ;;		___lmul
  3181 ;;		___wmul
  3182 ;; This function is called by:
  3183 ;;		_main
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           
  3188                           ;psect for function _ReadRTCAsSec
  3189  0A0E                     _ReadRTCAsSec:	
  3190                           
  3191                           ;gsk_RTC_GPS.c: 30: TempVar000 = I2C_ReadAtAddress(0xde, 0x02);
  3192                           
  3193                           ;incstack = 0
  3194                           ; Regs used in _ReadRTCAsSec: [wreg+status,2+status,0+pclath+cstack]
  3195  0A0E  3002               	movlw	2
  3196  0A0F  00F4               	movwf	I2C_ReadAtAddress@IntAdd
  3197  0A10  30DE               	movlw	222
  3198  0A11  22DD  120A  158A   	fcall	_I2C_ReadAtAddress
  3199  0A14  1283               	bcf	3,5	;RP0=0, select bank0
  3200  0A15  00B1               	movwf	ReadRTCAsSec@TempVar000
  3201                           
  3202                           ;gsk_RTC_GPS.c: 31: Out = ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x03)*10);
  3203  0A16  390F               	andlw	15
  3204  0A17  00A4               	movwf	??_ReadRTCAsSec
  3205  0A18  0E31               	swapf	ReadRTCAsSec@TempVar000,w
  3206  0A19  390F               	andlw	15
  3207  0A1A  3903               	andlw	3
  3208  0A1B  00F0               	movwf	___wmul@multiplier
  3209  0A1C  300A               	movlw	10
  3210  0A1D  01F1               	clrf	___wmul@multiplier+1
  3211  0A1E  00F2               	movwf	___wmul@multiplicand
  3212  0A1F  01F3               	clrf	___wmul@multiplicand+1
  3213  0A20  22C4               	fcall	___wmul
  3214  0A21  0824               	movf	??_ReadRTCAsSec,w
  3215  0A22  0770               	addwf	?___wmul,w
  3216  0A23  00AD               	movwf	ReadRTCAsSec@Out
  3217  0A24  3000               	movlw	0
  3218  0A25  1803               	skipnc
  3219  0A26  3001               	movlw	1
  3220  0A27  0771               	addwf	?___wmul+1,w
  3221  0A28  00AE               	movwf	ReadRTCAsSec@Out+1
  3222  0A29  01AF               	clrf	ReadRTCAsSec@Out+2
  3223  0A2A  1BAE               	btfsc	ReadRTCAsSec@Out+1,7
  3224  0A2B  03AF               	decf	ReadRTCAsSec@Out+2,f
  3225  0A2C  082F               	movf	ReadRTCAsSec@Out+2,w
  3226  0A2D  00B0               	movwf	ReadRTCAsSec@Out+3
  3227                           
  3228                           ;gsk_RTC_GPS.c: 32: Out = Out*3600;
  3229  0A2E  300E               	movlw	14
  3230  0A2F  01F3               	clrf	___lmul@multiplier+3
  3231  0A30  01F2               	clrf	___lmul@multiplier+2
  3232  0A31  00F1               	movwf	___lmul@multiplier+1
  3233  0A32  3010               	movlw	16
  3234  0A33  00F0               	movwf	___lmul@multiplier
  3235  0A34  0830               	movf	ReadRTCAsSec@Out+3,w
  3236  0A35  00F7               	movwf	___lmul@multiplicand+3
  3237  0A36  082F               	movf	ReadRTCAsSec@Out+2,w
  3238  0A37  00F6               	movwf	___lmul@multiplicand+2
  3239  0A38  082E               	movf	ReadRTCAsSec@Out+1,w
  3240  0A39  00F5               	movwf	___lmul@multiplicand+1
  3241  0A3A  082D               	movf	ReadRTCAsSec@Out,w
  3242  0A3B  00F4               	movwf	___lmul@multiplicand
  3243  0A3C  120A  118A  23CB  120A  158A  	fcall	___lmul
  3244  0A41  0873               	movf	?___lmul+3,w
  3245  0A42  00B0               	movwf	ReadRTCAsSec@Out+3
  3246  0A43  0872               	movf	?___lmul+2,w
  3247  0A44  00AF               	movwf	ReadRTCAsSec@Out+2
  3248  0A45  0871               	movf	?___lmul+1,w
  3249  0A46  00AE               	movwf	ReadRTCAsSec@Out+1
  3250  0A47  0870               	movf	?___lmul,w
  3251  0A48  00AD               	movwf	ReadRTCAsSec@Out
  3252  0A49  30DE               	movlw	222
  3253                           
  3254                           ;gsk_RTC_GPS.c: 34: TempVar000 = I2C_ReadAtAddress(0xde, 0x01);
  3255  0A4A  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  3256  0A4B  0AF4               	incf	I2C_ReadAtAddress@IntAdd,f
  3257  0A4C  22DD  120A  158A   	fcall	_I2C_ReadAtAddress
  3258  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  3259  0A50  00B1               	movwf	ReadRTCAsSec@TempVar000
  3260                           
  3261                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  3262  0A51  2338  120A  158A   	fcall	PL14	;call to abstracted procedure
  3263  0A54  22C4  120A  158A   	fcall	___wmul
  3264  0A57  0871               	movf	?___wmul+1,w
  3265  0A58  00AC               	movwf	_ReadRTCAsSec$939+1
  3266  0A59  0870               	movf	?___wmul,w
  3267  0A5A  00AB               	movwf	_ReadRTCAsSec$939
  3268  0A5B  0831               	movf	ReadRTCAsSec@TempVar000,w
  3269  0A5C  390F               	andlw	15
  3270  0A5D  07AB               	addwf	_ReadRTCAsSec$939,f
  3271  0A5E  1803               	skipnc
  3272  0A5F  0AAC               	incf	_ReadRTCAsSec$939+1,f
  3273                           
  3274                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  3275  0A60  082C               	movf	_ReadRTCAsSec$939+1,w
  3276  0A61  00F1               	movwf	___wmul@multiplier+1
  3277  0A62  082B               	movf	_ReadRTCAsSec$939,w
  3278  0A63  00F0               	movwf	___wmul@multiplier
  3279  0A64  303C               	movlw	60
  3280  0A65  00F2               	movwf	___wmul@multiplicand
  3281  0A66  01F3               	clrf	___wmul@multiplicand+1
  3282  0A67  22C4  120A  158A   	fcall	___wmul
  3283  0A6A  0870               	movf	?___wmul,w
  3284  0A6B  00A4               	movwf	??_ReadRTCAsSec
  3285  0A6C  0871               	movf	?___wmul+1,w
  3286  0A6D  00A5               	movwf	??_ReadRTCAsSec+1
  3287  0A6E  3000               	movlw	0
  3288  0A6F  1BA5               	btfsc	??_ReadRTCAsSec+1,7
  3289  0A70  30FF               	movlw	255
  3290  0A71  00A6               	movwf	??_ReadRTCAsSec+2
  3291  0A72  00A7               	movwf	??_ReadRTCAsSec+3
  3292  0A73  0824               	movf	??_ReadRTCAsSec,w
  3293  0A74  07AD               	addwf	ReadRTCAsSec@Out,f
  3294  0A75  0825               	movf	??_ReadRTCAsSec+1,w
  3295  0A76  1103               	clrz
  3296  0A77  1803               	skipnc
  3297  0A78  3E01               	addlw	1
  3298  0A79  1D03               	btfss	3,2
  3299  0A7A  07AE               	addwf	ReadRTCAsSec@Out+1,f
  3300  0A7B  0826               	movf	??_ReadRTCAsSec+2,w
  3301  0A7C  1103               	clrz
  3302  0A7D  1803               	skipnc
  3303  0A7E  3E01               	addlw	1
  3304  0A7F  1D03               	btfss	3,2
  3305  0A80  07AF               	addwf	ReadRTCAsSec@Out+2,f
  3306  0A81  0827               	movf	??_ReadRTCAsSec+3,w
  3307  0A82  1103               	clrz
  3308  0A83  1803               	skipnc
  3309  0A84  3E01               	addlw	1
  3310  0A85  1D03               	btfss	3,2
  3311  0A86  07B0               	addwf	ReadRTCAsSec@Out+3,f
  3312  0A87  30DE               	movlw	222
  3313                           
  3314                           ;gsk_RTC_GPS.c: 37: TempVar000 = I2C_ReadAtAddress(0xde, 0x00);
  3315  0A88  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  3316  0A89  22DD  120A  158A   	fcall	_I2C_ReadAtAddress
  3317  0A8C  1283               	bcf	3,5	;RP0=0, select bank0
  3318  0A8D  00B1               	movwf	ReadRTCAsSec@TempVar000
  3319                           
  3320                           ;gsk_RTC_GPS.c: 38: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10);
  3321  0A8E  390F               	andlw	15
  3322  0A8F  00A4               	movwf	??_ReadRTCAsSec
  3323  0A90  2338  120A  158A   	fcall	PL14	;call to abstracted procedure
  3324  0A93  22C4  120A  158A   	fcall	___wmul
  3325  0A96  0824               	movf	??_ReadRTCAsSec,w
  3326  0A97  0770               	addwf	?___wmul,w
  3327  0A98  00A5               	movwf	??_ReadRTCAsSec+1
  3328  0A99  3000               	movlw	0
  3329  0A9A  1803               	skipnc
  3330  0A9B  3001               	movlw	1
  3331  0A9C  0771               	addwf	?___wmul+1,w
  3332  0A9D  00A6               	movwf	??_ReadRTCAsSec+2
  3333  0A9E  0825               	movf	??_ReadRTCAsSec+1,w
  3334  0A9F  00A7               	movwf	??_ReadRTCAsSec+3
  3335  0AA0  0826               	movf	??_ReadRTCAsSec+2,w
  3336  0AA1  00A8               	movwf	??_ReadRTCAsSec+4
  3337  0AA2  3000               	movlw	0
  3338  0AA3  1BA8               	btfsc	??_ReadRTCAsSec+4,7
  3339  0AA4  30FF               	movlw	255
  3340  0AA5  00A9               	movwf	??_ReadRTCAsSec+5
  3341  0AA6  00AA               	movwf	??_ReadRTCAsSec+6
  3342  0AA7  0827               	movf	??_ReadRTCAsSec+3,w
  3343  0AA8  07AD               	addwf	ReadRTCAsSec@Out,f
  3344  0AA9  0828               	movf	??_ReadRTCAsSec+4,w
  3345  0AAA  1103               	clrz
  3346  0AAB  1803               	skipnc
  3347  0AAC  3E01               	addlw	1
  3348  0AAD  1D03               	btfss	3,2
  3349  0AAE  07AE               	addwf	ReadRTCAsSec@Out+1,f
  3350  0AAF  0829               	movf	??_ReadRTCAsSec+5,w
  3351  0AB0  1103               	clrz
  3352  0AB1  1803               	skipnc
  3353  0AB2  3E01               	addlw	1
  3354  0AB3  1D03               	btfss	3,2
  3355  0AB4  07AF               	addwf	ReadRTCAsSec@Out+2,f
  3356  0AB5  082A               	movf	??_ReadRTCAsSec+6,w
  3357  0AB6  1103               	clrz
  3358  0AB7  1803               	skipnc
  3359  0AB8  3E01               	addlw	1
  3360  0AB9  1D03               	btfss	3,2
  3361  0ABA  07B0               	addwf	ReadRTCAsSec@Out+3,f
  3362                           
  3363                           ;gsk_RTC_GPS.c: 39: return Out;
  3364  0ABB  0830               	movf	ReadRTCAsSec@Out+3,w
  3365  0ABC  00A3               	movwf	?_ReadRTCAsSec+3
  3366  0ABD  082F               	movf	ReadRTCAsSec@Out+2,w
  3367  0ABE  00A2               	movwf	?_ReadRTCAsSec+2
  3368  0ABF  082E               	movf	ReadRTCAsSec@Out+1,w
  3369  0AC0  00A1               	movwf	?_ReadRTCAsSec+1
  3370  0AC1  082D               	movf	ReadRTCAsSec@Out,w
  3371  0AC2  00A0               	movwf	?_ReadRTCAsSec
  3372  0AC3  0008               	return
  3373  0AC4                     __end_of_ReadRTCAsSec:	
  3374  0AC4                     __ptext15:	
  3375 ;; *************** function ___wmul *****************
  3376 ;; Defined at:
  3377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  multiplier      2    0[COMMON] unsigned int 
  3380 ;;  multiplicand    2    2[COMMON] unsigned int 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;  product         2    4[COMMON] unsigned int 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  2    0[COMMON] unsigned int 
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0
  3387 ;; Tracked objects:
  3388 ;;		On entry : 300/800
  3389 ;;		On exit  : 300/0
  3390 ;;		Unchanged: 300/0
  3391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3392 ;;      Params:         4       0       0       0       0
  3393 ;;      Locals:         2       0       0       0       0
  3394 ;;      Temps:          0       0       0       0       0
  3395 ;;      Totals:         6       0       0       0       0
  3396 ;;Total ram usage:        6 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; This function calls:
  3399 ;;		Nothing
  3400 ;; This function is called by:
  3401 ;;		_ReadRTCAsSec
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           
  3406                           ;psect for function ___wmul
  3407  0AC4                     ___wmul:	
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3411  0AC4  01F4               	clrf	___wmul@product
  3412  0AC5  01F5               	clrf	___wmul@product+1
  3413  0AC6                     l2483:	
  3414  0AC6  1C70               	btfss	___wmul@multiplier,0
  3415  0AC7  2ACE               	goto	l2487
  3416  0AC8  0872               	movf	___wmul@multiplicand,w
  3417  0AC9  07F4               	addwf	___wmul@product,f
  3418  0ACA  1803               	skipnc
  3419  0ACB  0AF5               	incf	___wmul@product+1,f
  3420  0ACC  0873               	movf	___wmul@multiplicand+1,w
  3421  0ACD  07F5               	addwf	___wmul@product+1,f
  3422  0ACE                     l2487:	
  3423  0ACE  1003               	clrc
  3424  0ACF  0DF2               	rlf	___wmul@multiplicand,f
  3425  0AD0  0DF3               	rlf	___wmul@multiplicand+1,f
  3426  0AD1  1003               	clrc
  3427  0AD2  0CF1               	rrf	___wmul@multiplier+1,f
  3428  0AD3  0CF0               	rrf	___wmul@multiplier,f
  3429  0AD4  0870               	movf	___wmul@multiplier,w
  3430  0AD5  0471               	iorwf	___wmul@multiplier+1,w
  3431  0AD6  1D03               	btfss	3,2
  3432  0AD7  2AC6               	goto	l2483
  3433  0AD8  0875               	movf	___wmul@product+1,w
  3434  0AD9  00F1               	movwf	?___wmul+1
  3435  0ADA  0874               	movf	___wmul@product,w
  3436  0ADB  00F0               	movwf	?___wmul
  3437  0ADC  0008               	return
  3438  0ADD                     __end_of___wmul:	
  3439  0ADD                     __ptext16:	
  3440 ;; *************** function _I2C_ReadAtAddress *****************
  3441 ;; Defined at:
  3442 ;;		line 55 in file "libs/gsk_i2c.c"
  3443 ;; Parameters:    Size  Location     Type
  3444 ;;  DevID           1    wreg     unsigned char 
  3445 ;;  IntAdd          1    4[COMMON] unsigned char 
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  DevID           1    6[COMMON] unsigned char 
  3448 ;;  data            1    5[COMMON] unsigned char 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      unsigned char 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 300/800
  3455 ;;		On exit  : 300/100
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3458 ;;      Params:         1       0       0       0       0
  3459 ;;      Locals:         2       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0
  3461 ;;      Totals:         3       0       0       0       0
  3462 ;;Total ram usage:        3 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:    2
  3465 ;; This function calls:
  3466 ;;		_I2C_Master_Read
  3467 ;;		_I2C_Master_Start
  3468 ;;		_I2C_Master_Stop
  3469 ;;		_I2C_Master_Write
  3470 ;; This function is called by:
  3471 ;;		_ReadRTCAsSec
  3472 ;; This function uses a non-reentrant model
  3473 ;;
  3474                           
  3475                           
  3476                           ;psect for function _I2C_ReadAtAddress
  3477  0ADD                     _I2C_ReadAtAddress:	
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _I2C_ReadAtAddress: [wreg+status,2+status,0+pclath+cstack]
  3481                           ;I2C_ReadAtAddress@DevID stored from wreg
  3482  0ADD  00F6               	movwf	I2C_ReadAtAddress@DevID
  3483                           
  3484                           ;gsk_i2c.c: 57: I2C_Master_Start();
  3485  0ADE  230B  120A  158A   	fcall	_I2C_Master_Start
  3486                           
  3487                           ;gsk_i2c.c: 58: I2C_Master_Write(DevID);
  3488  0AE1  0876               	movf	I2C_ReadAtAddress@DevID,w
  3489  0AE2  00F0               	movwf	I2C_Master_Write@d
  3490  0AE3  01F1               	clrf	I2C_Master_Write@d+1
  3491  0AE4  2306  120A  158A   	fcall	_I2C_Master_Write
  3492                           
  3493                           ;gsk_i2c.c: 59: I2C_Master_Write(IntAdd);
  3494  0AE7  0874               	movf	I2C_ReadAtAddress@IntAdd,w
  3495  0AE8  00F0               	movwf	I2C_Master_Write@d
  3496  0AE9  01F1               	clrf	I2C_Master_Write@d+1
  3497  0AEA  2306  120A  158A   	fcall	_I2C_Master_Write
  3498                           
  3499                           ;gsk_i2c.c: 60: I2C_Master_Stop();
  3500  0AED  2335  120A  158A   	fcall	_I2C_Master_Stop
  3501                           
  3502                           ;gsk_i2c.c: 62: I2C_Master_Start();
  3503  0AF0  230B  120A  158A   	fcall	_I2C_Master_Start
  3504                           
  3505                           ;gsk_i2c.c: 63: I2C_Master_Write(DevID+1);
  3506  0AF3  0876               	movf	I2C_ReadAtAddress@DevID,w
  3507  0AF4  00F0               	movwf	I2C_Master_Write@d
  3508  0AF5  01F1               	clrf	I2C_Master_Write@d+1
  3509  0AF6  0AF0               	incf	I2C_Master_Write@d,f
  3510  0AF7  1903               	skipnz
  3511  0AF8  0AF1               	incf	I2C_Master_Write@d+1,f
  3512  0AF9  2306  120A  158A   	fcall	_I2C_Master_Write
  3513                           
  3514                           ;gsk_i2c.c: 64: char data = I2C_Master_Read(0);
  3515  0AFC  01F0               	clrf	I2C_Master_Read@a
  3516  0AFD  01F1               	clrf	I2C_Master_Read@a+1
  3517  0AFE  230E  120A  158A   	fcall	_I2C_Master_Read
  3518  0B01  0870               	movf	?_I2C_Master_Read,w
  3519  0B02  00F5               	movwf	I2C_ReadAtAddress@data
  3520                           
  3521                           ;gsk_i2c.c: 65: I2C_Master_Stop();
  3522  0B03  2335               	fcall	_I2C_Master_Stop
  3523                           
  3524                           ;gsk_i2c.c: 66: return data;
  3525  0B04  0875               	movf	I2C_ReadAtAddress@data,w
  3526  0B05  0008               	return
  3527  0B06                     __end_of_I2C_ReadAtAddress:	
  3528  0B06                     __ptext17:	
  3529 ;; *************** function _I2C_Master_Write *****************
  3530 ;; Defined at:
  3531 ;;		line 36 in file "libs/gsk_i2c.c"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;  d               2    0[COMMON] unsigned int 
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, status,2, status,0, pclath, cstack
  3540 ;; Tracked objects:
  3541 ;;		On entry : 200/900
  3542 ;;		On exit  : 300/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3545 ;;      Params:         2       0       0       0       0
  3546 ;;      Locals:         0       0       0       0       0
  3547 ;;      Temps:          0       0       0       0       0
  3548 ;;      Totals:         2       0       0       0       0
  3549 ;;Total ram usage:        2 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    1
  3552 ;; This function calls:
  3553 ;;		_I2C_Master_Wait
  3554 ;; This function is called by:
  3555 ;;		_I2C_ReadAtAddress
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           
  3560                           ;psect for function _I2C_Master_Write
  3561  0B06                     _I2C_Master_Write:	
  3562                           
  3563                           ;gsk_i2c.c: 38: I2C_Master_Wait();
  3564                           
  3565                           ;incstack = 0
  3566                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3567  0B06  232D               	fcall	_I2C_Master_Wait
  3568                           
  3569                           ;gsk_i2c.c: 39: SSPBUF = d;
  3570  0B07  0870               	movf	I2C_Master_Write@d,w
  3571  0B08  1283               	bcf	3,5	;RP0=0, select bank0
  3572  0B09  0093               	movwf	19	;volatile
  3573  0B0A  0008               	return
  3574  0B0B                     __end_of_I2C_Master_Write:	
  3575  0B0B                     __ptext19:	
  3576 ;; *************** function _I2C_Master_Start *****************
  3577 ;; Defined at:
  3578 ;;		line 18 in file "libs/gsk_i2c.c"
  3579 ;; Parameters:    Size  Location     Type
  3580 ;;		None
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;		None
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      void 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0, pclath, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 200/800
  3589 ;;		On exit  : 300/100
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3592 ;;      Params:         0       0       0       0       0
  3593 ;;      Locals:         0       0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0
  3595 ;;      Totals:         0       0       0       0       0
  3596 ;;Total ram usage:        0 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    1
  3599 ;; This function calls:
  3600 ;;		_I2C_Master_Wait
  3601 ;; This function is called by:
  3602 ;;		_I2C_ReadAtAddress
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           
  3607                           ;psect for function _I2C_Master_Start
  3608  0B0B                     _I2C_Master_Start:	
  3609                           
  3610                           ;gsk_i2c.c: 20: I2C_Master_Wait();
  3611                           
  3612                           ;incstack = 0
  3613                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3614  0B0B  232D               	fcall	_I2C_Master_Wait
  3615                           
  3616                           ;gsk_i2c.c: 21: SEN = 1;
  3617  0B0C  1411               	bsf	17,0	;volatile
  3618  0B0D  0008               	return
  3619  0B0E                     __end_of_I2C_Master_Start:	
  3620  0B0E                     __ptext20:	
  3621 ;; *************** function _I2C_Master_Read *****************
  3622 ;; Defined at:
  3623 ;;		line 42 in file "libs/gsk_i2c.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  a               2    0[COMMON] unsigned short 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  temp            2    2[COMMON] unsigned short 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  2    0[COMMON] unsigned short 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0, pclath, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 300/800
  3634 ;;		On exit  : 300/100
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3637 ;;      Params:         2       0       0       0       0
  3638 ;;      Locals:         2       0       0       0       0
  3639 ;;      Temps:          0       0       0       0       0
  3640 ;;      Totals:         4       0       0       0       0
  3641 ;;Total ram usage:        4 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    1
  3644 ;; This function calls:
  3645 ;;		_I2C_Master_Wait
  3646 ;; This function is called by:
  3647 ;;		_I2C_ReadAtAddress
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function _I2C_Master_Read
  3653  0B0E                     _I2C_Master_Read:	
  3654                           
  3655                           ;gsk_i2c.c: 44: unsigned short temp;
  3656                           ;gsk_i2c.c: 45: I2C_Master_Wait();
  3657                           
  3658                           ;incstack = 0
  3659                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  3660  0B0E  232D  120A  158A   	fcall	_I2C_Master_Wait
  3661                           
  3662                           ;gsk_i2c.c: 46: RCEN = 1;
  3663  0B11  1591               	bsf	17,3	;volatile
  3664                           
  3665                           ;gsk_i2c.c: 47: I2C_Master_Wait();
  3666  0B12  232D  120A  158A   	fcall	_I2C_Master_Wait
  3667                           
  3668                           ;gsk_i2c.c: 48: temp = SSPBUF;
  3669  0B15  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0B16  0813               	movf	19,w	;volatile
  3671  0B17  00F2               	movwf	I2C_Master_Read@temp
  3672  0B18  01F3               	clrf	I2C_Master_Read@temp+1
  3673                           
  3674                           ;gsk_i2c.c: 49: I2C_Master_Wait();
  3675  0B19  232D  120A  158A   	fcall	_I2C_Master_Wait
  3676                           
  3677                           ;gsk_i2c.c: 50: ACKDT = (a)?0:1;
  3678  0B1C  0870               	movf	I2C_Master_Read@a,w
  3679  0B1D  0471               	iorwf	I2C_Master_Read@a+1,w
  3680  0B1E  1D03               	btfss	3,2
  3681  0B1F  2B24               	goto	u2660
  3682  0B20  1683               	bsf	3,5	;RP0=1, select bank1
  3683  0B21  1303               	bcf	3,6	;RP1=0, select bank1
  3684  0B22  1691               	bsf	17,5	;volatile
  3685  0B23  2B27               	goto	l2275
  3686  0B24                     u2660:	
  3687  0B24  1683               	bsf	3,5	;RP0=1, select bank1
  3688  0B25  1303               	bcf	3,6	;RP1=0, select bank1
  3689  0B26  1291               	bcf	17,5	;volatile
  3690  0B27                     l2275:	
  3691                           
  3692                           ;gsk_i2c.c: 51: ACKEN = 1;
  3693  0B27  1611               	bsf	17,4	;volatile
  3694                           
  3695                           ;gsk_i2c.c: 52: return temp;
  3696  0B28  0873               	movf	I2C_Master_Read@temp+1,w
  3697  0B29  00F1               	movwf	?_I2C_Master_Read+1
  3698  0B2A  0872               	movf	I2C_Master_Read@temp,w
  3699  0B2B  00F0               	movwf	?_I2C_Master_Read
  3700  0B2C  0008               	return
  3701  0B2D                     __end_of_I2C_Master_Read:	
  3702  0B2D                     __ptext21:	
  3703 ;; *************** function _I2C_Master_Wait *****************
  3704 ;; Defined at:
  3705 ;;		line 13 in file "libs/gsk_i2c.c"
  3706 ;; Parameters:    Size  Location     Type
  3707 ;;		None
  3708 ;; Auto vars:     Size  Location     Type
  3709 ;;		None
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2
  3714 ;; Tracked objects:
  3715 ;;		On entry : 200/900
  3716 ;;		On exit  : 300/100
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3719 ;;      Params:         0       0       0       0       0
  3720 ;;      Locals:         0       0       0       0       0
  3721 ;;      Temps:          0       0       0       0       0
  3722 ;;      Totals:         0       0       0       0       0
  3723 ;;Total ram usage:        0 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_I2C_Master_Start
  3729 ;;		_I2C_Master_Stop
  3730 ;;		_I2C_Master_Write
  3731 ;;		_I2C_Master_Read
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _I2C_Master_Wait
  3737  0B2D                     _I2C_Master_Wait:	
  3738  0B2D                     l159:	
  3739                           ;gsk_i2c.c: 15: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3740                           
  3741                           ;incstack = 0
  3742                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3743                           
  3744  0B2D  1683               	bsf	3,5	;RP0=1, select bank1
  3745  0B2E  1914               	btfsc	20,2	;volatile
  3746  0B2F  2B2D               	goto	l159
  3747  0B30  0811               	movf	17,w	;volatile
  3748  0B31  391F               	andlw	31
  3749  0B32  1903               	btfsc	3,2
  3750  0B33  0008               	return
  3751  0B34  2B2D               	goto	l159
  3752  0B35                     __end_of_I2C_Master_Wait:	
  3753  0B35                     __ptext18:	
  3754 ;; *************** function _I2C_Master_Stop *****************
  3755 ;; Defined at:
  3756 ;;		line 30 in file "libs/gsk_i2c.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;		None
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0, pclath, cstack
  3765 ;; Tracked objects:
  3766 ;;		On entry : 200/800
  3767 ;;		On exit  : 300/100
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3770 ;;      Params:         0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0
  3773 ;;      Totals:         0       0       0       0       0
  3774 ;;Total ram usage:        0 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    1
  3777 ;; This function calls:
  3778 ;;		_I2C_Master_Wait
  3779 ;; This function is called by:
  3780 ;;		_I2C_ReadAtAddress
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           
  3785                           ;psect for function _I2C_Master_Stop
  3786  0B35                     _I2C_Master_Stop:	
  3787                           
  3788                           ;gsk_i2c.c: 32: I2C_Master_Wait();
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3792  0B35  232D               	fcall	_I2C_Master_Wait
  3793                           
  3794                           ;gsk_i2c.c: 33: PEN = 1;
  3795  0B36  1511               	bsf	17,2	;volatile
  3796  0B37  0008               	return
  3797  0B38                     __end_of_I2C_Master_Stop:	
  3798  0B38                     PL14:	
  3799  0B38  0E31               	swapf	ReadRTCAsSec@TempVar000,w
  3800  0B39  390F               	andlw	15
  3801  0B3A  3907               	andlw	7
  3802  0B3B  00F0               	movwf	___wmul@multiplier
  3803  0B3C  300A               	movlw	10
  3804  0B3D  01F1               	clrf	___wmul@multiplier+1
  3805  0B3E  00F2               	movwf	___wmul@multiplicand
  3806  0B3F  01F3               	clrf	___wmul@multiplicand+1
  3807  0B40  0008               	return
  3808  0B41                     __end_ofPL14:	
  3809                           
  3810                           	psect	text25
  3811  0E12                     __ptext25:	
  3812 ;; *************** function _Lcd_Text *****************
  3813 ;; Defined at:
  3814 ;;		line 76 in file "libs/HD44780.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  y               1    wreg     unsigned char 
  3817 ;;  x               1    4[COMMON] unsigned char 
  3818 ;;  buffer          1    5[COMMON] PTR unsigned char 
  3819 ;;		 -> STR_2(2), STR_1(5), 
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  y               1    6[COMMON] unsigned char 
  3822 ;;  data            1    7[COMMON] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3832 ;;      Params:         2       0       0       0       0
  3833 ;;      Locals:         2       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0
  3835 ;;      Totals:         4       0       0       0       0
  3836 ;;Total ram usage:        4 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    2
  3839 ;; This function calls:
  3840 ;;		_Lcd_CharCP
  3841 ;;		_Lcd_Command
  3842 ;; This function is called by:
  3843 ;;		_main
  3844 ;; This function uses a non-reentrant model
  3845 ;;
  3846                           
  3847                           
  3848                           ;psect for function _Lcd_Text
  3849  0E12                     _Lcd_Text:	
  3850                           
  3851                           ;incstack = 0
  3852                           ; Regs used in _Lcd_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3853                           ;Lcd_Text@y stored from wreg
  3854  0E12  00F6               	movwf	Lcd_Text@y
  3855                           
  3856                           ;HD44780.c: 77: unsigned char data;
  3857                           ;HD44780.c: 78: switch(y){
  3858  0E13  2E21               	goto	l2763
  3859  0E14                     l2753:	
  3860  0E14  0874               	movf	Lcd_Text@x,w
  3861  0E15  3E7F               	addlw	127
  3862  0E16  2E1F               	goto	L10
  3863  0E17                     l2755:	
  3864  0E17  0874               	movf	Lcd_Text@x,w
  3865  0E18  3EBF               	addlw	191
  3866  0E19  2E1F               	goto	L10
  3867  0E1A                     l2757:	
  3868  0E1A  0874               	movf	Lcd_Text@x,w
  3869  0E1B  3E93               	addlw	147
  3870  0E1C  2E1F               	goto	L10
  3871  0E1D                     l2759:	
  3872  0E1D  0874               	movf	Lcd_Text@x,w
  3873  0E1E  3ED3               	addlw	211
  3874  0E1F                     L10:	
  3875  0E1F  00F7               	movwf	Lcd_Text@data
  3876  0E20  2E2F               	goto	l2765
  3877  0E21                     l2763:	
  3878  0E21  0876               	movf	Lcd_Text@y,w
  3879                           
  3880                           ; Switch size 1, requested type "space"
  3881                           ; Number of cases is 4, Range of values is 1 to 4
  3882                           ; switch strategies available:
  3883                           ; Name         Instructions Cycles
  3884                           ; simple_byte           13     7 (average)
  3885                           ; direct_byte           23    11 (fixed)
  3886                           ; jumptable            263     9 (fixed)
  3887                           ;	Chosen strategy is simple_byte
  3888  0E22  3A01               	xorlw	1	; case 1
  3889  0E23  1903               	skipnz
  3890  0E24  2E14               	goto	l2753
  3891  0E25  3A03               	xorlw	3	; case 2
  3892  0E26  1903               	skipnz
  3893  0E27  2E17               	goto	l2755
  3894  0E28  3A01               	xorlw	1	; case 3
  3895  0E29  1903               	skipnz
  3896  0E2A  2E1A               	goto	l2757
  3897  0E2B  3A07               	xorlw	7	; case 4
  3898  0E2C  1903               	skipnz
  3899  0E2D  2E1D               	goto	l2759
  3900  0E2E  2E2F               	goto	l2765
  3901  0E2F                     l2765:	
  3902                           
  3903                           ;HD44780.c: 84: Lcd_Command(data);
  3904  0E2F  0877               	movf	Lcd_Text@data,w
  3905  0E30  273E               	fcall	_Lcd_Command
  3906  0E31                     l2771:	
  3907                           ;HD44780.c: 85: while(*buffer)
  3908                           
  3909  0E31  0875               	movf	Lcd_Text@buffer,w
  3910  0E32  0084               	movwf	4
  3911  0E33  120A  118A  2003  120A  158A  	fcall	stringdir
  3912  0E38  3A00               	xorlw	0
  3913  0E39  1903               	btfsc	3,2
  3914  0E3A  0008               	return
  3915                           
  3916                           ;HD44780.c: 86: {
  3917                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  3918  0E3B  0875               	movf	Lcd_Text@buffer,w
  3919  0E3C  0084               	movwf	4
  3920  0E3D  120A  118A  2003  120A  158A  	fcall	stringdir
  3921  0E42  2647  120A  158A   	fcall	_Lcd_CharCP
  3922                           
  3923                           ;HD44780.c: 88: buffer++;
  3924  0E45  0AF5               	incf	Lcd_Text@buffer,f
  3925  0E46  2E31               	goto	l2771
  3926  0E47                     __end_of_Lcd_Text:	
  3927  0E47                     __ptext26:	
  3928 ;; *************** function _Lcd_CharCP *****************
  3929 ;; Defined at:
  3930 ;;		line 115 in file "libs/HD44780.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  c               1    wreg     unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  c               1    3[COMMON] unsigned char 
  3935 ;; Return value:  Size  Location     Type
  3936 ;;                  1    wreg      void 
  3937 ;; Registers used:
  3938 ;;		wreg, status,2, status,0, pclath, cstack
  3939 ;; Tracked objects:
  3940 ;;		On entry : 0/800
  3941 ;;		On exit  : 0/0
  3942 ;;		Unchanged: 0/0
  3943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3944 ;;      Params:         0       0       0       0       0
  3945 ;;      Locals:         1       0       0       0       0
  3946 ;;      Temps:          1       0       0       0       0
  3947 ;;      Totals:         2       0       0       0       0
  3948 ;;Total ram usage:        2 bytes
  3949 ;; Hardware stack levels used:    1
  3950 ;; Hardware stack levels required when called:    1
  3951 ;; This function calls:
  3952 ;;		_Lcd_Delay5500us
  3953 ;;		_Lcd_Delay5us
  3954 ;; This function is called by:
  3955 ;;		_Lcd_Text
  3956 ;;		_Lcd_WriteChar
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           
  3961                           ;psect for function _Lcd_CharCP
  3962  0E47                     _Lcd_CharCP:	
  3963                           
  3964                           ;incstack = 0
  3965                           ; Regs used in _Lcd_CharCP: [wreg+status,2+status,0+pclath+cstack]
  3966                           ;Lcd_CharCP@c stored from wreg
  3967  0E47  00F3               	movwf	Lcd_CharCP@c
  3968                           
  3969                           ;HD44780.c: 116: RA1 = 0; RA0 = 1;
  3970  0E48  1283               	bcf	3,5	;RP0=0, select bank0
  3971  0E49  1303               	bcf	3,6	;RP1=0, select bank0
  3972  0E4A  1085               	bcf	5,1	;volatile
  3973  0E4B  1405               	bsf	5,0	;volatile
  3974                           
  3975                           ;HD44780.c: 117: RA5 = (c & 0b10000000)>>7; RA4 = (c & 0b01000000)>>6;
  3976  0E4C  0873               	movf	Lcd_CharCP@c,w
  3977  0E4D  00F2               	movwf	??_Lcd_CharCP
  3978  0E4E  3007               	movlw	7
  3979  0E4F                     u2115:	
  3980  0E4F  1003               	clrc
  3981  0E50  0CF2               	rrf	??_Lcd_CharCP,f
  3982  0E51  3EFF               	addlw	-1
  3983  0E52  1D03               	skipz
  3984  0E53  2E4F               	goto	u2115
  3985  0E54  1C72               	btfss	??_Lcd_CharCP,0
  3986  0E55  2E5A               	goto	u2120
  3987  0E56  1283               	bcf	3,5	;RP0=0, select bank0
  3988  0E57  1303               	bcf	3,6	;RP1=0, select bank0
  3989  0E58  1685               	bsf	5,5	;volatile
  3990  0E59  2E5D               	goto	u2134
  3991  0E5A                     u2120:	
  3992  0E5A  1283               	bcf	3,5	;RP0=0, select bank0
  3993  0E5B  1303               	bcf	3,6	;RP1=0, select bank0
  3994  0E5C  1285               	bcf	5,5	;volatile
  3995  0E5D                     u2134:	
  3996  0E5D  0873               	movf	Lcd_CharCP@c,w
  3997  0E5E  00F2               	movwf	??_Lcd_CharCP
  3998  0E5F  3006               	movlw	6
  3999  0E60                     u2145:	
  4000  0E60  1003               	clrc
  4001  0E61  0CF2               	rrf	??_Lcd_CharCP,f
  4002  0E62  3EFF               	addlw	-1
  4003  0E63  1D03               	skipz
  4004  0E64  2E60               	goto	u2145
  4005  0E65  1C72               	btfss	??_Lcd_CharCP,0
  4006  0E66  2E6B               	goto	u2150
  4007  0E67  1283               	bcf	3,5	;RP0=0, select bank0
  4008  0E68  1303               	bcf	3,6	;RP1=0, select bank0
  4009  0E69  1605               	bsf	5,4	;volatile
  4010  0E6A  2E6E               	goto	u2164
  4011  0E6B                     u2150:	
  4012  0E6B  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0E6C  1303               	bcf	3,6	;RP1=0, select bank0
  4014  0E6D  1205               	bcf	5,4	;volatile
  4015  0E6E                     u2164:	
  4016                           
  4017                           ;HD44780.c: 118: RA3 = (c & 0b00100000)>>5; RA2 = (c & 0b00010000)>>4;
  4018  0E6E  0873               	movf	Lcd_CharCP@c,w
  4019  0E6F  00F2               	movwf	??_Lcd_CharCP
  4020  0E70  3005               	movlw	5
  4021  0E71                     u2175:	
  4022  0E71  1003               	clrc
  4023  0E72  0CF2               	rrf	??_Lcd_CharCP,f
  4024  0E73  3EFF               	addlw	-1
  4025  0E74  1D03               	skipz
  4026  0E75  2E71               	goto	u2175
  4027  0E76  1C72               	btfss	??_Lcd_CharCP,0
  4028  0E77  2E7C               	goto	u2180
  4029  0E78  1283               	bcf	3,5	;RP0=0, select bank0
  4030  0E79  1303               	bcf	3,6	;RP1=0, select bank0
  4031  0E7A  1585               	bsf	5,3	;volatile
  4032  0E7B  2E7F               	goto	u2194
  4033  0E7C                     u2180:	
  4034  0E7C  1283               	bcf	3,5	;RP0=0, select bank0
  4035  0E7D  1303               	bcf	3,6	;RP1=0, select bank0
  4036  0E7E  1185               	bcf	5,3	;volatile
  4037  0E7F                     u2194:	
  4038  0E7F  0873               	movf	Lcd_CharCP@c,w
  4039  0E80  00F2               	movwf	??_Lcd_CharCP
  4040  0E81  3004               	movlw	4
  4041  0E82                     u2205:	
  4042  0E82  1003               	clrc
  4043  0E83  0CF2               	rrf	??_Lcd_CharCP,f
  4044  0E84  3EFF               	addlw	-1
  4045  0E85  1D03               	skipz
  4046  0E86  2E82               	goto	u2205
  4047  0E87  1C72               	btfss	??_Lcd_CharCP,0
  4048  0E88  2E8D               	goto	u2210
  4049  0E89  1283               	bcf	3,5	;RP0=0, select bank0
  4050  0E8A  1303               	bcf	3,6	;RP1=0, select bank0
  4051  0E8B  1505               	bsf	5,2	;volatile
  4052  0E8C  2E90               	goto	l2047
  4053  0E8D                     u2210:	
  4054  0E8D  1283               	bcf	3,5	;RP0=0, select bank0
  4055  0E8E  1303               	bcf	3,6	;RP1=0, select bank0
  4056  0E8F  1105               	bcf	5,2	;volatile
  4057  0E90                     l2047:	
  4058                           
  4059                           ;HD44780.c: 119: _delay(10);
  4060  0E90  3003               	movlw	3
  4061  0E91  00F2               	movwf	??_Lcd_CharCP
  4062  0E92                     u3667:	
  4063  0E92  0BF2               	decfsz	??_Lcd_CharCP,f
  4064  0E93  2E92               	goto	u3667
  4065                           
  4066                           ;HD44780.c: 120: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4067  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  4068  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  4069  0E96  1485               	bsf	5,1	;volatile
  4070  0E97  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4071  0E9A  1283               	bcf	3,5	;RP0=0, select bank0
  4072  0E9B  1303               	bcf	3,6	;RP1=0, select bank0
  4073  0E9C  1085               	bcf	5,1	;volatile
  4074                           
  4075                           ;HD44780.c: 121: RA5 = (c & 0b00001000)>>3; RA4 = (c & 0b00000100)>>2;
  4076  0E9D  27F2  120A  158A   	fcall	PL30	;call to abstracted procedure
  4077  0EA0  1003               	clrc
  4078  0EA1  0CF2               	rrf	??_Lcd_CharCP,f
  4079  0EA2  1C72               	btfss	??_Lcd_CharCP,0
  4080  0EA3  2EA8               	goto	u2230
  4081  0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  4082  0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  4083  0EA6  1685               	bsf	5,5	;volatile
  4084  0EA7  2EAB               	goto	l2057
  4085  0EA8                     u2230:	
  4086  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  4087  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  4088  0EAA  1285               	bcf	5,5	;volatile
  4089  0EAB                     l2057:	
  4090  0EAB  27F2  120A  158A   	fcall	PL30	;call to abstracted procedure
  4091  0EAE  1C72               	btfss	??_Lcd_CharCP,0
  4092  0EAF  2EB4               	goto	u2250
  4093  0EB0  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0EB1  1303               	bcf	3,6	;RP1=0, select bank0
  4095  0EB2  1605               	bsf	5,4	;volatile
  4096  0EB3  2EB7               	goto	l2059
  4097  0EB4                     u2250:	
  4098  0EB4  1283               	bcf	3,5	;RP0=0, select bank0
  4099  0EB5  1303               	bcf	3,6	;RP1=0, select bank0
  4100  0EB6  1205               	bcf	5,4	;volatile
  4101  0EB7                     l2059:	
  4102                           
  4103                           ;HD44780.c: 122: RA3 = (c & 0b00000010)>>1; RA2 = (c & 0b00000001);
  4104  0EB7  0873               	movf	Lcd_CharCP@c,w
  4105  0EB8  00F2               	movwf	??_Lcd_CharCP
  4106  0EB9  1003               	clrc
  4107  0EBA  0CF2               	rrf	??_Lcd_CharCP,f
  4108  0EBB  1C72               	btfss	??_Lcd_CharCP,0
  4109  0EBC  2EC1               	goto	u2270
  4110  0EBD  1283               	bcf	3,5	;RP0=0, select bank0
  4111  0EBE  1303               	bcf	3,6	;RP1=0, select bank0
  4112  0EBF  1585               	bsf	5,3	;volatile
  4113  0EC0  2EC4               	goto	l2061
  4114  0EC1                     u2270:	
  4115  0EC1  1283               	bcf	3,5	;RP0=0, select bank0
  4116  0EC2  1303               	bcf	3,6	;RP1=0, select bank0
  4117  0EC3  1185               	bcf	5,3	;volatile
  4118  0EC4                     l2061:	
  4119  0EC4  1C73               	btfss	Lcd_CharCP@c,0
  4120  0EC5  2ECA               	goto	u2290
  4121  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
  4122  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
  4123  0EC8  1505               	bsf	5,2	;volatile
  4124  0EC9  2ECD               	goto	l2063
  4125  0ECA                     u2290:	
  4126  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
  4127  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
  4128  0ECC  1105               	bcf	5,2	;volatile
  4129  0ECD                     l2063:	
  4130                           
  4131                           ;HD44780.c: 123: _delay(10);
  4132  0ECD  3003               	movlw	3
  4133  0ECE  00F2               	movwf	??_Lcd_CharCP
  4134  0ECF                     u3677:	
  4135  0ECF  0BF2               	decfsz	??_Lcd_CharCP,f
  4136  0ED0  2ECF               	goto	u3677
  4137                           
  4138                           ;HD44780.c: 124: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4139  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  4140  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  4141  0ED3  1485               	bsf	5,1	;volatile
  4142  0ED4  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4143  0ED7  1283               	bcf	3,5	;RP0=0, select bank0
  4144  0ED8  1303               	bcf	3,6	;RP1=0, select bank0
  4145  0ED9  1085               	bcf	5,1	;volatile
  4146                           
  4147                           ;HD44780.c: 125: Lcd_Delay5us(); Lcd_Delay5500us();
  4148  0EDA  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4149  0EDD  2F35               	ljmp	l1987
  4150  0EDE                     __end_of_Lcd_CharCP:	
  4151  0EDE                     __ptext27:	
  4152 ;; *************** function _Lcd_Init *****************
  4153 ;; Defined at:
  4154 ;;		line 17 in file "libs/HD44780.c"
  4155 ;; Parameters:    Size  Location     Type
  4156 ;;		None
  4157 ;; Auto vars:     Size  Location     Type
  4158 ;;  data            1    4[COMMON] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0, pclath, cstack
  4163 ;; Tracked objects:
  4164 ;;		On entry : B00/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4168 ;;      Params:         0       0       0       0       0
  4169 ;;      Locals:         1       0       0       0       0
  4170 ;;      Temps:          0       0       0       0       0
  4171 ;;      Totals:         1       0       0       0       0
  4172 ;;Total ram usage:        1 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; Hardware stack levels required when called:    2
  4175 ;; This function calls:
  4176 ;;		_Lcd_Command
  4177 ;;		_Lcd_Delay5500us
  4178 ;;		_Lcd_Delay5us
  4179 ;; This function is called by:
  4180 ;;		_main
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184                           
  4185                           ;psect for function _Lcd_Init
  4186  0EDE                     _Lcd_Init:	
  4187                           
  4188                           ;HD44780.c: 19: ANSEL = 0x00;
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4192  0EDE  1683               	bsf	3,5	;RP0=1, select bank3
  4193  0EDF  1703               	bsf	3,6	;RP1=1, select bank3
  4194  0EE0  0188               	clrf	8	;volatile
  4195                           
  4196                           ;HD44780.c: 20: ANSELH = 0x00;
  4197  0EE1  0189               	clrf	9	;volatile
  4198                           
  4199                           ;HD44780.c: 23: unsigned char data;
  4200                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  4201  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
  4202  0EE3  27EB  120A  158A   	fcall	PL26	;call to abstracted procedure
  4203                           
  4204                           ;HD44780.c: 25: RA5 = 0; RA4 = 0; RA3 = 0; RA2 = 0; RA1 = 0; RA0 = 0;
  4205  0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  4206  0EE7  27EB  120A  158A   	fcall	PL26	;call to abstracted procedure
  4207                           
  4208                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  4209  0EEA  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4210  0EED  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4211  0EF0  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4212                           
  4213                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  4214  0EF3  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4215  0EF6  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4216  0EF9  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4217                           
  4218                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  4219  0EFC  01F4               	clrf	Lcd_Init@data
  4220  0EFD  0AF4               	incf	Lcd_Init@data,f
  4221  0EFE                     l52:	
  4222                           
  4223                           ;HD44780.c: 29: {
  4224                           ;HD44780.c: 30: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  4225  0EFE  27D9  120A  158A   	fcall	PL18	;call to abstracted procedure
  4226                           
  4227                           ;HD44780.c: 31: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 1; RA0 = 0;
  4228  0F01  1285               	bcf	5,5	;volatile
  4229  0F02  1205               	bcf	5,4	;volatile
  4230  0F03  1585               	bsf	5,3	;volatile
  4231  0F04  1505               	bsf	5,2	;volatile
  4232  0F05  1485               	bsf	5,1	;volatile
  4233  0F06  1005               	bcf	5,0	;volatile
  4234                           
  4235                           ;HD44780.c: 32: Lcd_Delay5us();
  4236  0F07  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4237                           
  4238                           ;HD44780.c: 33: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  4239  0F0A  27D9  120A  158A   	fcall	PL18	;call to abstracted procedure
  4240                           
  4241                           ;HD44780.c: 34: Lcd_Delay5500us();
  4242  0F0D  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4243  0F10  3004               	movlw	4
  4244  0F11  0AF4               	incf	Lcd_Init@data,f
  4245  0F12  0274               	subwf	Lcd_Init@data,w
  4246  0F13  1C03               	skipc
  4247  0F14  2EFE               	goto	l52
  4248                           
  4249                           ;HD44780.c: 35: }
  4250                           ;HD44780.c: 36: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  4251  0F15  27E2  120A  158A   	fcall	PL20	;call to abstracted procedure
  4252                           
  4253                           ;HD44780.c: 37: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 1; RA0 = 0;
  4254  0F18  1285               	bcf	5,5	;volatile
  4255  0F19  1205               	bcf	5,4	;volatile
  4256  0F1A  1585               	bsf	5,3	;volatile
  4257  0F1B  1105               	bcf	5,2	;volatile
  4258  0F1C  1485               	bsf	5,1	;volatile
  4259  0F1D  1005               	bcf	5,0	;volatile
  4260                           
  4261                           ;HD44780.c: 38: Lcd_Delay5us();
  4262  0F1E  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4263                           
  4264                           ;HD44780.c: 39: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  4265  0F21  27E2  120A  158A   	fcall	PL20	;call to abstracted procedure
  4266                           
  4267                           ;HD44780.c: 40: Lcd_Delay5500us();
  4268  0F24  2735  120A  158A   	fcall	_Lcd_Delay5500us
  4269  0F27  3028               	movlw	40
  4270  0F28  273E  120A  158A   	fcall	_Lcd_Command
  4271  0F2B  3010               	movlw	16
  4272  0F2C  273E  120A  158A   	fcall	_Lcd_Command
  4273  0F2F  3001               	movlw	1
  4274  0F30  273E  120A  158A   	fcall	_Lcd_Command
  4275  0F33  300F               	movlw	15
  4276  0F34  2F3E               	ljmp	_Lcd_Command
  4277  0F35                     __end_of_Lcd_Init:	
  4278  0F35                     __ptext30:	
  4279 ;; *************** function _Lcd_Delay5500us *****************
  4280 ;; Defined at:
  4281 ;;		line 152 in file "libs/HD44780.c"
  4282 ;; Parameters:    Size  Location     Type
  4283 ;;		None
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;		None
  4286 ;; Return value:  Size  Location     Type
  4287 ;;                  1    wreg      void 
  4288 ;; Registers used:
  4289 ;;		wreg
  4290 ;; Tracked objects:
  4291 ;;		On entry : 0/800
  4292 ;;		On exit  : 0/0
  4293 ;;		Unchanged: 0/0
  4294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4295 ;;      Params:         0       0       0       0       0
  4296 ;;      Locals:         0       0       0       0       0
  4297 ;;      Temps:          2       0       0       0       0
  4298 ;;      Totals:         2       0       0       0       0
  4299 ;;Total ram usage:        2 bytes
  4300 ;; Hardware stack levels used:    1
  4301 ;; This function calls:
  4302 ;;		Nothing
  4303 ;; This function is called by:
  4304 ;;		_Lcd_Init
  4305 ;;		_Lcd_CharCP
  4306 ;;		_Lcd_Command
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           
  4311                           ;psect for function _Lcd_Delay5500us
  4312  0F35                     _Lcd_Delay5500us:	
  4313  0F35                     l1987:	
  4314                           ;incstack = 0
  4315                           ; Regs used in _Lcd_Delay5500us: [wreg]
  4316                           
  4317                           
  4318                           ;HD44780.c: 153: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4319  0F35  3008               	movlw	8
  4320  0F36  00F1               	movwf	??_Lcd_Delay5500us+1
  4321  0F37  3023               	movlw	35
  4322  0F38  00F0               	movwf	??_Lcd_Delay5500us
  4323  0F39                     u3707:	
  4324  0F39  0BF0               	decfsz	??_Lcd_Delay5500us,f
  4325  0F3A  2F39               	goto	u3707
  4326  0F3B  0BF1               	decfsz	??_Lcd_Delay5500us+1,f
  4327  0F3C  2F39               	goto	u3707
  4328  0F3D  0008               	return
  4329  0F3E                     __end_of_Lcd_Delay5500us:	
  4330  0F3E                     __ptext28:	
  4331 ;; *************** function _Lcd_Command *****************
  4332 ;; Defined at:
  4333 ;;		line 132 in file "libs/HD44780.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  command         1    wreg     unsigned char 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  command         1    3[COMMON] unsigned char 
  4338 ;; Return value:  Size  Location     Type
  4339 ;;                  1    wreg      void 
  4340 ;; Registers used:
  4341 ;;		wreg, status,2, status,0, pclath, cstack
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/800
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4347 ;;      Params:         0       0       0       0       0
  4348 ;;      Locals:         1       0       0       0       0
  4349 ;;      Temps:          1       0       0       0       0
  4350 ;;      Totals:         2       0       0       0       0
  4351 ;;Total ram usage:        2 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    1
  4354 ;; This function calls:
  4355 ;;		_Lcd_Delay5500us
  4356 ;;		_Lcd_Delay5us
  4357 ;; This function is called by:
  4358 ;;		_Lcd_Init
  4359 ;;		_Lcd_Text
  4360 ;;		_Lcd_WriteChar
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _Lcd_Command
  4366  0F3E                     _Lcd_Command:	
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+pclath+cstack]
  4370                           ;Lcd_Command@command stored from wreg
  4371  0F3E  00F3               	movwf	Lcd_Command@command
  4372                           
  4373                           ;HD44780.c: 133: RA1 = 0; RA0 = 0;
  4374  0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  4375  0F40  1303               	bcf	3,6	;RP1=0, select bank0
  4376  0F41  1085               	bcf	5,1	;volatile
  4377  0F42  1005               	bcf	5,0	;volatile
  4378                           
  4379                           ;HD44780.c: 134: RA5 = (command & 0b10000000)>>7; RA4 = (command & 0b01000000)>>6;
  4380  0F43  0873               	movf	Lcd_Command@command,w
  4381  0F44  00F2               	movwf	??_Lcd_Command
  4382  0F45  3007               	movlw	7
  4383  0F46                     u1915:	
  4384  0F46  1003               	clrc
  4385  0F47  0CF2               	rrf	??_Lcd_Command,f
  4386  0F48  3EFF               	addlw	-1
  4387  0F49  1D03               	skipz
  4388  0F4A  2F46               	goto	u1915
  4389  0F4B  1C72               	btfss	??_Lcd_Command,0
  4390  0F4C  2F51               	goto	u1920
  4391  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  4392  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  4393  0F4F  1685               	bsf	5,5	;volatile
  4394  0F50  2F54               	goto	u1934
  4395  0F51                     u1920:	
  4396  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  4397  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  4398  0F53  1285               	bcf	5,5	;volatile
  4399  0F54                     u1934:	
  4400  0F54  0873               	movf	Lcd_Command@command,w
  4401  0F55  00F2               	movwf	??_Lcd_Command
  4402  0F56  3006               	movlw	6
  4403  0F57                     u1945:	
  4404  0F57  1003               	clrc
  4405  0F58  0CF2               	rrf	??_Lcd_Command,f
  4406  0F59  3EFF               	addlw	-1
  4407  0F5A  1D03               	skipz
  4408  0F5B  2F57               	goto	u1945
  4409  0F5C  1C72               	btfss	??_Lcd_Command,0
  4410  0F5D  2F62               	goto	u1950
  4411  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  4412  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  4413  0F60  1605               	bsf	5,4	;volatile
  4414  0F61  2F65               	goto	u1964
  4415  0F62                     u1950:	
  4416  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  4417  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  4418  0F64  1205               	bcf	5,4	;volatile
  4419  0F65                     u1964:	
  4420                           
  4421                           ;HD44780.c: 135: RA3 = (command & 0b00100000)>>5; RA2 = (command & 0b00010000)>>4;
  4422  0F65  0873               	movf	Lcd_Command@command,w
  4423  0F66  00F2               	movwf	??_Lcd_Command
  4424  0F67  3005               	movlw	5
  4425  0F68                     u1975:	
  4426  0F68  1003               	clrc
  4427  0F69  0CF2               	rrf	??_Lcd_Command,f
  4428  0F6A  3EFF               	addlw	-1
  4429  0F6B  1D03               	skipz
  4430  0F6C  2F68               	goto	u1975
  4431  0F6D  1C72               	btfss	??_Lcd_Command,0
  4432  0F6E  2F73               	goto	u1980
  4433  0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  4434  0F70  1303               	bcf	3,6	;RP1=0, select bank0
  4435  0F71  1585               	bsf	5,3	;volatile
  4436  0F72  2F76               	goto	u1994
  4437  0F73                     u1980:	
  4438  0F73  1283               	bcf	3,5	;RP0=0, select bank0
  4439  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  4440  0F75  1185               	bcf	5,3	;volatile
  4441  0F76                     u1994:	
  4442  0F76  0873               	movf	Lcd_Command@command,w
  4443  0F77  00F2               	movwf	??_Lcd_Command
  4444  0F78  3004               	movlw	4
  4445  0F79                     u2005:	
  4446  0F79  1003               	clrc
  4447  0F7A  0CF2               	rrf	??_Lcd_Command,f
  4448  0F7B  3EFF               	addlw	-1
  4449  0F7C  1D03               	skipz
  4450  0F7D  2F79               	goto	u2005
  4451  0F7E  1C72               	btfss	??_Lcd_Command,0
  4452  0F7F  2F84               	goto	u2010
  4453  0F80  1283               	bcf	3,5	;RP0=0, select bank0
  4454  0F81  1303               	bcf	3,6	;RP1=0, select bank0
  4455  0F82  1505               	bsf	5,2	;volatile
  4456  0F83  2F87               	goto	l2019
  4457  0F84                     u2010:	
  4458  0F84  1283               	bcf	3,5	;RP0=0, select bank0
  4459  0F85  1303               	bcf	3,6	;RP1=0, select bank0
  4460  0F86  1105               	bcf	5,2	;volatile
  4461  0F87                     l2019:	
  4462                           
  4463                           ;HD44780.c: 136: _delay(10);
  4464  0F87  3003               	movlw	3
  4465  0F88  00F2               	movwf	??_Lcd_Command
  4466  0F89                     u3687:	
  4467  0F89  0BF2               	decfsz	??_Lcd_Command,f
  4468  0F8A  2F89               	goto	u3687
  4469                           
  4470                           ;HD44780.c: 137: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4471  0F8B  1283               	bcf	3,5	;RP0=0, select bank0
  4472  0F8C  1303               	bcf	3,6	;RP1=0, select bank0
  4473  0F8D  1485               	bsf	5,1	;volatile
  4474  0F8E  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4475  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  4476  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  4477  0F93  1085               	bcf	5,1	;volatile
  4478                           
  4479                           ;HD44780.c: 138: RA5 = (command & 0b00001000)>>3; RA4 = (command & 0b00000100)>>2;
  4480  0F94  27F9  120A  158A   	fcall	PL32	;call to abstracted procedure
  4481  0F97  1003               	clrc
  4482  0F98  0CF2               	rrf	??_Lcd_Command,f
  4483  0F99  1C72               	btfss	??_Lcd_Command,0
  4484  0F9A  2F9F               	goto	u2030
  4485  0F9B  1283               	bcf	3,5	;RP0=0, select bank0
  4486  0F9C  1303               	bcf	3,6	;RP1=0, select bank0
  4487  0F9D  1685               	bsf	5,5	;volatile
  4488  0F9E  2FA2               	goto	l2029
  4489  0F9F                     u2030:	
  4490  0F9F  1283               	bcf	3,5	;RP0=0, select bank0
  4491  0FA0  1303               	bcf	3,6	;RP1=0, select bank0
  4492  0FA1  1285               	bcf	5,5	;volatile
  4493  0FA2                     l2029:	
  4494  0FA2  27F9  120A  158A   	fcall	PL32	;call to abstracted procedure
  4495  0FA5  1C72               	btfss	??_Lcd_Command,0
  4496  0FA6  2FAB               	goto	u2050
  4497  0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  4498  0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  4499  0FA9  1605               	bsf	5,4	;volatile
  4500  0FAA  2FAE               	goto	l2031
  4501  0FAB                     u2050:	
  4502  0FAB  1283               	bcf	3,5	;RP0=0, select bank0
  4503  0FAC  1303               	bcf	3,6	;RP1=0, select bank0
  4504  0FAD  1205               	bcf	5,4	;volatile
  4505  0FAE                     l2031:	
  4506                           
  4507                           ;HD44780.c: 139: RA3 = (command & 0b00000010)>>1; RA2 = (command & 0b00000001);
  4508  0FAE  0873               	movf	Lcd_Command@command,w
  4509  0FAF  00F2               	movwf	??_Lcd_Command
  4510  0FB0  1003               	clrc
  4511  0FB1  0CF2               	rrf	??_Lcd_Command,f
  4512  0FB2  1C72               	btfss	??_Lcd_Command,0
  4513  0FB3  2FB8               	goto	u2070
  4514  0FB4  1283               	bcf	3,5	;RP0=0, select bank0
  4515  0FB5  1303               	bcf	3,6	;RP1=0, select bank0
  4516  0FB6  1585               	bsf	5,3	;volatile
  4517  0FB7  2FBB               	goto	l2033
  4518  0FB8                     u2070:	
  4519  0FB8  1283               	bcf	3,5	;RP0=0, select bank0
  4520  0FB9  1303               	bcf	3,6	;RP1=0, select bank0
  4521  0FBA  1185               	bcf	5,3	;volatile
  4522  0FBB                     l2033:	
  4523  0FBB  1C73               	btfss	Lcd_Command@command,0
  4524  0FBC  2FC1               	goto	u2090
  4525  0FBD  1283               	bcf	3,5	;RP0=0, select bank0
  4526  0FBE  1303               	bcf	3,6	;RP1=0, select bank0
  4527  0FBF  1505               	bsf	5,2	;volatile
  4528  0FC0  2FC4               	goto	l2035
  4529  0FC1                     u2090:	
  4530  0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  4531  0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  4532  0FC3  1105               	bcf	5,2	;volatile
  4533  0FC4                     l2035:	
  4534                           
  4535                           ;HD44780.c: 140: _delay(10);
  4536  0FC4  3003               	movlw	3
  4537  0FC5  00F2               	movwf	??_Lcd_Command
  4538  0FC6                     u3697:	
  4539  0FC6  0BF2               	decfsz	??_Lcd_Command,f
  4540  0FC7  2FC6               	goto	u3697
  4541                           
  4542                           ;HD44780.c: 141: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4543  0FC8  1283               	bcf	3,5	;RP0=0, select bank0
  4544  0FC9  1303               	bcf	3,6	;RP1=0, select bank0
  4545  0FCA  1485               	bsf	5,1	;volatile
  4546  0FCB  27D2  120A  158A   	fcall	_Lcd_Delay5us
  4547  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  4548  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  4549  0FD0  1085               	bcf	5,1	;volatile
  4550                           
  4551                           ;HD44780.c: 142: Lcd_Delay5500us();
  4552  0FD1  2F35               	ljmp	l1987
  4553  0FD2                     __end_of_Lcd_Command:	
  4554  0FD2                     __ptext29:	
  4555 ;; *************** function _Lcd_Delay5us *****************
  4556 ;; Defined at:
  4557 ;;		line 148 in file "libs/HD44780.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;		None
  4560 ;; Auto vars:     Size  Location     Type
  4561 ;;		None
  4562 ;; Return value:  Size  Location     Type
  4563 ;;                  1    wreg      void 
  4564 ;; Registers used:
  4565 ;;		None
  4566 ;; Tracked objects:
  4567 ;;		On entry : 300/800
  4568 ;;		On exit  : 0/0
  4569 ;;		Unchanged: 0/0
  4570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4571 ;;      Params:         0       0       0       0       0
  4572 ;;      Locals:         0       0       0       0       0
  4573 ;;      Temps:          0       0       0       0       0
  4574 ;;      Totals:         0       0       0       0       0
  4575 ;;Total ram usage:        0 bytes
  4576 ;; Hardware stack levels used:    1
  4577 ;; This function calls:
  4578 ;;		Nothing
  4579 ;; This function is called by:
  4580 ;;		_Lcd_Init
  4581 ;;		_Lcd_CharCP
  4582 ;;		_Lcd_Command
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           
  4587                           ;psect for function _Lcd_Delay5us
  4588  0FD2                     _Lcd_Delay5us:	
  4589                           
  4590                           ;HD44780.c: 149: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4591                           
  4592                           ;incstack = 0
  4593                           ; Regs used in _Lcd_Delay5us: []
  4594  0FD2  2FD3               	nop2	;2 cycle nop
  4595  0FD3  2FD4               	nop2	;2 cycle nop
  4596  0FD4  0000               	nop
  4597                           
  4598                           ;HD44780.c: 150: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4599  0FD5  2FD6               	nop2	;2 cycle nop
  4600  0FD6  2FD7               	nop2	;2 cycle nop
  4601  0FD7  0000               	nop
  4602  0FD8  0008               	return
  4603  0FD9                     __end_of_Lcd_Delay5us:	
  4604  0FD9                     PL18:	
  4605  0FD9  1283               	bcf	3,5	;RP0=0, select bank0
  4606  0FDA  1303               	bcf	3,6	;RP1=0, select bank0
  4607  0FDB  1285               	bcf	5,5	;volatile
  4608  0FDC  1205               	bcf	5,4	;volatile
  4609  0FDD  1585               	bsf	5,3	;volatile
  4610  0FDE  1505               	bsf	5,2	;volatile
  4611  0FDF  1085               	bcf	5,1	;volatile
  4612  0FE0  1005               	bcf	5,0	;volatile
  4613  0FE1  0008               	return
  4614  0FE2                     __end_ofPL18:	
  4615  0FE2                     PL20:	
  4616  0FE2  1283               	bcf	3,5	;RP0=0, select bank0
  4617  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  4618  0FE4  1285               	bcf	5,5	;volatile
  4619  0FE5  1205               	bcf	5,4	;volatile
  4620  0FE6  1585               	bsf	5,3	;volatile
  4621  0FE7  1105               	bcf	5,2	;volatile
  4622  0FE8  1085               	bcf	5,1	;volatile
  4623  0FE9  1005               	bcf	5,0	;volatile
  4624  0FEA  0008               	return
  4625  0FEB                     __end_ofPL20:	
  4626  0FEB                     PL26:	
  4627  0FEB  1285               	bcf	5,5	;volatile
  4628  0FEC  1205               	bcf	5,4	;volatile
  4629  0FED  1185               	bcf	5,3	;volatile
  4630  0FEE  1105               	bcf	5,2	;volatile
  4631  0FEF  1085               	bcf	5,1	;volatile
  4632  0FF0  1005               	bcf	5,0	;volatile
  4633  0FF1  0008               	return
  4634  0FF2                     __end_ofPL26:	
  4635  0FF2                     PL30:	
  4636  0FF2  0873               	movf	Lcd_CharCP@c,w
  4637  0FF3  00F2               	movwf	??_Lcd_CharCP
  4638  0FF4  1003               	clrc
  4639  0FF5  0CF2               	rrf	??_Lcd_CharCP,f
  4640  0FF6  1003               	clrc
  4641  0FF7  0CF2               	rrf	??_Lcd_CharCP,f
  4642  0FF8  0008               	return
  4643  0FF9                     __end_ofPL30:	
  4644  0FF9                     PL32:	
  4645  0FF9  0873               	movf	Lcd_Command@command,w
  4646  0FFA  00F2               	movwf	??_Lcd_Command
  4647  0FFB  1003               	clrc
  4648  0FFC  0CF2               	rrf	??_Lcd_Command,f
  4649  0FFD  1003               	clrc
  4650  0FFE  0CF2               	rrf	??_Lcd_Command,f
  4651  0FFF  0008               	return
  4652  1000                     __end_ofPL32:	
  4653                           
  4654                           	psect	text31
  4655  0034                     __ptext31:	
  4656 ;; *************** function _I2C_Master_Init *****************
  4657 ;; Defined at:
  4658 ;;		line 3 in file "libs/gsk_i2c.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  c               4    0[BANK0 ] const unsigned long 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, status,2, status,0, pclath, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 300/0
  4669 ;;		On exit  : 300/100
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4672 ;;      Params:         0       4       0       0       0
  4673 ;;      Locals:         0       0       0       0       0
  4674 ;;      Temps:          0       4       0       0       0
  4675 ;;      Totals:         0       8       0       0       0
  4676 ;;Total ram usage:        8 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    1
  4679 ;; This function calls:
  4680 ;;		___lldiv
  4681 ;; This function is called by:
  4682 ;;		_main
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           
  4687                           ;psect for function _I2C_Master_Init
  4688  0034                     _I2C_Master_Init:	
  4689                           
  4690                           ;gsk_i2c.c: 5: SSPCON = 0b00101000;
  4691                           
  4692                           ;incstack = 0
  4693                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  4694  0034  3028               	movlw	40
  4695  0035  0094               	movwf	20	;volatile
  4696                           
  4697                           ;gsk_i2c.c: 6: SSPCON2 = 0;
  4698  0036  1683               	bsf	3,5	;RP0=1, select bank1
  4699  0037  0191               	clrf	17	;volatile
  4700                           
  4701                           ;gsk_i2c.c: 7: SSPADD = (4000000/(4*c))-1;
  4702  0038  1283               	bcf	3,5	;RP0=0, select bank0
  4703  0039  0820               	movf	I2C_Master_Init@c,w
  4704  003A  00A4               	movwf	??_I2C_Master_Init
  4705  003B  0821               	movf	I2C_Master_Init@c+1,w
  4706  003C  00A5               	movwf	??_I2C_Master_Init+1
  4707  003D  0822               	movf	I2C_Master_Init@c+2,w
  4708  003E  00A6               	movwf	??_I2C_Master_Init+2
  4709  003F  0823               	movf	I2C_Master_Init@c+3,w
  4710  0040  00A7               	movwf	??_I2C_Master_Init+3
  4711  0041  3002               	movlw	2
  4712  0042                     u3345:	
  4713  0042  1003               	clrc
  4714  0043  0DA4               	rlf	??_I2C_Master_Init,f
  4715  0044  0DA5               	rlf	??_I2C_Master_Init+1,f
  4716  0045  0DA6               	rlf	??_I2C_Master_Init+2,f
  4717  0046  0DA7               	rlf	??_I2C_Master_Init+3,f
  4718  0047  3EFF               	addlw	-1
  4719  0048  1D03               	skipz
  4720  0049  2842               	goto	u3345
  4721  004A  0827               	movf	??_I2C_Master_Init+3,w
  4722  004B  00F3               	movwf	___lldiv@divisor+3
  4723  004C  0826               	movf	??_I2C_Master_Init+2,w
  4724  004D  00F2               	movwf	___lldiv@divisor+2
  4725  004E  0825               	movf	??_I2C_Master_Init+1,w
  4726  004F  00F1               	movwf	___lldiv@divisor+1
  4727  0050  0824               	movf	??_I2C_Master_Init,w
  4728  0051  00F0               	movwf	___lldiv@divisor
  4729  0052  303D               	movlw	61
  4730  0053  01F7               	clrf	___lldiv@dividend+3
  4731  0054  00F6               	movwf	___lldiv@dividend+2
  4732  0055  3009               	movlw	9
  4733  0056  00F5               	movwf	___lldiv@dividend+1
  4734  0057  01F4               	clrf	___lldiv@dividend
  4735  0058  2061               	fcall	___lldiv
  4736  0059  0870               	movf	?___lldiv,w
  4737  005A  3EFF               	addlw	255
  4738  005B  1683               	bsf	3,5	;RP0=1, select bank1
  4739  005C  0093               	movwf	19	;volatile
  4740                           
  4741                           ;gsk_i2c.c: 8: SSPSTAT = 0;
  4742  005D  0194               	clrf	20	;volatile
  4743                           
  4744                           ;gsk_i2c.c: 9: TRISC3 = 1;
  4745  005E  1587               	bsf	7,3	;volatile
  4746                           
  4747                           ;gsk_i2c.c: 10: TRISC4 = 1;
  4748  005F  1607               	bsf	7,4	;volatile
  4749  0060  0008               	return
  4750  0061                     __end_of_I2C_Master_Init:	
  4751  0061                     __ptext32:	
  4752 ;; *************** function ___lldiv *****************
  4753 ;; Defined at:
  4754 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;  divisor         4    0[COMMON] unsigned long 
  4757 ;;  dividend        4    4[COMMON] unsigned long 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  quotient        4    8[COMMON] unsigned long 
  4760 ;;  counter         1   12[COMMON] unsigned char 
  4761 ;; Return value:  Size  Location     Type
  4762 ;;                  4    0[COMMON] unsigned long 
  4763 ;; Registers used:
  4764 ;;		wreg, status,2, status,0
  4765 ;; Tracked objects:
  4766 ;;		On entry : 300/0
  4767 ;;		On exit  : 300/0
  4768 ;;		Unchanged: 300/0
  4769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4770 ;;      Params:         8       0       0       0       0
  4771 ;;      Locals:         5       0       0       0       0
  4772 ;;      Temps:          0       0       0       0       0
  4773 ;;      Totals:        13       0       0       0       0
  4774 ;;Total ram usage:       13 bytes
  4775 ;; Hardware stack levels used:    1
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_I2C_Master_Init
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           
  4784                           ;psect for function ___lldiv
  4785  0061                     ___lldiv:	
  4786                           
  4787                           ;incstack = 0
  4788                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4789  0061  01F8               	clrf	___lldiv@quotient
  4790  0062  01F9               	clrf	___lldiv@quotient+1
  4791  0063  01FA               	clrf	___lldiv@quotient+2
  4792  0064  01FB               	clrf	___lldiv@quotient+3
  4793  0065  0873               	movf	___lldiv@divisor+3,w
  4794  0066  0472               	iorwf	___lldiv@divisor+2,w
  4795  0067  0471               	iorwf	___lldiv@divisor+1,w
  4796  0068  0470               	iorwf	___lldiv@divisor,w
  4797  0069  1903               	skipnz
  4798  006A  28A0               	goto	l2611
  4799  006B  01FC               	clrf	___lldiv@counter
  4800  006C                     L11:	
  4801  006C  0AFC               	incf	___lldiv@counter,f
  4802  006D  1BF3               	btfsc	___lldiv@divisor+3,7
  4803  006E  2875               	goto	l2599
  4804  006F  1003               	clrc
  4805  0070  0DF0               	rlf	___lldiv@divisor,f
  4806  0071  0DF1               	rlf	___lldiv@divisor+1,f
  4807  0072  0DF2               	rlf	___lldiv@divisor+2,f
  4808  0073  0DF3               	rlf	___lldiv@divisor+3,f
  4809  0074  286C               	goto	L11
  4810  0075                     l2599:	
  4811  0075  1003               	clrc
  4812  0076  0DF8               	rlf	___lldiv@quotient,f
  4813  0077  0DF9               	rlf	___lldiv@quotient+1,f
  4814  0078  0DFA               	rlf	___lldiv@quotient+2,f
  4815  0079  0DFB               	rlf	___lldiv@quotient+3,f
  4816  007A  0873               	movf	___lldiv@divisor+3,w
  4817  007B  0277               	subwf	___lldiv@dividend+3,w
  4818  007C  1D03               	skipz
  4819  007D  2888               	goto	u3235
  4820  007E  0872               	movf	___lldiv@divisor+2,w
  4821  007F  0276               	subwf	___lldiv@dividend+2,w
  4822  0080  1D03               	skipz
  4823  0081  2888               	goto	u3235
  4824  0082  0871               	movf	___lldiv@divisor+1,w
  4825  0083  0275               	subwf	___lldiv@dividend+1,w
  4826  0084  1D03               	skipz
  4827  0085  2888               	goto	u3235
  4828  0086  0870               	movf	___lldiv@divisor,w
  4829  0087  0274               	subwf	___lldiv@dividend,w
  4830  0088                     u3235:	
  4831  0088  1C03               	skipc
  4832  0089  289A               	goto	L12
  4833  008A  0870               	movf	___lldiv@divisor,w
  4834  008B  02F4               	subwf	___lldiv@dividend,f
  4835  008C  0871               	movf	___lldiv@divisor+1,w
  4836  008D  1C03               	skipc
  4837  008E  0F71               	incfsz	___lldiv@divisor+1,w
  4838  008F  02F5               	subwf	___lldiv@dividend+1,f
  4839  0090  0872               	movf	___lldiv@divisor+2,w
  4840  0091  1C03               	skipc
  4841  0092  0F72               	incfsz	___lldiv@divisor+2,w
  4842  0093  02F6               	subwf	___lldiv@dividend+2,f
  4843  0094  0873               	movf	___lldiv@divisor+3,w
  4844  0095  1C03               	skipc
  4845  0096  0F73               	incfsz	___lldiv@divisor+3,w
  4846  0097  02F7               	subwf	___lldiv@dividend+3,f
  4847  0098  1478               	bsf	___lldiv@quotient,0
  4848  0099  1003               	clrc
  4849  009A                     L12:	
  4850  009A  0CF3               	rrf	___lldiv@divisor+3,f
  4851  009B  0CF2               	rrf	___lldiv@divisor+2,f
  4852  009C  0CF1               	rrf	___lldiv@divisor+1,f
  4853  009D  0CF0               	rrf	___lldiv@divisor,f
  4854  009E  0BFC               	decfsz	___lldiv@counter,f
  4855  009F  2875               	goto	l2599
  4856  00A0                     l2611:	
  4857  00A0  087B               	movf	___lldiv@quotient+3,w
  4858  00A1  00F3               	movwf	?___lldiv+3
  4859  00A2  087A               	movf	___lldiv@quotient+2,w
  4860  00A3  00F2               	movwf	?___lldiv+2
  4861  00A4  0879               	movf	___lldiv@quotient+1,w
  4862  00A5  00F1               	movwf	?___lldiv+1
  4863  00A6  0878               	movf	___lldiv@quotient,w
  4864  00A7  00F0               	movwf	?___lldiv
  4865  00A8  0008               	return
  4866  00A9                     __end_of___lldiv:	
  4867                           
  4868                           	psect	text33
  4869  00A9                     __ptext33:	
  4870 ;; *************** function _GetStates *****************
  4871 ;; Defined at:
  4872 ;;		line 93 in file "libs/gsk_app_funcs.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;		None
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  i               1    6[BANK0 ] unsigned char 
  4877 ;;  TempVar         2    4[BANK0 ] unsigned int 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  1    wreg      void 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 200/900
  4884 ;;		On exit  : A00/800
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4887 ;;      Params:         0       0       0       0       0
  4888 ;;      Locals:         0       3       0       0       0
  4889 ;;      Temps:          0       1       0       0       0
  4890 ;;      Totals:         0       4       0       0       0
  4891 ;;Total ram usage:        4 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    1
  4894 ;; This function calls:
  4895 ;;		___bmul
  4896 ;; This function is called by:
  4897 ;;		_main
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           
  4902                           ;psect for function _GetStates
  4903  00A9                     _GetStates:	
  4904                           
  4905                           ;gsk_app_funcs.c: 94: uint16_t TempVar = 0;
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _GetStates: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4909  00A9  1283               	bcf	3,5	;RP0=0, select bank0
  4910  00AA  01A4               	clrf	GetStates@TempVar
  4911  00AB  01A5               	clrf	GetStates@TempVar+1
  4912                           
  4913                           ;gsk_app_funcs.c: 95: for (char i=0; i<10; i++) {
  4914  00AC  01A6               	clrf	GetStates@i
  4915  00AD                     l2855:	
  4916                           
  4917                           ;gsk_app_funcs.c: 96: TempVar = TempVar+C_ON[Cycle][i][0];
  4918  00AD  0826               	movf	GetStates@i,w
  4919  00AE  0726               	addwf	GetStates@i,w
  4920  00AF  0726               	addwf	GetStates@i,w
  4921  00B0  3E90               	addlw	(low (_C_ON| (0+256)))& (0+255)
  4922  00B1  00A3               	movwf	??_GetStates
  4923  00B2  301E               	movlw	30
  4924  00B3  00A0               	movwf	___bmul@multiplicand
  4925  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  4926  00B5  083A               	movf	_Cycle^(0+128),w
  4927  00B6  224A  120A  118A   	fcall	___bmul
  4928  00B9  0723               	addwf	??_GetStates,w
  4929  00BA  0084               	movwf	4
  4930  00BB  1783               	bsf	3,7	;select IRP bank3
  4931  00BC  0800               	movf	0,w
  4932  00BD  07A4               	addwf	GetStates@TempVar,f
  4933  00BE  1803               	skipnc
  4934  00BF  0AA5               	incf	GetStates@TempVar+1,f
  4935                           
  4936                           ;gsk_app_funcs.c: 97: if (TempVar>C_S) {
  4937  00C0  0825               	movf	GetStates@TempVar+1,w
  4938  00C1  1683               	bsf	3,5	;RP0=1, select bank1
  4939  00C2  0235               	subwf	(_C_S+1)^(0+128),w	;volatile
  4940  00C3  1D03               	skipz
  4941  00C4  28C9               	goto	u3445
  4942  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  4943  00C6  0824               	movf	GetStates@TempVar,w
  4944  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  4945  00C8  0234               	subwf	_C_S^(0+128),w	;volatile
  4946  00C9                     u3445:	
  4947  00C9  1803               	skipnc
  4948  00CA  28D0               	goto	l2863
  4949                           
  4950                           ;gsk_app_funcs.c: 98: PresentState = i;
  4951  00CB  1283               	bcf	3,5	;RP0=0, select bank0
  4952  00CC  0826               	movf	GetStates@i,w
  4953  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  4954  00CE  00BB               	movwf	_PresentState^(0+128)	;volatile
  4955  00CF  0008               	return
  4956  00D0                     l2863:	
  4957  00D0  1283               	bcf	3,5	;RP0=0, select bank0
  4958  00D1  300A               	movlw	10
  4959  00D2  0AA6               	incf	GetStates@i,f
  4960  00D3  0226               	subwf	GetStates@i,w
  4961  00D4  1803               	btfsc	3,0
  4962  00D5  0008               	return
  4963  00D6  28AD               	goto	l2855
  4964  00D7                     __end_of_GetStates:	
  4965  00D7                     __ptext22:	
  4966 ;; *************** function _PutOnOff *****************
  4967 ;; Defined at:
  4968 ;;		line 104 in file "libs/gsk_app_funcs.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  i               1   21[BANK0 ] unsigned char 
  4973 ;;  i               1   20[BANK0 ] unsigned char 
  4974 ;;  Temp_PORT       1   19[BANK0 ] unsigned char 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : A00/900
  4981 ;;		On exit  : 300/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4984 ;;      Params:         0       0       0       0       0
  4985 ;;      Locals:         0       3       0       0       0
  4986 ;;      Temps:          0       2       0       0       0
  4987 ;;      Totals:         0       5       0       0       0
  4988 ;;Total ram usage:        5 bytes
  4989 ;; Hardware stack levels used:    1
  4990 ;; Hardware stack levels required when called:    4
  4991 ;; This function calls:
  4992 ;;		_WriteLongInt
  4993 ;;		___bmul
  4994 ;; This function is called by:
  4995 ;;		_main
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           
  5000                           ;psect for function _PutOnOff
  5001  00D7                     _PutOnOff:	
  5002                           
  5003                           ;gsk_app_funcs.c: 105: char Temp_PORT;
  5004                           ;gsk_app_funcs.c: 108: Temp_PORT=0x00;
  5005                           
  5006                           ;incstack = 0
  5007                           ; Regs used in _PutOnOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5008  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  5009  00D8  01B3               	clrf	PutOnOff@Temp_PORT
  5010                           
  5011                           ;gsk_app_funcs.c: 109: for (char i=0; i<8; i++) {
  5012  00D9  01B4               	clrf	PutOnOff@i
  5013  00DA                     l2873:	
  5014                           
  5015                           ;gsk_app_funcs.c: 110: if ((C_BLINK[Cycle][PresentState][1]>>i)& 0x01) {
  5016  00DA  1683               	bsf	3,5	;RP0=1, select bank1
  5017  00DB  083B               	movf	_PresentState^(0+128),w
  5018  00DC  073B               	addwf	_PresentState^(0+128),w
  5019  00DD  073B               	addwf	_PresentState^(0+128),w
  5020  00DE  3E11               	addlw	(low ((_C_BLINK| (0+256)+1)))& (0+255)
  5021  00DF  2408  120A  118A   	fcall	PL10	;call to abstracted procedure
  5022  00E2  224A  120A  118A   	fcall	___bmul
  5023  00E5  0731               	addwf	??_PutOnOff,w
  5024  00E6  0084               	movwf	4
  5025  00E7  1783               	bsf	3,7	;select IRP bank2
  5026  00E8  0800               	movf	0,w
  5027  00E9  00B2               	movwf	??_PutOnOff+1
  5028  00EA  0A34               	incf	PutOnOff@i,w
  5029  00EB  28EE               	goto	u3464
  5030  00EC                     u3465:	
  5031  00EC  1003               	clrc
  5032  00ED  0CB2               	rrf	??_PutOnOff+1,f
  5033  00EE                     u3464:	
  5034  00EE  3EFF               	addlw	-1
  5035  00EF  1D03               	skipz
  5036  00F0  28EC               	goto	u3465
  5037  00F1  1C32               	btfss	??_PutOnOff+1,0
  5038  00F2  2903               	goto	l2879
  5039                           
  5040                           ;gsk_app_funcs.c: 111: if (CONFIG0.bits.b7)
  5041  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  5042  00F4  1FB8               	btfss	_CONFIG0^(0+128),7	;volatile
  5043  00F5  291C               	goto	l2883
  5044  00F6                     l2877:	
  5045                           
  5046                           ;gsk_app_funcs.c: 112: Temp_PORT = Temp_PORT | (0x01<<i);
  5047  00F6  3001               	movlw	1
  5048  00F7  1283               	bcf	3,5	;RP0=0, select bank0
  5049  00F8  00B1               	movwf	??_PutOnOff
  5050  00F9  0A34               	incf	PutOnOff@i,w
  5051  00FA  28FD               	goto	u3494
  5052  00FB                     u3495:	
  5053  00FB  1003               	clrc
  5054  00FC  0DB1               	rlf	??_PutOnOff,f
  5055  00FD                     u3494:	
  5056  00FD  3EFF               	addlw	-1
  5057  00FE  1D03               	skipz
  5058  00FF  28FB               	goto	u3495
  5059  0100  0831               	movf	??_PutOnOff,w
  5060  0101  04B3               	iorwf	PutOnOff@Temp_PORT,f
  5061  0102  291C               	goto	l2883
  5062  0103                     l2879:	
  5063  0103  1683               	bsf	3,5	;RP0=1, select bank1
  5064  0104  083B               	movf	_PresentState^(0+128),w
  5065  0105  073B               	addwf	_PresentState^(0+128),w
  5066  0106  073B               	addwf	_PresentState^(0+128),w
  5067  0107  3E91               	addlw	(low ((_C_ON| (0+256)+1)))& (0+255)
  5068  0108  2408  120A  118A   	fcall	PL10	;call to abstracted procedure
  5069  010B  224A  120A  118A   	fcall	___bmul
  5070  010E  0731               	addwf	??_PutOnOff,w
  5071  010F  0084               	movwf	4
  5072  0110  1783               	bsf	3,7	;select IRP bank3
  5073  0111  0800               	movf	0,w
  5074  0112  00B2               	movwf	??_PutOnOff+1
  5075  0113  0A34               	incf	PutOnOff@i,w
  5076  0114  2917               	goto	u3504
  5077  0115                     u3505:	
  5078  0115  1003               	clrc
  5079  0116  0CB2               	rrf	??_PutOnOff+1,f
  5080  0117                     u3504:	
  5081  0117  3EFF               	addlw	-1
  5082  0118  1D03               	skipz
  5083  0119  2915               	goto	u3505
  5084  011A  1832               	btfsc	??_PutOnOff+1,0
  5085  011B  28F6               	goto	l2877
  5086  011C                     l2883:	
  5087  011C  1283               	bcf	3,5	;RP0=0, select bank0
  5088  011D  3008               	movlw	8
  5089  011E  0AB4               	incf	PutOnOff@i,f
  5090  011F  0234               	subwf	PutOnOff@i,w
  5091  0120  1C03               	skipc
  5092  0121  28DA               	goto	l2873
  5093                           
  5094                           ;gsk_app_funcs.c: 115: }
  5095                           ;gsk_app_funcs.c: 116: }
  5096                           ;gsk_app_funcs.c: 119: WriteLongInt(1,1,Temp_PORT,3,0);
  5097  0122  23FE  120A  118A   	fcall	PL8	;call to abstracted procedure
  5098  0125  3001               	movlw	1
  5099  0126  01AD               	clrf	WriteLongInt@Sign
  5100  0127  2259  120A  118A   	fcall	_WriteLongInt
  5101                           
  5102                           ;gsk_app_funcs.c: 125: Temp_PORT=0x00;
  5103  012A  01B3               	clrf	PutOnOff@Temp_PORT
  5104                           
  5105                           ;gsk_app_funcs.c: 126: for (char i=0; i<8; i++) {
  5106  012B  01B5               	clrf	PutOnOff@i_345
  5107  012C                     l2895:	
  5108                           
  5109                           ;gsk_app_funcs.c: 127: if ((C_BLINK[Cycle][PresentState][2]>>i) & 0x01) {
  5110  012C  1683               	bsf	3,5	;RP0=1, select bank1
  5111  012D  083B               	movf	_PresentState^(0+128),w
  5112  012E  073B               	addwf	_PresentState^(0+128),w
  5113  012F  073B               	addwf	_PresentState^(0+128),w
  5114  0130  3E12               	addlw	(low ((_C_BLINK| (0+256)+2)))& (0+255)
  5115  0131  2408  120A  118A   	fcall	PL10	;call to abstracted procedure
  5116  0134  224A  120A  118A   	fcall	___bmul
  5117  0137  0731               	addwf	??_PutOnOff,w
  5118  0138  0084               	movwf	4
  5119  0139  1783               	bsf	3,7	;select IRP bank2
  5120  013A  0800               	movf	0,w
  5121  013B  00B2               	movwf	??_PutOnOff+1
  5122  013C  0A35               	incf	PutOnOff@i_345,w
  5123  013D  2940               	goto	u3534
  5124  013E                     u3535:	
  5125  013E  1003               	clrc
  5126  013F  0CB2               	rrf	??_PutOnOff+1,f
  5127  0140                     u3534:	
  5128  0140  3EFF               	addlw	-1
  5129  0141  1D03               	skipz
  5130  0142  293E               	goto	u3535
  5131  0143  1C32               	btfss	??_PutOnOff+1,0
  5132  0144  2955               	goto	l2901
  5133                           
  5134                           ;gsk_app_funcs.c: 128: if (CONFIG0.bits.b7)
  5135  0145  1683               	bsf	3,5	;RP0=1, select bank1
  5136  0146  1FB8               	btfss	_CONFIG0^(0+128),7	;volatile
  5137  0147  296E               	goto	l2905
  5138  0148                     l2899:	
  5139                           
  5140                           ;gsk_app_funcs.c: 129: Temp_PORT = Temp_PORT | (0x01<<i);
  5141  0148  3001               	movlw	1
  5142  0149  1283               	bcf	3,5	;RP0=0, select bank0
  5143  014A  00B1               	movwf	??_PutOnOff
  5144  014B  0A35               	incf	PutOnOff@i_345,w
  5145  014C  294F               	goto	u3564
  5146  014D                     u3565:	
  5147  014D  1003               	clrc
  5148  014E  0DB1               	rlf	??_PutOnOff,f
  5149  014F                     u3564:	
  5150  014F  3EFF               	addlw	-1
  5151  0150  1D03               	skipz
  5152  0151  294D               	goto	u3565
  5153  0152  0831               	movf	??_PutOnOff,w
  5154  0153  04B3               	iorwf	PutOnOff@Temp_PORT,f
  5155  0154  296E               	goto	l2905
  5156  0155                     l2901:	
  5157  0155  1683               	bsf	3,5	;RP0=1, select bank1
  5158  0156  083B               	movf	_PresentState^(0+128),w
  5159  0157  073B               	addwf	_PresentState^(0+128),w
  5160  0158  073B               	addwf	_PresentState^(0+128),w
  5161  0159  3E92               	addlw	(low ((_C_ON| (0+256)+2)))& (0+255)
  5162  015A  2408  120A  118A   	fcall	PL10	;call to abstracted procedure
  5163  015D  224A  120A  118A   	fcall	___bmul
  5164  0160  0731               	addwf	??_PutOnOff,w
  5165  0161  0084               	movwf	4
  5166  0162  1783               	bsf	3,7	;select IRP bank3
  5167  0163  0800               	movf	0,w
  5168  0164  00B2               	movwf	??_PutOnOff+1
  5169  0165  0A35               	incf	PutOnOff@i_345,w
  5170  0166  2969               	goto	u3574
  5171  0167                     u3575:	
  5172  0167  1003               	clrc
  5173  0168  0CB2               	rrf	??_PutOnOff+1,f
  5174  0169                     u3574:	
  5175  0169  3EFF               	addlw	-1
  5176  016A  1D03               	skipz
  5177  016B  2967               	goto	u3575
  5178  016C  1832               	btfsc	??_PutOnOff+1,0
  5179  016D  2948               	goto	l2899
  5180  016E                     l2905:	
  5181  016E  1283               	bcf	3,5	;RP0=0, select bank0
  5182  016F  3008               	movlw	8
  5183  0170  0AB5               	incf	PutOnOff@i_345,f
  5184  0171  0235               	subwf	PutOnOff@i_345,w
  5185  0172  1C03               	skipc
  5186  0173  292C               	goto	l2895
  5187                           
  5188                           ;gsk_app_funcs.c: 132: }
  5189                           ;gsk_app_funcs.c: 133: }
  5190                           ;gsk_app_funcs.c: 136: WriteLongInt(2,1,Temp_PORT,3,0);
  5191  0174  23FE  120A  118A   	fcall	PL8	;call to abstracted procedure
  5192  0177  3002               	movlw	2
  5193  0178  01AD               	clrf	WriteLongInt@Sign
  5194  0179  2A59               	ljmp	_WriteLongInt
  5195  017A                     __end_of_PutOnOff:	
  5196  017A                     __ptext12:	
  5197 ;; *************** function _ReadVars *****************
  5198 ;; Defined at:
  5199 ;;		line 9 in file "libs/eeprom.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;  k               1   21[BANK0 ] unsigned char 
  5204 ;;  j               1   20[BANK0 ] unsigned char 
  5205 ;;  i               1   19[BANK0 ] unsigned char 
  5206 ;;  i               1   18[BANK0 ] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  1    wreg      void 
  5209 ;; Registers used:
  5210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 300/100
  5213 ;;		On exit  : B00/800
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5216 ;;      Params:         0       0       0       0       0
  5217 ;;      Locals:         0       4       0       0       0
  5218 ;;      Temps:          0      15       0       0       0
  5219 ;;      Totals:         0      19       0       0       0
  5220 ;;Total ram usage:       19 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    1
  5223 ;; This function calls:
  5224 ;;		___bmul
  5225 ;;		_eeprom_read
  5226 ;; This function is called by:
  5227 ;;		_main
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           
  5232                           ;psect for function _ReadVars
  5233  017A                     _ReadVars:	
  5234                           
  5235                           ;eeprom.c: 10: C_D = eeprom_read(0X00);
  5236                           
  5237                           ;incstack = 0
  5238                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5239  017A  3000               	movlw	0
  5240  017B  2235  120A  118A   	fcall	_eeprom_read
  5241  017E  1683               	bsf	3,5	;RP0=1, select bank1
  5242  017F  1303               	bcf	3,6	;RP1=0, select bank1
  5243  0180  00B9               	movwf	_C_D^(0+128)	;volatile
  5244                           
  5245                           ;eeprom.c: 11: for (char i = 0; i<3; i++)
  5246  0181  1283               	bcf	3,5	;RP0=0, select bank0
  5247  0182  01B2               	clrf	ReadVars@i
  5248  0183                     l2623:	
  5249                           
  5250                           ;eeprom.c: 12: C[i] = (uint32_t)eeprom_read(0X01 + 3*i)*256*256 + (uint16_t)eeprom_read(
      +                          0x02 + 3*i)*256 + eeprom_read(0x03 + 3*i);
  5251  0183  0832               	movf	ReadVars@i,w
  5252  0184  0732               	addwf	ReadVars@i,w
  5253  0185  0732               	addwf	ReadVars@i,w
  5254  0186  3E03               	addlw	3
  5255  0187  2235  120A  118A   	fcall	_eeprom_read
  5256  018A  1303               	bcf	3,6	;RP1=0, select bank0
  5257  018B  00A3               	movwf	??_ReadVars
  5258  018C  01A4               	clrf	??_ReadVars+1
  5259  018D  01A5               	clrf	??_ReadVars+2
  5260  018E  01A6               	clrf	??_ReadVars+3
  5261  018F  0832               	movf	ReadVars@i,w
  5262  0190  0732               	addwf	ReadVars@i,w
  5263  0191  0732               	addwf	ReadVars@i,w
  5264  0192  3E02               	addlw	2
  5265  0193  2235  120A  118A   	fcall	_eeprom_read
  5266  0196  1303               	bcf	3,6	;RP1=0, select bank0
  5267  0197  00A7               	movwf	??_ReadVars+4
  5268  0198  01A8               	clrf	??_ReadVars+5
  5269  0199  00A8               	movwf	??_ReadVars+5
  5270  019A  01A7               	clrf	??_ReadVars+4
  5271  019B  0827               	movf	??_ReadVars+4,w
  5272  019C  00A9               	movwf	??_ReadVars+6
  5273  019D  0828               	movf	??_ReadVars+5,w
  5274  019E  00AA               	movwf	??_ReadVars+7
  5275  019F  01AB               	clrf	??_ReadVars+8
  5276  01A0  01AC               	clrf	??_ReadVars+9
  5277  01A1  0832               	movf	ReadVars@i,w
  5278  01A2  0732               	addwf	ReadVars@i,w
  5279  01A3  0732               	addwf	ReadVars@i,w
  5280  01A4  3E01               	addlw	1
  5281  01A5  2235  120A  118A   	fcall	_eeprom_read
  5282  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  5283  01A9  00AD               	movwf	??_ReadVars+10
  5284  01AA  01AE               	clrf	??_ReadVars+11
  5285  01AB  01AF               	clrf	??_ReadVars+12
  5286  01AC  01B0               	clrf	??_ReadVars+13
  5287  01AD  082E               	movf	??_ReadVars+11,w
  5288  01AE  00B0               	movwf	??_ReadVars+13
  5289  01AF  082D               	movf	??_ReadVars+10,w
  5290  01B0  00AF               	movwf	??_ReadVars+12
  5291  01B1  01AE               	clrf	??_ReadVars+11
  5292  01B2  01AD               	clrf	??_ReadVars+10
  5293  01B3  082D               	movf	??_ReadVars+10,w
  5294  01B4  07A9               	addwf	??_ReadVars+6,f
  5295  01B5  082E               	movf	??_ReadVars+11,w
  5296  01B6  1803               	skipnc
  5297  01B7  0F2E               	incfsz	??_ReadVars+11,w
  5298  01B8  07AA               	addwf	??_ReadVars+7,f
  5299  01B9  082F               	movf	??_ReadVars+12,w
  5300  01BA  1803               	skipnc
  5301  01BB  0F2F               	incfsz	??_ReadVars+12,w
  5302  01BC  07AB               	addwf	??_ReadVars+8,f
  5303  01BD  0830               	movf	??_ReadVars+13,w
  5304  01BE  1803               	skipnc
  5305  01BF  0A30               	incf	??_ReadVars+13,w
  5306  01C0  07AC               	addwf	??_ReadVars+9,f
  5307  01C1  0829               	movf	??_ReadVars+6,w
  5308  01C2  07A3               	addwf	??_ReadVars,f
  5309  01C3  082A               	movf	??_ReadVars+7,w
  5310  01C4  1803               	skipnc
  5311  01C5  0F2A               	incfsz	??_ReadVars+7,w
  5312  01C6  07A4               	addwf	??_ReadVars+1,f
  5313  01C7  082B               	movf	??_ReadVars+8,w
  5314  01C8  1803               	skipnc
  5315  01C9  0F2B               	incfsz	??_ReadVars+8,w
  5316  01CA  07A5               	addwf	??_ReadVars+2,f
  5317  01CB  082C               	movf	??_ReadVars+9,w
  5318  01CC  1803               	skipnc
  5319  01CD  0A2C               	incf	??_ReadVars+9,w
  5320  01CE  07A6               	addwf	??_ReadVars+3,f
  5321  01CF  0832               	movf	ReadVars@i,w
  5322  01D0  00B1               	movwf	??_ReadVars+14
  5323  01D1  3001               	movlw	1
  5324  01D2  1003               	clrc
  5325  01D3                     L3:	
  5326  01D3  0DB1               	rlf	??_ReadVars+14,f
  5327  01D4  3EFF               	addlw	-1
  5328  01D5  1003               	clrc
  5329  01D6  1D03               	skipz
  5330  01D7  29D3               	goto	L3
  5331  01D8  0D31               	rlf	??_ReadVars+14,w
  5332  01D9  3EA0               	addlw	(low (_C| 0))& (0+255)
  5333  01DA  0084               	movwf	4
  5334  01DB  0823               	movf	??_ReadVars,w
  5335  01DC  1383               	bcf	3,7	;select IRP bank1
  5336  01DD  0080               	movwf	0
  5337  01DE  0A84               	incf	4,f
  5338  01DF  0824               	movf	??_ReadVars+1,w
  5339  01E0  0080               	movwf	0
  5340  01E1  0A84               	incf	4,f
  5341  01E2  0825               	movf	??_ReadVars+2,w
  5342  01E3  0080               	movwf	0
  5343  01E4  0A84               	incf	4,f
  5344  01E5  0826               	movf	??_ReadVars+3,w
  5345  01E6  0080               	movwf	0
  5346  01E7  3003               	movlw	3
  5347  01E8  0AB2               	incf	ReadVars@i,f
  5348  01E9  0232               	subwf	ReadVars@i,w
  5349  01EA  1C03               	skipc
  5350  01EB  2983               	goto	l2623
  5351                           
  5352                           ;eeprom.c: 13: for (char i = 0; i < 3; i++)
  5353  01EC  01B3               	clrf	ReadVars@i_34
  5354  01ED                     l2635:	
  5355                           
  5356                           ;eeprom.c: 14: for (char j = 0; j < 10; j++)
  5357  01ED  01B4               	clrf	ReadVars@j
  5358  01EE                     l2641:	
  5359                           
  5360                           ;eeprom.c: 15: for (char k = 0; k< 3 ; k++) {
  5361  01EE  01B5               	clrf	ReadVars@k
  5362  01EF                     l2647:	
  5363                           
  5364                           ;eeprom.c: 16: C_ON[i][j][k] = eeprom_read(0X0A + i*10*3 + j*3 + k);
  5365  01EF  301E               	movlw	30
  5366  01F0  00A0               	movwf	___bmul@multiplicand
  5367  01F1  0833               	movf	ReadVars@i_34,w
  5368  01F2  224A  120A  118A   	fcall	___bmul
  5369  01F5  00A3               	movwf	??_ReadVars
  5370  01F6  0834               	movf	ReadVars@j,w
  5371  01F7  0734               	addwf	ReadVars@j,w
  5372  01F8  0734               	addwf	ReadVars@j,w
  5373  01F9  3E90               	addlw	(low (_C_ON| (0+256)))& (0+255)
  5374  01FA  2418  120A  118A   	fcall	PL22	;call to abstracted procedure
  5375  01FD  224A  120A  118A   	fcall	___bmul
  5376  0200  2420  120A  118A   	fcall	PL28	;call to abstracted procedure
  5377  0203  3E0A               	addlw	10
  5378  0204  2235  120A  118A   	fcall	_eeprom_read
  5379  0207  1783               	bsf	3,7	;select IRP bank3
  5380  0208  0080               	movwf	0
  5381                           
  5382                           ;eeprom.c: 17: C_BLINK[i][j][k] = eeprom_read(0X64 + i*10*3 + j*3 + k);
  5383  0209  301E               	movlw	30
  5384  020A  1303               	bcf	3,6	;RP1=0, select bank0
  5385  020B  00A0               	movwf	___bmul@multiplicand
  5386  020C  0833               	movf	ReadVars@i_34,w
  5387  020D  224A  120A  118A   	fcall	___bmul
  5388  0210  00A3               	movwf	??_ReadVars
  5389  0211  0834               	movf	ReadVars@j,w
  5390  0212  0734               	addwf	ReadVars@j,w
  5391  0213  0734               	addwf	ReadVars@j,w
  5392  0214  3E10               	addlw	(low (_C_BLINK| (0+256)))& (0+255)
  5393  0215  2418  120A  118A   	fcall	PL22	;call to abstracted procedure
  5394  0218  224A  120A  118A   	fcall	___bmul
  5395  021B  2420  120A  118A   	fcall	PL28	;call to abstracted procedure
  5396  021E  3E64               	addlw	100
  5397  021F  2235  120A  118A   	fcall	_eeprom_read
  5398  0222  1783               	bsf	3,7	;select IRP bank2
  5399  0223  0080               	movwf	0
  5400  0224  1303               	bcf	3,6	;RP1=0, select bank0
  5401  0225  3003               	movlw	3
  5402  0226  0AB5               	incf	ReadVars@k,f
  5403  0227  0235               	subwf	ReadVars@k,w
  5404  0228  1C03               	skipc
  5405  0229  29EF               	goto	l2647
  5406  022A  300A               	movlw	10
  5407  022B  0AB4               	incf	ReadVars@j,f
  5408  022C  0234               	subwf	ReadVars@j,w
  5409  022D  1C03               	skipc
  5410  022E  29EE               	goto	l2641
  5411  022F  3003               	movlw	3
  5412  0230  0AB3               	incf	ReadVars@i_34,f
  5413  0231  0233               	subwf	ReadVars@i_34,w
  5414  0232  1803               	btfsc	3,0
  5415  0233  0008               	return
  5416  0234  29ED               	goto	l2635
  5417  0235                     __end_of_ReadVars:	
  5418  0235                     __ptext13:	
  5419 ;; *************** function _eeprom_read *****************
  5420 ;; Defined at:
  5421 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  5422 ;; Parameters:    Size  Location     Type
  5423 ;;  addr            1    wreg     unsigned char 
  5424 ;; Auto vars:     Size  Location     Type
  5425 ;;  addr            1    0[COMMON] unsigned char 
  5426 ;; Return value:  Size  Location     Type
  5427 ;;                  1    wreg      unsigned char 
  5428 ;; Registers used:
  5429 ;;		wreg, status,2, status,0
  5430 ;; Tracked objects:
  5431 ;;		On entry : 200/100
  5432 ;;		On exit  : 300/200
  5433 ;;		Unchanged: 0/0
  5434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5435 ;;      Params:         0       0       0       0       0
  5436 ;;      Locals:         1       0       0       0       0
  5437 ;;      Temps:          0       0       0       0       0
  5438 ;;      Totals:         1       0       0       0       0
  5439 ;;Total ram usage:        1 bytes
  5440 ;; Hardware stack levels used:    1
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_ReadVars
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _eeprom_read
  5450  0235                     _eeprom_read:	
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5454                           ;eeprom_read@addr stored from wreg
  5455  0235  00F0               	movwf	eeprom_read@addr
  5456  0236                     l505:	
  5457  0236  0064               	clrwdt	;# 
  5458  0237  1683               	bsf	3,5	;RP0=1, select bank3
  5459  0238  1703               	bsf	3,6	;RP1=1, select bank3
  5460  0239  188C               	btfsc	12,1	;volsfr
  5461  023A  2A36               	goto	l505
  5462  023B  0870               	movf	eeprom_read@addr,w
  5463  023C  1283               	bcf	3,5	;RP0=0, select bank2
  5464  023D  008D               	movwf	13	;volatile
  5465  023E  303F               	movlw	63
  5466  023F  1683               	bsf	3,5	;RP0=1, select bank3
  5467  0240  058C               	andwf	12,f	;volsfr
  5468  0241  140C               	bsf	12,0	;volsfr
  5469  0242  1003               	clrc
  5470  0243  180C               	btfsc	12,0	;volsfr
  5471  0244  1403               	setc
  5472  0245  1803               	skipnc
  5473  0246  3001               	movlw	1
  5474  0247  1283               	bcf	3,5	;RP0=0, select bank2
  5475  0248  080C               	movf	12,w	;volatile
  5476  0249  0008               	return
  5477  024A                     __end_of_eeprom_read:	
  5478  024A                     __ptext41:	
  5479 ;; *************** function ___bmul *****************
  5480 ;; Defined at:
  5481 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;  multiplier      1    wreg     unsigned char 
  5484 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  multiplier      1    2[BANK0 ] unsigned char 
  5487 ;;  product         1    1[BANK0 ] unsigned char 
  5488 ;; Return value:  Size  Location     Type
  5489 ;;                  1    wreg      unsigned char 
  5490 ;; Registers used:
  5491 ;;		wreg, status,2, status,0
  5492 ;; Tracked objects:
  5493 ;;		On entry : 200/0
  5494 ;;		On exit  : 300/0
  5495 ;;		Unchanged: 0/0
  5496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5497 ;;      Params:         0       1       0       0       0
  5498 ;;      Locals:         0       2       0       0       0
  5499 ;;      Temps:          0       0       0       0       0
  5500 ;;      Totals:         0       3       0       0       0
  5501 ;;Total ram usage:        3 bytes
  5502 ;; Hardware stack levels used:    1
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_ReadVars
  5507 ;;		_WriteLongInt
  5508 ;;		_GetCyclePeriod
  5509 ;;		_GetStates
  5510 ;;		_PutOnOff
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           
  5515                           ;psect for function ___bmul
  5516  024A                     ___bmul:	
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5520                           ;___bmul@multiplier stored from wreg
  5521  024A  1283               	bcf	3,5	;RP0=0, select bank0
  5522  024B  00A2               	movwf	___bmul@multiplier
  5523  024C  01A1               	clrf	___bmul@product
  5524  024D                     l2077:	
  5525  024D  0820               	movf	___bmul@multiplicand,w
  5526  024E  1822               	btfsc	___bmul@multiplier,0
  5527  024F  07A1               	addwf	___bmul@product,f
  5528  0250  1003               	clrc
  5529  0251  0DA0               	rlf	___bmul@multiplicand,f
  5530  0252  1003               	clrc
  5531  0253  0CA2               	rrf	___bmul@multiplier,f
  5532  0254  0822               	movf	___bmul@multiplier,w
  5533  0255  1D03               	btfss	3,2
  5534  0256  2A4D               	goto	l2077
  5535  0257  0821               	movf	___bmul@product,w
  5536  0258  0008               	return
  5537  0259                     __end_of___bmul:	
  5538  007E                     btemp	set	126	;btemp
  5539  007E                     wtemp	set	126
  5540  007E                     wtemp0	set	126
  5541  0080                     wtemp1	set	128
  5542  0082                     wtemp2	set	130
  5543  0084                     wtemp3	set	132
  5544  0086                     wtemp4	set	134
  5545  0088                     wtemp5	set	136
  5546  007F                     wtemp6	set	127
  5547  007E                     ttemp	set	126
  5548  007E                     ttemp0	set	126
  5549  0081                     ttemp1	set	129
  5550  0084                     ttemp2	set	132
  5551  0087                     ttemp3	set	135
  5552  007F                     ttemp4	set	127
  5553  007E                     ltemp	set	126
  5554  007E                     ltemp0	set	126
  5555  0082                     ltemp1	set	130
  5556  0086                     ltemp2	set	134
  5557  0080                     ltemp3	set	128
  5558  0259                     __ptext23:	
  5559 ;; *************** function _WriteLongInt *****************
  5560 ;; Defined at:
  5561 ;;		line 182 in file "libs/HD44780.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;  y               1    wreg     unsigned char 
  5564 ;;  x               1    7[BANK0 ] unsigned char 
  5565 ;;  Val             4    8[BANK0 ] long 
  5566 ;;  size            1   12[BANK0 ] char 
  5567 ;;  Sign            1   13[BANK0 ] unsigned char 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  y               1   16[BANK0 ] unsigned char 
  5570 ;;  POS             1   15[BANK0 ] char 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  1    wreg      void 
  5573 ;; Registers used:
  5574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5575 ;; Tracked objects:
  5576 ;;		On entry : 300/800
  5577 ;;		On exit  : 300/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5580 ;;      Params:         0       7       0       0       0
  5581 ;;      Locals:         0       2       0       0       0
  5582 ;;      Temps:          0       1       0       0       0
  5583 ;;      Totals:         0      10       0       0       0
  5584 ;;Total ram usage:       10 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    3
  5587 ;; This function calls:
  5588 ;;		_Lcd_WriteChar
  5589 ;;		___aldiv
  5590 ;;		___bmul
  5591 ;;		___lmul
  5592 ;; This function is called by:
  5593 ;;		_PutOnOff
  5594 ;;		_main
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           
  5599                           ;psect for function _WriteLongInt
  5600  0259                     _WriteLongInt:	
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _WriteLongInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5604                           ;WriteLongInt@y stored from wreg
  5605  0259  00B0               	movwf	WriteLongInt@y
  5606                           
  5607                           ;HD44780.c: 183: int8_t POS = 0;
  5608  025A  01AF               	clrf	WriteLongInt@POS
  5609                           
  5610                           ;HD44780.c: 184: if (Sign) {
  5611  025B  082D               	movf	WriteLongInt@Sign,w
  5612  025C  1903               	btfsc	3,2
  5613  025D  2A8B               	goto	l2393
  5614                           
  5615                           ;HD44780.c: 185: POS++;
  5616  025E  0AAF               	incf	WriteLongInt@POS,f
  5617                           
  5618                           ;HD44780.c: 186: if (Val<0) {
  5619  025F  1FAB               	btfss	WriteLongInt@Val+3,7
  5620  0260  2A83               	goto	l2385
  5621                           
  5622                           ;HD44780.c: 187: Lcd_WriteChar (y, x, 0x2D);
  5623  0261  0827               	movf	WriteLongInt@x,w
  5624  0262  00A3               	movwf	Lcd_WriteChar@x
  5625  0263  302D               	movlw	45
  5626  0264  00A4               	movwf	Lcd_WriteChar@c
  5627  0265  0830               	movf	WriteLongInt@y,w
  5628  0266  22C5  120A  118A   	fcall	_Lcd_WriteChar
  5629                           
  5630                           ;HD44780.c: 188: Val=-1*Val;
  5631  0269  30FF               	movlw	255
  5632  026A  00F0               	movwf	___lmul@multiplier
  5633  026B  00F1               	movwf	___lmul@multiplier+1
  5634  026C  00F2               	movwf	___lmul@multiplier+2
  5635  026D  00F3               	movwf	___lmul@multiplier+3
  5636  026E  1283               	bcf	3,5	;RP0=0, select bank0
  5637  026F  1303               	bcf	3,6	;RP1=0, select bank0
  5638  0270  082B               	movf	WriteLongInt@Val+3,w
  5639  0271  00F7               	movwf	___lmul@multiplicand+3
  5640  0272  082A               	movf	WriteLongInt@Val+2,w
  5641  0273  00F6               	movwf	___lmul@multiplicand+2
  5642  0274  0829               	movf	WriteLongInt@Val+1,w
  5643  0275  00F5               	movwf	___lmul@multiplicand+1
  5644  0276  0828               	movf	WriteLongInt@Val,w
  5645  0277  00F4               	movwf	___lmul@multiplicand
  5646  0278  23CB  120A  118A   	fcall	___lmul
  5647  027B  0873               	movf	?___lmul+3,w
  5648  027C  00AB               	movwf	WriteLongInt@Val+3
  5649  027D  0872               	movf	?___lmul+2,w
  5650  027E  00AA               	movwf	WriteLongInt@Val+2
  5651  027F  0871               	movf	?___lmul+1,w
  5652  0280  00A9               	movwf	WriteLongInt@Val+1
  5653  0281  0870               	movf	?___lmul,w
  5654  0282  2AC3               	goto	L4
  5655  0283                     l2385:	
  5656                           ;HD44780.c: 189: } else
  5657                           
  5658                           
  5659                           ;HD44780.c: 190: Lcd_WriteChar (y, x, 0x2B);
  5660  0283  0827               	movf	WriteLongInt@x,w
  5661  0284  00A3               	movwf	Lcd_WriteChar@x
  5662  0285  302B               	movlw	43
  5663  0286  00A4               	movwf	Lcd_WriteChar@c
  5664  0287  0830               	movf	WriteLongInt@y,w
  5665  0288  22C5  120A  118A   	fcall	_Lcd_WriteChar
  5666  028B                     l2393:	
  5667  028B  1283               	bcf	3,5	;RP0=0, select bank0
  5668  028C  1303               	bcf	3,6	;RP1=0, select bank0
  5669  028D  082C               	movf	WriteLongInt@size,w
  5670  028E  1903               	btfsc	3,2
  5671  028F  0008               	return
  5672                           
  5673                           ;HD44780.c: 193: size--;
  5674  0290  03AC               	decf	WriteLongInt@size,f
  5675                           
  5676                           ;HD44780.c: 194: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  5677  0291  082F               	movf	WriteLongInt@POS,w
  5678  0292  072C               	addwf	WriteLongInt@size,w
  5679  0293  00AE               	movwf	??_WriteLongInt
  5680  0294  0827               	movf	WriteLongInt@x,w
  5681  0295  072E               	addwf	??_WriteLongInt,w
  5682  0296  00A3               	movwf	Lcd_WriteChar@x
  5683  0297  30F6               	movlw	246
  5684  0298  00A0               	movwf	___bmul@multiplicand
  5685  0299  240F  120A  118A   	fcall	PL12	;call to abstracted procedure
  5686  029C  300A               	movlw	10
  5687  029D  00F0               	movwf	___aldiv@divisor
  5688  029E  01F1               	clrf	___aldiv@divisor+1
  5689  029F  01F2               	clrf	___aldiv@divisor+2
  5690  02A0  01F3               	clrf	___aldiv@divisor+3
  5691  02A1  22EC  120A  118A   	fcall	___aldiv
  5692  02A4  0870               	movf	?___aldiv,w
  5693  02A5  224A  120A  118A   	fcall	___bmul
  5694  02A8  0728               	addwf	WriteLongInt@Val,w
  5695  02A9  3E30               	addlw	48
  5696  02AA  00A4               	movwf	Lcd_WriteChar@c
  5697  02AB  0830               	movf	WriteLongInt@y,w
  5698  02AC  22C5  120A  118A   	fcall	_Lcd_WriteChar
  5699                           
  5700                           ;HD44780.c: 195: Val = Val/10;
  5701  02AF  300A               	movlw	10
  5702  02B0  00F0               	movwf	___aldiv@divisor
  5703  02B1  01F1               	clrf	___aldiv@divisor+1
  5704  02B2  01F2               	clrf	___aldiv@divisor+2
  5705  02B3  01F3               	clrf	___aldiv@divisor+3
  5706  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  5707  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  5708  02B6  240F  120A  118A   	fcall	PL12	;call to abstracted procedure
  5709  02B9  22EC  120A  118A   	fcall	___aldiv
  5710  02BC  0873               	movf	?___aldiv+3,w
  5711  02BD  00AB               	movwf	WriteLongInt@Val+3
  5712  02BE  0872               	movf	?___aldiv+2,w
  5713  02BF  00AA               	movwf	WriteLongInt@Val+2
  5714  02C0  0871               	movf	?___aldiv+1,w
  5715  02C1  00A9               	movwf	WriteLongInt@Val+1
  5716  02C2  0870               	movf	?___aldiv,w
  5717  02C3                     L4:	
  5718  02C3  00A8               	movwf	WriteLongInt@Val
  5719  02C4  2A8B               	goto	l2393
  5720  02C5                     __end_of_WriteLongInt:	
  5721  02C5                     __ptext24:	
  5722 ;; *************** function _Lcd_WriteChar *****************
  5723 ;; Defined at:
  5724 ;;		line 99 in file "libs/HD44780.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;  y               1    wreg     unsigned char 
  5727 ;;  x               1    3[BANK0 ] unsigned char 
  5728 ;;  c               1    4[BANK0 ] unsigned char 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  y               1    5[BANK0 ] unsigned char 
  5731 ;;  data            1    6[BANK0 ] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 300/800
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5741 ;;      Params:         0       2       0       0       0
  5742 ;;      Locals:         0       2       0       0       0
  5743 ;;      Temps:          0       0       0       0       0
  5744 ;;      Totals:         0       4       0       0       0
  5745 ;;Total ram usage:        4 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    2
  5748 ;; This function calls:
  5749 ;;		_Lcd_CharCP
  5750 ;;		_Lcd_Command
  5751 ;; This function is called by:
  5752 ;;		_WriteLongInt
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           
  5757                           ;psect for function _Lcd_WriteChar
  5758  02C5                     _Lcd_WriteChar:	
  5759                           
  5760                           ;incstack = 0
  5761                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5762                           ;Lcd_WriteChar@y stored from wreg
  5763  02C5  00A5               	movwf	Lcd_WriteChar@y
  5764                           
  5765                           ;HD44780.c: 100: unsigned char data;
  5766                           ;HD44780.c: 101: switch(y){
  5767  02C6  2AD4               	goto	l2249
  5768  02C7                     l2239:	
  5769  02C7  0823               	movf	Lcd_WriteChar@x,w
  5770  02C8  3E7F               	addlw	127
  5771  02C9  2AD2               	goto	L7
  5772  02CA                     l2241:	
  5773  02CA  0823               	movf	Lcd_WriteChar@x,w
  5774  02CB  3EBF               	addlw	191
  5775  02CC  2AD2               	goto	L7
  5776  02CD                     l2243:	
  5777  02CD  0823               	movf	Lcd_WriteChar@x,w
  5778  02CE  3E93               	addlw	147
  5779  02CF  2AD2               	goto	L7
  5780  02D0                     l2245:	
  5781  02D0  0823               	movf	Lcd_WriteChar@x,w
  5782  02D1  3ED3               	addlw	211
  5783  02D2                     L7:	
  5784  02D2  00A6               	movwf	Lcd_WriteChar@data
  5785  02D3  2AE2               	goto	l2251
  5786  02D4                     l2249:	
  5787  02D4  0825               	movf	Lcd_WriteChar@y,w
  5788                           
  5789                           ; Switch size 1, requested type "space"
  5790                           ; Number of cases is 4, Range of values is 1 to 4
  5791                           ; switch strategies available:
  5792                           ; Name         Instructions Cycles
  5793                           ; simple_byte           13     7 (average)
  5794                           ; direct_byte           23    11 (fixed)
  5795                           ; jumptable            263     9 (fixed)
  5796                           ;	Chosen strategy is simple_byte
  5797  02D5  3A01               	xorlw	1	; case 1
  5798  02D6  1903               	skipnz
  5799  02D7  2AC7               	goto	l2239
  5800  02D8  3A03               	xorlw	3	; case 2
  5801  02D9  1903               	skipnz
  5802  02DA  2ACA               	goto	l2241
  5803  02DB  3A01               	xorlw	1	; case 3
  5804  02DC  1903               	skipnz
  5805  02DD  2ACD               	goto	l2243
  5806  02DE  3A07               	xorlw	7	; case 4
  5807  02DF  1903               	skipnz
  5808  02E0  2AD0               	goto	l2245
  5809  02E1  2AE2               	goto	l2251
  5810  02E2                     l2251:	
  5811                           
  5812                           ;HD44780.c: 107: Lcd_Command(data);
  5813  02E2  0826               	movf	Lcd_WriteChar@data,w
  5814  02E3  120A  158A  273E   	fcall	_Lcd_Command
  5815                           
  5816                           ;HD44780.c: 108: Lcd_CharCP(c);
  5817  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  5818  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  5819  02E8  0824               	movf	Lcd_WriteChar@c,w
  5820  02E9  120A  158A  2E47   	ljmp	_Lcd_CharCP
  5821  02EC                     __end_of_Lcd_WriteChar:	
  5822  02EC                     __ptext37:	
  5823 ;; *************** function ___aldiv *****************
  5824 ;; Defined at:
  5825 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  divisor         4    0[COMMON] long 
  5828 ;;  dividend        4    4[COMMON] long 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  quotient        4   10[COMMON] long 
  5831 ;;  sign            1    9[COMMON] unsigned char 
  5832 ;;  counter         1    8[COMMON] unsigned char 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  4    0[COMMON] long 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0
  5837 ;; Tracked objects:
  5838 ;;		On entry : 300/800
  5839 ;;		On exit  : 300/0
  5840 ;;		Unchanged: 300/0
  5841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5842 ;;      Params:         8       0       0       0       0
  5843 ;;      Locals:         6       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0
  5845 ;;      Totals:        14       0       0       0       0
  5846 ;;Total ram usage:       14 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_WriteLongInt
  5852 ;;		_GetModValue
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           
  5857                           ;psect for function ___aldiv
  5858  02EC                     ___aldiv:	
  5859                           
  5860                           ;incstack = 0
  5861                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5862  02EC  01F9               	clrf	___aldiv@sign
  5863  02ED  1FF3               	btfss	___aldiv@divisor+3,7
  5864  02EE  2AFC               	goto	l646
  5865  02EF  09F0               	comf	___aldiv@divisor,f
  5866  02F0  09F1               	comf	___aldiv@divisor+1,f
  5867  02F1  09F2               	comf	___aldiv@divisor+2,f
  5868  02F2  09F3               	comf	___aldiv@divisor+3,f
  5869  02F3  0AF0               	incf	___aldiv@divisor,f
  5870  02F4  1903               	skipnz
  5871  02F5  0AF1               	incf	___aldiv@divisor+1,f
  5872  02F6  1903               	skipnz
  5873  02F7  0AF2               	incf	___aldiv@divisor+2,f
  5874  02F8  1903               	skipnz
  5875  02F9  0AF3               	incf	___aldiv@divisor+3,f
  5876  02FA  01F9               	clrf	___aldiv@sign
  5877  02FB  0AF9               	incf	___aldiv@sign,f
  5878  02FC                     l646:	
  5879  02FC  1FF7               	btfss	___aldiv@dividend+3,7
  5880  02FD  2B0B               	goto	l2315
  5881  02FE  09F4               	comf	___aldiv@dividend,f
  5882  02FF  09F5               	comf	___aldiv@dividend+1,f
  5883  0300  09F6               	comf	___aldiv@dividend+2,f
  5884  0301  09F7               	comf	___aldiv@dividend+3,f
  5885  0302  0AF4               	incf	___aldiv@dividend,f
  5886  0303  1903               	skipnz
  5887  0304  0AF5               	incf	___aldiv@dividend+1,f
  5888  0305  1903               	skipnz
  5889  0306  0AF6               	incf	___aldiv@dividend+2,f
  5890  0307  1903               	skipnz
  5891  0308  0AF7               	incf	___aldiv@dividend+3,f
  5892  0309  3001               	movlw	1
  5893  030A  06F9               	xorwf	___aldiv@sign,f
  5894  030B                     l2315:	
  5895  030B  01FA               	clrf	___aldiv@quotient
  5896  030C  01FB               	clrf	___aldiv@quotient+1
  5897  030D  01FC               	clrf	___aldiv@quotient+2
  5898  030E  01FD               	clrf	___aldiv@quotient+3
  5899  030F  0873               	movf	___aldiv@divisor+3,w
  5900  0310  0472               	iorwf	___aldiv@divisor+2,w
  5901  0311  0471               	iorwf	___aldiv@divisor+1,w
  5902  0312  0470               	iorwf	___aldiv@divisor,w
  5903  0313  1903               	skipnz
  5904  0314  2B4A               	goto	l2337
  5905  0315  01F8               	clrf	___aldiv@counter
  5906  0316                     L16:	
  5907  0316  0AF8               	incf	___aldiv@counter,f
  5908  0317  1BF3               	btfsc	___aldiv@divisor+3,7
  5909  0318  2B1F               	goto	l2325
  5910  0319  1003               	clrc
  5911  031A  0DF0               	rlf	___aldiv@divisor,f
  5912  031B  0DF1               	rlf	___aldiv@divisor+1,f
  5913  031C  0DF2               	rlf	___aldiv@divisor+2,f
  5914  031D  0DF3               	rlf	___aldiv@divisor+3,f
  5915  031E  2B16               	goto	L16
  5916  031F                     l2325:	
  5917  031F  1003               	clrc
  5918  0320  0DFA               	rlf	___aldiv@quotient,f
  5919  0321  0DFB               	rlf	___aldiv@quotient+1,f
  5920  0322  0DFC               	rlf	___aldiv@quotient+2,f
  5921  0323  0DFD               	rlf	___aldiv@quotient+3,f
  5922  0324  0873               	movf	___aldiv@divisor+3,w
  5923  0325  0277               	subwf	___aldiv@dividend+3,w
  5924  0326  1D03               	skipz
  5925  0327  2B32               	goto	u2765
  5926  0328  0872               	movf	___aldiv@divisor+2,w
  5927  0329  0276               	subwf	___aldiv@dividend+2,w
  5928  032A  1D03               	skipz
  5929  032B  2B32               	goto	u2765
  5930  032C  0871               	movf	___aldiv@divisor+1,w
  5931  032D  0275               	subwf	___aldiv@dividend+1,w
  5932  032E  1D03               	skipz
  5933  032F  2B32               	goto	u2765
  5934  0330  0870               	movf	___aldiv@divisor,w
  5935  0331  0274               	subwf	___aldiv@dividend,w
  5936  0332                     u2765:	
  5937  0332  1C03               	skipc
  5938  0333  2B44               	goto	L17
  5939  0334  0870               	movf	___aldiv@divisor,w
  5940  0335  02F4               	subwf	___aldiv@dividend,f
  5941  0336  0871               	movf	___aldiv@divisor+1,w
  5942  0337  1C03               	skipc
  5943  0338  0F71               	incfsz	___aldiv@divisor+1,w
  5944  0339  02F5               	subwf	___aldiv@dividend+1,f
  5945  033A  0872               	movf	___aldiv@divisor+2,w
  5946  033B  1C03               	skipc
  5947  033C  0F72               	incfsz	___aldiv@divisor+2,w
  5948  033D  02F6               	subwf	___aldiv@dividend+2,f
  5949  033E  0873               	movf	___aldiv@divisor+3,w
  5950  033F  1C03               	skipc
  5951  0340  0F73               	incfsz	___aldiv@divisor+3,w
  5952  0341  02F7               	subwf	___aldiv@dividend+3,f
  5953  0342  147A               	bsf	___aldiv@quotient,0
  5954  0343  1003               	clrc
  5955  0344                     L17:	
  5956  0344  0CF3               	rrf	___aldiv@divisor+3,f
  5957  0345  0CF2               	rrf	___aldiv@divisor+2,f
  5958  0346  0CF1               	rrf	___aldiv@divisor+1,f
  5959  0347  0CF0               	rrf	___aldiv@divisor,f
  5960  0348  0BF8               	decfsz	___aldiv@counter,f
  5961  0349  2B1F               	goto	l2325
  5962  034A                     l2337:	
  5963  034A  0879               	movf	___aldiv@sign,w
  5964  034B  1903               	btfsc	3,2
  5965  034C  2B58               	goto	l2341
  5966  034D  09FA               	comf	___aldiv@quotient,f
  5967  034E  09FB               	comf	___aldiv@quotient+1,f
  5968  034F  09FC               	comf	___aldiv@quotient+2,f
  5969  0350  09FD               	comf	___aldiv@quotient+3,f
  5970  0351  0AFA               	incf	___aldiv@quotient,f
  5971  0352  1903               	skipnz
  5972  0353  0AFB               	incf	___aldiv@quotient+1,f
  5973  0354  1903               	skipnz
  5974  0355  0AFC               	incf	___aldiv@quotient+2,f
  5975  0356  1903               	skipnz
  5976  0357  0AFD               	incf	___aldiv@quotient+3,f
  5977  0358                     l2341:	
  5978  0358  087D               	movf	___aldiv@quotient+3,w
  5979  0359  00F3               	movwf	?___aldiv+3
  5980  035A  087C               	movf	___aldiv@quotient+2,w
  5981  035B  00F2               	movwf	?___aldiv+2
  5982  035C  087B               	movf	___aldiv@quotient+1,w
  5983  035D  00F1               	movwf	?___aldiv+1
  5984  035E  087A               	movf	___aldiv@quotient,w
  5985  035F  00F0               	movwf	?___aldiv
  5986  0360  0008               	return
  5987  0361                     __end_of___aldiv:	
  5988  0361                     __ptext35:	
  5989 ;; *************** function _GetModValue *****************
  5990 ;; Defined at:
  5991 ;;		line 143 in file "libs/gsk_app_funcs.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  a               4    0[BANK0 ] long 
  5994 ;;  b               4    4[BANK0 ] long 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  TempVar         4   12[BANK0 ] unsigned long 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  4    0[BANK0 ] long 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, pclath, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : B00/0
  6003 ;;		On exit  : 300/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6006 ;;      Params:         0       8       0       0       0
  6007 ;;      Locals:         0       4       0       0       0
  6008 ;;      Temps:          0       4       0       0       0
  6009 ;;      Totals:         0      16       0       0       0
  6010 ;;Total ram usage:       16 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    1
  6013 ;; This function calls:
  6014 ;;		___aldiv
  6015 ;;		___lmul
  6016 ;; This function is called by:
  6017 ;;		_GetCycleSecond
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           
  6022                           ;psect for function _GetModValue
  6023  0361                     _GetModValue:	
  6024                           
  6025                           ;gsk_app_funcs.c: 144: if (a<0)
  6026                           
  6027                           ;incstack = 0
  6028                           ; Regs used in _GetModValue: [wreg+status,2+status,0+pclath+cstack]
  6029  0361  1FA3               	btfss	GetModValue@a+3,7
  6030  0362  2B7B               	goto	l424
  6031                           
  6032                           ;gsk_app_funcs.c: 145: a = a*-1;
  6033  0363  30FF               	movlw	255
  6034  0364  00F0               	movwf	___lmul@multiplier
  6035  0365  00F1               	movwf	___lmul@multiplier+1
  6036  0366  00F2               	movwf	___lmul@multiplier+2
  6037  0367  00F3               	movwf	___lmul@multiplier+3
  6038  0368  0823               	movf	GetModValue@a+3,w
  6039  0369  00F7               	movwf	___lmul@multiplicand+3
  6040  036A  0822               	movf	GetModValue@a+2,w
  6041  036B  00F6               	movwf	___lmul@multiplicand+2
  6042  036C  0821               	movf	GetModValue@a+1,w
  6043  036D  00F5               	movwf	___lmul@multiplicand+1
  6044  036E  0820               	movf	GetModValue@a,w
  6045  036F  00F4               	movwf	___lmul@multiplicand
  6046  0370  23CB  120A  118A   	fcall	___lmul
  6047  0373  0873               	movf	?___lmul+3,w
  6048  0374  00A3               	movwf	GetModValue@a+3
  6049  0375  0872               	movf	?___lmul+2,w
  6050  0376  00A2               	movwf	GetModValue@a+2
  6051  0377  0871               	movf	?___lmul+1,w
  6052  0378  00A1               	movwf	GetModValue@a+1
  6053  0379  0870               	movf	?___lmul,w
  6054  037A  00A0               	movwf	GetModValue@a
  6055  037B                     l424:	
  6056                           
  6057                           ;gsk_app_funcs.c: 146: uint32_t TempVar = a/b;
  6058  037B  0827               	movf	GetModValue@b+3,w
  6059  037C  00F3               	movwf	___aldiv@divisor+3
  6060  037D  0826               	movf	GetModValue@b+2,w
  6061  037E  00F2               	movwf	___aldiv@divisor+2
  6062  037F  0825               	movf	GetModValue@b+1,w
  6063  0380  00F1               	movwf	___aldiv@divisor+1
  6064  0381  0824               	movf	GetModValue@b,w
  6065  0382  00F0               	movwf	___aldiv@divisor
  6066  0383  0823               	movf	GetModValue@a+3,w
  6067  0384  00F7               	movwf	___aldiv@dividend+3
  6068  0385  0822               	movf	GetModValue@a+2,w
  6069  0386  00F6               	movwf	___aldiv@dividend+2
  6070  0387  0821               	movf	GetModValue@a+1,w
  6071  0388  00F5               	movwf	___aldiv@dividend+1
  6072  0389  0820               	movf	GetModValue@a,w
  6073  038A  00F4               	movwf	___aldiv@dividend
  6074  038B  22EC  120A  118A   	fcall	___aldiv
  6075  038E  0873               	movf	?___aldiv+3,w
  6076  038F  00AF               	movwf	GetModValue@TempVar+3
  6077  0390  0872               	movf	?___aldiv+2,w
  6078  0391  00AE               	movwf	GetModValue@TempVar+2
  6079  0392  0871               	movf	?___aldiv+1,w
  6080  0393  00AD               	movwf	GetModValue@TempVar+1
  6081  0394  0870               	movf	?___aldiv,w
  6082  0395  00AC               	movwf	GetModValue@TempVar
  6083                           
  6084                           ;gsk_app_funcs.c: 147: return (a-TempVar*b);
  6085  0396  0827               	movf	GetModValue@b+3,w
  6086  0397  00F3               	movwf	___lmul@multiplier+3
  6087  0398  0826               	movf	GetModValue@b+2,w
  6088  0399  00F2               	movwf	___lmul@multiplier+2
  6089  039A  0825               	movf	GetModValue@b+1,w
  6090  039B  00F1               	movwf	___lmul@multiplier+1
  6091  039C  0824               	movf	GetModValue@b,w
  6092  039D  00F0               	movwf	___lmul@multiplier
  6093  039E  082F               	movf	GetModValue@TempVar+3,w
  6094  039F  00F7               	movwf	___lmul@multiplicand+3
  6095  03A0  082E               	movf	GetModValue@TempVar+2,w
  6096  03A1  00F6               	movwf	___lmul@multiplicand+2
  6097  03A2  082D               	movf	GetModValue@TempVar+1,w
  6098  03A3  00F5               	movwf	___lmul@multiplicand+1
  6099  03A4  082C               	movf	GetModValue@TempVar,w
  6100  03A5  00F4               	movwf	___lmul@multiplicand
  6101  03A6  23CB               	fcall	___lmul
  6102  03A7  0870               	movf	?___lmul,w
  6103  03A8  0220               	subwf	GetModValue@a,w
  6104  03A9  00A8               	movwf	??_GetModValue
  6105  03AA  0821               	movf	GetModValue@a+1,w
  6106  03AB  00A9               	movwf	??_GetModValue+1
  6107  03AC  0871               	movf	?___lmul+1,w
  6108  03AD  1C03               	skipc
  6109  03AE  0F71               	incfsz	?___lmul+1,w
  6110  03AF  02A9               	subwf	??_GetModValue+1,f
  6111  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  6112  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  6113  03B2  0822               	movf	GetModValue@a+2,w
  6114  03B3  00AA               	movwf	??_GetModValue+2
  6115  03B4  0872               	movf	?___lmul+2,w
  6116  03B5  1C03               	skipc
  6117  03B6  0F72               	incfsz	?___lmul+2,w
  6118  03B7  02AA               	subwf	??_GetModValue+2,f
  6119  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  6120  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  6121  03BA  0823               	movf	GetModValue@a+3,w
  6122  03BB  00AB               	movwf	??_GetModValue+3
  6123  03BC  0873               	movf	?___lmul+3,w
  6124  03BD  1C03               	skipc
  6125  03BE  0F73               	incfsz	?___lmul+3,w
  6126  03BF  02AB               	subwf	??_GetModValue+3,f
  6127  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  6128  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  6129  03C2  082B               	movf	??_GetModValue+3,w
  6130  03C3  00A3               	movwf	?_GetModValue+3
  6131  03C4  082A               	movf	??_GetModValue+2,w
  6132  03C5  00A2               	movwf	?_GetModValue+2
  6133  03C6  0829               	movf	??_GetModValue+1,w
  6134  03C7  00A1               	movwf	?_GetModValue+1
  6135  03C8  0828               	movf	??_GetModValue,w
  6136  03C9  00A0               	movwf	?_GetModValue
  6137  03CA  0008               	return
  6138  03CB                     __end_of_GetModValue:	
  6139  03CB                     __ptext36:	
  6140 ;; *************** function ___lmul *****************
  6141 ;; Defined at:
  6142 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  multiplier      4    0[COMMON] unsigned long 
  6145 ;;  multiplicand    4    4[COMMON] unsigned long 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  product         4    8[COMMON] unsigned long 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  4    0[COMMON] unsigned long 
  6150 ;; Registers used:
  6151 ;;		wreg, status,2, status,0
  6152 ;; Tracked objects:
  6153 ;;		On entry : 300/800
  6154 ;;		On exit  : 300/0
  6155 ;;		Unchanged: 300/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6157 ;;      Params:         8       0       0       0       0
  6158 ;;      Locals:         4       0       0       0       0
  6159 ;;      Temps:          0       0       0       0       0
  6160 ;;      Totals:        12       0       0       0       0
  6161 ;;Total ram usage:       12 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		_WriteLongInt
  6167 ;;		_ReadRTCAsSec
  6168 ;;		_GetModValue
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           
  6173                           ;psect for function ___lmul
  6174  03CB                     ___lmul:	
  6175                           
  6176                           ;incstack = 0
  6177                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6178  03CB  01F8               	clrf	___lmul@product
  6179  03CC  01F9               	clrf	___lmul@product+1
  6180  03CD  01FA               	clrf	___lmul@product+2
  6181  03CE  01FB               	clrf	___lmul@product+3
  6182  03CF                     l602:	
  6183  03CF  1C70               	btfss	___lmul@multiplier,0
  6184  03D0  2BE5               	goto	l2297
  6185  03D1  0874               	movf	___lmul@multiplicand,w
  6186  03D2  07F8               	addwf	___lmul@product,f
  6187  03D3  0875               	movf	___lmul@multiplicand+1,w
  6188  03D4  1103               	clrz
  6189  03D5  1803               	skipnc
  6190  03D6  3E01               	addlw	1
  6191  03D7  1D03               	btfss	3,2
  6192  03D8  07F9               	addwf	___lmul@product+1,f
  6193  03D9  0876               	movf	___lmul@multiplicand+2,w
  6194  03DA  1103               	clrz
  6195  03DB  1803               	skipnc
  6196  03DC  3E01               	addlw	1
  6197  03DD  1D03               	btfss	3,2
  6198  03DE  07FA               	addwf	___lmul@product+2,f
  6199  03DF  0877               	movf	___lmul@multiplicand+3,w
  6200  03E0  1103               	clrz
  6201  03E1  1803               	skipnc
  6202  03E2  3E01               	addlw	1
  6203  03E3  1D03               	btfss	3,2
  6204  03E4  07FB               	addwf	___lmul@product+3,f
  6205  03E5                     l2297:	
  6206  03E5  1003               	clrc
  6207  03E6  0DF4               	rlf	___lmul@multiplicand,f
  6208  03E7  0DF5               	rlf	___lmul@multiplicand+1,f
  6209  03E8  0DF6               	rlf	___lmul@multiplicand+2,f
  6210  03E9  0DF7               	rlf	___lmul@multiplicand+3,f
  6211  03EA  1003               	clrc
  6212  03EB  0CF3               	rrf	___lmul@multiplier+3,f
  6213  03EC  0CF2               	rrf	___lmul@multiplier+2,f
  6214  03ED  0CF1               	rrf	___lmul@multiplier+1,f
  6215  03EE  0CF0               	rrf	___lmul@multiplier,f
  6216  03EF  0873               	movf	___lmul@multiplier+3,w
  6217  03F0  0472               	iorwf	___lmul@multiplier+2,w
  6218  03F1  0471               	iorwf	___lmul@multiplier+1,w
  6219  03F2  0470               	iorwf	___lmul@multiplier,w
  6220  03F3  1D03               	skipz
  6221  03F4  2BCF               	goto	l602
  6222  03F5  087B               	movf	___lmul@product+3,w
  6223  03F6  00F3               	movwf	?___lmul+3
  6224  03F7  087A               	movf	___lmul@product+2,w
  6225  03F8  00F2               	movwf	?___lmul+2
  6226  03F9  0879               	movf	___lmul@product+1,w
  6227  03FA  00F1               	movwf	?___lmul+1
  6228  03FB  0878               	movf	___lmul@product,w
  6229  03FC  00F0               	movwf	?___lmul
  6230  03FD  0008               	return
  6231  03FE                     __end_of___lmul:	
  6232  03FE                     PL8:	
  6233  03FE  01A7               	clrf	WriteLongInt@x
  6234  03FF  0AA7               	incf	WriteLongInt@x,f
  6235  0400  0833               	movf	PutOnOff@Temp_PORT,w
  6236  0401  00A8               	movwf	WriteLongInt@Val
  6237  0402  3003               	movlw	3
  6238  0403  01A9               	clrf	WriteLongInt@Val+1
  6239  0404  01AA               	clrf	WriteLongInt@Val+2
  6240  0405  01AB               	clrf	WriteLongInt@Val+3
  6241  0406  00AC               	movwf	WriteLongInt@size
  6242  0407  0008               	return
  6243  0408                     __end_ofPL8:	
  6244  0408                     PL10:	
  6245  0408  1283               	bcf	3,5	;RP0=0, select bank0
  6246  0409  00B1               	movwf	??_PutOnOff
  6247  040A  301E               	movlw	30
  6248  040B  00A0               	movwf	___bmul@multiplicand
  6249  040C  1683               	bsf	3,5	;RP0=1, select bank1
  6250  040D  083A               	movf	_Cycle^(0+128),w
  6251  040E  0008               	return
  6252  040F                     __end_ofPL10:	
  6253  040F                     PL12:	
  6254  040F  082B               	movf	WriteLongInt@Val+3,w
  6255  0410  00F7               	movwf	___aldiv@dividend+3
  6256  0411  082A               	movf	WriteLongInt@Val+2,w
  6257  0412  00F6               	movwf	___aldiv@dividend+2
  6258  0413  0829               	movf	WriteLongInt@Val+1,w
  6259  0414  00F5               	movwf	___aldiv@dividend+1
  6260  0415  0828               	movf	WriteLongInt@Val,w
  6261  0416  00F4               	movwf	___aldiv@dividend
  6262  0417  0008               	return
  6263  0418                     __end_ofPL12:	
  6264  0418                     PL22:	
  6265  0418  0723               	addwf	??_ReadVars,w
  6266  0419  0735               	addwf	ReadVars@k,w
  6267  041A  00A4               	movwf	??_ReadVars+1
  6268  041B  0084               	movwf	4
  6269  041C  301E               	movlw	30
  6270  041D  00A0               	movwf	___bmul@multiplicand
  6271  041E  0833               	movf	ReadVars@i_34,w
  6272  041F  0008               	return
  6273  0420                     __end_ofPL22:	
  6274  0420                     PL28:	
  6275  0420  00A5               	movwf	??_ReadVars+2
  6276  0421  0834               	movf	ReadVars@j,w
  6277  0422  0734               	addwf	ReadVars@j,w
  6278  0423  0734               	addwf	ReadVars@j,w
  6279  0424  0725               	addwf	??_ReadVars+2,w
  6280  0425  0735               	addwf	ReadVars@k,w
  6281  0426  0008               	return
  6282  0427                     __end_ofPL28:	
  6283                           
  6284                           	psect	text34
  6285  0C76                     __ptext34:	
  6286 ;; *************** function _GetCycleSecond *****************
  6287 ;; Defined at:
  6288 ;;		line 65 in file "libs/gsk_app_funcs.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  PrevCycle       1   21[BANK0 ] unsigned char 
  6293 ;;  TempVar         1   22[BANK0 ] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/900
  6300 ;;		On exit  : 200/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6303 ;;      Params:         0       0       0       0       0
  6304 ;;      Locals:         0       2       0       0       0
  6305 ;;      Temps:          0       5       0       0       0
  6306 ;;      Totals:         0       7       0       0       0
  6307 ;;Total ram usage:        7 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    3
  6310 ;; This function calls:
  6311 ;;		_ChangeTheCycle
  6312 ;;		_DetermineCycleChange
  6313 ;;		_GetModValue
  6314 ;; This function is called by:
  6315 ;;		_main
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _GetCycleSecond
  6321  0C76                     _GetCycleSecond:	
  6322                           
  6323                           ;gsk_app_funcs.c: 66: char TempVar = Cycle;
  6324                           
  6325                           ;incstack = 0
  6326                           ; Regs used in _GetCycleSecond: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6327  0C76  1683               	bsf	3,5	;RP0=1, select bank1
  6328  0C77  1303               	bcf	3,6	;RP1=0, select bank1
  6329  0C78  083A               	movf	_Cycle^(0+128),w	;volatile
  6330  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  6331  0C7A  00B6               	movwf	GetCycleSecond@TempVar
  6332                           
  6333                           ;gsk_app_funcs.c: 67: if (Cycle == 0)
  6334  0C7B  1683               	bsf	3,5	;RP0=1, select bank1
  6335  0C7C  083A               	movf	_Cycle^(0+128),w	;volatile
  6336  0C7D  1D03               	btfss	3,2
  6337  0C7E  2C83               	goto	l2831
  6338                           
  6339                           ;gsk_app_funcs.c: 68: TempVar = 3 - 1;
  6340  0C7F  3002               	movlw	2
  6341  0C80  1283               	bcf	3,5	;RP0=0, select bank0
  6342  0C81  00B6               	movwf	GetCycleSecond@TempVar
  6343  0C82  2C86               	goto	l2833
  6344  0C83                     l2831:	
  6345                           
  6346                           ;gsk_app_funcs.c: 69: else
  6347                           ;gsk_app_funcs.c: 70: TempVar=TempVar-1;
  6348  0C83  30FF               	movlw	255
  6349  0C84  1283               	bcf	3,5	;RP0=0, select bank0
  6350  0C85  07B6               	addwf	GetCycleSecond@TempVar,f
  6351  0C86                     l2833:	
  6352                           
  6353                           ;gsk_app_funcs.c: 71: C_S = GetModValue((S_InUse-C[TempVar]), C_T);
  6354  0C86  1683               	bsf	3,5	;RP0=1, select bank1
  6355  0C87  0833               	movf	(_S_InUse+3)^(0+128),w	;volatile
  6356  0C88  1283               	bcf	3,5	;RP0=0, select bank0
  6357  0C89  00A3               	movwf	GetModValue@a+3
  6358  0C8A  1683               	bsf	3,5	;RP0=1, select bank1
  6359  0C8B  0832               	movf	(_S_InUse+2)^(0+128),w	;volatile
  6360  0C8C  1283               	bcf	3,5	;RP0=0, select bank0
  6361  0C8D  00A2               	movwf	GetModValue@a+2
  6362  0C8E  1683               	bsf	3,5	;RP0=1, select bank1
  6363  0C8F  0831               	movf	(_S_InUse+1)^(0+128),w	;volatile
  6364  0C90  1283               	bcf	3,5	;RP0=0, select bank0
  6365  0C91  00A1               	movwf	GetModValue@a+1
  6366  0C92  1683               	bsf	3,5	;RP0=1, select bank1
  6367  0C93  0830               	movf	_S_InUse^(0+128),w	;volatile
  6368  0C94  1283               	bcf	3,5	;RP0=0, select bank0
  6369  0C95  00A0               	movwf	GetModValue@a
  6370  0C96  0836               	movf	GetCycleSecond@TempVar,w
  6371  0C97  00B0               	movwf	??_GetCycleSecond
  6372  0C98  3001               	movlw	1
  6373  0C99  1003               	clrc
  6374  0C9A                     L13:	
  6375  0C9A  0DB0               	rlf	??_GetCycleSecond,f
  6376  0C9B  3EFF               	addlw	-1
  6377  0C9C  1003               	clrc
  6378  0C9D  1D03               	skipz
  6379  0C9E  2C9A               	goto	L13
  6380  0C9F  0D30               	rlf	??_GetCycleSecond,w
  6381  0CA0  3EA0               	addlw	(low (_C| 0))& (0+255)
  6382  0CA1  0084               	movwf	4
  6383  0CA2  1383               	bcf	3,7	;select IRP bank1
  6384  0CA3  0800               	movf	0,w
  6385  0CA4  00B1               	movwf	??_GetCycleSecond+1
  6386  0CA5  0A84               	incf	4,f
  6387  0CA6  0800               	movf	0,w
  6388  0CA7  00B2               	movwf	??_GetCycleSecond+2
  6389  0CA8  0A84               	incf	4,f
  6390  0CA9  0800               	movf	0,w
  6391  0CAA  00B3               	movwf	??_GetCycleSecond+3
  6392  0CAB  0A84               	incf	4,f
  6393  0CAC  0800               	movf	0,w
  6394  0CAD  00B4               	movwf	??_GetCycleSecond+4
  6395  0CAE  0831               	movf	??_GetCycleSecond+1,w
  6396  0CAF  02A0               	subwf	GetModValue@a,f
  6397  0CB0  0832               	movf	??_GetCycleSecond+2,w
  6398  0CB1  1C03               	skipc
  6399  0CB2  0F32               	incfsz	??_GetCycleSecond+2,w
  6400  0CB3  02A1               	subwf	GetModValue@a+1,f
  6401  0CB4  0833               	movf	??_GetCycleSecond+3,w
  6402  0CB5  1C03               	skipc
  6403  0CB6  0F33               	incfsz	??_GetCycleSecond+3,w
  6404  0CB7  02A2               	subwf	GetModValue@a+2,f
  6405  0CB8  0834               	movf	??_GetCycleSecond+4,w
  6406  0CB9  1C03               	skipc
  6407  0CBA  0F34               	incfsz	??_GetCycleSecond+4,w
  6408  0CBB  02A3               	subwf	GetModValue@a+3,f
  6409  0CBC  1683               	bsf	3,5	;RP0=1, select bank1
  6410  0CBD  0836               	movf	_C_T^(0+128),w	;volatile
  6411  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  6412  0CBF  00A4               	movwf	GetModValue@b
  6413  0CC0  1683               	bsf	3,5	;RP0=1, select bank1
  6414  0CC1  0837               	movf	(_C_T+1)^(0+128),w	;volatile
  6415  0CC2  1283               	bcf	3,5	;RP0=0, select bank0
  6416  0CC3  00A5               	movwf	GetModValue@b+1
  6417  0CC4  01A6               	clrf	GetModValue@b+2
  6418  0CC5  01A7               	clrf	GetModValue@b+3
  6419  0CC6  120A  118A  2361  120A  158A  	fcall	_GetModValue
  6420  0CCB  0821               	movf	?_GetModValue+1,w
  6421  0CCC  1683               	bsf	3,5	;RP0=1, select bank1
  6422  0CCD  00B5               	movwf	(_C_S+1)^(0+128)	;volatile
  6423  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
  6424  0CCF  0820               	movf	?_GetModValue,w
  6425  0CD0  1683               	bsf	3,5	;RP0=1, select bank1
  6426  0CD1  00B4               	movwf	_C_S^(0+128)	;volatile
  6427                           
  6428                           ;gsk_app_funcs.c: 72: if (C_S == 0) {
  6429  0CD2  0834               	movf	_C_S^(0+128),w	;volatile
  6430  0CD3  0435               	iorwf	(_C_S+1)^(0+128),w	;volatile
  6431  0CD4  1D03               	btfss	3,2
  6432  0CD5  0008               	return
  6433                           
  6434                           ;gsk_app_funcs.c: 73: DetermineCycleChange();
  6435  0CD6  2512  120A  158A   	fcall	_DetermineCycleChange
  6436                           
  6437                           ;gsk_app_funcs.c: 74: if (ChangeTheCycle()) {
  6438  0CD9  2502  120A  158A   	fcall	_ChangeTheCycle
  6439  0CDC  3A00               	xorlw	0
  6440  0CDD  1903               	skipnz
  6441  0CDE  0008               	return
  6442                           
  6443                           ;gsk_app_funcs.c: 75: char PrevCycle;
  6444                           ;gsk_app_funcs.c: 76: if (Cycle > 0)
  6445  0CDF  1683               	bsf	3,5	;RP0=1, select bank1
  6446  0CE0  083A               	movf	_Cycle^(0+128),w	;volatile
  6447  0CE1  1903               	btfsc	3,2
  6448  0CE2  2CE6               	goto	l2845
  6449                           
  6450                           ;gsk_app_funcs.c: 77: PrevCycle = Cycle - 1;
  6451  0CE3  083A               	movf	_Cycle^(0+128),w	;volatile
  6452  0CE4  3EFF               	addlw	255
  6453  0CE5  2CE7               	goto	L15
  6454  0CE6                     l2845:	
  6455                           
  6456                           ;gsk_app_funcs.c: 78: else
  6457                           ;gsk_app_funcs.c: 79: PrevCycle = 3 - 1;
  6458  0CE6  3002               	movlw	2
  6459  0CE7                     L15:	
  6460  0CE7  1283               	bcf	3,5	;RP0=0, select bank0
  6461  0CE8  00B5               	movwf	GetCycleSecond@PrevCycle
  6462                           
  6463                           ;gsk_app_funcs.c: 80: S_InUse = C[PrevCycle];
  6464  0CE9  00B0               	movwf	??_GetCycleSecond
  6465  0CEA  3001               	movlw	1
  6466  0CEB  1003               	clrc
  6467  0CEC                     L14:	
  6468  0CEC  0DB0               	rlf	??_GetCycleSecond,f
  6469  0CED  3EFF               	addlw	-1
  6470  0CEE  1003               	clrc
  6471  0CEF  1D03               	skipz
  6472  0CF0  2CEC               	goto	L14
  6473  0CF1  0D30               	rlf	??_GetCycleSecond,w
  6474  0CF2  3EA0               	addlw	(low (_C| 0))& (0+255)
  6475  0CF3  0084               	movwf	4
  6476  0CF4  1383               	bcf	3,7	;select IRP bank1
  6477  0CF5  0800               	movf	0,w
  6478  0CF6  1683               	bsf	3,5	;RP0=1, select bank1
  6479  0CF7  00B0               	movwf	_S_InUse^(0+128)	;volatile
  6480  0CF8  0A84               	incf	4,f
  6481  0CF9  0800               	movf	0,w
  6482  0CFA  00B1               	movwf	(_S_InUse+1)^(0+128)	;volatile
  6483  0CFB  0A84               	incf	4,f
  6484  0CFC  0800               	movf	0,w
  6485  0CFD  00B2               	movwf	(_S_InUse+2)^(0+128)	;volatile
  6486  0CFE  0A84               	incf	4,f
  6487  0CFF  0800               	movf	0,w
  6488  0D00  00B3               	movwf	(_S_InUse+3)^(0+128)	;volatile
  6489  0D01  0008               	return
  6490  0D02                     __end_of_GetCycleSecond:	
  6491  0D02                     __ptext39:	
  6492 ;; *************** function _ChangeTheCycle *****************
  6493 ;; Defined at:
  6494 ;;		line 45 in file "libs/gsk_app_funcs.c"
  6495 ;; Parameters:    Size  Location     Type
  6496 ;;		None
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;		None
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  1    wreg      unsigned char 
  6501 ;; Registers used:
  6502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6503 ;; Tracked objects:
  6504 ;;		On entry : 300/100
  6505 ;;		On exit  : 200/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6508 ;;      Params:         0       0       0       0       0
  6509 ;;      Locals:         0       0       0       0       0
  6510 ;;      Temps:          0       0       0       0       0
  6511 ;;      Totals:         0       0       0       0       0
  6512 ;;Total ram usage:        0 bytes
  6513 ;; Hardware stack levels used:    1
  6514 ;; Hardware stack levels required when called:    2
  6515 ;; This function calls:
  6516 ;;		_GetCyclePeriod
  6517 ;; This function is called by:
  6518 ;;		_GetCycleSecond
  6519 ;;		_main
  6520 ;; This function uses a non-reentrant model
  6521 ;;
  6522                           
  6523                           
  6524                           ;psect for function _ChangeTheCycle
  6525  0D02                     _ChangeTheCycle:	
  6526                           
  6527                           ;gsk_app_funcs.c: 46: if ((CONFIG0.bits.b0 == 1) && (C_S == 0)) {
  6528                           
  6529                           ;incstack = 0
  6530                           ; Regs used in _ChangeTheCycle: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6531  0D02  1C38               	btfss	_CONFIG0^(0+128),0	;volatile
  6532  0D03  3400               	retlw	0
  6533  0D04  0834               	movf	_C_S^(0+128),w	;volatile
  6534  0D05  0435               	iorwf	(_C_S+1)^(0+128),w	;volatile
  6535  0D06  1D03               	btfss	3,2
  6536  0D07  3400               	retlw	0
  6537                           
  6538                           ;gsk_app_funcs.c: 47: CONFIG0.bits.b0 = 0;
  6539  0D08  1038               	bcf	_CONFIG0^(0+128),0	;volatile
  6540                           
  6541                           ;gsk_app_funcs.c: 48: Cycle = Cycle + 1;
  6542  0D09  083A               	movf	_Cycle^(0+128),w	;volatile
  6543  0D0A  3E01               	addlw	1
  6544  0D0B  00BA               	movwf	_Cycle^(0+128)	;volatile
  6545                           
  6546                           ;gsk_app_funcs.c: 49: if (Cycle >= 0x03)
  6547  0D0C  3003               	movlw	3
  6548  0D0D  023A               	subwf	_Cycle^(0+128),w	;volatile
  6549  0D0E  1803               	btfsc	3,0
  6550                           
  6551                           ;gsk_app_funcs.c: 50: Cycle = 0;
  6552  0D0F  01BA               	clrf	_Cycle^(0+128)	;volatile
  6553                           
  6554                           ;gsk_app_funcs.c: 51: GetCyclePeriod();
  6555  0D10  25DC               	fcall	_GetCyclePeriod
  6556                           
  6557                           ;gsk_app_funcs.c: 52: return 1;
  6558  0D11  3401               	retlw	1
  6559  0D12                     __end_of_ChangeTheCycle:	
  6560                           ;gsk_app_funcs.c: 53: }
  6561                           ;gsk_app_funcs.c: 54: return 0;
  6562                           
  6563  0D12                     __ptext38:	
  6564 ;; *************** function _DetermineCycleChange *****************
  6565 ;; Defined at:
  6566 ;;		line 14 in file "libs/gsk_app_funcs.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;		None
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  i               1   12[COMMON] unsigned char 
  6571 ;;  MinDiffCycle    4    0        unsigned long 
  6572 ;;  DiffCycleTim    4    0        unsigned long 
  6573 ;;  PrevCycle       1   11[COMMON] unsigned char 
  6574 ;;  MinPos          1   10[COMMON] unsigned char 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  1    wreg      void 
  6577 ;; Registers used:
  6578 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6579 ;; Tracked objects:
  6580 ;;		On entry : 300/100
  6581 ;;		On exit  : 300/100
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6584 ;;      Params:         0       0       0       0       0
  6585 ;;      Locals:         3       0       0       0       0
  6586 ;;      Temps:         10       0       0       0       0
  6587 ;;      Totals:        13       0       0       0       0
  6588 ;;Total ram usage:       13 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; This function calls:
  6591 ;;		Nothing
  6592 ;; This function is called by:
  6593 ;;		_GetCycleSecond
  6594 ;;		_main
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           
  6599                           ;psect for function _DetermineCycleChange
  6600  0D12                     _DetermineCycleChange:	
  6601                           
  6602                           ;gsk_app_funcs.c: 15: if ((CONFIG0.bits.b0) == 0) {
  6603                           
  6604                           ;incstack = 0
  6605                           ; Regs used in _DetermineCycleChange: [wreg-fsr0h+status,2+status,0+btemp+1]
  6606  0D12  1838               	btfsc	_CONFIG0^(0+128),0	;volatile
  6607  0D13  0008               	return
  6608                           
  6609                           ;gsk_app_funcs.c: 16: uint32_t DiffCycleTime;
  6610                           ;gsk_app_funcs.c: 17: uint32_t MinDiffCycleTime;
  6611                           ;gsk_app_funcs.c: 18: char PrevCycle;
  6612                           ;gsk_app_funcs.c: 19: if (Cycle > 0)
  6613  0D14  083A               	movf	_Cycle^(0+128),w	;volatile
  6614                           
  6615                           ;gsk_app_funcs.c: 23: char MinPos=3;
  6616  0D15  3003               	movlw	3
  6617  0D16  00FA               	movwf	DetermineCycleChange@MinPos
  6618                           
  6619                           ;gsk_app_funcs.c: 24: for (char i = 0; i < 3; i++) {
  6620  0D17  01FC               	clrf	DetermineCycleChange@i
  6621  0D18                     l2423:	
  6622                           
  6623                           ;gsk_app_funcs.c: 25: if (i > 0)
  6624  0D18  087C               	movf	DetermineCycleChange@i,w
  6625  0D19  1903               	btfsc	3,2
  6626  0D1A  2D1E               	goto	l2427
  6627                           
  6628                           ;gsk_app_funcs.c: 26: PrevCycle = i - 1;
  6629  0D1B  087C               	movf	DetermineCycleChange@i,w
  6630  0D1C  3EFF               	addlw	255
  6631  0D1D  2D1F               	goto	L23
  6632  0D1E                     l2427:	
  6633                           
  6634                           ;gsk_app_funcs.c: 27: else
  6635                           ;gsk_app_funcs.c: 28: PrevCycle = 3 - 1;
  6636  0D1E  3002               	movlw	2
  6637  0D1F                     L23:	
  6638  0D1F  00FB               	movwf	DetermineCycleChange@PrevCycle
  6639                           
  6640                           ;gsk_app_funcs.c: 29: if (C[PrevCycle] < C[i]) {
  6641  0D20  087C               	movf	DetermineCycleChange@i,w
  6642  0D21  00F0               	movwf	??_DetermineCycleChange
  6643  0D22  3001               	movlw	1
  6644  0D23  1003               	clrc
  6645  0D24                     L18:	
  6646  0D24  0DF0               	rlf	??_DetermineCycleChange,f
  6647  0D25  3EFF               	addlw	-1
  6648  0D26  1003               	clrc
  6649  0D27  1D03               	skipz
  6650  0D28  2D24               	goto	L18
  6651  0D29  0D70               	rlf	??_DetermineCycleChange,w
  6652  0D2A  3EA0               	addlw	(low (_C| 0))& (0+255)
  6653  0D2B  0084               	movwf	4
  6654  0D2C  1383               	bcf	3,7	;select IRP bank1
  6655  0D2D  0800               	movf	0,w
  6656  0D2E  00F1               	movwf	??_DetermineCycleChange+1
  6657  0D2F  0A84               	incf	4,f
  6658  0D30  0800               	movf	0,w
  6659  0D31  00F2               	movwf	??_DetermineCycleChange+2
  6660  0D32  0A84               	incf	4,f
  6661  0D33  0800               	movf	0,w
  6662  0D34  00F3               	movwf	??_DetermineCycleChange+3
  6663  0D35  0A84               	incf	4,f
  6664  0D36  0800               	movf	0,w
  6665  0D37  00F4               	movwf	??_DetermineCycleChange+4
  6666  0D38  087B               	movf	DetermineCycleChange@PrevCycle,w
  6667  0D39  00F5               	movwf	??_DetermineCycleChange+5
  6668  0D3A  3001               	movlw	1
  6669  0D3B  1003               	clrc
  6670  0D3C                     L19:	
  6671  0D3C  0DF5               	rlf	??_DetermineCycleChange+5,f
  6672  0D3D  3EFF               	addlw	-1
  6673  0D3E  1003               	clrc
  6674  0D3F  1D03               	skipz
  6675  0D40  2D3C               	goto	L19
  6676  0D41  0D75               	rlf	??_DetermineCycleChange+5,w
  6677  0D42  3EA0               	addlw	(low (_C| 0))& (0+255)
  6678  0D43  0084               	movwf	4
  6679  0D44  0800               	movf	0,w
  6680  0D45  00F6               	movwf	??_DetermineCycleChange+6
  6681  0D46  0A84               	incf	4,f
  6682  0D47  0800               	movf	0,w
  6683  0D48  00F7               	movwf	??_DetermineCycleChange+7
  6684  0D49  0A84               	incf	4,f
  6685  0D4A  0800               	movf	0,w
  6686  0D4B  00F8               	movwf	??_DetermineCycleChange+8
  6687  0D4C  0A84               	incf	4,f
  6688  0D4D  0800               	movf	0,w
  6689  0D4E  00F9               	movwf	??_DetermineCycleChange+9
  6690  0D4F  3A80               	xorlw	128
  6691  0D50  00FF               	movwf	127
  6692  0D51  0874               	movf	??_DetermineCycleChange+4,w
  6693  0D52  3A80               	xorlw	128
  6694  0D53  027F               	subwf	127,w
  6695  0D54  1D03               	skipz
  6696  0D55  2D60               	goto	u2913
  6697  0D56  0873               	movf	??_DetermineCycleChange+3,w
  6698  0D57  0278               	subwf	??_DetermineCycleChange+8,w
  6699  0D58  1D03               	skipz
  6700  0D59  2D60               	goto	u2913
  6701  0D5A  0872               	movf	??_DetermineCycleChange+2,w
  6702  0D5B  0277               	subwf	??_DetermineCycleChange+7,w
  6703  0D5C  1D03               	skipz
  6704  0D5D  2D60               	goto	u2913
  6705  0D5E  0871               	movf	??_DetermineCycleChange+1,w
  6706  0D5F  0276               	subwf	??_DetermineCycleChange+6,w
  6707  0D60                     u2913:	
  6708                           
  6709                           ;gsk_app_funcs.c: 30: if ((S>C[PrevCycle]) && (S<=C[i])) {
  6710  0D60  087B               	movf	DetermineCycleChange@PrevCycle,w
  6711  0D61  00F0               	movwf	??_DetermineCycleChange
  6712  0D62  3001               	movlw	1
  6713  0D63  1803               	skipnc
  6714  0D64  2D97               	goto	L24
  6715  0D65  1003               	clrc
  6716  0D66                     L20:	
  6717  0D66  0DF0               	rlf	??_DetermineCycleChange,f
  6718  0D67  3EFF               	addlw	-1
  6719  0D68  1003               	clrc
  6720  0D69  1D03               	skipz
  6721  0D6A  2D66               	goto	L20
  6722  0D6B  25FE  120A  158A   	fcall	PL2	;call to abstracted procedure
  6723  0D6E  1D03               	skipz
  6724  0D6F  2D7A               	goto	u2933
  6725  0D70  082E               	movf	(_S+2)^(0+128),w	;volatile
  6726  0D71  0273               	subwf	??_DetermineCycleChange+3,w
  6727  0D72  1D03               	skipz
  6728  0D73  2D7A               	goto	u2933
  6729  0D74  082D               	movf	(_S+1)^(0+128),w	;volatile
  6730  0D75  0272               	subwf	??_DetermineCycleChange+2,w
  6731  0D76  1D03               	skipz
  6732  0D77  2D7A               	goto	u2933
  6733  0D78  082C               	movf	_S^(0+128),w	;volatile
  6734  0D79  0271               	subwf	??_DetermineCycleChange+1,w
  6735  0D7A                     u2933:	
  6736  0D7A  1803               	skipnc
  6737  0D7B  2DD2               	goto	l2445
  6738  0D7C  087C               	movf	DetermineCycleChange@i,w
  6739  0D7D  00F0               	movwf	??_DetermineCycleChange
  6740  0D7E  3001               	movlw	1
  6741  0D7F  1003               	clrc
  6742  0D80                     L21:	
  6743  0D80  0DF0               	rlf	??_DetermineCycleChange,f
  6744  0D81  3EFF               	addlw	-1
  6745  0D82  1003               	clrc
  6746  0D83  1D03               	skipz
  6747  0D84  2D80               	goto	L21
  6748  0D85  25FE  120A  158A   	fcall	PL2	;call to abstracted procedure
  6749  0D88  1D03               	skipz
  6750  0D89  2D94               	goto	u2953
  6751  0D8A  082E               	movf	(_S+2)^(0+128),w	;volatile
  6752  0D8B  0273               	subwf	??_DetermineCycleChange+3,w
  6753  0D8C  1D03               	skipz
  6754  0D8D  2D94               	goto	u2953
  6755  0D8E  082D               	movf	(_S+1)^(0+128),w	;volatile
  6756  0D8F  0272               	subwf	??_DetermineCycleChange+2,w
  6757  0D90  1D03               	skipz
  6758  0D91  2D94               	goto	u2953
  6759  0D92  082C               	movf	_S^(0+128),w	;volatile
  6760  0D93  0271               	subwf	??_DetermineCycleChange+1,w
  6761  0D94                     u2953:	
  6762  0D94  1803               	btfsc	3,0
  6763  0D95  2DD0               	goto	l2435
  6764  0D96  2DD2               	goto	l2445
  6765  0D97                     L24:	
  6766                           ;gsk_app_funcs.c: 34: if (((S>C[PrevCycle]) && (S<=86400)) || (S<=86400)) {
  6767                           
  6768  0D97  1003               	clrc
  6769  0D98                     L22:	
  6770  0D98  0DF0               	rlf	??_DetermineCycleChange,f
  6771  0D99  3EFF               	addlw	-1
  6772  0D9A  1003               	clrc
  6773  0D9B  1D03               	skipz
  6774  0D9C  2D98               	goto	L22
  6775  0D9D  25FE  120A  158A   	fcall	PL2	;call to abstracted procedure
  6776  0DA0  1D03               	skipz
  6777  0DA1  2DAC               	goto	u2973
  6778  0DA2  082E               	movf	(_S+2)^(0+128),w	;volatile
  6779  0DA3  0273               	subwf	??_DetermineCycleChange+3,w
  6780  0DA4  1D03               	skipz
  6781  0DA5  2DAC               	goto	u2973
  6782  0DA6  082D               	movf	(_S+1)^(0+128),w	;volatile
  6783  0DA7  0272               	subwf	??_DetermineCycleChange+2,w
  6784  0DA8  1D03               	skipz
  6785  0DA9  2DAC               	goto	u2973
  6786  0DAA  082C               	movf	_S^(0+128),w	;volatile
  6787  0DAB  0271               	subwf	??_DetermineCycleChange+1,w
  6788  0DAC                     u2973:	
  6789  0DAC  1803               	skipnc
  6790  0DAD  2DBF               	goto	l2441
  6791  0DAE  1BAF               	btfsc	(_S+3)^(0+128),7	;volatile
  6792  0DAF  2DD0               	goto	l2435
  6793  0DB0  082F               	movf	(_S+3)^(0+128),w	;volatile
  6794  0DB1  1D03               	btfss	3,2
  6795  0DB2  2DBF               	goto	l2441
  6796  0DB3  3001               	movlw	1
  6797  0DB4  022E               	subwf	(_S+2)^(0+128),w	;volatile
  6798  0DB5  1D03               	skipz
  6799  0DB6  2DBD               	goto	u2983
  6800  0DB7  3051               	movlw	81
  6801  0DB8  022D               	subwf	(_S+1)^(0+128),w	;volatile
  6802  0DB9  1D03               	skipz
  6803  0DBA  2DBD               	goto	u2983
  6804  0DBB  3081               	movlw	129
  6805  0DBC  022C               	subwf	_S^(0+128),w	;volatile
  6806  0DBD                     u2983:	
  6807  0DBD  1C03               	btfss	3,0
  6808  0DBE  2DD0               	goto	l2435
  6809  0DBF                     l2441:	
  6810  0DBF  1BAF               	btfsc	(_S+3)^(0+128),7	;volatile
  6811  0DC0  2DD0               	goto	l2435
  6812  0DC1  082F               	movf	(_S+3)^(0+128),w	;volatile
  6813  0DC2  1D03               	btfss	3,2
  6814  0DC3  2DD2               	goto	l2445
  6815  0DC4  3001               	movlw	1
  6816  0DC5  022E               	subwf	(_S+2)^(0+128),w	;volatile
  6817  0DC6  1D03               	skipz
  6818  0DC7  2DCE               	goto	u2993
  6819  0DC8  3051               	movlw	81
  6820  0DC9  022D               	subwf	(_S+1)^(0+128),w	;volatile
  6821  0DCA  1D03               	skipz
  6822  0DCB  2DCE               	goto	u2993
  6823  0DCC  3081               	movlw	129
  6824  0DCD  022C               	subwf	_S^(0+128),w	;volatile
  6825  0DCE                     u2993:	
  6826  0DCE  1803               	btfsc	3,0
  6827  0DCF  2DD2               	goto	l2445
  6828  0DD0                     l2435:	
  6829                           
  6830                           ;gsk_app_funcs.c: 31: MinPos = i;
  6831  0DD0  087C               	movf	DetermineCycleChange@i,w
  6832  0DD1  00FA               	movwf	DetermineCycleChange@MinPos
  6833  0DD2                     l2445:	
  6834  0DD2  3003               	movlw	3
  6835  0DD3  0AFC               	incf	DetermineCycleChange@i,f
  6836  0DD4  027C               	subwf	DetermineCycleChange@i,w
  6837  0DD5  1C03               	skipc
  6838  0DD6  2D18               	goto	l2423
  6839                           
  6840                           ;gsk_app_funcs.c: 36: }
  6841                           ;gsk_app_funcs.c: 37: }
  6842                           ;gsk_app_funcs.c: 38: }
  6843                           ;gsk_app_funcs.c: 40: if (MinPos != Cycle)
  6844  0DD7  087A               	movf	DetermineCycleChange@MinPos,w
  6845  0DD8  063A               	xorwf	_Cycle^(0+128),w	;volatile
  6846  0DD9  1D03               	btfss	3,2
  6847                           
  6848                           ;gsk_app_funcs.c: 41: CONFIG0.bits.b0 = 1;
  6849  0DDA  1438               	bsf	_CONFIG0^(0+128),0	;volatile
  6850  0DDB  0008               	return
  6851  0DDC                     __end_of_DetermineCycleChange:	
  6852  0DDC                     __ptext40:	
  6853 ;; *************** function _GetCyclePeriod *****************
  6854 ;; Defined at:
  6855 ;;		line 57 in file "libs/gsk_app_funcs.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  i               1    4[BANK0 ] unsigned char 
  6860 ;; Return value:  Size  Location     Type
  6861 ;;                  1    wreg      void 
  6862 ;; Registers used:
  6863 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6864 ;; Tracked objects:
  6865 ;;		On entry : 200/100
  6866 ;;		On exit  : B00/800
  6867 ;;		Unchanged: 0/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6869 ;;      Params:         0       0       0       0       0
  6870 ;;      Locals:         0       1       0       0       0
  6871 ;;      Temps:          0       1       0       0       0
  6872 ;;      Totals:         0       2       0       0       0
  6873 ;;Total ram usage:        2 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    1
  6876 ;; This function calls:
  6877 ;;		___bmul
  6878 ;; This function is called by:
  6879 ;;		_ChangeTheCycle
  6880 ;;		_main
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           
  6885                           ;psect for function _GetCyclePeriod
  6886  0DDC                     _GetCyclePeriod:	
  6887                           
  6888                           ;gsk_app_funcs.c: 58: C_T = 0;
  6889                           
  6890                           ;incstack = 0
  6891                           ; Regs used in _GetCyclePeriod: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6892  0DDC  1683               	bsf	3,5	;RP0=1, select bank1
  6893  0DDD  01B6               	clrf	_C_T^(0+128)	;volatile
  6894  0DDE  01B7               	clrf	(_C_T+1)^(0+128)	;volatile
  6895                           
  6896                           ;gsk_app_funcs.c: 59: for (char i=0; i < 10; i++) {
  6897  0DDF  1283               	bcf	3,5	;RP0=0, select bank0
  6898  0DE0  01A4               	clrf	GetCyclePeriod@i
  6899  0DE1                     l2287:	
  6900                           
  6901                           ;gsk_app_funcs.c: 60: C_T=C_T + (C_ON[Cycle][i][0]);
  6902  0DE1  0824               	movf	GetCyclePeriod@i,w
  6903  0DE2  0724               	addwf	GetCyclePeriod@i,w
  6904  0DE3  0724               	addwf	GetCyclePeriod@i,w
  6905  0DE4  3E90               	addlw	(low (_C_ON| (0+256)))& (0+255)
  6906  0DE5  00A3               	movwf	??_GetCyclePeriod
  6907  0DE6  301E               	movlw	30
  6908  0DE7  00A0               	movwf	___bmul@multiplicand
  6909  0DE8  1683               	bsf	3,5	;RP0=1, select bank1
  6910  0DE9  083A               	movf	_Cycle^(0+128),w
  6911  0DEA  120A  118A  224A  120A  158A  	fcall	___bmul
  6912  0DEF  0723               	addwf	??_GetCyclePeriod,w
  6913  0DF0  0084               	movwf	4
  6914  0DF1  1783               	bsf	3,7	;select IRP bank3
  6915  0DF2  0800               	movf	0,w
  6916  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
  6917  0DF4  07B6               	addwf	_C_T^(0+128),f	;volatile
  6918  0DF5  1803               	skipnc
  6919  0DF6  0AB7               	incf	(_C_T+1)^(0+128),f	;volatile
  6920  0DF7  1283               	bcf	3,5	;RP0=0, select bank0
  6921  0DF8  300A               	movlw	10
  6922  0DF9  0AA4               	incf	GetCyclePeriod@i,f
  6923  0DFA  0224               	subwf	GetCyclePeriod@i,w
  6924  0DFB  1803               	btfsc	3,0
  6925  0DFC  0008               	return
  6926  0DFD  2DE1               	goto	l2287
  6927  0DFE                     __end_of_GetCyclePeriod:	
  6928  0DFE                     PL2:	
  6929  0DFE  0D70               	rlf	??_DetermineCycleChange,w
  6930  0DFF  3EA0               	addlw	(low (_C| 0))& (0+255)
  6931  0E00  0084               	movwf	4
  6932  0E01  0800               	movf	0,w
  6933  0E02  00F1               	movwf	??_DetermineCycleChange+1
  6934  0E03  0A84               	incf	4,f
  6935  0E04  0800               	movf	0,w
  6936  0E05  00F2               	movwf	??_DetermineCycleChange+2
  6937  0E06  0A84               	incf	4,f
  6938  0E07  0800               	movf	0,w
  6939  0E08  00F3               	movwf	??_DetermineCycleChange+3
  6940  0E09  0A84               	incf	4,f
  6941  0E0A  0800               	movf	0,w
  6942  0E0B  00F4               	movwf	??_DetermineCycleChange+4
  6943  0E0C  3A80               	xorlw	128
  6944  0E0D  00FF               	movwf	127
  6945  0E0E  082F               	movf	(_S+3)^(0+128),w	;volatile
  6946  0E0F  3A80               	xorlw	128
  6947  0E10  027F               	subwf	127,w
  6948  0E11  0008               	return
  6949  0E12                     __end_ofPL2:	


Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         208
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80     11      39
    BANK3            96      0      90
    BANK2            96      0      90

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    Lcd_Text@buffer	PTR unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[2]), STR_1(CODE[5]), 


Critical Paths under _main in COMMON

    _UART_Init->___altoft
    _trunc->___altoft
    ___fttol->___altoft
    ___altoft->___ftpack
    ___ftadd->___altoft
    ___ftmul->___altoft
    ___ftdiv->___altoft
    _ReadRTCAsSec->___lmul
    _I2C_ReadAtAddress->_I2C_Master_Read
    _WriteLongInt->___aldiv
    _Lcd_WriteChar->___aldiv
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_CharCP->_Lcd_Delay5500us
    _Lcd_Init->_Lcd_Command
    _Lcd_Command->_Lcd_Delay5500us
    _I2C_Master_Init->___lldiv
    _GetModValue->___aldiv
    ___bmul->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->_round
    _round->___ftsub
    _trunc->___fttol
    ___fttol->___ftadd
    ___ftsub->_trunc
    ___ftadd->___ftdiv
    ___ftdiv->___ftmul
    _ReadVars->___bmul
    _PutOnOff->_WriteLongInt
    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___bmul
    _GetStates->___bmul
    _GetCycleSecond->_GetModValue
    _ChangeTheCycle->_GetCyclePeriod
    _GetCyclePeriod->___bmul

Critical Paths under _main in BANK1

    _main->_UART_Init

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   44155
                                             79 BANK0      1     1      0
                                              8 BANK1      3     3      0
                     _ChangeTheCycle
               _DetermineCycleChange
                     _GetCyclePeriod
                     _GetCycleSecond
                          _GetStates
                    _I2C_Master_Init
                           _Lcd_Init
                           _Lcd_Text
                           _PutOnOff
                       _ReadRTCAsSec
                           _ReadVars
                          _UART_Init
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           12     8      4   21751
                                             75 BANK0      4     0      4
                                              0 BANK1      8     8      0
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3   10404
                                             69 BANK0      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3394
                                             55 BANK0      8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     336
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             13     9      4     431
                                             42 BANK0     13     9      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             6     2      4    2336
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3489
                                             63 BANK0      6     0      6
                            ___ftadd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3294
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2628
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2480
                                             15 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2070
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            19    19      0    1152
                                              3 BANK0     19    19      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAsSec                                        18    14      4    3819
                                              0 BANK0     18    14      4
                  _I2C_ReadAtAddress
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1922
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadAtAddress                                    3     2      1     983
                                              4 COMMON     3     2      1
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     389
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      4     2      2     109
                                              0 COMMON     4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PutOnOff                                             5     5      0    5917
                                             17 BANK0      5     5      0
                       _WriteLongInt
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                        10     3      7    5005
                                              7 BANK0     10     3      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___bmul
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2     894
                                              3 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             4     2      2     789
                                              4 COMMON     4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           2     2      0     176
                                              2 COMMON     2     2      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              4 COMMON     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          2     2      0     176
                                              2 COMMON     2     2      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5500us                                      2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _GetStates                                            4     4      0     708
                                              3 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _GetCycleSecond                                       7     7      0    2680
                                             16 BANK0      7     7      0
                     _ChangeTheCycle
               _DetermineCycleChange
                        _GetModValue
 ---------------------------------------------------------------------------------
 (2) _GetModValue                                         16     8      8    1696
                                              0 BANK0     16     8      8
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     706
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     684
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _DetermineCycleChange                                21    21      0     273
                                              0 COMMON    13    13      0
 ---------------------------------------------------------------------------------
 (2) _ChangeTheCycle                                       0     0      0     662
                     _GetCyclePeriod
 ---------------------------------------------------------------------------------
 (3) _GetCyclePeriod                                       2     2      0     662
                                              3 BANK0      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     594
                                              0 BANK0      3     2      1
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeTheCycle
     _GetCyclePeriod
       ___bmul
         ___aldiv (ARG)
   _DetermineCycleChange
   _GetCyclePeriod
     ___bmul
       ___aldiv (ARG)
   _GetCycleSecond
     _ChangeTheCycle
       _GetCyclePeriod
         ___bmul
           ___aldiv (ARG)
     _DetermineCycleChange
     _GetModValue
       ___aldiv
       ___lmul
   _GetStates
     ___bmul
       ___aldiv (ARG)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
   _PutOnOff
     _WriteLongInt
       _Lcd_WriteChar
         _Lcd_CharCP
           _Lcd_Delay5500us
           _Lcd_Delay5us
         _Lcd_Command
           _Lcd_Delay5500us
           _Lcd_Delay5us
         ___aldiv (ARG)
         ___bmul (ARG)
           ___aldiv (ARG)
       ___aldiv
       ___bmul
         ___aldiv (ARG)
       ___lmul
     ___bmul
       ___aldiv (ARG)
   _ReadRTCAsSec
     _I2C_ReadAtAddress
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___lmul
     ___wmul
   _ReadVars
     ___bmul
       ___aldiv (ARG)
     _eeprom_read
   _UART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _round
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _frexp
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5500us
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5500us
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
     ___aldiv
     ___bmul
       ___aldiv (ARG)
     ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0     139       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      B      27       7       48.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      5A       9       93.8%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0      5A      11       93.8%
DATA                 0      0     139      12        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Oct 26 17:31:49 2016

                 ___altoft@exp 007C                              _C 00A0                              _S 00AC  
                            pc 0002                 ___bmul@product 0021                    __CFG_CP$OFF 0000  
                           PL2 0DFE                             PL4 07CB                             PL6 0C63  
                           PL8 03FE                  ___altoft@sign 007D                             l52 0EFE  
                           _RD 0C60                             _WR 0C61                             fsr 0004  
          ___wmul@multiplicand 0072                   ___ftadd@exp1 0049                   ___ftadd@exp2 0048  
                          PL10 0408                            PL20 0FE2                            PL12 040F  
                          PL30 0FF2                            PL22 0418                            PL14 0B38  
                          PL32 0FF9                            PL24 07D6                            PL16 0C6D  
                          PL34 07DD                            PL26 0FEB                            PL18 0FD9  
                          PL28 0420                   ___ftadd@sign 0047                            l159 0B2D  
                          l424 037B                            l505 0236                            l602 03CF  
                          l801 0538                            l646 02FC                            l747 05F3  
                          l759 061B                            l783 06A9                            _RA0 0028  
                          _RA1 0029                            _RA2 002A                            _RA3 002B  
                          _RA4 002C                            _RA5 002D                            _C_D 00B9  
                          _PEN 048A                   __CFG_CPD$OFF 0000                            _C_S 00B4  
                          _C_T 00B6                            _SEN 0488                            fsr0 0004  
                          indf 0000            __end_of_GetModValue 03CB                   __CFG_IESO$ON 0000  
                 __CFG_FOSC$HS 0000            __end_of_Lcd_Command 0FD2                  ?_ReadRTCAsSec 0020  
                 __CFG_LVP$OFF 0000                   ___ftdiv@cntr 0038                   ___ftdiv@sign 003D  
                         l2001 060B                           l2005 0619                           l2101 070A  
                         l2031 0FAE                           l2007 0610                           l2111 0650  
                         l2033 0FBB                           l2121 0666                           l2201 074A  
                         l2035 0FC4                           l2019 0F87                           l2115 0657  
                         l2211 0756                           l2029 0FA2                           l2061 0EC4  
                         l2141 0688                           l2133 0674                           l2213 0760  
                         l2205 0752                           l2063 0ECD                           l2047 0E90  
                         l2151 06A0                           l2143 068D                           l2057 0EAB  
                         l2241 02CA                           l2153 06A5                           l2145 0691  
                         l2217 076E                           l2315 030B                           l2059 0EB7  
                         l2243 02CD                           l2251 02E2                           l2139 0683  
                         l2227 079E                           l2077 024D                           l2341 0358  
                         l2325 031F                           l2245 02D0                           l2501 0527  
                         l2165 06BF                           l2423 0D18                           l2239 02C7  
                         l2159 06B4                           l2183 0726                           l2441 0DBF  
                         l2337 034A                           l2249 02D4                           l2177 06DB  
                         l2185 072B                           l2435 0DD0                           l2427 0D1E  
                         l2611 00A0                           l2275 0B27                           l2523 054B  
                         l2099 06FF                           l2445 0DD2                           l2541 058F  
                         l2349 077E                           l2287 0DE1                           l2623 0183  
                         l2359 0473                           l2297 03E5                           l2385 0283  
                         l2393 028B                           l2641 01EE                           l2545 05A0  
                         l2483 0AC6                           l2635 01ED                           l2563 05B1  
                         l2901 0155                           l2831 0C83                           l2487 0ACE  
                         l2647 01EF                           l2575 05C6                           l2567 05BA  
                         l2833 0C86                           l2753 0E14                           l2905 016E  
                         l2771 0E31                           l2755 0E17                           l2763 0E21  
                         l2579 05CF                           l2923 0BA9                           l2845 0CE6  
                         l2757 0E1A                           l2765 0E2F                           l2925 0BAA  
                         l2863 00D0                           l2855 00AD                           l2599 0075  
                         l2759 0E1D                           l2951 0BFD                           l2935 0BC3  
                         l2873 00DA                           l2953 0C00                           l1987 0F35  
                         l2883 011C                           l1995 05F7                           l2877 00F6  
                         l1997 05FC                           l2895 012C                           l2879 0103  
                         l1999 0601                           l2899 0148                           STR_1 0009  
                         STR_2 000C                           _BRGH 04C2                           _CREN 00C4  
                         u2010 0F84                           u2005 0F79                           u2030 0F9F  
                         u2120 0E5A                           u2050 0FAB                           u2210 0E8D  
                         u2115 0E4F                           u2205 0E82                           u2070 0FB8  
                         u2230 0EA8                           u2150 0E6B                           u2134 0E5D  
                         u2145 0E60                           u2090 0FC1                           u2250 0EB4  
                         u3115 0559                           u2180 0E7C                           u2164 0E6E  
                         u2270 0EC1                           u2175 0E71                           u2290 0ECA  
                         u2194 0E7F                           u3235 0088                           u1920 0F51  
                         u3504 0117                           u3345 0042                           u3505 0115  
                         u3610 0BDC                           u1915 0F46                           u3603 0BA7  
                         u2660 0B24                           u3445 00C9                           u1950 0F62  
                         u1934 0F54                           u3534 0140                           u3535 013E  
                         u3464 00EE                           u3624 0BDF                           u2913 0D60  
                         u1945 0F57                           u3465 00EC                           u2585 072F  
        __size_of_WriteLongInt 006C                           u3707 0F39                           u3643 0BFB  
                         u1980 0F73                           u1964 0F65                           u3564 014F  
                         u2933 0D7A                           u2765 0332                           u3565 014D  
                         u3574 0169                           u3494 00FD                           u1975 0F68  
                         u3575 0167                           u3495 00FB                           u2953 0D94  
                         u3657 0C5B                           u1994 0F76                           u3667 0E92  
                         _RCEN 048B                           u2973 0DAC                           u3677 0ECF  
                         u2983 0DBD                           u3687 0F89                           u2993 0DCE  
                         u3697 0FC6                           _C_ON 0190                           _SPEN 00C7  
                         _TXEN 04C5                           _SYNC 04C4              ??_Lcd_Delay5500us 0070  
                 __CFG_WRT$OFF 0000                  __CFG_FCMEN$ON 0000                           _main 0B41  
                 ___ftpack@arg 0070                   ___ftpack@exp 0073           __end_of_Lcd_Delay5us 0FD9  
                         btemp 007E               ??_ChangeTheCycle 007E                           ltemp 007E  
                         start 0000         ??_DetermineCycleChange 0070                           ttemp 007E  
                         wtemp 007E                 main@Firm_Cicle 006F               _ReadRTCAsSec$939 002B  
             GetStates@TempVar 0024              ___bmul@multiplier 0022                  __CFG_MCLRE$ON 0000  
                 ___ftmul@cntr 002D                   ___ftmul@sign 002E                     _Lcd_CharCP 0E47  
                 ___fttol@exp1 0056                   ___fttol@lval 0052               ?_I2C_Master_Init 0020  
             ?_I2C_Master_Read 0070               ?_I2C_Master_Wait 0070              PutOnOff@Temp_PORT 0033  
             ?_I2C_Master_Stop 0070                __end_of___aldiv 0361                          ?_main 0070  
                        _ACKEN 048C                          _ACKDT 048D                          _EEADR 010D  
              __end_of___ftadd 06ED                          _BRG16 0C3B                  __CFG_WDTE$OFF 0000  
              __end_of___ftdiv 057E                          _ANSEL 0188                __end_of___lldiv 00A9  
              __end_of___ftmul 05EB                __end_of___ftsub 0792                __end_of___fttol 0777  
                        _SPBRG 0099                   _WriteLongInt 0259            ___lmul@multiplicand 0074  
                        _Cycle 00BA                 ??_ReadRTCAsSec 0024             __size_of_UART_Init 007D  
                        _frexp 0792                  ___ftpack@sign 0074          GetCycleSecond@TempVar 0036  
                        _round 0427                          _trunc 0462                 __CFG_BOREN$OFF 0000  
                        pclath 000A                          ltemp0 007E                          ltemp1 0082  
                        ltemp2 0086                          ltemp3 0080                          ttemp0 007E  
                        ttemp1 0081                          ttemp2 0084                          ttemp3 0087  
                        ttemp4 007F                          status 0003                          wtemp0 007E  
                        wtemp1 0080                          wtemp2 0082                          wtemp3 0084  
                        wtemp4 0086                          wtemp5 0088                          wtemp6 007F  
               _GetCycleSecond 0C76                 _GetCyclePeriod 0DDC               __end_of_Lcd_Init 0F35  
             __end_of_Lcd_Text 0E47                __initialization 07E4                   __end_of_main 0C63  
             __end_of_ReadVars 0235                    _GetModValue 0361                    _Lcd_Command 0F3E  
              ReadRTCAsSec@Out 002D                         ??_main 00C4                  ___fttol@sign1 0051  
           __size_of_GetStates 002E              ?_I2C_Master_Start 0070              ?_I2C_Master_Write 0070  
             __end_of_PutOnOff 017A             ??_I2C_Master_Start 0070             ??_I2C_Master_Write 0072  
                       ?_frexp 0070               __end_of___altoft 071C                         _EEDATA 010C  
                       _EECON1 018C               __end_of___ftpack 062D                         ?_round 0065  
                       _ANSELH 0189                         ?_trunc 0057              _I2C_ReadAtAddress 0ADD  
       __end_of_GetCycleSecond 0D02         __end_of_GetCyclePeriod 0DFE               WriteLongInt@Sign 002D  
                       _SPBRGH 009A                 Lcd_Text@buffer 0075             ?_I2C_ReadAtAddress 0074  
                       _SSPADD 0093                         _TRISC3 043B                         _TRISC4 043C  
                       _SSPCON 0014                         _SSPBUF 0013             GetModValue@TempVar 002C  
             WriteLongInt@size 002C                 __CFG_PWRTE$OFF 0000           __size_of_eeprom_read 0015  
          ??_I2C_ReadAtAddress 0075              __end_of_UART_Init 0516                         ___bmul 024A  
                  ?_Lcd_CharCP 0070                         ___lmul 03CB                      ??___aldiv 0078  
                       ___wmul 0AC4                      ??___ftadd 0044                      ??___ftdiv 0035  
                    ??___lldiv 0078                      ??___ftmul 0026                      ??___ftsub 007E  
                    ??___fttol 004E          __end_of_Lcd_WriteChar 02EC          ___ftmul@f3_as_product 002A  
    __end_of_I2C_ReadAtAddress 0B06                         round@f 0068                         round@x 0065  
                       trunc@i 005A          __size_of_Lcd_Delay5us 0007                         trunc@x 0057  
           Lcd_Command@command 0073                ?_GetCycleSecond 0070                ?_GetCyclePeriod 0070  
      __end_of__initialization 07FC                     ___altoft@c 0078                   ReadVars@i_34 0033  
              eeprom_read@addr 0070                     ___ftadd@f1 003E                     ___ftadd@f2 0041  
                   ___ftdiv@f1 0032                     ___ftdiv@f2 002F                     ___ftdiv@f3 0039  
            __end_of_GetStates 00D7            ___bmul@multiplicand 0020                     ___ftmul@f1 0020  
                   ___ftmul@f2 0023                     ___ftsub@f1 0062                     ___ftsub@f2 005F  
                   ___fttol@f1 004A                 __pcstackCOMMON 0070           __end_of_ReadRTCAsSec 0AC4  
                __end_of_frexp 07CB                  __end_of_round 0462                  __end_of_trunc 0499  
                   __end_ofPL2 0E12                     __end_ofPL4 07D6                     __end_ofPL6 0C6D  
                   __end_ofPL8 0408                   _Lcd_Delay5us 0FD2                _Lcd_Delay5500us 0F35  
               Lcd_WriteChar@c 0024                 Lcd_WriteChar@x 0023                 Lcd_WriteChar@y 0025  
                    ?_Lcd_Init 0070                      ?_Lcd_Text 0074                        ??_frexp 0074  
          __size_of_Lcd_CharCP 0097                        ??_round 007E                        ??_trunc 007E  
                   __pbssBANK1 00A0                     __pbssBANK2 0110                     __pbssBANK3 0190  
                    ?_ReadVars 0070        I2C_ReadAtAddress@IntAdd 0074                     __pmaintext 0B41  
                      ?___bmul 0020                      ?_PutOnOff 0070                        ?___lmul 0070  
                      ?___wmul 0070                      ?___altoft 0078                 ___lmul@product 0078  
                    ?___ftpack 0070                        _CONFIG0 00B8                        _C_BLINK 0110  
                   ??_Lcd_Init 0074     __size_of_I2C_ReadAtAddress 0029                     ??_Lcd_Text 0076  
                      _SSPCON2 0091                        _SSPSTAT 0094                     __stringtab 0003  
                   ??_ReadVars 0023                        _S_InUse 00B0         ReadRTCAsSec@TempVar000 0031  
__size_of_DetermineCycleChange 00CA                     ??_PutOnOff 0031                        ___aldiv 02EC  
              __size_of___bmul 000F              Lcd_WriteChar@data 0026                __size_of___lmul 0033  
                      ___ftadd 062D                        ___ftdiv 0516                        ___lldiv 0061  
              __size_of___wmul 0019                        ___ftmul 057E                        ___ftsub 0777  
                      ___fttol 071C        __end_of_Lcd_Delay5500us 0F3E                     ??___altoft 007C  
                 ?_GetModValue 0020                     ??___ftpack 0075                   ?_Lcd_Command 0070  
                      __ptext1 0499                        __ptext2 0427                        __ptext3 0462  
                      __ptext4 0792                        __ptext5 071C                        __ptext6 06ED  
                      __ptext7 0777                        __ptext8 062D                        __ptext9 057E  
             ___aldiv@dividend 0074       __size_of_I2C_Master_Init 002D       __size_of_I2C_Master_Read 001F  
     __size_of_I2C_Master_Wait 0008       __size_of_I2C_Master_Stop 0003        GetCycleSecond@PrevCycle 0035  
                      clrloop0 002D           end_of_initialization 07FC          __size_of_ReadRTCAsSec 00B6  
    __size_of_I2C_Master_Start 0003      __size_of_I2C_Master_Write 0005                ___lldiv@divisor 0070  
              ___lldiv@counter 007C                   ??_Lcd_CharCP 0072               ___aldiv@quotient 007A  
             I2C_Master_Init@c 0020               I2C_Master_Read@a 0070                      Lcd_Text@x 0074  
                    Lcd_Text@y 0076        __size_of_ChangeTheCycle 0010                      _UART_Init 0499  
                    _TRISAbits 0085               ??_GetCycleSecond 0030               ??_GetCyclePeriod 0023  
                 _ReadRTCAsSec 0A0E             __end_of_Lcd_CharCP 0EDE                    ___ftdiv@exp 003C  
                ??_eeprom_read 0070                      ReadVars@i 0032                      ReadVars@j 0034  
                    ReadVars@k 0035                    ___ftmul@exp 0029                      _GetStates 00A9  
               __end_of___bmul 0259                 __end_of___lmul 03FE               ?_Lcd_Delay5500us 0070  
               __end_of___wmul 0ADD                     ?_UART_Init 006B                    __end_ofPL10 040F  
                  __end_ofPL20 0FEB                    __end_ofPL12 0418                    __end_ofPL30 0FF9  
                  __end_ofPL22 0420                    __end_ofPL14 0B41                    __end_ofPL32 1000  
                  __end_ofPL24 07DD                    __end_ofPL16 0C76                    __end_ofPL34 07E4  
                  __end_ofPL26 0FF2                    __end_ofPL18 0FE2                    __end_ofPL28 0427  
          start_initialization 07E4                GetCyclePeriod@i 0024              __size_of_Lcd_Init 0057  
            __size_of_Lcd_Text 0035                     frexp@value 0070              ??_I2C_Master_Init 0024  
            ??_I2C_Master_Read 0072              ??_I2C_Master_Wait 0070              ??_I2C_Master_Stop 0070  
              WriteLongInt@POS 002F                WriteLongInt@Val 0028         __size_of_Lcd_WriteChar 0027  
            __size_of_ReadVars 00BB                       ??___bmul 007E                       ??___lmul 0078  
                     ??___wmul 0074                      PutOnOff@i 0034            __end_of_eeprom_read 024A  
                   ?_GetStates 0070          DetermineCycleChange@i 007C              __size_of_PutOnOff 00A3  
         __size_of_GetModValue 006A              __size_of___altoft 002F              __size_of___ftpack 0042  
                ?_WriteLongInt 0027           __size_of_Lcd_Command 0094                      ___latbits 0002  
                __pcstackBANK0 0020                  __pcstackBANK1 00BC                  WriteLongInt@x 0027  
                WriteLongInt@y 0030         I2C_ReadAtAddress@DevID 0076               _I2C_Master_Start 0B0B  
             _I2C_Master_Write 0B06                       ?___aldiv 0070                       ?___ftadd 003E  
                     ?___ftdiv 002F                       ?___lldiv 0070                       ?___ftmul 0020  
                     ?___ftsub 005F                       ?___fttol 004A                 _ChangeTheCycle 0D02  
                  ??_UART_Init 007E                      __pstrings 0003                 ??_WriteLongInt 002E  
                _Lcd_WriteChar 02C5                  PutOnOff@i_345 0035                  _UART_Init$937 00BC  
                _UART_Init$938 00BF   __end_of_DetermineCycleChange 0DDC                 __size_of_frexp 0039  
                   UART_Init@x 00C2                 __size_of_round 003B                 __size_of_trunc 0037  
              ___aldiv@divisor 0070                ___aldiv@counter 0078                 ___wmul@product 0074  
                 GetModValue@a 0020                   GetModValue@b 0024                      clear_ram0 002C  
                  _eeprom_read 0235     DetermineCycleChange@MinPos 007A         __end_of_ChangeTheCycle 0D12  
                  ??_GetStates 0023              UART_Init@baudrate 006B                   Lcd_Init@data 0074  
                  __stringbase 0008                 ?_Lcd_WriteChar 0023              ___wmul@multiplier 0070  
                     _Lcd_Init 0EDE                       _Lcd_Text 0E12            I2C_Master_Read@temp 0072  
            ___lmul@multiplier 0070                       _ReadVars 017A                      frexp@eptr 0073  
                 Lcd_Text@data 0077                       _PutOnOff 00D7                ?_ChangeTheCycle 0070  
             __size_of___aldiv 0075               __size_of___ftadd 00C0               __size_of___ftdiv 0068  
             __size_of___lldiv 0048                       ___altoft 06ED               __size_of___ftmul 006D  
             __size_of___ftsub 001B               __size_of___fttol 005B                       ___ftpack 05EB  
           __end_of__stringtab 0009                  ?_Lcd_Delay5us 0070                _I2C_Master_Init 0034  
              _I2C_Master_Read 0B0E                _I2C_Master_Wait 0B2D                _I2C_Master_Stop 0B35  
        I2C_ReadAtAddress@data 0075                       __ptext10 0516                       __ptext11 05EB  
                     __ptext20 0B0E                       __ptext12 017A                       __ptext21 0B2D  
                     __ptext13 0235                       __ptext30 0F35                       __ptext22 00D7  
                     __ptext14 0A0E                       __ptext31 0034                       __ptext23 0259  
                     __ptext15 0AC4                       __ptext40 0DDC                       __ptext32 0061  
                     __ptext24 02C5                       __ptext16 0ADD                       __ptext41 024A  
                     __ptext33 00A9                       __ptext25 0E12                       __ptext17 0B06  
                     __ptext34 0C76                       __ptext26 0E47                       __ptext18 0B35  
                     __ptext35 0361                       __ptext27 0EDE                       __ptext19 0B0B  
                     __ptext36 03CB                       __ptext28 0F3E                       __ptext37 02EC  
                     __ptext29 0FD2                       __ptext38 0D12                       __ptext39 0D02  
            __CFG_BOR4V$BOR21V 0000                    Lcd_CharCP@c 0073                     trunc@expon 005D  
                __size_of_main 0122                   _PresentState 00BB  DetermineCycleChange@PrevCycle 007B  
         __end_of_WriteLongInt 02C5           _DetermineCycleChange 0D12                ??_Lcd_WriteChar 007E  
               ??_Lcd_Delay5us 0070       __end_of_I2C_Master_Start 0B0E       __end_of_I2C_Master_Write 0B0B  
     __size_of_Lcd_Delay5500us 0009               ___lldiv@dividend 0074        __size_of_GetCycleSecond 008C  
      __size_of_GetCyclePeriod 0022                      stringcode 0003          ?_DetermineCycleChange 0070  
                ??_GetModValue 0028        __end_of_I2C_Master_Init 0061        __end_of_I2C_Master_Read 0B2D  
      __end_of_I2C_Master_Wait 0B35        __end_of_I2C_Master_Stop 0B38                  ??_Lcd_Command 0072  
                   GetStates@i 0026               ___lldiv@quotient 0078              I2C_Master_Write@d 0070  
                     stringdir 0003                       stringtab 0003                   ___aldiv@sign 0079  
                 ?_eeprom_read 0070  
