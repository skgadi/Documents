

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jun 13 15:03:05 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	dabs	1,0x1AE,60,_STATE_1
    35                           	dabs	1,0x190,30,_STATE_PERIODS
    36                           	dabs	1,0x1EA,6,_STATE_CUMULATIVE_PERIODS
    37                           	dabs	1,0x16B,4,_S
    38                           	dabs	1,0x16F,1,_C_D
    39                           	dabs	1,0x110,60,_STATE_2
    40                           	dabs	1,0x14C,12,_C
    41                           	dabs	1,0x167,4,_AUDIO
    42                           	dabs	1,0x164,3,_STATE_BREAKS
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.42
    46                           ; Generated 13/04/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F886 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0089                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  008F                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0094                     	;# 
   281  0095                     	;# 
   282  0096                     	;# 
   283  0097                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  009F                     	;# 
   292  0105                     	;# 
   293  0107                     	;# 
   294  0108                     	;# 
   295  0109                     	;# 
   296  010C                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  0185                     	;# 
   302  0187                     	;# 
   303  0188                     	;# 
   304  0189                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459  0000                     	;# 
   460  0001                     	;# 
   461  0002                     	;# 
   462  0003                     	;# 
   463  0004                     	;# 
   464  0005                     	;# 
   465  0006                     	;# 
   466  0007                     	;# 
   467  0009                     	;# 
   468  000A                     	;# 
   469  000B                     	;# 
   470  000C                     	;# 
   471  000D                     	;# 
   472  000E                     	;# 
   473  000E                     	;# 
   474  000F                     	;# 
   475  0010                     	;# 
   476  0011                     	;# 
   477  0012                     	;# 
   478  0013                     	;# 
   479  0014                     	;# 
   480  0015                     	;# 
   481  0015                     	;# 
   482  0016                     	;# 
   483  0017                     	;# 
   484  0018                     	;# 
   485  0019                     	;# 
   486  001A                     	;# 
   487  001B                     	;# 
   488  001B                     	;# 
   489  001C                     	;# 
   490  001D                     	;# 
   491  001E                     	;# 
   492  001F                     	;# 
   493  0081                     	;# 
   494  0085                     	;# 
   495  0086                     	;# 
   496  0087                     	;# 
   497  0089                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  008F                     	;# 
   502  0090                     	;# 
   503  0091                     	;# 
   504  0092                     	;# 
   505  0093                     	;# 
   506  0093                     	;# 
   507  0093                     	;# 
   508  0094                     	;# 
   509  0095                     	;# 
   510  0096                     	;# 
   511  0097                     	;# 
   512  0098                     	;# 
   513  0099                     	;# 
   514  009A                     	;# 
   515  009B                     	;# 
   516  009C                     	;# 
   517  009D                     	;# 
   518  009E                     	;# 
   519  009F                     	;# 
   520  0105                     	;# 
   521  0107                     	;# 
   522  0108                     	;# 
   523  0109                     	;# 
   524  010C                     	;# 
   525  010C                     	;# 
   526  010D                     	;# 
   527  010E                     	;# 
   528  010F                     	;# 
   529  0185                     	;# 
   530  0187                     	;# 
   531  0188                     	;# 
   532  0189                     	;# 
   533  018C                     	;# 
   534  018D                     	;# 
   535  0000                     	;# 
   536  0001                     	;# 
   537  0002                     	;# 
   538  0003                     	;# 
   539  0004                     	;# 
   540  0005                     	;# 
   541  0006                     	;# 
   542  0007                     	;# 
   543  0009                     	;# 
   544  000A                     	;# 
   545  000B                     	;# 
   546  000C                     	;# 
   547  000D                     	;# 
   548  000E                     	;# 
   549  000E                     	;# 
   550  000F                     	;# 
   551  0010                     	;# 
   552  0011                     	;# 
   553  0012                     	;# 
   554  0013                     	;# 
   555  0014                     	;# 
   556  0015                     	;# 
   557  0015                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001B                     	;# 
   565  001C                     	;# 
   566  001D                     	;# 
   567  001E                     	;# 
   568  001F                     	;# 
   569  0081                     	;# 
   570  0085                     	;# 
   571  0086                     	;# 
   572  0087                     	;# 
   573  0089                     	;# 
   574  008C                     	;# 
   575  008D                     	;# 
   576  008E                     	;# 
   577  008F                     	;# 
   578  0090                     	;# 
   579  0091                     	;# 
   580  0092                     	;# 
   581  0093                     	;# 
   582  0093                     	;# 
   583  0093                     	;# 
   584  0094                     	;# 
   585  0095                     	;# 
   586  0096                     	;# 
   587  0097                     	;# 
   588  0098                     	;# 
   589  0099                     	;# 
   590  009A                     	;# 
   591  009B                     	;# 
   592  009C                     	;# 
   593  009D                     	;# 
   594  009E                     	;# 
   595  009F                     	;# 
   596  0105                     	;# 
   597  0107                     	;# 
   598  0108                     	;# 
   599  0109                     	;# 
   600  010C                     	;# 
   601  010C                     	;# 
   602  010D                     	;# 
   603  010E                     	;# 
   604  010F                     	;# 
   605  0185                     	;# 
   606  0187                     	;# 
   607  0188                     	;# 
   608  0189                     	;# 
   609  018C                     	;# 
   610  018D                     	;# 
   611                           
   612                           	psect	idataBANK0
   613  07FB                     __pidataBANK0:	
   614                           
   615                           ;initializer for _PREV_CYCLE_TYPE
   616  07FB  3402               	retlw	2
   617                           
   618                           	psect	idataEEDATA
   619  0000                     __pidataEEDATA:	
   620  0000                     _EE_Settings:	
   621                           ;initializer for _EE_Settings
   622                           
   623  0000  000A               	db	10
   624  0001  0024               	db	36
   625  0002  0090               	db	144
   626  0003  0000               	db	0
   627  0004  0000               	db	0
   628  0005  000A               	db	10
   629  0006  0009               	db	9
   630  0007  0028               	db	40
   631  0008  0000               	db	0
   632  0009  0000               	db	0
   633  000A  000A               	db	10
   634  000B  0000               	db	0
   635  000C  0000               	db	0
   636  000D  0012               	db	18
   637  000E  0040               	db	64
   638  000F  000A               	db	10
   639  0010  0000               	db	0
   640  0011  0000               	db	0
   641  0012  0024               	db	36
   642  0013  0080               	db	128
   643  0014  0000               	db	0
   644  0015  0000               	db	0
   645  0016  0000               	db	0
   646  0017  0000               	db	0
   647  0018  0000               	db	0
   648  0019  0000               	db	0
   649  001A  0000               	db	0
   650  001B  0000               	db	0
   651  001C  0000               	db	0
   652  001D  0000               	db	0
   653  001E  0000               	db	0
   654  001F  0000               	db	0
   655  0020  0000               	db	0
   656  0021  0000               	db	0
   657  0022  0000               	db	0
   658  0023  0000               	db	0
   659  0024  0000               	db	0
   660  0025  0000               	db	0
   661  0026  0000               	db	0
   662  0027  0000               	db	0
   663  0028  0000               	db	0
   664  0029  0000               	db	0
   665  002A  0000               	db	0
   666  002B  0000               	db	0
   667  002C  0000               	db	0
   668  002D  0000               	db	0
   669  002E  0000               	db	0
   670  002F  0000               	db	0
   671  0030  0000               	db	0
   672  0031  0000               	db	0
   673  0032  0000               	db	0
   674  0033  0000               	db	0
   675  0034  0000               	db	0
   676  0035  0000               	db	0
   677  0036  0000               	db	0
   678  0037  0000               	db	0
   679  0038  0000               	db	0
   680  0039  0000               	db	0
   681  003A  0000               	db	0
   682  003B  0000               	db	0
   683  003C  0000               	db	0
   684  003D  0000               	db	0
   685  003E  0000               	db	0
   686  003F  0000               	db	0
   687  0040  0000               	db	0
   688  0041  0000               	db	0
   689  0042  0000               	db	0
   690  0043  0000               	db	0
   691  0044  0000               	db	0
   692  0045  0000               	db	0
   693  0046  0000               	db	0
   694  0047  0000               	db	0
   695  0048  0000               	db	0
   696  0049  0000               	db	0
   697  004A  0000               	db	0
   698  004B  0000               	db	0
   699  004C  0000               	db	0
   700  004D  0000               	db	0
   701  004E  0000               	db	0
   702  004F  0000               	db	0
   703  0050  0000               	db	0
   704  0051  0000               	db	0
   705  0052  0000               	db	0
   706  0053  0000               	db	0
   707  0054  0000               	db	0
   708  0055  0000               	db	0
   709  0056  0000               	db	0
   710  0057  0000               	db	0
   711  0058  0000               	db	0
   712  0059  0000               	db	0
   713  005A  0000               	db	0
   714  005B  0000               	db	0
   715  005C  0000               	db	0
   716  005D  0000               	db	0
   717  005E  0000               	db	0
   718  005F  0000               	db	0
   719  0060  0000               	db	0
   720  0061  0000               	db	0
   721  0062  0000               	db	0
   722  0063  0000               	db	0
   723  0064  0000               	db	0
   724  0065  0000               	db	0
   725  0066  0000               	db	0
   726  0067  0000               	db	0
   727  0068  0000               	db	0
   728  0069  0000               	db	0
   729  006A  0000               	db	0
   730  006B  0000               	db	0
   731  006C  0000               	db	0
   732  006D  0000               	db	0
   733  006E  0000               	db	0
   734  006F  0000               	db	0
   735  0070  0000               	db	0
   736  0071  0000               	db	0
   737  0072  0000               	db	0
   738  0073  0000               	db	0
   739  0074  0000               	db	0
   740  0075  0000               	db	0
   741  0076  0000               	db	0
   742  0077  0000               	db	0
   743  0078  0000               	db	0
   744  0079  0000               	db	0
   745  007A  0000               	db	0
   746  007B  0000               	db	0
   747  007C  0000               	db	0
   748  007D  0000               	db	0
   749  007E  0000               	db	0
   750  007F  0000               	db	0
   751  0080  0000               	db	0
   752  0081  0000               	db	0
   753  0082  0000               	db	0
   754  0083  0000               	db	0
   755  0084  0000               	db	0
   756  0085  0000               	db	0
   757  0086  0000               	db	0
   758  0087  0000               	db	0
   759  0088  0000               	db	0
   760  0089  0000               	db	0
   761  008A  0000               	db	0
   762  008B  0000               	db	0
   763  008C  0000               	db	0
   764  008D  0000               	db	0
   765  008E  0000               	db	0
   766  008F  0000               	db	0
   767  0090  0000               	db	0
   768  0091  0000               	db	0
   769  0092  0000               	db	0
   770  0093  0000               	db	0
   771  0094  0000               	db	0
   772  0095  0000               	db	0
   773  0096  0000               	db	0
   774  0097  0001               	db	1
   775  0098  002C               	db	44
   776  0099  0000               	db	0
   777  009A  0002               	db	2
   778  009B  0058               	db	88
   779  009C  0000               	db	0
   780  009D  0003               	db	3
   781  009E  0084               	db	132
   782  009F  0040               	db	64
   783  00A0  0000               	db	0
   784  00A1  0000               	db	0
   785  00A2  0000               	db	0
   786  00A3  0002               	db	2
   787  00A4  0003               	db	3
   788  00A5  001E               	db	30
   789  00A6  0000               	db	0
   790                           
   791                           	psect	strings
   792  0800                     __pstrings:	
   793  0800                     stringtab:	
   794  0800                     __stringtab:	
   795  0800                     stringcode:	
   796                           ;	String table - string pointers are 1 byte each
   797                           
   798  0800                     stringdir:	
   799  0800  3008               	movlw	high stringdir
   800  0801  008A               	movwf	10
   801  0802  0804               	movf	4,w
   802  0803  0A84               	incf	4,f
   803  0804  0782               	addwf	2,f
   804  0805                     __stringbase:	
   805  0805  3400               	retlw	0
   806  0806                     __end_of__stringtab:	
   807  0806                     UART_ReadFromGPS_TO@StartCode:	
   808  0806  3424               	retlw	36
   809  0807  3447               	retlw	71
   810  0808  3450               	retlw	80
   811  0809  3452               	retlw	82
   812  080A  344D               	retlw	77
   813  080B  3443               	retlw	67
   814  080C  342C               	retlw	44
   815  080D                     __end_ofUART_ReadFromGPS_TO@StartCode:	
   816  080D                     UART_ReadFromGPS@StartCode:	
   817  080D  3424               	retlw	36
   818  080E  3447               	retlw	71
   819  080F  3450               	retlw	80
   820  0810  3452               	retlw	82
   821  0811  344D               	retlw	77
   822  0812  3443               	retlw	67
   823  0813  342C               	retlw	44
   824  0814                     __end_ofUART_ReadFromGPS@StartCode:	
   825  000E                     _TMR1	set	14
   826  0006                     _PORTB	set	6
   827  0005                     _PORTA	set	5
   828  001A                     _RCREG	set	26
   829  0019                     _TXREG	set	25
   830  0010                     _T1CONbits	set	16
   831  000B                     _INTCONbits	set	11
   832  000C                     _PIR1bits	set	12
   833  0013                     _SSPBUF	set	19
   834  0014                     _SSPCON	set	20
   835  0038                     _RC0	set	56
   836  0065                     _RCIF	set	101
   837  00C7                     _SPEN	set	199
   838  00C4                     _CREN	set	196
   839  0039                     _RC1	set	57
   840  0028                     _RA0	set	40
   841  0029                     _RA1	set	41
   842  002A                     _RA2	set	42
   843  002B                     _RA3	set	43
   844  002C                     _RA4	set	44
   845  002D                     _RA5	set	45
   846  0087                     _TRISC	set	135
   847  0086                     _TRISB	set	134
   848  0085                     _TRISA	set	133
   849  009A                     _SPBRGH	set	154
   850  0099                     _SPBRG	set	153
   851  008C                     _PIE1bits	set	140
   852  0094                     _SSPSTAT	set	148
   853  0093                     _SSPADD	set	147
   854  0091                     _SSPCON2	set	145
   855  0085                     _TRISAbits	set	133
   856  04C1                     _TRMT	set	1217
   857  04C5                     _TXEN	set	1221
   858  04C4                     _SYNC	set	1220
   859  04C2                     _BRGH	set	1218
   860  048C                     _ACKEN	set	1164
   861  048D                     _ACKDT	set	1165
   862  048B                     _RCEN	set	1163
   863  048A                     _PEN	set	1162
   864  0489                     _RSEN	set	1161
   865  0488                     _SEN	set	1160
   866  043C                     _TRISC4	set	1084
   867  043B                     _TRISC3	set	1083
   868  010C                     _EEDATA	set	268
   869  010D                     _EEADR	set	269
   870  018C                     _EECON1	set	396
   871  0189                     _ANSELH	set	393
   872  0188                     _ANSEL	set	392
   873  0C60                     _RD	set	3168
   874  0C61                     _WR	set	3169
   875  0C3B                     _BRG16	set	3131
   876                           
   877                           ; #config settings
   878  0000                     
   879                           	psect	cinit
   880  0015                     start_initialization:	
   881  0015                     __initialization:	
   882                           
   883                           ; Initialize objects allocated to BANK0
   884  0015  120A  118A  27FB   	fcall	__pidataBANK0	;fetch initializer
   885  0018  00EC               	movwf	__pdataBANK0& (0+127)
   886                           
   887                           ; Clear objects allocated to BANK0
   888  0019  01EB               	clrf	__pbssBANK0& (0+127)
   889                           
   890                           ; Clear objects allocated to COMMON
   891  001A  01F7               	clrf	__pbssCOMMON& (0+127)
   892  001B  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   893  001C  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   894  001D                     end_of_initialization:	
   895                           ;End of C runtime variable initialization code
   896                           
   897  001D                     __end_of__initialization:	
   898  001D  0183               	clrf	3
   899  001E  120A  118A  2821   	ljmp	_main	;jump to C main() function
   900                           
   901                           	psect	dataEEDATA
   902  0000                     __pdataEEDATA:	
   903                           
   904                           	psect	bssCOMMON
   905  0077                     __pbssCOMMON:	
   906  0077                     _errno:	
   907  0077                     	ds	2
   908  0079                     _CYCLE_TYPE:	
   909  0079                     	ds	1
   910                           
   911                           	psect	bssBANK0
   912  006B                     __pbssBANK0:	
   913  006B                     _FLAGS:	
   914  006B                     	ds	1
   915                           
   916                           	psect	dataBANK0
   917  006C                     __pdataBANK0:	
   918  006C                     _PREV_CYCLE_TYPE:	
   919  006C                     	ds	1
   920                           
   921                           	psect	inittext
   922  0CFD                     init_fetch0:	
   923                           ;	Called with low address in FSR and high address in W
   924                           
   925  0CFD  087E               	movf	126,w
   926  0CFE  008A               	movwf	10
   927  0CFF  087F               	movf	127,w
   928  0D00  0082               	movwf	2
   929  0D01                     init_ram0:	
   930                           ;Called with:
   931                           ;	high address of idata address in btemp 
   932                           ;	low address of idata address in btemp+1 
   933                           ;	low address of data in FSR
   934                           ;	high address + 1 of data in btemp-1
   935                           
   936  0D01  24FD  120A  158A   	fcall	init_fetch0
   937  0D04  0080               	movwf	0
   938  0D05  0A84               	incf	4,f
   939  0D06  0804               	movf	4,w
   940  0D07  067D               	xorwf	125,w
   941  0D08  1903               	btfsc	3,2
   942  0D09  3400               	retlw	0
   943  0D0A  0AFF               	incf	127,f
   944  0D0B  1903               	btfsc	3,2
   945  0D0C  0AFE               	incf	126,f
   946  0D0D  2D01               	goto	init_ram0
   947                           
   948                           	psect	cstackCOMMON
   949  0070                     __pcstackCOMMON:	
   950  0070                     ?_eeprom_read:	
   951  0070                     ?_GetPrevCycle:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_UART_Read_TO:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_IsValidGPS:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_ReadVars:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ?_GetCumulativePeriodsForStates:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_GetCycle:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_ResetTimer:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?_main:	
   973                           ; 1 bytes @ 0x0
   974                           
   975  0070                     ?_tc_int:	
   976                           ; 1 bytes @ 0x0
   977                           
   978  0070                     ??_tc_int:	
   979                           ; 1 bytes @ 0x0
   980                           
   981                           
   982                           ; 1 bytes @ 0x0
   983  0070                     	ds	4
   984  0074                     ??_eeprom_read:	
   985  0074                     ??_GetPrevCycle:	
   986                           ; 1 bytes @ 0x4
   987                           
   988  0074                     ??_UART_Read_TO:	
   989                           ; 1 bytes @ 0x4
   990                           
   991  0074                     ??_IsValidGPS:	
   992                           ; 1 bytes @ 0x4
   993                           
   994  0074                     ??_ResetTimer:	
   995                           ; 1 bytes @ 0x4
   996                           
   997  0074                     ??___lmul:	
   998                           ; 1 bytes @ 0x4
   999                           
  1000  0074                     ?___bmul:	
  1001                           ; 1 bytes @ 0x4
  1002                           
  1003  0074                     ??___almod:	
  1004                           ; 1 bytes @ 0x4
  1005                           
  1006  0074                     ??___awdiv:	
  1007                           ; 1 bytes @ 0x4
  1008                           
  1009  0074                     ?_GetAbs:	
  1010                           ; 1 bytes @ 0x4
  1011                           
  1012  0074                     UART_Read_TO@TimeOut:	
  1013                           ; 2 bytes @ 0x4
  1014                           
  1015  0074                     IsValidGPS@Result:	
  1016                           ; 1 bytes @ 0x4
  1017                           
  1018  0074                     ___bmul@multiplicand:	
  1019                           ; 1 bytes @ 0x4
  1020                           
  1021  0074                     GetAbs@a:	
  1022                           ; 1 bytes @ 0x4
  1023                           
  1024                           
  1025                           ; 2 bytes @ 0x4
  1026  0074                     	ds	1
  1027  0075                     ?_UART_ReadFromGPS_TO:	
  1028  0075                     ??___bmul:	
  1029                           ; 1 bytes @ 0x5
  1030                           
  1031  0075                     GetPrevCycle@PrevCycle:	
  1032                           ; 1 bytes @ 0x5
  1033                           
  1034  0075                     UART_ReadFromGPS_TO@TimeOut:	
  1035                           ; 1 bytes @ 0x5
  1036                           
  1037  0075                     IsValidGPS@GPSData:	
  1038                           ; 1 bytes @ 0x5
  1039                           
  1040  0075                     eeprom_read@addr:	
  1041                           ; 1 bytes @ 0x5
  1042                           
  1043  0075                     ___almod@counter:	
  1044                           ; 1 bytes @ 0x5
  1045                           
  1046                           
  1047                           ; 1 bytes @ 0x5
  1048  0075                     	ds	1
  1049  0076                     ??_GetAbs:	
  1050  0076                     ?_UART_ReadValidTimeFromGPS_TO:	
  1051                           ; 1 bytes @ 0x6
  1052                           
  1053  0076                     GetPrevCycle@cycle:	
  1054                           ; 1 bytes @ 0x6
  1055                           
  1056  0076                     UART_ReadValidTimeFromGPS_TO@TimeOut:	
  1057                           ; 1 bytes @ 0x6
  1058                           
  1059  0076                     ___almod@sign:	
  1060                           ; 1 bytes @ 0x6
  1061                           
  1062                           
  1063                           ; 1 bytes @ 0x6
  1064  0076                     	ds	1
  1065                           
  1066                           	psect	cstackBANK0
  1067  0020                     __pcstackBANK0:	
  1068  0020                     ??_GetCumulativePeriodsForStates:	
  1069  0020                     ??_GetCycle:	
  1070                           ; 1 bytes @ 0x0
  1071                           
  1072  0020                     ??_UART_ReadFromGPS_TO:	
  1073                           ; 1 bytes @ 0x0
  1074                           
  1075  0020                     ?___awdiv:	
  1076                           ; 1 bytes @ 0x0
  1077                           
  1078  0020                     ?___lmul:	
  1079                           ; 2 bytes @ 0x0
  1080                           
  1081  0020                     ?___almod:	
  1082                           ; 4 bytes @ 0x0
  1083                           
  1084  0020                     ___bmul@product:	
  1085                           ; 4 bytes @ 0x0
  1086                           
  1087  0020                     ___awdiv@divisor:	
  1088                           ; 1 bytes @ 0x0
  1089                           
  1090  0020                     ___lmul@multiplier:	
  1091                           ; 2 bytes @ 0x0
  1092                           
  1093  0020                     ___almod@divisor:	
  1094                           ; 4 bytes @ 0x0
  1095                           
  1096                           
  1097                           ; 4 bytes @ 0x0
  1098  0020                     	ds	1
  1099  0021                     ___bmul@multiplier:	
  1100                           
  1101                           ; 1 bytes @ 0x1
  1102  0021                     	ds	1
  1103  0022                     ??_ReadVars:	
  1104  0022                     UART_ReadFromGPS_TO@Output:	
  1105                           ; 1 bytes @ 0x2
  1106                           
  1107  0022                     ___awdiv@dividend:	
  1108                           ; 1 bytes @ 0x2
  1109                           
  1110                           
  1111                           ; 2 bytes @ 0x2
  1112  0022                     	ds	1
  1113  0023                     UART_ReadFromGPS_TO@i:	
  1114                           
  1115                           ; 2 bytes @ 0x3
  1116  0023                     	ds	1
  1117  0024                     ___awdiv@counter:	
  1118  0024                     ___lmul@multiplicand:	
  1119                           ; 1 bytes @ 0x4
  1120                           
  1121  0024                     ___almod@dividend:	
  1122                           ; 4 bytes @ 0x4
  1123                           
  1124                           
  1125                           ; 4 bytes @ 0x4
  1126  0024                     	ds	1
  1127  0025                     UART_ReadFromGPS_TO@TempChar:	
  1128  0025                     ___awdiv@sign:	
  1129                           ; 1 bytes @ 0x5
  1130                           
  1131                           
  1132                           ; 1 bytes @ 0x5
  1133  0025                     	ds	1
  1134  0026                     GetCumulativePeriodsForStates@j:	
  1135  0026                     UART_ReadFromGPS_TO@Pos:	
  1136                           ; 1 bytes @ 0x6
  1137                           
  1138  0026                     ___awdiv@quotient:	
  1139                           ; 1 bytes @ 0x6
  1140                           
  1141                           
  1142                           ; 2 bytes @ 0x6
  1143  0026                     	ds	1
  1144  0027                     ??_UART_ReadValidTimeFromGPS_TO:	
  1145  0027                     GetCumulativePeriodsForStates@i:	
  1146                           ; 1 bytes @ 0x7
  1147                           
  1148                           
  1149                           ; 1 bytes @ 0x7
  1150  0027                     	ds	1
  1151  0028                     UART_ReadValidTimeFromGPS_TO@Output:	
  1152  0028                     ___lmul@product:	
  1153                           ; 1 bytes @ 0x8
  1154                           
  1155                           
  1156                           ; 4 bytes @ 0x8
  1157  0028                     	ds	2
  1158  002A                     GetCycle@PrevCycle:	
  1159                           
  1160                           ; 1 bytes @ 0xA
  1161  002A                     	ds	1
  1162  002B                     GetCycle@i:	
  1163                           
  1164                           ; 1 bytes @ 0xB
  1165  002B                     	ds	1
  1166  002C                     ?_ReadGPSToS:	
  1167                           
  1168                           ; 4 bytes @ 0xC
  1169  002C                     	ds	4
  1170  0030                     ??_ReadGPSToS:	
  1171                           
  1172                           ; 1 bytes @ 0x10
  1173  0030                     	ds	4
  1174  0034                     ReadVars@j:	
  1175                           
  1176                           ; 1 bytes @ 0x14
  1177  0034                     	ds	1
  1178  0035                     ReadVars@i:	
  1179                           
  1180                           ; 1 bytes @ 0x15
  1181  0035                     	ds	1
  1182  0036                     ReadGPSToS@TimeOut:	
  1183                           
  1184                           ; 1 bytes @ 0x16
  1185  0036                     	ds	1
  1186  0037                     ReadGPSToS@Output:	
  1187                           
  1188                           ; 6 bytes @ 0x17
  1189  0037                     	ds	6
  1190  003D                     ReadGPSToS@Sec:	
  1191                           
  1192                           ; 4 bytes @ 0x1D
  1193  003D                     	ds	4
  1194  0041                     ??_main:	
  1195                           
  1196                           ; 1 bytes @ 0x21
  1197  0041                     	ds	13
  1198  004E                     main@TimeSinceTheStartOfCycle:	
  1199                           
  1200                           ; 4 bytes @ 0x2E
  1201  004E                     	ds	4
  1202  0052                     main@GPS_On_Time_Counter:	
  1203                           
  1204                           ; 2 bytes @ 0x32
  1205  0052                     	ds	2
  1206  0054                     main@TempS:	
  1207                           
  1208                           ; 4 bytes @ 0x34
  1209  0054                     	ds	4
  1210  0058                     main@GPS_Non_Sync_Times:	
  1211                           
  1212                           ; 1 bytes @ 0x38
  1213  0058                     	ds	1
  1214  0059                     main@StateSecRemaining:	
  1215                           
  1216                           ; 1 bytes @ 0x39
  1217  0059                     	ds	1
  1218  005A                     main@k:	
  1219                           
  1220                           ; 2 bytes @ 0x3A
  1221  005A                     	ds	2
  1222  005C                     main@State2OnOffCounter:	
  1223                           
  1224                           ; 2 bytes @ 0x3C
  1225  005C                     	ds	2
  1226  005E                     main@StateAudioNormalOnOffCounter:	
  1227                           
  1228                           ; 2 bytes @ 0x3E
  1229  005E                     	ds	2
  1230  0060                     main@StateAudioSplOnOffCounter:	
  1231                           
  1232                           ; 2 bytes @ 0x40
  1233  0060                     	ds	2
  1234  0062                     main@j:	
  1235                           
  1236                           ; 1 bytes @ 0x42
  1237  0062                     	ds	1
  1238  0063                     main@OutForThePorts:	
  1239                           
  1240                           ; 2 bytes @ 0x43
  1241  0063                     	ds	2
  1242  0065                     main@SecError:	
  1243                           
  1244                           ; 2 bytes @ 0x45
  1245  0065                     	ds	2
  1246  0067                     main@DiffInSecond:	
  1247                           
  1248                           ; 1 bytes @ 0x47
  1249  0067                     	ds	1
  1250  0068                     main@i:	
  1251                           
  1252                           ; 1 bytes @ 0x48
  1253  0068                     	ds	1
  1254  0069                     main@l:	
  1255                           
  1256                           ; 2 bytes @ 0x49
  1257  0069                     	ds	2
  1258                           
  1259                           	psect	maintext
  1260  0021                     __pmaintext:	
  1261 ;;
  1262 ;;Main: autosize = 0, tempsize = 13, incstack = 0, save=0
  1263 ;;
  1264 ;; *************** function _main *****************
  1265 ;; Defined at:
  1266 ;;		line 7 in file "main.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;		None
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  TempS           4   52[BANK0 ] long 
  1271 ;;  GPSData         6    0        unsigned char [6]
  1272 ;;  TimeSinceThe    4   46[BANK0 ] long 
  1273 ;;  l               2   73[BANK0 ] unsigned short 
  1274 ;;  OutForThePor    2   67[BANK0 ] unsigned char [2]
  1275 ;;  SecError        2   69[BANK0 ] short 
  1276 ;;  StateAudioSp    2   64[BANK0 ] unsigned short 
  1277 ;;  StateAudioNo    2   62[BANK0 ] unsigned short 
  1278 ;;  State2OnOffC    2   60[BANK0 ] unsigned short 
  1279 ;;  k               2   58[BANK0 ] unsigned short 
  1280 ;;  GPS_On_Time_    2   50[BANK0 ] unsigned short 
  1281 ;;  i               1   72[BANK0 ] unsigned char 
  1282 ;;  DiffInSecond    1   71[BANK0 ] char 
  1283 ;;  j               1   66[BANK0 ] unsigned char 
  1284 ;;  StateSecRema    1   57[BANK0 ] unsigned char 
  1285 ;;  GPS_Non_Sync    1   56[BANK0 ] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : B00/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  1295 ;;      Params:         0       0       0       0
  1296 ;;      Locals:         0      29       0       0
  1297 ;;      Temps:          0      13       0       0
  1298 ;;      Totals:         0      42       0       0
  1299 ;;Total ram usage:       42 bytes
  1300 ;; Hardware stack levels required when called:    5
  1301 ;; This function calls:
  1302 ;;		_GetAbs
  1303 ;;		_GetCumulativePeriodsForStates
  1304 ;;		_GetCycle
  1305 ;;		_ReadGPSToS
  1306 ;;		_ReadVars
  1307 ;;		_ResetTimer
  1308 ;;		___almod
  1309 ;;		___awdiv
  1310 ;; This function is called by:
  1311 ;;		Startup code after reset
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function _main
  1317  0021                     _main:	
  1318                           
  1319                           ;main.c: 12: ResetTimer();
  1320                           
  1321                           ;incstack = 0
  1322                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1323  0021  120A  158A  2533  120A  118A  	fcall	_ResetTimer
  1324                           
  1325                           ;main.c: 13: ANSEL = 0x00;
  1326  0026  1683               	bsf	3,5	;RP0=1, select bank3
  1327  0027  1703               	bsf	3,6	;RP1=1, select bank3
  1328  0028  0188               	clrf	8	;volatile
  1329                           
  1330                           ;main.c: 14: ANSELH = 0x00;
  1331  0029  0189               	clrf	9	;volatile
  1332                           
  1333                           ;main.c: 15: TRISA = 0x00;
  1334  002A  1683               	bsf	3,5	;RP0=1, select bank1
  1335  002B  1303               	bcf	3,6	;RP1=0, select bank1
  1336  002C  0185               	clrf	5	;volatile
  1337                           
  1338                           ;main.c: 16: TRISB = 0x00;
  1339  002D  0186               	clrf	6	;volatile
  1340                           
  1341                           ;main.c: 17: TRISC = 0x00;
  1342  002E  0187               	clrf	7	;volatile
  1343                           
  1344                           ;main.c: 19: RC1 = 0;
  1345  002F  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0030  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0031  1087               	bcf	7,1	;volatile
  1348                           
  1349                           ;main.c: 20: FLAGS.bits.b3 = 0;
  1350  0032  11EB               	bcf	_FLAGS,3	;volatile
  1351                           
  1352                           ;main.c: 27: ReadVars();
  1353  0033  120A  118A  24A4  120A  118A  	fcall	_ReadVars
  1354                           
  1355                           ;main.c: 29: GetCumulativePeriodsForStates();
  1356  0038  120A  158A  25D2  120A  118A  	fcall	_GetCumulativePeriodsForStates
  1357                           
  1358                           ;main.c: 34: S = C[2] + 1 + C_D;
  1359  003D  3001               	movlw	1
  1360  003E  1283               	bcf	3,5	;RP0=0, select bank0
  1361  003F  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0040  00C1               	movwf	??_main
  1363  0041  3000               	movlw	0
  1364  0042  00C2               	movwf	??_main+1
  1365  0043  3000               	movlw	0
  1366  0044  00C3               	movwf	??_main+2
  1367  0045  3000               	movlw	0
  1368  0046  00C4               	movwf	??_main+3
  1369  0047  1283               	bcf	3,5	;RP0=0, select bank2
  1370  0048  1703               	bsf	3,6	;RP1=1, select bank2
  1371  0049  0854               	movf	84,w	;volatile
  1372  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1373  004B  1303               	bcf	3,6	;RP1=0, select bank0
  1374  004C  00C5               	movwf	??_main+4
  1375  004D  1283               	bcf	3,5	;RP0=0, select bank2
  1376  004E  1703               	bsf	3,6	;RP1=1, select bank2
  1377  004F  0855               	movf	85,w	;volatile
  1378  0050  1283               	bcf	3,5	;RP0=0, select bank0
  1379  0051  1303               	bcf	3,6	;RP1=0, select bank0
  1380  0052  00C6               	movwf	??_main+5
  1381  0053  1283               	bcf	3,5	;RP0=0, select bank2
  1382  0054  1703               	bsf	3,6	;RP1=1, select bank2
  1383  0055  0856               	movf	86,w	;volatile
  1384  0056  1283               	bcf	3,5	;RP0=0, select bank0
  1385  0057  1303               	bcf	3,6	;RP1=0, select bank0
  1386  0058  00C7               	movwf	??_main+6
  1387  0059  1283               	bcf	3,5	;RP0=0, select bank2
  1388  005A  1703               	bsf	3,6	;RP1=1, select bank2
  1389  005B  0857               	movf	87,w	;volatile
  1390  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1391  005D  1303               	bcf	3,6	;RP1=0, select bank0
  1392  005E  00C8               	movwf	??_main+7
  1393  005F  1283               	bcf	3,5	;RP0=0, select bank2
  1394  0060  1703               	bsf	3,6	;RP1=1, select bank2
  1395  0061  086F               	movf	111,w	;volatile
  1396  0062  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0063  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0064  00C9               	movwf	??_main+8
  1399  0065  3000               	movlw	0
  1400  0066  1BC9               	btfsc	??_main+8,7
  1401  0067  30FF               	movlw	255
  1402  0068  00CA               	movwf	??_main+9
  1403  0069  00CB               	movwf	??_main+10
  1404  006A  00CC               	movwf	??_main+11
  1405  006B  0849               	movf	??_main+8,w
  1406  006C  07C5               	addwf	??_main+4,f
  1407  006D  084A               	movf	??_main+9,w
  1408  006E  1803               	skipnc
  1409  006F  0F4A               	incfsz	??_main+9,w
  1410  0070  2872               	goto	u4720
  1411  0071  2873               	goto	u4721
  1412  0072                     u4720:	
  1413  0072  07C6               	addwf	??_main+5,f
  1414  0073                     u4721:	
  1415  0073  084B               	movf	??_main+10,w
  1416  0074  1803               	skipnc
  1417  0075  0F4B               	incfsz	??_main+10,w
  1418  0076  2878               	goto	u4722
  1419  0077  2879               	goto	u4723
  1420  0078                     u4722:	
  1421  0078  07C7               	addwf	??_main+6,f
  1422  0079                     u4723:	
  1423  0079  084C               	movf	??_main+11,w
  1424  007A  1803               	skipnc
  1425  007B  0A4C               	incf	??_main+11,w
  1426  007C  07C8               	addwf	??_main+7,f
  1427  007D  0845               	movf	??_main+4,w
  1428  007E  07C1               	addwf	??_main,f
  1429  007F  0846               	movf	??_main+5,w
  1430  0080  1803               	skipnc
  1431  0081  0F46               	incfsz	??_main+5,w
  1432  0082  2884               	goto	u4730
  1433  0083  2885               	goto	u4731
  1434  0084                     u4730:	
  1435  0084  07C2               	addwf	??_main+1,f
  1436  0085                     u4731:	
  1437  0085  0847               	movf	??_main+6,w
  1438  0086  1803               	skipnc
  1439  0087  0F47               	incfsz	??_main+6,w
  1440  0088  288A               	goto	u4732
  1441  0089  288B               	goto	u4733
  1442  008A                     u4732:	
  1443  008A  07C3               	addwf	??_main+2,f
  1444  008B                     u4733:	
  1445  008B  0848               	movf	??_main+7,w
  1446  008C  1803               	skipnc
  1447  008D  0A48               	incf	??_main+7,w
  1448  008E  07C4               	addwf	??_main+3,f
  1449  008F  0844               	movf	??_main+3,w
  1450  0090  1283               	bcf	3,5	;RP0=0, select bank2
  1451  0091  1703               	bsf	3,6	;RP1=1, select bank2
  1452  0092  00EE               	movwf	110	;volatile
  1453  0093  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0094  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0095  0843               	movf	??_main+2,w
  1456  0096  1283               	bcf	3,5	;RP0=0, select bank2
  1457  0097  1703               	bsf	3,6	;RP1=1, select bank2
  1458  0098  00ED               	movwf	109	;volatile
  1459  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1460  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1461  009B  0842               	movf	??_main+1,w
  1462  009C  1283               	bcf	3,5	;RP0=0, select bank2
  1463  009D  1703               	bsf	3,6	;RP1=1, select bank2
  1464  009E  00EC               	movwf	108	;volatile
  1465  009F  1283               	bcf	3,5	;RP0=0, select bank0
  1466  00A0  1303               	bcf	3,6	;RP1=0, select bank0
  1467  00A1  0841               	movf	??_main,w
  1468  00A2  1283               	bcf	3,5	;RP0=0, select bank2
  1469  00A3  1703               	bsf	3,6	;RP1=1, select bank2
  1470  00A4  00EB               	movwf	107	;volatile
  1471                           
  1472                           ;main.c: 43: UINT8 i, j, StateSecRemaining;
  1473                           ;main.c: 44: UINT16 k, l, State2OnOffCounter=0, StateAudioNormalOnOffCounter=0, StateAud
      +                          ioSplOnOffCounter=0;
  1474  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1475  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1476  00A7  01DC               	clrf	main@State2OnOffCounter
  1477  00A8  01DD               	clrf	main@State2OnOffCounter+1
  1478  00A9  01DE               	clrf	main@StateAudioNormalOnOffCounter
  1479  00AA  01DF               	clrf	main@StateAudioNormalOnOffCounter+1
  1480  00AB  01E0               	clrf	main@StateAudioSplOnOffCounter
  1481  00AC  01E1               	clrf	main@StateAudioSplOnOffCounter+1
  1482                           
  1483                           ;main.c: 45: UINT8 OutForThePorts[2];
  1484                           ;main.c: 46: INT16 SecError;
  1485                           ;main.c: 47: INT32 TimeSinceTheStartOfCycle;
  1486                           ;main.c: 48: INT8 DiffInSecond;
  1487                           ;main.c: 49: UINT16 GPS_On_Time_Counter = 0;
  1488  00AD  01D2               	clrf	main@GPS_On_Time_Counter
  1489  00AE  01D3               	clrf	main@GPS_On_Time_Counter+1
  1490                           
  1491                           ;main.c: 50: UINT8 GPS_Non_Sync_Times = 0;
  1492  00AF  01D8               	clrf	main@GPS_Non_Sync_Times
  1493  00B0                     l3355:	
  1494                           ;main.c: 56: char GPSData[6];
  1495                           ;main.c: 58: while (1) {
  1496                           
  1497                           
  1498                           ;main.c: 59: RC0 = 0;
  1499  00B0  1007               	bcf	7,0	;volatile
  1500                           
  1501                           ;main.c: 63: if (GPS_On_Time_Counter >= (6*60)) {
  1502  00B1  3001               	movlw	1
  1503  00B2  0253               	subwf	main@GPS_On_Time_Counter+1,w
  1504  00B3  3068               	movlw	104
  1505  00B4  1903               	skipnz
  1506  00B5  0252               	subwf	main@GPS_On_Time_Counter,w
  1507  00B6  1C03               	skipc
  1508  00B7  291C               	goto	l3385
  1509                           
  1510                           ;main.c: 64: INT32 TempS;
  1511                           ;main.c: 65: TempS = ReadGPSToS(100);
  1512  00B8  3064               	movlw	100
  1513  00B9  120A  118A  2605  120A  118A  	fcall	_ReadGPSToS
  1514  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1515  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1516  00C0  082F               	movf	?_ReadGPSToS+3,w
  1517  00C1  00D7               	movwf	main@TempS+3
  1518  00C2  082E               	movf	?_ReadGPSToS+2,w
  1519  00C3  00D6               	movwf	main@TempS+2
  1520  00C4  082D               	movf	?_ReadGPSToS+1,w
  1521  00C5  00D5               	movwf	main@TempS+1
  1522  00C6  082C               	movf	?_ReadGPSToS,w
  1523  00C7  00D4               	movwf	main@TempS
  1524                           
  1525                           ;main.c: 66: if(TempS >= 0) {
  1526  00C8  1BD7               	btfsc	main@TempS+3,7
  1527  00C9  28FD               	goto	l3373
  1528                           
  1529                           ;main.c: 67: S = TempS + C_D;
  1530  00CA  1283               	bcf	3,5	;RP0=0, select bank2
  1531  00CB  1703               	bsf	3,6	;RP1=1, select bank2
  1532  00CC  086F               	movf	111,w	;volatile
  1533  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1534  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1535  00CF  0754               	addwf	main@TempS,w
  1536  00D0  1283               	bcf	3,5	;RP0=0, select bank2
  1537  00D1  1703               	bsf	3,6	;RP1=1, select bank2
  1538  00D2  00EB               	movwf	107	;volatile
  1539  00D3  3000               	movlw	0
  1540  00D4  1BEF               	btfsc	111,7	;volatile
  1541  00D5  30FF               	movlw	255
  1542  00D6  00EC               	movwf	108	;volatile
  1543  00D7  00ED               	movwf	109	;volatile
  1544  00D8  00EE               	movwf	110	;volatile
  1545  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  1546  00DA  1303               	bcf	3,6	;RP1=0, select bank0
  1547  00DB  0855               	movf	main@TempS+1,w
  1548  00DC  1C03               	skipc
  1549  00DD  28E1               	goto	u476a1
  1550  00DE  0A55               	incf	main@TempS+1,w
  1551  00DF  1903               	skipnz
  1552  00E0  28E4               	goto	u476b1
  1553  00E1                     u476a1:	
  1554  00E1  1283               	bcf	3,5	;RP0=0, select bank2
  1555  00E2  1703               	bsf	3,6	;RP1=1, select bank2
  1556  00E3  07EC               	addwf	108,f	;volatile
  1557  00E4                     u476b1:	
  1558  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  1559  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  1560  00E6  0856               	movf	main@TempS+2,w
  1561  00E7  1C03               	skipc
  1562  00E8  28EC               	goto	u476a2
  1563  00E9  0A56               	incf	main@TempS+2,w
  1564  00EA  1903               	skipnz
  1565  00EB  28EF               	goto	u476b2
  1566  00EC                     u476a2:	
  1567  00EC  1283               	bcf	3,5	;RP0=0, select bank2
  1568  00ED  1703               	bsf	3,6	;RP1=1, select bank2
  1569  00EE  07ED               	addwf	109,f	;volatile
  1570  00EF                     u476b2:	
  1571  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  1572  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  1573  00F1  0857               	movf	main@TempS+3,w
  1574  00F2  1C03               	skipc
  1575  00F3  28F7               	goto	u476a3
  1576  00F4  0A57               	incf	main@TempS+3,w
  1577  00F5  1903               	skipnz
  1578  00F6  28FA               	goto	l3365
  1579  00F7                     u476a3:	
  1580  00F7  1283               	bcf	3,5	;RP0=0, select bank2
  1581  00F8  1703               	bsf	3,6	;RP1=1, select bank2
  1582  00F9  07EE               	addwf	110,f	;volatile
  1583  00FA                     l3365:	
  1584                           
  1585                           ;main.c: 68: GPS_On_Time_Counter = 0;
  1586  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1587  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1588  00FC  2917               	goto	l3379
  1589  00FD                     l3373:	
  1590                           ;main.c: 72: }
  1591                           
  1592                           ;main.c: 71: GPS_Non_Sync_Times = 0;
  1593                           
  1594                           ;main.c: 70: FLAGS.bits.b2 = 0;
  1595                           
  1596                           ;main.c: 69: RC1 = 0;
  1597                           
  1598                           
  1599                           ;main.c: 73: else {
  1600                           ;main.c: 74: S++;
  1601  00FD  3001               	movlw	1
  1602  00FE  1283               	bcf	3,5	;RP0=0, select bank2
  1603  00FF  1703               	bsf	3,6	;RP1=1, select bank2
  1604  0100  07EB               	addwf	107,f	;volatile
  1605  0101  3000               	movlw	0
  1606  0102  1803               	skipnc
  1607  0103  3001               	movlw	1
  1608  0104  07EC               	addwf	108,f	;volatile
  1609  0105  3000               	movlw	0
  1610  0106  1803               	skipnc
  1611  0107  3001               	movlw	1
  1612  0108  07ED               	addwf	109,f	;volatile
  1613  0109  3000               	movlw	0
  1614  010A  1803               	skipnc
  1615  010B  3001               	movlw	1
  1616  010C  07EE               	addwf	110,f	;volatile
  1617                           
  1618                           ;main.c: 75: GPS_Non_Sync_Times++;
  1619  010D  3001               	movlw	1
  1620  010E  1283               	bcf	3,5	;RP0=0, select bank0
  1621  010F  1303               	bcf	3,6	;RP1=0, select bank0
  1622  0110  00C1               	movwf	??_main
  1623  0111  0841               	movf	??_main,w
  1624  0112  07D8               	addwf	main@GPS_Non_Sync_Times,f
  1625                           
  1626                           ;main.c: 76: if (GPS_Non_Sync_Times >= (4)) {
  1627  0113  3004               	movlw	4
  1628  0114  0258               	subwf	main@GPS_Non_Sync_Times,w
  1629  0115  1C03               	skipc
  1630  0116  291C               	goto	l3385
  1631  0117                     l3379:	
  1632                           
  1633                           ;main.c: 77: GPS_On_Time_Counter = 0;
  1634  0117  01D2               	clrf	main@GPS_On_Time_Counter
  1635  0118  01D3               	clrf	main@GPS_On_Time_Counter+1
  1636                           
  1637                           ;main.c: 78: RC1 = 0;
  1638  0119  1087               	bcf	7,1	;volatile
  1639                           
  1640                           ;main.c: 79: FLAGS.bits.b2 = 0;
  1641  011A  116B               	bcf	_FLAGS,2	;volatile
  1642                           
  1643                           ;main.c: 80: GPS_Non_Sync_Times = 0;
  1644  011B  01D8               	clrf	main@GPS_Non_Sync_Times
  1645  011C                     l3385:	
  1646                           
  1647                           ;main.c: 81: }
  1648                           ;main.c: 82: }
  1649                           ;main.c: 83: }
  1650                           ;main.c: 86: if (S >= 86400)
  1651  011C  1283               	bcf	3,5	;RP0=0, select bank2
  1652  011D  1703               	bsf	3,6	;RP1=1, select bank2
  1653  011E  1BEE               	btfsc	110,7	;volatile
  1654  011F  293E               	goto	l3389
  1655  0120  086E               	movf	110,w	;volatile
  1656  0121  1D03               	btfss	3,2
  1657  0122  2931               	goto	l3387
  1658  0123  3001               	movlw	1
  1659  0124  026D               	subwf	109,w	;volatile
  1660  0125  1D03               	skipz
  1661  0126  292F               	goto	u4783
  1662  0127  3051               	movlw	81
  1663  0128  026C               	subwf	108,w	;volatile
  1664  0129  1D03               	skipz
  1665  012A  292F               	goto	u4783
  1666  012B  3080               	movlw	128
  1667  012C  026B               	subwf	107,w	;volatile
  1668  012D  1D03               	skipz
  1669  012E  292F               	goto	u4783
  1670  012F                     u4783:	
  1671  012F  1C03               	btfss	3,0
  1672  0130  293E               	goto	l3389
  1673  0131                     l3387:	
  1674                           
  1675                           ;main.c: 87: S -= 86400;
  1676  0131  3080               	movlw	128
  1677  0132  07EB               	addwf	107,f	;volatile
  1678  0133  30AE               	movlw	174
  1679  0134  1803               	skipnc
  1680  0135  30AF               	movlw	175
  1681  0136  07EC               	addwf	108,f	;volatile
  1682  0137  30FE               	movlw	254
  1683  0138  1803               	skipnc
  1684  0139  30FF               	movlw	255
  1685  013A  07ED               	addwf	109,f	;volatile
  1686  013B  30FF               	movlw	255
  1687  013C  1C03               	skipc
  1688  013D  07EE               	addwf	110,f	;volatile
  1689  013E                     l3389:	
  1690                           
  1691                           ;main.c: 88: GetCycle();
  1692  013E  120A  158A  26DB  120A  118A  	fcall	_GetCycle
  1693                           
  1694                           ;main.c: 89: if (C[PREV_CYCLE_TYPE] < C[CYCLE_TYPE])
  1695  0143  0879               	movf	_CYCLE_TYPE,w	;volatile
  1696  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0145  1303               	bcf	3,6	;RP1=0, select bank0
  1698  0146  00C1               	movwf	??_main
  1699  0147  3001               	movlw	1
  1700  0148                     u4795:	
  1701  0148  1003               	clrc
  1702  0149  0DC1               	rlf	??_main,f
  1703  014A  3EFF               	addlw	-1
  1704  014B  1D03               	skipz
  1705  014C  2948               	goto	u4795
  1706  014D  1003               	clrc
  1707  014E  0D41               	rlf	??_main,w
  1708  014F  3E4C               	addlw	76
  1709  0150  0084               	movwf	4
  1710  0151  1783               	bsf	3,7	;select IRP bank2
  1711  0152  0800               	movf	0,w
  1712  0153  00C2               	movwf	??_main+1
  1713  0154  0A84               	incf	4,f
  1714  0155  0800               	movf	0,w
  1715  0156  00C3               	movwf	??_main+2
  1716  0157  0A84               	incf	4,f
  1717  0158  0800               	movf	0,w
  1718  0159  00C4               	movwf	??_main+3
  1719  015A  0A84               	incf	4,f
  1720  015B  0800               	movf	0,w
  1721  015C  00C5               	movwf	??_main+4
  1722  015D  086C               	movf	_PREV_CYCLE_TYPE,w	;volatile
  1723  015E  00C6               	movwf	??_main+5
  1724  015F  3001               	movlw	1
  1725  0160                     u4805:	
  1726  0160  1003               	clrc
  1727  0161  0DC6               	rlf	??_main+5,f
  1728  0162  3EFF               	addlw	-1
  1729  0163  1D03               	skipz
  1730  0164  2960               	goto	u4805
  1731  0165  1003               	clrc
  1732  0166  0D46               	rlf	??_main+5,w
  1733  0167  3E4C               	addlw	76
  1734  0168  0084               	movwf	4
  1735  0169  0800               	movf	0,w
  1736  016A  00C7               	movwf	??_main+6
  1737  016B  0A84               	incf	4,f
  1738  016C  0800               	movf	0,w
  1739  016D  00C8               	movwf	??_main+7
  1740  016E  0A84               	incf	4,f
  1741  016F  0800               	movf	0,w
  1742  0170  00C9               	movwf	??_main+8
  1743  0171  0A84               	incf	4,f
  1744  0172  0800               	movf	0,w
  1745  0173  00CA               	movwf	??_main+9
  1746  0174  084A               	movf	??_main+9,w
  1747  0175  3A80               	xorlw	128
  1748  0176  00FF               	movwf	127
  1749  0177  0845               	movf	??_main+4,w
  1750  0178  3A80               	xorlw	128
  1751  0179  027F               	subwf	127,w
  1752  017A  1D03               	skipz
  1753  017B  2986               	goto	u4813
  1754  017C  0844               	movf	??_main+3,w
  1755  017D  0249               	subwf	??_main+8,w
  1756  017E  1D03               	skipz
  1757  017F  2986               	goto	u4813
  1758  0180  0843               	movf	??_main+2,w
  1759  0181  0248               	subwf	??_main+7,w
  1760  0182  1D03               	skipz
  1761  0183  2986               	goto	u4813
  1762  0184  0842               	movf	??_main+1,w
  1763  0185  0247               	subwf	??_main+6,w
  1764  0186                     u4813:	
  1765  0186  1803               	skipnc
  1766  0187  29D4               	goto	l3395
  1767                           
  1768                           ;main.c: 90: TimeSinceTheStartOfCycle = S - C[PREV_CYCLE_TYPE];
  1769  0188  1283               	bcf	3,5	;RP0=0, select bank2
  1770  0189  1703               	bsf	3,6	;RP1=1, select bank2
  1771  018A  086B               	movf	107,w	;volatile
  1772  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1773  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1774  018D  00C1               	movwf	??_main
  1775  018E  1283               	bcf	3,5	;RP0=0, select bank2
  1776  018F  1703               	bsf	3,6	;RP1=1, select bank2
  1777  0190  086C               	movf	108,w	;volatile
  1778  0191  1283               	bcf	3,5	;RP0=0, select bank0
  1779  0192  1303               	bcf	3,6	;RP1=0, select bank0
  1780  0193  00C2               	movwf	??_main+1
  1781  0194  1283               	bcf	3,5	;RP0=0, select bank2
  1782  0195  1703               	bsf	3,6	;RP1=1, select bank2
  1783  0196  086D               	movf	109,w	;volatile
  1784  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1785  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1786  0199  00C3               	movwf	??_main+2
  1787  019A  1283               	bcf	3,5	;RP0=0, select bank2
  1788  019B  1703               	bsf	3,6	;RP1=1, select bank2
  1789  019C  086E               	movf	110,w	;volatile
  1790  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1791  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1792  019F  00C4               	movwf	??_main+3
  1793  01A0  086C               	movf	_PREV_CYCLE_TYPE,w	;volatile
  1794  01A1  00C5               	movwf	??_main+4
  1795  01A2  3001               	movlw	1
  1796  01A3                     u4825:	
  1797  01A3  1003               	clrc
  1798  01A4  0DC5               	rlf	??_main+4,f
  1799  01A5  3EFF               	addlw	-1
  1800  01A6  1D03               	skipz
  1801  01A7  29A3               	goto	u4825
  1802  01A8  1003               	clrc
  1803  01A9  0D45               	rlf	??_main+4,w
  1804  01AA  3E4C               	addlw	76
  1805  01AB  0084               	movwf	4
  1806  01AC  0800               	movf	0,w
  1807  01AD  00C6               	movwf	??_main+5
  1808  01AE  0A84               	incf	4,f
  1809  01AF  0800               	movf	0,w
  1810  01B0  00C7               	movwf	??_main+6
  1811  01B1  0A84               	incf	4,f
  1812  01B2  0800               	movf	0,w
  1813  01B3  00C8               	movwf	??_main+7
  1814  01B4  0A84               	incf	4,f
  1815  01B5  0800               	movf	0,w
  1816  01B6  00C9               	movwf	??_main+8
  1817  01B7  09C6               	comf	??_main+5,f
  1818  01B8  09C7               	comf	??_main+6,f
  1819  01B9  09C8               	comf	??_main+7,f
  1820  01BA  09C9               	comf	??_main+8,f
  1821  01BB  0AC6               	incf	??_main+5,f
  1822  01BC  1903               	skipnz
  1823  01BD  0AC7               	incf	??_main+6,f
  1824  01BE  1903               	skipnz
  1825  01BF  0AC8               	incf	??_main+7,f
  1826  01C0  1903               	skipnz
  1827  01C1  0AC9               	incf	??_main+8,f
  1828  01C2  0846               	movf	??_main+5,w
  1829  01C3  07C1               	addwf	??_main,f
  1830  01C4  0847               	movf	??_main+6,w
  1831  01C5  1803               	skipnc
  1832  01C6  0F47               	incfsz	??_main+6,w
  1833  01C7  29C9               	goto	u4830
  1834  01C8  29CA               	goto	u4831
  1835  01C9                     u4830:	
  1836  01C9  07C2               	addwf	??_main+1,f
  1837  01CA                     u4831:	
  1838  01CA  0848               	movf	??_main+7,w
  1839  01CB  1803               	skipnc
  1840  01CC  0F48               	incfsz	??_main+7,w
  1841  01CD  29CF               	goto	u4832
  1842  01CE  29D0               	goto	u4833
  1843  01CF                     u4832:	
  1844  01CF  07C3               	addwf	??_main+2,f
  1845  01D0                     u4833:	
  1846  01D0  0849               	movf	??_main+8,w
  1847  01D1  1803               	skipnc
  1848  01D2  0A49               	incf	??_main+8,w
  1849  01D3  2A39               	goto	L1
  1850  01D4                     l3395:	
  1851                           
  1852                           ;main.c: 91: else
  1853                           ;main.c: 92: TimeSinceTheStartOfCycle = S + (86400 - C[PREV_CYCLE_TYPE]);
  1854  01D4  3080               	movlw	128
  1855  01D5  00C1               	movwf	??_main
  1856  01D6  3051               	movlw	81
  1857  01D7  00C2               	movwf	??_main+1
  1858  01D8  3001               	movlw	1
  1859  01D9  00C3               	movwf	??_main+2
  1860  01DA  3000               	movlw	0
  1861  01DB  00C4               	movwf	??_main+3
  1862  01DC  1283               	bcf	3,5	;RP0=0, select bank2
  1863  01DD  1703               	bsf	3,6	;RP1=1, select bank2
  1864  01DE  086B               	movf	107,w	;volatile
  1865  01DF  1283               	bcf	3,5	;RP0=0, select bank0
  1866  01E0  1303               	bcf	3,6	;RP1=0, select bank0
  1867  01E1  00C5               	movwf	??_main+4
  1868  01E2  1283               	bcf	3,5	;RP0=0, select bank2
  1869  01E3  1703               	bsf	3,6	;RP1=1, select bank2
  1870  01E4  086C               	movf	108,w	;volatile
  1871  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1872  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1873  01E7  00C6               	movwf	??_main+5
  1874  01E8  1283               	bcf	3,5	;RP0=0, select bank2
  1875  01E9  1703               	bsf	3,6	;RP1=1, select bank2
  1876  01EA  086D               	movf	109,w	;volatile
  1877  01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1878  01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1879  01ED  00C7               	movwf	??_main+6
  1880  01EE  1283               	bcf	3,5	;RP0=0, select bank2
  1881  01EF  1703               	bsf	3,6	;RP1=1, select bank2
  1882  01F0  086E               	movf	110,w	;volatile
  1883  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1884  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1885  01F3  00C8               	movwf	??_main+7
  1886  01F4  086C               	movf	_PREV_CYCLE_TYPE,w	;volatile
  1887  01F5  00C9               	movwf	??_main+8
  1888  01F6  3001               	movlw	1
  1889  01F7                     u4845:	
  1890  01F7  1003               	clrc
  1891  01F8  0DC9               	rlf	??_main+8,f
  1892  01F9  3EFF               	addlw	-1
  1893  01FA  1D03               	skipz
  1894  01FB  29F7               	goto	u4845
  1895  01FC  1003               	clrc
  1896  01FD  0D49               	rlf	??_main+8,w
  1897  01FE  3E4C               	addlw	76
  1898  01FF  0084               	movwf	4
  1899  0200  0800               	movf	0,w
  1900  0201  00CA               	movwf	??_main+9
  1901  0202  0A84               	incf	4,f
  1902  0203  0800               	movf	0,w
  1903  0204  00CB               	movwf	??_main+10
  1904  0205  0A84               	incf	4,f
  1905  0206  0800               	movf	0,w
  1906  0207  00CC               	movwf	??_main+11
  1907  0208  0A84               	incf	4,f
  1908  0209  0800               	movf	0,w
  1909  020A  00CD               	movwf	??_main+12
  1910  020B  09CA               	comf	??_main+9,f
  1911  020C  09CB               	comf	??_main+10,f
  1912  020D  09CC               	comf	??_main+11,f
  1913  020E  09CD               	comf	??_main+12,f
  1914  020F  0ACA               	incf	??_main+9,f
  1915  0210  1903               	skipnz
  1916  0211  0ACB               	incf	??_main+10,f
  1917  0212  1903               	skipnz
  1918  0213  0ACC               	incf	??_main+11,f
  1919  0214  1903               	skipnz
  1920  0215  0ACD               	incf	??_main+12,f
  1921  0216  084A               	movf	??_main+9,w
  1922  0217  07C5               	addwf	??_main+4,f
  1923  0218  084B               	movf	??_main+10,w
  1924  0219  1803               	skipnc
  1925  021A  0F4B               	incfsz	??_main+10,w
  1926  021B  2A1D               	goto	u4850
  1927  021C  2A1E               	goto	u4851
  1928  021D                     u4850:	
  1929  021D  07C6               	addwf	??_main+5,f
  1930  021E                     u4851:	
  1931  021E  084C               	movf	??_main+11,w
  1932  021F  1803               	skipnc
  1933  0220  0F4C               	incfsz	??_main+11,w
  1934  0221  2A23               	goto	u4852
  1935  0222  2A24               	goto	u4853
  1936  0223                     u4852:	
  1937  0223  07C7               	addwf	??_main+6,f
  1938  0224                     u4853:	
  1939  0224  084D               	movf	??_main+12,w
  1940  0225  1803               	skipnc
  1941  0226  0A4D               	incf	??_main+12,w
  1942  0227  07C8               	addwf	??_main+7,f
  1943  0228  0845               	movf	??_main+4,w
  1944  0229  07C1               	addwf	??_main,f
  1945  022A  0846               	movf	??_main+5,w
  1946  022B  1803               	skipnc
  1947  022C  0F46               	incfsz	??_main+5,w
  1948  022D  2A2F               	goto	u4860
  1949  022E  2A30               	goto	u4861
  1950  022F                     u4860:	
  1951  022F  07C2               	addwf	??_main+1,f
  1952  0230                     u4861:	
  1953  0230  0847               	movf	??_main+6,w
  1954  0231  1803               	skipnc
  1955  0232  0F47               	incfsz	??_main+6,w
  1956  0233  2A35               	goto	u4862
  1957  0234  2A36               	goto	u4863
  1958  0235                     u4862:	
  1959  0235  07C3               	addwf	??_main+2,f
  1960  0236                     u4863:	
  1961  0236  0848               	movf	??_main+7,w
  1962  0237  1803               	skipnc
  1963  0238  0A48               	incf	??_main+7,w
  1964  0239                     L1:	
  1965  0239  07C4               	addwf	??_main+3,f
  1966  023A  0844               	movf	??_main+3,w
  1967  023B  00D1               	movwf	main@TimeSinceTheStartOfCycle+3
  1968  023C  0843               	movf	??_main+2,w
  1969  023D  00D0               	movwf	main@TimeSinceTheStartOfCycle+2
  1970  023E  0842               	movf	??_main+1,w
  1971  023F  00CF               	movwf	main@TimeSinceTheStartOfCycle+1
  1972  0240  0841               	movf	??_main,w
  1973  0241  00CE               	movwf	main@TimeSinceTheStartOfCycle
  1974                           
  1975                           ;main.c: 93: SecError = TimeSinceTheStartOfCycle%STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  1976  0242  0879               	movf	_CYCLE_TYPE,w	;volatile
  1977  0243  00C1               	movwf	??_main
  1978  0244  0741               	addwf	??_main,w
  1979  0245  3EEA               	addlw	234
  1980  0246  0084               	movwf	4
  1981  0247  0800               	movf	0,w
  1982  0248  00C2               	movwf	??_main+1
  1983  0249  0A84               	incf	4,f
  1984  024A  0800               	movf	0,w
  1985  024B  00C3               	movwf	??_main+2
  1986  024C  0842               	movf	??_main+1,w
  1987  024D  00A0               	movwf	___almod@divisor
  1988  024E  0843               	movf	??_main+2,w
  1989  024F  00A1               	movwf	___almod@divisor+1
  1990  0250  01A2               	clrf	___almod@divisor+2
  1991  0251  01A3               	clrf	___almod@divisor+3
  1992  0252  0851               	movf	main@TimeSinceTheStartOfCycle+3,w
  1993  0253  00A7               	movwf	___almod@dividend+3
  1994  0254  0850               	movf	main@TimeSinceTheStartOfCycle+2,w
  1995  0255  00A6               	movwf	___almod@dividend+2
  1996  0256  084F               	movf	main@TimeSinceTheStartOfCycle+1,w
  1997  0257  00A5               	movwf	___almod@dividend+1
  1998  0258  084E               	movf	main@TimeSinceTheStartOfCycle,w
  1999  0259  00A4               	movwf	___almod@dividend
  2000  025A  120A  118A  272E  120A  118A  	fcall	___almod
  2001  025F  1283               	bcf	3,5	;RP0=0, select bank0
  2002  0260  1303               	bcf	3,6	;RP1=0, select bank0
  2003  0261  0821               	movf	?___almod+1,w
  2004  0262  00E6               	movwf	main@SecError+1
  2005  0263  0820               	movf	?___almod,w
  2006  0264  00E5               	movwf	main@SecError
  2007                           
  2008                           ;main.c: 94: (CYCLE_TYPE==0) ? (i = 0) : (i = STATE_BREAKS[CYCLE_TYPE-1]);
  2009  0265  0879               	movf	_CYCLE_TYPE,w	;volatile
  2010  0266  1D03               	btfss	3,2
  2011  0267  2A6A               	goto	l3403
  2012  0268  01E8               	clrf	main@i
  2013  0269  2A73               	goto	l646
  2014  026A                     l3403:	
  2015  026A  0879               	movf	_CYCLE_TYPE,w
  2016  026B  3EFF               	addlw	255
  2017  026C  3E64               	addlw	100
  2018  026D  0084               	movwf	4
  2019  026E  1783               	bsf	3,7	;select IRP bank2
  2020  026F  0800               	movf	0,w
  2021  0270  00C1               	movwf	??_main
  2022  0271  0841               	movf	??_main,w
  2023  0272  00E8               	movwf	main@i
  2024  0273                     l646:	
  2025                           
  2026                           ;main.c: 95: if (SecError > (STATE_CUMULATIVE_PERIODS[CYCLE_TYPE]/2))
  2027  0273  0879               	movf	_CYCLE_TYPE,w	;volatile
  2028  0274  00C1               	movwf	??_main
  2029  0275  0741               	addwf	??_main,w
  2030  0276  3EEA               	addlw	234
  2031  0277  0084               	movwf	4
  2032  0278  1783               	bsf	3,7	;select IRP bank3
  2033  0279  0800               	movf	0,w
  2034  027A  00C2               	movwf	??_main+1
  2035  027B  0A84               	incf	4,f
  2036  027C  0800               	movf	0,w
  2037  027D  00C3               	movwf	??_main+2
  2038  027E  1003               	clrc
  2039  027F  0CC3               	rrf	??_main+2,f
  2040  0280  0CC2               	rrf	??_main+1,f
  2041  0281  0866               	movf	main@SecError+1,w
  2042  0282  0243               	subwf	??_main+2,w
  2043  0283  1D03               	skipz
  2044  0284  2A87               	goto	u4885
  2045  0285  0865               	movf	main@SecError,w
  2046  0286  0242               	subwf	??_main+1,w
  2047  0287                     u4885:	
  2048  0287  1803               	skipnc
  2049  0288  2A99               	goto	l3509
  2050                           
  2051                           ;main.c: 96: SecError -= STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2052  0289  0879               	movf	_CYCLE_TYPE,w	;volatile
  2053  028A  00C1               	movwf	??_main
  2054  028B  0741               	addwf	??_main,w
  2055  028C  3EEA               	addlw	234
  2056  028D  0084               	movwf	4
  2057  028E  0800               	movf	0,w
  2058  028F  00C2               	movwf	??_main+1
  2059  0290  0A84               	incf	4,f
  2060  0291  0800               	movf	0,w
  2061  0292  00C3               	movwf	??_main+2
  2062  0293  0842               	movf	??_main+1,w
  2063  0294  02E5               	subwf	main@SecError,f
  2064  0295  0843               	movf	??_main+2,w
  2065  0296  1C03               	skipc
  2066  0297  03E6               	decf	main@SecError+1,f
  2067  0298  02E6               	subwf	main@SecError+1,f
  2068  0299                     l3509:	
  2069                           ;main.c: 97: for (; i < STATE_BREAKS[CYCLE_TYPE]; i++) {
  2070                           
  2071  0299  0879               	movf	_CYCLE_TYPE,w
  2072  029A  3E64               	addlw	100
  2073  029B  0084               	movwf	4
  2074  029C  1783               	bsf	3,7	;select IRP bank2
  2075  029D  0800               	movf	0,w
  2076  029E  0268               	subwf	main@i,w
  2077  029F  1803               	btfsc	3,0
  2078  02A0  28B0               	goto	l3355
  2079                           
  2080                           ;main.c: 98: DiffInSecond = 0;
  2081  02A1  01E7               	clrf	main@DiffInSecond
  2082                           
  2083                           ;main.c: 99: for (j=0; j<(STATE_PERIODS[i] + DiffInSecond); j++) {
  2084  02A2  01E2               	clrf	main@j
  2085  02A3                     l3505:	
  2086  02A3  0868               	movf	main@i,w
  2087  02A4  3E90               	addlw	144
  2088  02A5  0084               	movwf	4
  2089  02A6  1783               	bsf	3,7	;select IRP bank3
  2090  02A7  0800               	movf	0,w
  2091  02A8  0767               	addwf	main@DiffInSecond,w
  2092  02A9  00C1               	movwf	??_main
  2093  02AA  01C2               	clrf	??_main+1
  2094  02AB  1803               	skipnc
  2095  02AC  0AC2               	incf	??_main+1,f
  2096  02AD  1BE7               	btfsc	main@DiffInSecond,7
  2097  02AE  03C2               	decf	??_main+1,f
  2098  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2099  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2100  02B1  0842               	movf	??_main+1,w
  2101  02B2  3A80               	xorlw	128
  2102  02B3  3C80               	sublw	128
  2103  02B4  1D03               	skipz
  2104  02B5  2AB8               	goto	u5175
  2105  02B6  0841               	movf	??_main,w
  2106  02B7  0262               	subwf	main@j,w
  2107  02B8                     u5175:	
  2108  02B8  1803               	btfsc	3,0
  2109  02B9  2C9D               	goto	l3507
  2110                           
  2111                           ;main.c: 100: StateSecRemaining = (STATE_PERIODS[i] + DiffInSecond)-j;
  2112  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2113  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2114  02BC  0868               	movf	main@i,w
  2115  02BD  3E90               	addlw	144
  2116  02BE  0084               	movwf	4
  2117  02BF  0362               	decf	main@j,w
  2118  02C0  3AFF               	xorlw	255
  2119  02C1  1783               	bsf	3,7	;select IRP bank3
  2120  02C2  0700               	addwf	0,w
  2121  02C3  00C1               	movwf	??_main
  2122  02C4  0867               	movf	main@DiffInSecond,w
  2123  02C5  0741               	addwf	??_main,w
  2124  02C6  00C2               	movwf	??_main+1
  2125  02C7  0842               	movf	??_main+1,w
  2126  02C8  00D9               	movwf	main@StateSecRemaining
  2127                           
  2128                           ;main.c: 101: for (k=0; k<1000; k++) {
  2129  02C9  01DA               	clrf	main@k
  2130  02CA  01DB               	clrf	main@k+1
  2131  02CB  3003               	movlw	3
  2132  02CC  025B               	subwf	main@k+1,w
  2133  02CD  30E8               	movlw	232
  2134  02CE  1903               	skipnz
  2135  02CF  025A               	subwf	main@k,w
  2136  02D0  1803               	btfsc	3,0
  2137  02D1  2C14               	goto	l3489
  2138  02D2                     l3417:	
  2139                           
  2140                           ;main.c: 102: for (l=0; l<2; l++)
  2141  02D2  01E9               	clrf	main@l
  2142  02D3  01EA               	clrf	main@l+1
  2143  02D4  3000               	movlw	0
  2144  02D5  026A               	subwf	main@l+1,w
  2145  02D6  3002               	movlw	2
  2146  02D7  1903               	skipnz
  2147  02D8  0269               	subwf	main@l,w
  2148  02D9  1803               	btfsc	3,0
  2149  02DA  2B01               	goto	l3429
  2150  02DB                     l3423:	
  2151                           
  2152                           ;main.c: 103: OutForThePorts[l] = STATE_1[i][l];
  2153  02DB  0868               	movf	main@i,w
  2154  02DC  00C1               	movwf	??_main
  2155  02DD  3001               	movlw	1
  2156  02DE                     u4915:	
  2157  02DE  1003               	clrc
  2158  02DF  0DC1               	rlf	??_main,f
  2159  02E0  3EFF               	addlw	-1
  2160  02E1  1D03               	skipz
  2161  02E2  2ADE               	goto	u4915
  2162  02E3  30AE               	movlw	174
  2163  02E4  0741               	addwf	??_main,w
  2164  02E5  00C2               	movwf	??_main+1
  2165  02E6  0869               	movf	main@l,w
  2166  02E7  0742               	addwf	??_main+1,w
  2167  02E8  00C3               	movwf	??_main+2
  2168  02E9  0843               	movf	??_main+2,w
  2169  02EA  0084               	movwf	4
  2170  02EB  1783               	bsf	3,7	;select IRP bank3
  2171  02EC  0800               	movf	0,w
  2172  02ED  00C4               	movwf	??_main+3
  2173  02EE  0869               	movf	main@l,w
  2174  02EF  3E63               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2175  02F0  0084               	movwf	4
  2176  02F1  0844               	movf	??_main+3,w
  2177  02F2  1383               	bcf	3,7	;select IRP bank0
  2178  02F3  0080               	movwf	0
  2179  02F4  3001               	movlw	1
  2180  02F5  07E9               	addwf	main@l,f
  2181  02F6  1803               	skipnc
  2182  02F7  0AEA               	incf	main@l+1,f
  2183  02F8  3000               	movlw	0
  2184  02F9  07EA               	addwf	main@l+1,f
  2185  02FA  3000               	movlw	0
  2186  02FB  026A               	subwf	main@l+1,w
  2187  02FC  3002               	movlw	2
  2188  02FD  1903               	skipnz
  2189  02FE  0269               	subwf	main@l,w
  2190  02FF  1C03               	skipc
  2191  0300  2ADB               	goto	l3423
  2192  0301                     l3429:	
  2193                           
  2194                           ;main.c: 104: if (StateSecRemaining <= 60) {
  2195  0301  303D               	movlw	61
  2196  0302  0259               	subwf	main@StateSecRemaining,w
  2197  0303  1803               	skipnc
  2198  0304  2B3B               	goto	l3445
  2199                           
  2200                           ;main.c: 105: if (State2OnOffCounter < 600) {
  2201  0305  3002               	movlw	2
  2202  0306  025D               	subwf	main@State2OnOffCounter+1,w
  2203  0307  3058               	movlw	88
  2204  0308  1903               	skipnz
  2205  0309  025C               	subwf	main@State2OnOffCounter,w
  2206  030A  1803               	skipnc
  2207  030B  2B70               	goto	l3457
  2208                           
  2209                           ;main.c: 106: for (l=0; l<2; l++)
  2210  030C  01E9               	clrf	main@l
  2211  030D  01EA               	clrf	main@l+1
  2212  030E                     L2:	
  2213  030E  3000               	movlw	0
  2214  030F  026A               	subwf	main@l+1,w
  2215  0310  3002               	movlw	2
  2216  0311  1903               	skipnz
  2217  0312  0269               	subwf	main@l,w
  2218  0313  1803               	btfsc	3,0
  2219  0314  2B70               	goto	l3457
  2220                           
  2221                           ;main.c: 107: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2222  0315  0868               	movf	main@i,w
  2223  0316  00C1               	movwf	??_main
  2224  0317  3001               	movlw	1
  2225  0318                     u4965:	
  2226  0318  1003               	clrc
  2227  0319  0DC1               	rlf	??_main,f
  2228  031A  3EFF               	addlw	-1
  2229  031B  1D03               	skipz
  2230  031C  2B18               	goto	u4965
  2231  031D  3010               	movlw	16
  2232  031E  0741               	addwf	??_main,w
  2233  031F  00C2               	movwf	??_main+1
  2234  0320  0869               	movf	main@l,w
  2235  0321  0742               	addwf	??_main+1,w
  2236  0322  00C3               	movwf	??_main+2
  2237  0323  0843               	movf	??_main+2,w
  2238  0324  0084               	movwf	4
  2239  0325  1783               	bsf	3,7	;select IRP bank2
  2240  0326  0800               	movf	0,w
  2241  0327  00C4               	movwf	??_main+3
  2242  0328  0869               	movf	main@l,w
  2243  0329  3E63               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2244  032A  0084               	movwf	4
  2245  032B  1383               	bcf	3,7	;select IRP bank0
  2246  032C  0800               	movf	0,w
  2247  032D  0444               	iorwf	??_main+3,w
  2248  032E  00C5               	movwf	??_main+4
  2249  032F  0869               	movf	main@l,w
  2250  0330  3E63               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2251  0331  0084               	movwf	4
  2252  0332  0845               	movf	??_main+4,w
  2253  0333  0080               	movwf	0
  2254  0334  3001               	movlw	1
  2255  0335  07E9               	addwf	main@l,f
  2256  0336  1803               	skipnc
  2257  0337  0AEA               	incf	main@l+1,f
  2258  0338  3000               	movlw	0
  2259  0339  07EA               	addwf	main@l+1,f
  2260  033A  2B0E               	goto	L2
  2261  033B                     l3445:	
  2262                           ;main.c: 108: }
  2263                           ;main.c: 109: } else {
  2264                           
  2265                           
  2266                           ;main.c: 110: for (l=0; l<2; l++)
  2267  033B  01E9               	clrf	main@l
  2268  033C  01EA               	clrf	main@l+1
  2269  033D  3000               	movlw	0
  2270  033E  026A               	subwf	main@l+1,w
  2271  033F  3002               	movlw	2
  2272  0340  1903               	skipnz
  2273  0341  0269               	subwf	main@l,w
  2274  0342  1803               	btfsc	3,0
  2275  0343  2B70               	goto	l3457
  2276  0344                     l3451:	
  2277                           
  2278                           ;main.c: 111: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2279  0344  0868               	movf	main@i,w
  2280  0345  00C1               	movwf	??_main
  2281  0346  3001               	movlw	1
  2282  0347                     u4995:	
  2283  0347  1003               	clrc
  2284  0348  0DC1               	rlf	??_main,f
  2285  0349  3EFF               	addlw	-1
  2286  034A  1D03               	skipz
  2287  034B  2B47               	goto	u4995
  2288  034C  3010               	movlw	16
  2289  034D  0741               	addwf	??_main,w
  2290  034E  00C2               	movwf	??_main+1
  2291  034F  0869               	movf	main@l,w
  2292  0350  0742               	addwf	??_main+1,w
  2293  0351  00C3               	movwf	??_main+2
  2294  0352  0843               	movf	??_main+2,w
  2295  0353  0084               	movwf	4
  2296  0354  1783               	bsf	3,7	;select IRP bank2
  2297  0355  0800               	movf	0,w
  2298  0356  00C4               	movwf	??_main+3
  2299  0357  0869               	movf	main@l,w
  2300  0358  3E63               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2301  0359  0084               	movwf	4
  2302  035A  1383               	bcf	3,7	;select IRP bank0
  2303  035B  0800               	movf	0,w
  2304  035C  0444               	iorwf	??_main+3,w
  2305  035D  00C5               	movwf	??_main+4
  2306  035E  0869               	movf	main@l,w
  2307  035F  3E63               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2308  0360  0084               	movwf	4
  2309  0361  0845               	movf	??_main+4,w
  2310  0362  0080               	movwf	0
  2311  0363  3001               	movlw	1
  2312  0364  07E9               	addwf	main@l,f
  2313  0365  1803               	skipnc
  2314  0366  0AEA               	incf	main@l+1,f
  2315  0367  3000               	movlw	0
  2316  0368  07EA               	addwf	main@l+1,f
  2317  0369  3000               	movlw	0
  2318  036A  026A               	subwf	main@l+1,w
  2319  036B  3002               	movlw	2
  2320  036C  1903               	skipnz
  2321  036D  0269               	subwf	main@l,w
  2322  036E  1C03               	skipc
  2323  036F  2B44               	goto	l3451
  2324  0370                     l3457:	
  2325                           
  2326                           ;main.c: 113: }
  2327                           ;main.c: 114: if (StateSecRemaining > 5) {
  2328  0370  3006               	movlw	6
  2329  0371  0259               	subwf	main@StateSecRemaining,w
  2330  0372  1C03               	skipc
  2331  0373  2B9F               	goto	l3465
  2332                           
  2333                           ;main.c: 115: if ((StateAudioNormalOnOffCounter) < 80) {
  2334  0374  3000               	movlw	0
  2335  0375  025F               	subwf	main@StateAudioNormalOnOffCounter+1,w
  2336  0376  3050               	movlw	80
  2337  0377  1903               	skipnz
  2338  0378  025E               	subwf	main@StateAudioNormalOnOffCounter,w
  2339  0379  1803               	skipnc
  2340  037A  2BD2               	goto	l669
  2341                           
  2342                           ;main.c: 116: if ((AUDIO.v[i/8]) & (0x80>>(i%8)))
  2343  037B  3008               	movlw	8
  2344  037C  00A0               	movwf	___awdiv@divisor
  2345  037D  3000               	movlw	0
  2346  037E  00A1               	movwf	___awdiv@divisor+1
  2347  037F  0868               	movf	main@i,w
  2348  0380  00C1               	movwf	??_main
  2349  0381  01C2               	clrf	??_main+1
  2350  0382  0841               	movf	??_main,w
  2351  0383  00A2               	movwf	___awdiv@dividend
  2352  0384  0842               	movf	??_main+1,w
  2353  0385  00A3               	movwf	___awdiv@dividend+1
  2354  0386  120A  158A  2680  120A  118A  	fcall	___awdiv
  2355  038B  1283               	bcf	3,5	;RP0=0, select bank0
  2356  038C  1303               	bcf	3,6	;RP1=0, select bank0
  2357  038D  0820               	movf	?___awdiv,w
  2358  038E  3E67               	addlw	103
  2359  038F  0084               	movwf	4
  2360  0390  0868               	movf	main@i,w
  2361  0391  3907               	andlw	7
  2362  0392  00C3               	movwf	??_main+2
  2363  0393  0AC3               	incf	??_main+2,f
  2364  0394  3080               	movlw	128
  2365  0395  00C4               	movwf	??_main+3
  2366  0396  3000               	movlw	0
  2367  0397  00C5               	movwf	??_main+4
  2368  0398  2B9C               	goto	u5034
  2369  0399                     u5035:	
  2370  0399  0D45               	rlf	??_main+4,w
  2371  039A  0CC5               	rrf	??_main+4,f
  2372  039B  0CC4               	rrf	??_main+3,f
  2373  039C                     u5034:	
  2374  039C  0BC3               	decfsz	??_main+2,f
  2375  039D  2B99               	goto	u5035
  2376  039E  2BC9               	goto	L3
  2377  039F                     l3465:	
  2378                           ;main.c: 122: } else {
  2379                           
  2380                           ;main.c: 121: RC0 = 0;
  2381                           
  2382                           ;main.c: 120: } else
  2383                           
  2384                           ;main.c: 118: else
  2385                           ;main.c: 119: RC0 = 0;
  2386                           
  2387                           ;main.c: 117: RC0 = 1;
  2388                           
  2389                           
  2390                           ;main.c: 123: if ((StateAudioSplOnOffCounter) < 80) {
  2391  039F  3000               	movlw	0
  2392  03A0  0261               	subwf	main@StateAudioSplOnOffCounter+1,w
  2393  03A1  3050               	movlw	80
  2394  03A2  1903               	skipnz
  2395  03A3  0260               	subwf	main@StateAudioSplOnOffCounter,w
  2396  03A4  1803               	skipnc
  2397  03A5  2BD2               	goto	l669
  2398                           
  2399                           ;main.c: 124: if ((AUDIO.v[i/8]) & (0x80>>(i%8)))
  2400  03A6  3008               	movlw	8
  2401  03A7  00A0               	movwf	___awdiv@divisor
  2402  03A8  3000               	movlw	0
  2403  03A9  00A1               	movwf	___awdiv@divisor+1
  2404  03AA  0868               	movf	main@i,w
  2405  03AB  00C1               	movwf	??_main
  2406  03AC  01C2               	clrf	??_main+1
  2407  03AD  0841               	movf	??_main,w
  2408  03AE  00A2               	movwf	___awdiv@dividend
  2409  03AF  0842               	movf	??_main+1,w
  2410  03B0  00A3               	movwf	___awdiv@dividend+1
  2411  03B1  120A  158A  2680  120A  118A  	fcall	___awdiv
  2412  03B6  1283               	bcf	3,5	;RP0=0, select bank0
  2413  03B7  1303               	bcf	3,6	;RP1=0, select bank0
  2414  03B8  0820               	movf	?___awdiv,w
  2415  03B9  3E67               	addlw	103
  2416  03BA  0084               	movwf	4
  2417  03BB  0868               	movf	main@i,w
  2418  03BC  3907               	andlw	7
  2419  03BD  00C3               	movwf	??_main+2
  2420  03BE  0AC3               	incf	??_main+2,f
  2421  03BF  3080               	movlw	128
  2422  03C0  00C4               	movwf	??_main+3
  2423  03C1  3000               	movlw	0
  2424  03C2  00C5               	movwf	??_main+4
  2425  03C3  2BC7               	goto	u5064
  2426  03C4                     u5065:	
  2427  03C4  0D45               	rlf	??_main+4,w
  2428  03C5  0CC5               	rrf	??_main+4,f
  2429  03C6  0CC4               	rrf	??_main+3,f
  2430  03C7                     u5064:	
  2431  03C7  0BC3               	decfsz	??_main+2,f
  2432  03C8  2BC4               	goto	u5065
  2433  03C9                     L3:	
  2434  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2435  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2436  03CB  0844               	movf	??_main+3,w
  2437  03CC  1783               	bsf	3,7	;select IRP bank2
  2438  03CD  0500               	andwf	0,w
  2439  03CE  1903               	btfsc	3,2
  2440  03CF  2BD2               	goto	l669
  2441                           
  2442                           ;main.c: 125: RC0 = 1;
  2443  03D0  1407               	bsf	7,0	;volatile
  2444  03D1  2BD3               	goto	l3471
  2445  03D2                     l669:	
  2446                           ;main.c: 128: } else
  2447                           
  2448                           ;main.c: 126: else
  2449                           ;main.c: 127: RC0 = 0;
  2450                           
  2451                           
  2452                           ;main.c: 129: RC0 = 0;
  2453  03D2  1007               	bcf	7,0	;volatile
  2454  03D3                     l3471:	
  2455                           
  2456                           ;main.c: 130: }
  2457                           ;main.c: 131: State2OnOffCounter++;
  2458  03D3  3001               	movlw	1
  2459  03D4  07DC               	addwf	main@State2OnOffCounter,f
  2460  03D5  1803               	skipnc
  2461  03D6  0ADD               	incf	main@State2OnOffCounter+1,f
  2462  03D7  3000               	movlw	0
  2463  03D8  07DD               	addwf	main@State2OnOffCounter+1,f
  2464                           
  2465                           ;main.c: 132: StateAudioNormalOnOffCounter++;
  2466  03D9  3001               	movlw	1
  2467  03DA  07DE               	addwf	main@StateAudioNormalOnOffCounter,f
  2468  03DB  1803               	skipnc
  2469  03DC  0ADF               	incf	main@StateAudioNormalOnOffCounter+1,f
  2470  03DD  3000               	movlw	0
  2471  03DE  07DF               	addwf	main@StateAudioNormalOnOffCounter+1,f
  2472                           
  2473                           ;main.c: 133: StateAudioSplOnOffCounter++;
  2474  03DF  3001               	movlw	1
  2475  03E0  07E0               	addwf	main@StateAudioSplOnOffCounter,f
  2476  03E1  1803               	skipnc
  2477  03E2  0AE1               	incf	main@StateAudioSplOnOffCounter+1,f
  2478  03E3  3000               	movlw	0
  2479  03E4  07E1               	addwf	main@StateAudioSplOnOffCounter+1,f
  2480                           
  2481                           ;main.c: 134: if (State2OnOffCounter >= (600
  2482                           ;main.c: 135: + 400))
  2483  03E5  3003               	movlw	3
  2484  03E6  025D               	subwf	main@State2OnOffCounter+1,w
  2485  03E7  30E8               	movlw	232
  2486  03E8  1903               	skipnz
  2487  03E9  025C               	subwf	main@State2OnOffCounter,w
  2488  03EA  1C03               	skipc
  2489  03EB  2BEE               	goto	l3475
  2490                           
  2491                           ;main.c: 136: State2OnOffCounter=0;
  2492  03EC  01DC               	clrf	main@State2OnOffCounter
  2493  03ED  01DD               	clrf	main@State2OnOffCounter+1
  2494  03EE                     l3475:	
  2495                           
  2496                           ;main.c: 137: if (StateAudioNormalOnOffCounter >= (80
  2497                           ;main.c: 138: + 1920))
  2498  03EE  3007               	movlw	7
  2499  03EF  025F               	subwf	main@StateAudioNormalOnOffCounter+1,w
  2500  03F0  30D0               	movlw	208
  2501  03F1  1903               	skipnz
  2502  03F2  025E               	subwf	main@StateAudioNormalOnOffCounter,w
  2503  03F3  1C03               	skipc
  2504  03F4  2BF7               	goto	l3479
  2505                           
  2506                           ;main.c: 139: StateAudioNormalOnOffCounter=0;
  2507  03F5  01DE               	clrf	main@StateAudioNormalOnOffCounter
  2508  03F6  01DF               	clrf	main@StateAudioNormalOnOffCounter+1
  2509  03F7                     l3479:	
  2510                           
  2511                           ;main.c: 140: if (StateAudioSplOnOffCounter >= (80
  2512                           ;main.c: 141: + 420))
  2513  03F7  3001               	movlw	1
  2514  03F8  0261               	subwf	main@StateAudioSplOnOffCounter+1,w
  2515  03F9  30F4               	movlw	244
  2516  03FA  1903               	skipnz
  2517  03FB  0260               	subwf	main@StateAudioSplOnOffCounter,w
  2518  03FC  1C03               	skipc
  2519  03FD  2C00               	goto	l3483
  2520                           
  2521                           ;main.c: 142: StateAudioSplOnOffCounter=0;
  2522  03FE  01E0               	clrf	main@StateAudioSplOnOffCounter
  2523  03FF  01E1               	clrf	main@StateAudioSplOnOffCounter+1
  2524  0400                     l3483:	
  2525                           
  2526                           ;main.c: 144: PORTA = OutForThePorts[0];
  2527  0400  0863               	movf	main@OutForThePorts,w
  2528  0401  0085               	movwf	5	;volatile
  2529                           
  2530                           ;main.c: 145: PORTB = OutForThePorts[1];
  2531  0402  0864               	movf	main@OutForThePorts+1,w
  2532  0403  0086               	movwf	6	;volatile
  2533  0404                     l676:	
  2534                           ;main.c: 148: while (!FLAGS.bits.b5);
  2535                           
  2536  0404  1EEB               	btfss	_FLAGS,5	;volatile
  2537  0405  2C04               	goto	l676
  2538                           
  2539                           ;main.c: 150: FLAGS.bits.b5 = 0;
  2540  0406  12EB               	bcf	_FLAGS,5	;volatile
  2541  0407  3001               	movlw	1
  2542  0408  07DA               	addwf	main@k,f
  2543  0409  1803               	skipnc
  2544  040A  0ADB               	incf	main@k+1,f
  2545  040B  3000               	movlw	0
  2546  040C  07DB               	addwf	main@k+1,f
  2547  040D  3003               	movlw	3
  2548  040E  025B               	subwf	main@k+1,w
  2549  040F  30E8               	movlw	232
  2550  0410  1903               	skipnz
  2551  0411  025A               	subwf	main@k,w
  2552  0412  1C03               	skipc
  2553  0413  2AD2               	goto	l3417
  2554  0414                     l3489:	
  2555                           
  2556                           ;main.c: 152: }
  2557                           ;main.c: 153: if (j==0) {
  2558  0414  0862               	movf	main@j,w
  2559  0415  1D03               	btfss	3,2
  2560  0416  2C86               	goto	l679
  2561                           
  2562                           ;main.c: 154: DiffInSecond = STATE_PERIODS[i]/3;
  2563  0417  3003               	movlw	3
  2564  0418  00A0               	movwf	___awdiv@divisor
  2565  0419  3000               	movlw	0
  2566  041A  00A1               	movwf	___awdiv@divisor+1
  2567  041B  0868               	movf	main@i,w
  2568  041C  3E90               	addlw	144
  2569  041D  0084               	movwf	4
  2570  041E  1783               	bsf	3,7	;select IRP bank3
  2571  041F  0800               	movf	0,w
  2572  0420  00C1               	movwf	??_main
  2573  0421  01C2               	clrf	??_main+1
  2574  0422  0841               	movf	??_main,w
  2575  0423  00A2               	movwf	___awdiv@dividend
  2576  0424  0842               	movf	??_main+1,w
  2577  0425  00A3               	movwf	___awdiv@dividend+1
  2578  0426  120A  158A  2680  120A  118A  	fcall	___awdiv
  2579  042B  1283               	bcf	3,5	;RP0=0, select bank0
  2580  042C  1303               	bcf	3,6	;RP1=0, select bank0
  2581  042D  0820               	movf	?___awdiv,w
  2582  042E  00C3               	movwf	??_main+2
  2583  042F  0843               	movf	??_main+2,w
  2584  0430  00E7               	movwf	main@DiffInSecond
  2585                           
  2586                           ;main.c: 156: if (GetAbs(SecError)<GetAbs(DiffInSecond))
  2587  0431  0866               	movf	main@SecError+1,w
  2588  0432  00F5               	movwf	GetAbs@a+1
  2589  0433  0865               	movf	main@SecError,w
  2590  0434  00F4               	movwf	GetAbs@a
  2591  0435  120A  158A  24E8  120A  118A  	fcall	_GetAbs
  2592  043A  0874               	movf	?_GetAbs,w
  2593  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2594  043C  1303               	bcf	3,6	;RP1=0, select bank0
  2595  043D  00C1               	movwf	??_main
  2596  043E  0875               	movf	?_GetAbs+1,w
  2597  043F  00C2               	movwf	??_main+1
  2598  0440  0867               	movf	main@DiffInSecond,w
  2599  0441  00F4               	movwf	GetAbs@a
  2600  0442  01F5               	clrf	GetAbs@a+1
  2601  0443  1BF4               	btfsc	GetAbs@a,7
  2602  0444  03F5               	decf	GetAbs@a+1,f
  2603  0445  120A  158A  24E8  120A  118A  	fcall	_GetAbs
  2604  044A  1283               	bcf	3,5	;RP0=0, select bank0
  2605  044B  1303               	bcf	3,6	;RP1=0, select bank0
  2606  044C  0842               	movf	??_main+1,w
  2607  044D  3A80               	xorlw	128
  2608  044E  00C3               	movwf	??_main+2
  2609  044F  0875               	movf	?_GetAbs+1,w
  2610  0450  3A80               	xorlw	128
  2611  0451  0243               	subwf	??_main+2,w
  2612  0452  1D03               	skipz
  2613  0453  2C56               	goto	u5145
  2614  0454  0874               	movf	?_GetAbs,w
  2615  0455  0241               	subwf	??_main,w
  2616  0456                     u5145:	
  2617  0456  1803               	skipnc
  2618  0457  2C69               	goto	l3497
  2619                           
  2620                           ;main.c: 157: DiffInSecond = GetAbs(SecError);
  2621  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2622  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2623  045A  0866               	movf	main@SecError+1,w
  2624  045B  00F5               	movwf	GetAbs@a+1
  2625  045C  0865               	movf	main@SecError,w
  2626  045D  00F4               	movwf	GetAbs@a
  2627  045E  120A  158A  24E8  120A  118A  	fcall	_GetAbs
  2628  0463  0874               	movf	?_GetAbs,w
  2629  0464  1283               	bcf	3,5	;RP0=0, select bank0
  2630  0465  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0466  00C1               	movwf	??_main
  2632  0467  0841               	movf	??_main,w
  2633  0468  00E7               	movwf	main@DiffInSecond
  2634  0469                     l3497:	
  2635                           
  2636                           ;main.c: 158: if (SecError>0)
  2637  0469  1283               	bcf	3,5	;RP0=0, select bank0
  2638  046A  1303               	bcf	3,6	;RP1=0, select bank0
  2639  046B  0866               	movf	main@SecError+1,w
  2640  046C  3A80               	xorlw	128
  2641  046D  00FF               	movwf	127
  2642  046E  3080               	movlw	128
  2643  046F  027F               	subwf	127,w
  2644  0470  1D03               	skipz
  2645  0471  2C74               	goto	u5155
  2646  0472  3001               	movlw	1
  2647  0473  0265               	subwf	main@SecError,w
  2648  0474                     u5155:	
  2649  0474  1C03               	skipc
  2650  0475  2C7A               	goto	l3501
  2651                           
  2652                           ;main.c: 159: DiffInSecond = -DiffInSecond;
  2653  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2654  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2655  0478  09E7               	comf	main@DiffInSecond,f
  2656  0479  0AE7               	incf	main@DiffInSecond,f
  2657  047A                     l3501:	
  2658                           
  2659                           ;main.c: 160: SecError = SecError+DiffInSecond;
  2660  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2661  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2662  047C  0865               	movf	main@SecError,w
  2663  047D  0767               	addwf	main@DiffInSecond,w
  2664  047E  00E5               	movwf	main@SecError
  2665  047F  0866               	movf	main@SecError+1,w
  2666  0480  1803               	skipnc
  2667  0481  0A66               	incf	main@SecError+1,w
  2668  0482  3E00               	addlw	0
  2669  0483  1BE7               	btfsc	main@DiffInSecond,7
  2670  0484  3EFF               	addlw	255
  2671  0485  00E6               	movwf	main@SecError+1
  2672  0486                     l679:	
  2673                           
  2674                           ;main.c: 161: }
  2675                           ;main.c: 181: S++;
  2676  0486  3001               	movlw	1
  2677  0487  1283               	bcf	3,5	;RP0=0, select bank2
  2678  0488  1703               	bsf	3,6	;RP1=1, select bank2
  2679  0489  07EB               	addwf	107,f	;volatile
  2680  048A  3000               	movlw	0
  2681  048B  1803               	skipnc
  2682  048C  3001               	movlw	1
  2683  048D  07EC               	addwf	108,f	;volatile
  2684  048E  3000               	movlw	0
  2685  048F  1803               	skipnc
  2686  0490  3001               	movlw	1
  2687  0491  07ED               	addwf	109,f	;volatile
  2688  0492  3000               	movlw	0
  2689  0493  1803               	skipnc
  2690  0494  3001               	movlw	1
  2691  0495  07EE               	addwf	110,f	;volatile
  2692  0496  3001               	movlw	1
  2693  0497  1283               	bcf	3,5	;RP0=0, select bank0
  2694  0498  1303               	bcf	3,6	;RP1=0, select bank0
  2695  0499  00C1               	movwf	??_main
  2696  049A  0841               	movf	??_main,w
  2697  049B  07E2               	addwf	main@j,f
  2698  049C  2AA3               	goto	l3505
  2699  049D                     l3507:	
  2700  049D  3001               	movlw	1
  2701  049E  1283               	bcf	3,5	;RP0=0, select bank0
  2702  049F  1303               	bcf	3,6	;RP1=0, select bank0
  2703  04A0  00C1               	movwf	??_main
  2704  04A1  0841               	movf	??_main,w
  2705  04A2  07E8               	addwf	main@i,f
  2706  04A3  2A99               	goto	l3509
  2707  04A4                     __end_of_main:	
  2708                           ;main.c: 190: }
  2709                           ;main.c: 191: }
  2710                           ;main.c: 192: }
  2711                           ;main.c: 193: return;
  2712                           
  2713                           
  2714                           	psect	text1
  2715  0E80                     __ptext1:	
  2716 ;; *************** function ___awdiv *****************
  2717 ;; Defined at:
  2718 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/common/awdiv.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  divisor         2    0[BANK0 ] int 
  2721 ;;  dividend        2    2[BANK0 ] int 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  quotient        2    6[BANK0 ] int 
  2724 ;;  sign            1    5[BANK0 ] unsigned char 
  2725 ;;  counter         1    4[BANK0 ] unsigned char 
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  2    0[BANK0 ] int 
  2728 ;; Registers used:
  2729 ;;		wreg, status,2, status,0
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  2735 ;;      Params:         0       4       0       0
  2736 ;;      Locals:         0       4       0       0
  2737 ;;      Temps:          1       0       0       0
  2738 ;;      Totals:         1       8       0       0
  2739 ;;Total ram usage:        9 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    1
  2742 ;; This function calls:
  2743 ;;		Nothing
  2744 ;; This function is called by:
  2745 ;;		_main
  2746 ;;		_Lcd_Int
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           
  2751                           ;psect for function ___awdiv
  2752  0E80                     ___awdiv:	
  2753                           
  2754                           ;incstack = 0
  2755                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2756  0E80  1283               	bcf	3,5	;RP0=0, select bank0
  2757  0E81  1303               	bcf	3,6	;RP1=0, select bank0
  2758  0E82  01A5               	clrf	___awdiv@sign
  2759  0E83  1FA1               	btfss	___awdiv@divisor+1,7
  2760  0E84  2E8C               	goto	l3219
  2761  0E85  09A0               	comf	___awdiv@divisor,f
  2762  0E86  09A1               	comf	___awdiv@divisor+1,f
  2763  0E87  0AA0               	incf	___awdiv@divisor,f
  2764  0E88  1903               	skipnz
  2765  0E89  0AA1               	incf	___awdiv@divisor+1,f
  2766  0E8A  01A5               	clrf	___awdiv@sign
  2767  0E8B  0AA5               	incf	___awdiv@sign,f
  2768  0E8C                     l3219:	
  2769  0E8C  1FA3               	btfss	___awdiv@dividend+1,7
  2770  0E8D  2E97               	goto	l3225
  2771  0E8E  09A2               	comf	___awdiv@dividend,f
  2772  0E8F  09A3               	comf	___awdiv@dividend+1,f
  2773  0E90  0AA2               	incf	___awdiv@dividend,f
  2774  0E91  1903               	skipnz
  2775  0E92  0AA3               	incf	___awdiv@dividend+1,f
  2776  0E93  3001               	movlw	1
  2777  0E94  00F4               	movwf	??___awdiv
  2778  0E95  0874               	movf	??___awdiv,w
  2779  0E96  06A5               	xorwf	___awdiv@sign,f
  2780  0E97                     l3225:	
  2781  0E97  01A6               	clrf	___awdiv@quotient
  2782  0E98  01A7               	clrf	___awdiv@quotient+1
  2783  0E99  0820               	movf	___awdiv@divisor,w
  2784  0E9A  0421               	iorwf	___awdiv@divisor+1,w
  2785  0E9B  1903               	btfsc	3,2
  2786  0E9C  2ECE               	goto	l3247
  2787  0E9D  01A4               	clrf	___awdiv@counter
  2788  0E9E  0AA4               	incf	___awdiv@counter,f
  2789  0E9F                     l3235:	
  2790  0E9F  1BA1               	btfsc	___awdiv@divisor+1,7
  2791  0EA0  2EAD               	goto	l3237
  2792  0EA1  3001               	movlw	1
  2793  0EA2                     u4535:	
  2794  0EA2  1003               	clrc
  2795  0EA3  0DA0               	rlf	___awdiv@divisor,f
  2796  0EA4  0DA1               	rlf	___awdiv@divisor+1,f
  2797  0EA5  3EFF               	addlw	-1
  2798  0EA6  1D03               	skipz
  2799  0EA7  2EA2               	goto	u4535
  2800  0EA8  3001               	movlw	1
  2801  0EA9  00F4               	movwf	??___awdiv
  2802  0EAA  0874               	movf	??___awdiv,w
  2803  0EAB  07A4               	addwf	___awdiv@counter,f
  2804  0EAC  2E9F               	goto	l3235
  2805  0EAD                     l3237:	
  2806  0EAD  3001               	movlw	1
  2807  0EAE                     u4555:	
  2808  0EAE  1003               	clrc
  2809  0EAF  0DA6               	rlf	___awdiv@quotient,f
  2810  0EB0  0DA7               	rlf	___awdiv@quotient+1,f
  2811  0EB1  3EFF               	addlw	-1
  2812  0EB2  1D03               	skipz
  2813  0EB3  2EAE               	goto	u4555
  2814  0EB4  0821               	movf	___awdiv@divisor+1,w
  2815  0EB5  0223               	subwf	___awdiv@dividend+1,w
  2816  0EB6  1D03               	skipz
  2817  0EB7  2EBA               	goto	u4565
  2818  0EB8  0820               	movf	___awdiv@divisor,w
  2819  0EB9  0222               	subwf	___awdiv@dividend,w
  2820  0EBA                     u4565:	
  2821  0EBA  1C03               	skipc
  2822  0EBB  2EC3               	goto	l3243
  2823  0EBC  0820               	movf	___awdiv@divisor,w
  2824  0EBD  02A2               	subwf	___awdiv@dividend,f
  2825  0EBE  0821               	movf	___awdiv@divisor+1,w
  2826  0EBF  1C03               	skipc
  2827  0EC0  03A3               	decf	___awdiv@dividend+1,f
  2828  0EC1  02A3               	subwf	___awdiv@dividend+1,f
  2829  0EC2  1426               	bsf	___awdiv@quotient,0
  2830  0EC3                     l3243:	
  2831  0EC3  3001               	movlw	1
  2832  0EC4                     u4575:	
  2833  0EC4  1003               	clrc
  2834  0EC5  0CA1               	rrf	___awdiv@divisor+1,f
  2835  0EC6  0CA0               	rrf	___awdiv@divisor,f
  2836  0EC7  3EFF               	addlw	-1
  2837  0EC8  1D03               	skipz
  2838  0EC9  2EC4               	goto	u4575
  2839  0ECA  3001               	movlw	1
  2840  0ECB  02A4               	subwf	___awdiv@counter,f
  2841  0ECC  1D03               	btfss	3,2
  2842  0ECD  2EAD               	goto	l3237
  2843  0ECE                     l3247:	
  2844  0ECE  0825               	movf	___awdiv@sign,w
  2845  0ECF  1903               	btfsc	3,2
  2846  0ED0  2ED6               	goto	l3251
  2847  0ED1  09A6               	comf	___awdiv@quotient,f
  2848  0ED2  09A7               	comf	___awdiv@quotient+1,f
  2849  0ED3  0AA6               	incf	___awdiv@quotient,f
  2850  0ED4  1903               	skipnz
  2851  0ED5  0AA7               	incf	___awdiv@quotient+1,f
  2852  0ED6                     l3251:	
  2853  0ED6  0827               	movf	___awdiv@quotient+1,w
  2854  0ED7  00A1               	movwf	?___awdiv+1
  2855  0ED8  0826               	movf	___awdiv@quotient,w
  2856  0ED9  00A0               	movwf	?___awdiv
  2857  0EDA  0008               	return
  2858  0EDB                     __end_of___awdiv:	
  2859                           
  2860                           	psect	text2
  2861  072E                     __ptext2:	
  2862 ;; *************** function ___almod *****************
  2863 ;; Defined at:
  2864 ;;		line 5 in file "/opt/microchip/xc8/v1.42/sources/common/almod.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  divisor         4    0[BANK0 ] long 
  2867 ;;  dividend        4    4[BANK0 ] long 
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;  sign            1    6[COMMON] unsigned char 
  2870 ;;  counter         1    5[COMMON] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  4    0[BANK0 ] long 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  2880 ;;      Params:         0       8       0       0
  2881 ;;      Locals:         2       0       0       0
  2882 ;;      Temps:          1       0       0       0
  2883 ;;      Totals:         3       8       0       0
  2884 ;;Total ram usage:       11 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    1
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_main
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           
  2895                           ;psect for function ___almod
  2896  072E                     ___almod:	
  2897                           
  2898                           ;incstack = 0
  2899                           ; Regs used in ___almod: [wreg+status,2+status,0]
  2900  072E  01F6               	clrf	___almod@sign
  2901  072F  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0730  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0731  1FA7               	btfss	___almod@dividend+3,7
  2904  0732  2F40               	goto	l859
  2905  0733  09A4               	comf	___almod@dividend,f
  2906  0734  09A5               	comf	___almod@dividend+1,f
  2907  0735  09A6               	comf	___almod@dividend+2,f
  2908  0736  09A7               	comf	___almod@dividend+3,f
  2909  0737  0AA4               	incf	___almod@dividend,f
  2910  0738  1903               	skipnz
  2911  0739  0AA5               	incf	___almod@dividend+1,f
  2912  073A  1903               	skipnz
  2913  073B  0AA6               	incf	___almod@dividend+2,f
  2914  073C  1903               	skipnz
  2915  073D  0AA7               	incf	___almod@dividend+3,f
  2916  073E  01F6               	clrf	___almod@sign
  2917  073F  0AF6               	incf	___almod@sign,f
  2918  0740                     l859:	
  2919  0740  1FA3               	btfss	___almod@divisor+3,7
  2920  0741  2F4D               	goto	l2629
  2921  0742  09A0               	comf	___almod@divisor,f
  2922  0743  09A1               	comf	___almod@divisor+1,f
  2923  0744  09A2               	comf	___almod@divisor+2,f
  2924  0745  09A3               	comf	___almod@divisor+3,f
  2925  0746  0AA0               	incf	___almod@divisor,f
  2926  0747  1903               	skipnz
  2927  0748  0AA1               	incf	___almod@divisor+1,f
  2928  0749  1903               	skipnz
  2929  074A  0AA2               	incf	___almod@divisor+2,f
  2930  074B  1903               	skipnz
  2931  074C  0AA3               	incf	___almod@divisor+3,f
  2932  074D                     l2629:	
  2933  074D  0823               	movf	___almod@divisor+3,w
  2934  074E  0422               	iorwf	___almod@divisor+2,w
  2935  074F  0421               	iorwf	___almod@divisor+1,w
  2936  0750  0420               	iorwf	___almod@divisor,w
  2937  0751  1903               	skipnz
  2938  0752  2F90               	goto	l2645
  2939  0753  01F5               	clrf	___almod@counter
  2940  0754  0AF5               	incf	___almod@counter,f
  2941  0755                     l2635:	
  2942  0755  1BA3               	btfsc	___almod@divisor+3,7
  2943  0756  2F65               	goto	l2637
  2944  0757  3001               	movlw	1
  2945  0758  00F4               	movwf	??___almod
  2946  0759                     u3135:	
  2947  0759  1003               	clrc
  2948  075A  0DA0               	rlf	___almod@divisor,f
  2949  075B  0DA1               	rlf	___almod@divisor+1,f
  2950  075C  0DA2               	rlf	___almod@divisor+2,f
  2951  075D  0DA3               	rlf	___almod@divisor+3,f
  2952  075E  0BF4               	decfsz	??___almod,f
  2953  075F  2F59               	goto	u3135
  2954  0760  3001               	movlw	1
  2955  0761  00F4               	movwf	??___almod
  2956  0762  0874               	movf	??___almod,w
  2957  0763  07F5               	addwf	___almod@counter,f
  2958  0764  2F55               	goto	l2635
  2959  0765                     l2637:	
  2960  0765  0823               	movf	___almod@divisor+3,w
  2961  0766  0227               	subwf	___almod@dividend+3,w
  2962  0767  1D03               	skipz
  2963  0768  2F73               	goto	u3155
  2964  0769  0822               	movf	___almod@divisor+2,w
  2965  076A  0226               	subwf	___almod@dividend+2,w
  2966  076B  1D03               	skipz
  2967  076C  2F73               	goto	u3155
  2968  076D  0821               	movf	___almod@divisor+1,w
  2969  076E  0225               	subwf	___almod@dividend+1,w
  2970  076F  1D03               	skipz
  2971  0770  2F73               	goto	u3155
  2972  0771  0820               	movf	___almod@divisor,w
  2973  0772  0224               	subwf	___almod@dividend,w
  2974  0773                     u3155:	
  2975  0773  1C03               	skipc
  2976  0774  2F83               	goto	l2641
  2977  0775  0820               	movf	___almod@divisor,w
  2978  0776  02A4               	subwf	___almod@dividend,f
  2979  0777  0821               	movf	___almod@divisor+1,w
  2980  0778  1C03               	skipc
  2981  0779  0F21               	incfsz	___almod@divisor+1,w
  2982  077A  02A5               	subwf	___almod@dividend+1,f
  2983  077B  0822               	movf	___almod@divisor+2,w
  2984  077C  1C03               	skipc
  2985  077D  0F22               	incfsz	___almod@divisor+2,w
  2986  077E  02A6               	subwf	___almod@dividend+2,f
  2987  077F  0823               	movf	___almod@divisor+3,w
  2988  0780  1C03               	skipc
  2989  0781  0F23               	incfsz	___almod@divisor+3,w
  2990  0782  02A7               	subwf	___almod@dividend+3,f
  2991  0783                     l2641:	
  2992  0783  3001               	movlw	1
  2993  0784                     u3165:	
  2994  0784  1003               	clrc
  2995  0785  0CA3               	rrf	___almod@divisor+3,f
  2996  0786  0CA2               	rrf	___almod@divisor+2,f
  2997  0787  0CA1               	rrf	___almod@divisor+1,f
  2998  0788  0CA0               	rrf	___almod@divisor,f
  2999  0789  3EFF               	addlw	-1
  3000  078A  1D03               	skipz
  3001  078B  2F84               	goto	u3165
  3002  078C  3001               	movlw	1
  3003  078D  02F5               	subwf	___almod@counter,f
  3004  078E  1D03               	btfss	3,2
  3005  078F  2F65               	goto	l2637
  3006  0790                     l2645:	
  3007  0790  0876               	movf	___almod@sign,w
  3008  0791  1903               	btfsc	3,2
  3009  0792  2F9E               	goto	l2649
  3010  0793  09A4               	comf	___almod@dividend,f
  3011  0794  09A5               	comf	___almod@dividend+1,f
  3012  0795  09A6               	comf	___almod@dividend+2,f
  3013  0796  09A7               	comf	___almod@dividend+3,f
  3014  0797  0AA4               	incf	___almod@dividend,f
  3015  0798  1903               	skipnz
  3016  0799  0AA5               	incf	___almod@dividend+1,f
  3017  079A  1903               	skipnz
  3018  079B  0AA6               	incf	___almod@dividend+2,f
  3019  079C  1903               	skipnz
  3020  079D  0AA7               	incf	___almod@dividend+3,f
  3021  079E                     l2649:	
  3022  079E  0827               	movf	___almod@dividend+3,w
  3023  079F  00A3               	movwf	?___almod+3
  3024  07A0  0826               	movf	___almod@dividend+2,w
  3025  07A1  00A2               	movwf	?___almod+2
  3026  07A2  0825               	movf	___almod@dividend+1,w
  3027  07A3  00A1               	movwf	?___almod+1
  3028  07A4  0824               	movf	___almod@dividend,w
  3029  07A5  00A0               	movwf	?___almod
  3030  07A6  0008               	return
  3031  07A7                     __end_of___almod:	
  3032                           
  3033                           	psect	text3
  3034  0D33                     __ptext3:	
  3035 ;; *************** function _ResetTimer *****************
  3036 ;; Defined at:
  3037 ;;		line 80 in file "libs/gsk_algo_funcs.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  3051 ;;      Params:         0       0       0       0
  3052 ;;      Locals:         0       0       0       0
  3053 ;;      Temps:          0       0       0       0
  3054 ;;      Totals:         0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    1
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _ResetTimer
  3067  0D33                     _ResetTimer:	
  3068                           
  3069                           ;gsk_algo_funcs.c: 81: TMR1 = -1000;
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _ResetTimer: [wreg+status,2+status,0]
  3073  0D33  30FC               	movlw	252
  3074  0D34  1283               	bcf	3,5	;RP0=0, select bank0
  3075  0D35  1303               	bcf	3,6	;RP1=0, select bank0
  3076  0D36  008F               	movwf	15	;volatile
  3077  0D37  3018               	movlw	24
  3078  0D38  008E               	movwf	14	;volatile
  3079                           
  3080                           ;gsk_algo_funcs.c: 82: PIR1bits.TMR1IF = 0;
  3081  0D39  100C               	bcf	12,0	;volatile
  3082                           
  3083                           ;gsk_algo_funcs.c: 83: PIE1bits.TMR1IE = 1;
  3084  0D3A  1683               	bsf	3,5	;RP0=1, select bank1
  3085  0D3B  1303               	bcf	3,6	;RP1=0, select bank1
  3086  0D3C  140C               	bsf	12,0	;volatile
  3087                           
  3088                           ;gsk_algo_funcs.c: 84: INTCONbits.PEIE = 1;
  3089  0D3D  170B               	bsf	11,6	;volatile
  3090                           
  3091                           ;gsk_algo_funcs.c: 85: INTCONbits.GIE = 1;
  3092  0D3E  178B               	bsf	11,7	;volatile
  3093                           
  3094                           ;gsk_algo_funcs.c: 86: T1CONbits.TMR1ON = 1;
  3095  0D3F  1283               	bcf	3,5	;RP0=0, select bank0
  3096  0D40  1303               	bcf	3,6	;RP1=0, select bank0
  3097  0D41  1410               	bsf	16,0	;volatile
  3098                           
  3099                           ;gsk_algo_funcs.c: 87: T1CONbits.TMR1CS = 0;
  3100  0D42  1090               	bcf	16,1	;volatile
  3101                           
  3102                           ;gsk_algo_funcs.c: 88: T1CONbits.T1CKPS = 0x0;
  3103  0D43  30CF               	movlw	-49
  3104  0D44  0590               	andwf	16,f	;volatile
  3105  0D45  0008               	return
  3106  0D46                     __end_of_ResetTimer:	
  3107                           
  3108                           	psect	text4
  3109  04A4                     __ptext4:	
  3110 ;; *************** function _ReadVars *****************
  3111 ;; Defined at:
  3112 ;;		line 8 in file "libs/eeprom.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  i               1   21[BANK0 ] unsigned char 
  3117 ;;  j               1   20[BANK0 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;                  1    wreg      void 
  3120 ;; Registers used:
  3121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  3127 ;;      Params:         0       0       0       0
  3128 ;;      Locals:         0       2       0       0
  3129 ;;      Temps:          0      18       0       0
  3130 ;;      Totals:         0      20       0       0
  3131 ;;Total ram usage:       20 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    2
  3134 ;; This function calls:
  3135 ;;		___bmul
  3136 ;;		_eeprom_read
  3137 ;; This function is called by:
  3138 ;;		_main
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           
  3143                           ;psect for function _ReadVars
  3144  04A4                     _ReadVars:	
  3145                           
  3146                           ;eeprom.c: 9: C_D = eeprom_read(0xA6);
  3147                           
  3148                           ;incstack = 0
  3149                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3150  04A4  30A6               	movlw	166
  3151  04A5  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3152  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  3153  04AB  1303               	bcf	3,6	;RP1=0, select bank0
  3154  04AC  00A2               	movwf	??_ReadVars
  3155  04AD  0822               	movf	??_ReadVars,w
  3156  04AE  1283               	bcf	3,5	;RP0=0, select bank2
  3157  04AF  1703               	bsf	3,6	;RP1=1, select bank2
  3158  04B0  00EF               	movwf	111	;volatile
  3159                           
  3160                           ;eeprom.c: 15: UINT8 i, j;
  3161                           ;eeprom.c: 16: for (i=0; i<4; i++)
  3162  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  3163  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  3164  04B3  01B5               	clrf	ReadVars@i
  3165  04B4  3004               	movlw	4
  3166  04B5  0235               	subwf	ReadVars@i,w
  3167  04B6  1803               	btfsc	3,0
  3168  04B7  2CD0               	goto	l3099
  3169  04B8                     l3093:	
  3170                           
  3171                           ;eeprom.c: 17: AUDIO.v[i] = eeprom_read(0x9F+i);
  3172  04B8  0835               	movf	ReadVars@i,w
  3173  04B9  3E9F               	addlw	159
  3174  04BA  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3175  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  3176  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  3177  04C1  00A2               	movwf	??_ReadVars
  3178  04C2  0835               	movf	ReadVars@i,w
  3179  04C3  3E67               	addlw	103
  3180  04C4  0084               	movwf	4
  3181  04C5  0822               	movf	??_ReadVars,w
  3182  04C6  1783               	bsf	3,7	;select IRP bank2
  3183  04C7  0080               	movwf	0
  3184  04C8  3001               	movlw	1
  3185  04C9  00A2               	movwf	??_ReadVars
  3186  04CA  0822               	movf	??_ReadVars,w
  3187  04CB  07B5               	addwf	ReadVars@i,f
  3188  04CC  3004               	movlw	4
  3189  04CD  0235               	subwf	ReadVars@i,w
  3190  04CE  1C03               	skipc
  3191  04CF  2CB8               	goto	l3093
  3192  04D0                     l3099:	
  3193                           
  3194                           ;eeprom.c: 18: for (i = 0; i<3; i++) {
  3195  04D0  01B5               	clrf	ReadVars@i
  3196  04D1  3003               	movlw	3
  3197  04D2  0235               	subwf	ReadVars@i,w
  3198  04D3  1803               	btfsc	3,0
  3199  04D4  2D84               	goto	l3113
  3200  04D5                     l3105:	
  3201                           
  3202                           ;eeprom.c: 19: C[i] = (uint32_t) eeprom_read(0x96 + 3*i)*256*256
  3203                           ;eeprom.c: 20: + (uint16_t) eeprom_read(0x96 + 1 + 3*i)*256
  3204                           ;eeprom.c: 21: + eeprom_read(0x96 + 2 + 3*i);
  3205  04D5  3003               	movlw	3
  3206  04D6  00A2               	movwf	??_ReadVars
  3207  04D7  0822               	movf	??_ReadVars,w
  3208  04D8  00F4               	movwf	___bmul@multiplicand
  3209  04D9  0835               	movf	ReadVars@i,w
  3210  04DA  120A  158A  2520  120A  118A  	fcall	___bmul
  3211  04DF  3E98               	addlw	152
  3212  04E0  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3213  04E5  1283               	bcf	3,5	;RP0=0, select bank0
  3214  04E6  1303               	bcf	3,6	;RP1=0, select bank0
  3215  04E7  00A3               	movwf	??_ReadVars+1
  3216  04E8  01A4               	clrf	??_ReadVars+2
  3217  04E9  01A5               	clrf	??_ReadVars+3
  3218  04EA  01A6               	clrf	??_ReadVars+4
  3219  04EB  3003               	movlw	3
  3220  04EC  00A7               	movwf	??_ReadVars+5
  3221  04ED  0827               	movf	??_ReadVars+5,w
  3222  04EE  00F4               	movwf	___bmul@multiplicand
  3223  04EF  0835               	movf	ReadVars@i,w
  3224  04F0  120A  158A  2520  120A  118A  	fcall	___bmul
  3225  04F5  3E97               	addlw	151
  3226  04F6  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3227  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3228  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3229  04FD  00A8               	movwf	??_ReadVars+6
  3230  04FE  01A9               	clrf	??_ReadVars+7
  3231  04FF  0828               	movf	??_ReadVars+6,w
  3232  0500  00A9               	movwf	??_ReadVars+7
  3233  0501  01A8               	clrf	??_ReadVars+6
  3234  0502  0828               	movf	??_ReadVars+6,w
  3235  0503  00AA               	movwf	??_ReadVars+8
  3236  0504  0829               	movf	??_ReadVars+7,w
  3237  0505  00AB               	movwf	??_ReadVars+9
  3238  0506  01AC               	clrf	??_ReadVars+10
  3239  0507  01AD               	clrf	??_ReadVars+11
  3240  0508  3003               	movlw	3
  3241  0509  00AE               	movwf	??_ReadVars+12
  3242  050A  082E               	movf	??_ReadVars+12,w
  3243  050B  00F4               	movwf	___bmul@multiplicand
  3244  050C  0835               	movf	ReadVars@i,w
  3245  050D  120A  158A  2520  120A  118A  	fcall	___bmul
  3246  0512  3E96               	addlw	150
  3247  0513  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3248  0518  1283               	bcf	3,5	;RP0=0, select bank0
  3249  0519  1303               	bcf	3,6	;RP1=0, select bank0
  3250  051A  00AF               	movwf	??_ReadVars+13
  3251  051B  01B0               	clrf	??_ReadVars+14
  3252  051C  01B1               	clrf	??_ReadVars+15
  3253  051D  01B2               	clrf	??_ReadVars+16
  3254  051E  3008               	movlw	8
  3255  051F                     u4145:	
  3256  051F  1003               	clrc
  3257  0520  0DAF               	rlf	??_ReadVars+13,f
  3258  0521  0DB0               	rlf	??_ReadVars+14,f
  3259  0522  0DB1               	rlf	??_ReadVars+15,f
  3260  0523  0DB2               	rlf	??_ReadVars+16,f
  3261  0524  3EFF               	addlw	-1
  3262  0525  1D03               	skipz
  3263  0526  2D1F               	goto	u4145
  3264  0527  3008               	movlw	8
  3265  0528                     u4155:	
  3266  0528  1003               	clrc
  3267  0529  0DAF               	rlf	??_ReadVars+13,f
  3268  052A  0DB0               	rlf	??_ReadVars+14,f
  3269  052B  0DB1               	rlf	??_ReadVars+15,f
  3270  052C  0DB2               	rlf	??_ReadVars+16,f
  3271  052D  3EFF               	addlw	-1
  3272  052E  1D03               	skipz
  3273  052F  2D28               	goto	u4155
  3274  0530  082F               	movf	??_ReadVars+13,w
  3275  0531  07AA               	addwf	??_ReadVars+8,f
  3276  0532  0830               	movf	??_ReadVars+14,w
  3277  0533  1803               	skipnc
  3278  0534  0F30               	incfsz	??_ReadVars+14,w
  3279  0535  2D37               	goto	u4160
  3280  0536  2D38               	goto	u4161
  3281  0537                     u4160:	
  3282  0537  07AB               	addwf	??_ReadVars+9,f
  3283  0538                     u4161:	
  3284  0538  0831               	movf	??_ReadVars+15,w
  3285  0539  1803               	skipnc
  3286  053A  0F31               	incfsz	??_ReadVars+15,w
  3287  053B  2D3D               	goto	u4162
  3288  053C  2D3E               	goto	u4163
  3289  053D                     u4162:	
  3290  053D  07AC               	addwf	??_ReadVars+10,f
  3291  053E                     u4163:	
  3292  053E  0832               	movf	??_ReadVars+16,w
  3293  053F  1803               	skipnc
  3294  0540  0A32               	incf	??_ReadVars+16,w
  3295  0541  07AD               	addwf	??_ReadVars+11,f
  3296  0542  082A               	movf	??_ReadVars+8,w
  3297  0543  07A3               	addwf	??_ReadVars+1,f
  3298  0544  082B               	movf	??_ReadVars+9,w
  3299  0545  1803               	skipnc
  3300  0546  0F2B               	incfsz	??_ReadVars+9,w
  3301  0547  2D49               	goto	u4170
  3302  0548  2D4A               	goto	u4171
  3303  0549                     u4170:	
  3304  0549  07A4               	addwf	??_ReadVars+2,f
  3305  054A                     u4171:	
  3306  054A  082C               	movf	??_ReadVars+10,w
  3307  054B  1803               	skipnc
  3308  054C  0F2C               	incfsz	??_ReadVars+10,w
  3309  054D  2D4F               	goto	u4172
  3310  054E  2D50               	goto	u4173
  3311  054F                     u4172:	
  3312  054F  07A5               	addwf	??_ReadVars+3,f
  3313  0550                     u4173:	
  3314  0550  082D               	movf	??_ReadVars+11,w
  3315  0551  1803               	skipnc
  3316  0552  0A2D               	incf	??_ReadVars+11,w
  3317  0553  07A6               	addwf	??_ReadVars+4,f
  3318  0554  0835               	movf	ReadVars@i,w
  3319  0555  00B3               	movwf	??_ReadVars+17
  3320  0556  3001               	movlw	1
  3321  0557                     u4185:	
  3322  0557  1003               	clrc
  3323  0558  0DB3               	rlf	??_ReadVars+17,f
  3324  0559  3EFF               	addlw	-1
  3325  055A  1D03               	skipz
  3326  055B  2D57               	goto	u4185
  3327  055C  1003               	clrc
  3328  055D  0D33               	rlf	??_ReadVars+17,w
  3329  055E  3E4C               	addlw	76
  3330  055F  0084               	movwf	4
  3331  0560  0823               	movf	??_ReadVars+1,w
  3332  0561  1783               	bsf	3,7	;select IRP bank2
  3333  0562  0080               	movwf	0
  3334  0563  0A84               	incf	4,f
  3335  0564  0824               	movf	??_ReadVars+2,w
  3336  0565  0080               	movwf	0
  3337  0566  0A84               	incf	4,f
  3338  0567  0825               	movf	??_ReadVars+3,w
  3339  0568  0080               	movwf	0
  3340  0569  0A84               	incf	4,f
  3341  056A  0826               	movf	??_ReadVars+4,w
  3342  056B  0080               	movwf	0
  3343                           
  3344                           ;eeprom.c: 22: STATE_BREAKS[i] = eeprom_read(0xA3+i);
  3345  056C  0835               	movf	ReadVars@i,w
  3346  056D  3EA3               	addlw	163
  3347  056E  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3348  0573  1283               	bcf	3,5	;RP0=0, select bank0
  3349  0574  1303               	bcf	3,6	;RP1=0, select bank0
  3350  0575  00A2               	movwf	??_ReadVars
  3351  0576  0835               	movf	ReadVars@i,w
  3352  0577  3E64               	addlw	100
  3353  0578  0084               	movwf	4
  3354  0579  0822               	movf	??_ReadVars,w
  3355  057A  1783               	bsf	3,7	;select IRP bank2
  3356  057B  0080               	movwf	0
  3357  057C  3001               	movlw	1
  3358  057D  00A2               	movwf	??_ReadVars
  3359  057E  0822               	movf	??_ReadVars,w
  3360  057F  07B5               	addwf	ReadVars@i,f
  3361  0580  3003               	movlw	3
  3362  0581  0235               	subwf	ReadVars@i,w
  3363  0582  1C03               	skipc
  3364  0583  2CD5               	goto	l3105
  3365  0584                     l3113:	
  3366                           
  3367                           ;eeprom.c: 23: }
  3368                           ;eeprom.c: 24: for (i = 0; i<30; i++) {
  3369  0584  01B5               	clrf	ReadVars@i
  3370  0585                     L4:	
  3371  0585  301E               	movlw	30
  3372  0586  0235               	subwf	ReadVars@i,w
  3373  0587  1803               	btfsc	3,0
  3374  0588  0008               	return
  3375                           
  3376                           ;eeprom.c: 25: STATE_PERIODS[i] = eeprom_read(0x00
  3377                           ;eeprom.c: 26: + i*(1 + 2*2));
  3378  0589  3005               	movlw	5
  3379  058A  00A2               	movwf	??_ReadVars
  3380  058B  0822               	movf	??_ReadVars,w
  3381  058C  00F4               	movwf	___bmul@multiplicand
  3382  058D  0835               	movf	ReadVars@i,w
  3383  058E  120A  158A  2520  120A  118A  	fcall	___bmul
  3384  0593  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3385  0598  1283               	bcf	3,5	;RP0=0, select bank0
  3386  0599  1303               	bcf	3,6	;RP1=0, select bank0
  3387  059A  00A3               	movwf	??_ReadVars+1
  3388  059B  0835               	movf	ReadVars@i,w
  3389  059C  3E90               	addlw	144
  3390  059D  0084               	movwf	4
  3391  059E  0823               	movf	??_ReadVars+1,w
  3392  059F  1783               	bsf	3,7	;select IRP bank3
  3393  05A0  0080               	movwf	0
  3394                           
  3395                           ;eeprom.c: 27: for (j = 0; j<2; j++) {
  3396  05A1  01B4               	clrf	ReadVars@j
  3397  05A2  3002               	movlw	2
  3398  05A3  0234               	subwf	ReadVars@j,w
  3399  05A4  1803               	btfsc	3,0
  3400  05A5  2E00               	goto	l3133
  3401  05A6                     l3127:	
  3402                           
  3403                           ;eeprom.c: 28: STATE_1[i][j] = eeprom_read(0x00
  3404                           ;eeprom.c: 29: + i*(1 + 2*2)
  3405                           ;eeprom.c: 30: + (1 + j));
  3406  05A6  3005               	movlw	5
  3407  05A7  00A2               	movwf	??_ReadVars
  3408  05A8  0822               	movf	??_ReadVars,w
  3409  05A9  00F4               	movwf	___bmul@multiplicand
  3410  05AA  0835               	movf	ReadVars@i,w
  3411  05AB  120A  158A  2520  120A  118A  	fcall	___bmul
  3412  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3413  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3414  05B2  0734               	addwf	ReadVars@j,w
  3415  05B3  3E01               	addlw	1
  3416  05B4  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3417  05B9  1283               	bcf	3,5	;RP0=0, select bank0
  3418  05BA  1303               	bcf	3,6	;RP1=0, select bank0
  3419  05BB  00A3               	movwf	??_ReadVars+1
  3420  05BC  0835               	movf	ReadVars@i,w
  3421  05BD  00A4               	movwf	??_ReadVars+2
  3422  05BE  3001               	movlw	1
  3423  05BF                     u4225:	
  3424  05BF  1003               	clrc
  3425  05C0  0DA4               	rlf	??_ReadVars+2,f
  3426  05C1  3EFF               	addlw	-1
  3427  05C2  1D03               	skipz
  3428  05C3  2DBF               	goto	u4225
  3429  05C4  30AE               	movlw	174
  3430  05C5  0724               	addwf	??_ReadVars+2,w
  3431  05C6  00A5               	movwf	??_ReadVars+3
  3432  05C7  0834               	movf	ReadVars@j,w
  3433  05C8  0725               	addwf	??_ReadVars+3,w
  3434  05C9  00A6               	movwf	??_ReadVars+4
  3435  05CA  0826               	movf	??_ReadVars+4,w
  3436  05CB  0084               	movwf	4
  3437  05CC  0823               	movf	??_ReadVars+1,w
  3438  05CD  1783               	bsf	3,7	;select IRP bank3
  3439  05CE  0080               	movwf	0
  3440                           
  3441                           ;eeprom.c: 31: STATE_2[i][j] = eeprom_read(0x00
  3442                           ;eeprom.c: 32: + i*(1 + 2*2)
  3443                           ;eeprom.c: 33: + (3 + j));
  3444  05CF  3005               	movlw	5
  3445  05D0  00A2               	movwf	??_ReadVars
  3446  05D1  0822               	movf	??_ReadVars,w
  3447  05D2  00F4               	movwf	___bmul@multiplicand
  3448  05D3  0835               	movf	ReadVars@i,w
  3449  05D4  120A  158A  2520  120A  118A  	fcall	___bmul
  3450  05D9  1283               	bcf	3,5	;RP0=0, select bank0
  3451  05DA  1303               	bcf	3,6	;RP1=0, select bank0
  3452  05DB  0734               	addwf	ReadVars@j,w
  3453  05DC  3E03               	addlw	3
  3454  05DD  120A  158A  255A  120A  118A  	fcall	_eeprom_read
  3455  05E2  1283               	bcf	3,5	;RP0=0, select bank0
  3456  05E3  1303               	bcf	3,6	;RP1=0, select bank0
  3457  05E4  00A3               	movwf	??_ReadVars+1
  3458  05E5  0835               	movf	ReadVars@i,w
  3459  05E6  00A4               	movwf	??_ReadVars+2
  3460  05E7  3001               	movlw	1
  3461  05E8                     u4235:	
  3462  05E8  1003               	clrc
  3463  05E9  0DA4               	rlf	??_ReadVars+2,f
  3464  05EA  3EFF               	addlw	-1
  3465  05EB  1D03               	skipz
  3466  05EC  2DE8               	goto	u4235
  3467  05ED  3010               	movlw	16
  3468  05EE  0724               	addwf	??_ReadVars+2,w
  3469  05EF  00A5               	movwf	??_ReadVars+3
  3470  05F0  0834               	movf	ReadVars@j,w
  3471  05F1  0725               	addwf	??_ReadVars+3,w
  3472  05F2  00A6               	movwf	??_ReadVars+4
  3473  05F3  0826               	movf	??_ReadVars+4,w
  3474  05F4  0084               	movwf	4
  3475  05F5  0823               	movf	??_ReadVars+1,w
  3476  05F6  1783               	bsf	3,7	;select IRP bank2
  3477  05F7  0080               	movwf	0
  3478  05F8  3001               	movlw	1
  3479  05F9  00A2               	movwf	??_ReadVars
  3480  05FA  0822               	movf	??_ReadVars,w
  3481  05FB  07B4               	addwf	ReadVars@j,f
  3482  05FC  3002               	movlw	2
  3483  05FD  0234               	subwf	ReadVars@j,w
  3484  05FE  1C03               	skipc
  3485  05FF  2DA6               	goto	l3127
  3486  0600                     l3133:	
  3487  0600  3001               	movlw	1
  3488  0601  00A2               	movwf	??_ReadVars
  3489  0602  0822               	movf	??_ReadVars,w
  3490  0603  07B5               	addwf	ReadVars@i,f
  3491  0604  2D85               	goto	L4
  3492  0605                     __end_of_ReadVars:	
  3493                           
  3494                           	psect	text5
  3495  0D5A                     __ptext5:	
  3496 ;; *************** function _eeprom_read *****************
  3497 ;; Defined at:
  3498 ;;		line 6 in file "/opt/microchip/xc8/v1.42/sources/pic/eeread.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  addr            1    wreg     unsigned char 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  addr            1    5[COMMON] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      unsigned char 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  3512 ;;      Params:         0       0       0       0
  3513 ;;      Locals:         1       0       0       0
  3514 ;;      Temps:          1       0       0       0
  3515 ;;      Totals:         2       0       0       0
  3516 ;;Total ram usage:        2 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    1
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_ReadVars
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           
  3527                           ;psect for function _eeprom_read
  3528  0D5A                     _eeprom_read:	
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  3532                           ;eeprom_read@addr stored from wreg
  3533  0D5A  00F5               	movwf	eeprom_read@addr
  3534  0D5B                     l705:	
  3535  0D5B  0064               	clrwdt	;# 
  3536  0D5C  1683               	bsf	3,5	;RP0=1, select bank3
  3537  0D5D  1703               	bsf	3,6	;RP1=1, select bank3
  3538  0D5E  188C               	btfsc	12,1	;volsfr
  3539  0D5F  2D5B               	goto	l705
  3540  0D60  0875               	movf	eeprom_read@addr,w
  3541  0D61  1283               	bcf	3,5	;RP0=0, select bank2
  3542  0D62  1703               	bsf	3,6	;RP1=1, select bank2
  3543  0D63  008D               	movwf	13	;volatile
  3544  0D64  303F               	movlw	63
  3545  0D65  00F4               	movwf	??_eeprom_read
  3546  0D66  0874               	movf	??_eeprom_read,w
  3547  0D67  1683               	bsf	3,5	;RP0=1, select bank3
  3548  0D68  1703               	bsf	3,6	;RP1=1, select bank3
  3549  0D69  058C               	andwf	12,f	;volsfr
  3550  0D6A  140C               	bsf	12,0	;volsfr
  3551  0D6B  1003               	clrc
  3552  0D6C  180C               	btfsc	12,0	;volsfr
  3553  0D6D  1403               	setc
  3554  0D6E  3000               	movlw	0
  3555  0D6F  1803               	skipnc
  3556  0D70  3001               	movlw	1
  3557  0D71  1283               	bcf	3,5	;RP0=0, select bank2
  3558  0D72  1703               	bsf	3,6	;RP1=1, select bank2
  3559  0D73  080C               	movf	12,w	;volatile
  3560  0D74  0008               	return
  3561  0D75                     __end_of_eeprom_read:	
  3562                           
  3563                           	psect	text6
  3564  0D20                     __ptext6:	
  3565 ;; *************** function ___bmul *****************
  3566 ;; Defined at:
  3567 ;;		line 4 in file "/opt/microchip/xc8/v1.42/sources/common/Umul8.c"
  3568 ;; Parameters:    Size  Location     Type
  3569 ;;  multiplier      1    wreg     unsigned char 
  3570 ;;  multiplicand    1    4[COMMON] unsigned char 
  3571 ;; Auto vars:     Size  Location     Type
  3572 ;;  multiplier      1    1[BANK0 ] unsigned char 
  3573 ;;  product         1    0[BANK0 ] unsigned char 
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      unsigned char 
  3576 ;; Registers used:
  3577 ;;		wreg, status,2, status,0
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  3583 ;;      Params:         1       0       0       0
  3584 ;;      Locals:         0       2       0       0
  3585 ;;      Temps:          1       0       0       0
  3586 ;;      Totals:         2       2       0       0
  3587 ;;Total ram usage:        4 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    1
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_ReadVars
  3594 ;;		_Lcd_Int
  3595 ;;		_WriteLongInt
  3596 ;;		_SetOSCTRIM
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           
  3601                           ;psect for function ___bmul
  3602  0D20                     ___bmul:	
  3603                           
  3604                           ;incstack = 0
  3605                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3606                           ;___bmul@multiplier stored from wreg
  3607  0D20  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0D21  1303               	bcf	3,6	;RP1=0, select bank0
  3609  0D22  00A1               	movwf	___bmul@multiplier
  3610  0D23  01A0               	clrf	___bmul@product
  3611  0D24                     l3039:	
  3612  0D24  1C21               	btfss	___bmul@multiplier,0
  3613  0D25  2D2A               	goto	l3043
  3614  0D26  0874               	movf	___bmul@multiplicand,w
  3615  0D27  00F5               	movwf	??___bmul
  3616  0D28  0875               	movf	??___bmul,w
  3617  0D29  07A0               	addwf	___bmul@product,f
  3618  0D2A                     l3043:	
  3619  0D2A  1003               	clrc
  3620  0D2B  0DF4               	rlf	___bmul@multiplicand,f
  3621  0D2C  1003               	clrc
  3622  0D2D  0CA1               	rrf	___bmul@multiplier,f
  3623  0D2E  0821               	movf	___bmul@multiplier,w
  3624  0D2F  1D03               	btfss	3,2
  3625  0D30  2D24               	goto	l3039
  3626  0D31  0820               	movf	___bmul@product,w
  3627  0D32  0008               	return
  3628  0D33                     __end_of___bmul:	
  3629                           
  3630                           	psect	text7
  3631  0605                     __ptext7:	
  3632 ;; *************** function _ReadGPSToS *****************
  3633 ;; Defined at:
  3634 ;;		line 137 in file "libs/gsk_usart.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  TimeOut         1    wreg     unsigned char 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  TimeOut         1   22[BANK0 ] unsigned char 
  3639 ;;  Output          6   23[BANK0 ] unsigned char [6]
  3640 ;;  Sec             4   29[BANK0 ] long 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  4   12[BANK0 ] long 
  3643 ;; Registers used:
  3644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  3650 ;;      Params:         0       4       0       0
  3651 ;;      Locals:         0      11       0       0
  3652 ;;      Temps:          0       6       0       0
  3653 ;;      Totals:         0      21       0       0
  3654 ;;Total ram usage:       21 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    4
  3657 ;; This function calls:
  3658 ;;		_UART_ReadValidTimeFromGPS_TO
  3659 ;;		___lmul
  3660 ;; This function is called by:
  3661 ;;		_main
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _ReadGPSToS
  3667  0605                     _ReadGPSToS:	
  3668                           
  3669                           ;incstack = 0
  3670                           ; Regs used in _ReadGPSToS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3671                           ;ReadGPSToS@TimeOut stored from wreg
  3672  0605  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0606  1303               	bcf	3,6	;RP1=0, select bank0
  3674  0607  00B6               	movwf	ReadGPSToS@TimeOut
  3675                           
  3676                           ;gsk_usart.c: 138: INT32 Sec;
  3677                           ;gsk_usart.c: 139: char Output[6];
  3678                           ;gsk_usart.c: 140: if (UART_ReadValidTimeFromGPS_TO(Output, TimeOut)) {
  3679  0608  0836               	movf	ReadGPSToS@TimeOut,w
  3680  0609  00B0               	movwf	??_ReadGPSToS
  3681  060A  0830               	movf	??_ReadGPSToS,w
  3682  060B  00F6               	movwf	UART_ReadValidTimeFromGPS_TO@TimeOut
  3683  060C  3037               	movlw	(low (ReadGPSToS@Output| 0))& (0+255)
  3684  060D  120A  158A  2546  120A  118A  	fcall	_UART_ReadValidTimeFromGPS_TO
  3685  0612  3A00               	xorlw	0
  3686  0613  1903               	skipnz
  3687  0614  2F23               	goto	l3207
  3688                           
  3689                           ;gsk_usart.c: 141: Sec = (INT32)(Output[0] - 0x30)*10*60*60;
  3690  0615  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0616  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0617  0837               	movf	ReadGPSToS@Output,w
  3693  0618  3ED0               	addlw	208
  3694  0619  00A0               	movwf	___lmul@multiplier
  3695  061A  30FF               	movlw	255
  3696  061B  1803               	skipnc
  3697  061C  3000               	movlw	0
  3698  061D  00A1               	movwf	___lmul@multiplier+1
  3699  061E  01A2               	clrf	___lmul@multiplier+2
  3700  061F  1BA1               	btfsc	___lmul@multiplier+1,7
  3701  0620  03A2               	decf	___lmul@multiplier+2,f
  3702  0621  0822               	movf	___lmul@multiplier+2,w
  3703  0622  00A3               	movwf	___lmul@multiplier+3
  3704  0623  3000               	movlw	0
  3705  0624  00A7               	movwf	___lmul@multiplicand+3
  3706  0625  3000               	movlw	0
  3707  0626  00A6               	movwf	___lmul@multiplicand+2
  3708  0627  308C               	movlw	140
  3709  0628  00A5               	movwf	___lmul@multiplicand+1
  3710  0629  30A0               	movlw	160
  3711  062A  00A4               	movwf	___lmul@multiplicand
  3712  062B  120A  158A  2591  120A  118A  	fcall	___lmul
  3713  0630  1283               	bcf	3,5	;RP0=0, select bank0
  3714  0631  1303               	bcf	3,6	;RP1=0, select bank0
  3715  0632  0823               	movf	?___lmul+3,w
  3716  0633  00C0               	movwf	ReadGPSToS@Sec+3
  3717  0634  0822               	movf	?___lmul+2,w
  3718  0635  00BF               	movwf	ReadGPSToS@Sec+2
  3719  0636  0821               	movf	?___lmul+1,w
  3720  0637  00BE               	movwf	ReadGPSToS@Sec+1
  3721  0638  0820               	movf	?___lmul,w
  3722  0639  00BD               	movwf	ReadGPSToS@Sec
  3723                           
  3724                           ;gsk_usart.c: 142: Sec += (INT32)(Output[1] - 0x30)*1*60*60;
  3725  063A  0838               	movf	ReadGPSToS@Output+1,w
  3726  063B  3ED0               	addlw	208
  3727  063C  00A0               	movwf	___lmul@multiplier
  3728  063D  30FF               	movlw	255
  3729  063E  1803               	skipnc
  3730  063F  3000               	movlw	0
  3731  0640  00A1               	movwf	___lmul@multiplier+1
  3732  0641  01A2               	clrf	___lmul@multiplier+2
  3733  0642  1BA1               	btfsc	___lmul@multiplier+1,7
  3734  0643  03A2               	decf	___lmul@multiplier+2,f
  3735  0644  0822               	movf	___lmul@multiplier+2,w
  3736  0645  00A3               	movwf	___lmul@multiplier+3
  3737  0646  3000               	movlw	0
  3738  0647  00A7               	movwf	___lmul@multiplicand+3
  3739  0648  3000               	movlw	0
  3740  0649  00A6               	movwf	___lmul@multiplicand+2
  3741  064A  300E               	movlw	14
  3742  064B  00A5               	movwf	___lmul@multiplicand+1
  3743  064C  3010               	movlw	16
  3744  064D  00A4               	movwf	___lmul@multiplicand
  3745  064E  120A  158A  2591  120A  118A  	fcall	___lmul
  3746  0653  1283               	bcf	3,5	;RP0=0, select bank0
  3747  0654  1303               	bcf	3,6	;RP1=0, select bank0
  3748  0655  0820               	movf	?___lmul,w
  3749  0656  07BD               	addwf	ReadGPSToS@Sec,f
  3750  0657  0821               	movf	?___lmul+1,w
  3751  0658  1103               	clrz
  3752  0659  1803               	skipnc
  3753  065A  3E01               	addlw	1
  3754  065B  1D03               	btfss	3,2
  3755  065C  07BE               	addwf	ReadGPSToS@Sec+1,f
  3756  065D  0822               	movf	?___lmul+2,w
  3757  065E  1103               	clrz
  3758  065F  1803               	skipnc
  3759  0660  3E01               	addlw	1
  3760  0661  1D03               	btfss	3,2
  3761  0662  07BF               	addwf	ReadGPSToS@Sec+2,f
  3762  0663  0823               	movf	?___lmul+3,w
  3763  0664  1103               	clrz
  3764  0665  1803               	skipnc
  3765  0666  3E01               	addlw	1
  3766  0667  1D03               	btfss	3,2
  3767  0668  07C0               	addwf	ReadGPSToS@Sec+3,f
  3768                           
  3769                           ;gsk_usart.c: 143: Sec += (INT32)(Output[2] - 0x30)*10*60;
  3770  0669  0839               	movf	ReadGPSToS@Output+2,w
  3771  066A  3ED0               	addlw	208
  3772  066B  00A0               	movwf	___lmul@multiplier
  3773  066C  30FF               	movlw	255
  3774  066D  1803               	skipnc
  3775  066E  3000               	movlw	0
  3776  066F  00A1               	movwf	___lmul@multiplier+1
  3777  0670  01A2               	clrf	___lmul@multiplier+2
  3778  0671  1BA1               	btfsc	___lmul@multiplier+1,7
  3779  0672  03A2               	decf	___lmul@multiplier+2,f
  3780  0673  0822               	movf	___lmul@multiplier+2,w
  3781  0674  00A3               	movwf	___lmul@multiplier+3
  3782  0675  3000               	movlw	0
  3783  0676  00A7               	movwf	___lmul@multiplicand+3
  3784  0677  3000               	movlw	0
  3785  0678  00A6               	movwf	___lmul@multiplicand+2
  3786  0679  3002               	movlw	2
  3787  067A  00A5               	movwf	___lmul@multiplicand+1
  3788  067B  3058               	movlw	88
  3789  067C  00A4               	movwf	___lmul@multiplicand
  3790  067D  120A  158A  2591  120A  118A  	fcall	___lmul
  3791  0682  1283               	bcf	3,5	;RP0=0, select bank0
  3792  0683  1303               	bcf	3,6	;RP1=0, select bank0
  3793  0684  0820               	movf	?___lmul,w
  3794  0685  07BD               	addwf	ReadGPSToS@Sec,f
  3795  0686  0821               	movf	?___lmul+1,w
  3796  0687  1103               	clrz
  3797  0688  1803               	skipnc
  3798  0689  3E01               	addlw	1
  3799  068A  1D03               	btfss	3,2
  3800  068B  07BE               	addwf	ReadGPSToS@Sec+1,f
  3801  068C  0822               	movf	?___lmul+2,w
  3802  068D  1103               	clrz
  3803  068E  1803               	skipnc
  3804  068F  3E01               	addlw	1
  3805  0690  1D03               	btfss	3,2
  3806  0691  07BF               	addwf	ReadGPSToS@Sec+2,f
  3807  0692  0823               	movf	?___lmul+3,w
  3808  0693  1103               	clrz
  3809  0694  1803               	skipnc
  3810  0695  3E01               	addlw	1
  3811  0696  1D03               	btfss	3,2
  3812  0697  07C0               	addwf	ReadGPSToS@Sec+3,f
  3813                           
  3814                           ;gsk_usart.c: 144: Sec += (INT32)(Output[3] - 0x30)*1*60;
  3815  0698  083A               	movf	ReadGPSToS@Output+3,w
  3816  0699  3ED0               	addlw	208
  3817  069A  00A0               	movwf	___lmul@multiplier
  3818  069B  30FF               	movlw	255
  3819  069C  1803               	skipnc
  3820  069D  3000               	movlw	0
  3821  069E  00A1               	movwf	___lmul@multiplier+1
  3822  069F  01A2               	clrf	___lmul@multiplier+2
  3823  06A0  1BA1               	btfsc	___lmul@multiplier+1,7
  3824  06A1  03A2               	decf	___lmul@multiplier+2,f
  3825  06A2  0822               	movf	___lmul@multiplier+2,w
  3826  06A3  00A3               	movwf	___lmul@multiplier+3
  3827  06A4  3000               	movlw	0
  3828  06A5  00A7               	movwf	___lmul@multiplicand+3
  3829  06A6  3000               	movlw	0
  3830  06A7  00A6               	movwf	___lmul@multiplicand+2
  3831  06A8  3000               	movlw	0
  3832  06A9  00A5               	movwf	___lmul@multiplicand+1
  3833  06AA  303C               	movlw	60
  3834  06AB  00A4               	movwf	___lmul@multiplicand
  3835  06AC  120A  158A  2591  120A  118A  	fcall	___lmul
  3836  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  3837  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  3838  06B3  0820               	movf	?___lmul,w
  3839  06B4  07BD               	addwf	ReadGPSToS@Sec,f
  3840  06B5  0821               	movf	?___lmul+1,w
  3841  06B6  1103               	clrz
  3842  06B7  1803               	skipnc
  3843  06B8  3E01               	addlw	1
  3844  06B9  1D03               	btfss	3,2
  3845  06BA  07BE               	addwf	ReadGPSToS@Sec+1,f
  3846  06BB  0822               	movf	?___lmul+2,w
  3847  06BC  1103               	clrz
  3848  06BD  1803               	skipnc
  3849  06BE  3E01               	addlw	1
  3850  06BF  1D03               	btfss	3,2
  3851  06C0  07BF               	addwf	ReadGPSToS@Sec+2,f
  3852  06C1  0823               	movf	?___lmul+3,w
  3853  06C2  1103               	clrz
  3854  06C3  1803               	skipnc
  3855  06C4  3E01               	addlw	1
  3856  06C5  1D03               	btfss	3,2
  3857  06C6  07C0               	addwf	ReadGPSToS@Sec+3,f
  3858                           
  3859                           ;gsk_usart.c: 145: Sec += (INT32)(Output[4] - 0x30)*10;
  3860  06C7  083B               	movf	ReadGPSToS@Output+4,w
  3861  06C8  3ED0               	addlw	208
  3862  06C9  00A0               	movwf	___lmul@multiplier
  3863  06CA  30FF               	movlw	255
  3864  06CB  1803               	skipnc
  3865  06CC  3000               	movlw	0
  3866  06CD  00A1               	movwf	___lmul@multiplier+1
  3867  06CE  01A2               	clrf	___lmul@multiplier+2
  3868  06CF  1BA1               	btfsc	___lmul@multiplier+1,7
  3869  06D0  03A2               	decf	___lmul@multiplier+2,f
  3870  06D1  0822               	movf	___lmul@multiplier+2,w
  3871  06D2  00A3               	movwf	___lmul@multiplier+3
  3872  06D3  3000               	movlw	0
  3873  06D4  00A7               	movwf	___lmul@multiplicand+3
  3874  06D5  3000               	movlw	0
  3875  06D6  00A6               	movwf	___lmul@multiplicand+2
  3876  06D7  3000               	movlw	0
  3877  06D8  00A5               	movwf	___lmul@multiplicand+1
  3878  06D9  300A               	movlw	10
  3879  06DA  00A4               	movwf	___lmul@multiplicand
  3880  06DB  120A  158A  2591  120A  118A  	fcall	___lmul
  3881  06E0  1283               	bcf	3,5	;RP0=0, select bank0
  3882  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  3883  06E2  0820               	movf	?___lmul,w
  3884  06E3  07BD               	addwf	ReadGPSToS@Sec,f
  3885  06E4  0821               	movf	?___lmul+1,w
  3886  06E5  1103               	clrz
  3887  06E6  1803               	skipnc
  3888  06E7  3E01               	addlw	1
  3889  06E8  1D03               	btfss	3,2
  3890  06E9  07BE               	addwf	ReadGPSToS@Sec+1,f
  3891  06EA  0822               	movf	?___lmul+2,w
  3892  06EB  1103               	clrz
  3893  06EC  1803               	skipnc
  3894  06ED  3E01               	addlw	1
  3895  06EE  1D03               	btfss	3,2
  3896  06EF  07BF               	addwf	ReadGPSToS@Sec+2,f
  3897  06F0  0823               	movf	?___lmul+3,w
  3898  06F1  1103               	clrz
  3899  06F2  1803               	skipnc
  3900  06F3  3E01               	addlw	1
  3901  06F4  1D03               	btfss	3,2
  3902  06F5  07C0               	addwf	ReadGPSToS@Sec+3,f
  3903                           
  3904                           ;gsk_usart.c: 146: Sec += (INT32)(Output[5] - 0x30);
  3905  06F6  083C               	movf	ReadGPSToS@Output+5,w
  3906  06F7  3ED0               	addlw	208
  3907  06F8  00B0               	movwf	??_ReadGPSToS
  3908  06F9  30FF               	movlw	255
  3909  06FA  1803               	skipnc
  3910  06FB  3000               	movlw	0
  3911  06FC  00B1               	movwf	??_ReadGPSToS+1
  3912  06FD  0830               	movf	??_ReadGPSToS,w
  3913  06FE  00B2               	movwf	??_ReadGPSToS+2
  3914  06FF  0831               	movf	??_ReadGPSToS+1,w
  3915  0700  00B3               	movwf	??_ReadGPSToS+3
  3916  0701  3000               	movlw	0
  3917  0702  1BB3               	btfsc	??_ReadGPSToS+3,7
  3918  0703  30FF               	movlw	255
  3919  0704  00B4               	movwf	??_ReadGPSToS+4
  3920  0705  00B5               	movwf	??_ReadGPSToS+5
  3921  0706  0832               	movf	??_ReadGPSToS+2,w
  3922  0707  07BD               	addwf	ReadGPSToS@Sec,f
  3923  0708  0833               	movf	??_ReadGPSToS+3,w
  3924  0709  1103               	clrz
  3925  070A  1803               	skipnc
  3926  070B  3E01               	addlw	1
  3927  070C  1D03               	btfss	3,2
  3928  070D  07BE               	addwf	ReadGPSToS@Sec+1,f
  3929  070E  0834               	movf	??_ReadGPSToS+4,w
  3930  070F  1103               	clrz
  3931  0710  1803               	skipnc
  3932  0711  3E01               	addlw	1
  3933  0712  1D03               	btfss	3,2
  3934  0713  07BF               	addwf	ReadGPSToS@Sec+2,f
  3935  0714  0835               	movf	??_ReadGPSToS+5,w
  3936  0715  1103               	clrz
  3937  0716  1803               	skipnc
  3938  0717  3E01               	addlw	1
  3939  0718  1D03               	btfss	3,2
  3940  0719  07C0               	addwf	ReadGPSToS@Sec+3,f
  3941                           
  3942                           ;gsk_usart.c: 147: return Sec;
  3943  071A  0840               	movf	ReadGPSToS@Sec+3,w
  3944  071B  00AF               	movwf	?_ReadGPSToS+3
  3945  071C  083F               	movf	ReadGPSToS@Sec+2,w
  3946  071D  00AE               	movwf	?_ReadGPSToS+2
  3947  071E  083E               	movf	ReadGPSToS@Sec+1,w
  3948  071F  00AD               	movwf	?_ReadGPSToS+1
  3949  0720  083D               	movf	ReadGPSToS@Sec,w
  3950  0721  00AC               	movwf	?_ReadGPSToS
  3951                           
  3952                           ;gsk_usart.c: 148: } else
  3953  0722  0008               	return
  3954  0723                     l3207:	
  3955                           
  3956                           ;gsk_usart.c: 149: return -1;
  3957  0723  30FF               	movlw	255
  3958  0724  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0725  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0726  00AF               	movwf	?_ReadGPSToS+3
  3961  0727  30FF               	movlw	255
  3962  0728  00AE               	movwf	?_ReadGPSToS+2
  3963  0729  30FF               	movlw	255
  3964  072A  00AD               	movwf	?_ReadGPSToS+1
  3965  072B  30FF               	movlw	255
  3966  072C  00AC               	movwf	?_ReadGPSToS
  3967  072D  0008               	return
  3968  072E                     __end_of_ReadGPSToS:	
  3969                           
  3970                           	psect	text8
  3971  0D91                     __ptext8:	
  3972 ;; *************** function ___lmul *****************
  3973 ;; Defined at:
  3974 ;;		line 15 in file "/opt/microchip/xc8/v1.42/sources/common/Umul32.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3977 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  product         4    8[BANK0 ] unsigned long 
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  4    0[BANK0 ] unsigned long 
  3982 ;; Registers used:
  3983 ;;		wreg, status,2, status,0
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  3989 ;;      Params:         0       8       0       0
  3990 ;;      Locals:         0       4       0       0
  3991 ;;      Temps:          1       0       0       0
  3992 ;;      Totals:         1      12       0       0
  3993 ;;Total ram usage:       13 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    1
  3996 ;; This function calls:
  3997 ;;		Nothing
  3998 ;; This function is called by:
  3999 ;;		_ReadGPSToS
  4000 ;;		_ReadRTCAsSec
  4001 ;;		_GetModValue
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           
  4006                           ;psect for function ___lmul
  4007  0D91                     ___lmul:	
  4008                           
  4009                           ;incstack = 0
  4010                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4011  0D91  3000               	movlw	0
  4012  0D92  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0D93  1303               	bcf	3,6	;RP1=0, select bank0
  4014  0D94  00AB               	movwf	___lmul@product+3
  4015  0D95  3000               	movlw	0
  4016  0D96  00AA               	movwf	___lmul@product+2
  4017  0D97  3000               	movlw	0
  4018  0D98  00A9               	movwf	___lmul@product+1
  4019  0D99  3000               	movlw	0
  4020  0D9A  00A8               	movwf	___lmul@product
  4021  0D9B                     l3025:	
  4022  0D9B  1C20               	btfss	___lmul@multiplier,0
  4023  0D9C  2DB1               	goto	l3029
  4024  0D9D  0824               	movf	___lmul@multiplicand,w
  4025  0D9E  07A8               	addwf	___lmul@product,f
  4026  0D9F  0825               	movf	___lmul@multiplicand+1,w
  4027  0DA0  1103               	clrz
  4028  0DA1  1803               	skipnc
  4029  0DA2  3E01               	addlw	1
  4030  0DA3  1D03               	btfss	3,2
  4031  0DA4  07A9               	addwf	___lmul@product+1,f
  4032  0DA5  0826               	movf	___lmul@multiplicand+2,w
  4033  0DA6  1103               	clrz
  4034  0DA7  1803               	skipnc
  4035  0DA8  3E01               	addlw	1
  4036  0DA9  1D03               	btfss	3,2
  4037  0DAA  07AA               	addwf	___lmul@product+2,f
  4038  0DAB  0827               	movf	___lmul@multiplicand+3,w
  4039  0DAC  1103               	clrz
  4040  0DAD  1803               	skipnc
  4041  0DAE  3E01               	addlw	1
  4042  0DAF  1D03               	btfss	3,2
  4043  0DB0  07AB               	addwf	___lmul@product+3,f
  4044  0DB1                     l3029:	
  4045  0DB1  3001               	movlw	1
  4046  0DB2  00F4               	movwf	??___lmul
  4047  0DB3                     u4015:	
  4048  0DB3  1003               	clrc
  4049  0DB4  0DA4               	rlf	___lmul@multiplicand,f
  4050  0DB5  0DA5               	rlf	___lmul@multiplicand+1,f
  4051  0DB6  0DA6               	rlf	___lmul@multiplicand+2,f
  4052  0DB7  0DA7               	rlf	___lmul@multiplicand+3,f
  4053  0DB8  0BF4               	decfsz	??___lmul,f
  4054  0DB9  2DB3               	goto	u4015
  4055  0DBA  3001               	movlw	1
  4056  0DBB                     u4025:	
  4057  0DBB  1003               	clrc
  4058  0DBC  0CA3               	rrf	___lmul@multiplier+3,f
  4059  0DBD  0CA2               	rrf	___lmul@multiplier+2,f
  4060  0DBE  0CA1               	rrf	___lmul@multiplier+1,f
  4061  0DBF  0CA0               	rrf	___lmul@multiplier,f
  4062  0DC0  3EFF               	addlw	-1
  4063  0DC1  1D03               	skipz
  4064  0DC2  2DBB               	goto	u4025
  4065  0DC3  0823               	movf	___lmul@multiplier+3,w
  4066  0DC4  0422               	iorwf	___lmul@multiplier+2,w
  4067  0DC5  0421               	iorwf	___lmul@multiplier+1,w
  4068  0DC6  0420               	iorwf	___lmul@multiplier,w
  4069  0DC7  1D03               	skipz
  4070  0DC8  2D9B               	goto	l3025
  4071  0DC9  082B               	movf	___lmul@product+3,w
  4072  0DCA  00A3               	movwf	?___lmul+3
  4073  0DCB  082A               	movf	___lmul@product+2,w
  4074  0DCC  00A2               	movwf	?___lmul+2
  4075  0DCD  0829               	movf	___lmul@product+1,w
  4076  0DCE  00A1               	movwf	?___lmul+1
  4077  0DCF  0828               	movf	___lmul@product,w
  4078  0DD0  00A0               	movwf	?___lmul
  4079  0DD1  0008               	return
  4080  0DD2                     __end_of___lmul:	
  4081                           
  4082                           	psect	text9
  4083  0D46                     __ptext9:	
  4084 ;; *************** function _UART_ReadValidTimeFromGPS_TO *****************
  4085 ;; Defined at:
  4086 ;;		line 114 in file "libs/gsk_usart.c"
  4087 ;; Parameters:    Size  Location     Type
  4088 ;;  Output          1    wreg     PTR unsigned char 
  4089 ;;		 -> ReadGPSToS@Output(6), 
  4090 ;;  TimeOut         1    6[COMMON] unsigned char 
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  Output          1    8[BANK0 ] PTR unsigned char 
  4093 ;;		 -> ReadGPSToS@Output(6), 
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      unsigned char 
  4096 ;; Registers used:
  4097 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  4103 ;;      Params:         1       0       0       0
  4104 ;;      Locals:         0       1       0       0
  4105 ;;      Temps:          0       1       0       0
  4106 ;;      Totals:         1       2       0       0
  4107 ;;Total ram usage:        3 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    3
  4110 ;; This function calls:
  4111 ;;		_IsValidGPS
  4112 ;;		_UART_ReadFromGPS_TO
  4113 ;; This function is called by:
  4114 ;;		_ReadGPSToS
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _UART_ReadValidTimeFromGPS_TO
  4120  0D46                     _UART_ReadValidTimeFromGPS_TO:	
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _UART_ReadValidTimeFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstac
      +                          k]
  4124                           ;UART_ReadValidTimeFromGPS_TO@Output stored from wreg
  4125  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  4126  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  4127  0D48  00A8               	movwf	UART_ReadValidTimeFromGPS_TO@Output
  4128                           
  4129                           ;gsk_usart.c: 115: UART_ReadFromGPS_TO (Output, TimeOut);
  4130  0D49  0876               	movf	UART_ReadValidTimeFromGPS_TO@TimeOut,w
  4131  0D4A  00A7               	movwf	??_UART_ReadValidTimeFromGPS_TO
  4132  0D4B  0827               	movf	??_UART_ReadValidTimeFromGPS_TO,w
  4133  0D4C  00F5               	movwf	UART_ReadFromGPS_TO@TimeOut
  4134  0D4D  0828               	movf	UART_ReadValidTimeFromGPS_TO@Output,w
  4135  0D4E  120A  158A  2625  120A  158A  	fcall	_UART_ReadFromGPS_TO
  4136                           
  4137                           ;gsk_usart.c: 116: return IsValidGPS(Output);
  4138  0D53  1283               	bcf	3,5	;RP0=0, select bank0
  4139  0D54  1303               	bcf	3,6	;RP1=0, select bank0
  4140  0D55  0828               	movf	UART_ReadValidTimeFromGPS_TO@Output,w
  4141  0D56  120A  118A  27A7   	fcall	_IsValidGPS
  4142  0D59  0008               	return
  4143  0D5A                     __end_of_UART_ReadValidTimeFromGPS_TO:	
  4144                           
  4145                           	psect	text10
  4146  0E25                     __ptext10:	
  4147 ;; *************** function _UART_ReadFromGPS_TO *****************
  4148 ;; Defined at:
  4149 ;;		line 80 in file "libs/gsk_usart.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  Output          1    wreg     PTR unsigned char 
  4152 ;;		 -> ReadGPSToS@Output(6), 
  4153 ;;  TimeOut         1    5[COMMON] unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  Output          1    2[BANK0 ] PTR unsigned char 
  4156 ;;		 -> ReadGPSToS@Output(6), 
  4157 ;;  i               2    3[BANK0 ] unsigned int 
  4158 ;;  Pos             1    6[BANK0 ] unsigned char 
  4159 ;;  TempChar        1    5[BANK0 ] unsigned char 
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  4169 ;;      Params:         1       0       0       0
  4170 ;;      Locals:         0       5       0       0
  4171 ;;      Temps:          0       2       0       0
  4172 ;;      Totals:         1       7       0       0
  4173 ;;Total ram usage:        8 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; Hardware stack levels required when called:    2
  4176 ;; This function calls:
  4177 ;;		_UART_Read_TO
  4178 ;; This function is called by:
  4179 ;;		_UART_ReadValidTimeFromGPS_TO
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _UART_ReadFromGPS_TO
  4185  0E25                     _UART_ReadFromGPS_TO:	
  4186                           
  4187                           ;incstack = 0
  4188                           ; Regs used in _UART_ReadFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4189                           ;UART_ReadFromGPS_TO@Output stored from wreg
  4190  0E25  1283               	bcf	3,5	;RP0=0, select bank0
  4191  0E26  1303               	bcf	3,6	;RP1=0, select bank0
  4192  0E27  00A2               	movwf	UART_ReadFromGPS_TO@Output
  4193                           
  4194                           ;gsk_usart.c: 81: Output[0]=0x00;
  4195  0E28  0822               	movf	UART_ReadFromGPS_TO@Output,w
  4196  0E29  0084               	movwf	4
  4197  0E2A  1383               	bcf	3,7	;select IRP bank0
  4198  0E2B  0180               	clrf	0
  4199                           
  4200                           ;gsk_usart.c: 82: const char StartCode[7]="$GPRMC,";
  4201                           ;gsk_usart.c: 83: char Pos=0x00;
  4202  0E2C  01A6               	clrf	UART_ReadFromGPS_TO@Pos
  4203                           
  4204                           ;gsk_usart.c: 84: char TempChar = 0x00;
  4205  0E2D  01A5               	clrf	UART_ReadFromGPS_TO@TempChar
  4206                           
  4207                           ;gsk_usart.c: 85: CREN = 0;
  4208  0E2E  1218               	bcf	24,4	;volatile
  4209                           
  4210                           ;gsk_usart.c: 86: CREN = 1;
  4211  0E2F  1618               	bsf	24,4	;volatile
  4212                           
  4213                           ;gsk_usart.c: 87: for(uint16_t i=0; i<=768; i++) {
  4214  0E30  01A3               	clrf	UART_ReadFromGPS_TO@i
  4215  0E31  01A4               	clrf	UART_ReadFromGPS_TO@i+1
  4216  0E32  3003               	movlw	3
  4217  0E33  0224               	subwf	UART_ReadFromGPS_TO@i+1,w
  4218  0E34  3001               	movlw	1
  4219  0E35  1903               	skipnz
  4220  0E36  0223               	subwf	UART_ReadFromGPS_TO@i,w
  4221  0E37  1803               	btfsc	3,0
  4222  0E38  2E7E               	goto	l522
  4223  0E39                     l2979:	
  4224                           
  4225                           ;gsk_usart.c: 89: TempChar = UART_Read_TO(TimeOut);
  4226  0E39  0875               	movf	UART_ReadFromGPS_TO@TimeOut,w
  4227  0E3A  120A  158A  250E  120A  158A  	fcall	_UART_Read_TO
  4228  0E3F  1283               	bcf	3,5	;RP0=0, select bank0
  4229  0E40  1303               	bcf	3,6	;RP1=0, select bank0
  4230  0E41  00A0               	movwf	??_UART_ReadFromGPS_TO
  4231  0E42  0820               	movf	??_UART_ReadFromGPS_TO,w
  4232  0E43  00A5               	movwf	UART_ReadFromGPS_TO@TempChar
  4233                           
  4234                           ;gsk_usart.c: 90: if ((Pos>=0x07) & (Pos<=0x0c)) {
  4235  0E44  3007               	movlw	7
  4236  0E45  0226               	subwf	UART_ReadFromGPS_TO@Pos,w
  4237  0E46  1C03               	skipc
  4238  0E47  2E58               	goto	l2989
  4239  0E48  300D               	movlw	13
  4240  0E49  0226               	subwf	UART_ReadFromGPS_TO@Pos,w
  4241  0E4A  1803               	skipnc
  4242  0E4B  2E58               	goto	l2989
  4243                           
  4244                           ;gsk_usart.c: 91: Output[Pos-0x07]= TempChar;
  4245  0E4C  0825               	movf	UART_ReadFromGPS_TO@TempChar,w
  4246  0E4D  00A0               	movwf	??_UART_ReadFromGPS_TO
  4247  0E4E  0826               	movf	UART_ReadFromGPS_TO@Pos,w
  4248  0E4F  3EF9               	addlw	-7
  4249  0E50  0722               	addwf	UART_ReadFromGPS_TO@Output,w
  4250  0E51  00A1               	movwf	??_UART_ReadFromGPS_TO+1
  4251  0E52  0821               	movf	??_UART_ReadFromGPS_TO+1,w
  4252  0E53  0084               	movwf	4
  4253  0E54  0820               	movf	??_UART_ReadFromGPS_TO,w
  4254  0E55  1383               	bcf	3,7	;select IRP bank0
  4255  0E56  0080               	movwf	0
  4256  0E57  2E67               	goto	l2993
  4257  0E58                     l2989:	
  4258                           ;gsk_usart.c: 93: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  4259                           
  4260                           ;gsk_usart.c: 92: Pos++;
  4261                           
  4262  0E58  0826               	movf	UART_ReadFromGPS_TO@Pos,w
  4263  0E59  3E01               	addlw	low ((UART_ReadFromGPS_TO@StartCode-__stringbase)| (0+32768))
  4264  0E5A  0084               	movwf	4
  4265  0E5B  120A  158A  2000  120A  158A  	fcall	stringdir
  4266  0E60  0625               	xorwf	UART_ReadFromGPS_TO@TempChar,w
  4267  0E61  1D03               	skipz
  4268  0E62  2E6C               	goto	l2995
  4269  0E63  3007               	movlw	7
  4270  0E64  0226               	subwf	UART_ReadFromGPS_TO@Pos,w
  4271  0E65  1803               	skipnc
  4272  0E66  2E6C               	goto	l2995
  4273  0E67                     l2993:	
  4274                           
  4275                           ;gsk_usart.c: 94: Pos++;
  4276  0E67  3001               	movlw	1
  4277  0E68  00A0               	movwf	??_UART_ReadFromGPS_TO
  4278  0E69  0820               	movf	??_UART_ReadFromGPS_TO,w
  4279  0E6A  07A6               	addwf	UART_ReadFromGPS_TO@Pos,f
  4280                           
  4281                           ;gsk_usart.c: 95: } else if (Pos>0x0c)
  4282  0E6B  2E71               	goto	l3003
  4283  0E6C                     l2995:	
  4284  0E6C  300D               	movlw	13
  4285  0E6D  0226               	subwf	UART_ReadFromGPS_TO@Pos,w
  4286  0E6E  1803               	btfsc	3,0
  4287  0E6F  0008               	return
  4288                           
  4289                           ;gsk_usart.c: 97: else
  4290                           ;gsk_usart.c: 98: Pos=0;
  4291                           
  4292                           ;gsk_usart.c: 96: return;
  4293  0E70  01A6               	clrf	UART_ReadFromGPS_TO@Pos
  4294  0E71                     l3003:	
  4295  0E71  3001               	movlw	1
  4296  0E72  07A3               	addwf	UART_ReadFromGPS_TO@i,f
  4297  0E73  1803               	skipnc
  4298  0E74  0AA4               	incf	UART_ReadFromGPS_TO@i+1,f
  4299  0E75  3000               	movlw	0
  4300  0E76  07A4               	addwf	UART_ReadFromGPS_TO@i+1,f
  4301  0E77  3003               	movlw	3
  4302  0E78  0224               	subwf	UART_ReadFromGPS_TO@i+1,w
  4303  0E79  3001               	movlw	1
  4304  0E7A  1903               	skipnz
  4305  0E7B  0223               	subwf	UART_ReadFromGPS_TO@i,w
  4306  0E7C  1C03               	skipc
  4307  0E7D  2E39               	goto	l2979
  4308  0E7E                     l522:	
  4309                           
  4310                           ;gsk_usart.c: 99: }
  4311                           ;gsk_usart.c: 100: CREN = 0;
  4312  0E7E  1218               	bcf	24,4	;volatile
  4313  0E7F  0008               	return
  4314  0E80                     __end_of_UART_ReadFromGPS_TO:	
  4315                           
  4316                           	psect	text11
  4317  0D0E                     __ptext11:	
  4318 ;; *************** function _UART_Read_TO *****************
  4319 ;; Defined at:
  4320 ;;		line 103 in file "libs/gsk_usart.c"
  4321 ;; Parameters:    Size  Location     Type
  4322 ;;  TimeOut         1    wreg     unsigned char 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  TimeOut         1    4[COMMON] unsigned char 
  4325 ;; Return value:  Size  Location     Type
  4326 ;;                  1    wreg      unsigned char 
  4327 ;; Registers used:
  4328 ;;		wreg, status,2, status,0
  4329 ;; Tracked objects:
  4330 ;;		On entry : 0/0
  4331 ;;		On exit  : 0/0
  4332 ;;		Unchanged: 0/0
  4333 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  4334 ;;      Params:         0       0       0       0
  4335 ;;      Locals:         1       0       0       0
  4336 ;;      Temps:          0       0       0       0
  4337 ;;      Totals:         1       0       0       0
  4338 ;;Total ram usage:        1 bytes
  4339 ;; Hardware stack levels used:    1
  4340 ;; Hardware stack levels required when called:    1
  4341 ;; This function calls:
  4342 ;;		Nothing
  4343 ;; This function is called by:
  4344 ;;		_UART_ReadFromGPS_TO
  4345 ;; This function uses a non-reentrant model
  4346 ;;
  4347                           
  4348                           
  4349                           ;psect for function _UART_Read_TO
  4350  0D0E                     _UART_Read_TO:	
  4351                           
  4352                           ;incstack = 0
  4353                           ; Regs used in _UART_Read_TO: [wreg+status,2+status,0]
  4354                           ;UART_Read_TO@TimeOut stored from wreg
  4355  0D0E  00F4               	movwf	UART_Read_TO@TimeOut
  4356                           
  4357                           ;gsk_usart.c: 104: while(!RCIF && TimeOut !=0) {
  4358  0D0F  2D13               	goto	l2307
  4359  0D10                     l533:	
  4360                           
  4361                           ;gsk_usart.c: 105: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4362  0D10  0000               	nop
  4363                           
  4364                           ;gsk_usart.c: 106: TimeOut--;
  4365  0D11  3001               	movlw	1
  4366  0D12  02F4               	subwf	UART_Read_TO@TimeOut,f
  4367  0D13                     l2307:	
  4368  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  4369  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  4370  0D15  1A8C               	btfsc	12,5	;volatile
  4371  0D16  2D1A               	goto	l536
  4372  0D17  0874               	movf	UART_Read_TO@TimeOut,w
  4373  0D18  1D03               	btfss	3,2
  4374  0D19  2D10               	goto	l533
  4375  0D1A                     l536:	
  4376                           
  4377                           ;gsk_usart.c: 107: }
  4378                           ;gsk_usart.c: 108: if (RCIF)
  4379  0D1A  1E8C               	btfss	12,5	;volatile
  4380  0D1B  2D1E               	goto	l2317
  4381                           
  4382                           ;gsk_usart.c: 109: return RCREG;
  4383  0D1C  081A               	movf	26,w	;volatile
  4384  0D1D  0008               	return
  4385  0D1E                     l2317:	
  4386                           
  4387                           ;gsk_usart.c: 110: else
  4388                           ;gsk_usart.c: 111: return 0x41;
  4389  0D1E  3041               	movlw	65
  4390  0D1F  0008               	return
  4391  0D20                     __end_of_UART_Read_TO:	
  4392                           
  4393                           	psect	text12
  4394  07A7                     __ptext12:	
  4395 ;; *************** function _IsValidGPS *****************
  4396 ;; Defined at:
  4397 ;;		line 120 in file "libs/gsk_usart.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  GPSData         1    wreg     PTR unsigned char 
  4400 ;;		 -> ReadGPSToS@Output(6), 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  GPSData         1    5[COMMON] PTR unsigned char 
  4403 ;;		 -> ReadGPSToS@Output(6), 
  4404 ;;  Result          1    4[COMMON] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      unsigned char 
  4407 ;; Registers used:
  4408 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  4414 ;;      Params:         0       0       0       0
  4415 ;;      Locals:         2       0       0       0
  4416 ;;      Temps:          0       0       0       0
  4417 ;;      Totals:         2       0       0       0
  4418 ;;Total ram usage:        2 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    1
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_UART_ReadValidTimeFromGPS_TO
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _IsValidGPS
  4430  07A7                     _IsValidGPS:	
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _IsValidGPS: [wreg-fsr0h+status,2+status,0]
  4434                           ;IsValidGPS@GPSData stored from wreg
  4435  07A7  00F5               	movwf	IsValidGPS@GPSData
  4436                           
  4437                           ;gsk_usart.c: 121: bool Result;
  4438                           ;gsk_usart.c: 122: if (GPSData[0]<0x30 || GPSData[0]>0x32)
  4439  07A8  0875               	movf	IsValidGPS@GPSData,w
  4440  07A9  0084               	movwf	4
  4441  07AA  3030               	movlw	48
  4442  07AB  1383               	bcf	3,7	;select IRP bank0
  4443  07AC  0200               	subwf	0,w
  4444  07AD  1C03               	skipc
  4445  07AE  2FB4               	goto	l2369
  4446  07AF  0875               	movf	IsValidGPS@GPSData,w
  4447  07B0  0084               	movwf	4
  4448  07B1  3033               	movlw	51
  4449  07B2  0200               	subwf	0,w
  4450  07B3  1803               	btfsc	3,0
  4451  07B4                     l2369:	
  4452                           
  4453                           ;gsk_usart.c: 123: Result = 0;
  4454  07B4  01F4               	clrf	IsValidGPS@Result
  4455                           
  4456                           ;gsk_usart.c: 124: if (GPSData[1]<0x30 || GPSData[1]>0x39)
  4457  07B5  0A75               	incf	IsValidGPS@GPSData,w
  4458  07B6  0084               	movwf	4
  4459  07B7  3030               	movlw	48
  4460  07B8  0200               	subwf	0,w
  4461  07B9  1C03               	skipc
  4462  07BA  2FC0               	goto	l2375
  4463  07BB  0A75               	incf	IsValidGPS@GPSData,w
  4464  07BC  0084               	movwf	4
  4465  07BD  303A               	movlw	58
  4466  07BE  0200               	subwf	0,w
  4467  07BF  1803               	btfsc	3,0
  4468  07C0                     l2375:	
  4469                           
  4470                           ;gsk_usart.c: 125: Result = 0;
  4471  07C0  01F4               	clrf	IsValidGPS@Result
  4472                           
  4473                           ;gsk_usart.c: 126: if (GPSData[2]<0x30 || GPSData[2]>0x36)
  4474  07C1  0875               	movf	IsValidGPS@GPSData,w
  4475  07C2  3E02               	addlw	2
  4476  07C3  0084               	movwf	4
  4477  07C4  3030               	movlw	48
  4478  07C5  0200               	subwf	0,w
  4479  07C6  1C03               	skipc
  4480  07C7  2FCE               	goto	l2381
  4481  07C8  0875               	movf	IsValidGPS@GPSData,w
  4482  07C9  3E02               	addlw	2
  4483  07CA  0084               	movwf	4
  4484  07CB  3037               	movlw	55
  4485  07CC  0200               	subwf	0,w
  4486  07CD  1803               	btfsc	3,0
  4487  07CE                     l2381:	
  4488                           
  4489                           ;gsk_usart.c: 127: Result = 0;
  4490  07CE  01F4               	clrf	IsValidGPS@Result
  4491                           
  4492                           ;gsk_usart.c: 128: if (GPSData[3]<0x30 || GPSData[3]>0x39)
  4493  07CF  0875               	movf	IsValidGPS@GPSData,w
  4494  07D0  3E03               	addlw	3
  4495  07D1  0084               	movwf	4
  4496  07D2  3030               	movlw	48
  4497  07D3  0200               	subwf	0,w
  4498  07D4  1C03               	skipc
  4499  07D5  2FDC               	goto	l2387
  4500  07D6  0875               	movf	IsValidGPS@GPSData,w
  4501  07D7  3E03               	addlw	3
  4502  07D8  0084               	movwf	4
  4503  07D9  303A               	movlw	58
  4504  07DA  0200               	subwf	0,w
  4505  07DB  1803               	btfsc	3,0
  4506  07DC                     l2387:	
  4507                           
  4508                           ;gsk_usart.c: 129: Result = 0;
  4509  07DC  01F4               	clrf	IsValidGPS@Result
  4510                           
  4511                           ;gsk_usart.c: 130: if (GPSData[4]<0x30 || GPSData[4]>0x36)
  4512  07DD  0875               	movf	IsValidGPS@GPSData,w
  4513  07DE  3E04               	addlw	4
  4514  07DF  0084               	movwf	4
  4515  07E0  3030               	movlw	48
  4516  07E1  0200               	subwf	0,w
  4517  07E2  1C03               	skipc
  4518  07E3  2FEA               	goto	l2393
  4519  07E4  0875               	movf	IsValidGPS@GPSData,w
  4520  07E5  3E04               	addlw	4
  4521  07E6  0084               	movwf	4
  4522  07E7  3037               	movlw	55
  4523  07E8  0200               	subwf	0,w
  4524  07E9  1803               	btfsc	3,0
  4525  07EA                     l2393:	
  4526                           
  4527                           ;gsk_usart.c: 131: Result = 0;
  4528  07EA  01F4               	clrf	IsValidGPS@Result
  4529                           
  4530                           ;gsk_usart.c: 132: if (GPSData[5]<0x30 || GPSData[5]>0x39)
  4531  07EB  0875               	movf	IsValidGPS@GPSData,w
  4532  07EC  3E05               	addlw	5
  4533  07ED  0084               	movwf	4
  4534  07EE  3030               	movlw	48
  4535  07EF  0200               	subwf	0,w
  4536  07F0  1C03               	skipc
  4537  07F1  2FF8               	goto	l2399
  4538  07F2  0875               	movf	IsValidGPS@GPSData,w
  4539  07F3  3E05               	addlw	5
  4540  07F4  0084               	movwf	4
  4541  07F5  303A               	movlw	58
  4542  07F6  0200               	subwf	0,w
  4543  07F7  1803               	btfsc	3,0
  4544  07F8                     l2399:	
  4545                           
  4546                           ;gsk_usart.c: 133: Result = 0;
  4547  07F8  01F4               	clrf	IsValidGPS@Result
  4548                           
  4549                           ;gsk_usart.c: 134: return Result;
  4550  07F9  0874               	movf	IsValidGPS@Result,w
  4551  07FA  0008               	return
  4552  07FB                     __end_of_IsValidGPS:	
  4553                           
  4554                           	psect	text13
  4555  0EDB                     __ptext13:	
  4556 ;; *************** function _GetCycle *****************
  4557 ;; Defined at:
  4558 ;;		line 27 in file "libs/gsk_algo_funcs.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  i               1   11[BANK0 ] unsigned char 
  4563 ;;  PrevCycle       1   10[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  4573 ;;      Params:         0       0       0       0
  4574 ;;      Locals:         0       2       0       0
  4575 ;;      Temps:          0      10       0       0
  4576 ;;      Totals:         0      12       0       0
  4577 ;;Total ram usage:       12 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    2
  4580 ;; This function calls:
  4581 ;;		_GetPrevCycle
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _GetCycle
  4589  0EDB                     _GetCycle:	
  4590                           
  4591                           ;gsk_algo_funcs.c: 28: char PrevCycle;
  4592                           ;gsk_algo_funcs.c: 29: for (char i = 0; i < 3; i++) {
  4593                           
  4594                           ;incstack = 0
  4595                           ; Regs used in _GetCycle: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4596  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  4597  0EDC  1303               	bcf	3,6	;RP1=0, select bank0
  4598  0EDD  01AB               	clrf	GetCycle@i
  4599  0EDE  3003               	movlw	3
  4600  0EDF  022B               	subwf	GetCycle@i,w
  4601  0EE0  1803               	btfsc	3,0
  4602  0EE1  2FF6               	goto	l3193
  4603  0EE2                     l3173:	
  4604                           
  4605                           ;gsk_algo_funcs.c: 30: PrevCycle = GetPrevCycle(i);
  4606  0EE2  082B               	movf	GetCycle@i,w
  4607  0EE3  120A  158A  24F0  120A  158A  	fcall	_GetPrevCycle
  4608  0EE8  1283               	bcf	3,5	;RP0=0, select bank0
  4609  0EE9  1303               	bcf	3,6	;RP1=0, select bank0
  4610  0EEA  00A0               	movwf	??_GetCycle
  4611  0EEB  0820               	movf	??_GetCycle,w
  4612  0EEC  00AA               	movwf	GetCycle@PrevCycle
  4613                           
  4614                           ;gsk_algo_funcs.c: 31: if (C[PrevCycle] <= C[i]) {
  4615  0EED  082A               	movf	GetCycle@PrevCycle,w
  4616  0EEE  00A0               	movwf	??_GetCycle
  4617  0EEF  3001               	movlw	1
  4618  0EF0                     u4325:	
  4619  0EF0  1003               	clrc
  4620  0EF1  0DA0               	rlf	??_GetCycle,f
  4621  0EF2  3EFF               	addlw	-1
  4622  0EF3  1D03               	skipz
  4623  0EF4  2EF0               	goto	u4325
  4624  0EF5  1003               	clrc
  4625  0EF6  0D20               	rlf	??_GetCycle,w
  4626  0EF7  3E4C               	addlw	76
  4627  0EF8  0084               	movwf	4
  4628  0EF9  1783               	bsf	3,7	;select IRP bank2
  4629  0EFA  0800               	movf	0,w
  4630  0EFB  00A1               	movwf	??_GetCycle+1
  4631  0EFC  0A84               	incf	4,f
  4632  0EFD  0800               	movf	0,w
  4633  0EFE  00A2               	movwf	??_GetCycle+2
  4634  0EFF  0A84               	incf	4,f
  4635  0F00  0800               	movf	0,w
  4636  0F01  00A3               	movwf	??_GetCycle+3
  4637  0F02  0A84               	incf	4,f
  4638  0F03  0800               	movf	0,w
  4639  0F04  00A4               	movwf	??_GetCycle+4
  4640  0F05  082B               	movf	GetCycle@i,w
  4641  0F06  00A5               	movwf	??_GetCycle+5
  4642  0F07  3001               	movlw	1
  4643  0F08                     u4335:	
  4644  0F08  1003               	clrc
  4645  0F09  0DA5               	rlf	??_GetCycle+5,f
  4646  0F0A  3EFF               	addlw	-1
  4647  0F0B  1D03               	skipz
  4648  0F0C  2F08               	goto	u4335
  4649  0F0D  1003               	clrc
  4650  0F0E  0D25               	rlf	??_GetCycle+5,w
  4651  0F0F  3E4C               	addlw	76
  4652  0F10  0084               	movwf	4
  4653  0F11  0800               	movf	0,w
  4654  0F12  00A6               	movwf	??_GetCycle+6
  4655  0F13  0A84               	incf	4,f
  4656  0F14  0800               	movf	0,w
  4657  0F15  00A7               	movwf	??_GetCycle+7
  4658  0F16  0A84               	incf	4,f
  4659  0F17  0800               	movf	0,w
  4660  0F18  00A8               	movwf	??_GetCycle+8
  4661  0F19  0A84               	incf	4,f
  4662  0F1A  0800               	movf	0,w
  4663  0F1B  00A9               	movwf	??_GetCycle+9
  4664  0F1C  0829               	movf	??_GetCycle+9,w
  4665  0F1D  3A80               	xorlw	128
  4666  0F1E  00FF               	movwf	127
  4667  0F1F  0824               	movf	??_GetCycle+4,w
  4668  0F20  3A80               	xorlw	128
  4669  0F21  027F               	subwf	127,w
  4670  0F22  1D03               	skipz
  4671  0F23  2F2E               	goto	u4343
  4672  0F24  0823               	movf	??_GetCycle+3,w
  4673  0F25  0228               	subwf	??_GetCycle+8,w
  4674  0F26  1D03               	skipz
  4675  0F27  2F2E               	goto	u4343
  4676  0F28  0822               	movf	??_GetCycle+2,w
  4677  0F29  0227               	subwf	??_GetCycle+7,w
  4678  0F2A  1D03               	skipz
  4679  0F2B  2F2E               	goto	u4343
  4680  0F2C  0821               	movf	??_GetCycle+1,w
  4681  0F2D  0226               	subwf	??_GetCycle+6,w
  4682  0F2E                     u4343:	
  4683  0F2E  1C03               	skipc
  4684  0F2F  2F74               	goto	l3183
  4685                           
  4686                           ;gsk_algo_funcs.c: 32: if ((S>C[PrevCycle]) && (S<=C[i])) {
  4687  0F30  082A               	movf	GetCycle@PrevCycle,w
  4688  0F31  00A0               	movwf	??_GetCycle
  4689  0F32  3001               	movlw	1
  4690  0F33                     u4355:	
  4691  0F33  1003               	clrc
  4692  0F34  0DA0               	rlf	??_GetCycle,f
  4693  0F35  3EFF               	addlw	-1
  4694  0F36  1D03               	skipz
  4695  0F37  2F33               	goto	u4355
  4696  0F38  1003               	clrc
  4697  0F39  0D20               	rlf	??_GetCycle,w
  4698  0F3A  3E4C               	addlw	76
  4699  0F3B  0084               	movwf	4
  4700  0F3C  0800               	movf	0,w
  4701  0F3D  00A1               	movwf	??_GetCycle+1
  4702  0F3E  0A84               	incf	4,f
  4703  0F3F  0800               	movf	0,w
  4704  0F40  00A2               	movwf	??_GetCycle+2
  4705  0F41  0A84               	incf	4,f
  4706  0F42  0800               	movf	0,w
  4707  0F43  00A3               	movwf	??_GetCycle+3
  4708  0F44  0A84               	incf	4,f
  4709  0F45  0800               	movf	0,w
  4710  0F46  00A4               	movwf	??_GetCycle+4
  4711  0F47  0824               	movf	??_GetCycle+4,w
  4712  0F48  3A80               	xorlw	128
  4713  0F49  00FF               	movwf	127
  4714  0F4A  1283               	bcf	3,5	;RP0=0, select bank2
  4715  0F4B  1703               	bsf	3,6	;RP1=1, select bank2
  4716  0F4C  086E               	movf	110,w	;volatile
  4717  0F4D  3A80               	xorlw	128
  4718  0F4E  027F               	subwf	127,w
  4719  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  4720  0F50  1303               	bcf	3,6	;RP1=0, select bank0
  4721  0F51  1D03               	skipz
  4722  0F52  2F69               	goto	u4363
  4723  0F53  1283               	bcf	3,5	;RP0=0, select bank2
  4724  0F54  1703               	bsf	3,6	;RP1=1, select bank2
  4725  0F55  086D               	movf	109,w	;volatile
  4726  0F56  1283               	bcf	3,5	;RP0=0, select bank0
  4727  0F57  1303               	bcf	3,6	;RP1=0, select bank0
  4728  0F58  0223               	subwf	??_GetCycle+3,w
  4729  0F59  1D03               	skipz
  4730  0F5A  2F69               	goto	u4363
  4731  0F5B  1283               	bcf	3,5	;RP0=0, select bank2
  4732  0F5C  1703               	bsf	3,6	;RP1=1, select bank2
  4733  0F5D  086C               	movf	108,w	;volatile
  4734  0F5E  1283               	bcf	3,5	;RP0=0, select bank0
  4735  0F5F  1303               	bcf	3,6	;RP1=0, select bank0
  4736  0F60  0222               	subwf	??_GetCycle+2,w
  4737  0F61  1D03               	skipz
  4738  0F62  2F69               	goto	u4363
  4739  0F63  1283               	bcf	3,5	;RP0=0, select bank2
  4740  0F64  1703               	bsf	3,6	;RP1=1, select bank2
  4741  0F65  086B               	movf	107,w	;volatile
  4742  0F66  1283               	bcf	3,5	;RP0=0, select bank0
  4743  0F67  1303               	bcf	3,6	;RP1=0, select bank0
  4744  0F68  0221               	subwf	??_GetCycle+1,w
  4745  0F69                     u4363:	
  4746  0F69  1803               	skipnc
  4747  0F6A  2FEE               	goto	l3189
  4748  0F6B  082B               	movf	GetCycle@i,w
  4749  0F6C  00A0               	movwf	??_GetCycle
  4750  0F6D  3001               	movlw	1
  4751  0F6E                     u4375:	
  4752  0F6E  1003               	clrc
  4753  0F6F  0DA0               	rlf	??_GetCycle,f
  4754  0F70  3EFF               	addlw	-1
  4755  0F71  1D03               	skipz
  4756  0F72  2F6E               	goto	u4375
  4757  0F73  2FB7               	goto	L5
  4758  0F74                     l3183:	
  4759                           ;gsk_algo_funcs.c: 34: }
  4760                           ;gsk_algo_funcs.c: 35: } else {
  4761                           
  4762                           ;gsk_algo_funcs.c: 33: CYCLE_TYPE = i;
  4763                           
  4764                           
  4765                           ;gsk_algo_funcs.c: 36: if ((S>C[PrevCycle]) || (S<=C[i])) {
  4766  0F74  082A               	movf	GetCycle@PrevCycle,w
  4767  0F75  00A0               	movwf	??_GetCycle
  4768  0F76  3001               	movlw	1
  4769  0F77                     u4395:	
  4770  0F77  1003               	clrc
  4771  0F78  0DA0               	rlf	??_GetCycle,f
  4772  0F79  3EFF               	addlw	-1
  4773  0F7A  1D03               	skipz
  4774  0F7B  2F77               	goto	u4395
  4775  0F7C  1003               	clrc
  4776  0F7D  0D20               	rlf	??_GetCycle,w
  4777  0F7E  3E4C               	addlw	76
  4778  0F7F  0084               	movwf	4
  4779  0F80  0800               	movf	0,w
  4780  0F81  00A1               	movwf	??_GetCycle+1
  4781  0F82  0A84               	incf	4,f
  4782  0F83  0800               	movf	0,w
  4783  0F84  00A2               	movwf	??_GetCycle+2
  4784  0F85  0A84               	incf	4,f
  4785  0F86  0800               	movf	0,w
  4786  0F87  00A3               	movwf	??_GetCycle+3
  4787  0F88  0A84               	incf	4,f
  4788  0F89  0800               	movf	0,w
  4789  0F8A  00A4               	movwf	??_GetCycle+4
  4790  0F8B  0824               	movf	??_GetCycle+4,w
  4791  0F8C  3A80               	xorlw	128
  4792  0F8D  00FF               	movwf	127
  4793  0F8E  1283               	bcf	3,5	;RP0=0, select bank2
  4794  0F8F  1703               	bsf	3,6	;RP1=1, select bank2
  4795  0F90  086E               	movf	110,w	;volatile
  4796  0F91  3A80               	xorlw	128
  4797  0F92  027F               	subwf	127,w
  4798  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  4799  0F94  1303               	bcf	3,6	;RP1=0, select bank0
  4800  0F95  1D03               	skipz
  4801  0F96  2FAD               	goto	u4403
  4802  0F97  1283               	bcf	3,5	;RP0=0, select bank2
  4803  0F98  1703               	bsf	3,6	;RP1=1, select bank2
  4804  0F99  086D               	movf	109,w	;volatile
  4805  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  4806  0F9B  1303               	bcf	3,6	;RP1=0, select bank0
  4807  0F9C  0223               	subwf	??_GetCycle+3,w
  4808  0F9D  1D03               	skipz
  4809  0F9E  2FAD               	goto	u4403
  4810  0F9F  1283               	bcf	3,5	;RP0=0, select bank2
  4811  0FA0  1703               	bsf	3,6	;RP1=1, select bank2
  4812  0FA1  086C               	movf	108,w	;volatile
  4813  0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  4814  0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  4815  0FA4  0222               	subwf	??_GetCycle+2,w
  4816  0FA5  1D03               	skipz
  4817  0FA6  2FAD               	goto	u4403
  4818  0FA7  1283               	bcf	3,5	;RP0=0, select bank2
  4819  0FA8  1703               	bsf	3,6	;RP1=1, select bank2
  4820  0FA9  086B               	movf	107,w	;volatile
  4821  0FAA  1283               	bcf	3,5	;RP0=0, select bank0
  4822  0FAB  1303               	bcf	3,6	;RP1=0, select bank0
  4823  0FAC  0221               	subwf	??_GetCycle+1,w
  4824  0FAD                     u4403:	
  4825  0FAD  1C03               	skipc
  4826  0FAE  2FEA               	goto	l3187
  4827  0FAF  082B               	movf	GetCycle@i,w
  4828  0FB0  00A0               	movwf	??_GetCycle
  4829  0FB1  3001               	movlw	1
  4830  0FB2                     u4415:	
  4831  0FB2  1003               	clrc
  4832  0FB3  0DA0               	rlf	??_GetCycle,f
  4833  0FB4  3EFF               	addlw	-1
  4834  0FB5  1D03               	skipz
  4835  0FB6  2FB2               	goto	u4415
  4836  0FB7                     L5:	
  4837  0FB7  1003               	clrc
  4838  0FB8  0D20               	rlf	??_GetCycle,w
  4839  0FB9  3E4C               	addlw	76
  4840  0FBA  0084               	movwf	4
  4841  0FBB  0800               	movf	0,w
  4842  0FBC  00A1               	movwf	??_GetCycle+1
  4843  0FBD  0A84               	incf	4,f
  4844  0FBE  0800               	movf	0,w
  4845  0FBF  00A2               	movwf	??_GetCycle+2
  4846  0FC0  0A84               	incf	4,f
  4847  0FC1  0800               	movf	0,w
  4848  0FC2  00A3               	movwf	??_GetCycle+3
  4849  0FC3  0A84               	incf	4,f
  4850  0FC4  0800               	movf	0,w
  4851  0FC5  00A4               	movwf	??_GetCycle+4
  4852  0FC6  0824               	movf	??_GetCycle+4,w
  4853  0FC7  3A80               	xorlw	128
  4854  0FC8  00FF               	movwf	127
  4855  0FC9  1283               	bcf	3,5	;RP0=0, select bank2
  4856  0FCA  1703               	bsf	3,6	;RP1=1, select bank2
  4857  0FCB  086E               	movf	110,w	;volatile
  4858  0FCC  3A80               	xorlw	128
  4859  0FCD  027F               	subwf	127,w
  4860  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  4861  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  4862  0FD0  1D03               	skipz
  4863  0FD1  2FE8               	goto	u4423
  4864  0FD2  1283               	bcf	3,5	;RP0=0, select bank2
  4865  0FD3  1703               	bsf	3,6	;RP1=1, select bank2
  4866  0FD4  086D               	movf	109,w	;volatile
  4867  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  4868  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  4869  0FD7  0223               	subwf	??_GetCycle+3,w
  4870  0FD8  1D03               	skipz
  4871  0FD9  2FE8               	goto	u4423
  4872  0FDA  1283               	bcf	3,5	;RP0=0, select bank2
  4873  0FDB  1703               	bsf	3,6	;RP1=1, select bank2
  4874  0FDC  086C               	movf	108,w	;volatile
  4875  0FDD  1283               	bcf	3,5	;RP0=0, select bank0
  4876  0FDE  1303               	bcf	3,6	;RP1=0, select bank0
  4877  0FDF  0222               	subwf	??_GetCycle+2,w
  4878  0FE0  1D03               	skipz
  4879  0FE1  2FE8               	goto	u4423
  4880  0FE2  1283               	bcf	3,5	;RP0=0, select bank2
  4881  0FE3  1703               	bsf	3,6	;RP1=1, select bank2
  4882  0FE4  086B               	movf	107,w	;volatile
  4883  0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  4884  0FE6  1303               	bcf	3,6	;RP1=0, select bank0
  4885  0FE7  0221               	subwf	??_GetCycle+1,w
  4886  0FE8                     u4423:	
  4887  0FE8  1C03               	skipc
  4888  0FE9  2FEE               	goto	l3189
  4889  0FEA                     l3187:	
  4890                           
  4891                           ;gsk_algo_funcs.c: 37: CYCLE_TYPE = i;
  4892  0FEA  082B               	movf	GetCycle@i,w
  4893  0FEB  00A0               	movwf	??_GetCycle
  4894  0FEC  0820               	movf	??_GetCycle,w
  4895  0FED  00F9               	movwf	_CYCLE_TYPE	;volatile
  4896  0FEE                     l3189:	
  4897  0FEE  3001               	movlw	1
  4898  0FEF  00A0               	movwf	??_GetCycle
  4899  0FF0  0820               	movf	??_GetCycle,w
  4900  0FF1  07AB               	addwf	GetCycle@i,f
  4901  0FF2  3003               	movlw	3
  4902  0FF3  022B               	subwf	GetCycle@i,w
  4903  0FF4  1C03               	skipc
  4904  0FF5  2EE2               	goto	l3173
  4905  0FF6                     l3193:	
  4906                           
  4907                           ;gsk_algo_funcs.c: 38: }
  4908                           ;gsk_algo_funcs.c: 39: }
  4909                           ;gsk_algo_funcs.c: 40: }
  4910                           ;gsk_algo_funcs.c: 41: PREV_CYCLE_TYPE = GetPrevCycle(CYCLE_TYPE);
  4911  0FF6  0879               	movf	_CYCLE_TYPE,w	;volatile
  4912  0FF7  120A  158A  24F0   	fcall	_GetPrevCycle
  4913  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  4914  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  4915  0FFC  00A0               	movwf	??_GetCycle
  4916  0FFD  0820               	movf	??_GetCycle,w
  4917  0FFE  00EC               	movwf	_PREV_CYCLE_TYPE	;volatile
  4918  0FFF  0008               	return
  4919  1000                     __end_of_GetCycle:	
  4920                           
  4921                           	psect	text14
  4922  0DD2                     __ptext14:	
  4923 ;; *************** function _GetCumulativePeriodsForStates *****************
  4924 ;; Defined at:
  4925 ;;		line 3 in file "libs/gsk_algo_funcs.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;		None
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;  i               1    7[BANK0 ] unsigned char 
  4930 ;;  j               1    6[BANK0 ] unsigned char 
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  4940 ;;      Params:         0       0       0       0
  4941 ;;      Locals:         0       2       0       0
  4942 ;;      Temps:          0       6       0       0
  4943 ;;      Totals:         0       8       0       0
  4944 ;;Total ram usage:        8 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    2
  4947 ;; This function calls:
  4948 ;;		_GetPrevCycle
  4949 ;; This function is called by:
  4950 ;;		_main
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           
  4955                           ;psect for function _GetCumulativePeriodsForStates
  4956  0DD2                     _GetCumulativePeriodsForStates:	
  4957                           
  4958                           ;gsk_algo_funcs.c: 4: char i, j;
  4959                           ;gsk_algo_funcs.c: 5: for (i=0; i< 3; i++) {
  4960                           
  4961                           ;incstack = 0
  4962                           ; Regs used in _GetCumulativePeriodsForStates: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  4963  0DD2  1283               	bcf	3,5	;RP0=0, select bank0
  4964  0DD3  1303               	bcf	3,6	;RP1=0, select bank0
  4965  0DD4  01A7               	clrf	GetCumulativePeriodsForStates@i
  4966  0DD5                     L6:	
  4967  0DD5  3003               	movlw	3
  4968  0DD6  0227               	subwf	GetCumulativePeriodsForStates@i,w
  4969  0DD7  1803               	btfsc	3,0
  4970  0DD8  0008               	return
  4971                           
  4972                           ;gsk_algo_funcs.c: 6: STATE_CUMULATIVE_PERIODS[i] = 0;
  4973  0DD9  0827               	movf	GetCumulativePeriodsForStates@i,w
  4974  0DDA  00A0               	movwf	??_GetCumulativePeriodsForStates
  4975  0DDB  0720               	addwf	??_GetCumulativePeriodsForStates,w
  4976  0DDC  3EEA               	addlw	234
  4977  0DDD  0084               	movwf	4
  4978  0DDE  1783               	bsf	3,7	;select IRP bank3
  4979  0DDF  0180               	clrf	0
  4980  0DE0  0A84               	incf	4,f
  4981  0DE1  0180               	clrf	0
  4982                           
  4983                           ;gsk_algo_funcs.c: 7: if (i==0)
  4984  0DE2  0827               	movf	GetCumulativePeriodsForStates@i,w
  4985  0DE3  1D03               	btfss	3,2
  4986  0DE4  2DE7               	goto	l3155
  4987                           
  4988                           ;gsk_algo_funcs.c: 8: j = 0;
  4989  0DE5  01A6               	clrf	GetCumulativePeriodsForStates@j
  4990  0DE6  2DF6               	goto	l3161
  4991  0DE7                     l3155:	
  4992                           
  4993                           ;gsk_algo_funcs.c: 9: else
  4994                           ;gsk_algo_funcs.c: 10: j = STATE_BREAKS[GetPrevCycle(i)];
  4995  0DE7  0827               	movf	GetCumulativePeriodsForStates@i,w
  4996  0DE8  120A  158A  24F0  120A  158A  	fcall	_GetPrevCycle
  4997  0DED  3E64               	addlw	100
  4998  0DEE  0084               	movwf	4
  4999  0DEF  1783               	bsf	3,7	;select IRP bank2
  5000  0DF0  0800               	movf	0,w
  5001  0DF1  1283               	bcf	3,5	;RP0=0, select bank0
  5002  0DF2  1303               	bcf	3,6	;RP1=0, select bank0
  5003  0DF3  00A0               	movwf	??_GetCumulativePeriodsForStates
  5004  0DF4  0820               	movf	??_GetCumulativePeriodsForStates,w
  5005  0DF5  00A6               	movwf	GetCumulativePeriodsForStates@j
  5006  0DF6                     l3161:	
  5007                           ;gsk_algo_funcs.c: 11: for (; j < STATE_BREAKS[i]; j++) {
  5008                           
  5009  0DF6  0827               	movf	GetCumulativePeriodsForStates@i,w
  5010  0DF7  3E64               	addlw	100
  5011  0DF8  0084               	movwf	4
  5012  0DF9  0800               	movf	0,w
  5013  0DFA  0226               	subwf	GetCumulativePeriodsForStates@j,w
  5014  0DFB  1803               	btfsc	3,0
  5015  0DFC  2E20               	goto	l3163
  5016                           
  5017                           ;gsk_algo_funcs.c: 12: STATE_CUMULATIVE_PERIODS[i] = STATE_CUMULATIVE_PERIODS[i]
  5018                           ;gsk_algo_funcs.c: 13: + STATE_PERIODS[j];
  5019  0DFD  0827               	movf	GetCumulativePeriodsForStates@i,w
  5020  0DFE  00A0               	movwf	??_GetCumulativePeriodsForStates
  5021  0DFF  0720               	addwf	??_GetCumulativePeriodsForStates,w
  5022  0E00  3EEA               	addlw	234
  5023  0E01  0084               	movwf	4
  5024  0E02  0800               	movf	0,w
  5025  0E03  00A1               	movwf	??_GetCumulativePeriodsForStates+1
  5026  0E04  0A84               	incf	4,f
  5027  0E05  0800               	movf	0,w
  5028  0E06  00A2               	movwf	??_GetCumulativePeriodsForStates+2
  5029  0E07  0826               	movf	GetCumulativePeriodsForStates@j,w
  5030  0E08  3E90               	addlw	144
  5031  0E09  0084               	movwf	4
  5032  0E0A  0800               	movf	0,w
  5033  0E0B  0721               	addwf	??_GetCumulativePeriodsForStates+1,w
  5034  0E0C  00A3               	movwf	??_GetCumulativePeriodsForStates+3
  5035  0E0D  0822               	movf	??_GetCumulativePeriodsForStates+2,w
  5036  0E0E  1803               	skipnc
  5037  0E0F  0A22               	incf	??_GetCumulativePeriodsForStates+2,w
  5038  0E10  00A4               	movwf	??_GetCumulativePeriodsForStates+4
  5039  0E11  0827               	movf	GetCumulativePeriodsForStates@i,w
  5040  0E12  00A5               	movwf	??_GetCumulativePeriodsForStates+5
  5041  0E13  0725               	addwf	??_GetCumulativePeriodsForStates+5,w
  5042  0E14  3EEA               	addlw	234
  5043  0E15  0084               	movwf	4
  5044  0E16  0823               	movf	??_GetCumulativePeriodsForStates+3,w
  5045  0E17  0080               	movwf	0
  5046  0E18  0A84               	incf	4,f
  5047  0E19  0824               	movf	??_GetCumulativePeriodsForStates+4,w
  5048  0E1A  0080               	movwf	0
  5049  0E1B  3001               	movlw	1
  5050  0E1C  00A0               	movwf	??_GetCumulativePeriodsForStates
  5051  0E1D  0820               	movf	??_GetCumulativePeriodsForStates,w
  5052  0E1E  07A6               	addwf	GetCumulativePeriodsForStates@j,f
  5053  0E1F  2DF6               	goto	l3161
  5054  0E20                     l3163:	
  5055  0E20  3001               	movlw	1
  5056  0E21  00A0               	movwf	??_GetCumulativePeriodsForStates
  5057  0E22  0820               	movf	??_GetCumulativePeriodsForStates,w
  5058  0E23  07A7               	addwf	GetCumulativePeriodsForStates@i,f
  5059  0E24  2DD5               	goto	L6
  5060  0E25                     __end_of_GetCumulativePeriodsForStates:	
  5061                           
  5062                           	psect	text15
  5063  0CF0                     __ptext15:	
  5064 ;; *************** function _GetPrevCycle *****************
  5065 ;; Defined at:
  5066 ;;		line 18 in file "libs/gsk_algo_funcs.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  cycle           1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  cycle           1    6[COMMON] unsigned char 
  5071 ;;  PrevCycle       1    5[COMMON] unsigned char 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  1    wreg      unsigned char 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 0/0
  5078 ;;		On exit  : 0/0
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  5081 ;;      Params:         0       0       0       0
  5082 ;;      Locals:         2       0       0       0
  5083 ;;      Temps:          1       0       0       0
  5084 ;;      Totals:         3       0       0       0
  5085 ;;Total ram usage:        3 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    1
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		_GetCumulativePeriodsForStates
  5092 ;;		_GetCycle
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           
  5097                           ;psect for function _GetPrevCycle
  5098  0CF0                     _GetPrevCycle:	
  5099                           
  5100                           ;incstack = 0
  5101                           ; Regs used in _GetPrevCycle: [wreg+status,2+status,0]
  5102                           ;GetPrevCycle@cycle stored from wreg
  5103  0CF0  00F6               	movwf	GetPrevCycle@cycle
  5104                           
  5105                           ;gsk_algo_funcs.c: 19: UINT8 PrevCycle;
  5106                           ;gsk_algo_funcs.c: 20: if (cycle > 0)
  5107  0CF1  0876               	movf	GetPrevCycle@cycle,w
  5108  0CF2  1903               	btfsc	3,2
  5109  0CF3  2CF7               	goto	l3015
  5110                           
  5111                           ;gsk_algo_funcs.c: 21: PrevCycle = cycle - 1;
  5112  0CF4  0876               	movf	GetPrevCycle@cycle,w
  5113  0CF5  3EFF               	addlw	255
  5114  0CF6  2CF8               	goto	L7
  5115  0CF7                     l3015:	
  5116                           
  5117                           ;gsk_algo_funcs.c: 22: else
  5118                           ;gsk_algo_funcs.c: 23: PrevCycle = 3 - 1;
  5119  0CF7  3002               	movlw	2
  5120  0CF8                     L7:	
  5121  0CF8  00F4               	movwf	??_GetPrevCycle
  5122  0CF9  0874               	movf	??_GetPrevCycle,w
  5123  0CFA  00F5               	movwf	GetPrevCycle@PrevCycle
  5124                           
  5125                           ;gsk_algo_funcs.c: 24: return PrevCycle;
  5126  0CFB  0875               	movf	GetPrevCycle@PrevCycle,w
  5127  0CFC  0008               	return
  5128  0CFD                     __end_of_GetPrevCycle:	
  5129                           
  5130                           	psect	text16
  5131  0CE8                     __ptext16:	
  5132 ;; *************** function _GetAbs *****************
  5133 ;; Defined at:
  5134 ;;		line 55 in file "libs/gsk_algo_funcs.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;  a               2    4[COMMON] short 
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  2    4[COMMON] short 
  5141 ;; Registers used:
  5142 ;;		status,2, status,0
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  5148 ;;      Params:         2       0       0       0
  5149 ;;      Locals:         0       0       0       0
  5150 ;;      Temps:          0       0       0       0
  5151 ;;      Totals:         2       0       0       0
  5152 ;;Total ram usage:        2 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    1
  5155 ;; This function calls:
  5156 ;;		Nothing
  5157 ;; This function is called by:
  5158 ;;		_main
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           
  5163                           ;psect for function _GetAbs
  5164  0CE8                     _GetAbs:	
  5165                           
  5166                           ;gsk_algo_funcs.c: 56: if (a<0)
  5167                           
  5168                           ;incstack = 0
  5169                           ; Regs used in _GetAbs: [status]
  5170  0CE8  1FF5               	btfss	GetAbs@a+1,7
  5171  0CE9  0008               	return
  5172                           
  5173                           ;gsk_algo_funcs.c: 57: a=a*(-1);
  5174  0CEA  09F4               	comf	GetAbs@a,f
  5175  0CEB  09F5               	comf	GetAbs@a+1,f
  5176  0CEC  0AF4               	incf	GetAbs@a,f
  5177  0CED  1903               	skipnz
  5178  0CEE  0AF5               	incf	GetAbs@a+1,f
  5179  0CEF  0008               	return
  5180  0CF0                     __end_of_GetAbs:	
  5181                           ;gsk_algo_funcs.c: 58: return a;
  5182                           
  5183                           
  5184                           	psect	text17
  5185  0D75                     __ptext17:	
  5186 ;; *************** function _tc_int *****************
  5187 ;; Defined at:
  5188 ;;		line 196 in file "main.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;		None
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;		None
  5193 ;; Return value:  Size  Location     Type
  5194 ;;                  1    wreg      void 
  5195 ;; Registers used:
  5196 ;;		wreg
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMMON   BANK0   BANK1  BANK2l
  5202 ;;      Params:         0       0       0       0
  5203 ;;      Locals:         0       0       0       0
  5204 ;;      Temps:          4       0       0       0
  5205 ;;      Totals:         4       0       0       0
  5206 ;;Total ram usage:        4 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; This function calls:
  5209 ;;		Nothing
  5210 ;; This function is called by:
  5211 ;;		Interrupt level 1
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _tc_int
  5217  0D75                     _tc_int:	
  5218                           
  5219                           ;main.c: 197: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
  5220  0D75  1C0C               	btfss	12,0	;volatile
  5221  0D76  2D85               	goto	i1l692
  5222  0D77  1683               	bsf	3,5	;RP0=1, select bank1
  5223  0D78  1303               	bcf	3,6	;RP1=0, select bank1
  5224  0D79  1C0C               	btfss	12,0	;volatile
  5225  0D7A  2D85               	goto	i1l692
  5226                           
  5227                           ;main.c: 198: PIR1bits.TMR1IF = 0;
  5228  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
  5229  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
  5230  0D7D  100C               	bcf	12,0	;volatile
  5231                           
  5232                           ;main.c: 199: TMR1 -= 997;
  5233  0D7E  30E5               	movlw	229
  5234  0D7F  028E               	subwf	14,f	;volatile
  5235  0D80  3003               	movlw	3
  5236  0D81  1C03               	skipc
  5237  0D82  038F               	decf	15,f	;volatile
  5238  0D83  028F               	subwf	15,f	;volatile
  5239                           
  5240                           ;main.c: 200: FLAGS.bits.b5 = 1;
  5241  0D84  16EB               	bsf	_FLAGS,5	;volatile
  5242  0D85                     i1l692:	
  5243  0D85  0873               	movf	??_tc_int+3,w
  5244  0D86  1283               	bcf	3,5	;RP0=0, select bank0
  5245  0D87  00FF               	movwf	127
  5246  0D88  0872               	movf	??_tc_int+2,w
  5247  0D89  008A               	movwf	10
  5248  0D8A  0871               	movf	??_tc_int+1,w
  5249  0D8B  0084               	movwf	4
  5250  0D8C  0E70               	swapf	??_tc_int^(0+-128),w
  5251  0D8D  0083               	movwf	3
  5252  0D8E  0EFE               	swapf	126,f
  5253  0D8F  0E7E               	swapf	126,w
  5254  0D90  0009               	retfie
  5255  0D91                     __end_of_tc_int:	
  5256  007E                     btemp	set	126	;btemp
  5257  007E                     wtemp0	set	126
  5258                           
  5259                           	psect	intentry
  5260  0004                     __pintentry:	
  5261                           ;incstack = 0
  5262                           ; Regs used in _tc_int: [wreg]
  5263                           
  5264  0004                     interrupt_function:	
  5265  007E                     saved_w	set	btemp
  5266  0004  00FE               	movwf	btemp
  5267  0005  0E03               	swapf	3,w
  5268  0006  00F0               	movwf	??_tc_int
  5269  0007  0804               	movf	4,w
  5270  0008  00F1               	movwf	??_tc_int+1
  5271  0009  080A               	movf	10,w
  5272  000A  00F2               	movwf	??_tc_int+2
  5273  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5274  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5275  000D  087F               	movf	btemp+1,w
  5276  000E  00F3               	movwf	??_tc_int+3
  5277  000F  120A  158A  2D75   	ljmp	_tc_int


Data Sizes:
    Strings     0
    Constant    14
    Data        168
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80     75      77
    BANK1            80      0       0
    BANK2l           12      0       0

Pointer List with Targets:

    IsValidGPS@GPSData	PTR unsigned char  size(1) Largest target is 6
		 -> ReadGPSToS@Output(BANK0[6]), 

    UART_ReadValidTimeFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> ReadGPSToS@Output(BANK0[6]), 

    UART_ReadFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> ReadGPSToS@Output(BANK0[6]), 


Critical Paths under _main in COMMON

    _main->___almod
    _ReadVars->___bmul
    _ReadVars->_eeprom_read
    _ReadGPSToS->_UART_ReadValidTimeFromGPS_TO
    _UART_ReadValidTimeFromGPS_TO->_IsValidGPS
    _UART_ReadValidTimeFromGPS_TO->_UART_ReadFromGPS_TO
    _UART_ReadFromGPS_TO->_UART_Read_TO
    _GetCycle->_GetPrevCycle
    _GetCumulativePeriodsForStates->_GetPrevCycle

Critical Paths under _tc_int in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_ReadGPSToS
    _ReadVars->___bmul
    _ReadGPSToS->___lmul
    _UART_ReadValidTimeFromGPS_TO->_UART_ReadFromGPS_TO

Critical Paths under _tc_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK2l

    None.

Critical Paths under _tc_int in BANK2l

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                48    48      0    8643
                                             33 BANK0     42    42      0
                             _GetAbs
      _GetCumulativePeriodsForStates
                           _GetCycle
                         _ReadGPSToS
                           _ReadVars
                         _ResetTimer
                            ___almod
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4    1095
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___almod                                             11     3      8     402
                                              4 COMMON     3     3      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _ResetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            20    20      0    1582
                                              2 BANK0     20    20      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          2     2      0      31
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     721
                                              4 COMMON     2     1      1
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ReadGPSToS                                          21    17      4    2458
                                             12 BANK0     21    17      4
       _UART_ReadValidTimeFromGPS_TO
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8    1046
                                              4 COMMON     1     1      0
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_ReadValidTimeFromGPS_TO                         3     2      1    1052
                                              6 COMMON     1     0      1
                                              7 BANK0      2     2      0
                         _IsValidGPS
                _UART_ReadFromGPS_TO
 ---------------------------------------------------------------------------------
 (3) _UART_ReadFromGPS_TO                                  8     7      1     545
                                              5 COMMON     1     0      1
                                              0 BANK0      7     7      0
                       _UART_Read_TO
 ---------------------------------------------------------------------------------
 (4) _UART_Read_TO                                         1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _IsValidGPS                                           2     2      0     319
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GetCycle                                            12    12      0     449
                                              0 BANK0     12    12      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (1) _GetCumulativePeriodsForStates                        8     8      0     424
                                              0 BANK0      8     8      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (2) _GetPrevCycle                                         3     3      0      99
                                              4 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _GetAbs                                               2     0      2     226
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _tc_int                                               4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetAbs
   _GetCumulativePeriodsForStates
     _GetPrevCycle
   _GetCycle
     _GetPrevCycle
   _ReadGPSToS
     _UART_ReadValidTimeFromGPS_TO
       _IsValidGPS
       _UART_ReadFromGPS_TO
         _UART_Read_TO
     ___lmul
   _ReadVars
     ___bmul
     _eeprom_read
   _ResetTimer
   ___almod
   ___awdiv

 _tc_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2l               C      0       0       9        0.0%
BITBANK2l            C      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     4B      4D       5       96.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      57      10        0.0%
ABS                  0      0      57       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0      A7       0       65.2%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jun 13 15:03:05 2017

                                     _C 014C                                       _S 016B  
                                     pc 0002                          ___bmul@product 0020  
                           __CFG_CP$OFF 0000               UART_ReadFromGPS_TO@Output 0022  
                                    _RD 0C60                                      _WR 0C61  
                          ___awdiv@sign 0025                                      fsr 0004  
            UART_ReadFromGPS_TO@TimeOut 0075                                     l522 0E7E  
                                   l533 0D10                                     l536 0D1A  
                                   l705 0D5B                                     l646 0273  
                                   l676 0404                                     l669 03D2  
                                   l679 0486                                     l859 0740  
                                   _RA0 0028                                     _RA1 0029  
                                   _RA2 002A                                     _RA3 002B  
                                   _RA4 002C                                     _RC0 0038  
                                   _RA5 002D                                     _RC1 0039  
                                   _C_D 016F                                     _PEN 048A  
                          __CFG_CPD$OFF 0000                                     _SEN 0488  
                          main@SecError 0065                                     fsr0 0004  
                                   indf 0000                            __CFG_IESO$ON 0000  
                          __CFG_FOSC$HS 0000                       GetCycle@PrevCycle 002A  
                   _UART_ReadFromGPS_TO 0E25                       GetPrevCycle@cycle 0076  
                          __CFG_LVP$OFF 0000                        main@DiffInSecond 0067  
                                  l3003 0E71                                    l3015 0CF7  
                                  l3025 0D9B                                    l3113 0584  
                                  l3105 04D5                                    l2307 0D13  
                                  l3043 0D2A                                    l2317 0D1E  
                                  l3029 0DB1                                    l3133 0600  
                                  l3207 0723                                    l3039 0D24  
                                  l3127 05A6                                    l3161 0DF6  
                                  l3225 0E97                                    l3163 0E20  
                                  l3155 0DE7                                    l3251 0ED6  
                                  l3243 0EC3                                    l3235 0E9F  
                                  l3219 0E8C                                    l3403 026A  
                                  l3173 0EE2                                    l2381 07CE  
                                  l3093 04B8                                    l3237 0EAD  
                                  l3501 047A                                    l3183 0F74  
                                  l2375 07C0                                    l3247 0ECE  
                                  l3423 02DB                                    l3193 0FF6  
                                  l2393 07EA                                    l2369 07B4  
                                  l2641 0783                                    l3417 02D2  
                                  l3505 02A3                                    l3187 0FEA  
                                  l2387 07DC                                    l3099 04D0  
                                  l2635 0755                                    l3507 049D  
                                  l3451 0344                                    l3355 00B0  
                                  l3189 0FEE                                    l2637 0765  
                                  l2645 0790                                    l2629 074D  
                                  l3445 033B                                    l3429 0301  
                                  l3509 0299                                    l3365 00FA  
                                  l3373 00FD                                    l2399 07F8  
                                  l3471 03D3                                    l2649 079E  
                                  l3465 039F                                    l3457 0370  
                                  l3385 011C                                    l3483 0400  
                                  l3475 03EE                                    l3395 01D4  
                                  l3387 0131                                    l3379 0117  
                                  l3389 013E                                    l3479 03F7  
                                  l3497 0469                                    l3489 0414  
                                  l2993 0E67                                    l2995 0E6C  
                                  l2979 0E39                                    l2989 0E58  
                                  _BRGH 04C2                                    _CREN 00C4  
                                  u4015 0DB3                                    u3135 0759  
                                  u4025 0DBB                                    u3155 0773  
                                  u3165 0784                                    u4160 0537  
                                  u4225 05BF                                    u4161 0538  
                                  u4145 051F                                    u4170 0549  
                                  u4162 053D                                    u5034 039C  
                                  u4403 0FAD                                    u4235 05E8  
                                  u4171 054A                                    u4163 053E  
                                  u4155 0528                                    u5035 0399  
                                  u4172 054F                                    u4325 0EF0  
                                  u4173 0550                                    u4423 0FE8  
                                  u4415 0FB2                                    u4343 0F2E  
                                  u4335 0F08                                    u5064 03C7  
                                  u4185 0557                                    u5145 0456  
                                  u5065 03C4                                    u4363 0F69  
                                  u4355 0F33                                    u5155 0474  
                                  u4375 0F6E                                    u4535 0EA2  
                                  u5175 02B8                                    u4720 0072  
                                  u4721 0073                                    u4730 0084  
                                  u4722 0078                                    u4395 0F77  
                                  u4555 0EAE                                    u4731 0085  
                                  u4723 0079                                    u4732 008A  
                                  _RCEN 048B                                    _RCIF 0065  
                                  u4565 0EBA                                    u4813 0186  
                                  u4805 0160                                    u4733 008B  
                                  u4830 01C9                                    u4575 0EC4  
                                  u4831 01CA                                    u4832 01CF  
                                  u4833 01D0                                    u4825 01A3  
                                  u4850 021D                                    u4915 02DE  
                                  u4851 021E                                    u4860 022F  
                                  u4852 0223                                    u4861 0230  
                                  u4853 0224                                    u4845 01F7  
                                  u4862 0235                                    u4863 0236  
                                  u4783 012F                                    u4795 0148  
                                  u4965 0318                                    u4885 0287  
                                  u4995 0347                                    _TMR1 000E  
                                  _SPEN 00C7                                    _RSEN 0489  
                                  _TRMT 04C1                                    _TXEN 04C5  
                                  _SYNC 04C4                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000                                    _main 0021  
                                  btemp 007E                                    start 0012  
                  ?_UART_ReadFromGPS_TO 0075                       ___bmul@multiplier 0021  
                         __CFG_MCLRE$ON 0000                         __end_of___almod 07A7  
                                 ?_main 0070                                   _ACKEN 048C  
                                 _ACKDT 048D                         __end_of___awdiv 0EDB  
                                 _EEADR 010D                                   _BRG16 0C3B  
                         __CFG_WDTE$OFF 0000                                   _ANSEL 0188  
                                 _FLAGS 006B                    __end_of_GetPrevCycle 0CFD  
                                 _AUDIO 0167                         ___awdiv@divisor 0020  
                                 i1l692 0D85                         ___awdiv@counter 0024  
                                 _RCREG 001A                                   u476a1 00E1  
                                 u476a2 00EC                                   u476a3 00F7  
                                 u476b1 00E4                                   u476b2 00EF  
                                 _SPBRG 0099                                   _PORTA 0005  
                                 _PORTB 0006                                   _TRISA 0085  
                                 _TRISB 0086                                   _TRISC 0087  
                                 _TXREG 0019                     ___lmul@multiplicand 0024  
                            _IsValidGPS 07A7                                   _errno 0077  
                                 main@i 0068                                   main@j 0062  
                                 main@k 005A                                   main@l 0069  
                        __CFG_BOREN$OFF 0000                                   pclath 000A  
                                 status 0003                                   wtemp0 007E  
                            _ReadGPSToS 0605                        __end_of_GetCycle 1000  
                 ??_UART_ReadFromGPS_TO 0020                         __initialization 0015  
                          __end_of_main 04A4                        __end_of_ReadVars 0605  
         main@StateAudioSplOnOffCounter 0060                                  ??_main 0041  
                                _EEDATA 010C                                  _EECON1 018C  
                      ___awdiv@dividend 0022                                  _ANSELH 0189  
                                _SPBRGH 009A                                  _SSPADD 0093  
                                _TRISC3 043B                                  _TRISC4 043C  
                                _SSPCON 0014                                  _SSPBUF 0013  
                                _GetAbs 0CE8                              _ResetTimer 0D33  
                        __CFG_PWRTE$OFF 0000                    __size_of_eeprom_read 001B  
                                ___bmul 0D20                                  ___lmul 0D91  
                             ??___almod 0074                               ??___awdiv 0074  
                                _tc_int 0D75                        ___awdiv@quotient 0026  
                          __pdataEEDATA 0000                           ReadGPSToS@Sec 003D  
                                saved_w 007E                             ?_IsValidGPS 0070  
               __end_of__initialization 001D                   main@StateSecRemaining 0059  
                       eeprom_read@addr 0075                             ?_ReadGPSToS 002C  
  __end_ofUART_ReadFromGPS_TO@StartCode 080D            UART_ReadFromGPS_TO@StartCode 0806  
                     IsValidGPS@GPSData 0075                     ___bmul@multiplicand 0074  
                        __pcstackCOMMON 0070                            __pidataBANK0 07FB  
                 __size_of_GetPrevCycle 000D                               ?_GetCycle 0070  
                            __pbssBANK0 006B                               ?_ReadVars 0070  
                          _GetPrevCycle 0CF0                             ?_ResetTimer 0070  
                               ?_GetAbs 0074                     UART_Read_TO@TimeOut 0074  
                            __pmaintext 0021                  main@GPS_Non_Sync_Times 0058  
                               ?___bmul 0074                                 ?___lmul 0020  
                            __pintentry 0004                     __size_of_IsValidGPS 0054  
                        ___lmul@product 0028                                 ?_tc_int 0070  
      main@StateAudioNormalOnOffCounter 005E                     __size_of_ReadGPSToS 0129  
                               GetAbs@a 0074                              ??_GetCycle 0020  
                               _STATE_1 01AE                                 _STATE_2 0110  
                               _SSPCON2 0091                                 _SSPSTAT 0094  
                            __stringtab 0800                           ?_UART_Read_TO 0070  
                            ??_ReadVars 0022                         __size_of_GetAbs 0008  
                       __size_of___bmul 0013                                 ___almod 072E  
                               ___awdiv 0E80                         __size_of___lmul 0041  
                       __size_of_tc_int 001C                                 __ptext1 0E80  
                               __ptext2 072E                                 __ptext3 0D33  
                               __ptext4 04A4                                 __ptext5 0D5A  
                               __ptext6 0D20                                 __ptext7 0605  
                               __ptext8 0D91                                 __ptext9 0D46  
                             _T1CONbits 0010                     __size_of_ResetTimer 0013  
                  end_of_initialization 001D                          ??_UART_Read_TO 0074  
           __end_of_UART_ReadFromGPS_TO 0E80                   GetPrevCycle@PrevCycle 0075  
       ??_GetCumulativePeriodsForStates 0020                               GetCycle@i 002B  
  __end_of_UART_ReadValidTimeFromGPS_TO 0D5A   __size_of_UART_ReadValidTimeFromGPS_TO 0014  
          _UART_ReadValidTimeFromGPS_TO 0D46     UART_ReadValidTimeFromGPS_TO@TimeOut 0076  
                             _TRISAbits 0085                            ??_IsValidGPS 0074  
                          ??_ReadGPSToS 0030                           ??_eeprom_read 0074  
                        __end_of_GetAbs 0CF0                               ReadVars@i 0035  
                             ReadVars@j 0034           ?_UART_ReadValidTimeFromGPS_TO 0076  
                        __end_of___bmul 0D33                          __end_of___lmul 0DD2  
                         __pidataEEDATA 0000                      __end_of_IsValidGPS 07FB  
                        __end_of_tc_int 0D91                _STATE_CUMULATIVE_PERIODS 01EA  
                   start_initialization 0015                      __end_of_ReadGPSToS 072E  
     __end_ofUART_ReadFromGPS@StartCode 0814                       __size_of_GetCycle 0125  
                          ??_ResetTimer 0074                                ??_GetAbs 0076  
                     __size_of_ReadVars 0161   __end_of_GetCumulativePeriodsForStates 0E25  
__size_of_GetCumulativePeriodsForStates 0053           _GetCumulativePeriodsForStates 0DD2  
                              ??___bmul 0075                                ??___lmul 0074  
                   __end_of_eeprom_read 0D75                              init_fetch0 0CFD  
                     ReadGPSToS@TimeOut 0036                             __pdataBANK0 006C  
                              ??_tc_int 0070                    __end_of_UART_Read_TO 0D20  
           UART_ReadFromGPS_TO@TempChar 0025                             __pbssCOMMON 0077  
                             ___latbits 0002                 main@GPS_On_Time_Counter 0052  
                         __pcstackBANK0 0020                      __end_of_ResetTimer 0D46  
                main@State2OnOffCounter 005C                        IsValidGPS@Result 0074  
                              ?___almod 0020                         _PREV_CYCLE_TYPE 006C  
                              ?___awdiv 0020                        ___almod@dividend 0024  
                             __pstrings 0800          ??_UART_ReadValidTimeFromGPS_TO 0027  
                  UART_ReadFromGPS_TO@i 0023                       interrupt_function 0004  
                           _eeprom_read 0D5A                                _PIE1bits 008C  
                              _PIR1bits 000C                      main@OutForThePorts 0063  
        ?_GetCumulativePeriodsForStates 0070      UART_ReadValidTimeFromGPS_TO@Output 0028  
                           __stringbase 0805                               main@TempS 0054  
                              _GetCycle 0EDB                             _EE_Settings 0000  
                     ___lmul@multiplier 0020                                _ReadVars 04A4  
                         _STATE_PERIODS 0190            __size_of_UART_ReadFromGPS_TO 005B  
          main@TimeSinceTheStartOfCycle 004E                  UART_ReadFromGPS_TO@Pos 0026  
                 __size_of_UART_Read_TO 0012                        ReadGPSToS@Output 0037  
                      __size_of___almod 0079                        __size_of___awdiv 005B  
                    __end_of__stringtab 0806                                __ptext10 0E25  
                              __ptext11 0D0E                                __ptext12 07A7  
                              __ptext13 0EDB                                __ptext14 0DD2  
                              __ptext15 0CF0                                __ptext16 0CE8  
                              __ptext17 0D75                       __CFG_BOR4V$BOR21V 0000  
                       ___almod@divisor 0020                         ___almod@counter 0075  
                          _UART_Read_TO 0D0E                           __size_of_main 0483  
                         ?_GetPrevCycle 0070                              _CYCLE_TYPE 0079  
             UART_ReadFromGPS@StartCode 080D          GetCumulativePeriodsForStates@i 0027  
        GetCumulativePeriodsForStates@j 0026                            _STATE_BREAKS 0164  
                            _INTCONbits 000B                                init_ram0 0D01  
                              intlevel1 0000                          ??_GetPrevCycle 0074  
                             stringcode 0800                                stringdir 0800  
                              stringtab 0800                            ___almod@sign 0076  
                          ?_eeprom_read 0070  
