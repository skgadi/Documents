

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 06 21:49:50 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text24,local,class=CODE,merge=1,delta=2
    24                           	psect	text29,local,class=CODE,merge=1,delta=2
    25                           	psect	text32,local,class=CODE,merge=1,delta=2
    26                           	psect	pa_nodes,global,class=CODE,delta=2
    27                           	dabs	1,0x190,60,_STATE_3
    28                           	dabs	1,0x1CC,30,_STATE_PERIODS
    29                           	dabs	1,0x20,12,_C
    30                           	dabs	1,0xA0,60,_STATE_1
    31                           	dabs	1,0x110,60,_STATE_2
    32                           	dabs	1,0x7E,2
    33  0000                     	;# 
    34  0001                     	;# 
    35  0002                     	;# 
    36  0003                     	;# 
    37  0004                     	;# 
    38  0005                     	;# 
    39  0006                     	;# 
    40  0007                     	;# 
    41  0009                     	;# 
    42  000A                     	;# 
    43  000B                     	;# 
    44  000C                     	;# 
    45  000D                     	;# 
    46  000E                     	;# 
    47  000E                     	;# 
    48  000F                     	;# 
    49  0010                     	;# 
    50  0011                     	;# 
    51  0012                     	;# 
    52  0013                     	;# 
    53  0014                     	;# 
    54  0015                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0017                     	;# 
    58  0018                     	;# 
    59  0019                     	;# 
    60  001A                     	;# 
    61  001B                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  001D                     	;# 
    65  001E                     	;# 
    66  001F                     	;# 
    67  0081                     	;# 
    68  0085                     	;# 
    69  0086                     	;# 
    70  0087                     	;# 
    71  0089                     	;# 
    72  008C                     	;# 
    73  008D                     	;# 
    74  008E                     	;# 
    75  008F                     	;# 
    76  0090                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0093                     	;# 
    80  0093                     	;# 
    81  0093                     	;# 
    82  0094                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0097                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009C                     	;# 
    91  009D                     	;# 
    92  009E                     	;# 
    93  009F                     	;# 
    94  0105                     	;# 
    95  0107                     	;# 
    96  0108                     	;# 
    97  0109                     	;# 
    98  010C                     	;# 
    99  010C                     	;# 
   100  010D                     	;# 
   101  010E                     	;# 
   102  010F                     	;# 
   103  0185                     	;# 
   104  0187                     	;# 
   105  0188                     	;# 
   106  0189                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0089                     	;# 
   148  008C                     	;# 
   149  008D                     	;# 
   150  008E                     	;# 
   151  008F                     	;# 
   152  0090                     	;# 
   153  0091                     	;# 
   154  0092                     	;# 
   155  0093                     	;# 
   156  0093                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0095                     	;# 
   160  0096                     	;# 
   161  0097                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009A                     	;# 
   165  009B                     	;# 
   166  009C                     	;# 
   167  009D                     	;# 
   168  009E                     	;# 
   169  009F                     	;# 
   170  0105                     	;# 
   171  0107                     	;# 
   172  0108                     	;# 
   173  0109                     	;# 
   174  010C                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  0185                     	;# 
   180  0187                     	;# 
   181  0188                     	;# 
   182  0189                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0009                     	;# 
   194  000A                     	;# 
   195  000B                     	;# 
   196  000C                     	;# 
   197  000D                     	;# 
   198  000E                     	;# 
   199  000E                     	;# 
   200  000F                     	;# 
   201  0010                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0013                     	;# 
   205  0014                     	;# 
   206  0015                     	;# 
   207  0015                     	;# 
   208  0016                     	;# 
   209  0017                     	;# 
   210  0018                     	;# 
   211  0019                     	;# 
   212  001A                     	;# 
   213  001B                     	;# 
   214  001B                     	;# 
   215  001C                     	;# 
   216  001D                     	;# 
   217  001E                     	;# 
   218  001F                     	;# 
   219  0081                     	;# 
   220  0085                     	;# 
   221  0086                     	;# 
   222  0087                     	;# 
   223  0089                     	;# 
   224  008C                     	;# 
   225  008D                     	;# 
   226  008E                     	;# 
   227  008F                     	;# 
   228  0090                     	;# 
   229  0091                     	;# 
   230  0092                     	;# 
   231  0093                     	;# 
   232  0093                     	;# 
   233  0093                     	;# 
   234  0094                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0098                     	;# 
   239  0099                     	;# 
   240  009A                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  009F                     	;# 
   246  0105                     	;# 
   247  0107                     	;# 
   248  0108                     	;# 
   249  0109                     	;# 
   250  010C                     	;# 
   251  010C                     	;# 
   252  010D                     	;# 
   253  010E                     	;# 
   254  010F                     	;# 
   255  0185                     	;# 
   256  0187                     	;# 
   257  0188                     	;# 
   258  0189                     	;# 
   259  018C                     	;# 
   260  018D                     	;# 
   261  0000                     	;# 
   262  0001                     	;# 
   263  0002                     	;# 
   264  0003                     	;# 
   265  0004                     	;# 
   266  0005                     	;# 
   267  0006                     	;# 
   268  0007                     	;# 
   269  0009                     	;# 
   270  000A                     	;# 
   271  000B                     	;# 
   272  000C                     	;# 
   273  000D                     	;# 
   274  000E                     	;# 
   275  000E                     	;# 
   276  000F                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0013                     	;# 
   281  0014                     	;# 
   282  0015                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001D                     	;# 
   293  001E                     	;# 
   294  001F                     	;# 
   295  0081                     	;# 
   296  0085                     	;# 
   297  0086                     	;# 
   298  0087                     	;# 
   299  0089                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  008F                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0093                     	;# 
   308  0093                     	;# 
   309  0093                     	;# 
   310  0094                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0098                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  009F                     	;# 
   322  0105                     	;# 
   323  0107                     	;# 
   324  0108                     	;# 
   325  0109                     	;# 
   326  010C                     	;# 
   327  010C                     	;# 
   328  010D                     	;# 
   329  010E                     	;# 
   330  010F                     	;# 
   331  0185                     	;# 
   332  0187                     	;# 
   333  0188                     	;# 
   334  0189                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  0000                     	;# 
   338  0001                     	;# 
   339  0002                     	;# 
   340  0003                     	;# 
   341  0004                     	;# 
   342  0005                     	;# 
   343  0006                     	;# 
   344  0007                     	;# 
   345  0009                     	;# 
   346  000A                     	;# 
   347  000B                     	;# 
   348  000C                     	;# 
   349  000D                     	;# 
   350  000E                     	;# 
   351  000E                     	;# 
   352  000F                     	;# 
   353  0010                     	;# 
   354  0011                     	;# 
   355  0012                     	;# 
   356  0013                     	;# 
   357  0014                     	;# 
   358  0015                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0017                     	;# 
   362  0018                     	;# 
   363  0019                     	;# 
   364  001A                     	;# 
   365  001B                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  001D                     	;# 
   369  001E                     	;# 
   370  001F                     	;# 
   371  0081                     	;# 
   372  0085                     	;# 
   373  0086                     	;# 
   374  0087                     	;# 
   375  0089                     	;# 
   376  008C                     	;# 
   377  008D                     	;# 
   378  008E                     	;# 
   379  008F                     	;# 
   380  0090                     	;# 
   381  0091                     	;# 
   382  0092                     	;# 
   383  0093                     	;# 
   384  0093                     	;# 
   385  0093                     	;# 
   386  0094                     	;# 
   387  0095                     	;# 
   388  0096                     	;# 
   389  0097                     	;# 
   390  0098                     	;# 
   391  0099                     	;# 
   392  009A                     	;# 
   393  009B                     	;# 
   394  009C                     	;# 
   395  009D                     	;# 
   396  009E                     	;# 
   397  009F                     	;# 
   398  0105                     	;# 
   399  0107                     	;# 
   400  0108                     	;# 
   401  0109                     	;# 
   402  010C                     	;# 
   403  010C                     	;# 
   404  010D                     	;# 
   405  010E                     	;# 
   406  010F                     	;# 
   407  0185                     	;# 
   408  0187                     	;# 
   409  0188                     	;# 
   410  0189                     	;# 
   411  018C                     	;# 
   412  018D                     	;# 
   413  0000                     	;# 
   414  0001                     	;# 
   415  0002                     	;# 
   416  0003                     	;# 
   417  0004                     	;# 
   418  0005                     	;# 
   419  0006                     	;# 
   420  0007                     	;# 
   421  0009                     	;# 
   422  000A                     	;# 
   423  000B                     	;# 
   424  000C                     	;# 
   425  000D                     	;# 
   426  000E                     	;# 
   427  000E                     	;# 
   428  000F                     	;# 
   429  0010                     	;# 
   430  0011                     	;# 
   431  0012                     	;# 
   432  0013                     	;# 
   433  0014                     	;# 
   434  0015                     	;# 
   435  0015                     	;# 
   436  0016                     	;# 
   437  0017                     	;# 
   438  0018                     	;# 
   439  0019                     	;# 
   440  001A                     	;# 
   441  001B                     	;# 
   442  001B                     	;# 
   443  001C                     	;# 
   444  001D                     	;# 
   445  001E                     	;# 
   446  001F                     	;# 
   447  0081                     	;# 
   448  0085                     	;# 
   449  0086                     	;# 
   450  0087                     	;# 
   451  0089                     	;# 
   452  008C                     	;# 
   453  008D                     	;# 
   454  008E                     	;# 
   455  008F                     	;# 
   456  0090                     	;# 
   457  0091                     	;# 
   458  0092                     	;# 
   459  0093                     	;# 
   460  0093                     	;# 
   461  0093                     	;# 
   462  0094                     	;# 
   463  0095                     	;# 
   464  0096                     	;# 
   465  0097                     	;# 
   466  0098                     	;# 
   467  0099                     	;# 
   468  009A                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  009F                     	;# 
   474  0105                     	;# 
   475  0107                     	;# 
   476  0108                     	;# 
   477  0109                     	;# 
   478  010C                     	;# 
   479  010C                     	;# 
   480  010D                     	;# 
   481  010E                     	;# 
   482  010F                     	;# 
   483  0185                     	;# 
   484  0187                     	;# 
   485  0188                     	;# 
   486  0189                     	;# 
   487  018C                     	;# 
   488  018D                     	;# 
   489                           
   490                           	psect	idataBANK0
   491  0000                     __pidataBANK0:	
   492                           
   493                           	psect	idataEEDATA
   494  0000                     __pidataEEDATA:	
   495  0000                     _EE_STATES:	
   496                           ;initializer for _EE_STATES
   497                           
   498  0000  000A               	db	10
   499  0001  0008               	db	8
   500  0002  0009               	db	9
   501  0003  0002               	db	2
   502  0004  0000               	db	0
   503  0005  0000               	db	0
   504  0006  0000               	db	0
   505  0007  0003               	db	3
   506  0008  000C               	db	12
   507  0009  0009               	db	9
   508  000A  0000               	db	0
   509  000B  0000               	db	0
   510  000C  0000               	db	0
   511  000D  0000               	db	0
   512  000E  000A               	db	10
   513  000F  0001               	db	1
   514  0010  0009               	db	9
   515  0011  0000               	db	0
   516  0012  0020               	db	32
   517  0013  0000               	db	0
   518  0014  0000               	db	0
   519  0015  0003               	db	3
   520  0016  0001               	db	1
   521  0017  000D               	db	13
   522  0018  0000               	db	0
   523  0019  0000               	db	0
   524  001A  0000               	db	0
   525  001B  0000               	db	0
   526  001C  000A               	db	10
   527  001D  0009               	db	9
   528  001E  0008               	db	8
   529  001F  0010               	db	16
   530  0020  0000               	db	0
   531  0021  0000               	db	0
   532  0022  0000               	db	0
   533  0023  0003               	db	3
   534  0024  0009               	db	9
   535  0025  000A               	db	10
   536  0026  0000               	db	0
   537  0027  0000               	db	0
   538  0028  0000               	db	0
   539  0029  0000               	db	0
   540  002A  000A               	db	10
   541  002B  0009               	db	9
   542  002C  0001               	db	1
   543  002D  0000               	db	0
   544  002E  0000               	db	0
   545  002F  0020               	db	32
   546  0030  0000               	db	0
   547  0031  0003               	db	3
   548  0032  0009               	db	9
   549  0033  0011               	db	17
   550  0034  0000               	db	0
   551  0035  0000               	db	0
   552  0036  0000               	db	0
   553  0037  0000               	db	0
   554  0038  000A               	db	10
   555  0039  0000               	db	0
   556  003A  0000               	db	0
   557  003B  0000               	db	0
   558  003C  0000               	db	0
   559  003D  0000               	db	0
   560  003E  0000               	db	0
   561  003F  0003               	db	3
   562  0040  0000               	db	0
   563  0041  0000               	db	0
   564  0042  0000               	db	0
   565  0043  0000               	db	0
   566  0044  0000               	db	0
   567  0045  0000               	db	0
   568  0046  000A               	db	10
   569  0047  0000               	db	0
   570  0048  0000               	db	0
   571  0049  0000               	db	0
   572  004A  0000               	db	0
   573  004B  0000               	db	0
   574  004C  0000               	db	0
   575  004D  0003               	db	3
   576  004E  0000               	db	0
   577  004F  0000               	db	0
   578  0050  0000               	db	0
   579  0051  0000               	db	0
   580  0052  0000               	db	0
   581  0053  0000               	db	0
   582  0054  000A               	db	10
   583  0055  0000               	db	0
   584  0056  0000               	db	0
   585  0057  0000               	db	0
   586  0058  0000               	db	0
   587  0059  0000               	db	0
   588  005A  0000               	db	0
   589  005B  0003               	db	3
   590  005C  0000               	db	0
   591  005D  0000               	db	0
   592  005E  0000               	db	0
   593  005F  0000               	db	0
   594  0060  0000               	db	0
   595  0061  0000               	db	0
   596  0062  000A               	db	10
   597  0063  0000               	db	0
   598  0064  0000               	db	0
   599  0065  0000               	db	0
   600  0066  0000               	db	0
   601  0067  0000               	db	0
   602  0068  0000               	db	0
   603  0069  0003               	db	3
   604  006A  0000               	db	0
   605  006B  0000               	db	0
   606  006C  0000               	db	0
   607  006D  0000               	db	0
   608  006E  0000               	db	0
   609  006F  0000               	db	0
   610  0070  000A               	db	10
   611  0071  0000               	db	0
   612  0072  0000               	db	0
   613  0073  0000               	db	0
   614  0074  0000               	db	0
   615  0075  0000               	db	0
   616  0076  0000               	db	0
   617  0077  0003               	db	3
   618  0078  0000               	db	0
   619  0079  0000               	db	0
   620  007A  0000               	db	0
   621  007B  0000               	db	0
   622  007C  0000               	db	0
   623  007D  0000               	db	0
   624  007E  000A               	db	10
   625  007F  0000               	db	0
   626  0080  0000               	db	0
   627  0081  0000               	db	0
   628  0082  0000               	db	0
   629  0083  0000               	db	0
   630  0084  0000               	db	0
   631  0085  0003               	db	3
   632  0086  0000               	db	0
   633  0087  0000               	db	0
   634  0088  0000               	db	0
   635  0089  0000               	db	0
   636  008A  0000               	db	0
   637  008B  0000               	db	0
   638  008C  000A               	db	10
   639  008D  0000               	db	0
   640  008E  0000               	db	0
   641  008F  0000               	db	0
   642  0090  0000               	db	0
   643  0091  0000               	db	0
   644  0092  0000               	db	0
   645  0093  0003               	db	3
   646  0094  0000               	db	0
   647  0095  0000               	db	0
   648  0096  0000               	db	0
   649  0097  0000               	db	0
   650  0098  0000               	db	0
   651  0099  0000               	db	0
   652  009A  000A               	db	10
   653  009B  0000               	db	0
   654  009C  0000               	db	0
   655  009D  0000               	db	0
   656  009E  0000               	db	0
   657  009F  0000               	db	0
   658  00A0  0000               	db	0
   659  00A1  0003               	db	3
   660  00A2  0000               	db	0
   661  00A3  0000               	db	0
   662  00A4  0000               	db	0
   663  00A5  0000               	db	0
   664  00A6  0000               	db	0
   665  00A7  0000               	db	0
   666  00A8  0000               	db	0
   667  00A9  0000               	db	0
   668  00AA  0000               	db	0
   669  00AB  0000               	db	0
   670  00AC  0000               	db	0
   671  00AD  0000               	db	0
   672  00AE  0000               	db	0
   673  00AF  0000               	db	0
   674  00B0  0000               	db	0
   675  00B1  0000               	db	0
   676  00B2  0000               	db	0
   677  00B3  0000               	db	0
   678  00B4  0000               	db	0
   679  00B5  0000               	db	0
   680  00B6  0000               	db	0
   681  00B7  0000               	db	0
   682  00B8  0000               	db	0
   683  00B9  0000               	db	0
   684  00BA  0000               	db	0
   685  00BB  0000               	db	0
   686  00BC  0000               	db	0
   687  00BD  0000               	db	0
   688  00BE  0000               	db	0
   689  00BF  0000               	db	0
   690  00C0  0000               	db	0
   691  00C1  0000               	db	0
   692  00C2  0000               	db	0
   693  00C3  0000               	db	0
   694  00C4  0000               	db	0
   695  00C5  0000               	db	0
   696  00C6  0000               	db	0
   697  00C7  0000               	db	0
   698  00C8  0000               	db	0
   699  00C9  0000               	db	0
   700  00CA  0000               	db	0
   701  00CB  0000               	db	0
   702  00CC  0000               	db	0
   703  00CD  0000               	db	0
   704  00CE  0000               	db	0
   705  00CF  0000               	db	0
   706  00D0  0000               	db	0
   707  00D1  0000               	db	0
   708  00D2                     _EE_C:	
   709                           ;initializer for _EE_C
   710                           
   711  00D2  0001               	db	1
   712  00D3  0051               	db	81
   713  00D4  007F               	db	127
   714  00D5  0000               	db	0
   715  00D6  0027               	db	39
   716  00D7  000F               	db	15
   717  00D8  0000               	db	0
   718  00D9  0075               	db	117
   719  00DA  002F               	db	47
   720  00DB                     _EE_STATE_BREAKS:	
   721                           ;initializer for _EE_STATE_BREAKS
   722                           
   723  00DB  0008               	db	8
   724  00DC  000F               	db	15
   725  00DD  001E               	db	30
   726  0006                     _PORTB	set	6
   727  0007                     _PORTC	set	7
   728  0013                     _SSPBUF	set	19
   729  0014                     _SSPCON	set	20
   730  0028                     _RA0	set	40
   731  0029                     _RA1	set	41
   732  002A                     _RA2	set	42
   733  002B                     _RA3	set	43
   734  002C                     _RA4	set	44
   735  002D                     _RA5	set	45
   736  0039                     _RC1	set	57
   737  0093                     _SSPADD	set	147
   738  0091                     _SSPCON2	set	145
   739  0094                     _SSPSTAT	set	148
   740  0085                     _TRISAbits	set	133
   741  048D                     _ACKDT	set	1165
   742  048C                     _ACKEN	set	1164
   743  048A                     _PEN	set	1162
   744  048B                     _RCEN	set	1163
   745  0488                     _SEN	set	1160
   746  043B                     _TRISC3	set	1083
   747  043C                     _TRISC4	set	1084
   748  010D                     _EEADR	set	269
   749  010C                     _EEDATA	set	268
   750  0188                     _ANSEL	set	392
   751  0189                     _ANSELH	set	393
   752  018C                     _EECON1	set	396
   753  0C60                     _RD	set	3168
   754  0C61                     _WR	set	3169
   755                           
   756                           	psect	strings
   757  0800                     __pstrings:	
   758  0800                     stringtab:	
   759  0800                     __stringtab:	
   760  0800                     stringcode:	
   761                           ;	String table - string pointers are 1 byte each
   762                           
   763  0800                     stringdir:	
   764  0800  3008               	movlw	high stringdir
   765  0801  008A               	movwf	10
   766  0802  0804               	movf	4,w
   767  0803  0A84               	incf	4,f
   768  0804  0782               	addwf	2,f
   769  0805                     __stringbase:	
   770  0805  3400               	retlw	0
   771  0806                     __end_of__stringtab:	
   772  0806                     STR_2:	
   773  0806  3443               	retlw	67	;'C'
   774  0807  342D               	retlw	45	;'-'
   775  0808  3453               	retlw	83	;'S'
   776  0809  3474               	retlw	116	;'t'
   777  080A  342D               	retlw	45	;'-'
   778  080B  3453               	retlw	83	;'S'
   779  080C  3465               	retlw	101	;'e'
   780  080D  342F               	retlw	47	;'/'
   781  080E  3450               	retlw	80	;'P'
   782  080F  3472               	retlw	114	;'r'
   783  0810  3420               	retlw	32	;' '
   784  0811  3400               	retlw	0
   785  0812                     STR_1:	
   786  0812  3420               	retlw	32	;' '
   787  0813  3420               	retlw	32	;' '
   788  0814  3420               	retlw	32	;' '
   789  0815  342D               	retlw	45	;'-'
   790  0816  3420               	retlw	32	;' '
   791  0817  3420               	retlw	32	;' '
   792  0818  3420               	retlw	32	;' '
   793  0819  3400               	retlw	0
   794                           
   795                           ; #config settings
   796  0000                     
   797                           	psect	cinit
   798  07E8                     start_initialization:	
   799  07E8                     __initialization:	
   800                           
   801                           ;initializer for _PREV_CYCLE_TYPE
   802  07E8  3002               	movlw	2
   803  07E9  00EF               	movwf	__pdataBANK0& (0+127)
   804                           
   805                           ; Clear objects allocated to BANK1
   806  07EA  1683               	bsf	3,5	;RP0=1, select bank1
   807  07EB  01DC               	clrf	__pbssBANK1& (0+127)
   808  07EC  01DD               	clrf	(__pbssBANK1+1)& (0+127)
   809  07ED  01DE               	clrf	(__pbssBANK1+2)& (0+127)
   810  07EE  01DF               	clrf	(__pbssBANK1+3)& (0+127)
   811  07EF  01E0               	clrf	(__pbssBANK1+4)& (0+127)
   812  07F0  01E1               	clrf	(__pbssBANK1+5)& (0+127)
   813  07F1  01E2               	clrf	(__pbssBANK1+6)& (0+127)
   814  07F2  01E3               	clrf	(__pbssBANK1+7)& (0+127)
   815  07F3  01E4               	clrf	(__pbssBANK1+8)& (0+127)
   816  07F4  01E5               	clrf	(__pbssBANK1+9)& (0+127)
   817  07F5  01E6               	clrf	(__pbssBANK1+10)& (0+127)
   818                           
   819                           ; Clear objects allocated to BANK0
   820  07F6  1283               	bcf	3,5	;RP0=0, select bank0
   821  07F7  01EA               	clrf	__pbssBANK0& (0+127)
   822  07F8  01EB               	clrf	(__pbssBANK0+1)& (0+127)
   823  07F9  01EC               	clrf	(__pbssBANK0+2)& (0+127)
   824  07FA  01ED               	clrf	(__pbssBANK0+3)& (0+127)
   825  07FB  01EE               	clrf	(__pbssBANK0+4)& (0+127)
   826  07FC                     end_of_initialization:	
   827                           ;End of C runtime variable initialization code
   828                           
   829  07FC                     __end_of__initialization:	
   830  07FC  0183               	clrf	3
   831  07FD  120A  118A  28AC   	ljmp	_main	;jump to C main() function
   832                           
   833                           	psect	bssEEDATA
   834  00DE                     __pbssEEDATA:	
   835  00DE                     _EE_C_D:	
   836  00DE  0000               	db	0
   837                           
   838                           	psect	dataEEDATA
   839  0000                     __pdataEEDATA:	
   840                           
   841                           	psect	bssBANK0
   842  006A                     __pbssBANK0:	
   843  006A                     _S:	
   844  006A                     	ds	4
   845  006E                     _CYCLE_TYPE:	
   846  006E                     	ds	1
   847                           
   848                           	psect	dataBANK0
   849  006F                     __pdataBANK0:	
   850  006F                     _PREV_CYCLE_TYPE:	
   851  006F                     	ds	1
   852                           
   853                           	psect	bssBANK1
   854  00DC                     __pbssBANK1:	
   855  00DC                     _STATE_CUMULATIVE_PERIODS:	
   856  00DC                     	ds	6
   857  00E2                     _STATE_BREAKS:	
   858  00E2                     	ds	3
   859  00E5                     _CONFIG0:	
   860  00E5                     	ds	1
   861  00E6                     _C_D:	
   862  00E6                     	ds	1
   863                           
   864                           	psect	inittext
   865  0004                     init_fetch0:	
   866                           ;	Called with low address in FSR and high address in W
   867                           
   868  0004  087E               	movf	126,w
   869  0005  008A               	movwf	10
   870  0006  087F               	movf	127,w
   871  0007  0082               	movwf	2
   872  0008                     init_ram0:	
   873                           ;Called with:
   874                           ;	high address of idata address in btemp 
   875                           ;	low address of idata address in btemp+1 
   876                           ;	low address of data in FSR
   877                           ;	high address + 1 of data in btemp-1
   878                           
   879  0008  2004  120A  118A   	fcall	init_fetch0
   880  000B  0080               	movwf	0
   881  000C  0A84               	incf	4,f
   882  000D  0804               	movf	4,w
   883  000E  067D               	xorwf	125,w
   884  000F  1903               	btfsc	3,2
   885  0010  3400               	retlw	0
   886  0011  0AFF               	incf	127,f
   887  0012  1903               	btfsc	3,2
   888  0013  0AFE               	incf	126,f
   889  0014  2808               	goto	init_ram0
   890                           
   891                           	psect	cstackCOMMON
   892  0070                     __pcstackCOMMON:	
   893  0070                     ?_Lcd_Delay5500us:	
   894  0070                     ??_Lcd_Delay5500us:	
   895                           ; 1 bytes @ 0x0
   896                           
   897  0070                     ?_Lcd_Delay5us:	
   898                           ; 1 bytes @ 0x0
   899                           
   900  0070                     ??_Lcd_Delay5us:	
   901                           ; 1 bytes @ 0x0
   902                           
   903  0070                     ?_Lcd_Command:	
   904                           ; 1 bytes @ 0x0
   905                           
   906  0070                     ??_Lcd_Command:	
   907                           ; 1 bytes @ 0x0
   908                           
   909  0070                     ?_Lcd_CharCP:	
   910                           ; 1 bytes @ 0x0
   911                           
   912  0070                     ??_Lcd_CharCP:	
   913                           ; 1 bytes @ 0x0
   914                           
   915  0070                     ?_eeprom_read:	
   916                           ; 1 bytes @ 0x0
   917                           
   918  0070                     ??_eeprom_read:	
   919                           ; 1 bytes @ 0x0
   920                           
   921  0070                     ?_GetPrevCycle:	
   922                           ; 1 bytes @ 0x0
   923                           
   924  0070                     ??_GetPrevCycle:	
   925                           ; 1 bytes @ 0x0
   926                           
   927  0070                     ?_Lcd_Init:	
   928                           ; 1 bytes @ 0x0
   929                           
   930  0070                     ?_ReadVars:	
   931                           ; 1 bytes @ 0x0
   932                           
   933  0070                     ?_I2C_Master_Wait:	
   934                           ; 1 bytes @ 0x0
   935                           
   936  0070                     ??_I2C_Master_Wait:	
   937                           ; 1 bytes @ 0x0
   938                           
   939  0070                     ?_I2C_Master_Start:	
   940                           ; 1 bytes @ 0x0
   941                           
   942  0070                     ??_I2C_Master_Start:	
   943                           ; 1 bytes @ 0x0
   944                           
   945  0070                     ?_I2C_Master_Stop:	
   946                           ; 1 bytes @ 0x0
   947                           
   948  0070                     ??_I2C_Master_Stop:	
   949                           ; 1 bytes @ 0x0
   950                           
   951  0070                     ?_I2C_Master_Write:	
   952                           ; 1 bytes @ 0x0
   953                           
   954  0070                     ?_GetCumulativePeriodsForStates:	
   955                           ; 1 bytes @ 0x0
   956                           
   957  0070                     ?_GetCycle:	
   958                           ; 1 bytes @ 0x0
   959                           
   960  0070                     ?_SwitchGPS:	
   961                           ; 1 bytes @ 0x0
   962                           
   963  0070                     ??_SwitchGPS:	
   964                           ; 1 bytes @ 0x0
   965                           
   966  0070                     ?_main:	
   967                           ; 1 bytes @ 0x0
   968                           
   969  0070                     ?_I2C_Master_Read:	
   970                           ; 1 bytes @ 0x0
   971                           
   972  0070                     ?___wmul:	
   973                           ; 2 bytes @ 0x0
   974                           
   975  0070                     ?___ftpack:	
   976                           ; 2 bytes @ 0x0
   977                           
   978  0070                     ?___lmul:	
   979                           ; 3 bytes @ 0x0
   980                           
   981  0070                     ?___aldiv:	
   982                           ; 4 bytes @ 0x0
   983                           
   984  0070                     ?___almod:	
   985                           ; 4 bytes @ 0x0
   986                           
   987  0070                     ?___lldiv:	
   988                           ; 4 bytes @ 0x0
   989                           
   990  0070                     GetPrevCycle@PrevCycle:	
   991                           ; 4 bytes @ 0x0
   992                           
   993  0070                     SwitchGPS@a:	
   994                           ; 1 bytes @ 0x0
   995                           
   996  0070                     eeprom_read@addr:	
   997                           ; 1 bytes @ 0x0
   998                           
   999  0070                     I2C_Master_Write@d:	
  1000                           ; 1 bytes @ 0x0
  1001                           
  1002  0070                     I2C_Master_Read@a:	
  1003                           ; 2 bytes @ 0x0
  1004                           
  1005  0070                     ___wmul@multiplier:	
  1006                           ; 2 bytes @ 0x0
  1007                           
  1008  0070                     ___ftpack@arg:	
  1009                           ; 2 bytes @ 0x0
  1010                           
  1011  0070                     ___lmul@multiplier:	
  1012                           ; 3 bytes @ 0x0
  1013                           
  1014  0070                     ___aldiv@divisor:	
  1015                           ; 4 bytes @ 0x0
  1016                           
  1017  0070                     ___almod@divisor:	
  1018                           ; 4 bytes @ 0x0
  1019                           
  1020  0070                     ___lldiv@divisor:	
  1021                           ; 4 bytes @ 0x0
  1022                           
  1023                           
  1024                           ; 4 bytes @ 0x0
  1025  0070                     	ds	1
  1026  0071                     Lcd_CharCP@c:	
  1027  0071                     Lcd_Command@command:	
  1028                           ; 1 bytes @ 0x1
  1029                           
  1030  0071                     GetPrevCycle@cycle:	
  1031                           ; 1 bytes @ 0x1
  1032                           
  1033                           
  1034                           ; 1 bytes @ 0x1
  1035  0071                     	ds	1
  1036  0072                     ??_Lcd_Init:	
  1037  0072                     ?_Lcd_Text:	
  1038                           ; 1 bytes @ 0x2
  1039                           
  1040  0072                     ??_I2C_Master_Write:	
  1041                           ; 1 bytes @ 0x2
  1042                           
  1043  0072                     ??_I2C_Master_Read:	
  1044                           ; 1 bytes @ 0x2
  1045                           
  1046  0072                     ??_GetCumulativePeriodsForStates:	
  1047                           ; 1 bytes @ 0x2
  1048                           
  1049  0072                     ??_GetCycle:	
  1050                           ; 1 bytes @ 0x2
  1051                           
  1052  0072                     Lcd_Init@data:	
  1053                           ; 1 bytes @ 0x2
  1054                           
  1055  0072                     Lcd_Text@x:	
  1056                           ; 1 bytes @ 0x2
  1057                           
  1058  0072                     I2C_Master_Read@temp:	
  1059                           ; 1 bytes @ 0x2
  1060                           
  1061  0072                     ___wmul@multiplicand:	
  1062                           ; 2 bytes @ 0x2
  1063                           
  1064                           
  1065                           ; 2 bytes @ 0x2
  1066  0072                     	ds	1
  1067  0073                     Lcd_Text@buffer:	
  1068  0073                     ___ftpack@exp:	
  1069                           ; 1 bytes @ 0x3
  1070                           
  1071                           
  1072                           ; 1 bytes @ 0x3
  1073  0073                     	ds	1
  1074  0074                     ?_I2C_ReadAtAddress:	
  1075  0074                     ??_Lcd_Text:	
  1076                           ; 1 bytes @ 0x4
  1077                           
  1078  0074                     ??___wmul:	
  1079                           ; 1 bytes @ 0x4
  1080                           
  1081  0074                     Lcd_Text@y:	
  1082                           ; 1 bytes @ 0x4
  1083                           
  1084  0074                     I2C_ReadAtAddress@IntAdd:	
  1085                           ; 1 bytes @ 0x4
  1086                           
  1087  0074                     ___ftpack@sign:	
  1088                           ; 1 bytes @ 0x4
  1089                           
  1090  0074                     ___wmul@product:	
  1091                           ; 1 bytes @ 0x4
  1092                           
  1093  0074                     ___lmul@multiplicand:	
  1094                           ; 2 bytes @ 0x4
  1095                           
  1096  0074                     ___aldiv@dividend:	
  1097                           ; 4 bytes @ 0x4
  1098                           
  1099  0074                     ___almod@dividend:	
  1100                           ; 4 bytes @ 0x4
  1101                           
  1102  0074                     ___lldiv@dividend:	
  1103                           ; 4 bytes @ 0x4
  1104                           
  1105                           
  1106                           ; 4 bytes @ 0x4
  1107  0074                     	ds	1
  1108  0075                     ??_I2C_ReadAtAddress:	
  1109  0075                     ??___ftpack:	
  1110                           ; 1 bytes @ 0x5
  1111                           
  1112  0075                     Lcd_Text@data:	
  1113                           ; 1 bytes @ 0x5
  1114                           
  1115  0075                     I2C_ReadAtAddress@data:	
  1116                           ; 1 bytes @ 0x5
  1117                           
  1118                           
  1119                           ; 1 bytes @ 0x5
  1120  0075                     	ds	1
  1121  0076                     I2C_ReadAtAddress@DevID:	
  1122  0076                     GetCumulativePeriodsForStates@j:	
  1123                           ; 1 bytes @ 0x6
  1124                           
  1125                           
  1126                           ; 1 bytes @ 0x6
  1127  0076                     	ds	1
  1128  0077                     GetCumulativePeriodsForStates@i:	
  1129                           
  1130                           ; 1 bytes @ 0x7
  1131  0077                     	ds	1
  1132  0078                     ??___lmul:	
  1133  0078                     ??___aldiv:	
  1134                           ; 1 bytes @ 0x8
  1135                           
  1136  0078                     ??___almod:	
  1137                           ; 1 bytes @ 0x8
  1138                           
  1139  0078                     ??___lldiv:	
  1140                           ; 1 bytes @ 0x8
  1141                           
  1142  0078                     ?___awtoft:	
  1143                           ; 1 bytes @ 0x8
  1144                           
  1145  0078                     ___aldiv@counter:	
  1146                           ; 3 bytes @ 0x8
  1147                           
  1148  0078                     ___almod@counter:	
  1149                           ; 1 bytes @ 0x8
  1150                           
  1151  0078                     ___awtoft@c:	
  1152                           ; 1 bytes @ 0x8
  1153                           
  1154  0078                     ___lmul@product:	
  1155                           ; 2 bytes @ 0x8
  1156                           
  1157  0078                     ___lldiv@quotient:	
  1158                           ; 4 bytes @ 0x8
  1159                           
  1160                           
  1161                           ; 4 bytes @ 0x8
  1162  0078                     	ds	1
  1163  0079                     ___aldiv@sign:	
  1164  0079                     ___almod@sign:	
  1165                           ; 1 bytes @ 0x9
  1166                           
  1167                           
  1168                           ; 1 bytes @ 0x9
  1169  0079                     	ds	1
  1170  007A                     ___aldiv@quotient:	
  1171                           
  1172                           ; 4 bytes @ 0xA
  1173  007A                     	ds	1
  1174  007B                     ??___awtoft:	
  1175  007B                     ___awtoft@sign:	
  1176                           ; 1 bytes @ 0xB
  1177                           
  1178                           
  1179                           ; 1 bytes @ 0xB
  1180  007B                     	ds	1
  1181  007C                     GetCycle@PrevCycle:	
  1182  007C                     ___lldiv@counter:	
  1183                           ; 1 bytes @ 0xC
  1184                           
  1185                           
  1186                           ; 1 bytes @ 0xC
  1187  007C                     	ds	1
  1188  007D                     GetCycle@i:	
  1189                           
  1190                           ; 1 bytes @ 0xD
  1191  007D                     	ds	1
  1192  007E                     ??_Lcd_WriteChar:	
  1193  007E                     ??___bmul:	
  1194                           ; 1 bytes @ 0xE
  1195                           
  1196                           
  1197                           	psect	cstackBANK0
  1198  002C                     __pcstackBANK0:	
  1199                           ; 1 bytes @ 0xE
  1200                           
  1201  002C                     ?_I2C_Master_Init:	
  1202  002C                     ?___bmul:	
  1203                           ; 1 bytes @ 0x0
  1204                           
  1205  002C                     ?___ftmul:	
  1206                           ; 1 bytes @ 0x0
  1207                           
  1208  002C                     ?_ReadRTCAsSec:	
  1209                           ; 3 bytes @ 0x0
  1210                           
  1211  002C                     ___bmul@multiplicand:	
  1212                           ; 4 bytes @ 0x0
  1213                           
  1214  002C                     ___ftmul@f1:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217  002C                     I2C_Master_Init@c:	
  1218                           ; 3 bytes @ 0x0
  1219                           
  1220                           
  1221                           ; 4 bytes @ 0x0
  1222  002C                     	ds	1
  1223  002D                     ___bmul@product:	
  1224                           
  1225                           ; 1 bytes @ 0x1
  1226  002D                     	ds	1
  1227  002E                     ___bmul@multiplier:	
  1228                           
  1229                           ; 1 bytes @ 0x2
  1230  002E                     	ds	1
  1231  002F                     ?_Lcd_WriteChar:	
  1232  002F                     ??_ReadVars:	
  1233                           ; 1 bytes @ 0x3
  1234                           
  1235  002F                     Lcd_WriteChar@x:	
  1236                           ; 1 bytes @ 0x3
  1237                           
  1238  002F                     ___ftmul@f2:	
  1239                           ; 1 bytes @ 0x3
  1240                           
  1241                           
  1242                           ; 3 bytes @ 0x3
  1243  002F                     	ds	1
  1244  0030                     ??_ReadRTCAsSec:	
  1245  0030                     ??_I2C_Master_Init:	
  1246                           ; 1 bytes @ 0x4
  1247                           
  1248  0030                     Lcd_WriteChar@c:	
  1249                           ; 1 bytes @ 0x4
  1250                           
  1251                           
  1252                           ; 1 bytes @ 0x4
  1253  0030                     	ds	1
  1254  0031                     Lcd_WriteChar@y:	
  1255                           
  1256                           ; 1 bytes @ 0x5
  1257  0031                     	ds	1
  1258  0032                     ??___ftmul:	
  1259  0032                     Lcd_WriteChar@data:	
  1260                           ; 1 bytes @ 0x6
  1261                           
  1262                           
  1263                           ; 1 bytes @ 0x6
  1264  0032                     	ds	1
  1265  0033                     ?_WriteLongInt:	
  1266  0033                     ?_Lcd_Disp_Bin:	
  1267                           ; 1 bytes @ 0x7
  1268                           
  1269  0033                     WriteLongInt@x:	
  1270                           ; 1 bytes @ 0x7
  1271                           
  1272  0033                     Lcd_Disp_Bin@x:	
  1273                           ; 1 bytes @ 0x7
  1274                           
  1275                           
  1276                           ; 1 bytes @ 0x7
  1277  0033                     	ds	1
  1278  0034                     Lcd_Disp_Bin@val:	
  1279  0034                     WriteLongInt@Val:	
  1280                           ; 1 bytes @ 0x8
  1281                           
  1282                           
  1283                           ; 4 bytes @ 0x8
  1284  0034                     	ds	1
  1285  0035                     Lcd_Disp_Bin@DispChar:	
  1286  0035                     ___ftmul@exp:	
  1287                           ; 1 bytes @ 0x9
  1288                           
  1289                           
  1290                           ; 1 bytes @ 0x9
  1291  0035                     	ds	1
  1292  0036                     ??_Lcd_Disp_Bin:	
  1293  0036                     ___ftmul@f3_as_product:	
  1294                           ; 1 bytes @ 0xA
  1295                           
  1296                           
  1297                           ; 3 bytes @ 0xA
  1298  0036                     	ds	1
  1299  0037                     Lcd_Disp_Bin@y:	
  1300  0037                     _ReadRTCAsSec$889:	
  1301                           ; 1 bytes @ 0xB
  1302                           
  1303                           
  1304                           ; 2 bytes @ 0xB
  1305  0037                     	ds	1
  1306  0038                     WriteLongInt@size:	
  1307  0038                     Lcd_Disp_Bin@i:	
  1308                           ; 1 bytes @ 0xC
  1309                           
  1310                           
  1311                           ; 1 bytes @ 0xC
  1312  0038                     	ds	1
  1313  0039                     WriteLongInt@Sign:	
  1314  0039                     ___ftmul@cntr:	
  1315                           ; 1 bytes @ 0xD
  1316                           
  1317  0039                     ReadRTCAsSec@Out:	
  1318                           ; 1 bytes @ 0xD
  1319                           
  1320                           
  1321                           ; 4 bytes @ 0xD
  1322  0039                     	ds	1
  1323  003A                     ??_WriteLongInt:	
  1324  003A                     ___ftmul@sign:	
  1325                           ; 1 bytes @ 0xE
  1326                           
  1327                           
  1328                           ; 1 bytes @ 0xE
  1329  003A                     	ds	1
  1330  003B                     ?___fttol:	
  1331  003B                     WriteLongInt@POS:	
  1332                           ; 4 bytes @ 0xF
  1333                           
  1334  003B                     ___fttol@f1:	
  1335                           ; 1 bytes @ 0xF
  1336                           
  1337                           
  1338                           ; 3 bytes @ 0xF
  1339  003B                     	ds	1
  1340  003C                     WriteLongInt@y:	
  1341                           
  1342                           ; 1 bytes @ 0x10
  1343  003C                     	ds	1
  1344  003D                     ReadRTCAsSec@TempVar000:	
  1345                           
  1346                           ; 1 bytes @ 0x11
  1347  003D                     	ds	1
  1348  003E                     ReadVars@j:	
  1349                           
  1350                           ; 1 bytes @ 0x12
  1351  003E                     	ds	1
  1352  003F                     ??___fttol:	
  1353  003F                     ReadVars@i:	
  1354                           ; 1 bytes @ 0x13
  1355                           
  1356                           
  1357                           ; 1 bytes @ 0x13
  1358  003F                     	ds	3
  1359  0042                     ___fttol@sign1:	
  1360                           
  1361                           ; 1 bytes @ 0x16
  1362  0042                     	ds	1
  1363  0043                     ___fttol@lval:	
  1364                           
  1365                           ; 4 bytes @ 0x17
  1366  0043                     	ds	4
  1367  0047                     ___fttol@exp1:	
  1368                           
  1369                           ; 1 bytes @ 0x1B
  1370  0047                     	ds	1
  1371  0048                     ??_main:	
  1372                           
  1373                           ; 1 bytes @ 0x1C
  1374  0048                     	ds	10
  1375  0052                     main@GPS_On_Time_Counter:	
  1376                           
  1377                           ; 2 bytes @ 0x26
  1378  0052                     	ds	2
  1379  0054                     main@TimeSinceTheStartOfCycle:	
  1380                           
  1381                           ; 4 bytes @ 0x28
  1382  0054                     	ds	4
  1383  0058                     main@k:	
  1384                           
  1385                           ; 2 bytes @ 0x2C
  1386  0058                     	ds	2
  1387  005A                     main@StateSecRemaining:	
  1388                           
  1389                           ; 1 bytes @ 0x2E
  1390  005A                     	ds	1
  1391  005B                     main@State2OnOffCounter:	
  1392                           
  1393                           ; 2 bytes @ 0x2F
  1394  005B                     	ds	2
  1395  005D                     main@StateAudioNormalOnOffCounter:	
  1396                           
  1397                           ; 2 bytes @ 0x31
  1398  005D                     	ds	2
  1399  005F                     main@StateAudioSplOnOffCounter:	
  1400                           
  1401                           ; 2 bytes @ 0x33
  1402  005F                     	ds	2
  1403  0061                     main@DiffInSecond:	
  1404                           
  1405                           ; 1 bytes @ 0x35
  1406  0061                     	ds	1
  1407  0062                     main@j:	
  1408                           
  1409                           ; 1 bytes @ 0x36
  1410  0062                     	ds	1
  1411  0063                     main@SecError:	
  1412                           
  1413                           ; 2 bytes @ 0x37
  1414  0063                     	ds	2
  1415  0065                     main@OutForThePorts:	
  1416                           
  1417                           ; 2 bytes @ 0x39
  1418  0065                     	ds	2
  1419  0067                     main@i:	
  1420                           
  1421                           ; 1 bytes @ 0x3B
  1422  0067                     	ds	1
  1423  0068                     main@l:	
  1424                           
  1425                           ; 2 bytes @ 0x3C
  1426  0068                     	ds	2
  1427                           
  1428                           	psect	maintext
  1429  00AC                     __pmaintext:	
  1430 ;;
  1431 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1432 ;;
  1433 ;; *************** function _main *****************
  1434 ;; Defined at:
  1435 ;;		line 4 in file "main.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;		None
  1438 ;; Auto vars:     Size  Location     Type
  1439 ;;  GPSData         6    0        unsigned char [6]
  1440 ;;  TimeSinceThe    4   40[BANK0 ] long 
  1441 ;;  l               2   60[BANK0 ] unsigned short 
  1442 ;;  OutForThePor    2   57[BANK0 ] unsigned char [2]
  1443 ;;  SecError        2   55[BANK0 ] short 
  1444 ;;  StateAudioSp    2   51[BANK0 ] unsigned short 
  1445 ;;  StateAudioNo    2   49[BANK0 ] unsigned short 
  1446 ;;  State2OnOffC    2   47[BANK0 ] unsigned short 
  1447 ;;  k               2   44[BANK0 ] unsigned short 
  1448 ;;  GPS_On_Time_    2   38[BANK0 ] unsigned short 
  1449 ;;  i               1   59[BANK0 ] unsigned char 
  1450 ;;  j               1   54[BANK0 ] unsigned char 
  1451 ;;  DiffInSecond    1   53[BANK0 ] unsigned char 
  1452 ;;  StateSecRema    1   46[BANK0 ] unsigned char 
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1457 ;; Tracked objects:
  1458 ;;		On entry : B00/0
  1459 ;;		On exit  : B00/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  1462 ;;      Params:         0       0       0       0       0
  1463 ;;      Locals:         0      24       0       0       0
  1464 ;;      Temps:          0      10       0       0       0
  1465 ;;      Totals:         0      34       0       0       0
  1466 ;;Total ram usage:       34 bytes
  1467 ;; Hardware stack levels required when called:    4
  1468 ;; This function calls:
  1469 ;;		_GetCumulativePeriodsForStates
  1470 ;;		_GetCycle
  1471 ;;		_I2C_Master_Init
  1472 ;;		_Lcd_Disp_Bin
  1473 ;;		_Lcd_Init
  1474 ;;		_Lcd_Text
  1475 ;;		_ReadRTCAsSec
  1476 ;;		_ReadVars
  1477 ;;		_SwitchGPS
  1478 ;;		_WriteLongInt
  1479 ;;		___almod
  1480 ;;		___awtoft
  1481 ;;		___ftmul
  1482 ;;		___fttol
  1483 ;; This function is called by:
  1484 ;;		Startup code after reset
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function _main
  1490  00AC                     _main:	
  1491                           
  1492                           ;main.c: 7: Lcd_Init();
  1493                           
  1494                           ;incstack = 0
  1495                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1496  00AC  120A  118A  25D5  120A  118A  	fcall	_Lcd_Init
  1497                           
  1498                           ;main.c: 9: ReadVars();
  1499  00B1  120A  118A  26CD  120A  118A  	fcall	_ReadVars
  1500                           
  1501                           ;main.c: 10: STATE_BREAKS[3-1] = 0;
  1502  00B6  1683               	bsf	3,5	;RP0=1, select bank1
  1503  00B7  01E4               	clrf	(_STATE_BREAKS^(0+128)+2)	;volatile
  1504                           
  1505                           ;main.c: 11: GetCumulativePeriodsForStates();
  1506  00B8  120A  158A  256B  120A  118A  	fcall	_GetCumulativePeriodsForStates
  1507                           
  1508                           ;main.c: 16: I2C_Master_Init(400000);
  1509  00BD  3000               	movlw	0
  1510  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1511  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1512  00C0  00AF               	movwf	I2C_Master_Init@c+3
  1513  00C1  3006               	movlw	6
  1514  00C2  00AE               	movwf	I2C_Master_Init@c+2
  1515  00C3  301A               	movlw	26
  1516  00C4  00AD               	movwf	I2C_Master_Init@c+1
  1517  00C5  3080               	movlw	128
  1518  00C6  00AC               	movwf	I2C_Master_Init@c
  1519  00C7  120A  118A  2037  120A  118A  	fcall	_I2C_Master_Init
  1520                           
  1521                           ;main.c: 17: S = ReadRTCAsSec();
  1522  00CC  120A  158A  269A  120A  118A  	fcall	_ReadRTCAsSec
  1523  00D1  23FD               	fcall	PL26	;call to abstracted procedure
  1524  00D2  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1525                           
  1526                           ;main.c: 22: Lcd_Text(1,1,"   -   ");
  1527  00D3  01F2               	clrf	Lcd_Text@x
  1528  00D4  0AF2               	incf	Lcd_Text@x,f
  1529  00D5  00F3               	movwf	Lcd_Text@buffer
  1530  00D6  3001               	movlw	1
  1531  00D7  120A  118A  250C  120A  118A  	fcall	_Lcd_Text
  1532  00DC  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1533                           
  1534                           ;main.c: 23: Lcd_Text(2,1,"C-St-Se/Pr ");
  1535  00DD  01F2               	clrf	Lcd_Text@x
  1536  00DE  0AF2               	incf	Lcd_Text@x,f
  1537  00DF  00F3               	movwf	Lcd_Text@buffer
  1538  00E0  3002               	movlw	2
  1539  00E1  120A  118A  250C  120A  118A  	fcall	_Lcd_Text
  1540                           
  1541                           ;main.c: 26: UINT8 i, j, StateSecRemaining;
  1542                           ;main.c: 27: UINT16 k, l, State2OnOffCounter=0, StateAudioNormalOnOffCounter=0, StateAud
      +                          ioSplOnOffCounter=0;
  1543  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1544  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1545  00E8  01DB               	clrf	main@State2OnOffCounter
  1546  00E9  01DC               	clrf	main@State2OnOffCounter+1
  1547  00EA  01DD               	clrf	main@StateAudioNormalOnOffCounter
  1548  00EB  01DE               	clrf	main@StateAudioNormalOnOffCounter+1
  1549  00EC  01DF               	clrf	main@StateAudioSplOnOffCounter
  1550  00ED  01E0               	clrf	main@StateAudioSplOnOffCounter+1
  1551  00EE                     l2570:	
  1552                           
  1553                           ;main.c: 36: GetCycle();
  1554  00EE  120A  158A  25AF  120A  118A  	fcall	_GetCycle
  1555                           
  1556                           ;main.c: 38: if (CONFIG0 & 0x01)
  1557  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  1558  00F4  1C65               	btfss	_CONFIG0^(0+128),0	;volatile
  1559  00F5  2914               	goto	l2578
  1560                           
  1561                           ;main.c: 39: S = ReadRTCAsSec() + C_D;
  1562  00F6  120A  158A  269A  120A  118A  	fcall	_ReadRTCAsSec
  1563  00FB  23FD  120A  118A   	fcall	PL26	;call to abstracted procedure
  1564  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  1565  00FF  0866               	movf	_C_D^(0+128),w	;volatile
  1566  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1567  0101  07EA               	addwf	_S,f	;volatile
  1568  0102  01FF               	clrf	127
  1569  0103  3980               	andlw	128
  1570  0104  1D03               	skipz
  1571  0105  03FF               	decf	127,f
  1572  0106  087F               	movf	127,w
  1573  0107  1803               	skipnc
  1574  0108  0A7F               	incf	127,w
  1575  0109  1D03               	skipz
  1576  010A  07EB               	addwf	_S+1,f	;volatile
  1577  010B  087F               	movf	127,w
  1578  010C  1803               	skipnc
  1579  010D  0A7F               	incf	127,w
  1580  010E  1D03               	skipz
  1581  010F  07EC               	addwf	_S+2,f	;volatile
  1582  0110  087F               	movf	127,w
  1583  0111  1803               	skipnc
  1584  0112  0A7F               	incf	127,w
  1585  0113  07ED               	addwf	_S+3,f	;volatile
  1586  0114                     l2578:	
  1587                           
  1588                           ;main.c: 40: if (CONFIG0 & 0x02) {
  1589  0114  1683               	bsf	3,5	;RP0=1, select bank1
  1590  0115  1CE5               	btfss	_CONFIG0^(0+128),1	;volatile
  1591  0116  2921               	goto	l2584
  1592                           
  1593                           ;main.c: 41: SwitchGPS(1);
  1594  0117  3001               	movlw	1
  1595  0118  120A  158A  23C0  120A  118A  	fcall	_SwitchGPS
  1596                           
  1597                           ;main.c: 42: GPS_On_Time_Counter++;
  1598  011D  0AD2               	incf	main@GPS_On_Time_Counter,f
  1599  011E  1903               	skipnz
  1600  011F  0AD3               	incf	main@GPS_On_Time_Counter+1,f
  1601                           
  1602                           ;main.c: 43: } else {
  1603  0120  2929               	goto	l2590
  1604  0121                     l2584:	
  1605                           
  1606                           ;main.c: 44: SwitchGPS(0);
  1607  0121  3000               	movlw	0
  1608  0122  120A  158A  23C0  120A  118A  	fcall	_SwitchGPS
  1609                           
  1610                           ;main.c: 45: GPS_On_Time_Counter=0;
  1611  0127  01D2               	clrf	main@GPS_On_Time_Counter
  1612  0128  01D3               	clrf	main@GPS_On_Time_Counter+1
  1613  0129                     l2590:	
  1614                           
  1615                           ;main.c: 49: }
  1616                           ;main.c: 51: (CYCLE_TYPE==0) ? (i = 0) : (i = STATE_BREAKS[CYCLE_TYPE-1]);
  1617  0129  086E               	movf	_CYCLE_TYPE,w	;volatile
  1618  012A  1D03               	btfss	3,2
  1619  012B  292E               	goto	l2594
  1620  012C  01E7               	clrf	main@i
  1621  012D  2934               	goto	l2596
  1622  012E                     l2594:	
  1623  012E  086E               	movf	_CYCLE_TYPE,w
  1624  012F  3EE1               	addlw	(low ((_STATE_BREAKS| 0+255)))& (0+255)
  1625  0130  0084               	movwf	4
  1626  0131  1383               	bcf	3,7	;select IRP bank1
  1627  0132  0800               	movf	0,w
  1628  0133  00E7               	movwf	main@i
  1629  0134                     l2596:	
  1630                           
  1631                           ;main.c: 53: if (C[PREV_CYCLE_TYPE] < C[PREV_CYCLE_TYPE])
  1632  0134  086F               	movf	_PREV_CYCLE_TYPE,w	;volatile
  1633  0135  00C8               	movwf	??_main
  1634  0136  3001               	movlw	1
  1635  0137  1003               	clrc
  1636  0138                     L1:	
  1637  0138  0DC8               	rlf	??_main,f
  1638  0139  3EFF               	addlw	-1
  1639  013A  1003               	clrc
  1640  013B  1D03               	skipz
  1641  013C  2938               	goto	L1
  1642  013D  0D48               	rlf	??_main,w
  1643  013E  3E20               	addlw	32
  1644  013F  0084               	movwf	4
  1645  0140  1383               	bcf	3,7	;select IRP bank0
  1646  0141  0800               	movf	0,w
  1647  0142  00C9               	movwf	??_main+1
  1648  0143  0A84               	incf	4,f
  1649  0144  0800               	movf	0,w
  1650  0145  00CA               	movwf	??_main+2
  1651  0146  0A84               	incf	4,f
  1652  0147  0800               	movf	0,w
  1653  0148  00CB               	movwf	??_main+3
  1654  0149  0A84               	incf	4,f
  1655  014A  0800               	movf	0,w
  1656  014B  00CC               	movwf	??_main+4
  1657  014C  086F               	movf	_PREV_CYCLE_TYPE,w	;volatile
  1658  014D  00CD               	movwf	??_main+5
  1659  014E  3001               	movlw	1
  1660  014F  1003               	clrc
  1661  0150                     L2:	
  1662  0150  0DCD               	rlf	??_main+5,f
  1663  0151  3EFF               	addlw	-1
  1664  0152  1003               	clrc
  1665  0153  1D03               	skipz
  1666  0154  2950               	goto	L2
  1667  0155  0D4D               	rlf	??_main+5,w
  1668  0156  3E20               	addlw	32
  1669  0157  0084               	movwf	4
  1670  0158  0800               	movf	0,w
  1671  0159  00CE               	movwf	??_main+6
  1672  015A  0A84               	incf	4,f
  1673  015B  0800               	movf	0,w
  1674  015C  00CF               	movwf	??_main+7
  1675  015D  0A84               	incf	4,f
  1676  015E  0800               	movf	0,w
  1677  015F  00D0               	movwf	??_main+8
  1678  0160  0A84               	incf	4,f
  1679  0161  0800               	movf	0,w
  1680  0162  00D1               	movwf	??_main+9
  1681  0163  3A80               	xorlw	128
  1682  0164  00FF               	movwf	127
  1683  0165  084C               	movf	??_main+4,w
  1684  0166  3A80               	xorlw	128
  1685  0167  027F               	subwf	127,w
  1686  0168  1D03               	skipz
  1687  0169  2974               	goto	u2963
  1688  016A  084B               	movf	??_main+3,w
  1689  016B  0250               	subwf	??_main+8,w
  1690  016C  1D03               	skipz
  1691  016D  2974               	goto	u2963
  1692  016E  084A               	movf	??_main+2,w
  1693  016F  024F               	subwf	??_main+7,w
  1694  0170  1D03               	skipz
  1695  0171  2974               	goto	u2963
  1696  0172  0849               	movf	??_main+1,w
  1697  0173  024E               	subwf	??_main+6,w
  1698  0174                     u2963:	
  1699  0174  1803               	skipnc
  1700  0175  297D               	goto	l2602
  1701                           
  1702                           ;main.c: 54: TimeSinceTheStartOfCycle = S - C[PREV_CYCLE_TYPE];
  1703  0176  2385  120A  118A   	fcall	PL2	;call to abstracted procedure
  1704  0179  1C03               	skipc
  1705  017A  0F4C               	incfsz	??_main+4,w
  1706  017B  02D7               	subwf	main@TimeSinceTheStartOfCycle+3,f
  1707  017C  2991               	goto	l2608
  1708  017D                     l2602:	
  1709                           
  1710                           ;main.c: 55: else
  1711                           ;main.c: 56: TimeSinceTheStartOfCycle = S + (86400 - C[PREV_CYCLE_TYPE]);
  1712  017D  2385  120A  118A   	fcall	PL2	;call to abstracted procedure
  1713  0180  1C03               	skipc
  1714  0181  0F4C               	incfsz	??_main+4,w
  1715  0182  02D7               	subwf	main@TimeSinceTheStartOfCycle+3,f
  1716  0183  3080               	movlw	128
  1717  0184  07D4               	addwf	main@TimeSinceTheStartOfCycle,f
  1718  0185  3051               	movlw	81
  1719  0186  1803               	skipnc
  1720  0187  3052               	movlw	82
  1721  0188  07D5               	addwf	main@TimeSinceTheStartOfCycle+1,f
  1722  0189  3001               	movlw	1
  1723  018A  1803               	skipnc
  1724  018B  3002               	movlw	2
  1725  018C  07D6               	addwf	main@TimeSinceTheStartOfCycle+2,f
  1726  018D  3000               	movlw	0
  1727  018E  1803               	skipnc
  1728  018F  3001               	movlw	1
  1729  0190  07D7               	addwf	main@TimeSinceTheStartOfCycle+3,f
  1730  0191                     l2608:	
  1731                           
  1732                           ;main.c: 57: SecError = TimeSinceTheStartOfCycle%STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  1733  0191  23E2               	fcall	PL12	;call to abstracted procedure
  1734  0192  0848               	movf	??_main,w
  1735  0193  00F0               	movwf	___almod@divisor
  1736  0194  0849               	movf	??_main+1,w
  1737  0195  00F1               	movwf	___almod@divisor+1
  1738  0196  01F2               	clrf	___almod@divisor+2
  1739  0197  01F3               	clrf	___almod@divisor+3
  1740  0198  0857               	movf	main@TimeSinceTheStartOfCycle+3,w
  1741  0199  00F7               	movwf	___almod@dividend+3
  1742  019A  0856               	movf	main@TimeSinceTheStartOfCycle+2,w
  1743  019B  00F6               	movwf	___almod@dividend+2
  1744  019C  0855               	movf	main@TimeSinceTheStartOfCycle+1,w
  1745  019D  00F5               	movwf	___almod@dividend+1
  1746  019E  0854               	movf	main@TimeSinceTheStartOfCycle,w
  1747  019F  00F4               	movwf	___almod@dividend
  1748  01A0  120A  158A  242D  120A  118A  	fcall	___almod
  1749  01A5  0871               	movf	?___almod+1,w
  1750  01A6  00E4               	movwf	main@SecError+1
  1751  01A7  0870               	movf	?___almod,w
  1752  01A8  00E3               	movwf	main@SecError
  1753                           
  1754                           ;main.c: 58: if (SecError > (STATE_CUMULATIVE_PERIODS[CYCLE_TYPE]/2))
  1755  01A9  23E2  120A  118A   	fcall	PL12	;call to abstracted procedure
  1756  01AC  1003               	clrc
  1757  01AD  0CC9               	rrf	??_main+1,f
  1758  01AE  0CC8               	rrf	??_main,f
  1759  01AF  0864               	movf	main@SecError+1,w
  1760  01B0  0249               	subwf	??_main+1,w
  1761  01B1  1D03               	skipz
  1762  01B2  29B5               	goto	u3015
  1763  01B3  0863               	movf	main@SecError,w
  1764  01B4  0248               	subwf	??_main,w
  1765  01B5                     u3015:	
  1766  01B5  1803               	skipnc
  1767  01B6  29C0               	goto	l2746
  1768                           
  1769                           ;main.c: 59: SecError -= STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  1770  01B7  23E2  120A  118A   	fcall	PL12	;call to abstracted procedure
  1771  01BA  0848               	movf	??_main,w
  1772  01BB  02E3               	subwf	main@SecError,f
  1773  01BC  0849               	movf	??_main+1,w
  1774  01BD  1C03               	skipc
  1775  01BE  03E4               	decf	main@SecError+1,f
  1776  01BF  02E4               	subwf	main@SecError+1,f
  1777  01C0                     l2746:	
  1778  01C0  086E               	movf	_CYCLE_TYPE,w
  1779  01C1  3EE2               	addlw	(low (_STATE_BREAKS| 0))& (0+255)
  1780  01C2  0084               	movwf	4
  1781  01C3  1383               	bcf	3,7	;select IRP bank1
  1782  01C4  0800               	movf	0,w
  1783  01C5  0267               	subwf	main@i,w
  1784  01C6  1803               	btfsc	3,0
  1785  01C7  28EE               	goto	l2570
  1786                           
  1787                           ;main.c: 61: DiffInSecond = 0;
  1788  01C8  01E1               	clrf	main@DiffInSecond
  1789                           
  1790                           ;main.c: 62: for (j=0; j<(STATE_PERIODS[i] + DiffInSecond); j++) {
  1791  01C9  01E2               	clrf	main@j
  1792  01CA                     l2742:	
  1793  01CA  0867               	movf	main@i,w
  1794  01CB  3ECC               	addlw	204
  1795  01CC  0084               	movwf	4
  1796  01CD  1783               	bsf	3,7	;select IRP bank3
  1797  01CE  0800               	movf	0,w
  1798  01CF  0761               	addwf	main@DiffInSecond,w
  1799  01D0  00C8               	movwf	??_main
  1800  01D1  01C9               	clrf	??_main+1
  1801  01D2  0DC9               	rlf	??_main+1,f
  1802  01D3  0849               	movf	??_main+1,w
  1803  01D4  3A80               	xorlw	128
  1804  01D5  3C80               	sublw	128
  1805  01D6  1D03               	skipz
  1806  01D7  29DA               	goto	u3195
  1807  01D8  0848               	movf	??_main,w
  1808  01D9  0262               	subwf	main@j,w
  1809  01DA                     u3195:	
  1810  01DA  1803               	btfsc	3,0
  1811  01DB  2B81               	goto	l2744
  1812                           
  1813                           ;main.c: 63: StateSecRemaining = STATE_PERIODS[i]-j;
  1814  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1815  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1816  01DE  0867               	movf	main@i,w
  1817  01DF  3ECC               	addlw	204
  1818  01E0  0084               	movwf	4
  1819  01E1  0862               	movf	main@j,w
  1820  01E2  1783               	bsf	3,7	;select IRP bank3
  1821  01E3  0200               	subwf	0,w
  1822  01E4  00DA               	movwf	main@StateSecRemaining
  1823                           
  1824                           ;main.c: 65: WriteLongInt(2, 1, CYCLE_TYPE , 1, 0);
  1825  01E5  01B3               	clrf	WriteLongInt@x
  1826  01E6  0AB3               	incf	WriteLongInt@x,f
  1827  01E7  086E               	movf	_CYCLE_TYPE,w	;volatile
  1828  01E8  00B4               	movwf	WriteLongInt@Val
  1829  01E9  3002               	movlw	2
  1830  01EA  01B5               	clrf	WriteLongInt@Val+1
  1831  01EB  01B6               	clrf	WriteLongInt@Val+2
  1832  01EC  01B7               	clrf	WriteLongInt@Val+3
  1833  01ED  01B8               	clrf	WriteLongInt@size
  1834  01EE  0AB8               	incf	WriteLongInt@size,f
  1835  01EF  01B9               	clrf	WriteLongInt@Sign
  1836  01F0  120A  118A  2406  120A  118A  	fcall	_WriteLongInt
  1837                           
  1838                           ;main.c: 66: WriteLongInt(2, 3, i, 2, 0);
  1839  01F5  3003               	movlw	3
  1840  01F6  00B3               	movwf	WriteLongInt@x
  1841  01F7  0867               	movf	main@i,w
  1842  01F8  23F5               	fcall	PL20	;call to abstracted procedure
  1843  01F9  120A  118A  2406  120A  118A  	fcall	_WriteLongInt
  1844                           
  1845                           ;main.c: 67: WriteLongInt(2, 6, j, 2, 0);
  1846  01FE  3006               	movlw	6
  1847  01FF  00B3               	movwf	WriteLongInt@x
  1848  0200  0862               	movf	main@j,w
  1849  0201  23F5               	fcall	PL20	;call to abstracted procedure
  1850  0202  120A  118A  2406  120A  118A  	fcall	_WriteLongInt
  1851                           
  1852                           ;main.c: 68: WriteLongInt(2, 9, STATE_PERIODS[i], 2, 0);
  1853  0207  3009               	movlw	9
  1854  0208  00B3               	movwf	WriteLongInt@x
  1855  0209  0867               	movf	main@i,w
  1856  020A  3ECC               	addlw	204
  1857  020B  0084               	movwf	4
  1858  020C  1783               	bsf	3,7	;select IRP bank3
  1859  020D  0800               	movf	0,w
  1860  020E  23F5               	fcall	PL20	;call to abstracted procedure
  1861  020F  120A  118A  2406  120A  118A  	fcall	_WriteLongInt
  1862                           
  1863                           ;main.c: 69: WriteLongInt(2, 11, SecError, 5, 1);
  1864  0214  300B               	movlw	11
  1865  0215  00B3               	movwf	WriteLongInt@x
  1866  0216  0863               	movf	main@SecError,w
  1867  0217  00B4               	movwf	WriteLongInt@Val
  1868  0218  0864               	movf	main@SecError+1,w
  1869  0219  00B5               	movwf	WriteLongInt@Val+1
  1870  021A  3000               	movlw	0
  1871  021B  1BB5               	btfsc	WriteLongInt@Val+1,7
  1872  021C  30FF               	movlw	255
  1873  021D  00B6               	movwf	WriteLongInt@Val+2
  1874  021E  00B7               	movwf	WriteLongInt@Val+3
  1875  021F  3005               	movlw	5
  1876  0220  00B8               	movwf	WriteLongInt@size
  1877  0221  3002               	movlw	2
  1878  0222  01B9               	clrf	WriteLongInt@Sign
  1879  0223  0AB9               	incf	WriteLongInt@Sign,f
  1880  0224  120A  118A  2406  120A  118A  	fcall	_WriteLongInt
  1881                           
  1882                           ;main.c: 70: for (l=0; l<2; l++) {
  1883  0229  01E8               	clrf	main@l
  1884  022A  01E9               	clrf	main@l+1
  1885  022B                     l2630:	
  1886  022B  3000               	movlw	0
  1887  022C  0269               	subwf	main@l+1,w
  1888  022D  3002               	movlw	2
  1889  022E  1903               	skipnz
  1890  022F  0268               	subwf	main@l,w
  1891  0230  1803               	btfsc	3,0
  1892  0231  2A7A               	goto	l2640
  1893                           
  1894                           ;main.c: 71: Lcd_Disp_Bin(1, 8*l+1, 0xff, 0x30);
  1895  0232  0868               	movf	main@l,w
  1896  0233  00C8               	movwf	??_main
  1897  0234  1003               	clrc
  1898  0235  0DC8               	rlf	??_main,f
  1899  0236  1003               	clrc
  1900  0237  0DC8               	rlf	??_main,f
  1901  0238  1003               	clrc
  1902  0239  0D48               	rlf	??_main,w
  1903  023A  3E01               	addlw	1
  1904  023B  00B3               	movwf	Lcd_Disp_Bin@x
  1905  023C  30FF               	movlw	255
  1906  023D  00B4               	movwf	Lcd_Disp_Bin@val
  1907  023E  3030               	movlw	48
  1908  023F  00B5               	movwf	Lcd_Disp_Bin@DispChar
  1909  0240  3001               	movlw	1
  1910  0241  120A  118A  2015  120A  118A  	fcall	_Lcd_Disp_Bin
  1911                           
  1912                           ;main.c: 72: Lcd_Disp_Bin(1, 8*l+1, STATE_1[i][l], 0x31);
  1913  0246  23CC  120A  118A   	fcall	PL8	;call to abstracted procedure
  1914  0249  30A0               	movlw	160
  1915  024A  23EC               	fcall	PL14	;call to abstracted procedure
  1916  024B  1383               	bcf	3,7	;select IRP bank1
  1917  024C  0800               	movf	0,w
  1918  024D  00B4               	movwf	Lcd_Disp_Bin@val
  1919  024E  3031               	movlw	49
  1920  024F  00B5               	movwf	Lcd_Disp_Bin@DispChar
  1921  0250  3001               	movlw	1
  1922  0251  120A  118A  2015  120A  118A  	fcall	_Lcd_Disp_Bin
  1923                           
  1924                           ;main.c: 73: Lcd_Disp_Bin(1, 8*l+1, STATE_2[i][l], 0x32);
  1925  0256  23CC  120A  118A   	fcall	PL8	;call to abstracted procedure
  1926  0259  3010               	movlw	16
  1927  025A  23EC               	fcall	PL14	;call to abstracted procedure
  1928  025B  1783               	bsf	3,7	;select IRP bank2
  1929  025C  0800               	movf	0,w
  1930  025D  00B4               	movwf	Lcd_Disp_Bin@val
  1931  025E  3032               	movlw	50
  1932  025F  00B5               	movwf	Lcd_Disp_Bin@DispChar
  1933  0260  3001               	movlw	1
  1934  0261  120A  118A  2015  120A  118A  	fcall	_Lcd_Disp_Bin
  1935                           
  1936                           ;main.c: 74: Lcd_Disp_Bin(1, 8*l+1, STATE_3[i][l], 0x33);
  1937  0266  23CC  120A  118A   	fcall	PL8	;call to abstracted procedure
  1938  0269  3090               	movlw	144
  1939  026A  23EC               	fcall	PL14	;call to abstracted procedure
  1940  026B  1783               	bsf	3,7	;select IRP bank3
  1941  026C  0800               	movf	0,w
  1942  026D  00B4               	movwf	Lcd_Disp_Bin@val
  1943  026E  3033               	movlw	51
  1944  026F  00B5               	movwf	Lcd_Disp_Bin@DispChar
  1945  0270  3001               	movlw	1
  1946  0271  120A  118A  2015  120A  118A  	fcall	_Lcd_Disp_Bin
  1947  0276  0AE8               	incf	main@l,f
  1948  0277  1903               	skipnz
  1949  0278  0AE9               	incf	main@l+1,f
  1950  0279  2A2B               	goto	l2630
  1951  027A                     l2640:	
  1952                           
  1953                           ;main.c: 75: }
  1954                           ;main.c: 77: for (k=0; k<1000; k++) {
  1955  027A  01D8               	clrf	main@k
  1956  027B  01D9               	clrf	main@k+1
  1957  027C                     l2642:	
  1958  027C  3003               	movlw	3
  1959  027D  0259               	subwf	main@k+1,w
  1960  027E  30E8               	movlw	232
  1961  027F  1903               	skipnz
  1962  0280  0258               	subwf	main@k,w
  1963  0281  1803               	btfsc	3,0
  1964  0282  2B28               	goto	l2728
  1965                           
  1966                           ;main.c: 78: for (l=0; l<2; l++)
  1967  0283  01E8               	clrf	main@l
  1968  0284  01E9               	clrf	main@l+1
  1969  0285                     l2648:	
  1970  0285  3000               	movlw	0
  1971  0286  0269               	subwf	main@l+1,w
  1972  0287  3002               	movlw	2
  1973  0288  1903               	skipnz
  1974  0289  0268               	subwf	main@l,w
  1975  028A  1803               	btfsc	3,0
  1976  028B  2A9E               	goto	l2658
  1977                           
  1978                           ;main.c: 79: OutForThePorts[l] = STATE_1[i][l];
  1979  028C  0867               	movf	main@i,w
  1980  028D  00C8               	movwf	??_main
  1981  028E  30A0               	movlw	160
  1982  028F  23D9  120A  118A   	fcall	PL10	;call to abstracted procedure
  1983  0292  1383               	bcf	3,7	;select IRP bank1
  1984  0293  0800               	movf	0,w
  1985  0294  00CB               	movwf	??_main+3
  1986  0295  0868               	movf	main@l,w
  1987  0296  3E65               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  1988  0297  0084               	movwf	4
  1989  0298  084B               	movf	??_main+3,w
  1990  0299  0080               	movwf	0
  1991  029A  0AE8               	incf	main@l,f
  1992  029B  1903               	skipnz
  1993  029C  0AE9               	incf	main@l+1,f
  1994  029D  2A85               	goto	l2648
  1995  029E                     l2658:	
  1996                           
  1997                           ;main.c: 80: if (StateSecRemaining <= 2) {
  1998  029E  3003               	movlw	3
  1999  029F  025A               	subwf	main@StateSecRemaining,w
  2000  02A0  1803               	skipnc
  2001  02A1  2ACB               	goto	l2674
  2002                           
  2003                           ;main.c: 81: if (State2OnOffCounter < 50) {
  2004  02A2  3000               	movlw	0
  2005  02A3  025C               	subwf	main@State2OnOffCounter+1,w
  2006  02A4  3032               	movlw	50
  2007  02A5  1903               	skipnz
  2008  02A6  025B               	subwf	main@State2OnOffCounter,w
  2009  02A7  1803               	skipnc
  2010  02A8  2ACB               	goto	l2674
  2011                           
  2012                           ;main.c: 82: for (l=0; l<2; l++)
  2013  02A9  01E8               	clrf	main@l
  2014  02AA  01E9               	clrf	main@l+1
  2015  02AB                     l2664:	
  2016  02AB  3000               	movlw	0
  2017  02AC  0269               	subwf	main@l+1,w
  2018  02AD  3002               	movlw	2
  2019  02AE  1903               	skipnz
  2020  02AF  0268               	subwf	main@l,w
  2021  02B0  1803               	btfsc	3,0
  2022  02B1  2ACB               	goto	l2674
  2023                           
  2024                           ;main.c: 83: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2025  02B2  0867               	movf	main@i,w
  2026  02B3  00C8               	movwf	??_main
  2027  02B4  3010               	movlw	16
  2028  02B5  23D9  120A  118A   	fcall	PL10	;call to abstracted procedure
  2029  02B8  1783               	bsf	3,7	;select IRP bank2
  2030  02B9  0800               	movf	0,w
  2031  02BA  00CB               	movwf	??_main+3
  2032  02BB  0868               	movf	main@l,w
  2033  02BC  3E65               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2034  02BD  0084               	movwf	4
  2035  02BE  1383               	bcf	3,7	;select IRP bank0
  2036  02BF  0800               	movf	0,w
  2037  02C0  044B               	iorwf	??_main+3,w
  2038  02C1  00CC               	movwf	??_main+4
  2039  02C2  0868               	movf	main@l,w
  2040  02C3  3E65               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2041  02C4  0084               	movwf	4
  2042  02C5  084C               	movf	??_main+4,w
  2043  02C6  0080               	movwf	0
  2044  02C7  0AE8               	incf	main@l,f
  2045  02C8  1903               	skipnz
  2046  02C9  0AE9               	incf	main@l+1,f
  2047  02CA  2AAB               	goto	l2664
  2048  02CB                     l2674:	
  2049                           
  2050                           ;main.c: 84: }
  2051                           ;main.c: 85: }
  2052                           ;main.c: 86: if (StateSecRemaining <= 3) {
  2053  02CB  3004               	movlw	4
  2054  02CC  025A               	subwf	main@StateSecRemaining,w
  2055                           
  2056                           ;main.c: 87: if ((StateAudioNormalOnOffCounter) < 50) {
  2057  02CD  3000               	movlw	0
  2058  02CE  1803               	skipnc
  2059  02CF  2AE5               	goto	L5
  2060  02D0  025E               	subwf	main@StateAudioNormalOnOffCounter+1,w
  2061  02D1  3032               	movlw	50
  2062  02D2  1903               	skipnz
  2063  02D3  025D               	subwf	main@StateAudioNormalOnOffCounter,w
  2064  02D4  1803               	skipnc
  2065  02D5  2AFA               	goto	l2704
  2066                           
  2067                           ;main.c: 88: for (l=0; l<2; l++)
  2068  02D6  01E8               	clrf	main@l
  2069  02D7  01E9               	clrf	main@l+1
  2070  02D8                     l2680:	
  2071  02D8  3000               	movlw	0
  2072  02D9  0269               	subwf	main@l+1,w
  2073  02DA  3002               	movlw	2
  2074  02DB  1903               	skipnz
  2075  02DC  0268               	subwf	main@l,w
  2076  02DD  1803               	btfsc	3,0
  2077  02DE  2AFA               	goto	l2704
  2078                           
  2079                           ;main.c: 89: OutForThePorts[l] = (OutForThePorts[l] | STATE_3[i][l]);
  2080  02DF  23B0  120A  118A   	fcall	PL6	;call to abstracted procedure
  2081  02E2  1903               	skipnz
  2082  02E3  0AE9               	incf	main@l+1,f
  2083  02E4  2AD8               	goto	l2680
  2084  02E5                     L5:	
  2085                           ;main.c: 92: if ((StateAudioSplOnOffCounter) < 50) {
  2086                           
  2087  02E5  0260               	subwf	main@StateAudioSplOnOffCounter+1,w
  2088  02E6  3032               	movlw	50
  2089  02E7  1903               	skipnz
  2090  02E8  025F               	subwf	main@StateAudioSplOnOffCounter,w
  2091  02E9  1803               	skipnc
  2092  02EA  2AFA               	goto	l2704
  2093                           
  2094                           ;main.c: 93: for (l=0; l<2; l++)
  2095  02EB  01E8               	clrf	main@l
  2096  02EC  01E9               	clrf	main@l+1
  2097  02ED                     l2694:	
  2098  02ED  3000               	movlw	0
  2099  02EE  0269               	subwf	main@l+1,w
  2100  02EF  3002               	movlw	2
  2101  02F0  1903               	skipnz
  2102  02F1  0268               	subwf	main@l,w
  2103  02F2  1803               	btfsc	3,0
  2104  02F3  2AFA               	goto	l2704
  2105                           
  2106                           ;main.c: 94: OutForThePorts[l] = (OutForThePorts[l] | STATE_3[i][l]);
  2107  02F4  23B0  120A  118A   	fcall	PL6	;call to abstracted procedure
  2108  02F7  1903               	skipnz
  2109  02F8  0AE9               	incf	main@l+1,f
  2110  02F9  2AED               	goto	l2694
  2111  02FA                     l2704:	
  2112                           
  2113                           ;main.c: 95: }
  2114                           ;main.c: 96: }
  2115                           ;main.c: 97: State2OnOffCounter++;
  2116  02FA  0ADB               	incf	main@State2OnOffCounter,f
  2117  02FB  1903               	skipnz
  2118  02FC  0ADC               	incf	main@State2OnOffCounter+1,f
  2119                           
  2120                           ;main.c: 98: StateAudioNormalOnOffCounter++;
  2121  02FD  0ADD               	incf	main@StateAudioNormalOnOffCounter,f
  2122  02FE  1903               	skipnz
  2123  02FF  0ADE               	incf	main@StateAudioNormalOnOffCounter+1,f
  2124                           
  2125                           ;main.c: 99: StateAudioSplOnOffCounter++;
  2126  0300  0ADF               	incf	main@StateAudioSplOnOffCounter,f
  2127  0301  1903               	skipnz
  2128  0302  0AE0               	incf	main@StateAudioSplOnOffCounter+1,f
  2129                           
  2130                           ;main.c: 100: if (State2OnOffCounter >= (50
  2131                           ;main.c: 101: + 50))
  2132  0303  3000               	movlw	0
  2133  0304  025C               	subwf	main@State2OnOffCounter+1,w
  2134  0305  3064               	movlw	100
  2135  0306  1903               	skipnz
  2136  0307  025B               	subwf	main@State2OnOffCounter,w
  2137  0308  1C03               	skipc
  2138  0309  2B0C               	goto	l2710
  2139                           
  2140                           ;main.c: 102: State2OnOffCounter=0;
  2141  030A  01DB               	clrf	main@State2OnOffCounter
  2142  030B  01DC               	clrf	main@State2OnOffCounter+1
  2143  030C                     l2710:	
  2144                           
  2145                           ;main.c: 103: if (StateAudioNormalOnOffCounter >= (50
  2146                           ;main.c: 104: + 50))
  2147  030C  3000               	movlw	0
  2148  030D  025E               	subwf	main@StateAudioNormalOnOffCounter+1,w
  2149  030E  3064               	movlw	100
  2150  030F  1903               	skipnz
  2151  0310  025D               	subwf	main@StateAudioNormalOnOffCounter,w
  2152  0311  1C03               	skipc
  2153  0312  2B15               	goto	l2714
  2154                           
  2155                           ;main.c: 105: StateAudioNormalOnOffCounter=0;
  2156  0313  01DD               	clrf	main@StateAudioNormalOnOffCounter
  2157  0314  01DE               	clrf	main@StateAudioNormalOnOffCounter+1
  2158  0315                     l2714:	
  2159                           
  2160                           ;main.c: 106: if (StateAudioSplOnOffCounter >= (50
  2161                           ;main.c: 107: + 50))
  2162  0315  3000               	movlw	0
  2163  0316  0260               	subwf	main@StateAudioSplOnOffCounter+1,w
  2164  0317  3064               	movlw	100
  2165  0318  1903               	skipnz
  2166  0319  025F               	subwf	main@StateAudioSplOnOffCounter,w
  2167  031A  1C03               	skipc
  2168  031B  2B1E               	goto	l2718
  2169                           
  2170                           ;main.c: 108: StateAudioSplOnOffCounter=0;
  2171  031C  01DF               	clrf	main@StateAudioSplOnOffCounter
  2172  031D  01E0               	clrf	main@StateAudioSplOnOffCounter+1
  2173  031E                     l2718:	
  2174                           
  2175                           ;main.c: 110: PORTB = OutForThePorts[0];
  2176  031E  0865               	movf	main@OutForThePorts,w
  2177  031F  0086               	movwf	6	;volatile
  2178                           
  2179                           ;main.c: 111: PORTC = OutForThePorts[1];
  2180  0320  0866               	movf	main@OutForThePorts+1,w
  2181  0321  0087               	movwf	7	;volatile
  2182                           
  2183                           ;main.c: 113: (_delay((unsigned long)((0)*(4000000/4000000.0))));
  2184  0322  1283               	bcf	3,5	;RP0=0, select bank0
  2185  0323  1303               	bcf	3,6	;RP1=0, select bank0
  2186  0324  0AD8               	incf	main@k,f
  2187  0325  1903               	skipnz
  2188  0326  0AD9               	incf	main@k+1,f
  2189  0327  2A7C               	goto	l2642
  2190  0328                     l2728:	
  2191                           
  2192                           ;main.c: 114: }
  2193                           ;main.c: 115: if (j==0) {
  2194  0328  0862               	movf	main@j,w
  2195  0329  1D03               	btfss	3,2
  2196  032A  2B61               	goto	l2736
  2197                           
  2198                           ;main.c: 116: DiffInSecond = 0.1*(SecError);
  2199  032B  0864               	movf	main@SecError+1,w
  2200  032C  00F9               	movwf	___awtoft@c+1
  2201  032D  0863               	movf	main@SecError,w
  2202  032E  00F8               	movwf	___awtoft@c
  2203  032F  120A  158A  2496  120A  118A  	fcall	___awtoft
  2204  0334  0878               	movf	?___awtoft,w
  2205  0335  00AF               	movwf	___ftmul@f2
  2206  0336  0879               	movf	?___awtoft+1,w
  2207  0337  00B0               	movwf	___ftmul@f2+1
  2208  0338  087A               	movf	?___awtoft+2,w
  2209  0339  00B1               	movwf	___ftmul@f2+2
  2210  033A  30CD               	movlw	205
  2211  033B  00AC               	movwf	___ftmul@f1
  2212  033C  30CC               	movlw	204
  2213  033D  00AD               	movwf	___ftmul@f1+1
  2214  033E  303D               	movlw	61
  2215  033F  00AE               	movwf	___ftmul@f1+2
  2216  0340  120A  158A  24B1  120A  118A  	fcall	___ftmul
  2217  0345  082C               	movf	?___ftmul,w
  2218  0346  00BB               	movwf	___fttol@f1
  2219  0347  082D               	movf	?___ftmul+1,w
  2220  0348  00BC               	movwf	___fttol@f1+1
  2221  0349  082E               	movf	?___ftmul+2,w
  2222  034A  00BD               	movwf	___fttol@f1+2
  2223  034B  120A  158A  23CB  120A  118A  	fcall	___fttol
  2224  0350  083B               	movf	?___fttol,w
  2225  0351  00E1               	movwf	main@DiffInSecond
  2226                           
  2227                           ;main.c: 117: if (SecError<DiffInSecond)
  2228  0352  0864               	movf	main@SecError+1,w
  2229  0353  3A80               	xorlw	128
  2230  0354  00C8               	movwf	??_main
  2231  0355  3080               	movlw	128
  2232  0356  0248               	subwf	??_main,w
  2233  0357  1D03               	skipz
  2234  0358  2B5B               	goto	u3175
  2235  0359  0861               	movf	main@DiffInSecond,w
  2236  035A  0263               	subwf	main@SecError,w
  2237  035B                     u3175:	
  2238  035B  1803               	skipnc
  2239  035C  2B61               	goto	l2736
  2240                           
  2241                           ;main.c: 118: DiffInSecond = SecError;
  2242  035D  1283               	bcf	3,5	;RP0=0, select bank0
  2243  035E  1303               	bcf	3,6	;RP1=0, select bank0
  2244  035F  0863               	movf	main@SecError,w
  2245  0360  00E1               	movwf	main@DiffInSecond
  2246  0361                     l2736:	
  2247                           
  2248                           ;main.c: 119: }
  2249                           ;main.c: 120: S++;
  2250  0361  1283               	bcf	3,5	;RP0=0, select bank0
  2251  0362  1303               	bcf	3,6	;RP1=0, select bank0
  2252  0363  0AEA               	incf	_S,f	;volatile
  2253  0364  1903               	skipnz
  2254  0365  0AEB               	incf	_S+1,f	;volatile
  2255  0366  1903               	skipnz
  2256  0367  0AEC               	incf	_S+2,f	;volatile
  2257  0368  1903               	skipnz
  2258  0369  0AED               	incf	_S+3,f	;volatile
  2259                           
  2260                           ;main.c: 121: if (S>=86400)
  2261  036A  1BED               	btfsc	_S+3,7	;volatile
  2262  036B  2B7F               	goto	l2740
  2263  036C  086D               	movf	_S+3,w	;volatile
  2264  036D  1D03               	btfss	3,2
  2265  036E  2B7B               	goto	l2738
  2266  036F  3001               	movlw	1
  2267  0370  026C               	subwf	_S+2,w	;volatile
  2268  0371  1D03               	skipz
  2269  0372  2B79               	goto	u3183
  2270  0373  3051               	movlw	81
  2271  0374  026B               	subwf	_S+1,w	;volatile
  2272  0375  1D03               	skipz
  2273  0376  2B79               	goto	u3183
  2274  0377  3080               	movlw	128
  2275  0378  026A               	subwf	_S,w	;volatile
  2276  0379                     u3183:	
  2277  0379  1C03               	btfss	3,0
  2278  037A  2B7F               	goto	l2740
  2279  037B                     l2738:	
  2280                           
  2281                           ;main.c: 122: S=0;
  2282  037B  01EA               	clrf	_S	;volatile
  2283  037C  01EB               	clrf	_S+1	;volatile
  2284  037D  01EC               	clrf	_S+2	;volatile
  2285  037E  01ED               	clrf	_S+3	;volatile
  2286  037F                     l2740:	
  2287  037F  0AE2               	incf	main@j,f
  2288  0380  29CA               	goto	l2742
  2289  0381                     l2744:	
  2290  0381  1283               	bcf	3,5	;RP0=0, select bank0
  2291  0382  1303               	bcf	3,6	;RP1=0, select bank0
  2292  0383  0AE7               	incf	main@i,f
  2293  0384  29C0               	goto	l2746
  2294  0385                     __end_of_main:	
  2295  0385                     PL2:	
  2296  0385  086D               	movf	_S+3,w	;volatile
  2297  0386  00D7               	movwf	main@TimeSinceTheStartOfCycle+3
  2298  0387  086C               	movf	_S+2,w	;volatile
  2299  0388  00D6               	movwf	main@TimeSinceTheStartOfCycle+2
  2300  0389  086B               	movf	_S+1,w	;volatile
  2301  038A  00D5               	movwf	main@TimeSinceTheStartOfCycle+1
  2302  038B  086A               	movf	_S,w	;volatile
  2303  038C  00D4               	movwf	main@TimeSinceTheStartOfCycle
  2304  038D  086F               	movf	_PREV_CYCLE_TYPE,w	;volatile
  2305  038E  00C8               	movwf	??_main
  2306  038F  3001               	movlw	1
  2307  0390  1003               	clrc
  2308  0391                     L3:	
  2309  0391  0DC8               	rlf	??_main,f
  2310  0392  3EFF               	addlw	-1
  2311  0393  1003               	clrc
  2312  0394  1D03               	skipz
  2313  0395  2B91               	goto	L3
  2314  0396  0D48               	rlf	??_main,w
  2315  0397  3E20               	addlw	32
  2316  0398  0084               	movwf	4
  2317  0399  0800               	movf	0,w
  2318  039A  00C9               	movwf	??_main+1
  2319  039B  0A84               	incf	4,f
  2320  039C  0800               	movf	0,w
  2321  039D  00CA               	movwf	??_main+2
  2322  039E  0A84               	incf	4,f
  2323  039F  0800               	movf	0,w
  2324  03A0  00CB               	movwf	??_main+3
  2325  03A1  0A84               	incf	4,f
  2326  03A2  0800               	movf	0,w
  2327  03A3  00CC               	movwf	??_main+4
  2328  03A4  0849               	movf	??_main+1,w
  2329  03A5  02D4               	subwf	main@TimeSinceTheStartOfCycle,f
  2330  03A6  084A               	movf	??_main+2,w
  2331  03A7  1C03               	skipc
  2332  03A8  0F4A               	incfsz	??_main+2,w
  2333  03A9  02D5               	subwf	main@TimeSinceTheStartOfCycle+1,f
  2334  03AA  084B               	movf	??_main+3,w
  2335  03AB  1C03               	skipc
  2336  03AC  0F4B               	incfsz	??_main+3,w
  2337  03AD  02D6               	subwf	main@TimeSinceTheStartOfCycle+2,f
  2338  03AE  084C               	movf	??_main+4,w
  2339  03AF  0008               	return
  2340  03B0                     __end_ofPL2:	
  2341  03B0                     PL6:	
  2342  03B0  0867               	movf	main@i,w
  2343  03B1  00C8               	movwf	??_main
  2344  03B2  3090               	movlw	144
  2345  03B3  1003               	clrc
  2346  03B4  0DC8               	rlf	??_main,f
  2347  03B5  0748               	addwf	??_main,w
  2348  03B6  00C9               	movwf	??_main+1
  2349  03B7  0868               	movf	main@l,w
  2350  03B8  0749               	addwf	??_main+1,w
  2351  03B9  00CA               	movwf	??_main+2
  2352  03BA  0084               	movwf	4
  2353  03BB  1783               	bsf	3,7	;select IRP bank3
  2354  03BC  0800               	movf	0,w
  2355  03BD  00CB               	movwf	??_main+3
  2356  03BE  0868               	movf	main@l,w
  2357  03BF  3E65               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2358  03C0  0084               	movwf	4
  2359  03C1  1383               	bcf	3,7	;select IRP bank0
  2360  03C2  0800               	movf	0,w
  2361  03C3  044B               	iorwf	??_main+3,w
  2362  03C4  00CC               	movwf	??_main+4
  2363  03C5  0868               	movf	main@l,w
  2364  03C6  3E65               	addlw	(low (main@OutForThePorts| 0))& (0+255)
  2365  03C7  0084               	movwf	4
  2366  03C8  084C               	movf	??_main+4,w
  2367  03C9  0080               	movwf	0
  2368  03CA  0AE8               	incf	main@l,f
  2369  03CB  0008               	return
  2370  03CC                     __end_ofPL6:	
  2371  03CC                     PL8:	
  2372  03CC  0868               	movf	main@l,w
  2373  03CD  00C8               	movwf	??_main
  2374  03CE  1003               	clrc
  2375  03CF  0DC8               	rlf	??_main,f
  2376  03D0  1003               	clrc
  2377  03D1  0DC8               	rlf	??_main,f
  2378  03D2  1003               	clrc
  2379  03D3  0D48               	rlf	??_main,w
  2380  03D4  3E01               	addlw	1
  2381  03D5  00B3               	movwf	Lcd_Disp_Bin@x
  2382  03D6  0867               	movf	main@i,w
  2383  03D7  00C9               	movwf	??_main+1
  2384  03D8  0008               	return
  2385  03D9                     __end_ofPL8:	
  2386  03D9                     PL10:	
  2387  03D9  1003               	clrc
  2388  03DA  0DC8               	rlf	??_main,f
  2389  03DB  0748               	addwf	??_main,w
  2390  03DC  00C9               	movwf	??_main+1
  2391  03DD  0868               	movf	main@l,w
  2392  03DE  0749               	addwf	??_main+1,w
  2393  03DF  00CA               	movwf	??_main+2
  2394  03E0  0084               	movwf	4
  2395  03E1  0008               	return
  2396  03E2                     __end_ofPL10:	
  2397  03E2                     PL12:	
  2398  03E2  1003               	clrc
  2399  03E3  0D6E               	rlf	_CYCLE_TYPE,w	;volatile
  2400  03E4  3EDC               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  2401  03E5  0084               	movwf	4
  2402  03E6  0800               	movf	0,w
  2403  03E7  00C8               	movwf	??_main
  2404  03E8  0A84               	incf	4,f
  2405  03E9  0800               	movf	0,w
  2406  03EA  00C9               	movwf	??_main+1
  2407  03EB  0008               	return
  2408  03EC                     __end_ofPL12:	
  2409  03EC                     PL14:	
  2410  03EC  1003               	clrc
  2411  03ED  0DC9               	rlf	??_main+1,f
  2412  03EE  0749               	addwf	??_main+1,w
  2413  03EF  00CA               	movwf	??_main+2
  2414  03F0  0868               	movf	main@l,w
  2415  03F1  074A               	addwf	??_main+2,w
  2416  03F2  00CB               	movwf	??_main+3
  2417  03F3  0084               	movwf	4
  2418  03F4  0008               	return
  2419  03F5                     __end_ofPL14:	
  2420  03F5                     PL20:	
  2421  03F5  00B4               	movwf	WriteLongInt@Val
  2422  03F6  3002               	movlw	2
  2423  03F7  01B5               	clrf	WriteLongInt@Val+1
  2424  03F8  01B6               	clrf	WriteLongInt@Val+2
  2425  03F9  01B7               	clrf	WriteLongInt@Val+3
  2426  03FA  00B8               	movwf	WriteLongInt@size
  2427  03FB  01B9               	clrf	WriteLongInt@Sign
  2428  03FC  0008               	return
  2429  03FD                     __end_ofPL20:	
  2430  03FD                     PL26:	
  2431  03FD  082F               	movf	?_ReadRTCAsSec+3,w
  2432  03FE  00ED               	movwf	_S+3	;volatile
  2433  03FF  082E               	movf	?_ReadRTCAsSec+2,w
  2434  0400  00EC               	movwf	_S+2	;volatile
  2435  0401  082D               	movf	?_ReadRTCAsSec+1,w
  2436  0402  00EB               	movwf	_S+1	;volatile
  2437  0403  082C               	movf	?_ReadRTCAsSec,w
  2438  0404  00EA               	movwf	_S	;volatile
  2439  0405  0008               	return
  2440  0406                     __end_ofPL26:	
  2441                           
  2442                           	psect	text1
  2443  0BCB                     __ptext1:	
  2444 ;; *************** function ___fttol *****************
  2445 ;; Defined at:
  2446 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  2447 ;; Parameters:    Size  Location     Type
  2448 ;;  f1              3   15[BANK0 ] float 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  lval            4   23[BANK0 ] unsigned long 
  2451 ;;  exp1            1   27[BANK0 ] unsigned char 
  2452 ;;  sign1           1   22[BANK0 ] unsigned char 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  4   15[BANK0 ] long 
  2455 ;; Registers used:
  2456 ;;		wreg, status,2, status,0
  2457 ;; Tracked objects:
  2458 ;;		On entry : 300/800
  2459 ;;		On exit  : 300/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  2462 ;;      Params:         0       4       0       0       0
  2463 ;;      Locals:         0       6       0       0       0
  2464 ;;      Temps:          0       3       0       0       0
  2465 ;;      Totals:         0      13       0       0       0
  2466 ;;Total ram usage:       13 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_main
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475                           
  2476                           ;psect for function ___fttol
  2477  0BCB                     ___fttol:	
  2478                           
  2479                           ;incstack = 0
  2480                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2481  0BCB  2426  120A  158A   	fcall	PL38	;call to abstracted procedure
  2482  0BCE  1003               	clrc
  2483  0BCF  0D40               	rlf	??___fttol+1,w
  2484  0BD0  0D41               	rlf	??___fttol+2,w
  2485  0BD1  00C7               	movwf	___fttol@exp1
  2486  0BD2  0847               	movf	___fttol@exp1,w
  2487  0BD3  1D03               	btfss	3,2
  2488  0BD4  2BDA               	goto	l2512
  2489  0BD5                     l2510:	
  2490  0BD5  01BB               	clrf	?___fttol
  2491  0BD6  01BC               	clrf	?___fttol+1
  2492  0BD7  01BD               	clrf	?___fttol+2
  2493  0BD8  01BE               	clrf	?___fttol+3
  2494  0BD9  0008               	return
  2495  0BDA                     l2512:	
  2496  0BDA  2426  120A  158A   	fcall	PL38	;call to abstracted procedure
  2497  0BDD  3017               	movlw	23
  2498  0BDE                     u2845:	
  2499  0BDE  1003               	clrc
  2500  0BDF  0CC1               	rrf	??___fttol+2,f
  2501  0BE0  0CC0               	rrf	??___fttol+1,f
  2502  0BE1  0CBF               	rrf	??___fttol,f
  2503  0BE2  3EFF               	addlw	-1
  2504  0BE3  1D03               	skipz
  2505  0BE4  2BDE               	goto	u2845
  2506  0BE5  083F               	movf	??___fttol,w
  2507  0BE6  00C2               	movwf	___fttol@sign1
  2508  0BE7  17BC               	bsf	___fttol@f1+1,7
  2509  0BE8  01BD               	clrf	___fttol@f1+2
  2510  0BE9  083B               	movf	___fttol@f1,w
  2511  0BEA  00C3               	movwf	___fttol@lval
  2512  0BEB  083C               	movf	___fttol@f1+1,w
  2513  0BEC  00C4               	movwf	___fttol@lval+1
  2514  0BED  083D               	movf	___fttol@f1+2,w
  2515  0BEE  00C5               	movwf	___fttol@lval+2
  2516  0BEF  308E               	movlw	142
  2517  0BF0  01C6               	clrf	___fttol@lval+3
  2518  0BF1  02C7               	subwf	___fttol@exp1,f
  2519  0BF2  1FC7               	btfss	___fttol@exp1,7
  2520  0BF3  2C01               	goto	l2532
  2521  0BF4  0847               	movf	___fttol@exp1,w
  2522  0BF5  3A80               	xorlw	128
  2523  0BF6  3E8F               	addlw	143
  2524  0BF7  1C03               	btfss	3,0
  2525  0BF8  2BD5               	goto	l2510
  2526  0BF9                     l2528:	
  2527  0BF9  1003               	clrc
  2528  0BFA  0CC6               	rrf	___fttol@lval+3,f
  2529  0BFB  0CC5               	rrf	___fttol@lval+2,f
  2530  0BFC  0CC4               	rrf	___fttol@lval+1,f
  2531  0BFD  0CC3               	rrf	___fttol@lval,f
  2532  0BFE  0FC7               	incfsz	___fttol@exp1,f
  2533  0BFF  2BF9               	goto	l2528
  2534  0C00  2C0F               	goto	l2540
  2535  0C01                     l2532:	
  2536  0C01  3018               	movlw	24
  2537  0C02  0247               	subwf	___fttol@exp1,w
  2538  0C03  1803               	btfsc	3,0
  2539  0C04  2BD5               	goto	l2510
  2540  0C05                     l2538:	
  2541  0C05  0847               	movf	___fttol@exp1,w
  2542  0C06  1903               	btfsc	3,2
  2543  0C07  2C0F               	goto	l2540
  2544  0C08  1003               	clrc
  2545  0C09  0DC3               	rlf	___fttol@lval,f
  2546  0C0A  0DC4               	rlf	___fttol@lval+1,f
  2547  0C0B  0DC5               	rlf	___fttol@lval+2,f
  2548  0C0C  0DC6               	rlf	___fttol@lval+3,f
  2549  0C0D  03C7               	decf	___fttol@exp1,f
  2550  0C0E  2C05               	goto	l2538
  2551  0C0F                     l2540:	
  2552  0C0F  0842               	movf	___fttol@sign1,w
  2553  0C10  1903               	btfsc	3,2
  2554  0C11  2C1D               	goto	l2544
  2555  0C12  09C3               	comf	___fttol@lval,f
  2556  0C13  09C4               	comf	___fttol@lval+1,f
  2557  0C14  09C5               	comf	___fttol@lval+2,f
  2558  0C15  09C6               	comf	___fttol@lval+3,f
  2559  0C16  0AC3               	incf	___fttol@lval,f
  2560  0C17  1903               	skipnz
  2561  0C18  0AC4               	incf	___fttol@lval+1,f
  2562  0C19  1903               	skipnz
  2563  0C1A  0AC5               	incf	___fttol@lval+2,f
  2564  0C1B  1903               	skipnz
  2565  0C1C  0AC6               	incf	___fttol@lval+3,f
  2566  0C1D                     l2544:	
  2567  0C1D  0846               	movf	___fttol@lval+3,w
  2568  0C1E  00BE               	movwf	?___fttol+3
  2569  0C1F  0845               	movf	___fttol@lval+2,w
  2570  0C20  00BD               	movwf	?___fttol+2
  2571  0C21  0844               	movf	___fttol@lval+1,w
  2572  0C22  00BC               	movwf	?___fttol+1
  2573  0C23  0843               	movf	___fttol@lval,w
  2574  0C24  00BB               	movwf	?___fttol
  2575  0C25  0008               	return
  2576  0C26                     __end_of___fttol:	
  2577  0C26                     PL38:	
  2578  0C26  083B               	movf	___fttol@f1,w
  2579  0C27  00BF               	movwf	??___fttol
  2580  0C28  083C               	movf	___fttol@f1+1,w
  2581  0C29  00C0               	movwf	??___fttol+1
  2582  0C2A  083D               	movf	___fttol@f1+2,w
  2583  0C2B  00C1               	movwf	??___fttol+2
  2584  0C2C  0008               	return
  2585  0C2D                     __end_ofPL38:	
  2586                           
  2587                           	psect	text3
  2588  0C96                     __ptext3:	
  2589 ;; *************** function ___awtoft *****************
  2590 ;; Defined at:
  2591 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awtoft.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  c               2    8[COMMON] int 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  sign            1   11[COMMON] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  3    8[COMMON] float 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0, pclath, cstack
  2600 ;; Tracked objects:
  2601 ;;		On entry : 300/800
  2602 ;;		On exit  : 300/0
  2603 ;;		Unchanged: 300/0
  2604 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  2605 ;;      Params:         3       0       0       0       0
  2606 ;;      Locals:         1       0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0
  2608 ;;      Totals:         4       0       0       0       0
  2609 ;;Total ram usage:        4 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    1
  2612 ;; This function calls:
  2613 ;;		___ftpack
  2614 ;; This function is called by:
  2615 ;;		_main
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           
  2620                           ;psect for function ___awtoft
  2621  0C96                     ___awtoft:	
  2622                           
  2623                           ;incstack = 0
  2624                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  2625  0C96  01FB               	clrf	___awtoft@sign
  2626  0C97  1FF9               	btfss	___awtoft@c+1,7
  2627  0C98  2CA0               	goto	l2452
  2628  0C99  09F8               	comf	___awtoft@c,f
  2629  0C9A  09F9               	comf	___awtoft@c+1,f
  2630  0C9B  0AF8               	incf	___awtoft@c,f
  2631  0C9C  1903               	skipnz
  2632  0C9D  0AF9               	incf	___awtoft@c+1,f
  2633  0C9E  01FB               	clrf	___awtoft@sign
  2634  0C9F  0AFB               	incf	___awtoft@sign,f
  2635  0CA0                     l2452:	
  2636  0CA0  0878               	movf	___awtoft@c,w
  2637  0CA1  00F0               	movwf	___ftpack@arg
  2638  0CA2  0879               	movf	___awtoft@c+1,w
  2639  0CA3  00F1               	movwf	___ftpack@arg+1
  2640  0CA4  308E               	movlw	142
  2641  0CA5  01F2               	clrf	___ftpack@arg+2
  2642  0CA6  00F3               	movwf	___ftpack@exp
  2643  0CA7  087B               	movf	___awtoft@sign,w
  2644  0CA8  00F4               	movwf	___ftpack@sign
  2645  0CA9  251E               	fcall	___ftpack
  2646  0CAA  0870               	movf	?___ftpack,w
  2647  0CAB  00F8               	movwf	?___awtoft
  2648  0CAC  0871               	movf	?___ftpack+1,w
  2649  0CAD  00F9               	movwf	?___awtoft+1
  2650  0CAE  0872               	movf	?___ftpack+2,w
  2651  0CAF  00FA               	movwf	?___awtoft+2
  2652  0CB0  0008               	return
  2653  0CB1                     __end_of___awtoft:	
  2654  0CB1                     __ptext2:	
  2655 ;; *************** function ___ftmul *****************
  2656 ;; Defined at:
  2657 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;  f1              3    0[BANK0 ] float 
  2660 ;;  f2              3    3[BANK0 ] float 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  2663 ;;  sign            1   14[BANK0 ] unsigned char 
  2664 ;;  cntr            1   13[BANK0 ] unsigned char 
  2665 ;;  exp             1    9[BANK0 ] unsigned char 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  3    0[BANK0 ] float 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0, pclath, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 300/800
  2672 ;;		On exit  : 300/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  2675 ;;      Params:         0       6       0       0       0
  2676 ;;      Locals:         0       6       0       0       0
  2677 ;;      Temps:          0       3       0       0       0
  2678 ;;      Totals:         0      15       0       0       0
  2679 ;;Total ram usage:       15 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    1
  2682 ;; This function calls:
  2683 ;;		___ftpack
  2684 ;; This function is called by:
  2685 ;;		_main
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           
  2690                           ;psect for function ___ftmul
  2691  0CB1                     ___ftmul:	
  2692                           
  2693                           ;incstack = 0
  2694                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2695  0CB1  082C               	movf	___ftmul@f1,w
  2696  0CB2  00B2               	movwf	??___ftmul
  2697  0CB3  082D               	movf	___ftmul@f1+1,w
  2698  0CB4  00B3               	movwf	??___ftmul+1
  2699  0CB5  082E               	movf	___ftmul@f1+2,w
  2700  0CB6  00B4               	movwf	??___ftmul+2
  2701  0CB7  1003               	clrc
  2702  0CB8  0D33               	rlf	??___ftmul+1,w
  2703  0CB9  0D34               	rlf	??___ftmul+2,w
  2704  0CBA  00B5               	movwf	___ftmul@exp
  2705  0CBB  0835               	movf	___ftmul@exp,w
  2706  0CBC  1D03               	btfss	3,2
  2707  0CBD  2CC2               	goto	l2460
  2708  0CBE  01AC               	clrf	?___ftmul
  2709  0CBF  01AD               	clrf	?___ftmul+1
  2710  0CC0  01AE               	clrf	?___ftmul+2
  2711  0CC1  0008               	return
  2712  0CC2                     l2460:	
  2713  0CC2  082F               	movf	___ftmul@f2,w
  2714  0CC3  00B2               	movwf	??___ftmul
  2715  0CC4  0830               	movf	___ftmul@f2+1,w
  2716  0CC5  00B3               	movwf	??___ftmul+1
  2717  0CC6  0831               	movf	___ftmul@f2+2,w
  2718  0CC7  00B4               	movwf	??___ftmul+2
  2719  0CC8  1003               	clrc
  2720  0CC9  0D33               	rlf	??___ftmul+1,w
  2721  0CCA  0D34               	rlf	??___ftmul+2,w
  2722  0CCB  00BA               	movwf	___ftmul@sign
  2723  0CCC  083A               	movf	___ftmul@sign,w
  2724  0CCD  1D03               	btfss	3,2
  2725  0CCE  2CD3               	goto	l2464
  2726  0CCF  01AC               	clrf	?___ftmul
  2727  0CD0  01AD               	clrf	?___ftmul+1
  2728  0CD1  01AE               	clrf	?___ftmul+2
  2729  0CD2  0008               	return
  2730  0CD3                     l2464:	
  2731  0CD3  083A               	movf	___ftmul@sign,w
  2732  0CD4  3E7B               	addlw	123
  2733  0CD5  07B5               	addwf	___ftmul@exp,f
  2734  0CD6  082E               	movf	___ftmul@f1+2,w
  2735  0CD7  00BA               	movwf	___ftmul@sign
  2736  0CD8  0831               	movf	___ftmul@f2+2,w
  2737  0CD9  06BA               	xorwf	___ftmul@sign,f
  2738  0CDA  3080               	movlw	128
  2739  0CDB  05BA               	andwf	___ftmul@sign,f
  2740  0CDC  3007               	movlw	7
  2741  0CDD  17AD               	bsf	___ftmul@f1+1,7
  2742  0CDE  17B0               	bsf	___ftmul@f2+1,7
  2743  0CDF  01B1               	clrf	___ftmul@f2+2
  2744  0CE0  01B6               	clrf	___ftmul@f3_as_product
  2745  0CE1  01B7               	clrf	___ftmul@f3_as_product+1
  2746  0CE2  01B8               	clrf	___ftmul@f3_as_product+2
  2747  0CE3  00B9               	movwf	___ftmul@cntr
  2748  0CE4                     l2482:	
  2749  0CE4  1C2C               	btfss	___ftmul@f1,0
  2750  0CE5  2CED               	goto	l2486
  2751  0CE6  2560  120A  158A   	fcall	PL18	;call to abstracted procedure
  2752  0CE9  1803               	skipnc
  2753  0CEA  0A31               	incf	___ftmul@f2+2,w
  2754  0CEB  1D03               	btfss	3,2
  2755  0CEC  07B8               	addwf	___ftmul@f3_as_product+2,f
  2756  0CED                     l2486:	
  2757  0CED  1003               	clrc
  2758  0CEE  0CAE               	rrf	___ftmul@f1+2,f
  2759  0CEF  0CAD               	rrf	___ftmul@f1+1,f
  2760  0CF0  0CAC               	rrf	___ftmul@f1,f
  2761  0CF1  1003               	clrc
  2762  0CF2  0DAF               	rlf	___ftmul@f2,f
  2763  0CF3  0DB0               	rlf	___ftmul@f2+1,f
  2764  0CF4  0DB1               	rlf	___ftmul@f2+2,f
  2765  0CF5  0BB9               	decfsz	___ftmul@cntr,f
  2766  0CF6  2CE4               	goto	l2482
  2767  0CF7  3009               	movlw	9
  2768  0CF8  00B9               	movwf	___ftmul@cntr
  2769  0CF9                     l2494:	
  2770  0CF9  1C2C               	btfss	___ftmul@f1,0
  2771  0CFA  2D02               	goto	l2498
  2772  0CFB  2560  120A  158A   	fcall	PL18	;call to abstracted procedure
  2773  0CFE  1803               	skipnc
  2774  0CFF  0A31               	incf	___ftmul@f2+2,w
  2775  0D00  1D03               	btfss	3,2
  2776  0D01  07B8               	addwf	___ftmul@f3_as_product+2,f
  2777  0D02                     l2498:	
  2778  0D02  1003               	clrc
  2779  0D03  0CAE               	rrf	___ftmul@f1+2,f
  2780  0D04  0CAD               	rrf	___ftmul@f1+1,f
  2781  0D05  0CAC               	rrf	___ftmul@f1,f
  2782  0D06  1003               	clrc
  2783  0D07  0CB8               	rrf	___ftmul@f3_as_product+2,f
  2784  0D08  0CB7               	rrf	___ftmul@f3_as_product+1,f
  2785  0D09  0CB6               	rrf	___ftmul@f3_as_product,f
  2786  0D0A  0BB9               	decfsz	___ftmul@cntr,f
  2787  0D0B  2CF9               	goto	l2494
  2788  0D0C  0836               	movf	___ftmul@f3_as_product,w
  2789  0D0D  00F0               	movwf	___ftpack@arg
  2790  0D0E  0837               	movf	___ftmul@f3_as_product+1,w
  2791  0D0F  00F1               	movwf	___ftpack@arg+1
  2792  0D10  0838               	movf	___ftmul@f3_as_product+2,w
  2793  0D11  00F2               	movwf	___ftpack@arg+2
  2794  0D12  0835               	movf	___ftmul@exp,w
  2795  0D13  00F3               	movwf	___ftpack@exp
  2796  0D14  083A               	movf	___ftmul@sign,w
  2797  0D15  00F4               	movwf	___ftpack@sign
  2798  0D16  251E               	fcall	___ftpack
  2799  0D17  0870               	movf	?___ftpack,w
  2800  0D18  00AC               	movwf	?___ftmul
  2801  0D19  0871               	movf	?___ftpack+1,w
  2802  0D1A  00AD               	movwf	?___ftmul+1
  2803  0D1B  0872               	movf	?___ftpack+2,w
  2804  0D1C  00AE               	movwf	?___ftmul+2
  2805  0D1D  0008               	return
  2806  0D1E                     __end_of___ftmul:	
  2807  0D1E                     __ptext4:	
  2808 ;; *************** function ___ftpack *****************
  2809 ;; Defined at:
  2810 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  arg             3    0[COMMON] unsigned um
  2813 ;;  exp             1    3[COMMON] unsigned char 
  2814 ;;  sign            1    4[COMMON] unsigned char 
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  3    0[COMMON] float 
  2819 ;; Registers used:
  2820 ;;		wreg, status,2, status,0
  2821 ;; Tracked objects:
  2822 ;;		On entry : 300/800
  2823 ;;		On exit  : 300/0
  2824 ;;		Unchanged: 300/0
  2825 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  2826 ;;      Params:         5       0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0
  2828 ;;      Temps:          3       0       0       0       0
  2829 ;;      Totals:         8       0       0       0       0
  2830 ;;Total ram usage:        8 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; This function calls:
  2833 ;;		Nothing
  2834 ;; This function is called by:
  2835 ;;		___awtoft
  2836 ;;		___ftmul
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function ___ftpack
  2842  0D1E                     ___ftpack:	
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2846  0D1E  0873               	movf	___ftpack@exp,w
  2847  0D1F  1903               	btfsc	3,2
  2848  0D20  2D26               	goto	l766
  2849  0D21  0872               	movf	___ftpack@arg+2,w
  2850  0D22  0471               	iorwf	___ftpack@arg+1,w
  2851  0D23  0470               	iorwf	___ftpack@arg,w
  2852  0D24  1D03               	skipz
  2853  0D25  2D2F               	goto	l2056
  2854  0D26                     l766:	
  2855  0D26  01F0               	clrf	?___ftpack
  2856  0D27  01F1               	clrf	?___ftpack+1
  2857  0D28  01F2               	clrf	?___ftpack+2
  2858  0D29  0008               	return
  2859  0D2A                     l2054:	
  2860  0D2A  0AF3               	incf	___ftpack@exp,f
  2861  0D2B  1003               	clrc
  2862  0D2C  0CF2               	rrf	___ftpack@arg+2,f
  2863  0D2D  0CF1               	rrf	___ftpack@arg+1,f
  2864  0D2E  0CF0               	rrf	___ftpack@arg,f
  2865  0D2F                     l2056:	
  2866  0D2F  30FE               	movlw	254
  2867  0D30  0572               	andwf	___ftpack@arg+2,w
  2868  0D31  1903               	btfsc	3,2
  2869  0D32  2D3E               	goto	l2060
  2870  0D33  2D2A               	goto	l2054
  2871  0D34                     l2058:	
  2872  0D34  0AF3               	incf	___ftpack@exp,f
  2873  0D35  0AF0               	incf	___ftpack@arg,f
  2874  0D36  1903               	skipnz
  2875  0D37  0AF1               	incf	___ftpack@arg+1,f
  2876  0D38  1903               	skipnz
  2877  0D39  0AF2               	incf	___ftpack@arg+2,f
  2878  0D3A  1003               	clrc
  2879  0D3B  0CF2               	rrf	___ftpack@arg+2,f
  2880  0D3C  0CF1               	rrf	___ftpack@arg+1,f
  2881  0D3D  0CF0               	rrf	___ftpack@arg,f
  2882  0D3E                     l2060:	
  2883  0D3E  30FF               	movlw	255
  2884  0D3F  0572               	andwf	___ftpack@arg+2,w
  2885  0D40  1903               	btfsc	3,2
  2886  0D41  2D4C               	goto	l2064
  2887  0D42  2D34               	goto	l2058
  2888  0D43                     l2066:	
  2889  0D43  3002               	movlw	2
  2890  0D44  0273               	subwf	___ftpack@exp,w
  2891  0D45  1C03               	btfss	3,0
  2892  0D46  2D4E               	goto	l778
  2893  0D47  03F3               	decf	___ftpack@exp,f
  2894  0D48  1003               	clrc
  2895  0D49  0DF0               	rlf	___ftpack@arg,f
  2896  0D4A  0DF1               	rlf	___ftpack@arg+1,f
  2897  0D4B  0DF2               	rlf	___ftpack@arg+2,f
  2898  0D4C                     l2064:	
  2899  0D4C  1FF1               	btfss	___ftpack@arg+1,7
  2900  0D4D  2D43               	goto	l2066
  2901  0D4E                     l778:	
  2902  0D4E  1C73               	btfss	___ftpack@exp,0
  2903  0D4F  13F1               	bcf	___ftpack@arg+1,7
  2904  0D50  1003               	clrc
  2905  0D51  0CF3               	rrf	___ftpack@exp,f
  2906  0D52  0873               	movf	___ftpack@exp,w
  2907  0D53  00F7               	movwf	??___ftpack+2
  2908  0D54  01F6               	clrf	??___ftpack+1
  2909  0D55  01F5               	clrf	??___ftpack
  2910  0D56  0875               	movf	??___ftpack,w
  2911  0D57  04F0               	iorwf	___ftpack@arg,f
  2912  0D58  0876               	movf	??___ftpack+1,w
  2913  0D59  04F1               	iorwf	___ftpack@arg+1,f
  2914  0D5A  0877               	movf	??___ftpack+2,w
  2915  0D5B  04F2               	iorwf	___ftpack@arg+2,f
  2916  0D5C  0874               	movf	___ftpack@sign,w
  2917  0D5D  1D03               	btfss	3,2
  2918  0D5E  17F2               	bsf	___ftpack@arg+2,7
  2919  0D5F  0008               	return
  2920  0D60                     __end_of___ftpack:	
  2921  0D60                     PL18:	
  2922  0D60  082F               	movf	___ftmul@f2,w
  2923  0D61  07B6               	addwf	___ftmul@f3_as_product,f
  2924  0D62  0830               	movf	___ftmul@f2+1,w
  2925  0D63  1103               	clrz
  2926  0D64  1803               	skipnc
  2927  0D65  0A30               	incf	___ftmul@f2+1,w
  2928  0D66  1D03               	btfss	3,2
  2929  0D67  07B7               	addwf	___ftmul@f3_as_product+1,f
  2930  0D68  0831               	movf	___ftmul@f2+2,w
  2931  0D69  1103               	clrz
  2932  0D6A  0008               	return
  2933  0D6B                     __end_ofPL18:	
  2934                           
  2935                           	psect	text5
  2936  0C2D                     __ptext5:	
  2937 ;; *************** function ___almod *****************
  2938 ;; Defined at:
  2939 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\almod.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  divisor         4    0[COMMON] long 
  2942 ;;  dividend        4    4[COMMON] long 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  sign            1    9[COMMON] unsigned char 
  2945 ;;  counter         1    8[COMMON] unsigned char 
  2946 ;; Return value:  Size  Location     Type
  2947 ;;                  4    0[COMMON] long 
  2948 ;; Registers used:
  2949 ;;		wreg, status,2, status,0
  2950 ;; Tracked objects:
  2951 ;;		On entry : B00/0
  2952 ;;		On exit  : B00/0
  2953 ;;		Unchanged: B00/0
  2954 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  2955 ;;      Params:         8       0       0       0       0
  2956 ;;      Locals:         2       0       0       0       0
  2957 ;;      Temps:          0       0       0       0       0
  2958 ;;      Totals:        10       0       0       0       0
  2959 ;;Total ram usage:       10 bytes
  2960 ;; Hardware stack levels used:    1
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_main
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           
  2969                           ;psect for function ___almod
  2970  0C2D                     ___almod:	
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in ___almod: [wreg+status,2+status,0]
  2974  0C2D  01F9               	clrf	___almod@sign
  2975  0C2E  1FF7               	btfss	___almod@dividend+3,7
  2976  0C2F  2C3D               	goto	l678
  2977  0C30  09F4               	comf	___almod@dividend,f
  2978  0C31  09F5               	comf	___almod@dividend+1,f
  2979  0C32  09F6               	comf	___almod@dividend+2,f
  2980  0C33  09F7               	comf	___almod@dividend+3,f
  2981  0C34  0AF4               	incf	___almod@dividend,f
  2982  0C35  1903               	skipnz
  2983  0C36  0AF5               	incf	___almod@dividend+1,f
  2984  0C37  1903               	skipnz
  2985  0C38  0AF6               	incf	___almod@dividend+2,f
  2986  0C39  1903               	skipnz
  2987  0C3A  0AF7               	incf	___almod@dividend+3,f
  2988  0C3B  01F9               	clrf	___almod@sign
  2989  0C3C  0AF9               	incf	___almod@sign,f
  2990  0C3D                     l678:	
  2991  0C3D  1FF3               	btfss	___almod@divisor+3,7
  2992  0C3E  2C4A               	goto	l2420
  2993  0C3F  09F0               	comf	___almod@divisor,f
  2994  0C40  09F1               	comf	___almod@divisor+1,f
  2995  0C41  09F2               	comf	___almod@divisor+2,f
  2996  0C42  09F3               	comf	___almod@divisor+3,f
  2997  0C43  0AF0               	incf	___almod@divisor,f
  2998  0C44  1903               	skipnz
  2999  0C45  0AF1               	incf	___almod@divisor+1,f
  3000  0C46  1903               	skipnz
  3001  0C47  0AF2               	incf	___almod@divisor+2,f
  3002  0C48  1903               	skipnz
  3003  0C49  0AF3               	incf	___almod@divisor+3,f
  3004  0C4A                     l2420:	
  3005  0C4A  0873               	movf	___almod@divisor+3,w
  3006  0C4B  0472               	iorwf	___almod@divisor+2,w
  3007  0C4C  0471               	iorwf	___almod@divisor+1,w
  3008  0C4D  0470               	iorwf	___almod@divisor,w
  3009  0C4E  1903               	skipnz
  3010  0C4F  2C7F               	goto	l2436
  3011  0C50  01F8               	clrf	___almod@counter
  3012  0C51                     L6:	
  3013  0C51  0AF8               	incf	___almod@counter,f
  3014  0C52  1BF3               	btfsc	___almod@divisor+3,7
  3015  0C53  2C5A               	goto	l2428
  3016  0C54  1003               	clrc
  3017  0C55  0DF0               	rlf	___almod@divisor,f
  3018  0C56  0DF1               	rlf	___almod@divisor+1,f
  3019  0C57  0DF2               	rlf	___almod@divisor+2,f
  3020  0C58  0DF3               	rlf	___almod@divisor+3,f
  3021  0C59  2C51               	goto	L6
  3022  0C5A                     l2428:	
  3023  0C5A  0873               	movf	___almod@divisor+3,w
  3024  0C5B  0277               	subwf	___almod@dividend+3,w
  3025  0C5C  1D03               	skipz
  3026  0C5D  2C68               	goto	u2715
  3027  0C5E  0872               	movf	___almod@divisor+2,w
  3028  0C5F  0276               	subwf	___almod@dividend+2,w
  3029  0C60  1D03               	skipz
  3030  0C61  2C68               	goto	u2715
  3031  0C62  0871               	movf	___almod@divisor+1,w
  3032  0C63  0275               	subwf	___almod@dividend+1,w
  3033  0C64  1D03               	skipz
  3034  0C65  2C68               	goto	u2715
  3035  0C66  0870               	movf	___almod@divisor,w
  3036  0C67  0274               	subwf	___almod@dividend,w
  3037  0C68                     u2715:	
  3038  0C68  1C03               	skipc
  3039  0C69  2C79               	goto	L7
  3040  0C6A  0870               	movf	___almod@divisor,w
  3041  0C6B  02F4               	subwf	___almod@dividend,f
  3042  0C6C  0871               	movf	___almod@divisor+1,w
  3043  0C6D  1C03               	skipc
  3044  0C6E  0F71               	incfsz	___almod@divisor+1,w
  3045  0C6F  02F5               	subwf	___almod@dividend+1,f
  3046  0C70  0872               	movf	___almod@divisor+2,w
  3047  0C71  1C03               	skipc
  3048  0C72  0F72               	incfsz	___almod@divisor+2,w
  3049  0C73  02F6               	subwf	___almod@dividend+2,f
  3050  0C74  0873               	movf	___almod@divisor+3,w
  3051  0C75  1C03               	skipc
  3052  0C76  0F73               	incfsz	___almod@divisor+3,w
  3053  0C77  02F7               	subwf	___almod@dividend+3,f
  3054  0C78  1003               	clrc
  3055  0C79                     L7:	
  3056  0C79  0CF3               	rrf	___almod@divisor+3,f
  3057  0C7A  0CF2               	rrf	___almod@divisor+2,f
  3058  0C7B  0CF1               	rrf	___almod@divisor+1,f
  3059  0C7C  0CF0               	rrf	___almod@divisor,f
  3060  0C7D  0BF8               	decfsz	___almod@counter,f
  3061  0C7E  2C5A               	goto	l2428
  3062  0C7F                     l2436:	
  3063  0C7F  0879               	movf	___almod@sign,w
  3064  0C80  1903               	btfsc	3,2
  3065  0C81  2C8D               	goto	l2440
  3066  0C82  09F4               	comf	___almod@dividend,f
  3067  0C83  09F5               	comf	___almod@dividend+1,f
  3068  0C84  09F6               	comf	___almod@dividend+2,f
  3069  0C85  09F7               	comf	___almod@dividend+3,f
  3070  0C86  0AF4               	incf	___almod@dividend,f
  3071  0C87  1903               	skipnz
  3072  0C88  0AF5               	incf	___almod@dividend+1,f
  3073  0C89  1903               	skipnz
  3074  0C8A  0AF6               	incf	___almod@dividend+2,f
  3075  0C8B  1903               	skipnz
  3076  0C8C  0AF7               	incf	___almod@dividend+3,f
  3077  0C8D                     l2440:	
  3078  0C8D  0877               	movf	___almod@dividend+3,w
  3079  0C8E  00F3               	movwf	?___almod+3
  3080  0C8F  0876               	movf	___almod@dividend+2,w
  3081  0C90  00F2               	movwf	?___almod+2
  3082  0C91  0875               	movf	___almod@dividend+1,w
  3083  0C92  00F1               	movwf	?___almod+1
  3084  0C93  0874               	movf	___almod@dividend,w
  3085  0C94  00F0               	movwf	?___almod
  3086  0C95  0008               	return
  3087  0C96                     __end_of___almod:	
  3088                           
  3089                           	psect	text6
  3090  0406                     __ptext6:	
  3091 ;; *************** function _WriteLongInt *****************
  3092 ;; Defined at:
  3093 ;;		line 183 in file "libs/HD44780.c"
  3094 ;; Parameters:    Size  Location     Type
  3095 ;;  y               1    wreg     unsigned char 
  3096 ;;  x               1    7[BANK0 ] unsigned char 
  3097 ;;  Val             4    8[BANK0 ] long 
  3098 ;;  size            1   12[BANK0 ] char 
  3099 ;;  Sign            1   13[BANK0 ] unsigned char 
  3100 ;; Auto vars:     Size  Location     Type
  3101 ;;  y               1   16[BANK0 ] unsigned char 
  3102 ;;  POS             1   15[BANK0 ] char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3107 ;; Tracked objects:
  3108 ;;		On entry : 300/800
  3109 ;;		On exit  : 300/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  3112 ;;      Params:         0       7       0       0       0
  3113 ;;      Locals:         0       2       0       0       0
  3114 ;;      Temps:          0       1       0       0       0
  3115 ;;      Totals:         0      10       0       0       0
  3116 ;;Total ram usage:       10 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    3
  3119 ;; This function calls:
  3120 ;;		_Lcd_WriteChar
  3121 ;;		___aldiv
  3122 ;;		___bmul
  3123 ;;		___lmul
  3124 ;; This function is called by:
  3125 ;;		_main
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _WriteLongInt
  3131  0406                     _WriteLongInt:	
  3132                           
  3133                           ;incstack = 0
  3134                           ; Regs used in _WriteLongInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3135                           ;WriteLongInt@y stored from wreg
  3136  0406  00BC               	movwf	WriteLongInt@y
  3137                           
  3138                           ;HD44780.c: 184: int8_t POS = 0;
  3139  0407  01BB               	clrf	WriteLongInt@POS
  3140                           
  3141                           ;HD44780.c: 185: if (Sign) {
  3142  0408  0839               	movf	WriteLongInt@Sign,w
  3143  0409  1903               	btfsc	3,2
  3144  040A  2C38               	goto	l2272
  3145                           
  3146                           ;HD44780.c: 186: POS++;
  3147  040B  0ABB               	incf	WriteLongInt@POS,f
  3148                           
  3149                           ;HD44780.c: 187: if (Val<0) {
  3150  040C  1FB7               	btfss	WriteLongInt@Val+3,7
  3151  040D  2C30               	goto	l2264
  3152                           
  3153                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  3154  040E  0833               	movf	WriteLongInt@x,w
  3155  040F  00AF               	movwf	Lcd_WriteChar@x
  3156  0410  302D               	movlw	45
  3157  0411  00B0               	movwf	Lcd_WriteChar@c
  3158  0412  083C               	movf	WriteLongInt@y,w
  3159  0413  2472               	fcall	_Lcd_WriteChar
  3160                           
  3161                           ;HD44780.c: 189: Val=-1*Val;
  3162  0414  30FF               	movlw	255
  3163  0415  00F0               	movwf	___lmul@multiplier
  3164  0416  00F1               	movwf	___lmul@multiplier+1
  3165  0417  00F2               	movwf	___lmul@multiplier+2
  3166  0418  00F3               	movwf	___lmul@multiplier+3
  3167  0419  1283               	bcf	3,5	;RP0=0, select bank0
  3168  041A  1303               	bcf	3,6	;RP1=0, select bank0
  3169  041B  0837               	movf	WriteLongInt@Val+3,w
  3170  041C  00F7               	movwf	___lmul@multiplicand+3
  3171  041D  0836               	movf	WriteLongInt@Val+2,w
  3172  041E  00F6               	movwf	___lmul@multiplicand+2
  3173  041F  0835               	movf	WriteLongInt@Val+1,w
  3174  0420  00F5               	movwf	___lmul@multiplicand+1
  3175  0421  0834               	movf	WriteLongInt@Val,w
  3176  0422  00F4               	movwf	___lmul@multiplicand
  3177  0423  120A  158A  27C4  120A  118A  	fcall	___lmul
  3178  0428  0873               	movf	?___lmul+3,w
  3179  0429  00B7               	movwf	WriteLongInt@Val+3
  3180  042A  0872               	movf	?___lmul+2,w
  3181  042B  00B6               	movwf	WriteLongInt@Val+2
  3182  042C  0871               	movf	?___lmul+1,w
  3183  042D  00B5               	movwf	WriteLongInt@Val+1
  3184  042E  0870               	movf	?___lmul,w
  3185  042F  2C70               	goto	L8
  3186  0430                     l2264:	
  3187                           ;HD44780.c: 190: } else
  3188                           
  3189                           
  3190                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  3191  0430  0833               	movf	WriteLongInt@x,w
  3192  0431  00AF               	movwf	Lcd_WriteChar@x
  3193  0432  302B               	movlw	43
  3194  0433  00B0               	movwf	Lcd_WriteChar@c
  3195  0434  083C               	movf	WriteLongInt@y,w
  3196  0435  2472  120A  118A   	fcall	_Lcd_WriteChar
  3197  0438                     l2272:	
  3198  0438  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0439  1303               	bcf	3,6	;RP1=0, select bank0
  3200  043A  0838               	movf	WriteLongInt@size,w
  3201  043B  1903               	btfsc	3,2
  3202  043C  0008               	return
  3203                           
  3204                           ;HD44780.c: 194: size--;
  3205  043D  03B8               	decf	WriteLongInt@size,f
  3206                           
  3207                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  3208  043E  083B               	movf	WriteLongInt@POS,w
  3209  043F  0738               	addwf	WriteLongInt@size,w
  3210  0440  00BA               	movwf	??_WriteLongInt
  3211  0441  0833               	movf	WriteLongInt@x,w
  3212  0442  073A               	addwf	??_WriteLongInt,w
  3213  0443  00AF               	movwf	Lcd_WriteChar@x
  3214  0444  30F6               	movlw	246
  3215  0445  00AC               	movwf	___bmul@multiplicand
  3216  0446  27CA  120A  118A   	fcall	PL30	;call to abstracted procedure
  3217  0449  300A               	movlw	10
  3218  044A  00F0               	movwf	___aldiv@divisor
  3219  044B  01F1               	clrf	___aldiv@divisor+1
  3220  044C  01F2               	clrf	___aldiv@divisor+2
  3221  044D  01F3               	clrf	___aldiv@divisor+3
  3222  044E  2497  120A  118A   	fcall	___aldiv
  3223  0451  0870               	movf	?___aldiv,w
  3224  0452  279E  120A  118A   	fcall	___bmul
  3225  0455  0734               	addwf	WriteLongInt@Val,w
  3226  0456  3E30               	addlw	48
  3227  0457  00B0               	movwf	Lcd_WriteChar@c
  3228  0458  083C               	movf	WriteLongInt@y,w
  3229  0459  2472  120A  118A   	fcall	_Lcd_WriteChar
  3230                           
  3231                           ;HD44780.c: 196: Val = Val/10;
  3232  045C  300A               	movlw	10
  3233  045D  00F0               	movwf	___aldiv@divisor
  3234  045E  01F1               	clrf	___aldiv@divisor+1
  3235  045F  01F2               	clrf	___aldiv@divisor+2
  3236  0460  01F3               	clrf	___aldiv@divisor+3
  3237  0461  1283               	bcf	3,5	;RP0=0, select bank0
  3238  0462  1303               	bcf	3,6	;RP1=0, select bank0
  3239  0463  27CA  120A  118A   	fcall	PL30	;call to abstracted procedure
  3240  0466  2497  120A  118A   	fcall	___aldiv
  3241  0469  0873               	movf	?___aldiv+3,w
  3242  046A  00B7               	movwf	WriteLongInt@Val+3
  3243  046B  0872               	movf	?___aldiv+2,w
  3244  046C  00B6               	movwf	WriteLongInt@Val+2
  3245  046D  0871               	movf	?___aldiv+1,w
  3246  046E  00B5               	movwf	WriteLongInt@Val+1
  3247  046F  0870               	movf	?___aldiv,w
  3248  0470                     L8:	
  3249  0470  00B4               	movwf	WriteLongInt@Val
  3250  0471  2C38               	goto	l2272
  3251  0472                     __end_of_WriteLongInt:	
  3252  0472                     __ptext25:	
  3253 ;; *************** function _Lcd_WriteChar *****************
  3254 ;; Defined at:
  3255 ;;		line 99 in file "libs/HD44780.c"
  3256 ;; Parameters:    Size  Location     Type
  3257 ;;  y               1    wreg     unsigned char 
  3258 ;;  x               1    3[BANK0 ] unsigned char 
  3259 ;;  c               1    4[BANK0 ] unsigned char 
  3260 ;; Auto vars:     Size  Location     Type
  3261 ;;  y               1    5[BANK0 ] unsigned char 
  3262 ;;  data            1    6[BANK0 ] unsigned char 
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      void 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 300/800
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  3272 ;;      Params:         0       2       0       0       0
  3273 ;;      Locals:         0       2       0       0       0
  3274 ;;      Temps:          0       0       0       0       0
  3275 ;;      Totals:         0       4       0       0       0
  3276 ;;Total ram usage:        4 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:    2
  3279 ;; This function calls:
  3280 ;;		_Lcd_CharCP
  3281 ;;		_Lcd_Command
  3282 ;; This function is called by:
  3283 ;;		_WriteLongInt
  3284 ;;		_Lcd_Disp_Bin
  3285 ;; This function uses a non-reentrant model
  3286 ;;
  3287                           
  3288                           
  3289                           ;psect for function _Lcd_WriteChar
  3290  0472                     _Lcd_WriteChar:	
  3291                           
  3292                           ;incstack = 0
  3293                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3294                           ;Lcd_WriteChar@y stored from wreg
  3295  0472  00B1               	movwf	Lcd_WriteChar@y
  3296                           
  3297                           ;HD44780.c: 100: unsigned char data;
  3298                           ;HD44780.c: 101: switch(y) {
  3299  0473  2C81               	goto	l1986
  3300  0474                     l1976:	
  3301  0474  082F               	movf	Lcd_WriteChar@x,w
  3302  0475  3E7F               	addlw	127
  3303  0476  2C7F               	goto	L17
  3304  0477                     l1978:	
  3305  0477  082F               	movf	Lcd_WriteChar@x,w
  3306  0478  3EBF               	addlw	191
  3307  0479  2C7F               	goto	L17
  3308  047A                     l1980:	
  3309  047A  082F               	movf	Lcd_WriteChar@x,w
  3310  047B  3E93               	addlw	147
  3311  047C  2C7F               	goto	L17
  3312  047D                     l1982:	
  3313  047D  082F               	movf	Lcd_WriteChar@x,w
  3314  047E  3ED3               	addlw	211
  3315  047F                     L17:	
  3316  047F  00B2               	movwf	Lcd_WriteChar@data
  3317  0480  2C8F               	goto	l1988
  3318  0481                     l1986:	
  3319  0481  0831               	movf	Lcd_WriteChar@y,w
  3320                           
  3321                           ; Switch size 1, requested type "space"
  3322                           ; Number of cases is 4, Range of values is 1 to 4
  3323                           ; switch strategies available:
  3324                           ; Name         Instructions Cycles
  3325                           ; simple_byte           13     7 (average)
  3326                           ; direct_byte           23    11 (fixed)
  3327                           ; jumptable            263     9 (fixed)
  3328                           ;	Chosen strategy is simple_byte
  3329  0482  3A01               	xorlw	1	; case 1
  3330  0483  1903               	skipnz
  3331  0484  2C74               	goto	l1976
  3332  0485  3A03               	xorlw	3	; case 2
  3333  0486  1903               	skipnz
  3334  0487  2C77               	goto	l1978
  3335  0488  3A01               	xorlw	1	; case 3
  3336  0489  1903               	skipnz
  3337  048A  2C7A               	goto	l1980
  3338  048B  3A07               	xorlw	7	; case 4
  3339  048C  1903               	skipnz
  3340  048D  2C7D               	goto	l1982
  3341  048E  2C8F               	goto	l1988
  3342  048F                     l1988:	
  3343                           
  3344                           ;HD44780.c: 108: Lcd_Command(data);
  3345  048F  0832               	movf	Lcd_WriteChar@data,w
  3346  0490  2635  120A  118A   	fcall	_Lcd_Command
  3347                           
  3348                           ;HD44780.c: 109: Lcd_CharCP(c);
  3349  0493  1283               	bcf	3,5	;RP0=0, select bank0
  3350  0494  1303               	bcf	3,6	;RP1=0, select bank0
  3351  0495  0830               	movf	Lcd_WriteChar@c,w
  3352  0496  2D41               	ljmp	_Lcd_CharCP
  3353  0497                     __end_of_Lcd_WriteChar:	
  3354  0497                     __ptext7:	
  3355 ;; *************** function ___aldiv *****************
  3356 ;; Defined at:
  3357 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;  divisor         4    0[COMMON] long 
  3360 ;;  dividend        4    4[COMMON] long 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  quotient        4   10[COMMON] long 
  3363 ;;  sign            1    9[COMMON] unsigned char 
  3364 ;;  counter         1    8[COMMON] unsigned char 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  4    0[COMMON] long 
  3367 ;; Registers used:
  3368 ;;		wreg, status,2, status,0
  3369 ;; Tracked objects:
  3370 ;;		On entry : 300/800
  3371 ;;		On exit  : 300/0
  3372 ;;		Unchanged: 300/0
  3373 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  3374 ;;      Params:         8       0       0       0       0
  3375 ;;      Locals:         6       0       0       0       0
  3376 ;;      Temps:          0       0       0       0       0
  3377 ;;      Totals:        14       0       0       0       0
  3378 ;;Total ram usage:       14 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; This function calls:
  3381 ;;		Nothing
  3382 ;; This function is called by:
  3383 ;;		_WriteLongInt
  3384 ;; This function uses a non-reentrant model
  3385 ;;
  3386                           
  3387                           
  3388                           ;psect for function ___aldiv
  3389  0497                     ___aldiv:	
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3393  0497  01F9               	clrf	___aldiv@sign
  3394  0498  1FF3               	btfss	___aldiv@divisor+3,7
  3395  0499  2CA7               	goto	l665
  3396  049A  09F0               	comf	___aldiv@divisor,f
  3397  049B  09F1               	comf	___aldiv@divisor+1,f
  3398  049C  09F2               	comf	___aldiv@divisor+2,f
  3399  049D  09F3               	comf	___aldiv@divisor+3,f
  3400  049E  0AF0               	incf	___aldiv@divisor,f
  3401  049F  1903               	skipnz
  3402  04A0  0AF1               	incf	___aldiv@divisor+1,f
  3403  04A1  1903               	skipnz
  3404  04A2  0AF2               	incf	___aldiv@divisor+2,f
  3405  04A3  1903               	skipnz
  3406  04A4  0AF3               	incf	___aldiv@divisor+3,f
  3407  04A5  01F9               	clrf	___aldiv@sign
  3408  04A6  0AF9               	incf	___aldiv@sign,f
  3409  04A7                     l665:	
  3410  04A7  1FF7               	btfss	___aldiv@dividend+3,7
  3411  04A8  2CB6               	goto	l2084
  3412  04A9  09F4               	comf	___aldiv@dividend,f
  3413  04AA  09F5               	comf	___aldiv@dividend+1,f
  3414  04AB  09F6               	comf	___aldiv@dividend+2,f
  3415  04AC  09F7               	comf	___aldiv@dividend+3,f
  3416  04AD  0AF4               	incf	___aldiv@dividend,f
  3417  04AE  1903               	skipnz
  3418  04AF  0AF5               	incf	___aldiv@dividend+1,f
  3419  04B0  1903               	skipnz
  3420  04B1  0AF6               	incf	___aldiv@dividend+2,f
  3421  04B2  1903               	skipnz
  3422  04B3  0AF7               	incf	___aldiv@dividend+3,f
  3423  04B4  3001               	movlw	1
  3424  04B5  06F9               	xorwf	___aldiv@sign,f
  3425  04B6                     l2084:	
  3426  04B6  01FA               	clrf	___aldiv@quotient
  3427  04B7  01FB               	clrf	___aldiv@quotient+1
  3428  04B8  01FC               	clrf	___aldiv@quotient+2
  3429  04B9  01FD               	clrf	___aldiv@quotient+3
  3430  04BA  0873               	movf	___aldiv@divisor+3,w
  3431  04BB  0472               	iorwf	___aldiv@divisor+2,w
  3432  04BC  0471               	iorwf	___aldiv@divisor+1,w
  3433  04BD  0470               	iorwf	___aldiv@divisor,w
  3434  04BE  1903               	skipnz
  3435  04BF  2CF5               	goto	l2106
  3436  04C0  01F8               	clrf	___aldiv@counter
  3437  04C1                     L9:	
  3438  04C1  0AF8               	incf	___aldiv@counter,f
  3439  04C2  1BF3               	btfsc	___aldiv@divisor+3,7
  3440  04C3  2CCA               	goto	l2094
  3441  04C4  1003               	clrc
  3442  04C5  0DF0               	rlf	___aldiv@divisor,f
  3443  04C6  0DF1               	rlf	___aldiv@divisor+1,f
  3444  04C7  0DF2               	rlf	___aldiv@divisor+2,f
  3445  04C8  0DF3               	rlf	___aldiv@divisor+3,f
  3446  04C9  2CC1               	goto	L9
  3447  04CA                     l2094:	
  3448  04CA  1003               	clrc
  3449  04CB  0DFA               	rlf	___aldiv@quotient,f
  3450  04CC  0DFB               	rlf	___aldiv@quotient+1,f
  3451  04CD  0DFC               	rlf	___aldiv@quotient+2,f
  3452  04CE  0DFD               	rlf	___aldiv@quotient+3,f
  3453  04CF  0873               	movf	___aldiv@divisor+3,w
  3454  04D0  0277               	subwf	___aldiv@dividend+3,w
  3455  04D1  1D03               	skipz
  3456  04D2  2CDD               	goto	u2265
  3457  04D3  0872               	movf	___aldiv@divisor+2,w
  3458  04D4  0276               	subwf	___aldiv@dividend+2,w
  3459  04D5  1D03               	skipz
  3460  04D6  2CDD               	goto	u2265
  3461  04D7  0871               	movf	___aldiv@divisor+1,w
  3462  04D8  0275               	subwf	___aldiv@dividend+1,w
  3463  04D9  1D03               	skipz
  3464  04DA  2CDD               	goto	u2265
  3465  04DB  0870               	movf	___aldiv@divisor,w
  3466  04DC  0274               	subwf	___aldiv@dividend,w
  3467  04DD                     u2265:	
  3468  04DD  1C03               	skipc
  3469  04DE  2CEF               	goto	L10
  3470  04DF  0870               	movf	___aldiv@divisor,w
  3471  04E0  02F4               	subwf	___aldiv@dividend,f
  3472  04E1  0871               	movf	___aldiv@divisor+1,w
  3473  04E2  1C03               	skipc
  3474  04E3  0F71               	incfsz	___aldiv@divisor+1,w
  3475  04E4  02F5               	subwf	___aldiv@dividend+1,f
  3476  04E5  0872               	movf	___aldiv@divisor+2,w
  3477  04E6  1C03               	skipc
  3478  04E7  0F72               	incfsz	___aldiv@divisor+2,w
  3479  04E8  02F6               	subwf	___aldiv@dividend+2,f
  3480  04E9  0873               	movf	___aldiv@divisor+3,w
  3481  04EA  1C03               	skipc
  3482  04EB  0F73               	incfsz	___aldiv@divisor+3,w
  3483  04EC  02F7               	subwf	___aldiv@dividend+3,f
  3484  04ED  147A               	bsf	___aldiv@quotient,0
  3485  04EE  1003               	clrc
  3486  04EF                     L10:	
  3487  04EF  0CF3               	rrf	___aldiv@divisor+3,f
  3488  04F0  0CF2               	rrf	___aldiv@divisor+2,f
  3489  04F1  0CF1               	rrf	___aldiv@divisor+1,f
  3490  04F2  0CF0               	rrf	___aldiv@divisor,f
  3491  04F3  0BF8               	decfsz	___aldiv@counter,f
  3492  04F4  2CCA               	goto	l2094
  3493  04F5                     l2106:	
  3494  04F5  0879               	movf	___aldiv@sign,w
  3495  04F6  1903               	btfsc	3,2
  3496  04F7  2D03               	goto	l2110
  3497  04F8  09FA               	comf	___aldiv@quotient,f
  3498  04F9  09FB               	comf	___aldiv@quotient+1,f
  3499  04FA  09FC               	comf	___aldiv@quotient+2,f
  3500  04FB  09FD               	comf	___aldiv@quotient+3,f
  3501  04FC  0AFA               	incf	___aldiv@quotient,f
  3502  04FD  1903               	skipnz
  3503  04FE  0AFB               	incf	___aldiv@quotient+1,f
  3504  04FF  1903               	skipnz
  3505  0500  0AFC               	incf	___aldiv@quotient+2,f
  3506  0501  1903               	skipnz
  3507  0502  0AFD               	incf	___aldiv@quotient+3,f
  3508  0503                     l2110:	
  3509  0503  087D               	movf	___aldiv@quotient+3,w
  3510  0504  00F3               	movwf	?___aldiv+3
  3511  0505  087C               	movf	___aldiv@quotient+2,w
  3512  0506  00F2               	movwf	?___aldiv+2
  3513  0507  087B               	movf	___aldiv@quotient+1,w
  3514  0508  00F1               	movwf	?___aldiv+1
  3515  0509  087A               	movf	___aldiv@quotient,w
  3516  050A  00F0               	movwf	?___aldiv
  3517  050B  0008               	return
  3518  050C                     __end_of___aldiv:	
  3519  050C                     __ptext21:	
  3520 ;; *************** function _Lcd_Text *****************
  3521 ;; Defined at:
  3522 ;;		line 76 in file "libs/HD44780.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  y               1    wreg     unsigned char 
  3525 ;;  x               1    2[COMMON] unsigned char 
  3526 ;;  buffer          1    3[COMMON] PTR unsigned char 
  3527 ;;		 -> STR_2(12), STR_1(8), 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  y               1    4[COMMON] unsigned char 
  3530 ;;  data            1    5[COMMON] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  3540 ;;      Params:         2       0       0       0       0
  3541 ;;      Locals:         2       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0
  3543 ;;      Totals:         4       0       0       0       0
  3544 ;;Total ram usage:        4 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    2
  3547 ;; This function calls:
  3548 ;;		_Lcd_CharCP
  3549 ;;		_Lcd_Command
  3550 ;; This function is called by:
  3551 ;;		_main
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function _Lcd_Text
  3557  050C                     _Lcd_Text:	
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _Lcd_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3561                           ;Lcd_Text@y stored from wreg
  3562  050C  00F4               	movwf	Lcd_Text@y
  3563                           
  3564                           ;HD44780.c: 77: unsigned char data;
  3565                           ;HD44780.c: 78: switch(y){
  3566  050D  2D1B               	goto	l2242
  3567  050E                     l2232:	
  3568  050E  0872               	movf	Lcd_Text@x,w
  3569  050F  3E7F               	addlw	127
  3570  0510  2D19               	goto	L14
  3571  0511                     l2234:	
  3572  0511  0872               	movf	Lcd_Text@x,w
  3573  0512  3EBF               	addlw	191
  3574  0513  2D19               	goto	L14
  3575  0514                     l2236:	
  3576  0514  0872               	movf	Lcd_Text@x,w
  3577  0515  3E93               	addlw	147
  3578  0516  2D19               	goto	L14
  3579  0517                     l2238:	
  3580  0517  0872               	movf	Lcd_Text@x,w
  3581  0518  3ED3               	addlw	211
  3582  0519                     L14:	
  3583  0519  00F5               	movwf	Lcd_Text@data
  3584  051A  2D29               	goto	l2244
  3585  051B                     l2242:	
  3586  051B  0874               	movf	Lcd_Text@y,w
  3587                           
  3588                           ; Switch size 1, requested type "space"
  3589                           ; Number of cases is 4, Range of values is 1 to 4
  3590                           ; switch strategies available:
  3591                           ; Name         Instructions Cycles
  3592                           ; simple_byte           13     7 (average)
  3593                           ; direct_byte           23    11 (fixed)
  3594                           ; jumptable            263     9 (fixed)
  3595                           ;	Chosen strategy is simple_byte
  3596  051C  3A01               	xorlw	1	; case 1
  3597  051D  1903               	skipnz
  3598  051E  2D0E               	goto	l2232
  3599  051F  3A03               	xorlw	3	; case 2
  3600  0520  1903               	skipnz
  3601  0521  2D11               	goto	l2234
  3602  0522  3A01               	xorlw	1	; case 3
  3603  0523  1903               	skipnz
  3604  0524  2D14               	goto	l2236
  3605  0525  3A07               	xorlw	7	; case 4
  3606  0526  1903               	skipnz
  3607  0527  2D17               	goto	l2238
  3608  0528  2D29               	goto	l2244
  3609  0529                     l2244:	
  3610                           
  3611                           ;HD44780.c: 84: Lcd_Command(data);
  3612  0529  0875               	movf	Lcd_Text@data,w
  3613  052A  2635               	fcall	_Lcd_Command
  3614  052B                     l2250:	
  3615                           ;HD44780.c: 85: while(*buffer)
  3616                           
  3617  052B  0873               	movf	Lcd_Text@buffer,w
  3618  052C  0084               	movwf	4
  3619  052D  120A  158A  2000  120A  118A  	fcall	stringdir
  3620  0532  3A00               	xorlw	0
  3621  0533  1903               	btfsc	3,2
  3622  0534  0008               	return
  3623                           
  3624                           ;HD44780.c: 86: {
  3625                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  3626  0535  0873               	movf	Lcd_Text@buffer,w
  3627  0536  0084               	movwf	4
  3628  0537  120A  158A  2000  120A  118A  	fcall	stringdir
  3629  053C  2541  120A  118A   	fcall	_Lcd_CharCP
  3630                           
  3631                           ;HD44780.c: 88: buffer++;
  3632  053F  0AF3               	incf	Lcd_Text@buffer,f
  3633  0540  2D2B               	goto	l2250
  3634  0541                     __end_of_Lcd_Text:	
  3635  0541                     __ptext27:	
  3636 ;; *************** function _Lcd_CharCP *****************
  3637 ;; Defined at:
  3638 ;;		line 116 in file "libs/HD44780.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  c               1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  c               1    1[COMMON] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, status,0, pclath, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  3652 ;;      Params:         0       0       0       0       0
  3653 ;;      Locals:         1       0       0       0       0
  3654 ;;      Temps:          1       0       0       0       0
  3655 ;;      Totals:         2       0       0       0       0
  3656 ;;Total ram usage:        2 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    1
  3659 ;; This function calls:
  3660 ;;		_Lcd_Delay5us
  3661 ;; This function is called by:
  3662 ;;		_Lcd_Text
  3663 ;;		_Lcd_WriteChar
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function _Lcd_CharCP
  3669  0541                     _Lcd_CharCP:	
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _Lcd_CharCP: [wreg+status,2+status,0+pclath+cstack]
  3673                           ;Lcd_CharCP@c stored from wreg
  3674  0541  00F1               	movwf	Lcd_CharCP@c
  3675                           
  3676                           ;HD44780.c: 117: RA1 = 0; RA0 = 1;
  3677  0542  1283               	bcf	3,5	;RP0=0, select bank0
  3678  0543  1303               	bcf	3,6	;RP1=0, select bank0
  3679  0544  1085               	bcf	5,1	;volatile
  3680  0545  1405               	bsf	5,0	;volatile
  3681                           
  3682                           ;HD44780.c: 118: RA5 = (c & 0b10000000)>>7; RA4 = (c & 0b01000000)>>6;
  3683  0546  0871               	movf	Lcd_CharCP@c,w
  3684  0547  00F0               	movwf	??_Lcd_CharCP
  3685  0548  3007               	movlw	7
  3686  0549                     u1835:	
  3687  0549  1003               	clrc
  3688  054A  0CF0               	rrf	??_Lcd_CharCP,f
  3689  054B  3EFF               	addlw	-1
  3690  054C  1D03               	skipz
  3691  054D  2D49               	goto	u1835
  3692  054E  1C70               	btfss	??_Lcd_CharCP,0
  3693  054F  2D54               	goto	u1840
  3694  0550  1283               	bcf	3,5	;RP0=0, select bank0
  3695  0551  1303               	bcf	3,6	;RP1=0, select bank0
  3696  0552  1685               	bsf	5,5	;volatile
  3697  0553  2D57               	goto	u1854
  3698  0554                     u1840:	
  3699  0554  1283               	bcf	3,5	;RP0=0, select bank0
  3700  0555  1303               	bcf	3,6	;RP1=0, select bank0
  3701  0556  1285               	bcf	5,5	;volatile
  3702  0557                     u1854:	
  3703  0557  0871               	movf	Lcd_CharCP@c,w
  3704  0558  00F0               	movwf	??_Lcd_CharCP
  3705  0559  3006               	movlw	6
  3706  055A                     u1865:	
  3707  055A  1003               	clrc
  3708  055B  0CF0               	rrf	??_Lcd_CharCP,f
  3709  055C  3EFF               	addlw	-1
  3710  055D  1D03               	skipz
  3711  055E  2D5A               	goto	u1865
  3712  055F  1C70               	btfss	??_Lcd_CharCP,0
  3713  0560  2D65               	goto	u1870
  3714  0561  1283               	bcf	3,5	;RP0=0, select bank0
  3715  0562  1303               	bcf	3,6	;RP1=0, select bank0
  3716  0563  1605               	bsf	5,4	;volatile
  3717  0564  2D68               	goto	u1884
  3718  0565                     u1870:	
  3719  0565  1283               	bcf	3,5	;RP0=0, select bank0
  3720  0566  1303               	bcf	3,6	;RP1=0, select bank0
  3721  0567  1205               	bcf	5,4	;volatile
  3722  0568                     u1884:	
  3723                           
  3724                           ;HD44780.c: 119: RA3 = (c & 0b00100000)>>5; RA2 = (c & 0b00010000)>>4;
  3725  0568  0871               	movf	Lcd_CharCP@c,w
  3726  0569  00F0               	movwf	??_Lcd_CharCP
  3727  056A  3005               	movlw	5
  3728  056B                     u1895:	
  3729  056B  1003               	clrc
  3730  056C  0CF0               	rrf	??_Lcd_CharCP,f
  3731  056D  3EFF               	addlw	-1
  3732  056E  1D03               	skipz
  3733  056F  2D6B               	goto	u1895
  3734  0570  1C70               	btfss	??_Lcd_CharCP,0
  3735  0571  2D76               	goto	u1900
  3736  0572  1283               	bcf	3,5	;RP0=0, select bank0
  3737  0573  1303               	bcf	3,6	;RP1=0, select bank0
  3738  0574  1585               	bsf	5,3	;volatile
  3739  0575  2D79               	goto	u1914
  3740  0576                     u1900:	
  3741  0576  1283               	bcf	3,5	;RP0=0, select bank0
  3742  0577  1303               	bcf	3,6	;RP1=0, select bank0
  3743  0578  1185               	bcf	5,3	;volatile
  3744  0579                     u1914:	
  3745  0579  0871               	movf	Lcd_CharCP@c,w
  3746  057A  00F0               	movwf	??_Lcd_CharCP
  3747  057B  3004               	movlw	4
  3748  057C                     u1925:	
  3749  057C  1003               	clrc
  3750  057D  0CF0               	rrf	??_Lcd_CharCP,f
  3751  057E  3EFF               	addlw	-1
  3752  057F  1D03               	skipz
  3753  0580  2D7C               	goto	u1925
  3754  0581  1C70               	btfss	??_Lcd_CharCP,0
  3755  0582  2D87               	goto	u1930
  3756  0583  1283               	bcf	3,5	;RP0=0, select bank0
  3757  0584  1303               	bcf	3,6	;RP1=0, select bank0
  3758  0585  1505               	bsf	5,2	;volatile
  3759  0586  2D8A               	goto	l1922
  3760  0587                     u1930:	
  3761  0587  1283               	bcf	3,5	;RP0=0, select bank0
  3762  0588  1303               	bcf	3,6	;RP1=0, select bank0
  3763  0589  1105               	bcf	5,2	;volatile
  3764  058A                     l1922:	
  3765                           
  3766                           ;HD44780.c: 120: _delay(10);
  3767  058A  3003               	movlw	3
  3768  058B  00F0               	movwf	??_Lcd_CharCP
  3769  058C                     u3247:	
  3770  058C  0BF0               	decfsz	??_Lcd_CharCP,f
  3771  058D  2D8C               	goto	u3247
  3772                           
  3773                           ;HD44780.c: 121: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  3774  058E  1283               	bcf	3,5	;RP0=0, select bank0
  3775  058F  1303               	bcf	3,6	;RP1=0, select bank0
  3776  0590  1485               	bsf	5,1	;volatile
  3777  0591  26C9  120A  118A   	fcall	_Lcd_Delay5us
  3778  0594  1283               	bcf	3,5	;RP0=0, select bank0
  3779  0595  1303               	bcf	3,6	;RP1=0, select bank0
  3780  0596  1085               	bcf	5,1	;volatile
  3781                           
  3782                           ;HD44780.c: 122: RA5 = (c & 0b00001000)>>3; RA4 = (c & 0b00000100)>>2;
  3783  0597  27DA  120A  118A   	fcall	PL34	;call to abstracted procedure
  3784  059A  1003               	clrc
  3785  059B  0CF0               	rrf	??_Lcd_CharCP,f
  3786  059C  1C70               	btfss	??_Lcd_CharCP,0
  3787  059D  2DA2               	goto	u1950
  3788  059E  1283               	bcf	3,5	;RP0=0, select bank0
  3789  059F  1303               	bcf	3,6	;RP1=0, select bank0
  3790  05A0  1685               	bsf	5,5	;volatile
  3791  05A1  2DA5               	goto	l1932
  3792  05A2                     u1950:	
  3793  05A2  1283               	bcf	3,5	;RP0=0, select bank0
  3794  05A3  1303               	bcf	3,6	;RP1=0, select bank0
  3795  05A4  1285               	bcf	5,5	;volatile
  3796  05A5                     l1932:	
  3797  05A5  27DA  120A  118A   	fcall	PL34	;call to abstracted procedure
  3798  05A8  1C70               	btfss	??_Lcd_CharCP,0
  3799  05A9  2DAE               	goto	u1970
  3800  05AA  1283               	bcf	3,5	;RP0=0, select bank0
  3801  05AB  1303               	bcf	3,6	;RP1=0, select bank0
  3802  05AC  1605               	bsf	5,4	;volatile
  3803  05AD  2DB1               	goto	l1934
  3804  05AE                     u1970:	
  3805  05AE  1283               	bcf	3,5	;RP0=0, select bank0
  3806  05AF  1303               	bcf	3,6	;RP1=0, select bank0
  3807  05B0  1205               	bcf	5,4	;volatile
  3808  05B1                     l1934:	
  3809                           
  3810                           ;HD44780.c: 123: RA3 = (c & 0b00000010)>>1; RA2 = (c & 0b00000001);
  3811  05B1  0871               	movf	Lcd_CharCP@c,w
  3812  05B2  00F0               	movwf	??_Lcd_CharCP
  3813  05B3  1003               	clrc
  3814  05B4  0CF0               	rrf	??_Lcd_CharCP,f
  3815  05B5  1C70               	btfss	??_Lcd_CharCP,0
  3816  05B6  2DBB               	goto	u1990
  3817  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  3818  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  3819  05B9  1585               	bsf	5,3	;volatile
  3820  05BA  2DBE               	goto	l1936
  3821  05BB                     u1990:	
  3822  05BB  1283               	bcf	3,5	;RP0=0, select bank0
  3823  05BC  1303               	bcf	3,6	;RP1=0, select bank0
  3824  05BD  1185               	bcf	5,3	;volatile
  3825  05BE                     l1936:	
  3826  05BE  1C71               	btfss	Lcd_CharCP@c,0
  3827  05BF  2DC4               	goto	u2010
  3828  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  3829  05C1  1303               	bcf	3,6	;RP1=0, select bank0
  3830  05C2  1505               	bsf	5,2	;volatile
  3831  05C3  2DC7               	goto	l1938
  3832  05C4                     u2010:	
  3833  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3834  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  3835  05C6  1105               	bcf	5,2	;volatile
  3836  05C7                     l1938:	
  3837                           
  3838                           ;HD44780.c: 124: _delay(10);
  3839  05C7  3003               	movlw	3
  3840  05C8  00F0               	movwf	??_Lcd_CharCP
  3841  05C9                     u3257:	
  3842  05C9  0BF0               	decfsz	??_Lcd_CharCP,f
  3843  05CA  2DC9               	goto	u3257
  3844                           
  3845                           ;HD44780.c: 125: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  3846  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  3847  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  3848  05CD  1485               	bsf	5,1	;volatile
  3849  05CE  26C9  120A  118A   	fcall	_Lcd_Delay5us
  3850  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  3851  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  3852  05D3  1085               	bcf	5,1	;volatile
  3853                           
  3854                           ;HD44780.c: 126: Lcd_Delay5us();
  3855  05D4  2EC9               	ljmp	l1886
  3856  05D5                     __end_of_Lcd_CharCP:	
  3857  05D5                     __ptext22:	
  3858 ;; *************** function _Lcd_Init *****************
  3859 ;; Defined at:
  3860 ;;		line 17 in file "libs/HD44780.c"
  3861 ;; Parameters:    Size  Location     Type
  3862 ;;		None
  3863 ;; Auto vars:     Size  Location     Type
  3864 ;;  data            1    2[COMMON] unsigned char 
  3865 ;; Return value:  Size  Location     Type
  3866 ;;                  1    wreg      void 
  3867 ;; Registers used:
  3868 ;;		wreg, status,2, status,0, pclath, cstack
  3869 ;; Tracked objects:
  3870 ;;		On entry : B00/0
  3871 ;;		On exit  : 0/0
  3872 ;;		Unchanged: 0/0
  3873 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  3874 ;;      Params:         0       0       0       0       0
  3875 ;;      Locals:         1       0       0       0       0
  3876 ;;      Temps:          0       0       0       0       0
  3877 ;;      Totals:         1       0       0       0       0
  3878 ;;Total ram usage:        1 bytes
  3879 ;; Hardware stack levels used:    1
  3880 ;; Hardware stack levels required when called:    2
  3881 ;; This function calls:
  3882 ;;		_Lcd_Command
  3883 ;;		_Lcd_Delay5500us
  3884 ;;		_Lcd_Delay5us
  3885 ;; This function is called by:
  3886 ;;		_main
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _Lcd_Init
  3892  05D5                     _Lcd_Init:	
  3893                           
  3894                           ;HD44780.c: 19: ANSEL = 0x00;
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3898  05D5  1683               	bsf	3,5	;RP0=1, select bank3
  3899  05D6  1703               	bsf	3,6	;RP1=1, select bank3
  3900  05D7  0188               	clrf	8	;volatile
  3901                           
  3902                           ;HD44780.c: 20: ANSELH = 0x00;
  3903  05D8  0189               	clrf	9	;volatile
  3904                           
  3905                           ;HD44780.c: 23: unsigned char data;
  3906                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  3907  05D9  1303               	bcf	3,6	;RP1=0, select bank1
  3908  05DA  27D3  120A  118A   	fcall	PL32	;call to abstracted procedure
  3909                           
  3910                           ;HD44780.c: 25: RA5 = 0; RA4 = 0; RA3 = 0; RA2 = 0; RA1 = 0; RA0 = 0;
  3911  05DD  1283               	bcf	3,5	;RP0=0, select bank0
  3912  05DE  27D3  120A  118A   	fcall	PL32	;call to abstracted procedure
  3913                           
  3914                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  3915  05E1  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3916  05E4  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3917  05E7  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3918                           
  3919                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  3920  05EA  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3921  05ED  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3922  05F0  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3923                           
  3924                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  3925  05F3  01F2               	clrf	Lcd_Init@data
  3926  05F4  0AF2               	incf	Lcd_Init@data,f
  3927  05F5                     l63:	
  3928                           
  3929                           ;HD44780.c: 29: {
  3930                           ;HD44780.c: 30: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  3931  05F5  27B8  120A  118A   	fcall	PL24	;call to abstracted procedure
  3932                           
  3933                           ;HD44780.c: 31: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 1; RA0 = 0;
  3934  05F8  1285               	bcf	5,5	;volatile
  3935  05F9  1205               	bcf	5,4	;volatile
  3936  05FA  1585               	bsf	5,3	;volatile
  3937  05FB  1505               	bsf	5,2	;volatile
  3938  05FC  1485               	bsf	5,1	;volatile
  3939  05FD  1005               	bcf	5,0	;volatile
  3940                           
  3941                           ;HD44780.c: 32: Lcd_Delay5us();
  3942  05FE  26C9  120A  118A   	fcall	_Lcd_Delay5us
  3943                           
  3944                           ;HD44780.c: 33: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  3945  0601  27B8  120A  118A   	fcall	PL24	;call to abstracted procedure
  3946                           
  3947                           ;HD44780.c: 34: Lcd_Delay5500us();
  3948  0604  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3949  0607  3004               	movlw	4
  3950  0608  0AF2               	incf	Lcd_Init@data,f
  3951  0609  0272               	subwf	Lcd_Init@data,w
  3952  060A  1C03               	skipc
  3953  060B  2DF5               	goto	l63
  3954                           
  3955                           ;HD44780.c: 35: }
  3956                           ;HD44780.c: 36: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  3957  060C  27C1  120A  118A   	fcall	PL28	;call to abstracted procedure
  3958                           
  3959                           ;HD44780.c: 37: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 1; RA0 = 0;
  3960  060F  1285               	bcf	5,5	;volatile
  3961  0610  1205               	bcf	5,4	;volatile
  3962  0611  1585               	bsf	5,3	;volatile
  3963  0612  1105               	bcf	5,2	;volatile
  3964  0613  1485               	bsf	5,1	;volatile
  3965  0614  1005               	bcf	5,0	;volatile
  3966                           
  3967                           ;HD44780.c: 38: Lcd_Delay5us();
  3968  0615  26C9  120A  118A   	fcall	_Lcd_Delay5us
  3969                           
  3970                           ;HD44780.c: 39: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  3971  0618  27C1  120A  118A   	fcall	PL28	;call to abstracted procedure
  3972                           
  3973                           ;HD44780.c: 40: Lcd_Delay5500us();
  3974  061B  262C  120A  118A   	fcall	_Lcd_Delay5500us
  3975  061E  3028               	movlw	40
  3976  061F  2635  120A  118A   	fcall	_Lcd_Command
  3977  0622  3010               	movlw	16
  3978  0623  2635  120A  118A   	fcall	_Lcd_Command
  3979  0626  3001               	movlw	1
  3980  0627  2635  120A  118A   	fcall	_Lcd_Command
  3981  062A  300F               	movlw	15
  3982  062B  2E35               	ljmp	_Lcd_Command
  3983  062C                     __end_of_Lcd_Init:	
  3984  062C                     __ptext23:	
  3985 ;; *************** function _Lcd_Delay5500us *****************
  3986 ;; Defined at:
  3987 ;;		line 153 in file "libs/HD44780.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4001 ;;      Params:         0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0
  4003 ;;      Temps:          2       0       0       0       0
  4004 ;;      Totals:         2       0       0       0       0
  4005 ;;Total ram usage:        2 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_Lcd_Init
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           
  4015                           ;psect for function _Lcd_Delay5500us
  4016  062C                     _Lcd_Delay5500us:	
  4017                           
  4018                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4019                           
  4020                           ;incstack = 0
  4021                           ; Regs used in _Lcd_Delay5500us: [wreg]
  4022  062C  3008               	movlw	8
  4023  062D  00F1               	movwf	??_Lcd_Delay5500us+1
  4024  062E  3023               	movlw	35
  4025  062F  00F0               	movwf	??_Lcd_Delay5500us
  4026  0630                     u3217:	
  4027  0630  0BF0               	decfsz	??_Lcd_Delay5500us,f
  4028  0631  2E30               	goto	u3217
  4029  0632  0BF1               	decfsz	??_Lcd_Delay5500us+1,f
  4030  0633  2E30               	goto	u3217
  4031  0634  0008               	return
  4032  0635                     __end_of_Lcd_Delay5500us:	
  4033  0635                     __ptext26:	
  4034 ;; *************** function _Lcd_Command *****************
  4035 ;; Defined at:
  4036 ;;		line 133 in file "libs/HD44780.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;  command         1    wreg     unsigned char 
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  command         1    1[COMMON] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  1    wreg      void 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0, pclath, cstack
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4050 ;;      Params:         0       0       0       0       0
  4051 ;;      Locals:         1       0       0       0       0
  4052 ;;      Temps:          1       0       0       0       0
  4053 ;;      Totals:         2       0       0       0       0
  4054 ;;Total ram usage:        2 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    1
  4057 ;; This function calls:
  4058 ;;		_Lcd_Delay5us
  4059 ;; This function is called by:
  4060 ;;		_Lcd_Init
  4061 ;;		_Lcd_Text
  4062 ;;		_Lcd_WriteChar
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _Lcd_Command
  4068  0635                     _Lcd_Command:	
  4069                           
  4070                           ;incstack = 0
  4071                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+pclath+cstack]
  4072                           ;Lcd_Command@command stored from wreg
  4073  0635  00F1               	movwf	Lcd_Command@command
  4074                           
  4075                           ;HD44780.c: 134: RA1 = 0; RA0 = 0;
  4076  0636  1283               	bcf	3,5	;RP0=0, select bank0
  4077  0637  1303               	bcf	3,6	;RP1=0, select bank0
  4078  0638  1085               	bcf	5,1	;volatile
  4079  0639  1005               	bcf	5,0	;volatile
  4080                           
  4081                           ;HD44780.c: 135: RA5 = (command & 0b10000000)>>7; RA4 = (command & 0b01000000)>>6;
  4082  063A  0871               	movf	Lcd_Command@command,w
  4083  063B  00F0               	movwf	??_Lcd_Command
  4084  063C  3007               	movlw	7
  4085  063D                     u1635:	
  4086  063D  1003               	clrc
  4087  063E  0CF0               	rrf	??_Lcd_Command,f
  4088  063F  3EFF               	addlw	-1
  4089  0640  1D03               	skipz
  4090  0641  2E3D               	goto	u1635
  4091  0642  1C70               	btfss	??_Lcd_Command,0
  4092  0643  2E48               	goto	u1640
  4093  0644  1283               	bcf	3,5	;RP0=0, select bank0
  4094  0645  1303               	bcf	3,6	;RP1=0, select bank0
  4095  0646  1685               	bsf	5,5	;volatile
  4096  0647  2E4B               	goto	u1654
  4097  0648                     u1640:	
  4098  0648  1283               	bcf	3,5	;RP0=0, select bank0
  4099  0649  1303               	bcf	3,6	;RP1=0, select bank0
  4100  064A  1285               	bcf	5,5	;volatile
  4101  064B                     u1654:	
  4102  064B  0871               	movf	Lcd_Command@command,w
  4103  064C  00F0               	movwf	??_Lcd_Command
  4104  064D  3006               	movlw	6
  4105  064E                     u1665:	
  4106  064E  1003               	clrc
  4107  064F  0CF0               	rrf	??_Lcd_Command,f
  4108  0650  3EFF               	addlw	-1
  4109  0651  1D03               	skipz
  4110  0652  2E4E               	goto	u1665
  4111  0653  1C70               	btfss	??_Lcd_Command,0
  4112  0654  2E59               	goto	u1670
  4113  0655  1283               	bcf	3,5	;RP0=0, select bank0
  4114  0656  1303               	bcf	3,6	;RP1=0, select bank0
  4115  0657  1605               	bsf	5,4	;volatile
  4116  0658  2E5C               	goto	u1684
  4117  0659                     u1670:	
  4118  0659  1283               	bcf	3,5	;RP0=0, select bank0
  4119  065A  1303               	bcf	3,6	;RP1=0, select bank0
  4120  065B  1205               	bcf	5,4	;volatile
  4121  065C                     u1684:	
  4122                           
  4123                           ;HD44780.c: 136: RA3 = (command & 0b00100000)>>5; RA2 = (command & 0b00010000)>>4;
  4124  065C  0871               	movf	Lcd_Command@command,w
  4125  065D  00F0               	movwf	??_Lcd_Command
  4126  065E  3005               	movlw	5
  4127  065F                     u1695:	
  4128  065F  1003               	clrc
  4129  0660  0CF0               	rrf	??_Lcd_Command,f
  4130  0661  3EFF               	addlw	-1
  4131  0662  1D03               	skipz
  4132  0663  2E5F               	goto	u1695
  4133  0664  1C70               	btfss	??_Lcd_Command,0
  4134  0665  2E6A               	goto	u1700
  4135  0666  1283               	bcf	3,5	;RP0=0, select bank0
  4136  0667  1303               	bcf	3,6	;RP1=0, select bank0
  4137  0668  1585               	bsf	5,3	;volatile
  4138  0669  2E6D               	goto	u1714
  4139  066A                     u1700:	
  4140  066A  1283               	bcf	3,5	;RP0=0, select bank0
  4141  066B  1303               	bcf	3,6	;RP1=0, select bank0
  4142  066C  1185               	bcf	5,3	;volatile
  4143  066D                     u1714:	
  4144  066D  0871               	movf	Lcd_Command@command,w
  4145  066E  00F0               	movwf	??_Lcd_Command
  4146  066F  3004               	movlw	4
  4147  0670                     u1725:	
  4148  0670  1003               	clrc
  4149  0671  0CF0               	rrf	??_Lcd_Command,f
  4150  0672  3EFF               	addlw	-1
  4151  0673  1D03               	skipz
  4152  0674  2E70               	goto	u1725
  4153  0675  1C70               	btfss	??_Lcd_Command,0
  4154  0676  2E7B               	goto	u1730
  4155  0677  1283               	bcf	3,5	;RP0=0, select bank0
  4156  0678  1303               	bcf	3,6	;RP1=0, select bank0
  4157  0679  1505               	bsf	5,2	;volatile
  4158  067A  2E7E               	goto	l1896
  4159  067B                     u1730:	
  4160  067B  1283               	bcf	3,5	;RP0=0, select bank0
  4161  067C  1303               	bcf	3,6	;RP1=0, select bank0
  4162  067D  1105               	bcf	5,2	;volatile
  4163  067E                     l1896:	
  4164                           
  4165                           ;HD44780.c: 137: _delay(10);
  4166  067E  3003               	movlw	3
  4167  067F  00F0               	movwf	??_Lcd_Command
  4168  0680                     u3227:	
  4169  0680  0BF0               	decfsz	??_Lcd_Command,f
  4170  0681  2E80               	goto	u3227
  4171                           
  4172                           ;HD44780.c: 138: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4173  0682  1283               	bcf	3,5	;RP0=0, select bank0
  4174  0683  1303               	bcf	3,6	;RP1=0, select bank0
  4175  0684  1485               	bsf	5,1	;volatile
  4176  0685  26C9  120A  118A   	fcall	_Lcd_Delay5us
  4177  0688  1283               	bcf	3,5	;RP0=0, select bank0
  4178  0689  1303               	bcf	3,6	;RP1=0, select bank0
  4179  068A  1085               	bcf	5,1	;volatile
  4180                           
  4181                           ;HD44780.c: 139: RA5 = (command & 0b00001000)>>3; RA4 = (command & 0b00000100)>>2;
  4182  068B  27E1  120A  118A   	fcall	PL36	;call to abstracted procedure
  4183  068E  1003               	clrc
  4184  068F  0CF0               	rrf	??_Lcd_Command,f
  4185  0690  1C70               	btfss	??_Lcd_Command,0
  4186  0691  2E96               	goto	u1750
  4187  0692  1283               	bcf	3,5	;RP0=0, select bank0
  4188  0693  1303               	bcf	3,6	;RP1=0, select bank0
  4189  0694  1685               	bsf	5,5	;volatile
  4190  0695  2E99               	goto	l1906
  4191  0696                     u1750:	
  4192  0696  1283               	bcf	3,5	;RP0=0, select bank0
  4193  0697  1303               	bcf	3,6	;RP1=0, select bank0
  4194  0698  1285               	bcf	5,5	;volatile
  4195  0699                     l1906:	
  4196  0699  27E1  120A  118A   	fcall	PL36	;call to abstracted procedure
  4197  069C  1C70               	btfss	??_Lcd_Command,0
  4198  069D  2EA2               	goto	u1770
  4199  069E  1283               	bcf	3,5	;RP0=0, select bank0
  4200  069F  1303               	bcf	3,6	;RP1=0, select bank0
  4201  06A0  1605               	bsf	5,4	;volatile
  4202  06A1  2EA5               	goto	l1908
  4203  06A2                     u1770:	
  4204  06A2  1283               	bcf	3,5	;RP0=0, select bank0
  4205  06A3  1303               	bcf	3,6	;RP1=0, select bank0
  4206  06A4  1205               	bcf	5,4	;volatile
  4207  06A5                     l1908:	
  4208                           
  4209                           ;HD44780.c: 140: RA3 = (command & 0b00000010)>>1; RA2 = (command & 0b00000001);
  4210  06A5  0871               	movf	Lcd_Command@command,w
  4211  06A6  00F0               	movwf	??_Lcd_Command
  4212  06A7  1003               	clrc
  4213  06A8  0CF0               	rrf	??_Lcd_Command,f
  4214  06A9  1C70               	btfss	??_Lcd_Command,0
  4215  06AA  2EAF               	goto	u1790
  4216  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  4217  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  4218  06AD  1585               	bsf	5,3	;volatile
  4219  06AE  2EB2               	goto	l1910
  4220  06AF                     u1790:	
  4221  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  4222  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  4223  06B1  1185               	bcf	5,3	;volatile
  4224  06B2                     l1910:	
  4225  06B2  1C71               	btfss	Lcd_Command@command,0
  4226  06B3  2EB8               	goto	u1810
  4227  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  4228  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  4229  06B6  1505               	bsf	5,2	;volatile
  4230  06B7  2EBB               	goto	l1912
  4231  06B8                     u1810:	
  4232  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  4233  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  4234  06BA  1105               	bcf	5,2	;volatile
  4235  06BB                     l1912:	
  4236                           
  4237                           ;HD44780.c: 141: _delay(10);
  4238  06BB  3003               	movlw	3
  4239  06BC  00F0               	movwf	??_Lcd_Command
  4240  06BD                     u3237:	
  4241  06BD  0BF0               	decfsz	??_Lcd_Command,f
  4242  06BE  2EBD               	goto	u3237
  4243                           
  4244                           ;HD44780.c: 142: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4245  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  4246  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  4247  06C1  1485               	bsf	5,1	;volatile
  4248  06C2  26C9  120A  118A   	fcall	_Lcd_Delay5us
  4249  06C5  1283               	bcf	3,5	;RP0=0, select bank0
  4250  06C6  1303               	bcf	3,6	;RP1=0, select bank0
  4251  06C7  1085               	bcf	5,1	;volatile
  4252                           
  4253                           ;HD44780.c: 144: Lcd_Delay5us();
  4254  06C8  2EC9               	ljmp	l1886
  4255  06C9                     __end_of_Lcd_Command:	
  4256  06C9                     __ptext28:	
  4257 ;; *************** function _Lcd_Delay5us *****************
  4258 ;; Defined at:
  4259 ;;		line 150 in file "libs/HD44780.c"
  4260 ;; Parameters:    Size  Location     Type
  4261 ;;		None
  4262 ;; Auto vars:     Size  Location     Type
  4263 ;;		None
  4264 ;; Return value:  Size  Location     Type
  4265 ;;                  1    wreg      void 
  4266 ;; Registers used:
  4267 ;;		None
  4268 ;; Tracked objects:
  4269 ;;		On entry : 300/0
  4270 ;;		On exit  : 0/0
  4271 ;;		Unchanged: 0/0
  4272 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4273 ;;      Params:         0       0       0       0       0
  4274 ;;      Locals:         0       0       0       0       0
  4275 ;;      Temps:          0       0       0       0       0
  4276 ;;      Totals:         0       0       0       0       0
  4277 ;;Total ram usage:        0 bytes
  4278 ;; Hardware stack levels used:    1
  4279 ;; This function calls:
  4280 ;;		Nothing
  4281 ;; This function is called by:
  4282 ;;		_Lcd_Init
  4283 ;;		_Lcd_CharCP
  4284 ;;		_Lcd_Command
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _Lcd_Delay5us
  4290  06C9                     _Lcd_Delay5us:	
  4291  06C9                     l1886:	
  4292                           ;incstack = 0
  4293                           ; Regs used in _Lcd_Delay5us: []
  4294                           
  4295                           
  4296                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4297  06C9  2ECA               	nop2	;2 cycle nop
  4298  06CA  2ECB               	nop2	;2 cycle nop
  4299  06CB  0000               	nop
  4300  06CC  0008               	return
  4301  06CD                     __end_of_Lcd_Delay5us:	
  4302  06CD                     __ptext9:	
  4303 ;; *************** function _ReadVars *****************
  4304 ;; Defined at:
  4305 ;;		line 7 in file "libs/eeprom.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  i               1   19[BANK0 ] unsigned char 
  4310 ;;  j               1   18[BANK0 ] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      void 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 300/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4320 ;;      Params:         0       0       0       0       0
  4321 ;;      Locals:         0       2       0       0       0
  4322 ;;      Temps:          0      15       0       0       0
  4323 ;;      Totals:         0      17       0       0       0
  4324 ;;Total ram usage:       17 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    1
  4327 ;; This function calls:
  4328 ;;		___bmul
  4329 ;;		_eeprom_read
  4330 ;; This function is called by:
  4331 ;;		_main
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function _ReadVars
  4337  06CD                     _ReadVars:	
  4338                           
  4339                           ;eeprom.c: 8: C_D = eeprom_read(0xDE);
  4340                           
  4341                           ;incstack = 0
  4342                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4343  06CD  30DE               	movlw	222
  4344  06CE  2789  120A  118A   	fcall	_eeprom_read
  4345  06D1  1683               	bsf	3,5	;RP0=1, select bank1
  4346  06D2  1303               	bcf	3,6	;RP1=0, select bank1
  4347  06D3  00E6               	movwf	_C_D^(0+128)	;volatile
  4348                           
  4349                           ;eeprom.c: 9: UINT8 i, j;
  4350                           ;eeprom.c: 10: for (i = 0; i<3; i++) {
  4351  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  4352  06D5  01BF               	clrf	ReadVars@i
  4353  06D6                     l2292:	
  4354  06D6  3003               	movlw	3
  4355  06D7  023F               	subwf	ReadVars@i,w
  4356  06D8  1803               	btfsc	3,0
  4357  06D9  2F4B               	goto	l2304
  4358                           
  4359                           ;eeprom.c: 11: C[i] = (uint32_t) eeprom_read(0xD2 + 3*i)*256*256
  4360                           ;eeprom.c: 12: + (uint16_t) eeprom_read(0xD2 + 1 + 3*i)*256
  4361                           ;eeprom.c: 13: + eeprom_read(0xD2 + 2 + 3*i);
  4362  06DA  083F               	movf	ReadVars@i,w
  4363  06DB  073F               	addwf	ReadVars@i,w
  4364  06DC  073F               	addwf	ReadVars@i,w
  4365  06DD  3ED4               	addlw	212
  4366  06DE  2789  120A  118A   	fcall	_eeprom_read
  4367  06E1  1303               	bcf	3,6	;RP1=0, select bank0
  4368  06E2  00AF               	movwf	??_ReadVars
  4369  06E3  01B0               	clrf	??_ReadVars+1
  4370  06E4  01B1               	clrf	??_ReadVars+2
  4371  06E5  01B2               	clrf	??_ReadVars+3
  4372  06E6  083F               	movf	ReadVars@i,w
  4373  06E7  073F               	addwf	ReadVars@i,w
  4374  06E8  073F               	addwf	ReadVars@i,w
  4375  06E9  3ED3               	addlw	211
  4376  06EA  2789  120A  118A   	fcall	_eeprom_read
  4377  06ED  1303               	bcf	3,6	;RP1=0, select bank0
  4378  06EE  00B3               	movwf	??_ReadVars+4
  4379  06EF  01B4               	clrf	??_ReadVars+5
  4380  06F0  00B4               	movwf	??_ReadVars+5
  4381  06F1  01B3               	clrf	??_ReadVars+4
  4382  06F2  0833               	movf	??_ReadVars+4,w
  4383  06F3  00B5               	movwf	??_ReadVars+6
  4384  06F4  0834               	movf	??_ReadVars+5,w
  4385  06F5  00B6               	movwf	??_ReadVars+7
  4386  06F6  01B7               	clrf	??_ReadVars+8
  4387  06F7  01B8               	clrf	??_ReadVars+9
  4388  06F8  083F               	movf	ReadVars@i,w
  4389  06F9  073F               	addwf	ReadVars@i,w
  4390  06FA  073F               	addwf	ReadVars@i,w
  4391  06FB  3ED2               	addlw	210
  4392  06FC  2789  120A  118A   	fcall	_eeprom_read
  4393  06FF  1303               	bcf	3,6	;RP1=0, select bank0
  4394  0700  00B9               	movwf	??_ReadVars+10
  4395  0701  01BA               	clrf	??_ReadVars+11
  4396  0702  01BB               	clrf	??_ReadVars+12
  4397  0703  01BC               	clrf	??_ReadVars+13
  4398  0704  083A               	movf	??_ReadVars+11,w
  4399  0705  00BC               	movwf	??_ReadVars+13
  4400  0706  0839               	movf	??_ReadVars+10,w
  4401  0707  00BB               	movwf	??_ReadVars+12
  4402  0708  01BA               	clrf	??_ReadVars+11
  4403  0709  01B9               	clrf	??_ReadVars+10
  4404  070A  0839               	movf	??_ReadVars+10,w
  4405  070B  07B5               	addwf	??_ReadVars+6,f
  4406  070C  083A               	movf	??_ReadVars+11,w
  4407  070D  1803               	skipnc
  4408  070E  0F3A               	incfsz	??_ReadVars+11,w
  4409  070F  07B6               	addwf	??_ReadVars+7,f
  4410  0710  083B               	movf	??_ReadVars+12,w
  4411  0711  1803               	skipnc
  4412  0712  0F3B               	incfsz	??_ReadVars+12,w
  4413  0713  07B7               	addwf	??_ReadVars+8,f
  4414  0714  083C               	movf	??_ReadVars+13,w
  4415  0715  1803               	skipnc
  4416  0716  0A3C               	incf	??_ReadVars+13,w
  4417  0717  07B8               	addwf	??_ReadVars+9,f
  4418  0718  0835               	movf	??_ReadVars+6,w
  4419  0719  07AF               	addwf	??_ReadVars,f
  4420  071A  0836               	movf	??_ReadVars+7,w
  4421  071B  1803               	skipnc
  4422  071C  0F36               	incfsz	??_ReadVars+7,w
  4423  071D  07B0               	addwf	??_ReadVars+1,f
  4424  071E  0837               	movf	??_ReadVars+8,w
  4425  071F  1803               	skipnc
  4426  0720  0F37               	incfsz	??_ReadVars+8,w
  4427  0721  07B1               	addwf	??_ReadVars+2,f
  4428  0722  0838               	movf	??_ReadVars+9,w
  4429  0723  1803               	skipnc
  4430  0724  0A38               	incf	??_ReadVars+9,w
  4431  0725  07B2               	addwf	??_ReadVars+3,f
  4432  0726  083F               	movf	ReadVars@i,w
  4433  0727  00BD               	movwf	??_ReadVars+14
  4434  0728  3001               	movlw	1
  4435  0729  1003               	clrc
  4436  072A                     L11:	
  4437  072A  0DBD               	rlf	??_ReadVars+14,f
  4438  072B  3EFF               	addlw	-1
  4439  072C  1003               	clrc
  4440  072D  1D03               	skipz
  4441  072E  2F2A               	goto	L11
  4442  072F  0D3D               	rlf	??_ReadVars+14,w
  4443  0730  3E20               	addlw	32
  4444  0731  0084               	movwf	4
  4445  0732  082F               	movf	??_ReadVars,w
  4446  0733  1383               	bcf	3,7	;select IRP bank0
  4447  0734  0080               	movwf	0
  4448  0735  0A84               	incf	4,f
  4449  0736  0830               	movf	??_ReadVars+1,w
  4450  0737  0080               	movwf	0
  4451  0738  0A84               	incf	4,f
  4452  0739  0831               	movf	??_ReadVars+2,w
  4453  073A  0080               	movwf	0
  4454  073B  0A84               	incf	4,f
  4455  073C  0832               	movf	??_ReadVars+3,w
  4456  073D  0080               	movwf	0
  4457                           
  4458                           ;eeprom.c: 14: STATE_BREAKS[i] = eeprom_read(0xDB+i);
  4459  073E  083F               	movf	ReadVars@i,w
  4460  073F  3EE2               	addlw	(low (_STATE_BREAKS| 0))& (0+255)
  4461  0740  0084               	movwf	4
  4462  0741  083F               	movf	ReadVars@i,w
  4463  0742  3EDB               	addlw	219
  4464  0743  2789  120A  118A   	fcall	_eeprom_read
  4465  0746  1383               	bcf	3,7	;select IRP bank1
  4466  0747  0080               	movwf	0
  4467  0748  1303               	bcf	3,6	;RP1=0, select bank0
  4468  0749  0ABF               	incf	ReadVars@i,f
  4469  074A  2ED6               	goto	l2292
  4470  074B                     l2304:	
  4471                           
  4472                           ;eeprom.c: 15: }
  4473                           ;eeprom.c: 16: for (i = 0; i<30; i++) {
  4474  074B  01BF               	clrf	ReadVars@i
  4475  074C                     l2306:	
  4476  074C  301E               	movlw	30
  4477  074D  023F               	subwf	ReadVars@i,w
  4478  074E  1803               	btfsc	3,0
  4479  074F  0008               	return
  4480                           
  4481                           ;eeprom.c: 17: STATE_PERIODS[i] = eeprom_read(0x00
  4482                           ;eeprom.c: 18: + i*(1 + 2*3));
  4483  0750  083F               	movf	ReadVars@i,w
  4484  0751  3ECC               	addlw	204
  4485  0752  0084               	movwf	4
  4486  0753  3007               	movlw	7
  4487  0754  00AC               	movwf	___bmul@multiplicand
  4488  0755  083F               	movf	ReadVars@i,w
  4489  0756  279E  120A  118A   	fcall	___bmul
  4490  0759  2789  120A  118A   	fcall	_eeprom_read
  4491  075C  1783               	bsf	3,7	;select IRP bank3
  4492  075D  0080               	movwf	0
  4493                           
  4494                           ;eeprom.c: 19: for (j = 0; j<2; j++) {
  4495  075E  1303               	bcf	3,6	;RP1=0, select bank0
  4496  075F  01BE               	clrf	ReadVars@j
  4497  0760                     l2318:	
  4498                           
  4499                           ;eeprom.c: 20: STATE_1[i][j] = eeprom_read(0x00
  4500                           ;eeprom.c: 21: + i*(1 + 2*3)
  4501                           ;eeprom.c: 22: + (1 + j));
  4502  0760  083F               	movf	ReadVars@i,w
  4503  0761  00AF               	movwf	??_ReadVars
  4504  0762  30A0               	movlw	160
  4505  0763  27AC  120A  118A   	fcall	PL16	;call to abstracted procedure
  4506  0766  279E  120A  118A   	fcall	___bmul
  4507  0769  073E               	addwf	ReadVars@j,w
  4508  076A  3E01               	addlw	1
  4509  076B  2789  120A  118A   	fcall	_eeprom_read
  4510  076E  1383               	bcf	3,7	;select IRP bank1
  4511  076F  0080               	movwf	0
  4512                           
  4513                           ;eeprom.c: 23: STATE_2[i][j] = eeprom_read(0x00
  4514                           ;eeprom.c: 24: + i*(1 + 2*3)
  4515                           ;eeprom.c: 25: + (3 + j));
  4516  0770  1303               	bcf	3,6	;RP1=0, select bank0
  4517  0771  083F               	movf	ReadVars@i,w
  4518  0772  00AF               	movwf	??_ReadVars
  4519  0773  3010               	movlw	16
  4520  0774  27AC  120A  118A   	fcall	PL16	;call to abstracted procedure
  4521  0777  279E  120A  118A   	fcall	___bmul
  4522  077A  073E               	addwf	ReadVars@j,w
  4523  077B  3E03               	addlw	3
  4524  077C  2789  120A  118A   	fcall	_eeprom_read
  4525  077F  1783               	bsf	3,7	;select IRP bank2
  4526  0780  0080               	movwf	0
  4527  0781  1303               	bcf	3,6	;RP1=0, select bank0
  4528  0782  3002               	movlw	2
  4529  0783  0ABE               	incf	ReadVars@j,f
  4530  0784  023E               	subwf	ReadVars@j,w
  4531  0785  1C03               	skipc
  4532  0786  2F60               	goto	l2318
  4533  0787  0ABF               	incf	ReadVars@i,f
  4534  0788  2F4C               	goto	l2306
  4535  0789                     __end_of_ReadVars:	
  4536  0789                     __ptext10:	
  4537 ;; *************** function _eeprom_read *****************
  4538 ;; Defined at:
  4539 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  addr            1    wreg     unsigned char 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;  addr            1    0[COMMON] unsigned char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      unsigned char 
  4546 ;; Registers used:
  4547 ;;		wreg, status,2, status,0
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 300/200
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4553 ;;      Params:         0       0       0       0       0
  4554 ;;      Locals:         1       0       0       0       0
  4555 ;;      Temps:          0       0       0       0       0
  4556 ;;      Totals:         1       0       0       0       0
  4557 ;;Total ram usage:        1 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_ReadVars
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           
  4567                           ;psect for function _eeprom_read
  4568  0789                     _eeprom_read:	
  4569                           
  4570                           ;incstack = 0
  4571                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4572                           ;eeprom_read@addr stored from wreg
  4573  0789  00F0               	movwf	eeprom_read@addr
  4574  078A                     l524:	
  4575  078A  0064               	clrwdt	;# 
  4576  078B  1683               	bsf	3,5	;RP0=1, select bank3
  4577  078C  1703               	bsf	3,6	;RP1=1, select bank3
  4578  078D  188C               	btfsc	12,1	;volsfr
  4579  078E  2F8A               	goto	l524
  4580  078F  0870               	movf	eeprom_read@addr,w
  4581  0790  1283               	bcf	3,5	;RP0=0, select bank2
  4582  0791  008D               	movwf	13	;volatile
  4583  0792  303F               	movlw	63
  4584  0793  1683               	bsf	3,5	;RP0=1, select bank3
  4585  0794  058C               	andwf	12,f	;volsfr
  4586  0795  140C               	bsf	12,0	;volsfr
  4587  0796  1003               	clrc
  4588  0797  180C               	btfsc	12,0	;volsfr
  4589  0798  1403               	setc
  4590  0799  1803               	skipnc
  4591  079A  3001               	movlw	1
  4592  079B  1283               	bcf	3,5	;RP0=0, select bank2
  4593  079C  080C               	movf	12,w	;volatile
  4594  079D  0008               	return
  4595  079E                     __end_of_eeprom_read:	
  4596  079E                     __ptext11:	
  4597 ;; *************** function ___bmul *****************
  4598 ;; Defined at:
  4599 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;  multiplier      1    wreg     unsigned char 
  4602 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  multiplier      1    2[BANK0 ] unsigned char 
  4605 ;;  product         1    1[BANK0 ] unsigned char 
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      unsigned char 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2, status,0
  4610 ;; Tracked objects:
  4611 ;;		On entry : 300/800
  4612 ;;		On exit  : 300/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4615 ;;      Params:         0       1       0       0       0
  4616 ;;      Locals:         0       2       0       0       0
  4617 ;;      Temps:          0       0       0       0       0
  4618 ;;      Totals:         0       3       0       0       0
  4619 ;;Total ram usage:        3 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; This function calls:
  4622 ;;		Nothing
  4623 ;; This function is called by:
  4624 ;;		_WriteLongInt
  4625 ;;		_ReadVars
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function ___bmul
  4631  079E                     ___bmul:	
  4632                           
  4633                           ;incstack = 0
  4634                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4635                           ;___bmul@multiplier stored from wreg
  4636  079E  00AE               	movwf	___bmul@multiplier
  4637  079F  01AD               	clrf	___bmul@product
  4638  07A0                     l2038:	
  4639  07A0  082C               	movf	___bmul@multiplicand,w
  4640  07A1  182E               	btfsc	___bmul@multiplier,0
  4641  07A2  07AD               	addwf	___bmul@product,f
  4642  07A3  1003               	clrc
  4643  07A4  0DAC               	rlf	___bmul@multiplicand,f
  4644  07A5  1003               	clrc
  4645  07A6  0CAE               	rrf	___bmul@multiplier,f
  4646  07A7  082E               	movf	___bmul@multiplier,w
  4647  07A8  1D03               	btfss	3,2
  4648  07A9  2FA0               	goto	l2038
  4649  07AA  082D               	movf	___bmul@product,w
  4650  07AB  0008               	return
  4651  07AC                     __end_of___bmul:	
  4652  07AC                     PL16:	
  4653  07AC  1003               	clrc
  4654  07AD  0DAF               	rlf	??_ReadVars,f
  4655  07AE  072F               	addwf	??_ReadVars,w
  4656  07AF  00B0               	movwf	??_ReadVars+1
  4657  07B0  083E               	movf	ReadVars@j,w
  4658  07B1  0730               	addwf	??_ReadVars+1,w
  4659  07B2  00B1               	movwf	??_ReadVars+2
  4660  07B3  0084               	movwf	4
  4661  07B4  3007               	movlw	7
  4662  07B5  00AC               	movwf	___bmul@multiplicand
  4663  07B6  083F               	movf	ReadVars@i,w
  4664  07B7  0008               	return
  4665  07B8                     __end_ofPL16:	
  4666  07B8                     PL24:	
  4667  07B8  1283               	bcf	3,5	;RP0=0, select bank0
  4668  07B9  1303               	bcf	3,6	;RP1=0, select bank0
  4669  07BA  1285               	bcf	5,5	;volatile
  4670  07BB  1205               	bcf	5,4	;volatile
  4671  07BC  1585               	bsf	5,3	;volatile
  4672  07BD  1505               	bsf	5,2	;volatile
  4673  07BE  1085               	bcf	5,1	;volatile
  4674  07BF  1005               	bcf	5,0	;volatile
  4675  07C0  0008               	return
  4676  07C1                     __end_ofPL24:	
  4677  07C1                     PL28:	
  4678  07C1  1283               	bcf	3,5	;RP0=0, select bank0
  4679  07C2  1303               	bcf	3,6	;RP1=0, select bank0
  4680  07C3  1285               	bcf	5,5	;volatile
  4681  07C4  1205               	bcf	5,4	;volatile
  4682  07C5  1585               	bsf	5,3	;volatile
  4683  07C6  1105               	bcf	5,2	;volatile
  4684  07C7  1085               	bcf	5,1	;volatile
  4685  07C8  1005               	bcf	5,0	;volatile
  4686  07C9  0008               	return
  4687  07CA                     __end_ofPL28:	
  4688  07CA                     PL30:	
  4689  07CA  0837               	movf	WriteLongInt@Val+3,w
  4690  07CB  00F7               	movwf	___aldiv@dividend+3
  4691  07CC  0836               	movf	WriteLongInt@Val+2,w
  4692  07CD  00F6               	movwf	___aldiv@dividend+2
  4693  07CE  0835               	movf	WriteLongInt@Val+1,w
  4694  07CF  00F5               	movwf	___aldiv@dividend+1
  4695  07D0  0834               	movf	WriteLongInt@Val,w
  4696  07D1  00F4               	movwf	___aldiv@dividend
  4697  07D2  0008               	return
  4698  07D3                     __end_ofPL30:	
  4699  07D3                     PL32:	
  4700  07D3  1285               	bcf	5,5	;volatile
  4701  07D4  1205               	bcf	5,4	;volatile
  4702  07D5  1185               	bcf	5,3	;volatile
  4703  07D6  1105               	bcf	5,2	;volatile
  4704  07D7  1085               	bcf	5,1	;volatile
  4705  07D8  1005               	bcf	5,0	;volatile
  4706  07D9  0008               	return
  4707  07DA                     __end_ofPL32:	
  4708  07DA                     PL34:	
  4709  07DA  0871               	movf	Lcd_CharCP@c,w
  4710  07DB  00F0               	movwf	??_Lcd_CharCP
  4711  07DC  1003               	clrc
  4712  07DD  0CF0               	rrf	??_Lcd_CharCP,f
  4713  07DE  1003               	clrc
  4714  07DF  0CF0               	rrf	??_Lcd_CharCP,f
  4715  07E0  0008               	return
  4716  07E1                     __end_ofPL34:	
  4717  07E1                     PL36:	
  4718  07E1  0871               	movf	Lcd_Command@command,w
  4719  07E2  00F0               	movwf	??_Lcd_Command
  4720  07E3  1003               	clrc
  4721  07E4  0CF0               	rrf	??_Lcd_Command,f
  4722  07E5  1003               	clrc
  4723  07E6  0CF0               	rrf	??_Lcd_Command,f
  4724  07E7  0008               	return
  4725  07E8                     __end_ofPL36:	
  4726                           
  4727                           	psect	text8
  4728  0BC0                     __ptext8:	
  4729 ;; *************** function _SwitchGPS *****************
  4730 ;; Defined at:
  4731 ;;		line 51 in file "libs/gsk_algo_funcs.c"
  4732 ;; Parameters:    Size  Location     Type
  4733 ;;  a               1    wreg     unsigned char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  a               1    0[COMMON] unsigned char 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  1    wreg      void 
  4738 ;; Registers used:
  4739 ;;		wreg
  4740 ;; Tracked objects:
  4741 ;;		On entry : 300/100
  4742 ;;		On exit  : 300/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4745 ;;      Params:         0       0       0       0       0
  4746 ;;      Locals:         1       0       0       0       0
  4747 ;;      Temps:          0       0       0       0       0
  4748 ;;      Totals:         1       0       0       0       0
  4749 ;;Total ram usage:        1 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; This function calls:
  4752 ;;		Nothing
  4753 ;; This function is called by:
  4754 ;;		_main
  4755 ;; This function uses a non-reentrant model
  4756 ;;
  4757                           
  4758                           
  4759                           ;psect for function _SwitchGPS
  4760  0BC0                     _SwitchGPS:	
  4761                           
  4762                           ;incstack = 0
  4763                           ; Regs used in _SwitchGPS: [wreg]
  4764                           ;SwitchGPS@a stored from wreg
  4765  0BC0  00F0               	movwf	SwitchGPS@a
  4766                           
  4767                           ;gsk_algo_funcs.c: 52: RC1 = a;
  4768  0BC1  1C70               	btfss	SwitchGPS@a,0
  4769  0BC2  2BC7               	goto	u2650
  4770  0BC3  1283               	bcf	3,5	;RP0=0, select bank0
  4771  0BC4  1303               	bcf	3,6	;RP1=0, select bank0
  4772  0BC5  1487               	bsf	7,1	;volatile
  4773  0BC6  0008               	return
  4774  0BC7                     u2650:	
  4775  0BC7  1283               	bcf	3,5	;RP0=0, select bank0
  4776  0BC8  1303               	bcf	3,6	;RP1=0, select bank0
  4777  0BC9  1087               	bcf	7,1	;volatile
  4778  0BCA  0008               	return
  4779  0BCB                     __end_of_SwitchGPS:	
  4780                           
  4781                           	psect	text12
  4782  0E9A                     __ptext12:	
  4783 ;; *************** function _ReadRTCAsSec *****************
  4784 ;; Defined at:
  4785 ;;		line 27 in file "libs/gsk_RTC_GPS.c"
  4786 ;; Parameters:    Size  Location     Type
  4787 ;;		None
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  Out             4   13[BANK0 ] long 
  4790 ;;  TempVar000      1   17[BANK0 ] unsigned char 
  4791 ;; Return value:  Size  Location     Type
  4792 ;;                  4    0[BANK0 ] long 
  4793 ;; Registers used:
  4794 ;;		wreg, status,2, status,0, pclath, cstack
  4795 ;; Tracked objects:
  4796 ;;		On entry : 300/100
  4797 ;;		On exit  : 300/0
  4798 ;;		Unchanged: 0/0
  4799 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  4800 ;;      Params:         0       4       0       0       0
  4801 ;;      Locals:         0       7       0       0       0
  4802 ;;      Temps:          0       7       0       0       0
  4803 ;;      Totals:         0      18       0       0       0
  4804 ;;Total ram usage:       18 bytes
  4805 ;; Hardware stack levels used:    1
  4806 ;; Hardware stack levels required when called:    3
  4807 ;; This function calls:
  4808 ;;		_I2C_ReadAtAddress
  4809 ;;		___lmul
  4810 ;;		___wmul
  4811 ;; This function is called by:
  4812 ;;		_main
  4813 ;; This function uses a non-reentrant model
  4814 ;;
  4815                           
  4816                           
  4817                           ;psect for function _ReadRTCAsSec
  4818  0E9A                     _ReadRTCAsSec:	
  4819                           
  4820                           ;gsk_RTC_GPS.c: 30: TempVar000 = I2C_ReadAtAddress(0xde, 0x02);
  4821                           
  4822                           ;incstack = 0
  4823                           ; Regs used in _ReadRTCAsSec: [wreg+status,2+status,0+pclath+cstack]
  4824  0E9A  3002               	movlw	2
  4825  0E9B  00F4               	movwf	I2C_ReadAtAddress@IntAdd
  4826  0E9C  30DE               	movlw	222
  4827  0E9D  2769  120A  158A   	fcall	_I2C_ReadAtAddress
  4828  0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  4829  0EA1  00BD               	movwf	ReadRTCAsSec@TempVar000
  4830                           
  4831                           ;gsk_RTC_GPS.c: 31: Out = ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x03)*10);
  4832  0EA2  390F               	andlw	15
  4833  0EA3  00B0               	movwf	??_ReadRTCAsSec
  4834  0EA4  0E3D               	swapf	ReadRTCAsSec@TempVar000,w
  4835  0EA5  390F               	andlw	15
  4836  0EA6  3903               	andlw	3
  4837  0EA7  00F0               	movwf	___wmul@multiplier
  4838  0EA8  300A               	movlw	10
  4839  0EA9  01F1               	clrf	___wmul@multiplier+1
  4840  0EAA  00F2               	movwf	___wmul@multiplicand
  4841  0EAB  01F3               	clrf	___wmul@multiplicand+1
  4842  0EAC  2750  120A  158A   	fcall	___wmul
  4843  0EAF  0830               	movf	??_ReadRTCAsSec,w
  4844  0EB0  0770               	addwf	?___wmul,w
  4845  0EB1  00B9               	movwf	ReadRTCAsSec@Out
  4846  0EB2  3000               	movlw	0
  4847  0EB3  1803               	skipnc
  4848  0EB4  3001               	movlw	1
  4849  0EB5  0771               	addwf	?___wmul+1,w
  4850  0EB6  00BA               	movwf	ReadRTCAsSec@Out+1
  4851  0EB7  01BB               	clrf	ReadRTCAsSec@Out+2
  4852  0EB8  1BBA               	btfsc	ReadRTCAsSec@Out+1,7
  4853  0EB9  03BB               	decf	ReadRTCAsSec@Out+2,f
  4854  0EBA  083B               	movf	ReadRTCAsSec@Out+2,w
  4855  0EBB  00BC               	movwf	ReadRTCAsSec@Out+3
  4856                           
  4857                           ;gsk_RTC_GPS.c: 32: Out = Out*3600;
  4858  0EBC  300E               	movlw	14
  4859  0EBD  01F3               	clrf	___lmul@multiplier+3
  4860  0EBE  01F2               	clrf	___lmul@multiplier+2
  4861  0EBF  00F1               	movwf	___lmul@multiplier+1
  4862  0EC0  3010               	movlw	16
  4863  0EC1  00F0               	movwf	___lmul@multiplier
  4864  0EC2  083C               	movf	ReadRTCAsSec@Out+3,w
  4865  0EC3  00F7               	movwf	___lmul@multiplicand+3
  4866  0EC4  083B               	movf	ReadRTCAsSec@Out+2,w
  4867  0EC5  00F6               	movwf	___lmul@multiplicand+2
  4868  0EC6  083A               	movf	ReadRTCAsSec@Out+1,w
  4869  0EC7  00F5               	movwf	___lmul@multiplicand+1
  4870  0EC8  0839               	movf	ReadRTCAsSec@Out,w
  4871  0EC9  00F4               	movwf	___lmul@multiplicand
  4872  0ECA  27C4  120A  158A   	fcall	___lmul
  4873  0ECD  0873               	movf	?___lmul+3,w
  4874  0ECE  00BC               	movwf	ReadRTCAsSec@Out+3
  4875  0ECF  0872               	movf	?___lmul+2,w
  4876  0ED0  00BB               	movwf	ReadRTCAsSec@Out+2
  4877  0ED1  0871               	movf	?___lmul+1,w
  4878  0ED2  00BA               	movwf	ReadRTCAsSec@Out+1
  4879  0ED3  0870               	movf	?___lmul,w
  4880  0ED4  00B9               	movwf	ReadRTCAsSec@Out
  4881  0ED5  30DE               	movlw	222
  4882                           
  4883                           ;gsk_RTC_GPS.c: 34: TempVar000 = I2C_ReadAtAddress(0xde, 0x01);
  4884  0ED6  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  4885  0ED7  0AF4               	incf	I2C_ReadAtAddress@IntAdd,f
  4886  0ED8  2769  120A  158A   	fcall	_I2C_ReadAtAddress
  4887  0EDB  1283               	bcf	3,5	;RP0=0, select bank0
  4888  0EDC  00BD               	movwf	ReadRTCAsSec@TempVar000
  4889                           
  4890                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  4891  0EDD  27F7  120A  158A   	fcall	PL22	;call to abstracted procedure
  4892  0EE0  2750  120A  158A   	fcall	___wmul
  4893  0EE3  0871               	movf	?___wmul+1,w
  4894  0EE4  00B8               	movwf	_ReadRTCAsSec$889+1
  4895  0EE5  0870               	movf	?___wmul,w
  4896  0EE6  00B7               	movwf	_ReadRTCAsSec$889
  4897  0EE7  083D               	movf	ReadRTCAsSec@TempVar000,w
  4898  0EE8  390F               	andlw	15
  4899  0EE9  07B7               	addwf	_ReadRTCAsSec$889,f
  4900  0EEA  1803               	skipnc
  4901  0EEB  0AB8               	incf	_ReadRTCAsSec$889+1,f
  4902                           
  4903                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  4904  0EEC  0838               	movf	_ReadRTCAsSec$889+1,w
  4905  0EED  00F1               	movwf	___wmul@multiplier+1
  4906  0EEE  0837               	movf	_ReadRTCAsSec$889,w
  4907  0EEF  00F0               	movwf	___wmul@multiplier
  4908  0EF0  303C               	movlw	60
  4909  0EF1  00F2               	movwf	___wmul@multiplicand
  4910  0EF2  01F3               	clrf	___wmul@multiplicand+1
  4911  0EF3  2750  120A  158A   	fcall	___wmul
  4912  0EF6  0870               	movf	?___wmul,w
  4913  0EF7  00B0               	movwf	??_ReadRTCAsSec
  4914  0EF8  0871               	movf	?___wmul+1,w
  4915  0EF9  00B1               	movwf	??_ReadRTCAsSec+1
  4916  0EFA  3000               	movlw	0
  4917  0EFB  1BB1               	btfsc	??_ReadRTCAsSec+1,7
  4918  0EFC  30FF               	movlw	255
  4919  0EFD  00B2               	movwf	??_ReadRTCAsSec+2
  4920  0EFE  00B3               	movwf	??_ReadRTCAsSec+3
  4921  0EFF  0830               	movf	??_ReadRTCAsSec,w
  4922  0F00  07B9               	addwf	ReadRTCAsSec@Out,f
  4923  0F01  0831               	movf	??_ReadRTCAsSec+1,w
  4924  0F02  1103               	clrz
  4925  0F03  1803               	skipnc
  4926  0F04  3E01               	addlw	1
  4927  0F05  1D03               	btfss	3,2
  4928  0F06  07BA               	addwf	ReadRTCAsSec@Out+1,f
  4929  0F07  0832               	movf	??_ReadRTCAsSec+2,w
  4930  0F08  1103               	clrz
  4931  0F09  1803               	skipnc
  4932  0F0A  3E01               	addlw	1
  4933  0F0B  1D03               	btfss	3,2
  4934  0F0C  07BB               	addwf	ReadRTCAsSec@Out+2,f
  4935  0F0D  0833               	movf	??_ReadRTCAsSec+3,w
  4936  0F0E  1103               	clrz
  4937  0F0F  1803               	skipnc
  4938  0F10  3E01               	addlw	1
  4939  0F11  1D03               	btfss	3,2
  4940  0F12  07BC               	addwf	ReadRTCAsSec@Out+3,f
  4941  0F13  30DE               	movlw	222
  4942                           
  4943                           ;gsk_RTC_GPS.c: 37: TempVar000 = I2C_ReadAtAddress(0xde, 0x00);
  4944  0F14  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  4945  0F15  2769  120A  158A   	fcall	_I2C_ReadAtAddress
  4946  0F18  1283               	bcf	3,5	;RP0=0, select bank0
  4947  0F19  00BD               	movwf	ReadRTCAsSec@TempVar000
  4948                           
  4949                           ;gsk_RTC_GPS.c: 38: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10);
  4950  0F1A  390F               	andlw	15
  4951  0F1B  00B0               	movwf	??_ReadRTCAsSec
  4952  0F1C  27F7  120A  158A   	fcall	PL22	;call to abstracted procedure
  4953  0F1F  2750  120A  158A   	fcall	___wmul
  4954  0F22  0830               	movf	??_ReadRTCAsSec,w
  4955  0F23  0770               	addwf	?___wmul,w
  4956  0F24  00B1               	movwf	??_ReadRTCAsSec+1
  4957  0F25  3000               	movlw	0
  4958  0F26  1803               	skipnc
  4959  0F27  3001               	movlw	1
  4960  0F28  0771               	addwf	?___wmul+1,w
  4961  0F29  00B2               	movwf	??_ReadRTCAsSec+2
  4962  0F2A  0831               	movf	??_ReadRTCAsSec+1,w
  4963  0F2B  00B3               	movwf	??_ReadRTCAsSec+3
  4964  0F2C  0832               	movf	??_ReadRTCAsSec+2,w
  4965  0F2D  00B4               	movwf	??_ReadRTCAsSec+4
  4966  0F2E  3000               	movlw	0
  4967  0F2F  1BB4               	btfsc	??_ReadRTCAsSec+4,7
  4968  0F30  30FF               	movlw	255
  4969  0F31  00B5               	movwf	??_ReadRTCAsSec+5
  4970  0F32  00B6               	movwf	??_ReadRTCAsSec+6
  4971  0F33  0833               	movf	??_ReadRTCAsSec+3,w
  4972  0F34  07B9               	addwf	ReadRTCAsSec@Out,f
  4973  0F35  0834               	movf	??_ReadRTCAsSec+4,w
  4974  0F36  1103               	clrz
  4975  0F37  1803               	skipnc
  4976  0F38  3E01               	addlw	1
  4977  0F39  1D03               	btfss	3,2
  4978  0F3A  07BA               	addwf	ReadRTCAsSec@Out+1,f
  4979  0F3B  0835               	movf	??_ReadRTCAsSec+5,w
  4980  0F3C  1103               	clrz
  4981  0F3D  1803               	skipnc
  4982  0F3E  3E01               	addlw	1
  4983  0F3F  1D03               	btfss	3,2
  4984  0F40  07BB               	addwf	ReadRTCAsSec@Out+2,f
  4985  0F41  0836               	movf	??_ReadRTCAsSec+6,w
  4986  0F42  1103               	clrz
  4987  0F43  1803               	skipnc
  4988  0F44  3E01               	addlw	1
  4989  0F45  1D03               	btfss	3,2
  4990  0F46  07BC               	addwf	ReadRTCAsSec@Out+3,f
  4991                           
  4992                           ;gsk_RTC_GPS.c: 39: return Out;
  4993  0F47  083C               	movf	ReadRTCAsSec@Out+3,w
  4994  0F48  00AF               	movwf	?_ReadRTCAsSec+3
  4995  0F49  083B               	movf	ReadRTCAsSec@Out+2,w
  4996  0F4A  00AE               	movwf	?_ReadRTCAsSec+2
  4997  0F4B  083A               	movf	ReadRTCAsSec@Out+1,w
  4998  0F4C  00AD               	movwf	?_ReadRTCAsSec+1
  4999  0F4D  0839               	movf	ReadRTCAsSec@Out,w
  5000  0F4E  00AC               	movwf	?_ReadRTCAsSec
  5001  0F4F  0008               	return
  5002  0F50                     __end_of_ReadRTCAsSec:	
  5003  0F50                     __ptext13:	
  5004 ;; *************** function ___wmul *****************
  5005 ;; Defined at:
  5006 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  5007 ;; Parameters:    Size  Location     Type
  5008 ;;  multiplier      2    0[COMMON] unsigned int 
  5009 ;;  multiplicand    2    2[COMMON] unsigned int 
  5010 ;; Auto vars:     Size  Location     Type
  5011 ;;  product         2    4[COMMON] unsigned int 
  5012 ;; Return value:  Size  Location     Type
  5013 ;;                  2    0[COMMON] unsigned int 
  5014 ;; Registers used:
  5015 ;;		wreg, status,2, status,0
  5016 ;; Tracked objects:
  5017 ;;		On entry : 300/0
  5018 ;;		On exit  : 300/0
  5019 ;;		Unchanged: 300/0
  5020 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5021 ;;      Params:         4       0       0       0       0
  5022 ;;      Locals:         2       0       0       0       0
  5023 ;;      Temps:          0       0       0       0       0
  5024 ;;      Totals:         6       0       0       0       0
  5025 ;;Total ram usage:        6 bytes
  5026 ;; Hardware stack levels used:    1
  5027 ;; This function calls:
  5028 ;;		Nothing
  5029 ;; This function is called by:
  5030 ;;		_ReadRTCAsSec
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function ___wmul
  5036  0F50                     ___wmul:	
  5037                           
  5038                           ;incstack = 0
  5039                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5040  0F50  01F4               	clrf	___wmul@product
  5041  0F51  01F5               	clrf	___wmul@product+1
  5042  0F52                     l2010:	
  5043  0F52  1C70               	btfss	___wmul@multiplier,0
  5044  0F53  2F5A               	goto	l2014
  5045  0F54  0872               	movf	___wmul@multiplicand,w
  5046  0F55  07F4               	addwf	___wmul@product,f
  5047  0F56  1803               	skipnc
  5048  0F57  0AF5               	incf	___wmul@product+1,f
  5049  0F58  0873               	movf	___wmul@multiplicand+1,w
  5050  0F59  07F5               	addwf	___wmul@product+1,f
  5051  0F5A                     l2014:	
  5052  0F5A  1003               	clrc
  5053  0F5B  0DF2               	rlf	___wmul@multiplicand,f
  5054  0F5C  0DF3               	rlf	___wmul@multiplicand+1,f
  5055  0F5D  1003               	clrc
  5056  0F5E  0CF1               	rrf	___wmul@multiplier+1,f
  5057  0F5F  0CF0               	rrf	___wmul@multiplier,f
  5058  0F60  0870               	movf	___wmul@multiplier,w
  5059  0F61  0471               	iorwf	___wmul@multiplier+1,w
  5060  0F62  1D03               	btfss	3,2
  5061  0F63  2F52               	goto	l2010
  5062  0F64  0875               	movf	___wmul@product+1,w
  5063  0F65  00F1               	movwf	?___wmul+1
  5064  0F66  0874               	movf	___wmul@product,w
  5065  0F67  00F0               	movwf	?___wmul
  5066  0F68  0008               	return
  5067  0F69                     __end_of___wmul:	
  5068  0F69                     __ptext15:	
  5069 ;; *************** function _I2C_ReadAtAddress *****************
  5070 ;; Defined at:
  5071 ;;		line 55 in file "libs/gsk_i2c.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;  DevID           1    wreg     unsigned char 
  5074 ;;  IntAdd          1    4[COMMON] unsigned char 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  DevID           1    6[COMMON] unsigned char 
  5077 ;;  data            1    5[COMMON] unsigned char 
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      unsigned char 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2, status,0, pclath, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 200/100
  5084 ;;		On exit  : 300/100
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5087 ;;      Params:         1       0       0       0       0
  5088 ;;      Locals:         2       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0
  5090 ;;      Totals:         3       0       0       0       0
  5091 ;;Total ram usage:        3 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    2
  5094 ;; This function calls:
  5095 ;;		_I2C_Master_Read
  5096 ;;		_I2C_Master_Start
  5097 ;;		_I2C_Master_Stop
  5098 ;;		_I2C_Master_Write
  5099 ;; This function is called by:
  5100 ;;		_ReadRTCAsSec
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           
  5105                           ;psect for function _I2C_ReadAtAddress
  5106  0F69                     _I2C_ReadAtAddress:	
  5107                           
  5108                           ;incstack = 0
  5109                           ; Regs used in _I2C_ReadAtAddress: [wreg+status,2+status,0+pclath+cstack]
  5110                           ;I2C_ReadAtAddress@DevID stored from wreg
  5111  0F69  00F6               	movwf	I2C_ReadAtAddress@DevID
  5112                           
  5113                           ;gsk_i2c.c: 57: I2C_Master_Start();
  5114  0F6A  2797  120A  158A   	fcall	_I2C_Master_Start
  5115                           
  5116                           ;gsk_i2c.c: 58: I2C_Master_Write(DevID);
  5117  0F6D  0876               	movf	I2C_ReadAtAddress@DevID,w
  5118  0F6E  00F0               	movwf	I2C_Master_Write@d
  5119  0F6F  01F1               	clrf	I2C_Master_Write@d+1
  5120  0F70  2792  120A  158A   	fcall	_I2C_Master_Write
  5121                           
  5122                           ;gsk_i2c.c: 59: I2C_Master_Write(IntAdd);
  5123  0F73  0874               	movf	I2C_ReadAtAddress@IntAdd,w
  5124  0F74  00F0               	movwf	I2C_Master_Write@d
  5125  0F75  01F1               	clrf	I2C_Master_Write@d+1
  5126  0F76  2792  120A  158A   	fcall	_I2C_Master_Write
  5127                           
  5128                           ;gsk_i2c.c: 60: I2C_Master_Stop();
  5129  0F79  27C1  120A  158A   	fcall	_I2C_Master_Stop
  5130                           
  5131                           ;gsk_i2c.c: 62: I2C_Master_Start();
  5132  0F7C  2797  120A  158A   	fcall	_I2C_Master_Start
  5133                           
  5134                           ;gsk_i2c.c: 63: I2C_Master_Write(DevID+1);
  5135  0F7F  0876               	movf	I2C_ReadAtAddress@DevID,w
  5136  0F80  00F0               	movwf	I2C_Master_Write@d
  5137  0F81  01F1               	clrf	I2C_Master_Write@d+1
  5138  0F82  0AF0               	incf	I2C_Master_Write@d,f
  5139  0F83  1903               	skipnz
  5140  0F84  0AF1               	incf	I2C_Master_Write@d+1,f
  5141  0F85  2792  120A  158A   	fcall	_I2C_Master_Write
  5142                           
  5143                           ;gsk_i2c.c: 64: char data = I2C_Master_Read(0);
  5144  0F88  01F0               	clrf	I2C_Master_Read@a
  5145  0F89  01F1               	clrf	I2C_Master_Read@a+1
  5146  0F8A  279A  120A  158A   	fcall	_I2C_Master_Read
  5147  0F8D  0870               	movf	?_I2C_Master_Read,w
  5148  0F8E  00F5               	movwf	I2C_ReadAtAddress@data
  5149                           
  5150                           ;gsk_i2c.c: 65: I2C_Master_Stop();
  5151  0F8F  27C1               	fcall	_I2C_Master_Stop
  5152                           
  5153                           ;gsk_i2c.c: 66: return data;
  5154  0F90  0875               	movf	I2C_ReadAtAddress@data,w
  5155  0F91  0008               	return
  5156  0F92                     __end_of_I2C_ReadAtAddress:	
  5157  0F92                     __ptext16:	
  5158 ;; *************** function _I2C_Master_Write *****************
  5159 ;; Defined at:
  5160 ;;		line 36 in file "libs/gsk_i2c.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;  d               2    0[COMMON] unsigned int 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;                  1    wreg      void 
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0, pclath, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 200/100
  5171 ;;		On exit  : 300/0
  5172 ;;		Unchanged: 0/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5174 ;;      Params:         2       0       0       0       0
  5175 ;;      Locals:         0       0       0       0       0
  5176 ;;      Temps:          0       0       0       0       0
  5177 ;;      Totals:         2       0       0       0       0
  5178 ;;Total ram usage:        2 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    1
  5181 ;; This function calls:
  5182 ;;		_I2C_Master_Wait
  5183 ;; This function is called by:
  5184 ;;		_I2C_ReadAtAddress
  5185 ;; This function uses a non-reentrant model
  5186 ;;
  5187                           
  5188                           
  5189                           ;psect for function _I2C_Master_Write
  5190  0F92                     _I2C_Master_Write:	
  5191                           
  5192                           ;gsk_i2c.c: 38: I2C_Master_Wait();
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5196  0F92  27B9               	fcall	_I2C_Master_Wait
  5197                           
  5198                           ;gsk_i2c.c: 39: SSPBUF = d;
  5199  0F93  0870               	movf	I2C_Master_Write@d,w
  5200  0F94  1283               	bcf	3,5	;RP0=0, select bank0
  5201  0F95  0093               	movwf	19	;volatile
  5202  0F96  0008               	return
  5203  0F97                     __end_of_I2C_Master_Write:	
  5204  0F97                     __ptext18:	
  5205 ;; *************** function _I2C_Master_Start *****************
  5206 ;; Defined at:
  5207 ;;		line 18 in file "libs/gsk_i2c.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;		None
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0, pclath, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 200/100
  5218 ;;		On exit  : 300/100
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5221 ;;      Params:         0       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0
  5224 ;;      Totals:         0       0       0       0       0
  5225 ;;Total ram usage:        0 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    1
  5228 ;; This function calls:
  5229 ;;		_I2C_Master_Wait
  5230 ;; This function is called by:
  5231 ;;		_I2C_ReadAtAddress
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           
  5236                           ;psect for function _I2C_Master_Start
  5237  0F97                     _I2C_Master_Start:	
  5238                           
  5239                           ;gsk_i2c.c: 20: I2C_Master_Wait();
  5240                           
  5241                           ;incstack = 0
  5242                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5243  0F97  27B9               	fcall	_I2C_Master_Wait
  5244                           
  5245                           ;gsk_i2c.c: 21: SEN = 1;
  5246  0F98  1411               	bsf	17,0	;volatile
  5247  0F99  0008               	return
  5248  0F9A                     __end_of_I2C_Master_Start:	
  5249  0F9A                     __ptext19:	
  5250 ;; *************** function _I2C_Master_Read *****************
  5251 ;; Defined at:
  5252 ;;		line 42 in file "libs/gsk_i2c.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  a               2    0[COMMON] unsigned short 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  temp            2    2[COMMON] unsigned short 
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  2    0[COMMON] unsigned short 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2, status,0, pclath, cstack
  5261 ;; Tracked objects:
  5262 ;;		On entry : 300/0
  5263 ;;		On exit  : 300/100
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5266 ;;      Params:         2       0       0       0       0
  5267 ;;      Locals:         2       0       0       0       0
  5268 ;;      Temps:          0       0       0       0       0
  5269 ;;      Totals:         4       0       0       0       0
  5270 ;;Total ram usage:        4 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    1
  5273 ;; This function calls:
  5274 ;;		_I2C_Master_Wait
  5275 ;; This function is called by:
  5276 ;;		_I2C_ReadAtAddress
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           
  5281                           ;psect for function _I2C_Master_Read
  5282  0F9A                     _I2C_Master_Read:	
  5283                           
  5284                           ;gsk_i2c.c: 44: unsigned short temp;
  5285                           ;gsk_i2c.c: 45: I2C_Master_Wait();
  5286                           
  5287                           ;incstack = 0
  5288                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  5289  0F9A  27B9  120A  158A   	fcall	_I2C_Master_Wait
  5290                           
  5291                           ;gsk_i2c.c: 46: RCEN = 1;
  5292  0F9D  1591               	bsf	17,3	;volatile
  5293                           
  5294                           ;gsk_i2c.c: 47: I2C_Master_Wait();
  5295  0F9E  27B9  120A  158A   	fcall	_I2C_Master_Wait
  5296                           
  5297                           ;gsk_i2c.c: 48: temp = SSPBUF;
  5298  0FA1  1283               	bcf	3,5	;RP0=0, select bank0
  5299  0FA2  0813               	movf	19,w	;volatile
  5300  0FA3  00F2               	movwf	I2C_Master_Read@temp
  5301  0FA4  01F3               	clrf	I2C_Master_Read@temp+1
  5302                           
  5303                           ;gsk_i2c.c: 49: I2C_Master_Wait();
  5304  0FA5  27B9  120A  158A   	fcall	_I2C_Master_Wait
  5305                           
  5306                           ;gsk_i2c.c: 50: ACKDT = (a)?0:1;
  5307  0FA8  0870               	movf	I2C_Master_Read@a,w
  5308  0FA9  0471               	iorwf	I2C_Master_Read@a+1,w
  5309  0FAA  1D03               	btfss	3,2
  5310  0FAB  2FB0               	goto	u2030
  5311  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  5312  0FAD  1303               	bcf	3,6	;RP1=0, select bank1
  5313  0FAE  1691               	bsf	17,5	;volatile
  5314  0FAF  2FB3               	goto	l1966
  5315  0FB0                     u2030:	
  5316  0FB0  1683               	bsf	3,5	;RP0=1, select bank1
  5317  0FB1  1303               	bcf	3,6	;RP1=0, select bank1
  5318  0FB2  1291               	bcf	17,5	;volatile
  5319  0FB3                     l1966:	
  5320                           
  5321                           ;gsk_i2c.c: 51: ACKEN = 1;
  5322  0FB3  1611               	bsf	17,4	;volatile
  5323                           
  5324                           ;gsk_i2c.c: 52: return temp;
  5325  0FB4  0873               	movf	I2C_Master_Read@temp+1,w
  5326  0FB5  00F1               	movwf	?_I2C_Master_Read+1
  5327  0FB6  0872               	movf	I2C_Master_Read@temp,w
  5328  0FB7  00F0               	movwf	?_I2C_Master_Read
  5329  0FB8  0008               	return
  5330  0FB9                     __end_of_I2C_Master_Read:	
  5331  0FB9                     __ptext20:	
  5332 ;; *************** function _I2C_Master_Wait *****************
  5333 ;; Defined at:
  5334 ;;		line 13 in file "libs/gsk_i2c.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;		None
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      void 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2
  5343 ;; Tracked objects:
  5344 ;;		On entry : 200/100
  5345 ;;		On exit  : 300/100
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5348 ;;      Params:         0       0       0       0       0
  5349 ;;      Locals:         0       0       0       0       0
  5350 ;;      Temps:          0       0       0       0       0
  5351 ;;      Totals:         0       0       0       0       0
  5352 ;;Total ram usage:        0 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; This function calls:
  5355 ;;		Nothing
  5356 ;; This function is called by:
  5357 ;;		_I2C_Master_Start
  5358 ;;		_I2C_Master_Stop
  5359 ;;		_I2C_Master_Write
  5360 ;;		_I2C_Master_Read
  5361 ;; This function uses a non-reentrant model
  5362 ;;
  5363                           
  5364                           
  5365                           ;psect for function _I2C_Master_Wait
  5366  0FB9                     _I2C_Master_Wait:	
  5367  0FB9                     l308:	
  5368                           ;gsk_i2c.c: 15: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5369                           
  5370                           ;incstack = 0
  5371                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5372                           
  5373  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  5374  0FBA  1914               	btfsc	20,2	;volatile
  5375  0FBB  2FB9               	goto	l308
  5376  0FBC  0811               	movf	17,w	;volatile
  5377  0FBD  391F               	andlw	31
  5378  0FBE  1903               	btfsc	3,2
  5379  0FBF  0008               	return
  5380  0FC0  2FB9               	goto	l308
  5381  0FC1                     __end_of_I2C_Master_Wait:	
  5382  0FC1                     __ptext17:	
  5383 ;; *************** function _I2C_Master_Stop *****************
  5384 ;; Defined at:
  5385 ;;		line 30 in file "libs/gsk_i2c.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;		None
  5390 ;; Return value:  Size  Location     Type
  5391 ;;                  1    wreg      void 
  5392 ;; Registers used:
  5393 ;;		wreg, status,2, status,0, pclath, cstack
  5394 ;; Tracked objects:
  5395 ;;		On entry : 200/0
  5396 ;;		On exit  : 300/100
  5397 ;;		Unchanged: 0/0
  5398 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5399 ;;      Params:         0       0       0       0       0
  5400 ;;      Locals:         0       0       0       0       0
  5401 ;;      Temps:          0       0       0       0       0
  5402 ;;      Totals:         0       0       0       0       0
  5403 ;;Total ram usage:        0 bytes
  5404 ;; Hardware stack levels used:    1
  5405 ;; Hardware stack levels required when called:    1
  5406 ;; This function calls:
  5407 ;;		_I2C_Master_Wait
  5408 ;; This function is called by:
  5409 ;;		_I2C_ReadAtAddress
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           
  5414                           ;psect for function _I2C_Master_Stop
  5415  0FC1                     _I2C_Master_Stop:	
  5416                           
  5417                           ;gsk_i2c.c: 32: I2C_Master_Wait();
  5418                           
  5419                           ;incstack = 0
  5420                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5421  0FC1  27B9               	fcall	_I2C_Master_Wait
  5422                           
  5423                           ;gsk_i2c.c: 33: PEN = 1;
  5424  0FC2  1511               	bsf	17,2	;volatile
  5425  0FC3  0008               	return
  5426  0FC4                     __end_of_I2C_Master_Stop:	
  5427  0FC4                     __ptext14:	
  5428 ;; *************** function ___lmul *****************
  5429 ;; Defined at:
  5430 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;  multiplier      4    0[COMMON] unsigned long 
  5433 ;;  multiplicand    4    4[COMMON] unsigned long 
  5434 ;; Auto vars:     Size  Location     Type
  5435 ;;  product         4    8[COMMON] unsigned long 
  5436 ;; Return value:  Size  Location     Type
  5437 ;;                  4    0[COMMON] unsigned long 
  5438 ;; Registers used:
  5439 ;;		wreg, status,2, status,0
  5440 ;; Tracked objects:
  5441 ;;		On entry : 300/800
  5442 ;;		On exit  : 300/0
  5443 ;;		Unchanged: 300/0
  5444 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5445 ;;      Params:         8       0       0       0       0
  5446 ;;      Locals:         4       0       0       0       0
  5447 ;;      Temps:          0       0       0       0       0
  5448 ;;      Totals:        12       0       0       0       0
  5449 ;;Total ram usage:       12 bytes
  5450 ;; Hardware stack levels used:    1
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_WriteLongInt
  5455 ;;		_ReadRTCAsSec
  5456 ;; This function uses a non-reentrant model
  5457 ;;
  5458                           
  5459                           
  5460                           ;psect for function ___lmul
  5461  0FC4                     ___lmul:	
  5462                           
  5463                           ;incstack = 0
  5464                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5465  0FC4  01F8               	clrf	___lmul@product
  5466  0FC5  01F9               	clrf	___lmul@product+1
  5467  0FC6  01FA               	clrf	___lmul@product+2
  5468  0FC7  01FB               	clrf	___lmul@product+3
  5469  0FC8                     l621:	
  5470  0FC8  1C70               	btfss	___lmul@multiplier,0
  5471  0FC9  2FDE               	goto	l2028
  5472  0FCA  0874               	movf	___lmul@multiplicand,w
  5473  0FCB  07F8               	addwf	___lmul@product,f
  5474  0FCC  0875               	movf	___lmul@multiplicand+1,w
  5475  0FCD  1103               	clrz
  5476  0FCE  1803               	skipnc
  5477  0FCF  3E01               	addlw	1
  5478  0FD0  1D03               	btfss	3,2
  5479  0FD1  07F9               	addwf	___lmul@product+1,f
  5480  0FD2  0876               	movf	___lmul@multiplicand+2,w
  5481  0FD3  1103               	clrz
  5482  0FD4  1803               	skipnc
  5483  0FD5  3E01               	addlw	1
  5484  0FD6  1D03               	btfss	3,2
  5485  0FD7  07FA               	addwf	___lmul@product+2,f
  5486  0FD8  0877               	movf	___lmul@multiplicand+3,w
  5487  0FD9  1103               	clrz
  5488  0FDA  1803               	skipnc
  5489  0FDB  3E01               	addlw	1
  5490  0FDC  1D03               	btfss	3,2
  5491  0FDD  07FB               	addwf	___lmul@product+3,f
  5492  0FDE                     l2028:	
  5493  0FDE  1003               	clrc
  5494  0FDF  0DF4               	rlf	___lmul@multiplicand,f
  5495  0FE0  0DF5               	rlf	___lmul@multiplicand+1,f
  5496  0FE1  0DF6               	rlf	___lmul@multiplicand+2,f
  5497  0FE2  0DF7               	rlf	___lmul@multiplicand+3,f
  5498  0FE3  1003               	clrc
  5499  0FE4  0CF3               	rrf	___lmul@multiplier+3,f
  5500  0FE5  0CF2               	rrf	___lmul@multiplier+2,f
  5501  0FE6  0CF1               	rrf	___lmul@multiplier+1,f
  5502  0FE7  0CF0               	rrf	___lmul@multiplier,f
  5503  0FE8  0873               	movf	___lmul@multiplier+3,w
  5504  0FE9  0472               	iorwf	___lmul@multiplier+2,w
  5505  0FEA  0471               	iorwf	___lmul@multiplier+1,w
  5506  0FEB  0470               	iorwf	___lmul@multiplier,w
  5507  0FEC  1D03               	skipz
  5508  0FED  2FC8               	goto	l621
  5509  0FEE  087B               	movf	___lmul@product+3,w
  5510  0FEF  00F3               	movwf	?___lmul+3
  5511  0FF0  087A               	movf	___lmul@product+2,w
  5512  0FF1  00F2               	movwf	?___lmul+2
  5513  0FF2  0879               	movf	___lmul@product+1,w
  5514  0FF3  00F1               	movwf	?___lmul+1
  5515  0FF4  0878               	movf	___lmul@product,w
  5516  0FF5  00F0               	movwf	?___lmul
  5517  0FF6  0008               	return
  5518  0FF7                     __end_of___lmul:	
  5519  0FF7                     PL22:	
  5520  0FF7  0E3D               	swapf	ReadRTCAsSec@TempVar000,w
  5521  0FF8  390F               	andlw	15
  5522  0FF9  3907               	andlw	7
  5523  0FFA  00F0               	movwf	___wmul@multiplier
  5524  0FFB  300A               	movlw	10
  5525  0FFC  01F1               	clrf	___wmul@multiplier+1
  5526  0FFD  00F2               	movwf	___wmul@multiplicand
  5527  0FFE  01F3               	clrf	___wmul@multiplicand+1
  5528  0FFF  0008               	return
  5529  1000                     __end_ofPL22:	
  5530                           
  5531                           	psect	text24
  5532  0015                     __ptext24:	
  5533 ;; *************** function _Lcd_Disp_Bin *****************
  5534 ;; Defined at:
  5535 ;;		line 200 in file "libs/HD44780.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  y               1    wreg     unsigned char 
  5538 ;;  x               1    7[BANK0 ] unsigned char 
  5539 ;;  val             1    8[BANK0 ] unsigned char 
  5540 ;;  DispChar        1    9[BANK0 ] unsigned char 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  y               1   11[BANK0 ] unsigned char 
  5543 ;;  i               1   12[BANK0 ] unsigned char 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 300/800
  5550 ;;		On exit  : 300/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5553 ;;      Params:         0       3       0       0       0
  5554 ;;      Locals:         0       2       0       0       0
  5555 ;;      Temps:          0       1       0       0       0
  5556 ;;      Totals:         0       6       0       0       0
  5557 ;;Total ram usage:        6 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    3
  5560 ;; This function calls:
  5561 ;;		_Lcd_WriteChar
  5562 ;; This function is called by:
  5563 ;;		_main
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           
  5568                           ;psect for function _Lcd_Disp_Bin
  5569  0015                     _Lcd_Disp_Bin:	
  5570                           
  5571                           ;incstack = 0
  5572                           ; Regs used in _Lcd_Disp_Bin: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5573                           ;Lcd_Disp_Bin@y stored from wreg
  5574  0015  00B7               	movwf	Lcd_Disp_Bin@y
  5575                           
  5576                           ;HD44780.c: 201: for (char i=0; i<8; i++){
  5577  0016  01B8               	clrf	Lcd_Disp_Bin@i
  5578  0017                     l2280:	
  5579                           
  5580                           ;HD44780.c: 202: if ((val) & (0x01<<i))
  5581  0017  3001               	movlw	1
  5582  0018  00B6               	movwf	??_Lcd_Disp_Bin
  5583  0019  0A38               	incf	Lcd_Disp_Bin@i,w
  5584  001A  281D               	goto	u2384
  5585  001B                     u2385:	
  5586  001B  1003               	clrc
  5587  001C  0DB6               	rlf	??_Lcd_Disp_Bin,f
  5588  001D                     u2384:	
  5589  001D  3EFF               	addlw	-1
  5590  001E  1D03               	skipz
  5591  001F  281B               	goto	u2385
  5592  0020  0836               	movf	??_Lcd_Disp_Bin,w
  5593  0021  0534               	andwf	Lcd_Disp_Bin@val,w
  5594  0022  1903               	btfsc	3,2
  5595  0023  282F               	goto	l2284
  5596                           
  5597                           ;HD44780.c: 203: Lcd_WriteChar(y, x+i, DispChar);
  5598  0024  0838               	movf	Lcd_Disp_Bin@i,w
  5599  0025  0733               	addwf	Lcd_Disp_Bin@x,w
  5600  0026  00AF               	movwf	Lcd_WriteChar@x
  5601  0027  0835               	movf	Lcd_Disp_Bin@DispChar,w
  5602  0028  00B0               	movwf	Lcd_WriteChar@c
  5603  0029  0837               	movf	Lcd_Disp_Bin@y,w
  5604  002A  120A  118A  2472  120A  118A  	fcall	_Lcd_WriteChar
  5605  002F                     l2284:	
  5606  002F  1283               	bcf	3,5	;RP0=0, select bank0
  5607  0030  1303               	bcf	3,6	;RP1=0, select bank0
  5608  0031  3008               	movlw	8
  5609  0032  0AB8               	incf	Lcd_Disp_Bin@i,f
  5610  0033  0238               	subwf	Lcd_Disp_Bin@i,w
  5611  0034  1803               	btfsc	3,0
  5612  0035  0008               	return
  5613  0036  2817               	goto	l2280
  5614  0037                     __end_of_Lcd_Disp_Bin:	
  5615                           
  5616                           	psect	text29
  5617  0037                     __ptext29:	
  5618 ;; *************** function _I2C_Master_Init *****************
  5619 ;; Defined at:
  5620 ;;		line 3 in file "libs/gsk_i2c.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;  c               4    0[BANK0 ] const unsigned long 
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;		None
  5625 ;; Return value:  Size  Location     Type
  5626 ;;                  1    wreg      void 
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0, pclath, cstack
  5629 ;; Tracked objects:
  5630 ;;		On entry : B00/0
  5631 ;;		On exit  : B00/100
  5632 ;;		Unchanged: 800/0
  5633 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5634 ;;      Params:         0       4       0       0       0
  5635 ;;      Locals:         0       0       0       0       0
  5636 ;;      Temps:          0       4       0       0       0
  5637 ;;      Totals:         0       8       0       0       0
  5638 ;;Total ram usage:        8 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; Hardware stack levels required when called:    1
  5641 ;; This function calls:
  5642 ;;		___lldiv
  5643 ;; This function is called by:
  5644 ;;		_main
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _I2C_Master_Init
  5650  0037                     _I2C_Master_Init:	
  5651                           
  5652                           ;gsk_i2c.c: 5: SSPCON = 0b00101000;
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  5656  0037  3028               	movlw	40
  5657  0038  0094               	movwf	20	;volatile
  5658                           
  5659                           ;gsk_i2c.c: 6: SSPCON2 = 0;
  5660  0039  1683               	bsf	3,5	;RP0=1, select bank1
  5661  003A  0191               	clrf	17	;volatile
  5662                           
  5663                           ;gsk_i2c.c: 7: SSPADD = (4000000/(4*c))-1;
  5664  003B  1283               	bcf	3,5	;RP0=0, select bank0
  5665  003C  082C               	movf	I2C_Master_Init@c,w
  5666  003D  00B0               	movwf	??_I2C_Master_Init
  5667  003E  082D               	movf	I2C_Master_Init@c+1,w
  5668  003F  00B1               	movwf	??_I2C_Master_Init+1
  5669  0040  082E               	movf	I2C_Master_Init@c+2,w
  5670  0041  00B2               	movwf	??_I2C_Master_Init+2
  5671  0042  082F               	movf	I2C_Master_Init@c+3,w
  5672  0043  00B3               	movwf	??_I2C_Master_Init+3
  5673  0044  3002               	movlw	2
  5674  0045                     u2495:	
  5675  0045  1003               	clrc
  5676  0046  0DB0               	rlf	??_I2C_Master_Init,f
  5677  0047  0DB1               	rlf	??_I2C_Master_Init+1,f
  5678  0048  0DB2               	rlf	??_I2C_Master_Init+2,f
  5679  0049  0DB3               	rlf	??_I2C_Master_Init+3,f
  5680  004A  3EFF               	addlw	-1
  5681  004B  1D03               	skipz
  5682  004C  2845               	goto	u2495
  5683  004D  0833               	movf	??_I2C_Master_Init+3,w
  5684  004E  00F3               	movwf	___lldiv@divisor+3
  5685  004F  0832               	movf	??_I2C_Master_Init+2,w
  5686  0050  00F2               	movwf	___lldiv@divisor+2
  5687  0051  0831               	movf	??_I2C_Master_Init+1,w
  5688  0052  00F1               	movwf	___lldiv@divisor+1
  5689  0053  0830               	movf	??_I2C_Master_Init,w
  5690  0054  00F0               	movwf	___lldiv@divisor
  5691  0055  303D               	movlw	61
  5692  0056  01F7               	clrf	___lldiv@dividend+3
  5693  0057  00F6               	movwf	___lldiv@dividend+2
  5694  0058  3009               	movlw	9
  5695  0059  00F5               	movwf	___lldiv@dividend+1
  5696  005A  01F4               	clrf	___lldiv@dividend
  5697  005B  2064               	fcall	___lldiv
  5698  005C  0870               	movf	?___lldiv,w
  5699  005D  3EFF               	addlw	255
  5700  005E  1683               	bsf	3,5	;RP0=1, select bank1
  5701  005F  0093               	movwf	19	;volatile
  5702                           
  5703                           ;gsk_i2c.c: 8: SSPSTAT = 0;
  5704  0060  0194               	clrf	20	;volatile
  5705                           
  5706                           ;gsk_i2c.c: 9: TRISC3 = 1;
  5707  0061  1587               	bsf	7,3	;volatile
  5708                           
  5709                           ;gsk_i2c.c: 10: TRISC4 = 1;
  5710  0062  1607               	bsf	7,4	;volatile
  5711  0063  0008               	return
  5712  0064                     __end_of_I2C_Master_Init:	
  5713  0064                     __ptext30:	
  5714 ;; *************** function ___lldiv *****************
  5715 ;; Defined at:
  5716 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  divisor         4    0[COMMON] unsigned long 
  5719 ;;  dividend        4    4[COMMON] unsigned long 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  quotient        4    8[COMMON] unsigned long 
  5722 ;;  counter         1   12[COMMON] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  4    0[COMMON] unsigned long 
  5725 ;; Registers used:
  5726 ;;		wreg, status,2, status,0
  5727 ;; Tracked objects:
  5728 ;;		On entry : B00/0
  5729 ;;		On exit  : B00/0
  5730 ;;		Unchanged: B00/0
  5731 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5732 ;;      Params:         8       0       0       0       0
  5733 ;;      Locals:         5       0       0       0       0
  5734 ;;      Temps:          0       0       0       0       0
  5735 ;;      Totals:        13       0       0       0       0
  5736 ;;Total ram usage:       13 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_I2C_Master_Init
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           
  5746                           ;psect for function ___lldiv
  5747  0064                     ___lldiv:	
  5748                           
  5749                           ;incstack = 0
  5750                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  5751  0064  01F8               	clrf	___lldiv@quotient
  5752  0065  01F9               	clrf	___lldiv@quotient+1
  5753  0066  01FA               	clrf	___lldiv@quotient+2
  5754  0067  01FB               	clrf	___lldiv@quotient+3
  5755  0068  0873               	movf	___lldiv@divisor+3,w
  5756  0069  0472               	iorwf	___lldiv@divisor+2,w
  5757  006A  0471               	iorwf	___lldiv@divisor+1,w
  5758  006B  0470               	iorwf	___lldiv@divisor,w
  5759  006C  1903               	skipnz
  5760  006D  28A3               	goto	l2136
  5761  006E  01FC               	clrf	___lldiv@counter
  5762  006F                     L18:	
  5763  006F  0AFC               	incf	___lldiv@counter,f
  5764  0070  1BF3               	btfsc	___lldiv@divisor+3,7
  5765  0071  2878               	goto	l2124
  5766  0072  1003               	clrc
  5767  0073  0DF0               	rlf	___lldiv@divisor,f
  5768  0074  0DF1               	rlf	___lldiv@divisor+1,f
  5769  0075  0DF2               	rlf	___lldiv@divisor+2,f
  5770  0076  0DF3               	rlf	___lldiv@divisor+3,f
  5771  0077  286F               	goto	L18
  5772  0078                     l2124:	
  5773  0078  1003               	clrc
  5774  0079  0DF8               	rlf	___lldiv@quotient,f
  5775  007A  0DF9               	rlf	___lldiv@quotient+1,f
  5776  007B  0DFA               	rlf	___lldiv@quotient+2,f
  5777  007C  0DFB               	rlf	___lldiv@quotient+3,f
  5778  007D  0873               	movf	___lldiv@divisor+3,w
  5779  007E  0277               	subwf	___lldiv@dividend+3,w
  5780  007F  1D03               	skipz
  5781  0080  288B               	goto	u2315
  5782  0081  0872               	movf	___lldiv@divisor+2,w
  5783  0082  0276               	subwf	___lldiv@dividend+2,w
  5784  0083  1D03               	skipz
  5785  0084  288B               	goto	u2315
  5786  0085  0871               	movf	___lldiv@divisor+1,w
  5787  0086  0275               	subwf	___lldiv@dividend+1,w
  5788  0087  1D03               	skipz
  5789  0088  288B               	goto	u2315
  5790  0089  0870               	movf	___lldiv@divisor,w
  5791  008A  0274               	subwf	___lldiv@dividend,w
  5792  008B                     u2315:	
  5793  008B  1C03               	skipc
  5794  008C  289D               	goto	L19
  5795  008D  0870               	movf	___lldiv@divisor,w
  5796  008E  02F4               	subwf	___lldiv@dividend,f
  5797  008F  0871               	movf	___lldiv@divisor+1,w
  5798  0090  1C03               	skipc
  5799  0091  0F71               	incfsz	___lldiv@divisor+1,w
  5800  0092  02F5               	subwf	___lldiv@dividend+1,f
  5801  0093  0872               	movf	___lldiv@divisor+2,w
  5802  0094  1C03               	skipc
  5803  0095  0F72               	incfsz	___lldiv@divisor+2,w
  5804  0096  02F6               	subwf	___lldiv@dividend+2,f
  5805  0097  0873               	movf	___lldiv@divisor+3,w
  5806  0098  1C03               	skipc
  5807  0099  0F73               	incfsz	___lldiv@divisor+3,w
  5808  009A  02F7               	subwf	___lldiv@dividend+3,f
  5809  009B  1478               	bsf	___lldiv@quotient,0
  5810  009C  1003               	clrc
  5811  009D                     L19:	
  5812  009D  0CF3               	rrf	___lldiv@divisor+3,f
  5813  009E  0CF2               	rrf	___lldiv@divisor+2,f
  5814  009F  0CF1               	rrf	___lldiv@divisor+1,f
  5815  00A0  0CF0               	rrf	___lldiv@divisor,f
  5816  00A1  0BFC               	decfsz	___lldiv@counter,f
  5817  00A2  2878               	goto	l2124
  5818  00A3                     l2136:	
  5819  00A3  087B               	movf	___lldiv@quotient+3,w
  5820  00A4  00F3               	movwf	?___lldiv+3
  5821  00A5  087A               	movf	___lldiv@quotient+2,w
  5822  00A6  00F2               	movwf	?___lldiv+2
  5823  00A7  0879               	movf	___lldiv@quotient+1,w
  5824  00A8  00F1               	movwf	?___lldiv+1
  5825  00A9  0878               	movf	___lldiv@quotient,w
  5826  00AA  00F0               	movwf	?___lldiv
  5827  00AB  0008               	return
  5828  00AC                     __end_of___lldiv:	
  5829                           
  5830                           	psect	text32
  5831  0D6B                     __ptext32:	
  5832 ;; *************** function _GetCumulativePeriodsForStates *****************
  5833 ;; Defined at:
  5834 ;;		line 3 in file "libs/gsk_algo_funcs.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  i               1    7[COMMON] unsigned char 
  5839 ;;  j               1    6[COMMON] unsigned char 
  5840 ;; Return value:  Size  Location     Type
  5841 ;;                  1    wreg      void 
  5842 ;; Registers used:
  5843 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : 300/100
  5846 ;;		On exit  : 800/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5849 ;;      Params:         0       0       0       0       0
  5850 ;;      Locals:         2       0       0       0       0
  5851 ;;      Temps:          4       0       0       0       0
  5852 ;;      Totals:         6       0       0       0       0
  5853 ;;Total ram usage:        6 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:    1
  5856 ;; This function calls:
  5857 ;;		_GetPrevCycle
  5858 ;; This function is called by:
  5859 ;;		_main
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           
  5864                           ;psect for function _GetCumulativePeriodsForStates
  5865  0D6B                     _GetCumulativePeriodsForStates:	
  5866                           
  5867                           ;gsk_algo_funcs.c: 4: char i, j;
  5868                           ;gsk_algo_funcs.c: 5: for (i=0; i< 3; i++) {
  5869                           
  5870                           ;incstack = 0
  5871                           ; Regs used in _GetCumulativePeriodsForStates: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  5872  0D6B  01F7               	clrf	GetCumulativePeriodsForStates@i
  5873  0D6C                     l2362:	
  5874                           
  5875                           ;gsk_algo_funcs.c: 6: STATE_CUMULATIVE_PERIODS[i] = 0;
  5876  0D6C  1003               	clrc
  5877  0D6D  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  5878  0D6E  3EDC               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  5879  0D6F  0084               	movwf	4
  5880  0D70  1383               	bcf	3,7	;select IRP bank1
  5881  0D71  0180               	clrf	0
  5882  0D72  0A84               	incf	4,f
  5883  0D73  0180               	clrf	0
  5884                           
  5885                           ;gsk_algo_funcs.c: 7: if (i==0)
  5886  0D74  0877               	movf	GetCumulativePeriodsForStates@i,w
  5887  0D75  1D03               	btfss	3,2
  5888  0D76  2D79               	goto	l2368
  5889                           
  5890                           ;gsk_algo_funcs.c: 8: j = 0;
  5891  0D77  01F6               	clrf	GetCumulativePeriodsForStates@j
  5892  0D78  2D82               	goto	l2374
  5893  0D79                     l2368:	
  5894                           
  5895                           ;gsk_algo_funcs.c: 9: else
  5896                           ;gsk_algo_funcs.c: 10: j = STATE_BREAKS[GetPrevCycle(i)];
  5897  0D79  0877               	movf	GetCumulativePeriodsForStates@i,w
  5898  0D7A  2679  120A  158A   	fcall	_GetPrevCycle
  5899  0D7D  3EE2               	addlw	(low (_STATE_BREAKS| 0))& (0+255)
  5900  0D7E  0084               	movwf	4
  5901  0D7F  1383               	bcf	3,7	;select IRP bank1
  5902  0D80  0800               	movf	0,w
  5903  0D81  00F6               	movwf	GetCumulativePeriodsForStates@j
  5904  0D82                     l2374:	
  5905  0D82  0877               	movf	GetCumulativePeriodsForStates@i,w
  5906  0D83  3EE2               	addlw	(low (_STATE_BREAKS| 0))& (0+255)
  5907  0D84  0084               	movwf	4
  5908  0D85  0800               	movf	0,w
  5909  0D86  0276               	subwf	GetCumulativePeriodsForStates@j,w
  5910  0D87  1803               	btfsc	3,0
  5911  0D88  2DA9               	goto	l2376
  5912                           
  5913                           ;gsk_algo_funcs.c: 12: STATE_CUMULATIVE_PERIODS[i] = STATE_CUMULATIVE_PERIODS[i]
  5914                           ;gsk_algo_funcs.c: 13: + STATE_PERIODS[j];
  5915  0D89  1003               	clrc
  5916  0D8A  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  5917  0D8B  3EDC               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  5918  0D8C  0084               	movwf	4
  5919  0D8D  0800               	movf	0,w
  5920  0D8E  00F2               	movwf	??_GetCumulativePeriodsForStates
  5921  0D8F  0A84               	incf	4,f
  5922  0D90  0800               	movf	0,w
  5923  0D91  00F3               	movwf	??_GetCumulativePeriodsForStates+1
  5924  0D92  0876               	movf	GetCumulativePeriodsForStates@j,w
  5925  0D93  3ECC               	addlw	204
  5926  0D94  0084               	movwf	4
  5927  0D95  1783               	bsf	3,7	;select IRP bank3
  5928  0D96  0800               	movf	0,w
  5929  0D97  0772               	addwf	??_GetCumulativePeriodsForStates,w
  5930  0D98  00F4               	movwf	??_GetCumulativePeriodsForStates+2
  5931  0D99  0873               	movf	??_GetCumulativePeriodsForStates+1,w
  5932  0D9A  1803               	skipnc
  5933  0D9B  0A73               	incf	??_GetCumulativePeriodsForStates+1,w
  5934  0D9C  00F5               	movwf	??_GetCumulativePeriodsForStates+3
  5935  0D9D  1003               	clrc
  5936  0D9E  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  5937  0D9F  3EDC               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  5938  0DA0  0084               	movwf	4
  5939  0DA1  0874               	movf	??_GetCumulativePeriodsForStates+2,w
  5940  0DA2  1383               	bcf	3,7	;select IRP bank1
  5941  0DA3  0080               	movwf	0
  5942  0DA4  0A84               	incf	4,f
  5943  0DA5  0875               	movf	??_GetCumulativePeriodsForStates+3,w
  5944  0DA6  0080               	movwf	0
  5945  0DA7  0AF6               	incf	GetCumulativePeriodsForStates@j,f
  5946  0DA8  2D82               	goto	l2374
  5947  0DA9                     l2376:	
  5948  0DA9  3003               	movlw	3
  5949  0DAA  0AF7               	incf	GetCumulativePeriodsForStates@i,f
  5950  0DAB  0277               	subwf	GetCumulativePeriodsForStates@i,w
  5951  0DAC  1803               	btfsc	3,0
  5952  0DAD  0008               	return
  5953  0DAE  2D6C               	goto	l2362
  5954  0DAF                     __end_of_GetCumulativePeriodsForStates:	
  5955  0DAF                     __ptext31:	
  5956 ;; *************** function _GetCycle *****************
  5957 ;; Defined at:
  5958 ;;		line 27 in file "libs/gsk_algo_funcs.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;		None
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  i               1   13[COMMON] unsigned char 
  5963 ;;  PrevCycle       1   12[COMMON] unsigned char 
  5964 ;; Return value:  Size  Location     Type
  5965 ;;                  1    wreg      void 
  5966 ;; Registers used:
  5967 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5968 ;; Tracked objects:
  5969 ;;		On entry : 300/0
  5970 ;;		On exit  : 300/0
  5971 ;;		Unchanged: 0/0
  5972 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  5973 ;;      Params:         0       0       0       0       0
  5974 ;;      Locals:         2       0       0       0       0
  5975 ;;      Temps:         10       0       0       0       0
  5976 ;;      Totals:        12       0       0       0       0
  5977 ;;Total ram usage:       12 bytes
  5978 ;; Hardware stack levels used:    1
  5979 ;; Hardware stack levels required when called:    1
  5980 ;; This function calls:
  5981 ;;		_GetPrevCycle
  5982 ;; This function is called by:
  5983 ;;		_main
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           
  5988                           ;psect for function _GetCycle
  5989  0DAF                     _GetCycle:	
  5990                           
  5991                           ;gsk_algo_funcs.c: 28: char PrevCycle;
  5992                           ;gsk_algo_funcs.c: 29: for (char i = 0; i < 3; i++) {
  5993                           
  5994                           ;incstack = 0
  5995                           ; Regs used in _GetCycle: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5996  0DAF  01FD               	clrf	GetCycle@i
  5997  0DB0                     l2386:	
  5998                           
  5999                           ;gsk_algo_funcs.c: 30: PrevCycle = GetPrevCycle(i);
  6000  0DB0  087D               	movf	GetCycle@i,w
  6001  0DB1  2679  120A  158A   	fcall	_GetPrevCycle
  6002  0DB4  00FC               	movwf	GetCycle@PrevCycle
  6003                           
  6004                           ;gsk_algo_funcs.c: 31: if (C[PrevCycle] <= C[i]) {
  6005  0DB5  00F2               	movwf	??_GetCycle
  6006  0DB6  3001               	movlw	1
  6007  0DB7  1003               	clrc
  6008  0DB8                     L20:	
  6009  0DB8  0DF2               	rlf	??_GetCycle,f
  6010  0DB9  3EFF               	addlw	-1
  6011  0DBA  1003               	clrc
  6012  0DBB  1D03               	skipz
  6013  0DBC  2DB8               	goto	L20
  6014  0DBD  0D72               	rlf	??_GetCycle,w
  6015  0DBE  3E20               	addlw	32
  6016  0DBF  0084               	movwf	4
  6017  0DC0  1383               	bcf	3,7	;select IRP bank0
  6018  0DC1  0800               	movf	0,w
  6019  0DC2  00F3               	movwf	??_GetCycle+1
  6020  0DC3  0A84               	incf	4,f
  6021  0DC4  0800               	movf	0,w
  6022  0DC5  00F4               	movwf	??_GetCycle+2
  6023  0DC6  0A84               	incf	4,f
  6024  0DC7  0800               	movf	0,w
  6025  0DC8  00F5               	movwf	??_GetCycle+3
  6026  0DC9  0A84               	incf	4,f
  6027  0DCA  0800               	movf	0,w
  6028  0DCB  00F6               	movwf	??_GetCycle+4
  6029  0DCC  087D               	movf	GetCycle@i,w
  6030  0DCD  00F7               	movwf	??_GetCycle+5
  6031  0DCE  3001               	movlw	1
  6032  0DCF  1003               	clrc
  6033  0DD0                     L21:	
  6034  0DD0  0DF7               	rlf	??_GetCycle+5,f
  6035  0DD1  3EFF               	addlw	-1
  6036  0DD2  1003               	clrc
  6037  0DD3  1D03               	skipz
  6038  0DD4  2DD0               	goto	L21
  6039  0DD5  0D77               	rlf	??_GetCycle+5,w
  6040  0DD6  3E20               	addlw	32
  6041  0DD7  0084               	movwf	4
  6042  0DD8  0800               	movf	0,w
  6043  0DD9  00F8               	movwf	??_GetCycle+6
  6044  0DDA  0A84               	incf	4,f
  6045  0DDB  0800               	movf	0,w
  6046  0DDC  00F9               	movwf	??_GetCycle+7
  6047  0DDD  0A84               	incf	4,f
  6048  0DDE  0800               	movf	0,w
  6049  0DDF  00FA               	movwf	??_GetCycle+8
  6050  0DE0  0A84               	incf	4,f
  6051  0DE1  0800               	movf	0,w
  6052  0DE2  00FB               	movwf	??_GetCycle+9
  6053  0DE3  3A80               	xorlw	128
  6054  0DE4  00FF               	movwf	127
  6055  0DE5  0876               	movf	??_GetCycle+4,w
  6056  0DE6  3A80               	xorlw	128
  6057  0DE7  027F               	subwf	127,w
  6058  0DE8  1D03               	skipz
  6059  0DE9  2DF4               	goto	u2553
  6060  0DEA  0875               	movf	??_GetCycle+3,w
  6061  0DEB  027A               	subwf	??_GetCycle+8,w
  6062  0DEC  1D03               	skipz
  6063  0DED  2DF4               	goto	u2553
  6064  0DEE  0874               	movf	??_GetCycle+2,w
  6065  0DEF  0279               	subwf	??_GetCycle+7,w
  6066  0DF0  1D03               	skipz
  6067  0DF1  2DF4               	goto	u2553
  6068  0DF2  0873               	movf	??_GetCycle+1,w
  6069  0DF3  0278               	subwf	??_GetCycle+6,w
  6070  0DF4                     u2553:	
  6071                           
  6072                           ;gsk_algo_funcs.c: 32: if ((S>C[PrevCycle]) && (S<=C[i])) {
  6073  0DF4  087C               	movf	GetCycle@PrevCycle,w
  6074  0DF5  00F2               	movwf	??_GetCycle
  6075  0DF6  3001               	movlw	1
  6076  0DF7  1C03               	skipc
  6077  0DF8  2E31               	goto	L24
  6078  0DF9  1003               	clrc
  6079  0DFA                     L22:	
  6080  0DFA  0DF2               	rlf	??_GetCycle,f
  6081  0DFB  3EFF               	addlw	-1
  6082  0DFC  1003               	clrc
  6083  0DFD  1D03               	skipz
  6084  0DFE  2DFA               	goto	L22
  6085  0DFF  2683  120A  158A   	fcall	PL4	;call to abstracted procedure
  6086  0E02  2694  120A  158A   	fcall	PL40	;call to abstracted procedure
  6087  0E05  1D03               	skipz
  6088  0E06  2E11               	goto	u2573
  6089  0E07  086C               	movf	_S+2,w	;volatile
  6090  0E08  0275               	subwf	??_GetCycle+3,w
  6091  0E09  1D03               	skipz
  6092  0E0A  2E11               	goto	u2573
  6093  0E0B  086B               	movf	_S+1,w	;volatile
  6094  0E0C  0274               	subwf	??_GetCycle+2,w
  6095  0E0D  1D03               	skipz
  6096  0E0E  2E11               	goto	u2573
  6097  0E0F  086A               	movf	_S,w	;volatile
  6098  0E10  0273               	subwf	??_GetCycle+1,w
  6099  0E11                     u2573:	
  6100  0E11  1803               	skipnc
  6101  0E12  2E6E               	goto	l2404
  6102  0E13  087D               	movf	GetCycle@i,w
  6103  0E14  00F2               	movwf	??_GetCycle
  6104  0E15  3001               	movlw	1
  6105  0E16  1003               	clrc
  6106  0E17                     L23:	
  6107  0E17  0DF2               	rlf	??_GetCycle,f
  6108  0E18  3EFF               	addlw	-1
  6109  0E19  1003               	clrc
  6110  0E1A  1D03               	skipz
  6111  0E1B  2E17               	goto	L23
  6112  0E1C  2683  120A  158A   	fcall	PL4	;call to abstracted procedure
  6113  0E1F  086D               	movf	_S+3,w	;volatile
  6114  0E20  3A80               	xorlw	128
  6115  0E21  027F               	subwf	127,w
  6116  0E22  1D03               	skipz
  6117  0E23  2E2E               	goto	u2593
  6118  0E24  086C               	movf	_S+2,w	;volatile
  6119  0E25  0275               	subwf	??_GetCycle+3,w
  6120  0E26  1D03               	skipz
  6121  0E27  2E2E               	goto	u2593
  6122  0E28  086B               	movf	_S+1,w	;volatile
  6123  0E29  0274               	subwf	??_GetCycle+2,w
  6124  0E2A  1D03               	skipz
  6125  0E2B  2E2E               	goto	u2593
  6126  0E2C  086A               	movf	_S,w	;volatile
  6127  0E2D  0273               	subwf	??_GetCycle+1,w
  6128  0E2E                     u2593:	
  6129  0E2E  1803               	btfsc	3,0
  6130  0E2F  2E6C               	goto	l2394
  6131  0E30  2E6E               	goto	l2404
  6132  0E31                     L24:	
  6133                           ;gsk_algo_funcs.c: 36: if (((S>C[PrevCycle]) && (S<=86400)) || (S<=86400)) {
  6134                           
  6135  0E31  0DF2               	rlf	??_GetCycle,f
  6136  0E32  3EFF               	addlw	-1
  6137  0E33  1003               	clrc
  6138  0E34  1D03               	skipz
  6139  0E35  2E31               	goto	L24
  6140  0E36  2683  120A  158A   	fcall	PL4	;call to abstracted procedure
  6141  0E39  2694  120A  158A   	fcall	PL40	;call to abstracted procedure
  6142  0E3C  1D03               	skipz
  6143  0E3D  2E48               	goto	u2613
  6144  0E3E  086C               	movf	_S+2,w	;volatile
  6145  0E3F  0275               	subwf	??_GetCycle+3,w
  6146  0E40  1D03               	skipz
  6147  0E41  2E48               	goto	u2613
  6148  0E42  086B               	movf	_S+1,w	;volatile
  6149  0E43  0274               	subwf	??_GetCycle+2,w
  6150  0E44  1D03               	skipz
  6151  0E45  2E48               	goto	u2613
  6152  0E46  086A               	movf	_S,w	;volatile
  6153  0E47  0273               	subwf	??_GetCycle+1,w
  6154  0E48                     u2613:	
  6155  0E48  1803               	skipnc
  6156  0E49  2E5B               	goto	l2400
  6157  0E4A  1BED               	btfsc	_S+3,7	;volatile
  6158  0E4B  2E6C               	goto	l2394
  6159  0E4C  086D               	movf	_S+3,w	;volatile
  6160  0E4D  1D03               	btfss	3,2
  6161  0E4E  2E5B               	goto	l2400
  6162  0E4F  3001               	movlw	1
  6163  0E50  026C               	subwf	_S+2,w	;volatile
  6164  0E51  1D03               	skipz
  6165  0E52  2E59               	goto	u2623
  6166  0E53  3051               	movlw	81
  6167  0E54  026B               	subwf	_S+1,w	;volatile
  6168  0E55  1D03               	skipz
  6169  0E56  2E59               	goto	u2623
  6170  0E57  3081               	movlw	129
  6171  0E58  026A               	subwf	_S,w	;volatile
  6172  0E59                     u2623:	
  6173  0E59  1C03               	btfss	3,0
  6174  0E5A  2E6C               	goto	l2394
  6175  0E5B                     l2400:	
  6176  0E5B  1BED               	btfsc	_S+3,7	;volatile
  6177  0E5C  2E6C               	goto	l2394
  6178  0E5D  086D               	movf	_S+3,w	;volatile
  6179  0E5E  1D03               	btfss	3,2
  6180  0E5F  2E6E               	goto	l2404
  6181  0E60  3001               	movlw	1
  6182  0E61  026C               	subwf	_S+2,w	;volatile
  6183  0E62  1D03               	skipz
  6184  0E63  2E6A               	goto	u2633
  6185  0E64  3051               	movlw	81
  6186  0E65  026B               	subwf	_S+1,w	;volatile
  6187  0E66  1D03               	skipz
  6188  0E67  2E6A               	goto	u2633
  6189  0E68  3081               	movlw	129
  6190  0E69  026A               	subwf	_S,w	;volatile
  6191  0E6A                     u2633:	
  6192  0E6A  1803               	btfsc	3,0
  6193  0E6B  2E6E               	goto	l2404
  6194  0E6C                     l2394:	
  6195                           
  6196                           ;gsk_algo_funcs.c: 33: CYCLE_TYPE = i;
  6197  0E6C  087D               	movf	GetCycle@i,w
  6198  0E6D  00EE               	movwf	_CYCLE_TYPE	;volatile
  6199  0E6E                     l2404:	
  6200  0E6E  3003               	movlw	3
  6201  0E6F  0AFD               	incf	GetCycle@i,f
  6202  0E70  027D               	subwf	GetCycle@i,w
  6203  0E71  1C03               	skipc
  6204  0E72  2DB0               	goto	l2386
  6205                           
  6206                           ;gsk_algo_funcs.c: 38: }
  6207                           ;gsk_algo_funcs.c: 39: }
  6208                           ;gsk_algo_funcs.c: 40: }
  6209                           ;gsk_algo_funcs.c: 41: PREV_CYCLE_TYPE = GetPrevCycle(CYCLE_TYPE);
  6210  0E73  086E               	movf	_CYCLE_TYPE,w	;volatile
  6211  0E74  2679               	fcall	_GetPrevCycle
  6212  0E75  1283               	bcf	3,5	;RP0=0, select bank0
  6213  0E76  1303               	bcf	3,6	;RP1=0, select bank0
  6214  0E77  00EF               	movwf	_PREV_CYCLE_TYPE	;volatile
  6215  0E78  0008               	return
  6216  0E79                     __end_of_GetCycle:	
  6217  0E79                     __ptext33:	
  6218 ;; *************** function _GetPrevCycle *****************
  6219 ;; Defined at:
  6220 ;;		line 18 in file "libs/gsk_algo_funcs.c"
  6221 ;; Parameters:    Size  Location     Type
  6222 ;;  cycle           1    wreg     unsigned char 
  6223 ;; Auto vars:     Size  Location     Type
  6224 ;;  cycle           1    1[COMMON] unsigned char 
  6225 ;;  PrevCycle       1    0[COMMON] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      unsigned char 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h   BANK2
  6235 ;;      Params:         0       0       0       0       0
  6236 ;;      Locals:         2       0       0       0       0
  6237 ;;      Temps:          0       0       0       0       0
  6238 ;;      Totals:         2       0       0       0       0
  6239 ;;Total ram usage:        2 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; This function calls:
  6242 ;;		Nothing
  6243 ;; This function is called by:
  6244 ;;		_GetCumulativePeriodsForStates
  6245 ;;		_GetCycle
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _GetPrevCycle
  6251  0E79                     _GetPrevCycle:	
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in _GetPrevCycle: [wreg+status,2+status,0]
  6255                           ;GetPrevCycle@cycle stored from wreg
  6256  0E79  00F1               	movwf	GetPrevCycle@cycle
  6257                           
  6258                           ;gsk_algo_funcs.c: 19: UINT8 PrevCycle;
  6259                           ;gsk_algo_funcs.c: 20: if (cycle > 0)
  6260  0E7A  0871               	movf	GetPrevCycle@cycle,w
  6261  0E7B  1903               	btfsc	3,2
  6262  0E7C  2E80               	goto	l2004
  6263                           
  6264                           ;gsk_algo_funcs.c: 21: PrevCycle = cycle - 1;
  6265  0E7D  0871               	movf	GetPrevCycle@cycle,w
  6266  0E7E  3EFF               	addlw	255
  6267  0E7F  2E81               	goto	L27
  6268  0E80                     l2004:	
  6269                           
  6270                           ;gsk_algo_funcs.c: 22: else
  6271                           ;gsk_algo_funcs.c: 23: PrevCycle = 3 - 1;
  6272  0E80  3002               	movlw	2
  6273  0E81                     L27:	
  6274  0E81  00F0               	movwf	GetPrevCycle@PrevCycle
  6275                           
  6276                           ;gsk_algo_funcs.c: 24: return PrevCycle;
  6277  0E82  0008               	return
  6278  0E83                     __end_of_GetPrevCycle:	
  6279  007E                     btemp	set	126	;btemp
  6280  007E                     wtemp	set	126
  6281  007E                     wtemp0	set	126
  6282  0080                     wtemp1	set	128
  6283  0082                     wtemp2	set	130
  6284  0084                     wtemp3	set	132
  6285  0086                     wtemp4	set	134
  6286  0088                     wtemp5	set	136
  6287  007F                     wtemp6	set	127
  6288  007E                     ttemp	set	126
  6289  007E                     ttemp0	set	126
  6290  0081                     ttemp1	set	129
  6291  0084                     ttemp2	set	132
  6292  0087                     ttemp3	set	135
  6293  007F                     ttemp4	set	127
  6294  007E                     ltemp	set	126
  6295  007E                     ltemp0	set	126
  6296  0082                     ltemp1	set	130
  6297  0086                     ltemp2	set	134
  6298  0080                     ltemp3	set	128
  6299  0E83                     PL4:	
  6300  0E83  0D72               	rlf	??_GetCycle,w
  6301  0E84  3E20               	addlw	32
  6302  0E85  0084               	movwf	4
  6303  0E86  0800               	movf	0,w
  6304  0E87  00F3               	movwf	??_GetCycle+1
  6305  0E88  0A84               	incf	4,f
  6306  0E89  0800               	movf	0,w
  6307  0E8A  00F4               	movwf	??_GetCycle+2
  6308  0E8B  0A84               	incf	4,f
  6309  0E8C  0800               	movf	0,w
  6310  0E8D  00F5               	movwf	??_GetCycle+3
  6311  0E8E  0A84               	incf	4,f
  6312  0E8F  0800               	movf	0,w
  6313  0E90  00F6               	movwf	??_GetCycle+4
  6314  0E91  3A80               	xorlw	128
  6315  0E92  00FF               	movwf	127
  6316  0E93  0008               	return
  6317  0E94                     __end_ofPL4:	
  6318  0E94                     PL40:	
  6319  0E94  1283               	bcf	3,5	;RP0=0, select bank0
  6320  0E95  1303               	bcf	3,6	;RP1=0, select bank0
  6321  0E96  086D               	movf	_S+3,w	;volatile
  6322  0E97  3A80               	xorlw	128
  6323  0E98  027F               	subwf	127,w
  6324  0E99  0008               	return
  6325  0E9A                     __end_ofPL40:	


Data Sizes:
    Strings     20
    Constant    0
    Data        223
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            68     62      68
    BANK1            20      0      11
    BANK3h            6      0       0
    BANK2            36      0       0

Pointer List with Targets:

    Lcd_Text@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_GetCycle
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _WriteLongInt->___aldiv
    ___bmul->___aldiv
    _ReadRTCAsSec->___lmul
    _I2C_ReadAtAddress->_I2C_Master_Read
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Init->_Lcd_Command
    _Lcd_Init->_Lcd_Delay5500us
    _Lcd_WriteChar->___aldiv
    _I2C_Master_Init->___lldiv
    _GetCycle->_GetPrevCycle
    _GetCumulativePeriodsForStates->_GetPrevCycle

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftmul
    _WriteLongInt->_Lcd_WriteChar
    _ReadVars->___bmul
    _Lcd_Disp_Bin->_Lcd_WriteChar
    _Lcd_WriteChar->___bmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3h

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   16856
                                             28 BANK0     34    34      0
      _GetCumulativePeriodsForStates
                           _GetCycle
                    _I2C_Master_Init
                       _Lcd_Disp_Bin
                           _Lcd_Init
                           _Lcd_Text
                       _ReadRTCAsSec
                           _ReadVars
                          _SwitchGPS
                       _WriteLongInt
                            ___almod
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     385
                                             15 BANK0     13     9      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2143
                                              0 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    1773
                                              8 COMMON     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1629
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     402
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                        10     3      7    3769
                                              7 BANK0     10     3      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___bmul
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     592
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _SwitchGPS                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            17    17      0     896
                                              3 BANK0     17    17      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     384
                                              0 BANK0      3     2      1
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAsSec                                        18    14      4    2097
                                              0 BANK0     18    14      4
                  _I2C_ReadAtAddress
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     596
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     464
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadAtAddress                                    3     2      1     829
                                              4 COMMON     3     2      1
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     323
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      4     2      2      98
                                              0 COMMON     4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             4     2      2     745
                                              2 COMMON     4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              2 COMMON     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Disp_Bin                                         6     3      3    1748
                                              7 BANK0      6     3      3
                      _Lcd_WriteChar
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2     934
                                              3 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          2     2      0     176
                                              0 COMMON     2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           2     2      0     176
                                              0 COMMON     2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _GetCycle                                            12    12      0     291
                                              2 COMMON    12    12      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (1) _GetCumulativePeriodsForStates                        6     6      0     293
                                              2 COMMON     6     6      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (2) _GetPrevCycle                                         2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetCumulativePeriodsForStates
     _GetPrevCycle
   _GetCycle
     _GetPrevCycle
   _I2C_Master_Init
     ___lldiv
   _Lcd_Disp_Bin
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5us
   _ReadRTCAsSec
     _I2C_ReadAtAddress
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___lmul
     ___wmul
   _ReadVars
     ___bmul
       ___aldiv (ARG)
     _eeprom_read
   _SwitchGPS
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
     ___aldiv
     ___bmul
       ___aldiv (ARG)
     ___lmul
   ___almod
   ___awtoft
     ___ftpack
   ___ftmul
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BITBANK3h            6      0       0       8        0.0%
BANK3h               6      0       0       9        0.0%
BANK2               24      0       0      11        0.0%
BITBANK2            24      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               14      0       B       7       55.0%
BITBANK1            14      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               44     3E      44       5      100.0%
BITBANK0            44      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5D      12        0.0%
ABS                  0      0      5D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0      DF       0       87.1%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 06 21:49:50 2016

                                     _C 0020                                       _S 006A  
                                     pc 0002                          ___bmul@product 002D  
                           __CFG_CP$OFF 0000                                      PL2 0385  
                                    PL4 0E83                                      PL6 03B0  
                                    PL8 03CC                                      l63 05F5  
                                    _RD 0C60                                      _WR 0C61  
                                    fsr 0004                     ___wmul@multiplicand 0072  
                                   PL10 03D9                                     PL20 03F5  
                                   PL12 03E2                                     PL30 07CA  
                                   PL22 0FF7                                     PL14 03EC  
                                   PL40 0E94                                     PL32 07D3  
                                   PL24 07B8                                     PL16 07AC  
                                   PL34 07DA                                     PL26 03FD  
                                   PL18 0D60                                     PL36 07E1  
                                   PL28 07C1                                     PL38 0C26  
                                   l308 0FB9                                     l524 078A  
                                   l621 0FC8                                     l665 04A7  
                                   l678 0C3D                                     l766 0D26  
                                   l778 0D4E                                     _RA0 0028  
                                   _RA1 0029                                     _RA2 002A  
                                   _RA3 002B                                     _RA4 002C  
                                   _RC1 0039                                     _RA5 002D  
                                   _C_D 00E6                                     _PEN 048A  
                          __CFG_CPD$OFF 0000                                     _SEN 0488  
                          main@SecError 0063                                     fsr0 0004  
                                   indf 0000                            __CFG_IESO$ON 0000  
                          __CFG_FOSC$HS 0000                       GetCycle@PrevCycle 007C  
                   __end_of_Lcd_Command 06C9                       GetPrevCycle@cycle 0071  
                         ?_ReadRTCAsSec 002C                            __CFG_LVP$OFF 0000  
                      main@DiffInSecond 0061                                    l2010 0F52  
                                  l2004 0E80                                    l2014 0F5A  
                                  l2110 0503                                    l2106 04F5  
                                  l2124 0078                                    l2028 0FDE  
                                  l2060 0D3E                                    l2038 07A0  
                                  l2054 0D2A                                    l2400 0E5B  
                                  l2136 00A3                                    l2232 050E  
                                  l2304 074B                                    l2064 0D4C  
                                  l2056 0D2F                                    l2250 052B  
                                  l2234 0511                                    l2242 051B  
                                  l2306 074C                                    l2066 0D43  
                                  l2058 0D34                                    l2404 0E6E  
                                  l2236 0514                                    l2244 0529  
                                  l2084 04B6                                    l2420 0C4A  
                                  l2238 0517                                    l2318 0760  
                                  l2094 04CA                                    l2510 0BD5  
                                  l2280 0017                                    l2264 0430  
                                  l2272 0438                                    l2440 0C8D  
                                  l2512 0BDA                                    l2362 0D6C  
                                  l2602 017D                                    l2284 002F  
                                  l2292 06D6                                    l2428 0C5A  
                                  l2436 0C7F                                    l2452 0CA0  
                                  l2460 0CC2                                    l2540 0C0F  
                                  l2532 0C01                                    l2374 0D82  
                                  l1910 06B2                                    l2710 030C  
                                  l2630 022B                                    l2376 0DA9  
                                  l2368 0D79                                    l1912 06BB  
                                  l2464 0CD3                                    l2544 0C1D  
                                  l2528 0BF9                                    l2704 02FA  
                                  l2640 027A                                    l2608 0191  
                                  l2394 0E6C                                    l2386 0DB0  
                                  l1922 058A                                    l1906 0699  
                                  l2482 0CE4                                    l2538 0C05  
                                  l2714 0315                                    l2642 027C  
                                  l2570 00EE                                    l1932 05A5  
                                  l1908 06A5                                    l2740 037F  
                                  l1934 05B1                                    l2494 0CF9  
                                  l2486 0CED                                    l2718 031E  
                                  l2742 01CA                                    l2590 0129  
                                  l1936 05BE                                    l2744 0381  
                                  l2736 0361                                    l2680 02D8  
                                  l2664 02AB                                    l2648 0285  
                                  l2728 0328                                    l2584 0121  
                                  l1938 05C7                                    l2498 0D02  
                                  l2738 037B                                    l2674 02CB  
                                  l2658 029E                                    l2746 01C0  
                                  l2594 012E                                    l2578 0114  
                                  l1980 047A                                    l2596 0134  
                                  l1886 06C9                                    l1982 047D  
                                  l1966 0FB3                                    l2694 02ED  
                                  l1896 067E                                    l1976 0474  
                                  l1978 0477                                    l1986 0481  
                                  l1988 048F                                    STR_1 0812  
                                  STR_2 0806                                    _EE_C 00D2  
                                  u2010 05C4                                    u2030 0FB0  
                                  u3015 01B5                                    u2315 008B  
                                  u1700 066A                                    u1640 0648  
                                  u3217 0630                                    u2265 04DD  
                                  u1810 06B8                                    u1730 067B  
                                  u1714 066D                                    u3227 0680  
                                  u1635 063D                                    u1900 0576  
                                  u2613 0E48                                    u3237 06BD  
                                  u1725 0670                                    u1750 0696  
                                  u1670 0659                                    u1654 064B  
                                  u2623 0E59                                    u3247 058C  
                                  u3183 0379                                    u3175 035B  
                                  u1840 0554                                    u2384 001D  
                                  u2633 0E6A                                    u2553 0DF4  
                                  u3257 05C9                                    u1665 064E  
                                  u2385 001B                                    u1930 0587  
                                  u1914 0579                                    u1770 06A2  
                                  u2650 0BC7                                    u1835 0549  
                                  u2715 0C68                                    u3195 01DA  
                                  u1684 065C                                    u2573 0E11  
                                  u1925 057C                                    u1950 05A2  
                                  u1870 0565                                    u1854 0557  
                                  u1790 06AF                                    u2495 0045  
                                  u1695 065F                                    u2593 0E2E  
                                  u1865 055A                                    u1970 05AE  
                 __size_of_WriteLongInt 006C                                    u1884 0568  
                                  u2845 0BDE                                    u1990 05BB  
                                  u1895 056B                                    u2963 0174  
                                  _RCEN 048B                       ??_Lcd_Delay5500us 0070  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
                                  _main 00AC                            ___ftpack@arg 0070  
                          ___ftpack@exp 0073                    __end_of_Lcd_Delay5us 06CD  
                                  btemp 007E                                    ltemp 007E  
                                  start 0000                                    ttemp 007E  
                                  wtemp 007E                        _ReadRTCAsSec$889 0037  
                  __end_of_Lcd_Disp_Bin 0037                       ___bmul@multiplier 002E  
                         __CFG_MCLRE$ON 0000                            ___ftmul@cntr 0039  
                          ___ftmul@sign 003A                              _Lcd_CharCP 0541  
                          ___fttol@exp1 0047                            ___fttol@lval 0043  
                      ?_I2C_Master_Init 002C                        ?_I2C_Master_Read 0070  
                      ?_I2C_Master_Wait 0070                        ?_I2C_Master_Stop 0070  
                       __end_of___aldiv 050C                         __end_of___almod 0C96  
                                 ?_main 0070                                   _ACKEN 048C  
                                 _ACKDT 048D                                   _EEADR 010D  
                         __CFG_WDTE$OFF 0000                                   _ANSEL 0188  
                       __end_of___lldiv 00AC                    __end_of_GetPrevCycle 0E83  
                       __end_of___ftmul 0D1E                         __end_of___fttol 0C26  
                                 _PORTB 0006                                   _PORTC 0007  
                          _WriteLongInt 0406                     ___lmul@multiplicand 0074  
                        ??_ReadRTCAsSec 0030                           ___awtoft@sign 007B  
                         ___ftpack@sign 0074                                   main@i 0067  
                                 main@j 0062                                   main@k 0058  
                                 main@l 0068                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                                   ltemp0 007E  
                                 ltemp1 0082                                   ltemp2 0086  
                                 ltemp3 0080                                   ttemp0 007E  
                                 ttemp1 0081                                   ttemp2 0084  
                                 ttemp3 0087                                   ttemp4 007F  
                                 status 0003                                   wtemp0 007E  
                                 wtemp1 0080                                   wtemp2 0082  
                                 wtemp3 0084                                   wtemp4 0086  
                                 wtemp5 0088                                   wtemp6 007F  
                      __end_of_GetCycle 0E79                        __end_of_Lcd_Init 062C  
                      __end_of_Lcd_Text 0541                         __initialization 07E8  
                          __end_of_main 0385                        __end_of_ReadVars 0789  
                           _Lcd_Command 0635           main@StateAudioSplOnOffCounter 005F  
                       ReadRTCAsSec@Out 0039                                  ??_main 0048  
                         ___fttol@sign1 0042                       ?_I2C_Master_Start 0070  
                     ?_I2C_Master_Write 0070                      ??_I2C_Master_Start 0070  
                    ??_I2C_Master_Write 0072                                  _EEDATA 010C  
                                _EECON1 018C                        __end_of___awtoft 0CB1  
                      __end_of___ftpack 0D60                                  _ANSELH 0189  
                                _EE_C_D 00DE                       _I2C_ReadAtAddress 0F69  
                      WriteLongInt@Sign 0039                          Lcd_Text@buffer 0073  
                    ?_I2C_ReadAtAddress 0074                                  _SSPADD 0093  
                                _TRISC3 043B                                  _TRISC4 043C  
                                _SSPCON 0014                                  _SSPBUF 0013  
                      WriteLongInt@size 0038                          __CFG_PWRTE$OFF 0000  
                  __size_of_eeprom_read 0015                     ??_I2C_ReadAtAddress 0075  
                                ___bmul 079E                             ?_Lcd_CharCP 0070  
                                ___lmul 0FC4                               ??___aldiv 0078  
                             ??___almod 0078                                  ___wmul 0F50  
                             ??___lldiv 0078                               ??___ftmul 0032  
                             ??___fttol 003F                   __end_of_Lcd_WriteChar 0497  
                 ___ftmul@f3_as_product 0036                            __pdataEEDATA 0000  
             __end_of_I2C_ReadAtAddress 0F92                   __size_of_Lcd_Delay5us 0004  
                    Lcd_Command@command 0071                      __size_of_SwitchGPS 000B  
                 __size_of_Lcd_Disp_Bin 0022                 __end_of__initialization 07FC  
                 main@StateSecRemaining 005A                         eeprom_read@addr 0070  
                            ___awtoft@c 0078                     ___bmul@multiplicand 002C  
                            ___ftmul@f1 002C                              ___ftmul@f2 002F  
                            ___fttol@f1 003B                          __pcstackCOMMON 0070  
                  __end_of_ReadRTCAsSec 0F50                            __pidataBANK0 0000  
                 __size_of_GetPrevCycle 000A                              __end_ofPL2 03B0  
                            __end_ofPL4 0E94                              __end_ofPL6 03CC  
                            __end_ofPL8 03D9                            _Lcd_Delay5us 06C9  
                       _Lcd_Delay5500us 062C                            _Lcd_Disp_Bin 0015  
                        Lcd_WriteChar@c 0030                               ?_GetCycle 0070  
                        Lcd_WriteChar@x 002F                          Lcd_WriteChar@y 0031  
                            SwitchGPS@a 0070                               ?_Lcd_Init 0070  
                             ?_Lcd_Text 0072                     __size_of_Lcd_CharCP 0094  
                            __pbssBANK0 006A                              __pbssBANK1 00DC  
                             ?_ReadVars 0070                 I2C_ReadAtAddress@IntAdd 0074  
                          _GetPrevCycle 0E79                              __pmaintext 00AC  
                               ?___bmul 002C                                 ?___lmul 0070  
                               ?___wmul 0070                          ___lmul@product 0078  
                             ?___awtoft 0078                               ?___ftpack 0070  
                     __end_of_SwitchGPS 0BCB        main@StateAudioNormalOnOffCounter 005D  
                               _CONFIG0 00E5                              ??_GetCycle 0072  
                            ??_Lcd_Init 0072              __size_of_I2C_ReadAtAddress 0029  
                            ??_Lcd_Text 0074                                 _STATE_1 00A0  
                               _STATE_2 0110                                 _STATE_3 0190  
                               _SSPCON2 0091                                 _SSPSTAT 0094  
                            __stringtab 0800                         _EE_STATE_BREAKS 00DB  
                            ??_ReadVars 002F                  ReadRTCAsSec@TempVar000 003D  
                               ___aldiv 0497                         __size_of___bmul 000E  
                               ___almod 0C2D                       Lcd_WriteChar@data 0032  
                       __size_of___lmul 0033                                 ___lldiv 0064  
                       __size_of___wmul 0019                                 ___ftmul 0CB1  
                               ___fttol 0BCB                 __end_of_Lcd_Delay5500us 0635  
                            ??___awtoft 007B                              ??___ftpack 0075  
                          ?_Lcd_Command 0070                                 __ptext1 0BCB  
                               __ptext2 0CB1                                 __ptext3 0C96  
                               __ptext4 0D1E                                 __ptext5 0C2D  
                               __ptext6 0406                                 __ptext7 0497  
                               __ptext8 0BC0                                 __ptext9 06CD  
                             _EE_STATES 0000                        ___aldiv@dividend 0074  
              __size_of_I2C_Master_Init 002D                __size_of_I2C_Master_Read 001F  
              __size_of_I2C_Master_Wait 0008                __size_of_I2C_Master_Stop 0003  
                  end_of_initialization 07FC                   GetPrevCycle@PrevCycle 0070  
       ??_GetCumulativePeriodsForStates 0072                   __size_of_ReadRTCAsSec 00B6  
                  Lcd_Disp_Bin@DispChar 0035               __size_of_I2C_Master_Start 0003  
             __size_of_I2C_Master_Write 0005                         ___lldiv@divisor 0070  
                             GetCycle@i 007D                         ___lldiv@counter 007C  
                         Lcd_Disp_Bin@i 0038                           Lcd_Disp_Bin@x 0033  
                         Lcd_Disp_Bin@y 0037                            ??_Lcd_CharCP 0070  
                      ___aldiv@quotient 007A                        I2C_Master_Init@c 002C  
                      I2C_Master_Read@a 0070                               Lcd_Text@x 0072  
                             Lcd_Text@y 0074                               _TRISAbits 0085  
                          _ReadRTCAsSec 0E9A                      __end_of_Lcd_CharCP 05D5  
                         ??_eeprom_read 0070                               ReadVars@i 003F  
                             ReadVars@j 003E                             ___ftmul@exp 0035  
                        __end_of___bmul 07AC                          __end_of___lmul 0FF7  
                      ?_Lcd_Delay5500us 0070                           __pidataEEDATA 0000  
                        __end_of___wmul 0F69                _STATE_CUMULATIVE_PERIODS 00DC  
                           __end_ofPL10 03E2                             __end_ofPL20 03FD  
                           __end_ofPL12 03EC                             __end_ofPL30 07D3  
                           __end_ofPL22 1000                             __end_ofPL14 03F5  
                           __end_ofPL40 0E9A                             __end_ofPL32 07DA  
                           __end_ofPL24 07C1                             __end_ofPL16 07B8  
                           __end_ofPL34 07E1                             __end_ofPL26 0406  
                           __end_ofPL18 0D6B                             __end_ofPL36 07E8  
                           __end_ofPL28 07CA                             __end_ofPL38 0C2D  
                   start_initialization 07E8                       __size_of_GetCycle 00CA  
                     __size_of_Lcd_Init 0057                       __size_of_Lcd_Text 0035  
                     ??_I2C_Master_Init 0030                       ??_I2C_Master_Read 0072  
                     ??_I2C_Master_Wait 0070                       ??_I2C_Master_Stop 0070  
                       WriteLongInt@POS 003B                         WriteLongInt@Val 0034  
                __size_of_Lcd_WriteChar 0025                       __size_of_ReadVars 00BC  
 __end_of_GetCumulativePeriodsForStates 0DAF  __size_of_GetCumulativePeriodsForStates 0044  
         _GetCumulativePeriodsForStates 0D6B                                ??___bmul 007E  
                              ??___lmul 0078                                ??___wmul 0074  
                   __end_of_eeprom_read 079E                              init_fetch0 0004  
                           __pdataBANK0 006F                       __size_of___awtoft 001B  
                     __size_of___ftpack 0042                             __pbssEEDATA 00DE  
                         ?_WriteLongInt 0033                    __size_of_Lcd_Command 0094  
                             _SwitchGPS 0BC0                               ___latbits 0002  
               main@GPS_On_Time_Counter 0052                           __pcstackBANK0 002C  
                         WriteLongInt@x 0033                           WriteLongInt@y 003C  
                main@State2OnOffCounter 005B                  I2C_ReadAtAddress@DevID 0076  
                      _I2C_Master_Start 0F97                        _I2C_Master_Write 0F92  
                              ?___aldiv 0070                                ?___almod 0070  
                       _PREV_CYCLE_TYPE 006F                                ?___lldiv 0070  
                              ?___ftmul 002C                                ?___fttol 003B  
                      ___almod@dividend 0074                               __pstrings 0800  
                        ??_WriteLongInt 003A                           _Lcd_WriteChar 0472  
                            ?_SwitchGPS 0070                         ___aldiv@divisor 0070  
                       ___aldiv@counter 0078                          ___wmul@product 0074  
                           _eeprom_read 0789                      main@OutForThePorts 0065  
        ?_GetCumulativePeriodsForStates 0070                            Lcd_Init@data 0072  
                           __stringbase 0805                          ?_Lcd_WriteChar 002F  
                     ___wmul@multiplier 0070                                _GetCycle 0DAF  
                              _Lcd_Init 05D5                                _Lcd_Text 050C  
                   I2C_Master_Read@temp 0072                       ___lmul@multiplier 0070  
                              _ReadVars 06CD                            Lcd_Text@data 0075  
                         _STATE_PERIODS 01CC            main@TimeSinceTheStartOfCycle 0054  
                      __size_of___aldiv 0075                        __size_of___almod 0069  
                      __size_of___lldiv 0048                        __size_of___ftmul 006D  
                      __size_of___fttol 005B                                ___awtoft 0C96  
                              ___ftpack 0D1E                      __end_of__stringtab 0806  
                         ?_Lcd_Delay5us 0070                         _I2C_Master_Init 0037  
                       _I2C_Master_Read 0F9A                         _I2C_Master_Wait 0FB9  
                           ??_SwitchGPS 0070                         _I2C_Master_Stop 0FC1  
                         ?_Lcd_Disp_Bin 0033                   I2C_ReadAtAddress@data 0075  
                              __ptext10 0789                                __ptext11 079E  
                              __ptext20 0FB9                                __ptext12 0E9A  
                              __ptext21 050C                                __ptext13 0F50  
                              __ptext30 0064                                __ptext22 05D5  
                              __ptext14 0FC4                                __ptext31 0DAF  
                              __ptext23 062C                                __ptext15 0F69  
                              __ptext32 0D6B                                __ptext24 0015  
                              __ptext16 0F92                                __ptext33 0E79  
                              __ptext25 0472                                __ptext17 0FC1  
                              __ptext26 0635                                __ptext18 0F97  
                              __ptext27 0541                                __ptext19 0F9A  
                              __ptext28 06C9                                __ptext29 0037  
                     __CFG_BOR4V$BOR21V 0000                         ___almod@divisor 0070  
                       ___almod@counter 0078                             Lcd_CharCP@c 0071  
                         __size_of_main 02D9                           ?_GetPrevCycle 0070  
                            _CYCLE_TYPE 006E                    __end_of_WriteLongInt 0472  
                       Lcd_Disp_Bin@val 0034          GetCumulativePeriodsForStates@i 0077  
        GetCumulativePeriodsForStates@j 0076                         ??_Lcd_WriteChar 007E  
                        ??_Lcd_Delay5us 0070                            _STATE_BREAKS 00E2  
              __end_of_I2C_Master_Start 0F9A                          ??_Lcd_Disp_Bin 0036  
              __end_of_I2C_Master_Write 0F97                __size_of_Lcd_Delay5500us 0009  
                              init_ram0 0008                          ??_GetPrevCycle 0070  
                      ___lldiv@dividend 0074                               stringcode 0800  
               __end_of_I2C_Master_Init 0064                 __end_of_I2C_Master_Read 0FB9  
               __end_of_I2C_Master_Wait 0FC1                 __end_of_I2C_Master_Stop 0FC4  
                         ??_Lcd_Command 0070                        ___lldiv@quotient 0078  
                     I2C_Master_Write@d 0070                                stringdir 0800  
                              stringtab 0800                            ___aldiv@sign 0079  
                          ___almod@sign 0079                            ?_eeprom_read 0070  
