

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Wed Dec 21 06:30:48 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text14,local,class=CODE,merge=1,delta=2
    22                           	psect	text15,local,class=CODE,merge=1,delta=2
    23                           	psect	text18,local,class=CODE,merge=1,delta=2
    24                           	psect	text25,local,class=CODE,merge=1,delta=2
    25                           	psect	text27,local,class=CODE,merge=1,delta=2
    26                           	psect	text28,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x3E,60,_STATE_1
    30                           	dabs	1,0x20,30,_STATE_PERIODS
    31                           	dabs	1,0x7A,6,_STATE_CUMULATIVE_PERIODS
    32                           	dabs	1,0x16B,4,_S
    33                           	dabs	1,0x16F,1,_C_D
    34                           	dabs	1,0x110,60,_STATE_2
    35                           	dabs	1,0x14C,12,_C
    36                           	dabs	1,0x167,4,_AUDIO
    37                           	dabs	1,0x164,3,_STATE_BREAKS
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  000E                     	;# 
    53  000E                     	;# 
    54  000F                     	;# 
    55  0010                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0014                     	;# 
    60  0015                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001D                     	;# 
    71  001E                     	;# 
    72  001F                     	;# 
    73  0081                     	;# 
    74  0085                     	;# 
    75  0086                     	;# 
    76  0087                     	;# 
    77  0089                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  008E                     	;# 
    81  008F                     	;# 
    82  0090                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0093                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  0105                     	;# 
   101  0107                     	;# 
   102  0108                     	;# 
   103  0109                     	;# 
   104  010C                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  0185                     	;# 
   110  0187                     	;# 
   111  0188                     	;# 
   112  0189                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  008F                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0093                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  0105                     	;# 
   177  0107                     	;# 
   178  0108                     	;# 
   179  0109                     	;# 
   180  010C                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  010F                     	;# 
   185  0185                     	;# 
   186  0187                     	;# 
   187  0188                     	;# 
   188  0189                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001D                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  0081                     	;# 
   226  0085                     	;# 
   227  0086                     	;# 
   228  0087                     	;# 
   229  0089                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  008F                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009E                     	;# 
   251  009F                     	;# 
   252  0105                     	;# 
   253  0107                     	;# 
   254  0108                     	;# 
   255  0109                     	;# 
   256  010C                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  010E                     	;# 
   260  010F                     	;# 
   261  0185                     	;# 
   262  0187                     	;# 
   263  0188                     	;# 
   264  0189                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  000E                     	;# 
   282  000F                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  001D                     	;# 
   299  001E                     	;# 
   300  001F                     	;# 
   301  0081                     	;# 
   302  0085                     	;# 
   303  0086                     	;# 
   304  0087                     	;# 
   305  0089                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  008F                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0093                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0098                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  009F                     	;# 
   328  0105                     	;# 
   329  0107                     	;# 
   330  0108                     	;# 
   331  0109                     	;# 
   332  010C                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010E                     	;# 
   336  010F                     	;# 
   337  0185                     	;# 
   338  0187                     	;# 
   339  0188                     	;# 
   340  0189                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001D                     	;# 
   375  001E                     	;# 
   376  001F                     	;# 
   377  0081                     	;# 
   378  0085                     	;# 
   379  0086                     	;# 
   380  0087                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  008F                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  0105                     	;# 
   405  0107                     	;# 
   406  0108                     	;# 
   407  0109                     	;# 
   408  010C                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  010F                     	;# 
   413  0185                     	;# 
   414  0187                     	;# 
   415  0188                     	;# 
   416  0189                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  000D                     	;# 
   432  000E                     	;# 
   433  000E                     	;# 
   434  000F                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0013                     	;# 
   439  0014                     	;# 
   440  0015                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0017                     	;# 
   444  0018                     	;# 
   445  0019                     	;# 
   446  001A                     	;# 
   447  001B                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  001D                     	;# 
   451  001E                     	;# 
   452  001F                     	;# 
   453  0081                     	;# 
   454  0085                     	;# 
   455  0086                     	;# 
   456  0087                     	;# 
   457  0089                     	;# 
   458  008C                     	;# 
   459  008D                     	;# 
   460  008E                     	;# 
   461  008F                     	;# 
   462  0090                     	;# 
   463  0091                     	;# 
   464  0092                     	;# 
   465  0093                     	;# 
   466  0093                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009E                     	;# 
   479  009F                     	;# 
   480  0105                     	;# 
   481  0107                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0187                     	;# 
   491  0188                     	;# 
   492  0189                     	;# 
   493  018C                     	;# 
   494  018D                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0093                     	;# 
   544  0094                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009E                     	;# 
   555  009F                     	;# 
   556  0105                     	;# 
   557  0107                     	;# 
   558  0108                     	;# 
   559  0109                     	;# 
   560  010C                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  0185                     	;# 
   566  0187                     	;# 
   567  0188                     	;# 
   568  0189                     	;# 
   569  018C                     	;# 
   570  018D                     	;# 
   571                           
   572                           	psect	idataBANK3
   573  0000                     __pidataBANK3:	
   574                           
   575                           	psect	idataEEDATA
   576  0000                     __pidataEEDATA:	
   577  0000                     _EE_STATES:	
   578                           ;initializer for _EE_STATES
   579                           
   580  0000  004E               	db	78
   581  0001  0021               	db	33
   582  0002  0090               	db	144
   583  0003  0000               	db	0
   584  0004  0000               	db	0
   585  0005  0004               	db	4
   586  0006  0020               	db	32
   587  0007  0090               	db	144
   588  0008  0001               	db	1
   589  0009  0000               	db	0
   590  000A  0003               	db	3
   591  000B  0022               	db	34
   592  000C  0090               	db	144
   593  000D  0000               	db	0
   594  000E  0000               	db	0
   595  000F  000F               	db	15
   596  0010  0024               	db	36
   597  0011  0088               	db	136
   598  0012  0000               	db	0
   599  0013  0000               	db	0
   600  0014  000F               	db	15
   601  0015  000C               	db	12
   602  0016  0030               	db	48
   603  0017  0000               	db	0
   604  0018  0000               	db	0
   605  0019  0002               	db	2
   606  001A  0004               	db	4
   607  001B  0010               	db	16
   608  001C  0008               	db	8
   609  001D  0020               	db	32
   610  001E  0003               	db	3
   611  001F  0014               	db	20
   612  0020  0050               	db	80
   613  0021  0000               	db	0
   614  0022  0000               	db	0
   615  0023  0000               	db	0
   616  0024  0000               	db	0
   617  0025  0000               	db	0
   618  0026  0000               	db	0
   619  0027  0000               	db	0
   620  0028  0000               	db	0
   621  0029  0000               	db	0
   622  002A  0000               	db	0
   623  002B  0000               	db	0
   624  002C  0000               	db	0
   625  002D  0000               	db	0
   626  002E  0000               	db	0
   627  002F  0000               	db	0
   628  0030  0000               	db	0
   629  0031  0000               	db	0
   630  0032  0000               	db	0
   631  0033  0000               	db	0
   632  0034  0000               	db	0
   633  0035  0000               	db	0
   634  0036  0000               	db	0
   635  0037  0000               	db	0
   636  0038  0000               	db	0
   637  0039  0000               	db	0
   638  003A  0000               	db	0
   639  003B  0000               	db	0
   640  003C  0000               	db	0
   641  003D  0000               	db	0
   642  003E  0000               	db	0
   643  003F  0000               	db	0
   644  0040  0000               	db	0
   645  0041  0000               	db	0
   646  0042  0000               	db	0
   647  0043  0000               	db	0
   648  0044  0000               	db	0
   649  0045  0000               	db	0
   650  0046  0000               	db	0
   651  0047  0000               	db	0
   652  0048  0000               	db	0
   653  0049  0000               	db	0
   654  004A  0000               	db	0
   655  004B  0000               	db	0
   656  004C  0000               	db	0
   657  004D  0000               	db	0
   658  004E  0000               	db	0
   659  004F  0000               	db	0
   660  0050  0000               	db	0
   661  0051  0000               	db	0
   662  0052  0000               	db	0
   663  0053  0000               	db	0
   664  0054  0000               	db	0
   665  0055  0000               	db	0
   666  0056  0000               	db	0
   667  0057  0000               	db	0
   668  0058  0000               	db	0
   669  0059  0000               	db	0
   670  005A  0000               	db	0
   671  005B  0000               	db	0
   672  005C  0000               	db	0
   673  005D  0000               	db	0
   674  005E  0000               	db	0
   675  005F  0000               	db	0
   676  0060  0000               	db	0
   677  0061  0000               	db	0
   678  0062  0000               	db	0
   679  0063  0000               	db	0
   680  0064  0000               	db	0
   681  0065  0000               	db	0
   682  0066  0000               	db	0
   683  0067  0000               	db	0
   684  0068  0000               	db	0
   685  0069  0000               	db	0
   686  006A  0000               	db	0
   687  006B  0000               	db	0
   688  006C  0000               	db	0
   689  006D  0000               	db	0
   690  006E  0000               	db	0
   691  006F  0000               	db	0
   692  0070  0000               	db	0
   693  0071  0000               	db	0
   694  0072  0000               	db	0
   695  0073  0000               	db	0
   696  0074  0000               	db	0
   697  0075  0000               	db	0
   698  0076  0000               	db	0
   699  0077  0000               	db	0
   700  0078  0000               	db	0
   701  0079  0000               	db	0
   702  007A  0000               	db	0
   703  007B  0000               	db	0
   704  007C  0000               	db	0
   705  007D  0000               	db	0
   706  007E  0000               	db	0
   707  007F  0000               	db	0
   708  0080  0000               	db	0
   709  0081  0000               	db	0
   710  0082  0000               	db	0
   711  0083  0000               	db	0
   712  0084  0000               	db	0
   713  0085  0000               	db	0
   714  0086  0000               	db	0
   715  0087  0000               	db	0
   716  0088  0000               	db	0
   717  0089  0000               	db	0
   718  008A  0000               	db	0
   719  008B  0000               	db	0
   720  008C  0000               	db	0
   721  008D  0000               	db	0
   722  008E  0000               	db	0
   723  008F  0000               	db	0
   724  0090  0000               	db	0
   725  0091  0000               	db	0
   726  0092  0000               	db	0
   727  0093  0000               	db	0
   728  0094  0000               	db	0
   729  0095  0000               	db	0
   730  0096                     _EE_C:	
   731                           ;initializer for _EE_C
   732                           
   733  0096  0001               	db	1
   734  0097  0051               	db	81
   735  0098  007F               	db	127
   736  0099  0001               	db	1
   737  009A  0051               	db	81
   738  009B  007F               	db	127
   739  009C  0001               	db	1
   740  009D  0051               	db	81
   741  009E  007F               	db	127
   742  009F                     _EE_AUDIO:	
   743                           ;initializer for _EE_AUDIO
   744                           
   745  009F  0010               	db	16
   746  00A0  0000               	db	0
   747  00A1  0000               	db	0
   748  00A2  0000               	db	0
   749  00A3                     _EE_STATE_BREAKS:	
   750                           ;initializer for _EE_STATE_BREAKS
   751                           
   752  00A3  0007               	db	7
   753  00A4  0015               	db	21
   754  00A5  001E               	db	30
   755                           
   756                           	psect	strings
   757  0800                     __pstrings:	
   758  0800                     stringtab:	
   759  0800                     __stringtab:	
   760  0800                     stringcode:	
   761                           ;	String table - string pointers are 1 byte each
   762                           
   763  0800                     stringdir:	
   764  0800  3008               	movlw	high stringdir
   765  0801  008A               	movwf	10
   766  0802  0804               	movf	4,w
   767  0803  0A84               	incf	4,f
   768  0804  0782               	addwf	2,f
   769  0805                     __stringbase:	
   770  0805  3400               	retlw	0
   771  0806                     __end_of__stringtab:	
   772  0806                     UART_ReadFromGPS_TO@StartCode:	
   773  0806  3424               	retlw	36
   774  0807  3447               	retlw	71
   775  0808  3450               	retlw	80
   776  0809  3452               	retlw	82
   777  080A  344D               	retlw	77
   778  080B  3443               	retlw	67
   779  080C  342C               	retlw	44
   780  080D                     __end_ofUART_ReadFromGPS_TO@StartCode:	
   781  000E                     _TMR1	set	14
   782  000B                     _INTCONbits	set	11
   783  000C                     _PIR1bits	set	12
   784  0005                     _PORTA	set	5
   785  0006                     _PORTB	set	6
   786  001A                     _RCREG	set	26
   787  0010                     _T1CONbits	set	16
   788  00C4                     _CREN	set	196
   789  0038                     _RC0	set	56
   790  0039                     _RC1	set	57
   791  0065                     _RCIF	set	101
   792  00C7                     _SPEN	set	199
   793  008C                     _PIE1bits	set	140
   794  0099                     _SPBRG	set	153
   795  009A                     _SPBRGH	set	154
   796  0085                     _TRISA	set	133
   797  0086                     _TRISB	set	134
   798  0087                     _TRISC	set	135
   799  04C2                     _BRGH	set	1218
   800  04C4                     _SYNC	set	1220
   801  04C5                     _TXEN	set	1221
   802  010D                     _EEADR	set	269
   803  010C                     _EEDATA	set	268
   804  0188                     _ANSEL	set	392
   805  0189                     _ANSELH	set	393
   806  018C                     _EECON1	set	396
   807  0C3B                     _BRG16	set	3131
   808  0C60                     _RD	set	3168
   809  0C61                     _WR	set	3169
   810                           
   811                           ; #config settings
   812  0000                     
   813                           	psect	cinit
   814  0011                     start_initialization:	
   815  0011                     __initialization:	
   816                           
   817                           ; Initialize objects allocated to BANK3
   818  0011  1683               	bsf	3,5	;RP0=1, select bank3
   819  0012  1703               	bsf	3,6	;RP1=1, select bank3
   820                           
   821                           ;initializer for _PREV_CYCLE_TYPE
   822  0013  3002               	movlw	2
   823  0014  00D4               	movwf	__pdataBANK3& (0+127)
   824                           
   825                           ; Clear objects allocated to BANK3
   826  0015  01D3               	clrf	__pbssBANK3& (0+127)
   827                           
   828                           ; Clear objects allocated to BANK1
   829  0016  1303               	bcf	3,6	;RP1=0, select bank1
   830  0017  01ED               	clrf	__pbssBANK1& (0+127)
   831  0018                     end_of_initialization:	
   832                           ;End of C runtime variable initialization code
   833                           
   834  0018                     __end_of__initialization:	
   835  0018  0183               	clrf	3
   836  0019  120A  118A  2C14   	ljmp	_main	;jump to C main() function
   837                           
   838                           	psect	bssEEDATA
   839  00A6                     __pbssEEDATA:	
   840  00A6                     _EE_C_D:	
   841  00A6  0000               	db	0
   842                           
   843                           	psect	dataEEDATA
   844  0000                     __pdataEEDATA:	
   845                           
   846                           	psect	bssBANK1
   847  00ED                     __pbssBANK1:	
   848  00ED                     _CYCLE_TYPE:	
   849  00ED                     	ds	1
   850                           
   851                           	psect	bssBANK3
   852  01D3                     __pbssBANK3:	
   853  01D3                     _FLAGS:	
   854  01D3                     	ds	1
   855                           
   856                           	psect	dataBANK3
   857  01D4                     __pdataBANK3:	
   858  01D4                     _PREV_CYCLE_TYPE:	
   859  01D4                     	ds	1
   860                           
   861                           	psect	inittext
   862  0B8D                     init_fetch0:	
   863                           ;	Called with low address in FSR and high address in W
   864                           
   865  0B8D  087E               	movf	126,w
   866  0B8E  008A               	movwf	10
   867  0B8F  087F               	movf	127,w
   868  0B90  0082               	movwf	2
   869  0B91                     init_ram0:	
   870                           ;Called with:
   871                           ;	high address of idata address in btemp 
   872                           ;	low address of idata address in btemp+1 
   873                           ;	low address of data in FSR
   874                           ;	high address + 1 of data in btemp-1
   875                           
   876  0B91  238D  120A  158A   	fcall	init_fetch0
   877  0B94  0080               	movwf	0
   878  0B95  0A84               	incf	4,f
   879  0B96  0804               	movf	4,w
   880  0B97  067D               	xorwf	125,w
   881  0B98  1903               	btfsc	3,2
   882  0B99  3400               	retlw	0
   883  0B9A  0AFF               	incf	127,f
   884  0B9B  1903               	btfsc	3,2
   885  0B9C  0AFE               	incf	126,f
   886  0B9D  2B91               	goto	init_ram0
   887                           
   888                           	psect	cstackBANK3
   889  0190                     __pcstackBANK3:	
   890  0190                     trunc@i:	
   891                           
   892                           ; 3 bytes @ 0x0
   893  0190                     	ds	3
   894  0193                     trunc@expon:	
   895                           
   896                           ; 2 bytes @ 0x3
   897  0193                     	ds	2
   898  0195                     ?___ftsub:	
   899  0195                     ___ftsub@f2:	
   900                           ; 3 bytes @ 0x5
   901                           
   902                           
   903                           ; 3 bytes @ 0x5
   904  0195                     	ds	3
   905  0198                     ___ftsub@f1:	
   906                           
   907                           ; 3 bytes @ 0x8
   908  0198                     	ds	3
   909  019B                     round@f:	
   910                           
   911                           ; 3 bytes @ 0xB
   912  019B                     	ds	3
   913  019E                     ?_UART_Init:	
   914  019E                     UART_Init@baudrate:	
   915                           ; 1 bytes @ 0xE
   916                           
   917                           
   918                           ; 4 bytes @ 0xE
   919  019E                     	ds	4
   920  01A2                     _UART_Init$1946:	
   921                           
   922                           ; 3 bytes @ 0x12
   923  01A2                     	ds	3
   924  01A5                     _UART_Init$1947:	
   925                           
   926                           ; 3 bytes @ 0x15
   927  01A5                     	ds	3
   928  01A8                     UART_Init@x:	
   929                           
   930                           ; 2 bytes @ 0x18
   931  01A8                     	ds	2
   932  01AA                     ??_main:	
   933                           
   934                           ; 1 bytes @ 0x1A
   935  01AA                     	ds	12
   936  01B6                     main@GPS_On_Time_Counter:	
   937                           
   938                           ; 2 bytes @ 0x26
   939  01B6                     	ds	2
   940  01B8                     main@TimeSinceTheStartOfCycle:	
   941                           
   942                           ; 4 bytes @ 0x28
   943  01B8                     	ds	4
   944  01BC                     main@TempS:	
   945                           
   946                           ; 4 bytes @ 0x2C
   947  01BC                     	ds	4
   948  01C0                     main@GPS_Non_Sync_Times:	
   949                           
   950                           ; 1 bytes @ 0x30
   951  01C0                     	ds	1
   952  01C1                     main@k:	
   953                           
   954                           ; 2 bytes @ 0x31
   955  01C1                     	ds	2
   956  01C3                     main@StateSecRemaining:	
   957                           
   958                           ; 1 bytes @ 0x33
   959  01C3                     	ds	1
   960  01C4                     main@State2OnOffCounter:	
   961                           
   962                           ; 2 bytes @ 0x34
   963  01C4                     	ds	2
   964  01C6                     main@StateAudioNormalOnOffCounter:	
   965                           
   966                           ; 2 bytes @ 0x36
   967  01C6                     	ds	2
   968  01C8                     main@StateAudioSplOnOffCounter:	
   969                           
   970                           ; 2 bytes @ 0x38
   971  01C8                     	ds	2
   972  01CA                     main@j:	
   973                           
   974                           ; 1 bytes @ 0x3A
   975  01CA                     	ds	1
   976  01CB                     main@OutForThePorts:	
   977                           
   978                           ; 2 bytes @ 0x3B
   979  01CB                     	ds	2
   980  01CD                     main@SecError:	
   981                           
   982                           ; 2 bytes @ 0x3D
   983  01CD                     	ds	2
   984  01CF                     main@DiffInSecond:	
   985                           
   986                           ; 1 bytes @ 0x3F
   987  01CF                     	ds	1
   988  01D0                     main@i:	
   989                           
   990                           ; 1 bytes @ 0x40
   991  01D0                     	ds	1
   992  01D1                     main@l:	
   993                           
   994                           ; 2 bytes @ 0x41
   995  01D1                     	ds	2
   996                           
   997                           	psect	cstackBANK1
   998  00A0                     __pcstackBANK1:	
   999  00A0                     ?_ReadVars:	
  1000  00A0                     ?_GetCumulativePeriodsForStates:	
  1001                           ; 1 bytes @ 0x0
  1002                           
  1003  00A0                     ?_GetCycle:	
  1004                           ; 1 bytes @ 0x0
  1005                           
  1006  00A0                     ?_ResetTimer:	
  1007                           ; 1 bytes @ 0x0
  1008                           
  1009  00A0                     ?_main:	
  1010                           ; 1 bytes @ 0x0
  1011                           
  1012  00A0                     ?_tc_int:	
  1013                           ; 1 bytes @ 0x0
  1014                           
  1015  00A0                     ??_tc_int:	
  1016                           ; 1 bytes @ 0x0
  1017                           
  1018                           
  1019                           ; 1 bytes @ 0x0
  1020  00A0                     	ds	2
  1021  00A2                     ??_eeprom_read:	
  1022  00A2                     ??_GetPrevCycle:	
  1023                           ; 1 bytes @ 0x2
  1024                           
  1025  00A2                     ??_UART_Read_TO:	
  1026                           ; 1 bytes @ 0x2
  1027                           
  1028  00A2                     ??_IsValidGPS:	
  1029                           ; 1 bytes @ 0x2
  1030                           
  1031  00A2                     ??_ResetTimer:	
  1032                           ; 1 bytes @ 0x2
  1033                           
  1034  00A2                     ?___bmul:	
  1035                           ; 1 bytes @ 0x2
  1036                           
  1037  00A2                     ?___lbdiv:	
  1038                           ; 1 bytes @ 0x2
  1039                           
  1040  00A2                     ?_GetAbs:	
  1041                           ; 1 bytes @ 0x2
  1042                           
  1043  00A2                     ?___ftpack:	
  1044                           ; 2 bytes @ 0x2
  1045                           
  1046  00A2                     ?_frexp:	
  1047                           ; 3 bytes @ 0x2
  1048                           
  1049  00A2                     ?___lmul:	
  1050                           ; 3 bytes @ 0x2
  1051                           
  1052  00A2                     ?___almod:	
  1053                           ; 4 bytes @ 0x2
  1054                           
  1055  00A2                     GetPrevCycle@PrevCycle:	
  1056                           ; 4 bytes @ 0x2
  1057                           
  1058  00A2                     UART_Read_TO@TimeOut:	
  1059                           ; 1 bytes @ 0x2
  1060                           
  1061  00A2                     IsValidGPS@Result:	
  1062                           ; 1 bytes @ 0x2
  1063                           
  1064  00A2                     eeprom_read@addr:	
  1065                           ; 1 bytes @ 0x2
  1066                           
  1067  00A2                     ___bmul@multiplicand:	
  1068                           ; 1 bytes @ 0x2
  1069                           
  1070  00A2                     ___lbdiv@divisor:	
  1071                           ; 1 bytes @ 0x2
  1072                           
  1073  00A2                     GetAbs@a:	
  1074                           ; 1 bytes @ 0x2
  1075                           
  1076  00A2                     ___ftpack@arg:	
  1077                           ; 2 bytes @ 0x2
  1078                           
  1079  00A2                     frexp@value:	
  1080                           ; 3 bytes @ 0x2
  1081                           
  1082  00A2                     ___lmul@multiplier:	
  1083                           ; 3 bytes @ 0x2
  1084                           
  1085  00A2                     ___almod@divisor:	
  1086                           ; 4 bytes @ 0x2
  1087                           
  1088                           
  1089                           ; 4 bytes @ 0x2
  1090  00A2                     	ds	1
  1091  00A3                     ?_UART_ReadFromGPS_TO:	
  1092  00A3                     ??___bmul:	
  1093                           ; 1 bytes @ 0x3
  1094                           
  1095  00A3                     ??___lbdiv:	
  1096                           ; 1 bytes @ 0x3
  1097                           
  1098  00A3                     GetPrevCycle@cycle:	
  1099                           ; 1 bytes @ 0x3
  1100                           
  1101  00A3                     UART_ReadFromGPS_TO@TimeOut:	
  1102                           ; 1 bytes @ 0x3
  1103                           
  1104  00A3                     IsValidGPS@GPSData:	
  1105                           ; 1 bytes @ 0x3
  1106                           
  1107  00A3                     ___bmul@product:	
  1108                           ; 1 bytes @ 0x3
  1109                           
  1110  00A3                     ___lbdiv@dividend:	
  1111                           ; 1 bytes @ 0x3
  1112                           
  1113                           
  1114                           ; 1 bytes @ 0x3
  1115  00A3                     	ds	1
  1116  00A4                     ??_GetCumulativePeriodsForStates:	
  1117  00A4                     ??_GetCycle:	
  1118                           ; 1 bytes @ 0x4
  1119                           
  1120  00A4                     ??_GetAbs:	
  1121                           ; 1 bytes @ 0x4
  1122                           
  1123  00A4                     ??_UART_ReadFromGPS_TO:	
  1124                           ; 1 bytes @ 0x4
  1125                           
  1126  00A4                     ___bmul@multiplier:	
  1127                           ; 1 bytes @ 0x4
  1128                           
  1129  00A4                     ___lbdiv@counter:	
  1130                           ; 1 bytes @ 0x4
  1131                           
  1132                           
  1133                           ; 1 bytes @ 0x4
  1134  00A4                     	ds	1
  1135  00A5                     ??_ReadVars:	
  1136  00A5                     ___ftpack@exp:	
  1137                           ; 1 bytes @ 0x5
  1138                           
  1139  00A5                     ___lbdiv@quotient:	
  1140                           ; 1 bytes @ 0x5
  1141                           
  1142  00A5                     frexp@eptr:	
  1143                           ; 1 bytes @ 0x5
  1144                           
  1145  00A5                     UART_ReadFromGPS_TO@i:	
  1146                           ; 1 bytes @ 0x5
  1147                           
  1148                           
  1149                           ; 2 bytes @ 0x5
  1150  00A5                     	ds	1
  1151  00A6                     ??_frexp:	
  1152  00A6                     ___ftpack@sign:	
  1153                           ; 1 bytes @ 0x6
  1154                           
  1155  00A6                     ___lmul@multiplicand:	
  1156                           ; 1 bytes @ 0x6
  1157                           
  1158  00A6                     ___almod@dividend:	
  1159                           ; 4 bytes @ 0x6
  1160                           
  1161                           
  1162                           ; 4 bytes @ 0x6
  1163  00A6                     	ds	1
  1164  00A7                     ??___ftpack:	
  1165  00A7                     UART_ReadFromGPS_TO@Output:	
  1166                           ; 1 bytes @ 0x7
  1167                           
  1168                           
  1169                           ; 1 bytes @ 0x7
  1170  00A7                     	ds	1
  1171  00A8                     GetCumulativePeriodsForStates@j:	
  1172  00A8                     UART_ReadFromGPS_TO@TempChar:	
  1173                           ; 1 bytes @ 0x8
  1174                           
  1175                           
  1176                           ; 1 bytes @ 0x8
  1177  00A8                     	ds	1
  1178  00A9                     GetCumulativePeriodsForStates@i:	
  1179  00A9                     UART_ReadFromGPS_TO@Pos:	
  1180                           ; 1 bytes @ 0x9
  1181                           
  1182                           
  1183                           ; 1 bytes @ 0x9
  1184  00A9                     	ds	1
  1185  00AA                     ?_UART_ReadValidTimeFromGPS_TO:	
  1186  00AA                     ??___lmul:	
  1187                           ; 1 bytes @ 0xA
  1188                           
  1189  00AA                     ??___almod:	
  1190                           ; 1 bytes @ 0xA
  1191                           
  1192  00AA                     ?___altoft:	
  1193                           ; 1 bytes @ 0xA
  1194                           
  1195  00AA                     UART_ReadValidTimeFromGPS_TO@TimeOut:	
  1196                           ; 3 bytes @ 0xA
  1197                           
  1198  00AA                     ___almod@counter:	
  1199                           ; 1 bytes @ 0xA
  1200                           
  1201  00AA                     ___lmul@product:	
  1202                           ; 1 bytes @ 0xA
  1203                           
  1204  00AA                     ___altoft@c:	
  1205                           ; 4 bytes @ 0xA
  1206                           
  1207                           
  1208                           ; 4 bytes @ 0xA
  1209  00AA                     	ds	1
  1210  00AB                     ??_UART_ReadValidTimeFromGPS_TO:	
  1211  00AB                     UART_ReadValidTimeFromGPS_TO@Output:	
  1212                           ; 1 bytes @ 0xB
  1213                           
  1214  00AB                     ___almod@sign:	
  1215                           ; 1 bytes @ 0xB
  1216                           
  1217                           
  1218                           ; 1 bytes @ 0xB
  1219  00AB                     	ds	3
  1220  00AE                     ??___altoft:	
  1221  00AE                     ?_ReadGPSToS:	
  1222                           ; 1 bytes @ 0xE
  1223                           
  1224  00AE                     GetCycle@PrevCycle:	
  1225                           ; 4 bytes @ 0xE
  1226                           
  1227  00AE                     ___altoft@exp:	
  1228                           ; 1 bytes @ 0xE
  1229                           
  1230                           
  1231                           ; 1 bytes @ 0xE
  1232  00AE                     	ds	1
  1233  00AF                     GetCycle@i:	
  1234  00AF                     ___altoft@sign:	
  1235                           ; 1 bytes @ 0xF
  1236                           
  1237                           
  1238                           ; 1 bytes @ 0xF
  1239  00AF                     	ds	1
  1240  00B0                     ?___ftmul:	
  1241  00B0                     ___ftmul@f1:	
  1242                           ; 3 bytes @ 0x10
  1243                           
  1244                           
  1245                           ; 3 bytes @ 0x10
  1246  00B0                     	ds	2
  1247  00B2                     ??_ReadGPSToS:	
  1248                           
  1249                           ; 1 bytes @ 0x12
  1250  00B2                     	ds	1
  1251  00B3                     ___ftmul@f2:	
  1252                           
  1253                           ; 3 bytes @ 0x13
  1254  00B3                     	ds	1
  1255  00B4                     ReadVars@j:	
  1256                           
  1257                           ; 1 bytes @ 0x14
  1258  00B4                     	ds	1
  1259  00B5                     ReadVars@i:	
  1260                           
  1261                           ; 1 bytes @ 0x15
  1262  00B5                     	ds	1
  1263  00B6                     ??___ftmul:	
  1264                           
  1265                           ; 1 bytes @ 0x16
  1266  00B6                     	ds	2
  1267  00B8                     ReadGPSToS@TimeOut:	
  1268                           
  1269                           ; 1 bytes @ 0x18
  1270  00B8                     	ds	1
  1271  00B9                     ___ftmul@exp:	
  1272  00B9                     ReadGPSToS@Output:	
  1273                           ; 1 bytes @ 0x19
  1274                           
  1275                           
  1276                           ; 6 bytes @ 0x19
  1277  00B9                     	ds	1
  1278  00BA                     ___ftmul@f3_as_product:	
  1279                           
  1280                           ; 3 bytes @ 0x1A
  1281  00BA                     	ds	3
  1282  00BD                     ___ftmul@cntr:	
  1283                           
  1284                           ; 1 bytes @ 0x1D
  1285  00BD                     	ds	1
  1286  00BE                     ___ftmul@sign:	
  1287                           
  1288                           ; 1 bytes @ 0x1E
  1289  00BE                     	ds	1
  1290  00BF                     ?___ftdiv:	
  1291  00BF                     ___ftdiv@f2:	
  1292                           ; 3 bytes @ 0x1F
  1293                           
  1294  00BF                     ReadGPSToS@Sec:	
  1295                           ; 3 bytes @ 0x1F
  1296                           
  1297                           
  1298                           ; 4 bytes @ 0x1F
  1299  00BF                     	ds	3
  1300  00C2                     ___ftdiv@f1:	
  1301                           
  1302                           ; 3 bytes @ 0x22
  1303  00C2                     	ds	3
  1304  00C5                     ??___ftdiv:	
  1305                           
  1306                           ; 1 bytes @ 0x25
  1307  00C5                     	ds	3
  1308  00C8                     ___ftdiv@cntr:	
  1309                           
  1310                           ; 1 bytes @ 0x28
  1311  00C8                     	ds	1
  1312  00C9                     ___ftdiv@f3:	
  1313                           
  1314                           ; 3 bytes @ 0x29
  1315  00C9                     	ds	3
  1316  00CC                     ___ftdiv@exp:	
  1317                           
  1318                           ; 1 bytes @ 0x2C
  1319  00CC                     	ds	1
  1320  00CD                     ___ftdiv@sign:	
  1321                           
  1322                           ; 1 bytes @ 0x2D
  1323  00CD                     	ds	1
  1324  00CE                     ?___ftadd:	
  1325  00CE                     ___ftadd@f1:	
  1326                           ; 3 bytes @ 0x2E
  1327                           
  1328                           
  1329                           ; 3 bytes @ 0x2E
  1330  00CE                     	ds	3
  1331  00D1                     ___ftadd@f2:	
  1332                           
  1333                           ; 3 bytes @ 0x31
  1334  00D1                     	ds	3
  1335  00D4                     ??___ftadd:	
  1336                           
  1337                           ; 1 bytes @ 0x34
  1338  00D4                     	ds	3
  1339  00D7                     ___ftadd@sign:	
  1340                           
  1341                           ; 1 bytes @ 0x37
  1342  00D7                     	ds	1
  1343  00D8                     ___ftadd@exp2:	
  1344                           
  1345                           ; 1 bytes @ 0x38
  1346  00D8                     	ds	1
  1347  00D9                     ___ftadd@exp1:	
  1348                           
  1349                           ; 1 bytes @ 0x39
  1350  00D9                     	ds	1
  1351  00DA                     ?___fttol:	
  1352  00DA                     ___fttol@f1:	
  1353                           ; 4 bytes @ 0x3A
  1354                           
  1355                           
  1356                           ; 3 bytes @ 0x3A
  1357  00DA                     	ds	4
  1358  00DE                     ??___fttol:	
  1359                           
  1360                           ; 1 bytes @ 0x3E
  1361  00DE                     	ds	3
  1362  00E1                     ___fttol@sign1:	
  1363                           
  1364                           ; 1 bytes @ 0x41
  1365  00E1                     	ds	1
  1366  00E2                     ___fttol@lval:	
  1367                           
  1368                           ; 4 bytes @ 0x42
  1369  00E2                     	ds	4
  1370  00E6                     ___fttol@exp1:	
  1371                           
  1372                           ; 1 bytes @ 0x46
  1373  00E6                     	ds	1
  1374  00E7                     ?_trunc:	
  1375  00E7                     trunc@x:	
  1376                           ; 3 bytes @ 0x47
  1377                           
  1378                           
  1379                           ; 3 bytes @ 0x47
  1380  00E7                     	ds	3
  1381  00EA                     ??_trunc:	
  1382  00EA                     ??___ftsub:	
  1383                           ; 1 bytes @ 0x4A
  1384                           
  1385  00EA                     ?_round:	
  1386                           ; 1 bytes @ 0x4A
  1387                           
  1388  00EA                     round@x:	
  1389                           ; 3 bytes @ 0x4A
  1390                           
  1391                           
  1392                           ; 3 bytes @ 0x4A
  1393  00EA                     	ds	3
  1394  00ED                     ??_round:	
  1395  00ED                     ??_UART_Init:	
  1396                           ; 1 bytes @ 0x4D
  1397                           
  1398                           
  1399                           	psect	cstackCOMMON
  1400  0000                     __pcstackCOMMON:	
  1401                           ; 1 bytes @ 0x4D
  1402                           
  1403  0000                     ?_eeprom_read:	
  1404  0000                     ?_GetPrevCycle:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0000                     ?_UART_Read_TO:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0000                     ?_IsValidGPS:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413                           
  1414                           	psect	maintext
  1415  0414                     __pmaintext:	
  1416                           ; 1 bytes @ 0x0
  1417 ;;
  1418 ;;Main: autosize = 0, tempsize = 12, incstack = 0, save=0
  1419 ;;
  1420 ;; *************** function _main *****************
  1421 ;; Defined at:
  1422 ;;		line 7 in file "main.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;		None
  1425 ;; Auto vars:     Size  Location     Type
  1426 ;;  TempS           4   44[BANK3 ] long 
  1427 ;;  GPSData         6    0        unsigned char [6]
  1428 ;;  TimeSinceThe    4   40[BANK3 ] long 
  1429 ;;  l               2   65[BANK3 ] unsigned short 
  1430 ;;  OutForThePor    2   59[BANK3 ] unsigned char [2]
  1431 ;;  SecError        2   61[BANK3 ] short 
  1432 ;;  StateAudioSp    2   56[BANK3 ] unsigned short 
  1433 ;;  StateAudioNo    2   54[BANK3 ] unsigned short 
  1434 ;;  State2OnOffC    2   52[BANK3 ] unsigned short 
  1435 ;;  k               2   49[BANK3 ] unsigned short 
  1436 ;;  GPS_On_Time_    2   38[BANK3 ] unsigned short 
  1437 ;;  i               1   64[BANK3 ] unsigned char 
  1438 ;;  DiffInSecond    1   63[BANK3 ] char 
  1439 ;;  j               1   58[BANK3 ] unsigned char 
  1440 ;;  StateSecRema    1   51[BANK3 ] unsigned char 
  1441 ;;  GPS_Non_Sync    1   48[BANK3 ] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : B00/0
  1448 ;;		On exit  : B00/B00
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:      BANK1   BANK3  BANK2l
  1451 ;;      Params:         0       0       0
  1452 ;;      Locals:         0      29       0
  1453 ;;      Temps:          0      12       0
  1454 ;;      Totals:         0      41       0
  1455 ;;Total ram usage:       41 bytes
  1456 ;; Hardware stack levels required when called:    6
  1457 ;; This function calls:
  1458 ;;		_GetAbs
  1459 ;;		_GetCumulativePeriodsForStates
  1460 ;;		_GetCycle
  1461 ;;		_ReadGPSToS
  1462 ;;		_ReadVars
  1463 ;;		_ResetTimer
  1464 ;;		_UART_Init
  1465 ;;		___almod
  1466 ;;		___lbdiv
  1467 ;; This function is called by:
  1468 ;;		Startup code after reset
  1469 ;; This function uses a non-reentrant model
  1470 ;;
  1471                           
  1472                           
  1473                           ;psect for function _main
  1474  0414                     _main:	
  1475                           
  1476                           ;main.c: 12: ResetTimer();
  1477                           
  1478                           ;incstack = 0
  1479                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1480  0414  120A  158A  237E  120A  118A  	fcall	_ResetTimer
  1481                           
  1482                           ;main.c: 13: ANSEL = 0x00;
  1483  0419  1683               	bsf	3,5	;RP0=1, select bank3
  1484  041A  1703               	bsf	3,6	;RP1=1, select bank3
  1485  041B  0188               	clrf	8	;volatile
  1486                           
  1487                           ;main.c: 14: ANSELH = 0x00;
  1488  041C  0189               	clrf	9	;volatile
  1489                           
  1490                           ;main.c: 15: TRISA = 0x00;
  1491  041D  1303               	bcf	3,6	;RP1=0, select bank1
  1492  041E  0185               	clrf	5	;volatile
  1493                           
  1494                           ;main.c: 16: TRISB = 0x00;
  1495  041F  0186               	clrf	6	;volatile
  1496                           
  1497                           ;main.c: 17: TRISC = 0x00;
  1498  0420  0187               	clrf	7	;volatile
  1499                           
  1500                           ;main.c: 20: RC1 = 1;
  1501                           
  1502                           ;main.c: 21: FLAGS.bits.b2 = 1;
  1503  0421  27D7               	fcall	PL36	;call to abstracted procedure
  1504                           
  1505                           ;main.c: 23: ReadVars();
  1506  0422  120A  158A  2421  120A  118A  	fcall	_ReadVars
  1507                           
  1508                           ;main.c: 24: STATE_BREAKS[3-1] = 0;
  1509  0427  1283               	bcf	3,5	;RP0=0, select bank2
  1510  0428  1703               	bsf	3,6	;RP1=1, select bank2
  1511  0429  01E6               	clrf	102	;volatile
  1512                           
  1513                           ;main.c: 25: GetCumulativePeriodsForStates();
  1514  042A  120A  158A  252C  120A  118A  	fcall	_GetCumulativePeriodsForStates
  1515                           
  1516                           ;main.c: 31: S = C[2] + 1 + C_D;
  1517  042F  3001               	movlw	1
  1518  0430  1703               	bsf	3,6	;RP1=1, select bank3
  1519  0431  00AA               	movwf	??_main^(0+384)
  1520  0432  01AB               	clrf	(??_main^(0+384)+1)
  1521  0433  01AC               	clrf	(??_main^(0+384)+2)
  1522  0434  01AD               	clrf	(??_main^(0+384)+3)
  1523  0435  1283               	bcf	3,5	;RP0=0, select bank2
  1524  0436  0854               	movf	84,w	;volatile
  1525  0437  1683               	bsf	3,5	;RP0=1, select bank3
  1526  0438  00AE               	movwf	(??_main+4)^(0+384)
  1527  0439  1283               	bcf	3,5	;RP0=0, select bank2
  1528  043A  0855               	movf	85,w	;volatile
  1529  043B  1683               	bsf	3,5	;RP0=1, select bank3
  1530  043C  00AF               	movwf	((??_main+4)^(0+384)+1)
  1531  043D  1283               	bcf	3,5	;RP0=0, select bank2
  1532  043E  0856               	movf	86,w	;volatile
  1533  043F  1683               	bsf	3,5	;RP0=1, select bank3
  1534  0440  00B0               	movwf	((??_main+4)^(0+384)+2)
  1535  0441  1283               	bcf	3,5	;RP0=0, select bank2
  1536  0442  0857               	movf	87,w	;volatile
  1537  0443  1683               	bsf	3,5	;RP0=1, select bank3
  1538  0444  00B1               	movwf	((??_main+4)^(0+384)+3)
  1539  0445  1283               	bcf	3,5	;RP0=0, select bank2
  1540  0446  086F               	movf	111,w	;volatile
  1541  0447  1683               	bsf	3,5	;RP0=1, select bank3
  1542  0448  00B2               	movwf	(??_main+8)^(0+384)
  1543  0449  3000               	movlw	0
  1544  044A  1BB2               	btfsc	(??_main+8)^(0+384),7
  1545  044B  30FF               	movlw	255
  1546  044C  00B3               	movwf	((??_main+8)^(0+384)+1)
  1547  044D  00B4               	movwf	((??_main+8)^(0+384)+2)
  1548  044E  00B5               	movwf	((??_main+8)^(0+384)+3)
  1549  044F  0832               	movf	(??_main+8)^(0+384),w
  1550  0450  07AE               	addwf	(??_main+4)^(0+384),f
  1551  0451  0833               	movf	(??_main+9)^(0+384),w
  1552  0452  1803               	skipnc
  1553  0453  0F33               	incfsz	(??_main+9)^(0+384),w
  1554  0454  07AF               	addwf	((??_main+4)^(0+384)+1),f
  1555  0455  0834               	movf	(??_main+10)^(0+384),w
  1556  0456  1803               	skipnc
  1557  0457  0F34               	incfsz	(??_main+10)^(0+384),w
  1558  0458  07B0               	addwf	((??_main+4)^(0+384)+2),f
  1559  0459  0835               	movf	(??_main+11)^(0+384),w
  1560  045A  1803               	skipnc
  1561  045B  0A35               	incf	(??_main+11)^(0+384),w
  1562  045C  07B1               	addwf	((??_main+4)^(0+384)+3),f
  1563  045D  082E               	movf	(??_main+4)^(0+384),w
  1564  045E  07AA               	addwf	??_main^(0+384),f
  1565  045F  082F               	movf	(??_main+5)^(0+384),w
  1566  0460  1803               	skipnc
  1567  0461  0F2F               	incfsz	(??_main+5)^(0+384),w
  1568  0462  07AB               	addwf	(??_main^(0+384)+1),f
  1569  0463  0830               	movf	(??_main+6)^(0+384),w
  1570  0464  1803               	skipnc
  1571  0465  0F30               	incfsz	(??_main+6)^(0+384),w
  1572  0466  07AC               	addwf	(??_main^(0+384)+2),f
  1573  0467  0831               	movf	(??_main+7)^(0+384),w
  1574  0468  1803               	skipnc
  1575  0469  0A31               	incf	(??_main+7)^(0+384),w
  1576  046A  07AD               	addwf	(??_main^(0+384)+3),f
  1577  046B  082D               	movf	(??_main+3)^(0+384),w
  1578  046C  1283               	bcf	3,5	;RP0=0, select bank2
  1579  046D  00EE               	movwf	110	;volatile
  1580  046E  1683               	bsf	3,5	;RP0=1, select bank3
  1581  046F  082C               	movf	(??_main+2)^(0+384),w
  1582  0470  1283               	bcf	3,5	;RP0=0, select bank2
  1583  0471  00ED               	movwf	109	;volatile
  1584  0472  1683               	bsf	3,5	;RP0=1, select bank3
  1585  0473  082B               	movf	(??_main+1)^(0+384),w
  1586  0474  1283               	bcf	3,5	;RP0=0, select bank2
  1587  0475  00EC               	movwf	108	;volatile
  1588  0476  1683               	bsf	3,5	;RP0=1, select bank3
  1589  0477  082A               	movf	??_main^(0+384),w
  1590  0478  1283               	bcf	3,5	;RP0=0, select bank2
  1591  0479  00EB               	movwf	107	;volatile
  1592                           
  1593                           ;main.c: 33: UART_Init(9600);
  1594  047A  1683               	bsf	3,5	;RP0=1, select bank3
  1595  047B  3025               	movlw	37
  1596  047C  01A1               	clrf	(UART_Init@baudrate+3)^(0+384)
  1597  047D  01A0               	clrf	(UART_Init@baudrate+2)^(0+384)
  1598  047E  009F               	movwf	(UART_Init@baudrate+1)^(0+384)
  1599  047F  3080               	movlw	128
  1600  0480  009E               	movwf	UART_Init@baudrate^(0+384)
  1601  0481  120A  118A  201C  120A  118A  	fcall	_UART_Init
  1602                           
  1603                           ;main.c: 41: UINT8 i, j, StateSecRemaining;
  1604                           ;main.c: 42: UINT16 k, l, State2OnOffCounter=0, StateAudioNormalOnOffCounter=0, StateAud
      +                          ioSplOnOffCounter=0;
  1605  0486  1703               	bsf	3,6	;RP1=1, select bank3
  1606  0487  01C4               	clrf	main@State2OnOffCounter^(0+384)
  1607  0488  01C5               	clrf	(main@State2OnOffCounter+1)^(0+384)
  1608  0489  01C6               	clrf	main@StateAudioNormalOnOffCounter^(0+384)
  1609  048A  01C7               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+384)
  1610  048B  01C8               	clrf	main@StateAudioSplOnOffCounter^(0+384)
  1611  048C  01C9               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+384)
  1612                           
  1613                           ;main.c: 43: UINT8 OutForThePorts[2];
  1614                           ;main.c: 44: INT16 SecError;
  1615                           ;main.c: 45: INT32 TimeSinceTheStartOfCycle;
  1616                           ;main.c: 46: INT8 DiffInSecond;
  1617                           ;main.c: 47: UINT16 GPS_On_Time_Counter =0;
  1618  048D  01B6               	clrf	main@GPS_On_Time_Counter^(0+384)
  1619  048E  01B7               	clrf	(main@GPS_On_Time_Counter+1)^(0+384)
  1620                           
  1621                           ;main.c: 48: UINT8 GPS_Non_Sync_Times = 0;
  1622  048F  01C0               	clrf	main@GPS_Non_Sync_Times^(0+384)
  1623  0490                     l2809:	
  1624                           
  1625                           ;main.c: 57: RC0 = 0;
  1626  0490  1283               	bcf	3,5	;RP0=0, select bank0
  1627  0491  1303               	bcf	3,6	;RP1=0, select bank0
  1628  0492  1007               	bcf	7,0	;volatile
  1629                           
  1630                           ;main.c: 111: if (GPS_On_Time_Counter >= (2*60)) {
  1631  0493  3000               	movlw	0
  1632  0494  1683               	bsf	3,5	;RP0=1, select bank3
  1633  0495  1703               	bsf	3,6	;RP1=1, select bank3
  1634  0496  0237               	subwf	(main@GPS_On_Time_Counter+1)^(0+384),w
  1635  0497  3078               	movlw	120
  1636  0498  1903               	skipnz
  1637  0499  0236               	subwf	main@GPS_On_Time_Counter^(0+384),w
  1638  049A  1C03               	skipc
  1639  049B  2CF6               	goto	l2837
  1640                           
  1641                           ;main.c: 112: INT32 TempS;
  1642                           ;main.c: 113: TempS = ReadGPSToS(100);
  1643  049C  3064               	movlw	100
  1644  049D  120A  158A  265D  120A  118A  	fcall	_ReadGPSToS
  1645  04A2  0831               	movf	(?_ReadGPSToS+3)^(0+128),w
  1646  04A3  1703               	bsf	3,6	;RP1=1, select bank3
  1647  04A4  00BF               	movwf	(main@TempS+3)^(0+384)
  1648  04A5  1303               	bcf	3,6	;RP1=0, select bank1
  1649  04A6  0830               	movf	(?_ReadGPSToS+2)^(0+128),w
  1650  04A7  1703               	bsf	3,6	;RP1=1, select bank3
  1651  04A8  00BE               	movwf	(main@TempS+2)^(0+384)
  1652  04A9  1303               	bcf	3,6	;RP1=0, select bank1
  1653  04AA  082F               	movf	(?_ReadGPSToS+1)^(0+128),w
  1654  04AB  1703               	bsf	3,6	;RP1=1, select bank3
  1655  04AC  00BD               	movwf	(main@TempS+1)^(0+384)
  1656  04AD  1303               	bcf	3,6	;RP1=0, select bank1
  1657  04AE  082E               	movf	?_ReadGPSToS^(0+128),w
  1658  04AF  1703               	bsf	3,6	;RP1=1, select bank3
  1659  04B0  00BC               	movwf	main@TempS^(0+384)
  1660                           
  1661                           ;main.c: 114: if(TempS >= 0) {
  1662  04B1  1BBF               	btfsc	(main@TempS+3)^(0+384),7
  1663  04B2  2CDF               	goto	l2827
  1664                           
  1665                           ;main.c: 115: S = TempS + C_D;
  1666  04B3  1283               	bcf	3,5	;RP0=0, select bank2
  1667  04B4  086F               	movf	111,w	;volatile
  1668  04B5  1683               	bsf	3,5	;RP0=1, select bank3
  1669  04B6  073C               	addwf	main@TempS^(0+384),w
  1670  04B7  1283               	bcf	3,5	;RP0=0, select bank2
  1671  04B8  00EB               	movwf	107	;volatile
  1672  04B9  3000               	movlw	0
  1673  04BA  1BEF               	btfsc	111,7	;volatile
  1674  04BB  30FF               	movlw	255
  1675  04BC  00EC               	movwf	108	;volatile
  1676  04BD  00ED               	movwf	109	;volatile
  1677  04BE  00EE               	movwf	110	;volatile
  1678  04BF  1683               	bsf	3,5	;RP0=1, select bank3
  1679  04C0  083D               	movf	(main@TempS+1)^(0+384),w
  1680  04C1  1C03               	skipc
  1681  04C2  2CC6               	goto	u292a1
  1682  04C3  0A3D               	incf	(main@TempS+1)^(0+384),w
  1683  04C4  1903               	skipnz
  1684  04C5  2CC8               	goto	u292b1
  1685  04C6                     u292a1:	
  1686  04C6  1283               	bcf	3,5	;RP0=0, select bank2
  1687  04C7  07EC               	addwf	108,f	;volatile
  1688  04C8                     u292b1:	
  1689  04C8  1683               	bsf	3,5	;RP0=1, select bank3
  1690  04C9  1703               	bsf	3,6	;RP1=1, select bank3
  1691  04CA  083E               	movf	(main@TempS+2)^(0+384),w
  1692  04CB  1C03               	skipc
  1693  04CC  2CD0               	goto	u292a2
  1694  04CD  0A3E               	incf	(main@TempS+2)^(0+384),w
  1695  04CE  1903               	skipnz
  1696  04CF  2CD2               	goto	u292b2
  1697  04D0                     u292a2:	
  1698  04D0  1283               	bcf	3,5	;RP0=0, select bank2
  1699  04D1  07ED               	addwf	109,f	;volatile
  1700  04D2                     u292b2:	
  1701  04D2  1683               	bsf	3,5	;RP0=1, select bank3
  1702  04D3  1703               	bsf	3,6	;RP1=1, select bank3
  1703  04D4  083F               	movf	(main@TempS+3)^(0+384),w
  1704  04D5  1C03               	skipc
  1705  04D6  2CDA               	goto	u292a3
  1706  04D7  0A3F               	incf	(main@TempS+3)^(0+384),w
  1707  04D8  1903               	skipnz
  1708  04D9  2CDC               	goto	l2819
  1709  04DA                     u292a3:	
  1710  04DA  1283               	bcf	3,5	;RP0=0, select bank2
  1711  04DB  07EE               	addwf	110,f	;volatile
  1712  04DC                     l2819:	
  1713                           
  1714                           ;main.c: 116: GPS_On_Time_Counter = 0;
  1715  04DC  1683               	bsf	3,5	;RP0=1, select bank3
  1716  04DD  1703               	bsf	3,6	;RP1=1, select bank3
  1717  04DE  2CED               	goto	l2831
  1718  04DF                     l2827:	
  1719                           ;main.c: 120: }
  1720                           
  1721                           ;main.c: 119: GPS_Non_Sync_Times = 0;
  1722                           
  1723                           ;main.c: 118: FLAGS.bits.b2 = 0;
  1724                           
  1725                           ;main.c: 117: RC1 = 0;
  1726                           
  1727                           
  1728                           ;main.c: 121: else {
  1729                           ;main.c: 122: S++;
  1730  04DF  1283               	bcf	3,5	;RP0=0, select bank2
  1731  04E0  0AEB               	incf	107,f	;volatile
  1732  04E1  1903               	skipnz
  1733  04E2  0AEC               	incf	108,f	;volatile
  1734  04E3  1903               	skipnz
  1735  04E4  0AED               	incf	109,f	;volatile
  1736  04E5  1903               	skipnz
  1737  04E6  0AEE               	incf	110,f	;volatile
  1738                           
  1739                           ;main.c: 123: GPS_Non_Sync_Times++;
  1740  04E7  1683               	bsf	3,5	;RP0=1, select bank3
  1741  04E8  3003               	movlw	3
  1742  04E9  0AC0               	incf	main@GPS_Non_Sync_Times^(0+384),f
  1743                           
  1744                           ;main.c: 124: if (GPS_Non_Sync_Times >= (3)) {
  1745  04EA  0240               	subwf	main@GPS_Non_Sync_Times^(0+384),w
  1746  04EB  1C03               	skipc
  1747  04EC  2CF6               	goto	l2837
  1748  04ED                     l2831:	
  1749                           
  1750                           ;main.c: 125: GPS_On_Time_Counter = 0;
  1751  04ED  01B6               	clrf	main@GPS_On_Time_Counter^(0+384)
  1752  04EE  01B7               	clrf	(main@GPS_On_Time_Counter+1)^(0+384)
  1753                           
  1754                           ;main.c: 126: RC1 = 0;
  1755  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  1756  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  1757  04F1  1087               	bcf	7,1	;volatile
  1758                           
  1759                           ;main.c: 127: FLAGS.bits.b2 = 0;
  1760  04F2  1683               	bsf	3,5	;RP0=1, select bank3
  1761  04F3  1703               	bsf	3,6	;RP1=1, select bank3
  1762  04F4  1153               	bcf	_FLAGS^(0+384),2	;volatile
  1763                           
  1764                           ;main.c: 128: GPS_Non_Sync_Times = 0;
  1765  04F5  01C0               	clrf	main@GPS_Non_Sync_Times^(0+384)
  1766  04F6                     l2837:	
  1767                           
  1768                           ;main.c: 129: }
  1769                           ;main.c: 130: }
  1770                           ;main.c: 131: }
  1771                           ;main.c: 134: if (S >= 86400)
  1772  04F6  1283               	bcf	3,5	;RP0=0, select bank2
  1773  04F7  1BEE               	btfsc	110,7	;volatile
  1774  04F8  2D15               	goto	l2841
  1775  04F9  086E               	movf	110,w	;volatile
  1776  04FA  1D03               	btfss	3,2
  1777  04FB  2D08               	goto	l2839
  1778  04FC  3001               	movlw	1
  1779  04FD  026D               	subwf	109,w	;volatile
  1780  04FE  1D03               	skipz
  1781  04FF  2D06               	goto	u2943
  1782  0500  3051               	movlw	81
  1783  0501  026C               	subwf	108,w	;volatile
  1784  0502  1D03               	skipz
  1785  0503  2D06               	goto	u2943
  1786  0504  3080               	movlw	128
  1787  0505  026B               	subwf	107,w	;volatile
  1788  0506                     u2943:	
  1789  0506  1C03               	btfss	3,0
  1790  0507  2D15               	goto	l2841
  1791  0508                     l2839:	
  1792                           
  1793                           ;main.c: 135: S -= 86400;
  1794  0508  3080               	movlw	128
  1795  0509  07EB               	addwf	107,f	;volatile
  1796  050A  30AE               	movlw	174
  1797  050B  1803               	skipnc
  1798  050C  30AF               	movlw	175
  1799  050D  07EC               	addwf	108,f	;volatile
  1800  050E  30FE               	movlw	254
  1801  050F  1803               	skipnc
  1802  0510  30FF               	movlw	255
  1803  0511  07ED               	addwf	109,f	;volatile
  1804  0512  30FF               	movlw	255
  1805  0513  1C03               	skipc
  1806  0514  07EE               	addwf	110,f	;volatile
  1807  0515                     l2841:	
  1808                           
  1809                           ;main.c: 136: GetCycle();
  1810  0515  120A  158A  2572  120A  118A  	fcall	_GetCycle
  1811                           
  1812                           ;main.c: 137: if (C[PREV_CYCLE_TYPE] < C[CYCLE_TYPE])
  1813  051A  1303               	bcf	3,6	;RP1=0, select bank1
  1814  051B  086D               	movf	_CYCLE_TYPE^(0+128),w	;volatile
  1815  051C  1703               	bsf	3,6	;RP1=1, select bank3
  1816  051D  00AA               	movwf	??_main^(0+384)
  1817  051E  3001               	movlw	1
  1818  051F  1003               	clrc
  1819  0520                     L1:	
  1820  0520  0DAA               	rlf	??_main^(0+384),f
  1821  0521  3EFF               	addlw	-1
  1822  0522  1003               	clrc
  1823  0523  1D03               	skipz
  1824  0524  2D20               	goto	L1
  1825  0525  0D2A               	rlf	??_main^(0+384),w
  1826  0526  3E4C               	addlw	76
  1827  0527  0084               	movwf	4
  1828  0528  1783               	bsf	3,7	;select IRP bank2
  1829  0529  0800               	movf	0,w
  1830  052A  00AB               	movwf	(??_main+1)^(0+384)
  1831  052B  0A84               	incf	4,f
  1832  052C  0800               	movf	0,w
  1833  052D  00AC               	movwf	((??_main+1)^(0+384)+1)
  1834  052E  0A84               	incf	4,f
  1835  052F  0800               	movf	0,w
  1836  0530  00AD               	movwf	((??_main+1)^(0+384)+2)
  1837  0531  0A84               	incf	4,f
  1838  0532  0800               	movf	0,w
  1839  0533  00AE               	movwf	((??_main+1)^(0+384)+3)
  1840  0534  0854               	movf	_PREV_CYCLE_TYPE^(0+384),w	;volatile
  1841  0535  00AF               	movwf	(??_main+5)^(0+384)
  1842  0536  3001               	movlw	1
  1843  0537  1003               	clrc
  1844  0538                     L2:	
  1845  0538  0DAF               	rlf	(??_main+5)^(0+384),f
  1846  0539  3EFF               	addlw	-1
  1847  053A  1003               	clrc
  1848  053B  1D03               	skipz
  1849  053C  2D38               	goto	L2
  1850  053D  0D2F               	rlf	(??_main+5)^(0+384),w
  1851  053E  3E4C               	addlw	76
  1852  053F  0084               	movwf	4
  1853  0540  0800               	movf	0,w
  1854  0541  00B0               	movwf	(??_main+6)^(0+384)
  1855  0542  0A84               	incf	4,f
  1856  0543  0800               	movf	0,w
  1857  0544  00B1               	movwf	((??_main+6)^(0+384)+1)
  1858  0545  0A84               	incf	4,f
  1859  0546  0800               	movf	0,w
  1860  0547  00B2               	movwf	((??_main+6)^(0+384)+2)
  1861  0548  0A84               	incf	4,f
  1862  0549  0800               	movf	0,w
  1863  054A  00B3               	movwf	((??_main+6)^(0+384)+3)
  1864  054B  0833               	movf	(??_main+9)^(0+384),w
  1865  054C  3A80               	xorlw	128
  1866  054D  00FF               	movwf	127
  1867  054E  082E               	movf	(??_main+4)^(0+384),w
  1868  054F  3A80               	xorlw	128
  1869  0550  027F               	subwf	127,w
  1870  0551  1D03               	skipz
  1871  0552  2D5D               	goto	u2973
  1872  0553  082D               	movf	(??_main+3)^(0+384),w
  1873  0554  0232               	subwf	(??_main+8)^(0+384),w
  1874  0555  1D03               	skipz
  1875  0556  2D5D               	goto	u2973
  1876  0557  082C               	movf	(??_main+2)^(0+384),w
  1877  0558  0231               	subwf	(??_main+7)^(0+384),w
  1878  0559  1D03               	skipz
  1879  055A  2D5D               	goto	u2973
  1880  055B  082B               	movf	(??_main+1)^(0+384),w
  1881  055C  0230               	subwf	(??_main+6)^(0+384),w
  1882  055D                     u2973:	
  1883  055D  1803               	skipnc
  1884  055E  2D66               	goto	l2849
  1885                           
  1886                           ;main.c: 138: TimeSinceTheStartOfCycle = S - C[PREV_CYCLE_TYPE];
  1887  055F  2759  120A  118A   	fcall	PL2	;call to abstracted procedure
  1888  0562  1C03               	skipc
  1889  0563  0F2E               	incfsz	(??_main+4)^(0+384),w
  1890  0564  02BB               	subwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  1891  0565  2D7A               	goto	l2855
  1892  0566                     l2849:	
  1893                           
  1894                           ;main.c: 139: else
  1895                           ;main.c: 140: TimeSinceTheStartOfCycle = S + (86400 - C[PREV_CYCLE_TYPE]);
  1896  0566  2759  120A  118A   	fcall	PL2	;call to abstracted procedure
  1897  0569  1C03               	skipc
  1898  056A  0F2E               	incfsz	(??_main+4)^(0+384),w
  1899  056B  02BB               	subwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  1900  056C  3080               	movlw	128
  1901  056D  07B8               	addwf	main@TimeSinceTheStartOfCycle^(0+384),f
  1902  056E  3051               	movlw	81
  1903  056F  1803               	skipnc
  1904  0570  3052               	movlw	82
  1905  0571  07B9               	addwf	(main@TimeSinceTheStartOfCycle+1)^(0+384),f
  1906  0572  3001               	movlw	1
  1907  0573  1803               	skipnc
  1908  0574  3002               	movlw	2
  1909  0575  07BA               	addwf	(main@TimeSinceTheStartOfCycle+2)^(0+384),f
  1910  0576  3000               	movlw	0
  1911  0577  1803               	skipnc
  1912  0578  3001               	movlw	1
  1913  0579  07BB               	addwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  1914  057A                     l2855:	
  1915                           
  1916                           ;main.c: 141: SecError = TimeSinceTheStartOfCycle%STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  1917  057A  27BB               	fcall	PL14	;call to abstracted procedure
  1918  057B  082A               	movf	??_main^(0+384),w
  1919  057C  1303               	bcf	3,6	;RP1=0, select bank1
  1920  057D  00A2               	movwf	___almod@divisor^(0+128)
  1921  057E  1703               	bsf	3,6	;RP1=1, select bank3
  1922  057F  082B               	movf	(??_main+1)^(0+384),w
  1923  0580  1303               	bcf	3,6	;RP1=0, select bank1
  1924  0581  00A3               	movwf	(___almod@divisor^(0+128)+1)
  1925  0582  01A4               	clrf	(___almod@divisor^(0+128)+2)
  1926  0583  01A5               	clrf	(___almod@divisor^(0+128)+3)
  1927  0584  1703               	bsf	3,6	;RP1=1, select bank3
  1928  0585  083B               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+384),w
  1929  0586  1303               	bcf	3,6	;RP1=0, select bank1
  1930  0587  00A9               	movwf	(___almod@dividend+3)^(0+128)
  1931  0588  1703               	bsf	3,6	;RP1=1, select bank3
  1932  0589  083A               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+384),w
  1933  058A  1303               	bcf	3,6	;RP1=0, select bank1
  1934  058B  00A8               	movwf	(___almod@dividend+2)^(0+128)
  1935  058C  1703               	bsf	3,6	;RP1=1, select bank3
  1936  058D  0839               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+384),w
  1937  058E  1303               	bcf	3,6	;RP1=0, select bank1
  1938  058F  00A7               	movwf	(___almod@dividend+1)^(0+128)
  1939  0590  1703               	bsf	3,6	;RP1=1, select bank3
  1940  0591  0838               	movf	main@TimeSinceTheStartOfCycle^(0+384),w
  1941  0592  1303               	bcf	3,6	;RP1=0, select bank1
  1942  0593  00A6               	movwf	___almod@dividend^(0+128)
  1943  0594  120A  158A  23B8  120A  118A  	fcall	___almod
  1944  0599  0823               	movf	(?___almod^(0+128)+1),w
  1945  059A  1703               	bsf	3,6	;RP1=1, select bank3
  1946  059B  00CE               	movwf	(main@SecError+1)^(0+384)
  1947  059C  1303               	bcf	3,6	;RP1=0, select bank1
  1948  059D  0822               	movf	?___almod^(0+128),w
  1949  059E  1703               	bsf	3,6	;RP1=1, select bank3
  1950  059F  00CD               	movwf	main@SecError^(0+384)
  1951                           
  1952                           ;main.c: 142: (CYCLE_TYPE==0) ? (i = 0) : (i = STATE_BREAKS[CYCLE_TYPE-1]);
  1953  05A0  1303               	bcf	3,6	;RP1=0, select bank1
  1954  05A1  086D               	movf	_CYCLE_TYPE^(0+128),w	;volatile
  1955  05A2  1D03               	btfss	3,2
  1956  05A3  2DA7               	goto	l2861
  1957  05A4  1703               	bsf	3,6	;RP1=1, select bank3
  1958  05A5  01D0               	clrf	main@i^(0+384)
  1959  05A6  2DAE               	goto	l702
  1960  05A7                     l2861:	
  1961  05A7  086D               	movf	_CYCLE_TYPE^(0+128),w
  1962  05A8  3E63               	addlw	99
  1963  05A9  0084               	movwf	4
  1964  05AA  1783               	bsf	3,7	;select IRP bank2
  1965  05AB  0800               	movf	0,w
  1966  05AC  1703               	bsf	3,6	;RP1=1, select bank3
  1967  05AD  00D0               	movwf	main@i^(0+384)
  1968  05AE                     l702:	
  1969                           
  1970                           ;main.c: 143: if (SecError > (STATE_CUMULATIVE_PERIODS[CYCLE_TYPE]/2))
  1971  05AE  27BB  120A  118A   	fcall	PL14	;call to abstracted procedure
  1972  05B1  1003               	clrc
  1973  05B2  0CAB               	rrf	(??_main^(0+384)+1),f
  1974  05B3  0CAA               	rrf	??_main^(0+384),f
  1975  05B4  084E               	movf	(main@SecError+1)^(0+384),w
  1976  05B5  022B               	subwf	(??_main+1)^(0+384),w
  1977  05B6  1D03               	skipz
  1978  05B7  2DBA               	goto	u3035
  1979  05B8  084D               	movf	main@SecError^(0+384),w
  1980  05B9  022A               	subwf	??_main^(0+384),w
  1981  05BA                     u3035:	
  1982  05BA  1803               	skipnc
  1983  05BB  2DCD               	goto	l2977
  1984                           
  1985                           ;main.c: 144: SecError -= STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  1986  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  1987  05BD  1003               	clrc
  1988  05BE  0D6D               	rlf	_CYCLE_TYPE^(0+128),w	;volatile
  1989  05BF  3E7A               	addlw	122
  1990  05C0  0084               	movwf	4
  1991  05C1  0800               	movf	0,w
  1992  05C2  1703               	bsf	3,6	;RP1=1, select bank3
  1993  05C3  00AA               	movwf	??_main^(0+384)
  1994  05C4  0A84               	incf	4,f
  1995  05C5  0800               	movf	0,w
  1996  05C6  00AB               	movwf	(??_main^(0+384)+1)
  1997  05C7  082A               	movf	??_main^(0+384),w
  1998  05C8  02CD               	subwf	main@SecError^(0+384),f
  1999  05C9  082B               	movf	(??_main+1)^(0+384),w
  2000  05CA  1C03               	skipc
  2001  05CB  03CE               	decf	(main@SecError+1)^(0+384),f
  2002  05CC  02CE               	subwf	(main@SecError+1)^(0+384),f
  2003  05CD                     l2977:	
  2004  05CD  1303               	bcf	3,6	;RP1=0, select bank1
  2005  05CE  086D               	movf	_CYCLE_TYPE^(0+128),w
  2006  05CF  3E64               	addlw	100
  2007  05D0  0084               	movwf	4
  2008  05D1  1783               	bsf	3,7	;select IRP bank2
  2009  05D2  0800               	movf	0,w
  2010  05D3  1703               	bsf	3,6	;RP1=1, select bank3
  2011  05D4  0250               	subwf	main@i^(0+384),w
  2012  05D5  1803               	btfsc	3,0
  2013  05D6  2C90               	goto	l2809
  2014                           
  2015                           ;main.c: 146: DiffInSecond = 0;
  2016  05D7  01CF               	clrf	main@DiffInSecond^(0+384)
  2017                           
  2018                           ;main.c: 147: for (j=0; j<(STATE_PERIODS[i] + DiffInSecond); j++) {
  2019  05D8  01CA               	clrf	main@j^(0+384)
  2020  05D9                     l2973:	
  2021  05D9  0850               	movf	main@i^(0+384),w
  2022  05DA  3E20               	addlw	32
  2023  05DB  0084               	movwf	4
  2024  05DC  1383               	bcf	3,7	;select IRP bank0
  2025  05DD  0800               	movf	0,w
  2026  05DE  074F               	addwf	main@DiffInSecond^(0+384),w
  2027  05DF  00AA               	movwf	??_main^(0+384)
  2028  05E0  01AB               	clrf	(??_main+1)^(0+384)
  2029  05E1  1803               	skipnc
  2030  05E2  0AAB               	incf	(??_main^(0+384)+1),f
  2031  05E3  1BCF               	btfsc	main@DiffInSecond^(0+384),7
  2032  05E4  03AB               	decf	(??_main^(0+384)+1),f
  2033  05E5  1683               	bsf	3,5	;RP0=1, select bank3
  2034  05E6  1703               	bsf	3,6	;RP1=1, select bank3
  2035  05E7  082B               	movf	(??_main+1)^(0+384),w
  2036  05E8  3A80               	xorlw	128
  2037  05E9  3C80               	sublw	128
  2038  05EA  1D03               	skipz
  2039  05EB  2DEE               	goto	u3275
  2040  05EC  082A               	movf	??_main^(0+384),w
  2041  05ED  024A               	subwf	main@j^(0+384),w
  2042  05EE                     u3275:	
  2043  05EE  1803               	btfsc	3,0
  2044  05EF  2F55               	goto	l2975
  2045                           
  2046                           ;main.c: 148: StateSecRemaining = (STATE_PERIODS[i] + DiffInSecond)-j;
  2047  05F0  1683               	bsf	3,5	;RP0=1, select bank3
  2048  05F1  27D0  120A  118A   	fcall	PL28	;call to abstracted procedure
  2049  05F4  00AA               	movwf	??_main^(0+384)
  2050  05F5  084A               	movf	main@j^(0+384),w
  2051  05F6  02AA               	subwf	??_main^(0+384),f
  2052  05F7  084F               	movf	main@DiffInSecond^(0+384),w
  2053  05F8  072A               	addwf	??_main^(0+384),w
  2054  05F9  00C3               	movwf	main@StateSecRemaining^(0+384)
  2055                           
  2056                           ;main.c: 149: for (k=0; k<1000; k++) {
  2057  05FA  01C1               	clrf	main@k^(0+384)
  2058  05FB  01C2               	clrf	(main@k+1)^(0+384)
  2059  05FC                     l2871:	
  2060  05FC  3003               	movlw	3
  2061  05FD  0242               	subwf	(main@k+1)^(0+384),w
  2062  05FE  30E8               	movlw	232
  2063  05FF  1903               	skipnz
  2064  0600  0241               	subwf	main@k^(0+384),w
  2065  0601  1803               	btfsc	3,0
  2066  0602  2EB8               	goto	l2951
  2067                           
  2068                           ;main.c: 150: for (l=0; l<2; l++)
  2069  0603  01D1               	clrf	main@l^(0+384)
  2070  0604  01D2               	clrf	(main@l+1)^(0+384)
  2071  0605                     l2877:	
  2072  0605  3000               	movlw	0
  2073  0606  0252               	subwf	(main@l+1)^(0+384),w
  2074  0607  3002               	movlw	2
  2075  0608  1903               	skipnz
  2076  0609  0251               	subwf	main@l^(0+384),w
  2077  060A  1803               	btfsc	3,0
  2078  060B  2E24               	goto	l2887
  2079                           
  2080                           ;main.c: 151: OutForThePorts[l] = STATE_1[i][l];
  2081  060C  0850               	movf	main@i^(0+384),w
  2082  060D  00AA               	movwf	??_main^(0+384)
  2083  060E  303E               	movlw	62
  2084  060F  1003               	clrc
  2085  0610  0DAA               	rlf	??_main^(0+384),f
  2086  0611  072A               	addwf	??_main^(0+384),w
  2087  0612  00AB               	movwf	(??_main+1)^(0+384)
  2088  0613  0851               	movf	main@l^(0+384),w
  2089  0614  072B               	addwf	(??_main+1)^(0+384),w
  2090  0615  00AC               	movwf	(??_main+2)^(0+384)
  2091  0616  0084               	movwf	4
  2092  0617  1383               	bcf	3,7	;select IRP bank0
  2093  0618  0800               	movf	0,w
  2094  0619  00AD               	movwf	(??_main+3)^(0+384)
  2095  061A  0851               	movf	main@l^(0+384),w
  2096  061B  3ECB               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2097  061C  0084               	movwf	4
  2098  061D  082D               	movf	(??_main+3)^(0+384),w
  2099  061E  1783               	bsf	3,7	;select IRP bank3
  2100  061F  0080               	movwf	0
  2101  0620  0AD1               	incf	main@l^(0+384),f
  2102  0621  1903               	skipnz
  2103  0622  0AD2               	incf	(main@l+1)^(0+384),f
  2104  0623  2E05               	goto	l2877
  2105  0624                     l2887:	
  2106                           
  2107                           ;main.c: 152: if (StateSecRemaining <= 4) {
  2108  0624  3005               	movlw	5
  2109  0625  0243               	subwf	main@StateSecRemaining^(0+384),w
  2110  0626  1803               	skipnc
  2111  0627  2E3E               	goto	l2903
  2112                           
  2113                           ;main.c: 153: if (State2OnOffCounter < 700) {
  2114  0628  3002               	movlw	2
  2115  0629  0245               	subwf	(main@State2OnOffCounter+1)^(0+384),w
  2116  062A  30BC               	movlw	188
  2117  062B  1903               	skipnz
  2118  062C  0244               	subwf	main@State2OnOffCounter^(0+384),w
  2119  062D  1803               	skipnc
  2120  062E  2E4D               	goto	l2915
  2121                           
  2122                           ;main.c: 154: for (l=0; l<2; l++)
  2123  062F  01D1               	clrf	main@l^(0+384)
  2124  0630  01D2               	clrf	(main@l+1)^(0+384)
  2125  0631                     l2893:	
  2126  0631  3000               	movlw	0
  2127  0632  0252               	subwf	(main@l+1)^(0+384),w
  2128  0633  3002               	movlw	2
  2129  0634  1903               	skipnz
  2130  0635  0251               	subwf	main@l^(0+384),w
  2131  0636  1803               	btfsc	3,0
  2132  0637  2E4D               	goto	l2915
  2133                           
  2134                           ;main.c: 155: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2135  0638  278C  120A  118A   	fcall	PL10	;call to abstracted procedure
  2136  063B  1903               	skipnz
  2137  063C  0AD2               	incf	(main@l+1)^(0+384),f
  2138  063D  2E31               	goto	l2893
  2139  063E                     l2903:	
  2140                           
  2141                           ;main.c: 158: for (l=0; l<2; l++)
  2142  063E  01D1               	clrf	main@l^(0+384)
  2143  063F  01D2               	clrf	(main@l+1)^(0+384)
  2144  0640                     l2905:	
  2145  0640  3000               	movlw	0
  2146  0641  0252               	subwf	(main@l+1)^(0+384),w
  2147  0642  3002               	movlw	2
  2148  0643  1903               	skipnz
  2149  0644  0251               	subwf	main@l^(0+384),w
  2150  0645  1803               	btfsc	3,0
  2151  0646  2E4D               	goto	l2915
  2152                           
  2153                           ;main.c: 159: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2154  0647  278C  120A  118A   	fcall	PL10	;call to abstracted procedure
  2155  064A  1903               	skipnz
  2156  064B  0AD2               	incf	(main@l+1)^(0+384),f
  2157  064C  2E40               	goto	l2905
  2158  064D                     l2915:	
  2159                           
  2160                           ;main.c: 161: }
  2161                           ;main.c: 162: if (StateSecRemaining > 5) {
  2162  064D  3006               	movlw	6
  2163  064E  0243               	subwf	main@StateSecRemaining^(0+384),w
  2164                           
  2165                           ;main.c: 163: if ((StateAudioNormalOnOffCounter) < 80) {
  2166  064F  3000               	movlw	0
  2167  0650  1C03               	skipc
  2168  0651  2E6C               	goto	L6
  2169  0652  0247               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+384),w
  2170  0653  3050               	movlw	80
  2171  0654  1903               	skipnz
  2172  0655  0246               	subwf	main@StateAudioNormalOnOffCounter^(0+384),w
  2173  0656  1803               	skipnc
  2174  0657  2E68               	goto	l721
  2175                           
  2176                           ;main.c: 164: if ((AUDIO.v[i/8]) & (0x80>>(i%8)))
  2177  0658  27A7  120A  118A   	fcall	PL12	;call to abstracted procedure
  2178  065B  2E5F               	goto	u3124
  2179  065C                     u3125:	
  2180  065C  0D2D               	rlf	((??_main+2)^(0+384)+1),w
  2181  065D  0CAD               	rrf	((??_main+2)^(0+384)+1),f
  2182  065E  0CAC               	rrf	(??_main+2)^(0+384),f
  2183  065F                     u3124:	
  2184  065F  0BAB               	decfsz	(??_main+1)^(0+384),f
  2185  0660  2E5C               	goto	u3125
  2186  0661                     L5:	
  2187  0661  1683               	bsf	3,5	;RP0=1, select bank3
  2188  0662  1703               	bsf	3,6	;RP1=1, select bank3
  2189  0663  082C               	movf	(??_main+2)^(0+384),w
  2190  0664  1783               	bsf	3,7	;select IRP bank2
  2191  0665  0500               	andwf	0,w
  2192  0666  1D03               	btfss	3,2
  2193  0667  2E7C               	goto	l2921
  2194  0668                     l721:	
  2195                           
  2196                           ;main.c: 166: else
  2197                           ;main.c: 167: RC0 = 0;
  2198  0668  1283               	bcf	3,5	;RP0=0, select bank0
  2199  0669  1303               	bcf	3,6	;RP1=0, select bank0
  2200  066A  1007               	bcf	7,0	;volatile
  2201  066B  2E7F               	goto	l2929
  2202  066C                     L6:	
  2203                           ;main.c: 171: if ((StateAudioSplOnOffCounter) < 80) {
  2204                           
  2205  066C  0249               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+384),w
  2206  066D  3050               	movlw	80
  2207  066E  1903               	skipnz
  2208  066F  0248               	subwf	main@StateAudioSplOnOffCounter^(0+384),w
  2209  0670  1803               	skipnc
  2210  0671  2E68               	goto	l721
  2211                           
  2212                           ;main.c: 172: if ((AUDIO.v[i/8]) & (0x80>>(i%8)))
  2213  0672  27A7  120A  118A   	fcall	PL12	;call to abstracted procedure
  2214  0675  2E79               	goto	u3154
  2215  0676                     u3155:	
  2216  0676  0D2D               	rlf	((??_main+2)^(0+384)+1),w
  2217  0677  0CAD               	rrf	((??_main+2)^(0+384)+1),f
  2218  0678  0CAC               	rrf	(??_main+2)^(0+384),f
  2219  0679                     u3154:	
  2220  0679  0BAB               	decfsz	(??_main+1)^(0+384),f
  2221  067A  2E76               	goto	u3155
  2222  067B  2E61               	goto	L5
  2223  067C                     l2921:	
  2224                           
  2225                           ;main.c: 165: RC0 = 1;
  2226  067C  1283               	bcf	3,5	;RP0=0, select bank0
  2227  067D  1303               	bcf	3,6	;RP1=0, select bank0
  2228  067E  1407               	bsf	7,0	;volatile
  2229  067F                     l2929:	
  2230                           
  2231                           ;main.c: 178: }
  2232                           ;main.c: 179: State2OnOffCounter++;
  2233  067F  1683               	bsf	3,5	;RP0=1, select bank3
  2234  0680  1703               	bsf	3,6	;RP1=1, select bank3
  2235  0681  0AC4               	incf	main@State2OnOffCounter^(0+384),f
  2236  0682  1903               	skipnz
  2237  0683  0AC5               	incf	(main@State2OnOffCounter+1)^(0+384),f
  2238                           
  2239                           ;main.c: 180: StateAudioNormalOnOffCounter++;
  2240  0684  0AC6               	incf	main@StateAudioNormalOnOffCounter^(0+384),f
  2241  0685  1903               	skipnz
  2242  0686  0AC7               	incf	(main@StateAudioNormalOnOffCounter+1)^(0+384),f
  2243                           
  2244                           ;main.c: 181: StateAudioSplOnOffCounter++;
  2245  0687  0AC8               	incf	main@StateAudioSplOnOffCounter^(0+384),f
  2246  0688  1903               	skipnz
  2247  0689  0AC9               	incf	(main@StateAudioSplOnOffCounter+1)^(0+384),f
  2248                           
  2249                           ;main.c: 182: if (State2OnOffCounter >= (700
  2250                           ;main.c: 183: + 300))
  2251  068A  3003               	movlw	3
  2252  068B  0245               	subwf	(main@State2OnOffCounter+1)^(0+384),w
  2253  068C  30E8               	movlw	232
  2254  068D  1903               	skipnz
  2255  068E  0244               	subwf	main@State2OnOffCounter^(0+384),w
  2256  068F  1C03               	skipc
  2257  0690  2E93               	goto	l2935
  2258                           
  2259                           ;main.c: 184: State2OnOffCounter=0;
  2260  0691  01C4               	clrf	main@State2OnOffCounter^(0+384)
  2261  0692  01C5               	clrf	(main@State2OnOffCounter+1)^(0+384)
  2262  0693                     l2935:	
  2263                           
  2264                           ;main.c: 185: if (StateAudioNormalOnOffCounter >= (80
  2265                           ;main.c: 186: + 1920))
  2266  0693  3007               	movlw	7
  2267  0694  0247               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+384),w
  2268  0695  30D0               	movlw	208
  2269  0696  1903               	skipnz
  2270  0697  0246               	subwf	main@StateAudioNormalOnOffCounter^(0+384),w
  2271  0698  1C03               	skipc
  2272  0699  2E9C               	goto	l2939
  2273                           
  2274                           ;main.c: 187: StateAudioNormalOnOffCounter=0;
  2275  069A  01C6               	clrf	main@StateAudioNormalOnOffCounter^(0+384)
  2276  069B  01C7               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+384)
  2277  069C                     l2939:	
  2278                           
  2279                           ;main.c: 188: if (StateAudioSplOnOffCounter >= (80
  2280                           ;main.c: 189: + 420))
  2281  069C  3001               	movlw	1
  2282  069D  0249               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+384),w
  2283  069E  30F4               	movlw	244
  2284  069F  1903               	skipnz
  2285  06A0  0248               	subwf	main@StateAudioSplOnOffCounter^(0+384),w
  2286  06A1  1C03               	skipc
  2287  06A2  2EA5               	goto	l2943
  2288                           
  2289                           ;main.c: 190: StateAudioSplOnOffCounter=0;
  2290  06A3  01C8               	clrf	main@StateAudioSplOnOffCounter^(0+384)
  2291  06A4  01C9               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+384)
  2292  06A5                     l2943:	
  2293                           
  2294                           ;main.c: 192: PORTA = OutForThePorts[0];
  2295  06A5  084B               	movf	main@OutForThePorts^(0+384),w
  2296  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  2297  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  2298  06A8  0085               	movwf	5	;volatile
  2299                           
  2300                           ;main.c: 193: PORTB = OutForThePorts[1];
  2301  06A9  1683               	bsf	3,5	;RP0=1, select bank3
  2302  06AA  1703               	bsf	3,6	;RP1=1, select bank3
  2303  06AB  084C               	movf	(main@OutForThePorts^(0+384)+1),w
  2304  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  2305  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  2306  06AE  0086               	movwf	6	;volatile
  2307  06AF                     l732:	
  2308                           ;main.c: 196: while (!FLAGS.bits.b5);
  2309                           
  2310  06AF  1683               	bsf	3,5	;RP0=1, select bank3
  2311  06B0  1703               	bsf	3,6	;RP1=1, select bank3
  2312  06B1  1ED3               	btfss	_FLAGS^(0+384),5	;volatile
  2313  06B2  2EAF               	goto	l732
  2314                           
  2315                           ;main.c: 198: FLAGS.bits.b5 = 0;
  2316  06B3  12D3               	bcf	_FLAGS^(0+384),5	;volatile
  2317  06B4  0AC1               	incf	main@k^(0+384),f
  2318  06B5  1903               	skipnz
  2319  06B6  0AC2               	incf	(main@k+1)^(0+384),f
  2320  06B7  2DFC               	goto	l2871
  2321  06B8                     l2951:	
  2322                           
  2323                           ;main.c: 200: }
  2324                           ;main.c: 201: if (j==0) {
  2325  06B8  084A               	movf	main@j^(0+384),w
  2326  06B9  1D03               	btfss	3,2
  2327  06BA  2F17               	goto	l2965
  2328                           
  2329                           ;main.c: 202: DiffInSecond = STATE_PERIODS[i]/3;
  2330  06BB  3003               	movlw	3
  2331  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  2332  06BD  00A2               	movwf	___lbdiv@divisor^(0+128)
  2333  06BE  27D0               	fcall	PL28	;call to abstracted procedure
  2334  06BF  120A  118A  27DD  120A  118A  	fcall	___lbdiv
  2335  06C4  1703               	bsf	3,6	;RP1=1, select bank3
  2336  06C5  00CF               	movwf	main@DiffInSecond^(0+384)
  2337                           
  2338                           ;main.c: 204: if (GetAbs(SecError)<GetAbs(DiffInSecond))
  2339  06C6  27C8               	fcall	PL26	;call to abstracted procedure
  2340  06C7  120A  158A  2376  120A  118A  	fcall	_GetAbs
  2341  06CC  0822               	movf	?_GetAbs^(0+128),w
  2342  06CD  1703               	bsf	3,6	;RP1=1, select bank3
  2343  06CE  00AA               	movwf	??_main^(0+384)
  2344  06CF  1303               	bcf	3,6	;RP1=0, select bank1
  2345  06D0  0823               	movf	(?_GetAbs+1)^(0+128),w
  2346  06D1  1703               	bsf	3,6	;RP1=1, select bank3
  2347  06D2  00AB               	movwf	(??_main^(0+384)+1)
  2348  06D3  084F               	movf	main@DiffInSecond^(0+384),w
  2349  06D4  1303               	bcf	3,6	;RP1=0, select bank1
  2350  06D5  00A2               	movwf	GetAbs@a^(0+128)
  2351  06D6  01A3               	clrf	(GetAbs@a+1)^(0+128)
  2352  06D7  1BA2               	btfsc	GetAbs@a^(0+128),7
  2353  06D8  03A3               	decf	(GetAbs@a+1)^(0+128),f
  2354  06D9  120A  158A  2376  120A  118A  	fcall	_GetAbs
  2355  06DE  1703               	bsf	3,6	;RP1=1, select bank3
  2356  06DF  082B               	movf	(??_main+1)^(0+384),w
  2357  06E0  3A80               	xorlw	128
  2358  06E1  00AC               	movwf	(??_main+2)^(0+384)
  2359  06E2  1303               	bcf	3,6	;RP1=0, select bank1
  2360  06E3  0823               	movf	(?_GetAbs+1)^(0+128),w
  2361  06E4  3A80               	xorlw	128
  2362  06E5  1703               	bsf	3,6	;RP1=1, select bank3
  2363  06E6  022C               	subwf	(??_main+2)^(0+384),w
  2364  06E7  1D03               	skipz
  2365  06E8  2EED               	goto	u3225
  2366  06E9  1303               	bcf	3,6	;RP1=0, select bank1
  2367  06EA  0822               	movf	?_GetAbs^(0+128),w
  2368  06EB  1703               	bsf	3,6	;RP1=1, select bank3
  2369  06EC  022A               	subwf	??_main^(0+384),w
  2370  06ED                     u3225:	
  2371  06ED  1803               	skipnc
  2372  06EE  2EFA               	goto	l2959
  2373                           
  2374                           ;main.c: 205: DiffInSecond = GetAbs(SecError);
  2375  06EF  1683               	bsf	3,5	;RP0=1, select bank3
  2376  06F0  1703               	bsf	3,6	;RP1=1, select bank3
  2377  06F1  27C8               	fcall	PL26	;call to abstracted procedure
  2378  06F2  120A  158A  2376  120A  118A  	fcall	_GetAbs
  2379  06F7  0822               	movf	?_GetAbs^(0+128),w
  2380  06F8  1703               	bsf	3,6	;RP1=1, select bank3
  2381  06F9  00CF               	movwf	main@DiffInSecond^(0+384)
  2382  06FA                     l2959:	
  2383                           
  2384                           ;main.c: 206: if (SecError>0)
  2385  06FA  1683               	bsf	3,5	;RP0=1, select bank3
  2386  06FB  1703               	bsf	3,6	;RP1=1, select bank3
  2387  06FC  084E               	movf	(main@SecError+1)^(0+384),w
  2388  06FD  3A80               	xorlw	128
  2389  06FE  00FF               	movwf	127
  2390  06FF  3080               	movlw	128
  2391  0700  027F               	subwf	127,w
  2392  0701  1D03               	skipz
  2393  0702  2F05               	goto	u3235
  2394  0703  3001               	movlw	1
  2395  0704  024D               	subwf	main@SecError^(0+384),w
  2396  0705                     u3235:	
  2397  0705  1C03               	skipc
  2398  0706  2F0B               	goto	l2963
  2399                           
  2400                           ;main.c: 207: DiffInSecond = -DiffInSecond;
  2401  0707  1683               	bsf	3,5	;RP0=1, select bank3
  2402  0708  1703               	bsf	3,6	;RP1=1, select bank3
  2403  0709  09CF               	comf	main@DiffInSecond^(0+384),f
  2404  070A  0ACF               	incf	main@DiffInSecond^(0+384),f
  2405  070B                     l2963:	
  2406                           
  2407                           ;main.c: 208: SecError = SecError+DiffInSecond;
  2408  070B  1683               	bsf	3,5	;RP0=1, select bank3
  2409  070C  1703               	bsf	3,6	;RP1=1, select bank3
  2410  070D  084D               	movf	main@SecError^(0+384),w
  2411  070E  074F               	addwf	main@DiffInSecond^(0+384),w
  2412  070F  00CD               	movwf	main@SecError^(0+384)
  2413  0710  084E               	movf	(main@SecError+1)^(0+384),w
  2414  0711  1803               	skipnc
  2415  0712  0A4E               	incf	(main@SecError+1)^(0+384),w
  2416  0713  3E00               	addlw	0
  2417  0714  1BCF               	btfsc	main@DiffInSecond^(0+384),7
  2418  0715  3EFF               	addlw	255
  2419  0716  00CE               	movwf	(main@SecError+1)^(0+384)
  2420  0717                     l2965:	
  2421                           
  2422                           ;main.c: 209: }
  2423                           ;main.c: 229: S++;
  2424  0717  1283               	bcf	3,5	;RP0=0, select bank2
  2425  0718  0AEB               	incf	107,f	;volatile
  2426  0719  1903               	skipnz
  2427  071A  0AEC               	incf	108,f	;volatile
  2428  071B  1903               	skipnz
  2429  071C  0AED               	incf	109,f	;volatile
  2430  071D  1903               	skipnz
  2431  071E  0AEE               	incf	110,f	;volatile
  2432                           
  2433                           ;main.c: 230: if ((S % (1*60*60)) == 0) {
  2434  071F  1683               	bsf	3,5	;RP0=1, select bank1
  2435  0720  1303               	bcf	3,6	;RP1=0, select bank1
  2436  0721  300E               	movlw	14
  2437  0722  01A5               	clrf	(___almod@divisor+3)^(0+128)
  2438  0723  01A4               	clrf	(___almod@divisor+2)^(0+128)
  2439  0724  00A3               	movwf	(___almod@divisor+1)^(0+128)
  2440  0725  3010               	movlw	16
  2441  0726  00A2               	movwf	___almod@divisor^(0+128)
  2442  0727  1283               	bcf	3,5	;RP0=0, select bank2
  2443  0728  1703               	bsf	3,6	;RP1=1, select bank2
  2444  0729  086E               	movf	110,w	;volatile
  2445  072A  1683               	bsf	3,5	;RP0=1, select bank1
  2446  072B  1303               	bcf	3,6	;RP1=0, select bank1
  2447  072C  00A9               	movwf	(___almod@dividend+3)^(0+128)
  2448  072D  1283               	bcf	3,5	;RP0=0, select bank2
  2449  072E  1703               	bsf	3,6	;RP1=1, select bank2
  2450  072F  086D               	movf	109,w	;volatile
  2451  0730  1683               	bsf	3,5	;RP0=1, select bank1
  2452  0731  1303               	bcf	3,6	;RP1=0, select bank1
  2453  0732  00A8               	movwf	(___almod@dividend+2)^(0+128)
  2454  0733  1283               	bcf	3,5	;RP0=0, select bank2
  2455  0734  1703               	bsf	3,6	;RP1=1, select bank2
  2456  0735  086C               	movf	108,w	;volatile
  2457  0736  1683               	bsf	3,5	;RP0=1, select bank1
  2458  0737  1303               	bcf	3,6	;RP1=0, select bank1
  2459  0738  00A7               	movwf	(___almod@dividend+1)^(0+128)
  2460  0739  1283               	bcf	3,5	;RP0=0, select bank2
  2461  073A  1703               	bsf	3,6	;RP1=1, select bank2
  2462  073B  086B               	movf	107,w	;volatile
  2463  073C  1683               	bsf	3,5	;RP0=1, select bank1
  2464  073D  1303               	bcf	3,6	;RP1=0, select bank1
  2465  073E  00A6               	movwf	___almod@dividend^(0+128)
  2466  073F  120A  158A  23B8  120A  118A  	fcall	___almod
  2467  0744  0825               	movf	(?___almod+3)^(0+128),w
  2468  0745  0424               	iorwf	(?___almod+2)^(0+128),w
  2469  0746  0423               	iorwf	(?___almod+1)^(0+128),w
  2470  0747  0422               	iorwf	?___almod^(0+128),w
  2471  0748  1D03               	skipz
  2472  0749  2F4D               	goto	l738
  2473                           
  2474                           ;main.c: 231: RC1 = 1;
  2475                           
  2476                           ;main.c: 232: FLAGS.bits.b2 = 1;
  2477  074A  27D7  120A  118A   	fcall	PL36	;call to abstracted procedure
  2478  074D                     l738:	
  2479                           
  2480                           ;main.c: 233: }
  2481                           ;main.c: 234: if (FLAGS.bits.b2)
  2482  074D  1703               	bsf	3,6	;RP1=1, select bank3
  2483  074E  1D53               	btfss	_FLAGS^(0+384),2	;volatile
  2484  074F  2F53               	goto	l739
  2485                           
  2486                           ;main.c: 235: GPS_On_Time_Counter++;
  2487  0750  0AB6               	incf	main@GPS_On_Time_Counter^(0+384),f
  2488  0751  1903               	skipnz
  2489  0752  0AB7               	incf	(main@GPS_On_Time_Counter+1)^(0+384),f
  2490  0753                     l739:	
  2491  0753  0ACA               	incf	main@j^(0+384),f
  2492  0754  2DD9               	goto	l2973
  2493  0755                     l2975:	
  2494  0755  1683               	bsf	3,5	;RP0=1, select bank3
  2495  0756  1703               	bsf	3,6	;RP1=1, select bank3
  2496  0757  0AD0               	incf	main@i^(0+384),f
  2497  0758  2DCD               	goto	l2977
  2498  0759                     __end_of_main:	
  2499  0759                     PL2:	
  2500  0759  1283               	bcf	3,5	;RP0=0, select bank2
  2501  075A  086E               	movf	110,w	;volatile
  2502  075B  1683               	bsf	3,5	;RP0=1, select bank3
  2503  075C  00BB               	movwf	(main@TimeSinceTheStartOfCycle+3)^(0+384)
  2504  075D  1283               	bcf	3,5	;RP0=0, select bank2
  2505  075E  086D               	movf	109,w	;volatile
  2506  075F  1683               	bsf	3,5	;RP0=1, select bank3
  2507  0760  00BA               	movwf	(main@TimeSinceTheStartOfCycle+2)^(0+384)
  2508  0761  1283               	bcf	3,5	;RP0=0, select bank2
  2509  0762  086C               	movf	108,w	;volatile
  2510  0763  1683               	bsf	3,5	;RP0=1, select bank3
  2511  0764  00B9               	movwf	(main@TimeSinceTheStartOfCycle+1)^(0+384)
  2512  0765  1283               	bcf	3,5	;RP0=0, select bank2
  2513  0766  086B               	movf	107,w	;volatile
  2514  0767  1683               	bsf	3,5	;RP0=1, select bank3
  2515  0768  00B8               	movwf	main@TimeSinceTheStartOfCycle^(0+384)
  2516  0769  0854               	movf	_PREV_CYCLE_TYPE^(0+384),w	;volatile
  2517  076A  00AA               	movwf	??_main^(0+384)
  2518  076B  3001               	movlw	1
  2519  076C  1003               	clrc
  2520  076D                     L3:	
  2521  076D  0DAA               	rlf	??_main^(0+384),f
  2522  076E  3EFF               	addlw	-1
  2523  076F  1003               	clrc
  2524  0770  1D03               	skipz
  2525  0771  2F6D               	goto	L3
  2526  0772  0D2A               	rlf	??_main^(0+384),w
  2527  0773  3E4C               	addlw	76
  2528  0774  0084               	movwf	4
  2529  0775  0800               	movf	0,w
  2530  0776  00AB               	movwf	(??_main+1)^(0+384)
  2531  0777  0A84               	incf	4,f
  2532  0778  0800               	movf	0,w
  2533  0779  00AC               	movwf	((??_main+1)^(0+384)+1)
  2534  077A  0A84               	incf	4,f
  2535  077B  0800               	movf	0,w
  2536  077C  00AD               	movwf	((??_main+1)^(0+384)+2)
  2537  077D  0A84               	incf	4,f
  2538  077E  0800               	movf	0,w
  2539  077F  00AE               	movwf	((??_main+1)^(0+384)+3)
  2540  0780  082B               	movf	(??_main+1)^(0+384),w
  2541  0781  02B8               	subwf	main@TimeSinceTheStartOfCycle^(0+384),f
  2542  0782  082C               	movf	(??_main+2)^(0+384),w
  2543  0783  1C03               	skipc
  2544  0784  0F2C               	incfsz	(??_main+2)^(0+384),w
  2545  0785  02B9               	subwf	(main@TimeSinceTheStartOfCycle+1)^(0+384),f
  2546  0786  082D               	movf	(??_main+3)^(0+384),w
  2547  0787  1C03               	skipc
  2548  0788  0F2D               	incfsz	(??_main+3)^(0+384),w
  2549  0789  02BA               	subwf	(main@TimeSinceTheStartOfCycle+2)^(0+384),f
  2550  078A  082E               	movf	(??_main+4)^(0+384),w
  2551  078B  0008               	return
  2552  078C                     __end_ofPL2:	
  2553  078C                     PL10:	
  2554  078C  0850               	movf	main@i^(0+384),w
  2555  078D  00AA               	movwf	??_main^(0+384)
  2556  078E  3010               	movlw	16
  2557  078F  1003               	clrc
  2558  0790  0DAA               	rlf	??_main^(0+384),f
  2559  0791  072A               	addwf	??_main^(0+384),w
  2560  0792  00AB               	movwf	(??_main+1)^(0+384)
  2561  0793  0851               	movf	main@l^(0+384),w
  2562  0794  072B               	addwf	(??_main+1)^(0+384),w
  2563  0795  00AC               	movwf	(??_main+2)^(0+384)
  2564  0796  0084               	movwf	4
  2565  0797  1783               	bsf	3,7	;select IRP bank2
  2566  0798  0800               	movf	0,w
  2567  0799  00AD               	movwf	(??_main+3)^(0+384)
  2568  079A  0851               	movf	main@l^(0+384),w
  2569  079B  3ECB               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2570  079C  0084               	movwf	4
  2571  079D  0800               	movf	0,w
  2572  079E  042D               	iorwf	(??_main+3)^(0+384),w
  2573  079F  00AE               	movwf	(??_main+4)^(0+384)
  2574  07A0  0851               	movf	main@l^(0+384),w
  2575  07A1  3ECB               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2576  07A2  0084               	movwf	4
  2577  07A3  082E               	movf	(??_main+4)^(0+384),w
  2578  07A4  0080               	movwf	0
  2579  07A5  0AD1               	incf	main@l^(0+384),f
  2580  07A6  0008               	return
  2581  07A7                     __end_ofPL10:	
  2582  07A7                     PL12:	
  2583  07A7  0850               	movf	main@i^(0+384),w
  2584  07A8  00AA               	movwf	??_main^(0+384)
  2585  07A9  1003               	clrc
  2586  07AA  0CAA               	rrf	??_main^(0+384),f
  2587  07AB  1003               	clrc
  2588  07AC  0CAA               	rrf	??_main^(0+384),f
  2589  07AD  1003               	clrc
  2590  07AE  0CAA               	rrf	??_main^(0+384),f
  2591  07AF  082A               	movf	??_main^(0+384),w
  2592  07B0  3E67               	addlw	103
  2593  07B1  0084               	movwf	4
  2594  07B2  0850               	movf	main@i^(0+384),w
  2595  07B3  3907               	andlw	7
  2596  07B4  00AB               	movwf	(??_main+1)^(0+384)
  2597  07B5  3080               	movlw	128
  2598  07B6  0AAB               	incf	(??_main+1)^(0+384),f
  2599  07B7  00AC               	movwf	(??_main+2)^(0+384)
  2600  07B8  3000               	movlw	0
  2601  07B9  00AD               	movwf	((??_main+2)^(0+384)+1)
  2602  07BA  0008               	return
  2603  07BB                     __end_ofPL12:	
  2604  07BB                     PL14:	
  2605  07BB  1303               	bcf	3,6	;RP1=0, select bank1
  2606  07BC  1003               	clrc
  2607  07BD  0D6D               	rlf	_CYCLE_TYPE^(0+128),w	;volatile
  2608  07BE  3E7A               	addlw	122
  2609  07BF  0084               	movwf	4
  2610  07C0  1383               	bcf	3,7	;select IRP bank0
  2611  07C1  0800               	movf	0,w
  2612  07C2  1703               	bsf	3,6	;RP1=1, select bank3
  2613  07C3  00AA               	movwf	??_main^(0+384)
  2614  07C4  0A84               	incf	4,f
  2615  07C5  0800               	movf	0,w
  2616  07C6  00AB               	movwf	(??_main^(0+384)+1)
  2617  07C7  0008               	return
  2618  07C8                     __end_ofPL14:	
  2619  07C8                     PL26:	
  2620  07C8  084E               	movf	(main@SecError+1)^(0+384),w
  2621  07C9  1303               	bcf	3,6	;RP1=0, select bank1
  2622  07CA  00A3               	movwf	(GetAbs@a+1)^(0+128)
  2623  07CB  1703               	bsf	3,6	;RP1=1, select bank3
  2624  07CC  084D               	movf	main@SecError^(0+384),w
  2625  07CD  1303               	bcf	3,6	;RP1=0, select bank1
  2626  07CE  00A2               	movwf	GetAbs@a^(0+128)
  2627  07CF  0008               	return
  2628  07D0                     __end_ofPL26:	
  2629  07D0                     PL28:	
  2630  07D0  1703               	bsf	3,6	;RP1=1, select bank3
  2631  07D1  0850               	movf	main@i^(0+384),w
  2632  07D2  3E20               	addlw	32
  2633  07D3  0084               	movwf	4
  2634  07D4  1383               	bcf	3,7	;select IRP bank0
  2635  07D5  0800               	movf	0,w
  2636  07D6  0008               	return
  2637  07D7                     __end_ofPL28:	
  2638  07D7                     PL36:	
  2639  07D7  1283               	bcf	3,5	;RP0=0, select bank0
  2640  07D8  1487               	bsf	7,1	;volatile
  2641  07D9  1683               	bsf	3,5	;RP0=1, select bank3
  2642  07DA  1703               	bsf	3,6	;RP1=1, select bank3
  2643  07DB  1553               	bsf	_FLAGS^(0+384),2	;volatile
  2644  07DC  0008               	return
  2645  07DD                     __end_ofPL36:	
  2646                           
  2647                           	psect	text1
  2648  07DD                     __ptext1:	
  2649 ;; *************** function ___lbdiv *****************
  2650 ;; Defined at:
  2651 ;;		line 4 in file "/opt/microchip/xc8/v1.38/sources/common/lbdiv.c"
  2652 ;; Parameters:    Size  Location     Type
  2653 ;;  dividend        1    wreg     unsigned char 
  2654 ;;  divisor         1    2[BANK1 ] unsigned char 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  dividend        1    3[BANK1 ] unsigned char 
  2657 ;;  quotient        1    5[BANK1 ] unsigned char 
  2658 ;;  counter         1    4[BANK1 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      unsigned char 
  2661 ;; Registers used:
  2662 ;;		wreg, status,2, status,0
  2663 ;; Tracked objects:
  2664 ;;		On entry : B00/300
  2665 ;;		On exit  : B00/100
  2666 ;;		Unchanged: 800/0
  2667 ;; Data sizes:      BANK1   BANK3  BANK2l
  2668 ;;      Params:         1       0       0
  2669 ;;      Locals:         3       0       0
  2670 ;;      Temps:          0       0       0
  2671 ;;      Totals:         4       0       0
  2672 ;;Total ram usage:        4 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           
  2683                           ;psect for function ___lbdiv
  2684  07DD                     ___lbdiv:	
  2685                           
  2686                           ;incstack = 0
  2687                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2688                           ;___lbdiv@dividend stored from wreg
  2689  07DD  1303               	bcf	3,6	;RP1=0, select bank1
  2690  07DE  00A3               	movwf	___lbdiv@dividend^(0+128)
  2691  07DF  01A5               	clrf	___lbdiv@quotient^(0+128)
  2692  07E0  0822               	movf	___lbdiv@divisor^(0+128),w
  2693  07E1  1903               	btfsc	3,2
  2694  07E2  2FF7               	goto	l2769
  2695  07E3  01A4               	clrf	___lbdiv@counter^(0+128)
  2696  07E4                     l2755:	
  2697  07E4  0AA4               	incf	___lbdiv@counter^(0+128),f
  2698  07E5  1BA2               	btfsc	___lbdiv@divisor^(0+128),7
  2699  07E6  2FEA               	goto	l1109
  2700  07E7  1003               	clrc
  2701  07E8  0DA2               	rlf	___lbdiv@divisor^(0+128),f
  2702  07E9  2FE4               	goto	l2755
  2703  07EA                     l1109:	
  2704  07EA  1003               	clrc
  2705  07EB  0DA5               	rlf	___lbdiv@quotient^(0+128),f
  2706  07EC  0822               	movf	___lbdiv@divisor^(0+128),w
  2707  07ED  0223               	subwf	___lbdiv@dividend^(0+128),w
  2708  07EE  1C03               	skipc
  2709  07EF  2FF4               	goto	L7
  2710  07F0  0822               	movf	___lbdiv@divisor^(0+128),w
  2711  07F1  02A3               	subwf	___lbdiv@dividend^(0+128),f
  2712  07F2  1425               	bsf	___lbdiv@quotient^(0+128),0
  2713  07F3  1003               	clrc
  2714  07F4                     L7:	
  2715  07F4  0CA2               	rrf	___lbdiv@divisor^(0+128),f
  2716  07F5  0BA4               	decfsz	___lbdiv@counter^(0+128),f
  2717  07F6  2FEA               	goto	l1109
  2718  07F7                     l2769:	
  2719  07F7  0825               	movf	___lbdiv@quotient^(0+128),w
  2720  07F8  0008               	return
  2721  07F9                     __end_of___lbdiv:	
  2722                           
  2723                           	psect	text2
  2724  0BB8                     __ptext2:	
  2725 ;; *************** function ___almod *****************
  2726 ;; Defined at:
  2727 ;;		line 5 in file "/opt/microchip/xc8/v1.38/sources/common/almod.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  divisor         4    2[BANK1 ] long 
  2730 ;;  dividend        4    6[BANK1 ] long 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  sign            1   11[BANK1 ] unsigned char 
  2733 ;;  counter         1   10[BANK1 ] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  4    2[BANK1 ] long 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, status,0
  2738 ;; Tracked objects:
  2739 ;;		On entry : 300/100
  2740 ;;		On exit  : 300/100
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:      BANK1   BANK3  BANK2l
  2743 ;;      Params:         8       0       0
  2744 ;;      Locals:         2       0       0
  2745 ;;      Temps:          0       0       0
  2746 ;;      Totals:        10       0       0
  2747 ;;Total ram usage:       10 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    1
  2750 ;; This function calls:
  2751 ;;		Nothing
  2752 ;; This function is called by:
  2753 ;;		_main
  2754 ;; This function uses a non-reentrant model
  2755 ;;
  2756                           
  2757                           
  2758                           ;psect for function ___almod
  2759  0BB8                     ___almod:	
  2760                           
  2761                           ;incstack = 0
  2762                           ; Regs used in ___almod: [wreg+status,2+status,0]
  2763  0BB8  01AB               	clrf	___almod@sign^(0+128)
  2764  0BB9  1FA9               	btfss	(___almod@dividend+3)^(0+128),7
  2765  0BBA  2BC8               	goto	l915
  2766  0BBB  09A6               	comf	___almod@dividend^(0+128),f
  2767  0BBC  09A7               	comf	(___almod@dividend+1)^(0+128),f
  2768  0BBD  09A8               	comf	(___almod@dividend+2)^(0+128),f
  2769  0BBE  09A9               	comf	(___almod@dividend+3)^(0+128),f
  2770  0BBF  0AA6               	incf	___almod@dividend^(0+128),f
  2771  0BC0  1903               	skipnz
  2772  0BC1  0AA7               	incf	(___almod@dividend+1)^(0+128),f
  2773  0BC2  1903               	skipnz
  2774  0BC3  0AA8               	incf	(___almod@dividend+2)^(0+128),f
  2775  0BC4  1903               	skipnz
  2776  0BC5  0AA9               	incf	(___almod@dividend+3)^(0+128),f
  2777  0BC6  01AB               	clrf	___almod@sign^(0+128)
  2778  0BC7  0AAB               	incf	___almod@sign^(0+128),f
  2779  0BC8                     l915:	
  2780  0BC8  1FA5               	btfss	(___almod@divisor+3)^(0+128),7
  2781  0BC9  2BD5               	goto	l2725
  2782  0BCA  09A2               	comf	___almod@divisor^(0+128),f
  2783  0BCB  09A3               	comf	(___almod@divisor+1)^(0+128),f
  2784  0BCC  09A4               	comf	(___almod@divisor+2)^(0+128),f
  2785  0BCD  09A5               	comf	(___almod@divisor+3)^(0+128),f
  2786  0BCE  0AA2               	incf	___almod@divisor^(0+128),f
  2787  0BCF  1903               	skipnz
  2788  0BD0  0AA3               	incf	(___almod@divisor+1)^(0+128),f
  2789  0BD1  1903               	skipnz
  2790  0BD2  0AA4               	incf	(___almod@divisor+2)^(0+128),f
  2791  0BD3  1903               	skipnz
  2792  0BD4  0AA5               	incf	(___almod@divisor+3)^(0+128),f
  2793  0BD5                     l2725:	
  2794  0BD5  0825               	movf	(___almod@divisor+3)^(0+128),w
  2795  0BD6  0424               	iorwf	(___almod@divisor+2)^(0+128),w
  2796  0BD7  0423               	iorwf	(___almod@divisor+1)^(0+128),w
  2797  0BD8  0422               	iorwf	___almod@divisor^(0+128),w
  2798  0BD9  1903               	skipnz
  2799  0BDA  2C0A               	goto	l2741
  2800  0BDB  01AA               	clrf	___almod@counter^(0+128)
  2801  0BDC                     L8:	
  2802  0BDC  0AAA               	incf	___almod@counter^(0+128),f
  2803  0BDD  1BA5               	btfsc	(___almod@divisor+3)^(0+128),7
  2804  0BDE  2BE5               	goto	l2733
  2805  0BDF  1003               	clrc
  2806  0BE0  0DA2               	rlf	___almod@divisor^(0+128),f
  2807  0BE1  0DA3               	rlf	(___almod@divisor+1)^(0+128),f
  2808  0BE2  0DA4               	rlf	(___almod@divisor+2)^(0+128),f
  2809  0BE3  0DA5               	rlf	(___almod@divisor+3)^(0+128),f
  2810  0BE4  2BDC               	goto	L8
  2811  0BE5                     l2733:	
  2812  0BE5  0825               	movf	(___almod@divisor+3)^(0+128),w
  2813  0BE6  0229               	subwf	(___almod@dividend+3)^(0+128),w
  2814  0BE7  1D03               	skipz
  2815  0BE8  2BF3               	goto	u2815
  2816  0BE9  0824               	movf	(___almod@divisor+2)^(0+128),w
  2817  0BEA  0228               	subwf	(___almod@dividend+2)^(0+128),w
  2818  0BEB  1D03               	skipz
  2819  0BEC  2BF3               	goto	u2815
  2820  0BED  0823               	movf	(___almod@divisor+1)^(0+128),w
  2821  0BEE  0227               	subwf	(___almod@dividend+1)^(0+128),w
  2822  0BEF  1D03               	skipz
  2823  0BF0  2BF3               	goto	u2815
  2824  0BF1  0822               	movf	___almod@divisor^(0+128),w
  2825  0BF2  0226               	subwf	___almod@dividend^(0+128),w
  2826  0BF3                     u2815:	
  2827  0BF3  1C03               	skipc
  2828  0BF4  2C04               	goto	L9
  2829  0BF5  0822               	movf	___almod@divisor^(0+128),w
  2830  0BF6  02A6               	subwf	___almod@dividend^(0+128),f
  2831  0BF7  0823               	movf	(___almod@divisor+1)^(0+128),w
  2832  0BF8  1C03               	skipc
  2833  0BF9  0F23               	incfsz	(___almod@divisor+1)^(0+128),w
  2834  0BFA  02A7               	subwf	(___almod@dividend+1)^(0+128),f
  2835  0BFB  0824               	movf	(___almod@divisor+2)^(0+128),w
  2836  0BFC  1C03               	skipc
  2837  0BFD  0F24               	incfsz	(___almod@divisor+2)^(0+128),w
  2838  0BFE  02A8               	subwf	(___almod@dividend+2)^(0+128),f
  2839  0BFF  0825               	movf	(___almod@divisor+3)^(0+128),w
  2840  0C00  1C03               	skipc
  2841  0C01  0F25               	incfsz	(___almod@divisor+3)^(0+128),w
  2842  0C02  02A9               	subwf	(___almod@dividend+3)^(0+128),f
  2843  0C03  1003               	clrc
  2844  0C04                     L9:	
  2845  0C04  0CA5               	rrf	(___almod@divisor+3)^(0+128),f
  2846  0C05  0CA4               	rrf	(___almod@divisor+2)^(0+128),f
  2847  0C06  0CA3               	rrf	(___almod@divisor+1)^(0+128),f
  2848  0C07  0CA2               	rrf	___almod@divisor^(0+128),f
  2849  0C08  0BAA               	decfsz	___almod@counter^(0+128),f
  2850  0C09  2BE5               	goto	l2733
  2851  0C0A                     l2741:	
  2852  0C0A  082B               	movf	___almod@sign^(0+128),w
  2853  0C0B  1903               	btfsc	3,2
  2854  0C0C  2C18               	goto	l2745
  2855  0C0D  09A6               	comf	___almod@dividend^(0+128),f
  2856  0C0E  09A7               	comf	(___almod@dividend+1)^(0+128),f
  2857  0C0F  09A8               	comf	(___almod@dividend+2)^(0+128),f
  2858  0C10  09A9               	comf	(___almod@dividend+3)^(0+128),f
  2859  0C11  0AA6               	incf	___almod@dividend^(0+128),f
  2860  0C12  1903               	skipnz
  2861  0C13  0AA7               	incf	(___almod@dividend+1)^(0+128),f
  2862  0C14  1903               	skipnz
  2863  0C15  0AA8               	incf	(___almod@dividend+2)^(0+128),f
  2864  0C16  1903               	skipnz
  2865  0C17  0AA9               	incf	(___almod@dividend+3)^(0+128),f
  2866  0C18                     l2745:	
  2867  0C18  0829               	movf	(___almod@dividend+3)^(0+128),w
  2868  0C19  00A5               	movwf	(?___almod+3)^(0+128)
  2869  0C1A  0828               	movf	(___almod@dividend+2)^(0+128),w
  2870  0C1B  00A4               	movwf	(?___almod+2)^(0+128)
  2871  0C1C  0827               	movf	(___almod@dividend+1)^(0+128),w
  2872  0C1D  00A3               	movwf	(?___almod+1)^(0+128)
  2873  0C1E  0826               	movf	___almod@dividend^(0+128),w
  2874  0C1F  00A2               	movwf	?___almod^(0+128)
  2875  0C20  0008               	return
  2876  0C21                     __end_of___almod:	
  2877                           
  2878                           	psect	text3
  2879  001C                     __ptext3:	
  2880 ;; *************** function _UART_Init *****************
  2881 ;; Defined at:
  2882 ;;		line 3 in file "libs/gsk_usart.c"
  2883 ;; Parameters:    Size  Location     Type
  2884 ;;  baudrate        4   14[BANK3 ] const long 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  x               2   24[BANK3 ] unsigned int 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  1    wreg      unsigned char 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : B00/B00
  2893 ;;		On exit  : 300/100
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:      BANK1   BANK3  BANK2l
  2896 ;;      Params:         0       4       0
  2897 ;;      Locals:         0       8       0
  2898 ;;      Temps:          0       0       0
  2899 ;;      Totals:         0      12       0
  2900 ;;Total ram usage:       12 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    5
  2903 ;; This function calls:
  2904 ;;		___altoft
  2905 ;;		___ftadd
  2906 ;;		___ftdiv
  2907 ;;		___ftmul
  2908 ;;		___fttol
  2909 ;;		_round
  2910 ;; This function is called by:
  2911 ;;		_main
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           
  2916                           ;psect for function _UART_Init
  2917  001C                     _UART_Init:	
  2918                           
  2919                           ;gsk_usart.c: 4: uint16_t x;
  2920                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  2921                           
  2922                           ;incstack = 0
  2923                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2924  001C  3024               	movlw	36
  2925  001D  1303               	bcf	3,6	;RP1=0, select bank1
  2926  001E  00C2               	movwf	___ftdiv@f1^(0+128)
  2927  001F  3074               	movlw	116
  2928  0020  00C3               	movwf	(___ftdiv@f1+1)^(0+128)
  2929  0021  304A               	movlw	74
  2930  0022  00C4               	movwf	(___ftdiv@f1+2)^(0+128)
  2931  0023  1703               	bsf	3,6	;RP1=1, select bank3
  2932  0024  0821               	movf	(UART_Init@baudrate+3)^(0+384),w
  2933  0025  1303               	bcf	3,6	;RP1=0, select bank1
  2934  0026  00AD               	movwf	(___altoft@c+3)^(0+128)
  2935  0027  1703               	bsf	3,6	;RP1=1, select bank3
  2936  0028  0820               	movf	(UART_Init@baudrate+2)^(0+384),w
  2937  0029  1303               	bcf	3,6	;RP1=0, select bank1
  2938  002A  00AC               	movwf	(___altoft@c+2)^(0+128)
  2939  002B  1703               	bsf	3,6	;RP1=1, select bank3
  2940  002C  081F               	movf	(UART_Init@baudrate+1)^(0+384),w
  2941  002D  1303               	bcf	3,6	;RP1=0, select bank1
  2942  002E  00AB               	movwf	(___altoft@c+1)^(0+128)
  2943  002F  1703               	bsf	3,6	;RP1=1, select bank3
  2944  0030  081E               	movf	UART_Init@baudrate^(0+384),w
  2945  0031  1303               	bcf	3,6	;RP1=0, select bank1
  2946  0032  00AA               	movwf	___altoft@c^(0+128)
  2947  0033  21F6  120A  118A   	fcall	___altoft
  2948  0036  082A               	movf	?___altoft^(0+128),w
  2949  0037  00B3               	movwf	___ftmul@f2^(0+128)
  2950  0038  082B               	movf	(?___altoft+1)^(0+128),w
  2951  0039  00B4               	movwf	(___ftmul@f2+1)^(0+128)
  2952  003A  082C               	movf	(?___altoft+2)^(0+128),w
  2953  003B  00B5               	movwf	(___ftmul@f2+2)^(0+128)
  2954  003C  3080               	movlw	128
  2955  003D  01B0               	clrf	___ftmul@f1^(0+128)
  2956  003E  00B1               	movwf	(___ftmul@f1+1)^(0+128)
  2957  003F  3040               	movlw	64
  2958  0040  00B2               	movwf	(___ftmul@f1+2)^(0+128)
  2959  0041  232A  120A  118A   	fcall	___ftmul
  2960  0044  0830               	movf	?___ftmul^(0+128),w
  2961  0045  00BF               	movwf	___ftdiv@f2^(0+128)
  2962  0046  0831               	movf	(?___ftmul+1)^(0+128),w
  2963  0047  00C0               	movwf	(___ftdiv@f2+1)^(0+128)
  2964  0048  0832               	movf	(?___ftmul+2)^(0+128),w
  2965  0049  00C1               	movwf	(___ftdiv@f2+2)^(0+128)
  2966  004A  22C2  120A  118A   	fcall	___ftdiv
  2967  004D  083F               	movf	?___ftdiv^(0+128),w
  2968  004E  1703               	bsf	3,6	;RP1=1, select bank3
  2969  004F  00A2               	movwf	_UART_Init$1946^(0+384)
  2970  0050  1303               	bcf	3,6	;RP1=0, select bank1
  2971  0051  0840               	movf	(?___ftdiv+1)^(0+128),w
  2972  0052  1703               	bsf	3,6	;RP1=1, select bank3
  2973  0053  00A3               	movwf	(_UART_Init$1946+1)^(0+384)
  2974  0054  1303               	bcf	3,6	;RP1=0, select bank1
  2975  0055  0841               	movf	(?___ftdiv+2)^(0+128),w
  2976  0056  1703               	bsf	3,6	;RP1=1, select bank3
  2977  0057  00A4               	movwf	(_UART_Init$1946+2)^(0+384)
  2978                           
  2979                           ;gsk_usart.c: 4: uint16_t x;
  2980                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  2981  0058  0822               	movf	_UART_Init$1946^(0+384),w
  2982  0059  1303               	bcf	3,6	;RP1=0, select bank1
  2983  005A  00EA               	movwf	round@x^(0+128)
  2984  005B  1703               	bsf	3,6	;RP1=1, select bank3
  2985  005C  0823               	movf	(_UART_Init$1946+1)^(0+384),w
  2986  005D  1303               	bcf	3,6	;RP1=0, select bank1
  2987  005E  00EB               	movwf	(round@x+1)^(0+128)
  2988  005F  1703               	bsf	3,6	;RP1=1, select bank3
  2989  0060  0824               	movf	(_UART_Init$1946+2)^(0+384),w
  2990  0061  1303               	bcf	3,6	;RP1=0, select bank1
  2991  0062  00EC               	movwf	(round@x+2)^(0+128)
  2992  0063  20A5  120A  118A   	fcall	_round
  2993  0066  086A               	movf	?_round^(0+128),w
  2994  0067  1703               	bsf	3,6	;RP1=1, select bank3
  2995  0068  00A5               	movwf	_UART_Init$1947^(0+384)
  2996  0069  1303               	bcf	3,6	;RP1=0, select bank1
  2997  006A  086B               	movf	(?_round+1)^(0+128),w
  2998  006B  1703               	bsf	3,6	;RP1=1, select bank3
  2999  006C  00A6               	movwf	(_UART_Init$1947+1)^(0+384)
  3000  006D  1303               	bcf	3,6	;RP1=0, select bank1
  3001  006E  086C               	movf	(?_round+2)^(0+128),w
  3002  006F  1703               	bsf	3,6	;RP1=1, select bank3
  3003  0070  00A7               	movwf	(_UART_Init$1947+2)^(0+384)
  3004                           
  3005                           ;gsk_usart.c: 4: uint16_t x;
  3006                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  3007  0071  0825               	movf	_UART_Init$1947^(0+384),w
  3008  0072  1303               	bcf	3,6	;RP1=0, select bank1
  3009  0073  00D1               	movwf	___ftadd@f2^(0+128)
  3010  0074  1703               	bsf	3,6	;RP1=1, select bank3
  3011  0075  0826               	movf	(_UART_Init$1947+1)^(0+384),w
  3012  0076  1303               	bcf	3,6	;RP1=0, select bank1
  3013  0077  00D2               	movwf	(___ftadd@f2+1)^(0+128)
  3014  0078  1703               	bsf	3,6	;RP1=1, select bank3
  3015  0079  0827               	movf	(_UART_Init$1947+2)^(0+384),w
  3016  007A  1303               	bcf	3,6	;RP1=0, select bank1
  3017  007B  00D3               	movwf	(___ftadd@f2+2)^(0+128)
  3018  007C  3080               	movlw	128
  3019  007D  01CE               	clrf	___ftadd@f1^(0+128)
  3020  007E  00CF               	movwf	(___ftadd@f1+1)^(0+128)
  3021  007F  30BF               	movlw	191
  3022  0080  00D0               	movwf	(___ftadd@f1+2)^(0+128)
  3023  0081  2136  120A  118A   	fcall	___ftadd
  3024  0084  084E               	movf	?___ftadd^(0+128),w
  3025  0085  00DA               	movwf	___fttol@f1^(0+128)
  3026  0086  084F               	movf	(?___ftadd+1)^(0+128),w
  3027  0087  00DB               	movwf	(___fttol@f1+1)^(0+128)
  3028  0088  0850               	movf	(?___ftadd+2)^(0+128),w
  3029  0089  00DC               	movwf	(___fttol@f1+2)^(0+128)
  3030  008A  2225               	fcall	___fttol
  3031  008B  085B               	movf	(?___fttol^(0+128)+1),w
  3032  008C  1703               	bsf	3,6	;RP1=1, select bank3
  3033  008D  00A9               	movwf	(UART_Init@x+1)^(0+384)
  3034  008E  1303               	bcf	3,6	;RP1=0, select bank1
  3035  008F  085A               	movf	?___fttol^(0+128),w
  3036  0090  1703               	bsf	3,6	;RP1=1, select bank3
  3037  0091  00A8               	movwf	UART_Init@x^(0+384)
  3038                           
  3039                           ;gsk_usart.c: 6: SPBRG = x;
  3040  0092  1303               	bcf	3,6	;RP1=0, select bank1
  3041  0093  0099               	movwf	25	;volatile
  3042                           
  3043                           ;gsk_usart.c: 7: SPBRGH = (x>>8);
  3044  0094  1703               	bsf	3,6	;RP1=1, select bank3
  3045  0095  0829               	movf	(UART_Init@x^(0+384)+1),w
  3046  0096  1303               	bcf	3,6	;RP1=0, select bank1
  3047  0097  009A               	movwf	26	;volatile
  3048                           
  3049                           ;gsk_usart.c: 8: BRGH = 1;
  3050  0098  1518               	bsf	24,2	;volatile
  3051                           
  3052                           ;gsk_usart.c: 9: BRG16 = 1;
  3053  0099  1703               	bsf	3,6	;RP1=1, select bank3
  3054  009A  1587               	bsf	7,3	;volatile
  3055                           
  3056                           ;gsk_usart.c: 10: CREN = 1;
  3057  009B  1283               	bcf	3,5	;RP0=0, select bank0
  3058  009C  1303               	bcf	3,6	;RP1=0, select bank0
  3059  009D  1618               	bsf	24,4	;volatile
  3060                           
  3061                           ;gsk_usart.c: 11: SYNC = 0;
  3062  009E  1683               	bsf	3,5	;RP0=1, select bank1
  3063  009F  1218               	bcf	24,4	;volatile
  3064                           
  3065                           ;gsk_usart.c: 12: SPEN = 1;
  3066  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  3067  00A1  1798               	bsf	24,7	;volatile
  3068                           
  3069                           ;gsk_usart.c: 15: TXEN = 1;
  3070  00A2  1683               	bsf	3,5	;RP0=1, select bank1
  3071  00A3  1698               	bsf	24,5	;volatile
  3072  00A4  0008               	return
  3073  00A5                     __end_of_UART_Init:	
  3074  00A5                     __ptext4:	
  3075 ;; *************** function _round *****************
  3076 ;; Defined at:
  3077 ;;		line 6 in file "/opt/microchip/xc8/v1.38/sources/common/round.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  x               3   74[BANK1 ] unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  f               3   11[BANK3 ] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  3   74[BANK1 ] unsigned char 
  3084 ;; Registers used:
  3085 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 300/900
  3088 ;;		On exit  : 300/100
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:      BANK1   BANK3  BANK2l
  3091 ;;      Params:         3       0       0
  3092 ;;      Locals:         0       3       0
  3093 ;;      Temps:          0       0       0
  3094 ;;      Totals:         3       3       0
  3095 ;;Total ram usage:        6 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    4
  3098 ;; This function calls:
  3099 ;;		___ftadd
  3100 ;;		___ftsub
  3101 ;;		_trunc
  3102 ;; This function is called by:
  3103 ;;		_UART_Init
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           
  3108                           ;psect for function _round
  3109  00A5                     _round:	
  3110                           
  3111                           ;incstack = 0
  3112                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3113  00A5  240D  120A  118A   	fcall	PL32	;call to abstracted procedure
  3114  00A8  20F2  120A  118A   	fcall	_trunc
  3115  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  3116  00AC  0867               	movf	?_trunc^(0+128),w
  3117  00AD  1703               	bsf	3,6	;RP1=1, select bank3
  3118  00AE  0095               	movwf	___ftsub@f2^(0+384)
  3119  00AF  1303               	bcf	3,6	;RP1=0, select bank1
  3120  00B0  0868               	movf	(?_trunc+1)^(0+128),w
  3121  00B1  1703               	bsf	3,6	;RP1=1, select bank3
  3122  00B2  0096               	movwf	(___ftsub@f2+1)^(0+384)
  3123  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  3124  00B4  0869               	movf	(?_trunc+2)^(0+128),w
  3125  00B5  1703               	bsf	3,6	;RP1=1, select bank3
  3126  00B6  0097               	movwf	(___ftsub@f2+2)^(0+384)
  3127  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  3128  00B8  086A               	movf	round@x^(0+128),w
  3129  00B9  1703               	bsf	3,6	;RP1=1, select bank3
  3130  00BA  0098               	movwf	___ftsub@f1^(0+384)
  3131  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  3132  00BC  086B               	movf	(round@x+1)^(0+128),w
  3133  00BD  1703               	bsf	3,6	;RP1=1, select bank3
  3134  00BE  0099               	movwf	(___ftsub@f1+1)^(0+384)
  3135  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  3136  00C0  086C               	movf	(round@x+2)^(0+128),w
  3137  00C1  1703               	bsf	3,6	;RP1=1, select bank3
  3138  00C2  009A               	movwf	(___ftsub@f1+2)^(0+384)
  3139  00C3  2397  120A  118A   	fcall	___ftsub
  3140  00C6  0815               	movf	?___ftsub^(0+384),w
  3141  00C7  009B               	movwf	round@f^(0+384)
  3142  00C8  0816               	movf	(?___ftsub+1)^(0+384),w
  3143  00C9  009C               	movwf	(round@f+1)^(0+384)
  3144  00CA  0817               	movf	(?___ftsub+2)^(0+384),w
  3145  00CB  009D               	movwf	(round@f+2)^(0+384)
  3146  00CC  081B               	movf	round@f^(0+384),w
  3147  00CD  1303               	bcf	3,6	;RP1=0, select bank1
  3148  00CE  00CE               	movwf	___ftadd@f1^(0+128)
  3149  00CF  1703               	bsf	3,6	;RP1=1, select bank3
  3150  00D0  081C               	movf	(round@f+1)^(0+384),w
  3151  00D1  1303               	bcf	3,6	;RP1=0, select bank1
  3152  00D2  00CF               	movwf	(___ftadd@f1+1)^(0+128)
  3153  00D3  1703               	bsf	3,6	;RP1=1, select bank3
  3154  00D4  081D               	movf	(round@f+2)^(0+384),w
  3155  00D5  1303               	bcf	3,6	;RP1=0, select bank1
  3156  00D6  00D0               	movwf	(___ftadd@f1+2)^(0+128)
  3157  00D7  086A               	movf	round@x^(0+128),w
  3158  00D8  00D1               	movwf	___ftadd@f2^(0+128)
  3159  00D9  086B               	movf	(round@x+1)^(0+128),w
  3160  00DA  00D2               	movwf	(___ftadd@f2+1)^(0+128)
  3161  00DB  086C               	movf	(round@x+2)^(0+128),w
  3162  00DC  00D3               	movwf	(___ftadd@f2+2)^(0+128)
  3163  00DD  2136  120A  118A   	fcall	___ftadd
  3164  00E0  084E               	movf	?___ftadd^(0+128),w
  3165  00E1  00EA               	movwf	round@x^(0+128)
  3166  00E2  084F               	movf	(?___ftadd+1)^(0+128),w
  3167  00E3  00EB               	movwf	(round@x+1)^(0+128)
  3168  00E4  0850               	movf	(?___ftadd+2)^(0+128),w
  3169  00E5  00EC               	movwf	(round@x+2)^(0+128)
  3170  00E6  240D  120A  118A   	fcall	PL32	;call to abstracted procedure
  3171  00E9  20F2               	fcall	_trunc
  3172  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  3173  00EB  0867               	movf	?_trunc^(0+128),w
  3174  00EC  00EA               	movwf	?_round^(0+128)
  3175  00ED  0868               	movf	(?_trunc+1)^(0+128),w
  3176  00EE  00EB               	movwf	(?_round+1)^(0+128)
  3177  00EF  0869               	movf	(?_trunc+2)^(0+128),w
  3178  00F0  00EC               	movwf	(?_round+2)^(0+128)
  3179  00F1  0008               	return
  3180  00F2                     __end_of_round:	
  3181  00F2                     __ptext5:	
  3182 ;; *************** function _trunc *****************
  3183 ;; Defined at:
  3184 ;;		line 13 in file "/opt/microchip/xc8/v1.38/sources/common/trunc.c"
  3185 ;; Parameters:    Size  Location     Type
  3186 ;;  x               3   71[BANK1 ] unsigned char 
  3187 ;; Auto vars:     Size  Location     Type
  3188 ;;  i               3    0[BANK3 ] unsigned char 
  3189 ;;  expon           2    3[BANK3 ] int 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  3   71[BANK1 ] int 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 300/900
  3196 ;;		On exit  : 100/100
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:      BANK1   BANK3  BANK2l
  3199 ;;      Params:         3       0       0
  3200 ;;      Locals:         0       5       0
  3201 ;;      Temps:          0       0       0
  3202 ;;      Totals:         3       5       0
  3203 ;;Total ram usage:        8 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    3
  3206 ;; This function calls:
  3207 ;;		___altoft
  3208 ;;		___fttol
  3209 ;;		_frexp
  3210 ;; This function is called by:
  3211 ;;		_round
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           
  3216                           ;psect for function _trunc
  3217  00F2                     _trunc:	
  3218                           
  3219                           ;incstack = 0
  3220                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3221  00F2  0867               	movf	trunc@x^(0+128),w
  3222  00F3  00A2               	movwf	frexp@value^(0+128)
  3223  00F4  0868               	movf	(trunc@x+1)^(0+128),w
  3224  00F5  00A3               	movwf	(frexp@value+1)^(0+128)
  3225  00F6  0869               	movf	(trunc@x+2)^(0+128),w
  3226  00F7  00A4               	movwf	(frexp@value+2)^(0+128)
  3227  00F8  3093               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  3228  00F9  00A5               	movwf	frexp@eptr^(0+128)
  3229  00FA  23C2  120A  118A   	fcall	_frexp
  3230  00FD  1703               	bsf	3,6	;RP1=1, select bank3
  3231  00FE  1F94               	btfss	(trunc@expon+1)^(0+384),7
  3232  00FF  2905               	goto	l2413
  3233  0100  1303               	bcf	3,6	;RP1=0, select bank1
  3234  0101  01E7               	clrf	?_trunc^(0+128)
  3235  0102  01E8               	clrf	(?_trunc+1)^(0+128)
  3236  0103  01E9               	clrf	(?_trunc+2)^(0+128)
  3237  0104  0008               	return
  3238  0105                     l2413:	
  3239  0105  3000               	movlw	0
  3240  0106  0214               	subwf	(trunc@expon+1)^(0+384),w
  3241  0107  3015               	movlw	21
  3242  0108  1903               	skipnz
  3243  0109  0213               	subwf	trunc@expon^(0+384),w
  3244  010A  1803               	btfsc	3,0
  3245  010B  0008               	return
  3246  010C  1303               	bcf	3,6	;RP1=0, select bank1
  3247  010D  0867               	movf	trunc@x^(0+128),w
  3248  010E  00DA               	movwf	___fttol@f1^(0+128)
  3249  010F  0868               	movf	(trunc@x+1)^(0+128),w
  3250  0110  00DB               	movwf	(___fttol@f1+1)^(0+128)
  3251  0111  0869               	movf	(trunc@x+2)^(0+128),w
  3252  0112  00DC               	movwf	(___fttol@f1+2)^(0+128)
  3253  0113  2225  120A  118A   	fcall	___fttol
  3254  0116  085D               	movf	(?___fttol+3)^(0+128),w
  3255  0117  00AD               	movwf	(___altoft@c+3)^(0+128)
  3256  0118  085C               	movf	(?___fttol+2)^(0+128),w
  3257  0119  00AC               	movwf	(___altoft@c+2)^(0+128)
  3258  011A  085B               	movf	(?___fttol+1)^(0+128),w
  3259  011B  00AB               	movwf	(___altoft@c+1)^(0+128)
  3260  011C  085A               	movf	?___fttol^(0+128),w
  3261  011D  00AA               	movwf	___altoft@c^(0+128)
  3262  011E  21F6               	fcall	___altoft
  3263  011F  082A               	movf	?___altoft^(0+128),w
  3264  0120  1703               	bsf	3,6	;RP1=1, select bank3
  3265  0121  0090               	movwf	trunc@i^(0+384)
  3266  0122  1303               	bcf	3,6	;RP1=0, select bank1
  3267  0123  082B               	movf	(?___altoft+1)^(0+128),w
  3268  0124  1703               	bsf	3,6	;RP1=1, select bank3
  3269  0125  0091               	movwf	(trunc@i+1)^(0+384)
  3270  0126  1303               	bcf	3,6	;RP1=0, select bank1
  3271  0127  082C               	movf	(?___altoft+2)^(0+128),w
  3272  0128  1703               	bsf	3,6	;RP1=1, select bank3
  3273  0129  0092               	movwf	(trunc@i+2)^(0+384)
  3274  012A  0810               	movf	trunc@i^(0+384),w
  3275  012B  1303               	bcf	3,6	;RP1=0, select bank1
  3276  012C  00E7               	movwf	?_trunc^(0+128)
  3277  012D  1703               	bsf	3,6	;RP1=1, select bank3
  3278  012E  0811               	movf	(trunc@i+1)^(0+384),w
  3279  012F  1303               	bcf	3,6	;RP1=0, select bank1
  3280  0130  00E8               	movwf	(?_trunc+1)^(0+128)
  3281  0131  1703               	bsf	3,6	;RP1=1, select bank3
  3282  0132  0812               	movf	(trunc@i+2)^(0+384),w
  3283  0133  1303               	bcf	3,6	;RP1=0, select bank1
  3284  0134  00E9               	movwf	(?_trunc+2)^(0+128)
  3285  0135  0008               	return
  3286  0136                     __end_of_trunc:	
  3287  0136                     __ptext10:	
  3288 ;; *************** function ___ftadd *****************
  3289 ;; Defined at:
  3290 ;;		line 86 in file "/opt/microchip/xc8/v1.38/sources/common/ftadd.c"
  3291 ;; Parameters:    Size  Location     Type
  3292 ;;  f1              3   46[BANK1 ] float 
  3293 ;;  f2              3   49[BANK1 ] float 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  exp1            1   57[BANK1 ] unsigned char 
  3296 ;;  exp2            1   56[BANK1 ] unsigned char 
  3297 ;;  sign            1   55[BANK1 ] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  3   46[BANK1 ] float 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, pclath, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 300/900
  3304 ;;		On exit  : 300/100
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:      BANK1   BANK3  BANK2l
  3307 ;;      Params:         6       0       0
  3308 ;;      Locals:         3       0       0
  3309 ;;      Temps:          3       0       0
  3310 ;;      Totals:        12       0       0
  3311 ;;Total ram usage:       12 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    2
  3314 ;; This function calls:
  3315 ;;		___ftpack
  3316 ;; This function is called by:
  3317 ;;		_UART_Init
  3318 ;;		___ftsub
  3319 ;;		_round
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           
  3324                           ;psect for function ___ftadd
  3325  0136                     ___ftadd:	
  3326                           
  3327                           ;incstack = 0
  3328                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  3329  0136  084E               	movf	___ftadd@f1^(0+128),w
  3330  0137  00D4               	movwf	??___ftadd^(0+128)
  3331  0138  084F               	movf	(___ftadd@f1+1)^(0+128),w
  3332  0139  00D5               	movwf	(??___ftadd^(0+128)+1)
  3333  013A  0850               	movf	(___ftadd@f1+2)^(0+128),w
  3334  013B  00D6               	movwf	(??___ftadd^(0+128)+2)
  3335  013C  1003               	clrc
  3336  013D  0D55               	rlf	(??___ftadd^(0+128)+1),w
  3337  013E  0D56               	rlf	(??___ftadd^(0+128)+2),w
  3338  013F  00D9               	movwf	___ftadd@exp1^(0+128)
  3339  0140  0851               	movf	___ftadd@f2^(0+128),w
  3340  0141  00D4               	movwf	??___ftadd^(0+128)
  3341  0142  0852               	movf	(___ftadd@f2+1)^(0+128),w
  3342  0143  00D5               	movwf	(??___ftadd^(0+128)+1)
  3343  0144  0853               	movf	(___ftadd@f2+2)^(0+128),w
  3344  0145  00D6               	movwf	(??___ftadd^(0+128)+2)
  3345  0146  1003               	clrc
  3346  0147  0D55               	rlf	(??___ftadd^(0+128)+1),w
  3347  0148  0D56               	rlf	(??___ftadd^(0+128)+2),w
  3348  0149  00D8               	movwf	___ftadd@exp2^(0+128)
  3349  014A  0859               	movf	___ftadd@exp1^(0+128),w
  3350  014B  1903               	btfsc	3,2
  3351  014C  2959               	goto	l2189
  3352  014D  0858               	movf	___ftadd@exp2^(0+128),w
  3353  014E  0259               	subwf	___ftadd@exp1^(0+128),w
  3354  014F  0858               	movf	___ftadd@exp2^(0+128),w
  3355  0150  1803               	skipnc
  3356  0151  2961               	goto	L10
  3357  0152  00D4               	movwf	??___ftadd^(0+128)
  3358  0153  0859               	movf	___ftadd@exp1^(0+128),w
  3359  0154  02D4               	subwf	??___ftadd^(0+128),f
  3360  0155  3019               	movlw	25
  3361  0156  0254               	subwf	??___ftadd^(0+128),w
  3362  0157  1C03               	skipc
  3363  0158  2960               	goto	l2193
  3364  0159                     l2189:	
  3365  0159  0851               	movf	___ftadd@f2^(0+128),w
  3366  015A  00CE               	movwf	?___ftadd^(0+128)
  3367  015B  0852               	movf	(___ftadd@f2+1)^(0+128),w
  3368  015C  00CF               	movwf	(?___ftadd+1)^(0+128)
  3369  015D  0853               	movf	(___ftadd@f2+2)^(0+128),w
  3370  015E  00D0               	movwf	(?___ftadd+2)^(0+128)
  3371  015F  0008               	return
  3372  0160                     l2193:	
  3373  0160  0858               	movf	___ftadd@exp2^(0+128),w
  3374  0161                     L10:	
  3375  0161  1903               	btfsc	3,2
  3376  0162  0008               	return
  3377  0163  0859               	movf	___ftadd@exp1^(0+128),w
  3378  0164  0258               	subwf	___ftadd@exp2^(0+128),w
  3379  0165  1803               	skipnc
  3380  0166  296F               	goto	l2199
  3381  0167  0859               	movf	___ftadd@exp1^(0+128),w
  3382  0168  00D4               	movwf	??___ftadd^(0+128)
  3383  0169  0858               	movf	___ftadd@exp2^(0+128),w
  3384  016A  02D4               	subwf	??___ftadd^(0+128),f
  3385  016B  3019               	movlw	25
  3386  016C  0254               	subwf	??___ftadd^(0+128),w
  3387  016D  1803               	btfsc	3,0
  3388  016E  0008               	return
  3389  016F                     l2199:	
  3390  016F  3006               	movlw	6
  3391  0170  00D7               	movwf	___ftadd@sign^(0+128)
  3392  0171  1BD0               	btfsc	(___ftadd@f1+2)^(0+128),7
  3393  0172  17D7               	bsf	___ftadd@sign^(0+128),7
  3394  0173  1BD3               	btfsc	(___ftadd@f2+2)^(0+128),7
  3395  0174  1757               	bsf	___ftadd@sign^(0+128),6
  3396  0175  17CF               	bsf	(___ftadd@f1^(0+128)+1),7
  3397  0176  01D0               	clrf	(___ftadd@f1+2)^(0+128)
  3398  0177  17D2               	bsf	(___ftadd@f2^(0+128)+1),7
  3399  0178  01D3               	clrf	(___ftadd@f2+2)^(0+128)
  3400  0179  0858               	movf	___ftadd@exp2^(0+128),w
  3401  017A  0259               	subwf	___ftadd@exp1^(0+128),w
  3402  017B  1803               	skipnc
  3403  017C  2996               	goto	l2221
  3404  017D                     l2211:	
  3405  017D  1003               	clrc
  3406  017E  0DD1               	rlf	___ftadd@f2^(0+128),f
  3407  017F  0DD2               	rlf	(___ftadd@f2+1)^(0+128),f
  3408  0180  0DD3               	rlf	(___ftadd@f2+2)^(0+128),f
  3409  0181  03D8               	decf	___ftadd@exp2^(0+128),f
  3410  0182  0858               	movf	___ftadd@exp2^(0+128),w
  3411  0183  0659               	xorwf	___ftadd@exp1^(0+128),w
  3412  0184  1903               	skipnz
  3413  0185  2991               	goto	l2219
  3414  0186  03D7               	decf	___ftadd@sign^(0+128),f
  3415  0187  0857               	movf	___ftadd@sign^(0+128),w
  3416  0188  3907               	andlw	7
  3417  0189  1903               	btfsc	3,2
  3418  018A  2991               	goto	l2219
  3419  018B  297D               	goto	l2211
  3420  018C                     l2217:	
  3421  018C  1003               	clrc
  3422  018D  0CD0               	rrf	(___ftadd@f1+2)^(0+128),f
  3423  018E  0CCF               	rrf	(___ftadd@f1+1)^(0+128),f
  3424  018F  0CCE               	rrf	___ftadd@f1^(0+128),f
  3425  0190  0AD9               	incf	___ftadd@exp1^(0+128),f
  3426  0191                     l2219:	
  3427  0191  0859               	movf	___ftadd@exp1^(0+128),w
  3428  0192  0658               	xorwf	___ftadd@exp2^(0+128),w
  3429  0193  1903               	btfsc	3,2
  3430  0194  29B2               	goto	l1039
  3431  0195  298C               	goto	l2217
  3432  0196                     l2221:	
  3433  0196  0859               	movf	___ftadd@exp1^(0+128),w
  3434  0197  0258               	subwf	___ftadd@exp2^(0+128),w
  3435  0198  1803               	skipnc
  3436  0199  29B2               	goto	l1039
  3437  019A                     l2223:	
  3438  019A  1003               	clrc
  3439  019B  0DCE               	rlf	___ftadd@f1^(0+128),f
  3440  019C  0DCF               	rlf	(___ftadd@f1+1)^(0+128),f
  3441  019D  0DD0               	rlf	(___ftadd@f1+2)^(0+128),f
  3442  019E  03D9               	decf	___ftadd@exp1^(0+128),f
  3443  019F  0858               	movf	___ftadd@exp2^(0+128),w
  3444  01A0  0659               	xorwf	___ftadd@exp1^(0+128),w
  3445  01A1  1903               	skipnz
  3446  01A2  29AE               	goto	l2231
  3447  01A3  03D7               	decf	___ftadd@sign^(0+128),f
  3448  01A4  0857               	movf	___ftadd@sign^(0+128),w
  3449  01A5  3907               	andlw	7
  3450  01A6  1903               	btfsc	3,2
  3451  01A7  29AE               	goto	l2231
  3452  01A8  299A               	goto	l2223
  3453  01A9                     l2229:	
  3454  01A9  1003               	clrc
  3455  01AA  0CD3               	rrf	(___ftadd@f2+2)^(0+128),f
  3456  01AB  0CD2               	rrf	(___ftadd@f2+1)^(0+128),f
  3457  01AC  0CD1               	rrf	___ftadd@f2^(0+128),f
  3458  01AD  0AD8               	incf	___ftadd@exp2^(0+128),f
  3459  01AE                     l2231:	
  3460  01AE  0859               	movf	___ftadd@exp1^(0+128),w
  3461  01AF  0658               	xorwf	___ftadd@exp2^(0+128),w
  3462  01B0  1D03               	skipz
  3463  01B1  29A9               	goto	l2229
  3464  01B2                     l1039:	
  3465  01B2  1FD7               	btfss	___ftadd@sign^(0+128),7
  3466  01B3  29BD               	goto	l2237
  3467  01B4  30FF               	movlw	255
  3468  01B5  06CE               	xorwf	___ftadd@f1^(0+128),f
  3469  01B6  06CF               	xorwf	(___ftadd@f1+1)^(0+128),f
  3470  01B7  06D0               	xorwf	(___ftadd@f1+2)^(0+128),f
  3471  01B8  0ACE               	incf	___ftadd@f1^(0+128),f
  3472  01B9  1903               	skipnz
  3473  01BA  0ACF               	incf	(___ftadd@f1+1)^(0+128),f
  3474  01BB  1903               	skipnz
  3475  01BC  0AD0               	incf	(___ftadd@f1+2)^(0+128),f
  3476  01BD                     l2237:	
  3477  01BD  1F57               	btfss	___ftadd@sign^(0+128),6
  3478  01BE  29C8               	goto	l2243
  3479  01BF  30FF               	movlw	255
  3480  01C0  06D1               	xorwf	___ftadd@f2^(0+128),f
  3481  01C1  06D2               	xorwf	(___ftadd@f2+1)^(0+128),f
  3482  01C2  06D3               	xorwf	(___ftadd@f2+2)^(0+128),f
  3483  01C3  0AD1               	incf	___ftadd@f2^(0+128),f
  3484  01C4  1903               	skipnz
  3485  01C5  0AD2               	incf	(___ftadd@f2+1)^(0+128),f
  3486  01C6  1903               	skipnz
  3487  01C7  0AD3               	incf	(___ftadd@f2+2)^(0+128),f
  3488  01C8                     l2243:	
  3489  01C8  01D7               	clrf	___ftadd@sign^(0+128)
  3490  01C9  084E               	movf	___ftadd@f1^(0+128),w
  3491  01CA  07D1               	addwf	___ftadd@f2^(0+128),f
  3492  01CB  084F               	movf	(___ftadd@f1+1)^(0+128),w
  3493  01CC  1103               	clrz
  3494  01CD  1803               	skipnc
  3495  01CE  0A4F               	incf	(___ftadd@f1+1)^(0+128),w
  3496  01CF  1D03               	btfss	3,2
  3497  01D0  07D2               	addwf	(___ftadd@f2+1)^(0+128),f
  3498  01D1  0850               	movf	(___ftadd@f1+2)^(0+128),w
  3499  01D2  1103               	clrz
  3500  01D3  1803               	skipnc
  3501  01D4  0A50               	incf	(___ftadd@f1+2)^(0+128),w
  3502  01D5  1D03               	btfss	3,2
  3503  01D6  07D3               	addwf	(___ftadd@f2+2)^(0+128),f
  3504  01D7  1FD3               	btfss	(___ftadd@f2+2)^(0+128),7
  3505  01D8  29E4               	goto	l2255
  3506  01D9  30FF               	movlw	255
  3507  01DA  06D1               	xorwf	___ftadd@f2^(0+128),f
  3508  01DB  06D2               	xorwf	(___ftadd@f2+1)^(0+128),f
  3509  01DC  06D3               	xorwf	(___ftadd@f2+2)^(0+128),f
  3510  01DD  0AD1               	incf	___ftadd@f2^(0+128),f
  3511  01DE  1903               	skipnz
  3512  01DF  0AD2               	incf	(___ftadd@f2+1)^(0+128),f
  3513  01E0  1903               	skipnz
  3514  01E1  0AD3               	incf	(___ftadd@f2+2)^(0+128),f
  3515  01E2  01D7               	clrf	___ftadd@sign^(0+128)
  3516  01E3  0AD7               	incf	___ftadd@sign^(0+128),f
  3517  01E4                     l2255:	
  3518  01E4  0851               	movf	___ftadd@f2^(0+128),w
  3519  01E5  00A2               	movwf	___ftpack@arg^(0+128)
  3520  01E6  0852               	movf	(___ftadd@f2+1)^(0+128),w
  3521  01E7  00A3               	movwf	(___ftpack@arg+1)^(0+128)
  3522  01E8  0853               	movf	(___ftadd@f2+2)^(0+128),w
  3523  01E9  00A4               	movwf	(___ftpack@arg+2)^(0+128)
  3524  01EA  0859               	movf	___ftadd@exp1^(0+128),w
  3525  01EB  00A5               	movwf	___ftpack@exp^(0+128)
  3526  01EC  0857               	movf	___ftadd@sign^(0+128),w
  3527  01ED  00A6               	movwf	___ftpack@sign^(0+128)
  3528  01EE  2280               	fcall	___ftpack
  3529  01EF  0822               	movf	?___ftpack^(0+128),w
  3530  01F0  00CE               	movwf	?___ftadd^(0+128)
  3531  01F1  0823               	movf	(?___ftpack+1)^(0+128),w
  3532  01F2  00CF               	movwf	(?___ftadd+1)^(0+128)
  3533  01F3  0824               	movf	(?___ftpack+2)^(0+128),w
  3534  01F4  00D0               	movwf	(?___ftadd+2)^(0+128)
  3535  01F5  0008               	return
  3536  01F6                     __end_of___ftadd:	
  3537  01F6                     __ptext8:	
  3538 ;; *************** function ___altoft *****************
  3539 ;; Defined at:
  3540 ;;		line 42 in file "/opt/microchip/xc8/v1.38/sources/common/altoft.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  c               4   10[BANK1 ] long 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  sign            1   15[BANK1 ] unsigned char 
  3545 ;;  exp             1   14[BANK1 ] unsigned char 
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  3   10[BANK1 ] float 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, pclath, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 300/900
  3552 ;;		On exit  : 300/100
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:      BANK1   BANK3  BANK2l
  3555 ;;      Params:         4       0       0
  3556 ;;      Locals:         2       0       0
  3557 ;;      Temps:          0       0       0
  3558 ;;      Totals:         6       0       0
  3559 ;;Total ram usage:        6 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    2
  3562 ;; This function calls:
  3563 ;;		___ftpack
  3564 ;; This function is called by:
  3565 ;;		_UART_Init
  3566 ;;		_trunc
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           
  3571                           ;psect for function ___altoft
  3572  01F6                     ___altoft:	
  3573  01F6  308E               	movlw	142
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  3577  01F7  01AF               	clrf	___altoft@sign^(0+128)
  3578  01F8  00AE               	movwf	___altoft@exp^(0+128)
  3579  01F9  1FAD               	btfss	(___altoft@c+3)^(0+128),7
  3580  01FA  2A08               	goto	l2177
  3581  01FB  09AA               	comf	___altoft@c^(0+128),f
  3582  01FC  09AB               	comf	(___altoft@c+1)^(0+128),f
  3583  01FD  09AC               	comf	(___altoft@c+2)^(0+128),f
  3584  01FE  09AD               	comf	(___altoft@c+3)^(0+128),f
  3585  01FF  0AAA               	incf	___altoft@c^(0+128),f
  3586  0200  1903               	skipnz
  3587  0201  0AAB               	incf	(___altoft@c+1)^(0+128),f
  3588  0202  1903               	skipnz
  3589  0203  0AAC               	incf	(___altoft@c+2)^(0+128),f
  3590  0204  1903               	skipnz
  3591  0205  0AAD               	incf	(___altoft@c+3)^(0+128),f
  3592  0206  01AF               	clrf	___altoft@sign^(0+128)
  3593  0207  0AAF               	incf	___altoft@sign^(0+128),f
  3594  0208                     l2177:	
  3595  0208  30FF               	movlw	255
  3596  0209  052D               	andwf	(___altoft@c+3)^(0+128),w
  3597  020A  1903               	btfsc	3,2
  3598  020B  2A13               	goto	l2179
  3599  020C  1003               	clrc
  3600  020D  0CAD               	rrf	(___altoft@c+3)^(0+128),f
  3601  020E  0CAC               	rrf	(___altoft@c+2)^(0+128),f
  3602  020F  0CAB               	rrf	(___altoft@c+1)^(0+128),f
  3603  0210  0CAA               	rrf	___altoft@c^(0+128),f
  3604  0211  0AAE               	incf	___altoft@exp^(0+128),f
  3605  0212  2A08               	goto	l2177
  3606  0213                     l2179:	
  3607  0213  082A               	movf	___altoft@c^(0+128),w
  3608  0214  00A2               	movwf	___ftpack@arg^(0+128)
  3609  0215  082B               	movf	(___altoft@c+1)^(0+128),w
  3610  0216  00A3               	movwf	(___ftpack@arg+1)^(0+128)
  3611  0217  082C               	movf	(___altoft@c+2)^(0+128),w
  3612  0218  00A4               	movwf	(___ftpack@arg+2)^(0+128)
  3613  0219  082E               	movf	___altoft@exp^(0+128),w
  3614  021A  00A5               	movwf	___ftpack@exp^(0+128)
  3615  021B  082F               	movf	___altoft@sign^(0+128),w
  3616  021C  00A6               	movwf	___ftpack@sign^(0+128)
  3617  021D  2280               	fcall	___ftpack
  3618  021E  0822               	movf	?___ftpack^(0+128),w
  3619  021F  00AA               	movwf	?___altoft^(0+128)
  3620  0220  0823               	movf	(?___ftpack+1)^(0+128),w
  3621  0221  00AB               	movwf	(?___altoft+1)^(0+128)
  3622  0222  0824               	movf	(?___ftpack+2)^(0+128),w
  3623  0223  00AC               	movwf	(?___altoft+2)^(0+128)
  3624  0224  0008               	return
  3625  0225                     __end_of___altoft:	
  3626  0225                     __ptext7:	
  3627 ;; *************** function ___fttol *****************
  3628 ;; Defined at:
  3629 ;;		line 44 in file "/opt/microchip/xc8/v1.38/sources/common/fttol.c"
  3630 ;; Parameters:    Size  Location     Type
  3631 ;;  f1              3   58[BANK1 ] float 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  lval            4   66[BANK1 ] unsigned long 
  3634 ;;  exp1            1   70[BANK1 ] unsigned char 
  3635 ;;  sign1           1   65[BANK1 ] unsigned char 
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  4   58[BANK1 ] long 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0
  3640 ;; Tracked objects:
  3641 ;;		On entry : 300/900
  3642 ;;		On exit  : 300/100
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:      BANK1   BANK3  BANK2l
  3645 ;;      Params:         4       0       0
  3646 ;;      Locals:         6       0       0
  3647 ;;      Temps:          3       0       0
  3648 ;;      Totals:        13       0       0
  3649 ;;Total ram usage:       13 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    1
  3652 ;; This function calls:
  3653 ;;		Nothing
  3654 ;; This function is called by:
  3655 ;;		_UART_Init
  3656 ;;		_trunc
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function ___fttol
  3662  0225                     ___fttol:	
  3663                           
  3664                           ;incstack = 0
  3665                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3666  0225  2406  120A  118A   	fcall	PL30	;call to abstracted procedure
  3667  0228  1003               	clrc
  3668  0229  0D5F               	rlf	(??___fttol^(0+128)+1),w
  3669  022A  0D60               	rlf	(??___fttol^(0+128)+2),w
  3670  022B  00E6               	movwf	___fttol@exp1^(0+128)
  3671  022C  0866               	movf	___fttol@exp1^(0+128),w
  3672  022D  1D03               	btfss	3,2
  3673  022E  2A34               	goto	l2263
  3674  022F                     l2261:	
  3675  022F  01DA               	clrf	?___fttol^(0+128)
  3676  0230  01DB               	clrf	(?___fttol+1)^(0+128)
  3677  0231  01DC               	clrf	(?___fttol+2)^(0+128)
  3678  0232  01DD               	clrf	(?___fttol+3)^(0+128)
  3679  0233  0008               	return
  3680  0234                     l2263:	
  3681  0234  2406  120A  118A   	fcall	PL30	;call to abstracted procedure
  3682  0237  3017               	movlw	23
  3683  0238                     u2005:	
  3684  0238  1003               	clrc
  3685  0239  0CE0               	rrf	(??___fttol^(0+128)+2),f
  3686  023A  0CDF               	rrf	(??___fttol^(0+128)+1),f
  3687  023B  0CDE               	rrf	??___fttol^(0+128),f
  3688  023C  3EFF               	addlw	-1
  3689  023D  1D03               	skipz
  3690  023E  2A38               	goto	u2005
  3691  023F  085E               	movf	??___fttol^(0+128),w
  3692  0240  00E1               	movwf	___fttol@sign1^(0+128)
  3693  0241  17DB               	bsf	(___fttol@f1^(0+128)+1),7
  3694  0242  01DC               	clrf	(___fttol@f1+2)^(0+128)
  3695  0243  085A               	movf	___fttol@f1^(0+128),w
  3696  0244  00E2               	movwf	___fttol@lval^(0+128)
  3697  0245  085B               	movf	(___fttol@f1+1)^(0+128),w
  3698  0246  00E3               	movwf	(___fttol@lval^(0+128)+1)
  3699  0247  085C               	movf	(___fttol@f1+2)^(0+128),w
  3700  0248  00E4               	movwf	(___fttol@lval^(0+128)+2)
  3701  0249  308E               	movlw	142
  3702  024A  01E5               	clrf	(___fttol@lval^(0+128)+3)
  3703  024B  02E6               	subwf	___fttol@exp1^(0+128),f
  3704  024C  1FE6               	btfss	___fttol@exp1^(0+128),7
  3705  024D  2A5B               	goto	l2283
  3706  024E  0866               	movf	___fttol@exp1^(0+128),w
  3707  024F  3A80               	xorlw	128
  3708  0250  3E8F               	addlw	143
  3709  0251  1C03               	btfss	3,0
  3710  0252  2A2F               	goto	l2261
  3711  0253                     l2279:	
  3712  0253  1003               	clrc
  3713  0254  0CE5               	rrf	(___fttol@lval+3)^(0+128),f
  3714  0255  0CE4               	rrf	(___fttol@lval+2)^(0+128),f
  3715  0256  0CE3               	rrf	(___fttol@lval+1)^(0+128),f
  3716  0257  0CE2               	rrf	___fttol@lval^(0+128),f
  3717  0258  0FE6               	incfsz	___fttol@exp1^(0+128),f
  3718  0259  2A53               	goto	l2279
  3719  025A  2A69               	goto	l2291
  3720  025B                     l2283:	
  3721  025B  3018               	movlw	24
  3722  025C  0266               	subwf	___fttol@exp1^(0+128),w
  3723  025D  1803               	btfsc	3,0
  3724  025E  2A2F               	goto	l2261
  3725  025F                     l2289:	
  3726  025F  0866               	movf	___fttol@exp1^(0+128),w
  3727  0260  1903               	btfsc	3,2
  3728  0261  2A69               	goto	l2291
  3729  0262  1003               	clrc
  3730  0263  0DE2               	rlf	___fttol@lval^(0+128),f
  3731  0264  0DE3               	rlf	(___fttol@lval+1)^(0+128),f
  3732  0265  0DE4               	rlf	(___fttol@lval+2)^(0+128),f
  3733  0266  0DE5               	rlf	(___fttol@lval+3)^(0+128),f
  3734  0267  03E6               	decf	___fttol@exp1^(0+128),f
  3735  0268  2A5F               	goto	l2289
  3736  0269                     l2291:	
  3737  0269  0861               	movf	___fttol@sign1^(0+128),w
  3738  026A  1903               	btfsc	3,2
  3739  026B  2A77               	goto	l2295
  3740  026C  09E2               	comf	___fttol@lval^(0+128),f
  3741  026D  09E3               	comf	(___fttol@lval+1)^(0+128),f
  3742  026E  09E4               	comf	(___fttol@lval+2)^(0+128),f
  3743  026F  09E5               	comf	(___fttol@lval+3)^(0+128),f
  3744  0270  0AE2               	incf	___fttol@lval^(0+128),f
  3745  0271  1903               	skipnz
  3746  0272  0AE3               	incf	(___fttol@lval+1)^(0+128),f
  3747  0273  1903               	skipnz
  3748  0274  0AE4               	incf	(___fttol@lval+2)^(0+128),f
  3749  0275  1903               	skipnz
  3750  0276  0AE5               	incf	(___fttol@lval+3)^(0+128),f
  3751  0277                     l2295:	
  3752  0277  0865               	movf	(___fttol@lval+3)^(0+128),w
  3753  0278  00DD               	movwf	(?___fttol+3)^(0+128)
  3754  0279  0864               	movf	(___fttol@lval+2)^(0+128),w
  3755  027A  00DC               	movwf	(?___fttol+2)^(0+128)
  3756  027B  0863               	movf	(___fttol@lval+1)^(0+128),w
  3757  027C  00DB               	movwf	(?___fttol+1)^(0+128)
  3758  027D  0862               	movf	___fttol@lval^(0+128),w
  3759  027E  00DA               	movwf	?___fttol^(0+128)
  3760  027F  0008               	return
  3761  0280                     __end_of___fttol:	
  3762  0280                     __ptext13:	
  3763 ;; *************** function ___ftpack *****************
  3764 ;; Defined at:
  3765 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/float.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  arg             3    2[BANK1 ] unsigned um
  3768 ;;  exp             1    5[BANK1 ] unsigned char 
  3769 ;;  sign            1    6[BANK1 ] unsigned char 
  3770 ;; Auto vars:     Size  Location     Type
  3771 ;;		None
  3772 ;; Return value:  Size  Location     Type
  3773 ;;                  3    2[BANK1 ] float 
  3774 ;; Registers used:
  3775 ;;		wreg, status,2, status,0
  3776 ;; Tracked objects:
  3777 ;;		On entry : 300/900
  3778 ;;		On exit  : 300/100
  3779 ;;		Unchanged: 0/0
  3780 ;; Data sizes:      BANK1   BANK3  BANK2l
  3781 ;;      Params:         5       0       0
  3782 ;;      Locals:         0       0       0
  3783 ;;      Temps:          3       0       0
  3784 ;;      Totals:         8       0       0
  3785 ;;Total ram usage:        8 bytes
  3786 ;; Hardware stack levels used:    1
  3787 ;; Hardware stack levels required when called:    1
  3788 ;; This function calls:
  3789 ;;		Nothing
  3790 ;; This function is called by:
  3791 ;;		___altoft
  3792 ;;		___ftadd
  3793 ;;		___ftdiv
  3794 ;;		___ftmul
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           
  3799                           ;psect for function ___ftpack
  3800  0280                     ___ftpack:	
  3801                           
  3802                           ;incstack = 0
  3803                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  3804  0280  0825               	movf	___ftpack@exp^(0+128),w
  3805  0281  1903               	btfsc	3,2
  3806  0282  2A88               	goto	l1003
  3807  0283  0824               	movf	(___ftpack@arg+2)^(0+128),w
  3808  0284  0423               	iorwf	(___ftpack@arg+1)^(0+128),w
  3809  0285  0422               	iorwf	___ftpack@arg^(0+128),w
  3810  0286  1D03               	skipz
  3811  0287  2A91               	goto	l2131
  3812  0288                     l1003:	
  3813  0288  01A2               	clrf	?___ftpack^(0+128)
  3814  0289  01A3               	clrf	(?___ftpack+1)^(0+128)
  3815  028A  01A4               	clrf	(?___ftpack+2)^(0+128)
  3816  028B  0008               	return
  3817  028C                     l2129:	
  3818  028C  0AA5               	incf	___ftpack@exp^(0+128),f
  3819  028D  1003               	clrc
  3820  028E  0CA4               	rrf	(___ftpack@arg+2)^(0+128),f
  3821  028F  0CA3               	rrf	(___ftpack@arg+1)^(0+128),f
  3822  0290  0CA2               	rrf	___ftpack@arg^(0+128),f
  3823  0291                     l2131:	
  3824  0291  30FE               	movlw	254
  3825  0292  0524               	andwf	(___ftpack@arg+2)^(0+128),w
  3826  0293  1903               	btfsc	3,2
  3827  0294  2AA0               	goto	l2135
  3828  0295  2A8C               	goto	l2129
  3829  0296                     l2133:	
  3830  0296  0AA5               	incf	___ftpack@exp^(0+128),f
  3831  0297  0AA2               	incf	___ftpack@arg^(0+128),f
  3832  0298  1903               	skipnz
  3833  0299  0AA3               	incf	(___ftpack@arg+1)^(0+128),f
  3834  029A  1903               	skipnz
  3835  029B  0AA4               	incf	(___ftpack@arg+2)^(0+128),f
  3836  029C  1003               	clrc
  3837  029D  0CA4               	rrf	(___ftpack@arg+2)^(0+128),f
  3838  029E  0CA3               	rrf	(___ftpack@arg+1)^(0+128),f
  3839  029F  0CA2               	rrf	___ftpack@arg^(0+128),f
  3840  02A0                     l2135:	
  3841  02A0  30FF               	movlw	255
  3842  02A1  0524               	andwf	(___ftpack@arg+2)^(0+128),w
  3843  02A2  1903               	btfsc	3,2
  3844  02A3  2AAE               	goto	l2139
  3845  02A4  2A96               	goto	l2133
  3846  02A5                     l2141:	
  3847  02A5  3002               	movlw	2
  3848  02A6  0225               	subwf	___ftpack@exp^(0+128),w
  3849  02A7  1C03               	btfss	3,0
  3850  02A8  2AB0               	goto	l1015
  3851  02A9  03A5               	decf	___ftpack@exp^(0+128),f
  3852  02AA  1003               	clrc
  3853  02AB  0DA2               	rlf	___ftpack@arg^(0+128),f
  3854  02AC  0DA3               	rlf	(___ftpack@arg+1)^(0+128),f
  3855  02AD  0DA4               	rlf	(___ftpack@arg+2)^(0+128),f
  3856  02AE                     l2139:	
  3857  02AE  1FA3               	btfss	(___ftpack@arg+1)^(0+128),7
  3858  02AF  2AA5               	goto	l2141
  3859  02B0                     l1015:	
  3860  02B0  1C25               	btfss	___ftpack@exp^(0+128),0
  3861  02B1  13A3               	bcf	(___ftpack@arg^(0+128)+1),7
  3862  02B2  1003               	clrc
  3863  02B3  0CA5               	rrf	___ftpack@exp^(0+128),f
  3864  02B4  0825               	movf	___ftpack@exp^(0+128),w
  3865  02B5  00A9               	movwf	(??___ftpack^(0+128)+2)
  3866  02B6  01A8               	clrf	(??___ftpack^(0+128)+1)
  3867  02B7  01A7               	clrf	??___ftpack^(0+128)
  3868  02B8  0827               	movf	??___ftpack^(0+128),w
  3869  02B9  04A2               	iorwf	___ftpack@arg^(0+128),f
  3870  02BA  0828               	movf	(??___ftpack+1)^(0+128),w
  3871  02BB  04A3               	iorwf	(___ftpack@arg+1)^(0+128),f
  3872  02BC  0829               	movf	(??___ftpack+2)^(0+128),w
  3873  02BD  04A4               	iorwf	(___ftpack@arg+2)^(0+128),f
  3874  02BE  0826               	movf	___ftpack@sign^(0+128),w
  3875  02BF  1D03               	btfss	3,2
  3876  02C0  17A4               	bsf	(___ftpack@arg^(0+128)+2),7
  3877  02C1  0008               	return
  3878  02C2                     __end_of___ftpack:	
  3879  02C2                     __ptext12:	
  3880 ;; *************** function ___ftdiv *****************
  3881 ;; Defined at:
  3882 ;;		line 56 in file "/opt/microchip/xc8/v1.38/sources/common/ftdiv.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;  f2              3   31[BANK1 ] float 
  3885 ;;  f1              3   34[BANK1 ] float 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  f3              3   41[BANK1 ] float 
  3888 ;;  sign            1   45[BANK1 ] unsigned char 
  3889 ;;  exp             1   44[BANK1 ] unsigned char 
  3890 ;;  cntr            1   40[BANK1 ] unsigned char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  3   31[BANK1 ] float 
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0, pclath, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 300/900
  3897 ;;		On exit  : 300/100
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:      BANK1   BANK3  BANK2l
  3900 ;;      Params:         6       0       0
  3901 ;;      Locals:         6       0       0
  3902 ;;      Temps:          3       0       0
  3903 ;;      Totals:        15       0       0
  3904 ;;Total ram usage:       15 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    2
  3907 ;; This function calls:
  3908 ;;		___ftpack
  3909 ;; This function is called by:
  3910 ;;		_UART_Init
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function ___ftdiv
  3916  02C2                     ___ftdiv:	
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3920  02C2  0842               	movf	___ftdiv@f1^(0+128),w
  3921  02C3  00C5               	movwf	??___ftdiv^(0+128)
  3922  02C4  0843               	movf	(___ftdiv@f1+1)^(0+128),w
  3923  02C5  00C6               	movwf	(??___ftdiv^(0+128)+1)
  3924  02C6  0844               	movf	(___ftdiv@f1+2)^(0+128),w
  3925  02C7  00C7               	movwf	(??___ftdiv^(0+128)+2)
  3926  02C8  1003               	clrc
  3927  02C9  0D46               	rlf	(??___ftdiv^(0+128)+1),w
  3928  02CA  0D47               	rlf	(??___ftdiv^(0+128)+2),w
  3929  02CB  00CC               	movwf	___ftdiv@exp^(0+128)
  3930  02CC  084C               	movf	___ftdiv@exp^(0+128),w
  3931  02CD  1D03               	btfss	3,2
  3932  02CE  2AD3               	goto	l2477
  3933  02CF  01BF               	clrf	?___ftdiv^(0+128)
  3934  02D0  01C0               	clrf	(?___ftdiv+1)^(0+128)
  3935  02D1  01C1               	clrf	(?___ftdiv+2)^(0+128)
  3936  02D2  0008               	return
  3937  02D3                     l2477:	
  3938  02D3  083F               	movf	___ftdiv@f2^(0+128),w
  3939  02D4  00C5               	movwf	??___ftdiv^(0+128)
  3940  02D5  0840               	movf	(___ftdiv@f2+1)^(0+128),w
  3941  02D6  00C6               	movwf	(??___ftdiv^(0+128)+1)
  3942  02D7  0841               	movf	(___ftdiv@f2+2)^(0+128),w
  3943  02D8  00C7               	movwf	(??___ftdiv^(0+128)+2)
  3944  02D9  1003               	clrc
  3945  02DA  0D46               	rlf	(??___ftdiv^(0+128)+1),w
  3946  02DB  0D47               	rlf	(??___ftdiv^(0+128)+2),w
  3947  02DC  00CD               	movwf	___ftdiv@sign^(0+128)
  3948  02DD  084D               	movf	___ftdiv@sign^(0+128),w
  3949  02DE  1D03               	btfss	3,2
  3950  02DF  2AE4               	goto	l1057
  3951  02E0  01BF               	clrf	?___ftdiv^(0+128)
  3952  02E1  01C0               	clrf	(?___ftdiv+1)^(0+128)
  3953  02E2  01C1               	clrf	(?___ftdiv+2)^(0+128)
  3954  02E3  0008               	return
  3955  02E4                     l1057:	
  3956  02E4  3089               	movlw	137
  3957  02E5  01C9               	clrf	___ftdiv@f3^(0+128)
  3958  02E6  01CA               	clrf	(___ftdiv@f3+1)^(0+128)
  3959  02E7  01CB               	clrf	(___ftdiv@f3+2)^(0+128)
  3960  02E8  074D               	addwf	___ftdiv@sign^(0+128),w
  3961  02E9  00C5               	movwf	??___ftdiv^(0+128)
  3962  02EA  02CC               	subwf	___ftdiv@exp^(0+128),f
  3963  02EB  0844               	movf	(___ftdiv@f1^(0+128)+2),w
  3964  02EC  00CD               	movwf	___ftdiv@sign^(0+128)
  3965  02ED  0841               	movf	(___ftdiv@f2^(0+128)+2),w
  3966  02EE  06CD               	xorwf	___ftdiv@sign^(0+128),f
  3967  02EF  3080               	movlw	128
  3968  02F0  05CD               	andwf	___ftdiv@sign^(0+128),f
  3969  02F1  3018               	movlw	24
  3970  02F2  17C3               	bsf	(___ftdiv@f1^(0+128)+1),7
  3971  02F3  01C4               	clrf	(___ftdiv@f1+2)^(0+128)
  3972  02F4  17C0               	bsf	(___ftdiv@f2^(0+128)+1),7
  3973  02F5  01C1               	clrf	(___ftdiv@f2+2)^(0+128)
  3974  02F6  00C8               	movwf	___ftdiv@cntr^(0+128)
  3975  02F7                     l2499:	
  3976  02F7  1003               	clrc
  3977  02F8  0DC9               	rlf	___ftdiv@f3^(0+128),f
  3978  02F9  0DCA               	rlf	(___ftdiv@f3+1)^(0+128),f
  3979  02FA  0DCB               	rlf	(___ftdiv@f3+2)^(0+128),f
  3980  02FB  0841               	movf	(___ftdiv@f2+2)^(0+128),w
  3981  02FC  0244               	subwf	(___ftdiv@f1+2)^(0+128),w
  3982  02FD  1D03               	skipz
  3983  02FE  2B05               	goto	u2385
  3984  02FF  0840               	movf	(___ftdiv@f2+1)^(0+128),w
  3985  0300  0243               	subwf	(___ftdiv@f1+1)^(0+128),w
  3986  0301  1D03               	skipz
  3987  0302  2B05               	goto	u2385
  3988  0303  083F               	movf	___ftdiv@f2^(0+128),w
  3989  0304  0242               	subwf	___ftdiv@f1^(0+128),w
  3990  0305                     u2385:	
  3991  0305  1C03               	skipc
  3992  0306  2B13               	goto	L11
  3993  0307  083F               	movf	___ftdiv@f2^(0+128),w
  3994  0308  02C2               	subwf	___ftdiv@f1^(0+128),f
  3995  0309  0840               	movf	(___ftdiv@f2+1)^(0+128),w
  3996  030A  1C03               	skipc
  3997  030B  0F40               	incfsz	(___ftdiv@f2+1)^(0+128),w
  3998  030C  02C3               	subwf	(___ftdiv@f1+1)^(0+128),f
  3999  030D  0841               	movf	(___ftdiv@f2+2)^(0+128),w
  4000  030E  1C03               	skipc
  4001  030F  0A41               	incf	(___ftdiv@f2+2)^(0+128),w
  4002  0310  02C4               	subwf	(___ftdiv@f1+2)^(0+128),f
  4003  0311  1449               	bsf	___ftdiv@f3^(0+128),0
  4004  0312  1003               	clrc
  4005  0313                     L11:	
  4006  0313  0DC2               	rlf	___ftdiv@f1^(0+128),f
  4007  0314  0DC3               	rlf	(___ftdiv@f1+1)^(0+128),f
  4008  0315  0DC4               	rlf	(___ftdiv@f1+2)^(0+128),f
  4009  0316  0BC8               	decfsz	___ftdiv@cntr^(0+128),f
  4010  0317  2AF7               	goto	l2499
  4011  0318  0849               	movf	___ftdiv@f3^(0+128),w
  4012  0319  00A2               	movwf	___ftpack@arg^(0+128)
  4013  031A  084A               	movf	(___ftdiv@f3+1)^(0+128),w
  4014  031B  00A3               	movwf	(___ftpack@arg+1)^(0+128)
  4015  031C  084B               	movf	(___ftdiv@f3+2)^(0+128),w
  4016  031D  00A4               	movwf	(___ftpack@arg+2)^(0+128)
  4017  031E  084C               	movf	___ftdiv@exp^(0+128),w
  4018  031F  00A5               	movwf	___ftpack@exp^(0+128)
  4019  0320  084D               	movf	___ftdiv@sign^(0+128),w
  4020  0321  00A6               	movwf	___ftpack@sign^(0+128)
  4021  0322  2280               	fcall	___ftpack
  4022  0323  0822               	movf	?___ftpack^(0+128),w
  4023  0324  00BF               	movwf	?___ftdiv^(0+128)
  4024  0325  0823               	movf	(?___ftpack+1)^(0+128),w
  4025  0326  00C0               	movwf	(?___ftdiv+1)^(0+128)
  4026  0327  0824               	movf	(?___ftpack+2)^(0+128),w
  4027  0328  00C1               	movwf	(?___ftdiv+2)^(0+128)
  4028  0329  0008               	return
  4029  032A                     __end_of___ftdiv:	
  4030  032A                     __ptext11:	
  4031 ;; *************** function ___ftmul *****************
  4032 ;; Defined at:
  4033 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/ftmul.c"
  4034 ;; Parameters:    Size  Location     Type
  4035 ;;  f1              3   16[BANK1 ] float 
  4036 ;;  f2              3   19[BANK1 ] float 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  f3_as_produc    3   26[BANK1 ] unsigned um
  4039 ;;  sign            1   30[BANK1 ] unsigned char 
  4040 ;;  cntr            1   29[BANK1 ] unsigned char 
  4041 ;;  exp             1   25[BANK1 ] unsigned char 
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  3   16[BANK1 ] float 
  4044 ;; Registers used:
  4045 ;;		wreg, status,2, status,0, pclath, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 300/900
  4048 ;;		On exit  : 300/100
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:      BANK1   BANK3  BANK2l
  4051 ;;      Params:         6       0       0
  4052 ;;      Locals:         6       0       0
  4053 ;;      Temps:          3       0       0
  4054 ;;      Totals:        15       0       0
  4055 ;;Total ram usage:       15 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    2
  4058 ;; This function calls:
  4059 ;;		___ftpack
  4060 ;; This function is called by:
  4061 ;;		_UART_Init
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           
  4066                           ;psect for function ___ftmul
  4067  032A                     ___ftmul:	
  4068                           
  4069                           ;incstack = 0
  4070                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4071  032A  0830               	movf	___ftmul@f1^(0+128),w
  4072  032B  00B6               	movwf	??___ftmul^(0+128)
  4073  032C  0831               	movf	(___ftmul@f1+1)^(0+128),w
  4074  032D  00B7               	movwf	(??___ftmul^(0+128)+1)
  4075  032E  0832               	movf	(___ftmul@f1+2)^(0+128),w
  4076  032F  00B8               	movwf	(??___ftmul^(0+128)+2)
  4077  0330  1003               	clrc
  4078  0331  0D37               	rlf	(??___ftmul^(0+128)+1),w
  4079  0332  0D38               	rlf	(??___ftmul^(0+128)+2),w
  4080  0333  00B9               	movwf	___ftmul@exp^(0+128)
  4081  0334  0839               	movf	___ftmul@exp^(0+128),w
  4082  0335  1D03               	btfss	3,2
  4083  0336  2B3B               	goto	l2517
  4084  0337  01B0               	clrf	?___ftmul^(0+128)
  4085  0338  01B1               	clrf	(?___ftmul+1)^(0+128)
  4086  0339  01B2               	clrf	(?___ftmul+2)^(0+128)
  4087  033A  0008               	return
  4088  033B                     l2517:	
  4089  033B  0833               	movf	___ftmul@f2^(0+128),w
  4090  033C  00B6               	movwf	??___ftmul^(0+128)
  4091  033D  0834               	movf	(___ftmul@f2+1)^(0+128),w
  4092  033E  00B7               	movwf	(??___ftmul^(0+128)+1)
  4093  033F  0835               	movf	(___ftmul@f2+2)^(0+128),w
  4094  0340  00B8               	movwf	(??___ftmul^(0+128)+2)
  4095  0341  1003               	clrc
  4096  0342  0D37               	rlf	(??___ftmul^(0+128)+1),w
  4097  0343  0D38               	rlf	(??___ftmul^(0+128)+2),w
  4098  0344  00BE               	movwf	___ftmul@sign^(0+128)
  4099  0345  083E               	movf	___ftmul@sign^(0+128),w
  4100  0346  1D03               	btfss	3,2
  4101  0347  2B4C               	goto	l2521
  4102  0348  01B0               	clrf	?___ftmul^(0+128)
  4103  0349  01B1               	clrf	(?___ftmul+1)^(0+128)
  4104  034A  01B2               	clrf	(?___ftmul+2)^(0+128)
  4105  034B  0008               	return
  4106  034C                     l2521:	
  4107  034C  083E               	movf	___ftmul@sign^(0+128),w
  4108  034D  3E7B               	addlw	123
  4109  034E  07B9               	addwf	___ftmul@exp^(0+128),f
  4110  034F  0832               	movf	(___ftmul@f1^(0+128)+2),w
  4111  0350  00BE               	movwf	___ftmul@sign^(0+128)
  4112  0351  0835               	movf	(___ftmul@f2^(0+128)+2),w
  4113  0352  06BE               	xorwf	___ftmul@sign^(0+128),f
  4114  0353  3080               	movlw	128
  4115  0354  05BE               	andwf	___ftmul@sign^(0+128),f
  4116  0355  3007               	movlw	7
  4117  0356  17B1               	bsf	(___ftmul@f1^(0+128)+1),7
  4118  0357  17B4               	bsf	(___ftmul@f2^(0+128)+1),7
  4119  0358  01B5               	clrf	(___ftmul@f2+2)^(0+128)
  4120  0359  01BA               	clrf	___ftmul@f3_as_product^(0+128)
  4121  035A  01BB               	clrf	(___ftmul@f3_as_product+1)^(0+128)
  4122  035B  01BC               	clrf	(___ftmul@f3_as_product+2)^(0+128)
  4123  035C  00BD               	movwf	___ftmul@cntr^(0+128)
  4124  035D                     l2539:	
  4125  035D  1C30               	btfss	___ftmul@f1^(0+128),0
  4126  035E  2B66               	goto	l2543
  4127  035F  23FB  120A  118A   	fcall	PL18	;call to abstracted procedure
  4128  0362  1803               	skipnc
  4129  0363  0A35               	incf	(___ftmul@f2+2)^(0+128),w
  4130  0364  1D03               	btfss	3,2
  4131  0365  07BC               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  4132  0366                     l2543:	
  4133  0366  1003               	clrc
  4134  0367  0CB2               	rrf	(___ftmul@f1+2)^(0+128),f
  4135  0368  0CB1               	rrf	(___ftmul@f1+1)^(0+128),f
  4136  0369  0CB0               	rrf	___ftmul@f1^(0+128),f
  4137  036A  1003               	clrc
  4138  036B  0DB3               	rlf	___ftmul@f2^(0+128),f
  4139  036C  0DB4               	rlf	(___ftmul@f2+1)^(0+128),f
  4140  036D  0DB5               	rlf	(___ftmul@f2+2)^(0+128),f
  4141  036E  0BBD               	decfsz	___ftmul@cntr^(0+128),f
  4142  036F  2B5D               	goto	l2539
  4143  0370  3009               	movlw	9
  4144  0371  00BD               	movwf	___ftmul@cntr^(0+128)
  4145  0372                     l2551:	
  4146  0372  1C30               	btfss	___ftmul@f1^(0+128),0
  4147  0373  2B7B               	goto	l2555
  4148  0374  23FB  120A  118A   	fcall	PL18	;call to abstracted procedure
  4149  0377  1803               	skipnc
  4150  0378  0A35               	incf	(___ftmul@f2+2)^(0+128),w
  4151  0379  1D03               	btfss	3,2
  4152  037A  07BC               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  4153  037B                     l2555:	
  4154  037B  1003               	clrc
  4155  037C  0CB2               	rrf	(___ftmul@f1+2)^(0+128),f
  4156  037D  0CB1               	rrf	(___ftmul@f1+1)^(0+128),f
  4157  037E  0CB0               	rrf	___ftmul@f1^(0+128),f
  4158  037F  1003               	clrc
  4159  0380  0CBC               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  4160  0381  0CBB               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  4161  0382  0CBA               	rrf	___ftmul@f3_as_product^(0+128),f
  4162  0383  0BBD               	decfsz	___ftmul@cntr^(0+128),f
  4163  0384  2B72               	goto	l2551
  4164  0385  083A               	movf	___ftmul@f3_as_product^(0+128),w
  4165  0386  00A2               	movwf	___ftpack@arg^(0+128)
  4166  0387  083B               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  4167  0388  00A3               	movwf	(___ftpack@arg+1)^(0+128)
  4168  0389  083C               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  4169  038A  00A4               	movwf	(___ftpack@arg+2)^(0+128)
  4170  038B  0839               	movf	___ftmul@exp^(0+128),w
  4171  038C  00A5               	movwf	___ftpack@exp^(0+128)
  4172  038D  083E               	movf	___ftmul@sign^(0+128),w
  4173  038E  00A6               	movwf	___ftpack@sign^(0+128)
  4174  038F  2280               	fcall	___ftpack
  4175  0390  0822               	movf	?___ftpack^(0+128),w
  4176  0391  00B0               	movwf	?___ftmul^(0+128)
  4177  0392  0823               	movf	(?___ftpack+1)^(0+128),w
  4178  0393  00B1               	movwf	(?___ftmul+1)^(0+128)
  4179  0394  0824               	movf	(?___ftpack+2)^(0+128),w
  4180  0395  00B2               	movwf	(?___ftmul+2)^(0+128)
  4181  0396  0008               	return
  4182  0397                     __end_of___ftmul:	
  4183  0397                     __ptext9:	
  4184 ;; *************** function ___ftsub *****************
  4185 ;; Defined at:
  4186 ;;		line 18 in file "/opt/microchip/xc8/v1.38/sources/common/ftsub.c"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;  f2              3    5[BANK3 ] float 
  4189 ;;  f1              3    8[BANK3 ] float 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  3    5[BANK3 ] float 
  4194 ;; Registers used:
  4195 ;;		wreg, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 300/B00
  4198 ;;		On exit  : 300/300
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:      BANK1   BANK3  BANK2l
  4201 ;;      Params:         0       6       0
  4202 ;;      Locals:         0       0       0
  4203 ;;      Temps:          0       0       0
  4204 ;;      Totals:         0       6       0
  4205 ;;Total ram usage:        6 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    3
  4208 ;; This function calls:
  4209 ;;		___ftadd
  4210 ;; This function is called by:
  4211 ;;		_round
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function ___ftsub
  4217  0397                     ___ftsub:	
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4221  0397  0817               	movf	(___ftsub@f2+2)^(0+384),w
  4222  0398  0416               	iorwf	(___ftsub@f2+1)^(0+384),w
  4223  0399  0415               	iorwf	___ftsub@f2^(0+384),w
  4224  039A  1903               	skipnz
  4225  039B  2B9E               	goto	l2403
  4226  039C  3080               	movlw	128
  4227  039D  0697               	xorwf	(___ftsub@f2+2)^(0+384),f
  4228  039E                     l2403:	
  4229  039E  0818               	movf	___ftsub@f1^(0+384),w
  4230  039F  1303               	bcf	3,6	;RP1=0, select bank1
  4231  03A0  00CE               	movwf	___ftadd@f1^(0+128)
  4232  03A1  1703               	bsf	3,6	;RP1=1, select bank3
  4233  03A2  0819               	movf	(___ftsub@f1+1)^(0+384),w
  4234  03A3  1303               	bcf	3,6	;RP1=0, select bank1
  4235  03A4  00CF               	movwf	(___ftadd@f1+1)^(0+128)
  4236  03A5  1703               	bsf	3,6	;RP1=1, select bank3
  4237  03A6  081A               	movf	(___ftsub@f1+2)^(0+384),w
  4238  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  4239  03A8  00D0               	movwf	(___ftadd@f1+2)^(0+128)
  4240  03A9  1703               	bsf	3,6	;RP1=1, select bank3
  4241  03AA  0815               	movf	___ftsub@f2^(0+384),w
  4242  03AB  1303               	bcf	3,6	;RP1=0, select bank1
  4243  03AC  00D1               	movwf	___ftadd@f2^(0+128)
  4244  03AD  1703               	bsf	3,6	;RP1=1, select bank3
  4245  03AE  0816               	movf	(___ftsub@f2+1)^(0+384),w
  4246  03AF  1303               	bcf	3,6	;RP1=0, select bank1
  4247  03B0  00D2               	movwf	(___ftadd@f2+1)^(0+128)
  4248  03B1  1703               	bsf	3,6	;RP1=1, select bank3
  4249  03B2  0817               	movf	(___ftsub@f2+2)^(0+384),w
  4250  03B3  1303               	bcf	3,6	;RP1=0, select bank1
  4251  03B4  00D3               	movwf	(___ftadd@f2+2)^(0+128)
  4252  03B5  2136               	fcall	___ftadd
  4253  03B6  084E               	movf	?___ftadd^(0+128),w
  4254  03B7  1703               	bsf	3,6	;RP1=1, select bank3
  4255  03B8  0095               	movwf	?___ftsub^(0+384)
  4256  03B9  1303               	bcf	3,6	;RP1=0, select bank1
  4257  03BA  084F               	movf	(?___ftadd+1)^(0+128),w
  4258  03BB  1703               	bsf	3,6	;RP1=1, select bank3
  4259  03BC  0096               	movwf	(?___ftsub+1)^(0+384)
  4260  03BD  1303               	bcf	3,6	;RP1=0, select bank1
  4261  03BE  0850               	movf	(?___ftadd+2)^(0+128),w
  4262  03BF  1703               	bsf	3,6	;RP1=1, select bank3
  4263  03C0  0097               	movwf	(?___ftsub+2)^(0+384)
  4264  03C1  0008               	return
  4265  03C2                     __end_of___ftsub:	
  4266  03C2                     __ptext6:	
  4267 ;; *************** function _frexp *****************
  4268 ;; Defined at:
  4269 ;;		line 254 in file "/opt/microchip/xc8/v1.38/sources/common/frexp.c"
  4270 ;; Parameters:    Size  Location     Type
  4271 ;;  value           3    2[BANK1 ] int 
  4272 ;;  eptr            1    5[BANK1 ] PTR int 
  4273 ;;		 -> trunc@expon(2), 
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  3    2[BANK1 ] PTR int 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4280 ;; Tracked objects:
  4281 ;;		On entry : 300/900
  4282 ;;		On exit  : B00/900
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:      BANK1   BANK3  BANK2l
  4285 ;;      Params:         4       0       0
  4286 ;;      Locals:         0       0       0
  4287 ;;      Temps:          2       0       0
  4288 ;;      Totals:         6       0       0
  4289 ;;Total ram usage:        6 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    1
  4292 ;; This function calls:
  4293 ;;		Nothing
  4294 ;; This function is called by:
  4295 ;;		_trunc
  4296 ;; This function uses a non-reentrant model
  4297 ;;
  4298                           
  4299                           
  4300                           ;psect for function _frexp
  4301  03C2                     _frexp:	
  4302                           
  4303                           ;incstack = 0
  4304                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  4305  03C2  0824               	movf	(frexp@value+2)^(0+128),w
  4306  03C3  0423               	iorwf	(frexp@value+1)^(0+128),w
  4307  03C4  0422               	iorwf	frexp@value^(0+128),w
  4308  03C5  1D03               	skipz
  4309  03C6  2BCE               	goto	l2305
  4310  03C7  0825               	movf	frexp@eptr^(0+128),w
  4311  03C8  0084               	movwf	4
  4312  03C9  1783               	bsf	3,7	;select IRP bank2
  4313  03CA  0180               	clrf	0
  4314  03CB  0A84               	incf	4,f
  4315  03CC  0180               	clrf	0
  4316  03CD  0008               	return
  4317  03CE                     l2305:	
  4318  03CE  0824               	movf	(frexp@value^(0+128)+2),w
  4319  03CF  397F               	andlw	127
  4320  03D0  00A6               	movwf	??_frexp^(0+128)
  4321  03D1  01A7               	clrf	(??_frexp^(0+128)+1)
  4322  03D2  1003               	clrc
  4323  03D3  0DA6               	rlf	??_frexp^(0+128),f
  4324  03D4  0DA7               	rlf	(??_frexp^(0+128)+1),f
  4325  03D5  0825               	movf	frexp@eptr^(0+128),w
  4326  03D6  0084               	movwf	4
  4327  03D7  0826               	movf	??_frexp^(0+128),w
  4328  03D8  1783               	bsf	3,7	;select IRP bank2
  4329  03D9  0080               	movwf	0
  4330  03DA  0A84               	incf	4,f
  4331  03DB  0827               	movf	(??_frexp+1)^(0+128),w
  4332  03DC  0080               	movwf	0
  4333  03DD  0D23               	rlf	(frexp@value^(0+128)+1),w
  4334  03DE  0D23               	rlf	(frexp@value^(0+128)+1),w
  4335  03DF  3901               	andlw	1
  4336  03E0  00A6               	movwf	??_frexp^(0+128)
  4337  03E1  01A7               	clrf	(??_frexp^(0+128)+1)
  4338  03E2  0825               	movf	frexp@eptr^(0+128),w
  4339  03E3  0084               	movwf	4
  4340  03E4  0826               	movf	??_frexp^(0+128),w
  4341  03E5  0480               	iorwf	0,f
  4342  03E6  0A84               	incf	4,f
  4343  03E7  0827               	movf	(??_frexp+1)^(0+128),w
  4344  03E8  0480               	iorwf	0,f
  4345  03E9  0825               	movf	frexp@eptr^(0+128),w
  4346  03EA  0084               	movwf	4
  4347  03EB  3082               	movlw	130
  4348  03EC  0780               	addwf	0,f
  4349  03ED  0F84               	incfsz	4,f
  4350  03EE  0800               	movf	0,w
  4351  03EF  1803               	skipnc
  4352  03F0  0A00               	incf	0,w
  4353  03F1  00FF               	movwf	127
  4354  03F2  3EFF               	addlw	255
  4355  03F3  0080               	movwf	0
  4356  03F4  0384               	decf	4,f
  4357  03F5  0824               	movf	(frexp@value^(0+128)+2),w
  4358  03F6  3980               	andlw	-128
  4359  03F7  383F               	iorlw	63
  4360  03F8  00A4               	movwf	(frexp@value^(0+128)+2)
  4361  03F9  13A3               	bcf	(frexp@value^(0+128)+1),7
  4362  03FA  0008               	return
  4363  03FB                     __end_of_frexp:	
  4364  03FB                     PL18:	
  4365  03FB  0833               	movf	___ftmul@f2^(0+128),w
  4366  03FC  07BA               	addwf	___ftmul@f3_as_product^(0+128),f
  4367  03FD  0834               	movf	(___ftmul@f2+1)^(0+128),w
  4368  03FE  1103               	clrz
  4369  03FF  1803               	skipnc
  4370  0400  0A34               	incf	(___ftmul@f2+1)^(0+128),w
  4371  0401  1D03               	btfss	3,2
  4372  0402  07BB               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  4373  0403  0835               	movf	(___ftmul@f2+2)^(0+128),w
  4374  0404  1103               	clrz
  4375  0405  0008               	return
  4376  0406                     __end_ofPL18:	
  4377  0406                     PL30:	
  4378  0406  085A               	movf	___fttol@f1^(0+128),w
  4379  0407  00DE               	movwf	??___fttol^(0+128)
  4380  0408  085B               	movf	(___fttol@f1+1)^(0+128),w
  4381  0409  00DF               	movwf	(??___fttol^(0+128)+1)
  4382  040A  085C               	movf	(___fttol@f1+2)^(0+128),w
  4383  040B  00E0               	movwf	(??___fttol^(0+128)+2)
  4384  040C  0008               	return
  4385  040D                     __end_ofPL30:	
  4386  040D                     PL32:	
  4387  040D  086A               	movf	round@x^(0+128),w
  4388  040E  00E7               	movwf	trunc@x^(0+128)
  4389  040F  086B               	movf	(round@x+1)^(0+128),w
  4390  0410  00E8               	movwf	(trunc@x+1)^(0+128)
  4391  0411  086C               	movf	(round@x+2)^(0+128),w
  4392  0412  00E9               	movwf	(trunc@x+2)^(0+128)
  4393  0413  0008               	return
  4394  0414                     __end_ofPL32:	
  4395                           
  4396                           	psect	text14
  4397  0B7E                     __ptext14:	
  4398 ;; *************** function _ResetTimer *****************
  4399 ;; Defined at:
  4400 ;;		line 80 in file "libs/gsk_algo_funcs.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;		None
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;		None
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      void 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : B00/0
  4411 ;;		On exit  : B00/0
  4412 ;;		Unchanged: 800/0
  4413 ;; Data sizes:      BANK1   BANK3  BANK2l
  4414 ;;      Params:         0       0       0
  4415 ;;      Locals:         0       0       0
  4416 ;;      Temps:          0       0       0
  4417 ;;      Totals:         0       0       0
  4418 ;;Total ram usage:        0 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    1
  4421 ;; This function calls:
  4422 ;;		Nothing
  4423 ;; This function is called by:
  4424 ;;		_main
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _ResetTimer
  4430  0B7E                     _ResetTimer:	
  4431                           
  4432                           ;gsk_algo_funcs.c: 81: TMR1 = -1000;
  4433                           
  4434                           ;incstack = 0
  4435                           ; Regs used in _ResetTimer: [wreg+status,2+status,0]
  4436  0B7E  30FC               	movlw	252
  4437  0B7F  008F               	movwf	15	;volatile
  4438  0B80  3018               	movlw	24
  4439  0B81  008E               	movwf	14	;volatile
  4440                           
  4441                           ;gsk_algo_funcs.c: 82: PIR1bits.TMR1IF = 0;
  4442  0B82  100C               	bcf	12,0	;volatile
  4443                           
  4444                           ;gsk_algo_funcs.c: 83: PIE1bits.TMR1IE = 1;
  4445  0B83  1683               	bsf	3,5	;RP0=1, select bank1
  4446  0B84  140C               	bsf	12,0	;volatile
  4447                           
  4448                           ;gsk_algo_funcs.c: 84: INTCONbits.PEIE = 1;
  4449  0B85  170B               	bsf	11,6	;volatile
  4450                           
  4451                           ;gsk_algo_funcs.c: 85: INTCONbits.GIE = 1;
  4452  0B86  178B               	bsf	11,7	;volatile
  4453                           
  4454                           ;gsk_algo_funcs.c: 86: T1CONbits.TMR1ON = 1;
  4455  0B87  1283               	bcf	3,5	;RP0=0, select bank0
  4456  0B88  1410               	bsf	16,0	;volatile
  4457                           
  4458                           ;gsk_algo_funcs.c: 87: T1CONbits.TMR1CS = 0;
  4459  0B89  1090               	bcf	16,1	;volatile
  4460                           
  4461                           ;gsk_algo_funcs.c: 88: T1CONbits.T1CKPS = 0x0;
  4462  0B8A  30CF               	movlw	-49
  4463  0B8B  0590               	andwf	16,f	;volatile
  4464  0B8C  0008               	return
  4465  0B8D                     __end_of_ResetTimer:	
  4466                           
  4467                           	psect	text15
  4468  0C21                     __ptext15:	
  4469 ;; *************** function _ReadVars *****************
  4470 ;; Defined at:
  4471 ;;		line 8 in file "libs/eeprom.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;		None
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  i               1   21[BANK1 ] unsigned char 
  4476 ;;  j               1   20[BANK1 ] unsigned char 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : B00/300
  4483 ;;		On exit  : 300/100
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:      BANK1   BANK3  BANK2l
  4486 ;;      Params:         0       0       0
  4487 ;;      Locals:         2       0       0
  4488 ;;      Temps:         15       0       0
  4489 ;;      Totals:        17       0       0
  4490 ;;Total ram usage:       17 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    2
  4493 ;; This function calls:
  4494 ;;		___bmul
  4495 ;;		_eeprom_read
  4496 ;; This function is called by:
  4497 ;;		_main
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           
  4502                           ;psect for function _ReadVars
  4503  0C21                     _ReadVars:	
  4504                           
  4505                           ;eeprom.c: 9: C_D = eeprom_read(0xA6);
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4509  0C21  30A6               	movlw	166
  4510  0C22  24F2  120A  158A   	fcall	_eeprom_read
  4511  0C25  00EF               	movwf	111	;volatile
  4512                           
  4513                           ;eeprom.c: 15: UINT8 i, j;
  4514                           ;eeprom.c: 16: for (i=0; i<4; i++)
  4515  0C26  1683               	bsf	3,5	;RP0=1, select bank1
  4516  0C27  1303               	bcf	3,6	;RP1=0, select bank1
  4517  0C28  01B5               	clrf	ReadVars@i^(0+128)
  4518  0C29                     l2569:	
  4519  0C29  3004               	movlw	4
  4520  0C2A  0235               	subwf	ReadVars@i^(0+128),w
  4521  0C2B  1803               	btfsc	3,0
  4522  0C2C  2C39               	goto	l2579
  4523                           
  4524                           ;eeprom.c: 17: AUDIO.v[i] = eeprom_read(0x9F+i);
  4525  0C2D  0835               	movf	ReadVars@i^(0+128),w
  4526  0C2E  3E67               	addlw	103
  4527  0C2F  0084               	movwf	4
  4528  0C30  0835               	movf	ReadVars@i^(0+128),w
  4529  0C31  3E9F               	addlw	159
  4530  0C32  24F2  120A  158A   	fcall	_eeprom_read
  4531  0C35  2526  120A  158A   	fcall	PL34	;call to abstracted procedure
  4532  0C38  2C29               	goto	l2569
  4533  0C39                     l2579:	
  4534                           
  4535                           ;eeprom.c: 18: for (i = 0; i<3; i++) {
  4536  0C39  01B5               	clrf	ReadVars@i^(0+128)
  4537  0C3A                     l2581:	
  4538  0C3A  3003               	movlw	3
  4539  0C3B  0235               	subwf	ReadVars@i^(0+128),w
  4540  0C3C  1803               	btfsc	3,0
  4541  0C3D  2CB1               	goto	l2593
  4542                           
  4543                           ;eeprom.c: 19: C[i] = (uint32_t) eeprom_read(0x96 + 3*i)*256*256
  4544                           ;eeprom.c: 20: + (uint16_t) eeprom_read(0x96 + 1 + 3*i)*256
  4545                           ;eeprom.c: 21: + eeprom_read(0x96 + 2 + 3*i);
  4546  0C3E  0835               	movf	ReadVars@i^(0+128),w
  4547  0C3F  0735               	addwf	ReadVars@i^(0+128),w
  4548  0C40  0735               	addwf	ReadVars@i^(0+128),w
  4549  0C41  3E98               	addlw	152
  4550  0C42  24F2  120A  158A   	fcall	_eeprom_read
  4551  0C45  1683               	bsf	3,5	;RP0=1, select bank1
  4552  0C46  1303               	bcf	3,6	;RP1=0, select bank1
  4553  0C47  00A5               	movwf	??_ReadVars^(0+128)
  4554  0C48  01A6               	clrf	(??_ReadVars^(0+128)+1)
  4555  0C49  01A7               	clrf	(??_ReadVars^(0+128)+2)
  4556  0C4A  01A8               	clrf	(??_ReadVars^(0+128)+3)
  4557  0C4B  0835               	movf	ReadVars@i^(0+128),w
  4558  0C4C  0735               	addwf	ReadVars@i^(0+128),w
  4559  0C4D  0735               	addwf	ReadVars@i^(0+128),w
  4560  0C4E  3E97               	addlw	151
  4561  0C4F  24F2  120A  158A   	fcall	_eeprom_read
  4562  0C52  1683               	bsf	3,5	;RP0=1, select bank1
  4563  0C53  1303               	bcf	3,6	;RP1=0, select bank1
  4564  0C54  00A9               	movwf	(??_ReadVars+4)^(0+128)
  4565  0C55  01AA               	clrf	((??_ReadVars+4)^(0+128)+1)
  4566  0C56  00AA               	movwf	((??_ReadVars+4)^(0+128)+1)
  4567  0C57  01A9               	clrf	(??_ReadVars+4)^(0+128)
  4568  0C58  0829               	movf	(??_ReadVars+4)^(0+128),w
  4569  0C59  00AB               	movwf	(??_ReadVars+6)^(0+128)
  4570  0C5A  082A               	movf	(??_ReadVars+5)^(0+128),w
  4571  0C5B  00AC               	movwf	((??_ReadVars+6)^(0+128)+1)
  4572  0C5C  01AD               	clrf	((??_ReadVars+6)^(0+128)+2)
  4573  0C5D  01AE               	clrf	((??_ReadVars+6)^(0+128)+3)
  4574  0C5E  0835               	movf	ReadVars@i^(0+128),w
  4575  0C5F  0735               	addwf	ReadVars@i^(0+128),w
  4576  0C60  0735               	addwf	ReadVars@i^(0+128),w
  4577  0C61  3E96               	addlw	150
  4578  0C62  24F2  120A  158A   	fcall	_eeprom_read
  4579  0C65  1683               	bsf	3,5	;RP0=1, select bank1
  4580  0C66  1303               	bcf	3,6	;RP1=0, select bank1
  4581  0C67  00AF               	movwf	(??_ReadVars+10)^(0+128)
  4582  0C68  01B0               	clrf	((??_ReadVars+10)^(0+128)+1)
  4583  0C69  01B1               	clrf	((??_ReadVars+10)^(0+128)+2)
  4584  0C6A  01B2               	clrf	((??_ReadVars+10)^(0+128)+3)
  4585  0C6B  0830               	movf	((??_ReadVars+10)^(0+128)+1),w
  4586  0C6C  00B2               	movwf	((??_ReadVars+10)^(0+128)+3)
  4587  0C6D  082F               	movf	(??_ReadVars+10)^(0+128),w
  4588  0C6E  00B1               	movwf	((??_ReadVars+10)^(0+128)+2)
  4589  0C6F  01B0               	clrf	((??_ReadVars+10)^(0+128)+1)
  4590  0C70  01AF               	clrf	(??_ReadVars+10)^(0+128)
  4591  0C71  082F               	movf	(??_ReadVars+10)^(0+128),w
  4592  0C72  07AB               	addwf	(??_ReadVars+6)^(0+128),f
  4593  0C73  0830               	movf	(??_ReadVars+11)^(0+128),w
  4594  0C74  1803               	skipnc
  4595  0C75  0F30               	incfsz	(??_ReadVars+11)^(0+128),w
  4596  0C76  07AC               	addwf	((??_ReadVars+6)^(0+128)+1),f
  4597  0C77  0831               	movf	(??_ReadVars+12)^(0+128),w
  4598  0C78  1803               	skipnc
  4599  0C79  0F31               	incfsz	(??_ReadVars+12)^(0+128),w
  4600  0C7A  07AD               	addwf	((??_ReadVars+6)^(0+128)+2),f
  4601  0C7B  0832               	movf	(??_ReadVars+13)^(0+128),w
  4602  0C7C  1803               	skipnc
  4603  0C7D  0A32               	incf	(??_ReadVars+13)^(0+128),w
  4604  0C7E  07AE               	addwf	((??_ReadVars+6)^(0+128)+3),f
  4605  0C7F  082B               	movf	(??_ReadVars+6)^(0+128),w
  4606  0C80  07A5               	addwf	??_ReadVars^(0+128),f
  4607  0C81  082C               	movf	(??_ReadVars+7)^(0+128),w
  4608  0C82  1803               	skipnc
  4609  0C83  0F2C               	incfsz	(??_ReadVars+7)^(0+128),w
  4610  0C84  07A6               	addwf	(??_ReadVars^(0+128)+1),f
  4611  0C85  082D               	movf	(??_ReadVars+8)^(0+128),w
  4612  0C86  1803               	skipnc
  4613  0C87  0F2D               	incfsz	(??_ReadVars+8)^(0+128),w
  4614  0C88  07A7               	addwf	(??_ReadVars^(0+128)+2),f
  4615  0C89  082E               	movf	(??_ReadVars+9)^(0+128),w
  4616  0C8A  1803               	skipnc
  4617  0C8B  0A2E               	incf	(??_ReadVars+9)^(0+128),w
  4618  0C8C  07A8               	addwf	(??_ReadVars^(0+128)+3),f
  4619  0C8D  0835               	movf	ReadVars@i^(0+128),w
  4620  0C8E  00B3               	movwf	(??_ReadVars+14)^(0+128)
  4621  0C8F  3001               	movlw	1
  4622  0C90  1003               	clrc
  4623  0C91                     L12:	
  4624  0C91  0DB3               	rlf	(??_ReadVars+14)^(0+128),f
  4625  0C92  3EFF               	addlw	-1
  4626  0C93  1003               	clrc
  4627  0C94  1D03               	skipz
  4628  0C95  2C91               	goto	L12
  4629  0C96  0D33               	rlf	(??_ReadVars+14)^(0+128),w
  4630  0C97  3E4C               	addlw	76
  4631  0C98  0084               	movwf	4
  4632  0C99  0825               	movf	??_ReadVars^(0+128),w
  4633  0C9A  1783               	bsf	3,7	;select IRP bank2
  4634  0C9B  0080               	movwf	0
  4635  0C9C  0A84               	incf	4,f
  4636  0C9D  0826               	movf	(??_ReadVars+1)^(0+128),w
  4637  0C9E  0080               	movwf	0
  4638  0C9F  0A84               	incf	4,f
  4639  0CA0  0827               	movf	(??_ReadVars+2)^(0+128),w
  4640  0CA1  0080               	movwf	0
  4641  0CA2  0A84               	incf	4,f
  4642  0CA3  0828               	movf	(??_ReadVars+3)^(0+128),w
  4643  0CA4  0080               	movwf	0
  4644                           
  4645                           ;eeprom.c: 22: STATE_BREAKS[i] = eeprom_read(0xA3+i);
  4646  0CA5  0835               	movf	ReadVars@i^(0+128),w
  4647  0CA6  3E64               	addlw	100
  4648  0CA7  0084               	movwf	4
  4649  0CA8  0835               	movf	ReadVars@i^(0+128),w
  4650  0CA9  3EA3               	addlw	163
  4651  0CAA  24F2  120A  158A   	fcall	_eeprom_read
  4652  0CAD  2526  120A  158A   	fcall	PL34	;call to abstracted procedure
  4653  0CB0  2C3A               	goto	l2581
  4654  0CB1                     l2593:	
  4655                           
  4656                           ;eeprom.c: 23: }
  4657                           ;eeprom.c: 24: for (i = 0; i<30; i++) {
  4658  0CB1  01B5               	clrf	ReadVars@i^(0+128)
  4659  0CB2                     l2595:	
  4660  0CB2  301E               	movlw	30
  4661  0CB3  0235               	subwf	ReadVars@i^(0+128),w
  4662  0CB4  1803               	btfsc	3,0
  4663  0CB5  0008               	return
  4664                           
  4665                           ;eeprom.c: 25: STATE_PERIODS[i] = eeprom_read(0x00
  4666                           ;eeprom.c: 26: + i*(1 + 2*2));
  4667  0CB6  0835               	movf	ReadVars@i^(0+128),w
  4668  0CB7  3E20               	addlw	32
  4669  0CB8  0084               	movwf	4
  4670  0CB9  3005               	movlw	5
  4671  0CBA  00A2               	movwf	___bmul@multiplicand^(0+128)
  4672  0CBB  0835               	movf	ReadVars@i^(0+128),w
  4673  0CBC  250C  120A  158A   	fcall	___bmul
  4674  0CBF  24F2  120A  158A   	fcall	_eeprom_read
  4675  0CC2  1383               	bcf	3,7	;select IRP bank0
  4676  0CC3  0080               	movwf	0
  4677                           
  4678                           ;eeprom.c: 27: for (j = 0; j<2; j++) {
  4679  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  4680  0CC5  1303               	bcf	3,6	;RP1=0, select bank1
  4681  0CC6  01B4               	clrf	ReadVars@j^(0+128)
  4682  0CC7                     l2607:	
  4683                           
  4684                           ;eeprom.c: 28: STATE_1[i][j] = eeprom_read(0x00
  4685                           ;eeprom.c: 29: + i*(1 + 2*2)
  4686                           ;eeprom.c: 30: + (1 + j));
  4687  0CC7  0835               	movf	ReadVars@i^(0+128),w
  4688  0CC8  00A5               	movwf	??_ReadVars^(0+128)
  4689  0CC9  303E               	movlw	62
  4690  0CCA  251A  120A  158A   	fcall	PL16	;call to abstracted procedure
  4691  0CCD  250C  120A  158A   	fcall	___bmul
  4692  0CD0  0734               	addwf	ReadVars@j^(0+128),w
  4693  0CD1  3E01               	addlw	1
  4694  0CD2  24F2  120A  158A   	fcall	_eeprom_read
  4695  0CD5  1383               	bcf	3,7	;select IRP bank0
  4696  0CD6  0080               	movwf	0
  4697                           
  4698                           ;eeprom.c: 31: STATE_2[i][j] = eeprom_read(0x00
  4699                           ;eeprom.c: 32: + i*(1 + 2*2)
  4700                           ;eeprom.c: 33: + (3 + j));
  4701  0CD7  1683               	bsf	3,5	;RP0=1, select bank1
  4702  0CD8  1303               	bcf	3,6	;RP1=0, select bank1
  4703  0CD9  0835               	movf	ReadVars@i^(0+128),w
  4704  0CDA  00A5               	movwf	??_ReadVars^(0+128)
  4705  0CDB  3010               	movlw	16
  4706  0CDC  251A  120A  158A   	fcall	PL16	;call to abstracted procedure
  4707  0CDF  250C  120A  158A   	fcall	___bmul
  4708  0CE2  0734               	addwf	ReadVars@j^(0+128),w
  4709  0CE3  3E03               	addlw	3
  4710  0CE4  24F2  120A  158A   	fcall	_eeprom_read
  4711  0CE7  1783               	bsf	3,7	;select IRP bank2
  4712  0CE8  0080               	movwf	0
  4713  0CE9  1683               	bsf	3,5	;RP0=1, select bank1
  4714  0CEA  1303               	bcf	3,6	;RP1=0, select bank1
  4715  0CEB  3002               	movlw	2
  4716  0CEC  0AB4               	incf	ReadVars@j^(0+128),f
  4717  0CED  0234               	subwf	ReadVars@j^(0+128),w
  4718  0CEE  1C03               	skipc
  4719  0CEF  2CC7               	goto	l2607
  4720  0CF0  0AB5               	incf	ReadVars@i^(0+128),f
  4721  0CF1  2CB2               	goto	l2595
  4722  0CF2                     __end_of_ReadVars:	
  4723  0CF2                     __ptext16:	
  4724 ;; *************** function _eeprom_read *****************
  4725 ;; Defined at:
  4726 ;;		line 6 in file "/opt/microchip/xc8/v1.38/sources/pic/eeread.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  addr            1    wreg     unsigned char 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  addr            1    2[BANK1 ] unsigned char 
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      unsigned char 
  4733 ;; Registers used:
  4734 ;;		wreg, status,2, status,0
  4735 ;; Tracked objects:
  4736 ;;		On entry : 100/300
  4737 ;;		On exit  : 300/200
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:      BANK1   BANK3  BANK2l
  4740 ;;      Params:         0       0       0
  4741 ;;      Locals:         1       0       0
  4742 ;;      Temps:          0       0       0
  4743 ;;      Totals:         1       0       0
  4744 ;;Total ram usage:        1 bytes
  4745 ;; Hardware stack levels used:    1
  4746 ;; Hardware stack levels required when called:    1
  4747 ;; This function calls:
  4748 ;;		Nothing
  4749 ;; This function is called by:
  4750 ;;		_ReadVars
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           
  4755                           ;psect for function _eeprom_read
  4756  0CF2                     _eeprom_read:	
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4760                           ;eeprom_read@addr stored from wreg
  4761  0CF2  1303               	bcf	3,6	;RP1=0, select bank1
  4762  0CF3  00A2               	movwf	eeprom_read@addr^(0+128)
  4763  0CF4  2CF6               	goto	l761
  4764  0CF5                     u2291:	
  4765  0CF5  1303               	bcf	3,6	;RP1=0, select bank1
  4766  0CF6                     l761:	
  4767  0CF6  0064               	clrwdt	;# 
  4768  0CF7  1683               	bsf	3,5	;RP0=1, select bank3
  4769  0CF8  1703               	bsf	3,6	;RP1=1, select bank3
  4770  0CF9  188C               	btfsc	12,1	;volsfr
  4771  0CFA  2CF5               	goto	u2291
  4772  0CFB  1303               	bcf	3,6	;RP1=0, select bank1
  4773  0CFC  0822               	movf	eeprom_read@addr^(0+128),w
  4774  0CFD  1283               	bcf	3,5	;RP0=0, select bank2
  4775  0CFE  1703               	bsf	3,6	;RP1=1, select bank2
  4776  0CFF  008D               	movwf	13	;volatile
  4777  0D00  303F               	movlw	63
  4778  0D01  1683               	bsf	3,5	;RP0=1, select bank3
  4779  0D02  058C               	andwf	12,f	;volsfr
  4780  0D03  140C               	bsf	12,0	;volsfr
  4781  0D04  1003               	clrc
  4782  0D05  180C               	btfsc	12,0	;volsfr
  4783  0D06  1403               	setc
  4784  0D07  1803               	skipnc
  4785  0D08  3001               	movlw	1
  4786  0D09  1283               	bcf	3,5	;RP0=0, select bank2
  4787  0D0A  080C               	movf	12,w	;volatile
  4788  0D0B  0008               	return
  4789  0D0C                     __end_of_eeprom_read:	
  4790  0D0C                     __ptext17:	
  4791 ;; *************** function ___bmul *****************
  4792 ;; Defined at:
  4793 ;;		line 4 in file "/opt/microchip/xc8/v1.38/sources/common/Umul8.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;  multiplier      1    wreg     unsigned char 
  4796 ;;  multiplicand    1    2[BANK1 ] unsigned char 
  4797 ;; Auto vars:     Size  Location     Type
  4798 ;;  multiplier      1    4[BANK1 ] unsigned char 
  4799 ;;  product         1    3[BANK1 ] unsigned char 
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      unsigned char 
  4802 ;; Registers used:
  4803 ;;		wreg, status,2, status,0
  4804 ;; Tracked objects:
  4805 ;;		On entry : 300/100
  4806 ;;		On exit  : 300/100
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:      BANK1   BANK3  BANK2l
  4809 ;;      Params:         1       0       0
  4810 ;;      Locals:         2       0       0
  4811 ;;      Temps:          0       0       0
  4812 ;;      Totals:         3       0       0
  4813 ;;Total ram usage:        3 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:    1
  4816 ;; This function calls:
  4817 ;;		Nothing
  4818 ;; This function is called by:
  4819 ;;		_ReadVars
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           
  4824                           ;psect for function ___bmul
  4825  0D0C                     ___bmul:	
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4829                           ;___bmul@multiplier stored from wreg
  4830  0D0C  00A4               	movwf	___bmul@multiplier^(0+128)
  4831  0D0D  01A3               	clrf	___bmul@product^(0+128)
  4832  0D0E                     l2461:	
  4833  0D0E  0822               	movf	___bmul@multiplicand^(0+128),w
  4834  0D0F  1824               	btfsc	___bmul@multiplier^(0+128),0
  4835  0D10  07A3               	addwf	___bmul@product^(0+128),f
  4836  0D11  1003               	clrc
  4837  0D12  0DA2               	rlf	___bmul@multiplicand^(0+128),f
  4838  0D13  1003               	clrc
  4839  0D14  0CA4               	rrf	___bmul@multiplier^(0+128),f
  4840  0D15  0824               	movf	___bmul@multiplier^(0+128),w
  4841  0D16  1D03               	btfss	3,2
  4842  0D17  2D0E               	goto	l2461
  4843  0D18  0823               	movf	___bmul@product^(0+128),w
  4844  0D19  0008               	return
  4845  0D1A                     __end_of___bmul:	
  4846  0D1A                     PL16:	
  4847  0D1A  1003               	clrc
  4848  0D1B  0DA5               	rlf	??_ReadVars^(0+128),f
  4849  0D1C  0725               	addwf	??_ReadVars^(0+128),w
  4850  0D1D  00A6               	movwf	(??_ReadVars+1)^(0+128)
  4851  0D1E  0834               	movf	ReadVars@j^(0+128),w
  4852  0D1F  0726               	addwf	(??_ReadVars+1)^(0+128),w
  4853  0D20  00A7               	movwf	(??_ReadVars+2)^(0+128)
  4854  0D21  0084               	movwf	4
  4855  0D22  3005               	movlw	5
  4856  0D23  00A2               	movwf	___bmul@multiplicand^(0+128)
  4857  0D24  0835               	movf	ReadVars@i^(0+128),w
  4858  0D25  0008               	return
  4859  0D26                     __end_ofPL16:	
  4860  0D26                     PL34:	
  4861  0D26  1783               	bsf	3,7	;select IRP bank2
  4862  0D27  0080               	movwf	0
  4863  0D28  1683               	bsf	3,5	;RP0=1, select bank1
  4864  0D29  1303               	bcf	3,6	;RP1=0, select bank1
  4865  0D2A  0AB5               	incf	ReadVars@i^(0+128),f
  4866  0D2B  0008               	return
  4867  0D2C                     __end_ofPL34:	
  4868                           
  4869                           	psect	text18
  4870  0E5D                     __ptext18:	
  4871 ;; *************** function _ReadGPSToS *****************
  4872 ;; Defined at:
  4873 ;;		line 137 in file "libs/gsk_usart.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;  TimeOut         1    wreg     unsigned char 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  TimeOut         1   24[BANK1 ] unsigned char 
  4878 ;;  Output          6   25[BANK1 ] unsigned char [6]
  4879 ;;  Sec             4   31[BANK1 ] long 
  4880 ;; Return value:  Size  Location     Type
  4881 ;;                  4   14[BANK1 ] long 
  4882 ;; Registers used:
  4883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4884 ;; Tracked objects:
  4885 ;;		On entry : 300/B00
  4886 ;;		On exit  : 300/100
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:      BANK1   BANK3  BANK2l
  4889 ;;      Params:         4       0       0
  4890 ;;      Locals:        11       0       0
  4891 ;;      Temps:          6       0       0
  4892 ;;      Totals:        21       0       0
  4893 ;;Total ram usage:       21 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    4
  4896 ;; This function calls:
  4897 ;;		_UART_ReadValidTimeFromGPS_TO
  4898 ;;		___lmul
  4899 ;; This function is called by:
  4900 ;;		_main
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           
  4905                           ;psect for function _ReadGPSToS
  4906  0E5D                     _ReadGPSToS:	
  4907                           
  4908                           ;incstack = 0
  4909                           ; Regs used in _ReadGPSToS: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4910                           ;ReadGPSToS@TimeOut stored from wreg
  4911  0E5D  1303               	bcf	3,6	;RP1=0, select bank1
  4912  0E5E  00B8               	movwf	ReadGPSToS@TimeOut^(0+128)
  4913                           
  4914                           ;gsk_usart.c: 138: INT32 Sec;
  4915                           ;gsk_usart.c: 139: char Output[6];
  4916                           ;gsk_usart.c: 140: if (UART_ReadValidTimeFromGPS_TO(Output, TimeOut)) {
  4917  0E5F  00AA               	movwf	UART_ReadValidTimeFromGPS_TO@TimeOut^(0+128)
  4918  0E60  30B9               	movlw	(low (ReadGPSToS@Output| 0))& (0+255)
  4919  0E61  2730  120A  158A   	fcall	_UART_ReadValidTimeFromGPS_TO
  4920  0E64  3A00               	xorlw	0
  4921  0E65  1903               	skipnz
  4922  0E66  2EF7               	goto	l614
  4923                           
  4924                           ;gsk_usart.c: 141: Sec = (INT32)(Output[0] - 0x30)*10*60*60;
  4925  0E67  0839               	movf	ReadGPSToS@Output^(0+128),w
  4926  0E68  27F4  120A  158A   	fcall	PL8	;call to abstracted procedure
  4927  0E6B  308C               	movlw	140
  4928  0E6C  01A9               	clrf	(___lmul@multiplicand+3)^(0+128)
  4929  0E6D  01A8               	clrf	(___lmul@multiplicand+2)^(0+128)
  4930  0E6E  00A7               	movwf	(___lmul@multiplicand+1)^(0+128)
  4931  0E6F  30A0               	movlw	160
  4932  0E70  00A6               	movwf	___lmul@multiplicand^(0+128)
  4933  0E71  26FD  120A  158A   	fcall	___lmul
  4934  0E74  0825               	movf	(?___lmul+3)^(0+128),w
  4935  0E75  00C2               	movwf	(ReadGPSToS@Sec+3)^(0+128)
  4936  0E76  0824               	movf	(?___lmul+2)^(0+128),w
  4937  0E77  00C1               	movwf	(ReadGPSToS@Sec+2)^(0+128)
  4938  0E78  0823               	movf	(?___lmul+1)^(0+128),w
  4939  0E79  00C0               	movwf	(ReadGPSToS@Sec+1)^(0+128)
  4940  0E7A  0822               	movf	?___lmul^(0+128),w
  4941  0E7B  00BF               	movwf	ReadGPSToS@Sec^(0+128)
  4942                           
  4943                           ;gsk_usart.c: 142: Sec += (INT32)(Output[1] - 0x30)*1*60*60;
  4944  0E7C  083A               	movf	(ReadGPSToS@Output^(0+128)+1),w
  4945  0E7D  27F4  120A  158A   	fcall	PL8	;call to abstracted procedure
  4946  0E80  300E               	movlw	14
  4947  0E81  01A9               	clrf	(___lmul@multiplicand+3)^(0+128)
  4948  0E82  01A8               	clrf	(___lmul@multiplicand+2)^(0+128)
  4949  0E83  00A7               	movwf	(___lmul@multiplicand+1)^(0+128)
  4950  0E84  3010               	movlw	16
  4951  0E85  00A6               	movwf	___lmul@multiplicand^(0+128)
  4952  0E86  26FD  120A  158A   	fcall	___lmul
  4953  0E89  27E3  120A  158A   	fcall	PL6	;call to abstracted procedure
  4954  0E8C  1803               	skipnc
  4955  0E8D  3E01               	addlw	1
  4956  0E8E  1D03               	btfss	3,2
  4957  0E8F  07C2               	addwf	(ReadGPSToS@Sec+3)^(0+128),f
  4958                           
  4959                           ;gsk_usart.c: 143: Sec += (INT32)(Output[2] - 0x30)*10*60;
  4960  0E90  083B               	movf	(ReadGPSToS@Output^(0+128)+2),w
  4961  0E91  27F4  120A  158A   	fcall	PL8	;call to abstracted procedure
  4962  0E94  3002               	movlw	2
  4963  0E95  01A9               	clrf	(___lmul@multiplicand+3)^(0+128)
  4964  0E96  01A8               	clrf	(___lmul@multiplicand+2)^(0+128)
  4965  0E97  00A7               	movwf	(___lmul@multiplicand+1)^(0+128)
  4966  0E98  3058               	movlw	88
  4967  0E99  00A6               	movwf	___lmul@multiplicand^(0+128)
  4968  0E9A  26FD  120A  158A   	fcall	___lmul
  4969  0E9D  27E3  120A  158A   	fcall	PL6	;call to abstracted procedure
  4970  0EA0  1803               	skipnc
  4971  0EA1  3E01               	addlw	1
  4972  0EA2  1D03               	btfss	3,2
  4973  0EA3  07C2               	addwf	(ReadGPSToS@Sec+3)^(0+128),f
  4974                           
  4975                           ;gsk_usart.c: 144: Sec += (INT32)(Output[3] - 0x30)*1*60;
  4976  0EA4  083C               	movf	(ReadGPSToS@Output^(0+128)+3),w
  4977  0EA5  27F4  120A  158A   	fcall	PL8	;call to abstracted procedure
  4978  0EA8  303C               	movlw	60
  4979  0EA9  00A6               	movwf	___lmul@multiplicand^(0+128)
  4980  0EAA  01A7               	clrf	(___lmul@multiplicand+1)^(0+128)
  4981  0EAB  01A8               	clrf	(___lmul@multiplicand+2)^(0+128)
  4982  0EAC  01A9               	clrf	(___lmul@multiplicand+3)^(0+128)
  4983  0EAD  26FD  120A  158A   	fcall	___lmul
  4984  0EB0  27E3  120A  158A   	fcall	PL6	;call to abstracted procedure
  4985  0EB3  1803               	skipnc
  4986  0EB4  3E01               	addlw	1
  4987  0EB5  1D03               	btfss	3,2
  4988  0EB6  07C2               	addwf	(ReadGPSToS@Sec+3)^(0+128),f
  4989                           
  4990                           ;gsk_usart.c: 145: Sec += (INT32)(Output[4] - 0x30)*10;
  4991  0EB7  083D               	movf	(ReadGPSToS@Output^(0+128)+4),w
  4992  0EB8  27F4  120A  158A   	fcall	PL8	;call to abstracted procedure
  4993  0EBB  300A               	movlw	10
  4994  0EBC  00A6               	movwf	___lmul@multiplicand^(0+128)
  4995  0EBD  01A7               	clrf	(___lmul@multiplicand+1)^(0+128)
  4996  0EBE  01A8               	clrf	(___lmul@multiplicand+2)^(0+128)
  4997  0EBF  01A9               	clrf	(___lmul@multiplicand+3)^(0+128)
  4998  0EC0  26FD  120A  158A   	fcall	___lmul
  4999  0EC3  27E3  120A  158A   	fcall	PL6	;call to abstracted procedure
  5000  0EC6  1803               	skipnc
  5001  0EC7  3E01               	addlw	1
  5002  0EC8  1D03               	btfss	3,2
  5003  0EC9  07C2               	addwf	(ReadGPSToS@Sec+3)^(0+128),f
  5004                           
  5005                           ;gsk_usart.c: 146: Sec += (INT32)(Output[5] - 0x30);
  5006  0ECA  083E               	movf	(ReadGPSToS@Output^(0+128)+5),w
  5007  0ECB  3ED0               	addlw	208
  5008  0ECC  00B2               	movwf	??_ReadGPSToS^(0+128)
  5009  0ECD  30FF               	movlw	255
  5010  0ECE  1803               	skipnc
  5011  0ECF  3000               	movlw	0
  5012  0ED0  00B3               	movwf	(??_ReadGPSToS^(0+128)+1)
  5013  0ED1  0832               	movf	??_ReadGPSToS^(0+128),w
  5014  0ED2  00B4               	movwf	(??_ReadGPSToS+2)^(0+128)
  5015  0ED3  0833               	movf	(??_ReadGPSToS+1)^(0+128),w
  5016  0ED4  00B5               	movwf	((??_ReadGPSToS+2)^(0+128)+1)
  5017  0ED5  3000               	movlw	0
  5018  0ED6  1BB5               	btfsc	((??_ReadGPSToS+2)^(0+128)+1),7
  5019  0ED7  30FF               	movlw	255
  5020  0ED8  00B6               	movwf	((??_ReadGPSToS+2)^(0+128)+2)
  5021  0ED9  00B7               	movwf	((??_ReadGPSToS+2)^(0+128)+3)
  5022  0EDA  0834               	movf	(??_ReadGPSToS+2)^(0+128),w
  5023  0EDB  07BF               	addwf	ReadGPSToS@Sec^(0+128),f
  5024  0EDC  0835               	movf	(??_ReadGPSToS+3)^(0+128),w
  5025  0EDD  1103               	clrz
  5026  0EDE  1803               	skipnc
  5027  0EDF  3E01               	addlw	1
  5028  0EE0  1D03               	btfss	3,2
  5029  0EE1  07C0               	addwf	(ReadGPSToS@Sec+1)^(0+128),f
  5030  0EE2  0836               	movf	(??_ReadGPSToS+4)^(0+128),w
  5031  0EE3  1103               	clrz
  5032  0EE4  1803               	skipnc
  5033  0EE5  3E01               	addlw	1
  5034  0EE6  1D03               	btfss	3,2
  5035  0EE7  07C1               	addwf	(ReadGPSToS@Sec+2)^(0+128),f
  5036  0EE8  0837               	movf	(??_ReadGPSToS+5)^(0+128),w
  5037  0EE9  1103               	clrz
  5038  0EEA  1803               	skipnc
  5039  0EEB  3E01               	addlw	1
  5040  0EEC  1D03               	btfss	3,2
  5041  0EED  07C2               	addwf	(ReadGPSToS@Sec+3)^(0+128),f
  5042                           
  5043                           ;gsk_usart.c: 147: return Sec;
  5044  0EEE  0842               	movf	(ReadGPSToS@Sec+3)^(0+128),w
  5045  0EEF  00B1               	movwf	(?_ReadGPSToS+3)^(0+128)
  5046  0EF0  0841               	movf	(ReadGPSToS@Sec+2)^(0+128),w
  5047  0EF1  00B0               	movwf	(?_ReadGPSToS+2)^(0+128)
  5048  0EF2  0840               	movf	(ReadGPSToS@Sec+1)^(0+128),w
  5049  0EF3  00AF               	movwf	(?_ReadGPSToS+1)^(0+128)
  5050  0EF4  083F               	movf	ReadGPSToS@Sec^(0+128),w
  5051  0EF5  00AE               	movwf	?_ReadGPSToS^(0+128)
  5052  0EF6  0008               	return
  5053  0EF7                     l614:	
  5054                           
  5055                           ;gsk_usart.c: 149: return -1;
  5056  0EF7  30FF               	movlw	255
  5057  0EF8  00AE               	movwf	?_ReadGPSToS^(0+128)
  5058  0EF9  00AF               	movwf	(?_ReadGPSToS+1)^(0+128)
  5059  0EFA  00B0               	movwf	(?_ReadGPSToS+2)^(0+128)
  5060  0EFB  00B1               	movwf	(?_ReadGPSToS+3)^(0+128)
  5061  0EFC  0008               	return
  5062  0EFD                     __end_of_ReadGPSToS:	
  5063  0EFD                     __ptext19:	
  5064 ;; *************** function ___lmul *****************
  5065 ;; Defined at:
  5066 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul32.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  multiplier      4    2[BANK1 ] unsigned long 
  5069 ;;  multiplicand    4    6[BANK1 ] unsigned long 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  product         4   10[BANK1 ] unsigned long 
  5072 ;; Return value:  Size  Location     Type
  5073 ;;                  4    2[BANK1 ] unsigned long 
  5074 ;; Registers used:
  5075 ;;		wreg, status,2, status,0
  5076 ;; Tracked objects:
  5077 ;;		On entry : 300/100
  5078 ;;		On exit  : 300/100
  5079 ;;		Unchanged: 0/0
  5080 ;; Data sizes:      BANK1   BANK3  BANK2l
  5081 ;;      Params:         8       0       0
  5082 ;;      Locals:         4       0       0
  5083 ;;      Temps:          0       0       0
  5084 ;;      Totals:        12       0       0
  5085 ;;Total ram usage:       12 bytes
  5086 ;; Hardware stack levels used:    1
  5087 ;; Hardware stack levels required when called:    1
  5088 ;; This function calls:
  5089 ;;		Nothing
  5090 ;; This function is called by:
  5091 ;;		_ReadGPSToS
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           
  5096                           ;psect for function ___lmul
  5097  0EFD                     ___lmul:	
  5098                           
  5099                           ;incstack = 0
  5100                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5101  0EFD  01AA               	clrf	___lmul@product^(0+128)
  5102  0EFE  01AB               	clrf	(___lmul@product+1)^(0+128)
  5103  0EFF  01AC               	clrf	(___lmul@product+2)^(0+128)
  5104  0F00  01AD               	clrf	(___lmul@product+3)^(0+128)
  5105  0F01                     l858:	
  5106  0F01  1C22               	btfss	___lmul@multiplier^(0+128),0
  5107  0F02  2F17               	goto	l2451
  5108  0F03  0826               	movf	___lmul@multiplicand^(0+128),w
  5109  0F04  07AA               	addwf	___lmul@product^(0+128),f
  5110  0F05  0827               	movf	(___lmul@multiplicand+1)^(0+128),w
  5111  0F06  1103               	clrz
  5112  0F07  1803               	skipnc
  5113  0F08  3E01               	addlw	1
  5114  0F09  1D03               	btfss	3,2
  5115  0F0A  07AB               	addwf	(___lmul@product+1)^(0+128),f
  5116  0F0B  0828               	movf	(___lmul@multiplicand+2)^(0+128),w
  5117  0F0C  1103               	clrz
  5118  0F0D  1803               	skipnc
  5119  0F0E  3E01               	addlw	1
  5120  0F0F  1D03               	btfss	3,2
  5121  0F10  07AC               	addwf	(___lmul@product+2)^(0+128),f
  5122  0F11  0829               	movf	(___lmul@multiplicand+3)^(0+128),w
  5123  0F12  1103               	clrz
  5124  0F13  1803               	skipnc
  5125  0F14  3E01               	addlw	1
  5126  0F15  1D03               	btfss	3,2
  5127  0F16  07AD               	addwf	(___lmul@product+3)^(0+128),f
  5128  0F17                     l2451:	
  5129  0F17  1003               	clrc
  5130  0F18  0DA6               	rlf	___lmul@multiplicand^(0+128),f
  5131  0F19  0DA7               	rlf	(___lmul@multiplicand+1)^(0+128),f
  5132  0F1A  0DA8               	rlf	(___lmul@multiplicand+2)^(0+128),f
  5133  0F1B  0DA9               	rlf	(___lmul@multiplicand+3)^(0+128),f
  5134  0F1C  1003               	clrc
  5135  0F1D  0CA5               	rrf	(___lmul@multiplier+3)^(0+128),f
  5136  0F1E  0CA4               	rrf	(___lmul@multiplier+2)^(0+128),f
  5137  0F1F  0CA3               	rrf	(___lmul@multiplier+1)^(0+128),f
  5138  0F20  0CA2               	rrf	___lmul@multiplier^(0+128),f
  5139  0F21  0825               	movf	(___lmul@multiplier+3)^(0+128),w
  5140  0F22  0424               	iorwf	(___lmul@multiplier+2)^(0+128),w
  5141  0F23  0423               	iorwf	(___lmul@multiplier+1)^(0+128),w
  5142  0F24  0422               	iorwf	___lmul@multiplier^(0+128),w
  5143  0F25  1D03               	skipz
  5144  0F26  2F01               	goto	l858
  5145  0F27  082D               	movf	(___lmul@product+3)^(0+128),w
  5146  0F28  00A5               	movwf	(?___lmul+3)^(0+128)
  5147  0F29  082C               	movf	(___lmul@product+2)^(0+128),w
  5148  0F2A  00A4               	movwf	(?___lmul+2)^(0+128)
  5149  0F2B  082B               	movf	(___lmul@product+1)^(0+128),w
  5150  0F2C  00A3               	movwf	(?___lmul+1)^(0+128)
  5151  0F2D  082A               	movf	___lmul@product^(0+128),w
  5152  0F2E  00A2               	movwf	?___lmul^(0+128)
  5153  0F2F  0008               	return
  5154  0F30                     __end_of___lmul:	
  5155  0F30                     __ptext20:	
  5156 ;; *************** function _UART_ReadValidTimeFromGPS_TO *****************
  5157 ;; Defined at:
  5158 ;;		line 114 in file "libs/gsk_usart.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  Output          1    wreg     PTR unsigned char 
  5161 ;;		 -> ReadGPSToS@Output(6), 
  5162 ;;  TimeOut         1   10[BANK1 ] unsigned char 
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;  Output          1   11[BANK1 ] PTR unsigned char 
  5165 ;;		 -> ReadGPSToS@Output(6), 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      unsigned char 
  5168 ;; Registers used:
  5169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 300/900
  5172 ;;		On exit  : B00/100
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:      BANK1   BANK3  BANK2l
  5175 ;;      Params:         1       0       0
  5176 ;;      Locals:         1       0       0
  5177 ;;      Temps:          0       0       0
  5178 ;;      Totals:         2       0       0
  5179 ;;Total ram usage:        2 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    3
  5182 ;; This function calls:
  5183 ;;		_IsValidGPS
  5184 ;;		_UART_ReadFromGPS_TO
  5185 ;; This function is called by:
  5186 ;;		_ReadGPSToS
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           
  5191                           ;psect for function _UART_ReadValidTimeFromGPS_TO
  5192  0F30                     _UART_ReadValidTimeFromGPS_TO:	
  5193                           
  5194                           ;incstack = 0
  5195                           ; Regs used in _UART_ReadValidTimeFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstac
      +                          k]
  5196                           ;UART_ReadValidTimeFromGPS_TO@Output stored from wreg
  5197  0F30  00AB               	movwf	UART_ReadValidTimeFromGPS_TO@Output^(0+128)
  5198                           
  5199                           ;gsk_usart.c: 115: UART_ReadFromGPS_TO (Output, TimeOut);
  5200  0F31  082A               	movf	UART_ReadValidTimeFromGPS_TO@TimeOut^(0+128),w
  5201  0F32  00A3               	movwf	UART_ReadFromGPS_TO@TimeOut^(0+128)
  5202  0F33  082B               	movf	UART_ReadValidTimeFromGPS_TO@Output^(0+128),w
  5203  0F34  278D  120A  158A   	fcall	_UART_ReadFromGPS_TO
  5204                           
  5205                           ;gsk_usart.c: 116: return IsValidGPS(Output);
  5206  0F37  1683               	bsf	3,5	;RP0=1, select bank1
  5207  0F38  082B               	movf	UART_ReadValidTimeFromGPS_TO@Output^(0+128),w
  5208  0F39  2F3A               	ljmp	_IsValidGPS
  5209  0F3A                     __end_of_UART_ReadValidTimeFromGPS_TO:	
  5210  0F3A                     __ptext23:	
  5211 ;; *************** function _IsValidGPS *****************
  5212 ;; Defined at:
  5213 ;;		line 120 in file "libs/gsk_usart.c"
  5214 ;; Parameters:    Size  Location     Type
  5215 ;;  GPSData         1    wreg     PTR unsigned char 
  5216 ;;		 -> ReadGPSToS@Output(6), 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;  GPSData         1    3[BANK1 ] PTR unsigned char 
  5219 ;;		 -> ReadGPSToS@Output(6), 
  5220 ;;  Result          1    2[BANK1 ] unsigned char 
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      unsigned char 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 300/900
  5227 ;;		On exit  : B00/100
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:      BANK1   BANK3  BANK2l
  5230 ;;      Params:         0       0       0
  5231 ;;      Locals:         2       0       0
  5232 ;;      Temps:          0       0       0
  5233 ;;      Totals:         2       0       0
  5234 ;;Total ram usage:        2 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; Hardware stack levels required when called:    1
  5237 ;; This function calls:
  5238 ;;		Nothing
  5239 ;; This function is called by:
  5240 ;;		_UART_ReadValidTimeFromGPS_TO
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _IsValidGPS
  5246  0F3A                     _IsValidGPS:	
  5247                           
  5248                           ;incstack = 0
  5249                           ; Regs used in _IsValidGPS: [wreg-fsr0h+status,2+status,0]
  5250                           ;IsValidGPS@GPSData stored from wreg
  5251  0F3A  00A3               	movwf	IsValidGPS@GPSData^(0+128)
  5252                           
  5253                           ;gsk_usart.c: 121: bool Result;
  5254                           ;gsk_usart.c: 122: if (GPSData[0]<0x30 || GPSData[0]>0x32)
  5255  0F3B  0084               	movwf	4
  5256  0F3C  3030               	movlw	48
  5257  0F3D  1383               	bcf	3,7	;select IRP bank0
  5258  0F3E  0200               	subwf	0,w
  5259  0F3F  1C03               	skipc
  5260  0F40  2F46               	goto	l2363
  5261  0F41  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5262  0F42  0084               	movwf	4
  5263  0F43  3033               	movlw	51
  5264  0F44  0200               	subwf	0,w
  5265  0F45  1803               	btfsc	3,0
  5266  0F46                     l2363:	
  5267                           
  5268                           ;gsk_usart.c: 123: Result = 0;
  5269  0F46  01A2               	clrf	IsValidGPS@Result^(0+128)
  5270                           
  5271                           ;gsk_usart.c: 124: if (GPSData[1]<0x30 || GPSData[1]>0x39)
  5272  0F47  0A23               	incf	IsValidGPS@GPSData^(0+128),w
  5273  0F48  0084               	movwf	4
  5274  0F49  3030               	movlw	48
  5275  0F4A  0200               	subwf	0,w
  5276  0F4B  1C03               	skipc
  5277  0F4C  2F52               	goto	l2369
  5278  0F4D  0A23               	incf	IsValidGPS@GPSData^(0+128),w
  5279  0F4E  0084               	movwf	4
  5280  0F4F  303A               	movlw	58
  5281  0F50  0200               	subwf	0,w
  5282  0F51  1803               	btfsc	3,0
  5283  0F52                     l2369:	
  5284                           
  5285                           ;gsk_usart.c: 125: Result = 0;
  5286  0F52  01A2               	clrf	IsValidGPS@Result^(0+128)
  5287                           
  5288                           ;gsk_usart.c: 126: if (GPSData[2]<0x30 || GPSData[2]>0x36)
  5289  0F53  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5290  0F54  3E02               	addlw	2
  5291  0F55  0084               	movwf	4
  5292  0F56  3030               	movlw	48
  5293  0F57  0200               	subwf	0,w
  5294  0F58  1C03               	skipc
  5295  0F59  2F60               	goto	l2375
  5296  0F5A  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5297  0F5B  3E02               	addlw	2
  5298  0F5C  0084               	movwf	4
  5299  0F5D  3037               	movlw	55
  5300  0F5E  0200               	subwf	0,w
  5301  0F5F  1803               	btfsc	3,0
  5302  0F60                     l2375:	
  5303                           
  5304                           ;gsk_usart.c: 127: Result = 0;
  5305  0F60  01A2               	clrf	IsValidGPS@Result^(0+128)
  5306                           
  5307                           ;gsk_usart.c: 128: if (GPSData[3]<0x30 || GPSData[3]>0x39)
  5308  0F61  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5309  0F62  3E03               	addlw	3
  5310  0F63  0084               	movwf	4
  5311  0F64  3030               	movlw	48
  5312  0F65  0200               	subwf	0,w
  5313  0F66  1C03               	skipc
  5314  0F67  2F6E               	goto	l2381
  5315  0F68  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5316  0F69  3E03               	addlw	3
  5317  0F6A  0084               	movwf	4
  5318  0F6B  303A               	movlw	58
  5319  0F6C  0200               	subwf	0,w
  5320  0F6D  1803               	btfsc	3,0
  5321  0F6E                     l2381:	
  5322                           
  5323                           ;gsk_usart.c: 129: Result = 0;
  5324  0F6E  01A2               	clrf	IsValidGPS@Result^(0+128)
  5325                           
  5326                           ;gsk_usart.c: 130: if (GPSData[4]<0x30 || GPSData[4]>0x36)
  5327  0F6F  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5328  0F70  3E04               	addlw	4
  5329  0F71  0084               	movwf	4
  5330  0F72  3030               	movlw	48
  5331  0F73  0200               	subwf	0,w
  5332  0F74  1C03               	skipc
  5333  0F75  2F7C               	goto	l2387
  5334  0F76  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5335  0F77  3E04               	addlw	4
  5336  0F78  0084               	movwf	4
  5337  0F79  3037               	movlw	55
  5338  0F7A  0200               	subwf	0,w
  5339  0F7B  1803               	btfsc	3,0
  5340  0F7C                     l2387:	
  5341                           
  5342                           ;gsk_usart.c: 131: Result = 0;
  5343  0F7C  01A2               	clrf	IsValidGPS@Result^(0+128)
  5344                           
  5345                           ;gsk_usart.c: 132: if (GPSData[5]<0x30 || GPSData[5]>0x39)
  5346  0F7D  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5347  0F7E  3E05               	addlw	5
  5348  0F7F  0084               	movwf	4
  5349  0F80  3030               	movlw	48
  5350  0F81  0200               	subwf	0,w
  5351  0F82  1C03               	skipc
  5352  0F83  2F8A               	goto	l2393
  5353  0F84  0823               	movf	IsValidGPS@GPSData^(0+128),w
  5354  0F85  3E05               	addlw	5
  5355  0F86  0084               	movwf	4
  5356  0F87  303A               	movlw	58
  5357  0F88  0200               	subwf	0,w
  5358  0F89  1803               	btfsc	3,0
  5359  0F8A                     l2393:	
  5360                           
  5361                           ;gsk_usart.c: 133: Result = 0;
  5362  0F8A  01A2               	clrf	IsValidGPS@Result^(0+128)
  5363                           
  5364                           ;gsk_usart.c: 134: return Result;
  5365  0F8B  0822               	movf	IsValidGPS@Result^(0+128),w
  5366  0F8C  0008               	return
  5367  0F8D                     __end_of_IsValidGPS:	
  5368  0F8D                     __ptext21:	
  5369 ;; *************** function _UART_ReadFromGPS_TO *****************
  5370 ;; Defined at:
  5371 ;;		line 80 in file "libs/gsk_usart.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  Output          1    wreg     PTR unsigned char 
  5374 ;;		 -> ReadGPSToS@Output(6), 
  5375 ;;  TimeOut         1    3[BANK1 ] unsigned char 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  Output          1    7[BANK1 ] PTR unsigned char 
  5378 ;;		 -> ReadGPSToS@Output(6), 
  5379 ;;  i               2    5[BANK1 ] unsigned int 
  5380 ;;  Pos             1    9[BANK1 ] unsigned char 
  5381 ;;  TempChar        1    8[BANK1 ] unsigned char 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5386 ;; Tracked objects:
  5387 ;;		On entry : 300/900
  5388 ;;		On exit  : 200/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:      BANK1   BANK3  BANK2l
  5391 ;;      Params:         1       0       0
  5392 ;;      Locals:         5       0       0
  5393 ;;      Temps:          1       0       0
  5394 ;;      Totals:         7       0       0
  5395 ;;Total ram usage:        7 bytes
  5396 ;; Hardware stack levels used:    1
  5397 ;; Hardware stack levels required when called:    2
  5398 ;; This function calls:
  5399 ;;		_UART_Read_TO
  5400 ;; This function is called by:
  5401 ;;		_UART_ReadValidTimeFromGPS_TO
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _UART_ReadFromGPS_TO
  5407  0F8D                     _UART_ReadFromGPS_TO:	
  5408                           
  5409                           ;incstack = 0
  5410                           ; Regs used in _UART_ReadFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5411                           ;UART_ReadFromGPS_TO@Output stored from wreg
  5412  0F8D  00A7               	movwf	UART_ReadFromGPS_TO@Output^(0+128)
  5413                           
  5414                           ;gsk_usart.c: 81: Output[0]=0x00;
  5415  0F8E  0084               	movwf	4
  5416  0F8F  1383               	bcf	3,7	;select IRP bank0
  5417  0F90  0180               	clrf	0
  5418                           
  5419                           ;gsk_usart.c: 82: const char StartCode[7]="$GPRMC,";
  5420                           ;gsk_usart.c: 83: char Pos=0x00;
  5421  0F91  01A9               	clrf	UART_ReadFromGPS_TO@Pos^(0+128)
  5422                           
  5423                           ;gsk_usart.c: 85: CREN = 0;
  5424  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  5425  0F93  1218               	bcf	24,4	;volatile
  5426                           
  5427                           ;gsk_usart.c: 86: CREN = 1;
  5428  0F94  1618               	bsf	24,4	;volatile
  5429                           
  5430                           ;gsk_usart.c: 87: for(uint16_t i=0; i<=768; i++) {
  5431  0F95  1683               	bsf	3,5	;RP0=1, select bank1
  5432  0F96  01A5               	clrf	UART_ReadFromGPS_TO@i^(0+128)
  5433  0F97  01A6               	clrf	(UART_ReadFromGPS_TO@i+1)^(0+128)
  5434  0F98                     l2331:	
  5435                           
  5436                           ;gsk_usart.c: 89: TempChar = UART_Read_TO(TimeOut);
  5437  0F98  0823               	movf	UART_ReadFromGPS_TO@TimeOut^(0+128),w
  5438  0F99  27D1  120A  158A   	fcall	_UART_Read_TO
  5439  0F9C  1683               	bsf	3,5	;RP0=1, select bank1
  5440  0F9D  00A8               	movwf	UART_ReadFromGPS_TO@TempChar^(0+128)
  5441                           
  5442                           ;gsk_usart.c: 90: if ((Pos>=0x07) & (Pos<=0x0c)) {
  5443  0F9E  3007               	movlw	7
  5444  0F9F  0229               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  5445  0FA0  1C03               	skipc
  5446  0FA1  2FB0               	goto	l2341
  5447  0FA2  300D               	movlw	13
  5448  0FA3  0229               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  5449                           
  5450                           ;gsk_usart.c: 91: Output[Pos-0x07]= TempChar;
  5451  0FA4  0829               	movf	UART_ReadFromGPS_TO@Pos^(0+128),w
  5452  0FA5  1803               	skipnc
  5453  0FA6  2FB1               	goto	L13
  5454  0FA7  0727               	addwf	UART_ReadFromGPS_TO@Output^(0+128),w
  5455  0FA8  00A4               	movwf	??_UART_ReadFromGPS_TO^(0+128)
  5456  0FA9  3EF9               	addlw	-7
  5457  0FAA  0084               	movwf	4
  5458  0FAB  0828               	movf	UART_ReadFromGPS_TO@TempChar^(0+128),w
  5459  0FAC  1383               	bcf	3,7	;select IRP bank0
  5460  0FAD  0080               	movwf	0
  5461  0FAE                     l2339:	
  5462                           
  5463                           ;gsk_usart.c: 92: Pos++;
  5464  0FAE  0AA9               	incf	UART_ReadFromGPS_TO@Pos^(0+128),f
  5465                           
  5466                           ;gsk_usart.c: 93: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  5467  0FAF  2FC4               	goto	l2355
  5468  0FB0                     l2341:	
  5469  0FB0  0829               	movf	UART_ReadFromGPS_TO@Pos^(0+128),w
  5470  0FB1                     L13:	
  5471  0FB1  3E01               	addlw	low ((UART_ReadFromGPS_TO@StartCode-__stringbase)| (0+32768))
  5472  0FB2  0084               	movwf	4
  5473  0FB3  120A  158A  2000  120A  158A  	fcall	stringdir
  5474  0FB8  0628               	xorwf	UART_ReadFromGPS_TO@TempChar^(0+128),w
  5475  0FB9  1D03               	skipz
  5476  0FBA  2FBF               	goto	l2347
  5477  0FBB  3007               	movlw	7
  5478  0FBC  0229               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  5479  0FBD  1C03               	btfss	3,0
  5480  0FBE  2FAE               	goto	l2339
  5481  0FBF                     l2347:	
  5482  0FBF  300D               	movlw	13
  5483  0FC0  0229               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  5484  0FC1  1803               	btfsc	3,0
  5485  0FC2  0008               	return
  5486                           
  5487                           ;gsk_usart.c: 97: else
  5488                           ;gsk_usart.c: 98: Pos=0;
  5489  0FC3  01A9               	clrf	UART_ReadFromGPS_TO@Pos^(0+128)
  5490  0FC4                     l2355:	
  5491  0FC4  0AA5               	incf	UART_ReadFromGPS_TO@i^(0+128),f
  5492  0FC5  1903               	skipnz
  5493  0FC6  0AA6               	incf	(UART_ReadFromGPS_TO@i+1)^(0+128),f
  5494  0FC7  3003               	movlw	3
  5495  0FC8  0226               	subwf	(UART_ReadFromGPS_TO@i+1)^(0+128),w
  5496  0FC9  3001               	movlw	1
  5497  0FCA  1903               	skipnz
  5498  0FCB  0225               	subwf	UART_ReadFromGPS_TO@i^(0+128),w
  5499  0FCC  1C03               	skipc
  5500  0FCD  2F98               	goto	l2331
  5501                           
  5502                           ;gsk_usart.c: 99: }
  5503                           ;gsk_usart.c: 100: CREN = 0;
  5504  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  5505  0FCF  1218               	bcf	24,4	;volatile
  5506  0FD0  0008               	return
  5507  0FD1                     __end_of_UART_ReadFromGPS_TO:	
  5508  0FD1                     __ptext22:	
  5509 ;; *************** function _UART_Read_TO *****************
  5510 ;; Defined at:
  5511 ;;		line 103 in file "libs/gsk_usart.c"
  5512 ;; Parameters:    Size  Location     Type
  5513 ;;  TimeOut         1    wreg     unsigned char 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  TimeOut         1    2[BANK1 ] unsigned char 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  1    wreg      unsigned char 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2, status,0
  5520 ;; Tracked objects:
  5521 ;;		On entry : 300/100
  5522 ;;		On exit  : 300/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:      BANK1   BANK3  BANK2l
  5525 ;;      Params:         0       0       0
  5526 ;;      Locals:         1       0       0
  5527 ;;      Temps:          0       0       0
  5528 ;;      Totals:         1       0       0
  5529 ;;Total ram usage:        1 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    1
  5532 ;; This function calls:
  5533 ;;		Nothing
  5534 ;; This function is called by:
  5535 ;;		_UART_ReadFromGPS_TO
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           
  5540                           ;psect for function _UART_Read_TO
  5541  0FD1                     _UART_Read_TO:	
  5542                           
  5543                           ;incstack = 0
  5544                           ; Regs used in _UART_Read_TO: [wreg+status,2+status,0]
  5545                           ;UART_Read_TO@TimeOut stored from wreg
  5546  0FD1  00A2               	movwf	UART_Read_TO@TimeOut^(0+128)
  5547                           
  5548                           ;gsk_usart.c: 104: while(!RCIF && TimeOut !=0) {
  5549  0FD2  2FDB               	goto	l2153
  5550  0FD3                     l2155:	
  5551  0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  5552  0FD4  0822               	movf	UART_Read_TO@TimeOut^(0+128),w
  5553  0FD5  1903               	btfsc	3,2
  5554  0FD6  2FDE               	goto	l584
  5555                           
  5556                           ;gsk_usart.c: 105: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5557  0FD7  0000               	nop
  5558                           
  5559                           ;gsk_usart.c: 106: TimeOut--;
  5560  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
  5561  0FD9  1303               	bcf	3,6	;RP1=0, select bank1
  5562  0FDA  03A2               	decf	UART_Read_TO@TimeOut^(0+128),f
  5563  0FDB                     l2153:	
  5564  0FDB  1283               	bcf	3,5	;RP0=0, select bank0
  5565  0FDC  1E8C               	btfss	12,5	;volatile
  5566  0FDD  2FD3               	goto	l2155
  5567  0FDE                     l584:	
  5568                           
  5569                           ;gsk_usart.c: 107: }
  5570                           ;gsk_usart.c: 108: if (RCIF)
  5571  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  5572  0FDF  1E8C               	btfss	12,5	;volatile
  5573  0FE0  3441               	retlw	65
  5574                           
  5575                           ;gsk_usart.c: 109: return RCREG;
  5576  0FE1  081A               	movf	26,w	;volatile
  5577  0FE2  0008               	return
  5578  0FE3                     __end_of_UART_Read_TO:	
  5579                           ;gsk_usart.c: 110: else
  5580                           ;gsk_usart.c: 111: return 0x41;
  5581                           
  5582  0FE3                     PL6:	
  5583  0FE3  0822               	movf	?___lmul^(0+128),w
  5584  0FE4  07BF               	addwf	ReadGPSToS@Sec^(0+128),f
  5585  0FE5  0823               	movf	(?___lmul+1)^(0+128),w
  5586  0FE6  1103               	clrz
  5587  0FE7  1803               	skipnc
  5588  0FE8  3E01               	addlw	1
  5589  0FE9  1D03               	btfss	3,2
  5590  0FEA  07C0               	addwf	(ReadGPSToS@Sec+1)^(0+128),f
  5591  0FEB  0824               	movf	(?___lmul+2)^(0+128),w
  5592  0FEC  1103               	clrz
  5593  0FED  1803               	skipnc
  5594  0FEE  3E01               	addlw	1
  5595  0FEF  1D03               	btfss	3,2
  5596  0FF0  07C1               	addwf	(ReadGPSToS@Sec+2)^(0+128),f
  5597  0FF1  0825               	movf	(?___lmul+3)^(0+128),w
  5598  0FF2  1103               	clrz
  5599  0FF3  0008               	return
  5600  0FF4                     __end_ofPL6:	
  5601  0FF4                     PL8:	
  5602  0FF4  3ED0               	addlw	208
  5603  0FF5  00A2               	movwf	___lmul@multiplier^(0+128)
  5604  0FF6  30FF               	movlw	255
  5605  0FF7  1803               	skipnc
  5606  0FF8  3000               	movlw	0
  5607  0FF9  00A3               	movwf	(___lmul@multiplier^(0+128)+1)
  5608  0FFA  01A4               	clrf	(___lmul@multiplier^(0+128)+2)
  5609  0FFB  1BA3               	btfsc	(___lmul@multiplier^(0+128)+1),7
  5610  0FFC  03A4               	decf	(___lmul@multiplier+2)^(0+128),f
  5611  0FFD  0824               	movf	(___lmul@multiplier^(0+128)+2),w
  5612  0FFE  00A5               	movwf	(___lmul@multiplier+3)^(0+128)
  5613  0FFF  0008               	return
  5614  1000                     __end_ofPL8:	
  5615                           
  5616                           	psect	text25
  5617  0D2C                     __ptext25:	
  5618 ;; *************** function _GetCumulativePeriodsForStates *****************
  5619 ;; Defined at:
  5620 ;;		line 3 in file "libs/gsk_algo_funcs.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  i               1    9[BANK1 ] unsigned char 
  5625 ;;  j               1    8[BANK1 ] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 300/200
  5632 ;;		On exit  : B00/900
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:      BANK1   BANK3  BANK2l
  5635 ;;      Params:         0       0       0
  5636 ;;      Locals:         2       0       0
  5637 ;;      Temps:          4       0       0
  5638 ;;      Totals:         6       0       0
  5639 ;;Total ram usage:        6 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    2
  5642 ;; This function calls:
  5643 ;;		_GetPrevCycle
  5644 ;; This function is called by:
  5645 ;;		_main
  5646 ;; This function uses a non-reentrant model
  5647 ;;
  5648                           
  5649                           
  5650                           ;psect for function _GetCumulativePeriodsForStates
  5651  0D2C                     _GetCumulativePeriodsForStates:	
  5652                           
  5653                           ;gsk_algo_funcs.c: 4: char i, j;
  5654                           ;gsk_algo_funcs.c: 5: for (i=0; i< 2; i++) {
  5655                           
  5656                           ;incstack = 0
  5657                           ; Regs used in _GetCumulativePeriodsForStates: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  5658  0D2C  1683               	bsf	3,5	;RP0=1, select bank1
  5659  0D2D  1303               	bcf	3,6	;RP1=0, select bank1
  5660  0D2E  01A9               	clrf	GetCumulativePeriodsForStates@i^(0+128)
  5661  0D2F                     l2623:	
  5662                           
  5663                           ;gsk_algo_funcs.c: 6: STATE_CUMULATIVE_PERIODS[i] = 0;
  5664  0D2F  1003               	clrc
  5665  0D30  0D29               	rlf	GetCumulativePeriodsForStates@i^(0+128),w
  5666  0D31  3E7A               	addlw	122
  5667  0D32  0084               	movwf	4
  5668  0D33  1383               	bcf	3,7	;select IRP bank0
  5669  0D34  0180               	clrf	0
  5670  0D35  0A84               	incf	4,f
  5671  0D36  0180               	clrf	0
  5672                           
  5673                           ;gsk_algo_funcs.c: 7: if (i==0)
  5674  0D37  0829               	movf	GetCumulativePeriodsForStates@i^(0+128),w
  5675  0D38  1D03               	btfss	3,2
  5676  0D39  2D3C               	goto	l2629
  5677                           
  5678                           ;gsk_algo_funcs.c: 8: j = 0;
  5679  0D3A  01A8               	clrf	GetCumulativePeriodsForStates@j^(0+128)
  5680  0D3B  2D45               	goto	l2635
  5681  0D3C                     l2629:	
  5682                           
  5683                           ;gsk_algo_funcs.c: 9: else
  5684                           ;gsk_algo_funcs.c: 10: j = STATE_BREAKS[GetPrevCycle(i)];
  5685  0D3C  0829               	movf	GetCumulativePeriodsForStates@i^(0+128),w
  5686  0D3D  2625  120A  158A   	fcall	_GetPrevCycle
  5687  0D40  3E64               	addlw	100
  5688  0D41  0084               	movwf	4
  5689  0D42  1783               	bsf	3,7	;select IRP bank2
  5690  0D43  0800               	movf	0,w
  5691  0D44  00A8               	movwf	GetCumulativePeriodsForStates@j^(0+128)
  5692  0D45                     l2635:	
  5693  0D45  0829               	movf	GetCumulativePeriodsForStates@i^(0+128),w
  5694  0D46  3E64               	addlw	100
  5695  0D47  0084               	movwf	4
  5696  0D48  1783               	bsf	3,7	;select IRP bank2
  5697  0D49  0800               	movf	0,w
  5698  0D4A  0228               	subwf	GetCumulativePeriodsForStates@j^(0+128),w
  5699  0D4B  1803               	btfsc	3,0
  5700  0D4C  2D6C               	goto	l2637
  5701                           
  5702                           ;gsk_algo_funcs.c: 12: STATE_CUMULATIVE_PERIODS[i] = STATE_CUMULATIVE_PERIODS[i]
  5703                           ;gsk_algo_funcs.c: 13: + STATE_PERIODS[j];
  5704  0D4D  1003               	clrc
  5705  0D4E  0D29               	rlf	GetCumulativePeriodsForStates@i^(0+128),w
  5706  0D4F  3E7A               	addlw	122
  5707  0D50  0084               	movwf	4
  5708  0D51  1383               	bcf	3,7	;select IRP bank0
  5709  0D52  0800               	movf	0,w
  5710  0D53  00A4               	movwf	??_GetCumulativePeriodsForStates^(0+128)
  5711  0D54  0A84               	incf	4,f
  5712  0D55  0800               	movf	0,w
  5713  0D56  00A5               	movwf	(??_GetCumulativePeriodsForStates^(0+128)+1)
  5714  0D57  0828               	movf	GetCumulativePeriodsForStates@j^(0+128),w
  5715  0D58  3E20               	addlw	32
  5716  0D59  0084               	movwf	4
  5717  0D5A  0800               	movf	0,w
  5718  0D5B  0724               	addwf	??_GetCumulativePeriodsForStates^(0+128),w
  5719  0D5C  00A6               	movwf	(??_GetCumulativePeriodsForStates+2)^(0+128)
  5720  0D5D  0825               	movf	(??_GetCumulativePeriodsForStates+1)^(0+128),w
  5721  0D5E  1803               	skipnc
  5722  0D5F  0A25               	incf	(??_GetCumulativePeriodsForStates+1)^(0+128),w
  5723  0D60  00A7               	movwf	((??_GetCumulativePeriodsForStates+2)^(0+128)+1)
  5724  0D61  1003               	clrc
  5725  0D62  0D29               	rlf	GetCumulativePeriodsForStates@i^(0+128),w
  5726  0D63  3E7A               	addlw	122
  5727  0D64  0084               	movwf	4
  5728  0D65  0826               	movf	(??_GetCumulativePeriodsForStates+2)^(0+128),w
  5729  0D66  0080               	movwf	0
  5730  0D67  0A84               	incf	4,f
  5731  0D68  0827               	movf	((??_GetCumulativePeriodsForStates+2)^(0+128)+1),w
  5732  0D69  0080               	movwf	0
  5733  0D6A  0AA8               	incf	GetCumulativePeriodsForStates@j^(0+128),f
  5734  0D6B  2D45               	goto	l2635
  5735  0D6C                     l2637:	
  5736  0D6C  3002               	movlw	2
  5737  0D6D  0AA9               	incf	GetCumulativePeriodsForStates@i^(0+128),f
  5738  0D6E  0229               	subwf	GetCumulativePeriodsForStates@i^(0+128),w
  5739  0D6F  1803               	btfsc	3,0
  5740  0D70  0008               	return
  5741  0D71  2D2F               	goto	l2623
  5742  0D72                     __end_of_GetCumulativePeriodsForStates:	
  5743  0D72                     __ptext24:	
  5744 ;; *************** function _GetCycle *****************
  5745 ;; Defined at:
  5746 ;;		line 27 in file "libs/gsk_algo_funcs.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  i               1   15[BANK1 ] unsigned char 
  5751 ;;  PrevCycle       1   14[BANK1 ] unsigned char 
  5752 ;; Return value:  Size  Location     Type
  5753 ;;                  1    wreg      void 
  5754 ;; Registers used:
  5755 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5756 ;; Tracked objects:
  5757 ;;		On entry : 300/A00
  5758 ;;		On exit  : 300/300
  5759 ;;		Unchanged: 0/0
  5760 ;; Data sizes:      BANK1   BANK3  BANK2l
  5761 ;;      Params:         0       0       0
  5762 ;;      Locals:         2       0       0
  5763 ;;      Temps:         10       0       0
  5764 ;;      Totals:        12       0       0
  5765 ;;Total ram usage:       12 bytes
  5766 ;; Hardware stack levels used:    1
  5767 ;; Hardware stack levels required when called:    2
  5768 ;; This function calls:
  5769 ;;		_GetPrevCycle
  5770 ;; This function is called by:
  5771 ;;		_main
  5772 ;; This function uses a non-reentrant model
  5773 ;;
  5774                           
  5775                           
  5776                           ;psect for function _GetCycle
  5777  0D72                     _GetCycle:	
  5778                           
  5779                           ;gsk_algo_funcs.c: 28: char PrevCycle;
  5780                           ;gsk_algo_funcs.c: 29: for (char i = 0; i < 3; i++) {
  5781                           
  5782                           ;incstack = 0
  5783                           ; Regs used in _GetCycle: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5784  0D72  1683               	bsf	3,5	;RP0=1, select bank1
  5785  0D73  1303               	bcf	3,6	;RP1=0, select bank1
  5786  0D74  01AF               	clrf	GetCycle@i^(0+128)
  5787  0D75                     l2647:	
  5788                           
  5789                           ;gsk_algo_funcs.c: 30: PrevCycle = GetPrevCycle(i);
  5790  0D75  082F               	movf	GetCycle@i^(0+128),w
  5791  0D76  2625  120A  158A   	fcall	_GetPrevCycle
  5792  0D79  00AE               	movwf	GetCycle@PrevCycle^(0+128)
  5793                           
  5794                           ;gsk_algo_funcs.c: 31: if (C[PrevCycle] <= C[i]) {
  5795  0D7A  00A4               	movwf	??_GetCycle^(0+128)
  5796  0D7B  3001               	movlw	1
  5797  0D7C  1003               	clrc
  5798  0D7D                     L14:	
  5799  0D7D  0DA4               	rlf	??_GetCycle^(0+128),f
  5800  0D7E  3EFF               	addlw	-1
  5801  0D7F  1003               	clrc
  5802  0D80  1D03               	skipz
  5803  0D81  2D7D               	goto	L14
  5804  0D82  0D24               	rlf	??_GetCycle^(0+128),w
  5805  0D83  3E4C               	addlw	76
  5806  0D84  0084               	movwf	4
  5807  0D85  1783               	bsf	3,7	;select IRP bank2
  5808  0D86  0800               	movf	0,w
  5809  0D87  00A5               	movwf	(??_GetCycle+1)^(0+128)
  5810  0D88  0A84               	incf	4,f
  5811  0D89  0800               	movf	0,w
  5812  0D8A  00A6               	movwf	((??_GetCycle+1)^(0+128)+1)
  5813  0D8B  0A84               	incf	4,f
  5814  0D8C  0800               	movf	0,w
  5815  0D8D  00A7               	movwf	((??_GetCycle+1)^(0+128)+2)
  5816  0D8E  0A84               	incf	4,f
  5817  0D8F  0800               	movf	0,w
  5818  0D90  00A8               	movwf	((??_GetCycle+1)^(0+128)+3)
  5819  0D91  082F               	movf	GetCycle@i^(0+128),w
  5820  0D92  00A9               	movwf	(??_GetCycle+5)^(0+128)
  5821  0D93  3001               	movlw	1
  5822  0D94  1003               	clrc
  5823  0D95                     L15:	
  5824  0D95  0DA9               	rlf	(??_GetCycle+5)^(0+128),f
  5825  0D96  3EFF               	addlw	-1
  5826  0D97  1003               	clrc
  5827  0D98  1D03               	skipz
  5828  0D99  2D95               	goto	L15
  5829  0D9A  0D29               	rlf	(??_GetCycle+5)^(0+128),w
  5830  0D9B  3E4C               	addlw	76
  5831  0D9C  0084               	movwf	4
  5832  0D9D  0800               	movf	0,w
  5833  0D9E  00AA               	movwf	(??_GetCycle+6)^(0+128)
  5834  0D9F  0A84               	incf	4,f
  5835  0DA0  0800               	movf	0,w
  5836  0DA1  00AB               	movwf	((??_GetCycle+6)^(0+128)+1)
  5837  0DA2  0A84               	incf	4,f
  5838  0DA3  0800               	movf	0,w
  5839  0DA4  00AC               	movwf	((??_GetCycle+6)^(0+128)+2)
  5840  0DA5  0A84               	incf	4,f
  5841  0DA6  0800               	movf	0,w
  5842  0DA7  00AD               	movwf	((??_GetCycle+6)^(0+128)+3)
  5843  0DA8  082D               	movf	(??_GetCycle+9)^(0+128),w
  5844  0DA9  3A80               	xorlw	128
  5845  0DAA  00FF               	movwf	127
  5846  0DAB  0828               	movf	(??_GetCycle+4)^(0+128),w
  5847  0DAC  3A80               	xorlw	128
  5848  0DAD  027F               	subwf	127,w
  5849  0DAE  1D03               	skipz
  5850  0DAF  2DBA               	goto	u2603
  5851  0DB0  0827               	movf	(??_GetCycle+3)^(0+128),w
  5852  0DB1  022C               	subwf	(??_GetCycle+8)^(0+128),w
  5853  0DB2  1D03               	skipz
  5854  0DB3  2DBA               	goto	u2603
  5855  0DB4  0826               	movf	(??_GetCycle+2)^(0+128),w
  5856  0DB5  022B               	subwf	(??_GetCycle+7)^(0+128),w
  5857  0DB6  1D03               	skipz
  5858  0DB7  2DBA               	goto	u2603
  5859  0DB8  0825               	movf	(??_GetCycle+1)^(0+128),w
  5860  0DB9  022A               	subwf	(??_GetCycle+6)^(0+128),w
  5861  0DBA                     u2603:	
  5862                           
  5863                           ;gsk_algo_funcs.c: 32: if ((S>C[PrevCycle]) && (S<=C[i])) {
  5864  0DBA  082E               	movf	GetCycle@PrevCycle^(0+128),w
  5865  0DBB  00A4               	movwf	??_GetCycle^(0+128)
  5866  0DBC  3001               	movlw	1
  5867  0DBD  1C03               	skipc
  5868  0DBE  2DE3               	goto	L18
  5869  0DBF  1003               	clrc
  5870  0DC0                     L16:	
  5871  0DC0  0DA4               	rlf	??_GetCycle^(0+128),f
  5872  0DC1  3EFF               	addlw	-1
  5873  0DC2  1003               	clrc
  5874  0DC3  1D03               	skipz
  5875  0DC4  2DC0               	goto	L16
  5876  0DC5  262F  120A  158A   	fcall	PL4	;call to abstracted procedure
  5877  0DC8  1D03               	skipz
  5878  0DC9  2DD7               	goto	u2623
  5879  0DCA  2648  120A  158A   	fcall	PL20	;call to abstracted procedure
  5880  0DCD  1D03               	skipz
  5881  0DCE  2DD7               	goto	u2623
  5882  0DCF  264F  120A  158A   	fcall	PL22	;call to abstracted procedure
  5883  0DD2  1D03               	skipz
  5884  0DD3  2DD7               	goto	u2623
  5885  0DD4  2656  120A  158A   	fcall	PL24	;call to abstracted procedure
  5886  0DD7                     u2623:	
  5887  0DD7  1803               	skipnc
  5888  0DD8  2E1B               	goto	l2663
  5889  0DD9  082F               	movf	GetCycle@i^(0+128),w
  5890  0DDA  00A4               	movwf	??_GetCycle^(0+128)
  5891  0DDB  3001               	movlw	1
  5892  0DDC  1003               	clrc
  5893  0DDD                     L17:	
  5894  0DDD  0DA4               	rlf	??_GetCycle^(0+128),f
  5895  0DDE  3EFF               	addlw	-1
  5896  0DDF  1003               	clrc
  5897  0DE0  1D03               	skipz
  5898  0DE1  2DDD               	goto	L17
  5899  0DE2  2E05               	goto	L20
  5900  0DE3                     L18:	
  5901                           ;gsk_algo_funcs.c: 36: if ((S>C[PrevCycle]) || (S<=C[i])) {
  5902                           
  5903  0DE3  0DA4               	rlf	??_GetCycle^(0+128),f
  5904  0DE4  3EFF               	addlw	-1
  5905  0DE5  1003               	clrc
  5906  0DE6  1D03               	skipz
  5907  0DE7  2DE3               	goto	L18
  5908  0DE8  262F  120A  158A   	fcall	PL4	;call to abstracted procedure
  5909  0DEB  1D03               	skipz
  5910  0DEC  2DFA               	goto	u2663
  5911  0DED  2648  120A  158A   	fcall	PL20	;call to abstracted procedure
  5912  0DF0  1D03               	skipz
  5913  0DF1  2DFA               	goto	u2663
  5914  0DF2  264F  120A  158A   	fcall	PL22	;call to abstracted procedure
  5915  0DF5  1D03               	skipz
  5916  0DF6  2DFA               	goto	u2663
  5917  0DF7  2656  120A  158A   	fcall	PL24	;call to abstracted procedure
  5918  0DFA                     u2663:	
  5919  0DFA  082F               	movf	GetCycle@i^(0+128),w
  5920  0DFB  1C03               	skipc
  5921  0DFC  2E1A               	goto	L22
  5922  0DFD  00A4               	movwf	??_GetCycle^(0+128)
  5923  0DFE  3001               	movlw	1
  5924  0DFF  1003               	clrc
  5925  0E00                     L19:	
  5926  0E00  0DA4               	rlf	??_GetCycle^(0+128),f
  5927  0E01  3EFF               	addlw	-1
  5928  0E02  1003               	clrc
  5929  0E03  1D03               	skipz
  5930  0E04  2E00               	goto	L19
  5931  0E05                     L20:	
  5932  0E05  262F  120A  158A   	fcall	PL4	;call to abstracted procedure
  5933  0E08  1D03               	skipz
  5934  0E09  2E17               	goto	u2683
  5935  0E0A  2648  120A  158A   	fcall	PL20	;call to abstracted procedure
  5936  0E0D  1D03               	skipz
  5937  0E0E  2E17               	goto	u2683
  5938  0E0F  264F  120A  158A   	fcall	PL22	;call to abstracted procedure
  5939  0E12  1D03               	skipz
  5940  0E13  2E17               	goto	u2683
  5941  0E14  2656  120A  158A   	fcall	PL24	;call to abstracted procedure
  5942  0E17                     u2683:	
  5943  0E17  1C03               	skipc
  5944  0E18  2E1B               	goto	l2663
  5945                           
  5946                           ;gsk_algo_funcs.c: 33: CYCLE_TYPE = i;
  5947  0E19  082F               	movf	GetCycle@i^(0+128),w
  5948  0E1A                     L22:	
  5949  0E1A  00ED               	movwf	_CYCLE_TYPE^(0+128)	;volatile
  5950  0E1B                     l2663:	
  5951  0E1B  3003               	movlw	3
  5952  0E1C  0AAF               	incf	GetCycle@i^(0+128),f
  5953  0E1D  022F               	subwf	GetCycle@i^(0+128),w
  5954  0E1E  1C03               	skipc
  5955  0E1F  2D75               	goto	l2647
  5956                           
  5957                           ;gsk_algo_funcs.c: 38: }
  5958                           ;gsk_algo_funcs.c: 39: }
  5959                           ;gsk_algo_funcs.c: 40: }
  5960                           ;gsk_algo_funcs.c: 41: PREV_CYCLE_TYPE = GetPrevCycle(CYCLE_TYPE);
  5961  0E20  086D               	movf	_CYCLE_TYPE^(0+128),w	;volatile
  5962  0E21  2625               	fcall	_GetPrevCycle
  5963  0E22  1703               	bsf	3,6	;RP1=1, select bank3
  5964  0E23  00D4               	movwf	_PREV_CYCLE_TYPE^(0+384)	;volatile
  5965  0E24  0008               	return
  5966  0E25                     __end_of_GetCycle:	
  5967  0E25                     __ptext26:	
  5968 ;; *************** function _GetPrevCycle *****************
  5969 ;; Defined at:
  5970 ;;		line 18 in file "libs/gsk_algo_funcs.c"
  5971 ;; Parameters:    Size  Location     Type
  5972 ;;  cycle           1    wreg     unsigned char 
  5973 ;; Auto vars:     Size  Location     Type
  5974 ;;  cycle           1    3[BANK1 ] unsigned char 
  5975 ;;  PrevCycle       1    2[BANK1 ] unsigned char 
  5976 ;; Return value:  Size  Location     Type
  5977 ;;                  1    wreg      unsigned char 
  5978 ;; Registers used:
  5979 ;;		wreg, status,2, status,0
  5980 ;; Tracked objects:
  5981 ;;		On entry : 300/900
  5982 ;;		On exit  : 300/100
  5983 ;;		Unchanged: 0/0
  5984 ;; Data sizes:      BANK1   BANK3  BANK2l
  5985 ;;      Params:         0       0       0
  5986 ;;      Locals:         2       0       0
  5987 ;;      Temps:          0       0       0
  5988 ;;      Totals:         2       0       0
  5989 ;;Total ram usage:        2 bytes
  5990 ;; Hardware stack levels used:    1
  5991 ;; Hardware stack levels required when called:    1
  5992 ;; This function calls:
  5993 ;;		Nothing
  5994 ;; This function is called by:
  5995 ;;		_GetCumulativePeriodsForStates
  5996 ;;		_GetCycle
  5997 ;; This function uses a non-reentrant model
  5998 ;;
  5999                           
  6000                           
  6001                           ;psect for function _GetPrevCycle
  6002  0E25                     _GetPrevCycle:	
  6003                           
  6004                           ;incstack = 0
  6005                           ; Regs used in _GetPrevCycle: [wreg+status,2+status,0]
  6006                           ;GetPrevCycle@cycle stored from wreg
  6007  0E25  00A3               	movwf	GetPrevCycle@cycle^(0+128)
  6008                           
  6009                           ;gsk_algo_funcs.c: 19: UINT8 PrevCycle;
  6010                           ;gsk_algo_funcs.c: 20: if (cycle > 0)
  6011  0E26  0823               	movf	GetPrevCycle@cycle^(0+128),w
  6012  0E27  1903               	btfsc	3,2
  6013  0E28  2E2C               	goto	l2439
  6014                           
  6015                           ;gsk_algo_funcs.c: 21: PrevCycle = cycle - 1;
  6016  0E29  0823               	movf	GetPrevCycle@cycle^(0+128),w
  6017  0E2A  3EFF               	addlw	255
  6018  0E2B  2E2D               	goto	L24
  6019  0E2C                     l2439:	
  6020                           
  6021                           ;gsk_algo_funcs.c: 22: else
  6022                           ;gsk_algo_funcs.c: 23: PrevCycle = 3 - 1;
  6023  0E2C  3002               	movlw	2
  6024  0E2D                     L24:	
  6025  0E2D  00A2               	movwf	GetPrevCycle@PrevCycle^(0+128)
  6026                           
  6027                           ;gsk_algo_funcs.c: 24: return PrevCycle;
  6028  0E2E  0008               	return
  6029  0E2F                     __end_of_GetPrevCycle:	
  6030  0E2F                     PL4:	
  6031  0E2F  0D24               	rlf	??_GetCycle^(0+128),w
  6032  0E30  3E4C               	addlw	76
  6033  0E31  0084               	movwf	4
  6034  0E32  0800               	movf	0,w
  6035  0E33  00A5               	movwf	(??_GetCycle+1)^(0+128)
  6036  0E34  0A84               	incf	4,f
  6037  0E35  0800               	movf	0,w
  6038  0E36  00A6               	movwf	((??_GetCycle+1)^(0+128)+1)
  6039  0E37  0A84               	incf	4,f
  6040  0E38  0800               	movf	0,w
  6041  0E39  00A7               	movwf	((??_GetCycle+1)^(0+128)+2)
  6042  0E3A  0A84               	incf	4,f
  6043  0E3B  0800               	movf	0,w
  6044  0E3C  00A8               	movwf	((??_GetCycle+1)^(0+128)+3)
  6045  0E3D  0828               	movf	(??_GetCycle+4)^(0+128),w
  6046  0E3E  3A80               	xorlw	128
  6047  0E3F  00FF               	movwf	127
  6048  0E40  1283               	bcf	3,5	;RP0=0, select bank2
  6049  0E41  1703               	bsf	3,6	;RP1=1, select bank2
  6050  0E42  086E               	movf	110,w	;volatile
  6051  0E43  3A80               	xorlw	128
  6052  0E44  027F               	subwf	127,w
  6053  0E45  1683               	bsf	3,5	;RP0=1, select bank1
  6054  0E46  1303               	bcf	3,6	;RP1=0, select bank1
  6055  0E47  0008               	return
  6056  0E48                     __end_ofPL4:	
  6057  0E48                     PL20:	
  6058  0E48  1283               	bcf	3,5	;RP0=0, select bank2
  6059  0E49  1703               	bsf	3,6	;RP1=1, select bank2
  6060  0E4A  086D               	movf	109,w	;volatile
  6061  0E4B  1683               	bsf	3,5	;RP0=1, select bank1
  6062  0E4C  1303               	bcf	3,6	;RP1=0, select bank1
  6063  0E4D  0227               	subwf	(??_GetCycle+3)^(0+128),w
  6064  0E4E  0008               	return
  6065  0E4F                     __end_ofPL20:	
  6066  0E4F                     PL22:	
  6067  0E4F  1283               	bcf	3,5	;RP0=0, select bank2
  6068  0E50  1703               	bsf	3,6	;RP1=1, select bank2
  6069  0E51  086C               	movf	108,w	;volatile
  6070  0E52  1683               	bsf	3,5	;RP0=1, select bank1
  6071  0E53  1303               	bcf	3,6	;RP1=0, select bank1
  6072  0E54  0226               	subwf	(??_GetCycle+2)^(0+128),w
  6073  0E55  0008               	return
  6074  0E56                     __end_ofPL22:	
  6075  0E56                     PL24:	
  6076  0E56  1283               	bcf	3,5	;RP0=0, select bank2
  6077  0E57  1703               	bsf	3,6	;RP1=1, select bank2
  6078  0E58  086B               	movf	107,w	;volatile
  6079  0E59  1683               	bsf	3,5	;RP0=1, select bank1
  6080  0E5A  1303               	bcf	3,6	;RP1=0, select bank1
  6081  0E5B  0225               	subwf	(??_GetCycle+1)^(0+128),w
  6082  0E5C  0008               	return
  6083  0E5D                     __end_ofPL24:	
  6084                           
  6085                           	psect	text27
  6086  0B76                     __ptext27:	
  6087 ;; *************** function _GetAbs *****************
  6088 ;; Defined at:
  6089 ;;		line 55 in file "libs/gsk_algo_funcs.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  a               2    2[BANK1 ] short 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;		None
  6094 ;; Return value:  Size  Location     Type
  6095 ;;                  2    2[BANK1 ] short 
  6096 ;; Registers used:
  6097 ;;		status,2, status,0
  6098 ;; Tracked objects:
  6099 ;;		On entry : 300/100
  6100 ;;		On exit  : 300/100
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:      BANK1   BANK3  BANK2l
  6103 ;;      Params:         2       0       0
  6104 ;;      Locals:         0       0       0
  6105 ;;      Temps:          0       0       0
  6106 ;;      Totals:         2       0       0
  6107 ;;Total ram usage:        2 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    1
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_main
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           
  6118                           ;psect for function _GetAbs
  6119  0B76                     _GetAbs:	
  6120                           
  6121                           ;gsk_algo_funcs.c: 56: if (a<0)
  6122                           
  6123                           ;incstack = 0
  6124                           ; Regs used in _GetAbs: [status]
  6125  0B76  1FA3               	btfss	(GetAbs@a+1)^(0+128),7
  6126  0B77  0008               	return
  6127                           
  6128                           ;gsk_algo_funcs.c: 57: a=a*(-1);
  6129  0B78  09A2               	comf	GetAbs@a^(0+128),f
  6130  0B79  09A3               	comf	(GetAbs@a+1)^(0+128),f
  6131  0B7A  0AA2               	incf	GetAbs@a^(0+128),f
  6132  0B7B  1903               	skipnz
  6133  0B7C  0AA3               	incf	(GetAbs@a+1)^(0+128),f
  6134                           
  6135                           ;gsk_algo_funcs.c: 58: return a;
  6136  0B7D  0008               	return
  6137  0B7E                     __end_of_GetAbs:	
  6138                           
  6139                           	psect	text28
  6140  0B9E                     __ptext28:	
  6141 ;; *************** function _tc_int *****************
  6142 ;; Defined at:
  6143 ;;		line 242 in file "main.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;		None
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		wreg
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 300/100
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:      BANK1   BANK3  BANK2l
  6157 ;;      Params:         0       0       0
  6158 ;;      Locals:         0       0       0
  6159 ;;      Temps:          2       0       0
  6160 ;;      Totals:         2       0       0
  6161 ;;Total ram usage:        2 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; This function calls:
  6164 ;;		Nothing
  6165 ;; This function is called by:
  6166 ;;		Interrupt level 1
  6167 ;; This function uses a non-reentrant model
  6168 ;;
  6169                           
  6170                           
  6171                           ;psect for function _tc_int
  6172  0B9E                     _tc_int:	
  6173                           
  6174                           ;main.c: 243: if(PIR1bits.TMR1IF && PIE1bits.TMR1IE) {
  6175  0B9E  1283               	bcf	3,5	;RP0=0, select bank0
  6176  0B9F  1C0C               	btfss	12,0	;volatile
  6177  0BA0  2BAF               	goto	i1l748
  6178  0BA1  1683               	bsf	3,5	;RP0=1, select bank1
  6179  0BA2  1C0C               	btfss	12,0	;volatile
  6180  0BA3  2BAF               	goto	i1l748
  6181                           
  6182                           ;main.c: 244: PIR1bits.TMR1IF = 0;
  6183  0BA4  1283               	bcf	3,5	;RP0=0, select bank0
  6184  0BA5  100C               	bcf	12,0	;volatile
  6185                           
  6186                           ;main.c: 245: TMR1 -= 997;
  6187  0BA6  30E5               	movlw	229
  6188  0BA7  028E               	subwf	14,f	;volatile
  6189  0BA8  3003               	movlw	3
  6190  0BA9  1C03               	skipc
  6191  0BAA  038F               	decf	15,f	;volatile
  6192  0BAB  028F               	subwf	15,f	;volatile
  6193                           
  6194                           ;main.c: 247: FLAGS.bits.b5 = 1;
  6195  0BAC  1683               	bsf	3,5	;RP0=1, select bank3
  6196  0BAD  1703               	bsf	3,6	;RP1=1, select bank3
  6197  0BAE  16D3               	bsf	_FLAGS^(0+384),5	;volatile
  6198  0BAF                     i1l748:	
  6199  0BAF  1683               	bsf	3,5	;RP0=1, select bank1
  6200  0BB0  1303               	bcf	3,6	;RP1=0, select bank1
  6201  0BB1  0821               	movf	(??_tc_int+1)^(0+128),w
  6202  0BB2  008A               	movwf	10
  6203  0BB3  0E20               	swapf	??_tc_int^(0+128),w
  6204  0BB4  0083               	movwf	3
  6205  0BB5  0EFE               	swapf	126,f
  6206  0BB6  0E7E               	swapf	126,w
  6207  0BB7  0009               	retfie
  6208  0BB8                     __end_of_tc_int:	
  6209  007E                     btemp	set	126	;btemp
  6210  007E                     wtemp	set	126
  6211  007E                     wtemp0	set	126
  6212  0080                     wtemp1	set	128
  6213  0082                     wtemp2	set	130
  6214  0084                     wtemp3	set	132
  6215  0086                     wtemp4	set	134
  6216  0088                     wtemp5	set	136
  6217  007F                     wtemp6	set	127
  6218  007E                     ttemp	set	126
  6219  007E                     ttemp0	set	126
  6220  0081                     ttemp1	set	129
  6221  0084                     ttemp2	set	132
  6222  0087                     ttemp3	set	135
  6223  007F                     ttemp4	set	127
  6224  007E                     ltemp	set	126
  6225  007E                     ltemp0	set	126
  6226  0082                     ltemp1	set	130
  6227  0086                     ltemp2	set	134
  6228  0080                     ltemp3	set	128
  6229                           
  6230                           	psect	intentry
  6231  0004                     __pintentry:	
  6232                           ;incstack = 0
  6233                           ; Regs used in _tc_int: [wreg]
  6234                           
  6235  0004                     interrupt_function:	
  6236  007E                     saved_w	set	btemp
  6237  0004  00FE               	movwf	btemp
  6238  0005  0E03               	swapf	3,w
  6239  0006  1683               	bsf	3,5	;RP0=1, select bank1
  6240  0007  1303               	bcf	3,6	;RP1=0, select bank1
  6241  0008  00A0               	movwf	??_tc_int^(0+128)
  6242  0009  080A               	movf	10,w
  6243  000A  00A1               	movwf	(??_tc_int+1)^(0+128)
  6244  000B  120A  158A  2B9E   	ljmp	_tc_int


Data Sizes:
    Strings     0
    Constant    7
    Data        167
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    BANK1            80     77      78
    BANK3            96     67      69
    BANK2l           12      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK3[2]), 

    IsValidGPS@GPSData	PTR unsigned char  size(1) Largest target is 6
		 -> ReadGPSToS@Output(BANK1[6]), 

    UART_ReadValidTimeFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> ReadGPSToS@Output(BANK1[6]), 

    UART_ReadFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> ReadGPSToS@Output(BANK1[6]), 


Critical Paths under _main in BANK1

    _UART_Init->_round
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftadd
    ___altoft->___ftpack
    ___ftsub->_trunc
    ___ftadd->___ftdiv
    ___ftmul->___altoft
    ___ftdiv->___ftmul
    _ReadVars->___bmul
    _ReadGPSToS->___lmul
    _UART_ReadValidTimeFromGPS_TO->_UART_ReadFromGPS_TO
    _UART_ReadFromGPS_TO->_UART_Read_TO
    _GetCycle->_GetPrevCycle
    _GetCumulativePeriodsForStates->_GetPrevCycle

Critical Paths under _tc_int in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_UART_Init
    _UART_Init->_round
    _round->___ftsub
    ___ftsub->_trunc

Critical Paths under _tc_int in BANK3

    None.

Critical Paths under _main in BANK2l

    None.

Critical Paths under _tc_int in BANK2l

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                47    47      0   24747
                                             26 BANK3     41    41      0
                             _GetAbs
      _GetCumulativePeriodsForStates
                           _GetCycle
                         _ReadGPSToS
                           _ReadVars
                         _ResetTimer
                          _UART_Init
                            ___almod
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     295
                                              2 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     508
                                              2 BANK1     10     2      8
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           12     8      4   18737
                                             14 BANK3     12     8      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    9040
                                             74 BANK1      3     0      3
                                             11 BANK3      3     3      0
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    2932
                                             71 BANK1      3     0      3
                                              0 BANK3      5     5      0
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     314
                                              2 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             13     9      4     398
                                             58 BANK1     13     9      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             6     2      4    1951
                                             10 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3038
                                              5 BANK3      6     0      6
                            ___ftadd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    2865
                                             46 BANK1     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2221
                                             16 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2095
                                             31 BANK1     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              2 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ResetTimer                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            17    17      0     973
                                              5 BANK1     17    17      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              2 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     371
                                              2 BANK1      3     2      1
 ---------------------------------------------------------------------------------
 (1) _ReadGPSToS                                          21    17      4    2029
                                             14 BANK1     21    17      4
       _UART_ReadValidTimeFromGPS_TO
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     942
                                              2 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (2) _UART_ReadValidTimeFromGPS_TO                         2     1      1     862
                                             10 BANK1      2     1      1
                         _IsValidGPS
                _UART_ReadFromGPS_TO
 ---------------------------------------------------------------------------------
 (3) _UART_ReadFromGPS_TO                                  7     6      1     397
                                              3 BANK1      7     6      1
                       _UART_Read_TO
 ---------------------------------------------------------------------------------
 (4) _UART_Read_TO                                         1     1      0      23
                                              2 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _IsValidGPS                                           2     2      0     319
                                              2 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GetCycle                                            12    12      0     313
                                              4 BANK1     12    12      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (1) _GetCumulativePeriodsForStates                        6     6      0     293
                                              4 BANK1      6     6      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (2) _GetPrevCycle                                         2     2      0      68
                                              2 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GetAbs                                               2     0      2     226
                                              2 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _tc_int                                               2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetAbs
   _GetCumulativePeriodsForStates
     _GetPrevCycle
   _GetCycle
     _GetPrevCycle
   _ReadGPSToS
     _UART_ReadValidTimeFromGPS_TO
       _IsValidGPS
       _UART_ReadFromGPS_TO
         _UART_Read_TO
     ___lmul
   _ReadVars
     ___bmul
     _eeprom_read
   _ResetTimer
   _UART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _round
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _frexp
   ___almod
   ___lbdiv

 _tc_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     43      45       5       71.9%
BITBANK3            60      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2l               C      0       0       7        0.0%
BITBANK2l            C      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     4D      4E       3       97.5%
BITBANK1            50      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      93       8        0.0%
ABS                  0      0      93       1        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       0        0.0%
EEDATA             100      0      A7       0       65.2%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Dec 21 06:30:48 2016

                          ___altoft@exp 00AE                                       _C 014C  
                                     _S 016B                                       pc 0002  
                        ___bmul@product 00A3                             __CFG_CP$OFF 0000  
                                    PL2 0759                                      PL4 0E2F  
                                    PL6 0FE3                                      PL8 0FF4  
                         ___altoft@sign 00AF               UART_ReadFromGPS_TO@Output 00A7  
                                    _RD 0C60                                      _WR 0C61  
                                    fsr 0004              UART_ReadFromGPS_TO@TimeOut 00A3  
                          ___ftadd@exp1 00D9                            ___ftadd@exp2 00D8  
                                   PL10 078C                                     PL20 0E48  
                                   PL12 07A7                                     PL30 0406  
                                   PL22 0E4F                                     PL14 07BB  
                                   PL32 040D                                     PL24 0E56  
                                   PL16 0D1A                                     PL34 0D26  
                                   PL26 07C8                                     PL18 03FB  
                                   PL36 07D7                                     PL28 07D0  
                          ___ftadd@sign 00D7                                     l614 0EF7  
                                   l702 05AE                                     l721 0668  
                                   l732 06AF                                     l584 0FDE  
                                   l761 0CF6                                     l738 074D  
                                   l915 0BC8                                     l739 0753  
                                   l858 0F01                                     _RC0 0038  
                                   _RC1 0039                                     _C_D 016F  
                          __CFG_CPD$OFF 0000                            main@SecError 01CD  
                                   fsr0 0004                                     indf 0000  
                          __CFG_IESO$ON 0000                            __CFG_FOSC$HS 0000  
                     GetCycle@PrevCycle 00AE                     _UART_ReadFromGPS_TO 0F8D  
                     GetPrevCycle@cycle 00A3                            __CFG_LVP$OFF 0000  
                          ___ftdiv@cntr 00C8                        main@DiffInSecond 01CF  
                          ___ftdiv@sign 00CD                                    l1003 0288  
                                  l1015 02B0                                    l1109 07EA  
                                  l1039 01B2                                    l1057 02E4  
                                  l2131 0291                                    l2211 017D  
                                  l2141 02A5                                    l2133 0296  
                                  l2221 0196                                    l2135 02A0  
                                  l2231 01AE                                    l2223 019A  
                                  l2153 0FDB                                    l2129 028C  
                                  l2217 018C                                    l2305 03CE  
                                  l2155 0FD3                                    l2331 0F98  
                                  l2139 02AE                                    l2243 01C8  
                                  l2219 0191                                    l2403 039E  
                                  l2341 0FB0                                    l2237 01BD  
                                  l2229 01A9                                    l2261 022F  
                                  l2413 0105                                    l2255 01E4  
                                  l2263 0234                                    l2521 034C  
                                  l2193 0160                                    l2177 0208  
                                  l2363 0F46                                    l2347 0FBF  
                                  l2355 0FC4                                    l2339 0FAE  
                                  l2451 0F17                                    l2179 0213  
                                  l2291 0269                                    l2283 025B  
                                  l2381 0F6E                                    l2461 0D0E  
                                  l2517 033B                                    l2189 0159  
                                  l2439 0E2C                                    l2623 0D2F  
                                  l2375 0F60                                    l2607 0CC7  
                                  l2551 0372                                    l2543 0366  
                                  l2199 016F                                    l2295 0277  
                                  l2279 0253                                    l2393 0F8A  
                                  l2369 0F52                                    l2289 025F  
                                  l2635 0D45                                    l2387 0F7C  
                                  l2555 037B                                    l2539 035D  
                                  l2637 0D6C                                    l2629 0D3C  
                                  l2581 0C3A                                    l2477 02D3  
                                  l2733 0BE5                                    l2741 0C0A  
                                  l2725 0BD5                                    l2663 0E1B  
                                  l2647 0D75                                    l2903 063E  
                                  l2831 04ED                                    l2593 0CB1  
                                  l2569 0C29                                    l2745 0C18  
                                  l2921 067C                                    l2905 0640  
                                  l2841 0515                                    l2809 0490  
                                  l2595 0CB2                                    l2579 0C39  
                                  l2499 02F7                                    l2755 07E4  
                                  l2915 064D                                    l2819 04DC  
                                  l2827 04DF                                    l2861 05A7  
                                  l2837 04F6                                    l2943 06A5  
                                  l2935 0693                                    l2951 06B8  
                                  l2871 05FC                                    l2855 057A  
                                  l2839 0508                                    l2769 07F7  
                                  l2929 067F                                    l2849 0566  
                                  l2963 070B                                    l2939 069C  
                                  l2965 0717                                    l2893 0631  
                                  l2877 0605                                    l2973 05D9  
                                  l2975 0755                                    l2959 06FA  
                                  l2887 0624                                    l2977 05CD  
                                  _BRGH 04C2                                    _CREN 00C4  
                                  _EE_C 0096                                    u2005 0238  
                                  u3035 05BA                                    u3124 065F  
                                  u3125 065C                                    u3225 06ED  
                                  u3154 0679                                    u2603 0DBA  
                                  u2291 0CF5                                    u3235 0705  
                                  u3155 0676                                    u2623 0DD7  
                                  u2385 0305                                    u3275 05EE  
                                  u2663 0DFA                                    u2815 0BF3  
                                  u2683 0E17                                    u2943 0506  
                                  _RCIF 0065                                    u2973 055D  
                                  _TMR1 000E                                    _SPEN 00C7  
                                  _TXEN 04C5                                    _SYNC 04C4  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
                                  _main 0414                            ___ftpack@arg 00A2  
                          ___ftpack@exp 00A5                                    btemp 007E  
                                  ltemp 007E                                    start 000E  
                                  ttemp 007E                                    wtemp 007E  
                  ?_UART_ReadFromGPS_TO 00A3                       ___bmul@multiplier 00A4  
                         __CFG_MCLRE$ON 0000                            ___ftmul@cntr 00BD  
                          ___ftmul@sign 00BE                            ___fttol@exp1 00E6  
                          ___fttol@lval 00E2                         __end_of___almod 0C21  
                                 ?_main 00A0                         __end_of___lbdiv 07F9  
                                 _EEADR 010D                         __end_of___ftadd 01F6  
                                 _BRG16 0C3B                           __CFG_WDTE$OFF 0000  
                       __end_of___ftdiv 032A                                   _ANSEL 0188  
                                 _FLAGS 01D3                    __end_of_GetPrevCycle 0E2F  
                                 _AUDIO 0167                         __end_of___ftmul 0397  
                       __end_of___ftsub 03C2                         __end_of___fttol 0280  
                                 i1l748 0BAF                                   _RCREG 001A  
                                 u292a1 04C6                                   u292a2 04D0  
                                 u292a3 04DA                                   u292b1 04C8  
                                 u292b2 04D2                                   _SPBRG 0099  
                                 _PORTA 0005                                   _PORTB 0006  
                                 _TRISA 0085                                   _TRISB 0086  
                                 _TRISC 0087                     ___lmul@multiplicand 00A6  
                    __size_of_UART_Init 0089                              _IsValidGPS 0F3A  
                                 _frexp 03C2                           ___ftpack@sign 00A6  
                                 _round 00A5                                   main@i 01D0  
                                 main@j 01CA                                   main@k 01C1  
                                 main@l 01D1                                   _trunc 00F2  
                        __CFG_BOREN$OFF 0000                                   pclath 000A  
                                 ltemp0 007E                                   ltemp1 0082  
                                 ltemp2 0086                                   ltemp3 0080  
                                 ttemp0 007E                                   ttemp1 0081  
                                 ttemp2 0084                                   ttemp3 0087  
                                 ttemp4 007F                                   status 0003  
                                 wtemp0 007E                                   wtemp1 0080  
                                 wtemp2 0082                                   wtemp3 0084  
                                 wtemp4 0086                                   wtemp5 0088  
                                 wtemp6 007F                              _ReadGPSToS 0E5D  
                       ___lbdiv@divisor 00A2                         ___lbdiv@counter 00A4  
                      __end_of_GetCycle 0E25                   ??_UART_ReadFromGPS_TO 00A4  
                       __initialization 0011                            __end_of_main 0759  
                      __end_of_ReadVars 0CF2           main@StateAudioSplOnOffCounter 01C8  
                                ??_main 01AA                           ___fttol@sign1 00E1  
                                ?_frexp 00A2                        __end_of___altoft 0225  
                                _EEDATA 010C                                  _EECON1 018C  
                      __end_of___ftpack 02C2                                  ?_round 00EA  
                                _ANSELH 0189                                  ?_trunc 00E7  
                                _EE_C_D 00A6                                  _SPBRGH 009A  
                                _GetAbs 0B76                              _ResetTimer 0B7E  
                        __CFG_PWRTE$OFF 0000                    __size_of_eeprom_read 001A  
                     __end_of_UART_Init 00A5                                  ___bmul 0D0C  
                                ___lmul 0EFD                               ??___almod 00AA  
                             ??___lbdiv 00A3                               ??___ftadd 00D4  
                             ??___ftdiv 00C5                               ??___ftmul 00B6  
                             ??___ftsub 00EA                               ??___fttol 00DE  
                                _tc_int 0B9E                   ___ftmul@f3_as_product 00BA  
                          __pdataEEDATA 0000                           ReadGPSToS@Sec 00BF  
                                saved_w 007E                                  round@f 019B  
                                round@x 00EA                             ?_IsValidGPS 0000  
                                trunc@i 0190                                  trunc@x 00E7  
                      ___lbdiv@dividend 00A3                 __end_of__initialization 0018  
                            ___altoft@c 00AA                   main@StateSecRemaining 01C3  
                       eeprom_read@addr 00A2                              ___ftadd@f1 00CE  
                            ___ftadd@f2 00D1                             ?_ReadGPSToS 00AE  
  __end_ofUART_ReadFromGPS_TO@StartCode 080D            UART_ReadFromGPS_TO@StartCode 0806  
                            ___ftdiv@f1 00C2                              ___ftdiv@f2 00BF  
                            ___ftdiv@f3 00C9                       IsValidGPS@GPSData 00A3  
                   ___bmul@multiplicand 00A2                              ___ftmul@f1 00B0  
                            ___ftmul@f2 00B3                              ___ftsub@f1 0198  
                            ___ftsub@f2 0195                              ___fttol@f1 00DA  
                        __pcstackCOMMON 0000                            __pidataBANK3 0000  
                 __size_of_GetPrevCycle 000A                           __end_of_frexp 03FB  
                         __end_of_round 00F2                           __end_of_trunc 0136  
                            __end_ofPL2 078C                              __end_ofPL4 0E48  
                            __end_ofPL6 0FF4                              __end_ofPL8 1000  
                      ___lbdiv@quotient 00A5                               ?_GetCycle 00A0  
                               ??_frexp 00A6                                 ??_round 00ED  
                               ??_trunc 00EA                              __pbssBANK1 00ED  
                            __pbssBANK3 01D3                               ?_ReadVars 00A0  
                          _GetPrevCycle 0E25                             ?_ResetTimer 00A0  
                               ?_GetAbs 00A2                     UART_Read_TO@TimeOut 00A2  
                            __pmaintext 0414                  main@GPS_Non_Sync_Times 01C0  
                               ?___bmul 00A2                                 ?___lmul 00A2  
                            __pintentry 0004                     __size_of_IsValidGPS 0053  
                             ?___altoft 00AA                          ___lmul@product 00AA  
                               ?_tc_int 00A0                               ?___ftpack 00A2  
      main@StateAudioNormalOnOffCounter 01C6                     __size_of_ReadGPSToS 00A0  
                               GetAbs@a 00A2                              ??_GetCycle 00A4  
                               _STATE_1 003E                                 _STATE_2 0110  
                            __stringtab 0800                          _UART_Init$1946 01A2  
                        _UART_Init$1947 01A5                           ?_UART_Read_TO 0000  
                       _EE_STATE_BREAKS 00A3                              ??_ReadVars 00A5  
                       __size_of_GetAbs 0008                         __size_of___bmul 000E  
                               ___almod 0BB8                                 ___lbdiv 07DD  
                       __size_of___lmul 0033                                 ___ftadd 0136  
                               ___ftdiv 02C2                                 ___ftmul 032A  
                               ___ftsub 0397                                 ___fttol 0225  
                            ??___altoft 00AE                              ??___ftpack 00A7  
                       __size_of_tc_int 001A                                 __ptext1 07DD  
                               __ptext2 0BB8                                 __ptext3 001C  
                               __ptext4 00A5                                 __ptext5 00F2  
                               __ptext6 03C2                                 __ptext7 0225  
                               __ptext8 01F6                                 __ptext9 0397  
                             _T1CONbits 0010                               _EE_STATES 0000  
                   __size_of_ResetTimer 000F                    end_of_initialization 0018  
                        ??_UART_Read_TO 00A2             __end_of_UART_ReadFromGPS_TO 0FD1  
                 GetPrevCycle@PrevCycle 00A2         ??_GetCumulativePeriodsForStates 00A4  
                             GetCycle@i 00AF    __end_of_UART_ReadValidTimeFromGPS_TO 0F3A  
 __size_of_UART_ReadValidTimeFromGPS_TO 000A            _UART_ReadValidTimeFromGPS_TO 0F30  
                             _UART_Init 001C     UART_ReadValidTimeFromGPS_TO@TimeOut 00AA  
                          ??_IsValidGPS 00A2                             ___ftdiv@exp 00CC  
                          ??_ReadGPSToS 00B2                           ??_eeprom_read 00A2  
                        __end_of_GetAbs 0B7E                               ReadVars@i 00B5  
                             ReadVars@j 00B4                             ___ftmul@exp 00B9  
         ?_UART_ReadValidTimeFromGPS_TO 00AA                          __end_of___bmul 0D1A  
                        __end_of___lmul 0F30                           __pidataEEDATA 0000  
                    __end_of_IsValidGPS 0F8D                              ?_UART_Init 019E  
                        __end_of_tc_int 0BB8                _STATE_CUMULATIVE_PERIODS 007A  
                           __end_ofPL10 07A7                             __end_ofPL20 0E4F  
                           __end_ofPL12 07BB                             __end_ofPL30 040D  
                           __end_ofPL22 0E56                             __end_ofPL14 07C8  
                           __end_ofPL32 0414                             __end_ofPL24 0E5D  
                           __end_ofPL16 0D26                             __end_ofPL34 0D2C  
                           __end_ofPL26 07D0                             __end_ofPL18 0406  
                           __end_ofPL36 07DD                             __end_ofPL28 07D7  
                   start_initialization 0011                      __end_of_ReadGPSToS 0EFD  
                     __size_of_GetCycle 00B3                              frexp@value 00A2  
                          ??_ResetTimer 00A2                                ??_GetAbs 00A4  
                     __size_of_ReadVars 00D1   __end_of_GetCumulativePeriodsForStates 0D72  
__size_of_GetCumulativePeriodsForStates 0046           _GetCumulativePeriodsForStates 0D2C  
                              ??___bmul 00A3                                ??___lmul 00AA  
                   __end_of_eeprom_read 0D0C                              init_fetch0 0B8D  
                     ReadGPSToS@TimeOut 00B8                             __pdataBANK3 01D4  
                              ??_tc_int 00A0                    __end_of_UART_Read_TO 0FE3  
           UART_ReadFromGPS_TO@TempChar 00A8                       __size_of___altoft 002F  
                     __size_of___ftpack 0042                             __pbssEEDATA 00A6  
                             ___latbits 0002                 main@GPS_On_Time_Counter 01B6  
                         __pcstackBANK1 00A0                           __pcstackBANK3 0190  
                    __end_of_ResetTimer 0B8D                  main@State2OnOffCounter 01C4  
                      IsValidGPS@Result 00A2                                ?___almod 00A2  
                       _PREV_CYCLE_TYPE 01D4                                ?___lbdiv 00A2  
                              ?___ftadd 00CE                                ?___ftdiv 00BF  
                              ?___ftmul 00B0                                ?___ftsub 0195  
                              ?___fttol 00DA                             ??_UART_Init 00ED  
                      ___almod@dividend 00A6                               __pstrings 0800  
        ??_UART_ReadValidTimeFromGPS_TO 00AB                    UART_ReadFromGPS_TO@i 00A5  
                        __size_of_frexp 0039                              UART_Init@x 01A8  
                              _EE_AUDIO 009F                          __size_of_round 004D  
                        __size_of_trunc 0044                       interrupt_function 0004  
                           _eeprom_read 0CF2                                _PIE1bits 008C  
                              _PIR1bits 000C                      main@OutForThePorts 01CB  
        ?_GetCumulativePeriodsForStates 00A0                       UART_Init@baudrate 019E  
    UART_ReadValidTimeFromGPS_TO@Output 00AB                             __stringbase 0805  
                             main@TempS 01BC                                _GetCycle 0D72  
                     ___lmul@multiplier 00A2                                _ReadVars 0C21  
                             frexp@eptr 00A5                           _STATE_PERIODS 0020  
          __size_of_UART_ReadFromGPS_TO 0044            main@TimeSinceTheStartOfCycle 01B8  
                UART_ReadFromGPS_TO@Pos 00A9                   __size_of_UART_Read_TO 0012  
                      ReadGPSToS@Output 00B9                        __size_of___almod 0069  
                      __size_of___lbdiv 001C                        __size_of___ftadd 00C0  
                      __size_of___ftdiv 0068                                ___altoft 01F6  
                      __size_of___ftmul 006D                        __size_of___ftsub 002B  
                      __size_of___fttol 005B                                ___ftpack 0280  
                    __end_of__stringtab 0806                                __ptext10 0136  
                              __ptext11 032A                                __ptext20 0F30  
                              __ptext12 02C2                                __ptext21 0F8D  
                              __ptext13 0280                                __ptext22 0FD1  
                              __ptext14 0B7E                                __ptext23 0F3A  
                              __ptext15 0C21                                __ptext24 0D72  
                              __ptext16 0CF2                                __ptext25 0D2C  
                              __ptext17 0D0C                                __ptext26 0E25  
                              __ptext18 0E5D                                __ptext27 0B76  
                              __ptext19 0EFD                                __ptext28 0B9E  
                     __CFG_BOR4V$BOR21V 0000                         ___almod@divisor 00A2  
                       ___almod@counter 00AA                            _UART_Read_TO 0FD1  
                            trunc@expon 0193                           __size_of_main 0345  
                         ?_GetPrevCycle 0000                              _CYCLE_TYPE 00ED  
        GetCumulativePeriodsForStates@i 00A9          GetCumulativePeriodsForStates@j 00A8  
                          _STATE_BREAKS 0164                              _INTCONbits 000B  
                              init_ram0 0B91                                intlevel1 0000  
                        ??_GetPrevCycle 00A2                               stringcode 0800  
                              stringdir 0800                                stringtab 0800  
                          ___almod@sign 00AB                            ?_eeprom_read 0000  
