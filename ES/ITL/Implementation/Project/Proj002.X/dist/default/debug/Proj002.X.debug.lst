

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Tue Nov 08 13:36:47 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3h,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text20,local,class=CODE,merge=1,delta=2
    25                           	psect	text24,local,class=CODE,merge=1,delta=2
    26                           	psect	text39,local,class=CODE,merge=1,delta=2
    27                           	psect	text42,local,class=CODE,merge=1,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x20,12,_C
    30                           	dabs	1,0xA0,50,_STATE_1
    31                           	dabs	1,0x110,50,_STATE_2
    32                           	dabs	1,0x190,50,_STATE_3
    33                           	dabs	1,0x1CC,25,_STATE_PERIODS
    34                           	dabs	1,0x7E,2
    35  0000                     	;# 
    36  0001                     	;# 
    37  0002                     	;# 
    38  0003                     	;# 
    39  0004                     	;# 
    40  0005                     	;# 
    41  0006                     	;# 
    42  0007                     	;# 
    43  0009                     	;# 
    44  000A                     	;# 
    45  000B                     	;# 
    46  000C                     	;# 
    47  000D                     	;# 
    48  000E                     	;# 
    49  000E                     	;# 
    50  000F                     	;# 
    51  0010                     	;# 
    52  0011                     	;# 
    53  0012                     	;# 
    54  0013                     	;# 
    55  0014                     	;# 
    56  0015                     	;# 
    57  0015                     	;# 
    58  0016                     	;# 
    59  0017                     	;# 
    60  0018                     	;# 
    61  0019                     	;# 
    62  001A                     	;# 
    63  001B                     	;# 
    64  001B                     	;# 
    65  001C                     	;# 
    66  001D                     	;# 
    67  001E                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  0087                     	;# 
    73  0089                     	;# 
    74  008C                     	;# 
    75  008D                     	;# 
    76  008E                     	;# 
    77  008F                     	;# 
    78  0090                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0093                     	;# 
    82  0093                     	;# 
    83  0093                     	;# 
    84  0094                     	;# 
    85  0095                     	;# 
    86  0096                     	;# 
    87  0097                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  009F                     	;# 
    96  0105                     	;# 
    97  0107                     	;# 
    98  0108                     	;# 
    99  0109                     	;# 
   100  010C                     	;# 
   101  010C                     	;# 
   102  010D                     	;# 
   103  010E                     	;# 
   104  010F                     	;# 
   105  0185                     	;# 
   106  0187                     	;# 
   107  0188                     	;# 
   108  0189                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0089                     	;# 
   150  008C                     	;# 
   151  008D                     	;# 
   152  008E                     	;# 
   153  008F                     	;# 
   154  0090                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0093                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  0105                     	;# 
   173  0107                     	;# 
   174  0108                     	;# 
   175  0109                     	;# 
   176  010C                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  0185                     	;# 
   182  0187                     	;# 
   183  0188                     	;# 
   184  0189                     	;# 
   185  018C                     	;# 
   186  018D                     	;# 
   187  0000                     	;# 
   188  0001                     	;# 
   189  0002                     	;# 
   190  0003                     	;# 
   191  0004                     	;# 
   192  0005                     	;# 
   193  0006                     	;# 
   194  0007                     	;# 
   195  0009                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000D                     	;# 
   200  000E                     	;# 
   201  000E                     	;# 
   202  000F                     	;# 
   203  0010                     	;# 
   204  0011                     	;# 
   205  0012                     	;# 
   206  0013                     	;# 
   207  0014                     	;# 
   208  0015                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0017                     	;# 
   212  0018                     	;# 
   213  0019                     	;# 
   214  001A                     	;# 
   215  001B                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001D                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  0081                     	;# 
   222  0085                     	;# 
   223  0086                     	;# 
   224  0087                     	;# 
   225  0089                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  008F                     	;# 
   230  0090                     	;# 
   231  0091                     	;# 
   232  0092                     	;# 
   233  0093                     	;# 
   234  0093                     	;# 
   235  0093                     	;# 
   236  0094                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0098                     	;# 
   241  0099                     	;# 
   242  009A                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  009F                     	;# 
   248  0105                     	;# 
   249  0107                     	;# 
   250  0108                     	;# 
   251  0109                     	;# 
   252  010C                     	;# 
   253  010C                     	;# 
   254  010D                     	;# 
   255  010E                     	;# 
   256  010F                     	;# 
   257  0185                     	;# 
   258  0187                     	;# 
   259  0188                     	;# 
   260  0189                     	;# 
   261  018C                     	;# 
   262  018D                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  000E                     	;# 
   278  000F                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0013                     	;# 
   283  0014                     	;# 
   284  0015                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  001D                     	;# 
   295  001E                     	;# 
   296  001F                     	;# 
   297  0081                     	;# 
   298  0085                     	;# 
   299  0086                     	;# 
   300  0087                     	;# 
   301  0089                     	;# 
   302  008C                     	;# 
   303  008D                     	;# 
   304  008E                     	;# 
   305  008F                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0093                     	;# 
   310  0093                     	;# 
   311  0093                     	;# 
   312  0094                     	;# 
   313  0095                     	;# 
   314  0096                     	;# 
   315  0097                     	;# 
   316  0098                     	;# 
   317  0099                     	;# 
   318  009A                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  0105                     	;# 
   325  0107                     	;# 
   326  0108                     	;# 
   327  0109                     	;# 
   328  010C                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  010F                     	;# 
   333  0185                     	;# 
   334  0187                     	;# 
   335  0188                     	;# 
   336  0189                     	;# 
   337  018C                     	;# 
   338  018D                     	;# 
   339  0000                     	;# 
   340  0001                     	;# 
   341  0002                     	;# 
   342  0003                     	;# 
   343  0004                     	;# 
   344  0005                     	;# 
   345  0006                     	;# 
   346  0007                     	;# 
   347  0009                     	;# 
   348  000A                     	;# 
   349  000B                     	;# 
   350  000C                     	;# 
   351  000D                     	;# 
   352  000E                     	;# 
   353  000E                     	;# 
   354  000F                     	;# 
   355  0010                     	;# 
   356  0011                     	;# 
   357  0012                     	;# 
   358  0013                     	;# 
   359  0014                     	;# 
   360  0015                     	;# 
   361  0015                     	;# 
   362  0016                     	;# 
   363  0017                     	;# 
   364  0018                     	;# 
   365  0019                     	;# 
   366  001A                     	;# 
   367  001B                     	;# 
   368  001B                     	;# 
   369  001C                     	;# 
   370  001D                     	;# 
   371  001E                     	;# 
   372  001F                     	;# 
   373  0081                     	;# 
   374  0085                     	;# 
   375  0086                     	;# 
   376  0087                     	;# 
   377  0089                     	;# 
   378  008C                     	;# 
   379  008D                     	;# 
   380  008E                     	;# 
   381  008F                     	;# 
   382  0090                     	;# 
   383  0091                     	;# 
   384  0092                     	;# 
   385  0093                     	;# 
   386  0093                     	;# 
   387  0093                     	;# 
   388  0094                     	;# 
   389  0095                     	;# 
   390  0096                     	;# 
   391  0097                     	;# 
   392  0098                     	;# 
   393  0099                     	;# 
   394  009A                     	;# 
   395  009B                     	;# 
   396  009C                     	;# 
   397  009D                     	;# 
   398  009E                     	;# 
   399  009F                     	;# 
   400  0105                     	;# 
   401  0107                     	;# 
   402  0108                     	;# 
   403  0109                     	;# 
   404  010C                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  0185                     	;# 
   410  0187                     	;# 
   411  0188                     	;# 
   412  0189                     	;# 
   413  018C                     	;# 
   414  018D                     	;# 
   415  0000                     	;# 
   416  0001                     	;# 
   417  0002                     	;# 
   418  0003                     	;# 
   419  0004                     	;# 
   420  0005                     	;# 
   421  0006                     	;# 
   422  0007                     	;# 
   423  0009                     	;# 
   424  000A                     	;# 
   425  000B                     	;# 
   426  000C                     	;# 
   427  000D                     	;# 
   428  000E                     	;# 
   429  000E                     	;# 
   430  000F                     	;# 
   431  0010                     	;# 
   432  0011                     	;# 
   433  0012                     	;# 
   434  0013                     	;# 
   435  0014                     	;# 
   436  0015                     	;# 
   437  0015                     	;# 
   438  0016                     	;# 
   439  0017                     	;# 
   440  0018                     	;# 
   441  0019                     	;# 
   442  001A                     	;# 
   443  001B                     	;# 
   444  001B                     	;# 
   445  001C                     	;# 
   446  001D                     	;# 
   447  001E                     	;# 
   448  001F                     	;# 
   449  0081                     	;# 
   450  0085                     	;# 
   451  0086                     	;# 
   452  0087                     	;# 
   453  0089                     	;# 
   454  008C                     	;# 
   455  008D                     	;# 
   456  008E                     	;# 
   457  008F                     	;# 
   458  0090                     	;# 
   459  0091                     	;# 
   460  0092                     	;# 
   461  0093                     	;# 
   462  0093                     	;# 
   463  0093                     	;# 
   464  0094                     	;# 
   465  0095                     	;# 
   466  0096                     	;# 
   467  0097                     	;# 
   468  0098                     	;# 
   469  0099                     	;# 
   470  009A                     	;# 
   471  009B                     	;# 
   472  009C                     	;# 
   473  009D                     	;# 
   474  009E                     	;# 
   475  009F                     	;# 
   476  0105                     	;# 
   477  0107                     	;# 
   478  0108                     	;# 
   479  0109                     	;# 
   480  010C                     	;# 
   481  010C                     	;# 
   482  010D                     	;# 
   483  010E                     	;# 
   484  010F                     	;# 
   485  0185                     	;# 
   486  0187                     	;# 
   487  0188                     	;# 
   488  0189                     	;# 
   489  018C                     	;# 
   490  018D                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0009                     	;# 
   500  000A                     	;# 
   501  000B                     	;# 
   502  000C                     	;# 
   503  000D                     	;# 
   504  000E                     	;# 
   505  000E                     	;# 
   506  000F                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0013                     	;# 
   511  0014                     	;# 
   512  0015                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0017                     	;# 
   516  0018                     	;# 
   517  0019                     	;# 
   518  001A                     	;# 
   519  001B                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  001D                     	;# 
   523  001E                     	;# 
   524  001F                     	;# 
   525  0081                     	;# 
   526  0085                     	;# 
   527  0086                     	;# 
   528  0087                     	;# 
   529  0089                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  008F                     	;# 
   534  0090                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0093                     	;# 
   538  0093                     	;# 
   539  0093                     	;# 
   540  0094                     	;# 
   541  0095                     	;# 
   542  0096                     	;# 
   543  0097                     	;# 
   544  0098                     	;# 
   545  0099                     	;# 
   546  009A                     	;# 
   547  009B                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009E                     	;# 
   551  009F                     	;# 
   552  0105                     	;# 
   553  0107                     	;# 
   554  0108                     	;# 
   555  0109                     	;# 
   556  010C                     	;# 
   557  010C                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0187                     	;# 
   563  0188                     	;# 
   564  0189                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567                           
   568                           	psect	idataBANK2
   569  0000                     __pidataBANK2:	
   570                           
   571                           	psect	idataEEDATA
   572  0000                     __pidataEEDATA:	
   573  0000                     _EE_STATES:	
   574                           ;initializer for _EE_STATES
   575                           
   576  0000  000A               	db	10
   577  0001  0008               	db	8
   578  0002  0009               	db	9
   579  0003  0002               	db	2
   580  0004  0000               	db	0
   581  0005  0000               	db	0
   582  0006  0000               	db	0
   583  0007  0003               	db	3
   584  0008  000C               	db	12
   585  0009  0009               	db	9
   586  000A  0000               	db	0
   587  000B  0000               	db	0
   588  000C  0000               	db	0
   589  000D  0000               	db	0
   590  000E  000A               	db	10
   591  000F  0001               	db	1
   592  0010  0009               	db	9
   593  0011  0000               	db	0
   594  0012  0020               	db	32
   595  0013  0000               	db	0
   596  0014  0000               	db	0
   597  0015  0003               	db	3
   598  0016  0001               	db	1
   599  0017  000D               	db	13
   600  0018  0000               	db	0
   601  0019  0000               	db	0
   602  001A  0000               	db	0
   603  001B  0000               	db	0
   604  001C  000A               	db	10
   605  001D  0009               	db	9
   606  001E  0008               	db	8
   607  001F  0010               	db	16
   608  0020  0000               	db	0
   609  0021  0000               	db	0
   610  0022  0000               	db	0
   611  0023  0003               	db	3
   612  0024  0009               	db	9
   613  0025  000A               	db	10
   614  0026  0000               	db	0
   615  0027  0000               	db	0
   616  0028  0000               	db	0
   617  0029  0000               	db	0
   618  002A  000A               	db	10
   619  002B  0009               	db	9
   620  002C  0001               	db	1
   621  002D  0000               	db	0
   622  002E  0000               	db	0
   623  002F  0020               	db	32
   624  0030  0000               	db	0
   625  0031  0003               	db	3
   626  0032  0009               	db	9
   627  0033  0011               	db	17
   628  0034  0000               	db	0
   629  0035  0000               	db	0
   630  0036  0000               	db	0
   631  0037  0000               	db	0
   632  0038  000A               	db	10
   633  0039  0000               	db	0
   634  003A  0000               	db	0
   635  003B  0000               	db	0
   636  003C  0000               	db	0
   637  003D  0000               	db	0
   638  003E  0000               	db	0
   639  003F  0003               	db	3
   640  0040  0000               	db	0
   641  0041  0000               	db	0
   642  0042  0000               	db	0
   643  0043  0000               	db	0
   644  0044  0000               	db	0
   645  0045  0000               	db	0
   646  0046  000A               	db	10
   647  0047  0000               	db	0
   648  0048  0000               	db	0
   649  0049  0000               	db	0
   650  004A  0000               	db	0
   651  004B  0000               	db	0
   652  004C  0000               	db	0
   653  004D  0003               	db	3
   654  004E  0000               	db	0
   655  004F  0000               	db	0
   656  0050  0000               	db	0
   657  0051  0000               	db	0
   658  0052  0000               	db	0
   659  0053  0000               	db	0
   660  0054  000A               	db	10
   661  0055  0000               	db	0
   662  0056  0000               	db	0
   663  0057  0000               	db	0
   664  0058  0000               	db	0
   665  0059  0000               	db	0
   666  005A  0000               	db	0
   667  005B  0003               	db	3
   668  005C  0000               	db	0
   669  005D  0000               	db	0
   670  005E  0000               	db	0
   671  005F  0000               	db	0
   672  0060  0000               	db	0
   673  0061  0000               	db	0
   674  0062  000A               	db	10
   675  0063  0000               	db	0
   676  0064  0000               	db	0
   677  0065  0000               	db	0
   678  0066  0000               	db	0
   679  0067  0000               	db	0
   680  0068  0000               	db	0
   681  0069  0003               	db	3
   682  006A  0000               	db	0
   683  006B  0000               	db	0
   684  006C  0000               	db	0
   685  006D  0000               	db	0
   686  006E  0000               	db	0
   687  006F  0000               	db	0
   688  0070  000A               	db	10
   689  0071  0000               	db	0
   690  0072  0000               	db	0
   691  0073  0000               	db	0
   692  0074  0000               	db	0
   693  0075  0000               	db	0
   694  0076  0000               	db	0
   695  0077  0003               	db	3
   696  0078  0000               	db	0
   697  0079  0000               	db	0
   698  007A  0000               	db	0
   699  007B  0000               	db	0
   700  007C  0000               	db	0
   701  007D  0000               	db	0
   702  007E  000A               	db	10
   703  007F  0000               	db	0
   704  0080  0000               	db	0
   705  0081  0000               	db	0
   706  0082  0000               	db	0
   707  0083  0000               	db	0
   708  0084  0000               	db	0
   709  0085  0003               	db	3
   710  0086  0000               	db	0
   711  0087  0000               	db	0
   712  0088  0000               	db	0
   713  0089  0000               	db	0
   714  008A  0000               	db	0
   715  008B  0000               	db	0
   716  008C  000A               	db	10
   717  008D  0000               	db	0
   718  008E  0000               	db	0
   719  008F  0000               	db	0
   720  0090  0000               	db	0
   721  0091  0000               	db	0
   722  0092  0000               	db	0
   723  0093  0003               	db	3
   724  0094  0000               	db	0
   725  0095  0000               	db	0
   726  0096  0000               	db	0
   727  0097  0000               	db	0
   728  0098  0000               	db	0
   729  0099  0000               	db	0
   730  009A  000A               	db	10
   731  009B  0000               	db	0
   732  009C  0000               	db	0
   733  009D  0000               	db	0
   734  009E  0000               	db	0
   735  009F  0000               	db	0
   736  00A0  0000               	db	0
   737  00A1  0003               	db	3
   738  00A2  0000               	db	0
   739  00A3  0000               	db	0
   740  00A4  0000               	db	0
   741  00A5  0000               	db	0
   742  00A6  0000               	db	0
   743  00A7  0000               	db	0
   744  00A8  0000               	db	0
   745  00A9  0000               	db	0
   746  00AA  0000               	db	0
   747  00AB  0000               	db	0
   748  00AC  0000               	db	0
   749  00AD  0000               	db	0
   750  00AE  0000               	db	0
   751  00AF  0000               	db	0
   752  00B0  0000               	db	0
   753  00B1  0000               	db	0
   754  00B2  0000               	db	0
   755  00B3  0000               	db	0
   756  00B4  0000               	db	0
   757  00B5  0000               	db	0
   758  00B6  0000               	db	0
   759  00B7  0000               	db	0
   760  00B8  0000               	db	0
   761  00B9  0000               	db	0
   762  00BA  0000               	db	0
   763  00BB  0000               	db	0
   764  00BC  0000               	db	0
   765  00BD  0000               	db	0
   766  00BE  0000               	db	0
   767  00BF  0000               	db	0
   768  00C0  0000               	db	0
   769  00C1  0000               	db	0
   770  00C2  0000               	db	0
   771  00C3  0000               	db	0
   772  00C4  0000               	db	0
   773  00C5  0000               	db	0
   774  00C6  0000               	db	0
   775  00C7  0000               	db	0
   776  00C8  0000               	db	0
   777  00C9  0000               	db	0
   778  00CA  0000               	db	0
   779  00CB  0000               	db	0
   780  00CC  0000               	db	0
   781  00CD  0000               	db	0
   782  00CE  0000               	db	0
   783  00CF  0000               	db	0
   784  00D0  0000               	db	0
   785  00D1  0000               	db	0
   786  00D2                     _EE_C:	
   787                           ;initializer for _EE_C
   788                           
   789  00D2  0001               	db	1
   790  00D3  0051               	db	81
   791  00D4  007F               	db	127
   792  00D5  0000               	db	0
   793  00D6  0027               	db	39
   794  00D7  000F               	db	15
   795  00D8  0000               	db	0
   796  00D9  0075               	db	117
   797  00DA  002F               	db	47
   798  00DB                     _EE_STATE_BREAKS:	
   799                           ;initializer for _EE_STATE_BREAKS
   800                           
   801  00DB  0008               	db	8
   802  00DC  000F               	db	15
   803  00DD  001E               	db	30
   804                           
   805                           	psect	strings
   806  0800                     __pstrings:	
   807  0800                     stringtab:	
   808  0800                     __stringtab:	
   809  0800                     stringcode:	
   810                           ;	String table - string pointers are 1 byte each
   811                           
   812  0800                     stringdir:	
   813  0800  3008               	movlw	high stringdir
   814  0801  008A               	movwf	10
   815  0802  0804               	movf	4,w
   816  0803  0A84               	incf	4,f
   817  0804  0782               	addwf	2,f
   818  0805                     __stringbase:	
   819  0805  3400               	retlw	0
   820  0806                     __end_of__stringtab:	
   821  0806                     UART_ReadFromGPS_TO@StartCode:	
   822  0806  3424               	retlw	36
   823  0807  3447               	retlw	71
   824  0808  3450               	retlw	80
   825  0809  3452               	retlw	82
   826  080A  344D               	retlw	77
   827  080B  3443               	retlw	67
   828  080C  342C               	retlw	44
   829  080D                     __end_ofUART_ReadFromGPS_TO@StartCode:	
   830  001A                     _RCREG	set	26
   831  0013                     _SSPBUF	set	19
   832  0014                     _SSPCON	set	20
   833  00C4                     _CREN	set	196
   834  0028                     _RA0	set	40
   835  0029                     _RA1	set	41
   836  002A                     _RA2	set	42
   837  002B                     _RA3	set	43
   838  002C                     _RA4	set	44
   839  002D                     _RA5	set	45
   840  0039                     _RC1	set	57
   841  0065                     _RCIF	set	101
   842  00C7                     _SPEN	set	199
   843  0099                     _SPBRG	set	153
   844  009A                     _SPBRGH	set	154
   845  0093                     _SSPADD	set	147
   846  0091                     _SSPCON2	set	145
   847  0094                     _SSPSTAT	set	148
   848  0085                     _TRISAbits	set	133
   849  048D                     _ACKDT	set	1165
   850  048C                     _ACKEN	set	1164
   851  04C2                     _BRGH	set	1218
   852  048A                     _PEN	set	1162
   853  048B                     _RCEN	set	1163
   854  0488                     _SEN	set	1160
   855  04C4                     _SYNC	set	1220
   856  043B                     _TRISC3	set	1083
   857  043C                     _TRISC4	set	1084
   858  04C5                     _TXEN	set	1221
   859  010D                     _EEADR	set	269
   860  010C                     _EEDATA	set	268
   861  0188                     _ANSEL	set	392
   862  0189                     _ANSELH	set	393
   863  018C                     _EECON1	set	396
   864  0C3B                     _BRG16	set	3131
   865  0C60                     _RD	set	3168
   866  0C61                     _WR	set	3169
   867  080D                     STR_2:	
   868  080D  3443               	retlw	67	;'C'
   869  080E  342D               	retlw	45	;'-'
   870  080F  3453               	retlw	83	;'S'
   871  0810  3474               	retlw	116	;'t'
   872  0811  342D               	retlw	45	;'-'
   873  0812  3453               	retlw	83	;'S'
   874  0813  3465               	retlw	101	;'e'
   875  0814  342F               	retlw	47	;'/'
   876  0815  3450               	retlw	80	;'P'
   877  0816  3472               	retlw	114	;'r'
   878  0817  3420               	retlw	32	;' '
   879  0818  3400               	retlw	0
   880  0819                     STR_1:	
   881  0819  3420               	retlw	32	;' '
   882  081A  3420               	retlw	32	;' '
   883  081B  3420               	retlw	32	;' '
   884  081C  342D               	retlw	45	;'-'
   885  081D  3420               	retlw	32	;' '
   886  081E  3420               	retlw	32	;' '
   887  081F  3420               	retlw	32	;' '
   888  0820  3400               	retlw	0
   889                           
   890                           ; #config settings
   891  0000                     
   892                           	psect	cinit
   893  07E7                     start_initialization:	
   894  07E7                     __initialization:	
   895                           
   896                           ; Initialize objects allocated to BANK2
   897  07E7  1703               	bsf	3,6	;RP1=1, select bank2
   898                           
   899                           ;initializer for _PREV_CYCLE_TYPE
   900  07E8  3002               	movlw	2
   901  07E9  00EA               	movwf	__pdataBANK2& (0+127)
   902                           
   903                           ; Clear objects allocated to BANK2
   904  07EA  01E0               	clrf	__pbssBANK2& (0+127)
   905  07EB  01E1               	clrf	(__pbssBANK2+1)& (0+127)
   906  07EC  01E2               	clrf	(__pbssBANK2+2)& (0+127)
   907  07ED  01E3               	clrf	(__pbssBANK2+3)& (0+127)
   908  07EE  01E4               	clrf	(__pbssBANK2+4)& (0+127)
   909  07EF  01E5               	clrf	(__pbssBANK2+5)& (0+127)
   910  07F0  01E6               	clrf	(__pbssBANK2+6)& (0+127)
   911  07F1  01E7               	clrf	(__pbssBANK2+7)& (0+127)
   912  07F2  01E8               	clrf	(__pbssBANK2+8)& (0+127)
   913  07F3  01E9               	clrf	(__pbssBANK2+9)& (0+127)
   914                           
   915                           ; Clear objects allocated to BANK1
   916  07F4  1683               	bsf	3,5	;RP0=1, select bank1
   917  07F5  1303               	bcf	3,6	;RP1=0, select bank1
   918  07F6  01E7               	clrf	__pbssBANK1& (0+127)
   919  07F7  01E8               	clrf	(__pbssBANK1+1)& (0+127)
   920  07F8  01E9               	clrf	(__pbssBANK1+2)& (0+127)
   921  07F9  01EA               	clrf	(__pbssBANK1+3)& (0+127)
   922  07FA  01EB               	clrf	(__pbssBANK1+4)& (0+127)
   923  07FB  01EC               	clrf	(__pbssBANK1+5)& (0+127)
   924  07FC                     end_of_initialization:	
   925                           ;End of C runtime variable initialization code
   926                           
   927  07FC                     __end_of__initialization:	
   928  07FC  0183               	clrf	3
   929  07FD  120A  158A  2CBF   	ljmp	_main	;jump to C main() function
   930                           
   931                           	psect	bssEEDATA
   932  00DE                     __pbssEEDATA:	
   933  00DE                     _EE_C_D:	
   934  00DE  0000               	db	0
   935                           
   936                           	psect	dataEEDATA
   937  0000                     __pdataEEDATA:	
   938                           
   939                           	psect	bssBANK1
   940  00E7                     __pbssBANK1:	
   941  00E7                     _STATE_CUMULATIVE_PERIODS:	
   942  00E7                     	ds	6
   943                           
   944                           	psect	bssBANK2
   945  0160                     __pbssBANK2:	
   946  0160                     _S:	
   947  0160                     	ds	4
   948  0164                     _STATE_BREAKS:	
   949  0164                     	ds	3
   950  0167                     _CONFIG0:	
   951  0167                     	ds	1
   952  0168                     _CYCLE_TYPE:	
   953  0168                     	ds	1
   954  0169                     _C_D:	
   955  0169                     	ds	1
   956                           
   957                           	psect	dataBANK2
   958  016A                     __pdataBANK2:	
   959  016A                     _PREV_CYCLE_TYPE:	
   960  016A                     	ds	1
   961                           
   962                           	psect	inittext
   963  0012                     init_fetch0:	
   964                           ;	Called with low address in FSR and high address in W
   965                           
   966  0012  087E               	movf	126,w
   967  0013  008A               	movwf	10
   968  0014  087F               	movf	127,w
   969  0015  0082               	movwf	2
   970  0016                     init_ram0:	
   971                           ;Called with:
   972                           ;	high address of idata address in btemp 
   973                           ;	low address of idata address in btemp+1 
   974                           ;	low address of data in FSR
   975                           ;	high address + 1 of data in btemp-1
   976                           
   977  0016  2012  120A  118A   	fcall	init_fetch0
   978  0019  0080               	movwf	0
   979  001A  0A84               	incf	4,f
   980  001B  0804               	movf	4,w
   981  001C  067D               	xorwf	125,w
   982  001D  1903               	btfsc	3,2
   983  001E  3400               	retlw	0
   984  001F  0AFF               	incf	127,f
   985  0020  1903               	btfsc	3,2
   986  0021  0AFE               	incf	126,f
   987  0022  2816               	goto	init_ram0
   988                           
   989                           	psect	cstackBANK3h
   990  01E5                     __pcstackBANK3h:	
   991  01E5                     ??_main:	
   992                           
   993                           ; 1 bytes @ 0x0
   994  01E5                     	ds	10
   995                           
   996                           	psect	cstackBANK2
   997  0142                     __pcstackBANK2:	
   998  0142                     main@GPSData:	
   999                           
  1000                           ; 6 bytes @ 0x0
  1001  0142                     	ds	6
  1002  0148                     main@GPS_On_Time_Counter:	
  1003                           
  1004                           ; 2 bytes @ 0x6
  1005  0148                     	ds	2
  1006  014A                     main@DiffInSecond:	
  1007                           
  1008                           ; 1 bytes @ 0x8
  1009  014A                     	ds	1
  1010  014B                     main@TimeSinceTheStartOfCycle:	
  1011                           
  1012                           ; 4 bytes @ 0x9
  1013  014B                     	ds	4
  1014  014F                     main@k:	
  1015                           
  1016                           ; 2 bytes @ 0xD
  1017  014F                     	ds	2
  1018  0151                     main@SecError:	
  1019                           
  1020                           ; 2 bytes @ 0xF
  1021  0151                     	ds	2
  1022  0153                     main@StateSecRemaining:	
  1023                           
  1024                           ; 1 bytes @ 0x11
  1025  0153                     	ds	1
  1026  0154                     main@State2OnOffCounter:	
  1027                           
  1028                           ; 2 bytes @ 0x12
  1029  0154                     	ds	2
  1030  0156                     main@StateAudioNormalOnOffCounter:	
  1031                           
  1032                           ; 2 bytes @ 0x14
  1033  0156                     	ds	2
  1034  0158                     main@StateAudioSplOnOffCounter:	
  1035                           
  1036                           ; 2 bytes @ 0x16
  1037  0158                     	ds	2
  1038  015A                     main@j:	
  1039                           
  1040                           ; 1 bytes @ 0x18
  1041  015A                     	ds	1
  1042  015B                     main@OutForThePorts:	
  1043                           
  1044                           ; 2 bytes @ 0x19
  1045  015B                     	ds	2
  1046  015D                     main@i:	
  1047                           
  1048                           ; 1 bytes @ 0x1B
  1049  015D                     	ds	1
  1050  015E                     main@l:	
  1051                           
  1052                           ; 2 bytes @ 0x1C
  1053  015E                     	ds	2
  1054                           
  1055                           	psect	cstackBANK1
  1056  00D2                     __pcstackBANK1:	
  1057  00D2                     ?___ftsub:	
  1058  00D2                     ___ftsub@f2:	
  1059                           ; 3 bytes @ 0x0
  1060                           
  1061                           
  1062                           ; 3 bytes @ 0x0
  1063  00D2                     	ds	3
  1064  00D5                     ___ftsub@f1:	
  1065                           
  1066                           ; 3 bytes @ 0x3
  1067  00D5                     	ds	3
  1068  00D8                     round@f:	
  1069                           
  1070                           ; 3 bytes @ 0x6
  1071  00D8                     	ds	3
  1072  00DB                     ?_UART_Init:	
  1073  00DB                     UART_Init@baudrate:	
  1074                           ; 1 bytes @ 0x9
  1075                           
  1076                           
  1077                           ; 4 bytes @ 0x9
  1078  00DB                     	ds	4
  1079  00DF                     _UART_Init$1006:	
  1080                           
  1081                           ; 3 bytes @ 0xD
  1082  00DF                     	ds	3
  1083  00E2                     _UART_Init$1007:	
  1084                           
  1085                           ; 3 bytes @ 0x10
  1086  00E2                     	ds	3
  1087  00E5                     UART_Init@x:	
  1088                           
  1089                           ; 2 bytes @ 0x13
  1090  00E5                     	ds	2
  1091                           
  1092                           	psect	cstackCOMMON
  1093  0070                     __pcstackCOMMON:	
  1094  0070                     ?_Lcd_Delay5500us:	
  1095  0070                     ??_Lcd_Delay5500us:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0070                     ?_Lcd_Delay5us:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0070                     ??_Lcd_Delay5us:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0070                     ?_Lcd_Command:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0070                     ??_Lcd_Command:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?_Lcd_CharCP:	
  1111                           ; 1 bytes @ 0x0
  1112                           
  1113  0070                     ??_Lcd_CharCP:	
  1114                           ; 1 bytes @ 0x0
  1115                           
  1116  0070                     ?_eeprom_read:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ??_eeprom_read:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ?_GetPrevCycle:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ??_GetPrevCycle:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ?_UART_Read_TO:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ??_UART_Read_TO:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_IsValidGPS:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ??_IsValidGPS:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_Lcd_Init:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ?_ReadVars:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_I2C_Master_Wait:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ??_I2C_Master_Wait:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_I2C_Master_Start:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ??_I2C_Master_Start:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?_I2C_Master_Stop:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ??_I2C_Master_Stop:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_I2C_Master_Write:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_GetCumulativePeriodsForStates:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_GetCycle:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_SwitchGPS:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ??_SwitchGPS:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ?_main:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  0070                     ?_I2C_Master_Read:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     ?___wmul:	
  1186                           ; 2 bytes @ 0x0
  1187                           
  1188  0070                     ?___ftpack:	
  1189                           ; 2 bytes @ 0x0
  1190                           
  1191  0070                     ?_frexp:	
  1192                           ; 3 bytes @ 0x0
  1193                           
  1194  0070                     ?___lmul:	
  1195                           ; 3 bytes @ 0x0
  1196                           
  1197  0070                     ?___aldiv:	
  1198                           ; 4 bytes @ 0x0
  1199                           
  1200  0070                     ?___almod:	
  1201                           ; 4 bytes @ 0x0
  1202                           
  1203  0070                     ?___lldiv:	
  1204                           ; 4 bytes @ 0x0
  1205                           
  1206  0070                     GetPrevCycle@PrevCycle:	
  1207                           ; 4 bytes @ 0x0
  1208                           
  1209  0070                     SwitchGPS@a:	
  1210                           ; 1 bytes @ 0x0
  1211                           
  1212  0070                     UART_Read_TO@TimeOut:	
  1213                           ; 1 bytes @ 0x0
  1214                           
  1215  0070                     IsValidGPS@Result:	
  1216                           ; 1 bytes @ 0x0
  1217                           
  1218  0070                     eeprom_read@addr:	
  1219                           ; 1 bytes @ 0x0
  1220                           
  1221  0070                     I2C_Master_Write@d:	
  1222                           ; 1 bytes @ 0x0
  1223                           
  1224  0070                     I2C_Master_Read@a:	
  1225                           ; 2 bytes @ 0x0
  1226                           
  1227  0070                     ___wmul@multiplier:	
  1228                           ; 2 bytes @ 0x0
  1229                           
  1230  0070                     ___ftpack@arg:	
  1231                           ; 2 bytes @ 0x0
  1232                           
  1233  0070                     frexp@value:	
  1234                           ; 3 bytes @ 0x0
  1235                           
  1236  0070                     ___lmul@multiplier:	
  1237                           ; 3 bytes @ 0x0
  1238                           
  1239  0070                     ___aldiv@divisor:	
  1240                           ; 4 bytes @ 0x0
  1241                           
  1242  0070                     ___almod@divisor:	
  1243                           ; 4 bytes @ 0x0
  1244                           
  1245  0070                     ___lldiv@divisor:	
  1246                           ; 4 bytes @ 0x0
  1247                           
  1248                           
  1249                           ; 4 bytes @ 0x0
  1250  0070                     	ds	1
  1251  0071                     ?_UART_ReadFromGPS_TO:	
  1252  0071                     Lcd_CharCP@c:	
  1253                           ; 1 bytes @ 0x1
  1254                           
  1255  0071                     Lcd_Command@command:	
  1256                           ; 1 bytes @ 0x1
  1257                           
  1258  0071                     GetPrevCycle@cycle:	
  1259                           ; 1 bytes @ 0x1
  1260                           
  1261  0071                     UART_ReadFromGPS_TO@TimeOut:	
  1262                           ; 1 bytes @ 0x1
  1263                           
  1264  0071                     IsValidGPS@GPSData:	
  1265                           ; 1 bytes @ 0x1
  1266                           
  1267                           
  1268                           ; 1 bytes @ 0x1
  1269  0071                     	ds	1
  1270  0072                     ??_Lcd_Init:	
  1271  0072                     ?_Lcd_Text:	
  1272                           ; 1 bytes @ 0x2
  1273                           
  1274  0072                     ??_I2C_Master_Write:	
  1275                           ; 1 bytes @ 0x2
  1276                           
  1277  0072                     ??_I2C_Master_Read:	
  1278                           ; 1 bytes @ 0x2
  1279                           
  1280  0072                     ??_GetCumulativePeriodsForStates:	
  1281                           ; 1 bytes @ 0x2
  1282                           
  1283  0072                     ??_GetCycle:	
  1284                           ; 1 bytes @ 0x2
  1285                           
  1286  0072                     ??_UART_ReadFromGPS_TO:	
  1287                           ; 1 bytes @ 0x2
  1288                           
  1289  0072                     Lcd_Init@data:	
  1290                           ; 1 bytes @ 0x2
  1291                           
  1292  0072                     Lcd_Text@x:	
  1293                           ; 1 bytes @ 0x2
  1294                           
  1295  0072                     I2C_Master_Read@temp:	
  1296                           ; 1 bytes @ 0x2
  1297                           
  1298  0072                     ___wmul@multiplicand:	
  1299                           ; 2 bytes @ 0x2
  1300                           
  1301                           
  1302                           ; 2 bytes @ 0x2
  1303  0072                     	ds	1
  1304  0073                     Lcd_Text@buffer:	
  1305  0073                     ___ftpack@exp:	
  1306                           ; 1 bytes @ 0x3
  1307                           
  1308  0073                     frexp@eptr:	
  1309                           ; 1 bytes @ 0x3
  1310                           
  1311  0073                     UART_ReadFromGPS_TO@i:	
  1312                           ; 1 bytes @ 0x3
  1313                           
  1314                           
  1315                           ; 2 bytes @ 0x3
  1316  0073                     	ds	1
  1317  0074                     ?_I2C_ReadAtAddress:	
  1318  0074                     ??_frexp:	
  1319                           ; 1 bytes @ 0x4
  1320                           
  1321  0074                     ??_Lcd_Text:	
  1322                           ; 1 bytes @ 0x4
  1323                           
  1324  0074                     ??___wmul:	
  1325                           ; 1 bytes @ 0x4
  1326                           
  1327  0074                     Lcd_Text@y:	
  1328                           ; 1 bytes @ 0x4
  1329                           
  1330  0074                     I2C_ReadAtAddress@IntAdd:	
  1331                           ; 1 bytes @ 0x4
  1332                           
  1333  0074                     ___ftpack@sign:	
  1334                           ; 1 bytes @ 0x4
  1335                           
  1336  0074                     ___wmul@product:	
  1337                           ; 1 bytes @ 0x4
  1338                           
  1339  0074                     ___lmul@multiplicand:	
  1340                           ; 2 bytes @ 0x4
  1341                           
  1342  0074                     ___aldiv@dividend:	
  1343                           ; 4 bytes @ 0x4
  1344                           
  1345  0074                     ___almod@dividend:	
  1346                           ; 4 bytes @ 0x4
  1347                           
  1348  0074                     ___lldiv@dividend:	
  1349                           ; 4 bytes @ 0x4
  1350                           
  1351                           
  1352                           ; 4 bytes @ 0x4
  1353  0074                     	ds	1
  1354  0075                     ??_I2C_ReadAtAddress:	
  1355  0075                     ??___ftpack:	
  1356                           ; 1 bytes @ 0x5
  1357                           
  1358  0075                     Lcd_Text@data:	
  1359                           ; 1 bytes @ 0x5
  1360                           
  1361  0075                     I2C_ReadAtAddress@data:	
  1362                           ; 1 bytes @ 0x5
  1363                           
  1364  0075                     UART_ReadFromGPS_TO@Output:	
  1365                           ; 1 bytes @ 0x5
  1366                           
  1367                           
  1368                           ; 1 bytes @ 0x5
  1369  0075                     	ds	1
  1370  0076                     I2C_ReadAtAddress@DevID:	
  1371  0076                     GetCumulativePeriodsForStates@j:	
  1372                           ; 1 bytes @ 0x6
  1373                           
  1374  0076                     UART_ReadFromGPS_TO@TempChar:	
  1375                           ; 1 bytes @ 0x6
  1376                           
  1377                           
  1378                           ; 1 bytes @ 0x6
  1379  0076                     	ds	1
  1380  0077                     GetCumulativePeriodsForStates@i:	
  1381  0077                     UART_ReadFromGPS_TO@Pos:	
  1382                           ; 1 bytes @ 0x7
  1383                           
  1384                           
  1385                           ; 1 bytes @ 0x7
  1386  0077                     	ds	1
  1387  0078                     ?_UART_ReadValidTimeFromGPS_TO:	
  1388  0078                     ??___lmul:	
  1389                           ; 1 bytes @ 0x8
  1390                           
  1391  0078                     ??___aldiv:	
  1392                           ; 1 bytes @ 0x8
  1393                           
  1394  0078                     ??___almod:	
  1395                           ; 1 bytes @ 0x8
  1396                           
  1397  0078                     ??___lldiv:	
  1398                           ; 1 bytes @ 0x8
  1399                           
  1400  0078                     ?___altoft:	
  1401                           ; 1 bytes @ 0x8
  1402                           
  1403  0078                     UART_ReadValidTimeFromGPS_TO@TimeOut:	
  1404                           ; 3 bytes @ 0x8
  1405                           
  1406  0078                     ___aldiv@counter:	
  1407                           ; 1 bytes @ 0x8
  1408                           
  1409  0078                     ___almod@counter:	
  1410                           ; 1 bytes @ 0x8
  1411                           
  1412  0078                     ___lmul@product:	
  1413                           ; 1 bytes @ 0x8
  1414                           
  1415  0078                     ___altoft@c:	
  1416                           ; 4 bytes @ 0x8
  1417                           
  1418  0078                     ___lldiv@quotient:	
  1419                           ; 4 bytes @ 0x8
  1420                           
  1421                           
  1422                           ; 4 bytes @ 0x8
  1423  0078                     	ds	1
  1424  0079                     ??_UART_ReadValidTimeFromGPS_TO:	
  1425  0079                     UART_ReadValidTimeFromGPS_TO@Output:	
  1426                           ; 1 bytes @ 0x9
  1427                           
  1428  0079                     ___aldiv@sign:	
  1429                           ; 1 bytes @ 0x9
  1430                           
  1431  0079                     ___almod@sign:	
  1432                           ; 1 bytes @ 0x9
  1433                           
  1434                           
  1435                           ; 1 bytes @ 0x9
  1436  0079                     	ds	1
  1437  007A                     ___aldiv@quotient:	
  1438                           
  1439                           ; 4 bytes @ 0xA
  1440  007A                     	ds	2
  1441  007C                     ??___altoft:	
  1442  007C                     GetCycle@PrevCycle:	
  1443                           ; 1 bytes @ 0xC
  1444                           
  1445  007C                     ___altoft@exp:	
  1446                           ; 1 bytes @ 0xC
  1447                           
  1448  007C                     ___lldiv@counter:	
  1449                           ; 1 bytes @ 0xC
  1450                           
  1451                           
  1452                           ; 1 bytes @ 0xC
  1453  007C                     	ds	1
  1454  007D                     GetCycle@i:	
  1455  007D                     ___altoft@sign:	
  1456                           ; 1 bytes @ 0xD
  1457                           
  1458                           
  1459                           ; 1 bytes @ 0xD
  1460  007D                     	ds	1
  1461  007E                     ??_round:	
  1462  007E                     ??_UART_Init:	
  1463                           ; 1 bytes @ 0xE
  1464                           
  1465  007E                     ??_trunc:	
  1466                           ; 1 bytes @ 0xE
  1467                           
  1468  007E                     ??_Lcd_WriteChar:	
  1469                           ; 1 bytes @ 0xE
  1470                           
  1471  007E                     ??___bmul:	
  1472                           ; 1 bytes @ 0xE
  1473                           
  1474  007E                     ??___ftsub:	
  1475                           ; 1 bytes @ 0xE
  1476                           
  1477                           
  1478                           	psect	cstackBANK0
  1479  002C                     __pcstackBANK0:	
  1480                           ; 1 bytes @ 0xE
  1481                           
  1482  002C                     ?_I2C_Master_Init:	
  1483  002C                     ?___bmul:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  002C                     ?___ftmul:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  002C                     ?_ReadRTCAsSec:	
  1490                           ; 3 bytes @ 0x0
  1491                           
  1492  002C                     ___bmul@multiplicand:	
  1493                           ; 4 bytes @ 0x0
  1494                           
  1495  002C                     ___ftmul@f1:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  002C                     I2C_Master_Init@c:	
  1499                           ; 3 bytes @ 0x0
  1500                           
  1501                           
  1502                           ; 4 bytes @ 0x0
  1503  002C                     	ds	1
  1504  002D                     ___bmul@product:	
  1505                           
  1506                           ; 1 bytes @ 0x1
  1507  002D                     	ds	1
  1508  002E                     ___bmul@multiplier:	
  1509                           
  1510                           ; 1 bytes @ 0x2
  1511  002E                     	ds	1
  1512  002F                     ?_Lcd_WriteChar:	
  1513  002F                     ??_ReadVars:	
  1514                           ; 1 bytes @ 0x3
  1515                           
  1516  002F                     Lcd_WriteChar@x:	
  1517                           ; 1 bytes @ 0x3
  1518                           
  1519  002F                     ___ftmul@f2:	
  1520                           ; 1 bytes @ 0x3
  1521                           
  1522                           
  1523                           ; 3 bytes @ 0x3
  1524  002F                     	ds	1
  1525  0030                     ??_ReadRTCAsSec:	
  1526  0030                     ??_I2C_Master_Init:	
  1527                           ; 1 bytes @ 0x4
  1528                           
  1529  0030                     Lcd_WriteChar@c:	
  1530                           ; 1 bytes @ 0x4
  1531                           
  1532                           
  1533                           ; 1 bytes @ 0x4
  1534  0030                     	ds	1
  1535  0031                     Lcd_WriteChar@y:	
  1536                           
  1537                           ; 1 bytes @ 0x5
  1538  0031                     	ds	1
  1539  0032                     ??___ftmul:	
  1540  0032                     Lcd_WriteChar@data:	
  1541                           ; 1 bytes @ 0x6
  1542                           
  1543                           
  1544                           ; 1 bytes @ 0x6
  1545  0032                     	ds	1
  1546  0033                     ?_WriteLongInt:	
  1547  0033                     WriteLongInt@x:	
  1548                           ; 1 bytes @ 0x7
  1549                           
  1550                           
  1551                           ; 1 bytes @ 0x7
  1552  0033                     	ds	1
  1553  0034                     WriteLongInt@Val:	
  1554                           
  1555                           ; 4 bytes @ 0x8
  1556  0034                     	ds	1
  1557  0035                     ___ftmul@exp:	
  1558                           
  1559                           ; 1 bytes @ 0x9
  1560  0035                     	ds	1
  1561  0036                     ___ftmul@f3_as_product:	
  1562                           
  1563                           ; 3 bytes @ 0xA
  1564  0036                     	ds	1
  1565  0037                     _ReadRTCAsSec$1004:	
  1566                           
  1567                           ; 2 bytes @ 0xB
  1568  0037                     	ds	1
  1569  0038                     WriteLongInt@size:	
  1570                           
  1571                           ; 1 bytes @ 0xC
  1572  0038                     	ds	1
  1573  0039                     WriteLongInt@Sign:	
  1574  0039                     ___ftmul@cntr:	
  1575                           ; 1 bytes @ 0xD
  1576                           
  1577  0039                     ReadRTCAsSec@Out:	
  1578                           ; 1 bytes @ 0xD
  1579                           
  1580                           
  1581                           ; 4 bytes @ 0xD
  1582  0039                     	ds	1
  1583  003A                     ??_WriteLongInt:	
  1584  003A                     ___ftmul@sign:	
  1585                           ; 1 bytes @ 0xE
  1586                           
  1587                           
  1588                           ; 1 bytes @ 0xE
  1589  003A                     	ds	1
  1590  003B                     ?___ftdiv:	
  1591  003B                     WriteLongInt@POS:	
  1592                           ; 3 bytes @ 0xF
  1593                           
  1594  003B                     ___ftdiv@f2:	
  1595                           ; 1 bytes @ 0xF
  1596                           
  1597                           
  1598                           ; 3 bytes @ 0xF
  1599  003B                     	ds	1
  1600  003C                     WriteLongInt@y:	
  1601                           
  1602                           ; 1 bytes @ 0x10
  1603  003C                     	ds	1
  1604  003D                     ReadRTCAsSec@TempVar000:	
  1605                           
  1606                           ; 1 bytes @ 0x11
  1607  003D                     	ds	1
  1608  003E                     ReadVars@j:	
  1609  003E                     ___ftdiv@f1:	
  1610                           ; 1 bytes @ 0x12
  1611                           
  1612                           
  1613                           ; 3 bytes @ 0x12
  1614  003E                     	ds	1
  1615  003F                     ReadVars@i:	
  1616                           
  1617                           ; 1 bytes @ 0x13
  1618  003F                     	ds	2
  1619  0041                     ??___ftdiv:	
  1620                           
  1621                           ; 1 bytes @ 0x15
  1622  0041                     	ds	3
  1623  0044                     ___ftdiv@cntr:	
  1624                           
  1625                           ; 1 bytes @ 0x18
  1626  0044                     	ds	1
  1627  0045                     ___ftdiv@f3:	
  1628                           
  1629                           ; 3 bytes @ 0x19
  1630  0045                     	ds	3
  1631  0048                     ___ftdiv@exp:	
  1632                           
  1633                           ; 1 bytes @ 0x1C
  1634  0048                     	ds	1
  1635  0049                     ___ftdiv@sign:	
  1636                           
  1637                           ; 1 bytes @ 0x1D
  1638  0049                     	ds	1
  1639  004A                     ?___ftadd:	
  1640  004A                     ___ftadd@f1:	
  1641                           ; 3 bytes @ 0x1E
  1642                           
  1643                           
  1644                           ; 3 bytes @ 0x1E
  1645  004A                     	ds	3
  1646  004D                     ___ftadd@f2:	
  1647                           
  1648                           ; 3 bytes @ 0x21
  1649  004D                     	ds	3
  1650  0050                     ??___ftadd:	
  1651                           
  1652                           ; 1 bytes @ 0x24
  1653  0050                     	ds	3
  1654  0053                     ___ftadd@sign:	
  1655                           
  1656                           ; 1 bytes @ 0x27
  1657  0053                     	ds	1
  1658  0054                     ___ftadd@exp2:	
  1659                           
  1660                           ; 1 bytes @ 0x28
  1661  0054                     	ds	1
  1662  0055                     ___ftadd@exp1:	
  1663                           
  1664                           ; 1 bytes @ 0x29
  1665  0055                     	ds	1
  1666  0056                     ?___fttol:	
  1667  0056                     ___fttol@f1:	
  1668                           ; 4 bytes @ 0x2A
  1669                           
  1670                           
  1671                           ; 3 bytes @ 0x2A
  1672  0056                     	ds	4
  1673  005A                     ??___fttol:	
  1674                           
  1675                           ; 1 bytes @ 0x2E
  1676  005A                     	ds	3
  1677  005D                     ___fttol@sign1:	
  1678                           
  1679                           ; 1 bytes @ 0x31
  1680  005D                     	ds	1
  1681  005E                     ___fttol@lval:	
  1682                           
  1683                           ; 4 bytes @ 0x32
  1684  005E                     	ds	4
  1685  0062                     ___fttol@exp1:	
  1686                           
  1687                           ; 1 bytes @ 0x36
  1688  0062                     	ds	1
  1689  0063                     ?_trunc:	
  1690  0063                     trunc@x:	
  1691                           ; 3 bytes @ 0x37
  1692                           
  1693                           
  1694                           ; 3 bytes @ 0x37
  1695  0063                     	ds	3
  1696  0066                     trunc@i:	
  1697                           
  1698                           ; 3 bytes @ 0x3A
  1699  0066                     	ds	3
  1700  0069                     trunc@expon:	
  1701                           
  1702                           ; 2 bytes @ 0x3D
  1703  0069                     	ds	2
  1704  006B                     ?_round:	
  1705  006B                     round@x:	
  1706                           ; 3 bytes @ 0x3F
  1707                           
  1708                           
  1709                           ; 3 bytes @ 0x3F
  1710  006B                     	ds	3
  1711                           
  1712                           	psect	maintext
  1713  0CBF                     __pmaintext:	
  1714 ;;
  1715 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1716 ;;
  1717 ;; *************** function _main *****************
  1718 ;; Defined at:
  1719 ;;		line 4 in file "main.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;  GPSData         6    0[BANK2 ] unsigned char [6]
  1724 ;;  TimeSinceThe    4    9[BANK2 ] long 
  1725 ;;  l               2   28[BANK2 ] unsigned short 
  1726 ;;  OutForThePor    2   25[BANK2 ] unsigned char [2]
  1727 ;;  StateAudioSp    2   22[BANK2 ] unsigned short 
  1728 ;;  StateAudioNo    2   20[BANK2 ] unsigned short 
  1729 ;;  State2OnOffC    2   18[BANK2 ] unsigned short 
  1730 ;;  SecError        2   15[BANK2 ] short 
  1731 ;;  k               2   13[BANK2 ] unsigned short 
  1732 ;;  GPS_On_Time_    2    6[BANK2 ] unsigned short 
  1733 ;;  i               1   27[BANK2 ] unsigned char 
  1734 ;;  j               1   24[BANK2 ] unsigned char 
  1735 ;;  StateSecRema    1   17[BANK2 ] unsigned char 
  1736 ;;  DiffInSecond    1    8[BANK2 ] unsigned char 
  1737 ;; Return value:  Size  Location     Type
  1738 ;;                  1    wreg      void 
  1739 ;; Registers used:
  1740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1741 ;; Tracked objects:
  1742 ;;		On entry : B00/0
  1743 ;;		On exit  : B00/A00
  1744 ;;		Unchanged: 0/0
  1745 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  1746 ;;      Params:         0       0       0       0       0       0
  1747 ;;      Locals:         0       0       0       0       0      30
  1748 ;;      Temps:          0       0       0      10       0       0
  1749 ;;      Totals:         0       0       0      10       0      30
  1750 ;;Total ram usage:       40 bytes
  1751 ;; Hardware stack levels required when called:    5
  1752 ;; This function calls:
  1753 ;;		_GetCumulativePeriodsForStates
  1754 ;;		_GetCycle
  1755 ;;		_I2C_Master_Init
  1756 ;;		_Lcd_Init
  1757 ;;		_Lcd_Text
  1758 ;;		_ReadRTCAsSec
  1759 ;;		_ReadVars
  1760 ;;		_SwitchGPS
  1761 ;;		_UART_Init
  1762 ;;		_UART_ReadValidTimeFromGPS_TO
  1763 ;;		_WriteLongInt
  1764 ;;		___almod
  1765 ;; This function is called by:
  1766 ;;		Startup code after reset
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           
  1771                           ;psect for function _main
  1772  0CBF                     _main:	
  1773                           
  1774                           ;main.c: 7: Lcd_Init();
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1778  0CBF  120A  118A  21F2  120A  158A  	fcall	_Lcd_Init
  1779                           
  1780                           ;main.c: 9: ReadVars();
  1781  0CC4  120A  118A  22EA  120A  158A  	fcall	_ReadVars
  1782                           
  1783                           ;main.c: 10: STATE_BREAKS[3-1] = 0;
  1784  0CC9  1703               	bsf	3,6	;RP1=1, select bank2
  1785  0CCA  01E6               	clrf	(_STATE_BREAKS^(0+256)+2)	;volatile
  1786                           
  1787                           ;main.c: 11: GetCumulativePeriodsForStates();
  1788  0CCB  120A  158A  2227  120A  158A  	fcall	_GetCumulativePeriodsForStates
  1789                           
  1790                           ;main.c: 16: I2C_Master_Init(400000);
  1791  0CD0  3000               	movlw	0
  1792  0CD1  1283               	bcf	3,5	;RP0=0, select bank0
  1793  0CD2  1303               	bcf	3,6	;RP1=0, select bank0
  1794  0CD3  00AF               	movwf	I2C_Master_Init@c+3
  1795  0CD4  3006               	movlw	6
  1796  0CD5  00AE               	movwf	I2C_Master_Init@c+2
  1797  0CD6  301A               	movlw	26
  1798  0CD7  00AD               	movwf	I2C_Master_Init@c+1
  1799  0CD8  3080               	movlw	128
  1800  0CD9  00AC               	movwf	I2C_Master_Init@c
  1801  0CDA  120A  158A  2106  120A  158A  	fcall	_I2C_Master_Init
  1802                           
  1803                           ;main.c: 17: S = ReadRTCAsSec();
  1804  0CDF  120A  158A  2358  120A  158A  	fcall	_ReadRTCAsSec
  1805  0CE4  27E0               	fcall	PL12	;call to abstracted procedure
  1806                           
  1807                           ;main.c: 18: UART_Init(9600);
  1808  0CE5  1683               	bsf	3,5	;RP0=1, select bank1
  1809  0CE6  1303               	bcf	3,6	;RP1=0, select bank1
  1810  0CE7  3025               	movlw	37
  1811  0CE8  01DE               	clrf	(UART_Init@baudrate+3)^(0+128)
  1812  0CE9  01DD               	clrf	(UART_Init@baudrate+2)^(0+128)
  1813  0CEA  00DC               	movwf	(UART_Init@baudrate+1)^(0+128)
  1814  0CEB  3080               	movlw	128
  1815  0CEC  00DB               	movwf	UART_Init@baudrate^(0+128)
  1816  0CED  120A  118A  2403  120A  158A  	fcall	_UART_Init
  1817  0CF2  3014               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1818                           
  1819                           ;main.c: 22: Lcd_Text(1,1,"   -   ");
  1820  0CF3  01F2               	clrf	Lcd_Text@x
  1821  0CF4  0AF2               	incf	Lcd_Text@x,f
  1822  0CF5  00F3               	movwf	Lcd_Text@buffer
  1823  0CF6  3001               	movlw	1
  1824  0CF7  120A  118A  2129  120A  158A  	fcall	_Lcd_Text
  1825  0CFC  3008               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1826                           
  1827                           ;main.c: 23: Lcd_Text(2,1,"C-St-Se/Pr ");
  1828  0CFD  01F2               	clrf	Lcd_Text@x
  1829  0CFE  0AF2               	incf	Lcd_Text@x,f
  1830  0CFF  00F3               	movwf	Lcd_Text@buffer
  1831  0D00  3002               	movlw	2
  1832  0D01  120A  118A  2129  120A  158A  	fcall	_Lcd_Text
  1833                           
  1834                           ;main.c: 26: UINT8 i, j, StateSecRemaining;
  1835                           ;main.c: 27: UINT16 k, l, State2OnOffCounter=0, StateAudioNormalOnOffCounter=0, StateAud
      +                          ioSplOnOffCounter=0;
  1836  0D06  1283               	bcf	3,5	;RP0=0, select bank2
  1837  0D07  1703               	bsf	3,6	;RP1=1, select bank2
  1838  0D08  01D4               	clrf	main@State2OnOffCounter^(0+256)
  1839  0D09  01D5               	clrf	(main@State2OnOffCounter+1)^(0+256)
  1840  0D0A  01D6               	clrf	main@StateAudioNormalOnOffCounter^(0+256)
  1841  0D0B  01D7               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+256)
  1842  0D0C  01D8               	clrf	main@StateAudioSplOnOffCounter^(0+256)
  1843  0D0D  01D9               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+256)
  1844  0D0E                     l3290:	
  1845                           
  1846                           ;main.c: 36: GetCycle();
  1847  0D0E  120A  158A  226D  120A  158A  	fcall	_GetCycle
  1848                           
  1849                           ;main.c: 38: if (CONFIG0 & 0x01)
  1850  0D13  1C67               	btfss	_CONFIG0^(0+256),0	;volatile
  1851  0D14  2D31               	goto	l3298
  1852                           
  1853                           ;main.c: 39: S = ReadRTCAsSec() + C_D;
  1854  0D15  120A  158A  2358  120A  158A  	fcall	_ReadRTCAsSec
  1855  0D1A  27E0  120A  158A   	fcall	PL12	;call to abstracted procedure
  1856  0D1D  0869               	movf	_C_D^(0+256),w	;volatile
  1857  0D1E  07E0               	addwf	_S^(0+256),f	;volatile
  1858  0D1F  01FF               	clrf	127
  1859  0D20  3980               	andlw	128
  1860  0D21  1D03               	skipz
  1861  0D22  03FF               	decf	127,f
  1862  0D23  087F               	movf	127,w
  1863  0D24  1803               	skipnc
  1864  0D25  0A7F               	incf	127,w
  1865  0D26  1D03               	skipz
  1866  0D27  07E1               	addwf	(_S+1)^(0+256),f	;volatile
  1867  0D28  087F               	movf	127,w
  1868  0D29  1803               	skipnc
  1869  0D2A  0A7F               	incf	127,w
  1870  0D2B  1D03               	skipz
  1871  0D2C  07E2               	addwf	(_S+2)^(0+256),f	;volatile
  1872  0D2D  087F               	movf	127,w
  1873  0D2E  1803               	skipnc
  1874  0D2F  0A7F               	incf	127,w
  1875  0D30  07E3               	addwf	(_S+3)^(0+256),f	;volatile
  1876  0D31                     l3298:	
  1877                           
  1878                           ;main.c: 40: if (CONFIG0 & 0x02) {
  1879  0D31  1CE7               	btfss	_CONFIG0^(0+256),1	;volatile
  1880  0D32  2D3E               	goto	l3304
  1881                           
  1882                           ;main.c: 41: SwitchGPS(1);
  1883  0D33  3001               	movlw	1
  1884  0D34  120A  118A  2007  120A  158A  	fcall	_SwitchGPS
  1885                           
  1886                           ;main.c: 42: GPS_On_Time_Counter++;
  1887  0D39  1703               	bsf	3,6	;RP1=1, select bank2
  1888  0D3A  0AC8               	incf	main@GPS_On_Time_Counter^(0+256),f
  1889  0D3B  1903               	skipnz
  1890  0D3C  0AC9               	incf	(main@GPS_On_Time_Counter+1)^(0+256),f
  1891                           
  1892                           ;main.c: 43: } else {
  1893  0D3D  2D47               	goto	l3308
  1894  0D3E                     l3304:	
  1895                           
  1896                           ;main.c: 44: SwitchGPS(0);
  1897  0D3E  3000               	movlw	0
  1898  0D3F  120A  118A  2007  120A  158A  	fcall	_SwitchGPS
  1899                           
  1900                           ;main.c: 45: GPS_On_Time_Counter=0;
  1901  0D44  1703               	bsf	3,6	;RP1=1, select bank2
  1902  0D45  01C8               	clrf	main@GPS_On_Time_Counter^(0+256)
  1903  0D46  01C9               	clrf	(main@GPS_On_Time_Counter+1)^(0+256)
  1904  0D47                     l3308:	
  1905                           
  1906                           ;main.c: 46: }
  1907                           ;main.c: 47: if (GPS_On_Time_Counter >= 1200) {
  1908  0D47  3004               	movlw	4
  1909  0D48  0249               	subwf	(main@GPS_On_Time_Counter+1)^(0+256),w
  1910  0D49  30B0               	movlw	176
  1911  0D4A  1903               	skipnz
  1912  0D4B  0248               	subwf	main@GPS_On_Time_Counter^(0+256),w
  1913  0D4C  1C03               	skipc
  1914  0D4D  2D56               	goto	l3312
  1915                           
  1916                           ;main.c: 48: UART_ReadValidTimeFromGPS_TO(GPSData,4);
  1917  0D4E  3004               	movlw	4
  1918  0D4F  00F8               	movwf	UART_ReadValidTimeFromGPS_TO@TimeOut
  1919  0D50  3042               	movlw	(low (main@GPSData| (0+256)))& (0+255)
  1920  0D51  120A  158A  217B  120A  158A  	fcall	_UART_ReadValidTimeFromGPS_TO
  1921  0D56                     l3312:	
  1922                           
  1923                           ;main.c: 49: }
  1924                           ;main.c: 51: (CYCLE_TYPE==0) ? (i = 0) : (i = STATE_BREAKS[CYCLE_TYPE-1]);
  1925  0D56  1703               	bsf	3,6	;RP1=1, select bank2
  1926  0D57  0868               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  1927  0D58  1D03               	btfss	3,2
  1928  0D59  2D5C               	goto	l3316
  1929  0D5A  01DD               	clrf	main@i^(0+256)
  1930  0D5B  2D62               	goto	l3318
  1931  0D5C                     l3316:	
  1932  0D5C  0868               	movf	_CYCLE_TYPE^(0+256),w
  1933  0D5D  3E63               	addlw	(low ((_STATE_BREAKS| (0+256)+255)))& (0+255)
  1934  0D5E  0084               	movwf	4
  1935  0D5F  1783               	bsf	3,7	;select IRP bank2
  1936  0D60  0800               	movf	0,w
  1937  0D61  00DD               	movwf	main@i^(0+256)
  1938  0D62                     l3318:	
  1939                           
  1940                           ;main.c: 53: if (C[PREV_CYCLE_TYPE] < C[PREV_CYCLE_TYPE])
  1941  0D62  086A               	movf	_PREV_CYCLE_TYPE^(0+256),w	;volatile
  1942  0D63  1683               	bsf	3,5	;RP0=1, select bank3
  1943  0D64  00E5               	movwf	??_main^(0+384)
  1944  0D65  3001               	movlw	1
  1945  0D66  1003               	clrc
  1946  0D67                     L1:	
  1947  0D67  0DE5               	rlf	??_main^(0+384),f
  1948  0D68  3EFF               	addlw	-1
  1949  0D69  1003               	clrc
  1950  0D6A  1D03               	skipz
  1951  0D6B  2D67               	goto	L1
  1952  0D6C  0D65               	rlf	??_main^(0+384),w
  1953  0D6D  3E20               	addlw	32
  1954  0D6E  0084               	movwf	4
  1955  0D6F  1383               	bcf	3,7	;select IRP bank0
  1956  0D70  0800               	movf	0,w
  1957  0D71  00E6               	movwf	(??_main+1)^(0+384)
  1958  0D72  0A84               	incf	4,f
  1959  0D73  0800               	movf	0,w
  1960  0D74  00E7               	movwf	((??_main+1)^(0+384)+1)
  1961  0D75  0A84               	incf	4,f
  1962  0D76  0800               	movf	0,w
  1963  0D77  00E8               	movwf	((??_main+1)^(0+384)+2)
  1964  0D78  0A84               	incf	4,f
  1965  0D79  0800               	movf	0,w
  1966  0D7A  00E9               	movwf	((??_main+1)^(0+384)+3)
  1967  0D7B  1283               	bcf	3,5	;RP0=0, select bank2
  1968  0D7C  086A               	movf	_PREV_CYCLE_TYPE^(0+256),w	;volatile
  1969  0D7D  1683               	bsf	3,5	;RP0=1, select bank3
  1970  0D7E  00EA               	movwf	(??_main+5)^(0+384)
  1971  0D7F  3001               	movlw	1
  1972  0D80  1003               	clrc
  1973  0D81                     L2:	
  1974  0D81  0DEA               	rlf	(??_main+5)^(0+384),f
  1975  0D82  3EFF               	addlw	-1
  1976  0D83  1003               	clrc
  1977  0D84  1D03               	skipz
  1978  0D85  2D81               	goto	L2
  1979  0D86  0D6A               	rlf	(??_main+5)^(0+384),w
  1980  0D87  3E20               	addlw	32
  1981  0D88  0084               	movwf	4
  1982  0D89  0800               	movf	0,w
  1983  0D8A  00EB               	movwf	(??_main+6)^(0+384)
  1984  0D8B  0A84               	incf	4,f
  1985  0D8C  0800               	movf	0,w
  1986  0D8D  00EC               	movwf	((??_main+6)^(0+384)+1)
  1987  0D8E  0A84               	incf	4,f
  1988  0D8F  0800               	movf	0,w
  1989  0D90  00ED               	movwf	((??_main+6)^(0+384)+2)
  1990  0D91  0A84               	incf	4,f
  1991  0D92  0800               	movf	0,w
  1992  0D93  00EE               	movwf	((??_main+6)^(0+384)+3)
  1993  0D94  086E               	movf	(??_main+9)^(0+384),w
  1994  0D95  3A80               	xorlw	128
  1995  0D96  00FF               	movwf	127
  1996  0D97  0869               	movf	(??_main+4)^(0+384),w
  1997  0D98  3A80               	xorlw	128
  1998  0D99  027F               	subwf	127,w
  1999  0D9A  1D03               	skipz
  2000  0D9B  2DA6               	goto	u3903
  2001  0D9C  0868               	movf	(??_main+3)^(0+384),w
  2002  0D9D  026D               	subwf	(??_main+8)^(0+384),w
  2003  0D9E  1D03               	skipz
  2004  0D9F  2DA6               	goto	u3903
  2005  0DA0  0867               	movf	(??_main+2)^(0+384),w
  2006  0DA1  026C               	subwf	(??_main+7)^(0+384),w
  2007  0DA2  1D03               	skipz
  2008  0DA3  2DA6               	goto	u3903
  2009  0DA4  0866               	movf	(??_main+1)^(0+384),w
  2010  0DA5  026B               	subwf	(??_main+6)^(0+384),w
  2011  0DA6                     u3903:	
  2012  0DA6  1803               	skipnc
  2013  0DA7  2DAC               	goto	l3324
  2014                           
  2015                           ;main.c: 54: TimeSinceTheStartOfCycle = S - C[PREV_CYCLE_TYPE];
  2016  0DA8  2769  120A  158A   	fcall	PL2	;call to abstracted procedure
  2017  0DAB  2DBD               	goto	l3330
  2018  0DAC                     l3324:	
  2019                           
  2020                           ;main.c: 55: else
  2021                           ;main.c: 56: TimeSinceTheStartOfCycle = S + (86400 - C[PREV_CYCLE_TYPE]);
  2022  0DAC  2769  120A  158A   	fcall	PL2	;call to abstracted procedure
  2023  0DAF  3080               	movlw	128
  2024  0DB0  07CB               	addwf	main@TimeSinceTheStartOfCycle^(0+256),f
  2025  0DB1  3051               	movlw	81
  2026  0DB2  1803               	skipnc
  2027  0DB3  3052               	movlw	82
  2028  0DB4  07CC               	addwf	(main@TimeSinceTheStartOfCycle+1)^(0+256),f
  2029  0DB5  3001               	movlw	1
  2030  0DB6  1803               	skipnc
  2031  0DB7  3002               	movlw	2
  2032  0DB8  07CD               	addwf	(main@TimeSinceTheStartOfCycle+2)^(0+256),f
  2033  0DB9  3000               	movlw	0
  2034  0DBA  1803               	skipnc
  2035  0DBB  3001               	movlw	1
  2036  0DBC  07CE               	addwf	(main@TimeSinceTheStartOfCycle+3)^(0+256),f
  2037  0DBD                     l3330:	
  2038                           
  2039                           ;main.c: 57: SecError = TimeSinceTheStartOfCycle%STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2040  0DBD  27D5               	fcall	PL10	;call to abstracted procedure
  2041  0DBE  0865               	movf	??_main^(0+384),w
  2042  0DBF  00F0               	movwf	___almod@divisor
  2043  0DC0  0866               	movf	(??_main+1)^(0+384),w
  2044  0DC1  00F1               	movwf	___almod@divisor+1
  2045  0DC2  01F2               	clrf	___almod@divisor+2
  2046  0DC3  01F3               	clrf	___almod@divisor+3
  2047  0DC4  1283               	bcf	3,5	;RP0=0, select bank2
  2048  0DC5  084E               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2049  0DC6  00F7               	movwf	___almod@dividend+3
  2050  0DC7  084D               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2051  0DC8  00F6               	movwf	___almod@dividend+2
  2052  0DC9  084C               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2053  0DCA  00F5               	movwf	___almod@dividend+1
  2054  0DCB  084B               	movf	main@TimeSinceTheStartOfCycle^(0+256),w
  2055  0DCC  00F4               	movwf	___almod@dividend
  2056  0DCD  120A  158A  209D  120A  158A  	fcall	___almod
  2057  0DD2  0871               	movf	?___almod+1,w
  2058  0DD3  00D2               	movwf	(main@SecError+1)^(0+256)
  2059  0DD4  0870               	movf	?___almod,w
  2060  0DD5  00D1               	movwf	main@SecError^(0+256)
  2061                           
  2062                           ;main.c: 58: if (SecError > (STATE_CUMULATIVE_PERIODS[CYCLE_TYPE]/2))
  2063  0DD6  27D5  120A  158A   	fcall	PL10	;call to abstracted procedure
  2064  0DD9  1003               	clrc
  2065  0DDA  0CE6               	rrf	(??_main^(0+384)+1),f
  2066  0DDB  0CE5               	rrf	??_main^(0+384),f
  2067  0DDC  1283               	bcf	3,5	;RP0=0, select bank2
  2068  0DDD  0852               	movf	(main@SecError+1)^(0+256),w
  2069  0DDE  1683               	bsf	3,5	;RP0=1, select bank3
  2070  0DDF  0266               	subwf	(??_main+1)^(0+384),w
  2071  0DE0  1D03               	skipz
  2072  0DE1  2DE6               	goto	u3955
  2073  0DE2  1283               	bcf	3,5	;RP0=0, select bank2
  2074  0DE3  0851               	movf	main@SecError^(0+256),w
  2075  0DE4  1683               	bsf	3,5	;RP0=1, select bank3
  2076  0DE5  0265               	subwf	??_main^(0+384),w
  2077  0DE6                     u3955:	
  2078  0DE6  1803               	skipnc
  2079  0DE7  2DF5               	goto	l3460
  2080                           
  2081                           ;main.c: 59: SecError -= STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2082  0DE8  1283               	bcf	3,5	;RP0=0, select bank2
  2083  0DE9  27D5  120A  158A   	fcall	PL10	;call to abstracted procedure
  2084  0DEC  0865               	movf	??_main^(0+384),w
  2085  0DED  1283               	bcf	3,5	;RP0=0, select bank2
  2086  0DEE  02D1               	subwf	main@SecError^(0+256),f
  2087  0DEF  1683               	bsf	3,5	;RP0=1, select bank3
  2088  0DF0  0866               	movf	(??_main+1)^(0+384),w
  2089  0DF1  1283               	bcf	3,5	;RP0=0, select bank2
  2090  0DF2  1C03               	skipc
  2091  0DF3  03D2               	decf	(main@SecError+1)^(0+256),f
  2092  0DF4  02D2               	subwf	(main@SecError+1)^(0+256),f
  2093  0DF5                     l3460:	
  2094  0DF5  1283               	bcf	3,5	;RP0=0, select bank2
  2095  0DF6  0868               	movf	_CYCLE_TYPE^(0+256),w
  2096  0DF7  3E64               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  2097  0DF8  0084               	movwf	4
  2098  0DF9  1783               	bsf	3,7	;select IRP bank2
  2099  0DFA  0800               	movf	0,w
  2100  0DFB  025D               	subwf	main@i^(0+256),w
  2101  0DFC  1803               	btfsc	3,0
  2102  0DFD  2D0E               	goto	l3290
  2103                           
  2104                           ;main.c: 61: DiffInSecond = 0;
  2105  0DFE  01CA               	clrf	main@DiffInSecond^(0+256)
  2106                           
  2107                           ;main.c: 62: for (j=0; j<(STATE_PERIODS[i] + DiffInSecond); j++) {
  2108  0DFF  01DA               	clrf	main@j^(0+256)
  2109  0E00                     l3456:	
  2110  0E00  085D               	movf	main@i^(0+256),w
  2111  0E01  3ECC               	addlw	204
  2112  0E02  0084               	movwf	4
  2113  0E03  1783               	bsf	3,7	;select IRP bank3
  2114  0E04  0800               	movf	0,w
  2115  0E05  074A               	addwf	main@DiffInSecond^(0+256),w
  2116  0E06  1683               	bsf	3,5	;RP0=1, select bank3
  2117  0E07  00E5               	movwf	??_main^(0+384)
  2118  0E08  01E6               	clrf	(??_main^(0+384)+1)
  2119  0E09  0DE6               	rlf	(??_main+1)^(0+384),f
  2120  0E0A  0866               	movf	(??_main+1)^(0+384),w
  2121  0E0B  3A80               	xorlw	128
  2122  0E0C  3C80               	sublw	128
  2123  0E0D  1D03               	skipz
  2124  0E0E  2E12               	goto	u4115
  2125  0E0F  0865               	movf	??_main^(0+384),w
  2126  0E10  1283               	bcf	3,5	;RP0=0, select bank2
  2127  0E11  025A               	subwf	main@j^(0+256),w
  2128  0E12                     u4115:	
  2129  0E12  1803               	btfsc	3,0
  2130  0E13  2F65               	goto	l3458
  2131                           
  2132                           ;main.c: 63: StateSecRemaining = STATE_PERIODS[i]-j;
  2133  0E14  1283               	bcf	3,5	;RP0=0, select bank2
  2134  0E15  1703               	bsf	3,6	;RP1=1, select bank2
  2135  0E16  085D               	movf	main@i^(0+256),w
  2136  0E17  3ECC               	addlw	204
  2137  0E18  0084               	movwf	4
  2138  0E19  085A               	movf	main@j^(0+256),w
  2139  0E1A  1783               	bsf	3,7	;select IRP bank3
  2140  0E1B  0200               	subwf	0,w
  2141  0E1C  00D3               	movwf	main@StateSecRemaining^(0+256)
  2142                           
  2143                           ;main.c: 65: WriteLongInt(2, 1, CYCLE_TYPE , 1, 0);
  2144  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
  2145  0E1E  01B3               	clrf	WriteLongInt@x
  2146  0E1F  0AB3               	incf	WriteLongInt@x,f
  2147  0E20  1703               	bsf	3,6	;RP1=1, select bank2
  2148  0E21  0868               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  2149  0E22  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0E23  00B4               	movwf	WriteLongInt@Val
  2151  0E24  3002               	movlw	2
  2152  0E25  01B5               	clrf	WriteLongInt@Val+1
  2153  0E26  01B6               	clrf	WriteLongInt@Val+2
  2154  0E27  01B7               	clrf	WriteLongInt@Val+3
  2155  0E28  01B8               	clrf	WriteLongInt@size
  2156  0E29  0AB8               	incf	WriteLongInt@size,f
  2157  0E2A  01B9               	clrf	WriteLongInt@Sign
  2158  0E2B  120A  118A  2023  120A  158A  	fcall	_WriteLongInt
  2159                           
  2160                           ;main.c: 66: WriteLongInt(2, 3, i, 2, 0);
  2161  0E30  3003               	movlw	3
  2162  0E31  00B3               	movwf	WriteLongInt@x
  2163  0E32  1703               	bsf	3,6	;RP1=1, select bank2
  2164  0E33  085D               	movf	main@i^(0+256),w
  2165  0E34  27F0               	fcall	PL14	;call to abstracted procedure
  2166  0E35  120A  118A  2023  120A  158A  	fcall	_WriteLongInt
  2167                           
  2168                           ;main.c: 67: WriteLongInt(2, 6, j, 2, 0);
  2169  0E3A  3006               	movlw	6
  2170  0E3B  00B3               	movwf	WriteLongInt@x
  2171  0E3C  1703               	bsf	3,6	;RP1=1, select bank2
  2172  0E3D  085A               	movf	main@j^(0+256),w
  2173  0E3E  27F0               	fcall	PL14	;call to abstracted procedure
  2174  0E3F  120A  118A  2023  120A  158A  	fcall	_WriteLongInt
  2175                           
  2176                           ;main.c: 68: WriteLongInt(2, 9, STATE_PERIODS[i], 2, 0);
  2177  0E44  3009               	movlw	9
  2178  0E45  00B3               	movwf	WriteLongInt@x
  2179  0E46  1703               	bsf	3,6	;RP1=1, select bank2
  2180  0E47  085D               	movf	main@i^(0+256),w
  2181  0E48  3ECC               	addlw	204
  2182  0E49  0084               	movwf	4
  2183  0E4A  1783               	bsf	3,7	;select IRP bank3
  2184  0E4B  0800               	movf	0,w
  2185  0E4C  27F0               	fcall	PL14	;call to abstracted procedure
  2186  0E4D  120A  118A  2023  120A  158A  	fcall	_WriteLongInt
  2187                           
  2188                           ;main.c: 69: WriteLongInt(2, 11, SecError, 5, 1);
  2189  0E52  300B               	movlw	11
  2190  0E53  00B3               	movwf	WriteLongInt@x
  2191  0E54  1703               	bsf	3,6	;RP1=1, select bank2
  2192  0E55  0851               	movf	main@SecError^(0+256),w
  2193  0E56  1303               	bcf	3,6	;RP1=0, select bank0
  2194  0E57  00B4               	movwf	WriteLongInt@Val
  2195  0E58  1703               	bsf	3,6	;RP1=1, select bank2
  2196  0E59  0852               	movf	(main@SecError+1)^(0+256),w
  2197  0E5A  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0E5B  00B5               	movwf	WriteLongInt@Val+1
  2199  0E5C  3000               	movlw	0
  2200  0E5D  1BB5               	btfsc	WriteLongInt@Val+1,7
  2201  0E5E  30FF               	movlw	255
  2202  0E5F  00B6               	movwf	WriteLongInt@Val+2
  2203  0E60  00B7               	movwf	WriteLongInt@Val+3
  2204  0E61  3005               	movlw	5
  2205  0E62  00B8               	movwf	WriteLongInt@size
  2206  0E63  3002               	movlw	2
  2207  0E64  01B9               	clrf	WriteLongInt@Sign
  2208  0E65  0AB9               	incf	WriteLongInt@Sign,f
  2209  0E66  120A  118A  2023  120A  158A  	fcall	_WriteLongInt
  2210                           
  2211                           ;main.c: 70: for (l=0; l<2; l++) {
  2212  0E6B  1703               	bsf	3,6	;RP1=1, select bank2
  2213  0E6C  01DE               	clrf	main@l^(0+256)
  2214  0E6D  01DF               	clrf	(main@l+1)^(0+256)
  2215  0E6E                     l3352:	
  2216  0E6E  3000               	movlw	0
  2217  0E6F  025F               	subwf	(main@l+1)^(0+256),w
  2218  0E70  3002               	movlw	2
  2219  0E71  1903               	skipnz
  2220  0E72  025E               	subwf	main@l^(0+256),w
  2221  0E73  1803               	btfsc	3,0
  2222  0E74  2E94               	goto	l3362
  2223                           
  2224                           ;main.c: 71: WriteLongInt(1,1, STATE_1[i][l], 2, 0);
  2225  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  2226  0E76  01B3               	clrf	WriteLongInt@x
  2227  0E77  0AB3               	incf	WriteLongInt@x,f
  2228  0E78  1703               	bsf	3,6	;RP1=1, select bank2
  2229  0E79  085D               	movf	main@i^(0+256),w
  2230  0E7A  1683               	bsf	3,5	;RP0=1, select bank3
  2231  0E7B  00E5               	movwf	??_main^(0+384)
  2232  0E7C  30A0               	movlw	160
  2233  0E7D  27CA               	fcall	PL8	;call to abstracted procedure
  2234  0E7E  1383               	bcf	3,7	;select IRP bank1
  2235  0E7F  0800               	movf	0,w
  2236  0E80  1283               	bcf	3,5	;RP0=0, select bank0
  2237  0E81  1303               	bcf	3,6	;RP1=0, select bank0
  2238  0E82  00B4               	movwf	WriteLongInt@Val
  2239  0E83  3002               	movlw	2
  2240  0E84  01B5               	clrf	WriteLongInt@Val+1
  2241  0E85  01B6               	clrf	WriteLongInt@Val+2
  2242  0E86  01B7               	clrf	WriteLongInt@Val+3
  2243  0E87  00B8               	movwf	WriteLongInt@size
  2244  0E88  3001               	movlw	1
  2245  0E89  01B9               	clrf	WriteLongInt@Sign
  2246  0E8A  120A  118A  2023  120A  158A  	fcall	_WriteLongInt
  2247  0E8F  1703               	bsf	3,6	;RP1=1, select bank2
  2248  0E90  0ADE               	incf	main@l^(0+256),f
  2249  0E91  1903               	skipnz
  2250  0E92  0ADF               	incf	(main@l+1)^(0+256),f
  2251  0E93  2E6E               	goto	l3352
  2252  0E94                     l3362:	
  2253                           
  2254                           ;main.c: 76: }
  2255                           ;main.c: 78: for (k=0; k<1000; k++) {
  2256  0E94  01CF               	clrf	main@k^(0+256)
  2257  0E95  01D0               	clrf	(main@k+1)^(0+256)
  2258  0E96                     l3364:	
  2259  0E96  3003               	movlw	3
  2260  0E97  0250               	subwf	(main@k+1)^(0+256),w
  2261  0E98  30E8               	movlw	232
  2262  0E99  1903               	skipnz
  2263  0E9A  024F               	subwf	main@k^(0+256),w
  2264  0E9B  1803               	btfsc	3,0
  2265  0E9C  2F47               	goto	l3448
  2266                           
  2267                           ;main.c: 79: for (l=0; l<2; l++)
  2268  0E9D  01DE               	clrf	main@l^(0+256)
  2269  0E9E  01DF               	clrf	(main@l+1)^(0+256)
  2270  0E9F                     l3370:	
  2271  0E9F  3000               	movlw	0
  2272  0EA0  025F               	subwf	(main@l+1)^(0+256),w
  2273  0EA1  3002               	movlw	2
  2274  0EA2  1903               	skipnz
  2275  0EA3  025E               	subwf	main@l^(0+256),w
  2276  0EA4  1803               	btfsc	3,0
  2277  0EA5  2EBA               	goto	l3380
  2278                           
  2279                           ;main.c: 80: OutForThePorts[l] = STATE_1[i][l];
  2280  0EA6  085D               	movf	main@i^(0+256),w
  2281  0EA7  1683               	bsf	3,5	;RP0=1, select bank3
  2282  0EA8  00E5               	movwf	??_main^(0+384)
  2283  0EA9  30A0               	movlw	160
  2284  0EAA  27CA  120A  158A   	fcall	PL8	;call to abstracted procedure
  2285  0EAD  1383               	bcf	3,7	;select IRP bank1
  2286  0EAE  27F9  120A  158A   	fcall	PL30	;call to abstracted procedure
  2287  0EB1  1683               	bsf	3,5	;RP0=1, select bank3
  2288  0EB2  0868               	movf	(??_main+3)^(0+384),w
  2289  0EB3  1783               	bsf	3,7	;select IRP bank2
  2290  0EB4  0080               	movwf	0
  2291  0EB5  1283               	bcf	3,5	;RP0=0, select bank2
  2292  0EB6  0ADE               	incf	main@l^(0+256),f
  2293  0EB7  1903               	skipnz
  2294  0EB8  0ADF               	incf	(main@l+1)^(0+256),f
  2295  0EB9  2E9F               	goto	l3370
  2296  0EBA                     l3380:	
  2297                           
  2298                           ;main.c: 81: if (StateSecRemaining <= 2) {
  2299  0EBA  3003               	movlw	3
  2300  0EBB  0253               	subwf	main@StateSecRemaining^(0+256),w
  2301  0EBC  1803               	skipnc
  2302  0EBD  2EE9               	goto	l3396
  2303                           
  2304                           ;main.c: 82: if (State2OnOffCounter < 50) {
  2305  0EBE  3000               	movlw	0
  2306  0EBF  0255               	subwf	(main@State2OnOffCounter+1)^(0+256),w
  2307  0EC0  3032               	movlw	50
  2308  0EC1  1903               	skipnz
  2309  0EC2  0254               	subwf	main@State2OnOffCounter^(0+256),w
  2310  0EC3  1803               	skipnc
  2311  0EC4  2EE9               	goto	l3396
  2312                           
  2313                           ;main.c: 83: for (l=0; l<2; l++)
  2314  0EC5  01DE               	clrf	main@l^(0+256)
  2315  0EC6  01DF               	clrf	(main@l+1)^(0+256)
  2316  0EC7                     l3386:	
  2317  0EC7  3000               	movlw	0
  2318  0EC8  025F               	subwf	(main@l+1)^(0+256),w
  2319  0EC9  3002               	movlw	2
  2320  0ECA  1903               	skipnz
  2321  0ECB  025E               	subwf	main@l^(0+256),w
  2322  0ECC  1803               	btfsc	3,0
  2323  0ECD  2EE9               	goto	l3396
  2324                           
  2325                           ;main.c: 84: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2326  0ECE  085D               	movf	main@i^(0+256),w
  2327  0ECF  1683               	bsf	3,5	;RP0=1, select bank3
  2328  0ED0  00E5               	movwf	??_main^(0+384)
  2329  0ED1  3010               	movlw	16
  2330  0ED2  27CA  120A  158A   	fcall	PL8	;call to abstracted procedure
  2331  0ED5  1783               	bsf	3,7	;select IRP bank2
  2332  0ED6  27F9  120A  158A   	fcall	PL30	;call to abstracted procedure
  2333  0ED9  0800               	movf	0,w
  2334  0EDA  1683               	bsf	3,5	;RP0=1, select bank3
  2335  0EDB  0468               	iorwf	(??_main+3)^(0+384),w
  2336  0EDC  00E9               	movwf	(??_main+4)^(0+384)
  2337  0EDD  1283               	bcf	3,5	;RP0=0, select bank2
  2338  0EDE  085E               	movf	main@l^(0+256),w
  2339  0EDF  3E5B               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2340  0EE0  0084               	movwf	4
  2341  0EE1  1683               	bsf	3,5	;RP0=1, select bank3
  2342  0EE2  0869               	movf	(??_main+4)^(0+384),w
  2343  0EE3  0080               	movwf	0
  2344  0EE4  1283               	bcf	3,5	;RP0=0, select bank2
  2345  0EE5  0ADE               	incf	main@l^(0+256),f
  2346  0EE6  1903               	skipnz
  2347  0EE7  0ADF               	incf	(main@l+1)^(0+256),f
  2348  0EE8  2EC7               	goto	l3386
  2349  0EE9                     l3396:	
  2350                           
  2351                           ;main.c: 85: }
  2352                           ;main.c: 86: }
  2353                           ;main.c: 87: if (StateSecRemaining <= 3) {
  2354  0EE9  3004               	movlw	4
  2355  0EEA  0253               	subwf	main@StateSecRemaining^(0+256),w
  2356                           
  2357                           ;main.c: 88: if ((StateAudioNormalOnOffCounter) < 50) {
  2358  0EEB  3000               	movlw	0
  2359  0EEC  1803               	skipnc
  2360  0EED  2F03               	goto	L5
  2361  0EEE  0257               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+256),w
  2362  0EEF  3032               	movlw	50
  2363  0EF0  1903               	skipnz
  2364  0EF1  0256               	subwf	main@StateAudioNormalOnOffCounter^(0+256),w
  2365  0EF2  1803               	skipnc
  2366  0EF3  2F18               	goto	l3426
  2367                           
  2368                           ;main.c: 89: for (l=0; l<2; l++)
  2369  0EF4  01DE               	clrf	main@l^(0+256)
  2370  0EF5  01DF               	clrf	(main@l+1)^(0+256)
  2371  0EF6                     l3402:	
  2372  0EF6  3000               	movlw	0
  2373  0EF7  025F               	subwf	(main@l+1)^(0+256),w
  2374  0EF8  3002               	movlw	2
  2375  0EF9  1903               	skipnz
  2376  0EFA  025E               	subwf	main@l^(0+256),w
  2377  0EFB  1803               	btfsc	3,0
  2378  0EFC  2F18               	goto	l3426
  2379                           
  2380                           ;main.c: 90: OutForThePorts[l] = (OutForThePorts[l] | STATE_3[i][l]);
  2381  0EFD  27A7  120A  158A   	fcall	PL4	;call to abstracted procedure
  2382  0F00  1903               	skipnz
  2383  0F01  0ADF               	incf	(main@l+1)^(0+256),f
  2384  0F02  2EF6               	goto	l3402
  2385  0F03                     L5:	
  2386                           ;main.c: 93: if ((StateAudioSplOnOffCounter) < 50) {
  2387                           
  2388  0F03  0259               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+256),w
  2389  0F04  3032               	movlw	50
  2390  0F05  1903               	skipnz
  2391  0F06  0258               	subwf	main@StateAudioSplOnOffCounter^(0+256),w
  2392  0F07  1803               	skipnc
  2393  0F08  2F18               	goto	l3426
  2394                           
  2395                           ;main.c: 94: for (l=0; l<2; l++)
  2396  0F09  01DE               	clrf	main@l^(0+256)
  2397  0F0A  01DF               	clrf	(main@l+1)^(0+256)
  2398  0F0B                     l3416:	
  2399  0F0B  3000               	movlw	0
  2400  0F0C  025F               	subwf	(main@l+1)^(0+256),w
  2401  0F0D  3002               	movlw	2
  2402  0F0E  1903               	skipnz
  2403  0F0F  025E               	subwf	main@l^(0+256),w
  2404  0F10  1803               	btfsc	3,0
  2405  0F11  2F18               	goto	l3426
  2406                           
  2407                           ;main.c: 95: OutForThePorts[l] = (OutForThePorts[l] | STATE_3[i][l]);
  2408  0F12  27A7  120A  158A   	fcall	PL4	;call to abstracted procedure
  2409  0F15  1903               	skipnz
  2410  0F16  0ADF               	incf	(main@l+1)^(0+256),f
  2411  0F17  2F0B               	goto	l3416
  2412  0F18                     l3426:	
  2413                           
  2414                           ;main.c: 96: }
  2415                           ;main.c: 97: }
  2416                           ;main.c: 98: State2OnOffCounter++;
  2417  0F18  0AD4               	incf	main@State2OnOffCounter^(0+256),f
  2418  0F19  1903               	skipnz
  2419  0F1A  0AD5               	incf	(main@State2OnOffCounter+1)^(0+256),f
  2420                           
  2421                           ;main.c: 99: StateAudioNormalOnOffCounter++;
  2422  0F1B  0AD6               	incf	main@StateAudioNormalOnOffCounter^(0+256),f
  2423  0F1C  1903               	skipnz
  2424  0F1D  0AD7               	incf	(main@StateAudioNormalOnOffCounter+1)^(0+256),f
  2425                           
  2426                           ;main.c: 100: StateAudioSplOnOffCounter++;
  2427  0F1E  0AD8               	incf	main@StateAudioSplOnOffCounter^(0+256),f
  2428  0F1F  1903               	skipnz
  2429  0F20  0AD9               	incf	(main@StateAudioSplOnOffCounter+1)^(0+256),f
  2430                           
  2431                           ;main.c: 101: if (State2OnOffCounter >= (50
  2432                           ;main.c: 102: + 50))
  2433  0F21  3000               	movlw	0
  2434  0F22  0255               	subwf	(main@State2OnOffCounter+1)^(0+256),w
  2435  0F23  3064               	movlw	100
  2436  0F24  1903               	skipnz
  2437  0F25  0254               	subwf	main@State2OnOffCounter^(0+256),w
  2438  0F26  1C03               	skipc
  2439  0F27  2F2A               	goto	l3432
  2440                           
  2441                           ;main.c: 103: State2OnOffCounter=0;
  2442  0F28  01D4               	clrf	main@State2OnOffCounter^(0+256)
  2443  0F29  01D5               	clrf	(main@State2OnOffCounter+1)^(0+256)
  2444  0F2A                     l3432:	
  2445                           
  2446                           ;main.c: 104: if (StateAudioNormalOnOffCounter >= (50
  2447                           ;main.c: 105: + 50))
  2448  0F2A  3000               	movlw	0
  2449  0F2B  0257               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+256),w
  2450  0F2C  3064               	movlw	100
  2451  0F2D  1903               	skipnz
  2452  0F2E  0256               	subwf	main@StateAudioNormalOnOffCounter^(0+256),w
  2453  0F2F  1C03               	skipc
  2454  0F30  2F33               	goto	l3436
  2455                           
  2456                           ;main.c: 106: StateAudioNormalOnOffCounter=0;
  2457  0F31  01D6               	clrf	main@StateAudioNormalOnOffCounter^(0+256)
  2458  0F32  01D7               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+256)
  2459  0F33                     l3436:	
  2460                           
  2461                           ;main.c: 107: if (StateAudioSplOnOffCounter >= (50
  2462                           ;main.c: 108: + 50))
  2463  0F33  3000               	movlw	0
  2464  0F34  0259               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+256),w
  2465  0F35  3064               	movlw	100
  2466  0F36  1903               	skipnz
  2467  0F37  0258               	subwf	main@StateAudioSplOnOffCounter^(0+256),w
  2468  0F38  1C03               	skipc
  2469  0F39  2F3C               	goto	l3440
  2470                           
  2471                           ;main.c: 109: StateAudioSplOnOffCounter=0;
  2472  0F3A  01D8               	clrf	main@StateAudioSplOnOffCounter^(0+256)
  2473  0F3B  01D9               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+256)
  2474  0F3C                     l3440:	
  2475                           
  2476                           ;main.c: 114: (_delay((unsigned long)((700)*(4000000/4000000.0))));
  2477  0F3C  30E9               	movlw	233
  2478  0F3D  1683               	bsf	3,5	;RP0=1, select bank3
  2479  0F3E  00E5               	movwf	??_main^(0+384)
  2480  0F3F                     u4137:	
  2481  0F3F  0BE5               	decfsz	??_main^(0+384),f
  2482  0F40  2F3F               	goto	u4137
  2483  0F41  1283               	bcf	3,5	;RP0=0, select bank2
  2484  0F42  1703               	bsf	3,6	;RP1=1, select bank2
  2485  0F43  0ACF               	incf	main@k^(0+256),f
  2486  0F44  1903               	skipnz
  2487  0F45  0AD0               	incf	(main@k+1)^(0+256),f
  2488  0F46  2E96               	goto	l3364
  2489  0F47                     l3448:	
  2490                           
  2491                           ;main.c: 120: }
  2492                           ;main.c: 121: S++;
  2493  0F47  0AE0               	incf	_S^(0+256),f	;volatile
  2494  0F48  1903               	skipnz
  2495  0F49  0AE1               	incf	(_S+1)^(0+256),f	;volatile
  2496  0F4A  1903               	skipnz
  2497  0F4B  0AE2               	incf	(_S+2)^(0+256),f	;volatile
  2498  0F4C  1903               	skipnz
  2499  0F4D  0AE3               	incf	(_S+3)^(0+256),f	;volatile
  2500                           
  2501                           ;main.c: 122: if (S>=86400)
  2502  0F4E  1BE3               	btfsc	(_S+3)^(0+256),7	;volatile
  2503  0F4F  2F63               	goto	l3454
  2504  0F50  0863               	movf	(_S+3)^(0+256),w	;volatile
  2505  0F51  1D03               	btfss	3,2
  2506  0F52  2F5F               	goto	l3452
  2507  0F53  3001               	movlw	1
  2508  0F54  0262               	subwf	(_S+2)^(0+256),w	;volatile
  2509  0F55  1D03               	skipz
  2510  0F56  2F5D               	goto	u4103
  2511  0F57  3051               	movlw	81
  2512  0F58  0261               	subwf	(_S+1)^(0+256),w	;volatile
  2513  0F59  1D03               	skipz
  2514  0F5A  2F5D               	goto	u4103
  2515  0F5B  3080               	movlw	128
  2516  0F5C  0260               	subwf	_S^(0+256),w	;volatile
  2517  0F5D                     u4103:	
  2518  0F5D  1C03               	btfss	3,0
  2519  0F5E  2F63               	goto	l3454
  2520  0F5F                     l3452:	
  2521                           
  2522                           ;main.c: 123: S=0;
  2523  0F5F  01E0               	clrf	_S^(0+256)	;volatile
  2524  0F60  01E1               	clrf	(_S+1)^(0+256)	;volatile
  2525  0F61  01E2               	clrf	(_S+2)^(0+256)	;volatile
  2526  0F62  01E3               	clrf	(_S+3)^(0+256)	;volatile
  2527  0F63                     l3454:	
  2528  0F63  0ADA               	incf	main@j^(0+256),f
  2529  0F64  2E00               	goto	l3456
  2530  0F65                     l3458:	
  2531  0F65  1283               	bcf	3,5	;RP0=0, select bank2
  2532  0F66  1703               	bsf	3,6	;RP1=1, select bank2
  2533  0F67  0ADD               	incf	main@i^(0+256),f
  2534  0F68  2DF5               	goto	l3460
  2535  0F69                     __end_of_main:	
  2536  0F69                     PL2:	
  2537  0F69  1283               	bcf	3,5	;RP0=0, select bank2
  2538  0F6A  0863               	movf	(_S+3)^(0+256),w	;volatile
  2539  0F6B  00CE               	movwf	(main@TimeSinceTheStartOfCycle+3)^(0+256)
  2540  0F6C  0862               	movf	(_S+2)^(0+256),w	;volatile
  2541  0F6D  00CD               	movwf	(main@TimeSinceTheStartOfCycle+2)^(0+256)
  2542  0F6E  0861               	movf	(_S+1)^(0+256),w	;volatile
  2543  0F6F  00CC               	movwf	(main@TimeSinceTheStartOfCycle+1)^(0+256)
  2544  0F70  0860               	movf	_S^(0+256),w	;volatile
  2545  0F71  00CB               	movwf	main@TimeSinceTheStartOfCycle^(0+256)
  2546  0F72  086A               	movf	_PREV_CYCLE_TYPE^(0+256),w	;volatile
  2547  0F73  1683               	bsf	3,5	;RP0=1, select bank3
  2548  0F74  00E5               	movwf	??_main^(0+384)
  2549  0F75  3001               	movlw	1
  2550  0F76  1003               	clrc
  2551  0F77                     L3:	
  2552  0F77  0DE5               	rlf	??_main^(0+384),f
  2553  0F78  3EFF               	addlw	-1
  2554  0F79  1003               	clrc
  2555  0F7A  1D03               	skipz
  2556  0F7B  2F77               	goto	L3
  2557  0F7C  0D65               	rlf	??_main^(0+384),w
  2558  0F7D  3E20               	addlw	32
  2559  0F7E  0084               	movwf	4
  2560  0F7F  0800               	movf	0,w
  2561  0F80  00E6               	movwf	(??_main+1)^(0+384)
  2562  0F81  0A84               	incf	4,f
  2563  0F82  0800               	movf	0,w
  2564  0F83  00E7               	movwf	((??_main+1)^(0+384)+1)
  2565  0F84  0A84               	incf	4,f
  2566  0F85  0800               	movf	0,w
  2567  0F86  00E8               	movwf	((??_main+1)^(0+384)+2)
  2568  0F87  0A84               	incf	4,f
  2569  0F88  0800               	movf	0,w
  2570  0F89  00E9               	movwf	((??_main+1)^(0+384)+3)
  2571  0F8A  0866               	movf	(??_main+1)^(0+384),w
  2572  0F8B  1283               	bcf	3,5	;RP0=0, select bank2
  2573  0F8C  02CB               	subwf	main@TimeSinceTheStartOfCycle^(0+256),f
  2574  0F8D  1683               	bsf	3,5	;RP0=1, select bank3
  2575  0F8E  0867               	movf	(??_main+2)^(0+384),w
  2576  0F8F  1C03               	skipc
  2577  0F90  0F67               	incfsz	(??_main+2)^(0+384),w
  2578  0F91  2F93               	goto	u3925
  2579  0F92  2F95               	goto	u3926
  2580  0F93                     u3925:	
  2581  0F93  1283               	bcf	3,5	;RP0=0, select bank2
  2582  0F94  02CC               	subwf	(main@TimeSinceTheStartOfCycle+1)^(0+256),f
  2583  0F95                     u3926:	
  2584  0F95  1683               	bsf	3,5	;RP0=1, select bank3
  2585  0F96  0868               	movf	(??_main+3)^(0+384),w
  2586  0F97  1C03               	skipc
  2587  0F98  0F68               	incfsz	(??_main+3)^(0+384),w
  2588  0F99  2F9B               	goto	u3927
  2589  0F9A  2F9D               	goto	u3928
  2590  0F9B                     u3927:	
  2591  0F9B  1283               	bcf	3,5	;RP0=0, select bank2
  2592  0F9C  02CD               	subwf	(main@TimeSinceTheStartOfCycle+2)^(0+256),f
  2593  0F9D                     u3928:	
  2594  0F9D  1683               	bsf	3,5	;RP0=1, select bank3
  2595  0F9E  0869               	movf	(??_main+4)^(0+384),w
  2596  0F9F  1C03               	skipc
  2597  0FA0  0F69               	incfsz	(??_main+4)^(0+384),w
  2598  0FA1  2FA3               	goto	u3929
  2599  0FA2  2FA5               	goto	u3920
  2600  0FA3                     u3929:	
  2601  0FA3  1283               	bcf	3,5	;RP0=0, select bank2
  2602  0FA4  02CE               	subwf	(main@TimeSinceTheStartOfCycle+3)^(0+256),f
  2603  0FA5                     u3920:	
  2604  0FA5  1283               	bcf	3,5	;RP0=0, select bank2
  2605  0FA6  0008               	return
  2606  0FA7                     __end_ofPL2:	
  2607  0FA7                     PL4:	
  2608  0FA7  085D               	movf	main@i^(0+256),w
  2609  0FA8  1683               	bsf	3,5	;RP0=1, select bank3
  2610  0FA9  00E5               	movwf	??_main^(0+384)
  2611  0FAA  3090               	movlw	144
  2612  0FAB  1003               	clrc
  2613  0FAC  0DE5               	rlf	??_main^(0+384),f
  2614  0FAD  0765               	addwf	??_main^(0+384),w
  2615  0FAE  00E6               	movwf	(??_main+1)^(0+384)
  2616  0FAF  1283               	bcf	3,5	;RP0=0, select bank2
  2617  0FB0  085E               	movf	main@l^(0+256),w
  2618  0FB1  1683               	bsf	3,5	;RP0=1, select bank3
  2619  0FB2  0766               	addwf	(??_main+1)^(0+384),w
  2620  0FB3  00E7               	movwf	(??_main+2)^(0+384)
  2621  0FB4  0084               	movwf	4
  2622  0FB5  1783               	bsf	3,7	;select IRP bank3
  2623  0FB6  0800               	movf	0,w
  2624  0FB7  00E8               	movwf	(??_main+3)^(0+384)
  2625  0FB8  1283               	bcf	3,5	;RP0=0, select bank2
  2626  0FB9  085E               	movf	main@l^(0+256),w
  2627  0FBA  3E5B               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2628  0FBB  0084               	movwf	4
  2629  0FBC  0800               	movf	0,w
  2630  0FBD  1683               	bsf	3,5	;RP0=1, select bank3
  2631  0FBE  0468               	iorwf	(??_main+3)^(0+384),w
  2632  0FBF  00E9               	movwf	(??_main+4)^(0+384)
  2633  0FC0  1283               	bcf	3,5	;RP0=0, select bank2
  2634  0FC1  085E               	movf	main@l^(0+256),w
  2635  0FC2  3E5B               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2636  0FC3  0084               	movwf	4
  2637  0FC4  1683               	bsf	3,5	;RP0=1, select bank3
  2638  0FC5  0869               	movf	(??_main+4)^(0+384),w
  2639  0FC6  0080               	movwf	0
  2640  0FC7  1283               	bcf	3,5	;RP0=0, select bank2
  2641  0FC8  0ADE               	incf	main@l^(0+256),f
  2642  0FC9  0008               	return
  2643  0FCA                     __end_ofPL4:	
  2644  0FCA                     PL8:	
  2645  0FCA  1003               	clrc
  2646  0FCB  0DE5               	rlf	??_main^(0+384),f
  2647  0FCC  0765               	addwf	??_main^(0+384),w
  2648  0FCD  00E6               	movwf	(??_main+1)^(0+384)
  2649  0FCE  1283               	bcf	3,5	;RP0=0, select bank2
  2650  0FCF  085E               	movf	main@l^(0+256),w
  2651  0FD0  1683               	bsf	3,5	;RP0=1, select bank3
  2652  0FD1  0766               	addwf	(??_main+1)^(0+384),w
  2653  0FD2  00E7               	movwf	(??_main+2)^(0+384)
  2654  0FD3  0084               	movwf	4
  2655  0FD4  0008               	return
  2656  0FD5                     __end_ofPL8:	
  2657  0FD5                     PL10:	
  2658  0FD5  1003               	clrc
  2659  0FD6  0D68               	rlf	_CYCLE_TYPE^(0+256),w	;volatile
  2660  0FD7  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  2661  0FD8  0084               	movwf	4
  2662  0FD9  0800               	movf	0,w
  2663  0FDA  1683               	bsf	3,5	;RP0=1, select bank3
  2664  0FDB  00E5               	movwf	??_main^(0+384)
  2665  0FDC  0A84               	incf	4,f
  2666  0FDD  0800               	movf	0,w
  2667  0FDE  00E6               	movwf	(??_main^(0+384)+1)
  2668  0FDF  0008               	return
  2669  0FE0                     __end_ofPL10:	
  2670  0FE0                     PL12:	
  2671  0FE0  082F               	movf	?_ReadRTCAsSec+3,w
  2672  0FE1  1703               	bsf	3,6	;RP1=1, select bank2
  2673  0FE2  00E3               	movwf	(_S+3)^(0+256)	;volatile
  2674  0FE3  1303               	bcf	3,6	;RP1=0, select bank0
  2675  0FE4  082E               	movf	?_ReadRTCAsSec+2,w
  2676  0FE5  1703               	bsf	3,6	;RP1=1, select bank2
  2677  0FE6  00E2               	movwf	(_S+2)^(0+256)	;volatile
  2678  0FE7  1303               	bcf	3,6	;RP1=0, select bank0
  2679  0FE8  082D               	movf	?_ReadRTCAsSec+1,w
  2680  0FE9  1703               	bsf	3,6	;RP1=1, select bank2
  2681  0FEA  00E1               	movwf	(_S+1)^(0+256)	;volatile
  2682  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  2683  0FEC  082C               	movf	?_ReadRTCAsSec,w
  2684  0FED  1703               	bsf	3,6	;RP1=1, select bank2
  2685  0FEE  00E0               	movwf	_S^(0+256)	;volatile
  2686  0FEF  0008               	return
  2687  0FF0                     __end_ofPL12:	
  2688  0FF0                     PL14:	
  2689  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  2690  0FF1  00B4               	movwf	WriteLongInt@Val
  2691  0FF2  3002               	movlw	2
  2692  0FF3  01B5               	clrf	WriteLongInt@Val+1
  2693  0FF4  01B6               	clrf	WriteLongInt@Val+2
  2694  0FF5  01B7               	clrf	WriteLongInt@Val+3
  2695  0FF6  00B8               	movwf	WriteLongInt@size
  2696  0FF7  01B9               	clrf	WriteLongInt@Sign
  2697  0FF8  0008               	return
  2698  0FF9                     __end_ofPL14:	
  2699  0FF9                     PL30:	
  2700  0FF9  0800               	movf	0,w
  2701  0FFA  00E8               	movwf	(??_main+3)^(0+384)
  2702  0FFB  1283               	bcf	3,5	;RP0=0, select bank2
  2703  0FFC  085E               	movf	main@l^(0+256),w
  2704  0FFD  3E5B               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2705  0FFE  0084               	movwf	4
  2706  0FFF  0008               	return
  2707  1000                     __end_ofPL30:	
  2708                           
  2709                           	psect	text1
  2710  089D                     __ptext1:	
  2711 ;; *************** function ___almod *****************
  2712 ;; Defined at:
  2713 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\almod.c"
  2714 ;; Parameters:    Size  Location     Type
  2715 ;;  divisor         4    0[COMMON] long 
  2716 ;;  dividend        4    4[COMMON] long 
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;  sign            1    9[COMMON] unsigned char 
  2719 ;;  counter         1    8[COMMON] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  4    0[COMMON] long 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0
  2724 ;; Tracked objects:
  2725 ;;		On entry : B00/200
  2726 ;;		On exit  : B00/200
  2727 ;;		Unchanged: B00/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  2729 ;;      Params:         8       0       0       0       0       0
  2730 ;;      Locals:         2       0       0       0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0
  2732 ;;      Totals:        10       0       0       0       0       0
  2733 ;;Total ram usage:       10 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_main
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742                           
  2743                           ;psect for function ___almod
  2744  089D                     ___almod:	
  2745                           
  2746                           ;incstack = 0
  2747                           ; Regs used in ___almod: [wreg+status,2+status,0]
  2748  089D  01F9               	clrf	___almod@sign
  2749  089E  1FF7               	btfss	___almod@dividend+3,7
  2750  089F  28AD               	goto	l832
  2751  08A0  09F4               	comf	___almod@dividend,f
  2752  08A1  09F5               	comf	___almod@dividend+1,f
  2753  08A2  09F6               	comf	___almod@dividend+2,f
  2754  08A3  09F7               	comf	___almod@dividend+3,f
  2755  08A4  0AF4               	incf	___almod@dividend,f
  2756  08A5  1903               	skipnz
  2757  08A6  0AF5               	incf	___almod@dividend+1,f
  2758  08A7  1903               	skipnz
  2759  08A8  0AF6               	incf	___almod@dividend+2,f
  2760  08A9  1903               	skipnz
  2761  08AA  0AF7               	incf	___almod@dividend+3,f
  2762  08AB  01F9               	clrf	___almod@sign
  2763  08AC  0AF9               	incf	___almod@sign,f
  2764  08AD                     l832:	
  2765  08AD  1FF3               	btfss	___almod@divisor+3,7
  2766  08AE  28BA               	goto	l3242
  2767  08AF  09F0               	comf	___almod@divisor,f
  2768  08B0  09F1               	comf	___almod@divisor+1,f
  2769  08B1  09F2               	comf	___almod@divisor+2,f
  2770  08B2  09F3               	comf	___almod@divisor+3,f
  2771  08B3  0AF0               	incf	___almod@divisor,f
  2772  08B4  1903               	skipnz
  2773  08B5  0AF1               	incf	___almod@divisor+1,f
  2774  08B6  1903               	skipnz
  2775  08B7  0AF2               	incf	___almod@divisor+2,f
  2776  08B8  1903               	skipnz
  2777  08B9  0AF3               	incf	___almod@divisor+3,f
  2778  08BA                     l3242:	
  2779  08BA  0873               	movf	___almod@divisor+3,w
  2780  08BB  0472               	iorwf	___almod@divisor+2,w
  2781  08BC  0471               	iorwf	___almod@divisor+1,w
  2782  08BD  0470               	iorwf	___almod@divisor,w
  2783  08BE  1903               	skipnz
  2784  08BF  28EF               	goto	l3258
  2785  08C0  01F8               	clrf	___almod@counter
  2786  08C1                     L6:	
  2787  08C1  0AF8               	incf	___almod@counter,f
  2788  08C2  1BF3               	btfsc	___almod@divisor+3,7
  2789  08C3  28CA               	goto	l3250
  2790  08C4  1003               	clrc
  2791  08C5  0DF0               	rlf	___almod@divisor,f
  2792  08C6  0DF1               	rlf	___almod@divisor+1,f
  2793  08C7  0DF2               	rlf	___almod@divisor+2,f
  2794  08C8  0DF3               	rlf	___almod@divisor+3,f
  2795  08C9  28C1               	goto	L6
  2796  08CA                     l3250:	
  2797  08CA  0873               	movf	___almod@divisor+3,w
  2798  08CB  0277               	subwf	___almod@dividend+3,w
  2799  08CC  1D03               	skipz
  2800  08CD  28D8               	goto	u3815
  2801  08CE  0872               	movf	___almod@divisor+2,w
  2802  08CF  0276               	subwf	___almod@dividend+2,w
  2803  08D0  1D03               	skipz
  2804  08D1  28D8               	goto	u3815
  2805  08D2  0871               	movf	___almod@divisor+1,w
  2806  08D3  0275               	subwf	___almod@dividend+1,w
  2807  08D4  1D03               	skipz
  2808  08D5  28D8               	goto	u3815
  2809  08D6  0870               	movf	___almod@divisor,w
  2810  08D7  0274               	subwf	___almod@dividend,w
  2811  08D8                     u3815:	
  2812  08D8  1C03               	skipc
  2813  08D9  28E9               	goto	L7
  2814  08DA  0870               	movf	___almod@divisor,w
  2815  08DB  02F4               	subwf	___almod@dividend,f
  2816  08DC  0871               	movf	___almod@divisor+1,w
  2817  08DD  1C03               	skipc
  2818  08DE  0F71               	incfsz	___almod@divisor+1,w
  2819  08DF  02F5               	subwf	___almod@dividend+1,f
  2820  08E0  0872               	movf	___almod@divisor+2,w
  2821  08E1  1C03               	skipc
  2822  08E2  0F72               	incfsz	___almod@divisor+2,w
  2823  08E3  02F6               	subwf	___almod@dividend+2,f
  2824  08E4  0873               	movf	___almod@divisor+3,w
  2825  08E5  1C03               	skipc
  2826  08E6  0F73               	incfsz	___almod@divisor+3,w
  2827  08E7  02F7               	subwf	___almod@dividend+3,f
  2828  08E8  1003               	clrc
  2829  08E9                     L7:	
  2830  08E9  0CF3               	rrf	___almod@divisor+3,f
  2831  08EA  0CF2               	rrf	___almod@divisor+2,f
  2832  08EB  0CF1               	rrf	___almod@divisor+1,f
  2833  08EC  0CF0               	rrf	___almod@divisor,f
  2834  08ED  0BF8               	decfsz	___almod@counter,f
  2835  08EE  28CA               	goto	l3250
  2836  08EF                     l3258:	
  2837  08EF  0879               	movf	___almod@sign,w
  2838  08F0  1903               	btfsc	3,2
  2839  08F1  28FD               	goto	l3262
  2840  08F2  09F4               	comf	___almod@dividend,f
  2841  08F3  09F5               	comf	___almod@dividend+1,f
  2842  08F4  09F6               	comf	___almod@dividend+2,f
  2843  08F5  09F7               	comf	___almod@dividend+3,f
  2844  08F6  0AF4               	incf	___almod@dividend,f
  2845  08F7  1903               	skipnz
  2846  08F8  0AF5               	incf	___almod@dividend+1,f
  2847  08F9  1903               	skipnz
  2848  08FA  0AF6               	incf	___almod@dividend+2,f
  2849  08FB  1903               	skipnz
  2850  08FC  0AF7               	incf	___almod@dividend+3,f
  2851  08FD                     l3262:	
  2852  08FD  0877               	movf	___almod@dividend+3,w
  2853  08FE  00F3               	movwf	?___almod+3
  2854  08FF  0876               	movf	___almod@dividend+2,w
  2855  0900  00F2               	movwf	?___almod+2
  2856  0901  0875               	movf	___almod@dividend+1,w
  2857  0902  00F1               	movwf	?___almod+1
  2858  0903  0874               	movf	___almod@dividend,w
  2859  0904  00F0               	movwf	?___almod
  2860  0905  0008               	return
  2861  0906                     __end_of___almod:	
  2862                           
  2863                           	psect	text2
  2864  0023                     __ptext2:	
  2865 ;; *************** function _WriteLongInt *****************
  2866 ;; Defined at:
  2867 ;;		line 183 in file "libs/HD44780.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;  y               1    wreg     unsigned char 
  2870 ;;  x               1    7[BANK0 ] unsigned char 
  2871 ;;  Val             4    8[BANK0 ] long 
  2872 ;;  size            1   12[BANK0 ] char 
  2873 ;;  Sign            1   13[BANK0 ] unsigned char 
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  y               1   16[BANK0 ] unsigned char 
  2876 ;;  POS             1   15[BANK0 ] char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;                  1    wreg      void 
  2879 ;; Registers used:
  2880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2881 ;; Tracked objects:
  2882 ;;		On entry : 300/800
  2883 ;;		On exit  : 300/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  2886 ;;      Params:         0       7       0       0       0       0
  2887 ;;      Locals:         0       2       0       0       0       0
  2888 ;;      Temps:          0       1       0       0       0       0
  2889 ;;      Totals:         0      10       0       0       0       0
  2890 ;;Total ram usage:       10 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    3
  2893 ;; This function calls:
  2894 ;;		_Lcd_WriteChar
  2895 ;;		___aldiv
  2896 ;;		___bmul
  2897 ;;		___lmul
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903                           
  2904                           ;psect for function _WriteLongInt
  2905  0023                     _WriteLongInt:	
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _WriteLongInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2909                           ;WriteLongInt@y stored from wreg
  2910  0023  00BC               	movwf	WriteLongInt@y
  2911                           
  2912                           ;HD44780.c: 184: int8_t POS = 0;
  2913  0024  01BB               	clrf	WriteLongInt@POS
  2914                           
  2915                           ;HD44780.c: 185: if (Sign) {
  2916  0025  0839               	movf	WriteLongInt@Sign,w
  2917  0026  1903               	btfsc	3,2
  2918  0027  2855               	goto	l3080
  2919                           
  2920                           ;HD44780.c: 186: POS++;
  2921  0028  0ABB               	incf	WriteLongInt@POS,f
  2922                           
  2923                           ;HD44780.c: 187: if (Val<0) {
  2924  0029  1FB7               	btfss	WriteLongInt@Val+3,7
  2925  002A  284D               	goto	l3072
  2926                           
  2927                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  2928  002B  0833               	movf	WriteLongInt@x,w
  2929  002C  00AF               	movwf	Lcd_WriteChar@x
  2930  002D  302D               	movlw	45
  2931  002E  00B0               	movwf	Lcd_WriteChar@c
  2932  002F  083C               	movf	WriteLongInt@y,w
  2933  0030  208F               	fcall	_Lcd_WriteChar
  2934                           
  2935                           ;HD44780.c: 189: Val=-1*Val;
  2936  0031  30FF               	movlw	255
  2937  0032  00F0               	movwf	___lmul@multiplier
  2938  0033  00F1               	movwf	___lmul@multiplier+1
  2939  0034  00F2               	movwf	___lmul@multiplier+2
  2940  0035  00F3               	movwf	___lmul@multiplier+3
  2941  0036  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0037  1303               	bcf	3,6	;RP1=0, select bank0
  2943  0038  0837               	movf	WriteLongInt@Val+3,w
  2944  0039  00F7               	movwf	___lmul@multiplicand+3
  2945  003A  0836               	movf	WriteLongInt@Val+2,w
  2946  003B  00F6               	movwf	___lmul@multiplicand+2
  2947  003C  0835               	movf	WriteLongInt@Val+1,w
  2948  003D  00F5               	movwf	___lmul@multiplicand+1
  2949  003E  0834               	movf	WriteLongInt@Val,w
  2950  003F  00F4               	movwf	___lmul@multiplicand
  2951  0040  120A  158A  2483  120A  118A  	fcall	___lmul
  2952  0045  0873               	movf	?___lmul+3,w
  2953  0046  00B7               	movwf	WriteLongInt@Val+3
  2954  0047  0872               	movf	?___lmul+2,w
  2955  0048  00B6               	movwf	WriteLongInt@Val+2
  2956  0049  0871               	movf	?___lmul+1,w
  2957  004A  00B5               	movwf	WriteLongInt@Val+1
  2958  004B  0870               	movf	?___lmul,w
  2959  004C  288D               	goto	L8
  2960  004D                     l3072:	
  2961                           ;HD44780.c: 190: } else
  2962                           
  2963                           
  2964                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  2965  004D  0833               	movf	WriteLongInt@x,w
  2966  004E  00AF               	movwf	Lcd_WriteChar@x
  2967  004F  302B               	movlw	43
  2968  0050  00B0               	movwf	Lcd_WriteChar@c
  2969  0051  083C               	movf	WriteLongInt@y,w
  2970  0052  208F  120A  118A   	fcall	_Lcd_WriteChar
  2971  0055                     l3080:	
  2972  0055  1283               	bcf	3,5	;RP0=0, select bank0
  2973  0056  1303               	bcf	3,6	;RP1=0, select bank0
  2974  0057  0838               	movf	WriteLongInt@size,w
  2975  0058  1903               	btfsc	3,2
  2976  0059  0008               	return
  2977                           
  2978                           ;HD44780.c: 194: size--;
  2979  005A  03B8               	decf	WriteLongInt@size,f
  2980                           
  2981                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  2982  005B  083B               	movf	WriteLongInt@POS,w
  2983  005C  0738               	addwf	WriteLongInt@size,w
  2984  005D  00BA               	movwf	??_WriteLongInt
  2985  005E  0833               	movf	WriteLongInt@x,w
  2986  005F  073A               	addwf	??_WriteLongInt,w
  2987  0060  00AF               	movwf	Lcd_WriteChar@x
  2988  0061  30F6               	movlw	246
  2989  0062  00AC               	movwf	___bmul@multiplicand
  2990  0063  23D3  120A  118A   	fcall	PL20	;call to abstracted procedure
  2991  0066  300A               	movlw	10
  2992  0067  00F0               	movwf	___aldiv@divisor
  2993  0068  01F1               	clrf	___aldiv@divisor+1
  2994  0069  01F2               	clrf	___aldiv@divisor+2
  2995  006A  01F3               	clrf	___aldiv@divisor+3
  2996  006B  20B4  120A  118A   	fcall	___aldiv
  2997  006E  0870               	movf	?___aldiv,w
  2998  006F  23B9  120A  118A   	fcall	___bmul
  2999  0072  0734               	addwf	WriteLongInt@Val,w
  3000  0073  3E30               	addlw	48
  3001  0074  00B0               	movwf	Lcd_WriteChar@c
  3002  0075  083C               	movf	WriteLongInt@y,w
  3003  0076  208F  120A  118A   	fcall	_Lcd_WriteChar
  3004                           
  3005                           ;HD44780.c: 196: Val = Val/10;
  3006  0079  300A               	movlw	10
  3007  007A  00F0               	movwf	___aldiv@divisor
  3008  007B  01F1               	clrf	___aldiv@divisor+1
  3009  007C  01F2               	clrf	___aldiv@divisor+2
  3010  007D  01F3               	clrf	___aldiv@divisor+3
  3011  007E  1283               	bcf	3,5	;RP0=0, select bank0
  3012  007F  1303               	bcf	3,6	;RP1=0, select bank0
  3013  0080  23D3  120A  118A   	fcall	PL20	;call to abstracted procedure
  3014  0083  20B4  120A  118A   	fcall	___aldiv
  3015  0086  0873               	movf	?___aldiv+3,w
  3016  0087  00B7               	movwf	WriteLongInt@Val+3
  3017  0088  0872               	movf	?___aldiv+2,w
  3018  0089  00B6               	movwf	WriteLongInt@Val+2
  3019  008A  0871               	movf	?___aldiv+1,w
  3020  008B  00B5               	movwf	WriteLongInt@Val+1
  3021  008C  0870               	movf	?___aldiv,w
  3022  008D                     L8:	
  3023  008D  00B4               	movwf	WriteLongInt@Val
  3024  008E  2855               	goto	l3080
  3025  008F                     __end_of_WriteLongInt:	
  3026  008F                     __ptext4:	
  3027 ;; *************** function _Lcd_WriteChar *****************
  3028 ;; Defined at:
  3029 ;;		line 99 in file "libs/HD44780.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  y               1    wreg     unsigned char 
  3032 ;;  x               1    3[BANK0 ] unsigned char 
  3033 ;;  c               1    4[BANK0 ] unsigned char 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  y               1    5[BANK0 ] unsigned char 
  3036 ;;  data            1    6[BANK0 ] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 300/800
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3046 ;;      Params:         0       2       0       0       0       0
  3047 ;;      Locals:         0       2       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0
  3049 ;;      Totals:         0       4       0       0       0       0
  3050 ;;Total ram usage:        4 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    2
  3053 ;; This function calls:
  3054 ;;		_Lcd_CharCP
  3055 ;;		_Lcd_Command
  3056 ;; This function is called by:
  3057 ;;		_WriteLongInt
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           
  3062                           ;psect for function _Lcd_WriteChar
  3063  008F                     _Lcd_WriteChar:	
  3064                           
  3065                           ;incstack = 0
  3066                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3067                           ;Lcd_WriteChar@y stored from wreg
  3068  008F  00B1               	movwf	Lcd_WriteChar@y
  3069                           
  3070                           ;HD44780.c: 100: unsigned char data;
  3071                           ;HD44780.c: 101: switch(y) {
  3072  0090  289E               	goto	l2634
  3073  0091                     l2624:	
  3074  0091  082F               	movf	Lcd_WriteChar@x,w
  3075  0092  3E7F               	addlw	127
  3076  0093  289C               	goto	L13
  3077  0094                     l2626:	
  3078  0094  082F               	movf	Lcd_WriteChar@x,w
  3079  0095  3EBF               	addlw	191
  3080  0096  289C               	goto	L13
  3081  0097                     l2628:	
  3082  0097  082F               	movf	Lcd_WriteChar@x,w
  3083  0098  3E93               	addlw	147
  3084  0099  289C               	goto	L13
  3085  009A                     l2630:	
  3086  009A  082F               	movf	Lcd_WriteChar@x,w
  3087  009B  3ED3               	addlw	211
  3088  009C                     L13:	
  3089  009C  00B2               	movwf	Lcd_WriteChar@data
  3090  009D  28AC               	goto	l2636
  3091  009E                     l2634:	
  3092  009E  0831               	movf	Lcd_WriteChar@y,w
  3093                           
  3094                           ; Switch size 1, requested type "space"
  3095                           ; Number of cases is 4, Range of values is 1 to 4
  3096                           ; switch strategies available:
  3097                           ; Name         Instructions Cycles
  3098                           ; simple_byte           13     7 (average)
  3099                           ; direct_byte           23    11 (fixed)
  3100                           ; jumptable            263     9 (fixed)
  3101                           ;	Chosen strategy is simple_byte
  3102  009F  3A01               	xorlw	1	; case 1
  3103  00A0  1903               	skipnz
  3104  00A1  2891               	goto	l2624
  3105  00A2  3A03               	xorlw	3	; case 2
  3106  00A3  1903               	skipnz
  3107  00A4  2894               	goto	l2626
  3108  00A5  3A01               	xorlw	1	; case 3
  3109  00A6  1903               	skipnz
  3110  00A7  2897               	goto	l2628
  3111  00A8  3A07               	xorlw	7	; case 4
  3112  00A9  1903               	skipnz
  3113  00AA  289A               	goto	l2630
  3114  00AB  28AC               	goto	l2636
  3115  00AC                     l2636:	
  3116                           
  3117                           ;HD44780.c: 108: Lcd_Command(data);
  3118  00AC  0832               	movf	Lcd_WriteChar@data,w
  3119  00AD  2252  120A  118A   	fcall	_Lcd_Command
  3120                           
  3121                           ;HD44780.c: 109: Lcd_CharCP(c);
  3122  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  3123  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  3124  00B2  0830               	movf	Lcd_WriteChar@c,w
  3125  00B3  295E               	ljmp	_Lcd_CharCP
  3126  00B4                     __end_of_Lcd_WriteChar:	
  3127  00B4                     __ptext3:	
  3128 ;; *************** function ___aldiv *****************
  3129 ;; Defined at:
  3130 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  divisor         4    0[COMMON] long 
  3133 ;;  dividend        4    4[COMMON] long 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  quotient        4   10[COMMON] long 
  3136 ;;  sign            1    9[COMMON] unsigned char 
  3137 ;;  counter         1    8[COMMON] unsigned char 
  3138 ;; Return value:  Size  Location     Type
  3139 ;;                  4    0[COMMON] long 
  3140 ;; Registers used:
  3141 ;;		wreg, status,2, status,0
  3142 ;; Tracked objects:
  3143 ;;		On entry : 300/800
  3144 ;;		On exit  : 300/0
  3145 ;;		Unchanged: 300/0
  3146 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3147 ;;      Params:         8       0       0       0       0       0
  3148 ;;      Locals:         6       0       0       0       0       0
  3149 ;;      Temps:          0       0       0       0       0       0
  3150 ;;      Totals:        14       0       0       0       0       0
  3151 ;;Total ram usage:       14 bytes
  3152 ;; Hardware stack levels used:    1
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_WriteLongInt
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           
  3161                           ;psect for function ___aldiv
  3162  00B4                     ___aldiv:	
  3163                           
  3164                           ;incstack = 0
  3165                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3166  00B4  01F9               	clrf	___aldiv@sign
  3167  00B5  1FF3               	btfss	___aldiv@divisor+3,7
  3168  00B6  28C4               	goto	l819
  3169  00B7  09F0               	comf	___aldiv@divisor,f
  3170  00B8  09F1               	comf	___aldiv@divisor+1,f
  3171  00B9  09F2               	comf	___aldiv@divisor+2,f
  3172  00BA  09F3               	comf	___aldiv@divisor+3,f
  3173  00BB  0AF0               	incf	___aldiv@divisor,f
  3174  00BC  1903               	skipnz
  3175  00BD  0AF1               	incf	___aldiv@divisor+1,f
  3176  00BE  1903               	skipnz
  3177  00BF  0AF2               	incf	___aldiv@divisor+2,f
  3178  00C0  1903               	skipnz
  3179  00C1  0AF3               	incf	___aldiv@divisor+3,f
  3180  00C2  01F9               	clrf	___aldiv@sign
  3181  00C3  0AF9               	incf	___aldiv@sign,f
  3182  00C4                     l819:	
  3183  00C4  1FF7               	btfss	___aldiv@dividend+3,7
  3184  00C5  28D3               	goto	l2800
  3185  00C6  09F4               	comf	___aldiv@dividend,f
  3186  00C7  09F5               	comf	___aldiv@dividend+1,f
  3187  00C8  09F6               	comf	___aldiv@dividend+2,f
  3188  00C9  09F7               	comf	___aldiv@dividend+3,f
  3189  00CA  0AF4               	incf	___aldiv@dividend,f
  3190  00CB  1903               	skipnz
  3191  00CC  0AF5               	incf	___aldiv@dividend+1,f
  3192  00CD  1903               	skipnz
  3193  00CE  0AF6               	incf	___aldiv@dividend+2,f
  3194  00CF  1903               	skipnz
  3195  00D0  0AF7               	incf	___aldiv@dividend+3,f
  3196  00D1  3001               	movlw	1
  3197  00D2  06F9               	xorwf	___aldiv@sign,f
  3198  00D3                     l2800:	
  3199  00D3  01FA               	clrf	___aldiv@quotient
  3200  00D4  01FB               	clrf	___aldiv@quotient+1
  3201  00D5  01FC               	clrf	___aldiv@quotient+2
  3202  00D6  01FD               	clrf	___aldiv@quotient+3
  3203  00D7  0873               	movf	___aldiv@divisor+3,w
  3204  00D8  0472               	iorwf	___aldiv@divisor+2,w
  3205  00D9  0471               	iorwf	___aldiv@divisor+1,w
  3206  00DA  0470               	iorwf	___aldiv@divisor,w
  3207  00DB  1903               	skipnz
  3208  00DC  2912               	goto	l2822
  3209  00DD  01F8               	clrf	___aldiv@counter
  3210  00DE                     L9:	
  3211  00DE  0AF8               	incf	___aldiv@counter,f
  3212  00DF  1BF3               	btfsc	___aldiv@divisor+3,7
  3213  00E0  28E7               	goto	l2810
  3214  00E1  1003               	clrc
  3215  00E2  0DF0               	rlf	___aldiv@divisor,f
  3216  00E3  0DF1               	rlf	___aldiv@divisor+1,f
  3217  00E4  0DF2               	rlf	___aldiv@divisor+2,f
  3218  00E5  0DF3               	rlf	___aldiv@divisor+3,f
  3219  00E6  28DE               	goto	L9
  3220  00E7                     l2810:	
  3221  00E7  1003               	clrc
  3222  00E8  0DFA               	rlf	___aldiv@quotient,f
  3223  00E9  0DFB               	rlf	___aldiv@quotient+1,f
  3224  00EA  0DFC               	rlf	___aldiv@quotient+2,f
  3225  00EB  0DFD               	rlf	___aldiv@quotient+3,f
  3226  00EC  0873               	movf	___aldiv@divisor+3,w
  3227  00ED  0277               	subwf	___aldiv@dividend+3,w
  3228  00EE  1D03               	skipz
  3229  00EF  28FA               	goto	u3275
  3230  00F0  0872               	movf	___aldiv@divisor+2,w
  3231  00F1  0276               	subwf	___aldiv@dividend+2,w
  3232  00F2  1D03               	skipz
  3233  00F3  28FA               	goto	u3275
  3234  00F4  0871               	movf	___aldiv@divisor+1,w
  3235  00F5  0275               	subwf	___aldiv@dividend+1,w
  3236  00F6  1D03               	skipz
  3237  00F7  28FA               	goto	u3275
  3238  00F8  0870               	movf	___aldiv@divisor,w
  3239  00F9  0274               	subwf	___aldiv@dividend,w
  3240  00FA                     u3275:	
  3241  00FA  1C03               	skipc
  3242  00FB  290C               	goto	L10
  3243  00FC  0870               	movf	___aldiv@divisor,w
  3244  00FD  02F4               	subwf	___aldiv@dividend,f
  3245  00FE  0871               	movf	___aldiv@divisor+1,w
  3246  00FF  1C03               	skipc
  3247  0100  0F71               	incfsz	___aldiv@divisor+1,w
  3248  0101  02F5               	subwf	___aldiv@dividend+1,f
  3249  0102  0872               	movf	___aldiv@divisor+2,w
  3250  0103  1C03               	skipc
  3251  0104  0F72               	incfsz	___aldiv@divisor+2,w
  3252  0105  02F6               	subwf	___aldiv@dividend+2,f
  3253  0106  0873               	movf	___aldiv@divisor+3,w
  3254  0107  1C03               	skipc
  3255  0108  0F73               	incfsz	___aldiv@divisor+3,w
  3256  0109  02F7               	subwf	___aldiv@dividend+3,f
  3257  010A  147A               	bsf	___aldiv@quotient,0
  3258  010B  1003               	clrc
  3259  010C                     L10:	
  3260  010C  0CF3               	rrf	___aldiv@divisor+3,f
  3261  010D  0CF2               	rrf	___aldiv@divisor+2,f
  3262  010E  0CF1               	rrf	___aldiv@divisor+1,f
  3263  010F  0CF0               	rrf	___aldiv@divisor,f
  3264  0110  0BF8               	decfsz	___aldiv@counter,f
  3265  0111  28E7               	goto	l2810
  3266  0112                     l2822:	
  3267  0112  0879               	movf	___aldiv@sign,w
  3268  0113  1903               	btfsc	3,2
  3269  0114  2920               	goto	l2826
  3270  0115  09FA               	comf	___aldiv@quotient,f
  3271  0116  09FB               	comf	___aldiv@quotient+1,f
  3272  0117  09FC               	comf	___aldiv@quotient+2,f
  3273  0118  09FD               	comf	___aldiv@quotient+3,f
  3274  0119  0AFA               	incf	___aldiv@quotient,f
  3275  011A  1903               	skipnz
  3276  011B  0AFB               	incf	___aldiv@quotient+1,f
  3277  011C  1903               	skipnz
  3278  011D  0AFC               	incf	___aldiv@quotient+2,f
  3279  011E  1903               	skipnz
  3280  011F  0AFD               	incf	___aldiv@quotient+3,f
  3281  0120                     l2826:	
  3282  0120  087D               	movf	___aldiv@quotient+3,w
  3283  0121  00F3               	movwf	?___aldiv+3
  3284  0122  087C               	movf	___aldiv@quotient+2,w
  3285  0123  00F2               	movwf	?___aldiv+2
  3286  0124  087B               	movf	___aldiv@quotient+1,w
  3287  0125  00F1               	movwf	?___aldiv+1
  3288  0126  087A               	movf	___aldiv@quotient,w
  3289  0127  00F0               	movwf	?___aldiv
  3290  0128  0008               	return
  3291  0129                     __end_of___aldiv:	
  3292  0129                     __ptext33:	
  3293 ;; *************** function _Lcd_Text *****************
  3294 ;; Defined at:
  3295 ;;		line 76 in file "libs/HD44780.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  y               1    wreg     unsigned char 
  3298 ;;  x               1    2[COMMON] unsigned char 
  3299 ;;  buffer          1    3[COMMON] PTR unsigned char 
  3300 ;;		 -> STR_2(12), STR_1(8), 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  y               1    4[COMMON] unsigned char 
  3303 ;;  data            1    5[COMMON] unsigned char 
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/900
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3313 ;;      Params:         2       0       0       0       0       0
  3314 ;;      Locals:         2       0       0       0       0       0
  3315 ;;      Temps:          0       0       0       0       0       0
  3316 ;;      Totals:         4       0       0       0       0       0
  3317 ;;Total ram usage:        4 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    2
  3320 ;; This function calls:
  3321 ;;		_Lcd_CharCP
  3322 ;;		_Lcd_Command
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _Lcd_Text
  3330  0129                     _Lcd_Text:	
  3331                           
  3332                           ;incstack = 0
  3333                           ; Regs used in _Lcd_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3334                           ;Lcd_Text@y stored from wreg
  3335  0129  00F4               	movwf	Lcd_Text@y
  3336                           
  3337                           ;HD44780.c: 77: unsigned char data;
  3338                           ;HD44780.c: 78: switch(y){
  3339  012A  2938               	goto	l3050
  3340  012B                     l3040:	
  3341  012B  0872               	movf	Lcd_Text@x,w
  3342  012C  3E7F               	addlw	127
  3343  012D  2936               	goto	L20
  3344  012E                     l3042:	
  3345  012E  0872               	movf	Lcd_Text@x,w
  3346  012F  3EBF               	addlw	191
  3347  0130  2936               	goto	L20
  3348  0131                     l3044:	
  3349  0131  0872               	movf	Lcd_Text@x,w
  3350  0132  3E93               	addlw	147
  3351  0133  2936               	goto	L20
  3352  0134                     l3046:	
  3353  0134  0872               	movf	Lcd_Text@x,w
  3354  0135  3ED3               	addlw	211
  3355  0136                     L20:	
  3356  0136  00F5               	movwf	Lcd_Text@data
  3357  0137  2946               	goto	l3052
  3358  0138                     l3050:	
  3359  0138  0874               	movf	Lcd_Text@y,w
  3360                           
  3361                           ; Switch size 1, requested type "space"
  3362                           ; Number of cases is 4, Range of values is 1 to 4
  3363                           ; switch strategies available:
  3364                           ; Name         Instructions Cycles
  3365                           ; simple_byte           13     7 (average)
  3366                           ; direct_byte           23    11 (fixed)
  3367                           ; jumptable            263     9 (fixed)
  3368                           ;	Chosen strategy is simple_byte
  3369  0139  3A01               	xorlw	1	; case 1
  3370  013A  1903               	skipnz
  3371  013B  292B               	goto	l3040
  3372  013C  3A03               	xorlw	3	; case 2
  3373  013D  1903               	skipnz
  3374  013E  292E               	goto	l3042
  3375  013F  3A01               	xorlw	1	; case 3
  3376  0140  1903               	skipnz
  3377  0141  2931               	goto	l3044
  3378  0142  3A07               	xorlw	7	; case 4
  3379  0143  1903               	skipnz
  3380  0144  2934               	goto	l3046
  3381  0145  2946               	goto	l3052
  3382  0146                     l3052:	
  3383                           
  3384                           ;HD44780.c: 84: Lcd_Command(data);
  3385  0146  0875               	movf	Lcd_Text@data,w
  3386  0147  2252               	fcall	_Lcd_Command
  3387  0148                     l3058:	
  3388                           ;HD44780.c: 85: while(*buffer)
  3389                           
  3390  0148  0873               	movf	Lcd_Text@buffer,w
  3391  0149  0084               	movwf	4
  3392  014A  120A  158A  2000  120A  118A  	fcall	stringdir
  3393  014F  3A00               	xorlw	0
  3394  0150  1903               	btfsc	3,2
  3395  0151  0008               	return
  3396                           
  3397                           ;HD44780.c: 86: {
  3398                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  3399  0152  0873               	movf	Lcd_Text@buffer,w
  3400  0153  0084               	movwf	4
  3401  0154  120A  158A  2000  120A  118A  	fcall	stringdir
  3402  0159  215E  120A  118A   	fcall	_Lcd_CharCP
  3403                           
  3404                           ;HD44780.c: 88: buffer++;
  3405  015C  0AF3               	incf	Lcd_Text@buffer,f
  3406  015D  2948               	goto	l3058
  3407  015E                     __end_of_Lcd_Text:	
  3408  015E                     __ptext34:	
  3409 ;; *************** function _Lcd_CharCP *****************
  3410 ;; Defined at:
  3411 ;;		line 116 in file "libs/HD44780.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  c               1    wreg     unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  c               1    1[COMMON] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0, pclath, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/800
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3425 ;;      Params:         0       0       0       0       0       0
  3426 ;;      Locals:         1       0       0       0       0       0
  3427 ;;      Temps:          1       0       0       0       0       0
  3428 ;;      Totals:         2       0       0       0       0       0
  3429 ;;Total ram usage:        2 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    1
  3432 ;; This function calls:
  3433 ;;		_Lcd_Delay5us
  3434 ;; This function is called by:
  3435 ;;		_Lcd_Text
  3436 ;;		_Lcd_WriteChar
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           
  3441                           ;psect for function _Lcd_CharCP
  3442  015E                     _Lcd_CharCP:	
  3443                           
  3444                           ;incstack = 0
  3445                           ; Regs used in _Lcd_CharCP: [wreg+status,2+status,0+pclath+cstack]
  3446                           ;Lcd_CharCP@c stored from wreg
  3447  015E  00F1               	movwf	Lcd_CharCP@c
  3448                           
  3449                           ;HD44780.c: 117: RA1 = 0; RA0 = 1;
  3450  015F  1283               	bcf	3,5	;RP0=0, select bank0
  3451  0160  1303               	bcf	3,6	;RP1=0, select bank0
  3452  0161  1085               	bcf	5,1	;volatile
  3453  0162  1405               	bsf	5,0	;volatile
  3454                           
  3455                           ;HD44780.c: 118: RA5 = (c & 0b10000000)>>7; RA4 = (c & 0b01000000)>>6;
  3456  0163  0871               	movf	Lcd_CharCP@c,w
  3457  0164  00F0               	movwf	??_Lcd_CharCP
  3458  0165  3007               	movlw	7
  3459  0166                     u2685:	
  3460  0166  1003               	clrc
  3461  0167  0CF0               	rrf	??_Lcd_CharCP,f
  3462  0168  3EFF               	addlw	-1
  3463  0169  1D03               	skipz
  3464  016A  2966               	goto	u2685
  3465  016B  1C70               	btfss	??_Lcd_CharCP,0
  3466  016C  2971               	goto	u2690
  3467  016D  1283               	bcf	3,5	;RP0=0, select bank0
  3468  016E  1303               	bcf	3,6	;RP1=0, select bank0
  3469  016F  1685               	bsf	5,5	;volatile
  3470  0170  2974               	goto	u2704
  3471  0171                     u2690:	
  3472  0171  1283               	bcf	3,5	;RP0=0, select bank0
  3473  0172  1303               	bcf	3,6	;RP1=0, select bank0
  3474  0173  1285               	bcf	5,5	;volatile
  3475  0174                     u2704:	
  3476  0174  0871               	movf	Lcd_CharCP@c,w
  3477  0175  00F0               	movwf	??_Lcd_CharCP
  3478  0176  3006               	movlw	6
  3479  0177                     u2715:	
  3480  0177  1003               	clrc
  3481  0178  0CF0               	rrf	??_Lcd_CharCP,f
  3482  0179  3EFF               	addlw	-1
  3483  017A  1D03               	skipz
  3484  017B  2977               	goto	u2715
  3485  017C  1C70               	btfss	??_Lcd_CharCP,0
  3486  017D  2982               	goto	u2720
  3487  017E  1283               	bcf	3,5	;RP0=0, select bank0
  3488  017F  1303               	bcf	3,6	;RP1=0, select bank0
  3489  0180  1605               	bsf	5,4	;volatile
  3490  0181  2985               	goto	u2734
  3491  0182                     u2720:	
  3492  0182  1283               	bcf	3,5	;RP0=0, select bank0
  3493  0183  1303               	bcf	3,6	;RP1=0, select bank0
  3494  0184  1205               	bcf	5,4	;volatile
  3495  0185                     u2734:	
  3496                           
  3497                           ;HD44780.c: 119: RA3 = (c & 0b00100000)>>5; RA2 = (c & 0b00010000)>>4;
  3498  0185  0871               	movf	Lcd_CharCP@c,w
  3499  0186  00F0               	movwf	??_Lcd_CharCP
  3500  0187  3005               	movlw	5
  3501  0188                     u2745:	
  3502  0188  1003               	clrc
  3503  0189  0CF0               	rrf	??_Lcd_CharCP,f
  3504  018A  3EFF               	addlw	-1
  3505  018B  1D03               	skipz
  3506  018C  2988               	goto	u2745
  3507  018D  1C70               	btfss	??_Lcd_CharCP,0
  3508  018E  2993               	goto	u2750
  3509  018F  1283               	bcf	3,5	;RP0=0, select bank0
  3510  0190  1303               	bcf	3,6	;RP1=0, select bank0
  3511  0191  1585               	bsf	5,3	;volatile
  3512  0192  2996               	goto	u2764
  3513  0193                     u2750:	
  3514  0193  1283               	bcf	3,5	;RP0=0, select bank0
  3515  0194  1303               	bcf	3,6	;RP1=0, select bank0
  3516  0195  1185               	bcf	5,3	;volatile
  3517  0196                     u2764:	
  3518  0196  0871               	movf	Lcd_CharCP@c,w
  3519  0197  00F0               	movwf	??_Lcd_CharCP
  3520  0198  3004               	movlw	4
  3521  0199                     u2775:	
  3522  0199  1003               	clrc
  3523  019A  0CF0               	rrf	??_Lcd_CharCP,f
  3524  019B  3EFF               	addlw	-1
  3525  019C  1D03               	skipz
  3526  019D  2999               	goto	u2775
  3527  019E  1C70               	btfss	??_Lcd_CharCP,0
  3528  019F  29A4               	goto	u2780
  3529  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  3530  01A1  1303               	bcf	3,6	;RP1=0, select bank0
  3531  01A2  1505               	bsf	5,2	;volatile
  3532  01A3  29A7               	goto	l2528
  3533  01A4                     u2780:	
  3534  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  3535  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  3536  01A6  1105               	bcf	5,2	;volatile
  3537  01A7                     l2528:	
  3538                           
  3539                           ;HD44780.c: 120: _delay(10);
  3540  01A7  3003               	movlw	3
  3541  01A8  00F0               	movwf	??_Lcd_CharCP
  3542  01A9                     u4147:	
  3543  01A9  0BF0               	decfsz	??_Lcd_CharCP,f
  3544  01AA  29A9               	goto	u4147
  3545                           
  3546                           ;HD44780.c: 121: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  3547  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3548  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3549  01AD  1485               	bsf	5,1	;volatile
  3550  01AE  22E6  120A  118A   	fcall	_Lcd_Delay5us
  3551  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  3552  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  3553  01B3  1085               	bcf	5,1	;volatile
  3554                           
  3555                           ;HD44780.c: 122: RA5 = (c & 0b00001000)>>3; RA4 = (c & 0b00000100)>>2;
  3556  01B4  23F5  120A  118A   	fcall	PL34	;call to abstracted procedure
  3557  01B7  1003               	clrc
  3558  01B8  0CF0               	rrf	??_Lcd_CharCP,f
  3559  01B9  1C70               	btfss	??_Lcd_CharCP,0
  3560  01BA  29BF               	goto	u2800
  3561  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  3562  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  3563  01BD  1685               	bsf	5,5	;volatile
  3564  01BE  29C2               	goto	l2538
  3565  01BF                     u2800:	
  3566  01BF  1283               	bcf	3,5	;RP0=0, select bank0
  3567  01C0  1303               	bcf	3,6	;RP1=0, select bank0
  3568  01C1  1285               	bcf	5,5	;volatile
  3569  01C2                     l2538:	
  3570  01C2  23F5  120A  118A   	fcall	PL34	;call to abstracted procedure
  3571  01C5  1C70               	btfss	??_Lcd_CharCP,0
  3572  01C6  29CB               	goto	u2820
  3573  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  3574  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  3575  01C9  1605               	bsf	5,4	;volatile
  3576  01CA  29CE               	goto	l2540
  3577  01CB                     u2820:	
  3578  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  3579  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  3580  01CD  1205               	bcf	5,4	;volatile
  3581  01CE                     l2540:	
  3582                           
  3583                           ;HD44780.c: 123: RA3 = (c & 0b00000010)>>1; RA2 = (c & 0b00000001);
  3584  01CE  0871               	movf	Lcd_CharCP@c,w
  3585  01CF  00F0               	movwf	??_Lcd_CharCP
  3586  01D0  1003               	clrc
  3587  01D1  0CF0               	rrf	??_Lcd_CharCP,f
  3588  01D2  1C70               	btfss	??_Lcd_CharCP,0
  3589  01D3  29D8               	goto	u2840
  3590  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  3591  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  3592  01D6  1585               	bsf	5,3	;volatile
  3593  01D7  29DB               	goto	l2542
  3594  01D8                     u2840:	
  3595  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  3596  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  3597  01DA  1185               	bcf	5,3	;volatile
  3598  01DB                     l2542:	
  3599  01DB  1C71               	btfss	Lcd_CharCP@c,0
  3600  01DC  29E1               	goto	u2860
  3601  01DD  1283               	bcf	3,5	;RP0=0, select bank0
  3602  01DE  1303               	bcf	3,6	;RP1=0, select bank0
  3603  01DF  1505               	bsf	5,2	;volatile
  3604  01E0  29E4               	goto	l2544
  3605  01E1                     u2860:	
  3606  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  3607  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  3608  01E3  1105               	bcf	5,2	;volatile
  3609  01E4                     l2544:	
  3610                           
  3611                           ;HD44780.c: 124: _delay(10);
  3612  01E4  3003               	movlw	3
  3613  01E5  00F0               	movwf	??_Lcd_CharCP
  3614  01E6                     u4157:	
  3615  01E6  0BF0               	decfsz	??_Lcd_CharCP,f
  3616  01E7  29E6               	goto	u4157
  3617                           
  3618                           ;HD44780.c: 125: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  3619  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  3620  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  3621  01EA  1485               	bsf	5,1	;volatile
  3622  01EB  22E6  120A  118A   	fcall	_Lcd_Delay5us
  3623  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  3624  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  3625  01F0  1085               	bcf	5,1	;volatile
  3626                           
  3627                           ;HD44780.c: 126: Lcd_Delay5us();
  3628  01F1  2AE6               	ljmp	l2344
  3629  01F2                     __end_of_Lcd_CharCP:	
  3630  01F2                     __ptext35:	
  3631 ;; *************** function _Lcd_Init *****************
  3632 ;; Defined at:
  3633 ;;		line 17 in file "libs/HD44780.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;  data            1    2[COMMON] unsigned char 
  3638 ;; Return value:  Size  Location     Type
  3639 ;;                  1    wreg      void 
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0, pclath, cstack
  3642 ;; Tracked objects:
  3643 ;;		On entry : B00/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3647 ;;      Params:         0       0       0       0       0       0
  3648 ;;      Locals:         1       0       0       0       0       0
  3649 ;;      Temps:          0       0       0       0       0       0
  3650 ;;      Totals:         1       0       0       0       0       0
  3651 ;;Total ram usage:        1 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    2
  3654 ;; This function calls:
  3655 ;;		_Lcd_Command
  3656 ;;		_Lcd_Delay5500us
  3657 ;;		_Lcd_Delay5us
  3658 ;; This function is called by:
  3659 ;;		_main
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           
  3664                           ;psect for function _Lcd_Init
  3665  01F2                     _Lcd_Init:	
  3666                           
  3667                           ;HD44780.c: 19: ANSEL = 0x00;
  3668                           
  3669                           ;incstack = 0
  3670                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3671  01F2  1683               	bsf	3,5	;RP0=1, select bank3
  3672  01F3  1703               	bsf	3,6	;RP1=1, select bank3
  3673  01F4  0188               	clrf	8	;volatile
  3674                           
  3675                           ;HD44780.c: 20: ANSELH = 0x00;
  3676  01F5  0189               	clrf	9	;volatile
  3677                           
  3678                           ;HD44780.c: 23: unsigned char data;
  3679                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  3680  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  3681  01F7  23EE  120A  118A   	fcall	PL32	;call to abstracted procedure
  3682                           
  3683                           ;HD44780.c: 25: RA5 = 0; RA4 = 0; RA3 = 0; RA2 = 0; RA1 = 0; RA0 = 0;
  3684  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  3685  01FB  23EE  120A  118A   	fcall	PL32	;call to abstracted procedure
  3686                           
  3687                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  3688  01FE  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3689  0201  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3690  0204  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3691                           
  3692                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  3693  0207  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3694  020A  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3695  020D  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3696                           
  3697                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  3698  0210  01F2               	clrf	Lcd_Init@data
  3699  0211  0AF2               	incf	Lcd_Init@data,f
  3700  0212                     l63:	
  3701                           
  3702                           ;HD44780.c: 29: {
  3703                           ;HD44780.c: 30: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  3704  0212  23DC  120A  118A   	fcall	PL24	;call to abstracted procedure
  3705                           
  3706                           ;HD44780.c: 31: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 1; RA0 = 0;
  3707  0215  1285               	bcf	5,5	;volatile
  3708  0216  1205               	bcf	5,4	;volatile
  3709  0217  1585               	bsf	5,3	;volatile
  3710  0218  1505               	bsf	5,2	;volatile
  3711  0219  1485               	bsf	5,1	;volatile
  3712  021A  1005               	bcf	5,0	;volatile
  3713                           
  3714                           ;HD44780.c: 32: Lcd_Delay5us();
  3715  021B  22E6  120A  118A   	fcall	_Lcd_Delay5us
  3716                           
  3717                           ;HD44780.c: 33: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  3718  021E  23DC  120A  118A   	fcall	PL24	;call to abstracted procedure
  3719                           
  3720                           ;HD44780.c: 34: Lcd_Delay5500us();
  3721  0221  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3722  0224  3004               	movlw	4
  3723  0225  0AF2               	incf	Lcd_Init@data,f
  3724  0226  0272               	subwf	Lcd_Init@data,w
  3725  0227  1C03               	skipc
  3726  0228  2A12               	goto	l63
  3727                           
  3728                           ;HD44780.c: 35: }
  3729                           ;HD44780.c: 36: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  3730  0229  23E5  120A  118A   	fcall	PL26	;call to abstracted procedure
  3731                           
  3732                           ;HD44780.c: 37: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 1; RA0 = 0;
  3733  022C  1285               	bcf	5,5	;volatile
  3734  022D  1205               	bcf	5,4	;volatile
  3735  022E  1585               	bsf	5,3	;volatile
  3736  022F  1105               	bcf	5,2	;volatile
  3737  0230  1485               	bsf	5,1	;volatile
  3738  0231  1005               	bcf	5,0	;volatile
  3739                           
  3740                           ;HD44780.c: 38: Lcd_Delay5us();
  3741  0232  22E6  120A  118A   	fcall	_Lcd_Delay5us
  3742                           
  3743                           ;HD44780.c: 39: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  3744  0235  23E5  120A  118A   	fcall	PL26	;call to abstracted procedure
  3745                           
  3746                           ;HD44780.c: 40: Lcd_Delay5500us();
  3747  0238  2249  120A  118A   	fcall	_Lcd_Delay5500us
  3748  023B  3028               	movlw	40
  3749  023C  2252  120A  118A   	fcall	_Lcd_Command
  3750  023F  3010               	movlw	16
  3751  0240  2252  120A  118A   	fcall	_Lcd_Command
  3752  0243  3001               	movlw	1
  3753  0244  2252  120A  118A   	fcall	_Lcd_Command
  3754  0247  300F               	movlw	15
  3755  0248  2A52               	ljmp	_Lcd_Command
  3756  0249                     __end_of_Lcd_Init:	
  3757  0249                     __ptext36:	
  3758 ;; *************** function _Lcd_Delay5500us *****************
  3759 ;; Defined at:
  3760 ;;		line 153 in file "libs/HD44780.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3774 ;;      Params:         0       0       0       0       0       0
  3775 ;;      Locals:         0       0       0       0       0       0
  3776 ;;      Temps:          2       0       0       0       0       0
  3777 ;;      Totals:         2       0       0       0       0       0
  3778 ;;Total ram usage:        2 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_Lcd_Init
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           
  3788                           ;psect for function _Lcd_Delay5500us
  3789  0249                     _Lcd_Delay5500us:	
  3790                           
  3791                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _Lcd_Delay5500us: [wreg]
  3795  0249  3008               	movlw	8
  3796  024A  00F1               	movwf	??_Lcd_Delay5500us+1
  3797  024B  3023               	movlw	35
  3798  024C  00F0               	movwf	??_Lcd_Delay5500us
  3799  024D                     u4167:	
  3800  024D  0BF0               	decfsz	??_Lcd_Delay5500us,f
  3801  024E  2A4D               	goto	u4167
  3802  024F  0BF1               	decfsz	??_Lcd_Delay5500us+1,f
  3803  0250  2A4D               	goto	u4167
  3804  0251  0008               	return
  3805  0252                     __end_of_Lcd_Delay5500us:	
  3806  0252                     __ptext37:	
  3807 ;; *************** function _Lcd_Command *****************
  3808 ;; Defined at:
  3809 ;;		line 133 in file "libs/HD44780.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;  command         1    wreg     unsigned char 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  command         1    1[COMMON] unsigned char 
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  1    wreg      void 
  3816 ;; Registers used:
  3817 ;;		wreg, status,2, status,0, pclath, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/800
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3823 ;;      Params:         0       0       0       0       0       0
  3824 ;;      Locals:         1       0       0       0       0       0
  3825 ;;      Temps:          1       0       0       0       0       0
  3826 ;;      Totals:         2       0       0       0       0       0
  3827 ;;Total ram usage:        2 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    1
  3830 ;; This function calls:
  3831 ;;		_Lcd_Delay5us
  3832 ;; This function is called by:
  3833 ;;		_Lcd_Init
  3834 ;;		_Lcd_Text
  3835 ;;		_Lcd_WriteChar
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           
  3840                           ;psect for function _Lcd_Command
  3841  0252                     _Lcd_Command:	
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+pclath+cstack]
  3845                           ;Lcd_Command@command stored from wreg
  3846  0252  00F1               	movwf	Lcd_Command@command
  3847                           
  3848                           ;HD44780.c: 134: RA1 = 0; RA0 = 0;
  3849  0253  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0254  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0255  1085               	bcf	5,1	;volatile
  3852  0256  1005               	bcf	5,0	;volatile
  3853                           
  3854                           ;HD44780.c: 135: RA5 = (command & 0b10000000)>>7; RA4 = (command & 0b01000000)>>6;
  3855  0257  0871               	movf	Lcd_Command@command,w
  3856  0258  00F0               	movwf	??_Lcd_Command
  3857  0259  3007               	movlw	7
  3858  025A                     u2485:	
  3859  025A  1003               	clrc
  3860  025B  0CF0               	rrf	??_Lcd_Command,f
  3861  025C  3EFF               	addlw	-1
  3862  025D  1D03               	skipz
  3863  025E  2A5A               	goto	u2485
  3864  025F  1C70               	btfss	??_Lcd_Command,0
  3865  0260  2A65               	goto	u2490
  3866  0261  1283               	bcf	3,5	;RP0=0, select bank0
  3867  0262  1303               	bcf	3,6	;RP1=0, select bank0
  3868  0263  1685               	bsf	5,5	;volatile
  3869  0264  2A68               	goto	u2504
  3870  0265                     u2490:	
  3871  0265  1283               	bcf	3,5	;RP0=0, select bank0
  3872  0266  1303               	bcf	3,6	;RP1=0, select bank0
  3873  0267  1285               	bcf	5,5	;volatile
  3874  0268                     u2504:	
  3875  0268  0871               	movf	Lcd_Command@command,w
  3876  0269  00F0               	movwf	??_Lcd_Command
  3877  026A  3006               	movlw	6
  3878  026B                     u2515:	
  3879  026B  1003               	clrc
  3880  026C  0CF0               	rrf	??_Lcd_Command,f
  3881  026D  3EFF               	addlw	-1
  3882  026E  1D03               	skipz
  3883  026F  2A6B               	goto	u2515
  3884  0270  1C70               	btfss	??_Lcd_Command,0
  3885  0271  2A76               	goto	u2520
  3886  0272  1283               	bcf	3,5	;RP0=0, select bank0
  3887  0273  1303               	bcf	3,6	;RP1=0, select bank0
  3888  0274  1605               	bsf	5,4	;volatile
  3889  0275  2A79               	goto	u2534
  3890  0276                     u2520:	
  3891  0276  1283               	bcf	3,5	;RP0=0, select bank0
  3892  0277  1303               	bcf	3,6	;RP1=0, select bank0
  3893  0278  1205               	bcf	5,4	;volatile
  3894  0279                     u2534:	
  3895                           
  3896                           ;HD44780.c: 136: RA3 = (command & 0b00100000)>>5; RA2 = (command & 0b00010000)>>4;
  3897  0279  0871               	movf	Lcd_Command@command,w
  3898  027A  00F0               	movwf	??_Lcd_Command
  3899  027B  3005               	movlw	5
  3900  027C                     u2545:	
  3901  027C  1003               	clrc
  3902  027D  0CF0               	rrf	??_Lcd_Command,f
  3903  027E  3EFF               	addlw	-1
  3904  027F  1D03               	skipz
  3905  0280  2A7C               	goto	u2545
  3906  0281  1C70               	btfss	??_Lcd_Command,0
  3907  0282  2A87               	goto	u2550
  3908  0283  1283               	bcf	3,5	;RP0=0, select bank0
  3909  0284  1303               	bcf	3,6	;RP1=0, select bank0
  3910  0285  1585               	bsf	5,3	;volatile
  3911  0286  2A8A               	goto	u2564
  3912  0287                     u2550:	
  3913  0287  1283               	bcf	3,5	;RP0=0, select bank0
  3914  0288  1303               	bcf	3,6	;RP1=0, select bank0
  3915  0289  1185               	bcf	5,3	;volatile
  3916  028A                     u2564:	
  3917  028A  0871               	movf	Lcd_Command@command,w
  3918  028B  00F0               	movwf	??_Lcd_Command
  3919  028C  3004               	movlw	4
  3920  028D                     u2575:	
  3921  028D  1003               	clrc
  3922  028E  0CF0               	rrf	??_Lcd_Command,f
  3923  028F  3EFF               	addlw	-1
  3924  0290  1D03               	skipz
  3925  0291  2A8D               	goto	u2575
  3926  0292  1C70               	btfss	??_Lcd_Command,0
  3927  0293  2A98               	goto	u2580
  3928  0294  1283               	bcf	3,5	;RP0=0, select bank0
  3929  0295  1303               	bcf	3,6	;RP1=0, select bank0
  3930  0296  1505               	bsf	5,2	;volatile
  3931  0297  2A9B               	goto	l2502
  3932  0298                     u2580:	
  3933  0298  1283               	bcf	3,5	;RP0=0, select bank0
  3934  0299  1303               	bcf	3,6	;RP1=0, select bank0
  3935  029A  1105               	bcf	5,2	;volatile
  3936  029B                     l2502:	
  3937                           
  3938                           ;HD44780.c: 137: _delay(10);
  3939  029B  3003               	movlw	3
  3940  029C  00F0               	movwf	??_Lcd_Command
  3941  029D                     u4177:	
  3942  029D  0BF0               	decfsz	??_Lcd_Command,f
  3943  029E  2A9D               	goto	u4177
  3944                           
  3945                           ;HD44780.c: 138: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  3946  029F  1283               	bcf	3,5	;RP0=0, select bank0
  3947  02A0  1303               	bcf	3,6	;RP1=0, select bank0
  3948  02A1  1485               	bsf	5,1	;volatile
  3949  02A2  22E6  120A  118A   	fcall	_Lcd_Delay5us
  3950  02A5  1283               	bcf	3,5	;RP0=0, select bank0
  3951  02A6  1303               	bcf	3,6	;RP1=0, select bank0
  3952  02A7  1085               	bcf	5,1	;volatile
  3953                           
  3954                           ;HD44780.c: 139: RA5 = (command & 0b00001000)>>3; RA4 = (command & 0b00000100)>>2;
  3955  02A8  23FC  120A  118A   	fcall	PL36	;call to abstracted procedure
  3956  02AB  1003               	clrc
  3957  02AC  0CF0               	rrf	??_Lcd_Command,f
  3958  02AD  1C70               	btfss	??_Lcd_Command,0
  3959  02AE  2AB3               	goto	u2600
  3960  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  3961  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  3962  02B1  1685               	bsf	5,5	;volatile
  3963  02B2  2AB6               	goto	l2512
  3964  02B3                     u2600:	
  3965  02B3  1283               	bcf	3,5	;RP0=0, select bank0
  3966  02B4  1303               	bcf	3,6	;RP1=0, select bank0
  3967  02B5  1285               	bcf	5,5	;volatile
  3968  02B6                     l2512:	
  3969  02B6  23FC  120A  118A   	fcall	PL36	;call to abstracted procedure
  3970  02B9  1C70               	btfss	??_Lcd_Command,0
  3971  02BA  2ABF               	goto	u2620
  3972  02BB  1283               	bcf	3,5	;RP0=0, select bank0
  3973  02BC  1303               	bcf	3,6	;RP1=0, select bank0
  3974  02BD  1605               	bsf	5,4	;volatile
  3975  02BE  2AC2               	goto	l2514
  3976  02BF                     u2620:	
  3977  02BF  1283               	bcf	3,5	;RP0=0, select bank0
  3978  02C0  1303               	bcf	3,6	;RP1=0, select bank0
  3979  02C1  1205               	bcf	5,4	;volatile
  3980  02C2                     l2514:	
  3981                           
  3982                           ;HD44780.c: 140: RA3 = (command & 0b00000010)>>1; RA2 = (command & 0b00000001);
  3983  02C2  0871               	movf	Lcd_Command@command,w
  3984  02C3  00F0               	movwf	??_Lcd_Command
  3985  02C4  1003               	clrc
  3986  02C5  0CF0               	rrf	??_Lcd_Command,f
  3987  02C6  1C70               	btfss	??_Lcd_Command,0
  3988  02C7  2ACC               	goto	u2640
  3989  02C8  1283               	bcf	3,5	;RP0=0, select bank0
  3990  02C9  1303               	bcf	3,6	;RP1=0, select bank0
  3991  02CA  1585               	bsf	5,3	;volatile
  3992  02CB  2ACF               	goto	l2516
  3993  02CC                     u2640:	
  3994  02CC  1283               	bcf	3,5	;RP0=0, select bank0
  3995  02CD  1303               	bcf	3,6	;RP1=0, select bank0
  3996  02CE  1185               	bcf	5,3	;volatile
  3997  02CF                     l2516:	
  3998  02CF  1C71               	btfss	Lcd_Command@command,0
  3999  02D0  2AD5               	goto	u2660
  4000  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  4001  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  4002  02D3  1505               	bsf	5,2	;volatile
  4003  02D4  2AD8               	goto	l2518
  4004  02D5                     u2660:	
  4005  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  4006  02D6  1303               	bcf	3,6	;RP1=0, select bank0
  4007  02D7  1105               	bcf	5,2	;volatile
  4008  02D8                     l2518:	
  4009                           
  4010                           ;HD44780.c: 141: _delay(10);
  4011  02D8  3003               	movlw	3
  4012  02D9  00F0               	movwf	??_Lcd_Command
  4013  02DA                     u4187:	
  4014  02DA  0BF0               	decfsz	??_Lcd_Command,f
  4015  02DB  2ADA               	goto	u4187
  4016                           
  4017                           ;HD44780.c: 142: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4018  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  4019  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  4020  02DE  1485               	bsf	5,1	;volatile
  4021  02DF  22E6  120A  118A   	fcall	_Lcd_Delay5us
  4022  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  4023  02E3  1303               	bcf	3,6	;RP1=0, select bank0
  4024  02E4  1085               	bcf	5,1	;volatile
  4025                           
  4026                           ;HD44780.c: 144: Lcd_Delay5us();
  4027  02E5  2AE6               	ljmp	l2344
  4028  02E6                     __end_of_Lcd_Command:	
  4029  02E6                     __ptext38:	
  4030 ;; *************** function _Lcd_Delay5us *****************
  4031 ;; Defined at:
  4032 ;;		line 150 in file "libs/HD44780.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		None
  4041 ;; Tracked objects:
  4042 ;;		On entry : 300/800
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4046 ;;      Params:         0       0       0       0       0       0
  4047 ;;      Locals:         0       0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0
  4049 ;;      Totals:         0       0       0       0       0       0
  4050 ;;Total ram usage:        0 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_Lcd_Init
  4056 ;;		_Lcd_CharCP
  4057 ;;		_Lcd_Command
  4058 ;; This function uses a non-reentrant model
  4059 ;;
  4060                           
  4061                           
  4062                           ;psect for function _Lcd_Delay5us
  4063  02E6                     _Lcd_Delay5us:	
  4064  02E6                     l2344:	
  4065                           ;incstack = 0
  4066                           ; Regs used in _Lcd_Delay5us: []
  4067                           
  4068                           
  4069                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4070  02E6  2AE7               	nop2	;2 cycle nop
  4071  02E7  2AE8               	nop2	;2 cycle nop
  4072  02E8  0000               	nop
  4073  02E9  0008               	return
  4074  02EA                     __end_of_Lcd_Delay5us:	
  4075  02EA                     __ptext21:	
  4076 ;; *************** function _ReadVars *****************
  4077 ;; Defined at:
  4078 ;;		line 7 in file "libs/eeprom.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;		None
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  i               1   19[BANK0 ] unsigned char 
  4083 ;;  j               1   18[BANK0 ] unsigned char 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 300/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4093 ;;      Params:         0       0       0       0       0       0
  4094 ;;      Locals:         0       2       0       0       0       0
  4095 ;;      Temps:          0      15       0       0       0       0
  4096 ;;      Totals:         0      17       0       0       0       0
  4097 ;;Total ram usage:       17 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    1
  4100 ;; This function calls:
  4101 ;;		___bmul
  4102 ;;		_eeprom_read
  4103 ;; This function is called by:
  4104 ;;		_main
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           
  4109                           ;psect for function _ReadVars
  4110  02EA                     _ReadVars:	
  4111                           
  4112                           ;eeprom.c: 8: C_D = eeprom_read(0xDE);
  4113                           
  4114                           ;incstack = 0
  4115                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4116  02EA  30DE               	movlw	222
  4117  02EB  23A4  120A  118A   	fcall	_eeprom_read
  4118  02EE  00E9               	movwf	_C_D^(0+256)	;volatile
  4119                           
  4120                           ;eeprom.c: 9: UINT8 i, j;
  4121                           ;eeprom.c: 10: for (i = 0; i<3; i++) {
  4122  02EF  1303               	bcf	3,6	;RP1=0, select bank0
  4123  02F0  01BF               	clrf	ReadVars@i
  4124  02F1                     l3086:	
  4125  02F1  3003               	movlw	3
  4126  02F2  023F               	subwf	ReadVars@i,w
  4127  02F3  1803               	btfsc	3,0
  4128  02F4  2B66               	goto	l3098
  4129                           
  4130                           ;eeprom.c: 11: C[i] = (uint32_t) eeprom_read(0xD2 + 3*i)*256*256
  4131                           ;eeprom.c: 12: + (uint16_t) eeprom_read(0xD2 + 1 + 3*i)*256
  4132                           ;eeprom.c: 13: + eeprom_read(0xD2 + 2 + 3*i);
  4133  02F5  083F               	movf	ReadVars@i,w
  4134  02F6  073F               	addwf	ReadVars@i,w
  4135  02F7  073F               	addwf	ReadVars@i,w
  4136  02F8  3ED4               	addlw	212
  4137  02F9  23A4  120A  118A   	fcall	_eeprom_read
  4138  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  4139  02FD  00AF               	movwf	??_ReadVars
  4140  02FE  01B0               	clrf	??_ReadVars+1
  4141  02FF  01B1               	clrf	??_ReadVars+2
  4142  0300  01B2               	clrf	??_ReadVars+3
  4143  0301  083F               	movf	ReadVars@i,w
  4144  0302  073F               	addwf	ReadVars@i,w
  4145  0303  073F               	addwf	ReadVars@i,w
  4146  0304  3ED3               	addlw	211
  4147  0305  23A4  120A  118A   	fcall	_eeprom_read
  4148  0308  1303               	bcf	3,6	;RP1=0, select bank0
  4149  0309  00B3               	movwf	??_ReadVars+4
  4150  030A  01B4               	clrf	??_ReadVars+5
  4151  030B  00B4               	movwf	??_ReadVars+5
  4152  030C  01B3               	clrf	??_ReadVars+4
  4153  030D  0833               	movf	??_ReadVars+4,w
  4154  030E  00B5               	movwf	??_ReadVars+6
  4155  030F  0834               	movf	??_ReadVars+5,w
  4156  0310  00B6               	movwf	??_ReadVars+7
  4157  0311  01B7               	clrf	??_ReadVars+8
  4158  0312  01B8               	clrf	??_ReadVars+9
  4159  0313  083F               	movf	ReadVars@i,w
  4160  0314  073F               	addwf	ReadVars@i,w
  4161  0315  073F               	addwf	ReadVars@i,w
  4162  0316  3ED2               	addlw	210
  4163  0317  23A4  120A  118A   	fcall	_eeprom_read
  4164  031A  1303               	bcf	3,6	;RP1=0, select bank0
  4165  031B  00B9               	movwf	??_ReadVars+10
  4166  031C  01BA               	clrf	??_ReadVars+11
  4167  031D  01BB               	clrf	??_ReadVars+12
  4168  031E  01BC               	clrf	??_ReadVars+13
  4169  031F  083A               	movf	??_ReadVars+11,w
  4170  0320  00BC               	movwf	??_ReadVars+13
  4171  0321  0839               	movf	??_ReadVars+10,w
  4172  0322  00BB               	movwf	??_ReadVars+12
  4173  0323  01BA               	clrf	??_ReadVars+11
  4174  0324  01B9               	clrf	??_ReadVars+10
  4175  0325  0839               	movf	??_ReadVars+10,w
  4176  0326  07B5               	addwf	??_ReadVars+6,f
  4177  0327  083A               	movf	??_ReadVars+11,w
  4178  0328  1803               	skipnc
  4179  0329  0F3A               	incfsz	??_ReadVars+11,w
  4180  032A  07B6               	addwf	??_ReadVars+7,f
  4181  032B  083B               	movf	??_ReadVars+12,w
  4182  032C  1803               	skipnc
  4183  032D  0F3B               	incfsz	??_ReadVars+12,w
  4184  032E  07B7               	addwf	??_ReadVars+8,f
  4185  032F  083C               	movf	??_ReadVars+13,w
  4186  0330  1803               	skipnc
  4187  0331  0A3C               	incf	??_ReadVars+13,w
  4188  0332  07B8               	addwf	??_ReadVars+9,f
  4189  0333  0835               	movf	??_ReadVars+6,w
  4190  0334  07AF               	addwf	??_ReadVars,f
  4191  0335  0836               	movf	??_ReadVars+7,w
  4192  0336  1803               	skipnc
  4193  0337  0F36               	incfsz	??_ReadVars+7,w
  4194  0338  07B0               	addwf	??_ReadVars+1,f
  4195  0339  0837               	movf	??_ReadVars+8,w
  4196  033A  1803               	skipnc
  4197  033B  0F37               	incfsz	??_ReadVars+8,w
  4198  033C  07B1               	addwf	??_ReadVars+2,f
  4199  033D  0838               	movf	??_ReadVars+9,w
  4200  033E  1803               	skipnc
  4201  033F  0A38               	incf	??_ReadVars+9,w
  4202  0340  07B2               	addwf	??_ReadVars+3,f
  4203  0341  083F               	movf	ReadVars@i,w
  4204  0342  00BD               	movwf	??_ReadVars+14
  4205  0343  3001               	movlw	1
  4206  0344  1003               	clrc
  4207  0345                     L17:	
  4208  0345  0DBD               	rlf	??_ReadVars+14,f
  4209  0346  3EFF               	addlw	-1
  4210  0347  1003               	clrc
  4211  0348  1D03               	skipz
  4212  0349  2B45               	goto	L17
  4213  034A  0D3D               	rlf	??_ReadVars+14,w
  4214  034B  3E20               	addlw	32
  4215  034C  0084               	movwf	4
  4216  034D  082F               	movf	??_ReadVars,w
  4217  034E  1383               	bcf	3,7	;select IRP bank0
  4218  034F  0080               	movwf	0
  4219  0350  0A84               	incf	4,f
  4220  0351  0830               	movf	??_ReadVars+1,w
  4221  0352  0080               	movwf	0
  4222  0353  0A84               	incf	4,f
  4223  0354  0831               	movf	??_ReadVars+2,w
  4224  0355  0080               	movwf	0
  4225  0356  0A84               	incf	4,f
  4226  0357  0832               	movf	??_ReadVars+3,w
  4227  0358  0080               	movwf	0
  4228                           
  4229                           ;eeprom.c: 14: STATE_BREAKS[i] = eeprom_read(0xDB+i);
  4230  0359  083F               	movf	ReadVars@i,w
  4231  035A  3E64               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  4232  035B  0084               	movwf	4
  4233  035C  083F               	movf	ReadVars@i,w
  4234  035D  3EDB               	addlw	219
  4235  035E  23A4  120A  118A   	fcall	_eeprom_read
  4236  0361  1783               	bsf	3,7	;select IRP bank2
  4237  0362  0080               	movwf	0
  4238  0363  1303               	bcf	3,6	;RP1=0, select bank0
  4239  0364  0ABF               	incf	ReadVars@i,f
  4240  0365  2AF1               	goto	l3086
  4241  0366                     l3098:	
  4242                           
  4243                           ;eeprom.c: 15: }
  4244                           ;eeprom.c: 16: for (i = 0; i<25; i++) {
  4245  0366  01BF               	clrf	ReadVars@i
  4246  0367                     l3100:	
  4247  0367  3019               	movlw	25
  4248  0368  023F               	subwf	ReadVars@i,w
  4249  0369  1803               	btfsc	3,0
  4250  036A  0008               	return
  4251                           
  4252                           ;eeprom.c: 17: STATE_PERIODS[i] = eeprom_read(0x00
  4253                           ;eeprom.c: 18: + i*(1 + 2*3));
  4254  036B  083F               	movf	ReadVars@i,w
  4255  036C  3ECC               	addlw	204
  4256  036D  0084               	movwf	4
  4257  036E  3007               	movlw	7
  4258  036F  00AC               	movwf	___bmul@multiplicand
  4259  0370  083F               	movf	ReadVars@i,w
  4260  0371  23B9  120A  118A   	fcall	___bmul
  4261  0374  23A4  120A  118A   	fcall	_eeprom_read
  4262  0377  1783               	bsf	3,7	;select IRP bank3
  4263  0378  0080               	movwf	0
  4264                           
  4265                           ;eeprom.c: 19: for (j = 0; j<2; j++) {
  4266  0379  1303               	bcf	3,6	;RP1=0, select bank0
  4267  037A  01BE               	clrf	ReadVars@j
  4268  037B                     l3112:	
  4269                           
  4270                           ;eeprom.c: 20: STATE_1[i][j] = eeprom_read(0x00
  4271                           ;eeprom.c: 21: + i*(1 + 2*3)
  4272                           ;eeprom.c: 22: + (1 + j));
  4273  037B  083F               	movf	ReadVars@i,w
  4274  037C  00AF               	movwf	??_ReadVars
  4275  037D  30A0               	movlw	160
  4276  037E  23C7  120A  118A   	fcall	PL16	;call to abstracted procedure
  4277  0381  23B9  120A  118A   	fcall	___bmul
  4278  0384  073E               	addwf	ReadVars@j,w
  4279  0385  3E01               	addlw	1
  4280  0386  23A4  120A  118A   	fcall	_eeprom_read
  4281  0389  1383               	bcf	3,7	;select IRP bank1
  4282  038A  0080               	movwf	0
  4283                           
  4284                           ;eeprom.c: 23: STATE_2[i][j] = eeprom_read(0x00
  4285                           ;eeprom.c: 24: + i*(1 + 2*3)
  4286                           ;eeprom.c: 25: + (3 + j));
  4287  038B  1303               	bcf	3,6	;RP1=0, select bank0
  4288  038C  083F               	movf	ReadVars@i,w
  4289  038D  00AF               	movwf	??_ReadVars
  4290  038E  3010               	movlw	16
  4291  038F  23C7  120A  118A   	fcall	PL16	;call to abstracted procedure
  4292  0392  23B9  120A  118A   	fcall	___bmul
  4293  0395  073E               	addwf	ReadVars@j,w
  4294  0396  3E03               	addlw	3
  4295  0397  23A4  120A  118A   	fcall	_eeprom_read
  4296  039A  1783               	bsf	3,7	;select IRP bank2
  4297  039B  0080               	movwf	0
  4298  039C  1303               	bcf	3,6	;RP1=0, select bank0
  4299  039D  3002               	movlw	2
  4300  039E  0ABE               	incf	ReadVars@j,f
  4301  039F  023E               	subwf	ReadVars@j,w
  4302  03A0  1C03               	skipc
  4303  03A1  2B7B               	goto	l3112
  4304  03A2  0ABF               	incf	ReadVars@i,f
  4305  03A3  2B67               	goto	l3100
  4306  03A4                     __end_of_ReadVars:	
  4307  03A4                     __ptext22:	
  4308 ;; *************** function _eeprom_read *****************
  4309 ;; Defined at:
  4310 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;  addr            1    wreg     unsigned char 
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  addr            1    0[COMMON] unsigned char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  1    wreg      unsigned char 
  4317 ;; Registers used:
  4318 ;;		wreg, status,2, status,0
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 300/200
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4324 ;;      Params:         0       0       0       0       0       0
  4325 ;;      Locals:         1       0       0       0       0       0
  4326 ;;      Temps:          0       0       0       0       0       0
  4327 ;;      Totals:         1       0       0       0       0       0
  4328 ;;Total ram usage:        1 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; This function calls:
  4331 ;;		Nothing
  4332 ;; This function is called by:
  4333 ;;		_ReadVars
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           
  4338                           ;psect for function _eeprom_read
  4339  03A4                     _eeprom_read:	
  4340                           
  4341                           ;incstack = 0
  4342                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4343                           ;eeprom_read@addr stored from wreg
  4344  03A4  00F0               	movwf	eeprom_read@addr
  4345  03A5                     l678:	
  4346  03A5  0064               	clrwdt	;# 
  4347  03A6  1683               	bsf	3,5	;RP0=1, select bank3
  4348  03A7  1703               	bsf	3,6	;RP1=1, select bank3
  4349  03A8  188C               	btfsc	12,1	;volsfr
  4350  03A9  2BA5               	goto	l678
  4351  03AA  0870               	movf	eeprom_read@addr,w
  4352  03AB  1283               	bcf	3,5	;RP0=0, select bank2
  4353  03AC  008D               	movwf	13	;volatile
  4354  03AD  303F               	movlw	63
  4355  03AE  1683               	bsf	3,5	;RP0=1, select bank3
  4356  03AF  058C               	andwf	12,f	;volsfr
  4357  03B0  140C               	bsf	12,0	;volsfr
  4358  03B1  1003               	clrc
  4359  03B2  180C               	btfsc	12,0	;volsfr
  4360  03B3  1403               	setc
  4361  03B4  1803               	skipnc
  4362  03B5  3001               	movlw	1
  4363  03B6  1283               	bcf	3,5	;RP0=0, select bank2
  4364  03B7  080C               	movf	12,w	;volatile
  4365  03B8  0008               	return
  4366  03B9                     __end_of_eeprom_read:	
  4367  03B9                     __ptext23:	
  4368 ;; *************** function ___bmul *****************
  4369 ;; Defined at:
  4370 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4371 ;; Parameters:    Size  Location     Type
  4372 ;;  multiplier      1    wreg     unsigned char 
  4373 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  multiplier      1    2[BANK0 ] unsigned char 
  4376 ;;  product         1    1[BANK0 ] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      unsigned char 
  4379 ;; Registers used:
  4380 ;;		wreg, status,2, status,0
  4381 ;; Tracked objects:
  4382 ;;		On entry : 300/800
  4383 ;;		On exit  : 300/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4386 ;;      Params:         0       1       0       0       0       0
  4387 ;;      Locals:         0       2       0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0       0
  4389 ;;      Totals:         0       3       0       0       0       0
  4390 ;;Total ram usage:        3 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_WriteLongInt
  4396 ;;		_ReadVars
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function ___bmul
  4402  03B9                     ___bmul:	
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4406                           ;___bmul@multiplier stored from wreg
  4407  03B9  00AE               	movwf	___bmul@multiplier
  4408  03BA  01AD               	clrf	___bmul@product
  4409  03BB                     l2778:	
  4410  03BB  082C               	movf	___bmul@multiplicand,w
  4411  03BC  182E               	btfsc	___bmul@multiplier,0
  4412  03BD  07AD               	addwf	___bmul@product,f
  4413  03BE  1003               	clrc
  4414  03BF  0DAC               	rlf	___bmul@multiplicand,f
  4415  03C0  1003               	clrc
  4416  03C1  0CAE               	rrf	___bmul@multiplier,f
  4417  03C2  082E               	movf	___bmul@multiplier,w
  4418  03C3  1D03               	btfss	3,2
  4419  03C4  2BBB               	goto	l2778
  4420  03C5  082D               	movf	___bmul@product,w
  4421  03C6  0008               	return
  4422  03C7                     __end_of___bmul:	
  4423  03C7                     PL16:	
  4424  03C7  1003               	clrc
  4425  03C8  0DAF               	rlf	??_ReadVars,f
  4426  03C9  072F               	addwf	??_ReadVars,w
  4427  03CA  00B0               	movwf	??_ReadVars+1
  4428  03CB  083E               	movf	ReadVars@j,w
  4429  03CC  0730               	addwf	??_ReadVars+1,w
  4430  03CD  00B1               	movwf	??_ReadVars+2
  4431  03CE  0084               	movwf	4
  4432  03CF  3007               	movlw	7
  4433  03D0  00AC               	movwf	___bmul@multiplicand
  4434  03D1  083F               	movf	ReadVars@i,w
  4435  03D2  0008               	return
  4436  03D3                     __end_ofPL16:	
  4437  03D3                     PL20:	
  4438  03D3  0837               	movf	WriteLongInt@Val+3,w
  4439  03D4  00F7               	movwf	___aldiv@dividend+3
  4440  03D5  0836               	movf	WriteLongInt@Val+2,w
  4441  03D6  00F6               	movwf	___aldiv@dividend+2
  4442  03D7  0835               	movf	WriteLongInt@Val+1,w
  4443  03D8  00F5               	movwf	___aldiv@dividend+1
  4444  03D9  0834               	movf	WriteLongInt@Val,w
  4445  03DA  00F4               	movwf	___aldiv@dividend
  4446  03DB  0008               	return
  4447  03DC                     __end_ofPL20:	
  4448  03DC                     PL24:	
  4449  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  4450  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  4451  03DE  1285               	bcf	5,5	;volatile
  4452  03DF  1205               	bcf	5,4	;volatile
  4453  03E0  1585               	bsf	5,3	;volatile
  4454  03E1  1505               	bsf	5,2	;volatile
  4455  03E2  1085               	bcf	5,1	;volatile
  4456  03E3  1005               	bcf	5,0	;volatile
  4457  03E4  0008               	return
  4458  03E5                     __end_ofPL24:	
  4459  03E5                     PL26:	
  4460  03E5  1283               	bcf	3,5	;RP0=0, select bank0
  4461  03E6  1303               	bcf	3,6	;RP1=0, select bank0
  4462  03E7  1285               	bcf	5,5	;volatile
  4463  03E8  1205               	bcf	5,4	;volatile
  4464  03E9  1585               	bsf	5,3	;volatile
  4465  03EA  1105               	bcf	5,2	;volatile
  4466  03EB  1085               	bcf	5,1	;volatile
  4467  03EC  1005               	bcf	5,0	;volatile
  4468  03ED  0008               	return
  4469  03EE                     __end_ofPL26:	
  4470  03EE                     PL32:	
  4471  03EE  1285               	bcf	5,5	;volatile
  4472  03EF  1205               	bcf	5,4	;volatile
  4473  03F0  1185               	bcf	5,3	;volatile
  4474  03F1  1105               	bcf	5,2	;volatile
  4475  03F2  1085               	bcf	5,1	;volatile
  4476  03F3  1005               	bcf	5,0	;volatile
  4477  03F4  0008               	return
  4478  03F5                     __end_ofPL32:	
  4479  03F5                     PL34:	
  4480  03F5  0871               	movf	Lcd_CharCP@c,w
  4481  03F6  00F0               	movwf	??_Lcd_CharCP
  4482  03F7  1003               	clrc
  4483  03F8  0CF0               	rrf	??_Lcd_CharCP,f
  4484  03F9  1003               	clrc
  4485  03FA  0CF0               	rrf	??_Lcd_CharCP,f
  4486  03FB  0008               	return
  4487  03FC                     __end_ofPL34:	
  4488  03FC                     PL36:	
  4489  03FC  0871               	movf	Lcd_Command@command,w
  4490  03FD  00F0               	movwf	??_Lcd_Command
  4491  03FE  1003               	clrc
  4492  03FF  0CF0               	rrf	??_Lcd_Command,f
  4493  0400  1003               	clrc
  4494  0401  0CF0               	rrf	??_Lcd_Command,f
  4495  0402  0008               	return
  4496  0403                     __end_ofPL36:	
  4497                           
  4498                           	psect	text5
  4499  097B                     __ptext5:	
  4500 ;; *************** function _UART_ReadValidTimeFromGPS_TO *****************
  4501 ;; Defined at:
  4502 ;;		line 114 in file "libs/gsk_usart.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;  Output          1    wreg     PTR unsigned char 
  4505 ;;		 -> main@GPSData(6), 
  4506 ;;  TimeOut         1    8[COMMON] unsigned char 
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;  Output          1    9[COMMON] PTR unsigned char 
  4509 ;;		 -> main@GPSData(6), 
  4510 ;; Return value:  Size  Location     Type
  4511 ;;                  1    wreg      unsigned char 
  4512 ;; Registers used:
  4513 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4514 ;; Tracked objects:
  4515 ;;		On entry : 300/A00
  4516 ;;		On exit  : B00/800
  4517 ;;		Unchanged: 0/0
  4518 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4519 ;;      Params:         1       0       0       0       0       0
  4520 ;;      Locals:         1       0       0       0       0       0
  4521 ;;      Temps:          0       0       0       0       0       0
  4522 ;;      Totals:         2       0       0       0       0       0
  4523 ;;Total ram usage:        2 bytes
  4524 ;; Hardware stack levels used:    1
  4525 ;; Hardware stack levels required when called:    2
  4526 ;; This function calls:
  4527 ;;		_IsValidGPS
  4528 ;;		_UART_ReadFromGPS_TO
  4529 ;; This function is called by:
  4530 ;;		_main
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           
  4535                           ;psect for function _UART_ReadValidTimeFromGPS_TO
  4536  097B                     _UART_ReadValidTimeFromGPS_TO:	
  4537                           
  4538                           ;incstack = 0
  4539                           ; Regs used in _UART_ReadValidTimeFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstac
      +                          k]
  4540                           ;UART_ReadValidTimeFromGPS_TO@Output stored from wreg
  4541  097B  00F9               	movwf	UART_ReadValidTimeFromGPS_TO@Output
  4542                           
  4543                           ;gsk_usart.c: 115: UART_ReadFromGPS_TO (Output, TimeOut);
  4544  097C  0878               	movf	UART_ReadValidTimeFromGPS_TO@TimeOut,w
  4545  097D  00F1               	movwf	UART_ReadFromGPS_TO@TimeOut
  4546  097E  0879               	movf	UART_ReadValidTimeFromGPS_TO@Output,w
  4547  097F  21D7  120A  158A   	fcall	_UART_ReadFromGPS_TO
  4548                           
  4549                           ;gsk_usart.c: 116: return IsValidGPS(Output);
  4550                           ;	Return value of _UART_ReadValidTimeFromGPS_TO is never used
  4551  0982  0879               	movf	UART_ReadValidTimeFromGPS_TO@Output,w
  4552  0983  2984               	ljmp	_IsValidGPS
  4553  0984                     __end_of_UART_ReadValidTimeFromGPS_TO:	
  4554  0984                     __ptext8:	
  4555 ;; *************** function _IsValidGPS *****************
  4556 ;; Defined at:
  4557 ;;		line 120 in file "libs/gsk_usart.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  GPSData         1    wreg     PTR unsigned char 
  4560 ;;		 -> main@GPSData(6), 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  GPSData         1    1[COMMON] PTR unsigned char 
  4563 ;;		 -> main@GPSData(6), 
  4564 ;;  Result          1    0[COMMON] unsigned char 
  4565 ;; Return value:  Size  Location     Type
  4566 ;;                  1    wreg      unsigned char 
  4567 ;; Registers used:
  4568 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4569 ;; Tracked objects:
  4570 ;;		On entry : 300/800
  4571 ;;		On exit  : B00/800
  4572 ;;		Unchanged: 300/0
  4573 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4574 ;;      Params:         0       0       0       0       0       0
  4575 ;;      Locals:         2       0       0       0       0       0
  4576 ;;      Temps:          0       0       0       0       0       0
  4577 ;;      Totals:         2       0       0       0       0       0
  4578 ;;Total ram usage:        2 bytes
  4579 ;; Hardware stack levels used:    1
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_UART_ReadValidTimeFromGPS_TO
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _IsValidGPS
  4589  0984                     _IsValidGPS:	
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _IsValidGPS: [wreg-fsr0h+status,2+status,0]
  4593                           ;IsValidGPS@GPSData stored from wreg
  4594  0984  00F1               	movwf	IsValidGPS@GPSData
  4595                           
  4596                           ;gsk_usart.c: 121: bool Result;
  4597                           ;gsk_usart.c: 122: if (GPSData[0]<0x30 || GPSData[0]>0x32)
  4598  0985  0084               	movwf	4
  4599  0986  3030               	movlw	48
  4600  0987  1783               	bsf	3,7	;select IRP bank2
  4601  0988  0200               	subwf	0,w
  4602  0989  1C03               	skipc
  4603  098A  2990               	goto	l2712
  4604  098B  0871               	movf	IsValidGPS@GPSData,w
  4605  098C  0084               	movwf	4
  4606  098D  3033               	movlw	51
  4607  098E  0200               	subwf	0,w
  4608  098F  1803               	btfsc	3,0
  4609  0990                     l2712:	
  4610                           
  4611                           ;gsk_usart.c: 123: Result = 0;
  4612  0990  01F0               	clrf	IsValidGPS@Result
  4613                           
  4614                           ;gsk_usart.c: 124: if (GPSData[1]<0x30 || GPSData[1]>0x39)
  4615  0991  0A71               	incf	IsValidGPS@GPSData,w
  4616  0992  0084               	movwf	4
  4617  0993  3030               	movlw	48
  4618  0994  0200               	subwf	0,w
  4619  0995  1C03               	skipc
  4620  0996  299C               	goto	l2718
  4621  0997  0A71               	incf	IsValidGPS@GPSData,w
  4622  0998  0084               	movwf	4
  4623  0999  303A               	movlw	58
  4624  099A  0200               	subwf	0,w
  4625  099B  1803               	btfsc	3,0
  4626  099C                     l2718:	
  4627                           
  4628                           ;gsk_usart.c: 125: Result = 0;
  4629  099C  01F0               	clrf	IsValidGPS@Result
  4630                           
  4631                           ;gsk_usart.c: 126: if (GPSData[2]<0x30 || GPSData[2]>0x36)
  4632  099D  0871               	movf	IsValidGPS@GPSData,w
  4633  099E  3E02               	addlw	2
  4634  099F  0084               	movwf	4
  4635  09A0  3030               	movlw	48
  4636  09A1  0200               	subwf	0,w
  4637  09A2  1C03               	skipc
  4638  09A3  29AA               	goto	l2724
  4639  09A4  0871               	movf	IsValidGPS@GPSData,w
  4640  09A5  3E02               	addlw	2
  4641  09A6  0084               	movwf	4
  4642  09A7  3037               	movlw	55
  4643  09A8  0200               	subwf	0,w
  4644  09A9  1803               	btfsc	3,0
  4645  09AA                     l2724:	
  4646                           
  4647                           ;gsk_usart.c: 127: Result = 0;
  4648  09AA  01F0               	clrf	IsValidGPS@Result
  4649                           
  4650                           ;gsk_usart.c: 128: if (GPSData[3]<0x30 || GPSData[3]>0x39)
  4651  09AB  0871               	movf	IsValidGPS@GPSData,w
  4652  09AC  3E03               	addlw	3
  4653  09AD  0084               	movwf	4
  4654  09AE  3030               	movlw	48
  4655  09AF  0200               	subwf	0,w
  4656  09B0  1C03               	skipc
  4657  09B1  29B8               	goto	l2730
  4658  09B2  0871               	movf	IsValidGPS@GPSData,w
  4659  09B3  3E03               	addlw	3
  4660  09B4  0084               	movwf	4
  4661  09B5  303A               	movlw	58
  4662  09B6  0200               	subwf	0,w
  4663  09B7  1803               	btfsc	3,0
  4664  09B8                     l2730:	
  4665                           
  4666                           ;gsk_usart.c: 129: Result = 0;
  4667  09B8  01F0               	clrf	IsValidGPS@Result
  4668                           
  4669                           ;gsk_usart.c: 130: if (GPSData[4]<0x30 || GPSData[4]>0x36)
  4670  09B9  0871               	movf	IsValidGPS@GPSData,w
  4671  09BA  3E04               	addlw	4
  4672  09BB  0084               	movwf	4
  4673  09BC  3030               	movlw	48
  4674  09BD  0200               	subwf	0,w
  4675  09BE  1C03               	skipc
  4676  09BF  29C6               	goto	l2736
  4677  09C0  0871               	movf	IsValidGPS@GPSData,w
  4678  09C1  3E04               	addlw	4
  4679  09C2  0084               	movwf	4
  4680  09C3  3037               	movlw	55
  4681  09C4  0200               	subwf	0,w
  4682  09C5  1803               	btfsc	3,0
  4683  09C6                     l2736:	
  4684                           
  4685                           ;gsk_usart.c: 131: Result = 0;
  4686  09C6  01F0               	clrf	IsValidGPS@Result
  4687                           
  4688                           ;gsk_usart.c: 132: if (GPSData[5]<0x30 || GPSData[5]>0x39)
  4689  09C7  0871               	movf	IsValidGPS@GPSData,w
  4690  09C8  3E05               	addlw	5
  4691  09C9  0084               	movwf	4
  4692  09CA  3030               	movlw	48
  4693  09CB  0200               	subwf	0,w
  4694  09CC  1C03               	skipc
  4695  09CD  29D4               	goto	l2742
  4696  09CE  0871               	movf	IsValidGPS@GPSData,w
  4697  09CF  3E05               	addlw	5
  4698  09D0  0084               	movwf	4
  4699  09D1  303A               	movlw	58
  4700  09D2  0200               	subwf	0,w
  4701  09D3  1803               	btfsc	3,0
  4702  09D4                     l2742:	
  4703                           
  4704                           ;gsk_usart.c: 133: Result = 0;
  4705  09D4  01F0               	clrf	IsValidGPS@Result
  4706                           
  4707                           ;gsk_usart.c: 134: return Result;
  4708  09D5  0870               	movf	IsValidGPS@Result,w
  4709  09D6  0008               	return
  4710  09D7                     __end_of_IsValidGPS:	
  4711  09D7                     __ptext6:	
  4712 ;; *************** function _UART_ReadFromGPS_TO *****************
  4713 ;; Defined at:
  4714 ;;		line 80 in file "libs/gsk_usart.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  Output          1    wreg     PTR unsigned char 
  4717 ;;		 -> main@GPSData(6), 
  4718 ;;  TimeOut         1    1[COMMON] unsigned char 
  4719 ;; Auto vars:     Size  Location     Type
  4720 ;;  Output          1    5[COMMON] PTR unsigned char 
  4721 ;;		 -> main@GPSData(6), 
  4722 ;;  i               2    3[COMMON] unsigned int 
  4723 ;;  Pos             1    7[COMMON] unsigned char 
  4724 ;;  TempChar        1    6[COMMON] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 300/A00
  4731 ;;		On exit  : 300/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4734 ;;      Params:         1       0       0       0       0       0
  4735 ;;      Locals:         5       0       0       0       0       0
  4736 ;;      Temps:          1       0       0       0       0       0
  4737 ;;      Totals:         7       0       0       0       0       0
  4738 ;;Total ram usage:        7 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    1
  4741 ;; This function calls:
  4742 ;;		_UART_Read_TO
  4743 ;; This function is called by:
  4744 ;;		_UART_ReadValidTimeFromGPS_TO
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function _UART_ReadFromGPS_TO
  4750  09D7                     _UART_ReadFromGPS_TO:	
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in _UART_ReadFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4754                           ;UART_ReadFromGPS_TO@Output stored from wreg
  4755  09D7  00F5               	movwf	UART_ReadFromGPS_TO@Output
  4756                           
  4757                           ;gsk_usart.c: 81: Output[0]=0x00;
  4758  09D8  0084               	movwf	4
  4759  09D9  1783               	bsf	3,7	;select IRP bank2
  4760  09DA  0180               	clrf	0
  4761                           
  4762                           ;gsk_usart.c: 82: const char StartCode[7]="$GPRMC,";
  4763                           ;gsk_usart.c: 83: char Pos=0x00;
  4764  09DB  01F7               	clrf	UART_ReadFromGPS_TO@Pos
  4765                           
  4766                           ;gsk_usart.c: 85: CREN = 0;
  4767  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  4768  09DD  1218               	bcf	24,4	;volatile
  4769                           
  4770                           ;gsk_usart.c: 86: CREN = 1;
  4771  09DE  1618               	bsf	24,4	;volatile
  4772                           
  4773                           ;gsk_usart.c: 87: for(uint16_t i=0; i<=768; i++) {
  4774  09DF  01F3               	clrf	UART_ReadFromGPS_TO@i
  4775  09E0  01F4               	clrf	UART_ReadFromGPS_TO@i+1
  4776  09E1                     l2680:	
  4777                           
  4778                           ;gsk_usart.c: 89: TempChar = UART_Read_TO(TimeOut);
  4779  09E1  0871               	movf	UART_ReadFromGPS_TO@TimeOut,w
  4780  09E2  2218  120A  158A   	fcall	_UART_Read_TO
  4781  09E5  00F6               	movwf	UART_ReadFromGPS_TO@TempChar
  4782                           
  4783                           ;gsk_usart.c: 90: if ((Pos>=0x07) & (Pos<=0x0c)) {
  4784  09E6  3007               	movlw	7
  4785  09E7  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  4786  09E8  1C03               	skipc
  4787  09E9  29F8               	goto	l2690
  4788  09EA  300D               	movlw	13
  4789  09EB  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  4790                           
  4791                           ;gsk_usart.c: 91: Output[Pos-0x07]= TempChar;
  4792  09EC  0877               	movf	UART_ReadFromGPS_TO@Pos,w
  4793  09ED  1803               	skipnc
  4794  09EE  29F9               	goto	L14
  4795  09EF  0775               	addwf	UART_ReadFromGPS_TO@Output,w
  4796  09F0  00F2               	movwf	??_UART_ReadFromGPS_TO
  4797  09F1  3EF9               	addlw	-7
  4798  09F2  0084               	movwf	4
  4799  09F3  0876               	movf	UART_ReadFromGPS_TO@TempChar,w
  4800  09F4  1783               	bsf	3,7	;select IRP bank2
  4801  09F5  0080               	movwf	0
  4802  09F6                     l2688:	
  4803                           
  4804                           ;gsk_usart.c: 92: Pos++;
  4805  09F6  0AF7               	incf	UART_ReadFromGPS_TO@Pos,f
  4806                           
  4807                           ;gsk_usart.c: 93: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  4808  09F7  2A0C               	goto	l2704
  4809  09F8                     l2690:	
  4810  09F8  0877               	movf	UART_ReadFromGPS_TO@Pos,w
  4811  09F9                     L14:	
  4812  09F9  3E01               	addlw	low ((UART_ReadFromGPS_TO@StartCode-__stringbase)| (0+32768))
  4813  09FA  0084               	movwf	4
  4814  09FB  120A  158A  2000  120A  158A  	fcall	stringdir
  4815  0A00  0676               	xorwf	UART_ReadFromGPS_TO@TempChar,w
  4816  0A01  1D03               	skipz
  4817  0A02  2A07               	goto	l2696
  4818  0A03  3007               	movlw	7
  4819  0A04  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  4820  0A05  1C03               	btfss	3,0
  4821  0A06  29F6               	goto	l2688
  4822  0A07                     l2696:	
  4823  0A07  300D               	movlw	13
  4824  0A08  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  4825  0A09  1803               	btfsc	3,0
  4826  0A0A  0008               	return
  4827                           
  4828                           ;gsk_usart.c: 97: else
  4829                           ;gsk_usart.c: 98: Pos=0;
  4830  0A0B  01F7               	clrf	UART_ReadFromGPS_TO@Pos
  4831  0A0C                     l2704:	
  4832  0A0C  0AF3               	incf	UART_ReadFromGPS_TO@i,f
  4833  0A0D  1903               	skipnz
  4834  0A0E  0AF4               	incf	UART_ReadFromGPS_TO@i+1,f
  4835  0A0F  3003               	movlw	3
  4836  0A10  0274               	subwf	UART_ReadFromGPS_TO@i+1,w
  4837  0A11  3001               	movlw	1
  4838  0A12  1903               	skipnz
  4839  0A13  0273               	subwf	UART_ReadFromGPS_TO@i,w
  4840  0A14  1C03               	skipc
  4841  0A15  29E1               	goto	l2680
  4842                           
  4843                           ;gsk_usart.c: 99: }
  4844                           ;gsk_usart.c: 100: CREN = 0;
  4845  0A16  1218               	bcf	24,4	;volatile
  4846  0A17  0008               	return
  4847  0A18                     __end_of_UART_ReadFromGPS_TO:	
  4848  0A18                     __ptext7:	
  4849 ;; *************** function _UART_Read_TO *****************
  4850 ;; Defined at:
  4851 ;;		line 103 in file "libs/gsk_usart.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  TimeOut         1    wreg     unsigned char 
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;  TimeOut         1    0[COMMON] unsigned char 
  4856 ;; Return value:  Size  Location     Type
  4857 ;;                  1    wreg      unsigned char 
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0
  4860 ;; Tracked objects:
  4861 ;;		On entry : 100/800
  4862 ;;		On exit  : 300/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4865 ;;      Params:         0       0       0       0       0       0
  4866 ;;      Locals:         1       0       0       0       0       0
  4867 ;;      Temps:          0       0       0       0       0       0
  4868 ;;      Totals:         1       0       0       0       0       0
  4869 ;;Total ram usage:        1 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; This function calls:
  4872 ;;		Nothing
  4873 ;; This function is called by:
  4874 ;;		_UART_ReadFromGPS_TO
  4875 ;; This function uses a non-reentrant model
  4876 ;;
  4877                           
  4878                           
  4879                           ;psect for function _UART_Read_TO
  4880  0A18                     _UART_Read_TO:	
  4881                           
  4882                           ;incstack = 0
  4883                           ; Regs used in _UART_Read_TO: [wreg+status,2+status,0]
  4884                           ;UART_Read_TO@TimeOut stored from wreg
  4885  0A18  00F0               	movwf	UART_Read_TO@TimeOut
  4886                           
  4887                           ;gsk_usart.c: 104: while(!RCIF && TimeOut !=0) {
  4888  0A19  2A1F               	goto	l2582
  4889  0A1A                     l2584:	
  4890  0A1A  0870               	movf	UART_Read_TO@TimeOut,w
  4891  0A1B  1903               	btfsc	3,2
  4892  0A1C  2A23               	goto	l638
  4893                           
  4894                           ;gsk_usart.c: 105: _delay((unsigned long)((1)*(4000000/4000000.0)));
  4895  0A1D  0000               	nop
  4896                           
  4897                           ;gsk_usart.c: 106: TimeOut--;
  4898  0A1E  03F0               	decf	UART_Read_TO@TimeOut,f
  4899  0A1F                     l2582:	
  4900  0A1F  1283               	bcf	3,5	;RP0=0, select bank0
  4901  0A20  1303               	bcf	3,6	;RP1=0, select bank0
  4902  0A21  1E8C               	btfss	12,5	;volatile
  4903  0A22  2A1A               	goto	l2584
  4904  0A23                     l638:	
  4905                           
  4906                           ;gsk_usart.c: 107: }
  4907                           ;gsk_usart.c: 108: if (RCIF)
  4908  0A23  1E8C               	btfss	12,5	;volatile
  4909  0A24  3441               	retlw	65
  4910                           
  4911                           ;gsk_usart.c: 109: return RCREG;
  4912  0A25  081A               	movf	26,w	;volatile
  4913  0A26  0008               	return
  4914  0A27                     __end_of_UART_Read_TO:	
  4915                           ;gsk_usart.c: 110: else
  4916                           ;gsk_usart.c: 111: return 0x41;
  4917                           
  4918                           
  4919                           	psect	text9
  4920  0403                     __ptext9:	
  4921 ;; *************** function _UART_Init *****************
  4922 ;; Defined at:
  4923 ;;		line 3 in file "libs/gsk_usart.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  baudrate        4    9[BANK1 ] const long 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  x               2   19[BANK1 ] unsigned int 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  1    wreg      unsigned char 
  4930 ;; Registers used:
  4931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4932 ;; Tracked objects:
  4933 ;;		On entry : 300/900
  4934 ;;		On exit  : 300/100
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4937 ;;      Params:         0       0       4       0       0       0
  4938 ;;      Locals:         0       0       8       0       0       0
  4939 ;;      Temps:          0       0       0       0       0       0
  4940 ;;      Totals:         0       0      12       0       0       0
  4941 ;;Total ram usage:       12 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    4
  4944 ;; This function calls:
  4945 ;;		___altoft
  4946 ;;		___ftadd
  4947 ;;		___ftdiv
  4948 ;;		___ftmul
  4949 ;;		___fttol
  4950 ;;		_round
  4951 ;; This function is called by:
  4952 ;;		_main
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           
  4957                           ;psect for function _UART_Init
  4958  0403                     _UART_Init:	
  4959                           
  4960                           ;gsk_usart.c: 4: uint16_t x;
  4961                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  4962                           
  4963                           ;incstack = 0
  4964                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4965  0403  3024               	movlw	36
  4966  0404  1283               	bcf	3,5	;RP0=0, select bank0
  4967  0405  00BE               	movwf	___ftdiv@f1
  4968  0406  3074               	movlw	116
  4969  0407  00BF               	movwf	___ftdiv@f1+1
  4970  0408  304A               	movlw	74
  4971  0409  00C0               	movwf	___ftdiv@f1+2
  4972  040A  1683               	bsf	3,5	;RP0=1, select bank1
  4973  040B  085E               	movf	(UART_Init@baudrate+3)^(0+128),w
  4974  040C  00FB               	movwf	___altoft@c+3
  4975  040D  085D               	movf	(UART_Init@baudrate+2)^(0+128),w
  4976  040E  00FA               	movwf	___altoft@c+2
  4977  040F  085C               	movf	(UART_Init@baudrate+1)^(0+128),w
  4978  0410  00F9               	movwf	___altoft@c+1
  4979  0411  085B               	movf	UART_Init@baudrate^(0+128),w
  4980  0412  00F8               	movwf	___altoft@c
  4981  0413  25C7  120A  118A   	fcall	___altoft
  4982  0416  0878               	movf	?___altoft,w
  4983  0417  1283               	bcf	3,5	;RP0=0, select bank0
  4984  0418  00AF               	movwf	___ftmul@f2
  4985  0419  0879               	movf	?___altoft+1,w
  4986  041A  00B0               	movwf	___ftmul@f2+1
  4987  041B  087A               	movf	?___altoft+2,w
  4988  041C  00B1               	movwf	___ftmul@f2+2
  4989  041D  3080               	movlw	128
  4990  041E  01AC               	clrf	___ftmul@f1
  4991  041F  00AD               	movwf	___ftmul@f1+1
  4992  0420  3040               	movlw	64
  4993  0421  00AE               	movwf	___ftmul@f1+2
  4994  0422  26FC  120A  118A   	fcall	___ftmul
  4995  0425  082C               	movf	?___ftmul,w
  4996  0426  00BB               	movwf	___ftdiv@f2
  4997  0427  082D               	movf	?___ftmul+1,w
  4998  0428  00BC               	movwf	___ftdiv@f2+1
  4999  0429  082E               	movf	?___ftmul+2,w
  5000  042A  00BD               	movwf	___ftdiv@f2+2
  5001  042B  2693  120A  118A   	fcall	___ftdiv
  5002  042E  083B               	movf	?___ftdiv,w
  5003  042F  1683               	bsf	3,5	;RP0=1, select bank1
  5004  0430  00DF               	movwf	_UART_Init$1006^(0+128)
  5005  0431  1283               	bcf	3,5	;RP0=0, select bank0
  5006  0432  083C               	movf	?___ftdiv+1,w
  5007  0433  1683               	bsf	3,5	;RP0=1, select bank1
  5008  0434  00E0               	movwf	(_UART_Init$1006+1)^(0+128)
  5009  0435  1283               	bcf	3,5	;RP0=0, select bank0
  5010  0436  083D               	movf	?___ftdiv+2,w
  5011  0437  1683               	bsf	3,5	;RP0=1, select bank1
  5012  0438  00E1               	movwf	(_UART_Init$1006+2)^(0+128)
  5013                           
  5014                           ;gsk_usart.c: 4: uint16_t x;
  5015                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  5016  0439  085F               	movf	_UART_Init$1006^(0+128),w
  5017  043A  1283               	bcf	3,5	;RP0=0, select bank0
  5018  043B  00EB               	movwf	round@x
  5019  043C  1683               	bsf	3,5	;RP0=1, select bank1
  5020  043D  0860               	movf	(_UART_Init$1006+1)^(0+128),w
  5021  043E  1283               	bcf	3,5	;RP0=0, select bank0
  5022  043F  00EC               	movwf	round@x+1
  5023  0440  1683               	bsf	3,5	;RP0=1, select bank1
  5024  0441  0861               	movf	(_UART_Init$1006+2)^(0+128),w
  5025  0442  1283               	bcf	3,5	;RP0=0, select bank0
  5026  0443  00ED               	movwf	round@x+2
  5027  0444  2483  120A  118A   	fcall	_round
  5028  0447  086B               	movf	?_round,w
  5029  0448  1683               	bsf	3,5	;RP0=1, select bank1
  5030  0449  00E2               	movwf	_UART_Init$1007^(0+128)
  5031  044A  1283               	bcf	3,5	;RP0=0, select bank0
  5032  044B  086C               	movf	?_round+1,w
  5033  044C  1683               	bsf	3,5	;RP0=1, select bank1
  5034  044D  00E3               	movwf	(_UART_Init$1007+1)^(0+128)
  5035  044E  1283               	bcf	3,5	;RP0=0, select bank0
  5036  044F  086D               	movf	?_round+2,w
  5037  0450  1683               	bsf	3,5	;RP0=1, select bank1
  5038  0451  00E4               	movwf	(_UART_Init$1007+2)^(0+128)
  5039                           
  5040                           ;gsk_usart.c: 4: uint16_t x;
  5041                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  5042  0452  0862               	movf	_UART_Init$1007^(0+128),w
  5043  0453  1283               	bcf	3,5	;RP0=0, select bank0
  5044  0454  00CD               	movwf	___ftadd@f2
  5045  0455  1683               	bsf	3,5	;RP0=1, select bank1
  5046  0456  0863               	movf	(_UART_Init$1007+1)^(0+128),w
  5047  0457  1283               	bcf	3,5	;RP0=0, select bank0
  5048  0458  00CE               	movwf	___ftadd@f2+1
  5049  0459  1683               	bsf	3,5	;RP0=1, select bank1
  5050  045A  0864               	movf	(_UART_Init$1007+2)^(0+128),w
  5051  045B  1283               	bcf	3,5	;RP0=0, select bank0
  5052  045C  00CF               	movwf	___ftadd@f2+2
  5053  045D  3080               	movlw	128
  5054  045E  01CA               	clrf	___ftadd@f1
  5055  045F  00CB               	movwf	___ftadd@f1+1
  5056  0460  30BF               	movlw	191
  5057  0461  00CC               	movwf	___ftadd@f1+2
  5058  0462  2506  120A  118A   	fcall	___ftadd
  5059  0465  084A               	movf	?___ftadd,w
  5060  0466  00D6               	movwf	___fttol@f1
  5061  0467  084B               	movf	?___ftadd+1,w
  5062  0468  00D7               	movwf	___fttol@f1+1
  5063  0469  084C               	movf	?___ftadd+2,w
  5064  046A  00D8               	movwf	___fttol@f1+2
  5065  046B  25F6               	fcall	___fttol
  5066  046C  0857               	movf	?___fttol+1,w
  5067  046D  1683               	bsf	3,5	;RP0=1, select bank1
  5068  046E  00E6               	movwf	(UART_Init@x+1)^(0+128)
  5069  046F  1283               	bcf	3,5	;RP0=0, select bank0
  5070  0470  0856               	movf	?___fttol,w
  5071  0471  1683               	bsf	3,5	;RP0=1, select bank1
  5072  0472  00E5               	movwf	UART_Init@x^(0+128)
  5073                           
  5074                           ;gsk_usart.c: 6: SPBRG = x;
  5075  0473  0099               	movwf	25	;volatile
  5076                           
  5077                           ;gsk_usart.c: 7: SPBRGH = (x>>8);
  5078  0474  0866               	movf	(UART_Init@x^(0+128)+1),w
  5079  0475  009A               	movwf	26	;volatile
  5080                           
  5081                           ;gsk_usart.c: 8: BRGH = 1;
  5082  0476  1518               	bsf	24,2	;volatile
  5083                           
  5084                           ;gsk_usart.c: 9: BRG16 = 1;
  5085  0477  1703               	bsf	3,6	;RP1=1, select bank3
  5086  0478  1587               	bsf	7,3	;volatile
  5087                           
  5088                           ;gsk_usart.c: 10: CREN = 1;
  5089  0479  1283               	bcf	3,5	;RP0=0, select bank0
  5090  047A  1303               	bcf	3,6	;RP1=0, select bank0
  5091  047B  1618               	bsf	24,4	;volatile
  5092                           
  5093                           ;gsk_usart.c: 11: SYNC = 0;
  5094  047C  1683               	bsf	3,5	;RP0=1, select bank1
  5095  047D  1218               	bcf	24,4	;volatile
  5096                           
  5097                           ;gsk_usart.c: 12: SPEN = 1;
  5098  047E  1283               	bcf	3,5	;RP0=0, select bank0
  5099  047F  1798               	bsf	24,7	;volatile
  5100                           
  5101                           ;gsk_usart.c: 15: TXEN = 1;
  5102  0480  1683               	bsf	3,5	;RP0=1, select bank1
  5103  0481  1698               	bsf	24,5	;volatile
  5104  0482  0008               	return
  5105  0483                     __end_of_UART_Init:	
  5106  0483                     __ptext10:	
  5107 ;; *************** function _round *****************
  5108 ;; Defined at:
  5109 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\round.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  x               3   63[BANK0 ] unsigned char 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  f               3    6[BANK1 ] unsigned char 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  3   63[BANK0 ] unsigned char 
  5116 ;; Registers used:
  5117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 300/800
  5120 ;;		On exit  : 300/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5123 ;;      Params:         0       3       0       0       0       0
  5124 ;;      Locals:         0       0       3       0       0       0
  5125 ;;      Temps:          0       0       0       0       0       0
  5126 ;;      Totals:         0       3       3       0       0       0
  5127 ;;Total ram usage:        6 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    3
  5130 ;; This function calls:
  5131 ;;		___ftadd
  5132 ;;		___ftsub
  5133 ;;		_trunc
  5134 ;; This function is called by:
  5135 ;;		_UART_Init
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           
  5140                           ;psect for function _round
  5141  0483                     _round:	
  5142                           
  5143                           ;incstack = 0
  5144                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5145  0483  27E0  120A  118A   	fcall	PL38	;call to abstracted procedure
  5146  0486  24CE  120A  118A   	fcall	_trunc
  5147  0489  0863               	movf	?_trunc,w
  5148  048A  1683               	bsf	3,5	;RP0=1, select bank1
  5149  048B  00D2               	movwf	___ftsub@f2^(0+128)
  5150  048C  1283               	bcf	3,5	;RP0=0, select bank0
  5151  048D  0864               	movf	?_trunc+1,w
  5152  048E  1683               	bsf	3,5	;RP0=1, select bank1
  5153  048F  00D3               	movwf	(___ftsub@f2+1)^(0+128)
  5154  0490  1283               	bcf	3,5	;RP0=0, select bank0
  5155  0491  0865               	movf	?_trunc+2,w
  5156  0492  1683               	bsf	3,5	;RP0=1, select bank1
  5157  0493  00D4               	movwf	(___ftsub@f2+2)^(0+128)
  5158  0494  1283               	bcf	3,5	;RP0=0, select bank0
  5159  0495  086B               	movf	round@x,w
  5160  0496  1683               	bsf	3,5	;RP0=1, select bank1
  5161  0497  00D5               	movwf	___ftsub@f1^(0+128)
  5162  0498  1283               	bcf	3,5	;RP0=0, select bank0
  5163  0499  086C               	movf	round@x+1,w
  5164  049A  1683               	bsf	3,5	;RP0=1, select bank1
  5165  049B  00D6               	movwf	(___ftsub@f1+1)^(0+128)
  5166  049C  1283               	bcf	3,5	;RP0=0, select bank0
  5167  049D  086D               	movf	round@x+2,w
  5168  049E  1683               	bsf	3,5	;RP0=1, select bank1
  5169  049F  00D7               	movwf	(___ftsub@f1+2)^(0+128)
  5170  04A0  276A  120A  118A   	fcall	___ftsub
  5171  04A3  0852               	movf	?___ftsub^(0+128),w
  5172  04A4  00D8               	movwf	round@f^(0+128)
  5173  04A5  0853               	movf	(?___ftsub+1)^(0+128),w
  5174  04A6  00D9               	movwf	(round@f+1)^(0+128)
  5175  04A7  0854               	movf	(?___ftsub+2)^(0+128),w
  5176  04A8  00DA               	movwf	(round@f+2)^(0+128)
  5177  04A9  0858               	movf	round@f^(0+128),w
  5178  04AA  1283               	bcf	3,5	;RP0=0, select bank0
  5179  04AB  00CA               	movwf	___ftadd@f1
  5180  04AC  1683               	bsf	3,5	;RP0=1, select bank1
  5181  04AD  0859               	movf	(round@f+1)^(0+128),w
  5182  04AE  1283               	bcf	3,5	;RP0=0, select bank0
  5183  04AF  00CB               	movwf	___ftadd@f1+1
  5184  04B0  1683               	bsf	3,5	;RP0=1, select bank1
  5185  04B1  085A               	movf	(round@f+2)^(0+128),w
  5186  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  5187  04B3  00CC               	movwf	___ftadd@f1+2
  5188  04B4  086B               	movf	round@x,w
  5189  04B5  00CD               	movwf	___ftadd@f2
  5190  04B6  086C               	movf	round@x+1,w
  5191  04B7  00CE               	movwf	___ftadd@f2+1
  5192  04B8  086D               	movf	round@x+2,w
  5193  04B9  00CF               	movwf	___ftadd@f2+2
  5194  04BA  2506  120A  118A   	fcall	___ftadd
  5195  04BD  084A               	movf	?___ftadd,w
  5196  04BE  00EB               	movwf	round@x
  5197  04BF  084B               	movf	?___ftadd+1,w
  5198  04C0  00EC               	movwf	round@x+1
  5199  04C1  084C               	movf	?___ftadd+2,w
  5200  04C2  00ED               	movwf	round@x+2
  5201  04C3  27E0  120A  118A   	fcall	PL38	;call to abstracted procedure
  5202  04C6  24CE               	fcall	_trunc
  5203  04C7  0863               	movf	?_trunc,w
  5204  04C8  00EB               	movwf	?_round
  5205  04C9  0864               	movf	?_trunc+1,w
  5206  04CA  00EC               	movwf	?_round+1
  5207  04CB  0865               	movf	?_trunc+2,w
  5208  04CC  00ED               	movwf	?_round+2
  5209  04CD  0008               	return
  5210  04CE                     __end_of_round:	
  5211  04CE                     __ptext11:	
  5212 ;; *************** function _trunc *****************
  5213 ;; Defined at:
  5214 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\trunc.c"
  5215 ;; Parameters:    Size  Location     Type
  5216 ;;  x               3   55[BANK0 ] unsigned char 
  5217 ;; Auto vars:     Size  Location     Type
  5218 ;;  i               3   58[BANK0 ] unsigned char 
  5219 ;;  expon           2   61[BANK0 ] int 
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  3   55[BANK0 ] int 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 300/800
  5226 ;;		On exit  : 300/0
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5229 ;;      Params:         0       3       0       0       0       0
  5230 ;;      Locals:         0       5       0       0       0       0
  5231 ;;      Temps:          0       0       0       0       0       0
  5232 ;;      Totals:         0       8       0       0       0       0
  5233 ;;Total ram usage:        8 bytes
  5234 ;; Hardware stack levels used:    1
  5235 ;; Hardware stack levels required when called:    2
  5236 ;; This function calls:
  5237 ;;		___altoft
  5238 ;;		___fttol
  5239 ;;		_frexp
  5240 ;; This function is called by:
  5241 ;;		_round
  5242 ;; This function uses a non-reentrant model
  5243 ;;
  5244                           
  5245                           
  5246                           ;psect for function _trunc
  5247  04CE                     _trunc:	
  5248                           
  5249                           ;incstack = 0
  5250                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5251  04CE  0863               	movf	trunc@x,w
  5252  04CF  00F0               	movwf	frexp@value
  5253  04D0  0864               	movf	trunc@x+1,w
  5254  04D1  00F1               	movwf	frexp@value+1
  5255  04D2  0865               	movf	trunc@x+2,w
  5256  04D3  00F2               	movwf	frexp@value+2
  5257  04D4  3069               	movlw	(low (trunc@expon| 0))& (0+255)
  5258  04D5  00F3               	movwf	frexp@eptr
  5259  04D6  2795  120A  118A   	fcall	_frexp
  5260  04D9  1FEA               	btfss	trunc@expon+1,7
  5261  04DA  2CDF               	goto	l2610
  5262  04DB  01E3               	clrf	?_trunc
  5263  04DC  01E4               	clrf	?_trunc+1
  5264  04DD  01E5               	clrf	?_trunc+2
  5265  04DE  0008               	return
  5266  04DF                     l2610:	
  5267  04DF  3000               	movlw	0
  5268  04E0  026A               	subwf	trunc@expon+1,w
  5269  04E1  3015               	movlw	21
  5270  04E2  1903               	skipnz
  5271  04E3  0269               	subwf	trunc@expon,w
  5272  04E4  1803               	btfsc	3,0
  5273  04E5  0008               	return
  5274  04E6  0863               	movf	trunc@x,w
  5275  04E7  00D6               	movwf	___fttol@f1
  5276  04E8  0864               	movf	trunc@x+1,w
  5277  04E9  00D7               	movwf	___fttol@f1+1
  5278  04EA  0865               	movf	trunc@x+2,w
  5279  04EB  00D8               	movwf	___fttol@f1+2
  5280  04EC  25F6  120A  118A   	fcall	___fttol
  5281  04EF  0859               	movf	?___fttol+3,w
  5282  04F0  00FB               	movwf	___altoft@c+3
  5283  04F1  0858               	movf	?___fttol+2,w
  5284  04F2  00FA               	movwf	___altoft@c+2
  5285  04F3  0857               	movf	?___fttol+1,w
  5286  04F4  00F9               	movwf	___altoft@c+1
  5287  04F5  0856               	movf	?___fttol,w
  5288  04F6  00F8               	movwf	___altoft@c
  5289  04F7  25C7               	fcall	___altoft
  5290  04F8  0878               	movf	?___altoft,w
  5291  04F9  1283               	bcf	3,5	;RP0=0, select bank0
  5292  04FA  00E6               	movwf	trunc@i
  5293  04FB  0879               	movf	?___altoft+1,w
  5294  04FC  00E7               	movwf	trunc@i+1
  5295  04FD  087A               	movf	?___altoft+2,w
  5296  04FE  00E8               	movwf	trunc@i+2
  5297  04FF  0866               	movf	trunc@i,w
  5298  0500  00E3               	movwf	?_trunc
  5299  0501  0867               	movf	trunc@i+1,w
  5300  0502  00E4               	movwf	?_trunc+1
  5301  0503  0868               	movf	trunc@i+2,w
  5302  0504  00E5               	movwf	?_trunc+2
  5303  0505  0008               	return
  5304  0506                     __end_of_trunc:	
  5305  0506                     __ptext16:	
  5306 ;; *************** function ___ftadd *****************
  5307 ;; Defined at:
  5308 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  f1              3   30[BANK0 ] float 
  5311 ;;  f2              3   33[BANK0 ] float 
  5312 ;; Auto vars:     Size  Location     Type
  5313 ;;  exp1            1   41[BANK0 ] unsigned char 
  5314 ;;  exp2            1   40[BANK0 ] unsigned char 
  5315 ;;  sign            1   39[BANK0 ] unsigned char 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;                  3   30[BANK0 ] float 
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 300/800
  5322 ;;		On exit  : 300/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5325 ;;      Params:         0       6       0       0       0       0
  5326 ;;      Locals:         0       3       0       0       0       0
  5327 ;;      Temps:          0       3       0       0       0       0
  5328 ;;      Totals:         0      12       0       0       0       0
  5329 ;;Total ram usage:       12 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    1
  5332 ;; This function calls:
  5333 ;;		___ftpack
  5334 ;; This function is called by:
  5335 ;;		_UART_Init
  5336 ;;		___ftsub
  5337 ;;		_round
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           
  5342                           ;psect for function ___ftadd
  5343  0506                     ___ftadd:	
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5347  0506  084A               	movf	___ftadd@f1,w
  5348  0507  00D0               	movwf	??___ftadd
  5349  0508  084B               	movf	___ftadd@f1+1,w
  5350  0509  00D1               	movwf	??___ftadd+1
  5351  050A  084C               	movf	___ftadd@f1+2,w
  5352  050B  00D2               	movwf	??___ftadd+2
  5353  050C  1003               	clrc
  5354  050D  0D51               	rlf	??___ftadd+1,w
  5355  050E  0D52               	rlf	??___ftadd+2,w
  5356  050F  00D5               	movwf	___ftadd@exp1
  5357  0510  084D               	movf	___ftadd@f2,w
  5358  0511  00D0               	movwf	??___ftadd
  5359  0512  084E               	movf	___ftadd@f2+1,w
  5360  0513  00D1               	movwf	??___ftadd+1
  5361  0514  084F               	movf	___ftadd@f2+2,w
  5362  0515  00D2               	movwf	??___ftadd+2
  5363  0516  1003               	clrc
  5364  0517  0D51               	rlf	??___ftadd+1,w
  5365  0518  0D52               	rlf	??___ftadd+2,w
  5366  0519  00D4               	movwf	___ftadd@exp2
  5367  051A  0855               	movf	___ftadd@exp1,w
  5368  051B  1903               	btfsc	3,2
  5369  051C  2D29               	goto	l2372
  5370  051D  0854               	movf	___ftadd@exp2,w
  5371  051E  0255               	subwf	___ftadd@exp1,w
  5372  051F  0854               	movf	___ftadd@exp2,w
  5373  0520  1803               	skipnc
  5374  0521  2D31               	goto	L15
  5375  0522  00D0               	movwf	??___ftadd
  5376  0523  0855               	movf	___ftadd@exp1,w
  5377  0524  02D0               	subwf	??___ftadd,f
  5378  0525  3019               	movlw	25
  5379  0526  0250               	subwf	??___ftadd,w
  5380  0527  1C03               	skipc
  5381  0528  2D30               	goto	l2376
  5382  0529                     l2372:	
  5383  0529  084D               	movf	___ftadd@f2,w
  5384  052A  00CA               	movwf	?___ftadd
  5385  052B  084E               	movf	___ftadd@f2+1,w
  5386  052C  00CB               	movwf	?___ftadd+1
  5387  052D  084F               	movf	___ftadd@f2+2,w
  5388  052E  00CC               	movwf	?___ftadd+2
  5389  052F  0008               	return
  5390  0530                     l2376:	
  5391  0530  0854               	movf	___ftadd@exp2,w
  5392  0531                     L15:	
  5393  0531  1903               	btfsc	3,2
  5394  0532  0008               	return
  5395  0533  0855               	movf	___ftadd@exp1,w
  5396  0534  0254               	subwf	___ftadd@exp2,w
  5397  0535  1803               	skipnc
  5398  0536  2D3F               	goto	l2382
  5399  0537  0855               	movf	___ftadd@exp1,w
  5400  0538  00D0               	movwf	??___ftadd
  5401  0539  0854               	movf	___ftadd@exp2,w
  5402  053A  02D0               	subwf	??___ftadd,f
  5403  053B  3019               	movlw	25
  5404  053C  0250               	subwf	??___ftadd,w
  5405  053D  1803               	btfsc	3,0
  5406  053E  0008               	return
  5407  053F                     l2382:	
  5408  053F  3006               	movlw	6
  5409  0540  00D3               	movwf	___ftadd@sign
  5410  0541  1BCC               	btfsc	___ftadd@f1+2,7
  5411  0542  17D3               	bsf	___ftadd@sign,7
  5412  0543  1BCF               	btfsc	___ftadd@f2+2,7
  5413  0544  1753               	bsf	___ftadd@sign,6
  5414  0545  17CB               	bsf	___ftadd@f1+1,7
  5415  0546  01CC               	clrf	___ftadd@f1+2
  5416  0547  17CE               	bsf	___ftadd@f2+1,7
  5417  0548  01CF               	clrf	___ftadd@f2+2
  5418  0549  0854               	movf	___ftadd@exp2,w
  5419  054A  0255               	subwf	___ftadd@exp1,w
  5420  054B  1803               	skipnc
  5421  054C  2D66               	goto	l2404
  5422  054D                     l2394:	
  5423  054D  1003               	clrc
  5424  054E  0DCD               	rlf	___ftadd@f2,f
  5425  054F  0DCE               	rlf	___ftadd@f2+1,f
  5426  0550  0DCF               	rlf	___ftadd@f2+2,f
  5427  0551  03D4               	decf	___ftadd@exp2,f
  5428  0552  0854               	movf	___ftadd@exp2,w
  5429  0553  0655               	xorwf	___ftadd@exp1,w
  5430  0554  1903               	skipnz
  5431  0555  2D61               	goto	l2402
  5432  0556  03D3               	decf	___ftadd@sign,f
  5433  0557  0853               	movf	___ftadd@sign,w
  5434  0558  3907               	andlw	7
  5435  0559  1903               	btfsc	3,2
  5436  055A  2D61               	goto	l2402
  5437  055B  2D4D               	goto	l2394
  5438  055C                     l2400:	
  5439  055C  1003               	clrc
  5440  055D  0CCC               	rrf	___ftadd@f1+2,f
  5441  055E  0CCB               	rrf	___ftadd@f1+1,f
  5442  055F  0CCA               	rrf	___ftadd@f1,f
  5443  0560  0AD5               	incf	___ftadd@exp1,f
  5444  0561                     l2402:	
  5445  0561  0855               	movf	___ftadd@exp1,w
  5446  0562  0654               	xorwf	___ftadd@exp2,w
  5447  0563  1903               	btfsc	3,2
  5448  0564  2D82               	goto	l956
  5449  0565  2D5C               	goto	l2400
  5450  0566                     l2404:	
  5451  0566  0855               	movf	___ftadd@exp1,w
  5452  0567  0254               	subwf	___ftadd@exp2,w
  5453  0568  1803               	skipnc
  5454  0569  2D82               	goto	l956
  5455  056A                     l2406:	
  5456  056A  1003               	clrc
  5457  056B  0DCA               	rlf	___ftadd@f1,f
  5458  056C  0DCB               	rlf	___ftadd@f1+1,f
  5459  056D  0DCC               	rlf	___ftadd@f1+2,f
  5460  056E  03D5               	decf	___ftadd@exp1,f
  5461  056F  0854               	movf	___ftadd@exp2,w
  5462  0570  0655               	xorwf	___ftadd@exp1,w
  5463  0571  1903               	skipnz
  5464  0572  2D7E               	goto	l2414
  5465  0573  03D3               	decf	___ftadd@sign,f
  5466  0574  0853               	movf	___ftadd@sign,w
  5467  0575  3907               	andlw	7
  5468  0576  1903               	btfsc	3,2
  5469  0577  2D7E               	goto	l2414
  5470  0578  2D6A               	goto	l2406
  5471  0579                     l2412:	
  5472  0579  1003               	clrc
  5473  057A  0CCF               	rrf	___ftadd@f2+2,f
  5474  057B  0CCE               	rrf	___ftadd@f2+1,f
  5475  057C  0CCD               	rrf	___ftadd@f2,f
  5476  057D  0AD4               	incf	___ftadd@exp2,f
  5477  057E                     l2414:	
  5478  057E  0855               	movf	___ftadd@exp1,w
  5479  057F  0654               	xorwf	___ftadd@exp2,w
  5480  0580  1D03               	skipz
  5481  0581  2D79               	goto	l2412
  5482  0582                     l956:	
  5483  0582  1FD3               	btfss	___ftadd@sign,7
  5484  0583  2D8D               	goto	l2420
  5485  0584  30FF               	movlw	255
  5486  0585  06CA               	xorwf	___ftadd@f1,f
  5487  0586  06CB               	xorwf	___ftadd@f1+1,f
  5488  0587  06CC               	xorwf	___ftadd@f1+2,f
  5489  0588  0ACA               	incf	___ftadd@f1,f
  5490  0589  1903               	skipnz
  5491  058A  0ACB               	incf	___ftadd@f1+1,f
  5492  058B  1903               	skipnz
  5493  058C  0ACC               	incf	___ftadd@f1+2,f
  5494  058D                     l2420:	
  5495  058D  1F53               	btfss	___ftadd@sign,6
  5496  058E  2D98               	goto	l2426
  5497  058F  30FF               	movlw	255
  5498  0590  06CD               	xorwf	___ftadd@f2,f
  5499  0591  06CE               	xorwf	___ftadd@f2+1,f
  5500  0592  06CF               	xorwf	___ftadd@f2+2,f
  5501  0593  0ACD               	incf	___ftadd@f2,f
  5502  0594  1903               	skipnz
  5503  0595  0ACE               	incf	___ftadd@f2+1,f
  5504  0596  1903               	skipnz
  5505  0597  0ACF               	incf	___ftadd@f2+2,f
  5506  0598                     l2426:	
  5507  0598  01D3               	clrf	___ftadd@sign
  5508  0599  084A               	movf	___ftadd@f1,w
  5509  059A  07CD               	addwf	___ftadd@f2,f
  5510  059B  084B               	movf	___ftadd@f1+1,w
  5511  059C  1103               	clrz
  5512  059D  1803               	skipnc
  5513  059E  0A4B               	incf	___ftadd@f1+1,w
  5514  059F  1D03               	btfss	3,2
  5515  05A0  07CE               	addwf	___ftadd@f2+1,f
  5516  05A1  084C               	movf	___ftadd@f1+2,w
  5517  05A2  1103               	clrz
  5518  05A3  1803               	skipnc
  5519  05A4  0A4C               	incf	___ftadd@f1+2,w
  5520  05A5  1D03               	btfss	3,2
  5521  05A6  07CF               	addwf	___ftadd@f2+2,f
  5522  05A7  1FCF               	btfss	___ftadd@f2+2,7
  5523  05A8  2DB4               	goto	l2438
  5524  05A9  30FF               	movlw	255
  5525  05AA  06CD               	xorwf	___ftadd@f2,f
  5526  05AB  06CE               	xorwf	___ftadd@f2+1,f
  5527  05AC  06CF               	xorwf	___ftadd@f2+2,f
  5528  05AD  0ACD               	incf	___ftadd@f2,f
  5529  05AE  1903               	skipnz
  5530  05AF  0ACE               	incf	___ftadd@f2+1,f
  5531  05B0  1903               	skipnz
  5532  05B1  0ACF               	incf	___ftadd@f2+2,f
  5533  05B2  01D3               	clrf	___ftadd@sign
  5534  05B3  0AD3               	incf	___ftadd@sign,f
  5535  05B4                     l2438:	
  5536  05B4  084D               	movf	___ftadd@f2,w
  5537  05B5  00F0               	movwf	___ftpack@arg
  5538  05B6  084E               	movf	___ftadd@f2+1,w
  5539  05B7  00F1               	movwf	___ftpack@arg+1
  5540  05B8  084F               	movf	___ftadd@f2+2,w
  5541  05B9  00F2               	movwf	___ftpack@arg+2
  5542  05BA  0855               	movf	___ftadd@exp1,w
  5543  05BB  00F3               	movwf	___ftpack@exp
  5544  05BC  0853               	movf	___ftadd@sign,w
  5545  05BD  00F4               	movwf	___ftpack@sign
  5546  05BE  2651               	fcall	___ftpack
  5547  05BF  0870               	movf	?___ftpack,w
  5548  05C0  1283               	bcf	3,5	;RP0=0, select bank0
  5549  05C1  00CA               	movwf	?___ftadd
  5550  05C2  0871               	movf	?___ftpack+1,w
  5551  05C3  00CB               	movwf	?___ftadd+1
  5552  05C4  0872               	movf	?___ftpack+2,w
  5553  05C5  00CC               	movwf	?___ftadd+2
  5554  05C6  0008               	return
  5555  05C7                     __end_of___ftadd:	
  5556  05C7                     __ptext14:	
  5557 ;; *************** function ___altoft *****************
  5558 ;; Defined at:
  5559 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  c               4    8[COMMON] long 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  sign            1   13[COMMON] unsigned char 
  5564 ;;  exp             1   12[COMMON] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  3    8[COMMON] float 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 200/900
  5571 ;;		On exit  : 200/0
  5572 ;;		Unchanged: 200/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5574 ;;      Params:         4       0       0       0       0       0
  5575 ;;      Locals:         2       0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0
  5577 ;;      Totals:         6       0       0       0       0       0
  5578 ;;Total ram usage:        6 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    1
  5581 ;; This function calls:
  5582 ;;		___ftpack
  5583 ;; This function is called by:
  5584 ;;		_UART_Init
  5585 ;;		_trunc
  5586 ;; This function uses a non-reentrant model
  5587 ;;
  5588                           
  5589                           
  5590                           ;psect for function ___altoft
  5591  05C7                     ___altoft:	
  5592  05C7  308E               	movlw	142
  5593                           
  5594                           ;incstack = 0
  5595                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  5596  05C8  01FD               	clrf	___altoft@sign
  5597  05C9  00FC               	movwf	___altoft@exp
  5598  05CA  1FFB               	btfss	___altoft@c+3,7
  5599  05CB  2DD9               	goto	l2360
  5600  05CC  09F8               	comf	___altoft@c,f
  5601  05CD  09F9               	comf	___altoft@c+1,f
  5602  05CE  09FA               	comf	___altoft@c+2,f
  5603  05CF  09FB               	comf	___altoft@c+3,f
  5604  05D0  0AF8               	incf	___altoft@c,f
  5605  05D1  1903               	skipnz
  5606  05D2  0AF9               	incf	___altoft@c+1,f
  5607  05D3  1903               	skipnz
  5608  05D4  0AFA               	incf	___altoft@c+2,f
  5609  05D5  1903               	skipnz
  5610  05D6  0AFB               	incf	___altoft@c+3,f
  5611  05D7  01FD               	clrf	___altoft@sign
  5612  05D8  0AFD               	incf	___altoft@sign,f
  5613  05D9                     l2360:	
  5614  05D9  30FF               	movlw	255
  5615  05DA  057B               	andwf	___altoft@c+3,w
  5616  05DB  1903               	btfsc	3,2
  5617  05DC  2DE4               	goto	l2362
  5618  05DD  1003               	clrc
  5619  05DE  0CFB               	rrf	___altoft@c+3,f
  5620  05DF  0CFA               	rrf	___altoft@c+2,f
  5621  05E0  0CF9               	rrf	___altoft@c+1,f
  5622  05E1  0CF8               	rrf	___altoft@c,f
  5623  05E2  0AFC               	incf	___altoft@exp,f
  5624  05E3  2DD9               	goto	l2360
  5625  05E4                     l2362:	
  5626  05E4  0878               	movf	___altoft@c,w
  5627  05E5  00F0               	movwf	___ftpack@arg
  5628  05E6  0879               	movf	___altoft@c+1,w
  5629  05E7  00F1               	movwf	___ftpack@arg+1
  5630  05E8  087A               	movf	___altoft@c+2,w
  5631  05E9  00F2               	movwf	___ftpack@arg+2
  5632  05EA  087C               	movf	___altoft@exp,w
  5633  05EB  00F3               	movwf	___ftpack@exp
  5634  05EC  087D               	movf	___altoft@sign,w
  5635  05ED  00F4               	movwf	___ftpack@sign
  5636  05EE  2651               	fcall	___ftpack
  5637  05EF  0870               	movf	?___ftpack,w
  5638  05F0  00F8               	movwf	?___altoft
  5639  05F1  0871               	movf	?___ftpack+1,w
  5640  05F2  00F9               	movwf	?___altoft+1
  5641  05F3  0872               	movf	?___ftpack+2,w
  5642  05F4  00FA               	movwf	?___altoft+2
  5643  05F5  0008               	return
  5644  05F6                     __end_of___altoft:	
  5645  05F6                     __ptext13:	
  5646 ;; *************** function ___fttol *****************
  5647 ;; Defined at:
  5648 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  f1              3   42[BANK0 ] float 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  lval            4   50[BANK0 ] unsigned long 
  5653 ;;  exp1            1   54[BANK0 ] unsigned char 
  5654 ;;  sign1           1   49[BANK0 ] unsigned char 
  5655 ;; Return value:  Size  Location     Type
  5656 ;;                  4   42[BANK0 ] long 
  5657 ;; Registers used:
  5658 ;;		wreg, status,2, status,0
  5659 ;; Tracked objects:
  5660 ;;		On entry : 300/800
  5661 ;;		On exit  : 300/0
  5662 ;;		Unchanged: 0/0
  5663 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5664 ;;      Params:         0       4       0       0       0       0
  5665 ;;      Locals:         0       6       0       0       0       0
  5666 ;;      Temps:          0       3       0       0       0       0
  5667 ;;      Totals:         0      13       0       0       0       0
  5668 ;;Total ram usage:       13 bytes
  5669 ;; Hardware stack levels used:    1
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_UART_Init
  5674 ;;		_trunc
  5675 ;; This function uses a non-reentrant model
  5676 ;;
  5677                           
  5678                           
  5679                           ;psect for function ___fttol
  5680  05F6                     ___fttol:	
  5681                           
  5682                           ;incstack = 0
  5683                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  5684  05F6  27D9  120A  118A   	fcall	PL28	;call to abstracted procedure
  5685  05F9  1003               	clrc
  5686  05FA  0D5B               	rlf	??___fttol+1,w
  5687  05FB  0D5C               	rlf	??___fttol+2,w
  5688  05FC  00E2               	movwf	___fttol@exp1
  5689  05FD  0862               	movf	___fttol@exp1,w
  5690  05FE  1D03               	btfss	3,2
  5691  05FF  2E05               	goto	l2446
  5692  0600                     l2444:	
  5693  0600  01D6               	clrf	?___fttol
  5694  0601  01D7               	clrf	?___fttol+1
  5695  0602  01D8               	clrf	?___fttol+2
  5696  0603  01D9               	clrf	?___fttol+3
  5697  0604  0008               	return
  5698  0605                     l2446:	
  5699  0605  27D9  120A  118A   	fcall	PL28	;call to abstracted procedure
  5700  0608  3017               	movlw	23
  5701  0609                     u2405:	
  5702  0609  1003               	clrc
  5703  060A  0CDC               	rrf	??___fttol+2,f
  5704  060B  0CDB               	rrf	??___fttol+1,f
  5705  060C  0CDA               	rrf	??___fttol,f
  5706  060D  3EFF               	addlw	-1
  5707  060E  1D03               	skipz
  5708  060F  2E09               	goto	u2405
  5709  0610  085A               	movf	??___fttol,w
  5710  0611  00DD               	movwf	___fttol@sign1
  5711  0612  17D7               	bsf	___fttol@f1+1,7
  5712  0613  01D8               	clrf	___fttol@f1+2
  5713  0614  0856               	movf	___fttol@f1,w
  5714  0615  00DE               	movwf	___fttol@lval
  5715  0616  0857               	movf	___fttol@f1+1,w
  5716  0617  00DF               	movwf	___fttol@lval+1
  5717  0618  0858               	movf	___fttol@f1+2,w
  5718  0619  00E0               	movwf	___fttol@lval+2
  5719  061A  308E               	movlw	142
  5720  061B  01E1               	clrf	___fttol@lval+3
  5721  061C  02E2               	subwf	___fttol@exp1,f
  5722  061D  1FE2               	btfss	___fttol@exp1,7
  5723  061E  2E2C               	goto	l2466
  5724  061F  0862               	movf	___fttol@exp1,w
  5725  0620  3A80               	xorlw	128
  5726  0621  3E8F               	addlw	143
  5727  0622  1C03               	btfss	3,0
  5728  0623  2E00               	goto	l2444
  5729  0624                     l2462:	
  5730  0624  1003               	clrc
  5731  0625  0CE1               	rrf	___fttol@lval+3,f
  5732  0626  0CE0               	rrf	___fttol@lval+2,f
  5733  0627  0CDF               	rrf	___fttol@lval+1,f
  5734  0628  0CDE               	rrf	___fttol@lval,f
  5735  0629  0FE2               	incfsz	___fttol@exp1,f
  5736  062A  2E24               	goto	l2462
  5737  062B  2E3A               	goto	l2474
  5738  062C                     l2466:	
  5739  062C  3018               	movlw	24
  5740  062D  0262               	subwf	___fttol@exp1,w
  5741  062E  1803               	btfsc	3,0
  5742  062F  2E00               	goto	l2444
  5743  0630                     l2472:	
  5744  0630  0862               	movf	___fttol@exp1,w
  5745  0631  1903               	btfsc	3,2
  5746  0632  2E3A               	goto	l2474
  5747  0633  1003               	clrc
  5748  0634  0DDE               	rlf	___fttol@lval,f
  5749  0635  0DDF               	rlf	___fttol@lval+1,f
  5750  0636  0DE0               	rlf	___fttol@lval+2,f
  5751  0637  0DE1               	rlf	___fttol@lval+3,f
  5752  0638  03E2               	decf	___fttol@exp1,f
  5753  0639  2E30               	goto	l2472
  5754  063A                     l2474:	
  5755  063A  085D               	movf	___fttol@sign1,w
  5756  063B  1903               	btfsc	3,2
  5757  063C  2E48               	goto	l2478
  5758  063D  09DE               	comf	___fttol@lval,f
  5759  063E  09DF               	comf	___fttol@lval+1,f
  5760  063F  09E0               	comf	___fttol@lval+2,f
  5761  0640  09E1               	comf	___fttol@lval+3,f
  5762  0641  0ADE               	incf	___fttol@lval,f
  5763  0642  1903               	skipnz
  5764  0643  0ADF               	incf	___fttol@lval+1,f
  5765  0644  1903               	skipnz
  5766  0645  0AE0               	incf	___fttol@lval+2,f
  5767  0646  1903               	skipnz
  5768  0647  0AE1               	incf	___fttol@lval+3,f
  5769  0648                     l2478:	
  5770  0648  0861               	movf	___fttol@lval+3,w
  5771  0649  00D9               	movwf	?___fttol+3
  5772  064A  0860               	movf	___fttol@lval+2,w
  5773  064B  00D8               	movwf	?___fttol+2
  5774  064C  085F               	movf	___fttol@lval+1,w
  5775  064D  00D7               	movwf	?___fttol+1
  5776  064E  085E               	movf	___fttol@lval,w
  5777  064F  00D6               	movwf	?___fttol
  5778  0650  0008               	return
  5779  0651                     __end_of___fttol:	
  5780  0651                     __ptext19:	
  5781 ;; *************** function ___ftpack *****************
  5782 ;; Defined at:
  5783 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  arg             3    0[COMMON] unsigned um
  5786 ;;  exp             1    3[COMMON] unsigned char 
  5787 ;;  sign            1    4[COMMON] unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;		None
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  3    0[COMMON] float 
  5792 ;; Registers used:
  5793 ;;		wreg, status,2, status,0
  5794 ;; Tracked objects:
  5795 ;;		On entry : 200/900
  5796 ;;		On exit  : 200/0
  5797 ;;		Unchanged: 200/0
  5798 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5799 ;;      Params:         5       0       0       0       0       0
  5800 ;;      Locals:         0       0       0       0       0       0
  5801 ;;      Temps:          3       0       0       0       0       0
  5802 ;;      Totals:         8       0       0       0       0       0
  5803 ;;Total ram usage:        8 bytes
  5804 ;; Hardware stack levels used:    1
  5805 ;; This function calls:
  5806 ;;		Nothing
  5807 ;; This function is called by:
  5808 ;;		___altoft
  5809 ;;		___ftadd
  5810 ;;		___ftdiv
  5811 ;;		___ftmul
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           
  5816                           ;psect for function ___ftpack
  5817  0651                     ___ftpack:	
  5818                           
  5819                           ;incstack = 0
  5820                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  5821  0651  0873               	movf	___ftpack@exp,w
  5822  0652  1903               	btfsc	3,2
  5823  0653  2E59               	goto	l920
  5824  0654  0872               	movf	___ftpack@arg+2,w
  5825  0655  0471               	iorwf	___ftpack@arg+1,w
  5826  0656  0470               	iorwf	___ftpack@arg,w
  5827  0657  1D03               	skipz
  5828  0658  2E62               	goto	l2326
  5829  0659                     l920:	
  5830  0659  01F0               	clrf	?___ftpack
  5831  065A  01F1               	clrf	?___ftpack+1
  5832  065B  01F2               	clrf	?___ftpack+2
  5833  065C  0008               	return
  5834  065D                     l2324:	
  5835  065D  0AF3               	incf	___ftpack@exp,f
  5836  065E  1003               	clrc
  5837  065F  0CF2               	rrf	___ftpack@arg+2,f
  5838  0660  0CF1               	rrf	___ftpack@arg+1,f
  5839  0661  0CF0               	rrf	___ftpack@arg,f
  5840  0662                     l2326:	
  5841  0662  30FE               	movlw	254
  5842  0663  0572               	andwf	___ftpack@arg+2,w
  5843  0664  1903               	btfsc	3,2
  5844  0665  2E71               	goto	l2330
  5845  0666  2E5D               	goto	l2324
  5846  0667                     l2328:	
  5847  0667  0AF3               	incf	___ftpack@exp,f
  5848  0668  0AF0               	incf	___ftpack@arg,f
  5849  0669  1903               	skipnz
  5850  066A  0AF1               	incf	___ftpack@arg+1,f
  5851  066B  1903               	skipnz
  5852  066C  0AF2               	incf	___ftpack@arg+2,f
  5853  066D  1003               	clrc
  5854  066E  0CF2               	rrf	___ftpack@arg+2,f
  5855  066F  0CF1               	rrf	___ftpack@arg+1,f
  5856  0670  0CF0               	rrf	___ftpack@arg,f
  5857  0671                     l2330:	
  5858  0671  30FF               	movlw	255
  5859  0672  0572               	andwf	___ftpack@arg+2,w
  5860  0673  1903               	btfsc	3,2
  5861  0674  2E7F               	goto	l2334
  5862  0675  2E67               	goto	l2328
  5863  0676                     l2336:	
  5864  0676  3002               	movlw	2
  5865  0677  0273               	subwf	___ftpack@exp,w
  5866  0678  1C03               	btfss	3,0
  5867  0679  2E81               	goto	l932
  5868  067A  03F3               	decf	___ftpack@exp,f
  5869  067B  1003               	clrc
  5870  067C  0DF0               	rlf	___ftpack@arg,f
  5871  067D  0DF1               	rlf	___ftpack@arg+1,f
  5872  067E  0DF2               	rlf	___ftpack@arg+2,f
  5873  067F                     l2334:	
  5874  067F  1FF1               	btfss	___ftpack@arg+1,7
  5875  0680  2E76               	goto	l2336
  5876  0681                     l932:	
  5877  0681  1C73               	btfss	___ftpack@exp,0
  5878  0682  13F1               	bcf	___ftpack@arg+1,7
  5879  0683  1003               	clrc
  5880  0684  0CF3               	rrf	___ftpack@exp,f
  5881  0685  0873               	movf	___ftpack@exp,w
  5882  0686  00F7               	movwf	??___ftpack+2
  5883  0687  01F6               	clrf	??___ftpack+1
  5884  0688  01F5               	clrf	??___ftpack
  5885  0689  0875               	movf	??___ftpack,w
  5886  068A  04F0               	iorwf	___ftpack@arg,f
  5887  068B  0876               	movf	??___ftpack+1,w
  5888  068C  04F1               	iorwf	___ftpack@arg+1,f
  5889  068D  0877               	movf	??___ftpack+2,w
  5890  068E  04F2               	iorwf	___ftpack@arg+2,f
  5891  068F  0874               	movf	___ftpack@sign,w
  5892  0690  1D03               	btfss	3,2
  5893  0691  17F2               	bsf	___ftpack@arg+2,7
  5894  0692  0008               	return
  5895  0693                     __end_of___ftpack:	
  5896  0693                     __ptext18:	
  5897 ;; *************** function ___ftdiv *****************
  5898 ;; Defined at:
  5899 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  f2              3   15[BANK0 ] float 
  5902 ;;  f1              3   18[BANK0 ] float 
  5903 ;; Auto vars:     Size  Location     Type
  5904 ;;  f3              3   25[BANK0 ] float 
  5905 ;;  sign            1   29[BANK0 ] unsigned char 
  5906 ;;  exp             1   28[BANK0 ] unsigned char 
  5907 ;;  cntr            1   24[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  3   15[BANK0 ] float 
  5910 ;; Registers used:
  5911 ;;		wreg, status,2, status,0, pclath, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 300/800
  5914 ;;		On exit  : 300/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5917 ;;      Params:         0       6       0       0       0       0
  5918 ;;      Locals:         0       6       0       0       0       0
  5919 ;;      Temps:          0       3       0       0       0       0
  5920 ;;      Totals:         0      15       0       0       0       0
  5921 ;;Total ram usage:       15 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    1
  5924 ;; This function calls:
  5925 ;;		___ftpack
  5926 ;; This function is called by:
  5927 ;;		_UART_Init
  5928 ;; This function uses a non-reentrant model
  5929 ;;
  5930                           
  5931                           
  5932                           ;psect for function ___ftdiv
  5933  0693                     ___ftdiv:	
  5934                           
  5935                           ;incstack = 0
  5936                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  5937  0693  083E               	movf	___ftdiv@f1,w
  5938  0694  00C1               	movwf	??___ftdiv
  5939  0695  083F               	movf	___ftdiv@f1+1,w
  5940  0696  00C2               	movwf	??___ftdiv+1
  5941  0697  0840               	movf	___ftdiv@f1+2,w
  5942  0698  00C3               	movwf	??___ftdiv+2
  5943  0699  1003               	clrc
  5944  069A  0D42               	rlf	??___ftdiv+1,w
  5945  069B  0D43               	rlf	??___ftdiv+2,w
  5946  069C  00C8               	movwf	___ftdiv@exp
  5947  069D  0848               	movf	___ftdiv@exp,w
  5948  069E  1D03               	btfss	3,2
  5949  069F  2EA4               	goto	l2834
  5950  06A0  01BB               	clrf	?___ftdiv
  5951  06A1  01BC               	clrf	?___ftdiv+1
  5952  06A2  01BD               	clrf	?___ftdiv+2
  5953  06A3  0008               	return
  5954  06A4                     l2834:	
  5955  06A4  083B               	movf	___ftdiv@f2,w
  5956  06A5  00C1               	movwf	??___ftdiv
  5957  06A6  083C               	movf	___ftdiv@f2+1,w
  5958  06A7  00C2               	movwf	??___ftdiv+1
  5959  06A8  083D               	movf	___ftdiv@f2+2,w
  5960  06A9  00C3               	movwf	??___ftdiv+2
  5961  06AA  1003               	clrc
  5962  06AB  0D42               	rlf	??___ftdiv+1,w
  5963  06AC  0D43               	rlf	??___ftdiv+2,w
  5964  06AD  00C9               	movwf	___ftdiv@sign
  5965  06AE  0849               	movf	___ftdiv@sign,w
  5966  06AF  1D03               	btfss	3,2
  5967  06B0  2EB5               	goto	l974
  5968  06B1  01BB               	clrf	?___ftdiv
  5969  06B2  01BC               	clrf	?___ftdiv+1
  5970  06B3  01BD               	clrf	?___ftdiv+2
  5971  06B4  0008               	return
  5972  06B5                     l974:	
  5973  06B5  3089               	movlw	137
  5974  06B6  01C5               	clrf	___ftdiv@f3
  5975  06B7  01C6               	clrf	___ftdiv@f3+1
  5976  06B8  01C7               	clrf	___ftdiv@f3+2
  5977  06B9  0749               	addwf	___ftdiv@sign,w
  5978  06BA  00C1               	movwf	??___ftdiv
  5979  06BB  02C8               	subwf	___ftdiv@exp,f
  5980  06BC  0840               	movf	___ftdiv@f1+2,w
  5981  06BD  00C9               	movwf	___ftdiv@sign
  5982  06BE  083D               	movf	___ftdiv@f2+2,w
  5983  06BF  06C9               	xorwf	___ftdiv@sign,f
  5984  06C0  3080               	movlw	128
  5985  06C1  05C9               	andwf	___ftdiv@sign,f
  5986  06C2  3018               	movlw	24
  5987  06C3  17BF               	bsf	___ftdiv@f1+1,7
  5988  06C4  01C0               	clrf	___ftdiv@f1+2
  5989  06C5  17BC               	bsf	___ftdiv@f2+1,7
  5990  06C6  01BD               	clrf	___ftdiv@f2+2
  5991  06C7  00C4               	movwf	___ftdiv@cntr
  5992  06C8                     l2856:	
  5993  06C8  1003               	clrc
  5994  06C9  0DC5               	rlf	___ftdiv@f3,f
  5995  06CA  0DC6               	rlf	___ftdiv@f3+1,f
  5996  06CB  0DC7               	rlf	___ftdiv@f3+2,f
  5997  06CC  083D               	movf	___ftdiv@f2+2,w
  5998  06CD  0240               	subwf	___ftdiv@f1+2,w
  5999  06CE  1D03               	skipz
  6000  06CF  2ED6               	goto	u3325
  6001  06D0  083C               	movf	___ftdiv@f2+1,w
  6002  06D1  023F               	subwf	___ftdiv@f1+1,w
  6003  06D2  1D03               	skipz
  6004  06D3  2ED6               	goto	u3325
  6005  06D4  083B               	movf	___ftdiv@f2,w
  6006  06D5  023E               	subwf	___ftdiv@f1,w
  6007  06D6                     u3325:	
  6008  06D6  1C03               	skipc
  6009  06D7  2EE4               	goto	L16
  6010  06D8  083B               	movf	___ftdiv@f2,w
  6011  06D9  02BE               	subwf	___ftdiv@f1,f
  6012  06DA  083C               	movf	___ftdiv@f2+1,w
  6013  06DB  1C03               	skipc
  6014  06DC  0F3C               	incfsz	___ftdiv@f2+1,w
  6015  06DD  02BF               	subwf	___ftdiv@f1+1,f
  6016  06DE  083D               	movf	___ftdiv@f2+2,w
  6017  06DF  1C03               	skipc
  6018  06E0  0A3D               	incf	___ftdiv@f2+2,w
  6019  06E1  02C0               	subwf	___ftdiv@f1+2,f
  6020  06E2  1445               	bsf	___ftdiv@f3,0
  6021  06E3  1003               	clrc
  6022  06E4                     L16:	
  6023  06E4  0DBE               	rlf	___ftdiv@f1,f
  6024  06E5  0DBF               	rlf	___ftdiv@f1+1,f
  6025  06E6  0DC0               	rlf	___ftdiv@f1+2,f
  6026  06E7  0BC4               	decfsz	___ftdiv@cntr,f
  6027  06E8  2EC8               	goto	l2856
  6028  06E9  0845               	movf	___ftdiv@f3,w
  6029  06EA  00F0               	movwf	___ftpack@arg
  6030  06EB  0846               	movf	___ftdiv@f3+1,w
  6031  06EC  00F1               	movwf	___ftpack@arg+1
  6032  06ED  0847               	movf	___ftdiv@f3+2,w
  6033  06EE  00F2               	movwf	___ftpack@arg+2
  6034  06EF  0848               	movf	___ftdiv@exp,w
  6035  06F0  00F3               	movwf	___ftpack@exp
  6036  06F1  0849               	movf	___ftdiv@sign,w
  6037  06F2  00F4               	movwf	___ftpack@sign
  6038  06F3  2651               	fcall	___ftpack
  6039  06F4  0870               	movf	?___ftpack,w
  6040  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  6041  06F6  00BB               	movwf	?___ftdiv
  6042  06F7  0871               	movf	?___ftpack+1,w
  6043  06F8  00BC               	movwf	?___ftdiv+1
  6044  06F9  0872               	movf	?___ftpack+2,w
  6045  06FA  00BD               	movwf	?___ftdiv+2
  6046  06FB  0008               	return
  6047  06FC                     __end_of___ftdiv:	
  6048  06FC                     __ptext17:	
  6049 ;; *************** function ___ftmul *****************
  6050 ;; Defined at:
  6051 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  f1              3    0[BANK0 ] float 
  6054 ;;  f2              3    3[BANK0 ] float 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  6057 ;;  sign            1   14[BANK0 ] unsigned char 
  6058 ;;  cntr            1   13[BANK0 ] unsigned char 
  6059 ;;  exp             1    9[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;                  3    0[BANK0 ] float 
  6062 ;; Registers used:
  6063 ;;		wreg, status,2, status,0, pclath, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 300/800
  6066 ;;		On exit  : 300/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6069 ;;      Params:         0       6       0       0       0       0
  6070 ;;      Locals:         0       6       0       0       0       0
  6071 ;;      Temps:          0       3       0       0       0       0
  6072 ;;      Totals:         0      15       0       0       0       0
  6073 ;;Total ram usage:       15 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    1
  6076 ;; This function calls:
  6077 ;;		___ftpack
  6078 ;; This function is called by:
  6079 ;;		_UART_Init
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function ___ftmul
  6085  06FC                     ___ftmul:	
  6086                           
  6087                           ;incstack = 0
  6088                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6089  06FC  082C               	movf	___ftmul@f1,w
  6090  06FD  00B2               	movwf	??___ftmul
  6091  06FE  082D               	movf	___ftmul@f1+1,w
  6092  06FF  00B3               	movwf	??___ftmul+1
  6093  0700  082E               	movf	___ftmul@f1+2,w
  6094  0701  00B4               	movwf	??___ftmul+2
  6095  0702  1003               	clrc
  6096  0703  0D33               	rlf	??___ftmul+1,w
  6097  0704  0D34               	rlf	??___ftmul+2,w
  6098  0705  00B5               	movwf	___ftmul@exp
  6099  0706  0835               	movf	___ftmul@exp,w
  6100  0707  1D03               	btfss	3,2
  6101  0708  2F0D               	goto	l2874
  6102  0709  01AC               	clrf	?___ftmul
  6103  070A  01AD               	clrf	?___ftmul+1
  6104  070B  01AE               	clrf	?___ftmul+2
  6105  070C  0008               	return
  6106  070D                     l2874:	
  6107  070D  082F               	movf	___ftmul@f2,w
  6108  070E  00B2               	movwf	??___ftmul
  6109  070F  0830               	movf	___ftmul@f2+1,w
  6110  0710  00B3               	movwf	??___ftmul+1
  6111  0711  0831               	movf	___ftmul@f2+2,w
  6112  0712  00B4               	movwf	??___ftmul+2
  6113  0713  1003               	clrc
  6114  0714  0D33               	rlf	??___ftmul+1,w
  6115  0715  0D34               	rlf	??___ftmul+2,w
  6116  0716  00BA               	movwf	___ftmul@sign
  6117  0717  083A               	movf	___ftmul@sign,w
  6118  0718  1D03               	btfss	3,2
  6119  0719  2F1E               	goto	l2878
  6120  071A  01AC               	clrf	?___ftmul
  6121  071B  01AD               	clrf	?___ftmul+1
  6122  071C  01AE               	clrf	?___ftmul+2
  6123  071D  0008               	return
  6124  071E                     l2878:	
  6125  071E  083A               	movf	___ftmul@sign,w
  6126  071F  3E7B               	addlw	123
  6127  0720  07B5               	addwf	___ftmul@exp,f
  6128  0721  082E               	movf	___ftmul@f1+2,w
  6129  0722  00BA               	movwf	___ftmul@sign
  6130  0723  0831               	movf	___ftmul@f2+2,w
  6131  0724  06BA               	xorwf	___ftmul@sign,f
  6132  0725  3080               	movlw	128
  6133  0726  05BA               	andwf	___ftmul@sign,f
  6134  0727  3007               	movlw	7
  6135  0728  17AD               	bsf	___ftmul@f1+1,7
  6136  0729  17B0               	bsf	___ftmul@f2+1,7
  6137  072A  01B1               	clrf	___ftmul@f2+2
  6138  072B  01B6               	clrf	___ftmul@f3_as_product
  6139  072C  01B7               	clrf	___ftmul@f3_as_product+1
  6140  072D  01B8               	clrf	___ftmul@f3_as_product+2
  6141  072E  00B9               	movwf	___ftmul@cntr
  6142  072F                     l2896:	
  6143  072F  1C2C               	btfss	___ftmul@f1,0
  6144  0730  2F38               	goto	l2900
  6145  0731  27CE  120A  118A   	fcall	PL18	;call to abstracted procedure
  6146  0734  1803               	skipnc
  6147  0735  0A31               	incf	___ftmul@f2+2,w
  6148  0736  1D03               	btfss	3,2
  6149  0737  07B8               	addwf	___ftmul@f3_as_product+2,f
  6150  0738                     l2900:	
  6151  0738  1003               	clrc
  6152  0739  0CAE               	rrf	___ftmul@f1+2,f
  6153  073A  0CAD               	rrf	___ftmul@f1+1,f
  6154  073B  0CAC               	rrf	___ftmul@f1,f
  6155  073C  1003               	clrc
  6156  073D  0DAF               	rlf	___ftmul@f2,f
  6157  073E  0DB0               	rlf	___ftmul@f2+1,f
  6158  073F  0DB1               	rlf	___ftmul@f2+2,f
  6159  0740  0BB9               	decfsz	___ftmul@cntr,f
  6160  0741  2F2F               	goto	l2896
  6161  0742  3009               	movlw	9
  6162  0743  00B9               	movwf	___ftmul@cntr
  6163  0744                     l2908:	
  6164  0744  1C2C               	btfss	___ftmul@f1,0
  6165  0745  2F4D               	goto	l2912
  6166  0746  27CE  120A  118A   	fcall	PL18	;call to abstracted procedure
  6167  0749  1803               	skipnc
  6168  074A  0A31               	incf	___ftmul@f2+2,w
  6169  074B  1D03               	btfss	3,2
  6170  074C  07B8               	addwf	___ftmul@f3_as_product+2,f
  6171  074D                     l2912:	
  6172  074D  1003               	clrc
  6173  074E  0CAE               	rrf	___ftmul@f1+2,f
  6174  074F  0CAD               	rrf	___ftmul@f1+1,f
  6175  0750  0CAC               	rrf	___ftmul@f1,f
  6176  0751  1003               	clrc
  6177  0752  0CB8               	rrf	___ftmul@f3_as_product+2,f
  6178  0753  0CB7               	rrf	___ftmul@f3_as_product+1,f
  6179  0754  0CB6               	rrf	___ftmul@f3_as_product,f
  6180  0755  0BB9               	decfsz	___ftmul@cntr,f
  6181  0756  2F44               	goto	l2908
  6182  0757  0836               	movf	___ftmul@f3_as_product,w
  6183  0758  00F0               	movwf	___ftpack@arg
  6184  0759  0837               	movf	___ftmul@f3_as_product+1,w
  6185  075A  00F1               	movwf	___ftpack@arg+1
  6186  075B  0838               	movf	___ftmul@f3_as_product+2,w
  6187  075C  00F2               	movwf	___ftpack@arg+2
  6188  075D  0835               	movf	___ftmul@exp,w
  6189  075E  00F3               	movwf	___ftpack@exp
  6190  075F  083A               	movf	___ftmul@sign,w
  6191  0760  00F4               	movwf	___ftpack@sign
  6192  0761  2651               	fcall	___ftpack
  6193  0762  0870               	movf	?___ftpack,w
  6194  0763  1283               	bcf	3,5	;RP0=0, select bank0
  6195  0764  00AC               	movwf	?___ftmul
  6196  0765  0871               	movf	?___ftpack+1,w
  6197  0766  00AD               	movwf	?___ftmul+1
  6198  0767  0872               	movf	?___ftpack+2,w
  6199  0768  00AE               	movwf	?___ftmul+2
  6200  0769  0008               	return
  6201  076A                     __end_of___ftmul:	
  6202  076A                     __ptext15:	
  6203 ;; *************** function ___ftsub *****************
  6204 ;; Defined at:
  6205 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  6206 ;; Parameters:    Size  Location     Type
  6207 ;;  f2              3    0[BANK1 ] float 
  6208 ;;  f1              3    3[BANK1 ] float 
  6209 ;; Auto vars:     Size  Location     Type
  6210 ;;		None
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  3    0[BANK1 ] float 
  6213 ;; Registers used:
  6214 ;;		wreg, status,2, status,0, pclath, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 300/900
  6217 ;;		On exit  : 300/100
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6220 ;;      Params:         0       0       6       0       0       0
  6221 ;;      Locals:         0       0       0       0       0       0
  6222 ;;      Temps:          0       0       0       0       0       0
  6223 ;;      Totals:         0       0       6       0       0       0
  6224 ;;Total ram usage:        6 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    2
  6227 ;; This function calls:
  6228 ;;		___ftadd
  6229 ;; This function is called by:
  6230 ;;		_round
  6231 ;; This function uses a non-reentrant model
  6232 ;;
  6233                           
  6234                           
  6235                           ;psect for function ___ftsub
  6236  076A                     ___ftsub:	
  6237                           
  6238                           ;incstack = 0
  6239                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6240  076A  0854               	movf	(___ftsub@f2+2)^(0+128),w
  6241  076B  0453               	iorwf	(___ftsub@f2+1)^(0+128),w
  6242  076C  0452               	iorwf	___ftsub@f2^(0+128),w
  6243  076D  1903               	skipnz
  6244  076E  2F71               	goto	l2600
  6245  076F  3080               	movlw	128
  6246  0770  06D4               	xorwf	(___ftsub@f2+2)^(0+128),f
  6247  0771                     l2600:	
  6248  0771  0855               	movf	___ftsub@f1^(0+128),w
  6249  0772  1283               	bcf	3,5	;RP0=0, select bank0
  6250  0773  00CA               	movwf	___ftadd@f1
  6251  0774  1683               	bsf	3,5	;RP0=1, select bank1
  6252  0775  0856               	movf	(___ftsub@f1+1)^(0+128),w
  6253  0776  1283               	bcf	3,5	;RP0=0, select bank0
  6254  0777  00CB               	movwf	___ftadd@f1+1
  6255  0778  1683               	bsf	3,5	;RP0=1, select bank1
  6256  0779  0857               	movf	(___ftsub@f1+2)^(0+128),w
  6257  077A  1283               	bcf	3,5	;RP0=0, select bank0
  6258  077B  00CC               	movwf	___ftadd@f1+2
  6259  077C  1683               	bsf	3,5	;RP0=1, select bank1
  6260  077D  0852               	movf	___ftsub@f2^(0+128),w
  6261  077E  1283               	bcf	3,5	;RP0=0, select bank0
  6262  077F  00CD               	movwf	___ftadd@f2
  6263  0780  1683               	bsf	3,5	;RP0=1, select bank1
  6264  0781  0853               	movf	(___ftsub@f2+1)^(0+128),w
  6265  0782  1283               	bcf	3,5	;RP0=0, select bank0
  6266  0783  00CE               	movwf	___ftadd@f2+1
  6267  0784  1683               	bsf	3,5	;RP0=1, select bank1
  6268  0785  0854               	movf	(___ftsub@f2+2)^(0+128),w
  6269  0786  1283               	bcf	3,5	;RP0=0, select bank0
  6270  0787  00CF               	movwf	___ftadd@f2+2
  6271  0788  2506               	fcall	___ftadd
  6272  0789  084A               	movf	?___ftadd,w
  6273  078A  1683               	bsf	3,5	;RP0=1, select bank1
  6274  078B  00D2               	movwf	?___ftsub^(0+128)
  6275  078C  1283               	bcf	3,5	;RP0=0, select bank0
  6276  078D  084B               	movf	?___ftadd+1,w
  6277  078E  1683               	bsf	3,5	;RP0=1, select bank1
  6278  078F  00D3               	movwf	(?___ftsub+1)^(0+128)
  6279  0790  1283               	bcf	3,5	;RP0=0, select bank0
  6280  0791  084C               	movf	?___ftadd+2,w
  6281  0792  1683               	bsf	3,5	;RP0=1, select bank1
  6282  0793  00D4               	movwf	(?___ftsub+2)^(0+128)
  6283  0794  0008               	return
  6284  0795                     __end_of___ftsub:	
  6285  0795                     __ptext12:	
  6286 ;; *************** function _frexp *****************
  6287 ;; Defined at:
  6288 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;  value           3    0[COMMON] int 
  6291 ;;  eptr            1    3[COMMON] PTR int 
  6292 ;;		 -> trunc@expon(2), 
  6293 ;; Auto vars:     Size  Location     Type
  6294 ;;		None
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  3    0[COMMON] PTR int 
  6297 ;; Registers used:
  6298 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6299 ;; Tracked objects:
  6300 ;;		On entry : 300/800
  6301 ;;		On exit  : B00/0
  6302 ;;		Unchanged: 300/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6304 ;;      Params:         4       0       0       0       0       0
  6305 ;;      Locals:         0       0       0       0       0       0
  6306 ;;      Temps:          2       0       0       0       0       0
  6307 ;;      Totals:         6       0       0       0       0       0
  6308 ;;Total ram usage:        6 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_trunc
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           
  6318                           ;psect for function _frexp
  6319  0795                     _frexp:	
  6320                           
  6321                           ;incstack = 0
  6322                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  6323  0795  0872               	movf	frexp@value+2,w
  6324  0796  0471               	iorwf	frexp@value+1,w
  6325  0797  0470               	iorwf	frexp@value,w
  6326  0798  1D03               	skipz
  6327  0799  2FA1               	goto	l2488
  6328  079A  0873               	movf	frexp@eptr,w
  6329  079B  0084               	movwf	4
  6330  079C  1383               	bcf	3,7	;select IRP bank0
  6331  079D  0180               	clrf	0
  6332  079E  0A84               	incf	4,f
  6333  079F  0180               	clrf	0
  6334  07A0  0008               	return
  6335  07A1                     l2488:	
  6336  07A1  0872               	movf	frexp@value+2,w
  6337  07A2  397F               	andlw	127
  6338  07A3  00F4               	movwf	??_frexp
  6339  07A4  01F5               	clrf	??_frexp+1
  6340  07A5  1003               	clrc
  6341  07A6  0DF4               	rlf	??_frexp,f
  6342  07A7  0DF5               	rlf	??_frexp+1,f
  6343  07A8  0873               	movf	frexp@eptr,w
  6344  07A9  0084               	movwf	4
  6345  07AA  0874               	movf	??_frexp,w
  6346  07AB  1383               	bcf	3,7	;select IRP bank0
  6347  07AC  0080               	movwf	0
  6348  07AD  0A84               	incf	4,f
  6349  07AE  0875               	movf	??_frexp+1,w
  6350  07AF  0080               	movwf	0
  6351  07B0  0D71               	rlf	frexp@value+1,w
  6352  07B1  0D71               	rlf	frexp@value+1,w
  6353  07B2  3901               	andlw	1
  6354  07B3  00F4               	movwf	??_frexp
  6355  07B4  01F5               	clrf	??_frexp+1
  6356  07B5  0873               	movf	frexp@eptr,w
  6357  07B6  0084               	movwf	4
  6358  07B7  0874               	movf	??_frexp,w
  6359  07B8  0480               	iorwf	0,f
  6360  07B9  0A84               	incf	4,f
  6361  07BA  0875               	movf	??_frexp+1,w
  6362  07BB  0480               	iorwf	0,f
  6363  07BC  0873               	movf	frexp@eptr,w
  6364  07BD  0084               	movwf	4
  6365  07BE  3082               	movlw	130
  6366  07BF  0780               	addwf	0,f
  6367  07C0  0F84               	incfsz	4,f
  6368  07C1  0800               	movf	0,w
  6369  07C2  1803               	skipnc
  6370  07C3  0A00               	incf	0,w
  6371  07C4  00FF               	movwf	127
  6372  07C5  3EFF               	addlw	255
  6373  07C6  0080               	movwf	0
  6374  07C7  0384               	decf	4,f
  6375  07C8  0872               	movf	frexp@value+2,w
  6376  07C9  3980               	andlw	-128
  6377  07CA  383F               	iorlw	63
  6378  07CB  00F2               	movwf	frexp@value+2
  6379  07CC  13F1               	bcf	frexp@value+1,7
  6380  07CD  0008               	return
  6381  07CE                     __end_of_frexp:	
  6382  07CE                     PL18:	
  6383  07CE  082F               	movf	___ftmul@f2,w
  6384  07CF  07B6               	addwf	___ftmul@f3_as_product,f
  6385  07D0  0830               	movf	___ftmul@f2+1,w
  6386  07D1  1103               	clrz
  6387  07D2  1803               	skipnc
  6388  07D3  0A30               	incf	___ftmul@f2+1,w
  6389  07D4  1D03               	btfss	3,2
  6390  07D5  07B7               	addwf	___ftmul@f3_as_product+1,f
  6391  07D6  0831               	movf	___ftmul@f2+2,w
  6392  07D7  1103               	clrz
  6393  07D8  0008               	return
  6394  07D9                     __end_ofPL18:	
  6395  07D9                     PL28:	
  6396  07D9  0856               	movf	___fttol@f1,w
  6397  07DA  00DA               	movwf	??___fttol
  6398  07DB  0857               	movf	___fttol@f1+1,w
  6399  07DC  00DB               	movwf	??___fttol+1
  6400  07DD  0858               	movf	___fttol@f1+2,w
  6401  07DE  00DC               	movwf	??___fttol+2
  6402  07DF  0008               	return
  6403  07E0                     __end_ofPL28:	
  6404  07E0                     PL38:	
  6405  07E0  086B               	movf	round@x,w
  6406  07E1  00E3               	movwf	trunc@x
  6407  07E2  086C               	movf	round@x+1,w
  6408  07E3  00E4               	movwf	trunc@x+1
  6409  07E4  086D               	movf	round@x+2,w
  6410  07E5  00E5               	movwf	trunc@x+2
  6411  07E6  0008               	return
  6412  07E7                     __end_ofPL38:	
  6413                           
  6414                           	psect	text20
  6415  0007                     __ptext20:	
  6416 ;; *************** function _SwitchGPS *****************
  6417 ;; Defined at:
  6418 ;;		line 51 in file "libs/gsk_algo_funcs.c"
  6419 ;; Parameters:    Size  Location     Type
  6420 ;;  a               1    wreg     unsigned char 
  6421 ;; Auto vars:     Size  Location     Type
  6422 ;;  a               1    0[COMMON] unsigned char 
  6423 ;; Return value:  Size  Location     Type
  6424 ;;                  1    wreg      void 
  6425 ;; Registers used:
  6426 ;;		wreg
  6427 ;; Tracked objects:
  6428 ;;		On entry : 300/A00
  6429 ;;		On exit  : 300/0
  6430 ;;		Unchanged: 0/0
  6431 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6432 ;;      Params:         0       0       0       0       0       0
  6433 ;;      Locals:         1       0       0       0       0       0
  6434 ;;      Temps:          0       0       0       0       0       0
  6435 ;;      Totals:         1       0       0       0       0       0
  6436 ;;Total ram usage:        1 bytes
  6437 ;; Hardware stack levels used:    1
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_main
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           
  6446                           ;psect for function _SwitchGPS
  6447  0007                     _SwitchGPS:	
  6448                           
  6449                           ;incstack = 0
  6450                           ; Regs used in _SwitchGPS: [wreg]
  6451                           ;SwitchGPS@a stored from wreg
  6452  0007  00F0               	movwf	SwitchGPS@a
  6453                           
  6454                           ;gsk_algo_funcs.c: 52: RC1 = a;
  6455  0008  1C70               	btfss	SwitchGPS@a,0
  6456  0009  280E               	goto	u3750
  6457  000A  1283               	bcf	3,5	;RP0=0, select bank0
  6458  000B  1303               	bcf	3,6	;RP1=0, select bank0
  6459  000C  1487               	bsf	7,1	;volatile
  6460  000D  0008               	return
  6461  000E                     u3750:	
  6462  000E  1283               	bcf	3,5	;RP0=0, select bank0
  6463  000F  1303               	bcf	3,6	;RP1=0, select bank0
  6464  0010  1087               	bcf	7,1	;volatile
  6465  0011  0008               	return
  6466  0012                     __end_of_SwitchGPS:	
  6467                           
  6468                           	psect	text24
  6469  0B58                     __ptext24:	
  6470 ;; *************** function _ReadRTCAsSec *****************
  6471 ;; Defined at:
  6472 ;;		line 27 in file "libs/gsk_RTC_GPS.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;		None
  6475 ;; Auto vars:     Size  Location     Type
  6476 ;;  Out             4   13[BANK0 ] long 
  6477 ;;  TempVar000      1   17[BANK0 ] unsigned char 
  6478 ;; Return value:  Size  Location     Type
  6479 ;;                  4    0[BANK0 ] long 
  6480 ;; Registers used:
  6481 ;;		wreg, status,2, status,0, pclath, cstack
  6482 ;; Tracked objects:
  6483 ;;		On entry : 0/900
  6484 ;;		On exit  : 300/0
  6485 ;;		Unchanged: 0/0
  6486 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6487 ;;      Params:         0       4       0       0       0       0
  6488 ;;      Locals:         0       7       0       0       0       0
  6489 ;;      Temps:          0       7       0       0       0       0
  6490 ;;      Totals:         0      18       0       0       0       0
  6491 ;;Total ram usage:       18 bytes
  6492 ;; Hardware stack levels used:    1
  6493 ;; Hardware stack levels required when called:    3
  6494 ;; This function calls:
  6495 ;;		_I2C_ReadAtAddress
  6496 ;;		___lmul
  6497 ;;		___wmul
  6498 ;; This function is called by:
  6499 ;;		_main
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _ReadRTCAsSec
  6505  0B58                     _ReadRTCAsSec:	
  6506                           
  6507                           ;gsk_RTC_GPS.c: 30: TempVar000 = I2C_ReadAtAddress(0xde, 0x02);
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _ReadRTCAsSec: [wreg+status,2+status,0+pclath+cstack]
  6511  0B58  3002               	movlw	2
  6512  0B59  00F4               	movwf	I2C_ReadAtAddress@IntAdd
  6513  0B5A  30DE               	movlw	222
  6514  0B5B  2427  120A  158A   	fcall	_I2C_ReadAtAddress
  6515  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  6516  0B5F  00BD               	movwf	ReadRTCAsSec@TempVar000
  6517                           
  6518                           ;gsk_RTC_GPS.c: 31: Out = ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x03)*10);
  6519  0B60  390F               	andlw	15
  6520  0B61  00B0               	movwf	??_ReadRTCAsSec
  6521  0B62  0E3D               	swapf	ReadRTCAsSec@TempVar000,w
  6522  0B63  390F               	andlw	15
  6523  0B64  3903               	andlw	3
  6524  0B65  00F0               	movwf	___wmul@multiplier
  6525  0B66  300A               	movlw	10
  6526  0B67  01F1               	clrf	___wmul@multiplier+1
  6527  0B68  00F2               	movwf	___wmul@multiplicand
  6528  0B69  01F3               	clrf	___wmul@multiplicand+1
  6529  0B6A  240E  120A  158A   	fcall	___wmul
  6530  0B6D  0830               	movf	??_ReadRTCAsSec,w
  6531  0B6E  0770               	addwf	?___wmul,w
  6532  0B6F  00B9               	movwf	ReadRTCAsSec@Out
  6533  0B70  3000               	movlw	0
  6534  0B71  1803               	skipnc
  6535  0B72  3001               	movlw	1
  6536  0B73  0771               	addwf	?___wmul+1,w
  6537  0B74  00BA               	movwf	ReadRTCAsSec@Out+1
  6538  0B75  01BB               	clrf	ReadRTCAsSec@Out+2
  6539  0B76  1BBA               	btfsc	ReadRTCAsSec@Out+1,7
  6540  0B77  03BB               	decf	ReadRTCAsSec@Out+2,f
  6541  0B78  083B               	movf	ReadRTCAsSec@Out+2,w
  6542  0B79  00BC               	movwf	ReadRTCAsSec@Out+3
  6543                           
  6544                           ;gsk_RTC_GPS.c: 32: Out = Out*3600;
  6545  0B7A  300E               	movlw	14
  6546  0B7B  01F3               	clrf	___lmul@multiplier+3
  6547  0B7C  01F2               	clrf	___lmul@multiplier+2
  6548  0B7D  00F1               	movwf	___lmul@multiplier+1
  6549  0B7E  3010               	movlw	16
  6550  0B7F  00F0               	movwf	___lmul@multiplier
  6551  0B80  083C               	movf	ReadRTCAsSec@Out+3,w
  6552  0B81  00F7               	movwf	___lmul@multiplicand+3
  6553  0B82  083B               	movf	ReadRTCAsSec@Out+2,w
  6554  0B83  00F6               	movwf	___lmul@multiplicand+2
  6555  0B84  083A               	movf	ReadRTCAsSec@Out+1,w
  6556  0B85  00F5               	movwf	___lmul@multiplicand+1
  6557  0B86  0839               	movf	ReadRTCAsSec@Out,w
  6558  0B87  00F4               	movwf	___lmul@multiplicand
  6559  0B88  2483  120A  158A   	fcall	___lmul
  6560  0B8B  0873               	movf	?___lmul+3,w
  6561  0B8C  00BC               	movwf	ReadRTCAsSec@Out+3
  6562  0B8D  0872               	movf	?___lmul+2,w
  6563  0B8E  00BB               	movwf	ReadRTCAsSec@Out+2
  6564  0B8F  0871               	movf	?___lmul+1,w
  6565  0B90  00BA               	movwf	ReadRTCAsSec@Out+1
  6566  0B91  0870               	movf	?___lmul,w
  6567  0B92  00B9               	movwf	ReadRTCAsSec@Out
  6568  0B93  30DE               	movlw	222
  6569                           
  6570                           ;gsk_RTC_GPS.c: 34: TempVar000 = I2C_ReadAtAddress(0xde, 0x01);
  6571  0B94  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  6572  0B95  0AF4               	incf	I2C_ReadAtAddress@IntAdd,f
  6573  0B96  2427  120A  158A   	fcall	_I2C_ReadAtAddress
  6574  0B99  1283               	bcf	3,5	;RP0=0, select bank0
  6575  0B9A  00BD               	movwf	ReadRTCAsSec@TempVar000
  6576                           
  6577                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  6578  0B9B  24B6  120A  158A   	fcall	PL22	;call to abstracted procedure
  6579  0B9E  240E  120A  158A   	fcall	___wmul
  6580  0BA1  0871               	movf	?___wmul+1,w
  6581  0BA2  00B8               	movwf	_ReadRTCAsSec$1004+1
  6582  0BA3  0870               	movf	?___wmul,w
  6583  0BA4  00B7               	movwf	_ReadRTCAsSec$1004
  6584  0BA5  083D               	movf	ReadRTCAsSec@TempVar000,w
  6585  0BA6  390F               	andlw	15
  6586  0BA7  07B7               	addwf	_ReadRTCAsSec$1004,f
  6587  0BA8  1803               	skipnc
  6588  0BA9  0AB8               	incf	_ReadRTCAsSec$1004+1,f
  6589                           
  6590                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  6591  0BAA  0838               	movf	_ReadRTCAsSec$1004+1,w
  6592  0BAB  00F1               	movwf	___wmul@multiplier+1
  6593  0BAC  0837               	movf	_ReadRTCAsSec$1004,w
  6594  0BAD  00F0               	movwf	___wmul@multiplier
  6595  0BAE  303C               	movlw	60
  6596  0BAF  00F2               	movwf	___wmul@multiplicand
  6597  0BB0  01F3               	clrf	___wmul@multiplicand+1
  6598  0BB1  240E  120A  158A   	fcall	___wmul
  6599  0BB4  0870               	movf	?___wmul,w
  6600  0BB5  00B0               	movwf	??_ReadRTCAsSec
  6601  0BB6  0871               	movf	?___wmul+1,w
  6602  0BB7  00B1               	movwf	??_ReadRTCAsSec+1
  6603  0BB8  3000               	movlw	0
  6604  0BB9  1BB1               	btfsc	??_ReadRTCAsSec+1,7
  6605  0BBA  30FF               	movlw	255
  6606  0BBB  00B2               	movwf	??_ReadRTCAsSec+2
  6607  0BBC  00B3               	movwf	??_ReadRTCAsSec+3
  6608  0BBD  0830               	movf	??_ReadRTCAsSec,w
  6609  0BBE  07B9               	addwf	ReadRTCAsSec@Out,f
  6610  0BBF  0831               	movf	??_ReadRTCAsSec+1,w
  6611  0BC0  1103               	clrz
  6612  0BC1  1803               	skipnc
  6613  0BC2  3E01               	addlw	1
  6614  0BC3  1D03               	btfss	3,2
  6615  0BC4  07BA               	addwf	ReadRTCAsSec@Out+1,f
  6616  0BC5  0832               	movf	??_ReadRTCAsSec+2,w
  6617  0BC6  1103               	clrz
  6618  0BC7  1803               	skipnc
  6619  0BC8  3E01               	addlw	1
  6620  0BC9  1D03               	btfss	3,2
  6621  0BCA  07BB               	addwf	ReadRTCAsSec@Out+2,f
  6622  0BCB  0833               	movf	??_ReadRTCAsSec+3,w
  6623  0BCC  1103               	clrz
  6624  0BCD  1803               	skipnc
  6625  0BCE  3E01               	addlw	1
  6626  0BCF  1D03               	btfss	3,2
  6627  0BD0  07BC               	addwf	ReadRTCAsSec@Out+3,f
  6628  0BD1  30DE               	movlw	222
  6629                           
  6630                           ;gsk_RTC_GPS.c: 37: TempVar000 = I2C_ReadAtAddress(0xde, 0x00);
  6631  0BD2  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  6632  0BD3  2427  120A  158A   	fcall	_I2C_ReadAtAddress
  6633  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
  6634  0BD7  00BD               	movwf	ReadRTCAsSec@TempVar000
  6635                           
  6636                           ;gsk_RTC_GPS.c: 38: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10);
  6637  0BD8  390F               	andlw	15
  6638  0BD9  00B0               	movwf	??_ReadRTCAsSec
  6639  0BDA  24B6  120A  158A   	fcall	PL22	;call to abstracted procedure
  6640  0BDD  240E  120A  158A   	fcall	___wmul
  6641  0BE0  0830               	movf	??_ReadRTCAsSec,w
  6642  0BE1  0770               	addwf	?___wmul,w
  6643  0BE2  00B1               	movwf	??_ReadRTCAsSec+1
  6644  0BE3  3000               	movlw	0
  6645  0BE4  1803               	skipnc
  6646  0BE5  3001               	movlw	1
  6647  0BE6  0771               	addwf	?___wmul+1,w
  6648  0BE7  00B2               	movwf	??_ReadRTCAsSec+2
  6649  0BE8  0831               	movf	??_ReadRTCAsSec+1,w
  6650  0BE9  00B3               	movwf	??_ReadRTCAsSec+3
  6651  0BEA  0832               	movf	??_ReadRTCAsSec+2,w
  6652  0BEB  00B4               	movwf	??_ReadRTCAsSec+4
  6653  0BEC  3000               	movlw	0
  6654  0BED  1BB4               	btfsc	??_ReadRTCAsSec+4,7
  6655  0BEE  30FF               	movlw	255
  6656  0BEF  00B5               	movwf	??_ReadRTCAsSec+5
  6657  0BF0  00B6               	movwf	??_ReadRTCAsSec+6
  6658  0BF1  0833               	movf	??_ReadRTCAsSec+3,w
  6659  0BF2  07B9               	addwf	ReadRTCAsSec@Out,f
  6660  0BF3  0834               	movf	??_ReadRTCAsSec+4,w
  6661  0BF4  1103               	clrz
  6662  0BF5  1803               	skipnc
  6663  0BF6  3E01               	addlw	1
  6664  0BF7  1D03               	btfss	3,2
  6665  0BF8  07BA               	addwf	ReadRTCAsSec@Out+1,f
  6666  0BF9  0835               	movf	??_ReadRTCAsSec+5,w
  6667  0BFA  1103               	clrz
  6668  0BFB  1803               	skipnc
  6669  0BFC  3E01               	addlw	1
  6670  0BFD  1D03               	btfss	3,2
  6671  0BFE  07BB               	addwf	ReadRTCAsSec@Out+2,f
  6672  0BFF  0836               	movf	??_ReadRTCAsSec+6,w
  6673  0C00  1103               	clrz
  6674  0C01  1803               	skipnc
  6675  0C02  3E01               	addlw	1
  6676  0C03  1D03               	btfss	3,2
  6677  0C04  07BC               	addwf	ReadRTCAsSec@Out+3,f
  6678                           
  6679                           ;gsk_RTC_GPS.c: 39: return Out;
  6680  0C05  083C               	movf	ReadRTCAsSec@Out+3,w
  6681  0C06  00AF               	movwf	?_ReadRTCAsSec+3
  6682  0C07  083B               	movf	ReadRTCAsSec@Out+2,w
  6683  0C08  00AE               	movwf	?_ReadRTCAsSec+2
  6684  0C09  083A               	movf	ReadRTCAsSec@Out+1,w
  6685  0C0A  00AD               	movwf	?_ReadRTCAsSec+1
  6686  0C0B  0839               	movf	ReadRTCAsSec@Out,w
  6687  0C0C  00AC               	movwf	?_ReadRTCAsSec
  6688  0C0D  0008               	return
  6689  0C0E                     __end_of_ReadRTCAsSec:	
  6690  0C0E                     __ptext25:	
  6691 ;; *************** function ___wmul *****************
  6692 ;; Defined at:
  6693 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;  multiplier      2    0[COMMON] unsigned int 
  6696 ;;  multiplicand    2    2[COMMON] unsigned int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  product         2    4[COMMON] unsigned int 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  2    0[COMMON] unsigned int 
  6701 ;; Registers used:
  6702 ;;		wreg, status,2, status,0
  6703 ;; Tracked objects:
  6704 ;;		On entry : 300/800
  6705 ;;		On exit  : 300/0
  6706 ;;		Unchanged: 300/0
  6707 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6708 ;;      Params:         4       0       0       0       0       0
  6709 ;;      Locals:         2       0       0       0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0
  6711 ;;      Totals:         6       0       0       0       0       0
  6712 ;;Total ram usage:        6 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		_ReadRTCAsSec
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           
  6722                           ;psect for function ___wmul
  6723  0C0E                     ___wmul:	
  6724                           
  6725                           ;incstack = 0
  6726                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6727  0C0E  01F4               	clrf	___wmul@product
  6728  0C0F  01F5               	clrf	___wmul@product+1
  6729  0C10                     l2750:	
  6730  0C10  1C70               	btfss	___wmul@multiplier,0
  6731  0C11  2C18               	goto	l2754
  6732  0C12  0872               	movf	___wmul@multiplicand,w
  6733  0C13  07F4               	addwf	___wmul@product,f
  6734  0C14  1803               	skipnc
  6735  0C15  0AF5               	incf	___wmul@product+1,f
  6736  0C16  0873               	movf	___wmul@multiplicand+1,w
  6737  0C17  07F5               	addwf	___wmul@product+1,f
  6738  0C18                     l2754:	
  6739  0C18  1003               	clrc
  6740  0C19  0DF2               	rlf	___wmul@multiplicand,f
  6741  0C1A  0DF3               	rlf	___wmul@multiplicand+1,f
  6742  0C1B  1003               	clrc
  6743  0C1C  0CF1               	rrf	___wmul@multiplier+1,f
  6744  0C1D  0CF0               	rrf	___wmul@multiplier,f
  6745  0C1E  0870               	movf	___wmul@multiplier,w
  6746  0C1F  0471               	iorwf	___wmul@multiplier+1,w
  6747  0C20  1D03               	btfss	3,2
  6748  0C21  2C10               	goto	l2750
  6749  0C22  0875               	movf	___wmul@product+1,w
  6750  0C23  00F1               	movwf	?___wmul+1
  6751  0C24  0874               	movf	___wmul@product,w
  6752  0C25  00F0               	movwf	?___wmul
  6753  0C26  0008               	return
  6754  0C27                     __end_of___wmul:	
  6755  0C27                     __ptext27:	
  6756 ;; *************** function _I2C_ReadAtAddress *****************
  6757 ;; Defined at:
  6758 ;;		line 55 in file "libs/gsk_i2c.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;  DevID           1    wreg     unsigned char 
  6761 ;;  IntAdd          1    4[COMMON] unsigned char 
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  DevID           1    6[COMMON] unsigned char 
  6764 ;;  data            1    5[COMMON] unsigned char 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;                  1    wreg      unsigned char 
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, status,0, pclath, cstack
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/900
  6771 ;;		On exit  : 300/100
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6774 ;;      Params:         1       0       0       0       0       0
  6775 ;;      Locals:         2       0       0       0       0       0
  6776 ;;      Temps:          0       0       0       0       0       0
  6777 ;;      Totals:         3       0       0       0       0       0
  6778 ;;Total ram usage:        3 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; Hardware stack levels required when called:    2
  6781 ;; This function calls:
  6782 ;;		_I2C_Master_Read
  6783 ;;		_I2C_Master_Start
  6784 ;;		_I2C_Master_Stop
  6785 ;;		_I2C_Master_Write
  6786 ;; This function is called by:
  6787 ;;		_ReadRTCAsSec
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           
  6792                           ;psect for function _I2C_ReadAtAddress
  6793  0C27                     _I2C_ReadAtAddress:	
  6794                           
  6795                           ;incstack = 0
  6796                           ; Regs used in _I2C_ReadAtAddress: [wreg+status,2+status,0+pclath+cstack]
  6797                           ;I2C_ReadAtAddress@DevID stored from wreg
  6798  0C27  00F6               	movwf	I2C_ReadAtAddress@DevID
  6799                           
  6800                           ;gsk_i2c.c: 57: I2C_Master_Start();
  6801  0C28  2455  120A  158A   	fcall	_I2C_Master_Start
  6802                           
  6803                           ;gsk_i2c.c: 58: I2C_Master_Write(DevID);
  6804  0C2B  0876               	movf	I2C_ReadAtAddress@DevID,w
  6805  0C2C  00F0               	movwf	I2C_Master_Write@d
  6806  0C2D  01F1               	clrf	I2C_Master_Write@d+1
  6807  0C2E  2450  120A  158A   	fcall	_I2C_Master_Write
  6808                           
  6809                           ;gsk_i2c.c: 59: I2C_Master_Write(IntAdd);
  6810  0C31  0874               	movf	I2C_ReadAtAddress@IntAdd,w
  6811  0C32  00F0               	movwf	I2C_Master_Write@d
  6812  0C33  01F1               	clrf	I2C_Master_Write@d+1
  6813  0C34  2450  120A  158A   	fcall	_I2C_Master_Write
  6814                           
  6815                           ;gsk_i2c.c: 60: I2C_Master_Stop();
  6816  0C37  2480  120A  158A   	fcall	_I2C_Master_Stop
  6817                           
  6818                           ;gsk_i2c.c: 62: I2C_Master_Start();
  6819  0C3A  2455  120A  158A   	fcall	_I2C_Master_Start
  6820                           
  6821                           ;gsk_i2c.c: 63: I2C_Master_Write(DevID+1);
  6822  0C3D  0876               	movf	I2C_ReadAtAddress@DevID,w
  6823  0C3E  00F0               	movwf	I2C_Master_Write@d
  6824  0C3F  01F1               	clrf	I2C_Master_Write@d+1
  6825  0C40  0AF0               	incf	I2C_Master_Write@d,f
  6826  0C41  1903               	skipnz
  6827  0C42  0AF1               	incf	I2C_Master_Write@d+1,f
  6828  0C43  2450  120A  158A   	fcall	_I2C_Master_Write
  6829                           
  6830                           ;gsk_i2c.c: 64: char data = I2C_Master_Read(0);
  6831  0C46  01F0               	clrf	I2C_Master_Read@a
  6832  0C47  01F1               	clrf	I2C_Master_Read@a+1
  6833  0C48  2458  120A  158A   	fcall	_I2C_Master_Read
  6834  0C4B  0870               	movf	?_I2C_Master_Read,w
  6835  0C4C  00F5               	movwf	I2C_ReadAtAddress@data
  6836                           
  6837                           ;gsk_i2c.c: 65: I2C_Master_Stop();
  6838  0C4D  2480               	fcall	_I2C_Master_Stop
  6839                           
  6840                           ;gsk_i2c.c: 66: return data;
  6841  0C4E  0875               	movf	I2C_ReadAtAddress@data,w
  6842  0C4F  0008               	return
  6843  0C50                     __end_of_I2C_ReadAtAddress:	
  6844  0C50                     __ptext28:	
  6845 ;; *************** function _I2C_Master_Write *****************
  6846 ;; Defined at:
  6847 ;;		line 36 in file "libs/gsk_i2c.c"
  6848 ;; Parameters:    Size  Location     Type
  6849 ;;  d               2    0[COMMON] unsigned int 
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, status,2, status,0, pclath, cstack
  6856 ;; Tracked objects:
  6857 ;;		On entry : 200/900
  6858 ;;		On exit  : 300/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6861 ;;      Params:         2       0       0       0       0       0
  6862 ;;      Locals:         0       0       0       0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0
  6864 ;;      Totals:         2       0       0       0       0       0
  6865 ;;Total ram usage:        2 bytes
  6866 ;; Hardware stack levels used:    1
  6867 ;; Hardware stack levels required when called:    1
  6868 ;; This function calls:
  6869 ;;		_I2C_Master_Wait
  6870 ;; This function is called by:
  6871 ;;		_I2C_ReadAtAddress
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           
  6876                           ;psect for function _I2C_Master_Write
  6877  0C50                     _I2C_Master_Write:	
  6878                           
  6879                           ;gsk_i2c.c: 38: I2C_Master_Wait();
  6880                           
  6881                           ;incstack = 0
  6882                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6883  0C50  2477               	fcall	_I2C_Master_Wait
  6884                           
  6885                           ;gsk_i2c.c: 39: SSPBUF = d;
  6886  0C51  0870               	movf	I2C_Master_Write@d,w
  6887  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  6888  0C53  0093               	movwf	19	;volatile
  6889  0C54  0008               	return
  6890  0C55                     __end_of_I2C_Master_Write:	
  6891  0C55                     __ptext30:	
  6892 ;; *************** function _I2C_Master_Start *****************
  6893 ;; Defined at:
  6894 ;;		line 18 in file "libs/gsk_i2c.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2, status,0, pclath, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/900
  6905 ;;		On exit  : 300/100
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6908 ;;      Params:         0       0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0
  6911 ;;      Totals:         0       0       0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    1
  6915 ;; This function calls:
  6916 ;;		_I2C_Master_Wait
  6917 ;; This function is called by:
  6918 ;;		_I2C_ReadAtAddress
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _I2C_Master_Start
  6924  0C55                     _I2C_Master_Start:	
  6925                           
  6926                           ;gsk_i2c.c: 20: I2C_Master_Wait();
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  6930  0C55  2477               	fcall	_I2C_Master_Wait
  6931                           
  6932                           ;gsk_i2c.c: 21: SEN = 1;
  6933  0C56  1411               	bsf	17,0	;volatile
  6934  0C57  0008               	return
  6935  0C58                     __end_of_I2C_Master_Start:	
  6936  0C58                     __ptext31:	
  6937 ;; *************** function _I2C_Master_Read *****************
  6938 ;; Defined at:
  6939 ;;		line 42 in file "libs/gsk_i2c.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  a               2    0[COMMON] unsigned short 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  temp            2    2[COMMON] unsigned short 
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  2    0[COMMON] unsigned short 
  6946 ;; Registers used:
  6947 ;;		wreg, status,2, status,0, pclath, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 300/800
  6950 ;;		On exit  : 300/100
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6953 ;;      Params:         2       0       0       0       0       0
  6954 ;;      Locals:         2       0       0       0       0       0
  6955 ;;      Temps:          0       0       0       0       0       0
  6956 ;;      Totals:         4       0       0       0       0       0
  6957 ;;Total ram usage:        4 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    1
  6960 ;; This function calls:
  6961 ;;		_I2C_Master_Wait
  6962 ;; This function is called by:
  6963 ;;		_I2C_ReadAtAddress
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           
  6968                           ;psect for function _I2C_Master_Read
  6969  0C58                     _I2C_Master_Read:	
  6970                           
  6971                           ;gsk_i2c.c: 44: unsigned short temp;
  6972                           ;gsk_i2c.c: 45: I2C_Master_Wait();
  6973                           
  6974                           ;incstack = 0
  6975                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6976  0C58  2477  120A  158A   	fcall	_I2C_Master_Wait
  6977                           
  6978                           ;gsk_i2c.c: 46: RCEN = 1;
  6979  0C5B  1591               	bsf	17,3	;volatile
  6980                           
  6981                           ;gsk_i2c.c: 47: I2C_Master_Wait();
  6982  0C5C  2477  120A  158A   	fcall	_I2C_Master_Wait
  6983                           
  6984                           ;gsk_i2c.c: 48: temp = SSPBUF;
  6985  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  6986  0C60  0813               	movf	19,w	;volatile
  6987  0C61  00F2               	movwf	I2C_Master_Read@temp
  6988  0C62  01F3               	clrf	I2C_Master_Read@temp+1
  6989                           
  6990                           ;gsk_i2c.c: 49: I2C_Master_Wait();
  6991  0C63  2477  120A  158A   	fcall	_I2C_Master_Wait
  6992                           
  6993                           ;gsk_i2c.c: 50: ACKDT = (a)?0:1;
  6994  0C66  0870               	movf	I2C_Master_Read@a,w
  6995  0C67  0471               	iorwf	I2C_Master_Read@a+1,w
  6996  0C68  1D03               	btfss	3,2
  6997  0C69  2C6E               	goto	u2880
  6998  0C6A  1683               	bsf	3,5	;RP0=1, select bank1
  6999  0C6B  1303               	bcf	3,6	;RP1=0, select bank1
  7000  0C6C  1691               	bsf	17,5	;volatile
  7001  0C6D  2C71               	goto	l2572
  7002  0C6E                     u2880:	
  7003  0C6E  1683               	bsf	3,5	;RP0=1, select bank1
  7004  0C6F  1303               	bcf	3,6	;RP1=0, select bank1
  7005  0C70  1291               	bcf	17,5	;volatile
  7006  0C71                     l2572:	
  7007                           
  7008                           ;gsk_i2c.c: 51: ACKEN = 1;
  7009  0C71  1611               	bsf	17,4	;volatile
  7010                           
  7011                           ;gsk_i2c.c: 52: return temp;
  7012  0C72  0873               	movf	I2C_Master_Read@temp+1,w
  7013  0C73  00F1               	movwf	?_I2C_Master_Read+1
  7014  0C74  0872               	movf	I2C_Master_Read@temp,w
  7015  0C75  00F0               	movwf	?_I2C_Master_Read
  7016  0C76  0008               	return
  7017  0C77                     __end_of_I2C_Master_Read:	
  7018  0C77                     __ptext32:	
  7019 ;; *************** function _I2C_Master_Wait *****************
  7020 ;; Defined at:
  7021 ;;		line 13 in file "libs/gsk_i2c.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;		None
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;		None
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg, status,2
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/900
  7032 ;;		On exit  : 300/100
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7035 ;;      Params:         0       0       0       0       0       0
  7036 ;;      Locals:         0       0       0       0       0       0
  7037 ;;      Temps:          0       0       0       0       0       0
  7038 ;;      Totals:         0       0       0       0       0       0
  7039 ;;Total ram usage:        0 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_I2C_Master_Start
  7045 ;;		_I2C_Master_Stop
  7046 ;;		_I2C_Master_Write
  7047 ;;		_I2C_Master_Read
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           
  7052                           ;psect for function _I2C_Master_Wait
  7053  0C77                     _I2C_Master_Wait:	
  7054  0C77                     l308:	
  7055                           ;gsk_i2c.c: 15: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7056                           
  7057                           ;incstack = 0
  7058                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  7059                           
  7060  0C77  1683               	bsf	3,5	;RP0=1, select bank1
  7061  0C78  1303               	bcf	3,6	;RP1=0, select bank1
  7062  0C79  1914               	btfsc	20,2	;volatile
  7063  0C7A  2C77               	goto	l308
  7064  0C7B  0811               	movf	17,w	;volatile
  7065  0C7C  391F               	andlw	31
  7066  0C7D  1903               	btfsc	3,2
  7067  0C7E  0008               	return
  7068  0C7F  2C77               	goto	l308
  7069  0C80                     __end_of_I2C_Master_Wait:	
  7070  0C80                     __ptext29:	
  7071 ;; *************** function _I2C_Master_Stop *****************
  7072 ;; Defined at:
  7073 ;;		line 30 in file "libs/gsk_i2c.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;		None
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0, pclath, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 200/800
  7084 ;;		On exit  : 300/100
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7087 ;;      Params:         0       0       0       0       0       0
  7088 ;;      Locals:         0       0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0
  7090 ;;      Totals:         0       0       0       0       0       0
  7091 ;;Total ram usage:        0 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    1
  7094 ;; This function calls:
  7095 ;;		_I2C_Master_Wait
  7096 ;; This function is called by:
  7097 ;;		_I2C_ReadAtAddress
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           
  7102                           ;psect for function _I2C_Master_Stop
  7103  0C80                     _I2C_Master_Stop:	
  7104                           
  7105                           ;gsk_i2c.c: 32: I2C_Master_Wait();
  7106                           
  7107                           ;incstack = 0
  7108                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  7109  0C80  2477               	fcall	_I2C_Master_Wait
  7110                           
  7111                           ;gsk_i2c.c: 33: PEN = 1;
  7112  0C81  1511               	bsf	17,2	;volatile
  7113  0C82  0008               	return
  7114  0C83                     __end_of_I2C_Master_Stop:	
  7115  0C83                     __ptext26:	
  7116 ;; *************** function ___lmul *****************
  7117 ;; Defined at:
  7118 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;  multiplier      4    0[COMMON] unsigned long 
  7121 ;;  multiplicand    4    4[COMMON] unsigned long 
  7122 ;; Auto vars:     Size  Location     Type
  7123 ;;  product         4    8[COMMON] unsigned long 
  7124 ;; Return value:  Size  Location     Type
  7125 ;;                  4    0[COMMON] unsigned long 
  7126 ;; Registers used:
  7127 ;;		wreg, status,2, status,0
  7128 ;; Tracked objects:
  7129 ;;		On entry : 300/800
  7130 ;;		On exit  : 300/0
  7131 ;;		Unchanged: 300/0
  7132 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7133 ;;      Params:         8       0       0       0       0       0
  7134 ;;      Locals:         4       0       0       0       0       0
  7135 ;;      Temps:          0       0       0       0       0       0
  7136 ;;      Totals:        12       0       0       0       0       0
  7137 ;;Total ram usage:       12 bytes
  7138 ;; Hardware stack levels used:    1
  7139 ;; This function calls:
  7140 ;;		Nothing
  7141 ;; This function is called by:
  7142 ;;		_WriteLongInt
  7143 ;;		_ReadRTCAsSec
  7144 ;; This function uses a non-reentrant model
  7145 ;;
  7146                           
  7147                           
  7148                           ;psect for function ___lmul
  7149  0C83                     ___lmul:	
  7150                           
  7151                           ;incstack = 0
  7152                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7153  0C83  01F8               	clrf	___lmul@product
  7154  0C84  01F9               	clrf	___lmul@product+1
  7155  0C85  01FA               	clrf	___lmul@product+2
  7156  0C86  01FB               	clrf	___lmul@product+3
  7157  0C87                     l775:	
  7158  0C87  1C70               	btfss	___lmul@multiplier,0
  7159  0C88  2C9D               	goto	l2768
  7160  0C89  0874               	movf	___lmul@multiplicand,w
  7161  0C8A  07F8               	addwf	___lmul@product,f
  7162  0C8B  0875               	movf	___lmul@multiplicand+1,w
  7163  0C8C  1103               	clrz
  7164  0C8D  1803               	skipnc
  7165  0C8E  3E01               	addlw	1
  7166  0C8F  1D03               	btfss	3,2
  7167  0C90  07F9               	addwf	___lmul@product+1,f
  7168  0C91  0876               	movf	___lmul@multiplicand+2,w
  7169  0C92  1103               	clrz
  7170  0C93  1803               	skipnc
  7171  0C94  3E01               	addlw	1
  7172  0C95  1D03               	btfss	3,2
  7173  0C96  07FA               	addwf	___lmul@product+2,f
  7174  0C97  0877               	movf	___lmul@multiplicand+3,w
  7175  0C98  1103               	clrz
  7176  0C99  1803               	skipnc
  7177  0C9A  3E01               	addlw	1
  7178  0C9B  1D03               	btfss	3,2
  7179  0C9C  07FB               	addwf	___lmul@product+3,f
  7180  0C9D                     l2768:	
  7181  0C9D  1003               	clrc
  7182  0C9E  0DF4               	rlf	___lmul@multiplicand,f
  7183  0C9F  0DF5               	rlf	___lmul@multiplicand+1,f
  7184  0CA0  0DF6               	rlf	___lmul@multiplicand+2,f
  7185  0CA1  0DF7               	rlf	___lmul@multiplicand+3,f
  7186  0CA2  1003               	clrc
  7187  0CA3  0CF3               	rrf	___lmul@multiplier+3,f
  7188  0CA4  0CF2               	rrf	___lmul@multiplier+2,f
  7189  0CA5  0CF1               	rrf	___lmul@multiplier+1,f
  7190  0CA6  0CF0               	rrf	___lmul@multiplier,f
  7191  0CA7  0873               	movf	___lmul@multiplier+3,w
  7192  0CA8  0472               	iorwf	___lmul@multiplier+2,w
  7193  0CA9  0471               	iorwf	___lmul@multiplier+1,w
  7194  0CAA  0470               	iorwf	___lmul@multiplier,w
  7195  0CAB  1D03               	skipz
  7196  0CAC  2C87               	goto	l775
  7197  0CAD  087B               	movf	___lmul@product+3,w
  7198  0CAE  00F3               	movwf	?___lmul+3
  7199  0CAF  087A               	movf	___lmul@product+2,w
  7200  0CB0  00F2               	movwf	?___lmul+2
  7201  0CB1  0879               	movf	___lmul@product+1,w
  7202  0CB2  00F1               	movwf	?___lmul+1
  7203  0CB3  0878               	movf	___lmul@product,w
  7204  0CB4  00F0               	movwf	?___lmul
  7205  0CB5  0008               	return
  7206  0CB6                     __end_of___lmul:	
  7207  0CB6                     PL22:	
  7208  0CB6  0E3D               	swapf	ReadRTCAsSec@TempVar000,w
  7209  0CB7  390F               	andlw	15
  7210  0CB8  3907               	andlw	7
  7211  0CB9  00F0               	movwf	___wmul@multiplier
  7212  0CBA  300A               	movlw	10
  7213  0CBB  01F1               	clrf	___wmul@multiplier+1
  7214  0CBC  00F2               	movwf	___wmul@multiplicand
  7215  0CBD  01F3               	clrf	___wmul@multiplicand+1
  7216  0CBE  0008               	return
  7217  0CBF                     __end_ofPL22:	
  7218                           
  7219                           	psect	text39
  7220  0906                     __ptext39:	
  7221 ;; *************** function _I2C_Master_Init *****************
  7222 ;; Defined at:
  7223 ;;		line 3 in file "libs/gsk_i2c.c"
  7224 ;; Parameters:    Size  Location     Type
  7225 ;;  c               4    0[BANK0 ] const unsigned long 
  7226 ;; Auto vars:     Size  Location     Type
  7227 ;;		None
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  1    wreg      void 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, pclath, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : B00/800
  7234 ;;		On exit  : B00/900
  7235 ;;		Unchanged: 800/0
  7236 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7237 ;;      Params:         0       4       0       0       0       0
  7238 ;;      Locals:         0       0       0       0       0       0
  7239 ;;      Temps:          0       4       0       0       0       0
  7240 ;;      Totals:         0       8       0       0       0       0
  7241 ;;Total ram usage:        8 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    1
  7244 ;; This function calls:
  7245 ;;		___lldiv
  7246 ;; This function is called by:
  7247 ;;		_main
  7248 ;; This function uses a non-reentrant model
  7249 ;;
  7250                           
  7251                           
  7252                           ;psect for function _I2C_Master_Init
  7253  0906                     _I2C_Master_Init:	
  7254                           
  7255                           ;gsk_i2c.c: 5: SSPCON = 0b00101000;
  7256                           
  7257                           ;incstack = 0
  7258                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  7259  0906  3028               	movlw	40
  7260  0907  0094               	movwf	20	;volatile
  7261                           
  7262                           ;gsk_i2c.c: 6: SSPCON2 = 0;
  7263  0908  1683               	bsf	3,5	;RP0=1, select bank1
  7264  0909  0191               	clrf	17	;volatile
  7265                           
  7266                           ;gsk_i2c.c: 7: SSPADD = (4000000/(4*c))-1;
  7267  090A  1283               	bcf	3,5	;RP0=0, select bank0
  7268  090B  082C               	movf	I2C_Master_Init@c,w
  7269  090C  00B0               	movwf	??_I2C_Master_Init
  7270  090D  082D               	movf	I2C_Master_Init@c+1,w
  7271  090E  00B1               	movwf	??_I2C_Master_Init+1
  7272  090F  082E               	movf	I2C_Master_Init@c+2,w
  7273  0910  00B2               	movwf	??_I2C_Master_Init+2
  7274  0911  082F               	movf	I2C_Master_Init@c+3,w
  7275  0912  00B3               	movwf	??_I2C_Master_Init+3
  7276  0913  3002               	movlw	2
  7277  0914                     u3595:	
  7278  0914  1003               	clrc
  7279  0915  0DB0               	rlf	??_I2C_Master_Init,f
  7280  0916  0DB1               	rlf	??_I2C_Master_Init+1,f
  7281  0917  0DB2               	rlf	??_I2C_Master_Init+2,f
  7282  0918  0DB3               	rlf	??_I2C_Master_Init+3,f
  7283  0919  3EFF               	addlw	-1
  7284  091A  1D03               	skipz
  7285  091B  2914               	goto	u3595
  7286  091C  0833               	movf	??_I2C_Master_Init+3,w
  7287  091D  00F3               	movwf	___lldiv@divisor+3
  7288  091E  0832               	movf	??_I2C_Master_Init+2,w
  7289  091F  00F2               	movwf	___lldiv@divisor+2
  7290  0920  0831               	movf	??_I2C_Master_Init+1,w
  7291  0921  00F1               	movwf	___lldiv@divisor+1
  7292  0922  0830               	movf	??_I2C_Master_Init,w
  7293  0923  00F0               	movwf	___lldiv@divisor
  7294  0924  303D               	movlw	61
  7295  0925  01F7               	clrf	___lldiv@dividend+3
  7296  0926  00F6               	movwf	___lldiv@dividend+2
  7297  0927  3009               	movlw	9
  7298  0928  00F5               	movwf	___lldiv@dividend+1
  7299  0929  01F4               	clrf	___lldiv@dividend
  7300  092A  2133               	fcall	___lldiv
  7301  092B  0870               	movf	?___lldiv,w
  7302  092C  3EFF               	addlw	255
  7303  092D  1683               	bsf	3,5	;RP0=1, select bank1
  7304  092E  0093               	movwf	19	;volatile
  7305                           
  7306                           ;gsk_i2c.c: 8: SSPSTAT = 0;
  7307  092F  0194               	clrf	20	;volatile
  7308                           
  7309                           ;gsk_i2c.c: 9: TRISC3 = 1;
  7310  0930  1587               	bsf	7,3	;volatile
  7311                           
  7312                           ;gsk_i2c.c: 10: TRISC4 = 1;
  7313  0931  1607               	bsf	7,4	;volatile
  7314  0932  0008               	return
  7315  0933                     __end_of_I2C_Master_Init:	
  7316  0933                     __ptext40:	
  7317 ;; *************** function ___lldiv *****************
  7318 ;; Defined at:
  7319 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  divisor         4    0[COMMON] unsigned long 
  7322 ;;  dividend        4    4[COMMON] unsigned long 
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;  quotient        4    8[COMMON] unsigned long 
  7325 ;;  counter         1   12[COMMON] unsigned char 
  7326 ;; Return value:  Size  Location     Type
  7327 ;;                  4    0[COMMON] unsigned long 
  7328 ;; Registers used:
  7329 ;;		wreg, status,2, status,0
  7330 ;; Tracked objects:
  7331 ;;		On entry : B00/800
  7332 ;;		On exit  : B00/800
  7333 ;;		Unchanged: B00/0
  7334 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7335 ;;      Params:         8       0       0       0       0       0
  7336 ;;      Locals:         5       0       0       0       0       0
  7337 ;;      Temps:          0       0       0       0       0       0
  7338 ;;      Totals:        13       0       0       0       0       0
  7339 ;;Total ram usage:       13 bytes
  7340 ;; Hardware stack levels used:    1
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_I2C_Master_Init
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function ___lldiv
  7350  0933                     ___lldiv:	
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  7354  0933  01F8               	clrf	___lldiv@quotient
  7355  0934  01F9               	clrf	___lldiv@quotient+1
  7356  0935  01FA               	clrf	___lldiv@quotient+2
  7357  0936  01FB               	clrf	___lldiv@quotient+3
  7358  0937  0873               	movf	___lldiv@divisor+3,w
  7359  0938  0472               	iorwf	___lldiv@divisor+2,w
  7360  0939  0471               	iorwf	___lldiv@divisor+1,w
  7361  093A  0470               	iorwf	___lldiv@divisor,w
  7362  093B  1903               	skipnz
  7363  093C  2972               	goto	l2944
  7364  093D  01FC               	clrf	___lldiv@counter
  7365  093E                     L21:	
  7366  093E  0AFC               	incf	___lldiv@counter,f
  7367  093F  1BF3               	btfsc	___lldiv@divisor+3,7
  7368  0940  2947               	goto	l2932
  7369  0941  1003               	clrc
  7370  0942  0DF0               	rlf	___lldiv@divisor,f
  7371  0943  0DF1               	rlf	___lldiv@divisor+1,f
  7372  0944  0DF2               	rlf	___lldiv@divisor+2,f
  7373  0945  0DF3               	rlf	___lldiv@divisor+3,f
  7374  0946  293E               	goto	L21
  7375  0947                     l2932:	
  7376  0947  1003               	clrc
  7377  0948  0DF8               	rlf	___lldiv@quotient,f
  7378  0949  0DF9               	rlf	___lldiv@quotient+1,f
  7379  094A  0DFA               	rlf	___lldiv@quotient+2,f
  7380  094B  0DFB               	rlf	___lldiv@quotient+3,f
  7381  094C  0873               	movf	___lldiv@divisor+3,w
  7382  094D  0277               	subwf	___lldiv@dividend+3,w
  7383  094E  1D03               	skipz
  7384  094F  295A               	goto	u3445
  7385  0950  0872               	movf	___lldiv@divisor+2,w
  7386  0951  0276               	subwf	___lldiv@dividend+2,w
  7387  0952  1D03               	skipz
  7388  0953  295A               	goto	u3445
  7389  0954  0871               	movf	___lldiv@divisor+1,w
  7390  0955  0275               	subwf	___lldiv@dividend+1,w
  7391  0956  1D03               	skipz
  7392  0957  295A               	goto	u3445
  7393  0958  0870               	movf	___lldiv@divisor,w
  7394  0959  0274               	subwf	___lldiv@dividend,w
  7395  095A                     u3445:	
  7396  095A  1C03               	skipc
  7397  095B  296C               	goto	L22
  7398  095C  0870               	movf	___lldiv@divisor,w
  7399  095D  02F4               	subwf	___lldiv@dividend,f
  7400  095E  0871               	movf	___lldiv@divisor+1,w
  7401  095F  1C03               	skipc
  7402  0960  0F71               	incfsz	___lldiv@divisor+1,w
  7403  0961  02F5               	subwf	___lldiv@dividend+1,f
  7404  0962  0872               	movf	___lldiv@divisor+2,w
  7405  0963  1C03               	skipc
  7406  0964  0F72               	incfsz	___lldiv@divisor+2,w
  7407  0965  02F6               	subwf	___lldiv@dividend+2,f
  7408  0966  0873               	movf	___lldiv@divisor+3,w
  7409  0967  1C03               	skipc
  7410  0968  0F73               	incfsz	___lldiv@divisor+3,w
  7411  0969  02F7               	subwf	___lldiv@dividend+3,f
  7412  096A  1478               	bsf	___lldiv@quotient,0
  7413  096B  1003               	clrc
  7414  096C                     L22:	
  7415  096C  0CF3               	rrf	___lldiv@divisor+3,f
  7416  096D  0CF2               	rrf	___lldiv@divisor+2,f
  7417  096E  0CF1               	rrf	___lldiv@divisor+1,f
  7418  096F  0CF0               	rrf	___lldiv@divisor,f
  7419  0970  0BFC               	decfsz	___lldiv@counter,f
  7420  0971  2947               	goto	l2932
  7421  0972                     l2944:	
  7422  0972  087B               	movf	___lldiv@quotient+3,w
  7423  0973  00F3               	movwf	?___lldiv+3
  7424  0974  087A               	movf	___lldiv@quotient+2,w
  7425  0975  00F2               	movwf	?___lldiv+2
  7426  0976  0879               	movf	___lldiv@quotient+1,w
  7427  0977  00F1               	movwf	?___lldiv+1
  7428  0978  0878               	movf	___lldiv@quotient,w
  7429  0979  00F0               	movwf	?___lldiv
  7430  097A  0008               	return
  7431  097B                     __end_of___lldiv:	
  7432                           
  7433                           	psect	text42
  7434  0A27                     __ptext42:	
  7435 ;; *************** function _GetCumulativePeriodsForStates *****************
  7436 ;; Defined at:
  7437 ;;		line 3 in file "libs/gsk_algo_funcs.c"
  7438 ;; Parameters:    Size  Location     Type
  7439 ;;		None
  7440 ;; Auto vars:     Size  Location     Type
  7441 ;;  i               1    7[COMMON] unsigned char 
  7442 ;;  j               1    6[COMMON] unsigned char 
  7443 ;; Return value:  Size  Location     Type
  7444 ;;                  1    wreg      void 
  7445 ;; Registers used:
  7446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 300/200
  7449 ;;		On exit  : 800/800
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7452 ;;      Params:         0       0       0       0       0       0
  7453 ;;      Locals:         2       0       0       0       0       0
  7454 ;;      Temps:          4       0       0       0       0       0
  7455 ;;      Totals:         6       0       0       0       0       0
  7456 ;;Total ram usage:        6 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    1
  7459 ;; This function calls:
  7460 ;;		_GetPrevCycle
  7461 ;; This function is called by:
  7462 ;;		_main
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           
  7467                           ;psect for function _GetCumulativePeriodsForStates
  7468  0A27                     _GetCumulativePeriodsForStates:	
  7469                           
  7470                           ;gsk_algo_funcs.c: 4: char i, j;
  7471                           ;gsk_algo_funcs.c: 5: for (i=0; i< 3; i++) {
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _GetCumulativePeriodsForStates: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  7475  0A27  01F7               	clrf	GetCumulativePeriodsForStates@i
  7476  0A28                     l3156:	
  7477                           
  7478                           ;gsk_algo_funcs.c: 6: STATE_CUMULATIVE_PERIODS[i] = 0;
  7479  0A28  1003               	clrc
  7480  0A29  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  7481  0A2A  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  7482  0A2B  0084               	movwf	4
  7483  0A2C  1383               	bcf	3,7	;select IRP bank1
  7484  0A2D  0180               	clrf	0
  7485  0A2E  0A84               	incf	4,f
  7486  0A2F  0180               	clrf	0
  7487                           
  7488                           ;gsk_algo_funcs.c: 7: if (i==0)
  7489  0A30  0877               	movf	GetCumulativePeriodsForStates@i,w
  7490  0A31  1D03               	btfss	3,2
  7491  0A32  2A35               	goto	l3162
  7492                           
  7493                           ;gsk_algo_funcs.c: 8: j = 0;
  7494  0A33  01F6               	clrf	GetCumulativePeriodsForStates@j
  7495  0A34  2A3E               	goto	l3168
  7496  0A35                     l3162:	
  7497                           
  7498                           ;gsk_algo_funcs.c: 9: else
  7499                           ;gsk_algo_funcs.c: 10: j = STATE_BREAKS[GetPrevCycle(i)];
  7500  0A35  0877               	movf	GetCumulativePeriodsForStates@i,w
  7501  0A36  2337  120A  158A   	fcall	_GetPrevCycle
  7502  0A39  3E64               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  7503  0A3A  0084               	movwf	4
  7504  0A3B  1783               	bsf	3,7	;select IRP bank2
  7505  0A3C  0800               	movf	0,w
  7506  0A3D  00F6               	movwf	GetCumulativePeriodsForStates@j
  7507  0A3E                     l3168:	
  7508  0A3E  0877               	movf	GetCumulativePeriodsForStates@i,w
  7509  0A3F  3E64               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  7510  0A40  0084               	movwf	4
  7511  0A41  1783               	bsf	3,7	;select IRP bank2
  7512  0A42  0800               	movf	0,w
  7513  0A43  0276               	subwf	GetCumulativePeriodsForStates@j,w
  7514  0A44  1803               	btfsc	3,0
  7515  0A45  2A67               	goto	l3170
  7516                           
  7517                           ;gsk_algo_funcs.c: 12: STATE_CUMULATIVE_PERIODS[i] = STATE_CUMULATIVE_PERIODS[i]
  7518                           ;gsk_algo_funcs.c: 13: + STATE_PERIODS[j];
  7519  0A46  1003               	clrc
  7520  0A47  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  7521  0A48  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  7522  0A49  0084               	movwf	4
  7523  0A4A  1383               	bcf	3,7	;select IRP bank1
  7524  0A4B  0800               	movf	0,w
  7525  0A4C  00F2               	movwf	??_GetCumulativePeriodsForStates
  7526  0A4D  0A84               	incf	4,f
  7527  0A4E  0800               	movf	0,w
  7528  0A4F  00F3               	movwf	??_GetCumulativePeriodsForStates+1
  7529  0A50  0876               	movf	GetCumulativePeriodsForStates@j,w
  7530  0A51  3ECC               	addlw	204
  7531  0A52  0084               	movwf	4
  7532  0A53  1783               	bsf	3,7	;select IRP bank3
  7533  0A54  0800               	movf	0,w
  7534  0A55  0772               	addwf	??_GetCumulativePeriodsForStates,w
  7535  0A56  00F4               	movwf	??_GetCumulativePeriodsForStates+2
  7536  0A57  0873               	movf	??_GetCumulativePeriodsForStates+1,w
  7537  0A58  1803               	skipnc
  7538  0A59  0A73               	incf	??_GetCumulativePeriodsForStates+1,w
  7539  0A5A  00F5               	movwf	??_GetCumulativePeriodsForStates+3
  7540  0A5B  1003               	clrc
  7541  0A5C  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  7542  0A5D  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  7543  0A5E  0084               	movwf	4
  7544  0A5F  0874               	movf	??_GetCumulativePeriodsForStates+2,w
  7545  0A60  1383               	bcf	3,7	;select IRP bank1
  7546  0A61  0080               	movwf	0
  7547  0A62  0A84               	incf	4,f
  7548  0A63  0875               	movf	??_GetCumulativePeriodsForStates+3,w
  7549  0A64  0080               	movwf	0
  7550  0A65  0AF6               	incf	GetCumulativePeriodsForStates@j,f
  7551  0A66  2A3E               	goto	l3168
  7552  0A67                     l3170:	
  7553  0A67  3003               	movlw	3
  7554  0A68  0AF7               	incf	GetCumulativePeriodsForStates@i,f
  7555  0A69  0277               	subwf	GetCumulativePeriodsForStates@i,w
  7556  0A6A  1803               	btfsc	3,0
  7557  0A6B  0008               	return
  7558  0A6C  2A28               	goto	l3156
  7559  0A6D                     __end_of_GetCumulativePeriodsForStates:	
  7560  0A6D                     __ptext41:	
  7561 ;; *************** function _GetCycle *****************
  7562 ;; Defined at:
  7563 ;;		line 27 in file "libs/gsk_algo_funcs.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;		None
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  i               1   13[COMMON] unsigned char 
  7568 ;;  PrevCycle       1   12[COMMON] unsigned char 
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  1    wreg      void 
  7571 ;; Registers used:
  7572 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7573 ;; Tracked objects:
  7574 ;;		On entry : 100/A00
  7575 ;;		On exit  : 300/200
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7578 ;;      Params:         0       0       0       0       0       0
  7579 ;;      Locals:         2       0       0       0       0       0
  7580 ;;      Temps:         10       0       0       0       0       0
  7581 ;;      Totals:        12       0       0       0       0       0
  7582 ;;Total ram usage:       12 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    1
  7585 ;; This function calls:
  7586 ;;		_GetPrevCycle
  7587 ;; This function is called by:
  7588 ;;		_main
  7589 ;; This function uses a non-reentrant model
  7590 ;;
  7591                           
  7592                           
  7593                           ;psect for function _GetCycle
  7594  0A6D                     _GetCycle:	
  7595                           
  7596                           ;gsk_algo_funcs.c: 28: char PrevCycle;
  7597                           ;gsk_algo_funcs.c: 29: for (char i = 0; i < 3; i++) {
  7598                           
  7599                           ;incstack = 0
  7600                           ; Regs used in _GetCycle: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7601  0A6D  01FD               	clrf	GetCycle@i
  7602  0A6E                     l3180:	
  7603                           
  7604                           ;gsk_algo_funcs.c: 30: PrevCycle = GetPrevCycle(i);
  7605  0A6E  087D               	movf	GetCycle@i,w
  7606  0A6F  2337  120A  158A   	fcall	_GetPrevCycle
  7607  0A72  00FC               	movwf	GetCycle@PrevCycle
  7608                           
  7609                           ;gsk_algo_funcs.c: 31: if (C[PrevCycle] <= C[i]) {
  7610  0A73  00F2               	movwf	??_GetCycle
  7611  0A74  3001               	movlw	1
  7612  0A75  1003               	clrc
  7613  0A76                     L23:	
  7614  0A76  0DF2               	rlf	??_GetCycle,f
  7615  0A77  3EFF               	addlw	-1
  7616  0A78  1003               	clrc
  7617  0A79  1D03               	skipz
  7618  0A7A  2A76               	goto	L23
  7619  0A7B  0D72               	rlf	??_GetCycle,w
  7620  0A7C  3E20               	addlw	32
  7621  0A7D  0084               	movwf	4
  7622  0A7E  1383               	bcf	3,7	;select IRP bank0
  7623  0A7F  0800               	movf	0,w
  7624  0A80  00F3               	movwf	??_GetCycle+1
  7625  0A81  0A84               	incf	4,f
  7626  0A82  0800               	movf	0,w
  7627  0A83  00F4               	movwf	??_GetCycle+2
  7628  0A84  0A84               	incf	4,f
  7629  0A85  0800               	movf	0,w
  7630  0A86  00F5               	movwf	??_GetCycle+3
  7631  0A87  0A84               	incf	4,f
  7632  0A88  0800               	movf	0,w
  7633  0A89  00F6               	movwf	??_GetCycle+4
  7634  0A8A  087D               	movf	GetCycle@i,w
  7635  0A8B  00F7               	movwf	??_GetCycle+5
  7636  0A8C  3001               	movlw	1
  7637  0A8D  1003               	clrc
  7638  0A8E                     L24:	
  7639  0A8E  0DF7               	rlf	??_GetCycle+5,f
  7640  0A8F  3EFF               	addlw	-1
  7641  0A90  1003               	clrc
  7642  0A91  1D03               	skipz
  7643  0A92  2A8E               	goto	L24
  7644  0A93  0D77               	rlf	??_GetCycle+5,w
  7645  0A94  3E20               	addlw	32
  7646  0A95  0084               	movwf	4
  7647  0A96  0800               	movf	0,w
  7648  0A97  00F8               	movwf	??_GetCycle+6
  7649  0A98  0A84               	incf	4,f
  7650  0A99  0800               	movf	0,w
  7651  0A9A  00F9               	movwf	??_GetCycle+7
  7652  0A9B  0A84               	incf	4,f
  7653  0A9C  0800               	movf	0,w
  7654  0A9D  00FA               	movwf	??_GetCycle+8
  7655  0A9E  0A84               	incf	4,f
  7656  0A9F  0800               	movf	0,w
  7657  0AA0  00FB               	movwf	??_GetCycle+9
  7658  0AA1  3A80               	xorlw	128
  7659  0AA2  00FF               	movwf	127
  7660  0AA3  0876               	movf	??_GetCycle+4,w
  7661  0AA4  3A80               	xorlw	128
  7662  0AA5  027F               	subwf	127,w
  7663  0AA6  1D03               	skipz
  7664  0AA7  2AB2               	goto	u3653
  7665  0AA8  0875               	movf	??_GetCycle+3,w
  7666  0AA9  027A               	subwf	??_GetCycle+8,w
  7667  0AAA  1D03               	skipz
  7668  0AAB  2AB2               	goto	u3653
  7669  0AAC  0874               	movf	??_GetCycle+2,w
  7670  0AAD  0279               	subwf	??_GetCycle+7,w
  7671  0AAE  1D03               	skipz
  7672  0AAF  2AB2               	goto	u3653
  7673  0AB0  0873               	movf	??_GetCycle+1,w
  7674  0AB1  0278               	subwf	??_GetCycle+6,w
  7675  0AB2                     u3653:	
  7676                           
  7677                           ;gsk_algo_funcs.c: 32: if ((S>C[PrevCycle]) && (S<=C[i])) {
  7678  0AB2  087C               	movf	GetCycle@PrevCycle,w
  7679  0AB3  00F2               	movwf	??_GetCycle
  7680  0AB4  3001               	movlw	1
  7681  0AB5  1C03               	skipc
  7682  0AB6  2AEF               	goto	L27
  7683  0AB7  1003               	clrc
  7684  0AB8                     L25:	
  7685  0AB8  0DF2               	rlf	??_GetCycle,f
  7686  0AB9  3EFF               	addlw	-1
  7687  0ABA  1003               	clrc
  7688  0ABB  1D03               	skipz
  7689  0ABC  2AB8               	goto	L25
  7690  0ABD  2341  120A  158A   	fcall	PL6	;call to abstracted procedure
  7691  0AC0  2352  120A  158A   	fcall	PL40	;call to abstracted procedure
  7692  0AC3  1D03               	skipz
  7693  0AC4  2ACF               	goto	u3673
  7694  0AC5  0862               	movf	(_S+2)^(0+256),w	;volatile
  7695  0AC6  0275               	subwf	??_GetCycle+3,w
  7696  0AC7  1D03               	skipz
  7697  0AC8  2ACF               	goto	u3673
  7698  0AC9  0861               	movf	(_S+1)^(0+256),w	;volatile
  7699  0ACA  0274               	subwf	??_GetCycle+2,w
  7700  0ACB  1D03               	skipz
  7701  0ACC  2ACF               	goto	u3673
  7702  0ACD  0860               	movf	_S^(0+256),w	;volatile
  7703  0ACE  0273               	subwf	??_GetCycle+1,w
  7704  0ACF                     u3673:	
  7705  0ACF  1803               	skipnc
  7706  0AD0  2B2C               	goto	l3198
  7707  0AD1  087D               	movf	GetCycle@i,w
  7708  0AD2  00F2               	movwf	??_GetCycle
  7709  0AD3  3001               	movlw	1
  7710  0AD4  1003               	clrc
  7711  0AD5                     L26:	
  7712  0AD5  0DF2               	rlf	??_GetCycle,f
  7713  0AD6  3EFF               	addlw	-1
  7714  0AD7  1003               	clrc
  7715  0AD8  1D03               	skipz
  7716  0AD9  2AD5               	goto	L26
  7717  0ADA  2341  120A  158A   	fcall	PL6	;call to abstracted procedure
  7718  0ADD  0863               	movf	(_S+3)^(0+256),w	;volatile
  7719  0ADE  3A80               	xorlw	128
  7720  0ADF  027F               	subwf	127,w
  7721  0AE0  1D03               	skipz
  7722  0AE1  2AEC               	goto	u3693
  7723  0AE2  0862               	movf	(_S+2)^(0+256),w	;volatile
  7724  0AE3  0275               	subwf	??_GetCycle+3,w
  7725  0AE4  1D03               	skipz
  7726  0AE5  2AEC               	goto	u3693
  7727  0AE6  0861               	movf	(_S+1)^(0+256),w	;volatile
  7728  0AE7  0274               	subwf	??_GetCycle+2,w
  7729  0AE8  1D03               	skipz
  7730  0AE9  2AEC               	goto	u3693
  7731  0AEA  0860               	movf	_S^(0+256),w	;volatile
  7732  0AEB  0273               	subwf	??_GetCycle+1,w
  7733  0AEC                     u3693:	
  7734  0AEC  1803               	btfsc	3,0
  7735  0AED  2B2A               	goto	l3188
  7736  0AEE  2B2C               	goto	l3198
  7737  0AEF                     L27:	
  7738                           ;gsk_algo_funcs.c: 36: if (((S>C[PrevCycle]) && (S<=86400)) || (S<=86400)) {
  7739                           
  7740  0AEF  0DF2               	rlf	??_GetCycle,f
  7741  0AF0  3EFF               	addlw	-1
  7742  0AF1  1003               	clrc
  7743  0AF2  1D03               	skipz
  7744  0AF3  2AEF               	goto	L27
  7745  0AF4  2341  120A  158A   	fcall	PL6	;call to abstracted procedure
  7746  0AF7  2352  120A  158A   	fcall	PL40	;call to abstracted procedure
  7747  0AFA  1D03               	skipz
  7748  0AFB  2B06               	goto	u3713
  7749  0AFC  0862               	movf	(_S+2)^(0+256),w	;volatile
  7750  0AFD  0275               	subwf	??_GetCycle+3,w
  7751  0AFE  1D03               	skipz
  7752  0AFF  2B06               	goto	u3713
  7753  0B00  0861               	movf	(_S+1)^(0+256),w	;volatile
  7754  0B01  0274               	subwf	??_GetCycle+2,w
  7755  0B02  1D03               	skipz
  7756  0B03  2B06               	goto	u3713
  7757  0B04  0860               	movf	_S^(0+256),w	;volatile
  7758  0B05  0273               	subwf	??_GetCycle+1,w
  7759  0B06                     u3713:	
  7760  0B06  1803               	skipnc
  7761  0B07  2B19               	goto	l3194
  7762  0B08  1BE3               	btfsc	(_S+3)^(0+256),7	;volatile
  7763  0B09  2B2A               	goto	l3188
  7764  0B0A  0863               	movf	(_S+3)^(0+256),w	;volatile
  7765  0B0B  1D03               	btfss	3,2
  7766  0B0C  2B19               	goto	l3194
  7767  0B0D  3001               	movlw	1
  7768  0B0E  0262               	subwf	(_S+2)^(0+256),w	;volatile
  7769  0B0F  1D03               	skipz
  7770  0B10  2B17               	goto	u3723
  7771  0B11  3051               	movlw	81
  7772  0B12  0261               	subwf	(_S+1)^(0+256),w	;volatile
  7773  0B13  1D03               	skipz
  7774  0B14  2B17               	goto	u3723
  7775  0B15  3081               	movlw	129
  7776  0B16  0260               	subwf	_S^(0+256),w	;volatile
  7777  0B17                     u3723:	
  7778  0B17  1C03               	btfss	3,0
  7779  0B18  2B2A               	goto	l3188
  7780  0B19                     l3194:	
  7781  0B19  1BE3               	btfsc	(_S+3)^(0+256),7	;volatile
  7782  0B1A  2B2A               	goto	l3188
  7783  0B1B  0863               	movf	(_S+3)^(0+256),w	;volatile
  7784  0B1C  1D03               	btfss	3,2
  7785  0B1D  2B2C               	goto	l3198
  7786  0B1E  3001               	movlw	1
  7787  0B1F  0262               	subwf	(_S+2)^(0+256),w	;volatile
  7788  0B20  1D03               	skipz
  7789  0B21  2B28               	goto	u3733
  7790  0B22  3051               	movlw	81
  7791  0B23  0261               	subwf	(_S+1)^(0+256),w	;volatile
  7792  0B24  1D03               	skipz
  7793  0B25  2B28               	goto	u3733
  7794  0B26  3081               	movlw	129
  7795  0B27  0260               	subwf	_S^(0+256),w	;volatile
  7796  0B28                     u3733:	
  7797  0B28  1803               	btfsc	3,0
  7798  0B29  2B2C               	goto	l3198
  7799  0B2A                     l3188:	
  7800                           
  7801                           ;gsk_algo_funcs.c: 33: CYCLE_TYPE = i;
  7802  0B2A  087D               	movf	GetCycle@i,w
  7803  0B2B  00E8               	movwf	_CYCLE_TYPE^(0+256)	;volatile
  7804  0B2C                     l3198:	
  7805  0B2C  3003               	movlw	3
  7806  0B2D  0AFD               	incf	GetCycle@i,f
  7807  0B2E  027D               	subwf	GetCycle@i,w
  7808  0B2F  1C03               	skipc
  7809  0B30  2A6E               	goto	l3180
  7810                           
  7811                           ;gsk_algo_funcs.c: 38: }
  7812                           ;gsk_algo_funcs.c: 39: }
  7813                           ;gsk_algo_funcs.c: 40: }
  7814                           ;gsk_algo_funcs.c: 41: PREV_CYCLE_TYPE = GetPrevCycle(CYCLE_TYPE);
  7815  0B31  0868               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  7816  0B32  2337               	fcall	_GetPrevCycle
  7817  0B33  1283               	bcf	3,5	;RP0=0, select bank2
  7818  0B34  1703               	bsf	3,6	;RP1=1, select bank2
  7819  0B35  00EA               	movwf	_PREV_CYCLE_TYPE^(0+256)	;volatile
  7820  0B36  0008               	return
  7821  0B37                     __end_of_GetCycle:	
  7822  0B37                     __ptext43:	
  7823 ;; *************** function _GetPrevCycle *****************
  7824 ;; Defined at:
  7825 ;;		line 18 in file "libs/gsk_algo_funcs.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  cycle           1    wreg     unsigned char 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  cycle           1    1[COMMON] unsigned char 
  7830 ;;  PrevCycle       1    0[COMMON] unsigned char 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      unsigned char 
  7833 ;; Registers used:
  7834 ;;		wreg, status,2, status,0
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/A00
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7840 ;;      Params:         0       0       0       0       0       0
  7841 ;;      Locals:         2       0       0       0       0       0
  7842 ;;      Temps:          0       0       0       0       0       0
  7843 ;;      Totals:         2       0       0       0       0       0
  7844 ;;Total ram usage:        2 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_GetCumulativePeriodsForStates
  7850 ;;		_GetCycle
  7851 ;; This function uses a non-reentrant model
  7852 ;;
  7853                           
  7854                           
  7855                           ;psect for function _GetPrevCycle
  7856  0B37                     _GetPrevCycle:	
  7857                           
  7858                           ;incstack = 0
  7859                           ; Regs used in _GetPrevCycle: [wreg+status,2+status,0]
  7860                           ;GetPrevCycle@cycle stored from wreg
  7861  0B37  00F1               	movwf	GetPrevCycle@cycle
  7862                           
  7863                           ;gsk_algo_funcs.c: 19: UINT8 PrevCycle;
  7864                           ;gsk_algo_funcs.c: 20: if (cycle > 0)
  7865  0B38  0871               	movf	GetPrevCycle@cycle,w
  7866  0B39  1903               	btfsc	3,2
  7867  0B3A  2B3E               	goto	l2660
  7868                           
  7869                           ;gsk_algo_funcs.c: 21: PrevCycle = cycle - 1;
  7870  0B3B  0871               	movf	GetPrevCycle@cycle,w
  7871  0B3C  3EFF               	addlw	255
  7872  0B3D  2B3F               	goto	L30
  7873  0B3E                     l2660:	
  7874                           
  7875                           ;gsk_algo_funcs.c: 22: else
  7876                           ;gsk_algo_funcs.c: 23: PrevCycle = 3 - 1;
  7877  0B3E  3002               	movlw	2
  7878  0B3F                     L30:	
  7879  0B3F  00F0               	movwf	GetPrevCycle@PrevCycle
  7880                           
  7881                           ;gsk_algo_funcs.c: 24: return PrevCycle;
  7882  0B40  0008               	return
  7883  0B41                     __end_of_GetPrevCycle:	
  7884  007E                     btemp	set	126	;btemp
  7885  007E                     wtemp	set	126
  7886  007E                     wtemp0	set	126
  7887  0080                     wtemp1	set	128
  7888  0082                     wtemp2	set	130
  7889  0084                     wtemp3	set	132
  7890  0086                     wtemp4	set	134
  7891  0088                     wtemp5	set	136
  7892  007F                     wtemp6	set	127
  7893  007E                     ttemp	set	126
  7894  007E                     ttemp0	set	126
  7895  0081                     ttemp1	set	129
  7896  0084                     ttemp2	set	132
  7897  0087                     ttemp3	set	135
  7898  007F                     ttemp4	set	127
  7899  007E                     ltemp	set	126
  7900  007E                     ltemp0	set	126
  7901  0082                     ltemp1	set	130
  7902  0086                     ltemp2	set	134
  7903  0080                     ltemp3	set	128
  7904  0B41                     PL6:	
  7905  0B41  0D72               	rlf	??_GetCycle,w
  7906  0B42  3E20               	addlw	32
  7907  0B43  0084               	movwf	4
  7908  0B44  0800               	movf	0,w
  7909  0B45  00F3               	movwf	??_GetCycle+1
  7910  0B46  0A84               	incf	4,f
  7911  0B47  0800               	movf	0,w
  7912  0B48  00F4               	movwf	??_GetCycle+2
  7913  0B49  0A84               	incf	4,f
  7914  0B4A  0800               	movf	0,w
  7915  0B4B  00F5               	movwf	??_GetCycle+3
  7916  0B4C  0A84               	incf	4,f
  7917  0B4D  0800               	movf	0,w
  7918  0B4E  00F6               	movwf	??_GetCycle+4
  7919  0B4F  3A80               	xorlw	128
  7920  0B50  00FF               	movwf	127
  7921  0B51  0008               	return
  7922  0B52                     __end_ofPL6:	
  7923  0B52                     PL40:	
  7924  0B52  1283               	bcf	3,5	;RP0=0, select bank2
  7925  0B53  1703               	bsf	3,6	;RP1=1, select bank2
  7926  0B54  0863               	movf	(_S+3)^(0+256),w	;volatile
  7927  0B55  3A80               	xorlw	128
  7928  0B56  027F               	subwf	127,w
  7929  0B57  0008               	return
  7930  0B58                     __end_ofPL40:	


Data Sizes:
    Strings     20
    Constant    7
    Data        223
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            68     66      66
    BANK1            30     21      27
    BANK3h           11     10      10
    BANK3l           10      0       0
    BANK2            46     30      41

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    IsValidGPS@GPSData	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK2[6]), 

    UART_ReadValidTimeFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK2[6]), 

    UART_ReadFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK2[6]), 

    Lcd_Text@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> STR_2(CODE[12]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_GetCycle
    _WriteLongInt->___aldiv
    _Lcd_WriteChar->___aldiv
    _UART_ReadValidTimeFromGPS_TO->_UART_ReadFromGPS_TO
    _UART_ReadFromGPS_TO->_UART_Read_TO
    _UART_Init->___altoft
    _trunc->___altoft
    ___fttol->___altoft
    ___altoft->___ftpack
    ___ftadd->___altoft
    ___ftmul->___altoft
    ___ftdiv->___altoft
    ___bmul->___aldiv
    _ReadRTCAsSec->___lmul
    _I2C_ReadAtAddress->_I2C_Master_Read
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Init->_Lcd_Command
    _Lcd_Init->_Lcd_Delay5500us
    _I2C_Master_Init->___lldiv
    _GetCycle->_GetPrevCycle
    _GetCumulativePeriodsForStates->_GetPrevCycle

Critical Paths under _main in BANK0

    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___bmul
    _UART_Init->_round
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftadd
    ___ftsub->_trunc
    ___ftadd->___ftdiv
    ___ftdiv->___ftmul
    _ReadVars->___bmul

Critical Paths under _main in BANK1

    _main->_UART_Init
    _UART_Init->_round
    _round->___ftsub

Critical Paths under _main in BANK3h

    None.

Critical Paths under _main in BANK3l

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                40    40      0   30319
                                              0 BANK3h    10    10      0
                                              0 BANK2     30    30      0
      _GetCumulativePeriodsForStates
                           _GetCycle
                    _I2C_Master_Init
                           _Lcd_Init
                           _Lcd_Text
                       _ReadRTCAsSec
                           _ReadVars
                          _SwitchGPS
                          _UART_Init
       _UART_ReadValidTimeFromGPS_TO
                       _WriteLongInt
                            ___almod
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     402
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                        10     3      7    3955
                                              7 BANK0     10     3      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___bmul
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     592
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2     908
                                              3 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_ReadValidTimeFromGPS_TO                         2     1      1     862
                                              8 COMMON     2     1      1
                         _IsValidGPS
                _UART_ReadFromGPS_TO
 ---------------------------------------------------------------------------------
 (2) _UART_ReadFromGPS_TO                                  7     6      1     397
                                              1 COMMON     7     6      1
                       _UART_Read_TO
 ---------------------------------------------------------------------------------
 (3) _UART_Read_TO                                         1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _IsValidGPS                                           2     2      0     319
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           12     8      4   18737
                                              9 BANK1     12     8      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    9040
                                             63 BANK0      3     0      3
                                              6 BANK1      3     3      0
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    2932
                                             55 BANK0      8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     314
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             13     9      4     398
                                             42 BANK0     13     9      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             6     2      4    1951
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3038
                                              0 BANK1      6     0      6
                            ___ftadd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    2865
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2221
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2095
                                             15 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SwitchGPS                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            17    17      0     896
                                              3 BANK0     17    17      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     384
                                              0 BANK0      3     2      1
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAsSec                                        18    14      4    2097
                                              0 BANK0     18    14      4
                  _I2C_ReadAtAddress
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     596
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     464
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadAtAddress                                    3     2      1     829
                                              4 COMMON     3     2      1
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     323
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      4     2      2      98
                                              0 COMMON     4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             4     2      2     745
                                              2 COMMON     4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           2     2      0     176
                                              0 COMMON     2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              2 COMMON     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          2     2      0     176
                                              0 COMMON     2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _GetCycle                                            12    12      0     291
                                              2 COMMON    12    12      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (1) _GetCumulativePeriodsForStates                        6     6      0     293
                                              2 COMMON     6     6      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (2) _GetPrevCycle                                         2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetCumulativePeriodsForStates
     _GetPrevCycle
   _GetCycle
     _GetPrevCycle
   _I2C_Master_Init
     ___lldiv
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5us
   _ReadRTCAsSec
     _I2C_ReadAtAddress
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___lmul
     ___wmul
   _ReadVars
     ___bmul
       ___aldiv (ARG)
     _eeprom_read
   _SwitchGPS
   _UART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _round
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _frexp
   _UART_ReadValidTimeFromGPS_TO
     _IsValidGPS
     _UART_ReadFromGPS_TO
       _UART_Read_TO
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
     ___aldiv
     ___bmul
       ___aldiv (ARG)
     ___lmul
   ___almod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3l               A      0       0      10        0.0%
BITBANK3l            A      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BITBANK3h            B      0       0       7        0.0%
BANK3h               B      A       A       9       90.9%
BANK2               2E     1E      29      11       89.1%
BITBANK2            2E      0       0      13        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               1E     15      1B       6       90.0%
BITBANK1            1E      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               44     42      42       4       97.1%
BITBANK0            44      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      9E      14        0.0%
ABS                  0      0      9E      12        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0      DF       0       87.1%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Nov 08 13:36:47 2016

                          ___altoft@exp 007C                                       _C 0020  
                                     _S 0160                                       pc 0002  
                        ___bmul@product 002D                             __CFG_CP$OFF 0000  
                                    PL2 0F69                                      PL4 0FA7  
                                    PL6 0B41                                      PL8 0FCA  
                         ___altoft@sign 007D               UART_ReadFromGPS_TO@Output 0075  
                                    l63 0212                                      _RD 0C60  
                                    _WR 0C61                                      fsr 0004  
                   ___wmul@multiplicand 0072              UART_ReadFromGPS_TO@TimeOut 0071  
                          ___ftadd@exp1 0055                            ___ftadd@exp2 0054  
                                   PL10 0FD5                                     PL20 03D3  
                                   PL12 0FE0                                     PL30 0FF9  
                                   PL22 0CB6                                     PL14 0FF0  
                                   PL40 0B52                                     PL32 03EE  
                                   PL24 03DC                                     PL16 03C7  
                                   PL34 03F5                                     PL26 03E5  
                                   PL18 07CE                                     PL36 03FC  
                                   PL28 07D9                                     PL38 07E0  
                          ___ftadd@sign 0053                                     l308 0C77  
                                   l638 0A23                                     l920 0659  
                                   l832 08AD                                     l819 00C4  
                                   l932 0681                                     l678 03A5  
                                   l775 0C87                                     l956 0582  
                                   l974 06B5                                     _RA0 0028  
                                   _RA1 0029                                     _RA2 002A  
                                   _RA3 002B                                     _RA4 002C  
                                   _RC1 0039                                     _RA5 002D  
                                   _C_D 0169                                     _PEN 048A  
                          __CFG_CPD$OFF 0000                                     _SEN 0488  
                          main@SecError 0151                                     fsr0 0004  
                                   indf 0000                            __CFG_IESO$ON 0000  
                          __CFG_FOSC$HS 0000                       GetCycle@PrevCycle 007C  
                   _UART_ReadFromGPS_TO 09D7                     __end_of_Lcd_Command 02E6  
                     GetPrevCycle@cycle 0071                           ?_ReadRTCAsSec 002C  
                          __CFG_LVP$OFF 0000                            ___ftdiv@cntr 0044  
                      main@DiffInSecond 014A                            ___ftdiv@sign 0049  
                                  l3100 0367                                    l3040 012B  
                                  l3112 037B                                    l2400 055C  
                                  l3042 012E                                    l3050 0138  
                                  l2330 0671                                    l2402 0561  
                                  l3044 0131                                    l3052 0146  
                                  l2324 065D                                    l2420 058D  
                                  l2412 0579                                    l2404 0566  
                                  l2502 029B                                    l3046 0134  
                                  l2334 067F                                    l2326 0662  
                                  l2414 057E                                    l2406 056A  
                                  l2344 02E6                                    l2512 02B6  
                                  l2336 0676                                    l2328 0667  
                                  l2600 0771                                    l2360 05D9  
                                  l3072 004D                                    l3080 0055  
                                  l3312 0D56                                    l3304 0D3E  
                                  l3170 0A67                                    l3162 0A35  
                                  l2514 02C2                                    l3058 0148  
                                  l2426 0598                                    l2362 05E4  
                                  l2610 04DF                                    l3250 08CA  
                                  l3242 08BA                                    l3402 0EF6  
                                  l3330 0DBD                                    l3156 0A28  
                                  l3180 0A6E                                    l2516 02CF  
                                  l2540 01CE                                    l2372 0529  
                                  l2444 0600                                    l3324 0DAC  
                                  l3316 0D5C                                    l3308 0D47  
                                  l2518 02D8                                    l2542 01DB  
                                  l3086 02F1                                    l2438 05B4  
                                  l2382 053F                                    l2462 0624  
                                  l2446 0605                                    l2630 009A  
                                  l3262 08FD                                    l3318 0D62  
                                  l3168 0A3E                                    l2544 01E4  
                                  l2528 01A7                                    l2376 0530  
                                  l2472 0630                                    l2712 0990  
                                  l2704 0A0C                                    l2624 0091  
                                  l2800 00D3                                    l3440 0F3C  
                                  l3432 0F2A                                    l3416 0F0B  
                                  l3352 0E6E                                    l3194 0B19  
                                  l2538 01C2                                    l3098 0366  
                                  l2394 054D                                    l2474 063A  
                                  l2466 062C                                    l2730 09B8  
                                  l2626 0094                                    l2634 009E  
                                  l2810 00E7                                    l3258 08EF  
                                  l3426 0F18                                    l3370 0E9F  
                                  l3362 0E94                                    l3290 0D0E  
                                  l2660 0B3E                                    l3188 0B2A  
                                  l2572 0C71                                    l2900 0738  
                                  l2724 09AA                                    l2628 0097  
                                  l2636 00AC                                    l3452 0F5F  
                                  l3436 0F33                                    l3380 0EBA  
                                  l3364 0E96                                    l3460 0DF5  
                                  l3198 0B2C                                    l2750 0C10  
                                  l2478 0648                                    l2742 09D4  
                                  l2718 099C                                    l2582 0A1F  
                                  l2822 0112                                    l3454 0F63  
                                  l2912 074D                                    l2488 07A1  
                                  l2736 09C6                                    l2584 0A1A  
                                  l2680 09E1                                    l3448 0F47  
                                  l3456 0E00                                    l2754 0C18  
                                  l2834 06A4                                    l2690 09F8  
                                  l2826 0120                                    l3458 0F65  
                                  l3386 0EC7                                    l3298 0D31  
                                  l2932 0947                                    l2908 0744  
                                  l3396 0EE9                                    l2944 0972  
                                  l2768 0C9D                                    l2856 06C8  
                                  l2696 0A07                                    l2688 09F6  
                                  l2778 03BB                                    l2874 070D  
                                  l2878 071E                                    l2896 072F  
                                  STR_1 0819                                    STR_2 080D  
                                  _BRGH 04C2                                    _CREN 00C4  
                                  _EE_C 00D2                                    u2405 0609  
                                  u4103 0F5D                                    u2600 02B3  
                                  u2520 0276                                    u2504 0268  
                                  u2515 026B                                    u4115 0E12  
                                  u2620 02BF                                    u3325 06D6  
                                  u2550 0287                                    u2534 0279  
                                  u2640 02CC                                    u2800 01BF  
                                  u2720 0182                                    u2704 0174  
                                  u2545 027C                                    u4137 0F3F  
                                  u2490 0265                                    u4147 01A9  
                                  u2715 0177                                    u3275 00FA  
                                  u2660 02D5                                    u2580 0298  
                                  u2564 028A                                    u2820 01CB  
                                  u3445 095A                                    u2485 025A  
                                  u4157 01E6                                    u2750 0193  
                                  u2734 0185                                    u2575 028D  
                                  u4167 024D                                    u2840 01D8  
                                  u3713 0B06                                    u4177 029D  
                                  u2745 0188                                    u2690 0171  
                 __size_of_WriteLongInt 006C                                    u3723 0B17  
                                  u4187 02DA                                    u2860 01E1  
                                  u2780 01A4                                    u2764 0196  
                                  u3733 0B28                                    u3653 0AB2  
                                  u2685 0166                                    u3750 000E  
                                  u2775 0199                                    u3815 08D8  
                                  u3903 0DA6                                    u2880 0C6E  
                                  u3920 0FA5                                    u3673 0ACF  
                                  u3595 0914                                    _RCEN 048B  
                                  _RCIF 0065                                    u3693 0AEC  
                                  u3925 0F93                                    u3926 0F95  
                                  u3927 0F9B                                    u3928 0F9D  
                                  u3929 0FA3                                    u3955 0DE6  
                                  _SPEN 00C7                                    _TXEN 04C5  
                                  _SYNC 04C4                       ??_Lcd_Delay5500us 0070  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
                                  _main 0CBF                            ___ftpack@arg 0070  
                          ___ftpack@exp 0073                    __end_of_Lcd_Delay5us 02EA  
                                  btemp 007E                                    ltemp 007E  
                                  start 0000                                    ttemp 007E  
                                  wtemp 007E                    ?_UART_ReadFromGPS_TO 0071  
                     ___bmul@multiplier 002E                           __CFG_MCLRE$ON 0000  
                          ___ftmul@cntr 0039                            ___ftmul@sign 003A  
                            _Lcd_CharCP 015E                            ___fttol@exp1 0062  
                          ___fttol@lval 005E                        ?_I2C_Master_Init 002C  
                      ?_I2C_Master_Read 0070                        ?_I2C_Master_Wait 0070  
                      ?_I2C_Master_Stop 0070                         __end_of___aldiv 0129  
                       __end_of___almod 0906                                   ?_main 0070  
                                 _ACKEN 048C                                   _ACKDT 048D  
                                 _EEADR 010D                         __end_of___ftadd 05C7  
                                 _BRG16 0C3B                           __CFG_WDTE$OFF 0000  
                       __end_of___ftdiv 06FC                                   _ANSEL 0188  
                       __end_of___lldiv 097B                    __end_of_GetPrevCycle 0B41  
                       __end_of___ftmul 076A                         __end_of___ftsub 0795  
                       __end_of___fttol 0651                                   _RCREG 001A  
                                 _SPBRG 0099                            _WriteLongInt 0023  
                   ___lmul@multiplicand 0074                          ??_ReadRTCAsSec 0030  
                    __size_of_UART_Init 0080                              _IsValidGPS 0984  
                                 _frexp 0795                           ___ftpack@sign 0074  
                                 _round 0483                                   main@i 015D  
                                 main@j 015A                                   main@k 014F  
                                 main@l 015E                                   _trunc 04CE  
                        __CFG_BOREN$OFF 0000                                   pclath 000A  
                                 ltemp0 007E                                   ltemp1 0082  
                                 ltemp2 0086                                   ltemp3 0080  
                                 ttemp0 007E                                   ttemp1 0081  
                                 ttemp2 0084                                   ttemp3 0087  
                                 ttemp4 007F                                   status 0003  
                                 wtemp0 007E                                   wtemp1 0080  
                                 wtemp2 0082                                   wtemp3 0084  
                                 wtemp4 0086                                   wtemp5 0088  
                                 wtemp6 007F                       _ReadRTCAsSec$1004 0037  
                      __end_of_GetCycle 0B37                   ??_UART_ReadFromGPS_TO 0072  
                      __end_of_Lcd_Init 0249                        __end_of_Lcd_Text 015E  
                       __initialization 07E7                            __end_of_main 0F69  
                      __end_of_ReadVars 03A4                             _Lcd_Command 0252  
         main@StateAudioSplOnOffCounter 0158                         ReadRTCAsSec@Out 0039  
                                ??_main 01E5                           ___fttol@sign1 005D  
                     ?_I2C_Master_Start 0070                       ?_I2C_Master_Write 0070  
                    ??_I2C_Master_Start 0070                      ??_I2C_Master_Write 0072  
                                ?_frexp 0070                        __end_of___altoft 05F6  
                                _EEDATA 010C                                  _EECON1 018C  
                      __end_of___ftpack 0693                                  ?_round 006B  
                                _ANSELH 0189                                  ?_trunc 0063  
                                _EE_C_D 00DE                       _I2C_ReadAtAddress 0C27  
                      WriteLongInt@Sign 0039                                  _SPBRGH 009A  
                        Lcd_Text@buffer 0073                      ?_I2C_ReadAtAddress 0074  
                                _SSPADD 0093                                  _TRISC3 043B  
                                _TRISC4 043C                                  _SSPCON 0014  
                                _SSPBUF 0013                        WriteLongInt@size 0038  
                        __CFG_PWRTE$OFF 0000                    __size_of_eeprom_read 0015  
                   ??_I2C_ReadAtAddress 0075                       __end_of_UART_Init 0483  
                                ___bmul 03B9                             ?_Lcd_CharCP 0070  
                                ___lmul 0C83                               ??___aldiv 0078  
                             ??___almod 0078                                  ___wmul 0C0E  
                             ??___ftadd 0050                               ??___ftdiv 0041  
                             ??___lldiv 0078                               ??___ftmul 0032  
                             ??___ftsub 007E                               ??___fttol 005A  
                 __end_of_Lcd_WriteChar 00B4                   ___ftmul@f3_as_product 0036  
                          __pdataEEDATA 0000               __end_of_I2C_ReadAtAddress 0C50  
                                round@f 00D8                                  round@x 006B  
                           ?_IsValidGPS 0070                                  trunc@i 0066  
                 __size_of_Lcd_Delay5us 0004                                  trunc@x 0063  
                    Lcd_Command@command 0071                      __size_of_SwitchGPS 000B  
               __end_of__initialization 07FC                              ___altoft@c 0078  
                 main@StateSecRemaining 0153                         eeprom_read@addr 0070  
                            ___ftadd@f1 004A                              ___ftadd@f2 004D  
  __end_ofUART_ReadFromGPS_TO@StartCode 080D            UART_ReadFromGPS_TO@StartCode 0806  
                            ___ftdiv@f1 003E                              ___ftdiv@f2 003B  
                            ___ftdiv@f3 0045                       IsValidGPS@GPSData 0071  
                   ___bmul@multiplicand 002C                          __pcstackBANK3h 01E5  
                            ___ftmul@f1 002C                              ___ftmul@f2 002F  
                            ___ftsub@f1 00D5                              ___ftsub@f2 00D2  
                            ___fttol@f1 0056                          __pcstackCOMMON 0070  
                  __end_of_ReadRTCAsSec 0C0E                            __pidataBANK2 0000  
                 __size_of_GetPrevCycle 000A                           __end_of_frexp 07CE  
                         __end_of_round 04CE                           __end_of_trunc 0506  
                            __end_ofPL2 0FA7                              __end_ofPL4 0FCA  
                            __end_ofPL6 0B52                              __end_ofPL8 0FD5  
                          _Lcd_Delay5us 02E6                         _Lcd_Delay5500us 0249  
                        Lcd_WriteChar@c 0030                               ?_GetCycle 0070  
                        Lcd_WriteChar@x 002F                          Lcd_WriteChar@y 0031  
                            SwitchGPS@a 0070                               ?_Lcd_Init 0070  
                             ?_Lcd_Text 0072                                 ??_frexp 0074  
                   __size_of_Lcd_CharCP 0094                                 ??_round 007E  
                               ??_trunc 007E                              __pbssBANK1 00E7  
                            __pbssBANK2 0160                               ?_ReadVars 0070  
               I2C_ReadAtAddress@IntAdd 0074                            _GetPrevCycle 0B37  
                   UART_Read_TO@TimeOut 0070                              __pmaintext 0CBF  
                               ?___bmul 002C                                 ?___lmul 0070  
                               ?___wmul 0070                     __size_of_IsValidGPS 0053  
                             ?___altoft 0078                          ___lmul@product 0078  
                             ?___ftpack 0070                       __end_of_SwitchGPS 0012  
      main@StateAudioNormalOnOffCounter 0156                                 _CONFIG0 0167  
                            ??_GetCycle 0072                              ??_Lcd_Init 0072  
            __size_of_I2C_ReadAtAddress 0029                              ??_Lcd_Text 0074  
                               _STATE_1 00A0                                 _STATE_2 0110  
                               _STATE_3 0190                                 _SSPCON2 0091  
                               _SSPSTAT 0094                              __stringtab 0800  
                        _UART_Init$1006 00DF                          _UART_Init$1007 00E2  
                         ?_UART_Read_TO 0070                         _EE_STATE_BREAKS 00DB  
                            ??_ReadVars 002F                  ReadRTCAsSec@TempVar000 003D  
                               ___aldiv 00B4                         __size_of___bmul 000E  
                               ___almod 089D                       Lcd_WriteChar@data 0032  
                       __size_of___lmul 0033                                 ___ftadd 0506  
                               ___ftdiv 0693                                 ___lldiv 0933  
                       __size_of___wmul 0019                                 ___ftmul 06FC  
                               ___ftsub 076A                                 ___fttol 05F6  
               __end_of_Lcd_Delay5500us 0252                              ??___altoft 007C  
                            ??___ftpack 0075                            ?_Lcd_Command 0070  
                               __ptext1 089D                                 __ptext2 0023  
                               __ptext3 00B4                                 __ptext4 008F  
                               __ptext5 097B                                 __ptext6 09D7  
                               __ptext7 0A18                                 __ptext8 0984  
                               __ptext9 0403                               _EE_STATES 0000  
                      ___aldiv@dividend 0074                __size_of_I2C_Master_Init 002D  
              __size_of_I2C_Master_Read 001F                __size_of_I2C_Master_Wait 0009  
              __size_of_I2C_Master_Stop 0003                    end_of_initialization 07FC  
                        ??_UART_Read_TO 0070             __end_of_UART_ReadFromGPS_TO 0A18  
                 GetPrevCycle@PrevCycle 0070         ??_GetCumulativePeriodsForStates 0072  
                 __size_of_ReadRTCAsSec 00B6               __size_of_I2C_Master_Start 0003  
             __size_of_I2C_Master_Write 0005                         ___lldiv@divisor 0070  
                             GetCycle@i 007D                         ___lldiv@counter 007C  
  __end_of_UART_ReadValidTimeFromGPS_TO 0984   __size_of_UART_ReadValidTimeFromGPS_TO 0009  
          _UART_ReadValidTimeFromGPS_TO 097B                            ??_Lcd_CharCP 0070  
                      ___aldiv@quotient 007A                        I2C_Master_Init@c 002C  
                      I2C_Master_Read@a 0070                               Lcd_Text@x 0072  
                             Lcd_Text@y 0074                               _UART_Init 0403  
   UART_ReadValidTimeFromGPS_TO@TimeOut 0078                               _TRISAbits 0085  
                          ??_IsValidGPS 0070                            _ReadRTCAsSec 0B58  
                    __end_of_Lcd_CharCP 01F2                             ___ftdiv@exp 0048  
                         ??_eeprom_read 0070                               ReadVars@i 003F  
                             ReadVars@j 003E                             ___ftmul@exp 0035  
         ?_UART_ReadValidTimeFromGPS_TO 0078                          __end_of___bmul 03C7  
                        __end_of___lmul 0CB6                        ?_Lcd_Delay5500us 0070  
                         __pidataEEDATA 0000                          __end_of___wmul 0C27  
                    __end_of_IsValidGPS 09D7                              ?_UART_Init 00DB  
              _STATE_CUMULATIVE_PERIODS 00E7                             __end_ofPL10 0FE0  
                           __end_ofPL20 03DC                             __end_ofPL12 0FF0  
                           __end_ofPL30 1000                             __end_ofPL22 0CBF  
                           __end_ofPL14 0FF9                             __end_ofPL40 0B58  
                           __end_ofPL32 03F5                             __end_ofPL24 03E5  
                           __end_ofPL16 03D3                             __end_ofPL34 03FC  
                           __end_ofPL26 03EE                             __end_ofPL18 07D9  
                           __end_ofPL36 0403                             __end_ofPL28 07E0  
                           __end_ofPL38 07E7                     start_initialization 07E7  
                     __size_of_GetCycle 00CA                       __size_of_Lcd_Init 0057  
                     __size_of_Lcd_Text 0035                              frexp@value 0070  
                     ??_I2C_Master_Init 0030                       ??_I2C_Master_Read 0072  
                     ??_I2C_Master_Wait 0070                       ??_I2C_Master_Stop 0070  
                       WriteLongInt@POS 003B                         WriteLongInt@Val 0034  
                __size_of_Lcd_WriteChar 0025                       __size_of_ReadVars 00BA  
 __end_of_GetCumulativePeriodsForStates 0A6D  __size_of_GetCumulativePeriodsForStates 0046  
         _GetCumulativePeriodsForStates 0A27                                ??___bmul 007E  
                              ??___lmul 0078                                ??___wmul 0074  
                   __end_of_eeprom_read 03B9                              init_fetch0 0012  
                           __pdataBANK2 016A                    __end_of_UART_Read_TO 0A27  
           UART_ReadFromGPS_TO@TempChar 0076                       __size_of___altoft 002F  
                     __size_of___ftpack 0042                             __pbssEEDATA 00DE  
                         ?_WriteLongInt 0033                    __size_of_Lcd_Command 0094  
                             _SwitchGPS 0007                               ___latbits 0002  
               main@GPS_On_Time_Counter 0148                           __pcstackBANK0 002C  
                         __pcstackBANK1 00D2                           __pcstackBANK2 0142  
                         WriteLongInt@x 0033                           WriteLongInt@y 003C  
                main@State2OnOffCounter 0154                        IsValidGPS@Result 0070  
                I2C_ReadAtAddress@DevID 0076                        _I2C_Master_Start 0C55  
                      _I2C_Master_Write 0C50                                ?___aldiv 0070  
                              ?___almod 0070                         _PREV_CYCLE_TYPE 016A  
                              ?___ftadd 004A                                ?___ftdiv 003B  
                              ?___lldiv 0070                                ?___ftmul 002C  
                              ?___ftsub 00D2                                ?___fttol 0056  
                           ??_UART_Init 007E                        ___almod@dividend 0074  
                             __pstrings 0800                          ??_WriteLongInt 003A  
        ??_UART_ReadValidTimeFromGPS_TO 0079                           _Lcd_WriteChar 008F  
                            ?_SwitchGPS 0070                    UART_ReadFromGPS_TO@i 0073  
                        __size_of_frexp 0039                              UART_Init@x 00E5  
                        __size_of_round 004B                          __size_of_trunc 0038  
                       ___aldiv@divisor 0070                         ___aldiv@counter 0078  
                        ___wmul@product 0074                             _eeprom_read 03A4  
                    main@OutForThePorts 015B          ?_GetCumulativePeriodsForStates 0070  
                     UART_Init@baudrate 00DB      UART_ReadValidTimeFromGPS_TO@Output 0079  
                          Lcd_Init@data 0072                             __stringbase 0805  
                        ?_Lcd_WriteChar 002F                       ___wmul@multiplier 0070  
                              _GetCycle 0A6D                                _Lcd_Init 01F2  
                              _Lcd_Text 0129                     I2C_Master_Read@temp 0072  
                     ___lmul@multiplier 0070                                _ReadVars 02EA  
                             frexp@eptr 0073                            Lcd_Text@data 0075  
                         _STATE_PERIODS 01CC            __size_of_UART_ReadFromGPS_TO 0041  
          main@TimeSinceTheStartOfCycle 014B                  UART_ReadFromGPS_TO@Pos 0077  
                 __size_of_UART_Read_TO 000F                        __size_of___aldiv 0075  
                      __size_of___almod 0069                        __size_of___ftadd 00C1  
                      __size_of___ftdiv 0069                        __size_of___lldiv 0048  
                              ___altoft 05C7                        __size_of___ftmul 006E  
                      __size_of___ftsub 002B                        __size_of___fttol 005B  
                              ___ftpack 0651                      __end_of__stringtab 0806  
                         ?_Lcd_Delay5us 0070                         _I2C_Master_Init 0906  
                       _I2C_Master_Read 0C58                         _I2C_Master_Wait 0C77  
                           ??_SwitchGPS 0070                         _I2C_Master_Stop 0C80  
                 I2C_ReadAtAddress@data 0075                                __ptext10 0483  
                              __ptext11 04CE                                __ptext20 0007  
                              __ptext12 0795                                __ptext21 02EA  
                              __ptext13 05F6                                __ptext30 0C55  
                              __ptext22 03A4                                __ptext14 05C7  
                              __ptext31 0C58                                __ptext23 03B9  
                              __ptext15 076A                                __ptext40 0933  
                              __ptext32 0C77                                __ptext24 0B58  
                              __ptext16 0506                                __ptext41 0A6D  
                              __ptext33 0129                                __ptext25 0C0E  
                              __ptext17 06FC                                __ptext42 0A27  
                              __ptext34 015E                                __ptext26 0C83  
                              __ptext18 0693                                __ptext43 0B37  
                              __ptext35 01F2                                __ptext27 0C27  
                              __ptext19 0651                                __ptext36 0249  
                              __ptext28 0C50                                __ptext37 0252  
                              __ptext29 0C80                                __ptext38 02E6  
                              __ptext39 0906                       __CFG_BOR4V$BOR21V 0000  
                       ___almod@divisor 0070                         ___almod@counter 0078  
                           Lcd_CharCP@c 0071                            _UART_Read_TO 0A18  
                            trunc@expon 0069                           __size_of_main 02AA  
                         ?_GetPrevCycle 0070                              _CYCLE_TYPE 0168  
                  __end_of_WriteLongInt 008F          GetCumulativePeriodsForStates@i 0077  
        GetCumulativePeriodsForStates@j 0076                         ??_Lcd_WriteChar 007E  
                        ??_Lcd_Delay5us 0070                            _STATE_BREAKS 0164  
              __end_of_I2C_Master_Start 0C58                __end_of_I2C_Master_Write 0C55  
              __size_of_Lcd_Delay5500us 0009                                init_ram0 0016  
                        ??_GetPrevCycle 0070                        ___lldiv@dividend 0074  
                             stringcode 0800                 __end_of_I2C_Master_Init 0933  
               __end_of_I2C_Master_Read 0C77                 __end_of_I2C_Master_Wait 0C80  
               __end_of_I2C_Master_Stop 0C83                           ??_Lcd_Command 0070  
                      ___lldiv@quotient 0078                       I2C_Master_Write@d 0070  
                              stringdir 0800                                stringtab 0800  
                          ___aldiv@sign 0079                            ___almod@sign 0079  
                           main@GPSData 0142                            ?_eeprom_read 0070  
