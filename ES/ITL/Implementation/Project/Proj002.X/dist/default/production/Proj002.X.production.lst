

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Wed Nov 09 15:39:31 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK3h,global,class=BANK3,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text20,local,class=CODE,merge=1,delta=2
    26                           	psect	text24,local,class=CODE,merge=1,delta=2
    27                           	psect	text36,local,class=CODE,merge=1,delta=2
    28                           	psect	text41,local,class=CODE,merge=1,delta=2
    29                           	psect	text44,local,class=CODE,merge=1,delta=2
    30                           	psect	text46,local,class=CODE,merge=1,delta=2
    31                           	psect	text47,local,class=CODE,merge=1,delta=2
    32                           	psect	pa_nodes,global,class=CODE,delta=2
    33                           	dabs	1,0x20,12,_C
    34                           	dabs	1,0xA0,50,_STATE_1
    35                           	dabs	1,0x110,50,_STATE_2
    36                           	dabs	1,0x190,50,_STATE_3
    37                           	dabs	1,0x1CC,25,_STATE_PERIODS
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  000E                     	;# 
    53  000E                     	;# 
    54  000F                     	;# 
    55  0010                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0014                     	;# 
    60  0015                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001D                     	;# 
    71  001E                     	;# 
    72  001F                     	;# 
    73  0081                     	;# 
    74  0085                     	;# 
    75  0086                     	;# 
    76  0087                     	;# 
    77  0089                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  008E                     	;# 
    81  008F                     	;# 
    82  0090                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0093                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  0105                     	;# 
   101  0107                     	;# 
   102  0108                     	;# 
   103  0109                     	;# 
   104  010C                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  0185                     	;# 
   110  0187                     	;# 
   111  0188                     	;# 
   112  0189                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  008F                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0093                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  0105                     	;# 
   177  0107                     	;# 
   178  0108                     	;# 
   179  0109                     	;# 
   180  010C                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  010F                     	;# 
   185  0185                     	;# 
   186  0187                     	;# 
   187  0188                     	;# 
   188  0189                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001D                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  0081                     	;# 
   226  0085                     	;# 
   227  0086                     	;# 
   228  0087                     	;# 
   229  0089                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  008F                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009E                     	;# 
   251  009F                     	;# 
   252  0105                     	;# 
   253  0107                     	;# 
   254  0108                     	;# 
   255  0109                     	;# 
   256  010C                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  010E                     	;# 
   260  010F                     	;# 
   261  0185                     	;# 
   262  0187                     	;# 
   263  0188                     	;# 
   264  0189                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  000E                     	;# 
   282  000F                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  001D                     	;# 
   299  001E                     	;# 
   300  001F                     	;# 
   301  0081                     	;# 
   302  0085                     	;# 
   303  0086                     	;# 
   304  0087                     	;# 
   305  0089                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  008F                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0093                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0098                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  009F                     	;# 
   328  0105                     	;# 
   329  0107                     	;# 
   330  0108                     	;# 
   331  0109                     	;# 
   332  010C                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010E                     	;# 
   336  010F                     	;# 
   337  0185                     	;# 
   338  0187                     	;# 
   339  0188                     	;# 
   340  0189                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001D                     	;# 
   375  001E                     	;# 
   376  001F                     	;# 
   377  0081                     	;# 
   378  0085                     	;# 
   379  0086                     	;# 
   380  0087                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  008F                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  0105                     	;# 
   405  0107                     	;# 
   406  0108                     	;# 
   407  0109                     	;# 
   408  010C                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  010F                     	;# 
   413  0185                     	;# 
   414  0187                     	;# 
   415  0188                     	;# 
   416  0189                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  000D                     	;# 
   432  000E                     	;# 
   433  000E                     	;# 
   434  000F                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0013                     	;# 
   439  0014                     	;# 
   440  0015                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0017                     	;# 
   444  0018                     	;# 
   445  0019                     	;# 
   446  001A                     	;# 
   447  001B                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  001D                     	;# 
   451  001E                     	;# 
   452  001F                     	;# 
   453  0081                     	;# 
   454  0085                     	;# 
   455  0086                     	;# 
   456  0087                     	;# 
   457  0089                     	;# 
   458  008C                     	;# 
   459  008D                     	;# 
   460  008E                     	;# 
   461  008F                     	;# 
   462  0090                     	;# 
   463  0091                     	;# 
   464  0092                     	;# 
   465  0093                     	;# 
   466  0093                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009E                     	;# 
   479  009F                     	;# 
   480  0105                     	;# 
   481  0107                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0187                     	;# 
   491  0188                     	;# 
   492  0189                     	;# 
   493  018C                     	;# 
   494  018D                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0093                     	;# 
   544  0094                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009E                     	;# 
   555  009F                     	;# 
   556  0105                     	;# 
   557  0107                     	;# 
   558  0108                     	;# 
   559  0109                     	;# 
   560  010C                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  0185                     	;# 
   566  0187                     	;# 
   567  0188                     	;# 
   568  0189                     	;# 
   569  018C                     	;# 
   570  018D                     	;# 
   571                           
   572                           	psect	idataBANK2
   573  0000                     __pidataBANK2:	
   574                           
   575                           	psect	idataEEDATA
   576  0000                     __pidataEEDATA:	
   577  0000                     _EE_STATES:	
   578                           ;initializer for _EE_STATES
   579                           
   580  0000  000A               	db	10
   581  0001  0008               	db	8
   582  0002  0009               	db	9
   583  0003  0002               	db	2
   584  0004  0000               	db	0
   585  0005  0000               	db	0
   586  0006  0000               	db	0
   587  0007  0003               	db	3
   588  0008  000C               	db	12
   589  0009  0009               	db	9
   590  000A  0000               	db	0
   591  000B  0000               	db	0
   592  000C  0000               	db	0
   593  000D  0000               	db	0
   594  000E  000A               	db	10
   595  000F  0001               	db	1
   596  0010  0009               	db	9
   597  0011  0000               	db	0
   598  0012  0020               	db	32
   599  0013  0000               	db	0
   600  0014  0000               	db	0
   601  0015  0003               	db	3
   602  0016  0001               	db	1
   603  0017  000D               	db	13
   604  0018  0000               	db	0
   605  0019  0000               	db	0
   606  001A  0000               	db	0
   607  001B  0000               	db	0
   608  001C  000A               	db	10
   609  001D  0009               	db	9
   610  001E  0008               	db	8
   611  001F  0010               	db	16
   612  0020  0000               	db	0
   613  0021  0000               	db	0
   614  0022  0000               	db	0
   615  0023  0003               	db	3
   616  0024  0009               	db	9
   617  0025  000A               	db	10
   618  0026  0000               	db	0
   619  0027  0000               	db	0
   620  0028  0000               	db	0
   621  0029  0000               	db	0
   622  002A  000A               	db	10
   623  002B  0009               	db	9
   624  002C  0001               	db	1
   625  002D  0000               	db	0
   626  002E  0000               	db	0
   627  002F  0020               	db	32
   628  0030  0000               	db	0
   629  0031  0003               	db	3
   630  0032  0009               	db	9
   631  0033  0011               	db	17
   632  0034  0000               	db	0
   633  0035  0000               	db	0
   634  0036  0000               	db	0
   635  0037  0000               	db	0
   636  0038  000A               	db	10
   637  0039  0008               	db	8
   638  003A  0009               	db	9
   639  003B  0002               	db	2
   640  003C  0000               	db	0
   641  003D  0000               	db	0
   642  003E  0000               	db	0
   643  003F  0003               	db	3
   644  0040  000C               	db	12
   645  0041  0009               	db	9
   646  0042  0000               	db	0
   647  0043  0000               	db	0
   648  0044  0000               	db	0
   649  0045  0000               	db	0
   650  0046  000A               	db	10
   651  0047  0001               	db	1
   652  0048  0009               	db	9
   653  0049  0000               	db	0
   654  004A  0020               	db	32
   655  004B  0000               	db	0
   656  004C  0000               	db	0
   657  004D  0003               	db	3
   658  004E  0001               	db	1
   659  004F  000D               	db	13
   660  0050  0000               	db	0
   661  0051  0000               	db	0
   662  0052  0000               	db	0
   663  0053  0000               	db	0
   664  0054  000A               	db	10
   665  0055  0009               	db	9
   666  0056  0008               	db	8
   667  0057  0010               	db	16
   668  0058  0000               	db	0
   669  0059  0000               	db	0
   670  005A  0000               	db	0
   671  005B  0003               	db	3
   672  005C  0009               	db	9
   673  005D  000A               	db	10
   674  005E  0000               	db	0
   675  005F  0000               	db	0
   676  0060  0000               	db	0
   677  0061  0000               	db	0
   678  0062  000A               	db	10
   679  0063  0009               	db	9
   680  0064  0001               	db	1
   681  0065  0000               	db	0
   682  0066  0000               	db	0
   683  0067  0020               	db	32
   684  0068  0000               	db	0
   685  0069  0003               	db	3
   686  006A  0009               	db	9
   687  006B  0011               	db	17
   688  006C  0000               	db	0
   689  006D  0000               	db	0
   690  006E  0000               	db	0
   691  006F  0000               	db	0
   692  0070  000A               	db	10
   693  0071  0008               	db	8
   694  0072  0009               	db	9
   695  0073  0002               	db	2
   696  0074  0000               	db	0
   697  0075  0000               	db	0
   698  0076  0000               	db	0
   699  0077  0003               	db	3
   700  0078  000C               	db	12
   701  0079  0009               	db	9
   702  007A  0000               	db	0
   703  007B  0000               	db	0
   704  007C  0000               	db	0
   705  007D  0000               	db	0
   706  007E  000A               	db	10
   707  007F  0001               	db	1
   708  0080  0009               	db	9
   709  0081  0000               	db	0
   710  0082  0020               	db	32
   711  0083  0000               	db	0
   712  0084  0000               	db	0
   713  0085  0003               	db	3
   714  0086  0001               	db	1
   715  0087  000D               	db	13
   716  0088  0000               	db	0
   717  0089  0000               	db	0
   718  008A  0000               	db	0
   719  008B  0000               	db	0
   720  008C  000A               	db	10
   721  008D  0009               	db	9
   722  008E  0008               	db	8
   723  008F  0010               	db	16
   724  0090  0000               	db	0
   725  0091  0000               	db	0
   726  0092  0000               	db	0
   727  0093  0003               	db	3
   728  0094  0009               	db	9
   729  0095  000A               	db	10
   730  0096  0000               	db	0
   731  0097  0000               	db	0
   732  0098  0000               	db	0
   733  0099  0000               	db	0
   734  009A  000A               	db	10
   735  009B  0009               	db	9
   736  009C  0001               	db	1
   737  009D  0000               	db	0
   738  009E  0000               	db	0
   739  009F  0020               	db	32
   740  00A0  0000               	db	0
   741  00A1  0003               	db	3
   742  00A2  0009               	db	9
   743  00A3  0011               	db	17
   744  00A4  0000               	db	0
   745  00A5  0000               	db	0
   746  00A6  0000               	db	0
   747  00A7  0000               	db	0
   748  00A8  000A               	db	10
   749  00A9  0009               	db	9
   750  00AA  0008               	db	8
   751  00AB  0010               	db	16
   752  00AC  0000               	db	0
   753  00AD  0000               	db	0
   754  00AE  0000               	db	0
   755  00AF  0003               	db	3
   756  00B0  0009               	db	9
   757  00B1  000A               	db	10
   758  00B2  0000               	db	0
   759  00B3  0000               	db	0
   760  00B4  0000               	db	0
   761  00B5  0000               	db	0
   762  00B6  0000               	db	0
   763  00B7  0009               	db	9
   764  00B8  0001               	db	1
   765  00B9  0000               	db	0
   766  00BA  0000               	db	0
   767  00BB  0020               	db	32
   768  00BC  0000               	db	0
   769  00BD  0000               	db	0
   770  00BE  0009               	db	9
   771  00BF  0011               	db	17
   772  00C0  0000               	db	0
   773  00C1  0000               	db	0
   774  00C2  0000               	db	0
   775  00C3  0000               	db	0
   776  00C4  0000               	db	0
   777  00C5  0000               	db	0
   778  00C6  0000               	db	0
   779  00C7  0000               	db	0
   780  00C8  0000               	db	0
   781  00C9  0000               	db	0
   782  00CA  0000               	db	0
   783  00CB  0000               	db	0
   784  00CC  0000               	db	0
   785  00CD  0000               	db	0
   786  00CE  0000               	db	0
   787  00CF  0000               	db	0
   788  00D0  0000               	db	0
   789  00D1  0000               	db	0
   790  00D2                     _EE_C:	
   791                           ;initializer for _EE_C
   792                           
   793  00D2  0001               	db	1
   794  00D3  0051               	db	81
   795  00D4  007F               	db	127
   796  00D5  0000               	db	0
   797  00D6  0027               	db	39
   798  00D7  000F               	db	15
   799  00D8  0000               	db	0
   800  00D9  0075               	db	117
   801  00DA  002F               	db	47
   802  00DB                     _EE_STATE_BREAKS:	
   803                           ;initializer for _EE_STATE_BREAKS
   804                           
   805  00DB  0008               	db	8
   806  00DC  000F               	db	15
   807  00DD  0019               	db	25
   808                           
   809                           	psect	strings
   810  0800                     __pstrings:	
   811  0800                     stringtab:	
   812  0800                     __stringtab:	
   813  0800                     stringcode:	
   814                           ;	String table - string pointers are 1 byte each
   815                           
   816  0800                     stringdir:	
   817  0800  3008               	movlw	high stringdir
   818  0801  008A               	movwf	10
   819  0802  0804               	movf	4,w
   820  0803  0A84               	incf	4,f
   821  0804  0782               	addwf	2,f
   822  0805                     __stringbase:	
   823  0805  3400               	retlw	0
   824  0806                     __end_of__stringtab:	
   825  0806                     UART_ReadFromGPS_TO@StartCode:	
   826  0806  3424               	retlw	36
   827  0807  3447               	retlw	71
   828  0808  3450               	retlw	80
   829  0809  3452               	retlw	82
   830  080A  344D               	retlw	77
   831  080B  3443               	retlw	67
   832  080C  342C               	retlw	44
   833  080D                     __end_ofUART_ReadFromGPS_TO@StartCode:	
   834  001A                     _RCREG	set	26
   835  0013                     _SSPBUF	set	19
   836  0014                     _SSPCON	set	20
   837  00C4                     _CREN	set	196
   838  0028                     _RA0	set	40
   839  0029                     _RA1	set	41
   840  002A                     _RA2	set	42
   841  002B                     _RA3	set	43
   842  002C                     _RA4	set	44
   843  002D                     _RA5	set	45
   844  0039                     _RC1	set	57
   845  0065                     _RCIF	set	101
   846  00C7                     _SPEN	set	199
   847  0099                     _SPBRG	set	153
   848  009A                     _SPBRGH	set	154
   849  0093                     _SSPADD	set	147
   850  0091                     _SSPCON2	set	145
   851  0094                     _SSPSTAT	set	148
   852  0085                     _TRISAbits	set	133
   853  048D                     _ACKDT	set	1165
   854  048C                     _ACKEN	set	1164
   855  04C2                     _BRGH	set	1218
   856  048A                     _PEN	set	1162
   857  048B                     _RCEN	set	1163
   858  0488                     _SEN	set	1160
   859  04C4                     _SYNC	set	1220
   860  043B                     _TRISC3	set	1083
   861  043C                     _TRISC4	set	1084
   862  04C5                     _TXEN	set	1221
   863  010D                     _EEADR	set	269
   864  010C                     _EEDATA	set	268
   865  0188                     _ANSEL	set	392
   866  0189                     _ANSELH	set	393
   867  018C                     _EECON1	set	396
   868  0C3B                     _BRG16	set	3131
   869  0C60                     _RD	set	3168
   870  0C61                     _WR	set	3169
   871  080D                     STR_2:	
   872  080D  3443               	retlw	67	;'C'
   873  080E  342D               	retlw	45	;'-'
   874  080F  3453               	retlw	83	;'S'
   875  0810  3474               	retlw	116	;'t'
   876  0811  342D               	retlw	45	;'-'
   877  0812  3453               	retlw	83	;'S'
   878  0813  3465               	retlw	101	;'e'
   879  0814  342F               	retlw	47	;'/'
   880  0815  3450               	retlw	80	;'P'
   881  0816  3472               	retlw	114	;'r'
   882  0817  342B               	retlw	43	;'+'
   883  0818  3444               	retlw	68	;'D'
   884  0819  3466               	retlw	102	;'f'
   885  081A  342D               	retlw	45	;'-'
   886  081B  3452               	retlw	82	;'R'
   887  081C  346D               	retlw	109	;'m'
   888  081D  3400               	retlw	0
   889  081E                     STR_1:	
   890  081E  3420               	retlw	32	;' '
   891  081F  3420               	retlw	32	;' '
   892  0820  3420               	retlw	32	;' '
   893  0821  342D               	retlw	45	;'-'
   894  0822  3420               	retlw	32	;' '
   895  0823  3420               	retlw	32	;' '
   896  0824  3420               	retlw	32	;' '
   897  0825  3400               	retlw	0
   898                           
   899                           ; #config settings
   900  0000                     
   901                           	psect	cinit
   902  07E7                     start_initialization:	
   903  07E7                     __initialization:	
   904                           
   905                           ; Initialize objects allocated to BANK2
   906  07E7  1703               	bsf	3,6	;RP1=1, select bank2
   907                           
   908                           ;initializer for _PREV_CYCLE_TYPE
   909  07E8  3002               	movlw	2
   910  07E9  00EC               	movwf	__pdataBANK2& (0+127)
   911                           
   912                           ; Clear objects allocated to BANK2
   913  07EA  01E2               	clrf	__pbssBANK2& (0+127)
   914  07EB  01E3               	clrf	(__pbssBANK2+1)& (0+127)
   915  07EC  01E4               	clrf	(__pbssBANK2+2)& (0+127)
   916  07ED  01E5               	clrf	(__pbssBANK2+3)& (0+127)
   917  07EE  01E6               	clrf	(__pbssBANK2+4)& (0+127)
   918  07EF  01E7               	clrf	(__pbssBANK2+5)& (0+127)
   919  07F0  01E8               	clrf	(__pbssBANK2+6)& (0+127)
   920  07F1  01E9               	clrf	(__pbssBANK2+7)& (0+127)
   921  07F2  01EA               	clrf	(__pbssBANK2+8)& (0+127)
   922  07F3  01EB               	clrf	(__pbssBANK2+9)& (0+127)
   923                           
   924                           ; Clear objects allocated to BANK1
   925  07F4  1683               	bsf	3,5	;RP0=1, select bank1
   926  07F5  1303               	bcf	3,6	;RP1=0, select bank1
   927  07F6  01E7               	clrf	__pbssBANK1& (0+127)
   928  07F7  01E8               	clrf	(__pbssBANK1+1)& (0+127)
   929  07F8  01E9               	clrf	(__pbssBANK1+2)& (0+127)
   930  07F9  01EA               	clrf	(__pbssBANK1+3)& (0+127)
   931  07FA  01EB               	clrf	(__pbssBANK1+4)& (0+127)
   932  07FB  01EC               	clrf	(__pbssBANK1+5)& (0+127)
   933  07FC                     end_of_initialization:	
   934                           ;End of C runtime variable initialization code
   935                           
   936  07FC                     __end_of__initialization:	
   937  07FC  0183               	clrf	3
   938  07FD  120A  118A  2B23   	ljmp	_main	;jump to C main() function
   939                           
   940                           	psect	bssEEDATA
   941  00DE                     __pbssEEDATA:	
   942  00DE                     _EE_C_D:	
   943  00DE  0000               	db	0
   944                           
   945                           	psect	dataEEDATA
   946  0000                     __pdataEEDATA:	
   947                           
   948                           	psect	bssBANK1
   949  00E7                     __pbssBANK1:	
   950  00E7                     _STATE_CUMULATIVE_PERIODS:	
   951  00E7                     	ds	6
   952                           
   953                           	psect	bssBANK2
   954  0162                     __pbssBANK2:	
   955  0162                     _S:	
   956  0162                     	ds	4
   957  0166                     _STATE_BREAKS:	
   958  0166                     	ds	3
   959  0169                     _CONFIG0:	
   960  0169                     	ds	1
   961  016A                     _CYCLE_TYPE:	
   962  016A                     	ds	1
   963  016B                     _C_D:	
   964  016B                     	ds	1
   965                           
   966                           	psect	dataBANK2
   967  016C                     __pdataBANK2:	
   968  016C                     _PREV_CYCLE_TYPE:	
   969  016C                     	ds	1
   970                           
   971                           	psect	inittext
   972  0005                     init_fetch0:	
   973                           ;	Called with low address in FSR and high address in W
   974                           
   975  0005  087E               	movf	126,w
   976  0006  008A               	movwf	10
   977  0007  087F               	movf	127,w
   978  0008  0082               	movwf	2
   979  0009                     init_ram0:	
   980                           ;Called with:
   981                           ;	high address of idata address in btemp 
   982                           ;	low address of idata address in btemp+1 
   983                           ;	low address of data in FSR
   984                           ;	high address + 1 of data in btemp-1
   985                           
   986  0009  2005  120A  118A   	fcall	init_fetch0
   987  000C  0080               	movwf	0
   988  000D  0A84               	incf	4,f
   989  000E  0804               	movf	4,w
   990  000F  067D               	xorwf	125,w
   991  0010  1903               	btfsc	3,2
   992  0011  3400               	retlw	0
   993  0012  0AFF               	incf	127,f
   994  0013  1903               	btfsc	3,2
   995  0014  0AFE               	incf	126,f
   996  0015  2809               	goto	init_ram0
   997                           
   998                           	psect	cstackBANK3h
   999  01E5                     __pcstackBANK3h:	
  1000  01E5                     ??_main:	
  1001                           
  1002                           ; 1 bytes @ 0x0
  1003  01E5                     	ds	10
  1004                           
  1005                           	psect	cstackBANK2
  1006  0142                     __pcstackBANK2:	
  1007  0142                     main@GPSData:	
  1008                           
  1009                           ; 6 bytes @ 0x0
  1010  0142                     	ds	6
  1011  0148                     main@GPS_On_Time_Counter:	
  1012                           
  1013                           ; 2 bytes @ 0x6
  1014  0148                     	ds	2
  1015  014A                     main@k:	
  1016                           
  1017                           ; 2 bytes @ 0x8
  1018  014A                     	ds	2
  1019  014C                     main@AdjustMilliSecond:	
  1020                           
  1021                           ; 2 bytes @ 0xA
  1022  014C                     	ds	2
  1023  014E                     main@StateSecRemaining:	
  1024                           
  1025                           ; 1 bytes @ 0xC
  1026  014E                     	ds	1
  1027  014F                     main@State2OnOffCounter:	
  1028                           
  1029                           ; 2 bytes @ 0xD
  1030  014F                     	ds	2
  1031  0151                     main@StateAudioNormalOnOffCounter:	
  1032                           
  1033                           ; 2 bytes @ 0xF
  1034  0151                     	ds	2
  1035  0153                     main@StateAudioSplOnOffCounter:	
  1036                           
  1037                           ; 2 bytes @ 0x11
  1038  0153                     	ds	2
  1039  0155                     main@j:	
  1040                           
  1041                           ; 1 bytes @ 0x13
  1042  0155                     	ds	1
  1043  0156                     main@OutForThePorts:	
  1044                           
  1045                           ; 2 bytes @ 0x14
  1046  0156                     	ds	2
  1047  0158                     main@DiffInSecond:	
  1048                           
  1049                           ; 1 bytes @ 0x16
  1050  0158                     	ds	1
  1051  0159                     main@TimeSinceTheStartOfCycle:	
  1052                           
  1053                           ; 4 bytes @ 0x17
  1054  0159                     	ds	4
  1055  015D                     main@SecError:	
  1056                           
  1057                           ; 2 bytes @ 0x1B
  1058  015D                     	ds	2
  1059  015F                     main@i:	
  1060                           
  1061                           ; 1 bytes @ 0x1D
  1062  015F                     	ds	1
  1063  0160                     main@l:	
  1064                           
  1065                           ; 2 bytes @ 0x1E
  1066  0160                     	ds	2
  1067                           
  1068                           	psect	cstackBANK1
  1069  00D2                     __pcstackBANK1:	
  1070  00D2                     ?___ftsub:	
  1071  00D2                     ___ftsub@f2:	
  1072                           ; 3 bytes @ 0x0
  1073                           
  1074                           
  1075                           ; 3 bytes @ 0x0
  1076  00D2                     	ds	3
  1077  00D5                     ___ftsub@f1:	
  1078                           
  1079                           ; 3 bytes @ 0x3
  1080  00D5                     	ds	3
  1081  00D8                     round@f:	
  1082                           
  1083                           ; 3 bytes @ 0x6
  1084  00D8                     	ds	3
  1085  00DB                     ?_UART_Init:	
  1086  00DB                     UART_Init@baudrate:	
  1087                           ; 1 bytes @ 0x9
  1088                           
  1089                           
  1090                           ; 4 bytes @ 0x9
  1091  00DB                     	ds	4
  1092  00DF                     _UART_Init$1024:	
  1093                           
  1094                           ; 3 bytes @ 0xD
  1095  00DF                     	ds	3
  1096  00E2                     _UART_Init$1025:	
  1097                           
  1098                           ; 3 bytes @ 0x10
  1099  00E2                     	ds	3
  1100  00E5                     UART_Init@x:	
  1101                           
  1102                           ; 2 bytes @ 0x13
  1103  00E5                     	ds	2
  1104                           
  1105                           	psect	cstackCOMMON
  1106  0070                     __pcstackCOMMON:	
  1107  0070                     ?_Lcd_Delay5500us:	
  1108  0070                     ??_Lcd_Delay5500us:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_Lcd_Delay5us:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ??_Lcd_Delay5us:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_Lcd_Command:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ??_Lcd_Command:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_Lcd_CharCP:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ??_Lcd_CharCP:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ?_eeprom_read:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ??_eeprom_read:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_GetPrevCycle:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ??_GetPrevCycle:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_UART_Read_TO:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ??_UART_Read_TO:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_IsValidGPS:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ??_IsValidGPS:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_Lcd_Init:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_ReadVars:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_I2C_Master_Wait:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ??_I2C_Master_Wait:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_I2C_Master_Start:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ??_I2C_Master_Start:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?_I2C_Master_Stop:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     ??_I2C_Master_Stop:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     ?_I2C_Master_Write:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     ?_GetCumulativePeriodsForStates:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ?_GetCycle:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186  0070                     ?_SwitchGPS:	
  1187                           ; 1 bytes @ 0x0
  1188                           
  1189  0070                     ??_SwitchGPS:	
  1190                           ; 1 bytes @ 0x0
  1191                           
  1192  0070                     ?_DelayInUSec:	
  1193                           ; 1 bytes @ 0x0
  1194                           
  1195  0070                     ?_main:	
  1196                           ; 1 bytes @ 0x0
  1197                           
  1198  0070                     ?___lbdiv:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0070                     ?_I2C_Master_Read:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204  0070                     ?_GetAbs:	
  1205                           ; 2 bytes @ 0x0
  1206                           
  1207  0070                     ?___wmul:	
  1208                           ; 2 bytes @ 0x0
  1209                           
  1210  0070                     ?___ftpack:	
  1211                           ; 2 bytes @ 0x0
  1212                           
  1213  0070                     ?_frexp:	
  1214                           ; 3 bytes @ 0x0
  1215                           
  1216  0070                     ?___lmul:	
  1217                           ; 3 bytes @ 0x0
  1218                           
  1219  0070                     ?___aldiv:	
  1220                           ; 4 bytes @ 0x0
  1221                           
  1222  0070                     ?___almod:	
  1223                           ; 4 bytes @ 0x0
  1224                           
  1225  0070                     ?___lldiv:	
  1226                           ; 4 bytes @ 0x0
  1227                           
  1228  0070                     GetPrevCycle@PrevCycle:	
  1229                           ; 4 bytes @ 0x0
  1230                           
  1231  0070                     SwitchGPS@a:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0070                     UART_Read_TO@TimeOut:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0070                     IsValidGPS@Result:	
  1238                           ; 1 bytes @ 0x0
  1239                           
  1240  0070                     eeprom_read@addr:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243  0070                     ___lbdiv@divisor:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246  0070                     I2C_Master_Write@d:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249  0070                     I2C_Master_Read@a:	
  1250                           ; 2 bytes @ 0x0
  1251                           
  1252  0070                     GetAbs@a:	
  1253                           ; 2 bytes @ 0x0
  1254                           
  1255  0070                     DelayInUSec@a:	
  1256                           ; 2 bytes @ 0x0
  1257                           
  1258  0070                     ___wmul@multiplier:	
  1259                           ; 2 bytes @ 0x0
  1260                           
  1261  0070                     ___ftpack@arg:	
  1262                           ; 2 bytes @ 0x0
  1263                           
  1264  0070                     frexp@value:	
  1265                           ; 3 bytes @ 0x0
  1266                           
  1267  0070                     ___lmul@multiplier:	
  1268                           ; 3 bytes @ 0x0
  1269                           
  1270  0070                     ___aldiv@divisor:	
  1271                           ; 4 bytes @ 0x0
  1272                           
  1273  0070                     ___almod@divisor:	
  1274                           ; 4 bytes @ 0x0
  1275                           
  1276  0070                     ___lldiv@divisor:	
  1277                           ; 4 bytes @ 0x0
  1278                           
  1279                           
  1280                           ; 4 bytes @ 0x0
  1281  0070                     	ds	1
  1282  0071                     ?_UART_ReadFromGPS_TO:	
  1283  0071                     ??___lbdiv:	
  1284                           ; 1 bytes @ 0x1
  1285                           
  1286  0071                     Lcd_CharCP@c:	
  1287                           ; 1 bytes @ 0x1
  1288                           
  1289  0071                     Lcd_Command@command:	
  1290                           ; 1 bytes @ 0x1
  1291                           
  1292  0071                     GetPrevCycle@cycle:	
  1293                           ; 1 bytes @ 0x1
  1294                           
  1295  0071                     UART_ReadFromGPS_TO@TimeOut:	
  1296                           ; 1 bytes @ 0x1
  1297                           
  1298  0071                     IsValidGPS@GPSData:	
  1299                           ; 1 bytes @ 0x1
  1300                           
  1301  0071                     ___lbdiv@dividend:	
  1302                           ; 1 bytes @ 0x1
  1303                           
  1304                           
  1305                           ; 1 bytes @ 0x1
  1306  0071                     	ds	1
  1307  0072                     ??_Lcd_Init:	
  1308  0072                     ?_Lcd_Text:	
  1309                           ; 1 bytes @ 0x2
  1310                           
  1311  0072                     ??_I2C_Master_Write:	
  1312                           ; 1 bytes @ 0x2
  1313                           
  1314  0072                     ??_I2C_Master_Read:	
  1315                           ; 1 bytes @ 0x2
  1316                           
  1317  0072                     ??_GetCumulativePeriodsForStates:	
  1318                           ; 1 bytes @ 0x2
  1319                           
  1320  0072                     ??_GetCycle:	
  1321                           ; 1 bytes @ 0x2
  1322                           
  1323  0072                     ??_GetAbs:	
  1324                           ; 1 bytes @ 0x2
  1325                           
  1326  0072                     ??_DelayInUSec:	
  1327                           ; 1 bytes @ 0x2
  1328                           
  1329  0072                     ??_UART_ReadFromGPS_TO:	
  1330                           ; 1 bytes @ 0x2
  1331                           
  1332  0072                     Lcd_Init@data:	
  1333                           ; 1 bytes @ 0x2
  1334                           
  1335  0072                     Lcd_Text@x:	
  1336                           ; 1 bytes @ 0x2
  1337                           
  1338  0072                     ___lbdiv@counter:	
  1339                           ; 1 bytes @ 0x2
  1340                           
  1341  0072                     I2C_Master_Read@temp:	
  1342                           ; 1 bytes @ 0x2
  1343                           
  1344  0072                     DelayInUSec@i:	
  1345                           ; 2 bytes @ 0x2
  1346                           
  1347  0072                     ___wmul@multiplicand:	
  1348                           ; 2 bytes @ 0x2
  1349                           
  1350                           
  1351                           ; 2 bytes @ 0x2
  1352  0072                     	ds	1
  1353  0073                     Lcd_Text@buffer:	
  1354  0073                     ___ftpack@exp:	
  1355                           ; 1 bytes @ 0x3
  1356                           
  1357  0073                     ___lbdiv@quotient:	
  1358                           ; 1 bytes @ 0x3
  1359                           
  1360  0073                     frexp@eptr:	
  1361                           ; 1 bytes @ 0x3
  1362                           
  1363  0073                     UART_ReadFromGPS_TO@i:	
  1364                           ; 1 bytes @ 0x3
  1365                           
  1366                           
  1367                           ; 2 bytes @ 0x3
  1368  0073                     	ds	1
  1369  0074                     ?_I2C_ReadAtAddress:	
  1370  0074                     ??_frexp:	
  1371                           ; 1 bytes @ 0x4
  1372                           
  1373  0074                     ??_Lcd_Text:	
  1374                           ; 1 bytes @ 0x4
  1375                           
  1376  0074                     ??___wmul:	
  1377                           ; 1 bytes @ 0x4
  1378                           
  1379  0074                     Lcd_Text@y:	
  1380                           ; 1 bytes @ 0x4
  1381                           
  1382  0074                     I2C_ReadAtAddress@IntAdd:	
  1383                           ; 1 bytes @ 0x4
  1384                           
  1385  0074                     ___ftpack@sign:	
  1386                           ; 1 bytes @ 0x4
  1387                           
  1388  0074                     ___wmul@product:	
  1389                           ; 1 bytes @ 0x4
  1390                           
  1391  0074                     ___lmul@multiplicand:	
  1392                           ; 2 bytes @ 0x4
  1393                           
  1394  0074                     ___aldiv@dividend:	
  1395                           ; 4 bytes @ 0x4
  1396                           
  1397  0074                     ___almod@dividend:	
  1398                           ; 4 bytes @ 0x4
  1399                           
  1400  0074                     ___lldiv@dividend:	
  1401                           ; 4 bytes @ 0x4
  1402                           
  1403                           
  1404                           ; 4 bytes @ 0x4
  1405  0074                     	ds	1
  1406  0075                     ??_I2C_ReadAtAddress:	
  1407  0075                     ??___ftpack:	
  1408                           ; 1 bytes @ 0x5
  1409                           
  1410  0075                     Lcd_Text@data:	
  1411                           ; 1 bytes @ 0x5
  1412                           
  1413  0075                     I2C_ReadAtAddress@data:	
  1414                           ; 1 bytes @ 0x5
  1415                           
  1416  0075                     UART_ReadFromGPS_TO@Output:	
  1417                           ; 1 bytes @ 0x5
  1418                           
  1419                           
  1420                           ; 1 bytes @ 0x5
  1421  0075                     	ds	1
  1422  0076                     I2C_ReadAtAddress@DevID:	
  1423  0076                     GetCumulativePeriodsForStates@j:	
  1424                           ; 1 bytes @ 0x6
  1425                           
  1426  0076                     UART_ReadFromGPS_TO@TempChar:	
  1427                           ; 1 bytes @ 0x6
  1428                           
  1429                           
  1430                           ; 1 bytes @ 0x6
  1431  0076                     	ds	1
  1432  0077                     GetCumulativePeriodsForStates@i:	
  1433  0077                     UART_ReadFromGPS_TO@Pos:	
  1434                           ; 1 bytes @ 0x7
  1435                           
  1436                           
  1437                           ; 1 bytes @ 0x7
  1438  0077                     	ds	1
  1439  0078                     ?_UART_ReadValidTimeFromGPS_TO:	
  1440  0078                     ??___lmul:	
  1441                           ; 1 bytes @ 0x8
  1442                           
  1443  0078                     ??___aldiv:	
  1444                           ; 1 bytes @ 0x8
  1445                           
  1446  0078                     ??___almod:	
  1447                           ; 1 bytes @ 0x8
  1448                           
  1449  0078                     ??___lldiv:	
  1450                           ; 1 bytes @ 0x8
  1451                           
  1452  0078                     ?___altoft:	
  1453                           ; 1 bytes @ 0x8
  1454                           
  1455  0078                     UART_ReadValidTimeFromGPS_TO@TimeOut:	
  1456                           ; 3 bytes @ 0x8
  1457                           
  1458  0078                     ___aldiv@counter:	
  1459                           ; 1 bytes @ 0x8
  1460                           
  1461  0078                     ___almod@counter:	
  1462                           ; 1 bytes @ 0x8
  1463                           
  1464  0078                     ___lmul@product:	
  1465                           ; 1 bytes @ 0x8
  1466                           
  1467  0078                     ___altoft@c:	
  1468                           ; 4 bytes @ 0x8
  1469                           
  1470  0078                     ___lldiv@quotient:	
  1471                           ; 4 bytes @ 0x8
  1472                           
  1473                           
  1474                           ; 4 bytes @ 0x8
  1475  0078                     	ds	1
  1476  0079                     ??_UART_ReadValidTimeFromGPS_TO:	
  1477  0079                     UART_ReadValidTimeFromGPS_TO@Output:	
  1478                           ; 1 bytes @ 0x9
  1479                           
  1480  0079                     ___aldiv@sign:	
  1481                           ; 1 bytes @ 0x9
  1482                           
  1483  0079                     ___almod@sign:	
  1484                           ; 1 bytes @ 0x9
  1485                           
  1486                           
  1487                           ; 1 bytes @ 0x9
  1488  0079                     	ds	1
  1489  007A                     ___aldiv@quotient:	
  1490                           
  1491                           ; 4 bytes @ 0xA
  1492  007A                     	ds	2
  1493  007C                     ??___altoft:	
  1494  007C                     GetCycle@PrevCycle:	
  1495                           ; 1 bytes @ 0xC
  1496                           
  1497  007C                     ___altoft@exp:	
  1498                           ; 1 bytes @ 0xC
  1499                           
  1500  007C                     ___lldiv@counter:	
  1501                           ; 1 bytes @ 0xC
  1502                           
  1503                           
  1504                           ; 1 bytes @ 0xC
  1505  007C                     	ds	1
  1506  007D                     GetCycle@i:	
  1507  007D                     ___altoft@sign:	
  1508                           ; 1 bytes @ 0xD
  1509                           
  1510                           
  1511                           ; 1 bytes @ 0xD
  1512  007D                     	ds	1
  1513  007E                     ??_round:	
  1514  007E                     ??_trunc:	
  1515                           ; 1 bytes @ 0xE
  1516                           
  1517  007E                     ??_Lcd_WriteChar:	
  1518                           ; 1 bytes @ 0xE
  1519                           
  1520  007E                     ??_UART_Init:	
  1521                           ; 1 bytes @ 0xE
  1522                           
  1523  007E                     ??___bmul:	
  1524                           ; 1 bytes @ 0xE
  1525                           
  1526  007E                     ??___ftsub:	
  1527                           ; 1 bytes @ 0xE
  1528                           
  1529                           
  1530                           	psect	cstackBANK0
  1531  002C                     __pcstackBANK0:	
  1532                           ; 1 bytes @ 0xE
  1533                           
  1534  002C                     ?_I2C_Master_Init:	
  1535  002C                     ?___bmul:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  002C                     ?___ftmul:	
  1539                           ; 1 bytes @ 0x0
  1540                           
  1541  002C                     ?_ReadRTCAsSec:	
  1542                           ; 3 bytes @ 0x0
  1543                           
  1544  002C                     ___bmul@multiplicand:	
  1545                           ; 4 bytes @ 0x0
  1546                           
  1547  002C                     ___ftmul@f1:	
  1548                           ; 1 bytes @ 0x0
  1549                           
  1550  002C                     I2C_Master_Init@c:	
  1551                           ; 3 bytes @ 0x0
  1552                           
  1553                           
  1554                           ; 4 bytes @ 0x0
  1555  002C                     	ds	1
  1556  002D                     ___bmul@product:	
  1557                           
  1558                           ; 1 bytes @ 0x1
  1559  002D                     	ds	1
  1560  002E                     ___bmul@multiplier:	
  1561                           
  1562                           ; 1 bytes @ 0x2
  1563  002E                     	ds	1
  1564  002F                     ?_Lcd_WriteChar:	
  1565  002F                     ??_ReadVars:	
  1566                           ; 1 bytes @ 0x3
  1567                           
  1568  002F                     Lcd_WriteChar@x:	
  1569                           ; 1 bytes @ 0x3
  1570                           
  1571  002F                     ___ftmul@f2:	
  1572                           ; 1 bytes @ 0x3
  1573                           
  1574                           
  1575                           ; 3 bytes @ 0x3
  1576  002F                     	ds	1
  1577  0030                     ??_ReadRTCAsSec:	
  1578  0030                     ??_I2C_Master_Init:	
  1579                           ; 1 bytes @ 0x4
  1580                           
  1581  0030                     Lcd_WriteChar@c:	
  1582                           ; 1 bytes @ 0x4
  1583                           
  1584                           
  1585                           ; 1 bytes @ 0x4
  1586  0030                     	ds	1
  1587  0031                     Lcd_WriteChar@y:	
  1588                           
  1589                           ; 1 bytes @ 0x5
  1590  0031                     	ds	1
  1591  0032                     ??___ftmul:	
  1592  0032                     Lcd_WriteChar@data:	
  1593                           ; 1 bytes @ 0x6
  1594                           
  1595                           
  1596                           ; 1 bytes @ 0x6
  1597  0032                     	ds	1
  1598  0033                     ?_WriteLongInt:	
  1599  0033                     ?_Lcd_Disp_Bin:	
  1600                           ; 1 bytes @ 0x7
  1601                           
  1602  0033                     WriteLongInt@x:	
  1603                           ; 1 bytes @ 0x7
  1604                           
  1605  0033                     Lcd_Disp_Bin@x:	
  1606                           ; 1 bytes @ 0x7
  1607                           
  1608                           
  1609                           ; 1 bytes @ 0x7
  1610  0033                     	ds	1
  1611  0034                     Lcd_Disp_Bin@val:	
  1612  0034                     WriteLongInt@Val:	
  1613                           ; 1 bytes @ 0x8
  1614                           
  1615                           
  1616                           ; 4 bytes @ 0x8
  1617  0034                     	ds	1
  1618  0035                     Lcd_Disp_Bin@DispChar:	
  1619  0035                     ___ftmul@exp:	
  1620                           ; 1 bytes @ 0x9
  1621                           
  1622                           
  1623                           ; 1 bytes @ 0x9
  1624  0035                     	ds	1
  1625  0036                     ??_Lcd_Disp_Bin:	
  1626  0036                     ___ftmul@f3_as_product:	
  1627                           ; 1 bytes @ 0xA
  1628                           
  1629                           
  1630                           ; 3 bytes @ 0xA
  1631  0036                     	ds	1
  1632  0037                     Lcd_Disp_Bin@y:	
  1633  0037                     _ReadRTCAsSec$1022:	
  1634                           ; 1 bytes @ 0xB
  1635                           
  1636                           
  1637                           ; 2 bytes @ 0xB
  1638  0037                     	ds	1
  1639  0038                     WriteLongInt@size:	
  1640  0038                     Lcd_Disp_Bin@i:	
  1641                           ; 1 bytes @ 0xC
  1642                           
  1643                           
  1644                           ; 1 bytes @ 0xC
  1645  0038                     	ds	1
  1646  0039                     WriteLongInt@Sign:	
  1647  0039                     ___ftmul@cntr:	
  1648                           ; 1 bytes @ 0xD
  1649                           
  1650  0039                     ReadRTCAsSec@Out:	
  1651                           ; 1 bytes @ 0xD
  1652                           
  1653                           
  1654                           ; 4 bytes @ 0xD
  1655  0039                     	ds	1
  1656  003A                     ??_WriteLongInt:	
  1657  003A                     ___ftmul@sign:	
  1658                           ; 1 bytes @ 0xE
  1659                           
  1660                           
  1661                           ; 1 bytes @ 0xE
  1662  003A                     	ds	1
  1663  003B                     ?___ftdiv:	
  1664  003B                     WriteLongInt@POS:	
  1665                           ; 3 bytes @ 0xF
  1666                           
  1667  003B                     ___ftdiv@f2:	
  1668                           ; 1 bytes @ 0xF
  1669                           
  1670                           
  1671                           ; 3 bytes @ 0xF
  1672  003B                     	ds	1
  1673  003C                     WriteLongInt@y:	
  1674                           
  1675                           ; 1 bytes @ 0x10
  1676  003C                     	ds	1
  1677  003D                     ReadRTCAsSec@TempVar000:	
  1678                           
  1679                           ; 1 bytes @ 0x11
  1680  003D                     	ds	1
  1681  003E                     ReadVars@j:	
  1682  003E                     ___ftdiv@f1:	
  1683                           ; 1 bytes @ 0x12
  1684                           
  1685                           
  1686                           ; 3 bytes @ 0x12
  1687  003E                     	ds	1
  1688  003F                     ReadVars@i:	
  1689                           
  1690                           ; 1 bytes @ 0x13
  1691  003F                     	ds	2
  1692  0041                     ??___ftdiv:	
  1693                           
  1694                           ; 1 bytes @ 0x15
  1695  0041                     	ds	3
  1696  0044                     ___ftdiv@cntr:	
  1697                           
  1698                           ; 1 bytes @ 0x18
  1699  0044                     	ds	1
  1700  0045                     ___ftdiv@f3:	
  1701                           
  1702                           ; 3 bytes @ 0x19
  1703  0045                     	ds	3
  1704  0048                     ___ftdiv@exp:	
  1705                           
  1706                           ; 1 bytes @ 0x1C
  1707  0048                     	ds	1
  1708  0049                     ___ftdiv@sign:	
  1709                           
  1710                           ; 1 bytes @ 0x1D
  1711  0049                     	ds	1
  1712  004A                     ?___ftadd:	
  1713  004A                     ___ftadd@f1:	
  1714                           ; 3 bytes @ 0x1E
  1715                           
  1716                           
  1717                           ; 3 bytes @ 0x1E
  1718  004A                     	ds	3
  1719  004D                     ___ftadd@f2:	
  1720                           
  1721                           ; 3 bytes @ 0x21
  1722  004D                     	ds	3
  1723  0050                     ??___ftadd:	
  1724                           
  1725                           ; 1 bytes @ 0x24
  1726  0050                     	ds	3
  1727  0053                     ___ftadd@sign:	
  1728                           
  1729                           ; 1 bytes @ 0x27
  1730  0053                     	ds	1
  1731  0054                     ___ftadd@exp2:	
  1732                           
  1733                           ; 1 bytes @ 0x28
  1734  0054                     	ds	1
  1735  0055                     ___ftadd@exp1:	
  1736                           
  1737                           ; 1 bytes @ 0x29
  1738  0055                     	ds	1
  1739  0056                     ?___fttol:	
  1740  0056                     ___fttol@f1:	
  1741                           ; 4 bytes @ 0x2A
  1742                           
  1743                           
  1744                           ; 3 bytes @ 0x2A
  1745  0056                     	ds	4
  1746  005A                     ??___fttol:	
  1747                           
  1748                           ; 1 bytes @ 0x2E
  1749  005A                     	ds	3
  1750  005D                     ___fttol@sign1:	
  1751                           
  1752                           ; 1 bytes @ 0x31
  1753  005D                     	ds	1
  1754  005E                     ___fttol@lval:	
  1755                           
  1756                           ; 4 bytes @ 0x32
  1757  005E                     	ds	4
  1758  0062                     ___fttol@exp1:	
  1759                           
  1760                           ; 1 bytes @ 0x36
  1761  0062                     	ds	1
  1762  0063                     ?_trunc:	
  1763  0063                     trunc@x:	
  1764                           ; 3 bytes @ 0x37
  1765                           
  1766                           
  1767                           ; 3 bytes @ 0x37
  1768  0063                     	ds	3
  1769  0066                     trunc@i:	
  1770                           
  1771                           ; 3 bytes @ 0x3A
  1772  0066                     	ds	3
  1773  0069                     trunc@expon:	
  1774                           
  1775                           ; 2 bytes @ 0x3D
  1776  0069                     	ds	2
  1777  006B                     ?_round:	
  1778  006B                     round@x:	
  1779                           ; 3 bytes @ 0x3F
  1780                           
  1781                           
  1782                           ; 3 bytes @ 0x3F
  1783  006B                     	ds	3
  1784                           
  1785                           	psect	maintext
  1786  0323                     __pmaintext:	
  1787 ;;
  1788 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1789 ;;
  1790 ;; *************** function _main *****************
  1791 ;; Defined at:
  1792 ;;		line 4 in file "main.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;  GPSData         6    0[BANK2 ] unsigned char [6]
  1797 ;;  TimeSinceThe    4   23[BANK2 ] long 
  1798 ;;  l               2   30[BANK2 ] unsigned short 
  1799 ;;  OutForThePor    2   20[BANK2 ] unsigned char [2]
  1800 ;;  SecError        2   27[BANK2 ] short 
  1801 ;;  StateAudioSp    2   17[BANK2 ] unsigned short 
  1802 ;;  StateAudioNo    2   15[BANK2 ] unsigned short 
  1803 ;;  State2OnOffC    2   13[BANK2 ] unsigned short 
  1804 ;;  AdjustMilliS    2   10[BANK2 ] unsigned short 
  1805 ;;  k               2    8[BANK2 ] unsigned short 
  1806 ;;  GPS_On_Time_    2    6[BANK2 ] unsigned short 
  1807 ;;  i               1   29[BANK2 ] unsigned char 
  1808 ;;  DiffInSecond    1   22[BANK2 ] char 
  1809 ;;  j               1   19[BANK2 ] unsigned char 
  1810 ;;  StateSecRema    1   12[BANK2 ] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : B00/0
  1817 ;;		On exit  : B00/A00
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  1820 ;;      Params:         0       0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0      32
  1822 ;;      Temps:          0       0       0      10       0       0
  1823 ;;      Totals:         0       0       0      10       0      32
  1824 ;;Total ram usage:       42 bytes
  1825 ;; Hardware stack levels required when called:    5
  1826 ;; This function calls:
  1827 ;;		_DelayInUSec
  1828 ;;		_GetAbs
  1829 ;;		_GetCumulativePeriodsForStates
  1830 ;;		_GetCycle
  1831 ;;		_I2C_Master_Init
  1832 ;;		_Lcd_Disp_Bin
  1833 ;;		_Lcd_Init
  1834 ;;		_Lcd_Text
  1835 ;;		_ReadRTCAsSec
  1836 ;;		_ReadVars
  1837 ;;		_SwitchGPS
  1838 ;;		_UART_Init
  1839 ;;		_UART_ReadValidTimeFromGPS_TO
  1840 ;;		_WriteLongInt
  1841 ;;		___almod
  1842 ;;		___altoft
  1843 ;;		___ftmul
  1844 ;;		___fttol
  1845 ;;		___lbdiv
  1846 ;; This function is called by:
  1847 ;;		Startup code after reset
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           
  1852                           ;psect for function _main
  1853  0323                     _main:	
  1854                           
  1855                           ;main.c: 7: Lcd_Init();
  1856                           
  1857                           ;incstack = 0
  1858                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1859  0323  120A  158A  2202  120A  118A  	fcall	_Lcd_Init
  1860                           
  1861                           ;main.c: 9: ReadVars();
  1862  0328  120A  158A  22FA  120A  118A  	fcall	_ReadVars
  1863                           
  1864                           ;main.c: 10: STATE_BREAKS[3-1] = 0;
  1865  032D  1703               	bsf	3,6	;RP1=1, select bank2
  1866  032E  01E8               	clrf	(_STATE_BREAKS^(0+256)+2)	;volatile
  1867                           
  1868                           ;main.c: 11: GetCumulativePeriodsForStates();
  1869  032F  120A  118A  208B  120A  118A  	fcall	_GetCumulativePeriodsForStates
  1870                           
  1871                           ;main.c: 16: I2C_Master_Init(400000);
  1872  0334  3000               	movlw	0
  1873  0335  1283               	bcf	3,5	;RP0=0, select bank0
  1874  0336  1303               	bcf	3,6	;RP1=0, select bank0
  1875  0337  00AF               	movwf	I2C_Master_Init@c+3
  1876  0338  3006               	movlw	6
  1877  0339  00AE               	movwf	I2C_Master_Init@c+2
  1878  033A  301A               	movlw	26
  1879  033B  00AD               	movwf	I2C_Master_Init@c+1
  1880  033C  3080               	movlw	128
  1881  033D  00AC               	movwf	I2C_Master_Init@c
  1882  033E  120A  118A  2016  120A  118A  	fcall	_I2C_Master_Init
  1883                           
  1884                           ;main.c: 17: S = ReadRTCAsSec();
  1885  0343  120A  118A  21BC  120A  118A  	fcall	_ReadRTCAsSec
  1886  0348  082F               	movf	?_ReadRTCAsSec+3,w
  1887  0349  1703               	bsf	3,6	;RP1=1, select bank2
  1888  034A  00E5               	movwf	(_S+3)^(0+256)	;volatile
  1889  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1890  034C  082E               	movf	?_ReadRTCAsSec+2,w
  1891  034D  1703               	bsf	3,6	;RP1=1, select bank2
  1892  034E  00E4               	movwf	(_S+2)^(0+256)	;volatile
  1893  034F  1303               	bcf	3,6	;RP1=0, select bank0
  1894  0350  082D               	movf	?_ReadRTCAsSec+1,w
  1895  0351  1703               	bsf	3,6	;RP1=1, select bank2
  1896  0352  00E3               	movwf	(_S+1)^(0+256)	;volatile
  1897  0353  1303               	bcf	3,6	;RP1=0, select bank0
  1898  0354  082C               	movf	?_ReadRTCAsSec,w
  1899  0355  1703               	bsf	3,6	;RP1=1, select bank2
  1900  0356  00E2               	movwf	_S^(0+256)	;volatile
  1901                           
  1902                           ;main.c: 18: UART_Init(9600);
  1903  0357  1683               	bsf	3,5	;RP0=1, select bank1
  1904  0358  1303               	bcf	3,6	;RP1=0, select bank1
  1905  0359  3025               	movlw	37
  1906  035A  01DE               	clrf	(UART_Init@baudrate+3)^(0+128)
  1907  035B  01DD               	clrf	(UART_Init@baudrate+2)^(0+128)
  1908  035C  00DC               	movwf	(UART_Init@baudrate+1)^(0+128)
  1909  035D  3080               	movlw	128
  1910  035E  00DB               	movwf	UART_Init@baudrate^(0+128)
  1911  035F  120A  158A  2413  120A  118A  	fcall	_UART_Init
  1912  0364  3019               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1913                           
  1914                           ;main.c: 22: Lcd_Text(1,1,"   -   ");
  1915  0365  01F2               	clrf	Lcd_Text@x
  1916  0366  0AF2               	incf	Lcd_Text@x,f
  1917  0367  00F3               	movwf	Lcd_Text@buffer
  1918  0368  3001               	movlw	1
  1919  0369  120A  158A  2139  120A  118A  	fcall	_Lcd_Text
  1920  036E  3008               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1921                           
  1922                           ;main.c: 23: Lcd_Text(2,1,"C-St-Se/Pr+Df-Rm");
  1923  036F  01F2               	clrf	Lcd_Text@x
  1924  0370  0AF2               	incf	Lcd_Text@x,f
  1925  0371  00F3               	movwf	Lcd_Text@buffer
  1926  0372  3002               	movlw	2
  1927  0373  120A  158A  2139  120A  118A  	fcall	_Lcd_Text
  1928                           
  1929                           ;main.c: 26: UINT8 i, j, StateSecRemaining;
  1930                           ;main.c: 27: UINT16 k, l, State2OnOffCounter=0, StateAudioNormalOnOffCounter=0, StateAud
      +                          ioSplOnOffCounter=0;
  1931  0378  1283               	bcf	3,5	;RP0=0, select bank2
  1932  0379  1703               	bsf	3,6	;RP1=1, select bank2
  1933  037A  01CF               	clrf	main@State2OnOffCounter^(0+256)
  1934  037B  01D0               	clrf	(main@State2OnOffCounter+1)^(0+256)
  1935  037C  01D1               	clrf	main@StateAudioNormalOnOffCounter^(0+256)
  1936  037D  01D2               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+256)
  1937  037E  01D3               	clrf	main@StateAudioSplOnOffCounter^(0+256)
  1938  037F  01D4               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+256)
  1939                           
  1940                           ;main.c: 28: UINT8 OutForThePorts[2];
  1941                           ;main.c: 29: INT16 SecError;
  1942                           ;main.c: 30: INT32 TimeSinceTheStartOfCycle;
  1943                           ;main.c: 31: INT8 DiffInSecond;
  1944                           ;main.c: 32: UINT16 GPS_On_Time_Counter;
  1945                           ;main.c: 33: UINT16 AdjustMilliSecond = 1;
  1946  0380  01CC               	clrf	main@AdjustMilliSecond^(0+256)
  1947  0381  0ACC               	incf	main@AdjustMilliSecond^(0+256),f
  1948  0382  01CD               	clrf	(main@AdjustMilliSecond+1)^(0+256)
  1949  0383                     l3461:	
  1950                           
  1951                           ;main.c: 37: GetCycle();
  1952  0383  120A  118A  20D1  120A  118A  	fcall	_GetCycle
  1953                           
  1954                           ;main.c: 39: if (CONFIG0 & 0x01) {
  1955  0388  1C69               	btfss	_CONFIG0^(0+256),0	;volatile
  1956  0389  2C51               	goto	l3483
  1957                           
  1958                           ;main.c: 40: CONFIG0 = CONFIG0 & 0xfe;
  1959  038A  1069               	bcf	_CONFIG0^(0+256),0	;volatile
  1960                           
  1961                           ;main.c: 44: TimeSinceTheStartOfCycle = ReadRTCAsSec() + C_D;
  1962  038B  120A  118A  21BC  120A  118A  	fcall	_ReadRTCAsSec
  1963  0390  082F               	movf	?_ReadRTCAsSec+3,w
  1964  0391  1703               	bsf	3,6	;RP1=1, select bank2
  1965  0392  00DC               	movwf	(main@TimeSinceTheStartOfCycle+3)^(0+256)
  1966  0393  1303               	bcf	3,6	;RP1=0, select bank0
  1967  0394  082E               	movf	?_ReadRTCAsSec+2,w
  1968  0395  1703               	bsf	3,6	;RP1=1, select bank2
  1969  0396  00DB               	movwf	(main@TimeSinceTheStartOfCycle+2)^(0+256)
  1970  0397  1303               	bcf	3,6	;RP1=0, select bank0
  1971  0398  082D               	movf	?_ReadRTCAsSec+1,w
  1972  0399  1703               	bsf	3,6	;RP1=1, select bank2
  1973  039A  00DA               	movwf	(main@TimeSinceTheStartOfCycle+1)^(0+256)
  1974  039B  1303               	bcf	3,6	;RP1=0, select bank0
  1975  039C  082C               	movf	?_ReadRTCAsSec,w
  1976  039D  1703               	bsf	3,6	;RP1=1, select bank2
  1977  039E  00D9               	movwf	main@TimeSinceTheStartOfCycle^(0+256)
  1978  039F  086B               	movf	_C_D^(0+256),w	;volatile
  1979  03A0  07D9               	addwf	main@TimeSinceTheStartOfCycle^(0+256),f
  1980  03A1  01FF               	clrf	127
  1981  03A2  3980               	andlw	128
  1982  03A3  1D03               	skipz
  1983  03A4  03FF               	decf	127,f
  1984  03A5  087F               	movf	127,w
  1985  03A6  1803               	skipnc
  1986  03A7  0A7F               	incf	127,w
  1987  03A8  1D03               	skipz
  1988  03A9  07DA               	addwf	(main@TimeSinceTheStartOfCycle+1)^(0+256),f
  1989  03AA  087F               	movf	127,w
  1990  03AB  1803               	skipnc
  1991  03AC  0A7F               	incf	127,w
  1992  03AD  1D03               	skipz
  1993  03AE  07DB               	addwf	(main@TimeSinceTheStartOfCycle+2)^(0+256),f
  1994  03AF  087F               	movf	127,w
  1995  03B0  1803               	skipnc
  1996  03B1  0A7F               	incf	127,w
  1997  03B2  07DC               	addwf	(main@TimeSinceTheStartOfCycle+3)^(0+256),f
  1998                           
  1999                           ;main.c: 45: if (CONFIG0 & 0x02) {
  2000  03B3  1CE9               	btfss	_CONFIG0^(0+256),1	;volatile
  2001  03B4  2C45               	goto	l3479
  2002                           
  2003                           ;main.c: 46: WriteLongInt(2, 11, (S-TimeSinceTheStartOfCycle), 4, 1);
  2004  03B5  0865               	movf	(_S+3)^(0+256),w	;volatile
  2005  03B6  1303               	bcf	3,6	;RP1=0, select bank0
  2006  03B7  00B7               	movwf	WriteLongInt@Val+3
  2007  03B8  1703               	bsf	3,6	;RP1=1, select bank2
  2008  03B9  0864               	movf	(_S+2)^(0+256),w	;volatile
  2009  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  2010  03BB  00B6               	movwf	WriteLongInt@Val+2
  2011  03BC  1703               	bsf	3,6	;RP1=1, select bank2
  2012  03BD  0863               	movf	(_S+1)^(0+256),w	;volatile
  2013  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  2014  03BF  00B5               	movwf	WriteLongInt@Val+1
  2015  03C0  1703               	bsf	3,6	;RP1=1, select bank2
  2016  03C1  0862               	movf	_S^(0+256),w	;volatile
  2017  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  2018  03C3  00B4               	movwf	WriteLongInt@Val
  2019  03C4  1703               	bsf	3,6	;RP1=1, select bank2
  2020  03C5  0859               	movf	main@TimeSinceTheStartOfCycle^(0+256),w
  2021  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2022  03C7  02B4               	subwf	WriteLongInt@Val,f
  2023  03C8  1703               	bsf	3,6	;RP1=1, select bank2
  2024  03C9  085A               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2025  03CA  1C03               	skipc
  2026  03CB  0F5A               	incfsz	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2027  03CC  2BCE               	goto	u4135
  2028  03CD  2BD0               	goto	u4136
  2029  03CE                     u4135:	
  2030  03CE  1303               	bcf	3,6	;RP1=0, select bank0
  2031  03CF  02B5               	subwf	WriteLongInt@Val+1,f
  2032  03D0                     u4136:	
  2033  03D0  1703               	bsf	3,6	;RP1=1, select bank2
  2034  03D1  085B               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2035  03D2  1C03               	skipc
  2036  03D3  0F5B               	incfsz	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2037  03D4  2BD6               	goto	u4137
  2038  03D5  2BD8               	goto	u4138
  2039  03D6                     u4137:	
  2040  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2041  03D7  02B6               	subwf	WriteLongInt@Val+2,f
  2042  03D8                     u4138:	
  2043  03D8  1703               	bsf	3,6	;RP1=1, select bank2
  2044  03D9  085C               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2045  03DA  1C03               	skipc
  2046  03DB  0F5C               	incfsz	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2047  03DC  2BDE               	goto	u4139
  2048  03DD  2BE0               	goto	u4130
  2049  03DE                     u4139:	
  2050  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  2051  03DF  02B7               	subwf	WriteLongInt@Val+3,f
  2052  03E0                     u4130:	
  2053  03E0  1303               	bcf	3,6	;RP1=0, select bank0
  2054  03E1  300B               	movlw	11
  2055  03E2  00B3               	movwf	WriteLongInt@x
  2056  03E3  3004               	movlw	4
  2057  03E4  00B8               	movwf	WriteLongInt@size
  2058  03E5  3002               	movlw	2
  2059  03E6  01B9               	clrf	WriteLongInt@Sign
  2060  03E7  0AB9               	incf	WriteLongInt@Sign,f
  2061  03E8  120A  158A  2033  120A  118A  	fcall	_WriteLongInt
  2062                           
  2063                           ;main.c: 47: AdjustMilliSecond += (S-TimeSinceTheStartOfCycle)*(100.0/(3*60));
  2064  03ED  1703               	bsf	3,6	;RP1=1, select bank2
  2065  03EE  0865               	movf	(_S+3)^(0+256),w	;volatile
  2066  03EF  00FB               	movwf	___altoft@c+3
  2067  03F0  0864               	movf	(_S+2)^(0+256),w	;volatile
  2068  03F1  00FA               	movwf	___altoft@c+2
  2069  03F2  0863               	movf	(_S+1)^(0+256),w	;volatile
  2070  03F3  00F9               	movwf	___altoft@c+1
  2071  03F4  0862               	movf	_S^(0+256),w	;volatile
  2072  03F5  00F8               	movwf	___altoft@c
  2073  03F6  0859               	movf	main@TimeSinceTheStartOfCycle^(0+256),w
  2074  03F7  02F8               	subwf	___altoft@c,f
  2075  03F8  085A               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2076  03F9  1C03               	skipc
  2077  03FA  0F5A               	incfsz	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2078  03FB  02F9               	subwf	___altoft@c+1,f
  2079  03FC  085B               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2080  03FD  1C03               	skipc
  2081  03FE  0F5B               	incfsz	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2082  03FF  02FA               	subwf	___altoft@c+2,f
  2083  0400  085C               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2084  0401  1C03               	skipc
  2085  0402  0F5C               	incfsz	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2086  0403  02FB               	subwf	___altoft@c+3,f
  2087  0404  120A  158A  25D5  120A  118A  	fcall	___altoft
  2088  0409  120A  158A  27E9  120A  118A  	fcall	PL28	;call to abstracted procedure
  2089  040E  3039               	movlw	57
  2090  040F  00AC               	movwf	___ftmul@f1
  2091  0410  300E               	movlw	14
  2092  0411  00AD               	movwf	___ftmul@f1+1
  2093  0412  303F               	movlw	63
  2094  0413  00AE               	movwf	___ftmul@f1+2
  2095  0414  120A  158A  270B  120A  118A  	fcall	___ftmul
  2096  0419  082C               	movf	?___ftmul,w
  2097  041A  00D6               	movwf	___fttol@f1
  2098  041B  082D               	movf	?___ftmul+1,w
  2099  041C  00D7               	movwf	___fttol@f1+1
  2100  041D  082E               	movf	?___ftmul+2,w
  2101  041E  00D8               	movwf	___fttol@f1+2
  2102  041F  120A  158A  2604  120A  118A  	fcall	___fttol
  2103  0424  0856               	movf	?___fttol,w
  2104  0425  1703               	bsf	3,6	;RP1=1, select bank2
  2105  0426  07CC               	addwf	main@AdjustMilliSecond^(0+256),f
  2106  0427  1803               	skipnc
  2107  0428  0ACD               	incf	(main@AdjustMilliSecond+1)^(0+256),f
  2108  0429  1303               	bcf	3,6	;RP1=0, select bank0
  2109  042A  0857               	movf	?___fttol+1,w
  2110  042B  1703               	bsf	3,6	;RP1=1, select bank2
  2111  042C  07CD               	addwf	(main@AdjustMilliSecond+1)^(0+256),f
  2112                           
  2113                           ;main.c: 48: WriteLongInt(2, 11, AdjustMilliSecond, 5, 1);
  2114  042D  300B               	movlw	11
  2115  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2116  042F  00B3               	movwf	WriteLongInt@x
  2117  0430  1703               	bsf	3,6	;RP1=1, select bank2
  2118  0431  084C               	movf	main@AdjustMilliSecond^(0+256),w
  2119  0432  1303               	bcf	3,6	;RP1=0, select bank0
  2120  0433  00B4               	movwf	WriteLongInt@Val
  2121  0434  1703               	bsf	3,6	;RP1=1, select bank2
  2122  0435  084D               	movf	(main@AdjustMilliSecond+1)^(0+256),w
  2123  0436  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0437  00B5               	movwf	WriteLongInt@Val+1
  2125  0438  3005               	movlw	5
  2126  0439  01B6               	clrf	WriteLongInt@Val+2
  2127  043A  01B7               	clrf	WriteLongInt@Val+3
  2128  043B  00B8               	movwf	WriteLongInt@size
  2129  043C  3002               	movlw	2
  2130  043D  01B9               	clrf	WriteLongInt@Sign
  2131  043E  0AB9               	incf	WriteLongInt@Sign,f
  2132  043F  120A  158A  2033  120A  118A  	fcall	_WriteLongInt
  2133                           
  2134                           ;main.c: 49: } else
  2135  0444  2C48               	goto	l3481
  2136  0445                     l3479:	
  2137                           
  2138                           ;main.c: 50: CONFIG0 = CONFIG0 | 0x02;
  2139  0445  0869               	movf	_CONFIG0^(0+256),w	;volatile
  2140  0446  3802               	iorlw	2
  2141  0447  00E9               	movwf	_CONFIG0^(0+256)	;volatile
  2142  0448                     l3481:	
  2143                           
  2144                           ;main.c: 51: S = TimeSinceTheStartOfCycle;
  2145  0448  1703               	bsf	3,6	;RP1=1, select bank2
  2146  0449  085C               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2147  044A  00E5               	movwf	(_S+3)^(0+256)	;volatile
  2148  044B  085B               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2149  044C  00E4               	movwf	(_S+2)^(0+256)	;volatile
  2150  044D  085A               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2151  044E  00E3               	movwf	(_S+1)^(0+256)	;volatile
  2152  044F  0859               	movf	main@TimeSinceTheStartOfCycle^(0+256),w
  2153  0450  00E2               	movwf	_S^(0+256)	;volatile
  2154  0451                     l3483:	
  2155                           
  2156                           ;main.c: 52: }
  2157                           ;main.c: 53: if (CONFIG0 & 0x04) {
  2158  0451  1D69               	btfss	_CONFIG0^(0+256),2	;volatile
  2159  0452  2C5E               	goto	l3489
  2160                           
  2161                           ;main.c: 54: SwitchGPS(1);
  2162  0453  3001               	movlw	1
  2163  0454  120A  158A  2028  120A  118A  	fcall	_SwitchGPS
  2164                           
  2165                           ;main.c: 55: GPS_On_Time_Counter++;
  2166  0459  1703               	bsf	3,6	;RP1=1, select bank2
  2167  045A  0AC8               	incf	main@GPS_On_Time_Counter^(0+256),f
  2168  045B  1903               	skipnz
  2169  045C  0AC9               	incf	(main@GPS_On_Time_Counter+1)^(0+256),f
  2170                           
  2171                           ;main.c: 56: } else {
  2172  045D  2C67               	goto	l3493
  2173  045E                     l3489:	
  2174                           
  2175                           ;main.c: 57: SwitchGPS(0);
  2176  045E  3000               	movlw	0
  2177  045F  120A  158A  2028  120A  118A  	fcall	_SwitchGPS
  2178                           
  2179                           ;main.c: 58: GPS_On_Time_Counter=0;
  2180  0464  1703               	bsf	3,6	;RP1=1, select bank2
  2181  0465  01C8               	clrf	main@GPS_On_Time_Counter^(0+256)
  2182  0466  01C9               	clrf	(main@GPS_On_Time_Counter+1)^(0+256)
  2183  0467                     l3493:	
  2184                           
  2185                           ;main.c: 59: }
  2186                           ;main.c: 60: if (GPS_On_Time_Counter >= 1200) {
  2187  0467  3004               	movlw	4
  2188  0468  0249               	subwf	(main@GPS_On_Time_Counter+1)^(0+256),w
  2189  0469  30B0               	movlw	176
  2190  046A  1903               	skipnz
  2191  046B  0248               	subwf	main@GPS_On_Time_Counter^(0+256),w
  2192  046C  1C03               	skipc
  2193  046D  2C76               	goto	l3497
  2194                           
  2195                           ;main.c: 61: UART_ReadValidTimeFromGPS_TO(GPSData,4);
  2196  046E  3004               	movlw	4
  2197  046F  00F8               	movwf	UART_ReadValidTimeFromGPS_TO@TimeOut
  2198  0470  3042               	movlw	(low (main@GPSData| (0+256)))& (0+255)
  2199  0471  160A  118A  2754  120A  118A  	fcall	_UART_ReadValidTimeFromGPS_TO
  2200  0476                     l3497:	
  2201                           
  2202                           ;main.c: 62: }
  2203                           ;main.c: 64: (CYCLE_TYPE==0) ? (i = 0) : (i = STATE_BREAKS[CYCLE_TYPE-1]);
  2204  0476  1703               	bsf	3,6	;RP1=1, select bank2
  2205  0477  086A               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  2206  0478  1D03               	btfss	3,2
  2207  0479  2C7C               	goto	l3501
  2208  047A  01DF               	clrf	main@i^(0+256)
  2209  047B  2C82               	goto	l3503
  2210  047C                     l3501:	
  2211  047C  086A               	movf	_CYCLE_TYPE^(0+256),w
  2212  047D  3E65               	addlw	(low ((_STATE_BREAKS| (0+256)+255)))& (0+255)
  2213  047E  0084               	movwf	4
  2214  047F  1783               	bsf	3,7	;select IRP bank2
  2215  0480  0800               	movf	0,w
  2216  0481  00DF               	movwf	main@i^(0+256)
  2217  0482                     l3503:	
  2218                           
  2219                           ;main.c: 67: if (C[PREV_CYCLE_TYPE] < C[CYCLE_TYPE])
  2220  0482  086A               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  2221  0483  1683               	bsf	3,5	;RP0=1, select bank3
  2222  0484  00E5               	movwf	??_main^(0+384)
  2223  0485  3001               	movlw	1
  2224  0486  1003               	clrc
  2225  0487                     L1:	
  2226  0487  0DE5               	rlf	??_main^(0+384),f
  2227  0488  3EFF               	addlw	-1
  2228  0489  1003               	clrc
  2229  048A  1D03               	skipz
  2230  048B  2C87               	goto	L1
  2231  048C  0D65               	rlf	??_main^(0+384),w
  2232  048D  3E20               	addlw	32
  2233  048E  0084               	movwf	4
  2234  048F  1383               	bcf	3,7	;select IRP bank0
  2235  0490  0800               	movf	0,w
  2236  0491  00E6               	movwf	(??_main+1)^(0+384)
  2237  0492  0A84               	incf	4,f
  2238  0493  0800               	movf	0,w
  2239  0494  00E7               	movwf	((??_main+1)^(0+384)+1)
  2240  0495  0A84               	incf	4,f
  2241  0496  0800               	movf	0,w
  2242  0497  00E8               	movwf	((??_main+1)^(0+384)+2)
  2243  0498  0A84               	incf	4,f
  2244  0499  0800               	movf	0,w
  2245  049A  00E9               	movwf	((??_main+1)^(0+384)+3)
  2246  049B  1283               	bcf	3,5	;RP0=0, select bank2
  2247  049C  086C               	movf	_PREV_CYCLE_TYPE^(0+256),w	;volatile
  2248  049D  1683               	bsf	3,5	;RP0=1, select bank3
  2249  049E  00EA               	movwf	(??_main+5)^(0+384)
  2250  049F  3001               	movlw	1
  2251  04A0  1003               	clrc
  2252  04A1                     L2:	
  2253  04A1  0DEA               	rlf	(??_main+5)^(0+384),f
  2254  04A2  3EFF               	addlw	-1
  2255  04A3  1003               	clrc
  2256  04A4  1D03               	skipz
  2257  04A5  2CA1               	goto	L2
  2258  04A6  0D6A               	rlf	(??_main+5)^(0+384),w
  2259  04A7  3E20               	addlw	32
  2260  04A8  0084               	movwf	4
  2261  04A9  0800               	movf	0,w
  2262  04AA  00EB               	movwf	(??_main+6)^(0+384)
  2263  04AB  0A84               	incf	4,f
  2264  04AC  0800               	movf	0,w
  2265  04AD  00EC               	movwf	((??_main+6)^(0+384)+1)
  2266  04AE  0A84               	incf	4,f
  2267  04AF  0800               	movf	0,w
  2268  04B0  00ED               	movwf	((??_main+6)^(0+384)+2)
  2269  04B1  0A84               	incf	4,f
  2270  04B2  0800               	movf	0,w
  2271  04B3  00EE               	movwf	((??_main+6)^(0+384)+3)
  2272  04B4  086E               	movf	(??_main+9)^(0+384),w
  2273  04B5  3A80               	xorlw	128
  2274  04B6  00FF               	movwf	127
  2275  04B7  0869               	movf	(??_main+4)^(0+384),w
  2276  04B8  3A80               	xorlw	128
  2277  04B9  027F               	subwf	127,w
  2278  04BA  1D03               	skipz
  2279  04BB  2CC6               	goto	u4203
  2280  04BC  0868               	movf	(??_main+3)^(0+384),w
  2281  04BD  026D               	subwf	(??_main+8)^(0+384),w
  2282  04BE  1D03               	skipz
  2283  04BF  2CC6               	goto	u4203
  2284  04C0  0867               	movf	(??_main+2)^(0+384),w
  2285  04C1  026C               	subwf	(??_main+7)^(0+384),w
  2286  04C2  1D03               	skipz
  2287  04C3  2CC6               	goto	u4203
  2288  04C4  0866               	movf	(??_main+1)^(0+384),w
  2289  04C5  026B               	subwf	(??_main+6)^(0+384),w
  2290  04C6                     u4203:	
  2291  04C6  1803               	skipnc
  2292  04C7  2CCC               	goto	l3509
  2293                           
  2294                           ;main.c: 68: TimeSinceTheStartOfCycle = S - C[PREV_CYCLE_TYPE];
  2295  04C8  2741  120A  118A   	fcall	PL2	;call to abstracted procedure
  2296  04CB  2CDD               	goto	l3515
  2297  04CC                     l3509:	
  2298                           
  2299                           ;main.c: 69: else
  2300                           ;main.c: 70: TimeSinceTheStartOfCycle = S + (86400 - C[PREV_CYCLE_TYPE]);
  2301  04CC  2741  120A  118A   	fcall	PL2	;call to abstracted procedure
  2302  04CF  3080               	movlw	128
  2303  04D0  07D9               	addwf	main@TimeSinceTheStartOfCycle^(0+256),f
  2304  04D1  3051               	movlw	81
  2305  04D2  1803               	skipnc
  2306  04D3  3052               	movlw	82
  2307  04D4  07DA               	addwf	(main@TimeSinceTheStartOfCycle+1)^(0+256),f
  2308  04D5  3001               	movlw	1
  2309  04D6  1803               	skipnc
  2310  04D7  3002               	movlw	2
  2311  04D8  07DB               	addwf	(main@TimeSinceTheStartOfCycle+2)^(0+256),f
  2312  04D9  3000               	movlw	0
  2313  04DA  1803               	skipnc
  2314  04DB  3001               	movlw	1
  2315  04DC  07DC               	addwf	(main@TimeSinceTheStartOfCycle+3)^(0+256),f
  2316  04DD                     l3515:	
  2317                           
  2318                           ;main.c: 71: SecError = TimeSinceTheStartOfCycle%STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2319  04DD  27D4               	fcall	PL18	;call to abstracted procedure
  2320  04DE  00F0               	movwf	___almod@divisor
  2321  04DF  0866               	movf	(??_main+1)^(0+384),w
  2322  04E0  00F1               	movwf	___almod@divisor+1
  2323  04E1  01F2               	clrf	___almod@divisor+2
  2324  04E2  01F3               	clrf	___almod@divisor+3
  2325  04E3  1283               	bcf	3,5	;RP0=0, select bank2
  2326  04E4  085C               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+256),w
  2327  04E5  00F7               	movwf	___almod@dividend+3
  2328  04E6  085B               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+256),w
  2329  04E7  00F6               	movwf	___almod@dividend+2
  2330  04E8  085A               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+256),w
  2331  04E9  00F5               	movwf	___almod@dividend+1
  2332  04EA  0859               	movf	main@TimeSinceTheStartOfCycle^(0+256),w
  2333  04EB  00F4               	movwf	___almod@dividend
  2334  04EC  160A  118A  26EB  120A  118A  	fcall	___almod
  2335  04F1  0871               	movf	?___almod+1,w
  2336  04F2  00DE               	movwf	(main@SecError+1)^(0+256)
  2337  04F3  0870               	movf	?___almod,w
  2338  04F4  00DD               	movwf	main@SecError^(0+256)
  2339                           
  2340                           ;main.c: 72: if (SecError > (STATE_CUMULATIVE_PERIODS[CYCLE_TYPE]/2))
  2341  04F5  1003               	clrc
  2342  04F6  0D6A               	rlf	_CYCLE_TYPE^(0+256),w	;volatile
  2343  04F7  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  2344  04F8  0084               	movwf	4
  2345  04F9  1383               	bcf	3,7	;select IRP bank1
  2346  04FA  0800               	movf	0,w
  2347  04FB  1683               	bsf	3,5	;RP0=1, select bank3
  2348  04FC  00E5               	movwf	??_main^(0+384)
  2349  04FD  0A84               	incf	4,f
  2350  04FE  0800               	movf	0,w
  2351  04FF  00E6               	movwf	(??_main^(0+384)+1)
  2352  0500  1003               	clrc
  2353  0501  0CE6               	rrf	(??_main^(0+384)+1),f
  2354  0502  0CE5               	rrf	??_main^(0+384),f
  2355  0503  1283               	bcf	3,5	;RP0=0, select bank2
  2356  0504  085E               	movf	(main@SecError+1)^(0+256),w
  2357  0505  1683               	bsf	3,5	;RP0=1, select bank3
  2358  0506  0266               	subwf	(??_main+1)^(0+384),w
  2359  0507  1D03               	skipz
  2360  0508  2D0D               	goto	u4255
  2361  0509  1283               	bcf	3,5	;RP0=0, select bank2
  2362  050A  085D               	movf	main@SecError^(0+256),w
  2363  050B  1683               	bsf	3,5	;RP0=1, select bank3
  2364  050C  0265               	subwf	??_main^(0+384),w
  2365  050D                     u4255:	
  2366  050D  1803               	skipnc
  2367  050E  2D1B               	goto	l3665
  2368                           
  2369                           ;main.c: 73: SecError -= STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2370  050F  1283               	bcf	3,5	;RP0=0, select bank2
  2371  0510  27D4  120A  118A   	fcall	PL18	;call to abstracted procedure
  2372  0513  1283               	bcf	3,5	;RP0=0, select bank2
  2373  0514  02DD               	subwf	main@SecError^(0+256),f
  2374  0515  1683               	bsf	3,5	;RP0=1, select bank3
  2375  0516  0866               	movf	(??_main+1)^(0+384),w
  2376  0517  1283               	bcf	3,5	;RP0=0, select bank2
  2377  0518  1C03               	skipc
  2378  0519  03DE               	decf	(main@SecError+1)^(0+256),f
  2379  051A  02DE               	subwf	(main@SecError+1)^(0+256),f
  2380  051B                     l3665:	
  2381  051B  1283               	bcf	3,5	;RP0=0, select bank2
  2382  051C  086A               	movf	_CYCLE_TYPE^(0+256),w
  2383  051D  3E66               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  2384  051E  0084               	movwf	4
  2385  051F  1783               	bsf	3,7	;select IRP bank2
  2386  0520  0800               	movf	0,w
  2387  0521  025F               	subwf	main@i^(0+256),w
  2388  0522  1803               	btfsc	3,0
  2389  0523  2B83               	goto	l3461
  2390                           
  2391                           ;main.c: 75: DiffInSecond = 0;
  2392  0524  01D8               	clrf	main@DiffInSecond^(0+256)
  2393                           
  2394                           ;main.c: 76: for (j=0; j<(STATE_PERIODS[i] + DiffInSecond); j++) {
  2395  0525  01D5               	clrf	main@j^(0+256)
  2396  0526                     l3661:	
  2397  0526  085F               	movf	main@i^(0+256),w
  2398  0527  3ECC               	addlw	204
  2399  0528  0084               	movwf	4
  2400  0529  1783               	bsf	3,7	;select IRP bank3
  2401  052A  0800               	movf	0,w
  2402  052B  0758               	addwf	main@DiffInSecond^(0+256),w
  2403  052C  1683               	bsf	3,5	;RP0=1, select bank3
  2404  052D  00E5               	movwf	??_main^(0+384)
  2405  052E  01E6               	clrf	(??_main+1)^(0+384)
  2406  052F  1803               	skipnc
  2407  0530  0AE6               	incf	(??_main^(0+384)+1),f
  2408  0531  1283               	bcf	3,5	;RP0=0, select bank2
  2409  0532  1FD8               	btfss	main@DiffInSecond^(0+256),7
  2410  0533  2D36               	goto	u4464
  2411  0534  1683               	bsf	3,5	;RP0=1, select bank3
  2412  0535  03E6               	decf	(??_main^(0+384)+1),f
  2413  0536                     u4464:	
  2414  0536  1683               	bsf	3,5	;RP0=1, select bank3
  2415  0537  1703               	bsf	3,6	;RP1=1, select bank3
  2416  0538  0866               	movf	(??_main+1)^(0+384),w
  2417  0539  3A80               	xorlw	128
  2418  053A  3C80               	sublw	128
  2419  053B  1D03               	skipz
  2420  053C  2D40               	goto	u4475
  2421  053D  0865               	movf	??_main^(0+384),w
  2422  053E  1283               	bcf	3,5	;RP0=0, select bank2
  2423  053F  0255               	subwf	main@j^(0+256),w
  2424  0540                     u4475:	
  2425  0540  1803               	btfsc	3,0
  2426  0541  2F3D               	goto	l3663
  2427                           
  2428                           ;main.c: 79: StateSecRemaining = STATE_PERIODS[i]-j;
  2429  0542  1283               	bcf	3,5	;RP0=0, select bank2
  2430  0543  1703               	bsf	3,6	;RP1=1, select bank2
  2431  0544  085F               	movf	main@i^(0+256),w
  2432  0545  3ECC               	addlw	204
  2433  0546  0084               	movwf	4
  2434  0547  0855               	movf	main@j^(0+256),w
  2435  0548  1783               	bsf	3,7	;select IRP bank3
  2436  0549  0200               	subwf	0,w
  2437  054A  00CE               	movwf	main@StateSecRemaining^(0+256)
  2438                           
  2439                           ;main.c: 80: for (k=0; k<1000; k++) {
  2440  054B  01CA               	clrf	main@k^(0+256)
  2441  054C  01CB               	clrf	(main@k+1)^(0+256)
  2442  054D                     l3527:	
  2443  054D  3003               	movlw	3
  2444  054E  024B               	subwf	(main@k+1)^(0+256),w
  2445  054F  30E8               	movlw	232
  2446  0550  1903               	skipnz
  2447  0551  024A               	subwf	main@k^(0+256),w
  2448  0552  1803               	btfsc	3,0
  2449  0553  2E02               	goto	l3609
  2450                           
  2451                           ;main.c: 81: for (l=0; l<2; l++)
  2452  0554  01E0               	clrf	main@l^(0+256)
  2453  0555  01E1               	clrf	(main@l+1)^(0+256)
  2454  0556                     l3533:	
  2455  0556  3000               	movlw	0
  2456  0557  0261               	subwf	(main@l+1)^(0+256),w
  2457  0558  3002               	movlw	2
  2458  0559  1903               	skipnz
  2459  055A  0260               	subwf	main@l^(0+256),w
  2460  055B  1803               	btfsc	3,0
  2461  055C  2D71               	goto	l3543
  2462                           
  2463                           ;main.c: 82: OutForThePorts[l] = STATE_1[i][l];
  2464  055D  085F               	movf	main@i^(0+256),w
  2465  055E  1683               	bsf	3,5	;RP0=1, select bank3
  2466  055F  00E5               	movwf	??_main^(0+384)
  2467  0560  30A0               	movlw	160
  2468  0561  27B5  120A  118A   	fcall	PL10	;call to abstracted procedure
  2469  0564  1383               	bcf	3,7	;select IRP bank1
  2470  0565  27E0  120A  118A   	fcall	PL42	;call to abstracted procedure
  2471  0568  1683               	bsf	3,5	;RP0=1, select bank3
  2472  0569  0868               	movf	(??_main+3)^(0+384),w
  2473  056A  1783               	bsf	3,7	;select IRP bank2
  2474  056B  0080               	movwf	0
  2475  056C  1283               	bcf	3,5	;RP0=0, select bank2
  2476  056D  0AE0               	incf	main@l^(0+256),f
  2477  056E  1903               	skipnz
  2478  056F  0AE1               	incf	(main@l+1)^(0+256),f
  2479  0570  2D56               	goto	l3533
  2480  0571                     l3543:	
  2481                           
  2482                           ;main.c: 83: if (StateSecRemaining <= 2) {
  2483  0571  3003               	movlw	3
  2484  0572  024E               	subwf	main@StateSecRemaining^(0+256),w
  2485  0573  1803               	skipnc
  2486  0574  2DA0               	goto	l3559
  2487                           
  2488                           ;main.c: 84: if (State2OnOffCounter < 50) {
  2489  0575  3000               	movlw	0
  2490  0576  0250               	subwf	(main@State2OnOffCounter+1)^(0+256),w
  2491  0577  3032               	movlw	50
  2492  0578  1903               	skipnz
  2493  0579  024F               	subwf	main@State2OnOffCounter^(0+256),w
  2494  057A  1803               	skipnc
  2495  057B  2DA0               	goto	l3559
  2496                           
  2497                           ;main.c: 85: for (l=0; l<2; l++)
  2498  057C  01E0               	clrf	main@l^(0+256)
  2499  057D  01E1               	clrf	(main@l+1)^(0+256)
  2500  057E                     l3549:	
  2501  057E  3000               	movlw	0
  2502  057F  0261               	subwf	(main@l+1)^(0+256),w
  2503  0580  3002               	movlw	2
  2504  0581  1903               	skipnz
  2505  0582  0260               	subwf	main@l^(0+256),w
  2506  0583  1803               	btfsc	3,0
  2507  0584  2DA0               	goto	l3559
  2508                           
  2509                           ;main.c: 86: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2510  0585  085F               	movf	main@i^(0+256),w
  2511  0586  1683               	bsf	3,5	;RP0=1, select bank3
  2512  0587  00E5               	movwf	??_main^(0+384)
  2513  0588  3010               	movlw	16
  2514  0589  27B5  120A  118A   	fcall	PL10	;call to abstracted procedure
  2515  058C  1783               	bsf	3,7	;select IRP bank2
  2516  058D  27E0  120A  118A   	fcall	PL42	;call to abstracted procedure
  2517  0590  0800               	movf	0,w
  2518  0591  1683               	bsf	3,5	;RP0=1, select bank3
  2519  0592  0468               	iorwf	(??_main+3)^(0+384),w
  2520  0593  00E9               	movwf	(??_main+4)^(0+384)
  2521  0594  1283               	bcf	3,5	;RP0=0, select bank2
  2522  0595  0860               	movf	main@l^(0+256),w
  2523  0596  3E56               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2524  0597  0084               	movwf	4
  2525  0598  1683               	bsf	3,5	;RP0=1, select bank3
  2526  0599  0869               	movf	(??_main+4)^(0+384),w
  2527  059A  0080               	movwf	0
  2528  059B  1283               	bcf	3,5	;RP0=0, select bank2
  2529  059C  0AE0               	incf	main@l^(0+256),f
  2530  059D  1903               	skipnz
  2531  059E  0AE1               	incf	(main@l+1)^(0+256),f
  2532  059F  2D7E               	goto	l3549
  2533  05A0                     l3559:	
  2534                           
  2535                           ;main.c: 87: }
  2536                           ;main.c: 88: }
  2537                           ;main.c: 89: if (StateSecRemaining <= 3) {
  2538  05A0  3004               	movlw	4
  2539  05A1  024E               	subwf	main@StateSecRemaining^(0+256),w
  2540                           
  2541                           ;main.c: 90: if ((StateAudioNormalOnOffCounter) < 50) {
  2542  05A2  3000               	movlw	0
  2543  05A3  1803               	skipnc
  2544  05A4  2DBA               	goto	L5
  2545  05A5  0252               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+256),w
  2546  05A6  3032               	movlw	50
  2547  05A7  1903               	skipnz
  2548  05A8  0251               	subwf	main@StateAudioNormalOnOffCounter^(0+256),w
  2549  05A9  1803               	skipnc
  2550  05AA  2DCF               	goto	l3589
  2551                           
  2552                           ;main.c: 91: for (l=0; l<2; l++)
  2553  05AB  01E0               	clrf	main@l^(0+256)
  2554  05AC  01E1               	clrf	(main@l+1)^(0+256)
  2555  05AD                     l3565:	
  2556  05AD  3000               	movlw	0
  2557  05AE  0261               	subwf	(main@l+1)^(0+256),w
  2558  05AF  3002               	movlw	2
  2559  05B0  1903               	skipnz
  2560  05B1  0260               	subwf	main@l^(0+256),w
  2561  05B2  1803               	btfsc	3,0
  2562  05B3  2DCF               	goto	l3589
  2563                           
  2564                           ;main.c: 92: OutForThePorts[l] = (OutForThePorts[l] | STATE_3[i][l]);
  2565  05B4  277F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2566  05B7  1903               	skipnz
  2567  05B8  0AE1               	incf	(main@l+1)^(0+256),f
  2568  05B9  2DAD               	goto	l3565
  2569  05BA                     L5:	
  2570                           ;main.c: 95: if ((StateAudioSplOnOffCounter) < 50) {
  2571                           
  2572  05BA  0254               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+256),w
  2573  05BB  3032               	movlw	50
  2574  05BC  1903               	skipnz
  2575  05BD  0253               	subwf	main@StateAudioSplOnOffCounter^(0+256),w
  2576  05BE  1803               	skipnc
  2577  05BF  2DCF               	goto	l3589
  2578                           
  2579                           ;main.c: 96: for (l=0; l<2; l++)
  2580  05C0  01E0               	clrf	main@l^(0+256)
  2581  05C1  01E1               	clrf	(main@l+1)^(0+256)
  2582  05C2                     l3579:	
  2583  05C2  3000               	movlw	0
  2584  05C3  0261               	subwf	(main@l+1)^(0+256),w
  2585  05C4  3002               	movlw	2
  2586  05C5  1903               	skipnz
  2587  05C6  0260               	subwf	main@l^(0+256),w
  2588  05C7  1803               	btfsc	3,0
  2589  05C8  2DCF               	goto	l3589
  2590                           
  2591                           ;main.c: 97: OutForThePorts[l] = (OutForThePorts[l] | STATE_3[i][l]);
  2592  05C9  277F  120A  118A   	fcall	PL4	;call to abstracted procedure
  2593  05CC  1903               	skipnz
  2594  05CD  0AE1               	incf	(main@l+1)^(0+256),f
  2595  05CE  2DC2               	goto	l3579
  2596  05CF                     l3589:	
  2597                           
  2598                           ;main.c: 98: }
  2599                           ;main.c: 99: }
  2600                           ;main.c: 100: State2OnOffCounter++;
  2601  05CF  0ACF               	incf	main@State2OnOffCounter^(0+256),f
  2602  05D0  1903               	skipnz
  2603  05D1  0AD0               	incf	(main@State2OnOffCounter+1)^(0+256),f
  2604                           
  2605                           ;main.c: 101: StateAudioNormalOnOffCounter++;
  2606  05D2  0AD1               	incf	main@StateAudioNormalOnOffCounter^(0+256),f
  2607  05D3  1903               	skipnz
  2608  05D4  0AD2               	incf	(main@StateAudioNormalOnOffCounter+1)^(0+256),f
  2609                           
  2610                           ;main.c: 102: StateAudioSplOnOffCounter++;
  2611  05D5  0AD3               	incf	main@StateAudioSplOnOffCounter^(0+256),f
  2612  05D6  1903               	skipnz
  2613  05D7  0AD4               	incf	(main@StateAudioSplOnOffCounter+1)^(0+256),f
  2614                           
  2615                           ;main.c: 103: if (State2OnOffCounter >= (50
  2616                           ;main.c: 104: + 50))
  2617  05D8  3000               	movlw	0
  2618  05D9  0250               	subwf	(main@State2OnOffCounter+1)^(0+256),w
  2619  05DA  3064               	movlw	100
  2620  05DB  1903               	skipnz
  2621  05DC  024F               	subwf	main@State2OnOffCounter^(0+256),w
  2622  05DD  1C03               	skipc
  2623  05DE  2DE1               	goto	l3595
  2624                           
  2625                           ;main.c: 105: State2OnOffCounter=0;
  2626  05DF  01CF               	clrf	main@State2OnOffCounter^(0+256)
  2627  05E0  01D0               	clrf	(main@State2OnOffCounter+1)^(0+256)
  2628  05E1                     l3595:	
  2629                           
  2630                           ;main.c: 106: if (StateAudioNormalOnOffCounter >= (50
  2631                           ;main.c: 107: + 50))
  2632  05E1  3000               	movlw	0
  2633  05E2  0252               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+256),w
  2634  05E3  3064               	movlw	100
  2635  05E4  1903               	skipnz
  2636  05E5  0251               	subwf	main@StateAudioNormalOnOffCounter^(0+256),w
  2637  05E6  1C03               	skipc
  2638  05E7  2DEA               	goto	l3599
  2639                           
  2640                           ;main.c: 108: StateAudioNormalOnOffCounter=0;
  2641  05E8  01D1               	clrf	main@StateAudioNormalOnOffCounter^(0+256)
  2642  05E9  01D2               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+256)
  2643  05EA                     l3599:	
  2644                           
  2645                           ;main.c: 109: if (StateAudioSplOnOffCounter >= (50
  2646                           ;main.c: 110: + 50))
  2647  05EA  3000               	movlw	0
  2648  05EB  0254               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+256),w
  2649  05EC  3064               	movlw	100
  2650  05ED  1903               	skipnz
  2651  05EE  0253               	subwf	main@StateAudioSplOnOffCounter^(0+256),w
  2652  05EF  1C03               	skipc
  2653  05F0  2DF3               	goto	l3603
  2654                           
  2655                           ;main.c: 111: StateAudioSplOnOffCounter=0;
  2656  05F1  01D3               	clrf	main@StateAudioSplOnOffCounter^(0+256)
  2657  05F2  01D4               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+256)
  2658  05F3                     l3603:	
  2659                           
  2660                           ;main.c: 116: DelayInUSec(AdjustMilliSecond);
  2661  05F3  084D               	movf	(main@AdjustMilliSecond+1)^(0+256),w
  2662  05F4  00F1               	movwf	DelayInUSec@a+1
  2663  05F5  084C               	movf	main@AdjustMilliSecond^(0+256),w
  2664  05F6  00F0               	movwf	DelayInUSec@a
  2665  05F7  160A  118A  269F  120A  118A  	fcall	_DelayInUSec
  2666  05FC  1283               	bcf	3,5	;RP0=0, select bank2
  2667  05FD  1703               	bsf	3,6	;RP1=1, select bank2
  2668  05FE  0ACA               	incf	main@k^(0+256),f
  2669  05FF  1903               	skipnz
  2670  0600  0ACB               	incf	(main@k+1)^(0+256),f
  2671  0601  2D4D               	goto	l3527
  2672  0602                     l3609:	
  2673                           
  2674                           ;main.c: 117: }
  2675                           ;main.c: 118: if (j==0) {
  2676  0602  0855               	movf	main@j^(0+256),w
  2677  0603  1D03               	btfss	3,2
  2678  0604  2E62               	goto	l3623
  2679                           
  2680                           ;main.c: 119: DiffInSecond = STATE_PERIODS[i]/3;
  2681  0605  3003               	movlw	3
  2682  0606  00F0               	movwf	___lbdiv@divisor
  2683  0607  085F               	movf	main@i^(0+256),w
  2684  0608  3ECC               	addlw	204
  2685  0609  0084               	movwf	4
  2686  060A  1783               	bsf	3,7	;select IRP bank3
  2687  060B  0800               	movf	0,w
  2688  060C  160A  118A  26AE  120A  118A  	fcall	___lbdiv
  2689  0611  00D8               	movwf	main@DiffInSecond^(0+256)
  2690                           
  2691                           ;main.c: 121: if (GetAbs(SecError)<GetAbs(DiffInSecond))
  2692  0612  085E               	movf	(main@SecError+1)^(0+256),w
  2693  0613  00F1               	movwf	GetAbs@a+1
  2694  0614  085D               	movf	main@SecError^(0+256),w
  2695  0615  00F0               	movwf	GetAbs@a
  2696  0616  160A  118A  2697  120A  118A  	fcall	_GetAbs
  2697  061B  0870               	movf	?_GetAbs,w
  2698  061C  1683               	bsf	3,5	;RP0=1, select bank3
  2699  061D  00E5               	movwf	??_main^(0+384)
  2700  061E  0871               	movf	?_GetAbs+1,w
  2701  061F  00E6               	movwf	(??_main^(0+384)+1)
  2702  0620  1283               	bcf	3,5	;RP0=0, select bank2
  2703  0621  0858               	movf	main@DiffInSecond^(0+256),w
  2704  0622  00F0               	movwf	GetAbs@a
  2705  0623  01F1               	clrf	GetAbs@a+1
  2706  0624  1BF0               	btfsc	GetAbs@a,7
  2707  0625  03F1               	decf	GetAbs@a+1,f
  2708  0626  160A  118A  2697  120A  118A  	fcall	_GetAbs
  2709  062B  1683               	bsf	3,5	;RP0=1, select bank3
  2710  062C  0866               	movf	(??_main+1)^(0+384),w
  2711  062D  3A80               	xorlw	128
  2712  062E  00E7               	movwf	(??_main+2)^(0+384)
  2713  062F  0871               	movf	?_GetAbs+1,w
  2714  0630  3A80               	xorlw	128
  2715  0631  0267               	subwf	(??_main+2)^(0+384),w
  2716  0632  1D03               	skipz
  2717  0633  2E36               	goto	u4405
  2718  0634  0870               	movf	?_GetAbs,w
  2719  0635  0265               	subwf	??_main^(0+384),w
  2720  0636                     u4405:	
  2721  0636  1803               	skipnc
  2722  0637  2E45               	goto	l3617
  2723                           
  2724                           ;main.c: 122: DiffInSecond = GetAbs(SecError);
  2725  0638  1283               	bcf	3,5	;RP0=0, select bank2
  2726  0639  1703               	bsf	3,6	;RP1=1, select bank2
  2727  063A  085E               	movf	(main@SecError+1)^(0+256),w
  2728  063B  00F1               	movwf	GetAbs@a+1
  2729  063C  085D               	movf	main@SecError^(0+256),w
  2730  063D  00F0               	movwf	GetAbs@a
  2731  063E  160A  118A  2697  120A  118A  	fcall	_GetAbs
  2732  0643  0870               	movf	?_GetAbs,w
  2733  0644  00D8               	movwf	main@DiffInSecond^(0+256)
  2734  0645                     l3617:	
  2735                           
  2736                           ;main.c: 123: if (SecError>0)
  2737  0645  1283               	bcf	3,5	;RP0=0, select bank2
  2738  0646  1703               	bsf	3,6	;RP1=1, select bank2
  2739  0647  085E               	movf	(main@SecError+1)^(0+256),w
  2740  0648  3A80               	xorlw	128
  2741  0649  00FF               	movwf	127
  2742  064A  3080               	movlw	128
  2743  064B  027F               	subwf	127,w
  2744  064C  1D03               	skipz
  2745  064D  2E50               	goto	u4415
  2746  064E  3001               	movlw	1
  2747  064F  025D               	subwf	main@SecError^(0+256),w
  2748  0650                     u4415:	
  2749  0650  1C03               	skipc
  2750  0651  2E56               	goto	l3621
  2751                           
  2752                           ;main.c: 124: DiffInSecond = -DiffInSecond;
  2753  0652  1283               	bcf	3,5	;RP0=0, select bank2
  2754  0653  1703               	bsf	3,6	;RP1=1, select bank2
  2755  0654  09D8               	comf	main@DiffInSecond^(0+256),f
  2756  0655  0AD8               	incf	main@DiffInSecond^(0+256),f
  2757  0656                     l3621:	
  2758                           
  2759                           ;main.c: 125: SecError = SecError+DiffInSecond;
  2760  0656  1283               	bcf	3,5	;RP0=0, select bank2
  2761  0657  1703               	bsf	3,6	;RP1=1, select bank2
  2762  0658  085D               	movf	main@SecError^(0+256),w
  2763  0659  0758               	addwf	main@DiffInSecond^(0+256),w
  2764  065A  00DD               	movwf	main@SecError^(0+256)
  2765  065B  085E               	movf	(main@SecError+1)^(0+256),w
  2766  065C  1803               	skipnc
  2767  065D  0A5E               	incf	(main@SecError+1)^(0+256),w
  2768  065E  3E00               	addlw	0
  2769  065F  1BD8               	btfsc	main@DiffInSecond^(0+256),7
  2770  0660  3EFF               	addlw	255
  2771  0661  00DE               	movwf	(main@SecError+1)^(0+256)
  2772  0662                     l3623:	
  2773                           
  2774                           ;main.c: 126: }
  2775                           ;main.c: 128: WriteLongInt(2, 1, CYCLE_TYPE , 1, 0);
  2776  0662  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0663  01B3               	clrf	WriteLongInt@x
  2778  0664  0AB3               	incf	WriteLongInt@x,f
  2779  0665  1703               	bsf	3,6	;RP1=1, select bank2
  2780  0666  086A               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  2781  0667  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0668  00B4               	movwf	WriteLongInt@Val
  2783  0669  3002               	movlw	2
  2784  066A  01B5               	clrf	WriteLongInt@Val+1
  2785  066B  01B6               	clrf	WriteLongInt@Val+2
  2786  066C  01B7               	clrf	WriteLongInt@Val+3
  2787  066D  01B8               	clrf	WriteLongInt@size
  2788  066E  0AB8               	incf	WriteLongInt@size,f
  2789  066F  01B9               	clrf	WriteLongInt@Sign
  2790  0670  120A  158A  2033  120A  118A  	fcall	_WriteLongInt
  2791                           
  2792                           ;main.c: 129: WriteLongInt(2, 3, i, 2, 0);
  2793  0675  3003               	movlw	3
  2794  0676  00B3               	movwf	WriteLongInt@x
  2795  0677  1703               	bsf	3,6	;RP1=1, select bank2
  2796  0678  085F               	movf	main@i^(0+256),w
  2797  0679  27CB               	fcall	PL14	;call to abstracted procedure
  2798  067A  120A  158A  2033  120A  118A  	fcall	_WriteLongInt
  2799                           
  2800                           ;main.c: 130: WriteLongInt(2, 6, j, 2, 0);
  2801  067F  3006               	movlw	6
  2802  0680  00B3               	movwf	WriteLongInt@x
  2803  0681  1703               	bsf	3,6	;RP1=1, select bank2
  2804  0682  0855               	movf	main@j^(0+256),w
  2805  0683  27CB               	fcall	PL14	;call to abstracted procedure
  2806  0684  120A  158A  2033  120A  118A  	fcall	_WriteLongInt
  2807                           
  2808                           ;main.c: 131: WriteLongInt(2, 9, STATE_PERIODS[i], 2, 0);
  2809  0689  3009               	movlw	9
  2810  068A  00B3               	movwf	WriteLongInt@x
  2811  068B  1703               	bsf	3,6	;RP1=1, select bank2
  2812  068C  085F               	movf	main@i^(0+256),w
  2813  068D  3ECC               	addlw	204
  2814  068E  0084               	movwf	4
  2815  068F  1783               	bsf	3,7	;select IRP bank3
  2816  0690  0800               	movf	0,w
  2817  0691  27CB               	fcall	PL14	;call to abstracted procedure
  2818  0692  120A  158A  2033  120A  118A  	fcall	_WriteLongInt
  2819                           
  2820                           ;main.c: 136: for (l=0; l<2; l++) {
  2821  0697  1703               	bsf	3,6	;RP1=1, select bank2
  2822  0698  01E0               	clrf	main@l^(0+256)
  2823  0699  01E1               	clrf	(main@l+1)^(0+256)
  2824  069A                     l3633:	
  2825  069A  3000               	movlw	0
  2826  069B  0261               	subwf	(main@l+1)^(0+256),w
  2827  069C  3002               	movlw	2
  2828  069D  1903               	skipnz
  2829  069E  0260               	subwf	main@l^(0+256),w
  2830  069F  1803               	btfsc	3,0
  2831  06A0  2EF3               	goto	l3643
  2832                           
  2833                           ;main.c: 137: Lcd_Disp_Bin(1, 8*l+1, 0xff, 0x30);
  2834  06A1  0860               	movf	main@l^(0+256),w
  2835  06A2  1683               	bsf	3,5	;RP0=1, select bank3
  2836  06A3  00E5               	movwf	??_main^(0+384)
  2837  06A4  1003               	clrc
  2838  06A5  0DE5               	rlf	??_main^(0+384),f
  2839  06A6  1003               	clrc
  2840  06A7  0DE5               	rlf	??_main^(0+384),f
  2841  06A8  1003               	clrc
  2842  06A9  0D65               	rlf	??_main^(0+384),w
  2843  06AA  3E01               	addlw	1
  2844  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  2845  06AC  1303               	bcf	3,6	;RP1=0, select bank0
  2846  06AD  00B3               	movwf	Lcd_Disp_Bin@x
  2847  06AE  30FF               	movlw	255
  2848  06AF  00B4               	movwf	Lcd_Disp_Bin@val
  2849  06B0  3030               	movlw	48
  2850  06B1  00B5               	movwf	Lcd_Disp_Bin@DispChar
  2851  06B2  3001               	movlw	1
  2852  06B3  160A  118A  26C9  120A  118A  	fcall	_Lcd_Disp_Bin
  2853                           
  2854                           ;main.c: 138: Lcd_Disp_Bin(1, 8*l+1, STATE_1[i][l], 0x31);
  2855  06B8  27A2  120A  118A   	fcall	PL6	;call to abstracted procedure
  2856  06BB  30A0               	movlw	160
  2857  06BC  27C0               	fcall	PL12	;call to abstracted procedure
  2858  06BD  1383               	bcf	3,7	;select IRP bank1
  2859  06BE  0800               	movf	0,w
  2860  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2861  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  2862  06C1  00B4               	movwf	Lcd_Disp_Bin@val
  2863  06C2  3031               	movlw	49
  2864  06C3  00B5               	movwf	Lcd_Disp_Bin@DispChar
  2865  06C4  3001               	movlw	1
  2866  06C5  160A  118A  26C9  120A  118A  	fcall	_Lcd_Disp_Bin
  2867                           
  2868                           ;main.c: 139: Lcd_Disp_Bin(1, 8*l+1, STATE_2[i][l], 0x32);
  2869  06CA  27A2  120A  118A   	fcall	PL6	;call to abstracted procedure
  2870  06CD  3010               	movlw	16
  2871  06CE  27C0               	fcall	PL12	;call to abstracted procedure
  2872  06CF  1783               	bsf	3,7	;select IRP bank2
  2873  06D0  0800               	movf	0,w
  2874  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  2875  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  2876  06D3  00B4               	movwf	Lcd_Disp_Bin@val
  2877  06D4  3032               	movlw	50
  2878  06D5  00B5               	movwf	Lcd_Disp_Bin@DispChar
  2879  06D6  3001               	movlw	1
  2880  06D7  160A  118A  26C9  120A  118A  	fcall	_Lcd_Disp_Bin
  2881                           
  2882                           ;main.c: 140: Lcd_Disp_Bin(1, 8*l+1, STATE_3[i][l], 0x33);
  2883  06DC  27A2  120A  118A   	fcall	PL6	;call to abstracted procedure
  2884  06DF  3090               	movlw	144
  2885  06E0  27C0               	fcall	PL12	;call to abstracted procedure
  2886  06E1  1783               	bsf	3,7	;select IRP bank3
  2887  06E2  0800               	movf	0,w
  2888  06E3  1283               	bcf	3,5	;RP0=0, select bank0
  2889  06E4  1303               	bcf	3,6	;RP1=0, select bank0
  2890  06E5  00B4               	movwf	Lcd_Disp_Bin@val
  2891  06E6  3033               	movlw	51
  2892  06E7  00B5               	movwf	Lcd_Disp_Bin@DispChar
  2893  06E8  3001               	movlw	1
  2894  06E9  160A  118A  26C9  120A  118A  	fcall	_Lcd_Disp_Bin
  2895  06EE  1703               	bsf	3,6	;RP1=1, select bank2
  2896  06EF  0AE0               	incf	main@l^(0+256),f
  2897  06F0  1903               	skipnz
  2898  06F1  0AE1               	incf	(main@l+1)^(0+256),f
  2899  06F2  2E9A               	goto	l3633
  2900  06F3                     l3643:	
  2901                           
  2902                           ;main.c: 141: }
  2903                           ;main.c: 143: S++;
  2904  06F3  0AE2               	incf	_S^(0+256),f	;volatile
  2905  06F4  1903               	skipnz
  2906  06F5  0AE3               	incf	(_S+1)^(0+256),f	;volatile
  2907  06F6  1903               	skipnz
  2908  06F7  0AE4               	incf	(_S+2)^(0+256),f	;volatile
  2909  06F8  1903               	skipnz
  2910  06F9  0AE5               	incf	(_S+3)^(0+256),f	;volatile
  2911                           
  2912                           ;main.c: 144: if (S>=86400)
  2913  06FA  1BE5               	btfsc	(_S+3)^(0+256),7	;volatile
  2914  06FB  2F0F               	goto	l3649
  2915  06FC  0865               	movf	(_S+3)^(0+256),w	;volatile
  2916  06FD  1D03               	btfss	3,2
  2917  06FE  2F0B               	goto	l3647
  2918  06FF  3001               	movlw	1
  2919  0700  0264               	subwf	(_S+2)^(0+256),w	;volatile
  2920  0701  1D03               	skipz
  2921  0702  2F09               	goto	u4433
  2922  0703  3051               	movlw	81
  2923  0704  0263               	subwf	(_S+1)^(0+256),w	;volatile
  2924  0705  1D03               	skipz
  2925  0706  2F09               	goto	u4433
  2926  0707  3080               	movlw	128
  2927  0708  0262               	subwf	_S^(0+256),w	;volatile
  2928  0709                     u4433:	
  2929  0709  1C03               	btfss	3,0
  2930  070A  2F0F               	goto	l3649
  2931  070B                     l3647:	
  2932                           
  2933                           ;main.c: 145: S=0;
  2934  070B  01E2               	clrf	_S^(0+256)	;volatile
  2935  070C  01E3               	clrf	(_S+1)^(0+256)	;volatile
  2936  070D  01E4               	clrf	(_S+2)^(0+256)	;volatile
  2937  070E  01E5               	clrf	(_S+3)^(0+256)	;volatile
  2938  070F                     l3649:	
  2939                           
  2940                           ;main.c: 146: if ((S%(3*60)) == 0)
  2941  070F  30B4               	movlw	180
  2942  0710  00F0               	movwf	___almod@divisor
  2943  0711  01F1               	clrf	___almod@divisor+1
  2944  0712  01F2               	clrf	___almod@divisor+2
  2945  0713  01F3               	clrf	___almod@divisor+3
  2946  0714  0865               	movf	(_S+3)^(0+256),w	;volatile
  2947  0715  00F7               	movwf	___almod@dividend+3
  2948  0716  0864               	movf	(_S+2)^(0+256),w	;volatile
  2949  0717  00F6               	movwf	___almod@dividend+2
  2950  0718  0863               	movf	(_S+1)^(0+256),w	;volatile
  2951  0719  00F5               	movwf	___almod@dividend+1
  2952  071A  0862               	movf	_S^(0+256),w	;volatile
  2953  071B  00F4               	movwf	___almod@dividend
  2954  071C  160A  118A  26EB  120A  118A  	fcall	___almod
  2955  0721  0873               	movf	?___almod+3,w
  2956  0722  0472               	iorwf	?___almod+2,w
  2957  0723  0471               	iorwf	?___almod+1,w
  2958  0724  0470               	iorwf	?___almod,w
  2959  0725  1D03               	skipz
  2960  0726  2F2A               	goto	l3653
  2961                           
  2962                           ;main.c: 147: CONFIG0 = CONFIG0 | 0x01;
  2963  0727  0869               	movf	_CONFIG0^(0+256),w	;volatile
  2964  0728  3801               	iorlw	1
  2965  0729  00E9               	movwf	_CONFIG0^(0+256)	;volatile
  2966  072A                     l3653:	
  2967                           
  2968                           ;main.c: 148: if (S == 80000) {
  2969  072A  3080               	movlw	128
  2970  072B  0662               	xorwf	_S^(0+256),w	;volatile
  2971  072C  3038               	movlw	56
  2972  072D  1903               	skipnz
  2973  072E  0663               	xorwf	(_S+1)^(0+256),w	;volatile
  2974  072F  1D03               	skipz
  2975  0730  2F3B               	goto	l3659
  2976  0731  0364               	decf	(_S+2)^(0+256),w	;volatile
  2977  0732  0465               	iorwf	(_S+3)^(0+256),w	;volatile
  2978  0733  1D03               	btfss	3,2
  2979  0734  2F3B               	goto	l3659
  2980                           
  2981                           ;main.c: 149: RC1 = 1;
  2982  0735  1303               	bcf	3,6	;RP1=0, select bank0
  2983  0736  1487               	bsf	7,1	;volatile
  2984                           
  2985                           ;main.c: 150: CONFIG0 = CONFIG0 | 0x04;
  2986  0737  1703               	bsf	3,6	;RP1=1, select bank2
  2987  0738  0869               	movf	_CONFIG0^(0+256),w	;volatile
  2988  0739  3804               	iorlw	4
  2989  073A  00E9               	movwf	_CONFIG0^(0+256)	;volatile
  2990  073B                     l3659:	
  2991  073B  0AD5               	incf	main@j^(0+256),f
  2992  073C  2D26               	goto	l3661
  2993  073D                     l3663:	
  2994  073D  1283               	bcf	3,5	;RP0=0, select bank2
  2995  073E  1703               	bsf	3,6	;RP1=1, select bank2
  2996  073F  0ADF               	incf	main@i^(0+256),f
  2997  0740  2D1B               	goto	l3665
  2998  0741                     __end_of_main:	
  2999  0741                     PL2:	
  3000  0741  1283               	bcf	3,5	;RP0=0, select bank2
  3001  0742  0865               	movf	(_S+3)^(0+256),w	;volatile
  3002  0743  00DC               	movwf	(main@TimeSinceTheStartOfCycle+3)^(0+256)
  3003  0744  0864               	movf	(_S+2)^(0+256),w	;volatile
  3004  0745  00DB               	movwf	(main@TimeSinceTheStartOfCycle+2)^(0+256)
  3005  0746  0863               	movf	(_S+1)^(0+256),w	;volatile
  3006  0747  00DA               	movwf	(main@TimeSinceTheStartOfCycle+1)^(0+256)
  3007  0748  0862               	movf	_S^(0+256),w	;volatile
  3008  0749  00D9               	movwf	main@TimeSinceTheStartOfCycle^(0+256)
  3009  074A  086C               	movf	_PREV_CYCLE_TYPE^(0+256),w	;volatile
  3010  074B  1683               	bsf	3,5	;RP0=1, select bank3
  3011  074C  00E5               	movwf	??_main^(0+384)
  3012  074D  3001               	movlw	1
  3013  074E  1003               	clrc
  3014  074F                     L3:	
  3015  074F  0DE5               	rlf	??_main^(0+384),f
  3016  0750  3EFF               	addlw	-1
  3017  0751  1003               	clrc
  3018  0752  1D03               	skipz
  3019  0753  2F4F               	goto	L3
  3020  0754  0D65               	rlf	??_main^(0+384),w
  3021  0755  3E20               	addlw	32
  3022  0756  0084               	movwf	4
  3023  0757  0800               	movf	0,w
  3024  0758  00E6               	movwf	(??_main+1)^(0+384)
  3025  0759  0A84               	incf	4,f
  3026  075A  0800               	movf	0,w
  3027  075B  00E7               	movwf	((??_main+1)^(0+384)+1)
  3028  075C  0A84               	incf	4,f
  3029  075D  0800               	movf	0,w
  3030  075E  00E8               	movwf	((??_main+1)^(0+384)+2)
  3031  075F  0A84               	incf	4,f
  3032  0760  0800               	movf	0,w
  3033  0761  00E9               	movwf	((??_main+1)^(0+384)+3)
  3034  0762  0866               	movf	(??_main+1)^(0+384),w
  3035  0763  1283               	bcf	3,5	;RP0=0, select bank2
  3036  0764  02D9               	subwf	main@TimeSinceTheStartOfCycle^(0+256),f
  3037  0765  1683               	bsf	3,5	;RP0=1, select bank3
  3038  0766  0867               	movf	(??_main+2)^(0+384),w
  3039  0767  1C03               	skipc
  3040  0768  0F67               	incfsz	(??_main+2)^(0+384),w
  3041  0769  2F6B               	goto	u4225
  3042  076A  2F6D               	goto	u4226
  3043  076B                     u4225:	
  3044  076B  1283               	bcf	3,5	;RP0=0, select bank2
  3045  076C  02DA               	subwf	(main@TimeSinceTheStartOfCycle+1)^(0+256),f
  3046  076D                     u4226:	
  3047  076D  1683               	bsf	3,5	;RP0=1, select bank3
  3048  076E  0868               	movf	(??_main+3)^(0+384),w
  3049  076F  1C03               	skipc
  3050  0770  0F68               	incfsz	(??_main+3)^(0+384),w
  3051  0771  2F73               	goto	u4227
  3052  0772  2F75               	goto	u4228
  3053  0773                     u4227:	
  3054  0773  1283               	bcf	3,5	;RP0=0, select bank2
  3055  0774  02DB               	subwf	(main@TimeSinceTheStartOfCycle+2)^(0+256),f
  3056  0775                     u4228:	
  3057  0775  1683               	bsf	3,5	;RP0=1, select bank3
  3058  0776  0869               	movf	(??_main+4)^(0+384),w
  3059  0777  1C03               	skipc
  3060  0778  0F69               	incfsz	(??_main+4)^(0+384),w
  3061  0779  2F7B               	goto	u4229
  3062  077A  2F7D               	goto	u4220
  3063  077B                     u4229:	
  3064  077B  1283               	bcf	3,5	;RP0=0, select bank2
  3065  077C  02DC               	subwf	(main@TimeSinceTheStartOfCycle+3)^(0+256),f
  3066  077D                     u4220:	
  3067  077D  1283               	bcf	3,5	;RP0=0, select bank2
  3068  077E  0008               	return
  3069  077F                     __end_ofPL2:	
  3070  077F                     PL4:	
  3071  077F  085F               	movf	main@i^(0+256),w
  3072  0780  1683               	bsf	3,5	;RP0=1, select bank3
  3073  0781  00E5               	movwf	??_main^(0+384)
  3074  0782  3090               	movlw	144
  3075  0783  1003               	clrc
  3076  0784  0DE5               	rlf	??_main^(0+384),f
  3077  0785  0765               	addwf	??_main^(0+384),w
  3078  0786  00E6               	movwf	(??_main+1)^(0+384)
  3079  0787  1283               	bcf	3,5	;RP0=0, select bank2
  3080  0788  0860               	movf	main@l^(0+256),w
  3081  0789  1683               	bsf	3,5	;RP0=1, select bank3
  3082  078A  0766               	addwf	(??_main+1)^(0+384),w
  3083  078B  00E7               	movwf	(??_main+2)^(0+384)
  3084  078C  0084               	movwf	4
  3085  078D  1783               	bsf	3,7	;select IRP bank3
  3086  078E  0800               	movf	0,w
  3087  078F  00E8               	movwf	(??_main+3)^(0+384)
  3088  0790  1283               	bcf	3,5	;RP0=0, select bank2
  3089  0791  0860               	movf	main@l^(0+256),w
  3090  0792  3E56               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  3091  0793  0084               	movwf	4
  3092  0794  0800               	movf	0,w
  3093  0795  1683               	bsf	3,5	;RP0=1, select bank3
  3094  0796  0468               	iorwf	(??_main+3)^(0+384),w
  3095  0797  00E9               	movwf	(??_main+4)^(0+384)
  3096  0798  1283               	bcf	3,5	;RP0=0, select bank2
  3097  0799  0860               	movf	main@l^(0+256),w
  3098  079A  3E56               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  3099  079B  0084               	movwf	4
  3100  079C  1683               	bsf	3,5	;RP0=1, select bank3
  3101  079D  0869               	movf	(??_main+4)^(0+384),w
  3102  079E  0080               	movwf	0
  3103  079F  1283               	bcf	3,5	;RP0=0, select bank2
  3104  07A0  0AE0               	incf	main@l^(0+256),f
  3105  07A1  0008               	return
  3106  07A2                     __end_ofPL4:	
  3107  07A2                     PL6:	
  3108  07A2  1703               	bsf	3,6	;RP1=1, select bank2
  3109  07A3  0860               	movf	main@l^(0+256),w
  3110  07A4  1683               	bsf	3,5	;RP0=1, select bank3
  3111  07A5  00E5               	movwf	??_main^(0+384)
  3112  07A6  1003               	clrc
  3113  07A7  0DE5               	rlf	??_main^(0+384),f
  3114  07A8  1003               	clrc
  3115  07A9  0DE5               	rlf	??_main^(0+384),f
  3116  07AA  1003               	clrc
  3117  07AB  0D65               	rlf	??_main^(0+384),w
  3118  07AC  3E01               	addlw	1
  3119  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  3120  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  3121  07AF  00B3               	movwf	Lcd_Disp_Bin@x
  3122  07B0  1703               	bsf	3,6	;RP1=1, select bank2
  3123  07B1  085F               	movf	main@i^(0+256),w
  3124  07B2  1683               	bsf	3,5	;RP0=1, select bank3
  3125  07B3  00E6               	movwf	(??_main+1)^(0+384)
  3126  07B4  0008               	return
  3127  07B5                     __end_ofPL6:	
  3128  07B5                     PL10:	
  3129  07B5  1003               	clrc
  3130  07B6  0DE5               	rlf	??_main^(0+384),f
  3131  07B7  0765               	addwf	??_main^(0+384),w
  3132  07B8  00E6               	movwf	(??_main+1)^(0+384)
  3133  07B9  1283               	bcf	3,5	;RP0=0, select bank2
  3134  07BA  0860               	movf	main@l^(0+256),w
  3135  07BB  1683               	bsf	3,5	;RP0=1, select bank3
  3136  07BC  0766               	addwf	(??_main+1)^(0+384),w
  3137  07BD  00E7               	movwf	(??_main+2)^(0+384)
  3138  07BE  0084               	movwf	4
  3139  07BF  0008               	return
  3140  07C0                     __end_ofPL10:	
  3141  07C0                     PL12:	
  3142  07C0  1003               	clrc
  3143  07C1  0DE6               	rlf	(??_main+1)^(0+384),f
  3144  07C2  0766               	addwf	(??_main+1)^(0+384),w
  3145  07C3  00E7               	movwf	(??_main+2)^(0+384)
  3146  07C4  1283               	bcf	3,5	;RP0=0, select bank2
  3147  07C5  0860               	movf	main@l^(0+256),w
  3148  07C6  1683               	bsf	3,5	;RP0=1, select bank3
  3149  07C7  0767               	addwf	(??_main+2)^(0+384),w
  3150  07C8  00E8               	movwf	(??_main+3)^(0+384)
  3151  07C9  0084               	movwf	4
  3152  07CA  0008               	return
  3153  07CB                     __end_ofPL12:	
  3154  07CB                     PL14:	
  3155  07CB  1303               	bcf	3,6	;RP1=0, select bank0
  3156  07CC  00B4               	movwf	WriteLongInt@Val
  3157  07CD  3002               	movlw	2
  3158  07CE  01B5               	clrf	WriteLongInt@Val+1
  3159  07CF  01B6               	clrf	WriteLongInt@Val+2
  3160  07D0  01B7               	clrf	WriteLongInt@Val+3
  3161  07D1  00B8               	movwf	WriteLongInt@size
  3162  07D2  01B9               	clrf	WriteLongInt@Sign
  3163  07D3  0008               	return
  3164  07D4                     __end_ofPL14:	
  3165  07D4                     PL18:	
  3166  07D4  1003               	clrc
  3167  07D5  0D6A               	rlf	_CYCLE_TYPE^(0+256),w	;volatile
  3168  07D6  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  3169  07D7  0084               	movwf	4
  3170  07D8  0800               	movf	0,w
  3171  07D9  1683               	bsf	3,5	;RP0=1, select bank3
  3172  07DA  00E5               	movwf	??_main^(0+384)
  3173  07DB  0A84               	incf	4,f
  3174  07DC  0800               	movf	0,w
  3175  07DD  00E6               	movwf	(??_main^(0+384)+1)
  3176  07DE  0865               	movf	??_main^(0+384),w
  3177  07DF  0008               	return
  3178  07E0                     __end_ofPL18:	
  3179  07E0                     PL42:	
  3180  07E0  0800               	movf	0,w
  3181  07E1  00E8               	movwf	(??_main+3)^(0+384)
  3182  07E2  1283               	bcf	3,5	;RP0=0, select bank2
  3183  07E3  0860               	movf	main@l^(0+256),w
  3184  07E4  3E56               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  3185  07E5  0084               	movwf	4
  3186  07E6  0008               	return
  3187  07E7                     __end_ofPL42:	
  3188                           
  3189                           	psect	text1
  3190  16AE                     __ptext1:	
  3191 ;; *************** function ___lbdiv *****************
  3192 ;; Defined at:
  3193 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  dividend        1    wreg     unsigned char 
  3196 ;;  divisor         1    0[COMMON] unsigned char 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  dividend        1    1[COMMON] unsigned char 
  3199 ;;  quotient        1    3[COMMON] unsigned char 
  3200 ;;  counter         1    2[COMMON] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      unsigned char 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0
  3205 ;; Tracked objects:
  3206 ;;		On entry : B00/A00
  3207 ;;		On exit  : B00/A00
  3208 ;;		Unchanged: B00/0
  3209 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3210 ;;      Params:         1       0       0       0       0       0
  3211 ;;      Locals:         3       0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0
  3213 ;;      Totals:         4       0       0       0       0       0
  3214 ;;Total ram usage:        4 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           
  3224                           ;psect for function ___lbdiv
  3225  16AE                     ___lbdiv:	
  3226                           
  3227                           ;incstack = 0
  3228                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  3229                           ;___lbdiv@dividend stored from wreg
  3230  16AE  00F1               	movwf	___lbdiv@dividend
  3231  16AF  01F3               	clrf	___lbdiv@quotient
  3232  16B0  0870               	movf	___lbdiv@divisor,w
  3233  16B1  1903               	btfsc	3,2
  3234  16B2  2EC7               	goto	l3431
  3235  16B3  01F2               	clrf	___lbdiv@counter
  3236  16B4                     l3417:	
  3237  16B4  0AF2               	incf	___lbdiv@counter,f
  3238  16B5  1BF0               	btfsc	___lbdiv@divisor,7
  3239  16B6  2EBA               	goto	l1055
  3240  16B7  1003               	clrc
  3241  16B8  0DF0               	rlf	___lbdiv@divisor,f
  3242  16B9  2EB4               	goto	l3417
  3243  16BA                     l1055:	
  3244  16BA  1003               	clrc
  3245  16BB  0DF3               	rlf	___lbdiv@quotient,f
  3246  16BC  0870               	movf	___lbdiv@divisor,w
  3247  16BD  0271               	subwf	___lbdiv@dividend,w
  3248  16BE  1C03               	skipc
  3249  16BF  2EC4               	goto	L6
  3250  16C0  0870               	movf	___lbdiv@divisor,w
  3251  16C1  02F1               	subwf	___lbdiv@dividend,f
  3252  16C2  1473               	bsf	___lbdiv@quotient,0
  3253  16C3  1003               	clrc
  3254  16C4                     L6:	
  3255  16C4  0CF0               	rrf	___lbdiv@divisor,f
  3256  16C5  0BF2               	decfsz	___lbdiv@counter,f
  3257  16C6  2EBA               	goto	l1055
  3258  16C7                     l3431:	
  3259  16C7  0873               	movf	___lbdiv@quotient,w
  3260  16C8  0008               	return
  3261  16C9                     __end_of___lbdiv:	
  3262                           
  3263                           	psect	text2
  3264  16EB                     __ptext2:	
  3265 ;; *************** function ___almod *****************
  3266 ;; Defined at:
  3267 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\almod.c"
  3268 ;; Parameters:    Size  Location     Type
  3269 ;;  divisor         4    0[COMMON] long 
  3270 ;;  dividend        4    4[COMMON] long 
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  sign            1    9[COMMON] unsigned char 
  3273 ;;  counter         1    8[COMMON] unsigned char 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  4    0[COMMON] long 
  3276 ;; Registers used:
  3277 ;;		wreg, status,2, status,0
  3278 ;; Tracked objects:
  3279 ;;		On entry : 300/200
  3280 ;;		On exit  : 300/200
  3281 ;;		Unchanged: 300/0
  3282 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3283 ;;      Params:         8       0       0       0       0       0
  3284 ;;      Locals:         2       0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0
  3286 ;;      Totals:        10       0       0       0       0       0
  3287 ;;Total ram usage:       10 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function ___almod
  3298  16EB                     ___almod:	
  3299                           
  3300                           ;incstack = 0
  3301                           ; Regs used in ___almod: [wreg+status,2+status,0]
  3302  16EB  01F9               	clrf	___almod@sign
  3303  16EC  1FF7               	btfss	___almod@dividend+3,7
  3304  16ED  2EFB               	goto	l861
  3305  16EE  09F4               	comf	___almod@dividend,f
  3306  16EF  09F5               	comf	___almod@dividend+1,f
  3307  16F0  09F6               	comf	___almod@dividend+2,f
  3308  16F1  09F7               	comf	___almod@dividend+3,f
  3309  16F2  0AF4               	incf	___almod@dividend,f
  3310  16F3  1903               	skipnz
  3311  16F4  0AF5               	incf	___almod@dividend+1,f
  3312  16F5  1903               	skipnz
  3313  16F6  0AF6               	incf	___almod@dividend+2,f
  3314  16F7  1903               	skipnz
  3315  16F8  0AF7               	incf	___almod@dividend+3,f
  3316  16F9  01F9               	clrf	___almod@sign
  3317  16FA  0AF9               	incf	___almod@sign,f
  3318  16FB                     l861:	
  3319  16FB  1FF3               	btfss	___almod@divisor+3,7
  3320  16FC  2F08               	goto	l3387
  3321  16FD  09F0               	comf	___almod@divisor,f
  3322  16FE  09F1               	comf	___almod@divisor+1,f
  3323  16FF  09F2               	comf	___almod@divisor+2,f
  3324  1700  09F3               	comf	___almod@divisor+3,f
  3325  1701  0AF0               	incf	___almod@divisor,f
  3326  1702  1903               	skipnz
  3327  1703  0AF1               	incf	___almod@divisor+1,f
  3328  1704  1903               	skipnz
  3329  1705  0AF2               	incf	___almod@divisor+2,f
  3330  1706  1903               	skipnz
  3331  1707  0AF3               	incf	___almod@divisor+3,f
  3332  1708                     l3387:	
  3333  1708  0873               	movf	___almod@divisor+3,w
  3334  1709  0472               	iorwf	___almod@divisor+2,w
  3335  170A  0471               	iorwf	___almod@divisor+1,w
  3336  170B  0470               	iorwf	___almod@divisor,w
  3337  170C  1903               	skipnz
  3338  170D  2F3D               	goto	l3403
  3339  170E  01F8               	clrf	___almod@counter
  3340  170F                     L7:	
  3341  170F  0AF8               	incf	___almod@counter,f
  3342  1710  1BF3               	btfsc	___almod@divisor+3,7
  3343  1711  2F18               	goto	l3395
  3344  1712  1003               	clrc
  3345  1713  0DF0               	rlf	___almod@divisor,f
  3346  1714  0DF1               	rlf	___almod@divisor+1,f
  3347  1715  0DF2               	rlf	___almod@divisor+2,f
  3348  1716  0DF3               	rlf	___almod@divisor+3,f
  3349  1717  2F0F               	goto	L7
  3350  1718                     l3395:	
  3351  1718  0873               	movf	___almod@divisor+3,w
  3352  1719  0277               	subwf	___almod@dividend+3,w
  3353  171A  1D03               	skipz
  3354  171B  2F26               	goto	u4045
  3355  171C  0872               	movf	___almod@divisor+2,w
  3356  171D  0276               	subwf	___almod@dividend+2,w
  3357  171E  1D03               	skipz
  3358  171F  2F26               	goto	u4045
  3359  1720  0871               	movf	___almod@divisor+1,w
  3360  1721  0275               	subwf	___almod@dividend+1,w
  3361  1722  1D03               	skipz
  3362  1723  2F26               	goto	u4045
  3363  1724  0870               	movf	___almod@divisor,w
  3364  1725  0274               	subwf	___almod@dividend,w
  3365  1726                     u4045:	
  3366  1726  1C03               	skipc
  3367  1727  2F37               	goto	L8
  3368  1728  0870               	movf	___almod@divisor,w
  3369  1729  02F4               	subwf	___almod@dividend,f
  3370  172A  0871               	movf	___almod@divisor+1,w
  3371  172B  1C03               	skipc
  3372  172C  0F71               	incfsz	___almod@divisor+1,w
  3373  172D  02F5               	subwf	___almod@dividend+1,f
  3374  172E  0872               	movf	___almod@divisor+2,w
  3375  172F  1C03               	skipc
  3376  1730  0F72               	incfsz	___almod@divisor+2,w
  3377  1731  02F6               	subwf	___almod@dividend+2,f
  3378  1732  0873               	movf	___almod@divisor+3,w
  3379  1733  1C03               	skipc
  3380  1734  0F73               	incfsz	___almod@divisor+3,w
  3381  1735  02F7               	subwf	___almod@dividend+3,f
  3382  1736  1003               	clrc
  3383  1737                     L8:	
  3384  1737  0CF3               	rrf	___almod@divisor+3,f
  3385  1738  0CF2               	rrf	___almod@divisor+2,f
  3386  1739  0CF1               	rrf	___almod@divisor+1,f
  3387  173A  0CF0               	rrf	___almod@divisor,f
  3388  173B  0BF8               	decfsz	___almod@counter,f
  3389  173C  2F18               	goto	l3395
  3390  173D                     l3403:	
  3391  173D  0879               	movf	___almod@sign,w
  3392  173E  1903               	btfsc	3,2
  3393  173F  2F4B               	goto	l3407
  3394  1740  09F4               	comf	___almod@dividend,f
  3395  1741  09F5               	comf	___almod@dividend+1,f
  3396  1742  09F6               	comf	___almod@dividend+2,f
  3397  1743  09F7               	comf	___almod@dividend+3,f
  3398  1744  0AF4               	incf	___almod@dividend,f
  3399  1745  1903               	skipnz
  3400  1746  0AF5               	incf	___almod@dividend+1,f
  3401  1747  1903               	skipnz
  3402  1748  0AF6               	incf	___almod@dividend+2,f
  3403  1749  1903               	skipnz
  3404  174A  0AF7               	incf	___almod@dividend+3,f
  3405  174B                     l3407:	
  3406  174B  0877               	movf	___almod@dividend+3,w
  3407  174C  00F3               	movwf	?___almod+3
  3408  174D  0876               	movf	___almod@dividend+2,w
  3409  174E  00F2               	movwf	?___almod+2
  3410  174F  0875               	movf	___almod@dividend+1,w
  3411  1750  00F1               	movwf	?___almod+1
  3412  1751  0874               	movf	___almod@dividend,w
  3413  1752  00F0               	movwf	?___almod
  3414  1753  0008               	return
  3415  1754                     __end_of___almod:	
  3416                           
  3417                           	psect	text3
  3418  0833                     __ptext3:	
  3419 ;; *************** function _WriteLongInt *****************
  3420 ;; Defined at:
  3421 ;;		line 183 in file "libs/HD44780.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;  y               1    wreg     unsigned char 
  3424 ;;  x               1    7[BANK0 ] unsigned char 
  3425 ;;  Val             4    8[BANK0 ] long 
  3426 ;;  size            1   12[BANK0 ] char 
  3427 ;;  Sign            1   13[BANK0 ] unsigned char 
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;  y               1   16[BANK0 ] unsigned char 
  3430 ;;  POS             1   15[BANK0 ] char 
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3435 ;; Tracked objects:
  3436 ;;		On entry : 300/800
  3437 ;;		On exit  : 300/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3440 ;;      Params:         0       7       0       0       0       0
  3441 ;;      Locals:         0       2       0       0       0       0
  3442 ;;      Temps:          0       1       0       0       0       0
  3443 ;;      Totals:         0      10       0       0       0       0
  3444 ;;Total ram usage:       10 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    3
  3447 ;; This function calls:
  3448 ;;		_Lcd_WriteChar
  3449 ;;		___aldiv
  3450 ;;		___bmul
  3451 ;;		___lmul
  3452 ;; This function is called by:
  3453 ;;		_main
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           
  3458                           ;psect for function _WriteLongInt
  3459  0833                     _WriteLongInt:	
  3460                           
  3461                           ;incstack = 0
  3462                           ; Regs used in _WriteLongInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3463                           ;WriteLongInt@y stored from wreg
  3464  0833  00BC               	movwf	WriteLongInt@y
  3465                           
  3466                           ;HD44780.c: 184: int8_t POS = 0;
  3467  0834  01BB               	clrf	WriteLongInt@POS
  3468                           
  3469                           ;HD44780.c: 185: if (Sign) {
  3470  0835  0839               	movf	WriteLongInt@Sign,w
  3471  0836  1903               	btfsc	3,2
  3472  0837  2865               	goto	l3197
  3473                           
  3474                           ;HD44780.c: 186: POS++;
  3475  0838  0ABB               	incf	WriteLongInt@POS,f
  3476                           
  3477                           ;HD44780.c: 187: if (Val<0) {
  3478  0839  1FB7               	btfss	WriteLongInt@Val+3,7
  3479  083A  285D               	goto	l3189
  3480                           
  3481                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  3482  083B  0833               	movf	WriteLongInt@x,w
  3483  083C  00AF               	movwf	Lcd_WriteChar@x
  3484  083D  302D               	movlw	45
  3485  083E  00B0               	movwf	Lcd_WriteChar@c
  3486  083F  083C               	movf	WriteLongInt@y,w
  3487  0840  209F               	fcall	_Lcd_WriteChar
  3488                           
  3489                           ;HD44780.c: 189: Val=-1*Val;
  3490  0841  30FF               	movlw	255
  3491  0842  00F0               	movwf	___lmul@multiplier
  3492  0843  00F1               	movwf	___lmul@multiplier+1
  3493  0844  00F2               	movwf	___lmul@multiplier+2
  3494  0845  00F3               	movwf	___lmul@multiplier+3
  3495  0846  1283               	bcf	3,5	;RP0=0, select bank0
  3496  0847  1303               	bcf	3,6	;RP1=0, select bank0
  3497  0848  0837               	movf	WriteLongInt@Val+3,w
  3498  0849  00F7               	movwf	___lmul@multiplicand+3
  3499  084A  0836               	movf	WriteLongInt@Val+2,w
  3500  084B  00F6               	movwf	___lmul@multiplicand+2
  3501  084C  0835               	movf	WriteLongInt@Val+1,w
  3502  084D  00F5               	movwf	___lmul@multiplicand+1
  3503  084E  0834               	movf	WriteLongInt@Val,w
  3504  084F  00F4               	movwf	___lmul@multiplicand
  3505  0850  120A  118A  22E7  120A  158A  	fcall	___lmul
  3506  0855  0873               	movf	?___lmul+3,w
  3507  0856  00B7               	movwf	WriteLongInt@Val+3
  3508  0857  0872               	movf	?___lmul+2,w
  3509  0858  00B6               	movwf	WriteLongInt@Val+2
  3510  0859  0871               	movf	?___lmul+1,w
  3511  085A  00B5               	movwf	WriteLongInt@Val+1
  3512  085B  0870               	movf	?___lmul,w
  3513  085C  289D               	goto	L9
  3514  085D                     l3189:	
  3515                           ;HD44780.c: 190: } else
  3516                           
  3517                           
  3518                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  3519  085D  0833               	movf	WriteLongInt@x,w
  3520  085E  00AF               	movwf	Lcd_WriteChar@x
  3521  085F  302B               	movlw	43
  3522  0860  00B0               	movwf	Lcd_WriteChar@c
  3523  0861  083C               	movf	WriteLongInt@y,w
  3524  0862  209F  120A  158A   	fcall	_Lcd_WriteChar
  3525  0865                     l3197:	
  3526  0865  1283               	bcf	3,5	;RP0=0, select bank0
  3527  0866  1303               	bcf	3,6	;RP1=0, select bank0
  3528  0867  0838               	movf	WriteLongInt@size,w
  3529  0868  1903               	btfsc	3,2
  3530  0869  0008               	return
  3531                           
  3532                           ;HD44780.c: 194: size--;
  3533  086A  03B8               	decf	WriteLongInt@size,f
  3534                           
  3535                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  3536  086B  083B               	movf	WriteLongInt@POS,w
  3537  086C  0738               	addwf	WriteLongInt@size,w
  3538  086D  00BA               	movwf	??_WriteLongInt
  3539  086E  0833               	movf	WriteLongInt@x,w
  3540  086F  073A               	addwf	??_WriteLongInt,w
  3541  0870  00AF               	movwf	Lcd_WriteChar@x
  3542  0871  30F6               	movlw	246
  3543  0872  00AC               	movwf	___bmul@multiplicand
  3544  0873  23F5  120A  158A   	fcall	PL30	;call to abstracted procedure
  3545  0876  300A               	movlw	10
  3546  0877  00F0               	movwf	___aldiv@divisor
  3547  0878  01F1               	clrf	___aldiv@divisor+1
  3548  0879  01F2               	clrf	___aldiv@divisor+2
  3549  087A  01F3               	clrf	___aldiv@divisor+3
  3550  087B  20C4  120A  158A   	fcall	___aldiv
  3551  087E  0870               	movf	?___aldiv,w
  3552  087F  23C9  120A  158A   	fcall	___bmul
  3553  0882  0734               	addwf	WriteLongInt@Val,w
  3554  0883  3E30               	addlw	48
  3555  0884  00B0               	movwf	Lcd_WriteChar@c
  3556  0885  083C               	movf	WriteLongInt@y,w
  3557  0886  209F  120A  158A   	fcall	_Lcd_WriteChar
  3558                           
  3559                           ;HD44780.c: 196: Val = Val/10;
  3560  0889  300A               	movlw	10
  3561  088A  00F0               	movwf	___aldiv@divisor
  3562  088B  01F1               	clrf	___aldiv@divisor+1
  3563  088C  01F2               	clrf	___aldiv@divisor+2
  3564  088D  01F3               	clrf	___aldiv@divisor+3
  3565  088E  1283               	bcf	3,5	;RP0=0, select bank0
  3566  088F  1303               	bcf	3,6	;RP1=0, select bank0
  3567  0890  23F5  120A  158A   	fcall	PL30	;call to abstracted procedure
  3568  0893  20C4  120A  158A   	fcall	___aldiv
  3569  0896  0873               	movf	?___aldiv+3,w
  3570  0897  00B7               	movwf	WriteLongInt@Val+3
  3571  0898  0872               	movf	?___aldiv+2,w
  3572  0899  00B6               	movwf	WriteLongInt@Val+2
  3573  089A  0871               	movf	?___aldiv+1,w
  3574  089B  00B5               	movwf	WriteLongInt@Val+1
  3575  089C  0870               	movf	?___aldiv,w
  3576  089D                     L9:	
  3577  089D  00B4               	movwf	WriteLongInt@Val
  3578  089E  2865               	goto	l3197
  3579  089F                     __end_of_WriteLongInt:	
  3580  089F                     __ptext37:	
  3581 ;; *************** function _Lcd_WriteChar *****************
  3582 ;; Defined at:
  3583 ;;		line 99 in file "libs/HD44780.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  y               1    wreg     unsigned char 
  3586 ;;  x               1    3[BANK0 ] unsigned char 
  3587 ;;  c               1    4[BANK0 ] unsigned char 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  y               1    5[BANK0 ] unsigned char 
  3590 ;;  data            1    6[BANK0 ] unsigned char 
  3591 ;; Return value:  Size  Location     Type
  3592 ;;                  1    wreg      void 
  3593 ;; Registers used:
  3594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 300/800
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3600 ;;      Params:         0       2       0       0       0       0
  3601 ;;      Locals:         0       2       0       0       0       0
  3602 ;;      Temps:          0       0       0       0       0       0
  3603 ;;      Totals:         0       4       0       0       0       0
  3604 ;;Total ram usage:        4 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    2
  3607 ;; This function calls:
  3608 ;;		_Lcd_CharCP
  3609 ;;		_Lcd_Command
  3610 ;; This function is called by:
  3611 ;;		_WriteLongInt
  3612 ;;		_Lcd_Disp_Bin
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _Lcd_WriteChar
  3618  089F                     _Lcd_WriteChar:	
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3622                           ;Lcd_WriteChar@y stored from wreg
  3623  089F  00B1               	movwf	Lcd_WriteChar@y
  3624                           
  3625                           ;HD44780.c: 100: unsigned char data;
  3626                           ;HD44780.c: 101: switch(y) {
  3627  08A0  28AE               	goto	l2751
  3628  08A1                     l2741:	
  3629  08A1  082F               	movf	Lcd_WriteChar@x,w
  3630  08A2  3E7F               	addlw	127
  3631  08A3  28AC               	goto	L21
  3632  08A4                     l2743:	
  3633  08A4  082F               	movf	Lcd_WriteChar@x,w
  3634  08A5  3EBF               	addlw	191
  3635  08A6  28AC               	goto	L21
  3636  08A7                     l2745:	
  3637  08A7  082F               	movf	Lcd_WriteChar@x,w
  3638  08A8  3E93               	addlw	147
  3639  08A9  28AC               	goto	L21
  3640  08AA                     l2747:	
  3641  08AA  082F               	movf	Lcd_WriteChar@x,w
  3642  08AB  3ED3               	addlw	211
  3643  08AC                     L21:	
  3644  08AC  00B2               	movwf	Lcd_WriteChar@data
  3645  08AD  28BC               	goto	l2753
  3646  08AE                     l2751:	
  3647  08AE  0831               	movf	Lcd_WriteChar@y,w
  3648                           
  3649                           ; Switch size 1, requested type "space"
  3650                           ; Number of cases is 4, Range of values is 1 to 4
  3651                           ; switch strategies available:
  3652                           ; Name         Instructions Cycles
  3653                           ; simple_byte           13     7 (average)
  3654                           ; direct_byte           23    11 (fixed)
  3655                           ; jumptable            263     9 (fixed)
  3656                           ;	Chosen strategy is simple_byte
  3657  08AF  3A01               	xorlw	1	; case 1
  3658  08B0  1903               	skipnz
  3659  08B1  28A1               	goto	l2741
  3660  08B2  3A03               	xorlw	3	; case 2
  3661  08B3  1903               	skipnz
  3662  08B4  28A4               	goto	l2743
  3663  08B5  3A01               	xorlw	1	; case 3
  3664  08B6  1903               	skipnz
  3665  08B7  28A7               	goto	l2745
  3666  08B8  3A07               	xorlw	7	; case 4
  3667  08B9  1903               	skipnz
  3668  08BA  28AA               	goto	l2747
  3669  08BB  28BC               	goto	l2753
  3670  08BC                     l2753:	
  3671                           
  3672                           ;HD44780.c: 108: Lcd_Command(data);
  3673  08BC  0832               	movf	Lcd_WriteChar@data,w
  3674  08BD  2262  120A  158A   	fcall	_Lcd_Command
  3675                           
  3676                           ;HD44780.c: 109: Lcd_CharCP(c);
  3677  08C0  1283               	bcf	3,5	;RP0=0, select bank0
  3678  08C1  1303               	bcf	3,6	;RP1=0, select bank0
  3679  08C2  0830               	movf	Lcd_WriteChar@c,w
  3680  08C3  296E               	ljmp	_Lcd_CharCP
  3681  08C4                     __end_of_Lcd_WriteChar:	
  3682  08C4                     __ptext4:	
  3683 ;; *************** function ___aldiv *****************
  3684 ;; Defined at:
  3685 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  divisor         4    0[COMMON] long 
  3688 ;;  dividend        4    4[COMMON] long 
  3689 ;; Auto vars:     Size  Location     Type
  3690 ;;  quotient        4   10[COMMON] long 
  3691 ;;  sign            1    9[COMMON] unsigned char 
  3692 ;;  counter         1    8[COMMON] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  4    0[COMMON] long 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0
  3697 ;; Tracked objects:
  3698 ;;		On entry : 300/800
  3699 ;;		On exit  : 300/0
  3700 ;;		Unchanged: 300/0
  3701 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3702 ;;      Params:         8       0       0       0       0       0
  3703 ;;      Locals:         6       0       0       0       0       0
  3704 ;;      Temps:          0       0       0       0       0       0
  3705 ;;      Totals:        14       0       0       0       0       0
  3706 ;;Total ram usage:       14 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; This function calls:
  3709 ;;		Nothing
  3710 ;; This function is called by:
  3711 ;;		_WriteLongInt
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           
  3716                           ;psect for function ___aldiv
  3717  08C4                     ___aldiv:	
  3718                           
  3719                           ;incstack = 0
  3720                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3721  08C4  01F9               	clrf	___aldiv@sign
  3722  08C5  1FF3               	btfss	___aldiv@divisor+3,7
  3723  08C6  28D4               	goto	l848
  3724  08C7  09F0               	comf	___aldiv@divisor,f
  3725  08C8  09F1               	comf	___aldiv@divisor+1,f
  3726  08C9  09F2               	comf	___aldiv@divisor+2,f
  3727  08CA  09F3               	comf	___aldiv@divisor+3,f
  3728  08CB  0AF0               	incf	___aldiv@divisor,f
  3729  08CC  1903               	skipnz
  3730  08CD  0AF1               	incf	___aldiv@divisor+1,f
  3731  08CE  1903               	skipnz
  3732  08CF  0AF2               	incf	___aldiv@divisor+2,f
  3733  08D0  1903               	skipnz
  3734  08D1  0AF3               	incf	___aldiv@divisor+3,f
  3735  08D2  01F9               	clrf	___aldiv@sign
  3736  08D3  0AF9               	incf	___aldiv@sign,f
  3737  08D4                     l848:	
  3738  08D4  1FF7               	btfss	___aldiv@dividend+3,7
  3739  08D5  28E3               	goto	l2917
  3740  08D6  09F4               	comf	___aldiv@dividend,f
  3741  08D7  09F5               	comf	___aldiv@dividend+1,f
  3742  08D8  09F6               	comf	___aldiv@dividend+2,f
  3743  08D9  09F7               	comf	___aldiv@dividend+3,f
  3744  08DA  0AF4               	incf	___aldiv@dividend,f
  3745  08DB  1903               	skipnz
  3746  08DC  0AF5               	incf	___aldiv@dividend+1,f
  3747  08DD  1903               	skipnz
  3748  08DE  0AF6               	incf	___aldiv@dividend+2,f
  3749  08DF  1903               	skipnz
  3750  08E0  0AF7               	incf	___aldiv@dividend+3,f
  3751  08E1  3001               	movlw	1
  3752  08E2  06F9               	xorwf	___aldiv@sign,f
  3753  08E3                     l2917:	
  3754  08E3  01FA               	clrf	___aldiv@quotient
  3755  08E4  01FB               	clrf	___aldiv@quotient+1
  3756  08E5  01FC               	clrf	___aldiv@quotient+2
  3757  08E6  01FD               	clrf	___aldiv@quotient+3
  3758  08E7  0873               	movf	___aldiv@divisor+3,w
  3759  08E8  0472               	iorwf	___aldiv@divisor+2,w
  3760  08E9  0471               	iorwf	___aldiv@divisor+1,w
  3761  08EA  0470               	iorwf	___aldiv@divisor,w
  3762  08EB  1903               	skipnz
  3763  08EC  2922               	goto	l2939
  3764  08ED  01F8               	clrf	___aldiv@counter
  3765  08EE                     L10:	
  3766  08EE  0AF8               	incf	___aldiv@counter,f
  3767  08EF  1BF3               	btfsc	___aldiv@divisor+3,7
  3768  08F0  28F7               	goto	l2927
  3769  08F1  1003               	clrc
  3770  08F2  0DF0               	rlf	___aldiv@divisor,f
  3771  08F3  0DF1               	rlf	___aldiv@divisor+1,f
  3772  08F4  0DF2               	rlf	___aldiv@divisor+2,f
  3773  08F5  0DF3               	rlf	___aldiv@divisor+3,f
  3774  08F6  28EE               	goto	L10
  3775  08F7                     l2927:	
  3776  08F7  1003               	clrc
  3777  08F8  0DFA               	rlf	___aldiv@quotient,f
  3778  08F9  0DFB               	rlf	___aldiv@quotient+1,f
  3779  08FA  0DFC               	rlf	___aldiv@quotient+2,f
  3780  08FB  0DFD               	rlf	___aldiv@quotient+3,f
  3781  08FC  0873               	movf	___aldiv@divisor+3,w
  3782  08FD  0277               	subwf	___aldiv@dividend+3,w
  3783  08FE  1D03               	skipz
  3784  08FF  290A               	goto	u3455
  3785  0900  0872               	movf	___aldiv@divisor+2,w
  3786  0901  0276               	subwf	___aldiv@dividend+2,w
  3787  0902  1D03               	skipz
  3788  0903  290A               	goto	u3455
  3789  0904  0871               	movf	___aldiv@divisor+1,w
  3790  0905  0275               	subwf	___aldiv@dividend+1,w
  3791  0906  1D03               	skipz
  3792  0907  290A               	goto	u3455
  3793  0908  0870               	movf	___aldiv@divisor,w
  3794  0909  0274               	subwf	___aldiv@dividend,w
  3795  090A                     u3455:	
  3796  090A  1C03               	skipc
  3797  090B  291C               	goto	L11
  3798  090C  0870               	movf	___aldiv@divisor,w
  3799  090D  02F4               	subwf	___aldiv@dividend,f
  3800  090E  0871               	movf	___aldiv@divisor+1,w
  3801  090F  1C03               	skipc
  3802  0910  0F71               	incfsz	___aldiv@divisor+1,w
  3803  0911  02F5               	subwf	___aldiv@dividend+1,f
  3804  0912  0872               	movf	___aldiv@divisor+2,w
  3805  0913  1C03               	skipc
  3806  0914  0F72               	incfsz	___aldiv@divisor+2,w
  3807  0915  02F6               	subwf	___aldiv@dividend+2,f
  3808  0916  0873               	movf	___aldiv@divisor+3,w
  3809  0917  1C03               	skipc
  3810  0918  0F73               	incfsz	___aldiv@divisor+3,w
  3811  0919  02F7               	subwf	___aldiv@dividend+3,f
  3812  091A  147A               	bsf	___aldiv@quotient,0
  3813  091B  1003               	clrc
  3814  091C                     L11:	
  3815  091C  0CF3               	rrf	___aldiv@divisor+3,f
  3816  091D  0CF2               	rrf	___aldiv@divisor+2,f
  3817  091E  0CF1               	rrf	___aldiv@divisor+1,f
  3818  091F  0CF0               	rrf	___aldiv@divisor,f
  3819  0920  0BF8               	decfsz	___aldiv@counter,f
  3820  0921  28F7               	goto	l2927
  3821  0922                     l2939:	
  3822  0922  0879               	movf	___aldiv@sign,w
  3823  0923  1903               	btfsc	3,2
  3824  0924  2930               	goto	l2943
  3825  0925  09FA               	comf	___aldiv@quotient,f
  3826  0926  09FB               	comf	___aldiv@quotient+1,f
  3827  0927  09FC               	comf	___aldiv@quotient+2,f
  3828  0928  09FD               	comf	___aldiv@quotient+3,f
  3829  0929  0AFA               	incf	___aldiv@quotient,f
  3830  092A  1903               	skipnz
  3831  092B  0AFB               	incf	___aldiv@quotient+1,f
  3832  092C  1903               	skipnz
  3833  092D  0AFC               	incf	___aldiv@quotient+2,f
  3834  092E  1903               	skipnz
  3835  092F  0AFD               	incf	___aldiv@quotient+3,f
  3836  0930                     l2943:	
  3837  0930  087D               	movf	___aldiv@quotient+3,w
  3838  0931  00F3               	movwf	?___aldiv+3
  3839  0932  087C               	movf	___aldiv@quotient+2,w
  3840  0933  00F2               	movwf	?___aldiv+2
  3841  0934  087B               	movf	___aldiv@quotient+1,w
  3842  0935  00F1               	movwf	?___aldiv+1
  3843  0936  087A               	movf	___aldiv@quotient,w
  3844  0937  00F0               	movwf	?___aldiv
  3845  0938  0008               	return
  3846  0939                     __end_of___aldiv:	
  3847  0939                     __ptext33:	
  3848 ;; *************** function _Lcd_Text *****************
  3849 ;; Defined at:
  3850 ;;		line 76 in file "libs/HD44780.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;  y               1    wreg     unsigned char 
  3853 ;;  x               1    2[COMMON] unsigned char 
  3854 ;;  buffer          1    3[COMMON] PTR unsigned char 
  3855 ;;		 -> STR_2(17), STR_1(8), 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  y               1    4[COMMON] unsigned char 
  3858 ;;  data            1    5[COMMON] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/900
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3868 ;;      Params:         2       0       0       0       0       0
  3869 ;;      Locals:         2       0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0
  3871 ;;      Totals:         4       0       0       0       0       0
  3872 ;;Total ram usage:        4 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    2
  3875 ;; This function calls:
  3876 ;;		_Lcd_CharCP
  3877 ;;		_Lcd_Command
  3878 ;; This function is called by:
  3879 ;;		_main
  3880 ;; This function uses a non-reentrant model
  3881 ;;
  3882                           
  3883                           
  3884                           ;psect for function _Lcd_Text
  3885  0939                     _Lcd_Text:	
  3886                           
  3887                           ;incstack = 0
  3888                           ; Regs used in _Lcd_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3889                           ;Lcd_Text@y stored from wreg
  3890  0939  00F4               	movwf	Lcd_Text@y
  3891                           
  3892                           ;HD44780.c: 77: unsigned char data;
  3893                           ;HD44780.c: 78: switch(y){
  3894  093A  2948               	goto	l3167
  3895  093B                     l3157:	
  3896  093B  0872               	movf	Lcd_Text@x,w
  3897  093C  3E7F               	addlw	127
  3898  093D  2946               	goto	L18
  3899  093E                     l3159:	
  3900  093E  0872               	movf	Lcd_Text@x,w
  3901  093F  3EBF               	addlw	191
  3902  0940  2946               	goto	L18
  3903  0941                     l3161:	
  3904  0941  0872               	movf	Lcd_Text@x,w
  3905  0942  3E93               	addlw	147
  3906  0943  2946               	goto	L18
  3907  0944                     l3163:	
  3908  0944  0872               	movf	Lcd_Text@x,w
  3909  0945  3ED3               	addlw	211
  3910  0946                     L18:	
  3911  0946  00F5               	movwf	Lcd_Text@data
  3912  0947  2956               	goto	l3169
  3913  0948                     l3167:	
  3914  0948  0874               	movf	Lcd_Text@y,w
  3915                           
  3916                           ; Switch size 1, requested type "space"
  3917                           ; Number of cases is 4, Range of values is 1 to 4
  3918                           ; switch strategies available:
  3919                           ; Name         Instructions Cycles
  3920                           ; simple_byte           13     7 (average)
  3921                           ; direct_byte           23    11 (fixed)
  3922                           ; jumptable            263     9 (fixed)
  3923                           ;	Chosen strategy is simple_byte
  3924  0949  3A01               	xorlw	1	; case 1
  3925  094A  1903               	skipnz
  3926  094B  293B               	goto	l3157
  3927  094C  3A03               	xorlw	3	; case 2
  3928  094D  1903               	skipnz
  3929  094E  293E               	goto	l3159
  3930  094F  3A01               	xorlw	1	; case 3
  3931  0950  1903               	skipnz
  3932  0951  2941               	goto	l3161
  3933  0952  3A07               	xorlw	7	; case 4
  3934  0953  1903               	skipnz
  3935  0954  2944               	goto	l3163
  3936  0955  2956               	goto	l3169
  3937  0956                     l3169:	
  3938                           
  3939                           ;HD44780.c: 84: Lcd_Command(data);
  3940  0956  0875               	movf	Lcd_Text@data,w
  3941  0957  2262               	fcall	_Lcd_Command
  3942  0958                     l3175:	
  3943                           ;HD44780.c: 85: while(*buffer)
  3944                           
  3945  0958  0873               	movf	Lcd_Text@buffer,w
  3946  0959  0084               	movwf	4
  3947  095A  120A  158A  2000  120A  158A  	fcall	stringdir
  3948  095F  3A00               	xorlw	0
  3949  0960  1903               	btfsc	3,2
  3950  0961  0008               	return
  3951                           
  3952                           ;HD44780.c: 86: {
  3953                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  3954  0962  0873               	movf	Lcd_Text@buffer,w
  3955  0963  0084               	movwf	4
  3956  0964  120A  158A  2000  120A  158A  	fcall	stringdir
  3957  0969  216E  120A  158A   	fcall	_Lcd_CharCP
  3958                           
  3959                           ;HD44780.c: 88: buffer++;
  3960  096C  0AF3               	incf	Lcd_Text@buffer,f
  3961  096D  2958               	goto	l3175
  3962  096E                     __end_of_Lcd_Text:	
  3963  096E                     __ptext39:	
  3964 ;; *************** function _Lcd_CharCP *****************
  3965 ;; Defined at:
  3966 ;;		line 116 in file "libs/HD44780.c"
  3967 ;; Parameters:    Size  Location     Type
  3968 ;;  c               1    wreg     unsigned char 
  3969 ;; Auto vars:     Size  Location     Type
  3970 ;;  c               1    1[COMMON] unsigned char 
  3971 ;; Return value:  Size  Location     Type
  3972 ;;                  1    wreg      void 
  3973 ;; Registers used:
  3974 ;;		wreg, status,2, status,0, pclath, cstack
  3975 ;; Tracked objects:
  3976 ;;		On entry : 0/900
  3977 ;;		On exit  : 0/0
  3978 ;;		Unchanged: 0/0
  3979 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  3980 ;;      Params:         0       0       0       0       0       0
  3981 ;;      Locals:         1       0       0       0       0       0
  3982 ;;      Temps:          1       0       0       0       0       0
  3983 ;;      Totals:         2       0       0       0       0       0
  3984 ;;Total ram usage:        2 bytes
  3985 ;; Hardware stack levels used:    1
  3986 ;; Hardware stack levels required when called:    1
  3987 ;; This function calls:
  3988 ;;		_Lcd_Delay5us
  3989 ;; This function is called by:
  3990 ;;		_Lcd_Text
  3991 ;;		_Lcd_WriteChar
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function _Lcd_CharCP
  3997  096E                     _Lcd_CharCP:	
  3998                           
  3999                           ;incstack = 0
  4000                           ; Regs used in _Lcd_CharCP: [wreg+status,2+status,0+pclath+cstack]
  4001                           ;Lcd_CharCP@c stored from wreg
  4002  096E  00F1               	movwf	Lcd_CharCP@c
  4003                           
  4004                           ;HD44780.c: 117: RA1 = 0; RA0 = 1;
  4005  096F  1283               	bcf	3,5	;RP0=0, select bank0
  4006  0970  1303               	bcf	3,6	;RP1=0, select bank0
  4007  0971  1085               	bcf	5,1	;volatile
  4008  0972  1405               	bsf	5,0	;volatile
  4009                           
  4010                           ;HD44780.c: 118: RA5 = (c & 0b10000000)>>7; RA4 = (c & 0b01000000)>>6;
  4011  0973  0871               	movf	Lcd_CharCP@c,w
  4012  0974  00F0               	movwf	??_Lcd_CharCP
  4013  0975  3007               	movlw	7
  4014  0976                     u2865:	
  4015  0976  1003               	clrc
  4016  0977  0CF0               	rrf	??_Lcd_CharCP,f
  4017  0978  3EFF               	addlw	-1
  4018  0979  1D03               	skipz
  4019  097A  2976               	goto	u2865
  4020  097B  1C70               	btfss	??_Lcd_CharCP,0
  4021  097C  2981               	goto	u2870
  4022  097D  1283               	bcf	3,5	;RP0=0, select bank0
  4023  097E  1303               	bcf	3,6	;RP1=0, select bank0
  4024  097F  1685               	bsf	5,5	;volatile
  4025  0980  2984               	goto	u2884
  4026  0981                     u2870:	
  4027  0981  1283               	bcf	3,5	;RP0=0, select bank0
  4028  0982  1303               	bcf	3,6	;RP1=0, select bank0
  4029  0983  1285               	bcf	5,5	;volatile
  4030  0984                     u2884:	
  4031  0984  0871               	movf	Lcd_CharCP@c,w
  4032  0985  00F0               	movwf	??_Lcd_CharCP
  4033  0986  3006               	movlw	6
  4034  0987                     u2895:	
  4035  0987  1003               	clrc
  4036  0988  0CF0               	rrf	??_Lcd_CharCP,f
  4037  0989  3EFF               	addlw	-1
  4038  098A  1D03               	skipz
  4039  098B  2987               	goto	u2895
  4040  098C  1C70               	btfss	??_Lcd_CharCP,0
  4041  098D  2992               	goto	u2900
  4042  098E  1283               	bcf	3,5	;RP0=0, select bank0
  4043  098F  1303               	bcf	3,6	;RP1=0, select bank0
  4044  0990  1605               	bsf	5,4	;volatile
  4045  0991  2995               	goto	u2914
  4046  0992                     u2900:	
  4047  0992  1283               	bcf	3,5	;RP0=0, select bank0
  4048  0993  1303               	bcf	3,6	;RP1=0, select bank0
  4049  0994  1205               	bcf	5,4	;volatile
  4050  0995                     u2914:	
  4051                           
  4052                           ;HD44780.c: 119: RA3 = (c & 0b00100000)>>5; RA2 = (c & 0b00010000)>>4;
  4053  0995  0871               	movf	Lcd_CharCP@c,w
  4054  0996  00F0               	movwf	??_Lcd_CharCP
  4055  0997  3005               	movlw	5
  4056  0998                     u2925:	
  4057  0998  1003               	clrc
  4058  0999  0CF0               	rrf	??_Lcd_CharCP,f
  4059  099A  3EFF               	addlw	-1
  4060  099B  1D03               	skipz
  4061  099C  2998               	goto	u2925
  4062  099D  1C70               	btfss	??_Lcd_CharCP,0
  4063  099E  29A3               	goto	u2930
  4064  099F  1283               	bcf	3,5	;RP0=0, select bank0
  4065  09A0  1303               	bcf	3,6	;RP1=0, select bank0
  4066  09A1  1585               	bsf	5,3	;volatile
  4067  09A2  29A6               	goto	u2944
  4068  09A3                     u2930:	
  4069  09A3  1283               	bcf	3,5	;RP0=0, select bank0
  4070  09A4  1303               	bcf	3,6	;RP1=0, select bank0
  4071  09A5  1185               	bcf	5,3	;volatile
  4072  09A6                     u2944:	
  4073  09A6  0871               	movf	Lcd_CharCP@c,w
  4074  09A7  00F0               	movwf	??_Lcd_CharCP
  4075  09A8  3004               	movlw	4
  4076  09A9                     u2955:	
  4077  09A9  1003               	clrc
  4078  09AA  0CF0               	rrf	??_Lcd_CharCP,f
  4079  09AB  3EFF               	addlw	-1
  4080  09AC  1D03               	skipz
  4081  09AD  29A9               	goto	u2955
  4082  09AE  1C70               	btfss	??_Lcd_CharCP,0
  4083  09AF  29B4               	goto	u2960
  4084  09B0  1283               	bcf	3,5	;RP0=0, select bank0
  4085  09B1  1303               	bcf	3,6	;RP1=0, select bank0
  4086  09B2  1505               	bsf	5,2	;volatile
  4087  09B3  29B7               	goto	l2645
  4088  09B4                     u2960:	
  4089  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  4090  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  4091  09B6  1105               	bcf	5,2	;volatile
  4092  09B7                     l2645:	
  4093                           
  4094                           ;HD44780.c: 120: _delay(10);
  4095  09B7  3003               	movlw	3
  4096  09B8  00F0               	movwf	??_Lcd_CharCP
  4097  09B9                     u4527:	
  4098  09B9  0BF0               	decfsz	??_Lcd_CharCP,f
  4099  09BA  29B9               	goto	u4527
  4100                           
  4101                           ;HD44780.c: 121: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4102  09BB  1283               	bcf	3,5	;RP0=0, select bank0
  4103  09BC  1303               	bcf	3,6	;RP1=0, select bank0
  4104  09BD  1485               	bsf	5,1	;volatile
  4105  09BE  22F6  120A  158A   	fcall	_Lcd_Delay5us
  4106  09C1  1283               	bcf	3,5	;RP0=0, select bank0
  4107  09C2  1303               	bcf	3,6	;RP1=0, select bank0
  4108  09C3  1085               	bcf	5,1	;volatile
  4109                           
  4110                           ;HD44780.c: 122: RA5 = (c & 0b00001000)>>3; RA4 = (c & 0b00000100)>>2;
  4111  09C4  2405  120A  158A   	fcall	PL34	;call to abstracted procedure
  4112  09C7  1003               	clrc
  4113  09C8  0CF0               	rrf	??_Lcd_CharCP,f
  4114  09C9  1C70               	btfss	??_Lcd_CharCP,0
  4115  09CA  29CF               	goto	u2980
  4116  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  4117  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  4118  09CD  1685               	bsf	5,5	;volatile
  4119  09CE  29D2               	goto	l2655
  4120  09CF                     u2980:	
  4121  09CF  1283               	bcf	3,5	;RP0=0, select bank0
  4122  09D0  1303               	bcf	3,6	;RP1=0, select bank0
  4123  09D1  1285               	bcf	5,5	;volatile
  4124  09D2                     l2655:	
  4125  09D2  2405  120A  158A   	fcall	PL34	;call to abstracted procedure
  4126  09D5  1C70               	btfss	??_Lcd_CharCP,0
  4127  09D6  29DB               	goto	u3000
  4128  09D7  1283               	bcf	3,5	;RP0=0, select bank0
  4129  09D8  1303               	bcf	3,6	;RP1=0, select bank0
  4130  09D9  1605               	bsf	5,4	;volatile
  4131  09DA  29DE               	goto	l2657
  4132  09DB                     u3000:	
  4133  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  4134  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  4135  09DD  1205               	bcf	5,4	;volatile
  4136  09DE                     l2657:	
  4137                           
  4138                           ;HD44780.c: 123: RA3 = (c & 0b00000010)>>1; RA2 = (c & 0b00000001);
  4139  09DE  0871               	movf	Lcd_CharCP@c,w
  4140  09DF  00F0               	movwf	??_Lcd_CharCP
  4141  09E0  1003               	clrc
  4142  09E1  0CF0               	rrf	??_Lcd_CharCP,f
  4143  09E2  1C70               	btfss	??_Lcd_CharCP,0
  4144  09E3  29E8               	goto	u3020
  4145  09E4  1283               	bcf	3,5	;RP0=0, select bank0
  4146  09E5  1303               	bcf	3,6	;RP1=0, select bank0
  4147  09E6  1585               	bsf	5,3	;volatile
  4148  09E7  29EB               	goto	l2659
  4149  09E8                     u3020:	
  4150  09E8  1283               	bcf	3,5	;RP0=0, select bank0
  4151  09E9  1303               	bcf	3,6	;RP1=0, select bank0
  4152  09EA  1185               	bcf	5,3	;volatile
  4153  09EB                     l2659:	
  4154  09EB  1C71               	btfss	Lcd_CharCP@c,0
  4155  09EC  29F1               	goto	u3040
  4156  09ED  1283               	bcf	3,5	;RP0=0, select bank0
  4157  09EE  1303               	bcf	3,6	;RP1=0, select bank0
  4158  09EF  1505               	bsf	5,2	;volatile
  4159  09F0  29F4               	goto	l2661
  4160  09F1                     u3040:	
  4161  09F1  1283               	bcf	3,5	;RP0=0, select bank0
  4162  09F2  1303               	bcf	3,6	;RP1=0, select bank0
  4163  09F3  1105               	bcf	5,2	;volatile
  4164  09F4                     l2661:	
  4165                           
  4166                           ;HD44780.c: 124: _delay(10);
  4167  09F4  3003               	movlw	3
  4168  09F5  00F0               	movwf	??_Lcd_CharCP
  4169  09F6                     u4537:	
  4170  09F6  0BF0               	decfsz	??_Lcd_CharCP,f
  4171  09F7  29F6               	goto	u4537
  4172                           
  4173                           ;HD44780.c: 125: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4174  09F8  1283               	bcf	3,5	;RP0=0, select bank0
  4175  09F9  1303               	bcf	3,6	;RP1=0, select bank0
  4176  09FA  1485               	bsf	5,1	;volatile
  4177  09FB  22F6  120A  158A   	fcall	_Lcd_Delay5us
  4178  09FE  1283               	bcf	3,5	;RP0=0, select bank0
  4179  09FF  1303               	bcf	3,6	;RP1=0, select bank0
  4180  0A00  1085               	bcf	5,1	;volatile
  4181                           
  4182                           ;HD44780.c: 126: Lcd_Delay5us();
  4183  0A01  2AF6               	ljmp	l2461
  4184  0A02                     __end_of_Lcd_CharCP:	
  4185  0A02                     __ptext34:	
  4186 ;; *************** function _Lcd_Init *****************
  4187 ;; Defined at:
  4188 ;;		line 17 in file "libs/HD44780.c"
  4189 ;; Parameters:    Size  Location     Type
  4190 ;;		None
  4191 ;; Auto vars:     Size  Location     Type
  4192 ;;  data            1    2[COMMON] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  1    wreg      void 
  4195 ;; Registers used:
  4196 ;;		wreg, status,2, status,0, pclath, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : B00/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4202 ;;      Params:         0       0       0       0       0       0
  4203 ;;      Locals:         1       0       0       0       0       0
  4204 ;;      Temps:          0       0       0       0       0       0
  4205 ;;      Totals:         1       0       0       0       0       0
  4206 ;;Total ram usage:        1 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    2
  4209 ;; This function calls:
  4210 ;;		_Lcd_Command
  4211 ;;		_Lcd_Delay5500us
  4212 ;;		_Lcd_Delay5us
  4213 ;; This function is called by:
  4214 ;;		_main
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           
  4219                           ;psect for function _Lcd_Init
  4220  0A02                     _Lcd_Init:	
  4221                           
  4222                           ;HD44780.c: 19: ANSEL = 0x00;
  4223                           
  4224                           ;incstack = 0
  4225                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4226  0A02  1683               	bsf	3,5	;RP0=1, select bank3
  4227  0A03  1703               	bsf	3,6	;RP1=1, select bank3
  4228  0A04  0188               	clrf	8	;volatile
  4229                           
  4230                           ;HD44780.c: 20: ANSELH = 0x00;
  4231  0A05  0189               	clrf	9	;volatile
  4232                           
  4233                           ;HD44780.c: 23: unsigned char data;
  4234                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  4235  0A06  1303               	bcf	3,6	;RP1=0, select bank1
  4236  0A07  23FE  120A  158A   	fcall	PL32	;call to abstracted procedure
  4237                           
  4238                           ;HD44780.c: 25: RA5 = 0; RA4 = 0; RA3 = 0; RA2 = 0; RA1 = 0; RA0 = 0;
  4239  0A0A  1283               	bcf	3,5	;RP0=0, select bank0
  4240  0A0B  23FE  120A  158A   	fcall	PL32	;call to abstracted procedure
  4241                           
  4242                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  4243  0A0E  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4244  0A11  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4245  0A14  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4246                           
  4247                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  4248  0A17  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4249  0A1A  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4250  0A1D  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4251                           
  4252                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  4253  0A20  01F2               	clrf	Lcd_Init@data
  4254  0A21  0AF2               	incf	Lcd_Init@data,f
  4255  0A22                     l63:	
  4256                           
  4257                           ;HD44780.c: 29: {
  4258                           ;HD44780.c: 30: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  4259  0A22  23E3  120A  158A   	fcall	PL24	;call to abstracted procedure
  4260                           
  4261                           ;HD44780.c: 31: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 1; RA0 = 0;
  4262  0A25  1285               	bcf	5,5	;volatile
  4263  0A26  1205               	bcf	5,4	;volatile
  4264  0A27  1585               	bsf	5,3	;volatile
  4265  0A28  1505               	bsf	5,2	;volatile
  4266  0A29  1485               	bsf	5,1	;volatile
  4267  0A2A  1005               	bcf	5,0	;volatile
  4268                           
  4269                           ;HD44780.c: 32: Lcd_Delay5us();
  4270  0A2B  22F6  120A  158A   	fcall	_Lcd_Delay5us
  4271                           
  4272                           ;HD44780.c: 33: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  4273  0A2E  23E3  120A  158A   	fcall	PL24	;call to abstracted procedure
  4274                           
  4275                           ;HD44780.c: 34: Lcd_Delay5500us();
  4276  0A31  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4277  0A34  3004               	movlw	4
  4278  0A35  0AF2               	incf	Lcd_Init@data,f
  4279  0A36  0272               	subwf	Lcd_Init@data,w
  4280  0A37  1C03               	skipc
  4281  0A38  2A22               	goto	l63
  4282                           
  4283                           ;HD44780.c: 35: }
  4284                           ;HD44780.c: 36: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  4285  0A39  23EC  120A  158A   	fcall	PL26	;call to abstracted procedure
  4286                           
  4287                           ;HD44780.c: 37: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 1; RA0 = 0;
  4288  0A3C  1285               	bcf	5,5	;volatile
  4289  0A3D  1205               	bcf	5,4	;volatile
  4290  0A3E  1585               	bsf	5,3	;volatile
  4291  0A3F  1105               	bcf	5,2	;volatile
  4292  0A40  1485               	bsf	5,1	;volatile
  4293  0A41  1005               	bcf	5,0	;volatile
  4294                           
  4295                           ;HD44780.c: 38: Lcd_Delay5us();
  4296  0A42  22F6  120A  158A   	fcall	_Lcd_Delay5us
  4297                           
  4298                           ;HD44780.c: 39: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  4299  0A45  23EC  120A  158A   	fcall	PL26	;call to abstracted procedure
  4300                           
  4301                           ;HD44780.c: 40: Lcd_Delay5500us();
  4302  0A48  2259  120A  158A   	fcall	_Lcd_Delay5500us
  4303  0A4B  3028               	movlw	40
  4304  0A4C  2262  120A  158A   	fcall	_Lcd_Command
  4305  0A4F  3010               	movlw	16
  4306  0A50  2262  120A  158A   	fcall	_Lcd_Command
  4307  0A53  3001               	movlw	1
  4308  0A54  2262  120A  158A   	fcall	_Lcd_Command
  4309  0A57  300F               	movlw	15
  4310  0A58  2A62               	ljmp	_Lcd_Command
  4311  0A59                     __end_of_Lcd_Init:	
  4312  0A59                     __ptext35:	
  4313 ;; *************** function _Lcd_Delay5500us *****************
  4314 ;; Defined at:
  4315 ;;		line 153 in file "libs/HD44780.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4329 ;;      Params:         0       0       0       0       0       0
  4330 ;;      Locals:         0       0       0       0       0       0
  4331 ;;      Temps:          2       0       0       0       0       0
  4332 ;;      Totals:         2       0       0       0       0       0
  4333 ;;Total ram usage:        2 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_Lcd_Init
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           
  4343                           ;psect for function _Lcd_Delay5500us
  4344  0A59                     _Lcd_Delay5500us:	
  4345                           
  4346                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  4347                           
  4348                           ;incstack = 0
  4349                           ; Regs used in _Lcd_Delay5500us: [wreg]
  4350  0A59  3008               	movlw	8
  4351  0A5A  00F1               	movwf	??_Lcd_Delay5500us+1
  4352  0A5B  3023               	movlw	35
  4353  0A5C  00F0               	movwf	??_Lcd_Delay5500us
  4354  0A5D                     u4497:	
  4355  0A5D  0BF0               	decfsz	??_Lcd_Delay5500us,f
  4356  0A5E  2A5D               	goto	u4497
  4357  0A5F  0BF1               	decfsz	??_Lcd_Delay5500us+1,f
  4358  0A60  2A5D               	goto	u4497
  4359  0A61  0008               	return
  4360  0A62                     __end_of_Lcd_Delay5500us:	
  4361  0A62                     __ptext38:	
  4362 ;; *************** function _Lcd_Command *****************
  4363 ;; Defined at:
  4364 ;;		line 133 in file "libs/HD44780.c"
  4365 ;; Parameters:    Size  Location     Type
  4366 ;;  command         1    wreg     unsigned char 
  4367 ;; Auto vars:     Size  Location     Type
  4368 ;;  command         1    1[COMMON] unsigned char 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;                  1    wreg      void 
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0, pclath, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/900
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4378 ;;      Params:         0       0       0       0       0       0
  4379 ;;      Locals:         1       0       0       0       0       0
  4380 ;;      Temps:          1       0       0       0       0       0
  4381 ;;      Totals:         2       0       0       0       0       0
  4382 ;;Total ram usage:        2 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    1
  4385 ;; This function calls:
  4386 ;;		_Lcd_Delay5us
  4387 ;; This function is called by:
  4388 ;;		_Lcd_Init
  4389 ;;		_Lcd_Text
  4390 ;;		_Lcd_WriteChar
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function _Lcd_Command
  4396  0A62                     _Lcd_Command:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+pclath+cstack]
  4400                           ;Lcd_Command@command stored from wreg
  4401  0A62  00F1               	movwf	Lcd_Command@command
  4402                           
  4403                           ;HD44780.c: 134: RA1 = 0; RA0 = 0;
  4404  0A63  1283               	bcf	3,5	;RP0=0, select bank0
  4405  0A64  1303               	bcf	3,6	;RP1=0, select bank0
  4406  0A65  1085               	bcf	5,1	;volatile
  4407  0A66  1005               	bcf	5,0	;volatile
  4408                           
  4409                           ;HD44780.c: 135: RA5 = (command & 0b10000000)>>7; RA4 = (command & 0b01000000)>>6;
  4410  0A67  0871               	movf	Lcd_Command@command,w
  4411  0A68  00F0               	movwf	??_Lcd_Command
  4412  0A69  3007               	movlw	7
  4413  0A6A                     u2665:	
  4414  0A6A  1003               	clrc
  4415  0A6B  0CF0               	rrf	??_Lcd_Command,f
  4416  0A6C  3EFF               	addlw	-1
  4417  0A6D  1D03               	skipz
  4418  0A6E  2A6A               	goto	u2665
  4419  0A6F  1C70               	btfss	??_Lcd_Command,0
  4420  0A70  2A75               	goto	u2670
  4421  0A71  1283               	bcf	3,5	;RP0=0, select bank0
  4422  0A72  1303               	bcf	3,6	;RP1=0, select bank0
  4423  0A73  1685               	bsf	5,5	;volatile
  4424  0A74  2A78               	goto	u2684
  4425  0A75                     u2670:	
  4426  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  4427  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  4428  0A77  1285               	bcf	5,5	;volatile
  4429  0A78                     u2684:	
  4430  0A78  0871               	movf	Lcd_Command@command,w
  4431  0A79  00F0               	movwf	??_Lcd_Command
  4432  0A7A  3006               	movlw	6
  4433  0A7B                     u2695:	
  4434  0A7B  1003               	clrc
  4435  0A7C  0CF0               	rrf	??_Lcd_Command,f
  4436  0A7D  3EFF               	addlw	-1
  4437  0A7E  1D03               	skipz
  4438  0A7F  2A7B               	goto	u2695
  4439  0A80  1C70               	btfss	??_Lcd_Command,0
  4440  0A81  2A86               	goto	u2700
  4441  0A82  1283               	bcf	3,5	;RP0=0, select bank0
  4442  0A83  1303               	bcf	3,6	;RP1=0, select bank0
  4443  0A84  1605               	bsf	5,4	;volatile
  4444  0A85  2A89               	goto	u2714
  4445  0A86                     u2700:	
  4446  0A86  1283               	bcf	3,5	;RP0=0, select bank0
  4447  0A87  1303               	bcf	3,6	;RP1=0, select bank0
  4448  0A88  1205               	bcf	5,4	;volatile
  4449  0A89                     u2714:	
  4450                           
  4451                           ;HD44780.c: 136: RA3 = (command & 0b00100000)>>5; RA2 = (command & 0b00010000)>>4;
  4452  0A89  0871               	movf	Lcd_Command@command,w
  4453  0A8A  00F0               	movwf	??_Lcd_Command
  4454  0A8B  3005               	movlw	5
  4455  0A8C                     u2725:	
  4456  0A8C  1003               	clrc
  4457  0A8D  0CF0               	rrf	??_Lcd_Command,f
  4458  0A8E  3EFF               	addlw	-1
  4459  0A8F  1D03               	skipz
  4460  0A90  2A8C               	goto	u2725
  4461  0A91  1C70               	btfss	??_Lcd_Command,0
  4462  0A92  2A97               	goto	u2730
  4463  0A93  1283               	bcf	3,5	;RP0=0, select bank0
  4464  0A94  1303               	bcf	3,6	;RP1=0, select bank0
  4465  0A95  1585               	bsf	5,3	;volatile
  4466  0A96  2A9A               	goto	u2744
  4467  0A97                     u2730:	
  4468  0A97  1283               	bcf	3,5	;RP0=0, select bank0
  4469  0A98  1303               	bcf	3,6	;RP1=0, select bank0
  4470  0A99  1185               	bcf	5,3	;volatile
  4471  0A9A                     u2744:	
  4472  0A9A  0871               	movf	Lcd_Command@command,w
  4473  0A9B  00F0               	movwf	??_Lcd_Command
  4474  0A9C  3004               	movlw	4
  4475  0A9D                     u2755:	
  4476  0A9D  1003               	clrc
  4477  0A9E  0CF0               	rrf	??_Lcd_Command,f
  4478  0A9F  3EFF               	addlw	-1
  4479  0AA0  1D03               	skipz
  4480  0AA1  2A9D               	goto	u2755
  4481  0AA2  1C70               	btfss	??_Lcd_Command,0
  4482  0AA3  2AA8               	goto	u2760
  4483  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
  4484  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
  4485  0AA6  1505               	bsf	5,2	;volatile
  4486  0AA7  2AAB               	goto	l2619
  4487  0AA8                     u2760:	
  4488  0AA8  1283               	bcf	3,5	;RP0=0, select bank0
  4489  0AA9  1303               	bcf	3,6	;RP1=0, select bank0
  4490  0AAA  1105               	bcf	5,2	;volatile
  4491  0AAB                     l2619:	
  4492                           
  4493                           ;HD44780.c: 137: _delay(10);
  4494  0AAB  3003               	movlw	3
  4495  0AAC  00F0               	movwf	??_Lcd_Command
  4496  0AAD                     u4507:	
  4497  0AAD  0BF0               	decfsz	??_Lcd_Command,f
  4498  0AAE  2AAD               	goto	u4507
  4499                           
  4500                           ;HD44780.c: 138: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4501  0AAF  1283               	bcf	3,5	;RP0=0, select bank0
  4502  0AB0  1303               	bcf	3,6	;RP1=0, select bank0
  4503  0AB1  1485               	bsf	5,1	;volatile
  4504  0AB2  22F6  120A  158A   	fcall	_Lcd_Delay5us
  4505  0AB5  1283               	bcf	3,5	;RP0=0, select bank0
  4506  0AB6  1303               	bcf	3,6	;RP1=0, select bank0
  4507  0AB7  1085               	bcf	5,1	;volatile
  4508                           
  4509                           ;HD44780.c: 139: RA5 = (command & 0b00001000)>>3; RA4 = (command & 0b00000100)>>2;
  4510  0AB8  240C  120A  158A   	fcall	PL36	;call to abstracted procedure
  4511  0ABB  1003               	clrc
  4512  0ABC  0CF0               	rrf	??_Lcd_Command,f
  4513  0ABD  1C70               	btfss	??_Lcd_Command,0
  4514  0ABE  2AC3               	goto	u2780
  4515  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
  4516  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
  4517  0AC1  1685               	bsf	5,5	;volatile
  4518  0AC2  2AC6               	goto	l2629
  4519  0AC3                     u2780:	
  4520  0AC3  1283               	bcf	3,5	;RP0=0, select bank0
  4521  0AC4  1303               	bcf	3,6	;RP1=0, select bank0
  4522  0AC5  1285               	bcf	5,5	;volatile
  4523  0AC6                     l2629:	
  4524  0AC6  240C  120A  158A   	fcall	PL36	;call to abstracted procedure
  4525  0AC9  1C70               	btfss	??_Lcd_Command,0
  4526  0ACA  2ACF               	goto	u2800
  4527  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
  4528  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
  4529  0ACD  1605               	bsf	5,4	;volatile
  4530  0ACE  2AD2               	goto	l2631
  4531  0ACF                     u2800:	
  4532  0ACF  1283               	bcf	3,5	;RP0=0, select bank0
  4533  0AD0  1303               	bcf	3,6	;RP1=0, select bank0
  4534  0AD1  1205               	bcf	5,4	;volatile
  4535  0AD2                     l2631:	
  4536                           
  4537                           ;HD44780.c: 140: RA3 = (command & 0b00000010)>>1; RA2 = (command & 0b00000001);
  4538  0AD2  0871               	movf	Lcd_Command@command,w
  4539  0AD3  00F0               	movwf	??_Lcd_Command
  4540  0AD4  1003               	clrc
  4541  0AD5  0CF0               	rrf	??_Lcd_Command,f
  4542  0AD6  1C70               	btfss	??_Lcd_Command,0
  4543  0AD7  2ADC               	goto	u2820
  4544  0AD8  1283               	bcf	3,5	;RP0=0, select bank0
  4545  0AD9  1303               	bcf	3,6	;RP1=0, select bank0
  4546  0ADA  1585               	bsf	5,3	;volatile
  4547  0ADB  2ADF               	goto	l2633
  4548  0ADC                     u2820:	
  4549  0ADC  1283               	bcf	3,5	;RP0=0, select bank0
  4550  0ADD  1303               	bcf	3,6	;RP1=0, select bank0
  4551  0ADE  1185               	bcf	5,3	;volatile
  4552  0ADF                     l2633:	
  4553  0ADF  1C71               	btfss	Lcd_Command@command,0
  4554  0AE0  2AE5               	goto	u2840
  4555  0AE1  1283               	bcf	3,5	;RP0=0, select bank0
  4556  0AE2  1303               	bcf	3,6	;RP1=0, select bank0
  4557  0AE3  1505               	bsf	5,2	;volatile
  4558  0AE4  2AE8               	goto	l2635
  4559  0AE5                     u2840:	
  4560  0AE5  1283               	bcf	3,5	;RP0=0, select bank0
  4561  0AE6  1303               	bcf	3,6	;RP1=0, select bank0
  4562  0AE7  1105               	bcf	5,2	;volatile
  4563  0AE8                     l2635:	
  4564                           
  4565                           ;HD44780.c: 141: _delay(10);
  4566  0AE8  3003               	movlw	3
  4567  0AE9  00F0               	movwf	??_Lcd_Command
  4568  0AEA                     u4517:	
  4569  0AEA  0BF0               	decfsz	??_Lcd_Command,f
  4570  0AEB  2AEA               	goto	u4517
  4571                           
  4572                           ;HD44780.c: 142: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  4573  0AEC  1283               	bcf	3,5	;RP0=0, select bank0
  4574  0AED  1303               	bcf	3,6	;RP1=0, select bank0
  4575  0AEE  1485               	bsf	5,1	;volatile
  4576  0AEF  22F6  120A  158A   	fcall	_Lcd_Delay5us
  4577  0AF2  1283               	bcf	3,5	;RP0=0, select bank0
  4578  0AF3  1303               	bcf	3,6	;RP1=0, select bank0
  4579  0AF4  1085               	bcf	5,1	;volatile
  4580                           
  4581                           ;HD44780.c: 144: Lcd_Delay5us();
  4582  0AF5  2AF6               	ljmp	l2461
  4583  0AF6                     __end_of_Lcd_Command:	
  4584  0AF6                     __ptext40:	
  4585 ;; *************** function _Lcd_Delay5us *****************
  4586 ;; Defined at:
  4587 ;;		line 150 in file "libs/HD44780.c"
  4588 ;; Parameters:    Size  Location     Type
  4589 ;;		None
  4590 ;; Auto vars:     Size  Location     Type
  4591 ;;		None
  4592 ;; Return value:  Size  Location     Type
  4593 ;;                  1    wreg      void 
  4594 ;; Registers used:
  4595 ;;		None
  4596 ;; Tracked objects:
  4597 ;;		On entry : 300/0
  4598 ;;		On exit  : 0/0
  4599 ;;		Unchanged: 0/0
  4600 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4601 ;;      Params:         0       0       0       0       0       0
  4602 ;;      Locals:         0       0       0       0       0       0
  4603 ;;      Temps:          0       0       0       0       0       0
  4604 ;;      Totals:         0       0       0       0       0       0
  4605 ;;Total ram usage:        0 bytes
  4606 ;; Hardware stack levels used:    1
  4607 ;; This function calls:
  4608 ;;		Nothing
  4609 ;; This function is called by:
  4610 ;;		_Lcd_Init
  4611 ;;		_Lcd_CharCP
  4612 ;;		_Lcd_Command
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           
  4617                           ;psect for function _Lcd_Delay5us
  4618  0AF6                     _Lcd_Delay5us:	
  4619  0AF6                     l2461:	
  4620                           ;incstack = 0
  4621                           ; Regs used in _Lcd_Delay5us: []
  4622                           
  4623                           
  4624                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  4625  0AF6  2AF7               	nop2	;2 cycle nop
  4626  0AF7  2AF8               	nop2	;2 cycle nop
  4627  0AF8  0000               	nop
  4628  0AF9  0008               	return
  4629  0AFA                     __end_of_Lcd_Delay5us:	
  4630  0AFA                     __ptext21:	
  4631 ;; *************** function _ReadVars *****************
  4632 ;; Defined at:
  4633 ;;		line 7 in file "libs/eeprom.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;  i               1   19[BANK0 ] unsigned char 
  4638 ;;  j               1   18[BANK0 ] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      void 
  4641 ;; Registers used:
  4642 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 300/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4648 ;;      Params:         0       0       0       0       0       0
  4649 ;;      Locals:         0       2       0       0       0       0
  4650 ;;      Temps:          0      15       0       0       0       0
  4651 ;;      Totals:         0      17       0       0       0       0
  4652 ;;Total ram usage:       17 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    1
  4655 ;; This function calls:
  4656 ;;		___bmul
  4657 ;;		_eeprom_read
  4658 ;; This function is called by:
  4659 ;;		_main
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           
  4664                           ;psect for function _ReadVars
  4665  0AFA                     _ReadVars:	
  4666                           
  4667                           ;eeprom.c: 8: C_D = eeprom_read(0xDE);
  4668                           
  4669                           ;incstack = 0
  4670                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4671  0AFA  30DE               	movlw	222
  4672  0AFB  23B4  120A  158A   	fcall	_eeprom_read
  4673  0AFE  00EB               	movwf	_C_D^(0+256)	;volatile
  4674                           
  4675                           ;eeprom.c: 9: UINT8 i, j;
  4676                           ;eeprom.c: 10: for (i = 0; i<3; i++) {
  4677  0AFF  1303               	bcf	3,6	;RP1=0, select bank0
  4678  0B00  01BF               	clrf	ReadVars@i
  4679  0B01                     l3217:	
  4680  0B01  3003               	movlw	3
  4681  0B02  023F               	subwf	ReadVars@i,w
  4682  0B03  1803               	btfsc	3,0
  4683  0B04  2B76               	goto	l3229
  4684                           
  4685                           ;eeprom.c: 11: C[i] = (uint32_t) eeprom_read(0xD2 + 3*i)*256*256
  4686                           ;eeprom.c: 12: + (uint16_t) eeprom_read(0xD2 + 1 + 3*i)*256
  4687                           ;eeprom.c: 13: + eeprom_read(0xD2 + 2 + 3*i);
  4688  0B05  083F               	movf	ReadVars@i,w
  4689  0B06  073F               	addwf	ReadVars@i,w
  4690  0B07  073F               	addwf	ReadVars@i,w
  4691  0B08  3ED4               	addlw	212
  4692  0B09  23B4  120A  158A   	fcall	_eeprom_read
  4693  0B0C  1303               	bcf	3,6	;RP1=0, select bank0
  4694  0B0D  00AF               	movwf	??_ReadVars
  4695  0B0E  01B0               	clrf	??_ReadVars+1
  4696  0B0F  01B1               	clrf	??_ReadVars+2
  4697  0B10  01B2               	clrf	??_ReadVars+3
  4698  0B11  083F               	movf	ReadVars@i,w
  4699  0B12  073F               	addwf	ReadVars@i,w
  4700  0B13  073F               	addwf	ReadVars@i,w
  4701  0B14  3ED3               	addlw	211
  4702  0B15  23B4  120A  158A   	fcall	_eeprom_read
  4703  0B18  1303               	bcf	3,6	;RP1=0, select bank0
  4704  0B19  00B3               	movwf	??_ReadVars+4
  4705  0B1A  01B4               	clrf	??_ReadVars+5
  4706  0B1B  00B4               	movwf	??_ReadVars+5
  4707  0B1C  01B3               	clrf	??_ReadVars+4
  4708  0B1D  0833               	movf	??_ReadVars+4,w
  4709  0B1E  00B5               	movwf	??_ReadVars+6
  4710  0B1F  0834               	movf	??_ReadVars+5,w
  4711  0B20  00B6               	movwf	??_ReadVars+7
  4712  0B21  01B7               	clrf	??_ReadVars+8
  4713  0B22  01B8               	clrf	??_ReadVars+9
  4714  0B23  083F               	movf	ReadVars@i,w
  4715  0B24  073F               	addwf	ReadVars@i,w
  4716  0B25  073F               	addwf	ReadVars@i,w
  4717  0B26  3ED2               	addlw	210
  4718  0B27  23B4  120A  158A   	fcall	_eeprom_read
  4719  0B2A  1303               	bcf	3,6	;RP1=0, select bank0
  4720  0B2B  00B9               	movwf	??_ReadVars+10
  4721  0B2C  01BA               	clrf	??_ReadVars+11
  4722  0B2D  01BB               	clrf	??_ReadVars+12
  4723  0B2E  01BC               	clrf	??_ReadVars+13
  4724  0B2F  083A               	movf	??_ReadVars+11,w
  4725  0B30  00BC               	movwf	??_ReadVars+13
  4726  0B31  0839               	movf	??_ReadVars+10,w
  4727  0B32  00BB               	movwf	??_ReadVars+12
  4728  0B33  01BA               	clrf	??_ReadVars+11
  4729  0B34  01B9               	clrf	??_ReadVars+10
  4730  0B35  0839               	movf	??_ReadVars+10,w
  4731  0B36  07B5               	addwf	??_ReadVars+6,f
  4732  0B37  083A               	movf	??_ReadVars+11,w
  4733  0B38  1803               	skipnc
  4734  0B39  0F3A               	incfsz	??_ReadVars+11,w
  4735  0B3A  07B6               	addwf	??_ReadVars+7,f
  4736  0B3B  083B               	movf	??_ReadVars+12,w
  4737  0B3C  1803               	skipnc
  4738  0B3D  0F3B               	incfsz	??_ReadVars+12,w
  4739  0B3E  07B7               	addwf	??_ReadVars+8,f
  4740  0B3F  083C               	movf	??_ReadVars+13,w
  4741  0B40  1803               	skipnc
  4742  0B41  0A3C               	incf	??_ReadVars+13,w
  4743  0B42  07B8               	addwf	??_ReadVars+9,f
  4744  0B43  0835               	movf	??_ReadVars+6,w
  4745  0B44  07AF               	addwf	??_ReadVars,f
  4746  0B45  0836               	movf	??_ReadVars+7,w
  4747  0B46  1803               	skipnc
  4748  0B47  0F36               	incfsz	??_ReadVars+7,w
  4749  0B48  07B0               	addwf	??_ReadVars+1,f
  4750  0B49  0837               	movf	??_ReadVars+8,w
  4751  0B4A  1803               	skipnc
  4752  0B4B  0F37               	incfsz	??_ReadVars+8,w
  4753  0B4C  07B1               	addwf	??_ReadVars+2,f
  4754  0B4D  0838               	movf	??_ReadVars+9,w
  4755  0B4E  1803               	skipnc
  4756  0B4F  0A38               	incf	??_ReadVars+9,w
  4757  0B50  07B2               	addwf	??_ReadVars+3,f
  4758  0B51  083F               	movf	ReadVars@i,w
  4759  0B52  00BD               	movwf	??_ReadVars+14
  4760  0B53  3001               	movlw	1
  4761  0B54  1003               	clrc
  4762  0B55                     L15:	
  4763  0B55  0DBD               	rlf	??_ReadVars+14,f
  4764  0B56  3EFF               	addlw	-1
  4765  0B57  1003               	clrc
  4766  0B58  1D03               	skipz
  4767  0B59  2B55               	goto	L15
  4768  0B5A  0D3D               	rlf	??_ReadVars+14,w
  4769  0B5B  3E20               	addlw	32
  4770  0B5C  0084               	movwf	4
  4771  0B5D  082F               	movf	??_ReadVars,w
  4772  0B5E  1383               	bcf	3,7	;select IRP bank0
  4773  0B5F  0080               	movwf	0
  4774  0B60  0A84               	incf	4,f
  4775  0B61  0830               	movf	??_ReadVars+1,w
  4776  0B62  0080               	movwf	0
  4777  0B63  0A84               	incf	4,f
  4778  0B64  0831               	movf	??_ReadVars+2,w
  4779  0B65  0080               	movwf	0
  4780  0B66  0A84               	incf	4,f
  4781  0B67  0832               	movf	??_ReadVars+3,w
  4782  0B68  0080               	movwf	0
  4783                           
  4784                           ;eeprom.c: 14: STATE_BREAKS[i] = eeprom_read(0xDB+i);
  4785  0B69  083F               	movf	ReadVars@i,w
  4786  0B6A  3E66               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  4787  0B6B  0084               	movwf	4
  4788  0B6C  083F               	movf	ReadVars@i,w
  4789  0B6D  3EDB               	addlw	219
  4790  0B6E  23B4  120A  158A   	fcall	_eeprom_read
  4791  0B71  1783               	bsf	3,7	;select IRP bank2
  4792  0B72  0080               	movwf	0
  4793  0B73  1303               	bcf	3,6	;RP1=0, select bank0
  4794  0B74  0ABF               	incf	ReadVars@i,f
  4795  0B75  2B01               	goto	l3217
  4796  0B76                     l3229:	
  4797                           
  4798                           ;eeprom.c: 15: }
  4799                           ;eeprom.c: 16: for (i = 0; i<25; i++) {
  4800  0B76  01BF               	clrf	ReadVars@i
  4801  0B77                     l3231:	
  4802  0B77  3019               	movlw	25
  4803  0B78  023F               	subwf	ReadVars@i,w
  4804  0B79  1803               	btfsc	3,0
  4805  0B7A  0008               	return
  4806                           
  4807                           ;eeprom.c: 17: STATE_PERIODS[i] = eeprom_read(0x00
  4808                           ;eeprom.c: 18: + i*(1 + 2*3));
  4809  0B7B  083F               	movf	ReadVars@i,w
  4810  0B7C  3ECC               	addlw	204
  4811  0B7D  0084               	movwf	4
  4812  0B7E  3007               	movlw	7
  4813  0B7F  00AC               	movwf	___bmul@multiplicand
  4814  0B80  083F               	movf	ReadVars@i,w
  4815  0B81  23C9  120A  158A   	fcall	___bmul
  4816  0B84  23B4  120A  158A   	fcall	_eeprom_read
  4817  0B87  1783               	bsf	3,7	;select IRP bank3
  4818  0B88  0080               	movwf	0
  4819                           
  4820                           ;eeprom.c: 19: for (j = 0; j<2; j++) {
  4821  0B89  1303               	bcf	3,6	;RP1=0, select bank0
  4822  0B8A  01BE               	clrf	ReadVars@j
  4823  0B8B                     l3243:	
  4824                           
  4825                           ;eeprom.c: 20: STATE_1[i][j] = eeprom_read(0x00
  4826                           ;eeprom.c: 21: + i*(1 + 2*3)
  4827                           ;eeprom.c: 22: + (1 + j));
  4828  0B8B  083F               	movf	ReadVars@i,w
  4829  0B8C  00AF               	movwf	??_ReadVars
  4830  0B8D  30A0               	movlw	160
  4831  0B8E  23D7  120A  158A   	fcall	PL16	;call to abstracted procedure
  4832  0B91  23C9  120A  158A   	fcall	___bmul
  4833  0B94  073E               	addwf	ReadVars@j,w
  4834  0B95  3E01               	addlw	1
  4835  0B96  23B4  120A  158A   	fcall	_eeprom_read
  4836  0B99  1383               	bcf	3,7	;select IRP bank1
  4837  0B9A  0080               	movwf	0
  4838                           
  4839                           ;eeprom.c: 23: STATE_2[i][j] = eeprom_read(0x00
  4840                           ;eeprom.c: 24: + i*(1 + 2*3)
  4841                           ;eeprom.c: 25: + (3 + j));
  4842  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  4843  0B9C  083F               	movf	ReadVars@i,w
  4844  0B9D  00AF               	movwf	??_ReadVars
  4845  0B9E  3010               	movlw	16
  4846  0B9F  23D7  120A  158A   	fcall	PL16	;call to abstracted procedure
  4847  0BA2  23C9  120A  158A   	fcall	___bmul
  4848  0BA5  073E               	addwf	ReadVars@j,w
  4849  0BA6  3E03               	addlw	3
  4850  0BA7  23B4  120A  158A   	fcall	_eeprom_read
  4851  0BAA  1783               	bsf	3,7	;select IRP bank2
  4852  0BAB  0080               	movwf	0
  4853  0BAC  1303               	bcf	3,6	;RP1=0, select bank0
  4854  0BAD  3002               	movlw	2
  4855  0BAE  0ABE               	incf	ReadVars@j,f
  4856  0BAF  023E               	subwf	ReadVars@j,w
  4857  0BB0  1C03               	skipc
  4858  0BB1  2B8B               	goto	l3243
  4859  0BB2  0ABF               	incf	ReadVars@i,f
  4860  0BB3  2B77               	goto	l3231
  4861  0BB4                     __end_of_ReadVars:	
  4862  0BB4                     __ptext22:	
  4863 ;; *************** function _eeprom_read *****************
  4864 ;; Defined at:
  4865 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  addr            1    wreg     unsigned char 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;  addr            1    0[COMMON] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      unsigned char 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 300/200
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4879 ;;      Params:         0       0       0       0       0       0
  4880 ;;      Locals:         1       0       0       0       0       0
  4881 ;;      Temps:          0       0       0       0       0       0
  4882 ;;      Totals:         1       0       0       0       0       0
  4883 ;;Total ram usage:        1 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_ReadVars
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           
  4893                           ;psect for function _eeprom_read
  4894  0BB4                     _eeprom_read:	
  4895                           
  4896                           ;incstack = 0
  4897                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  4898                           ;eeprom_read@addr stored from wreg
  4899  0BB4  00F0               	movwf	eeprom_read@addr
  4900  0BB5                     l707:	
  4901  0BB5  0064               	clrwdt	;# 
  4902  0BB6  1683               	bsf	3,5	;RP0=1, select bank3
  4903  0BB7  1703               	bsf	3,6	;RP1=1, select bank3
  4904  0BB8  188C               	btfsc	12,1	;volsfr
  4905  0BB9  2BB5               	goto	l707
  4906  0BBA  0870               	movf	eeprom_read@addr,w
  4907  0BBB  1283               	bcf	3,5	;RP0=0, select bank2
  4908  0BBC  008D               	movwf	13	;volatile
  4909  0BBD  303F               	movlw	63
  4910  0BBE  1683               	bsf	3,5	;RP0=1, select bank3
  4911  0BBF  058C               	andwf	12,f	;volsfr
  4912  0BC0  140C               	bsf	12,0	;volsfr
  4913  0BC1  1003               	clrc
  4914  0BC2  180C               	btfsc	12,0	;volsfr
  4915  0BC3  1403               	setc
  4916  0BC4  1803               	skipnc
  4917  0BC5  3001               	movlw	1
  4918  0BC6  1283               	bcf	3,5	;RP0=0, select bank2
  4919  0BC7  080C               	movf	12,w	;volatile
  4920  0BC8  0008               	return
  4921  0BC9                     __end_of_eeprom_read:	
  4922  0BC9                     __ptext23:	
  4923 ;; *************** function ___bmul *****************
  4924 ;; Defined at:
  4925 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  multiplier      1    wreg     unsigned char 
  4928 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;  multiplier      1    2[BANK0 ] unsigned char 
  4931 ;;  product         1    1[BANK0 ] unsigned char 
  4932 ;; Return value:  Size  Location     Type
  4933 ;;                  1    wreg      unsigned char 
  4934 ;; Registers used:
  4935 ;;		wreg, status,2, status,0
  4936 ;; Tracked objects:
  4937 ;;		On entry : 300/800
  4938 ;;		On exit  : 300/0
  4939 ;;		Unchanged: 0/0
  4940 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  4941 ;;      Params:         0       1       0       0       0       0
  4942 ;;      Locals:         0       2       0       0       0       0
  4943 ;;      Temps:          0       0       0       0       0       0
  4944 ;;      Totals:         0       3       0       0       0       0
  4945 ;;Total ram usage:        3 bytes
  4946 ;; Hardware stack levels used:    1
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_WriteLongInt
  4951 ;;		_ReadVars
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           
  4956                           ;psect for function ___bmul
  4957  0BC9                     ___bmul:	
  4958                           
  4959                           ;incstack = 0
  4960                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4961                           ;___bmul@multiplier stored from wreg
  4962  0BC9  00AE               	movwf	___bmul@multiplier
  4963  0BCA  01AD               	clrf	___bmul@product
  4964  0BCB                     l2895:	
  4965  0BCB  082C               	movf	___bmul@multiplicand,w
  4966  0BCC  182E               	btfsc	___bmul@multiplier,0
  4967  0BCD  07AD               	addwf	___bmul@product,f
  4968  0BCE  1003               	clrc
  4969  0BCF  0DAC               	rlf	___bmul@multiplicand,f
  4970  0BD0  1003               	clrc
  4971  0BD1  0CAE               	rrf	___bmul@multiplier,f
  4972  0BD2  082E               	movf	___bmul@multiplier,w
  4973  0BD3  1D03               	btfss	3,2
  4974  0BD4  2BCB               	goto	l2895
  4975  0BD5  082D               	movf	___bmul@product,w
  4976  0BD6  0008               	return
  4977  0BD7                     __end_of___bmul:	
  4978  0BD7                     PL16:	
  4979  0BD7  1003               	clrc
  4980  0BD8  0DAF               	rlf	??_ReadVars,f
  4981  0BD9  072F               	addwf	??_ReadVars,w
  4982  0BDA  00B0               	movwf	??_ReadVars+1
  4983  0BDB  083E               	movf	ReadVars@j,w
  4984  0BDC  0730               	addwf	??_ReadVars+1,w
  4985  0BDD  00B1               	movwf	??_ReadVars+2
  4986  0BDE  0084               	movwf	4
  4987  0BDF  3007               	movlw	7
  4988  0BE0  00AC               	movwf	___bmul@multiplicand
  4989  0BE1  083F               	movf	ReadVars@i,w
  4990  0BE2  0008               	return
  4991  0BE3                     __end_ofPL16:	
  4992  0BE3                     PL24:	
  4993  0BE3  1283               	bcf	3,5	;RP0=0, select bank0
  4994  0BE4  1303               	bcf	3,6	;RP1=0, select bank0
  4995  0BE5  1285               	bcf	5,5	;volatile
  4996  0BE6  1205               	bcf	5,4	;volatile
  4997  0BE7  1585               	bsf	5,3	;volatile
  4998  0BE8  1505               	bsf	5,2	;volatile
  4999  0BE9  1085               	bcf	5,1	;volatile
  5000  0BEA  1005               	bcf	5,0	;volatile
  5001  0BEB  0008               	return
  5002  0BEC                     __end_ofPL24:	
  5003  0BEC                     PL26:	
  5004  0BEC  1283               	bcf	3,5	;RP0=0, select bank0
  5005  0BED  1303               	bcf	3,6	;RP1=0, select bank0
  5006  0BEE  1285               	bcf	5,5	;volatile
  5007  0BEF  1205               	bcf	5,4	;volatile
  5008  0BF0  1585               	bsf	5,3	;volatile
  5009  0BF1  1105               	bcf	5,2	;volatile
  5010  0BF2  1085               	bcf	5,1	;volatile
  5011  0BF3  1005               	bcf	5,0	;volatile
  5012  0BF4  0008               	return
  5013  0BF5                     __end_ofPL26:	
  5014  0BF5                     PL30:	
  5015  0BF5  0837               	movf	WriteLongInt@Val+3,w
  5016  0BF6  00F7               	movwf	___aldiv@dividend+3
  5017  0BF7  0836               	movf	WriteLongInt@Val+2,w
  5018  0BF8  00F6               	movwf	___aldiv@dividend+2
  5019  0BF9  0835               	movf	WriteLongInt@Val+1,w
  5020  0BFA  00F5               	movwf	___aldiv@dividend+1
  5021  0BFB  0834               	movf	WriteLongInt@Val,w
  5022  0BFC  00F4               	movwf	___aldiv@dividend
  5023  0BFD  0008               	return
  5024  0BFE                     __end_ofPL30:	
  5025  0BFE                     PL32:	
  5026  0BFE  1285               	bcf	5,5	;volatile
  5027  0BFF  1205               	bcf	5,4	;volatile
  5028  0C00  1185               	bcf	5,3	;volatile
  5029  0C01  1105               	bcf	5,2	;volatile
  5030  0C02  1085               	bcf	5,1	;volatile
  5031  0C03  1005               	bcf	5,0	;volatile
  5032  0C04  0008               	return
  5033  0C05                     __end_ofPL32:	
  5034  0C05                     PL34:	
  5035  0C05  0871               	movf	Lcd_CharCP@c,w
  5036  0C06  00F0               	movwf	??_Lcd_CharCP
  5037  0C07  1003               	clrc
  5038  0C08  0CF0               	rrf	??_Lcd_CharCP,f
  5039  0C09  1003               	clrc
  5040  0C0A  0CF0               	rrf	??_Lcd_CharCP,f
  5041  0C0B  0008               	return
  5042  0C0C                     __end_ofPL34:	
  5043  0C0C                     PL36:	
  5044  0C0C  0871               	movf	Lcd_Command@command,w
  5045  0C0D  00F0               	movwf	??_Lcd_Command
  5046  0C0E  1003               	clrc
  5047  0C0F  0CF0               	rrf	??_Lcd_Command,f
  5048  0C10  1003               	clrc
  5049  0C11  0CF0               	rrf	??_Lcd_Command,f
  5050  0C12  0008               	return
  5051  0C13                     __end_ofPL36:	
  5052                           
  5053                           	psect	text5
  5054  1754                     __ptext5:	
  5055 ;; *************** function _UART_ReadValidTimeFromGPS_TO *****************
  5056 ;; Defined at:
  5057 ;;		line 114 in file "libs/gsk_usart.c"
  5058 ;; Parameters:    Size  Location     Type
  5059 ;;  Output          1    wreg     PTR unsigned char 
  5060 ;;		 -> main@GPSData(6), 
  5061 ;;  TimeOut         1    8[COMMON] unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  Output          1    9[COMMON] PTR unsigned char 
  5064 ;;		 -> main@GPSData(6), 
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      unsigned char 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 300/A00
  5071 ;;		On exit  : B00/800
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5074 ;;      Params:         1       0       0       0       0       0
  5075 ;;      Locals:         1       0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0
  5077 ;;      Totals:         2       0       0       0       0       0
  5078 ;;Total ram usage:        2 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    2
  5081 ;; This function calls:
  5082 ;;		_IsValidGPS
  5083 ;;		_UART_ReadFromGPS_TO
  5084 ;; This function is called by:
  5085 ;;		_main
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           
  5090                           ;psect for function _UART_ReadValidTimeFromGPS_TO
  5091  1754                     _UART_ReadValidTimeFromGPS_TO:	
  5092                           
  5093                           ;incstack = 0
  5094                           ; Regs used in _UART_ReadValidTimeFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstac
      +                          k]
  5095                           ;UART_ReadValidTimeFromGPS_TO@Output stored from wreg
  5096  1754  00F9               	movwf	UART_ReadValidTimeFromGPS_TO@Output
  5097                           
  5098                           ;gsk_usart.c: 115: UART_ReadFromGPS_TO (Output, TimeOut);
  5099  1755  0878               	movf	UART_ReadValidTimeFromGPS_TO@TimeOut,w
  5100  1756  00F1               	movwf	UART_ReadFromGPS_TO@TimeOut
  5101  1757  0879               	movf	UART_ReadValidTimeFromGPS_TO@Output,w
  5102  1758  27B0  160A  118A   	fcall	_UART_ReadFromGPS_TO
  5103                           
  5104                           ;gsk_usart.c: 116: return IsValidGPS(Output);
  5105                           ;	Return value of _UART_ReadValidTimeFromGPS_TO is never used
  5106  175B  0879               	movf	UART_ReadValidTimeFromGPS_TO@Output,w
  5107  175C  2F5D               	ljmp	_IsValidGPS
  5108  175D                     __end_of_UART_ReadValidTimeFromGPS_TO:	
  5109  175D                     __ptext8:	
  5110 ;; *************** function _IsValidGPS *****************
  5111 ;; Defined at:
  5112 ;;		line 120 in file "libs/gsk_usart.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;  GPSData         1    wreg     PTR unsigned char 
  5115 ;;		 -> main@GPSData(6), 
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;  GPSData         1    1[COMMON] PTR unsigned char 
  5118 ;;		 -> main@GPSData(6), 
  5119 ;;  Result          1    0[COMMON] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      unsigned char 
  5122 ;; Registers used:
  5123 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5124 ;; Tracked objects:
  5125 ;;		On entry : 300/800
  5126 ;;		On exit  : B00/800
  5127 ;;		Unchanged: 300/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5129 ;;      Params:         0       0       0       0       0       0
  5130 ;;      Locals:         2       0       0       0       0       0
  5131 ;;      Temps:          0       0       0       0       0       0
  5132 ;;      Totals:         2       0       0       0       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; This function calls:
  5136 ;;		Nothing
  5137 ;; This function is called by:
  5138 ;;		_UART_ReadValidTimeFromGPS_TO
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           
  5143                           ;psect for function _IsValidGPS
  5144  175D                     _IsValidGPS:	
  5145                           
  5146                           ;incstack = 0
  5147                           ; Regs used in _IsValidGPS: [wreg-fsr0h+status,2+status,0]
  5148                           ;IsValidGPS@GPSData stored from wreg
  5149  175D  00F1               	movwf	IsValidGPS@GPSData
  5150                           
  5151                           ;gsk_usart.c: 121: bool Result;
  5152                           ;gsk_usart.c: 122: if (GPSData[0]<0x30 || GPSData[0]>0x32)
  5153  175E  0084               	movwf	4
  5154  175F  3030               	movlw	48
  5155  1760  1783               	bsf	3,7	;select IRP bank2
  5156  1761  0200               	subwf	0,w
  5157  1762  1C03               	skipc
  5158  1763  2F69               	goto	l2829
  5159  1764  0871               	movf	IsValidGPS@GPSData,w
  5160  1765  0084               	movwf	4
  5161  1766  3033               	movlw	51
  5162  1767  0200               	subwf	0,w
  5163  1768  1803               	btfsc	3,0
  5164  1769                     l2829:	
  5165                           
  5166                           ;gsk_usart.c: 123: Result = 0;
  5167  1769  01F0               	clrf	IsValidGPS@Result
  5168                           
  5169                           ;gsk_usart.c: 124: if (GPSData[1]<0x30 || GPSData[1]>0x39)
  5170  176A  0A71               	incf	IsValidGPS@GPSData,w
  5171  176B  0084               	movwf	4
  5172  176C  3030               	movlw	48
  5173  176D  0200               	subwf	0,w
  5174  176E  1C03               	skipc
  5175  176F  2F75               	goto	l2835
  5176  1770  0A71               	incf	IsValidGPS@GPSData,w
  5177  1771  0084               	movwf	4
  5178  1772  303A               	movlw	58
  5179  1773  0200               	subwf	0,w
  5180  1774  1803               	btfsc	3,0
  5181  1775                     l2835:	
  5182                           
  5183                           ;gsk_usart.c: 125: Result = 0;
  5184  1775  01F0               	clrf	IsValidGPS@Result
  5185                           
  5186                           ;gsk_usart.c: 126: if (GPSData[2]<0x30 || GPSData[2]>0x36)
  5187  1776  0871               	movf	IsValidGPS@GPSData,w
  5188  1777  3E02               	addlw	2
  5189  1778  0084               	movwf	4
  5190  1779  3030               	movlw	48
  5191  177A  0200               	subwf	0,w
  5192  177B  1C03               	skipc
  5193  177C  2F83               	goto	l2841
  5194  177D  0871               	movf	IsValidGPS@GPSData,w
  5195  177E  3E02               	addlw	2
  5196  177F  0084               	movwf	4
  5197  1780  3037               	movlw	55
  5198  1781  0200               	subwf	0,w
  5199  1782  1803               	btfsc	3,0
  5200  1783                     l2841:	
  5201                           
  5202                           ;gsk_usart.c: 127: Result = 0;
  5203  1783  01F0               	clrf	IsValidGPS@Result
  5204                           
  5205                           ;gsk_usart.c: 128: if (GPSData[3]<0x30 || GPSData[3]>0x39)
  5206  1784  0871               	movf	IsValidGPS@GPSData,w
  5207  1785  3E03               	addlw	3
  5208  1786  0084               	movwf	4
  5209  1787  3030               	movlw	48
  5210  1788  0200               	subwf	0,w
  5211  1789  1C03               	skipc
  5212  178A  2F91               	goto	l2847
  5213  178B  0871               	movf	IsValidGPS@GPSData,w
  5214  178C  3E03               	addlw	3
  5215  178D  0084               	movwf	4
  5216  178E  303A               	movlw	58
  5217  178F  0200               	subwf	0,w
  5218  1790  1803               	btfsc	3,0
  5219  1791                     l2847:	
  5220                           
  5221                           ;gsk_usart.c: 129: Result = 0;
  5222  1791  01F0               	clrf	IsValidGPS@Result
  5223                           
  5224                           ;gsk_usart.c: 130: if (GPSData[4]<0x30 || GPSData[4]>0x36)
  5225  1792  0871               	movf	IsValidGPS@GPSData,w
  5226  1793  3E04               	addlw	4
  5227  1794  0084               	movwf	4
  5228  1795  3030               	movlw	48
  5229  1796  0200               	subwf	0,w
  5230  1797  1C03               	skipc
  5231  1798  2F9F               	goto	l2853
  5232  1799  0871               	movf	IsValidGPS@GPSData,w
  5233  179A  3E04               	addlw	4
  5234  179B  0084               	movwf	4
  5235  179C  3037               	movlw	55
  5236  179D  0200               	subwf	0,w
  5237  179E  1803               	btfsc	3,0
  5238  179F                     l2853:	
  5239                           
  5240                           ;gsk_usart.c: 131: Result = 0;
  5241  179F  01F0               	clrf	IsValidGPS@Result
  5242                           
  5243                           ;gsk_usart.c: 132: if (GPSData[5]<0x30 || GPSData[5]>0x39)
  5244  17A0  0871               	movf	IsValidGPS@GPSData,w
  5245  17A1  3E05               	addlw	5
  5246  17A2  0084               	movwf	4
  5247  17A3  3030               	movlw	48
  5248  17A4  0200               	subwf	0,w
  5249  17A5  1C03               	skipc
  5250  17A6  2FAD               	goto	l2859
  5251  17A7  0871               	movf	IsValidGPS@GPSData,w
  5252  17A8  3E05               	addlw	5
  5253  17A9  0084               	movwf	4
  5254  17AA  303A               	movlw	58
  5255  17AB  0200               	subwf	0,w
  5256  17AC  1803               	btfsc	3,0
  5257  17AD                     l2859:	
  5258                           
  5259                           ;gsk_usart.c: 133: Result = 0;
  5260  17AD  01F0               	clrf	IsValidGPS@Result
  5261                           
  5262                           ;gsk_usart.c: 134: return Result;
  5263  17AE  0870               	movf	IsValidGPS@Result,w
  5264  17AF  0008               	return
  5265  17B0                     __end_of_IsValidGPS:	
  5266  17B0                     __ptext6:	
  5267 ;; *************** function _UART_ReadFromGPS_TO *****************
  5268 ;; Defined at:
  5269 ;;		line 80 in file "libs/gsk_usart.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;  Output          1    wreg     PTR unsigned char 
  5272 ;;		 -> main@GPSData(6), 
  5273 ;;  TimeOut         1    1[COMMON] unsigned char 
  5274 ;; Auto vars:     Size  Location     Type
  5275 ;;  Output          1    5[COMMON] PTR unsigned char 
  5276 ;;		 -> main@GPSData(6), 
  5277 ;;  i               2    3[COMMON] unsigned int 
  5278 ;;  Pos             1    7[COMMON] unsigned char 
  5279 ;;  TempChar        1    6[COMMON] unsigned char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 300/A00
  5286 ;;		On exit  : 300/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5289 ;;      Params:         1       0       0       0       0       0
  5290 ;;      Locals:         5       0       0       0       0       0
  5291 ;;      Temps:          1       0       0       0       0       0
  5292 ;;      Totals:         7       0       0       0       0       0
  5293 ;;Total ram usage:        7 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    1
  5296 ;; This function calls:
  5297 ;;		_UART_Read_TO
  5298 ;; This function is called by:
  5299 ;;		_UART_ReadValidTimeFromGPS_TO
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function _UART_ReadFromGPS_TO
  5305  17B0                     _UART_ReadFromGPS_TO:	
  5306                           
  5307                           ;incstack = 0
  5308                           ; Regs used in _UART_ReadFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5309                           ;UART_ReadFromGPS_TO@Output stored from wreg
  5310  17B0  00F5               	movwf	UART_ReadFromGPS_TO@Output
  5311                           
  5312                           ;gsk_usart.c: 81: Output[0]=0x00;
  5313  17B1  0084               	movwf	4
  5314  17B2  1783               	bsf	3,7	;select IRP bank2
  5315  17B3  0180               	clrf	0
  5316                           
  5317                           ;gsk_usart.c: 82: const char StartCode[7]="$GPRMC,";
  5318                           ;gsk_usart.c: 83: char Pos=0x00;
  5319  17B4  01F7               	clrf	UART_ReadFromGPS_TO@Pos
  5320                           
  5321                           ;gsk_usart.c: 85: CREN = 0;
  5322  17B5  1303               	bcf	3,6	;RP1=0, select bank0
  5323  17B6  1218               	bcf	24,4	;volatile
  5324                           
  5325                           ;gsk_usart.c: 86: CREN = 1;
  5326  17B7  1618               	bsf	24,4	;volatile
  5327                           
  5328                           ;gsk_usart.c: 87: for(uint16_t i=0; i<=768; i++) {
  5329  17B8  01F3               	clrf	UART_ReadFromGPS_TO@i
  5330  17B9  01F4               	clrf	UART_ReadFromGPS_TO@i+1
  5331  17BA                     l2797:	
  5332                           
  5333                           ;gsk_usart.c: 89: TempChar = UART_Read_TO(TimeOut);
  5334  17BA  0871               	movf	UART_ReadFromGPS_TO@TimeOut,w
  5335  17BB  27F1  160A  118A   	fcall	_UART_Read_TO
  5336  17BE  00F6               	movwf	UART_ReadFromGPS_TO@TempChar
  5337                           
  5338                           ;gsk_usart.c: 90: if ((Pos>=0x07) & (Pos<=0x0c)) {
  5339  17BF  3007               	movlw	7
  5340  17C0  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  5341  17C1  1C03               	skipc
  5342  17C2  2FD1               	goto	l2807
  5343  17C3  300D               	movlw	13
  5344  17C4  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  5345                           
  5346                           ;gsk_usart.c: 91: Output[Pos-0x07]= TempChar;
  5347  17C5  0877               	movf	UART_ReadFromGPS_TO@Pos,w
  5348  17C6  1803               	skipnc
  5349  17C7  2FD2               	goto	L12
  5350  17C8  0775               	addwf	UART_ReadFromGPS_TO@Output,w
  5351  17C9  00F2               	movwf	??_UART_ReadFromGPS_TO
  5352  17CA  3EF9               	addlw	-7
  5353  17CB  0084               	movwf	4
  5354  17CC  0876               	movf	UART_ReadFromGPS_TO@TempChar,w
  5355  17CD  1783               	bsf	3,7	;select IRP bank2
  5356  17CE  0080               	movwf	0
  5357  17CF                     l2805:	
  5358                           
  5359                           ;gsk_usart.c: 92: Pos++;
  5360  17CF  0AF7               	incf	UART_ReadFromGPS_TO@Pos,f
  5361                           
  5362                           ;gsk_usart.c: 93: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  5363  17D0  2FE5               	goto	l2821
  5364  17D1                     l2807:	
  5365  17D1  0877               	movf	UART_ReadFromGPS_TO@Pos,w
  5366  17D2                     L12:	
  5367  17D2  3E01               	addlw	low ((UART_ReadFromGPS_TO@StartCode-__stringbase)| (0+32768))
  5368  17D3  0084               	movwf	4
  5369  17D4  120A  158A  2000  160A  118A  	fcall	stringdir
  5370  17D9  0676               	xorwf	UART_ReadFromGPS_TO@TempChar,w
  5371  17DA  1D03               	skipz
  5372  17DB  2FE0               	goto	l2813
  5373  17DC  3007               	movlw	7
  5374  17DD  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  5375  17DE  1C03               	btfss	3,0
  5376  17DF  2FCF               	goto	l2805
  5377  17E0                     l2813:	
  5378  17E0  300D               	movlw	13
  5379  17E1  0277               	subwf	UART_ReadFromGPS_TO@Pos,w
  5380  17E2  1803               	btfsc	3,0
  5381  17E3  0008               	return
  5382                           
  5383                           ;gsk_usart.c: 97: else
  5384                           ;gsk_usart.c: 98: Pos=0;
  5385  17E4  01F7               	clrf	UART_ReadFromGPS_TO@Pos
  5386  17E5                     l2821:	
  5387  17E5  0AF3               	incf	UART_ReadFromGPS_TO@i,f
  5388  17E6  1903               	skipnz
  5389  17E7  0AF4               	incf	UART_ReadFromGPS_TO@i+1,f
  5390  17E8  3003               	movlw	3
  5391  17E9  0274               	subwf	UART_ReadFromGPS_TO@i+1,w
  5392  17EA  3001               	movlw	1
  5393  17EB  1903               	skipnz
  5394  17EC  0273               	subwf	UART_ReadFromGPS_TO@i,w
  5395  17ED  1C03               	skipc
  5396  17EE  2FBA               	goto	l2797
  5397                           
  5398                           ;gsk_usart.c: 99: }
  5399                           ;gsk_usart.c: 100: CREN = 0;
  5400  17EF  1218               	bcf	24,4	;volatile
  5401  17F0  0008               	return
  5402  17F1                     __end_of_UART_ReadFromGPS_TO:	
  5403  17F1                     __ptext7:	
  5404 ;; *************** function _UART_Read_TO *****************
  5405 ;; Defined at:
  5406 ;;		line 103 in file "libs/gsk_usart.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  TimeOut         1    wreg     unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  TimeOut         1    0[COMMON] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      unsigned char 
  5413 ;; Registers used:
  5414 ;;		wreg, status,2, status,0
  5415 ;; Tracked objects:
  5416 ;;		On entry : 100/800
  5417 ;;		On exit  : 300/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5420 ;;      Params:         0       0       0       0       0       0
  5421 ;;      Locals:         1       0       0       0       0       0
  5422 ;;      Temps:          0       0       0       0       0       0
  5423 ;;      Totals:         1       0       0       0       0       0
  5424 ;;Total ram usage:        1 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; This function calls:
  5427 ;;		Nothing
  5428 ;; This function is called by:
  5429 ;;		_UART_ReadFromGPS_TO
  5430 ;; This function uses a non-reentrant model
  5431 ;;
  5432                           
  5433                           
  5434                           ;psect for function _UART_Read_TO
  5435  17F1                     _UART_Read_TO:	
  5436                           
  5437                           ;incstack = 0
  5438                           ; Regs used in _UART_Read_TO: [wreg+status,2+status,0]
  5439                           ;UART_Read_TO@TimeOut stored from wreg
  5440  17F1  00F0               	movwf	UART_Read_TO@TimeOut
  5441                           
  5442                           ;gsk_usart.c: 104: while(!RCIF && TimeOut !=0) {
  5443  17F2  2FF8               	goto	l2699
  5444  17F3                     l2701:	
  5445  17F3  0870               	movf	UART_Read_TO@TimeOut,w
  5446  17F4  1903               	btfsc	3,2
  5447  17F5  2FFC               	goto	l553
  5448                           
  5449                           ;gsk_usart.c: 105: _delay((unsigned long)((1)*(4000000/4000000.0)));
  5450  17F6  0000               	nop
  5451                           
  5452                           ;gsk_usart.c: 106: TimeOut--;
  5453  17F7  03F0               	decf	UART_Read_TO@TimeOut,f
  5454  17F8                     l2699:	
  5455  17F8  1283               	bcf	3,5	;RP0=0, select bank0
  5456  17F9  1303               	bcf	3,6	;RP1=0, select bank0
  5457  17FA  1E8C               	btfss	12,5	;volatile
  5458  17FB  2FF3               	goto	l2701
  5459  17FC                     l553:	
  5460                           
  5461                           ;gsk_usart.c: 107: }
  5462                           ;gsk_usart.c: 108: if (RCIF)
  5463  17FC  1E8C               	btfss	12,5	;volatile
  5464  17FD  3441               	retlw	65
  5465                           
  5466                           ;gsk_usart.c: 109: return RCREG;
  5467  17FE  081A               	movf	26,w	;volatile
  5468  17FF  0008               	return
  5469  1800                     __end_of_UART_Read_TO:	
  5470                           ;gsk_usart.c: 110: else
  5471                           ;gsk_usart.c: 111: return 0x41;
  5472                           
  5473                           
  5474                           	psect	text9
  5475  0C13                     __ptext9:	
  5476 ;; *************** function _UART_Init *****************
  5477 ;; Defined at:
  5478 ;;		line 3 in file "libs/gsk_usart.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  baudrate        4    9[BANK1 ] const long 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  x               2   19[BANK1 ] unsigned int 
  5483 ;; Return value:  Size  Location     Type
  5484 ;;                  1    wreg      unsigned char 
  5485 ;; Registers used:
  5486 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5487 ;; Tracked objects:
  5488 ;;		On entry : 300/900
  5489 ;;		On exit  : 300/100
  5490 ;;		Unchanged: 0/0
  5491 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5492 ;;      Params:         0       0       4       0       0       0
  5493 ;;      Locals:         0       0       8       0       0       0
  5494 ;;      Temps:          0       0       0       0       0       0
  5495 ;;      Totals:         0       0      12       0       0       0
  5496 ;;Total ram usage:       12 bytes
  5497 ;; Hardware stack levels used:    1
  5498 ;; Hardware stack levels required when called:    4
  5499 ;; This function calls:
  5500 ;;		___altoft
  5501 ;;		___ftadd
  5502 ;;		___ftdiv
  5503 ;;		___ftmul
  5504 ;;		___fttol
  5505 ;;		_round
  5506 ;; This function is called by:
  5507 ;;		_main
  5508 ;; This function uses a non-reentrant model
  5509 ;;
  5510                           
  5511                           
  5512                           ;psect for function _UART_Init
  5513  0C13                     _UART_Init:	
  5514                           
  5515                           ;gsk_usart.c: 4: uint16_t x;
  5516                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5520  0C13  3024               	movlw	36
  5521  0C14  1283               	bcf	3,5	;RP0=0, select bank0
  5522  0C15  00BE               	movwf	___ftdiv@f1
  5523  0C16  3074               	movlw	116
  5524  0C17  00BF               	movwf	___ftdiv@f1+1
  5525  0C18  304A               	movlw	74
  5526  0C19  00C0               	movwf	___ftdiv@f1+2
  5527  0C1A  1683               	bsf	3,5	;RP0=1, select bank1
  5528  0C1B  085E               	movf	(UART_Init@baudrate+3)^(0+128),w
  5529  0C1C  00FB               	movwf	___altoft@c+3
  5530  0C1D  085D               	movf	(UART_Init@baudrate+2)^(0+128),w
  5531  0C1E  00FA               	movwf	___altoft@c+2
  5532  0C1F  085C               	movf	(UART_Init@baudrate+1)^(0+128),w
  5533  0C20  00F9               	movwf	___altoft@c+1
  5534  0C21  085B               	movf	UART_Init@baudrate^(0+128),w
  5535  0C22  00F8               	movwf	___altoft@c
  5536  0C23  25D5  120A  158A   	fcall	___altoft
  5537  0C26  27E9  120A  158A   	fcall	PL28	;call to abstracted procedure
  5538  0C29  3080               	movlw	128
  5539  0C2A  01AC               	clrf	___ftmul@f1
  5540  0C2B  00AD               	movwf	___ftmul@f1+1
  5541  0C2C  3040               	movlw	64
  5542  0C2D  00AE               	movwf	___ftmul@f1+2
  5543  0C2E  270B  120A  158A   	fcall	___ftmul
  5544  0C31  082C               	movf	?___ftmul,w
  5545  0C32  00BB               	movwf	___ftdiv@f2
  5546  0C33  082D               	movf	?___ftmul+1,w
  5547  0C34  00BC               	movwf	___ftdiv@f2+1
  5548  0C35  082E               	movf	?___ftmul+2,w
  5549  0C36  00BD               	movwf	___ftdiv@f2+2
  5550  0C37  26A1  120A  158A   	fcall	___ftdiv
  5551  0C3A  083B               	movf	?___ftdiv,w
  5552  0C3B  1683               	bsf	3,5	;RP0=1, select bank1
  5553  0C3C  00DF               	movwf	_UART_Init$1024^(0+128)
  5554  0C3D  1283               	bcf	3,5	;RP0=0, select bank0
  5555  0C3E  083C               	movf	?___ftdiv+1,w
  5556  0C3F  1683               	bsf	3,5	;RP0=1, select bank1
  5557  0C40  00E0               	movwf	(_UART_Init$1024+1)^(0+128)
  5558  0C41  1283               	bcf	3,5	;RP0=0, select bank0
  5559  0C42  083D               	movf	?___ftdiv+2,w
  5560  0C43  1683               	bsf	3,5	;RP0=1, select bank1
  5561  0C44  00E1               	movwf	(_UART_Init$1024+2)^(0+128)
  5562                           
  5563                           ;gsk_usart.c: 4: uint16_t x;
  5564                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  5565  0C45  085F               	movf	_UART_Init$1024^(0+128),w
  5566  0C46  1283               	bcf	3,5	;RP0=0, select bank0
  5567  0C47  00EB               	movwf	round@x
  5568  0C48  1683               	bsf	3,5	;RP0=1, select bank1
  5569  0C49  0860               	movf	(_UART_Init$1024+1)^(0+128),w
  5570  0C4A  1283               	bcf	3,5	;RP0=0, select bank0
  5571  0C4B  00EC               	movwf	round@x+1
  5572  0C4C  1683               	bsf	3,5	;RP0=1, select bank1
  5573  0C4D  0861               	movf	(_UART_Init$1024+2)^(0+128),w
  5574  0C4E  1283               	bcf	3,5	;RP0=0, select bank0
  5575  0C4F  00ED               	movwf	round@x+2
  5576  0C50  248F  120A  158A   	fcall	_round
  5577  0C53  086B               	movf	?_round,w
  5578  0C54  1683               	bsf	3,5	;RP0=1, select bank1
  5579  0C55  00E2               	movwf	_UART_Init$1025^(0+128)
  5580  0C56  1283               	bcf	3,5	;RP0=0, select bank0
  5581  0C57  086C               	movf	?_round+1,w
  5582  0C58  1683               	bsf	3,5	;RP0=1, select bank1
  5583  0C59  00E3               	movwf	(_UART_Init$1025+1)^(0+128)
  5584  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  5585  0C5B  086D               	movf	?_round+2,w
  5586  0C5C  1683               	bsf	3,5	;RP0=1, select bank1
  5587  0C5D  00E4               	movwf	(_UART_Init$1025+2)^(0+128)
  5588                           
  5589                           ;gsk_usart.c: 4: uint16_t x;
  5590                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  5591  0C5E  0862               	movf	_UART_Init$1025^(0+128),w
  5592  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  5593  0C60  00CD               	movwf	___ftadd@f2
  5594  0C61  1683               	bsf	3,5	;RP0=1, select bank1
  5595  0C62  0863               	movf	(_UART_Init$1025+1)^(0+128),w
  5596  0C63  1283               	bcf	3,5	;RP0=0, select bank0
  5597  0C64  00CE               	movwf	___ftadd@f2+1
  5598  0C65  1683               	bsf	3,5	;RP0=1, select bank1
  5599  0C66  0864               	movf	(_UART_Init$1025+2)^(0+128),w
  5600  0C67  1283               	bcf	3,5	;RP0=0, select bank0
  5601  0C68  00CF               	movwf	___ftadd@f2+2
  5602  0C69  3080               	movlw	128
  5603  0C6A  01CA               	clrf	___ftadd@f1
  5604  0C6B  00CB               	movwf	___ftadd@f1+1
  5605  0C6C  30BF               	movlw	191
  5606  0C6D  00CC               	movwf	___ftadd@f1+2
  5607  0C6E  2513  120A  158A   	fcall	___ftadd
  5608  0C71  084A               	movf	?___ftadd,w
  5609  0C72  00D6               	movwf	___fttol@f1
  5610  0C73  084B               	movf	?___ftadd+1,w
  5611  0C74  00D7               	movwf	___fttol@f1+1
  5612  0C75  084C               	movf	?___ftadd+2,w
  5613  0C76  00D8               	movwf	___fttol@f1+2
  5614  0C77  2604               	fcall	___fttol
  5615  0C78  0857               	movf	?___fttol+1,w
  5616  0C79  1683               	bsf	3,5	;RP0=1, select bank1
  5617  0C7A  00E6               	movwf	(UART_Init@x+1)^(0+128)
  5618  0C7B  1283               	bcf	3,5	;RP0=0, select bank0
  5619  0C7C  0856               	movf	?___fttol,w
  5620  0C7D  1683               	bsf	3,5	;RP0=1, select bank1
  5621  0C7E  00E5               	movwf	UART_Init@x^(0+128)
  5622                           
  5623                           ;gsk_usart.c: 6: SPBRG = x;
  5624  0C7F  0099               	movwf	25	;volatile
  5625                           
  5626                           ;gsk_usart.c: 7: SPBRGH = (x>>8);
  5627  0C80  0866               	movf	(UART_Init@x^(0+128)+1),w
  5628  0C81  009A               	movwf	26	;volatile
  5629                           
  5630                           ;gsk_usart.c: 8: BRGH = 1;
  5631  0C82  1518               	bsf	24,2	;volatile
  5632                           
  5633                           ;gsk_usart.c: 9: BRG16 = 1;
  5634  0C83  1703               	bsf	3,6	;RP1=1, select bank3
  5635  0C84  1587               	bsf	7,3	;volatile
  5636                           
  5637                           ;gsk_usart.c: 10: CREN = 1;
  5638  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  5639  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  5640  0C87  1618               	bsf	24,4	;volatile
  5641                           
  5642                           ;gsk_usart.c: 11: SYNC = 0;
  5643  0C88  1683               	bsf	3,5	;RP0=1, select bank1
  5644  0C89  1218               	bcf	24,4	;volatile
  5645                           
  5646                           ;gsk_usart.c: 12: SPEN = 1;
  5647  0C8A  1283               	bcf	3,5	;RP0=0, select bank0
  5648  0C8B  1798               	bsf	24,7	;volatile
  5649                           
  5650                           ;gsk_usart.c: 15: TXEN = 1;
  5651  0C8C  1683               	bsf	3,5	;RP0=1, select bank1
  5652  0C8D  1698               	bsf	24,5	;volatile
  5653  0C8E  0008               	return
  5654  0C8F                     __end_of_UART_Init:	
  5655  0C8F                     __ptext10:	
  5656 ;; *************** function _round *****************
  5657 ;; Defined at:
  5658 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\round.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  x               3   63[BANK0 ] unsigned char 
  5661 ;; Auto vars:     Size  Location     Type
  5662 ;;  f               3    6[BANK1 ] unsigned char 
  5663 ;; Return value:  Size  Location     Type
  5664 ;;                  3   63[BANK0 ] unsigned char 
  5665 ;; Registers used:
  5666 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5667 ;; Tracked objects:
  5668 ;;		On entry : 300/800
  5669 ;;		On exit  : 300/0
  5670 ;;		Unchanged: 0/0
  5671 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5672 ;;      Params:         0       3       0       0       0       0
  5673 ;;      Locals:         0       0       3       0       0       0
  5674 ;;      Temps:          0       0       0       0       0       0
  5675 ;;      Totals:         0       3       3       0       0       0
  5676 ;;Total ram usage:        6 bytes
  5677 ;; Hardware stack levels used:    1
  5678 ;; Hardware stack levels required when called:    3
  5679 ;; This function calls:
  5680 ;;		___ftadd
  5681 ;;		___ftsub
  5682 ;;		_trunc
  5683 ;; This function is called by:
  5684 ;;		_UART_Init
  5685 ;; This function uses a non-reentrant model
  5686 ;;
  5687                           
  5688                           
  5689                           ;psect for function _round
  5690  0C8F                     _round:	
  5691                           
  5692                           ;incstack = 0
  5693                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5694  0C8F  27F2  120A  158A   	fcall	PL38	;call to abstracted procedure
  5695  0C92  24DA  120A  158A   	fcall	_trunc
  5696  0C95  0863               	movf	?_trunc,w
  5697  0C96  1683               	bsf	3,5	;RP0=1, select bank1
  5698  0C97  00D2               	movwf	___ftsub@f2^(0+128)
  5699  0C98  1283               	bcf	3,5	;RP0=0, select bank0
  5700  0C99  0864               	movf	?_trunc+1,w
  5701  0C9A  1683               	bsf	3,5	;RP0=1, select bank1
  5702  0C9B  00D3               	movwf	(___ftsub@f2+1)^(0+128)
  5703  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  5704  0C9D  0865               	movf	?_trunc+2,w
  5705  0C9E  1683               	bsf	3,5	;RP0=1, select bank1
  5706  0C9F  00D4               	movwf	(___ftsub@f2+2)^(0+128)
  5707  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  5708  0CA1  086B               	movf	round@x,w
  5709  0CA2  1683               	bsf	3,5	;RP0=1, select bank1
  5710  0CA3  00D5               	movwf	___ftsub@f1^(0+128)
  5711  0CA4  1283               	bcf	3,5	;RP0=0, select bank0
  5712  0CA5  086C               	movf	round@x+1,w
  5713  0CA6  1683               	bsf	3,5	;RP0=1, select bank1
  5714  0CA7  00D6               	movwf	(___ftsub@f1+1)^(0+128)
  5715  0CA8  1283               	bcf	3,5	;RP0=0, select bank0
  5716  0CA9  086D               	movf	round@x+2,w
  5717  0CAA  1683               	bsf	3,5	;RP0=1, select bank1
  5718  0CAB  00D7               	movwf	(___ftsub@f1+2)^(0+128)
  5719  0CAC  277A  120A  158A   	fcall	___ftsub
  5720  0CAF  0852               	movf	?___ftsub^(0+128),w
  5721  0CB0  00D8               	movwf	round@f^(0+128)
  5722  0CB1  0853               	movf	(?___ftsub+1)^(0+128),w
  5723  0CB2  00D9               	movwf	(round@f+1)^(0+128)
  5724  0CB3  0854               	movf	(?___ftsub+2)^(0+128),w
  5725  0CB4  00DA               	movwf	(round@f+2)^(0+128)
  5726  0CB5  0858               	movf	round@f^(0+128),w
  5727  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  5728  0CB7  00CA               	movwf	___ftadd@f1
  5729  0CB8  1683               	bsf	3,5	;RP0=1, select bank1
  5730  0CB9  0859               	movf	(round@f+1)^(0+128),w
  5731  0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  5732  0CBB  00CB               	movwf	___ftadd@f1+1
  5733  0CBC  1683               	bsf	3,5	;RP0=1, select bank1
  5734  0CBD  085A               	movf	(round@f+2)^(0+128),w
  5735  0CBE  1283               	bcf	3,5	;RP0=0, select bank0
  5736  0CBF  00CC               	movwf	___ftadd@f1+2
  5737  0CC0  086B               	movf	round@x,w
  5738  0CC1  00CD               	movwf	___ftadd@f2
  5739  0CC2  086C               	movf	round@x+1,w
  5740  0CC3  00CE               	movwf	___ftadd@f2+1
  5741  0CC4  086D               	movf	round@x+2,w
  5742  0CC5  00CF               	movwf	___ftadd@f2+2
  5743  0CC6  2513  120A  158A   	fcall	___ftadd
  5744  0CC9  084A               	movf	?___ftadd,w
  5745  0CCA  00EB               	movwf	round@x
  5746  0CCB  084B               	movf	?___ftadd+1,w
  5747  0CCC  00EC               	movwf	round@x+1
  5748  0CCD  084C               	movf	?___ftadd+2,w
  5749  0CCE  00ED               	movwf	round@x+2
  5750  0CCF  27F2  120A  158A   	fcall	PL38	;call to abstracted procedure
  5751  0CD2  24DA               	fcall	_trunc
  5752  0CD3  0863               	movf	?_trunc,w
  5753  0CD4  00EB               	movwf	?_round
  5754  0CD5  0864               	movf	?_trunc+1,w
  5755  0CD6  00EC               	movwf	?_round+1
  5756  0CD7  0865               	movf	?_trunc+2,w
  5757  0CD8  00ED               	movwf	?_round+2
  5758  0CD9  0008               	return
  5759  0CDA                     __end_of_round:	
  5760  0CDA                     __ptext11:	
  5761 ;; *************** function _trunc *****************
  5762 ;; Defined at:
  5763 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\trunc.c"
  5764 ;; Parameters:    Size  Location     Type
  5765 ;;  x               3   55[BANK0 ] unsigned char 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  i               3   58[BANK0 ] unsigned char 
  5768 ;;  expon           2   61[BANK0 ] int 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  3   55[BANK0 ] int 
  5771 ;; Registers used:
  5772 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 300/800
  5775 ;;		On exit  : 300/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5778 ;;      Params:         0       3       0       0       0       0
  5779 ;;      Locals:         0       5       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       0       0
  5781 ;;      Totals:         0       8       0       0       0       0
  5782 ;;Total ram usage:        8 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    2
  5785 ;; This function calls:
  5786 ;;		___altoft
  5787 ;;		___fttol
  5788 ;;		_frexp
  5789 ;; This function is called by:
  5790 ;;		_round
  5791 ;; This function uses a non-reentrant model
  5792 ;;
  5793                           
  5794                           
  5795                           ;psect for function _trunc
  5796  0CDA                     _trunc:	
  5797                           
  5798                           ;incstack = 0
  5799                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5800  0CDA  0863               	movf	trunc@x,w
  5801  0CDB  00F0               	movwf	frexp@value
  5802  0CDC  0864               	movf	trunc@x+1,w
  5803  0CDD  00F1               	movwf	frexp@value+1
  5804  0CDE  0865               	movf	trunc@x+2,w
  5805  0CDF  00F2               	movwf	frexp@value+2
  5806  0CE0  3069               	movlw	(low (trunc@expon| 0))& (0+255)
  5807  0CE1  00F3               	movwf	frexp@eptr
  5808  0CE2  27A5  120A  158A   	fcall	_frexp
  5809  0CE5  1FEA               	btfss	trunc@expon+1,7
  5810  0CE6  2CEB               	goto	l2727
  5811  0CE7  01E3               	clrf	?_trunc
  5812  0CE8  01E4               	clrf	?_trunc+1
  5813  0CE9  01E5               	clrf	?_trunc+2
  5814  0CEA  0008               	return
  5815  0CEB                     l2727:	
  5816  0CEB  3000               	movlw	0
  5817  0CEC  026A               	subwf	trunc@expon+1,w
  5818  0CED  3015               	movlw	21
  5819  0CEE  1903               	skipnz
  5820  0CEF  0269               	subwf	trunc@expon,w
  5821  0CF0  1803               	btfsc	3,0
  5822  0CF1  0008               	return
  5823  0CF2  0863               	movf	trunc@x,w
  5824  0CF3  00D6               	movwf	___fttol@f1
  5825  0CF4  0864               	movf	trunc@x+1,w
  5826  0CF5  00D7               	movwf	___fttol@f1+1
  5827  0CF6  0865               	movf	trunc@x+2,w
  5828  0CF7  00D8               	movwf	___fttol@f1+2
  5829  0CF8  2604  120A  158A   	fcall	___fttol
  5830  0CFB  0859               	movf	?___fttol+3,w
  5831  0CFC  00FB               	movwf	___altoft@c+3
  5832  0CFD  0858               	movf	?___fttol+2,w
  5833  0CFE  00FA               	movwf	___altoft@c+2
  5834  0CFF  0857               	movf	?___fttol+1,w
  5835  0D00  00F9               	movwf	___altoft@c+1
  5836  0D01  0856               	movf	?___fttol,w
  5837  0D02  00F8               	movwf	___altoft@c
  5838  0D03  25D5               	fcall	___altoft
  5839  0D04  0878               	movf	?___altoft,w
  5840  0D05  1283               	bcf	3,5	;RP0=0, select bank0
  5841  0D06  1303               	bcf	3,6	;RP1=0, select bank0
  5842  0D07  00E6               	movwf	trunc@i
  5843  0D08  0879               	movf	?___altoft+1,w
  5844  0D09  00E7               	movwf	trunc@i+1
  5845  0D0A  087A               	movf	?___altoft+2,w
  5846  0D0B  00E8               	movwf	trunc@i+2
  5847  0D0C  0866               	movf	trunc@i,w
  5848  0D0D  00E3               	movwf	?_trunc
  5849  0D0E  0867               	movf	trunc@i+1,w
  5850  0D0F  00E4               	movwf	?_trunc+1
  5851  0D10  0868               	movf	trunc@i+2,w
  5852  0D11  00E5               	movwf	?_trunc+2
  5853  0D12  0008               	return
  5854  0D13                     __end_of_trunc:	
  5855  0D13                     __ptext16:	
  5856 ;; *************** function ___ftadd *****************
  5857 ;; Defined at:
  5858 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  f1              3   30[BANK0 ] float 
  5861 ;;  f2              3   33[BANK0 ] float 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  exp1            1   41[BANK0 ] unsigned char 
  5864 ;;  exp2            1   40[BANK0 ] unsigned char 
  5865 ;;  sign            1   39[BANK0 ] unsigned char 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  3   30[BANK0 ] float 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, pclath, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 300/800
  5872 ;;		On exit  : 300/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  5875 ;;      Params:         0       6       0       0       0       0
  5876 ;;      Locals:         0       3       0       0       0       0
  5877 ;;      Temps:          0       3       0       0       0       0
  5878 ;;      Totals:         0      12       0       0       0       0
  5879 ;;Total ram usage:       12 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    1
  5882 ;; This function calls:
  5883 ;;		___ftpack
  5884 ;; This function is called by:
  5885 ;;		_UART_Init
  5886 ;;		___ftsub
  5887 ;;		_round
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           
  5892                           ;psect for function ___ftadd
  5893  0D13                     ___ftadd:	
  5894                           
  5895                           ;incstack = 0
  5896                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5897  0D13  084A               	movf	___ftadd@f1,w
  5898  0D14  00D0               	movwf	??___ftadd
  5899  0D15  084B               	movf	___ftadd@f1+1,w
  5900  0D16  00D1               	movwf	??___ftadd+1
  5901  0D17  084C               	movf	___ftadd@f1+2,w
  5902  0D18  00D2               	movwf	??___ftadd+2
  5903  0D19  1003               	clrc
  5904  0D1A  0D51               	rlf	??___ftadd+1,w
  5905  0D1B  0D52               	rlf	??___ftadd+2,w
  5906  0D1C  00D5               	movwf	___ftadd@exp1
  5907  0D1D  084D               	movf	___ftadd@f2,w
  5908  0D1E  00D0               	movwf	??___ftadd
  5909  0D1F  084E               	movf	___ftadd@f2+1,w
  5910  0D20  00D1               	movwf	??___ftadd+1
  5911  0D21  084F               	movf	___ftadd@f2+2,w
  5912  0D22  00D2               	movwf	??___ftadd+2
  5913  0D23  1003               	clrc
  5914  0D24  0D51               	rlf	??___ftadd+1,w
  5915  0D25  0D52               	rlf	??___ftadd+2,w
  5916  0D26  00D4               	movwf	___ftadd@exp2
  5917  0D27  0855               	movf	___ftadd@exp1,w
  5918  0D28  1903               	btfsc	3,2
  5919  0D29  2D36               	goto	l2489
  5920  0D2A  0854               	movf	___ftadd@exp2,w
  5921  0D2B  0255               	subwf	___ftadd@exp1,w
  5922  0D2C  0854               	movf	___ftadd@exp2,w
  5923  0D2D  1803               	skipnc
  5924  0D2E  2D3E               	goto	L13
  5925  0D2F  00D0               	movwf	??___ftadd
  5926  0D30  0855               	movf	___ftadd@exp1,w
  5927  0D31  02D0               	subwf	??___ftadd,f
  5928  0D32  3019               	movlw	25
  5929  0D33  0250               	subwf	??___ftadd,w
  5930  0D34  1C03               	skipc
  5931  0D35  2D3D               	goto	l2493
  5932  0D36                     l2489:	
  5933  0D36  084D               	movf	___ftadd@f2,w
  5934  0D37  00CA               	movwf	?___ftadd
  5935  0D38  084E               	movf	___ftadd@f2+1,w
  5936  0D39  00CB               	movwf	?___ftadd+1
  5937  0D3A  084F               	movf	___ftadd@f2+2,w
  5938  0D3B  00CC               	movwf	?___ftadd+2
  5939  0D3C  0008               	return
  5940  0D3D                     l2493:	
  5941  0D3D  0854               	movf	___ftadd@exp2,w
  5942  0D3E                     L13:	
  5943  0D3E  1903               	btfsc	3,2
  5944  0D3F  0008               	return
  5945  0D40  0855               	movf	___ftadd@exp1,w
  5946  0D41  0254               	subwf	___ftadd@exp2,w
  5947  0D42  1803               	skipnc
  5948  0D43  2D4C               	goto	l2499
  5949  0D44  0855               	movf	___ftadd@exp1,w
  5950  0D45  00D0               	movwf	??___ftadd
  5951  0D46  0854               	movf	___ftadd@exp2,w
  5952  0D47  02D0               	subwf	??___ftadd,f
  5953  0D48  3019               	movlw	25
  5954  0D49  0250               	subwf	??___ftadd,w
  5955  0D4A  1803               	btfsc	3,0
  5956  0D4B  0008               	return
  5957  0D4C                     l2499:	
  5958  0D4C  3006               	movlw	6
  5959  0D4D  00D3               	movwf	___ftadd@sign
  5960  0D4E  1BCC               	btfsc	___ftadd@f1+2,7
  5961  0D4F  17D3               	bsf	___ftadd@sign,7
  5962  0D50  1BCF               	btfsc	___ftadd@f2+2,7
  5963  0D51  1753               	bsf	___ftadd@sign,6
  5964  0D52  17CB               	bsf	___ftadd@f1+1,7
  5965  0D53  01CC               	clrf	___ftadd@f1+2
  5966  0D54  17CE               	bsf	___ftadd@f2+1,7
  5967  0D55  01CF               	clrf	___ftadd@f2+2
  5968  0D56  0854               	movf	___ftadd@exp2,w
  5969  0D57  0255               	subwf	___ftadd@exp1,w
  5970  0D58  1803               	skipnc
  5971  0D59  2D73               	goto	l2521
  5972  0D5A                     l2511:	
  5973  0D5A  1003               	clrc
  5974  0D5B  0DCD               	rlf	___ftadd@f2,f
  5975  0D5C  0DCE               	rlf	___ftadd@f2+1,f
  5976  0D5D  0DCF               	rlf	___ftadd@f2+2,f
  5977  0D5E  03D4               	decf	___ftadd@exp2,f
  5978  0D5F  0854               	movf	___ftadd@exp2,w
  5979  0D60  0655               	xorwf	___ftadd@exp1,w
  5980  0D61  1903               	skipnz
  5981  0D62  2D6E               	goto	l2519
  5982  0D63  03D3               	decf	___ftadd@sign,f
  5983  0D64  0853               	movf	___ftadd@sign,w
  5984  0D65  3907               	andlw	7
  5985  0D66  1903               	btfsc	3,2
  5986  0D67  2D6E               	goto	l2519
  5987  0D68  2D5A               	goto	l2511
  5988  0D69                     l2517:	
  5989  0D69  1003               	clrc
  5990  0D6A  0CCC               	rrf	___ftadd@f1+2,f
  5991  0D6B  0CCB               	rrf	___ftadd@f1+1,f
  5992  0D6C  0CCA               	rrf	___ftadd@f1,f
  5993  0D6D  0AD5               	incf	___ftadd@exp1,f
  5994  0D6E                     l2519:	
  5995  0D6E  0855               	movf	___ftadd@exp1,w
  5996  0D6F  0654               	xorwf	___ftadd@exp2,w
  5997  0D70  1903               	btfsc	3,2
  5998  0D71  2D8F               	goto	l985
  5999  0D72  2D69               	goto	l2517
  6000  0D73                     l2521:	
  6001  0D73  0855               	movf	___ftadd@exp1,w
  6002  0D74  0254               	subwf	___ftadd@exp2,w
  6003  0D75  1803               	skipnc
  6004  0D76  2D8F               	goto	l985
  6005  0D77                     l2523:	
  6006  0D77  1003               	clrc
  6007  0D78  0DCA               	rlf	___ftadd@f1,f
  6008  0D79  0DCB               	rlf	___ftadd@f1+1,f
  6009  0D7A  0DCC               	rlf	___ftadd@f1+2,f
  6010  0D7B  03D5               	decf	___ftadd@exp1,f
  6011  0D7C  0854               	movf	___ftadd@exp2,w
  6012  0D7D  0655               	xorwf	___ftadd@exp1,w
  6013  0D7E  1903               	skipnz
  6014  0D7F  2D8B               	goto	l2531
  6015  0D80  03D3               	decf	___ftadd@sign,f
  6016  0D81  0853               	movf	___ftadd@sign,w
  6017  0D82  3907               	andlw	7
  6018  0D83  1903               	btfsc	3,2
  6019  0D84  2D8B               	goto	l2531
  6020  0D85  2D77               	goto	l2523
  6021  0D86                     l2529:	
  6022  0D86  1003               	clrc
  6023  0D87  0CCF               	rrf	___ftadd@f2+2,f
  6024  0D88  0CCE               	rrf	___ftadd@f2+1,f
  6025  0D89  0CCD               	rrf	___ftadd@f2,f
  6026  0D8A  0AD4               	incf	___ftadd@exp2,f
  6027  0D8B                     l2531:	
  6028  0D8B  0855               	movf	___ftadd@exp1,w
  6029  0D8C  0654               	xorwf	___ftadd@exp2,w
  6030  0D8D  1D03               	skipz
  6031  0D8E  2D86               	goto	l2529
  6032  0D8F                     l985:	
  6033  0D8F  1FD3               	btfss	___ftadd@sign,7
  6034  0D90  2D9A               	goto	l2537
  6035  0D91  30FF               	movlw	255
  6036  0D92  06CA               	xorwf	___ftadd@f1,f
  6037  0D93  06CB               	xorwf	___ftadd@f1+1,f
  6038  0D94  06CC               	xorwf	___ftadd@f1+2,f
  6039  0D95  0ACA               	incf	___ftadd@f1,f
  6040  0D96  1903               	skipnz
  6041  0D97  0ACB               	incf	___ftadd@f1+1,f
  6042  0D98  1903               	skipnz
  6043  0D99  0ACC               	incf	___ftadd@f1+2,f
  6044  0D9A                     l2537:	
  6045  0D9A  1F53               	btfss	___ftadd@sign,6
  6046  0D9B  2DA5               	goto	l2543
  6047  0D9C  30FF               	movlw	255
  6048  0D9D  06CD               	xorwf	___ftadd@f2,f
  6049  0D9E  06CE               	xorwf	___ftadd@f2+1,f
  6050  0D9F  06CF               	xorwf	___ftadd@f2+2,f
  6051  0DA0  0ACD               	incf	___ftadd@f2,f
  6052  0DA1  1903               	skipnz
  6053  0DA2  0ACE               	incf	___ftadd@f2+1,f
  6054  0DA3  1903               	skipnz
  6055  0DA4  0ACF               	incf	___ftadd@f2+2,f
  6056  0DA5                     l2543:	
  6057  0DA5  01D3               	clrf	___ftadd@sign
  6058  0DA6  084A               	movf	___ftadd@f1,w
  6059  0DA7  07CD               	addwf	___ftadd@f2,f
  6060  0DA8  084B               	movf	___ftadd@f1+1,w
  6061  0DA9  1103               	clrz
  6062  0DAA  1803               	skipnc
  6063  0DAB  0A4B               	incf	___ftadd@f1+1,w
  6064  0DAC  1D03               	btfss	3,2
  6065  0DAD  07CE               	addwf	___ftadd@f2+1,f
  6066  0DAE  084C               	movf	___ftadd@f1+2,w
  6067  0DAF  1103               	clrz
  6068  0DB0  1803               	skipnc
  6069  0DB1  0A4C               	incf	___ftadd@f1+2,w
  6070  0DB2  1D03               	btfss	3,2
  6071  0DB3  07CF               	addwf	___ftadd@f2+2,f
  6072  0DB4  1FCF               	btfss	___ftadd@f2+2,7
  6073  0DB5  2DC1               	goto	l2555
  6074  0DB6  30FF               	movlw	255
  6075  0DB7  06CD               	xorwf	___ftadd@f2,f
  6076  0DB8  06CE               	xorwf	___ftadd@f2+1,f
  6077  0DB9  06CF               	xorwf	___ftadd@f2+2,f
  6078  0DBA  0ACD               	incf	___ftadd@f2,f
  6079  0DBB  1903               	skipnz
  6080  0DBC  0ACE               	incf	___ftadd@f2+1,f
  6081  0DBD  1903               	skipnz
  6082  0DBE  0ACF               	incf	___ftadd@f2+2,f
  6083  0DBF  01D3               	clrf	___ftadd@sign
  6084  0DC0  0AD3               	incf	___ftadd@sign,f
  6085  0DC1                     l2555:	
  6086  0DC1  084D               	movf	___ftadd@f2,w
  6087  0DC2  00F0               	movwf	___ftpack@arg
  6088  0DC3  084E               	movf	___ftadd@f2+1,w
  6089  0DC4  00F1               	movwf	___ftpack@arg+1
  6090  0DC5  084F               	movf	___ftadd@f2+2,w
  6091  0DC6  00F2               	movwf	___ftpack@arg+2
  6092  0DC7  0855               	movf	___ftadd@exp1,w
  6093  0DC8  00F3               	movwf	___ftpack@exp
  6094  0DC9  0853               	movf	___ftadd@sign,w
  6095  0DCA  00F4               	movwf	___ftpack@sign
  6096  0DCB  265F               	fcall	___ftpack
  6097  0DCC  0870               	movf	?___ftpack,w
  6098  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  6099  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  6100  0DCF  00CA               	movwf	?___ftadd
  6101  0DD0  0871               	movf	?___ftpack+1,w
  6102  0DD1  00CB               	movwf	?___ftadd+1
  6103  0DD2  0872               	movf	?___ftpack+2,w
  6104  0DD3  00CC               	movwf	?___ftadd+2
  6105  0DD4  0008               	return
  6106  0DD5                     __end_of___ftadd:	
  6107  0DD5                     __ptext14:	
  6108 ;; *************** function ___altoft *****************
  6109 ;; Defined at:
  6110 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;  c               4    8[COMMON] long 
  6113 ;; Auto vars:     Size  Location     Type
  6114 ;;  sign            1   13[COMMON] unsigned char 
  6115 ;;  exp             1   12[COMMON] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  3    8[COMMON] float 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2, status,0, pclath, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/A00
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6125 ;;      Params:         4       0       0       0       0       0
  6126 ;;      Locals:         2       0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0       0
  6128 ;;      Totals:         6       0       0       0       0       0
  6129 ;;Total ram usage:        6 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    1
  6132 ;; This function calls:
  6133 ;;		___ftpack
  6134 ;; This function is called by:
  6135 ;;		_UART_Init
  6136 ;;		_main
  6137 ;;		_trunc
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function ___altoft
  6143  0DD5                     ___altoft:	
  6144  0DD5  308E               	movlw	142
  6145                           
  6146                           ;incstack = 0
  6147                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  6148  0DD6  01FD               	clrf	___altoft@sign
  6149  0DD7  00FC               	movwf	___altoft@exp
  6150  0DD8  1FFB               	btfss	___altoft@c+3,7
  6151  0DD9  2DE7               	goto	l2477
  6152  0DDA  09F8               	comf	___altoft@c,f
  6153  0DDB  09F9               	comf	___altoft@c+1,f
  6154  0DDC  09FA               	comf	___altoft@c+2,f
  6155  0DDD  09FB               	comf	___altoft@c+3,f
  6156  0DDE  0AF8               	incf	___altoft@c,f
  6157  0DDF  1903               	skipnz
  6158  0DE0  0AF9               	incf	___altoft@c+1,f
  6159  0DE1  1903               	skipnz
  6160  0DE2  0AFA               	incf	___altoft@c+2,f
  6161  0DE3  1903               	skipnz
  6162  0DE4  0AFB               	incf	___altoft@c+3,f
  6163  0DE5  01FD               	clrf	___altoft@sign
  6164  0DE6  0AFD               	incf	___altoft@sign,f
  6165  0DE7                     l2477:	
  6166  0DE7  30FF               	movlw	255
  6167  0DE8  057B               	andwf	___altoft@c+3,w
  6168  0DE9  1903               	btfsc	3,2
  6169  0DEA  2DF2               	goto	l2479
  6170  0DEB  1003               	clrc
  6171  0DEC  0CFB               	rrf	___altoft@c+3,f
  6172  0DED  0CFA               	rrf	___altoft@c+2,f
  6173  0DEE  0CF9               	rrf	___altoft@c+1,f
  6174  0DEF  0CF8               	rrf	___altoft@c,f
  6175  0DF0  0AFC               	incf	___altoft@exp,f
  6176  0DF1  2DE7               	goto	l2477
  6177  0DF2                     l2479:	
  6178  0DF2  0878               	movf	___altoft@c,w
  6179  0DF3  00F0               	movwf	___ftpack@arg
  6180  0DF4  0879               	movf	___altoft@c+1,w
  6181  0DF5  00F1               	movwf	___ftpack@arg+1
  6182  0DF6  087A               	movf	___altoft@c+2,w
  6183  0DF7  00F2               	movwf	___ftpack@arg+2
  6184  0DF8  087C               	movf	___altoft@exp,w
  6185  0DF9  00F3               	movwf	___ftpack@exp
  6186  0DFA  087D               	movf	___altoft@sign,w
  6187  0DFB  00F4               	movwf	___ftpack@sign
  6188  0DFC  265F               	fcall	___ftpack
  6189  0DFD  0870               	movf	?___ftpack,w
  6190  0DFE  00F8               	movwf	?___altoft
  6191  0DFF  0871               	movf	?___ftpack+1,w
  6192  0E00  00F9               	movwf	?___altoft+1
  6193  0E01  0872               	movf	?___ftpack+2,w
  6194  0E02  00FA               	movwf	?___altoft+2
  6195  0E03  0008               	return
  6196  0E04                     __end_of___altoft:	
  6197  0E04                     __ptext13:	
  6198 ;; *************** function ___fttol *****************
  6199 ;; Defined at:
  6200 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  f1              3   42[BANK0 ] float 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  lval            4   50[BANK0 ] unsigned long 
  6205 ;;  exp1            1   54[BANK0 ] unsigned char 
  6206 ;;  sign1           1   49[BANK0 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  4   42[BANK0 ] long 
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0
  6211 ;; Tracked objects:
  6212 ;;		On entry : 300/800
  6213 ;;		On exit  : 300/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6216 ;;      Params:         0       4       0       0       0       0
  6217 ;;      Locals:         0       6       0       0       0       0
  6218 ;;      Temps:          0       3       0       0       0       0
  6219 ;;      Totals:         0      13       0       0       0       0
  6220 ;;Total ram usage:       13 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_UART_Init
  6226 ;;		_main
  6227 ;;		_trunc
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           
  6232                           ;psect for function ___fttol
  6233  0E04                     ___fttol:	
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6237  0E04  27F9  120A  158A   	fcall	PL40	;call to abstracted procedure
  6238  0E07  1003               	clrc
  6239  0E08  0D5B               	rlf	??___fttol+1,w
  6240  0E09  0D5C               	rlf	??___fttol+2,w
  6241  0E0A  00E2               	movwf	___fttol@exp1
  6242  0E0B  0862               	movf	___fttol@exp1,w
  6243  0E0C  1D03               	btfss	3,2
  6244  0E0D  2E13               	goto	l2563
  6245  0E0E                     l2561:	
  6246  0E0E  01D6               	clrf	?___fttol
  6247  0E0F  01D7               	clrf	?___fttol+1
  6248  0E10  01D8               	clrf	?___fttol+2
  6249  0E11  01D9               	clrf	?___fttol+3
  6250  0E12  0008               	return
  6251  0E13                     l2563:	
  6252  0E13  27F9  120A  158A   	fcall	PL40	;call to abstracted procedure
  6253  0E16  3017               	movlw	23
  6254  0E17                     u2585:	
  6255  0E17  1003               	clrc
  6256  0E18  0CDC               	rrf	??___fttol+2,f
  6257  0E19  0CDB               	rrf	??___fttol+1,f
  6258  0E1A  0CDA               	rrf	??___fttol,f
  6259  0E1B  3EFF               	addlw	-1
  6260  0E1C  1D03               	skipz
  6261  0E1D  2E17               	goto	u2585
  6262  0E1E  085A               	movf	??___fttol,w
  6263  0E1F  00DD               	movwf	___fttol@sign1
  6264  0E20  17D7               	bsf	___fttol@f1+1,7
  6265  0E21  01D8               	clrf	___fttol@f1+2
  6266  0E22  0856               	movf	___fttol@f1,w
  6267  0E23  00DE               	movwf	___fttol@lval
  6268  0E24  0857               	movf	___fttol@f1+1,w
  6269  0E25  00DF               	movwf	___fttol@lval+1
  6270  0E26  0858               	movf	___fttol@f1+2,w
  6271  0E27  00E0               	movwf	___fttol@lval+2
  6272  0E28  308E               	movlw	142
  6273  0E29  01E1               	clrf	___fttol@lval+3
  6274  0E2A  02E2               	subwf	___fttol@exp1,f
  6275  0E2B  1FE2               	btfss	___fttol@exp1,7
  6276  0E2C  2E3A               	goto	l2583
  6277  0E2D  0862               	movf	___fttol@exp1,w
  6278  0E2E  3A80               	xorlw	128
  6279  0E2F  3E8F               	addlw	143
  6280  0E30  1C03               	btfss	3,0
  6281  0E31  2E0E               	goto	l2561
  6282  0E32                     l2579:	
  6283  0E32  1003               	clrc
  6284  0E33  0CE1               	rrf	___fttol@lval+3,f
  6285  0E34  0CE0               	rrf	___fttol@lval+2,f
  6286  0E35  0CDF               	rrf	___fttol@lval+1,f
  6287  0E36  0CDE               	rrf	___fttol@lval,f
  6288  0E37  0FE2               	incfsz	___fttol@exp1,f
  6289  0E38  2E32               	goto	l2579
  6290  0E39  2E48               	goto	l2591
  6291  0E3A                     l2583:	
  6292  0E3A  3018               	movlw	24
  6293  0E3B  0262               	subwf	___fttol@exp1,w
  6294  0E3C  1803               	btfsc	3,0
  6295  0E3D  2E0E               	goto	l2561
  6296  0E3E                     l2589:	
  6297  0E3E  0862               	movf	___fttol@exp1,w
  6298  0E3F  1903               	btfsc	3,2
  6299  0E40  2E48               	goto	l2591
  6300  0E41  1003               	clrc
  6301  0E42  0DDE               	rlf	___fttol@lval,f
  6302  0E43  0DDF               	rlf	___fttol@lval+1,f
  6303  0E44  0DE0               	rlf	___fttol@lval+2,f
  6304  0E45  0DE1               	rlf	___fttol@lval+3,f
  6305  0E46  03E2               	decf	___fttol@exp1,f
  6306  0E47  2E3E               	goto	l2589
  6307  0E48                     l2591:	
  6308  0E48  085D               	movf	___fttol@sign1,w
  6309  0E49  1903               	btfsc	3,2
  6310  0E4A  2E56               	goto	l2595
  6311  0E4B  09DE               	comf	___fttol@lval,f
  6312  0E4C  09DF               	comf	___fttol@lval+1,f
  6313  0E4D  09E0               	comf	___fttol@lval+2,f
  6314  0E4E  09E1               	comf	___fttol@lval+3,f
  6315  0E4F  0ADE               	incf	___fttol@lval,f
  6316  0E50  1903               	skipnz
  6317  0E51  0ADF               	incf	___fttol@lval+1,f
  6318  0E52  1903               	skipnz
  6319  0E53  0AE0               	incf	___fttol@lval+2,f
  6320  0E54  1903               	skipnz
  6321  0E55  0AE1               	incf	___fttol@lval+3,f
  6322  0E56                     l2595:	
  6323  0E56  0861               	movf	___fttol@lval+3,w
  6324  0E57  00D9               	movwf	?___fttol+3
  6325  0E58  0860               	movf	___fttol@lval+2,w
  6326  0E59  00D8               	movwf	?___fttol+2
  6327  0E5A  085F               	movf	___fttol@lval+1,w
  6328  0E5B  00D7               	movwf	?___fttol+1
  6329  0E5C  085E               	movf	___fttol@lval,w
  6330  0E5D  00D6               	movwf	?___fttol
  6331  0E5E  0008               	return
  6332  0E5F                     __end_of___fttol:	
  6333  0E5F                     __ptext19:	
  6334 ;; *************** function ___ftpack *****************
  6335 ;; Defined at:
  6336 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  6337 ;; Parameters:    Size  Location     Type
  6338 ;;  arg             3    0[COMMON] unsigned um
  6339 ;;  exp             1    3[COMMON] unsigned char 
  6340 ;;  sign            1    4[COMMON] unsigned char 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;		None
  6343 ;; Return value:  Size  Location     Type
  6344 ;;                  3    0[COMMON] float 
  6345 ;; Registers used:
  6346 ;;		wreg, status,2, status,0
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/A00
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6352 ;;      Params:         5       0       0       0       0       0
  6353 ;;      Locals:         0       0       0       0       0       0
  6354 ;;      Temps:          3       0       0       0       0       0
  6355 ;;      Totals:         8       0       0       0       0       0
  6356 ;;Total ram usage:        8 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; This function calls:
  6359 ;;		Nothing
  6360 ;; This function is called by:
  6361 ;;		___altoft
  6362 ;;		___ftadd
  6363 ;;		___ftdiv
  6364 ;;		___ftmul
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function ___ftpack
  6370  0E5F                     ___ftpack:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6374  0E5F  0873               	movf	___ftpack@exp,w
  6375  0E60  1903               	btfsc	3,2
  6376  0E61  2E67               	goto	l949
  6377  0E62  0872               	movf	___ftpack@arg+2,w
  6378  0E63  0471               	iorwf	___ftpack@arg+1,w
  6379  0E64  0470               	iorwf	___ftpack@arg,w
  6380  0E65  1D03               	skipz
  6381  0E66  2E70               	goto	l2443
  6382  0E67                     l949:	
  6383  0E67  01F0               	clrf	?___ftpack
  6384  0E68  01F1               	clrf	?___ftpack+1
  6385  0E69  01F2               	clrf	?___ftpack+2
  6386  0E6A  0008               	return
  6387  0E6B                     l2441:	
  6388  0E6B  0AF3               	incf	___ftpack@exp,f
  6389  0E6C  1003               	clrc
  6390  0E6D  0CF2               	rrf	___ftpack@arg+2,f
  6391  0E6E  0CF1               	rrf	___ftpack@arg+1,f
  6392  0E6F  0CF0               	rrf	___ftpack@arg,f
  6393  0E70                     l2443:	
  6394  0E70  30FE               	movlw	254
  6395  0E71  0572               	andwf	___ftpack@arg+2,w
  6396  0E72  1903               	btfsc	3,2
  6397  0E73  2E7F               	goto	l2447
  6398  0E74  2E6B               	goto	l2441
  6399  0E75                     l2445:	
  6400  0E75  0AF3               	incf	___ftpack@exp,f
  6401  0E76  0AF0               	incf	___ftpack@arg,f
  6402  0E77  1903               	skipnz
  6403  0E78  0AF1               	incf	___ftpack@arg+1,f
  6404  0E79  1903               	skipnz
  6405  0E7A  0AF2               	incf	___ftpack@arg+2,f
  6406  0E7B  1003               	clrc
  6407  0E7C  0CF2               	rrf	___ftpack@arg+2,f
  6408  0E7D  0CF1               	rrf	___ftpack@arg+1,f
  6409  0E7E  0CF0               	rrf	___ftpack@arg,f
  6410  0E7F                     l2447:	
  6411  0E7F  30FF               	movlw	255
  6412  0E80  0572               	andwf	___ftpack@arg+2,w
  6413  0E81  1903               	btfsc	3,2
  6414  0E82  2E8D               	goto	l2451
  6415  0E83  2E75               	goto	l2445
  6416  0E84                     l2453:	
  6417  0E84  3002               	movlw	2
  6418  0E85  0273               	subwf	___ftpack@exp,w
  6419  0E86  1C03               	btfss	3,0
  6420  0E87  2E8F               	goto	l961
  6421  0E88  03F3               	decf	___ftpack@exp,f
  6422  0E89  1003               	clrc
  6423  0E8A  0DF0               	rlf	___ftpack@arg,f
  6424  0E8B  0DF1               	rlf	___ftpack@arg+1,f
  6425  0E8C  0DF2               	rlf	___ftpack@arg+2,f
  6426  0E8D                     l2451:	
  6427  0E8D  1FF1               	btfss	___ftpack@arg+1,7
  6428  0E8E  2E84               	goto	l2453
  6429  0E8F                     l961:	
  6430  0E8F  1C73               	btfss	___ftpack@exp,0
  6431  0E90  13F1               	bcf	___ftpack@arg+1,7
  6432  0E91  1003               	clrc
  6433  0E92  0CF3               	rrf	___ftpack@exp,f
  6434  0E93  0873               	movf	___ftpack@exp,w
  6435  0E94  00F7               	movwf	??___ftpack+2
  6436  0E95  01F6               	clrf	??___ftpack+1
  6437  0E96  01F5               	clrf	??___ftpack
  6438  0E97  0875               	movf	??___ftpack,w
  6439  0E98  04F0               	iorwf	___ftpack@arg,f
  6440  0E99  0876               	movf	??___ftpack+1,w
  6441  0E9A  04F1               	iorwf	___ftpack@arg+1,f
  6442  0E9B  0877               	movf	??___ftpack+2,w
  6443  0E9C  04F2               	iorwf	___ftpack@arg+2,f
  6444  0E9D  0874               	movf	___ftpack@sign,w
  6445  0E9E  1D03               	btfss	3,2
  6446  0E9F  17F2               	bsf	___ftpack@arg+2,7
  6447  0EA0  0008               	return
  6448  0EA1                     __end_of___ftpack:	
  6449  0EA1                     __ptext18:	
  6450 ;; *************** function ___ftdiv *****************
  6451 ;; Defined at:
  6452 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  f2              3   15[BANK0 ] float 
  6455 ;;  f1              3   18[BANK0 ] float 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  f3              3   25[BANK0 ] float 
  6458 ;;  sign            1   29[BANK0 ] unsigned char 
  6459 ;;  exp             1   28[BANK0 ] unsigned char 
  6460 ;;  cntr            1   24[BANK0 ] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  3   15[BANK0 ] float 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2, status,0, pclath, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 300/800
  6467 ;;		On exit  : 300/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6470 ;;      Params:         0       6       0       0       0       0
  6471 ;;      Locals:         0       6       0       0       0       0
  6472 ;;      Temps:          0       3       0       0       0       0
  6473 ;;      Totals:         0      15       0       0       0       0
  6474 ;;Total ram usage:       15 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    1
  6477 ;; This function calls:
  6478 ;;		___ftpack
  6479 ;; This function is called by:
  6480 ;;		_UART_Init
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function ___ftdiv
  6486  0EA1                     ___ftdiv:	
  6487                           
  6488                           ;incstack = 0
  6489                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6490  0EA1  083E               	movf	___ftdiv@f1,w
  6491  0EA2  00C1               	movwf	??___ftdiv
  6492  0EA3  083F               	movf	___ftdiv@f1+1,w
  6493  0EA4  00C2               	movwf	??___ftdiv+1
  6494  0EA5  0840               	movf	___ftdiv@f1+2,w
  6495  0EA6  00C3               	movwf	??___ftdiv+2
  6496  0EA7  1003               	clrc
  6497  0EA8  0D42               	rlf	??___ftdiv+1,w
  6498  0EA9  0D43               	rlf	??___ftdiv+2,w
  6499  0EAA  00C8               	movwf	___ftdiv@exp
  6500  0EAB  0848               	movf	___ftdiv@exp,w
  6501  0EAC  1D03               	btfss	3,2
  6502  0EAD  2EB2               	goto	l2951
  6503  0EAE  01BB               	clrf	?___ftdiv
  6504  0EAF  01BC               	clrf	?___ftdiv+1
  6505  0EB0  01BD               	clrf	?___ftdiv+2
  6506  0EB1  0008               	return
  6507  0EB2                     l2951:	
  6508  0EB2  083B               	movf	___ftdiv@f2,w
  6509  0EB3  00C1               	movwf	??___ftdiv
  6510  0EB4  083C               	movf	___ftdiv@f2+1,w
  6511  0EB5  00C2               	movwf	??___ftdiv+1
  6512  0EB6  083D               	movf	___ftdiv@f2+2,w
  6513  0EB7  00C3               	movwf	??___ftdiv+2
  6514  0EB8  1003               	clrc
  6515  0EB9  0D42               	rlf	??___ftdiv+1,w
  6516  0EBA  0D43               	rlf	??___ftdiv+2,w
  6517  0EBB  00C9               	movwf	___ftdiv@sign
  6518  0EBC  0849               	movf	___ftdiv@sign,w
  6519  0EBD  1D03               	btfss	3,2
  6520  0EBE  2EC3               	goto	l1003
  6521  0EBF  01BB               	clrf	?___ftdiv
  6522  0EC0  01BC               	clrf	?___ftdiv+1
  6523  0EC1  01BD               	clrf	?___ftdiv+2
  6524  0EC2  0008               	return
  6525  0EC3                     l1003:	
  6526  0EC3  3089               	movlw	137
  6527  0EC4  01C5               	clrf	___ftdiv@f3
  6528  0EC5  01C6               	clrf	___ftdiv@f3+1
  6529  0EC6  01C7               	clrf	___ftdiv@f3+2
  6530  0EC7  0749               	addwf	___ftdiv@sign,w
  6531  0EC8  00C1               	movwf	??___ftdiv
  6532  0EC9  02C8               	subwf	___ftdiv@exp,f
  6533  0ECA  0840               	movf	___ftdiv@f1+2,w
  6534  0ECB  00C9               	movwf	___ftdiv@sign
  6535  0ECC  083D               	movf	___ftdiv@f2+2,w
  6536  0ECD  06C9               	xorwf	___ftdiv@sign,f
  6537  0ECE  3080               	movlw	128
  6538  0ECF  05C9               	andwf	___ftdiv@sign,f
  6539  0ED0  3018               	movlw	24
  6540  0ED1  17BF               	bsf	___ftdiv@f1+1,7
  6541  0ED2  01C0               	clrf	___ftdiv@f1+2
  6542  0ED3  17BC               	bsf	___ftdiv@f2+1,7
  6543  0ED4  01BD               	clrf	___ftdiv@f2+2
  6544  0ED5  00C4               	movwf	___ftdiv@cntr
  6545  0ED6                     l2973:	
  6546  0ED6  1003               	clrc
  6547  0ED7  0DC5               	rlf	___ftdiv@f3,f
  6548  0ED8  0DC6               	rlf	___ftdiv@f3+1,f
  6549  0ED9  0DC7               	rlf	___ftdiv@f3+2,f
  6550  0EDA  083D               	movf	___ftdiv@f2+2,w
  6551  0EDB  0240               	subwf	___ftdiv@f1+2,w
  6552  0EDC  1D03               	skipz
  6553  0EDD  2EE4               	goto	u3505
  6554  0EDE  083C               	movf	___ftdiv@f2+1,w
  6555  0EDF  023F               	subwf	___ftdiv@f1+1,w
  6556  0EE0  1D03               	skipz
  6557  0EE1  2EE4               	goto	u3505
  6558  0EE2  083B               	movf	___ftdiv@f2,w
  6559  0EE3  023E               	subwf	___ftdiv@f1,w
  6560  0EE4                     u3505:	
  6561  0EE4  1C03               	skipc
  6562  0EE5  2EF2               	goto	L14
  6563  0EE6  083B               	movf	___ftdiv@f2,w
  6564  0EE7  02BE               	subwf	___ftdiv@f1,f
  6565  0EE8  083C               	movf	___ftdiv@f2+1,w
  6566  0EE9  1C03               	skipc
  6567  0EEA  0F3C               	incfsz	___ftdiv@f2+1,w
  6568  0EEB  02BF               	subwf	___ftdiv@f1+1,f
  6569  0EEC  083D               	movf	___ftdiv@f2+2,w
  6570  0EED  1C03               	skipc
  6571  0EEE  0A3D               	incf	___ftdiv@f2+2,w
  6572  0EEF  02C0               	subwf	___ftdiv@f1+2,f
  6573  0EF0  1445               	bsf	___ftdiv@f3,0
  6574  0EF1  1003               	clrc
  6575  0EF2                     L14:	
  6576  0EF2  0DBE               	rlf	___ftdiv@f1,f
  6577  0EF3  0DBF               	rlf	___ftdiv@f1+1,f
  6578  0EF4  0DC0               	rlf	___ftdiv@f1+2,f
  6579  0EF5  0BC4               	decfsz	___ftdiv@cntr,f
  6580  0EF6  2ED6               	goto	l2973
  6581  0EF7  0845               	movf	___ftdiv@f3,w
  6582  0EF8  00F0               	movwf	___ftpack@arg
  6583  0EF9  0846               	movf	___ftdiv@f3+1,w
  6584  0EFA  00F1               	movwf	___ftpack@arg+1
  6585  0EFB  0847               	movf	___ftdiv@f3+2,w
  6586  0EFC  00F2               	movwf	___ftpack@arg+2
  6587  0EFD  0848               	movf	___ftdiv@exp,w
  6588  0EFE  00F3               	movwf	___ftpack@exp
  6589  0EFF  0849               	movf	___ftdiv@sign,w
  6590  0F00  00F4               	movwf	___ftpack@sign
  6591  0F01  265F               	fcall	___ftpack
  6592  0F02  0870               	movf	?___ftpack,w
  6593  0F03  1283               	bcf	3,5	;RP0=0, select bank0
  6594  0F04  1303               	bcf	3,6	;RP1=0, select bank0
  6595  0F05  00BB               	movwf	?___ftdiv
  6596  0F06  0871               	movf	?___ftpack+1,w
  6597  0F07  00BC               	movwf	?___ftdiv+1
  6598  0F08  0872               	movf	?___ftpack+2,w
  6599  0F09  00BD               	movwf	?___ftdiv+2
  6600  0F0A  0008               	return
  6601  0F0B                     __end_of___ftdiv:	
  6602  0F0B                     __ptext17:	
  6603 ;; *************** function ___ftmul *****************
  6604 ;; Defined at:
  6605 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  f1              3    0[BANK0 ] float 
  6608 ;;  f2              3    3[BANK0 ] float 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  f3_as_produc    3   10[BANK0 ] unsigned um
  6611 ;;  sign            1   14[BANK0 ] unsigned char 
  6612 ;;  cntr            1   13[BANK0 ] unsigned char 
  6613 ;;  exp             1    9[BANK0 ] unsigned char 
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  3    0[BANK0 ] float 
  6616 ;; Registers used:
  6617 ;;		wreg, status,2, status,0, pclath, cstack
  6618 ;; Tracked objects:
  6619 ;;		On entry : 300/800
  6620 ;;		On exit  : 300/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6623 ;;      Params:         0       6       0       0       0       0
  6624 ;;      Locals:         0       6       0       0       0       0
  6625 ;;      Temps:          0       3       0       0       0       0
  6626 ;;      Totals:         0      15       0       0       0       0
  6627 ;;Total ram usage:       15 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    1
  6630 ;; This function calls:
  6631 ;;		___ftpack
  6632 ;; This function is called by:
  6633 ;;		_UART_Init
  6634 ;;		_main
  6635 ;; This function uses a non-reentrant model
  6636 ;;
  6637                           
  6638                           
  6639                           ;psect for function ___ftmul
  6640  0F0B                     ___ftmul:	
  6641                           
  6642                           ;incstack = 0
  6643                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6644  0F0B  082C               	movf	___ftmul@f1,w
  6645  0F0C  00B2               	movwf	??___ftmul
  6646  0F0D  082D               	movf	___ftmul@f1+1,w
  6647  0F0E  00B3               	movwf	??___ftmul+1
  6648  0F0F  082E               	movf	___ftmul@f1+2,w
  6649  0F10  00B4               	movwf	??___ftmul+2
  6650  0F11  1003               	clrc
  6651  0F12  0D33               	rlf	??___ftmul+1,w
  6652  0F13  0D34               	rlf	??___ftmul+2,w
  6653  0F14  00B5               	movwf	___ftmul@exp
  6654  0F15  0835               	movf	___ftmul@exp,w
  6655  0F16  1D03               	btfss	3,2
  6656  0F17  2F1C               	goto	l2991
  6657  0F18  01AC               	clrf	?___ftmul
  6658  0F19  01AD               	clrf	?___ftmul+1
  6659  0F1A  01AE               	clrf	?___ftmul+2
  6660  0F1B  0008               	return
  6661  0F1C                     l2991:	
  6662  0F1C  082F               	movf	___ftmul@f2,w
  6663  0F1D  00B2               	movwf	??___ftmul
  6664  0F1E  0830               	movf	___ftmul@f2+1,w
  6665  0F1F  00B3               	movwf	??___ftmul+1
  6666  0F20  0831               	movf	___ftmul@f2+2,w
  6667  0F21  00B4               	movwf	??___ftmul+2
  6668  0F22  1003               	clrc
  6669  0F23  0D33               	rlf	??___ftmul+1,w
  6670  0F24  0D34               	rlf	??___ftmul+2,w
  6671  0F25  00BA               	movwf	___ftmul@sign
  6672  0F26  083A               	movf	___ftmul@sign,w
  6673  0F27  1D03               	btfss	3,2
  6674  0F28  2F2D               	goto	l2995
  6675  0F29  01AC               	clrf	?___ftmul
  6676  0F2A  01AD               	clrf	?___ftmul+1
  6677  0F2B  01AE               	clrf	?___ftmul+2
  6678  0F2C  0008               	return
  6679  0F2D                     l2995:	
  6680  0F2D  083A               	movf	___ftmul@sign,w
  6681  0F2E  3E7B               	addlw	123
  6682  0F2F  07B5               	addwf	___ftmul@exp,f
  6683  0F30  082E               	movf	___ftmul@f1+2,w
  6684  0F31  00BA               	movwf	___ftmul@sign
  6685  0F32  0831               	movf	___ftmul@f2+2,w
  6686  0F33  06BA               	xorwf	___ftmul@sign,f
  6687  0F34  3080               	movlw	128
  6688  0F35  05BA               	andwf	___ftmul@sign,f
  6689  0F36  3007               	movlw	7
  6690  0F37  17AD               	bsf	___ftmul@f1+1,7
  6691  0F38  17B0               	bsf	___ftmul@f2+1,7
  6692  0F39  01B1               	clrf	___ftmul@f2+2
  6693  0F3A  01B6               	clrf	___ftmul@f3_as_product
  6694  0F3B  01B7               	clrf	___ftmul@f3_as_product+1
  6695  0F3C  01B8               	clrf	___ftmul@f3_as_product+2
  6696  0F3D  00B9               	movwf	___ftmul@cntr
  6697  0F3E                     l3013:	
  6698  0F3E  1C2C               	btfss	___ftmul@f1,0
  6699  0F3F  2F47               	goto	l3017
  6700  0F40  27DE  120A  158A   	fcall	PL20	;call to abstracted procedure
  6701  0F43  1803               	skipnc
  6702  0F44  0A31               	incf	___ftmul@f2+2,w
  6703  0F45  1D03               	btfss	3,2
  6704  0F46  07B8               	addwf	___ftmul@f3_as_product+2,f
  6705  0F47                     l3017:	
  6706  0F47  1003               	clrc
  6707  0F48  0CAE               	rrf	___ftmul@f1+2,f
  6708  0F49  0CAD               	rrf	___ftmul@f1+1,f
  6709  0F4A  0CAC               	rrf	___ftmul@f1,f
  6710  0F4B  1003               	clrc
  6711  0F4C  0DAF               	rlf	___ftmul@f2,f
  6712  0F4D  0DB0               	rlf	___ftmul@f2+1,f
  6713  0F4E  0DB1               	rlf	___ftmul@f2+2,f
  6714  0F4F  0BB9               	decfsz	___ftmul@cntr,f
  6715  0F50  2F3E               	goto	l3013
  6716  0F51  3009               	movlw	9
  6717  0F52  00B9               	movwf	___ftmul@cntr
  6718  0F53                     l3025:	
  6719  0F53  1C2C               	btfss	___ftmul@f1,0
  6720  0F54  2F5C               	goto	l3029
  6721  0F55  27DE  120A  158A   	fcall	PL20	;call to abstracted procedure
  6722  0F58  1803               	skipnc
  6723  0F59  0A31               	incf	___ftmul@f2+2,w
  6724  0F5A  1D03               	btfss	3,2
  6725  0F5B  07B8               	addwf	___ftmul@f3_as_product+2,f
  6726  0F5C                     l3029:	
  6727  0F5C  1003               	clrc
  6728  0F5D  0CAE               	rrf	___ftmul@f1+2,f
  6729  0F5E  0CAD               	rrf	___ftmul@f1+1,f
  6730  0F5F  0CAC               	rrf	___ftmul@f1,f
  6731  0F60  1003               	clrc
  6732  0F61  0CB8               	rrf	___ftmul@f3_as_product+2,f
  6733  0F62  0CB7               	rrf	___ftmul@f3_as_product+1,f
  6734  0F63  0CB6               	rrf	___ftmul@f3_as_product,f
  6735  0F64  0BB9               	decfsz	___ftmul@cntr,f
  6736  0F65  2F53               	goto	l3025
  6737  0F66  0836               	movf	___ftmul@f3_as_product,w
  6738  0F67  00F0               	movwf	___ftpack@arg
  6739  0F68  0837               	movf	___ftmul@f3_as_product+1,w
  6740  0F69  00F1               	movwf	___ftpack@arg+1
  6741  0F6A  0838               	movf	___ftmul@f3_as_product+2,w
  6742  0F6B  00F2               	movwf	___ftpack@arg+2
  6743  0F6C  0835               	movf	___ftmul@exp,w
  6744  0F6D  00F3               	movwf	___ftpack@exp
  6745  0F6E  083A               	movf	___ftmul@sign,w
  6746  0F6F  00F4               	movwf	___ftpack@sign
  6747  0F70  265F               	fcall	___ftpack
  6748  0F71  0870               	movf	?___ftpack,w
  6749  0F72  1283               	bcf	3,5	;RP0=0, select bank0
  6750  0F73  1303               	bcf	3,6	;RP1=0, select bank0
  6751  0F74  00AC               	movwf	?___ftmul
  6752  0F75  0871               	movf	?___ftpack+1,w
  6753  0F76  00AD               	movwf	?___ftmul+1
  6754  0F77  0872               	movf	?___ftpack+2,w
  6755  0F78  00AE               	movwf	?___ftmul+2
  6756  0F79  0008               	return
  6757  0F7A                     __end_of___ftmul:	
  6758  0F7A                     __ptext15:	
  6759 ;; *************** function ___ftsub *****************
  6760 ;; Defined at:
  6761 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  f2              3    0[BANK1 ] float 
  6764 ;;  f1              3    3[BANK1 ] float 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;		None
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  3    0[BANK1 ] float 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0, pclath, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 300/900
  6773 ;;		On exit  : 300/100
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6776 ;;      Params:         0       0       6       0       0       0
  6777 ;;      Locals:         0       0       0       0       0       0
  6778 ;;      Temps:          0       0       0       0       0       0
  6779 ;;      Totals:         0       0       6       0       0       0
  6780 ;;Total ram usage:        6 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:    2
  6783 ;; This function calls:
  6784 ;;		___ftadd
  6785 ;; This function is called by:
  6786 ;;		_round
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           
  6791                           ;psect for function ___ftsub
  6792  0F7A                     ___ftsub:	
  6793                           
  6794                           ;incstack = 0
  6795                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  6796  0F7A  0854               	movf	(___ftsub@f2+2)^(0+128),w
  6797  0F7B  0453               	iorwf	(___ftsub@f2+1)^(0+128),w
  6798  0F7C  0452               	iorwf	___ftsub@f2^(0+128),w
  6799  0F7D  1903               	skipnz
  6800  0F7E  2F81               	goto	l2717
  6801  0F7F  3080               	movlw	128
  6802  0F80  06D4               	xorwf	(___ftsub@f2+2)^(0+128),f
  6803  0F81                     l2717:	
  6804  0F81  0855               	movf	___ftsub@f1^(0+128),w
  6805  0F82  1283               	bcf	3,5	;RP0=0, select bank0
  6806  0F83  00CA               	movwf	___ftadd@f1
  6807  0F84  1683               	bsf	3,5	;RP0=1, select bank1
  6808  0F85  0856               	movf	(___ftsub@f1+1)^(0+128),w
  6809  0F86  1283               	bcf	3,5	;RP0=0, select bank0
  6810  0F87  00CB               	movwf	___ftadd@f1+1
  6811  0F88  1683               	bsf	3,5	;RP0=1, select bank1
  6812  0F89  0857               	movf	(___ftsub@f1+2)^(0+128),w
  6813  0F8A  1283               	bcf	3,5	;RP0=0, select bank0
  6814  0F8B  00CC               	movwf	___ftadd@f1+2
  6815  0F8C  1683               	bsf	3,5	;RP0=1, select bank1
  6816  0F8D  0852               	movf	___ftsub@f2^(0+128),w
  6817  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
  6818  0F8F  00CD               	movwf	___ftadd@f2
  6819  0F90  1683               	bsf	3,5	;RP0=1, select bank1
  6820  0F91  0853               	movf	(___ftsub@f2+1)^(0+128),w
  6821  0F92  1283               	bcf	3,5	;RP0=0, select bank0
  6822  0F93  00CE               	movwf	___ftadd@f2+1
  6823  0F94  1683               	bsf	3,5	;RP0=1, select bank1
  6824  0F95  0854               	movf	(___ftsub@f2+2)^(0+128),w
  6825  0F96  1283               	bcf	3,5	;RP0=0, select bank0
  6826  0F97  00CF               	movwf	___ftadd@f2+2
  6827  0F98  2513               	fcall	___ftadd
  6828  0F99  084A               	movf	?___ftadd,w
  6829  0F9A  1683               	bsf	3,5	;RP0=1, select bank1
  6830  0F9B  00D2               	movwf	?___ftsub^(0+128)
  6831  0F9C  1283               	bcf	3,5	;RP0=0, select bank0
  6832  0F9D  084B               	movf	?___ftadd+1,w
  6833  0F9E  1683               	bsf	3,5	;RP0=1, select bank1
  6834  0F9F  00D3               	movwf	(?___ftsub+1)^(0+128)
  6835  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  6836  0FA1  084C               	movf	?___ftadd+2,w
  6837  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  6838  0FA3  00D4               	movwf	(?___ftsub+2)^(0+128)
  6839  0FA4  0008               	return
  6840  0FA5                     __end_of___ftsub:	
  6841  0FA5                     __ptext12:	
  6842 ;; *************** function _frexp *****************
  6843 ;; Defined at:
  6844 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  6845 ;; Parameters:    Size  Location     Type
  6846 ;;  value           3    0[COMMON] int 
  6847 ;;  eptr            1    3[COMMON] PTR int 
  6848 ;;		 -> trunc@expon(2), 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  3    0[COMMON] PTR int 
  6853 ;; Registers used:
  6854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6855 ;; Tracked objects:
  6856 ;;		On entry : 300/800
  6857 ;;		On exit  : B00/0
  6858 ;;		Unchanged: 300/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6860 ;;      Params:         4       0       0       0       0       0
  6861 ;;      Locals:         0       0       0       0       0       0
  6862 ;;      Temps:          2       0       0       0       0       0
  6863 ;;      Totals:         6       0       0       0       0       0
  6864 ;;Total ram usage:        6 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_trunc
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           
  6874                           ;psect for function _frexp
  6875  0FA5                     _frexp:	
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  6879  0FA5  0872               	movf	frexp@value+2,w
  6880  0FA6  0471               	iorwf	frexp@value+1,w
  6881  0FA7  0470               	iorwf	frexp@value,w
  6882  0FA8  1D03               	skipz
  6883  0FA9  2FB1               	goto	l2605
  6884  0FAA  0873               	movf	frexp@eptr,w
  6885  0FAB  0084               	movwf	4
  6886  0FAC  1383               	bcf	3,7	;select IRP bank0
  6887  0FAD  0180               	clrf	0
  6888  0FAE  0A84               	incf	4,f
  6889  0FAF  0180               	clrf	0
  6890  0FB0  0008               	return
  6891  0FB1                     l2605:	
  6892  0FB1  0872               	movf	frexp@value+2,w
  6893  0FB2  397F               	andlw	127
  6894  0FB3  00F4               	movwf	??_frexp
  6895  0FB4  01F5               	clrf	??_frexp+1
  6896  0FB5  1003               	clrc
  6897  0FB6  0DF4               	rlf	??_frexp,f
  6898  0FB7  0DF5               	rlf	??_frexp+1,f
  6899  0FB8  0873               	movf	frexp@eptr,w
  6900  0FB9  0084               	movwf	4
  6901  0FBA  0874               	movf	??_frexp,w
  6902  0FBB  1383               	bcf	3,7	;select IRP bank0
  6903  0FBC  0080               	movwf	0
  6904  0FBD  0A84               	incf	4,f
  6905  0FBE  0875               	movf	??_frexp+1,w
  6906  0FBF  0080               	movwf	0
  6907  0FC0  0D71               	rlf	frexp@value+1,w
  6908  0FC1  0D71               	rlf	frexp@value+1,w
  6909  0FC2  3901               	andlw	1
  6910  0FC3  00F4               	movwf	??_frexp
  6911  0FC4  01F5               	clrf	??_frexp+1
  6912  0FC5  0873               	movf	frexp@eptr,w
  6913  0FC6  0084               	movwf	4
  6914  0FC7  0874               	movf	??_frexp,w
  6915  0FC8  0480               	iorwf	0,f
  6916  0FC9  0A84               	incf	4,f
  6917  0FCA  0875               	movf	??_frexp+1,w
  6918  0FCB  0480               	iorwf	0,f
  6919  0FCC  0873               	movf	frexp@eptr,w
  6920  0FCD  0084               	movwf	4
  6921  0FCE  3082               	movlw	130
  6922  0FCF  0780               	addwf	0,f
  6923  0FD0  0F84               	incfsz	4,f
  6924  0FD1  0800               	movf	0,w
  6925  0FD2  1803               	skipnc
  6926  0FD3  0A00               	incf	0,w
  6927  0FD4  00FF               	movwf	127
  6928  0FD5  3EFF               	addlw	255
  6929  0FD6  0080               	movwf	0
  6930  0FD7  0384               	decf	4,f
  6931  0FD8  0872               	movf	frexp@value+2,w
  6932  0FD9  3980               	andlw	-128
  6933  0FDA  383F               	iorlw	63
  6934  0FDB  00F2               	movwf	frexp@value+2
  6935  0FDC  13F1               	bcf	frexp@value+1,7
  6936  0FDD  0008               	return
  6937  0FDE                     __end_of_frexp:	
  6938  0FDE                     PL20:	
  6939  0FDE  082F               	movf	___ftmul@f2,w
  6940  0FDF  07B6               	addwf	___ftmul@f3_as_product,f
  6941  0FE0  0830               	movf	___ftmul@f2+1,w
  6942  0FE1  1103               	clrz
  6943  0FE2  1803               	skipnc
  6944  0FE3  0A30               	incf	___ftmul@f2+1,w
  6945  0FE4  1D03               	btfss	3,2
  6946  0FE5  07B7               	addwf	___ftmul@f3_as_product+1,f
  6947  0FE6  0831               	movf	___ftmul@f2+2,w
  6948  0FE7  1103               	clrz
  6949  0FE8  0008               	return
  6950  0FE9                     __end_ofPL20:	
  6951  0FE9                     PL28:	
  6952  0FE9  0878               	movf	?___altoft,w
  6953  0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  6954  0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  6955  0FEC  00AF               	movwf	___ftmul@f2
  6956  0FED  0879               	movf	?___altoft+1,w
  6957  0FEE  00B0               	movwf	___ftmul@f2+1
  6958  0FEF  087A               	movf	?___altoft+2,w
  6959  0FF0  00B1               	movwf	___ftmul@f2+2
  6960  0FF1  0008               	return
  6961  0FF2                     __end_ofPL28:	
  6962  0FF2                     PL38:	
  6963  0FF2  086B               	movf	round@x,w
  6964  0FF3  00E3               	movwf	trunc@x
  6965  0FF4  086C               	movf	round@x+1,w
  6966  0FF5  00E4               	movwf	trunc@x+1
  6967  0FF6  086D               	movf	round@x+2,w
  6968  0FF7  00E5               	movwf	trunc@x+2
  6969  0FF8  0008               	return
  6970  0FF9                     __end_ofPL38:	
  6971  0FF9                     PL40:	
  6972  0FF9  0856               	movf	___fttol@f1,w
  6973  0FFA  00DA               	movwf	??___fttol
  6974  0FFB  0857               	movf	___fttol@f1+1,w
  6975  0FFC  00DB               	movwf	??___fttol+1
  6976  0FFD  0858               	movf	___fttol@f1+2,w
  6977  0FFE  00DC               	movwf	??___fttol+2
  6978  0FFF  0008               	return
  6979  1000                     __end_ofPL40:	
  6980                           
  6981                           	psect	text20
  6982  0828                     __ptext20:	
  6983 ;; *************** function _SwitchGPS *****************
  6984 ;; Defined at:
  6985 ;;		line 51 in file "libs/gsk_algo_funcs.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;  a               1    wreg     unsigned char 
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  a               1    0[COMMON] unsigned char 
  6990 ;; Return value:  Size  Location     Type
  6991 ;;                  1    wreg      void 
  6992 ;; Registers used:
  6993 ;;		wreg
  6994 ;; Tracked objects:
  6995 ;;		On entry : 300/A00
  6996 ;;		On exit  : 300/0
  6997 ;;		Unchanged: 0/0
  6998 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  6999 ;;      Params:         0       0       0       0       0       0
  7000 ;;      Locals:         1       0       0       0       0       0
  7001 ;;      Temps:          0       0       0       0       0       0
  7002 ;;      Totals:         1       0       0       0       0       0
  7003 ;;Total ram usage:        1 bytes
  7004 ;; Hardware stack levels used:    1
  7005 ;; This function calls:
  7006 ;;		Nothing
  7007 ;; This function is called by:
  7008 ;;		_main
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           
  7013                           ;psect for function _SwitchGPS
  7014  0828                     _SwitchGPS:	
  7015                           
  7016                           ;incstack = 0
  7017                           ; Regs used in _SwitchGPS: [wreg]
  7018                           ;SwitchGPS@a stored from wreg
  7019  0828  00F0               	movwf	SwitchGPS@a
  7020                           
  7021                           ;gsk_algo_funcs.c: 52: RC1 = a;
  7022  0829  1C70               	btfss	SwitchGPS@a,0
  7023  082A  282F               	goto	u3960
  7024  082B  1283               	bcf	3,5	;RP0=0, select bank0
  7025  082C  1303               	bcf	3,6	;RP1=0, select bank0
  7026  082D  1487               	bsf	7,1	;volatile
  7027  082E  0008               	return
  7028  082F                     u3960:	
  7029  082F  1283               	bcf	3,5	;RP0=0, select bank0
  7030  0830  1303               	bcf	3,6	;RP1=0, select bank0
  7031  0831  1087               	bcf	7,1	;volatile
  7032  0832  0008               	return
  7033  0833                     __end_of_SwitchGPS:	
  7034                           
  7035                           	psect	text24
  7036  01BC                     __ptext24:	
  7037 ;; *************** function _ReadRTCAsSec *****************
  7038 ;; Defined at:
  7039 ;;		line 27 in file "libs/gsk_RTC_GPS.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;		None
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  Out             4   13[BANK0 ] long 
  7044 ;;  TempVar000      1   17[BANK0 ] unsigned char 
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  4    0[BANK0 ] long 
  7047 ;; Registers used:
  7048 ;;		wreg, status,2, status,0, pclath, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/900
  7051 ;;		On exit  : 300/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7054 ;;      Params:         0       4       0       0       0       0
  7055 ;;      Locals:         0       7       0       0       0       0
  7056 ;;      Temps:          0       7       0       0       0       0
  7057 ;;      Totals:         0      18       0       0       0       0
  7058 ;;Total ram usage:       18 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    3
  7061 ;; This function calls:
  7062 ;;		_I2C_ReadAtAddress
  7063 ;;		___lmul
  7064 ;;		___wmul
  7065 ;; This function is called by:
  7066 ;;		_main
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           
  7071                           ;psect for function _ReadRTCAsSec
  7072  01BC                     _ReadRTCAsSec:	
  7073                           
  7074                           ;gsk_RTC_GPS.c: 30: TempVar000 = I2C_ReadAtAddress(0xde, 0x02);
  7075                           
  7076                           ;incstack = 0
  7077                           ; Regs used in _ReadRTCAsSec: [wreg+status,2+status,0+pclath+cstack]
  7078  01BC  3002               	movlw	2
  7079  01BD  00F4               	movwf	I2C_ReadAtAddress@IntAdd
  7080  01BE  30DE               	movlw	222
  7081  01BF  228B  120A  118A   	fcall	_I2C_ReadAtAddress
  7082  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  7083  01C3  00BD               	movwf	ReadRTCAsSec@TempVar000
  7084                           
  7085                           ;gsk_RTC_GPS.c: 31: Out = ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x03)*10);
  7086  01C4  390F               	andlw	15
  7087  01C5  00B0               	movwf	??_ReadRTCAsSec
  7088  01C6  0E3D               	swapf	ReadRTCAsSec@TempVar000,w
  7089  01C7  390F               	andlw	15
  7090  01C8  3903               	andlw	3
  7091  01C9  00F0               	movwf	___wmul@multiplier
  7092  01CA  300A               	movlw	10
  7093  01CB  01F1               	clrf	___wmul@multiplier+1
  7094  01CC  00F2               	movwf	___wmul@multiplicand
  7095  01CD  01F3               	clrf	___wmul@multiplicand+1
  7096  01CE  2272  120A  118A   	fcall	___wmul
  7097  01D1  0830               	movf	??_ReadRTCAsSec,w
  7098  01D2  0770               	addwf	?___wmul,w
  7099  01D3  00B9               	movwf	ReadRTCAsSec@Out
  7100  01D4  3000               	movlw	0
  7101  01D5  1803               	skipnc
  7102  01D6  3001               	movlw	1
  7103  01D7  0771               	addwf	?___wmul+1,w
  7104  01D8  00BA               	movwf	ReadRTCAsSec@Out+1
  7105  01D9  01BB               	clrf	ReadRTCAsSec@Out+2
  7106  01DA  1BBA               	btfsc	ReadRTCAsSec@Out+1,7
  7107  01DB  03BB               	decf	ReadRTCAsSec@Out+2,f
  7108  01DC  083B               	movf	ReadRTCAsSec@Out+2,w
  7109  01DD  00BC               	movwf	ReadRTCAsSec@Out+3
  7110                           
  7111                           ;gsk_RTC_GPS.c: 32: Out = Out*3600;
  7112  01DE  300E               	movlw	14
  7113  01DF  01F3               	clrf	___lmul@multiplier+3
  7114  01E0  01F2               	clrf	___lmul@multiplier+2
  7115  01E1  00F1               	movwf	___lmul@multiplier+1
  7116  01E2  3010               	movlw	16
  7117  01E3  00F0               	movwf	___lmul@multiplier
  7118  01E4  083C               	movf	ReadRTCAsSec@Out+3,w
  7119  01E5  00F7               	movwf	___lmul@multiplicand+3
  7120  01E6  083B               	movf	ReadRTCAsSec@Out+2,w
  7121  01E7  00F6               	movwf	___lmul@multiplicand+2
  7122  01E8  083A               	movf	ReadRTCAsSec@Out+1,w
  7123  01E9  00F5               	movwf	___lmul@multiplicand+1
  7124  01EA  0839               	movf	ReadRTCAsSec@Out,w
  7125  01EB  00F4               	movwf	___lmul@multiplicand
  7126  01EC  22E7  120A  118A   	fcall	___lmul
  7127  01EF  0873               	movf	?___lmul+3,w
  7128  01F0  00BC               	movwf	ReadRTCAsSec@Out+3
  7129  01F1  0872               	movf	?___lmul+2,w
  7130  01F2  00BB               	movwf	ReadRTCAsSec@Out+2
  7131  01F3  0871               	movf	?___lmul+1,w
  7132  01F4  00BA               	movwf	ReadRTCAsSec@Out+1
  7133  01F5  0870               	movf	?___lmul,w
  7134  01F6  00B9               	movwf	ReadRTCAsSec@Out
  7135  01F7  30DE               	movlw	222
  7136                           
  7137                           ;gsk_RTC_GPS.c: 34: TempVar000 = I2C_ReadAtAddress(0xde, 0x01);
  7138  01F8  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  7139  01F9  0AF4               	incf	I2C_ReadAtAddress@IntAdd,f
  7140  01FA  228B  120A  118A   	fcall	_I2C_ReadAtAddress
  7141  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  7142  01FE  00BD               	movwf	ReadRTCAsSec@TempVar000
  7143                           
  7144                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  7145  01FF  231A  120A  118A   	fcall	PL22	;call to abstracted procedure
  7146  0202  2272  120A  118A   	fcall	___wmul
  7147  0205  0871               	movf	?___wmul+1,w
  7148  0206  00B8               	movwf	_ReadRTCAsSec$1022+1
  7149  0207  0870               	movf	?___wmul,w
  7150  0208  00B7               	movwf	_ReadRTCAsSec$1022
  7151  0209  083D               	movf	ReadRTCAsSec@TempVar000,w
  7152  020A  390F               	andlw	15
  7153  020B  07B7               	addwf	_ReadRTCAsSec$1022,f
  7154  020C  1803               	skipnc
  7155  020D  0AB8               	incf	_ReadRTCAsSec$1022+1,f
  7156                           
  7157                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  7158  020E  0838               	movf	_ReadRTCAsSec$1022+1,w
  7159  020F  00F1               	movwf	___wmul@multiplier+1
  7160  0210  0837               	movf	_ReadRTCAsSec$1022,w
  7161  0211  00F0               	movwf	___wmul@multiplier
  7162  0212  303C               	movlw	60
  7163  0213  00F2               	movwf	___wmul@multiplicand
  7164  0214  01F3               	clrf	___wmul@multiplicand+1
  7165  0215  2272  120A  118A   	fcall	___wmul
  7166  0218  0870               	movf	?___wmul,w
  7167  0219  00B0               	movwf	??_ReadRTCAsSec
  7168  021A  0871               	movf	?___wmul+1,w
  7169  021B  00B1               	movwf	??_ReadRTCAsSec+1
  7170  021C  3000               	movlw	0
  7171  021D  1BB1               	btfsc	??_ReadRTCAsSec+1,7
  7172  021E  30FF               	movlw	255
  7173  021F  00B2               	movwf	??_ReadRTCAsSec+2
  7174  0220  00B3               	movwf	??_ReadRTCAsSec+3
  7175  0221  0830               	movf	??_ReadRTCAsSec,w
  7176  0222  07B9               	addwf	ReadRTCAsSec@Out,f
  7177  0223  0831               	movf	??_ReadRTCAsSec+1,w
  7178  0224  1103               	clrz
  7179  0225  1803               	skipnc
  7180  0226  3E01               	addlw	1
  7181  0227  1D03               	btfss	3,2
  7182  0228  07BA               	addwf	ReadRTCAsSec@Out+1,f
  7183  0229  0832               	movf	??_ReadRTCAsSec+2,w
  7184  022A  1103               	clrz
  7185  022B  1803               	skipnc
  7186  022C  3E01               	addlw	1
  7187  022D  1D03               	btfss	3,2
  7188  022E  07BB               	addwf	ReadRTCAsSec@Out+2,f
  7189  022F  0833               	movf	??_ReadRTCAsSec+3,w
  7190  0230  1103               	clrz
  7191  0231  1803               	skipnc
  7192  0232  3E01               	addlw	1
  7193  0233  1D03               	btfss	3,2
  7194  0234  07BC               	addwf	ReadRTCAsSec@Out+3,f
  7195  0235  30DE               	movlw	222
  7196                           
  7197                           ;gsk_RTC_GPS.c: 37: TempVar000 = I2C_ReadAtAddress(0xde, 0x00);
  7198  0236  01F4               	clrf	I2C_ReadAtAddress@IntAdd
  7199  0237  228B  120A  118A   	fcall	_I2C_ReadAtAddress
  7200  023A  1283               	bcf	3,5	;RP0=0, select bank0
  7201  023B  00BD               	movwf	ReadRTCAsSec@TempVar000
  7202                           
  7203                           ;gsk_RTC_GPS.c: 38: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10);
  7204  023C  390F               	andlw	15
  7205  023D  00B0               	movwf	??_ReadRTCAsSec
  7206  023E  231A  120A  118A   	fcall	PL22	;call to abstracted procedure
  7207  0241  2272  120A  118A   	fcall	___wmul
  7208  0244  0830               	movf	??_ReadRTCAsSec,w
  7209  0245  0770               	addwf	?___wmul,w
  7210  0246  00B1               	movwf	??_ReadRTCAsSec+1
  7211  0247  3000               	movlw	0
  7212  0248  1803               	skipnc
  7213  0249  3001               	movlw	1
  7214  024A  0771               	addwf	?___wmul+1,w
  7215  024B  00B2               	movwf	??_ReadRTCAsSec+2
  7216  024C  0831               	movf	??_ReadRTCAsSec+1,w
  7217  024D  00B3               	movwf	??_ReadRTCAsSec+3
  7218  024E  0832               	movf	??_ReadRTCAsSec+2,w
  7219  024F  00B4               	movwf	??_ReadRTCAsSec+4
  7220  0250  3000               	movlw	0
  7221  0251  1BB4               	btfsc	??_ReadRTCAsSec+4,7
  7222  0252  30FF               	movlw	255
  7223  0253  00B5               	movwf	??_ReadRTCAsSec+5
  7224  0254  00B6               	movwf	??_ReadRTCAsSec+6
  7225  0255  0833               	movf	??_ReadRTCAsSec+3,w
  7226  0256  07B9               	addwf	ReadRTCAsSec@Out,f
  7227  0257  0834               	movf	??_ReadRTCAsSec+4,w
  7228  0258  1103               	clrz
  7229  0259  1803               	skipnc
  7230  025A  3E01               	addlw	1
  7231  025B  1D03               	btfss	3,2
  7232  025C  07BA               	addwf	ReadRTCAsSec@Out+1,f
  7233  025D  0835               	movf	??_ReadRTCAsSec+5,w
  7234  025E  1103               	clrz
  7235  025F  1803               	skipnc
  7236  0260  3E01               	addlw	1
  7237  0261  1D03               	btfss	3,2
  7238  0262  07BB               	addwf	ReadRTCAsSec@Out+2,f
  7239  0263  0836               	movf	??_ReadRTCAsSec+6,w
  7240  0264  1103               	clrz
  7241  0265  1803               	skipnc
  7242  0266  3E01               	addlw	1
  7243  0267  1D03               	btfss	3,2
  7244  0268  07BC               	addwf	ReadRTCAsSec@Out+3,f
  7245                           
  7246                           ;gsk_RTC_GPS.c: 39: return Out;
  7247  0269  083C               	movf	ReadRTCAsSec@Out+3,w
  7248  026A  00AF               	movwf	?_ReadRTCAsSec+3
  7249  026B  083B               	movf	ReadRTCAsSec@Out+2,w
  7250  026C  00AE               	movwf	?_ReadRTCAsSec+2
  7251  026D  083A               	movf	ReadRTCAsSec@Out+1,w
  7252  026E  00AD               	movwf	?_ReadRTCAsSec+1
  7253  026F  0839               	movf	ReadRTCAsSec@Out,w
  7254  0270  00AC               	movwf	?_ReadRTCAsSec
  7255  0271  0008               	return
  7256  0272                     __end_of_ReadRTCAsSec:	
  7257  0272                     __ptext25:	
  7258 ;; *************** function ___wmul *****************
  7259 ;; Defined at:
  7260 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  multiplier      2    0[COMMON] unsigned int 
  7263 ;;  multiplicand    2    2[COMMON] unsigned int 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;  product         2    4[COMMON] unsigned int 
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  2    0[COMMON] unsigned int 
  7268 ;; Registers used:
  7269 ;;		wreg, status,2, status,0
  7270 ;; Tracked objects:
  7271 ;;		On entry : 300/800
  7272 ;;		On exit  : 300/0
  7273 ;;		Unchanged: 300/0
  7274 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7275 ;;      Params:         4       0       0       0       0       0
  7276 ;;      Locals:         2       0       0       0       0       0
  7277 ;;      Temps:          0       0       0       0       0       0
  7278 ;;      Totals:         6       0       0       0       0       0
  7279 ;;Total ram usage:        6 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; This function calls:
  7282 ;;		Nothing
  7283 ;; This function is called by:
  7284 ;;		_ReadRTCAsSec
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           
  7289                           ;psect for function ___wmul
  7290  0272                     ___wmul:	
  7291                           
  7292                           ;incstack = 0
  7293                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7294  0272  01F4               	clrf	___wmul@product
  7295  0273  01F5               	clrf	___wmul@product+1
  7296  0274                     l2867:	
  7297  0274  1C70               	btfss	___wmul@multiplier,0
  7298  0275  2A7C               	goto	l2871
  7299  0276  0872               	movf	___wmul@multiplicand,w
  7300  0277  07F4               	addwf	___wmul@product,f
  7301  0278  1803               	skipnc
  7302  0279  0AF5               	incf	___wmul@product+1,f
  7303  027A  0873               	movf	___wmul@multiplicand+1,w
  7304  027B  07F5               	addwf	___wmul@product+1,f
  7305  027C                     l2871:	
  7306  027C  1003               	clrc
  7307  027D  0DF2               	rlf	___wmul@multiplicand,f
  7308  027E  0DF3               	rlf	___wmul@multiplicand+1,f
  7309  027F  1003               	clrc
  7310  0280  0CF1               	rrf	___wmul@multiplier+1,f
  7311  0281  0CF0               	rrf	___wmul@multiplier,f
  7312  0282  0870               	movf	___wmul@multiplier,w
  7313  0283  0471               	iorwf	___wmul@multiplier+1,w
  7314  0284  1D03               	btfss	3,2
  7315  0285  2A74               	goto	l2867
  7316  0286  0875               	movf	___wmul@product+1,w
  7317  0287  00F1               	movwf	?___wmul+1
  7318  0288  0874               	movf	___wmul@product,w
  7319  0289  00F0               	movwf	?___wmul
  7320  028A  0008               	return
  7321  028B                     __end_of___wmul:	
  7322  028B                     __ptext27:	
  7323 ;; *************** function _I2C_ReadAtAddress *****************
  7324 ;; Defined at:
  7325 ;;		line 55 in file "libs/gsk_i2c.c"
  7326 ;; Parameters:    Size  Location     Type
  7327 ;;  DevID           1    wreg     unsigned char 
  7328 ;;  IntAdd          1    4[COMMON] unsigned char 
  7329 ;; Auto vars:     Size  Location     Type
  7330 ;;  DevID           1    6[COMMON] unsigned char 
  7331 ;;  data            1    5[COMMON] unsigned char 
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1    wreg      unsigned char 
  7334 ;; Registers used:
  7335 ;;		wreg, status,2, status,0, pclath, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/900
  7338 ;;		On exit  : 300/100
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7341 ;;      Params:         1       0       0       0       0       0
  7342 ;;      Locals:         2       0       0       0       0       0
  7343 ;;      Temps:          0       0       0       0       0       0
  7344 ;;      Totals:         3       0       0       0       0       0
  7345 ;;Total ram usage:        3 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    2
  7348 ;; This function calls:
  7349 ;;		_I2C_Master_Read
  7350 ;;		_I2C_Master_Start
  7351 ;;		_I2C_Master_Stop
  7352 ;;		_I2C_Master_Write
  7353 ;; This function is called by:
  7354 ;;		_ReadRTCAsSec
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           
  7359                           ;psect for function _I2C_ReadAtAddress
  7360  028B                     _I2C_ReadAtAddress:	
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _I2C_ReadAtAddress: [wreg+status,2+status,0+pclath+cstack]
  7364                           ;I2C_ReadAtAddress@DevID stored from wreg
  7365  028B  00F6               	movwf	I2C_ReadAtAddress@DevID
  7366                           
  7367                           ;gsk_i2c.c: 57: I2C_Master_Start();
  7368  028C  22B9  120A  118A   	fcall	_I2C_Master_Start
  7369                           
  7370                           ;gsk_i2c.c: 58: I2C_Master_Write(DevID);
  7371  028F  0876               	movf	I2C_ReadAtAddress@DevID,w
  7372  0290  00F0               	movwf	I2C_Master_Write@d
  7373  0291  01F1               	clrf	I2C_Master_Write@d+1
  7374  0292  22B4  120A  118A   	fcall	_I2C_Master_Write
  7375                           
  7376                           ;gsk_i2c.c: 59: I2C_Master_Write(IntAdd);
  7377  0295  0874               	movf	I2C_ReadAtAddress@IntAdd,w
  7378  0296  00F0               	movwf	I2C_Master_Write@d
  7379  0297  01F1               	clrf	I2C_Master_Write@d+1
  7380  0298  22B4  120A  118A   	fcall	_I2C_Master_Write
  7381                           
  7382                           ;gsk_i2c.c: 60: I2C_Master_Stop();
  7383  029B  22E4  120A  118A   	fcall	_I2C_Master_Stop
  7384                           
  7385                           ;gsk_i2c.c: 62: I2C_Master_Start();
  7386  029E  22B9  120A  118A   	fcall	_I2C_Master_Start
  7387                           
  7388                           ;gsk_i2c.c: 63: I2C_Master_Write(DevID+1);
  7389  02A1  0876               	movf	I2C_ReadAtAddress@DevID,w
  7390  02A2  00F0               	movwf	I2C_Master_Write@d
  7391  02A3  01F1               	clrf	I2C_Master_Write@d+1
  7392  02A4  0AF0               	incf	I2C_Master_Write@d,f
  7393  02A5  1903               	skipnz
  7394  02A6  0AF1               	incf	I2C_Master_Write@d+1,f
  7395  02A7  22B4  120A  118A   	fcall	_I2C_Master_Write
  7396                           
  7397                           ;gsk_i2c.c: 64: char data = I2C_Master_Read(0);
  7398  02AA  01F0               	clrf	I2C_Master_Read@a
  7399  02AB  01F1               	clrf	I2C_Master_Read@a+1
  7400  02AC  22BC  120A  118A   	fcall	_I2C_Master_Read
  7401  02AF  0870               	movf	?_I2C_Master_Read,w
  7402  02B0  00F5               	movwf	I2C_ReadAtAddress@data
  7403                           
  7404                           ;gsk_i2c.c: 65: I2C_Master_Stop();
  7405  02B1  22E4               	fcall	_I2C_Master_Stop
  7406                           
  7407                           ;gsk_i2c.c: 66: return data;
  7408  02B2  0875               	movf	I2C_ReadAtAddress@data,w
  7409  02B3  0008               	return
  7410  02B4                     __end_of_I2C_ReadAtAddress:	
  7411  02B4                     __ptext28:	
  7412 ;; *************** function _I2C_Master_Write *****************
  7413 ;; Defined at:
  7414 ;;		line 36 in file "libs/gsk_i2c.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  d               2    0[COMMON] unsigned int 
  7417 ;; Auto vars:     Size  Location     Type
  7418 ;;		None
  7419 ;; Return value:  Size  Location     Type
  7420 ;;                  1    wreg      void 
  7421 ;; Registers used:
  7422 ;;		wreg, status,2, status,0, pclath, cstack
  7423 ;; Tracked objects:
  7424 ;;		On entry : 200/900
  7425 ;;		On exit  : 300/0
  7426 ;;		Unchanged: 0/0
  7427 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7428 ;;      Params:         2       0       0       0       0       0
  7429 ;;      Locals:         0       0       0       0       0       0
  7430 ;;      Temps:          0       0       0       0       0       0
  7431 ;;      Totals:         2       0       0       0       0       0
  7432 ;;Total ram usage:        2 bytes
  7433 ;; Hardware stack levels used:    1
  7434 ;; Hardware stack levels required when called:    1
  7435 ;; This function calls:
  7436 ;;		_I2C_Master_Wait
  7437 ;; This function is called by:
  7438 ;;		_I2C_ReadAtAddress
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _I2C_Master_Write
  7444  02B4                     _I2C_Master_Write:	
  7445                           
  7446                           ;gsk_i2c.c: 38: I2C_Master_Wait();
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  7450  02B4  22DB               	fcall	_I2C_Master_Wait
  7451                           
  7452                           ;gsk_i2c.c: 39: SSPBUF = d;
  7453  02B5  0870               	movf	I2C_Master_Write@d,w
  7454  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  7455  02B7  0093               	movwf	19	;volatile
  7456  02B8  0008               	return
  7457  02B9                     __end_of_I2C_Master_Write:	
  7458  02B9                     __ptext30:	
  7459 ;; *************** function _I2C_Master_Start *****************
  7460 ;; Defined at:
  7461 ;;		line 18 in file "libs/gsk_i2c.c"
  7462 ;; Parameters:    Size  Location     Type
  7463 ;;		None
  7464 ;; Auto vars:     Size  Location     Type
  7465 ;;		None
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      void 
  7468 ;; Registers used:
  7469 ;;		wreg, status,2, status,0, pclath, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/900
  7472 ;;		On exit  : 300/100
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7475 ;;      Params:         0       0       0       0       0       0
  7476 ;;      Locals:         0       0       0       0       0       0
  7477 ;;      Temps:          0       0       0       0       0       0
  7478 ;;      Totals:         0       0       0       0       0       0
  7479 ;;Total ram usage:        0 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    1
  7482 ;; This function calls:
  7483 ;;		_I2C_Master_Wait
  7484 ;; This function is called by:
  7485 ;;		_I2C_ReadAtAddress
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           
  7490                           ;psect for function _I2C_Master_Start
  7491  02B9                     _I2C_Master_Start:	
  7492                           
  7493                           ;gsk_i2c.c: 20: I2C_Master_Wait();
  7494                           
  7495                           ;incstack = 0
  7496                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  7497  02B9  22DB               	fcall	_I2C_Master_Wait
  7498                           
  7499                           ;gsk_i2c.c: 21: SEN = 1;
  7500  02BA  1411               	bsf	17,0	;volatile
  7501  02BB  0008               	return
  7502  02BC                     __end_of_I2C_Master_Start:	
  7503  02BC                     __ptext31:	
  7504 ;; *************** function _I2C_Master_Read *****************
  7505 ;; Defined at:
  7506 ;;		line 42 in file "libs/gsk_i2c.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  a               2    0[COMMON] unsigned short 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  temp            2    2[COMMON] unsigned short 
  7511 ;; Return value:  Size  Location     Type
  7512 ;;                  2    0[COMMON] unsigned short 
  7513 ;; Registers used:
  7514 ;;		wreg, status,2, status,0, pclath, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : 300/800
  7517 ;;		On exit  : 300/100
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7520 ;;      Params:         2       0       0       0       0       0
  7521 ;;      Locals:         2       0       0       0       0       0
  7522 ;;      Temps:          0       0       0       0       0       0
  7523 ;;      Totals:         4       0       0       0       0       0
  7524 ;;Total ram usage:        4 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    1
  7527 ;; This function calls:
  7528 ;;		_I2C_Master_Wait
  7529 ;; This function is called by:
  7530 ;;		_I2C_ReadAtAddress
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _I2C_Master_Read
  7536  02BC                     _I2C_Master_Read:	
  7537                           
  7538                           ;gsk_i2c.c: 44: unsigned short temp;
  7539                           ;gsk_i2c.c: 45: I2C_Master_Wait();
  7540                           
  7541                           ;incstack = 0
  7542                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  7543  02BC  22DB  120A  118A   	fcall	_I2C_Master_Wait
  7544                           
  7545                           ;gsk_i2c.c: 46: RCEN = 1;
  7546  02BF  1591               	bsf	17,3	;volatile
  7547                           
  7548                           ;gsk_i2c.c: 47: I2C_Master_Wait();
  7549  02C0  22DB  120A  118A   	fcall	_I2C_Master_Wait
  7550                           
  7551                           ;gsk_i2c.c: 48: temp = SSPBUF;
  7552  02C3  1283               	bcf	3,5	;RP0=0, select bank0
  7553  02C4  0813               	movf	19,w	;volatile
  7554  02C5  00F2               	movwf	I2C_Master_Read@temp
  7555  02C6  01F3               	clrf	I2C_Master_Read@temp+1
  7556                           
  7557                           ;gsk_i2c.c: 49: I2C_Master_Wait();
  7558  02C7  22DB  120A  118A   	fcall	_I2C_Master_Wait
  7559                           
  7560                           ;gsk_i2c.c: 50: ACKDT = (a)?0:1;
  7561  02CA  0870               	movf	I2C_Master_Read@a,w
  7562  02CB  0471               	iorwf	I2C_Master_Read@a+1,w
  7563  02CC  1D03               	btfss	3,2
  7564  02CD  2AD2               	goto	u3060
  7565  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  7566  02CF  1303               	bcf	3,6	;RP1=0, select bank1
  7567  02D0  1691               	bsf	17,5	;volatile
  7568  02D1  2AD5               	goto	l2689
  7569  02D2                     u3060:	
  7570  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  7571  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  7572  02D4  1291               	bcf	17,5	;volatile
  7573  02D5                     l2689:	
  7574                           
  7575                           ;gsk_i2c.c: 51: ACKEN = 1;
  7576  02D5  1611               	bsf	17,4	;volatile
  7577                           
  7578                           ;gsk_i2c.c: 52: return temp;
  7579  02D6  0873               	movf	I2C_Master_Read@temp+1,w
  7580  02D7  00F1               	movwf	?_I2C_Master_Read+1
  7581  02D8  0872               	movf	I2C_Master_Read@temp,w
  7582  02D9  00F0               	movwf	?_I2C_Master_Read
  7583  02DA  0008               	return
  7584  02DB                     __end_of_I2C_Master_Read:	
  7585  02DB                     __ptext32:	
  7586 ;; *************** function _I2C_Master_Wait *****************
  7587 ;; Defined at:
  7588 ;;		line 13 in file "libs/gsk_i2c.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;		None
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;		None
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  1    wreg      void 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/900
  7599 ;;		On exit  : 300/100
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7602 ;;      Params:         0       0       0       0       0       0
  7603 ;;      Locals:         0       0       0       0       0       0
  7604 ;;      Temps:          0       0       0       0       0       0
  7605 ;;      Totals:         0       0       0       0       0       0
  7606 ;;Total ram usage:        0 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; This function calls:
  7609 ;;		Nothing
  7610 ;; This function is called by:
  7611 ;;		_I2C_Master_Start
  7612 ;;		_I2C_Master_Stop
  7613 ;;		_I2C_Master_Write
  7614 ;;		_I2C_Master_Read
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           
  7619                           ;psect for function _I2C_Master_Wait
  7620  02DB                     _I2C_Master_Wait:	
  7621  02DB                     l308:	
  7622                           ;gsk_i2c.c: 15: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7623                           
  7624                           ;incstack = 0
  7625                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  7626                           
  7627  02DB  1683               	bsf	3,5	;RP0=1, select bank1
  7628  02DC  1303               	bcf	3,6	;RP1=0, select bank1
  7629  02DD  1914               	btfsc	20,2	;volatile
  7630  02DE  2ADB               	goto	l308
  7631  02DF  0811               	movf	17,w	;volatile
  7632  02E0  391F               	andlw	31
  7633  02E1  1903               	btfsc	3,2
  7634  02E2  0008               	return
  7635  02E3  2ADB               	goto	l308
  7636  02E4                     __end_of_I2C_Master_Wait:	
  7637  02E4                     __ptext29:	
  7638 ;; *************** function _I2C_Master_Stop *****************
  7639 ;; Defined at:
  7640 ;;		line 30 in file "libs/gsk_i2c.c"
  7641 ;; Parameters:    Size  Location     Type
  7642 ;;		None
  7643 ;; Auto vars:     Size  Location     Type
  7644 ;;		None
  7645 ;; Return value:  Size  Location     Type
  7646 ;;                  1    wreg      void 
  7647 ;; Registers used:
  7648 ;;		wreg, status,2, status,0, pclath, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 200/800
  7651 ;;		On exit  : 300/100
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7654 ;;      Params:         0       0       0       0       0       0
  7655 ;;      Locals:         0       0       0       0       0       0
  7656 ;;      Temps:          0       0       0       0       0       0
  7657 ;;      Totals:         0       0       0       0       0       0
  7658 ;;Total ram usage:        0 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    1
  7661 ;; This function calls:
  7662 ;;		_I2C_Master_Wait
  7663 ;; This function is called by:
  7664 ;;		_I2C_ReadAtAddress
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           
  7669                           ;psect for function _I2C_Master_Stop
  7670  02E4                     _I2C_Master_Stop:	
  7671                           
  7672                           ;gsk_i2c.c: 32: I2C_Master_Wait();
  7673                           
  7674                           ;incstack = 0
  7675                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  7676  02E4  22DB               	fcall	_I2C_Master_Wait
  7677                           
  7678                           ;gsk_i2c.c: 33: PEN = 1;
  7679  02E5  1511               	bsf	17,2	;volatile
  7680  02E6  0008               	return
  7681  02E7                     __end_of_I2C_Master_Stop:	
  7682  02E7                     __ptext26:	
  7683 ;; *************** function ___lmul *****************
  7684 ;; Defined at:
  7685 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  multiplier      4    0[COMMON] unsigned long 
  7688 ;;  multiplicand    4    4[COMMON] unsigned long 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  product         4    8[COMMON] unsigned long 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;                  4    0[COMMON] unsigned long 
  7693 ;; Registers used:
  7694 ;;		wreg, status,2, status,0
  7695 ;; Tracked objects:
  7696 ;;		On entry : 300/800
  7697 ;;		On exit  : 300/0
  7698 ;;		Unchanged: 300/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7700 ;;      Params:         8       0       0       0       0       0
  7701 ;;      Locals:         4       0       0       0       0       0
  7702 ;;      Temps:          0       0       0       0       0       0
  7703 ;;      Totals:        12       0       0       0       0       0
  7704 ;;Total ram usage:       12 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; This function calls:
  7707 ;;		Nothing
  7708 ;; This function is called by:
  7709 ;;		_WriteLongInt
  7710 ;;		_ReadRTCAsSec
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function ___lmul
  7716  02E7                     ___lmul:	
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7720  02E7  01F8               	clrf	___lmul@product
  7721  02E8  01F9               	clrf	___lmul@product+1
  7722  02E9  01FA               	clrf	___lmul@product+2
  7723  02EA  01FB               	clrf	___lmul@product+3
  7724  02EB                     l804:	
  7725  02EB  1C70               	btfss	___lmul@multiplier,0
  7726  02EC  2B01               	goto	l2885
  7727  02ED  0874               	movf	___lmul@multiplicand,w
  7728  02EE  07F8               	addwf	___lmul@product,f
  7729  02EF  0875               	movf	___lmul@multiplicand+1,w
  7730  02F0  1103               	clrz
  7731  02F1  1803               	skipnc
  7732  02F2  3E01               	addlw	1
  7733  02F3  1D03               	btfss	3,2
  7734  02F4  07F9               	addwf	___lmul@product+1,f
  7735  02F5  0876               	movf	___lmul@multiplicand+2,w
  7736  02F6  1103               	clrz
  7737  02F7  1803               	skipnc
  7738  02F8  3E01               	addlw	1
  7739  02F9  1D03               	btfss	3,2
  7740  02FA  07FA               	addwf	___lmul@product+2,f
  7741  02FB  0877               	movf	___lmul@multiplicand+3,w
  7742  02FC  1103               	clrz
  7743  02FD  1803               	skipnc
  7744  02FE  3E01               	addlw	1
  7745  02FF  1D03               	btfss	3,2
  7746  0300  07FB               	addwf	___lmul@product+3,f
  7747  0301                     l2885:	
  7748  0301  1003               	clrc
  7749  0302  0DF4               	rlf	___lmul@multiplicand,f
  7750  0303  0DF5               	rlf	___lmul@multiplicand+1,f
  7751  0304  0DF6               	rlf	___lmul@multiplicand+2,f
  7752  0305  0DF7               	rlf	___lmul@multiplicand+3,f
  7753  0306  1003               	clrc
  7754  0307  0CF3               	rrf	___lmul@multiplier+3,f
  7755  0308  0CF2               	rrf	___lmul@multiplier+2,f
  7756  0309  0CF1               	rrf	___lmul@multiplier+1,f
  7757  030A  0CF0               	rrf	___lmul@multiplier,f
  7758  030B  0873               	movf	___lmul@multiplier+3,w
  7759  030C  0472               	iorwf	___lmul@multiplier+2,w
  7760  030D  0471               	iorwf	___lmul@multiplier+1,w
  7761  030E  0470               	iorwf	___lmul@multiplier,w
  7762  030F  1D03               	skipz
  7763  0310  2AEB               	goto	l804
  7764  0311  087B               	movf	___lmul@product+3,w
  7765  0312  00F3               	movwf	?___lmul+3
  7766  0313  087A               	movf	___lmul@product+2,w
  7767  0314  00F2               	movwf	?___lmul+2
  7768  0315  0879               	movf	___lmul@product+1,w
  7769  0316  00F1               	movwf	?___lmul+1
  7770  0317  0878               	movf	___lmul@product,w
  7771  0318  00F0               	movwf	?___lmul
  7772  0319  0008               	return
  7773  031A                     __end_of___lmul:	
  7774  031A                     PL22:	
  7775  031A  0E3D               	swapf	ReadRTCAsSec@TempVar000,w
  7776  031B  390F               	andlw	15
  7777  031C  3907               	andlw	7
  7778  031D  00F0               	movwf	___wmul@multiplier
  7779  031E  300A               	movlw	10
  7780  031F  01F1               	clrf	___wmul@multiplier+1
  7781  0320  00F2               	movwf	___wmul@multiplicand
  7782  0321  01F3               	clrf	___wmul@multiplicand+1
  7783  0322  0008               	return
  7784  0323                     __end_ofPL22:	
  7785                           
  7786                           	psect	text36
  7787  16C9                     __ptext36:	
  7788 ;; *************** function _Lcd_Disp_Bin *****************
  7789 ;; Defined at:
  7790 ;;		line 200 in file "libs/HD44780.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;  y               1    wreg     unsigned char 
  7793 ;;  x               1    7[BANK0 ] unsigned char 
  7794 ;;  val             1    8[BANK0 ] unsigned char 
  7795 ;;  DispChar        1    9[BANK0 ] unsigned char 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  y               1   11[BANK0 ] unsigned char 
  7798 ;;  i               1   12[BANK0 ] unsigned char 
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      void 
  7801 ;; Registers used:
  7802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7803 ;; Tracked objects:
  7804 ;;		On entry : 300/800
  7805 ;;		On exit  : 300/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7808 ;;      Params:         0       3       0       0       0       0
  7809 ;;      Locals:         0       2       0       0       0       0
  7810 ;;      Temps:          0       1       0       0       0       0
  7811 ;;      Totals:         0       6       0       0       0       0
  7812 ;;Total ram usage:        6 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; Hardware stack levels required when called:    3
  7815 ;; This function calls:
  7816 ;;		_Lcd_WriteChar
  7817 ;; This function is called by:
  7818 ;;		_main
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           
  7823                           ;psect for function _Lcd_Disp_Bin
  7824  16C9                     _Lcd_Disp_Bin:	
  7825                           
  7826                           ;incstack = 0
  7827                           ; Regs used in _Lcd_Disp_Bin: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7828                           ;Lcd_Disp_Bin@y stored from wreg
  7829  16C9  00B7               	movwf	Lcd_Disp_Bin@y
  7830                           
  7831                           ;HD44780.c: 201: for (char i=0; i<8; i++){
  7832  16CA  01B8               	clrf	Lcd_Disp_Bin@i
  7833  16CB                     l3205:	
  7834                           
  7835                           ;HD44780.c: 202: if ((val) & (0x01<<i))
  7836  16CB  3001               	movlw	1
  7837  16CC  00B6               	movwf	??_Lcd_Disp_Bin
  7838  16CD  0A38               	incf	Lcd_Disp_Bin@i,w
  7839  16CE  2ED1               	goto	u3694
  7840  16CF                     u3695:	
  7841  16CF  1003               	clrc
  7842  16D0  0DB6               	rlf	??_Lcd_Disp_Bin,f
  7843  16D1                     u3694:	
  7844  16D1  3EFF               	addlw	-1
  7845  16D2  1D03               	skipz
  7846  16D3  2ECF               	goto	u3695
  7847  16D4  0836               	movf	??_Lcd_Disp_Bin,w
  7848  16D5  0534               	andwf	Lcd_Disp_Bin@val,w
  7849  16D6  1903               	btfsc	3,2
  7850  16D7  2EE3               	goto	l3209
  7851                           
  7852                           ;HD44780.c: 203: Lcd_WriteChar(y, x+i, DispChar);
  7853  16D8  0838               	movf	Lcd_Disp_Bin@i,w
  7854  16D9  0733               	addwf	Lcd_Disp_Bin@x,w
  7855  16DA  00AF               	movwf	Lcd_WriteChar@x
  7856  16DB  0835               	movf	Lcd_Disp_Bin@DispChar,w
  7857  16DC  00B0               	movwf	Lcd_WriteChar@c
  7858  16DD  0837               	movf	Lcd_Disp_Bin@y,w
  7859  16DE  120A  158A  209F  160A  118A  	fcall	_Lcd_WriteChar
  7860  16E3                     l3209:	
  7861  16E3  1283               	bcf	3,5	;RP0=0, select bank0
  7862  16E4  1303               	bcf	3,6	;RP1=0, select bank0
  7863  16E5  3008               	movlw	8
  7864  16E6  0AB8               	incf	Lcd_Disp_Bin@i,f
  7865  16E7  0238               	subwf	Lcd_Disp_Bin@i,w
  7866  16E8  1803               	btfsc	3,0
  7867  16E9  0008               	return
  7868  16EA  2ECB               	goto	l3205
  7869  16EB                     __end_of_Lcd_Disp_Bin:	
  7870                           
  7871                           	psect	text41
  7872  0016                     __ptext41:	
  7873 ;; *************** function _I2C_Master_Init *****************
  7874 ;; Defined at:
  7875 ;;		line 3 in file "libs/gsk_i2c.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;  c               4    0[BANK0 ] const unsigned long 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;		None
  7880 ;; Return value:  Size  Location     Type
  7881 ;;                  1    wreg      void 
  7882 ;; Registers used:
  7883 ;;		wreg, status,2, status,0, pclath, cstack
  7884 ;; Tracked objects:
  7885 ;;		On entry : B00/800
  7886 ;;		On exit  : B00/900
  7887 ;;		Unchanged: 800/0
  7888 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7889 ;;      Params:         0       4       0       0       0       0
  7890 ;;      Locals:         0       0       0       0       0       0
  7891 ;;      Temps:          0       4       0       0       0       0
  7892 ;;      Totals:         0       8       0       0       0       0
  7893 ;;Total ram usage:        8 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; Hardware stack levels required when called:    1
  7896 ;; This function calls:
  7897 ;;		___lldiv
  7898 ;; This function is called by:
  7899 ;;		_main
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           
  7904                           ;psect for function _I2C_Master_Init
  7905  0016                     _I2C_Master_Init:	
  7906                           
  7907                           ;gsk_i2c.c: 5: SSPCON = 0b00101000;
  7908                           
  7909                           ;incstack = 0
  7910                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  7911  0016  3028               	movlw	40
  7912  0017  0094               	movwf	20	;volatile
  7913                           
  7914                           ;gsk_i2c.c: 6: SSPCON2 = 0;
  7915  0018  1683               	bsf	3,5	;RP0=1, select bank1
  7916  0019  0191               	clrf	17	;volatile
  7917                           
  7918                           ;gsk_i2c.c: 7: SSPADD = (4000000/(4*c))-1;
  7919  001A  1283               	bcf	3,5	;RP0=0, select bank0
  7920  001B  082C               	movf	I2C_Master_Init@c,w
  7921  001C  00B0               	movwf	??_I2C_Master_Init
  7922  001D  082D               	movf	I2C_Master_Init@c+1,w
  7923  001E  00B1               	movwf	??_I2C_Master_Init+1
  7924  001F  082E               	movf	I2C_Master_Init@c+2,w
  7925  0020  00B2               	movwf	??_I2C_Master_Init+2
  7926  0021  082F               	movf	I2C_Master_Init@c+3,w
  7927  0022  00B3               	movwf	??_I2C_Master_Init+3
  7928  0023  3002               	movlw	2
  7929  0024                     u3805:	
  7930  0024  1003               	clrc
  7931  0025  0DB0               	rlf	??_I2C_Master_Init,f
  7932  0026  0DB1               	rlf	??_I2C_Master_Init+1,f
  7933  0027  0DB2               	rlf	??_I2C_Master_Init+2,f
  7934  0028  0DB3               	rlf	??_I2C_Master_Init+3,f
  7935  0029  3EFF               	addlw	-1
  7936  002A  1D03               	skipz
  7937  002B  2824               	goto	u3805
  7938  002C  0833               	movf	??_I2C_Master_Init+3,w
  7939  002D  00F3               	movwf	___lldiv@divisor+3
  7940  002E  0832               	movf	??_I2C_Master_Init+2,w
  7941  002F  00F2               	movwf	___lldiv@divisor+2
  7942  0030  0831               	movf	??_I2C_Master_Init+1,w
  7943  0031  00F1               	movwf	___lldiv@divisor+1
  7944  0032  0830               	movf	??_I2C_Master_Init,w
  7945  0033  00F0               	movwf	___lldiv@divisor
  7946  0034  303D               	movlw	61
  7947  0035  01F7               	clrf	___lldiv@dividend+3
  7948  0036  00F6               	movwf	___lldiv@dividend+2
  7949  0037  3009               	movlw	9
  7950  0038  00F5               	movwf	___lldiv@dividend+1
  7951  0039  01F4               	clrf	___lldiv@dividend
  7952  003A  2043               	fcall	___lldiv
  7953  003B  0870               	movf	?___lldiv,w
  7954  003C  3EFF               	addlw	255
  7955  003D  1683               	bsf	3,5	;RP0=1, select bank1
  7956  003E  0093               	movwf	19	;volatile
  7957                           
  7958                           ;gsk_i2c.c: 8: SSPSTAT = 0;
  7959  003F  0194               	clrf	20	;volatile
  7960                           
  7961                           ;gsk_i2c.c: 9: TRISC3 = 1;
  7962  0040  1587               	bsf	7,3	;volatile
  7963                           
  7964                           ;gsk_i2c.c: 10: TRISC4 = 1;
  7965  0041  1607               	bsf	7,4	;volatile
  7966  0042  0008               	return
  7967  0043                     __end_of_I2C_Master_Init:	
  7968  0043                     __ptext42:	
  7969 ;; *************** function ___lldiv *****************
  7970 ;; Defined at:
  7971 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  7972 ;; Parameters:    Size  Location     Type
  7973 ;;  divisor         4    0[COMMON] unsigned long 
  7974 ;;  dividend        4    4[COMMON] unsigned long 
  7975 ;; Auto vars:     Size  Location     Type
  7976 ;;  quotient        4    8[COMMON] unsigned long 
  7977 ;;  counter         1   12[COMMON] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  4    0[COMMON] unsigned long 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0
  7982 ;; Tracked objects:
  7983 ;;		On entry : B00/800
  7984 ;;		On exit  : B00/800
  7985 ;;		Unchanged: B00/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  7987 ;;      Params:         8       0       0       0       0       0
  7988 ;;      Locals:         5       0       0       0       0       0
  7989 ;;      Temps:          0       0       0       0       0       0
  7990 ;;      Totals:        13       0       0       0       0       0
  7991 ;;Total ram usage:       13 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; This function calls:
  7994 ;;		Nothing
  7995 ;; This function is called by:
  7996 ;;		_I2C_Master_Init
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           
  8001                           ;psect for function ___lldiv
  8002  0043                     ___lldiv:	
  8003                           
  8004                           ;incstack = 0
  8005                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8006  0043  01F8               	clrf	___lldiv@quotient
  8007  0044  01F9               	clrf	___lldiv@quotient+1
  8008  0045  01FA               	clrf	___lldiv@quotient+2
  8009  0046  01FB               	clrf	___lldiv@quotient+3
  8010  0047  0873               	movf	___lldiv@divisor+3,w
  8011  0048  0472               	iorwf	___lldiv@divisor+2,w
  8012  0049  0471               	iorwf	___lldiv@divisor+1,w
  8013  004A  0470               	iorwf	___lldiv@divisor,w
  8014  004B  1903               	skipnz
  8015  004C  2882               	goto	l3061
  8016  004D  01FC               	clrf	___lldiv@counter
  8017  004E                     L22:	
  8018  004E  0AFC               	incf	___lldiv@counter,f
  8019  004F  1BF3               	btfsc	___lldiv@divisor+3,7
  8020  0050  2857               	goto	l3049
  8021  0051  1003               	clrc
  8022  0052  0DF0               	rlf	___lldiv@divisor,f
  8023  0053  0DF1               	rlf	___lldiv@divisor+1,f
  8024  0054  0DF2               	rlf	___lldiv@divisor+2,f
  8025  0055  0DF3               	rlf	___lldiv@divisor+3,f
  8026  0056  284E               	goto	L22
  8027  0057                     l3049:	
  8028  0057  1003               	clrc
  8029  0058  0DF8               	rlf	___lldiv@quotient,f
  8030  0059  0DF9               	rlf	___lldiv@quotient+1,f
  8031  005A  0DFA               	rlf	___lldiv@quotient+2,f
  8032  005B  0DFB               	rlf	___lldiv@quotient+3,f
  8033  005C  0873               	movf	___lldiv@divisor+3,w
  8034  005D  0277               	subwf	___lldiv@dividend+3,w
  8035  005E  1D03               	skipz
  8036  005F  286A               	goto	u3625
  8037  0060  0872               	movf	___lldiv@divisor+2,w
  8038  0061  0276               	subwf	___lldiv@dividend+2,w
  8039  0062  1D03               	skipz
  8040  0063  286A               	goto	u3625
  8041  0064  0871               	movf	___lldiv@divisor+1,w
  8042  0065  0275               	subwf	___lldiv@dividend+1,w
  8043  0066  1D03               	skipz
  8044  0067  286A               	goto	u3625
  8045  0068  0870               	movf	___lldiv@divisor,w
  8046  0069  0274               	subwf	___lldiv@dividend,w
  8047  006A                     u3625:	
  8048  006A  1C03               	skipc
  8049  006B  287C               	goto	L23
  8050  006C  0870               	movf	___lldiv@divisor,w
  8051  006D  02F4               	subwf	___lldiv@dividend,f
  8052  006E  0871               	movf	___lldiv@divisor+1,w
  8053  006F  1C03               	skipc
  8054  0070  0F71               	incfsz	___lldiv@divisor+1,w
  8055  0071  02F5               	subwf	___lldiv@dividend+1,f
  8056  0072  0872               	movf	___lldiv@divisor+2,w
  8057  0073  1C03               	skipc
  8058  0074  0F72               	incfsz	___lldiv@divisor+2,w
  8059  0075  02F6               	subwf	___lldiv@dividend+2,f
  8060  0076  0873               	movf	___lldiv@divisor+3,w
  8061  0077  1C03               	skipc
  8062  0078  0F73               	incfsz	___lldiv@divisor+3,w
  8063  0079  02F7               	subwf	___lldiv@dividend+3,f
  8064  007A  1478               	bsf	___lldiv@quotient,0
  8065  007B  1003               	clrc
  8066  007C                     L23:	
  8067  007C  0CF3               	rrf	___lldiv@divisor+3,f
  8068  007D  0CF2               	rrf	___lldiv@divisor+2,f
  8069  007E  0CF1               	rrf	___lldiv@divisor+1,f
  8070  007F  0CF0               	rrf	___lldiv@divisor,f
  8071  0080  0BFC               	decfsz	___lldiv@counter,f
  8072  0081  2857               	goto	l3049
  8073  0082                     l3061:	
  8074  0082  087B               	movf	___lldiv@quotient+3,w
  8075  0083  00F3               	movwf	?___lldiv+3
  8076  0084  087A               	movf	___lldiv@quotient+2,w
  8077  0085  00F2               	movwf	?___lldiv+2
  8078  0086  0879               	movf	___lldiv@quotient+1,w
  8079  0087  00F1               	movwf	?___lldiv+1
  8080  0088  0878               	movf	___lldiv@quotient,w
  8081  0089  00F0               	movwf	?___lldiv
  8082  008A  0008               	return
  8083  008B                     __end_of___lldiv:	
  8084                           
  8085                           	psect	text44
  8086  008B                     __ptext44:	
  8087 ;; *************** function _GetCumulativePeriodsForStates *****************
  8088 ;; Defined at:
  8089 ;;		line 3 in file "libs/gsk_algo_funcs.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;		None
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  i               1    7[COMMON] unsigned char 
  8094 ;;  j               1    6[COMMON] unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  1    wreg      void 
  8097 ;; Registers used:
  8098 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 300/200
  8101 ;;		On exit  : 800/800
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  8104 ;;      Params:         0       0       0       0       0       0
  8105 ;;      Locals:         2       0       0       0       0       0
  8106 ;;      Temps:          4       0       0       0       0       0
  8107 ;;      Totals:         6       0       0       0       0       0
  8108 ;;Total ram usage:        6 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    1
  8111 ;; This function calls:
  8112 ;;		_GetPrevCycle
  8113 ;; This function is called by:
  8114 ;;		_main
  8115 ;; This function uses a non-reentrant model
  8116 ;;
  8117                           
  8118                           
  8119                           ;psect for function _GetCumulativePeriodsForStates
  8120  008B                     _GetCumulativePeriodsForStates:	
  8121                           
  8122                           ;gsk_algo_funcs.c: 4: char i, j;
  8123                           ;gsk_algo_funcs.c: 5: for (i=0; i< 3; i++) {
  8124                           
  8125                           ;incstack = 0
  8126                           ; Regs used in _GetCumulativePeriodsForStates: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  8127  008B  01F7               	clrf	GetCumulativePeriodsForStates@i
  8128  008C                     l3287:	
  8129                           
  8130                           ;gsk_algo_funcs.c: 6: STATE_CUMULATIVE_PERIODS[i] = 0;
  8131  008C  1003               	clrc
  8132  008D  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  8133  008E  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  8134  008F  0084               	movwf	4
  8135  0090  1383               	bcf	3,7	;select IRP bank1
  8136  0091  0180               	clrf	0
  8137  0092  0A84               	incf	4,f
  8138  0093  0180               	clrf	0
  8139                           
  8140                           ;gsk_algo_funcs.c: 7: if (i==0)
  8141  0094  0877               	movf	GetCumulativePeriodsForStates@i,w
  8142  0095  1D03               	btfss	3,2
  8143  0096  2899               	goto	l3293
  8144                           
  8145                           ;gsk_algo_funcs.c: 8: j = 0;
  8146  0097  01F6               	clrf	GetCumulativePeriodsForStates@j
  8147  0098  28A2               	goto	l3299
  8148  0099                     l3293:	
  8149                           
  8150                           ;gsk_algo_funcs.c: 9: else
  8151                           ;gsk_algo_funcs.c: 10: j = STATE_BREAKS[GetPrevCycle(i)];
  8152  0099  0877               	movf	GetCumulativePeriodsForStates@i,w
  8153  009A  219B  120A  118A   	fcall	_GetPrevCycle
  8154  009D  3E66               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  8155  009E  0084               	movwf	4
  8156  009F  1783               	bsf	3,7	;select IRP bank2
  8157  00A0  0800               	movf	0,w
  8158  00A1  00F6               	movwf	GetCumulativePeriodsForStates@j
  8159  00A2                     l3299:	
  8160  00A2  0877               	movf	GetCumulativePeriodsForStates@i,w
  8161  00A3  3E66               	addlw	(low (_STATE_BREAKS| (0+256)))& (0+255)
  8162  00A4  0084               	movwf	4
  8163  00A5  1783               	bsf	3,7	;select IRP bank2
  8164  00A6  0800               	movf	0,w
  8165  00A7  0276               	subwf	GetCumulativePeriodsForStates@j,w
  8166  00A8  1803               	btfsc	3,0
  8167  00A9  28CB               	goto	l3301
  8168                           
  8169                           ;gsk_algo_funcs.c: 12: STATE_CUMULATIVE_PERIODS[i] = STATE_CUMULATIVE_PERIODS[i]
  8170                           ;gsk_algo_funcs.c: 13: + STATE_PERIODS[j];
  8171  00AA  1003               	clrc
  8172  00AB  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  8173  00AC  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  8174  00AD  0084               	movwf	4
  8175  00AE  1383               	bcf	3,7	;select IRP bank1
  8176  00AF  0800               	movf	0,w
  8177  00B0  00F2               	movwf	??_GetCumulativePeriodsForStates
  8178  00B1  0A84               	incf	4,f
  8179  00B2  0800               	movf	0,w
  8180  00B3  00F3               	movwf	??_GetCumulativePeriodsForStates+1
  8181  00B4  0876               	movf	GetCumulativePeriodsForStates@j,w
  8182  00B5  3ECC               	addlw	204
  8183  00B6  0084               	movwf	4
  8184  00B7  1783               	bsf	3,7	;select IRP bank3
  8185  00B8  0800               	movf	0,w
  8186  00B9  0772               	addwf	??_GetCumulativePeriodsForStates,w
  8187  00BA  00F4               	movwf	??_GetCumulativePeriodsForStates+2
  8188  00BB  0873               	movf	??_GetCumulativePeriodsForStates+1,w
  8189  00BC  1803               	skipnc
  8190  00BD  0A73               	incf	??_GetCumulativePeriodsForStates+1,w
  8191  00BE  00F5               	movwf	??_GetCumulativePeriodsForStates+3
  8192  00BF  1003               	clrc
  8193  00C0  0D77               	rlf	GetCumulativePeriodsForStates@i,w
  8194  00C1  3EE7               	addlw	(low (_STATE_CUMULATIVE_PERIODS| 0))& (0+255)
  8195  00C2  0084               	movwf	4
  8196  00C3  0874               	movf	??_GetCumulativePeriodsForStates+2,w
  8197  00C4  1383               	bcf	3,7	;select IRP bank1
  8198  00C5  0080               	movwf	0
  8199  00C6  0A84               	incf	4,f
  8200  00C7  0875               	movf	??_GetCumulativePeriodsForStates+3,w
  8201  00C8  0080               	movwf	0
  8202  00C9  0AF6               	incf	GetCumulativePeriodsForStates@j,f
  8203  00CA  28A2               	goto	l3299
  8204  00CB                     l3301:	
  8205  00CB  3003               	movlw	3
  8206  00CC  0AF7               	incf	GetCumulativePeriodsForStates@i,f
  8207  00CD  0277               	subwf	GetCumulativePeriodsForStates@i,w
  8208  00CE  1803               	btfsc	3,0
  8209  00CF  0008               	return
  8210  00D0  288C               	goto	l3287
  8211  00D1                     __end_of_GetCumulativePeriodsForStates:	
  8212  00D1                     __ptext43:	
  8213 ;; *************** function _GetCycle *****************
  8214 ;; Defined at:
  8215 ;;		line 27 in file "libs/gsk_algo_funcs.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;		None
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  i               1   13[COMMON] unsigned char 
  8220 ;;  PrevCycle       1   12[COMMON] unsigned char 
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 100/A00
  8227 ;;		On exit  : 300/200
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  8230 ;;      Params:         0       0       0       0       0       0
  8231 ;;      Locals:         2       0       0       0       0       0
  8232 ;;      Temps:         10       0       0       0       0       0
  8233 ;;      Totals:        12       0       0       0       0       0
  8234 ;;Total ram usage:       12 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:    1
  8237 ;; This function calls:
  8238 ;;		_GetPrevCycle
  8239 ;; This function is called by:
  8240 ;;		_main
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           
  8245                           ;psect for function _GetCycle
  8246  00D1                     _GetCycle:	
  8247                           
  8248                           ;gsk_algo_funcs.c: 28: char PrevCycle;
  8249                           ;gsk_algo_funcs.c: 29: for (char i = 0; i < 3; i++) {
  8250                           
  8251                           ;incstack = 0
  8252                           ; Regs used in _GetCycle: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8253  00D1  01FD               	clrf	GetCycle@i
  8254  00D2                     l3311:	
  8255                           
  8256                           ;gsk_algo_funcs.c: 30: PrevCycle = GetPrevCycle(i);
  8257  00D2  087D               	movf	GetCycle@i,w
  8258  00D3  219B  120A  118A   	fcall	_GetPrevCycle
  8259  00D6  00FC               	movwf	GetCycle@PrevCycle
  8260                           
  8261                           ;gsk_algo_funcs.c: 31: if (C[PrevCycle] <= C[i]) {
  8262  00D7  00F2               	movwf	??_GetCycle
  8263  00D8  3001               	movlw	1
  8264  00D9  1003               	clrc
  8265  00DA                     L24:	
  8266  00DA  0DF2               	rlf	??_GetCycle,f
  8267  00DB  3EFF               	addlw	-1
  8268  00DC  1003               	clrc
  8269  00DD  1D03               	skipz
  8270  00DE  28DA               	goto	L24
  8271  00DF  0D72               	rlf	??_GetCycle,w
  8272  00E0  3E20               	addlw	32
  8273  00E1  0084               	movwf	4
  8274  00E2  1383               	bcf	3,7	;select IRP bank0
  8275  00E3  0800               	movf	0,w
  8276  00E4  00F3               	movwf	??_GetCycle+1
  8277  00E5  0A84               	incf	4,f
  8278  00E6  0800               	movf	0,w
  8279  00E7  00F4               	movwf	??_GetCycle+2
  8280  00E8  0A84               	incf	4,f
  8281  00E9  0800               	movf	0,w
  8282  00EA  00F5               	movwf	??_GetCycle+3
  8283  00EB  0A84               	incf	4,f
  8284  00EC  0800               	movf	0,w
  8285  00ED  00F6               	movwf	??_GetCycle+4
  8286  00EE  087D               	movf	GetCycle@i,w
  8287  00EF  00F7               	movwf	??_GetCycle+5
  8288  00F0  3001               	movlw	1
  8289  00F1  1003               	clrc
  8290  00F2                     L25:	
  8291  00F2  0DF7               	rlf	??_GetCycle+5,f
  8292  00F3  3EFF               	addlw	-1
  8293  00F4  1003               	clrc
  8294  00F5  1D03               	skipz
  8295  00F6  28F2               	goto	L25
  8296  00F7  0D77               	rlf	??_GetCycle+5,w
  8297  00F8  3E20               	addlw	32
  8298  00F9  0084               	movwf	4
  8299  00FA  0800               	movf	0,w
  8300  00FB  00F8               	movwf	??_GetCycle+6
  8301  00FC  0A84               	incf	4,f
  8302  00FD  0800               	movf	0,w
  8303  00FE  00F9               	movwf	??_GetCycle+7
  8304  00FF  0A84               	incf	4,f
  8305  0100  0800               	movf	0,w
  8306  0101  00FA               	movwf	??_GetCycle+8
  8307  0102  0A84               	incf	4,f
  8308  0103  0800               	movf	0,w
  8309  0104  00FB               	movwf	??_GetCycle+9
  8310  0105  3A80               	xorlw	128
  8311  0106  00FF               	movwf	127
  8312  0107  0876               	movf	??_GetCycle+4,w
  8313  0108  3A80               	xorlw	128
  8314  0109  027F               	subwf	127,w
  8315  010A  1D03               	skipz
  8316  010B  2916               	goto	u3863
  8317  010C  0875               	movf	??_GetCycle+3,w
  8318  010D  027A               	subwf	??_GetCycle+8,w
  8319  010E  1D03               	skipz
  8320  010F  2916               	goto	u3863
  8321  0110  0874               	movf	??_GetCycle+2,w
  8322  0111  0279               	subwf	??_GetCycle+7,w
  8323  0112  1D03               	skipz
  8324  0113  2916               	goto	u3863
  8325  0114  0873               	movf	??_GetCycle+1,w
  8326  0115  0278               	subwf	??_GetCycle+6,w
  8327  0116                     u3863:	
  8328                           
  8329                           ;gsk_algo_funcs.c: 32: if ((S>C[PrevCycle]) && (S<=C[i])) {
  8330  0116  087C               	movf	GetCycle@PrevCycle,w
  8331  0117  00F2               	movwf	??_GetCycle
  8332  0118  3001               	movlw	1
  8333  0119  1C03               	skipc
  8334  011A  2953               	goto	L28
  8335  011B  1003               	clrc
  8336  011C                     L26:	
  8337  011C  0DF2               	rlf	??_GetCycle,f
  8338  011D  3EFF               	addlw	-1
  8339  011E  1003               	clrc
  8340  011F  1D03               	skipz
  8341  0120  291C               	goto	L26
  8342  0121  21A5  120A  118A   	fcall	PL8	;call to abstracted procedure
  8343  0124  21B6  120A  118A   	fcall	PL44	;call to abstracted procedure
  8344  0127  1D03               	skipz
  8345  0128  2933               	goto	u3883
  8346  0129  0864               	movf	(_S+2)^(0+256),w	;volatile
  8347  012A  0275               	subwf	??_GetCycle+3,w
  8348  012B  1D03               	skipz
  8349  012C  2933               	goto	u3883
  8350  012D  0863               	movf	(_S+1)^(0+256),w	;volatile
  8351  012E  0274               	subwf	??_GetCycle+2,w
  8352  012F  1D03               	skipz
  8353  0130  2933               	goto	u3883
  8354  0131  0862               	movf	_S^(0+256),w	;volatile
  8355  0132  0273               	subwf	??_GetCycle+1,w
  8356  0133                     u3883:	
  8357  0133  1803               	skipnc
  8358  0134  2990               	goto	l3329
  8359  0135  087D               	movf	GetCycle@i,w
  8360  0136  00F2               	movwf	??_GetCycle
  8361  0137  3001               	movlw	1
  8362  0138  1003               	clrc
  8363  0139                     L27:	
  8364  0139  0DF2               	rlf	??_GetCycle,f
  8365  013A  3EFF               	addlw	-1
  8366  013B  1003               	clrc
  8367  013C  1D03               	skipz
  8368  013D  2939               	goto	L27
  8369  013E  21A5  120A  118A   	fcall	PL8	;call to abstracted procedure
  8370  0141  0865               	movf	(_S+3)^(0+256),w	;volatile
  8371  0142  3A80               	xorlw	128
  8372  0143  027F               	subwf	127,w
  8373  0144  1D03               	skipz
  8374  0145  2950               	goto	u3903
  8375  0146  0864               	movf	(_S+2)^(0+256),w	;volatile
  8376  0147  0275               	subwf	??_GetCycle+3,w
  8377  0148  1D03               	skipz
  8378  0149  2950               	goto	u3903
  8379  014A  0863               	movf	(_S+1)^(0+256),w	;volatile
  8380  014B  0274               	subwf	??_GetCycle+2,w
  8381  014C  1D03               	skipz
  8382  014D  2950               	goto	u3903
  8383  014E  0862               	movf	_S^(0+256),w	;volatile
  8384  014F  0273               	subwf	??_GetCycle+1,w
  8385  0150                     u3903:	
  8386  0150  1803               	btfsc	3,0
  8387  0151  298E               	goto	l3319
  8388  0152  2990               	goto	l3329
  8389  0153                     L28:	
  8390                           ;gsk_algo_funcs.c: 36: if (((S>C[PrevCycle]) && (S<=86400)) || (S<=86400)) {
  8391                           
  8392  0153  0DF2               	rlf	??_GetCycle,f
  8393  0154  3EFF               	addlw	-1
  8394  0155  1003               	clrc
  8395  0156  1D03               	skipz
  8396  0157  2953               	goto	L28
  8397  0158  21A5  120A  118A   	fcall	PL8	;call to abstracted procedure
  8398  015B  21B6  120A  118A   	fcall	PL44	;call to abstracted procedure
  8399  015E  1D03               	skipz
  8400  015F  296A               	goto	u3923
  8401  0160  0864               	movf	(_S+2)^(0+256),w	;volatile
  8402  0161  0275               	subwf	??_GetCycle+3,w
  8403  0162  1D03               	skipz
  8404  0163  296A               	goto	u3923
  8405  0164  0863               	movf	(_S+1)^(0+256),w	;volatile
  8406  0165  0274               	subwf	??_GetCycle+2,w
  8407  0166  1D03               	skipz
  8408  0167  296A               	goto	u3923
  8409  0168  0862               	movf	_S^(0+256),w	;volatile
  8410  0169  0273               	subwf	??_GetCycle+1,w
  8411  016A                     u3923:	
  8412  016A  1803               	skipnc
  8413  016B  297D               	goto	l3325
  8414  016C  1BE5               	btfsc	(_S+3)^(0+256),7	;volatile
  8415  016D  298E               	goto	l3319
  8416  016E  0865               	movf	(_S+3)^(0+256),w	;volatile
  8417  016F  1D03               	btfss	3,2
  8418  0170  297D               	goto	l3325
  8419  0171  3001               	movlw	1
  8420  0172  0264               	subwf	(_S+2)^(0+256),w	;volatile
  8421  0173  1D03               	skipz
  8422  0174  297B               	goto	u3933
  8423  0175  3051               	movlw	81
  8424  0176  0263               	subwf	(_S+1)^(0+256),w	;volatile
  8425  0177  1D03               	skipz
  8426  0178  297B               	goto	u3933
  8427  0179  3081               	movlw	129
  8428  017A  0262               	subwf	_S^(0+256),w	;volatile
  8429  017B                     u3933:	
  8430  017B  1C03               	btfss	3,0
  8431  017C  298E               	goto	l3319
  8432  017D                     l3325:	
  8433  017D  1BE5               	btfsc	(_S+3)^(0+256),7	;volatile
  8434  017E  298E               	goto	l3319
  8435  017F  0865               	movf	(_S+3)^(0+256),w	;volatile
  8436  0180  1D03               	btfss	3,2
  8437  0181  2990               	goto	l3329
  8438  0182  3001               	movlw	1
  8439  0183  0264               	subwf	(_S+2)^(0+256),w	;volatile
  8440  0184  1D03               	skipz
  8441  0185  298C               	goto	u3943
  8442  0186  3051               	movlw	81
  8443  0187  0263               	subwf	(_S+1)^(0+256),w	;volatile
  8444  0188  1D03               	skipz
  8445  0189  298C               	goto	u3943
  8446  018A  3081               	movlw	129
  8447  018B  0262               	subwf	_S^(0+256),w	;volatile
  8448  018C                     u3943:	
  8449  018C  1803               	btfsc	3,0
  8450  018D  2990               	goto	l3329
  8451  018E                     l3319:	
  8452                           
  8453                           ;gsk_algo_funcs.c: 33: CYCLE_TYPE = i;
  8454  018E  087D               	movf	GetCycle@i,w
  8455  018F  00EA               	movwf	_CYCLE_TYPE^(0+256)	;volatile
  8456  0190                     l3329:	
  8457  0190  3003               	movlw	3
  8458  0191  0AFD               	incf	GetCycle@i,f
  8459  0192  027D               	subwf	GetCycle@i,w
  8460  0193  1C03               	skipc
  8461  0194  28D2               	goto	l3311
  8462                           
  8463                           ;gsk_algo_funcs.c: 38: }
  8464                           ;gsk_algo_funcs.c: 39: }
  8465                           ;gsk_algo_funcs.c: 40: }
  8466                           ;gsk_algo_funcs.c: 41: PREV_CYCLE_TYPE = GetPrevCycle(CYCLE_TYPE);
  8467  0195  086A               	movf	_CYCLE_TYPE^(0+256),w	;volatile
  8468  0196  219B               	fcall	_GetPrevCycle
  8469  0197  1283               	bcf	3,5	;RP0=0, select bank2
  8470  0198  1703               	bsf	3,6	;RP1=1, select bank2
  8471  0199  00EC               	movwf	_PREV_CYCLE_TYPE^(0+256)	;volatile
  8472  019A  0008               	return
  8473  019B                     __end_of_GetCycle:	
  8474  019B                     __ptext45:	
  8475 ;; *************** function _GetPrevCycle *****************
  8476 ;; Defined at:
  8477 ;;		line 18 in file "libs/gsk_algo_funcs.c"
  8478 ;; Parameters:    Size  Location     Type
  8479 ;;  cycle           1    wreg     unsigned char 
  8480 ;; Auto vars:     Size  Location     Type
  8481 ;;  cycle           1    1[COMMON] unsigned char 
  8482 ;;  PrevCycle       1    0[COMMON] unsigned char 
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  1    wreg      unsigned char 
  8485 ;; Registers used:
  8486 ;;		wreg, status,2, status,0
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/A00
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  8492 ;;      Params:         0       0       0       0       0       0
  8493 ;;      Locals:         2       0       0       0       0       0
  8494 ;;      Temps:          0       0       0       0       0       0
  8495 ;;      Totals:         2       0       0       0       0       0
  8496 ;;Total ram usage:        2 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; This function calls:
  8499 ;;		Nothing
  8500 ;; This function is called by:
  8501 ;;		_GetCumulativePeriodsForStates
  8502 ;;		_GetCycle
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _GetPrevCycle
  8508  019B                     _GetPrevCycle:	
  8509                           
  8510                           ;incstack = 0
  8511                           ; Regs used in _GetPrevCycle: [wreg+status,2+status,0]
  8512                           ;GetPrevCycle@cycle stored from wreg
  8513  019B  00F1               	movwf	GetPrevCycle@cycle
  8514                           
  8515                           ;gsk_algo_funcs.c: 19: UINT8 PrevCycle;
  8516                           ;gsk_algo_funcs.c: 20: if (cycle > 0)
  8517  019C  0871               	movf	GetPrevCycle@cycle,w
  8518  019D  1903               	btfsc	3,2
  8519  019E  29A2               	goto	l2777
  8520                           
  8521                           ;gsk_algo_funcs.c: 21: PrevCycle = cycle - 1;
  8522  019F  0871               	movf	GetPrevCycle@cycle,w
  8523  01A0  3EFF               	addlw	255
  8524  01A1  29A3               	goto	L31
  8525  01A2                     l2777:	
  8526                           
  8527                           ;gsk_algo_funcs.c: 22: else
  8528                           ;gsk_algo_funcs.c: 23: PrevCycle = 3 - 1;
  8529  01A2  3002               	movlw	2
  8530  01A3                     L31:	
  8531  01A3  00F0               	movwf	GetPrevCycle@PrevCycle
  8532                           
  8533                           ;gsk_algo_funcs.c: 24: return PrevCycle;
  8534  01A4  0008               	return
  8535  01A5                     __end_of_GetPrevCycle:	
  8536  01A5                     PL8:	
  8537  01A5  0D72               	rlf	??_GetCycle,w
  8538  01A6  3E20               	addlw	32
  8539  01A7  0084               	movwf	4
  8540  01A8  0800               	movf	0,w
  8541  01A9  00F3               	movwf	??_GetCycle+1
  8542  01AA  0A84               	incf	4,f
  8543  01AB  0800               	movf	0,w
  8544  01AC  00F4               	movwf	??_GetCycle+2
  8545  01AD  0A84               	incf	4,f
  8546  01AE  0800               	movf	0,w
  8547  01AF  00F5               	movwf	??_GetCycle+3
  8548  01B0  0A84               	incf	4,f
  8549  01B1  0800               	movf	0,w
  8550  01B2  00F6               	movwf	??_GetCycle+4
  8551  01B3  3A80               	xorlw	128
  8552  01B4  00FF               	movwf	127
  8553  01B5  0008               	return
  8554  01B6                     __end_ofPL8:	
  8555  01B6                     PL44:	
  8556  01B6  1283               	bcf	3,5	;RP0=0, select bank2
  8557  01B7  1703               	bsf	3,6	;RP1=1, select bank2
  8558  01B8  0865               	movf	(_S+3)^(0+256),w	;volatile
  8559  01B9  3A80               	xorlw	128
  8560  01BA  027F               	subwf	127,w
  8561  01BB  0008               	return
  8562  01BC                     __end_ofPL44:	
  8563                           
  8564                           	psect	text46
  8565  1697                     __ptext46:	
  8566 ;; *************** function _GetAbs *****************
  8567 ;; Defined at:
  8568 ;;		line 55 in file "libs/gsk_algo_funcs.c"
  8569 ;; Parameters:    Size  Location     Type
  8570 ;;  a               2    0[COMMON] short 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;		None
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  2    0[COMMON] short 
  8575 ;; Registers used:
  8576 ;;		status,2, status,0
  8577 ;; Tracked objects:
  8578 ;;		On entry : 300/A00
  8579 ;;		On exit  : 300/200
  8580 ;;		Unchanged: 300/0
  8581 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  8582 ;;      Params:         2       0       0       0       0       0
  8583 ;;      Locals:         0       0       0       0       0       0
  8584 ;;      Temps:          0       0       0       0       0       0
  8585 ;;      Totals:         2       0       0       0       0       0
  8586 ;;Total ram usage:        2 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; This function calls:
  8589 ;;		Nothing
  8590 ;; This function is called by:
  8591 ;;		_main
  8592 ;; This function uses a non-reentrant model
  8593 ;;
  8594                           
  8595                           
  8596                           ;psect for function _GetAbs
  8597  1697                     _GetAbs:	
  8598                           
  8599                           ;gsk_algo_funcs.c: 56: if (a<0)
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in _GetAbs: [status]
  8603  1697  1FF1               	btfss	GetAbs@a+1,7
  8604  1698  0008               	return
  8605                           
  8606                           ;gsk_algo_funcs.c: 57: a=a*(-1);
  8607  1699  09F0               	comf	GetAbs@a,f
  8608  169A  09F1               	comf	GetAbs@a+1,f
  8609  169B  0AF0               	incf	GetAbs@a,f
  8610  169C  1903               	skipnz
  8611  169D  0AF1               	incf	GetAbs@a+1,f
  8612                           
  8613                           ;gsk_algo_funcs.c: 58: return a;
  8614  169E  0008               	return
  8615  169F                     __end_of_GetAbs:	
  8616                           
  8617                           	psect	text47
  8618  169F                     __ptext47:	
  8619 ;; *************** function _DelayInUSec *****************
  8620 ;; Defined at:
  8621 ;;		line 68 in file "libs/gsk_algo_funcs.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;  a               2    0[COMMON] unsigned short 
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  i               2    2[COMMON] unsigned short 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  1    wreg      void 
  8628 ;; Registers used:
  8629 ;;		wreg, status,2, status,0
  8630 ;; Tracked objects:
  8631 ;;		On entry : 300/A00
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1  BANK3h  BANK3l   BANK2
  8635 ;;      Params:         2       0       0       0       0       0
  8636 ;;      Locals:         2       0       0       0       0       0
  8637 ;;      Temps:          0       0       0       0       0       0
  8638 ;;      Totals:         4       0       0       0       0       0
  8639 ;;Total ram usage:        4 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; This function calls:
  8642 ;;		Nothing
  8643 ;; This function is called by:
  8644 ;;		_main
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           
  8649                           ;psect for function _DelayInUSec
  8650  169F                     _DelayInUSec:	
  8651                           
  8652                           ;gsk_algo_funcs.c: 69: for (UINT16 i = 0; i<a; i++)
  8653                           
  8654                           ;incstack = 0
  8655                           ; Regs used in _DelayInUSec: [wreg+status,2+status,0]
  8656  169F  01F2               	clrf	DelayInUSec@i
  8657  16A0  01F3               	clrf	DelayInUSec@i+1
  8658  16A1                     l3349:	
  8659  16A1  0871               	movf	DelayInUSec@a+1,w
  8660  16A2  0273               	subwf	DelayInUSec@i+1,w
  8661  16A3  1D03               	skipz
  8662  16A4  2EA7               	goto	u3995
  8663  16A5  0870               	movf	DelayInUSec@a,w
  8664  16A6  0272               	subwf	DelayInUSec@i,w
  8665  16A7                     u3995:	
  8666  16A7  1803               	btfsc	3,0
  8667  16A8  0008               	return
  8668                           
  8669                           ;gsk_algo_funcs.c: 70: _delay((unsigned long)((1)*(4000000/4000000.0)));
  8670  16A9  0000               	nop
  8671  16AA  0AF2               	incf	DelayInUSec@i,f
  8672  16AB  1903               	skipnz
  8673  16AC  0AF3               	incf	DelayInUSec@i+1,f
  8674  16AD  2EA1               	goto	l3349
  8675  16AE                     __end_of_DelayInUSec:	
  8676  007E                     btemp	set	126	;btemp
  8677  007E                     wtemp	set	126
  8678  007E                     wtemp0	set	126
  8679  0080                     wtemp1	set	128
  8680  0082                     wtemp2	set	130
  8681  0084                     wtemp3	set	132
  8682  0086                     wtemp4	set	134
  8683  0088                     wtemp5	set	136
  8684  007F                     wtemp6	set	127
  8685  007E                     ttemp	set	126
  8686  007E                     ttemp0	set	126
  8687  0081                     ttemp1	set	129
  8688  0084                     ttemp2	set	132
  8689  0087                     ttemp3	set	135
  8690  007F                     ttemp4	set	127
  8691  007E                     ltemp	set	126
  8692  007E                     ltemp0	set	126
  8693  0082                     ltemp1	set	130
  8694  0086                     ltemp2	set	134
  8695  0080                     ltemp3	set	128


Data Sizes:
    Strings     25
    Constant    7
    Data        223
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            68     66      66
    BANK1            30     21      27
    BANK3h           11     10      10
    BANK3l           10      0       0
    BANK2            46     32      43

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK0[2]), 

    IsValidGPS@GPSData	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK2[6]), 

    UART_ReadValidTimeFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK2[6]), 

    UART_ReadFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK2[6]), 

    Lcd_Text@buffer	PTR unsigned char  size(1) Largest target is 17
		 -> STR_2(CODE[17]), STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_GetCycle
    _main->___altoft
    _WriteLongInt->___aldiv
    _UART_ReadValidTimeFromGPS_TO->_UART_ReadFromGPS_TO
    _UART_ReadFromGPS_TO->_UART_Read_TO
    _UART_Init->___altoft
    _trunc->___altoft
    ___fttol->___altoft
    ___altoft->___ftpack
    ___ftadd->___altoft
    ___ftmul->___altoft
    ___ftdiv->___altoft
    ___bmul->___aldiv
    _ReadRTCAsSec->___lmul
    _I2C_ReadAtAddress->_I2C_Master_Read
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Init->_Lcd_Command
    _Lcd_Init->_Lcd_Delay5500us
    _Lcd_WriteChar->___aldiv
    _I2C_Master_Init->___lldiv
    _GetCycle->_GetPrevCycle
    _GetCumulativePeriodsForStates->_GetPrevCycle

Critical Paths under _main in BANK0

    _WriteLongInt->_Lcd_WriteChar
    _UART_Init->_round
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftadd
    ___ftsub->_trunc
    ___ftadd->___ftdiv
    ___ftdiv->___ftmul
    _ReadVars->___bmul
    _Lcd_Disp_Bin->_Lcd_WriteChar
    _Lcd_WriteChar->___bmul

Critical Paths under _main in BANK1

    _main->_UART_Init
    _UART_Init->_round
    _round->___ftsub

Critical Paths under _main in BANK3h

    None.

Critical Paths under _main in BANK3l

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                42    42      0   38455
                                              0 BANK3h    10    10      0
                                              0 BANK2     32    32      0
                        _DelayInUSec
                             _GetAbs
      _GetCumulativePeriodsForStates
                           _GetCycle
                    _I2C_Master_Init
                       _Lcd_Disp_Bin
                           _Lcd_Init
                           _Lcd_Text
                       _ReadRTCAsSec
                           _ReadVars
                          _SwitchGPS
                          _UART_Init
       _UART_ReadValidTimeFromGPS_TO
                       _WriteLongInt
                            ___almod
                           ___altoft
                            ___ftmul
                            ___fttol
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     295
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     508
                                              0 COMMON    10     2      8
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                        10     3      7    4003
                                              7 BANK0     10     3      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___bmul
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     592
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (1) _UART_ReadValidTimeFromGPS_TO                         2     1      1     862
                                              8 COMMON     2     1      1
                         _IsValidGPS
                _UART_ReadFromGPS_TO
 ---------------------------------------------------------------------------------
 (2) _UART_ReadFromGPS_TO                                  7     6      1     397
                                              1 COMMON     7     6      1
                       _UART_Read_TO
 ---------------------------------------------------------------------------------
 (3) _UART_Read_TO                                         1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _IsValidGPS                                           2     2      0     319
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           12     8      4   19099
                                              9 BANK1     12     8      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    9168
                                             63 BANK0      3     0      3
                                              6 BANK1      3     3      0
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3060
                                             55 BANK0      8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     314
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     451
                                             42 BANK0     13     9      4
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             6     2      4    2026
                                              8 COMMON     6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3038
                                              0 BANK1      6     0      6
                            ___ftadd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    2865
                                             30 BANK0     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2327
                                              0 BANK0     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2095
                                             15 BANK0     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SwitchGPS                                            1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            17    17      0     896
                                              3 BANK0     17    17      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     384
                                              0 BANK0      3     2      1
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAsSec                                        18    14      4    2097
                                              0 BANK0     18    14      4
                  _I2C_ReadAtAddress
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     596
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     464
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadAtAddress                                    3     2      1     829
                                              4 COMMON     3     2      1
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     323
                                              0 COMMON     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      4     2      2      98
                                              0 COMMON     4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             4     2      2     745
                                              2 COMMON     4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              2 COMMON     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Disp_Bin                                         6     3      3    1748
                                              7 BANK0      6     3      3
                      _Lcd_WriteChar
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2     934
                                              3 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          2     2      0     176
                                              0 COMMON     2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           2     2      0     176
                                              0 COMMON     2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     343
                                              0 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) _GetCycle                                            12    12      0     291
                                              2 COMMON    12    12      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (1) _GetCumulativePeriodsForStates                        6     6      0     293
                                              2 COMMON     6     6      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (2) _GetPrevCycle                                         2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _GetAbs                                               2     0      2     226
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _DelayInUSec                                          4     2      2      99
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DelayInUSec
   _GetAbs
   _GetCumulativePeriodsForStates
     _GetPrevCycle
   _GetCycle
     _GetPrevCycle
   _I2C_Master_Init
     ___lldiv
   _Lcd_Disp_Bin
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5us
   _ReadRTCAsSec
     _I2C_ReadAtAddress
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___lmul
     ___wmul
   _ReadVars
     ___bmul
       ___aldiv (ARG)
     _eeprom_read
   _SwitchGPS
   _UART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _round
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _frexp
   _UART_ReadValidTimeFromGPS_TO
     _IsValidGPS
     _UART_ReadFromGPS_TO
       _UART_Read_TO
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
     ___aldiv
     ___bmul
       ___aldiv (ARG)
     ___lmul
   ___almod
   ___altoft
     ___ftpack
   ___ftmul
     ___altoft (ARG)
       ___ftpack
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
   ___lbdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3l               A      0       0      10        0.0%
BITBANK3l            A      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BITBANK3h            B      0       0       7        0.0%
BANK3h               B      A       A       9       90.9%
BANK2               2E     20      2B      11       93.5%
BITBANK2            2E      0       0      13        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               1E     15      1B       6       90.0%
BITBANK1            1E      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               44     42      42       4       97.1%
BITBANK0            44      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      A0      14        0.0%
ABS                  0      0      A0      12        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0      DF       0       87.1%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Nov 09 15:39:31 2016

                          ___altoft@exp 007C                                       _C 0020  
                                     _S 0162                                       pc 0002  
                        ___bmul@product 002D                             __CFG_CP$OFF 0000  
                                    PL2 0741                                      PL4 077F  
                                    PL6 07A2                                      PL8 01A5  
                         ___altoft@sign 007D               UART_ReadFromGPS_TO@Output 0075  
                                    l63 0A22                                      _RD 0C60  
                                    _WR 0C61                                      fsr 0004  
                   ___wmul@multiplicand 0072              UART_ReadFromGPS_TO@TimeOut 0071  
                          ___ftadd@exp1 0055                            ___ftadd@exp2 0054  
                                   PL10 07B5                                     PL20 0FDE  
                                   PL12 07C0                                     PL30 0BF5  
                                   PL22 031A                                     PL14 07CB  
                                   PL40 0FF9                                     PL32 0BFE  
                                   PL24 0BE3                                     PL16 0BD7  
                                   PL42 07E0                                     PL34 0C05  
                                   PL26 0BEC                                     PL18 07D4  
                                   PL44 01B6                                     PL36 0C0C  
                                   PL28 0FE9                                     PL38 0FF2  
                          ___ftadd@sign 0053                                     l308 02DB  
                                   l553 17FC                                     l707 0BB5  
                                   l804 02EB                                     l861 16FB  
                                   l848 08D4                                     l961 0E8F  
                                   l949 0E67                                     l985 0D8F  
                                   _RA0 0028                                     _RA1 0029  
                                   _RA2 002A                                     _RA3 002B  
                                   _RA4 002C                                     _RC1 0039  
                                   _RA5 002D                                     _C_D 016B  
                                   _PEN 048A                            __CFG_CPD$OFF 0000  
                                   _SEN 0488                            main@SecError 015D  
                                   fsr0 0004                                     indf 0000  
                          __CFG_IESO$ON 0000                            __CFG_FOSC$HS 0000  
                     GetCycle@PrevCycle 007C                     _UART_ReadFromGPS_TO 17B0  
                   __end_of_Lcd_Command 0AF6                       GetPrevCycle@cycle 0071  
                         ?_ReadRTCAsSec 002C                            __CFG_LVP$OFF 0000  
                          ___ftdiv@cntr 0044                        main@DiffInSecond 0158  
                          ___ftdiv@sign 0049                                    l1003 0EC3  
                                  l1055 16BA                                    l3013 0F3E  
                                  l3025 0F53                                    l3017 0F47  
                                  l3301 00CB                                    l3061 0082  
                                  l3205 16CB                                    l3029 0F5C  
                                  l3311 00D2                                    l3231 0B77  
                                  l2511 0D5A                                    l3049 0057  
                                  l3209 16E3                                    l3161 0941  
                                  l3217 0B01                                    l2441 0E6B  
                                  l2521 0D73                                    l3163 0944  
                                  l3243 0B8B                                    l2451 0E8D  
                                  l2443 0E70                                    l2531 0D8B  
                                  l2523 0D77                                    l3403 173D  
                                  l3325 017D                                    l2461 0AF6  
                                  l3157 093B                                    l3229 0B76  
                                  l2453 0E84                                    l2445 0E75  
                                  l2517 0D69                                    l2605 0FB1  
                                  l2701 17F3                                    l3501 047C  
                                  l3319 018E                                    l2631 0AD2  
                                  l3175 0958                                    l3159 093E  
                                  l3167 0948                                    l2447 0E7F  
                                  l2543 0DA5                                    l2519 0D6E  
                                  l3407 174B                                    l3431 16C7  
                                  l3503 0482                                    l3329 0190  
                                  l2633 0ADF                                    l3169 0956  
                                  l2537 0D9A                                    l2529 0D86  
                                  l2561 0E0E                                    l3417 16B4  
                                  l2635 0AE8                                    l2619 0AAB  
                                  l2555 0DC1                                    l2563 0E13  
                                  l3603 05F3                                    l3515 04DD  
                                  l3349 16A1                                    l3293 0099  
                                  l2661 09F4                                    l2645 09B7  
                                  l2629 0AC6                                    l2741 08A1  
                                  l2493 0D3D                                    l2717 0F81  
                                  l2477 0DE7                                    l2813 17E0  
                                  l2821 17E5                                    l2805 17CF  
                                  l3189 085D                                    l3197 0865  
                                  l3621 0656                                    l3533 0556  
                                  l3509 04CC                                    l3461 0383  
                                  l3287 008C                                    l2655 09D2  
                                  l2743 08A4                                    l2751 08AE  
                                  l2479 0DF2                                    l2591 0E48  
                                  l2583 0E3A                                    l2727 0CEB  
                                  l2807 17D1                                    l3623 0662  
                                  l3543 0571                                    l3527 054D  
                                  l2657 09DE                                    l2745 08A7  
                                  l2753 08BC                                    l2489 0D36  
                                  l2841 1783                                    l3633 069A  
                                  l3617 0645                                    l3609 0602  
                                  l3481 0448                                    l3299 00A2  
                                  l2659 09EB                                    l2747 08AA  
                                  l2499 0D4C                                    l2595 0E56  
                                  l2579 0E32                                    l2835 1775  
                                  l3395 1718                                    l3387 1708  
                                  l3643 06F3                                    l3483 0451  
                                  l2589 0E3E                                    l2853 179F  
                                  l2829 1769                                    l2917 08E3  
                                  l3653 072A                                    l3565 05AD  
                                  l3549 057E                                    l3661 0526  
                                  l3493 0467                                    l2871 027C  
                                  l2951 0EB2                                    l2847 1791  
                                  l2943 0930                                    l2927 08F7  
                                  l3663 073D                                    l3647 070B  
                                  l3559 05A0                                    l3479 0445  
                                  l2777 01A2                                    l2689 02D5  
                                  l3649 070F                                    l3665 051B  
                                  l3497 0476                                    l3489 045E  
                                  l2867 0274                                    l2859 17AD  
                                  l2699 17F8                                    l2939 0922  
                                  l3659 073B                                    l3595 05E1  
                                  l3579 05C2                                    l2885 0301  
                                  l2973 0ED6                                    l2797 17BA  
                                  l3589 05CF                                    l2895 0BCB  
                                  l2991 0F1C                                    l3599 05EA  
                                  l2995 0F2D                                    STR_1 081E  
                                  STR_2 080D                                    _BRGH 04C2  
                                  _CREN 00C4                                    _EE_C 00D2  
                                  u3000 09DB                                    u3020 09E8  
                                  u3040 09F1                                    u3060 02D2  
                                  u4130 03E0                                    u4203 04C6  
                                  u2700 0A86                                    u4220 077D  
                                  u4045 1726                                    u4135 03CE  
                                  u2800 0ACF                                    u4136 03D0  
                                  u3505 0EE4                                    u4225 076B  
                                  u4137 03D6                                    u2730 0A97  
                                  u2714 0A89                                    u4226 076D  
                                  u4138 03D8                                    u4227 0773  
                                  u4139 03DE                                    u2900 0992  
                                  u2820 0ADC                                    u4228 0775  
                                  u2725 0A8C                                    u4405 0636  
                                  u4229 077B                                    u2670 0A75  
                                  u3455 090A                                    u4415 0650  
                                  u4255 050D                                    u2840 0AE5  
                                  u2760 0AA8                                    u2744 0A9A  
                                  u3625 006A                                    u2665 0A6A  
                                  u2585 0E17                                    u4433 0709  
                                  u2930 09A3                                    u2914 0995  
                 __size_of_WriteLongInt 006C                                    u4507 0AAD  
                                  u2755 0A9D                                    u2780 0AC3  
                                  u2684 0A78                                    u3805 0024  
                                  u2925 0998                                    u4517 0AEA  
                                  u2870 0981                                    u3903 0150  
                                  u4527 09B9                                    u2695 0A7B  
                                  u2960 09B4                                    u2944 09A6  
                                  u4464 0536                                    u4537 09F6  
                                  u2865 0976                                    u3923 016A  
                                  u2955 09A9                                    u4475 0540  
                                  u2980 09CF                                    u2884 0984  
                                  _RCEN 048B                                    _RCIF 0065  
                                  u3933 017B                                    u3694 16D1  
                                  u3943 018C                                    u3863 0116  
                                  u2895 0987                                    u3695 16CF  
                                  u3960 082F                                    u4497 0A5D  
                                  u3883 0133                                    u3995 16A7  
                                  _SPEN 00C7                                    _TXEN 04C5  
                                  _SYNC 04C4                       ??_Lcd_Delay5500us 0070  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
                                  _main 0323                            ___ftpack@arg 0070  
                          ___ftpack@exp 0073                    __end_of_Lcd_Delay5us 0AFA  
                                  btemp 007E                                    ltemp 007E  
                                  start 0000                                    ttemp 007E  
                                  wtemp 007E                    __end_of_Lcd_Disp_Bin 16EB  
                  ?_UART_ReadFromGPS_TO 0071                       ___bmul@multiplier 002E  
                         __CFG_MCLRE$ON 0000                            ___ftmul@cntr 0039  
                          ___ftmul@sign 003A                              _Lcd_CharCP 096E  
                          ___fttol@exp1 0062                            ___fttol@lval 005E  
                      ?_I2C_Master_Init 002C                        ?_I2C_Master_Read 0070  
                      ?_I2C_Master_Wait 0070                        ?_I2C_Master_Stop 0070  
                       __end_of___aldiv 0939                         __end_of___almod 1754  
                                 ?_main 0070                                   _ACKEN 048C  
                                 _ACKDT 048D                         __end_of___lbdiv 16C9  
                                 _EEADR 010D                         __end_of___ftadd 0DD5  
                                 _BRG16 0C3B                           __CFG_WDTE$OFF 0000  
                       __end_of___ftdiv 0F0B                                   _ANSEL 0188  
                       __end_of___lldiv 008B                    __end_of_GetPrevCycle 01A5  
                       __end_of___ftmul 0F7A                         __end_of___ftsub 0FA5  
                       __end_of___fttol 0E5F                                   _RCREG 001A  
                                 _SPBRG 0099                            _WriteLongInt 0833  
                   ___lmul@multiplicand 0074                          ??_ReadRTCAsSec 0030  
                    __size_of_UART_Init 007C                             _DelayInUSec 169F  
                            _IsValidGPS 175D                                   _frexp 0FA5  
                         ___ftpack@sign 0074                                   _round 0C8F  
                                 main@i 015F                                   main@j 0155  
                                 main@k 014A                                   main@l 0160  
                                 _trunc 0CDA                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                                   ltemp0 007E  
                                 ltemp1 0082                                   ltemp2 0086  
                                 ltemp3 0080                                   ttemp0 007E  
                                 ttemp1 0081                                   ttemp2 0084  
                                 ttemp3 0087                                   ttemp4 007F  
                                 status 0003                                   wtemp0 007E  
                                 wtemp1 0080                                   wtemp2 0082  
                                 wtemp3 0084                                   wtemp4 0086  
                                 wtemp5 0088                                   wtemp6 007F  
                       ___lbdiv@divisor 0070                       _ReadRTCAsSec$1022 0037  
                       ___lbdiv@counter 0072                        __end_of_GetCycle 019B  
                 ??_UART_ReadFromGPS_TO 0072                        __end_of_Lcd_Init 0A59  
                      __end_of_Lcd_Text 096E                         __initialization 07E7  
                          __end_of_main 0741                        __end_of_ReadVars 0BB4  
                           _Lcd_Command 0A62           main@StateAudioSplOnOffCounter 0153  
                       ReadRTCAsSec@Out 0039                                  ??_main 01E5  
                         ___fttol@sign1 005D                       ?_I2C_Master_Start 0070  
                     ?_I2C_Master_Write 0070                      ??_I2C_Master_Start 0070  
                    ??_I2C_Master_Write 0072                                  ?_frexp 0070  
                      __end_of___altoft 0E04                                  _EEDATA 010C  
                                _EECON1 018C                        __end_of___ftpack 0EA1  
                                ?_round 006B                                  _ANSELH 0189  
                                ?_trunc 0063                                  _EE_C_D 00DE  
                     _I2C_ReadAtAddress 028B                        WriteLongInt@Sign 0039  
                                _SPBRGH 009A                          Lcd_Text@buffer 0073  
                    ?_I2C_ReadAtAddress 0074                                  _SSPADD 0093  
                                _TRISC3 043B                                  _TRISC4 043C  
                                _SSPCON 0014                                  _SSPBUF 0013  
                      WriteLongInt@size 0038                                  _GetAbs 1697  
                        __CFG_PWRTE$OFF 0000                    __size_of_eeprom_read 0015  
                   ??_I2C_ReadAtAddress 0075                       __end_of_UART_Init 0C8F  
                                ___bmul 0BC9                             ?_Lcd_CharCP 0070  
                                ___lmul 02E7                               ??___aldiv 0078  
                             ??___almod 0078                                  ___wmul 0272  
                             ??___lbdiv 0071                               ??___ftadd 0050  
                             ??___ftdiv 0041                               ??___lldiv 0078  
                             ??___ftmul 0032                               ??___ftsub 007E  
                             ??___fttol 005A                   __end_of_Lcd_WriteChar 08C4  
                 ___ftmul@f3_as_product 0036                            __pdataEEDATA 0000  
             __end_of_I2C_ReadAtAddress 02B4                                  round@f 00D8  
                                round@x 006B                             ?_IsValidGPS 0070  
                                trunc@i 0066                   __size_of_Lcd_Delay5us 0004  
                                trunc@x 0063                        ___lbdiv@dividend 0071  
                    Lcd_Command@command 0071                      __size_of_SwitchGPS 000B  
                 __size_of_Lcd_Disp_Bin 0022                 __end_of__initialization 07FC  
                            ___altoft@c 0078                   main@StateSecRemaining 014E  
                       eeprom_read@addr 0070                              ___ftadd@f1 004A  
                            ___ftadd@f2 004D    __end_ofUART_ReadFromGPS_TO@StartCode 080D  
          UART_ReadFromGPS_TO@StartCode 0806                              ___ftdiv@f1 003E  
                            ___ftdiv@f2 003B                              ___ftdiv@f3 0045  
                     IsValidGPS@GPSData 0071                     ___bmul@multiplicand 002C  
                        __pcstackBANK3h 01E5                              ___ftmul@f1 002C  
                            ___ftmul@f2 002F                              ___ftsub@f1 00D5  
                            ___ftsub@f2 00D2                              ___fttol@f1 0056  
                        __pcstackCOMMON 0070                    __end_of_ReadRTCAsSec 0272  
                          __pidataBANK2 0000                   __size_of_GetPrevCycle 000A  
                         __end_of_frexp 0FDE                           __end_of_round 0CDA  
                         __end_of_trunc 0D13                              __end_ofPL2 077F  
                            __end_ofPL4 07A2                              __end_ofPL6 07B5  
                            __end_ofPL8 01B6                        ___lbdiv@quotient 0073  
                          _Lcd_Delay5us 0AF6                         _Lcd_Delay5500us 0A59  
                          _Lcd_Disp_Bin 16C9                          Lcd_WriteChar@c 0030  
                             ?_GetCycle 0070                          Lcd_WriteChar@x 002F  
                        Lcd_WriteChar@y 0031                              SwitchGPS@a 0070  
                             ?_Lcd_Init 0070                               ?_Lcd_Text 0072  
                               ??_frexp 0074                     __size_of_Lcd_CharCP 0094  
                               ??_round 007E                                 ??_trunc 007E  
                            __pbssBANK1 00E7                              __pbssBANK2 0162  
                             ?_ReadVars 0070                 I2C_ReadAtAddress@IntAdd 0074  
                          _GetPrevCycle 019B                                 ?_GetAbs 0070  
                   UART_Read_TO@TimeOut 0070                              __pmaintext 0323  
                               ?___bmul 002C                                 ?___lmul 0070  
                               ?___wmul 0070                     __size_of_IsValidGPS 0053  
                             ?___altoft 0078                          ___lmul@product 0078  
                             ?___ftpack 0070                       __end_of_SwitchGPS 0833  
      main@StateAudioNormalOnOffCounter 0151                                 _CONFIG0 0169  
                               GetAbs@a 0070                              ??_GetCycle 0072  
                            ??_Lcd_Init 0072                            ?_DelayInUSec 0070  
            __size_of_I2C_ReadAtAddress 0029                              ??_Lcd_Text 0074  
                               _STATE_1 00A0                                 _STATE_2 0110  
                               _STATE_3 0190                                 _SSPCON2 0091  
                               _SSPSTAT 0094                              __stringtab 0800  
                        _UART_Init$1024 00DF                          _UART_Init$1025 00E2  
                         ?_UART_Read_TO 0070                         _EE_STATE_BREAKS 00DB  
                            ??_ReadVars 002F                         __size_of_GetAbs 0008  
                ReadRTCAsSec@TempVar000 003D                                 ___aldiv 08C4  
                       __size_of___bmul 000E                                 ___almod 16EB  
                     Lcd_WriteChar@data 0032                                 ___lbdiv 16AE  
                       __size_of___lmul 0033                                 ___ftadd 0D13  
                               ___ftdiv 0EA1                                 ___lldiv 0043  
                       __size_of___wmul 0019                                 ___ftmul 0F0B  
                               ___ftsub 0F7A                                 ___fttol 0E04  
               __end_of_Lcd_Delay5500us 0A62                              ??___altoft 007C  
                            ??___ftpack 0075                            ?_Lcd_Command 0070  
                               __ptext1 16AE                                 __ptext2 16EB  
                               __ptext3 0833                                 __ptext4 08C4  
                               __ptext5 1754                                 __ptext6 17B0  
                               __ptext7 17F1                                 __ptext8 175D  
                               __ptext9 0C13                               _EE_STATES 0000  
                      ___aldiv@dividend 0074                __size_of_I2C_Master_Init 002D  
              __size_of_I2C_Master_Read 001F                __size_of_I2C_Master_Wait 0009  
              __size_of_I2C_Master_Stop 0003                    end_of_initialization 07FC  
                        ??_UART_Read_TO 0070             __end_of_UART_ReadFromGPS_TO 17F1  
                 GetPrevCycle@PrevCycle 0070         ??_GetCumulativePeriodsForStates 0072  
                 __size_of_ReadRTCAsSec 00B6                    Lcd_Disp_Bin@DispChar 0035  
             __size_of_I2C_Master_Start 0003               __size_of_I2C_Master_Write 0005  
                       ___lldiv@divisor 0070                               GetCycle@i 007D  
                       ___lldiv@counter 007C                           Lcd_Disp_Bin@i 0038  
                         Lcd_Disp_Bin@x 0033                           Lcd_Disp_Bin@y 0037  
  __end_of_UART_ReadValidTimeFromGPS_TO 175D   __size_of_UART_ReadValidTimeFromGPS_TO 0009  
          _UART_ReadValidTimeFromGPS_TO 1754                            ??_Lcd_CharCP 0070  
                      ___aldiv@quotient 007A                        I2C_Master_Init@c 002C  
                      I2C_Master_Read@a 0070                               Lcd_Text@x 0072  
                             Lcd_Text@y 0074                   main@AdjustMilliSecond 014C  
                             _UART_Init 0C13     UART_ReadValidTimeFromGPS_TO@TimeOut 0078  
                             _TRISAbits 0085                            ??_IsValidGPS 0070  
                          _ReadRTCAsSec 01BC                      __end_of_Lcd_CharCP 0A02  
                           ___ftdiv@exp 0048                           ??_eeprom_read 0070  
                        __end_of_GetAbs 169F                               ReadVars@i 003F  
                             ReadVars@j 003E                             ___ftmul@exp 0035  
         ?_UART_ReadValidTimeFromGPS_TO 0078                          __end_of___bmul 0BD7  
                        __end_of___lmul 031A                        ?_Lcd_Delay5500us 0070  
                         __pidataEEDATA 0000                          __end_of___wmul 028B  
                    __end_of_IsValidGPS 17B0                            DelayInUSec@a 0070  
                            ?_UART_Init 00DB                            DelayInUSec@i 0072  
              _STATE_CUMULATIVE_PERIODS 00E7                             __end_ofPL10 07C0  
                           __end_ofPL20 0FE9                             __end_ofPL12 07CB  
                           __end_ofPL30 0BFE                             __end_ofPL22 0323  
                           __end_ofPL14 07D4                             __end_ofPL40 1000  
                           __end_ofPL32 0C05                             __end_ofPL24 0BEC  
                           __end_ofPL16 0BE3                             __end_ofPL42 07E7  
                           __end_ofPL34 0C0C                             __end_ofPL26 0BF5  
                           __end_ofPL18 07E0                             __end_ofPL44 01BC  
                           __end_ofPL36 0C13                             __end_ofPL28 0FF2  
                           __end_ofPL38 0FF9                     start_initialization 07E7  
                     __size_of_GetCycle 00CA                    __size_of_DelayInUSec 000F  
                     __size_of_Lcd_Init 0057                       __size_of_Lcd_Text 0035  
                            frexp@value 0070                       ??_I2C_Master_Init 0030  
                     ??_I2C_Master_Read 0072                       ??_I2C_Master_Wait 0070  
                     ??_I2C_Master_Stop 0070                         WriteLongInt@POS 003B  
                              ??_GetAbs 0072                         WriteLongInt@Val 0034  
                __size_of_Lcd_WriteChar 0025                       __size_of_ReadVars 00BA  
 __end_of_GetCumulativePeriodsForStates 00D1  __size_of_GetCumulativePeriodsForStates 0046  
         _GetCumulativePeriodsForStates 008B                                ??___bmul 007E  
                              ??___lmul 0078                                ??___wmul 0074  
                   __end_of_eeprom_read 0BC9                              init_fetch0 0005  
                           __pdataBANK2 016C                    __end_of_UART_Read_TO 1800  
           UART_ReadFromGPS_TO@TempChar 0076                       __size_of___altoft 002F  
                     __size_of___ftpack 0042                             __pbssEEDATA 00DE  
                         ?_WriteLongInt 0033                    __size_of_Lcd_Command 0094  
                             _SwitchGPS 0828                               ___latbits 0002  
               main@GPS_On_Time_Counter 0148                           __pcstackBANK0 002C  
                         __pcstackBANK1 00D2                           __pcstackBANK2 0142  
                         WriteLongInt@x 0033                           WriteLongInt@y 003C  
                main@State2OnOffCounter 014F                        IsValidGPS@Result 0070  
                I2C_ReadAtAddress@DevID 0076                        _I2C_Master_Start 02B9  
                      _I2C_Master_Write 02B4                                ?___aldiv 0070  
                              ?___almod 0070                         _PREV_CYCLE_TYPE 016C  
                              ?___lbdiv 0070                                ?___ftadd 004A  
                              ?___ftdiv 003B                                ?___lldiv 0070  
                              ?___ftmul 002C                                ?___ftsub 00D2  
                              ?___fttol 0056                             ??_UART_Init 007E  
                      ___almod@dividend 0074                               __pstrings 0800  
                        ??_WriteLongInt 003A          ??_UART_ReadValidTimeFromGPS_TO 0079  
                         _Lcd_WriteChar 089F                              ?_SwitchGPS 0070  
                  UART_ReadFromGPS_TO@i 0073                          __size_of_frexp 0039  
                            UART_Init@x 00E5                          __size_of_round 004B  
                        __size_of_trunc 0039                         ___aldiv@divisor 0070  
                       ___aldiv@counter 0078                          ___wmul@product 0074  
                           _eeprom_read 0BB4                      main@OutForThePorts 0156  
        ?_GetCumulativePeriodsForStates 0070                       UART_Init@baudrate 00DB  
    UART_ReadValidTimeFromGPS_TO@Output 0079                            Lcd_Init@data 0072  
                           __stringbase 0805                          ?_Lcd_WriteChar 002F  
                     ___wmul@multiplier 0070                                _GetCycle 00D1  
                              _Lcd_Init 0A02                                _Lcd_Text 0939  
                   I2C_Master_Read@temp 0072                       ___lmul@multiplier 0070  
                              _ReadVars 0AFA                               frexp@eptr 0073  
                          Lcd_Text@data 0075                           _STATE_PERIODS 01CC  
          __size_of_UART_ReadFromGPS_TO 0041            main@TimeSinceTheStartOfCycle 0159  
                UART_ReadFromGPS_TO@Pos 0077                   __size_of_UART_Read_TO 000F  
                      __size_of___aldiv 0075                        __size_of___almod 0069  
                      __size_of___lbdiv 001B                        __size_of___ftadd 00C2  
                      __size_of___ftdiv 006A                        __size_of___lldiv 0048  
                              ___altoft 0DD5                        __size_of___ftmul 006F  
                      __size_of___ftsub 002B                        __size_of___fttol 005B  
                              ___ftpack 0E5F                      __end_of__stringtab 0806  
                         ?_Lcd_Delay5us 0070                         _I2C_Master_Init 0016  
                       _I2C_Master_Read 02BC                         _I2C_Master_Wait 02DB  
                           ??_SwitchGPS 0070                         _I2C_Master_Stop 02E4  
                         ?_Lcd_Disp_Bin 0033                   I2C_ReadAtAddress@data 0075  
                              __ptext10 0C8F                                __ptext11 0CDA  
                              __ptext20 0828                                __ptext12 0FA5  
                              __ptext21 0AFA                                __ptext13 0E04  
                              __ptext30 02B9                                __ptext22 0BB4  
                              __ptext14 0DD5                                __ptext31 02BC  
                              __ptext23 0BC9                                __ptext15 0F7A  
                              __ptext40 0AF6                                __ptext32 02DB  
                              __ptext24 01BC                                __ptext16 0D13  
                              __ptext41 0016                                __ptext33 0939  
                              __ptext25 0272                                __ptext17 0F0B  
                              __ptext42 0043                                __ptext34 0A02  
                              __ptext26 02E7                                __ptext18 0EA1  
                              __ptext43 00D1                                __ptext35 0A59  
                              __ptext27 028B                                __ptext19 0E5F  
                              __ptext44 008B                                __ptext36 16C9  
                              __ptext28 02B4                                __ptext45 019B  
                              __ptext37 089F                                __ptext29 02E4  
                              __ptext46 1697                                __ptext38 0A62  
                              __ptext47 169F                                __ptext39 096E  
                     __CFG_BOR4V$BOR21V 0000                         ___almod@divisor 0070  
                       ___almod@counter 0078                             Lcd_CharCP@c 0071  
                          _UART_Read_TO 17F1                              trunc@expon 0069  
                         __size_of_main 041E                           ?_GetPrevCycle 0070  
                            _CYCLE_TYPE 016A                    __end_of_WriteLongInt 089F  
                       Lcd_Disp_Bin@val 0034          GetCumulativePeriodsForStates@i 0077  
        GetCumulativePeriodsForStates@j 0076                         ??_Lcd_WriteChar 007E  
                        ??_Lcd_Delay5us 0070                            _STATE_BREAKS 0166  
              __end_of_I2C_Master_Start 02BC                          ??_Lcd_Disp_Bin 0036  
              __end_of_I2C_Master_Write 02B9                __size_of_Lcd_Delay5500us 0009  
                         ??_DelayInUSec 0072                                init_ram0 0009  
                        ??_GetPrevCycle 0070                        ___lldiv@dividend 0074  
                             stringcode 0800                 __end_of_I2C_Master_Init 0043  
               __end_of_I2C_Master_Read 02DB                 __end_of_I2C_Master_Wait 02E4  
               __end_of_I2C_Master_Stop 02E7                           ??_Lcd_Command 0070  
                      ___lldiv@quotient 0078                       I2C_Master_Write@d 0070  
                              stringdir 0800                                stringtab 0800  
                          ___aldiv@sign 0079                            ___almod@sign 0079  
                           main@GPSData 0142                     __end_of_DelayInUSec 16AE  
                          ?_eeprom_read 0070  
