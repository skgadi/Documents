

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Thu Dec 01 06:42:35 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	idataEEDATA,global,class=EEDATA,space=3,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssEEDATA,global,class=EEDATA,space=3,delta=2
     9                           	psect	dataEEDATA,global,class=EEDATA,space=3,delta=2
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text23,local,class=CODE,merge=1,delta=2
    24                           	psect	text25,local,class=CODE,merge=1,delta=2
    25                           	psect	text27,local,class=CODE,merge=1,delta=2
    26                           	psect	text29,local,class=CODE,merge=1,delta=2
    27                           	psect	text30,local,class=CODE,merge=1,delta=2
    28                           	psect	pa_nodes,global,class=CODE,delta=2
    29                           	dabs	1,0x3E,60,_STATE_1
    30                           	dabs	1,0x20,30,_STATE_PERIODS
    31                           	dabs	1,0x7A,6,_STATE_CUMULATIVE_PERIODS
    32                           	dabs	1,0x16B,4,_S
    33                           	dabs	1,0x16F,1,_C_D
    34                           	dabs	1,0x110,60,_STATE_2
    35                           	dabs	1,0x14C,12,_C
    36                           	dabs	1,0x167,4,_AUDIO
    37                           	dabs	1,0x164,3,_STATE_BREAKS
    38                           	dabs	1,0x7E,2
    39  0000                     	;# 
    40  0001                     	;# 
    41  0002                     	;# 
    42  0003                     	;# 
    43  0004                     	;# 
    44  0005                     	;# 
    45  0006                     	;# 
    46  0007                     	;# 
    47  0009                     	;# 
    48  000A                     	;# 
    49  000B                     	;# 
    50  000C                     	;# 
    51  000D                     	;# 
    52  000E                     	;# 
    53  000E                     	;# 
    54  000F                     	;# 
    55  0010                     	;# 
    56  0011                     	;# 
    57  0012                     	;# 
    58  0013                     	;# 
    59  0014                     	;# 
    60  0015                     	;# 
    61  0015                     	;# 
    62  0016                     	;# 
    63  0017                     	;# 
    64  0018                     	;# 
    65  0019                     	;# 
    66  001A                     	;# 
    67  001B                     	;# 
    68  001B                     	;# 
    69  001C                     	;# 
    70  001D                     	;# 
    71  001E                     	;# 
    72  001F                     	;# 
    73  0081                     	;# 
    74  0085                     	;# 
    75  0086                     	;# 
    76  0087                     	;# 
    77  0089                     	;# 
    78  008C                     	;# 
    79  008D                     	;# 
    80  008E                     	;# 
    81  008F                     	;# 
    82  0090                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0093                     	;# 
    87  0093                     	;# 
    88  0094                     	;# 
    89  0095                     	;# 
    90  0096                     	;# 
    91  0097                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009E                     	;# 
    99  009F                     	;# 
   100  0105                     	;# 
   101  0107                     	;# 
   102  0108                     	;# 
   103  0109                     	;# 
   104  010C                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  0185                     	;# 
   110  0187                     	;# 
   111  0188                     	;# 
   112  0189                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  008F                     	;# 
   158  0090                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0093                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0095                     	;# 
   166  0096                     	;# 
   167  0097                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009A                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  0105                     	;# 
   177  0107                     	;# 
   178  0108                     	;# 
   179  0109                     	;# 
   180  010C                     	;# 
   181  010C                     	;# 
   182  010D                     	;# 
   183  010E                     	;# 
   184  010F                     	;# 
   185  0185                     	;# 
   186  0187                     	;# 
   187  0188                     	;# 
   188  0189                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0009                     	;# 
   200  000A                     	;# 
   201  000B                     	;# 
   202  000C                     	;# 
   203  000D                     	;# 
   204  000E                     	;# 
   205  000E                     	;# 
   206  000F                     	;# 
   207  0010                     	;# 
   208  0011                     	;# 
   209  0012                     	;# 
   210  0013                     	;# 
   211  0014                     	;# 
   212  0015                     	;# 
   213  0015                     	;# 
   214  0016                     	;# 
   215  0017                     	;# 
   216  0018                     	;# 
   217  0019                     	;# 
   218  001A                     	;# 
   219  001B                     	;# 
   220  001B                     	;# 
   221  001C                     	;# 
   222  001D                     	;# 
   223  001E                     	;# 
   224  001F                     	;# 
   225  0081                     	;# 
   226  0085                     	;# 
   227  0086                     	;# 
   228  0087                     	;# 
   229  0089                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  008F                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0093                     	;# 
   238  0093                     	;# 
   239  0093                     	;# 
   240  0094                     	;# 
   241  0095                     	;# 
   242  0096                     	;# 
   243  0097                     	;# 
   244  0098                     	;# 
   245  0099                     	;# 
   246  009A                     	;# 
   247  009B                     	;# 
   248  009C                     	;# 
   249  009D                     	;# 
   250  009E                     	;# 
   251  009F                     	;# 
   252  0105                     	;# 
   253  0107                     	;# 
   254  0108                     	;# 
   255  0109                     	;# 
   256  010C                     	;# 
   257  010C                     	;# 
   258  010D                     	;# 
   259  010E                     	;# 
   260  010F                     	;# 
   261  0185                     	;# 
   262  0187                     	;# 
   263  0188                     	;# 
   264  0189                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  000E                     	;# 
   282  000F                     	;# 
   283  0010                     	;# 
   284  0011                     	;# 
   285  0012                     	;# 
   286  0013                     	;# 
   287  0014                     	;# 
   288  0015                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  001D                     	;# 
   299  001E                     	;# 
   300  001F                     	;# 
   301  0081                     	;# 
   302  0085                     	;# 
   303  0086                     	;# 
   304  0087                     	;# 
   305  0089                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  008F                     	;# 
   310  0090                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0093                     	;# 
   314  0093                     	;# 
   315  0093                     	;# 
   316  0094                     	;# 
   317  0095                     	;# 
   318  0096                     	;# 
   319  0097                     	;# 
   320  0098                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009C                     	;# 
   325  009D                     	;# 
   326  009E                     	;# 
   327  009F                     	;# 
   328  0105                     	;# 
   329  0107                     	;# 
   330  0108                     	;# 
   331  0109                     	;# 
   332  010C                     	;# 
   333  010C                     	;# 
   334  010D                     	;# 
   335  010E                     	;# 
   336  010F                     	;# 
   337  0185                     	;# 
   338  0187                     	;# 
   339  0188                     	;# 
   340  0189                     	;# 
   341  018C                     	;# 
   342  018D                     	;# 
   343  0000                     	;# 
   344  0001                     	;# 
   345  0002                     	;# 
   346  0003                     	;# 
   347  0004                     	;# 
   348  0005                     	;# 
   349  0006                     	;# 
   350  0007                     	;# 
   351  0009                     	;# 
   352  000A                     	;# 
   353  000B                     	;# 
   354  000C                     	;# 
   355  000D                     	;# 
   356  000E                     	;# 
   357  000E                     	;# 
   358  000F                     	;# 
   359  0010                     	;# 
   360  0011                     	;# 
   361  0012                     	;# 
   362  0013                     	;# 
   363  0014                     	;# 
   364  0015                     	;# 
   365  0015                     	;# 
   366  0016                     	;# 
   367  0017                     	;# 
   368  0018                     	;# 
   369  0019                     	;# 
   370  001A                     	;# 
   371  001B                     	;# 
   372  001B                     	;# 
   373  001C                     	;# 
   374  001D                     	;# 
   375  001E                     	;# 
   376  001F                     	;# 
   377  0081                     	;# 
   378  0085                     	;# 
   379  0086                     	;# 
   380  0087                     	;# 
   381  0089                     	;# 
   382  008C                     	;# 
   383  008D                     	;# 
   384  008E                     	;# 
   385  008F                     	;# 
   386  0090                     	;# 
   387  0091                     	;# 
   388  0092                     	;# 
   389  0093                     	;# 
   390  0093                     	;# 
   391  0093                     	;# 
   392  0094                     	;# 
   393  0095                     	;# 
   394  0096                     	;# 
   395  0097                     	;# 
   396  0098                     	;# 
   397  0099                     	;# 
   398  009A                     	;# 
   399  009B                     	;# 
   400  009C                     	;# 
   401  009D                     	;# 
   402  009E                     	;# 
   403  009F                     	;# 
   404  0105                     	;# 
   405  0107                     	;# 
   406  0108                     	;# 
   407  0109                     	;# 
   408  010C                     	;# 
   409  010C                     	;# 
   410  010D                     	;# 
   411  010E                     	;# 
   412  010F                     	;# 
   413  0185                     	;# 
   414  0187                     	;# 
   415  0188                     	;# 
   416  0189                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  0000                     	;# 
   420  0001                     	;# 
   421  0002                     	;# 
   422  0003                     	;# 
   423  0004                     	;# 
   424  0005                     	;# 
   425  0006                     	;# 
   426  0007                     	;# 
   427  0009                     	;# 
   428  000A                     	;# 
   429  000B                     	;# 
   430  000C                     	;# 
   431  000D                     	;# 
   432  000E                     	;# 
   433  000E                     	;# 
   434  000F                     	;# 
   435  0010                     	;# 
   436  0011                     	;# 
   437  0012                     	;# 
   438  0013                     	;# 
   439  0014                     	;# 
   440  0015                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0017                     	;# 
   444  0018                     	;# 
   445  0019                     	;# 
   446  001A                     	;# 
   447  001B                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  001D                     	;# 
   451  001E                     	;# 
   452  001F                     	;# 
   453  0081                     	;# 
   454  0085                     	;# 
   455  0086                     	;# 
   456  0087                     	;# 
   457  0089                     	;# 
   458  008C                     	;# 
   459  008D                     	;# 
   460  008E                     	;# 
   461  008F                     	;# 
   462  0090                     	;# 
   463  0091                     	;# 
   464  0092                     	;# 
   465  0093                     	;# 
   466  0093                     	;# 
   467  0093                     	;# 
   468  0094                     	;# 
   469  0095                     	;# 
   470  0096                     	;# 
   471  0097                     	;# 
   472  0098                     	;# 
   473  0099                     	;# 
   474  009A                     	;# 
   475  009B                     	;# 
   476  009C                     	;# 
   477  009D                     	;# 
   478  009E                     	;# 
   479  009F                     	;# 
   480  0105                     	;# 
   481  0107                     	;# 
   482  0108                     	;# 
   483  0109                     	;# 
   484  010C                     	;# 
   485  010C                     	;# 
   486  010D                     	;# 
   487  010E                     	;# 
   488  010F                     	;# 
   489  0185                     	;# 
   490  0187                     	;# 
   491  0188                     	;# 
   492  0189                     	;# 
   493  018C                     	;# 
   494  018D                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0009                     	;# 
   504  000A                     	;# 
   505  000B                     	;# 
   506  000C                     	;# 
   507  000D                     	;# 
   508  000E                     	;# 
   509  000E                     	;# 
   510  000F                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0013                     	;# 
   515  0014                     	;# 
   516  0015                     	;# 
   517  0015                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001B                     	;# 
   525  001C                     	;# 
   526  001D                     	;# 
   527  001E                     	;# 
   528  001F                     	;# 
   529  0081                     	;# 
   530  0085                     	;# 
   531  0086                     	;# 
   532  0087                     	;# 
   533  0089                     	;# 
   534  008C                     	;# 
   535  008D                     	;# 
   536  008E                     	;# 
   537  008F                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0093                     	;# 
   542  0093                     	;# 
   543  0093                     	;# 
   544  0094                     	;# 
   545  0095                     	;# 
   546  0096                     	;# 
   547  0097                     	;# 
   548  0098                     	;# 
   549  0099                     	;# 
   550  009A                     	;# 
   551  009B                     	;# 
   552  009C                     	;# 
   553  009D                     	;# 
   554  009E                     	;# 
   555  009F                     	;# 
   556  0105                     	;# 
   557  0107                     	;# 
   558  0108                     	;# 
   559  0109                     	;# 
   560  010C                     	;# 
   561  010C                     	;# 
   562  010D                     	;# 
   563  010E                     	;# 
   564  010F                     	;# 
   565  0185                     	;# 
   566  0187                     	;# 
   567  0188                     	;# 
   568  0189                     	;# 
   569  018C                     	;# 
   570  018D                     	;# 
   571                           
   572                           	psect	idataBANK3
   573  0000                     __pidataBANK3:	
   574                           
   575                           	psect	idataEEDATA
   576  0000                     __pidataEEDATA:	
   577  0000                     _EE_STATES:	
   578                           ;initializer for _EE_STATES
   579                           
   580  0000  0052               	db	82
   581  0001  0020               	db	32
   582  0002  0090               	db	144
   583  0003  0001               	db	1
   584  0004  0000               	db	0
   585  0005  0003               	db	3
   586  0006  0022               	db	34
   587  0007  0090               	db	144
   588  0008  0000               	db	0
   589  0009  0000               	db	0
   590  000A  0006               	db	6
   591  000B  000C               	db	12
   592  000C  0090               	db	144
   593  000D  0000               	db	0
   594  000E  0000               	db	0
   595  000F  0002               	db	2
   596  0010  0004               	db	4
   597  0011  0090               	db	144
   598  0012  0008               	db	8
   599  0013  0000               	db	0
   600  0014  0002               	db	2
   601  0015  0014               	db	20
   602  0016  0090               	db	144
   603  0017  0000               	db	0
   604  0018  0000               	db	0
   605  0019  0015               	db	21
   606  001A  0024               	db	36
   607  001B  0028               	db	40
   608  001C  0000               	db	0
   609  001D  0000               	db	0
   610  001E  0002               	db	2
   611  001F  0024               	db	36
   612  0020  0010               	db	16
   613  0021  0000               	db	0
   614  0022  0020               	db	32
   615  0023  0002               	db	2
   616  0024  0024               	db	36
   617  0025  0050               	db	80
   618  0026  0000               	db	0
   619  0027  0000               	db	0
   620  0028  0000               	db	0
   621  0029  0000               	db	0
   622  002A  0000               	db	0
   623  002B  0000               	db	0
   624  002C  0000               	db	0
   625  002D  0000               	db	0
   626  002E  0000               	db	0
   627  002F  0000               	db	0
   628  0030  0000               	db	0
   629  0031  0000               	db	0
   630  0032  0000               	db	0
   631  0033  0000               	db	0
   632  0034  0000               	db	0
   633  0035  0000               	db	0
   634  0036  0000               	db	0
   635  0037  0000               	db	0
   636  0038  0000               	db	0
   637  0039  0000               	db	0
   638  003A  0000               	db	0
   639  003B  0000               	db	0
   640  003C  0000               	db	0
   641  003D  0000               	db	0
   642  003E  0000               	db	0
   643  003F  0000               	db	0
   644  0040  0000               	db	0
   645  0041  0000               	db	0
   646  0042  0000               	db	0
   647  0043  0000               	db	0
   648  0044  0000               	db	0
   649  0045  0000               	db	0
   650  0046  0000               	db	0
   651  0047  0000               	db	0
   652  0048  0000               	db	0
   653  0049  0000               	db	0
   654  004A  0000               	db	0
   655  004B  0000               	db	0
   656  004C  0000               	db	0
   657  004D  0000               	db	0
   658  004E  0000               	db	0
   659  004F  0000               	db	0
   660  0050  0000               	db	0
   661  0051  0000               	db	0
   662  0052  0000               	db	0
   663  0053  0000               	db	0
   664  0054  0000               	db	0
   665  0055  0000               	db	0
   666  0056  0000               	db	0
   667  0057  0000               	db	0
   668  0058  0000               	db	0
   669  0059  0000               	db	0
   670  005A  0000               	db	0
   671  005B  0000               	db	0
   672  005C  0000               	db	0
   673  005D  0000               	db	0
   674  005E  0000               	db	0
   675  005F  0000               	db	0
   676  0060  0000               	db	0
   677  0061  0000               	db	0
   678  0062  0000               	db	0
   679  0063  0000               	db	0
   680  0064  0000               	db	0
   681  0065  0000               	db	0
   682  0066  0000               	db	0
   683  0067  0000               	db	0
   684  0068  0000               	db	0
   685  0069  0000               	db	0
   686  006A  0000               	db	0
   687  006B  0000               	db	0
   688  006C  0000               	db	0
   689  006D  0000               	db	0
   690  006E  0000               	db	0
   691  006F  0000               	db	0
   692  0070  0000               	db	0
   693  0071  0000               	db	0
   694  0072  0000               	db	0
   695  0073  0000               	db	0
   696  0074  0000               	db	0
   697  0075  0000               	db	0
   698  0076  0000               	db	0
   699  0077  0000               	db	0
   700  0078  0000               	db	0
   701  0079  0000               	db	0
   702  007A  0000               	db	0
   703  007B  0000               	db	0
   704  007C  0000               	db	0
   705  007D  0000               	db	0
   706  007E  0000               	db	0
   707  007F  0000               	db	0
   708  0080  0000               	db	0
   709  0081  0000               	db	0
   710  0082  0000               	db	0
   711  0083  0000               	db	0
   712  0084  0000               	db	0
   713  0085  0000               	db	0
   714  0086  0000               	db	0
   715  0087  0000               	db	0
   716  0088  0000               	db	0
   717  0089  0000               	db	0
   718  008A  0000               	db	0
   719  008B  0000               	db	0
   720  008C  0000               	db	0
   721  008D  0000               	db	0
   722  008E  0000               	db	0
   723  008F  0000               	db	0
   724  0090  0000               	db	0
   725  0091  0000               	db	0
   726  0092  0000               	db	0
   727  0093  0000               	db	0
   728  0094  0000               	db	0
   729  0095  0000               	db	0
   730  0096                     _EE_C:	
   731                           ;initializer for _EE_C
   732                           
   733  0096  0001               	db	1
   734  0097  0051               	db	81
   735  0098  007F               	db	127
   736  0099  0001               	db	1
   737  009A  0051               	db	81
   738  009B  007F               	db	127
   739  009C  0001               	db	1
   740  009D  0051               	db	81
   741  009E  007F               	db	127
   742  009F                     _EE_AUDIO:	
   743                           ;initializer for _EE_AUDIO
   744                           
   745  009F  00E5               	db	229
   746  00A0  0000               	db	0
   747  00A1  0000               	db	0
   748  00A2  0000               	db	0
   749  00A3                     _EE_STATE_BREAKS:	
   750                           ;initializer for _EE_STATE_BREAKS
   751                           
   752  00A3  0008               	db	8
   753  00A4  0015               	db	21
   754  00A5  001E               	db	30
   755                           
   756                           	psect	strings
   757  1000                     __pstrings:	
   758  1000                     stringtab:	
   759  1000                     __stringtab:	
   760  1000                     stringcode:	
   761                           ;	String table - string pointers are 1 byte each
   762                           
   763  1000                     stringdir:	
   764  1000  3010               	movlw	high stringdir
   765  1001  008A               	movwf	10
   766  1002  0804               	movf	4,w
   767  1003  0A84               	incf	4,f
   768  1004  0782               	addwf	2,f
   769  1005                     __stringbase:	
   770  1005  3400               	retlw	0
   771  1006                     __end_of__stringtab:	
   772  1006                     UART_ReadFromGPS_TO@StartCode:	
   773  1006  3424               	retlw	36
   774  1007  3447               	retlw	71
   775  1008  3450               	retlw	80
   776  1009  3452               	retlw	82
   777  100A  344D               	retlw	77
   778  100B  3443               	retlw	67
   779  100C  342C               	retlw	44
   780  100D                     __end_ofUART_ReadFromGPS_TO@StartCode:	
   781  0005                     _PORTA	set	5
   782  0006                     _PORTB	set	6
   783  001A                     _RCREG	set	26
   784  0013                     _SSPBUF	set	19
   785  0014                     _SSPCON	set	20
   786  00C4                     _CREN	set	196
   787  0028                     _RA0	set	40
   788  0029                     _RA1	set	41
   789  002A                     _RA2	set	42
   790  002B                     _RA3	set	43
   791  002C                     _RA4	set	44
   792  002D                     _RA5	set	45
   793  0038                     _RC0	set	56
   794  0039                     _RC1	set	57
   795  0065                     _RCIF	set	101
   796  00C7                     _SPEN	set	199
   797  0099                     _SPBRG	set	153
   798  009A                     _SPBRGH	set	154
   799  0093                     _SSPADD	set	147
   800  0091                     _SSPCON2	set	145
   801  0094                     _SSPSTAT	set	148
   802  0085                     _TRISA	set	133
   803  0086                     _TRISB	set	134
   804  0087                     _TRISC	set	135
   805  048D                     _ACKDT	set	1165
   806  048C                     _ACKEN	set	1164
   807  04C2                     _BRGH	set	1218
   808  048A                     _PEN	set	1162
   809  048B                     _RCEN	set	1163
   810  0488                     _SEN	set	1160
   811  04C4                     _SYNC	set	1220
   812  043B                     _TRISC3	set	1083
   813  043C                     _TRISC4	set	1084
   814  04C5                     _TXEN	set	1221
   815  010D                     _EEADR	set	269
   816  010C                     _EEDATA	set	268
   817  0188                     _ANSEL	set	392
   818  0189                     _ANSELH	set	393
   819  018C                     _EECON1	set	396
   820  0C3B                     _BRG16	set	3131
   821  0C60                     _RD	set	3168
   822  0C61                     _WR	set	3169
   823                           
   824                           ; #config settings
   825  0000                     
   826                           	psect	cinit
   827  07F6                     start_initialization:	
   828  07F6                     __initialization:	
   829                           
   830                           ; Initialize objects allocated to BANK3
   831  07F6  1683               	bsf	3,5	;RP0=1, select bank3
   832  07F7  1703               	bsf	3,6	;RP1=1, select bank3
   833                           
   834                           ;initializer for _PREV_CYCLE_TYPE
   835  07F8  3002               	movlw	2
   836  07F9  00ED               	movwf	__pdataBANK3& (0+127)
   837                           
   838                           ; Clear objects allocated to BANK3
   839  07FA  01EB               	clrf	__pbssBANK3& (0+127)
   840  07FB  01EC               	clrf	(__pbssBANK3+1)& (0+127)
   841  07FC                     end_of_initialization:	
   842                           ;End of C runtime variable initialization code
   843                           
   844  07FC                     __end_of__initialization:	
   845  07FC  0183               	clrf	3
   846  07FD  120A  158A  2AAC   	ljmp	_main	;jump to C main() function
   847                           
   848                           	psect	bssEEDATA
   849  00A6                     __pbssEEDATA:	
   850  00A6                     _EE_C_D:	
   851  00A6  0000               	db	0
   852                           
   853                           	psect	dataEEDATA
   854  0000                     __pdataEEDATA:	
   855                           
   856                           	psect	bssBANK3
   857  01EB                     __pbssBANK3:	
   858  01EB                     _CYCLE_TYPE:	
   859  01EB                     	ds	1
   860  01EC                     _FLAGS:	
   861  01EC                     	ds	1
   862                           
   863                           	psect	dataBANK3
   864  01ED                     __pdataBANK3:	
   865  01ED                     _PREV_CYCLE_TYPE:	
   866  01ED                     	ds	1
   867                           
   868                           	psect	inittext
   869  0801                     init_fetch0:	
   870                           ;	Called with low address in FSR and high address in W
   871                           
   872  0801  087E               	movf	126,w
   873  0802  008A               	movwf	10
   874  0803  087F               	movf	127,w
   875  0804  0082               	movwf	2
   876  0805                     init_ram0:	
   877                           ;Called with:
   878                           ;	high address of idata address in btemp 
   879                           ;	low address of idata address in btemp+1 
   880                           ;	low address of data in FSR
   881                           ;	high address + 1 of data in btemp-1
   882                           
   883  0805  2001  120A  158A   	fcall	init_fetch0
   884  0808  0080               	movwf	0
   885  0809  0A84               	incf	4,f
   886  080A  0804               	movf	4,w
   887  080B  067D               	xorwf	125,w
   888  080C  1903               	btfsc	3,2
   889  080D  3400               	retlw	0
   890  080E  0AFF               	incf	127,f
   891  080F  1903               	btfsc	3,2
   892  0810  0AFE               	incf	126,f
   893  0811  2805               	goto	init_ram0
   894                           
   895                           	psect	cstackBANK3
   896  0190                     __pcstackBANK3:	
   897  0190                     trunc@i:	
   898                           
   899                           ; 3 bytes @ 0x0
   900  0190                     	ds	3
   901  0193                     trunc@expon:	
   902                           
   903                           ; 2 bytes @ 0x3
   904  0193                     	ds	2
   905  0195                     ?___ftsub:	
   906  0195                     ___ftsub@f2:	
   907                           ; 3 bytes @ 0x5
   908                           
   909                           
   910                           ; 3 bytes @ 0x5
   911  0195                     	ds	3
   912  0198                     ___ftsub@f1:	
   913                           
   914                           ; 3 bytes @ 0x8
   915  0198                     	ds	3
   916  019B                     ?_round:	
   917  019B                     round@x:	
   918                           ; 3 bytes @ 0xB
   919                           
   920                           
   921                           ; 3 bytes @ 0xB
   922  019B                     	ds	3
   923  019E                     round@f:	
   924                           
   925                           ; 3 bytes @ 0xE
   926  019E                     	ds	3
   927  01A1                     ?_UART_Init:	
   928  01A1                     _AdjustSec$1777:	
   929                           ; 1 bytes @ 0x11
   930                           
   931  01A1                     UART_Init@baudrate:	
   932                           ; 3 bytes @ 0x11
   933                           
   934                           
   935                           ; 4 bytes @ 0x11
   936  01A1                     	ds	3
   937  01A4                     AdjustSec@TimeDiff:	
   938                           
   939                           ; 1 bytes @ 0x14
   940  01A4                     	ds	1
   941  01A5                     AdjustSec@tRIMVAL:	
   942  01A5                     _UART_Init$1778:	
   943                           ; 1 bytes @ 0x15
   944                           
   945                           
   946                           ; 3 bytes @ 0x15
   947  01A5                     	ds	3
   948  01A8                     _UART_Init$1779:	
   949                           
   950                           ; 3 bytes @ 0x18
   951  01A8                     	ds	3
   952  01AB                     UART_Init@x:	
   953                           
   954                           ; 2 bytes @ 0x1B
   955  01AB                     	ds	2
   956  01AD                     ??_main:	
   957                           
   958                           ; 1 bytes @ 0x1D
   959  01AD                     	ds	10
   960  01B7                     main@GPSData:	
   961                           
   962                           ; 6 bytes @ 0x27
   963  01B7                     	ds	6
   964  01BD                     main@PrevRTCSyncTime:	
   965                           
   966                           ; 4 bytes @ 0x2D
   967  01BD                     	ds	4
   968  01C1                     main@LoadRTCAfterXSec:	
   969                           
   970                           ; 2 bytes @ 0x31
   971  01C1                     	ds	2
   972  01C3                     main@NumberOfSystemCyclesSinceLastRTC:	
   973                           
   974                           ; 2 bytes @ 0x33
   975  01C3                     	ds	2
   976  01C5                     main@GPS_On_Time_Counter:	
   977                           
   978                           ; 2 bytes @ 0x35
   979  01C5                     	ds	2
   980  01C7                     main@SyncC:	
   981                           
   982                           ; 2 bytes @ 0x37
   983  01C7                     	ds	2
   984  01C9                     main@ReadyForCalcOfSystemSync:	
   985                           
   986                           ; 1 bytes @ 0x39
   987  01C9                     	ds	1
   988  01CA                     main@k:	
   989                           
   990                           ; 2 bytes @ 0x3A
   991  01CA                     	ds	2
   992  01CC                     main@SyncY_2:	
   993                           
   994                           ; 2 bytes @ 0x3C
   995  01CC                     	ds	2
   996  01CE                     main@SyncM:	
   997                           
   998                           ; 2 bytes @ 0x3E
   999  01CE                     	ds	2
  1000  01D0                     main@StateSecRemaining:	
  1001                           
  1002                           ; 1 bytes @ 0x40
  1003  01D0                     	ds	1
  1004  01D1                     main@State2OnOffCounter:	
  1005                           
  1006                           ; 2 bytes @ 0x41
  1007  01D1                     	ds	2
  1008  01D3                     main@StateAudioNormalOnOffCounter:	
  1009                           
  1010                           ; 2 bytes @ 0x43
  1011  01D3                     	ds	2
  1012  01D5                     main@StateAudioSplOnOffCounter:	
  1013                           
  1014                           ; 2 bytes @ 0x45
  1015  01D5                     	ds	2
  1016  01D7                     main@SyncY_1:	
  1017                           
  1018                           ; 2 bytes @ 0x47
  1019  01D7                     	ds	2
  1020  01D9                     main@SyncX_1:	
  1021                           
  1022                           ; 2 bytes @ 0x49
  1023  01D9                     	ds	2
  1024  01DB                     main@SyncX_2:	
  1025                           
  1026                           ; 2 bytes @ 0x4B
  1027  01DB                     	ds	2
  1028  01DD                     main@j:	
  1029                           
  1030                           ; 1 bytes @ 0x4D
  1031  01DD                     	ds	1
  1032  01DE                     main@AdjustMilliSecond:	
  1033                           
  1034                           ; 1 bytes @ 0x4E
  1035  01DE                     	ds	1
  1036  01DF                     main@OutForThePorts:	
  1037                           
  1038                           ; 2 bytes @ 0x4F
  1039  01DF                     	ds	2
  1040  01E1                     main@SecError:	
  1041                           
  1042                           ; 2 bytes @ 0x51
  1043  01E1                     	ds	2
  1044  01E3                     main@DiffInSecond:	
  1045                           
  1046                           ; 1 bytes @ 0x53
  1047  01E3                     	ds	1
  1048  01E4                     main@TimeSinceTheStartOfCycle:	
  1049                           
  1050                           ; 4 bytes @ 0x54
  1051  01E4                     	ds	4
  1052  01E8                     main@i:	
  1053                           
  1054                           ; 1 bytes @ 0x58
  1055  01E8                     	ds	1
  1056  01E9                     main@l:	
  1057                           
  1058                           ; 2 bytes @ 0x59
  1059  01E9                     	ds	2
  1060                           
  1061                           	psect	cstackBANK1
  1062  00A0                     __pcstackBANK1:	
  1063  00A0                     ??_Lcd_Delay5us:	
  1064  00A0                     ??_Lcd_Command:	
  1065                           ; 1 bytes @ 0x0
  1066                           
  1067  00A0                     ??_Lcd_CharCP:	
  1068                           ; 1 bytes @ 0x0
  1069                           
  1070  00A0                     ??_eeprom_read:	
  1071                           ; 1 bytes @ 0x0
  1072                           
  1073  00A0                     ??_GetPrevCycle:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  00A0                     ??_UART_Read_TO:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  00A0                     ??_IsValidGPS:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  00A0                     ?_ReadVars:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  00A0                     ?_WriteToRTC:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  00A0                     ?_GetOSCTRIM:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  00A0                     ?_SetOSCTRIM:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  00A0                     ?_AdjustSec:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  00A0                     ?_I2C_Master_Wait:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  00A0                     ??_I2C_Master_Wait:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  00A0                     ?_I2C_Master_Start:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  00A0                     ??_I2C_Master_Start:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  00A0                     ?_I2C_Master_Stop:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  00A0                     ??_I2C_Master_Stop:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  00A0                     ?_I2C_Master_Write:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  00A0                     ?_GetCumulativePeriodsForStates:	
  1119                           ; 1 bytes @ 0x0
  1120                           
  1121  00A0                     ?_GetCycle:	
  1122                           ; 1 bytes @ 0x0
  1123                           
  1124  00A0                     ?_DelayInUSec:	
  1125                           ; 1 bytes @ 0x0
  1126                           
  1127  00A0                     ??_DelayInUSec:	
  1128                           ; 1 bytes @ 0x0
  1129                           
  1130  00A0                     ?_main:	
  1131                           ; 1 bytes @ 0x0
  1132                           
  1133  00A0                     ?___lbdiv:	
  1134                           ; 1 bytes @ 0x0
  1135                           
  1136  00A0                     ?_I2C_Master_Read:	
  1137                           ; 1 bytes @ 0x0
  1138                           
  1139  00A0                     ?_GetAbs:	
  1140                           ; 2 bytes @ 0x0
  1141                           
  1142  00A0                     ?___wmul:	
  1143                           ; 2 bytes @ 0x0
  1144                           
  1145  00A0                     ?___awdiv:	
  1146                           ; 2 bytes @ 0x0
  1147                           
  1148  00A0                     ?___ftpack:	
  1149                           ; 2 bytes @ 0x0
  1150                           
  1151  00A0                     ?_frexp:	
  1152                           ; 3 bytes @ 0x0
  1153                           
  1154  00A0                     ?_GetTimePeriod:	
  1155                           ; 3 bytes @ 0x0
  1156                           
  1157  00A0                     ?___lmul:	
  1158                           ; 4 bytes @ 0x0
  1159                           
  1160  00A0                     ?___aldiv:	
  1161                           ; 4 bytes @ 0x0
  1162                           
  1163  00A0                     ?___almod:	
  1164                           ; 4 bytes @ 0x0
  1165                           
  1166  00A0                     ?___lldiv:	
  1167                           ; 4 bytes @ 0x0
  1168                           
  1169  00A0                     GetPrevCycle@PrevCycle:	
  1170                           ; 4 bytes @ 0x0
  1171                           
  1172  00A0                     DelayInUSec@a:	
  1173                           ; 1 bytes @ 0x0
  1174                           
  1175  00A0                     UART_Read_TO@TimeOut:	
  1176                           ; 1 bytes @ 0x0
  1177                           
  1178  00A0                     IsValidGPS@Result:	
  1179                           ; 1 bytes @ 0x0
  1180                           
  1181  00A0                     eeprom_read@addr:	
  1182                           ; 1 bytes @ 0x0
  1183                           
  1184  00A0                     ___lbdiv@divisor:	
  1185                           ; 1 bytes @ 0x0
  1186                           
  1187  00A0                     I2C_Master_Write@d:	
  1188                           ; 1 bytes @ 0x0
  1189                           
  1190  00A0                     I2C_Master_Read@a:	
  1191                           ; 2 bytes @ 0x0
  1192                           
  1193  00A0                     GetAbs@a:	
  1194                           ; 2 bytes @ 0x0
  1195                           
  1196  00A0                     ___wmul@multiplier:	
  1197                           ; 2 bytes @ 0x0
  1198                           
  1199  00A0                     ___awdiv@divisor:	
  1200                           ; 2 bytes @ 0x0
  1201                           
  1202  00A0                     ___ftpack@arg:	
  1203                           ; 2 bytes @ 0x0
  1204                           
  1205  00A0                     frexp@value:	
  1206                           ; 3 bytes @ 0x0
  1207                           
  1208  00A0                     GetTimePeriod@PrevTime:	
  1209                           ; 3 bytes @ 0x0
  1210                           
  1211  00A0                     ___lmul@multiplier:	
  1212                           ; 4 bytes @ 0x0
  1213                           
  1214  00A0                     ___aldiv@divisor:	
  1215                           ; 4 bytes @ 0x0
  1216                           
  1217  00A0                     ___almod@divisor:	
  1218                           ; 4 bytes @ 0x0
  1219                           
  1220  00A0                     ___lldiv@divisor:	
  1221                           ; 4 bytes @ 0x0
  1222                           
  1223                           
  1224                           ; 4 bytes @ 0x0
  1225  00A0                     	ds	1
  1226  00A1                     ?_UART_ReadFromGPS_TO:	
  1227  00A1                     ??___lbdiv:	
  1228                           ; 1 bytes @ 0x1
  1229                           
  1230  00A1                     Lcd_CharCP@c:	
  1231                           ; 1 bytes @ 0x1
  1232                           
  1233  00A1                     Lcd_Command@command:	
  1234                           ; 1 bytes @ 0x1
  1235                           
  1236  00A1                     GetPrevCycle@cycle:	
  1237                           ; 1 bytes @ 0x1
  1238                           
  1239  00A1                     DelayInUSec@i:	
  1240                           ; 1 bytes @ 0x1
  1241                           
  1242  00A1                     UART_ReadFromGPS_TO@TimeOut:	
  1243                           ; 1 bytes @ 0x1
  1244                           
  1245  00A1                     IsValidGPS@GPSData:	
  1246                           ; 1 bytes @ 0x1
  1247                           
  1248  00A1                     ___lbdiv@dividend:	
  1249                           ; 1 bytes @ 0x1
  1250                           
  1251                           
  1252                           ; 1 bytes @ 0x1
  1253  00A1                     	ds	1
  1254  00A2                     ??_I2C_Master_Write:	
  1255  00A2                     ??_I2C_Master_Read:	
  1256                           ; 1 bytes @ 0x2
  1257                           
  1258  00A2                     ??_GetCumulativePeriodsForStates:	
  1259                           ; 1 bytes @ 0x2
  1260                           
  1261  00A2                     ??_GetCycle:	
  1262                           ; 1 bytes @ 0x2
  1263                           
  1264  00A2                     ??_GetAbs:	
  1265                           ; 1 bytes @ 0x2
  1266                           
  1267  00A2                     ??_UART_ReadFromGPS_TO:	
  1268                           ; 1 bytes @ 0x2
  1269                           
  1270  00A2                     ___lbdiv@counter:	
  1271                           ; 1 bytes @ 0x2
  1272                           
  1273  00A2                     I2C_Master_Read@temp:	
  1274                           ; 1 bytes @ 0x2
  1275                           
  1276  00A2                     ___wmul@multiplicand:	
  1277                           ; 2 bytes @ 0x2
  1278                           
  1279  00A2                     ___awdiv@dividend:	
  1280                           ; 2 bytes @ 0x2
  1281                           
  1282                           
  1283                           ; 2 bytes @ 0x2
  1284  00A2                     	ds	1
  1285  00A3                     ___ftpack@exp:	
  1286  00A3                     ___lbdiv@quotient:	
  1287                           ; 1 bytes @ 0x3
  1288                           
  1289  00A3                     frexp@eptr:	
  1290                           ; 1 bytes @ 0x3
  1291                           
  1292  00A3                     UART_ReadFromGPS_TO@i:	
  1293                           ; 1 bytes @ 0x3
  1294                           
  1295                           
  1296                           ; 2 bytes @ 0x3
  1297  00A3                     	ds	1
  1298  00A4                     ?_I2C_ReadAtAddress:	
  1299  00A4                     ??_frexp:	
  1300                           ; 1 bytes @ 0x4
  1301                           
  1302  00A4                     ??___wmul:	
  1303                           ; 1 bytes @ 0x4
  1304                           
  1305  00A4                     ??___awdiv:	
  1306                           ; 1 bytes @ 0x4
  1307                           
  1308  00A4                     I2C_ReadAtAddress@IntAdd:	
  1309                           ; 1 bytes @ 0x4
  1310                           
  1311  00A4                     ___awdiv@counter:	
  1312                           ; 1 bytes @ 0x4
  1313                           
  1314  00A4                     ___ftpack@sign:	
  1315                           ; 1 bytes @ 0x4
  1316                           
  1317  00A4                     ___wmul@product:	
  1318                           ; 1 bytes @ 0x4
  1319                           
  1320  00A4                     GetTimePeriod@PresentTime:	
  1321                           ; 2 bytes @ 0x4
  1322                           
  1323  00A4                     ___lmul@multiplicand:	
  1324                           ; 4 bytes @ 0x4
  1325                           
  1326  00A4                     ___aldiv@dividend:	
  1327                           ; 4 bytes @ 0x4
  1328                           
  1329  00A4                     ___almod@dividend:	
  1330                           ; 4 bytes @ 0x4
  1331                           
  1332  00A4                     ___lldiv@dividend:	
  1333                           ; 4 bytes @ 0x4
  1334                           
  1335                           
  1336                           ; 4 bytes @ 0x4
  1337  00A4                     	ds	1
  1338  00A5                     ??_I2C_ReadAtAddress:	
  1339  00A5                     ??___ftpack:	
  1340                           ; 1 bytes @ 0x5
  1341                           
  1342  00A5                     I2C_ReadAtAddress@data:	
  1343                           ; 1 bytes @ 0x5
  1344                           
  1345  00A5                     UART_ReadFromGPS_TO@Output:	
  1346                           ; 1 bytes @ 0x5
  1347                           
  1348  00A5                     ___awdiv@sign:	
  1349                           ; 1 bytes @ 0x5
  1350                           
  1351                           
  1352                           ; 1 bytes @ 0x5
  1353  00A5                     	ds	1
  1354  00A6                     I2C_ReadAtAddress@DevID:	
  1355  00A6                     GetCumulativePeriodsForStates@j:	
  1356                           ; 1 bytes @ 0x6
  1357                           
  1358  00A6                     UART_ReadFromGPS_TO@TempChar:	
  1359                           ; 1 bytes @ 0x6
  1360                           
  1361  00A6                     ___awdiv@quotient:	
  1362                           ; 1 bytes @ 0x6
  1363                           
  1364                           
  1365                           ; 2 bytes @ 0x6
  1366  00A6                     	ds	1
  1367  00A7                     ??_GetOSCTRIM:	
  1368  00A7                     GetOSCTRIM@i:	
  1369                           ; 1 bytes @ 0x7
  1370                           
  1371  00A7                     GetCumulativePeriodsForStates@i:	
  1372                           ; 1 bytes @ 0x7
  1373                           
  1374  00A7                     UART_ReadFromGPS_TO@Pos:	
  1375                           ; 1 bytes @ 0x7
  1376                           
  1377                           
  1378                           ; 1 bytes @ 0x7
  1379  00A7                     	ds	1
  1380  00A8                     ??_GetTimePeriod:	
  1381  00A8                     ?_UART_ReadValidTimeFromGPS_TO:	
  1382                           ; 1 bytes @ 0x8
  1383                           
  1384  00A8                     ??___lmul:	
  1385                           ; 1 bytes @ 0x8
  1386                           
  1387  00A8                     ??___aldiv:	
  1388                           ; 1 bytes @ 0x8
  1389                           
  1390  00A8                     ??___almod:	
  1391                           ; 1 bytes @ 0x8
  1392                           
  1393  00A8                     ??___lldiv:	
  1394                           ; 1 bytes @ 0x8
  1395                           
  1396  00A8                     ?___abtoft:	
  1397                           ; 1 bytes @ 0x8
  1398                           
  1399  00A8                     ?___lwtoft:	
  1400                           ; 3 bytes @ 0x8
  1401                           
  1402  00A8                     UART_ReadValidTimeFromGPS_TO@TimeOut:	
  1403                           ; 3 bytes @ 0x8
  1404                           
  1405  00A8                     ___aldiv@counter:	
  1406                           ; 1 bytes @ 0x8
  1407                           
  1408  00A8                     ___almod@counter:	
  1409                           ; 1 bytes @ 0x8
  1410                           
  1411  00A8                     ___lwtoft@c:	
  1412                           ; 1 bytes @ 0x8
  1413                           
  1414  00A8                     ___lmul@product:	
  1415                           ; 2 bytes @ 0x8
  1416                           
  1417  00A8                     ___lldiv@quotient:	
  1418                           ; 4 bytes @ 0x8
  1419                           
  1420                           
  1421                           ; 4 bytes @ 0x8
  1422  00A8                     	ds	1
  1423  00A9                     ??_UART_ReadValidTimeFromGPS_TO:	
  1424  00A9                     UART_ReadValidTimeFromGPS_TO@Output:	
  1425                           ; 1 bytes @ 0x9
  1426                           
  1427  00A9                     ___aldiv@sign:	
  1428                           ; 1 bytes @ 0x9
  1429                           
  1430  00A9                     ___almod@sign:	
  1431                           ; 1 bytes @ 0x9
  1432                           
  1433                           
  1434                           ; 1 bytes @ 0x9
  1435  00A9                     	ds	1
  1436  00AA                     ___aldiv@quotient:	
  1437                           
  1438                           ; 4 bytes @ 0xA
  1439  00AA                     	ds	1
  1440  00AB                     ??___lwtoft:	
  1441                           
  1442                           ; 1 bytes @ 0xB
  1443  00AB                     	ds	1
  1444  00AC                     ??___abtoft:	
  1445  00AC                     ?_ReadRTCAsSec:	
  1446                           ; 1 bytes @ 0xC
  1447                           
  1448  00AC                     GetCycle@PrevCycle:	
  1449                           ; 4 bytes @ 0xC
  1450                           
  1451  00AC                     ___abtoft@sign:	
  1452                           ; 1 bytes @ 0xC
  1453                           
  1454  00AC                     ___lldiv@counter:	
  1455                           ; 1 bytes @ 0xC
  1456                           
  1457                           
  1458                           ; 1 bytes @ 0xC
  1459  00AC                     	ds	1
  1460  00AD                     ?_I2C_Master_Init:	
  1461  00AD                     GetCycle@i:	
  1462                           ; 1 bytes @ 0xD
  1463                           
  1464  00AD                     ___abtoft@c:	
  1465                           ; 1 bytes @ 0xD
  1466                           
  1467  00AD                     I2C_Master_Init@c:	
  1468                           ; 1 bytes @ 0xD
  1469                           
  1470                           
  1471                           ; 4 bytes @ 0xD
  1472  00AD                     	ds	1
  1473  00AE                     ?___bmul:	
  1474  00AE                     ___bmul@multiplicand:	
  1475                           ; 1 bytes @ 0xE
  1476                           
  1477                           
  1478                           ; 1 bytes @ 0xE
  1479  00AE                     	ds	1
  1480  00AF                     ??___bmul:	
  1481  00AF                     ___bmul@product:	
  1482                           ; 1 bytes @ 0xF
  1483                           
  1484                           
  1485                           ; 1 bytes @ 0xF
  1486  00AF                     	ds	1
  1487  00B0                     ??_ReadRTCAsSec:	
  1488  00B0                     ?___altoft:	
  1489                           ; 1 bytes @ 0x10
  1490                           
  1491  00B0                     ___bmul@multiplier:	
  1492                           ; 3 bytes @ 0x10
  1493                           
  1494  00B0                     ___altoft@c:	
  1495                           ; 1 bytes @ 0x10
  1496                           
  1497                           
  1498                           ; 4 bytes @ 0x10
  1499  00B0                     	ds	1
  1500  00B1                     ?_I2C_WriteAtAddress:	
  1501  00B1                     ?_Lcd_WriteChar:	
  1502                           ; 1 bytes @ 0x11
  1503                           
  1504  00B1                     ??_ReadVars:	
  1505                           ; 1 bytes @ 0x11
  1506                           
  1507  00B1                     ??_I2C_Master_Init:	
  1508                           ; 1 bytes @ 0x11
  1509                           
  1510  00B1                     Lcd_WriteChar@x:	
  1511                           ; 1 bytes @ 0x11
  1512                           
  1513  00B1                     I2C_WriteAtAddress@IntAdd:	
  1514                           ; 1 bytes @ 0x11
  1515                           
  1516                           
  1517                           ; 1 bytes @ 0x11
  1518  00B1                     	ds	1
  1519  00B2                     Lcd_WriteChar@c:	
  1520  00B2                     I2C_WriteAtAddress@data:	
  1521                           ; 1 bytes @ 0x12
  1522                           
  1523                           
  1524                           ; 1 bytes @ 0x12
  1525  00B2                     	ds	1
  1526  00B3                     ??_I2C_WriteAtAddress:	
  1527  00B3                     ??_Lcd_WriteChar:	
  1528                           ; 1 bytes @ 0x13
  1529                           
  1530  00B3                     Lcd_WriteChar@y:	
  1531                           ; 1 bytes @ 0x13
  1532                           
  1533  00B3                     I2C_WriteAtAddress@DevID:	
  1534                           ; 1 bytes @ 0x13
  1535                           
  1536                           
  1537                           ; 1 bytes @ 0x13
  1538  00B3                     	ds	1
  1539  00B4                     ??_WriteToRTC:	
  1540  00B4                     ??_SetOSCTRIM:	
  1541                           ; 1 bytes @ 0x14
  1542                           
  1543  00B4                     ??___altoft:	
  1544                           ; 1 bytes @ 0x14
  1545                           
  1546  00B4                     Lcd_WriteChar@data:	
  1547                           ; 1 bytes @ 0x14
  1548                           
  1549  00B4                     WriteToRTC@Time:	
  1550                           ; 1 bytes @ 0x14
  1551                           
  1552  00B4                     SetOSCTRIM@Val:	
  1553                           ; 1 bytes @ 0x14
  1554                           
  1555  00B4                     ___altoft@exp:	
  1556                           ; 1 bytes @ 0x14
  1557                           
  1558                           
  1559                           ; 1 bytes @ 0x14
  1560  00B4                     	ds	1
  1561  00B5                     ?_WriteLongInt:	
  1562  00B5                     WriteLongInt@x:	
  1563                           ; 1 bytes @ 0x15
  1564                           
  1565  00B5                     WriteToRTC@TempVar000:	
  1566                           ; 1 bytes @ 0x15
  1567                           
  1568  00B5                     ___altoft@sign:	
  1569                           ; 1 bytes @ 0x15
  1570                           
  1571                           
  1572                           ; 1 bytes @ 0x15
  1573  00B5                     	ds	1
  1574  00B6                     ?___ftdiv:	
  1575  00B6                     ___ftdiv@f2:	
  1576                           ; 3 bytes @ 0x16
  1577                           
  1578  00B6                     WriteLongInt@Val:	
  1579                           ; 3 bytes @ 0x16
  1580                           
  1581                           
  1582                           ; 4 bytes @ 0x16
  1583  00B6                     	ds	1
  1584  00B7                     _ReadRTCAsSec$1776:	
  1585                           
  1586                           ; 2 bytes @ 0x17
  1587  00B7                     	ds	2
  1588  00B9                     ___ftdiv@f1:	
  1589  00B9                     ReadRTCAsSec@Out:	
  1590                           ; 3 bytes @ 0x19
  1591                           
  1592                           
  1593                           ; 4 bytes @ 0x19
  1594  00B9                     	ds	1
  1595  00BA                     WriteLongInt@size:	
  1596                           
  1597                           ; 1 bytes @ 0x1A
  1598  00BA                     	ds	1
  1599  00BB                     WriteLongInt@Sign:	
  1600                           
  1601                           ; 1 bytes @ 0x1B
  1602  00BB                     	ds	1
  1603  00BC                     ??_WriteLongInt:	
  1604  00BC                     ??___ftdiv:	
  1605                           ; 1 bytes @ 0x1C
  1606                           
  1607                           
  1608                           ; 1 bytes @ 0x1C
  1609  00BC                     	ds	1
  1610  00BD                     WriteLongInt@POS:	
  1611  00BD                     ReadRTCAsSec@TempVar000:	
  1612                           ; 1 bytes @ 0x1D
  1613                           
  1614                           
  1615                           ; 1 bytes @ 0x1D
  1616  00BD                     	ds	1
  1617  00BE                     WriteLongInt@y:	
  1618                           
  1619                           ; 1 bytes @ 0x1E
  1620  00BE                     	ds	1
  1621  00BF                     ___ftdiv@cntr:	
  1622                           
  1623                           ; 1 bytes @ 0x1F
  1624  00BF                     	ds	1
  1625  00C0                     ReadVars@j:	
  1626  00C0                     ___ftdiv@f3:	
  1627                           ; 1 bytes @ 0x20
  1628                           
  1629                           
  1630                           ; 3 bytes @ 0x20
  1631  00C0                     	ds	1
  1632  00C1                     ReadVars@i:	
  1633                           
  1634                           ; 1 bytes @ 0x21
  1635  00C1                     	ds	2
  1636  00C3                     ___ftdiv@exp:	
  1637                           
  1638                           ; 1 bytes @ 0x23
  1639  00C3                     	ds	1
  1640  00C4                     ___ftdiv@sign:	
  1641                           
  1642                           ; 1 bytes @ 0x24
  1643  00C4                     	ds	1
  1644  00C5                     ?___ftmul:	
  1645  00C5                     ___ftmul@f1:	
  1646                           ; 3 bytes @ 0x25
  1647                           
  1648                           
  1649                           ; 3 bytes @ 0x25
  1650  00C5                     	ds	3
  1651  00C8                     ___ftmul@f2:	
  1652                           
  1653                           ; 3 bytes @ 0x28
  1654  00C8                     	ds	3
  1655  00CB                     ??___ftmul:	
  1656                           
  1657                           ; 1 bytes @ 0x2B
  1658  00CB                     	ds	3
  1659  00CE                     ___ftmul@exp:	
  1660                           
  1661                           ; 1 bytes @ 0x2E
  1662  00CE                     	ds	1
  1663  00CF                     ___ftmul@f3_as_product:	
  1664                           
  1665                           ; 3 bytes @ 0x2F
  1666  00CF                     	ds	3
  1667  00D2                     ___ftmul@cntr:	
  1668                           
  1669                           ; 1 bytes @ 0x32
  1670  00D2                     	ds	1
  1671  00D3                     ___ftmul@sign:	
  1672                           
  1673                           ; 1 bytes @ 0x33
  1674  00D3                     	ds	1
  1675  00D4                     ?___ftadd:	
  1676  00D4                     ___ftadd@f1:	
  1677                           ; 3 bytes @ 0x34
  1678                           
  1679                           
  1680                           ; 3 bytes @ 0x34
  1681  00D4                     	ds	3
  1682  00D7                     ___ftadd@f2:	
  1683                           
  1684                           ; 3 bytes @ 0x37
  1685  00D7                     	ds	3
  1686  00DA                     ??___ftadd:	
  1687                           
  1688                           ; 1 bytes @ 0x3A
  1689  00DA                     	ds	3
  1690  00DD                     ___ftadd@sign:	
  1691                           
  1692                           ; 1 bytes @ 0x3D
  1693  00DD                     	ds	1
  1694  00DE                     ___ftadd@exp2:	
  1695                           
  1696                           ; 1 bytes @ 0x3E
  1697  00DE                     	ds	1
  1698  00DF                     ___ftadd@exp1:	
  1699                           
  1700                           ; 1 bytes @ 0x3F
  1701  00DF                     	ds	1
  1702  00E0                     ?___fttol:	
  1703  00E0                     ___fttol@f1:	
  1704                           ; 4 bytes @ 0x40
  1705                           
  1706                           
  1707                           ; 3 bytes @ 0x40
  1708  00E0                     	ds	4
  1709  00E4                     ??___fttol:	
  1710                           
  1711                           ; 1 bytes @ 0x44
  1712  00E4                     	ds	3
  1713  00E7                     ___fttol@sign1:	
  1714                           
  1715                           ; 1 bytes @ 0x47
  1716  00E7                     	ds	1
  1717  00E8                     ___fttol@lval:	
  1718                           
  1719                           ; 4 bytes @ 0x48
  1720  00E8                     	ds	4
  1721  00EC                     ___fttol@exp1:	
  1722                           
  1723                           ; 1 bytes @ 0x4C
  1724  00EC                     	ds	1
  1725  00ED                     ?_trunc:	
  1726  00ED                     trunc@x:	
  1727                           ; 3 bytes @ 0x4D
  1728                           
  1729                           
  1730                           ; 3 bytes @ 0x4D
  1731  00ED                     	ds	3
  1732  00F0                     ??_round:	
  1733  00F0                     ??_trunc:	
  1734                           ; 1 bytes @ 0x50
  1735                           
  1736  00F0                     ??_AdjustSec:	
  1737                           ; 1 bytes @ 0x50
  1738                           
  1739  00F0                     ??_UART_Init:	
  1740                           ; 1 bytes @ 0x50
  1741                           
  1742  00F0                     ??___ftsub:	
  1743                           ; 1 bytes @ 0x50
  1744                           
  1745                           
  1746                           	psect	cstackCOMMON
  1747  0000                     __pcstackCOMMON:	
  1748                           ; 1 bytes @ 0x50
  1749                           
  1750  0000                     ?_Lcd_Delay5us:	
  1751  0000                     ?_Lcd_Command:	
  1752                           ; 1 bytes @ 0x0
  1753                           
  1754  0000                     ?_Lcd_CharCP:	
  1755                           ; 1 bytes @ 0x0
  1756                           
  1757  0000                     ?_eeprom_read:	
  1758                           ; 1 bytes @ 0x0
  1759                           
  1760  0000                     ?_GetPrevCycle:	
  1761                           ; 1 bytes @ 0x0
  1762                           
  1763  0000                     ?_UART_Read_TO:	
  1764                           ; 1 bytes @ 0x0
  1765                           
  1766  0000                     ?_IsValidGPS:	
  1767                           ; 1 bytes @ 0x0
  1768                           
  1769                           
  1770                           	psect	maintext
  1771  0AAC                     __pmaintext:	
  1772                           ; 1 bytes @ 0x0
  1773 ;;
  1774 ;;Main: autosize = 0, tempsize = 10, incstack = 0, save=0
  1775 ;;
  1776 ;; *************** function _main *****************
  1777 ;; Defined at:
  1778 ;;		line 4 in file "main.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  GPSData         6   39[BANK3 ] unsigned char [6]
  1783 ;;  TimeSinceThe    4   84[BANK3 ] long 
  1784 ;;  PrevRTCSyncT    4   45[BANK3 ] long 
  1785 ;;  l               2   89[BANK3 ] unsigned short 
  1786 ;;  OutForThePor    2   79[BANK3 ] unsigned char [2]
  1787 ;;  SecError        2   81[BANK3 ] short 
  1788 ;;  SyncX_2         2   75[BANK3 ] short 
  1789 ;;  SyncX_1         2   73[BANK3 ] short 
  1790 ;;  SyncY_1         2   71[BANK3 ] short 
  1791 ;;  StateAudioSp    2   69[BANK3 ] unsigned short 
  1792 ;;  StateAudioNo    2   67[BANK3 ] unsigned short 
  1793 ;;  State2OnOffC    2   65[BANK3 ] unsigned short 
  1794 ;;  SyncM           2   62[BANK3 ] short 
  1795 ;;  SyncY_2         2   60[BANK3 ] short 
  1796 ;;  k               2   58[BANK3 ] unsigned short 
  1797 ;;  SyncC           2   55[BANK3 ] short 
  1798 ;;  GPS_On_Time_    2   53[BANK3 ] unsigned short 
  1799 ;;  NumberOfSyst    2   51[BANK3 ] unsigned short 
  1800 ;;  LoadRTCAfter    2   49[BANK3 ] unsigned short 
  1801 ;;  i               1   88[BANK3 ] unsigned char 
  1802 ;;  DiffInSecond    1   83[BANK3 ] char 
  1803 ;;  AdjustMilliS    1   78[BANK3 ] unsigned char 
  1804 ;;  j               1   77[BANK3 ] unsigned char 
  1805 ;;  StateSecRema    1   64[BANK3 ] unsigned char 
  1806 ;;  ReadyForCalc    1   57[BANK3 ] enum E1647
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1811 ;; Tracked objects:
  1812 ;;		On entry : B00/0
  1813 ;;		On exit  : B00/B00
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:      BANK1   BANK3  BANK2l
  1816 ;;      Params:         0       0       0
  1817 ;;      Locals:         0      52       0
  1818 ;;      Temps:          0      10       0
  1819 ;;      Totals:         0      62       0
  1820 ;;Total ram usage:       62 bytes
  1821 ;; Hardware stack levels required when called:    5
  1822 ;; This function calls:
  1823 ;;		_AdjustSec
  1824 ;;		_DelayInUSec
  1825 ;;		_GetAbs
  1826 ;;		_GetCumulativePeriodsForStates
  1827 ;;		_GetCycle
  1828 ;;		_GetTimePeriod
  1829 ;;		_I2C_Master_Init
  1830 ;;		_ReadRTCAsSec
  1831 ;;		_ReadVars
  1832 ;;		_UART_Init
  1833 ;;		_UART_ReadValidTimeFromGPS_TO
  1834 ;;		_WriteLongInt
  1835 ;;		_WriteToRTC
  1836 ;;		___almod
  1837 ;;		___altoft
  1838 ;;		___awdiv
  1839 ;;		___ftdiv
  1840 ;;		___ftmul
  1841 ;;		___fttol
  1842 ;;		___lbdiv
  1843 ;;		___lwtoft
  1844 ;;		___wmul
  1845 ;; This function is called by:
  1846 ;;		Startup code after reset
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           
  1851                           ;psect for function _main
  1852  0AAC                     _main:	
  1853                           
  1854                           ;main.c: 9: ANSEL = 0x00;
  1855                           
  1856                           ;incstack = 0
  1857                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1858  0AAC  1683               	bsf	3,5	;RP0=1, select bank3
  1859  0AAD  1703               	bsf	3,6	;RP1=1, select bank3
  1860  0AAE  0188               	clrf	8	;volatile
  1861                           
  1862                           ;main.c: 10: ANSELH = 0x00;
  1863  0AAF  0189               	clrf	9	;volatile
  1864                           
  1865                           ;main.c: 11: TRISA = 0x00;
  1866  0AB0  1303               	bcf	3,6	;RP1=0, select bank1
  1867  0AB1  0185               	clrf	5	;volatile
  1868                           
  1869                           ;main.c: 12: TRISB = 0x00;
  1870  0AB2  0186               	clrf	6	;volatile
  1871                           
  1872                           ;main.c: 13: TRISC = 0x00;
  1873  0AB3  0187               	clrf	7	;volatile
  1874                           
  1875                           ;main.c: 14: RC1 = 0;
  1876  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
  1877  0AB5  1087               	bcf	7,1	;volatile
  1878                           
  1879                           ;main.c: 15: ReadVars();
  1880  0AB6  120A  118A  24D8  120A  158A  	fcall	_ReadVars
  1881                           
  1882                           ;main.c: 16: STATE_BREAKS[3-1] = 0;
  1883  0ABB  3000               	movlw	0
  1884  0ABC  1283               	bcf	3,5	;RP0=0, select bank2
  1885  0ABD  1703               	bsf	3,6	;RP1=1, select bank2
  1886  0ABE  00E6               	movwf	102	;volatile
  1887                           
  1888                           ;main.c: 17: GetCumulativePeriodsForStates();
  1889  0ABF  160A  118A  26CC  120A  158A  	fcall	_GetCumulativePeriodsForStates
  1890                           
  1891                           ;main.c: 22: I2C_Master_Init(400000);
  1892  0AC4  3000               	movlw	0
  1893  0AC5  00B0               	movwf	(I2C_Master_Init@c+3)^(0+128)
  1894  0AC6  3006               	movlw	6
  1895  0AC7  00AF               	movwf	(I2C_Master_Init@c+2)^(0+128)
  1896  0AC8  301A               	movlw	26
  1897  0AC9  00AE               	movwf	(I2C_Master_Init@c+1)^(0+128)
  1898  0ACA  3080               	movlw	128
  1899  0ACB  00AD               	movwf	I2C_Master_Init@c^(0+128)
  1900  0ACC  160A  118A  2658  120A  158A  	fcall	_I2C_Master_Init
  1901                           
  1902                           ;main.c: 23: S = ReadRTCAsSec();
  1903  0AD1  120A  158A  2131  120A  158A  	fcall	_ReadRTCAsSec
  1904  0AD6  082F               	movf	(?_ReadRTCAsSec+3)^(0+128),w
  1905  0AD7  1283               	bcf	3,5	;RP0=0, select bank2
  1906  0AD8  1703               	bsf	3,6	;RP1=1, select bank2
  1907  0AD9  00EE               	movwf	110	;volatile
  1908  0ADA  1683               	bsf	3,5	;RP0=1, select bank1
  1909  0ADB  1303               	bcf	3,6	;RP1=0, select bank1
  1910  0ADC  082E               	movf	(?_ReadRTCAsSec+2)^(0+128),w
  1911  0ADD  1283               	bcf	3,5	;RP0=0, select bank2
  1912  0ADE  1703               	bsf	3,6	;RP1=1, select bank2
  1913  0ADF  00ED               	movwf	109	;volatile
  1914  0AE0  1683               	bsf	3,5	;RP0=1, select bank1
  1915  0AE1  1303               	bcf	3,6	;RP1=0, select bank1
  1916  0AE2  082D               	movf	(?_ReadRTCAsSec+1)^(0+128),w
  1917  0AE3  1283               	bcf	3,5	;RP0=0, select bank2
  1918  0AE4  1703               	bsf	3,6	;RP1=1, select bank2
  1919  0AE5  00EC               	movwf	108	;volatile
  1920  0AE6  1683               	bsf	3,5	;RP0=1, select bank1
  1921  0AE7  1303               	bcf	3,6	;RP1=0, select bank1
  1922  0AE8  082C               	movf	?_ReadRTCAsSec^(0+128),w
  1923  0AE9  1283               	bcf	3,5	;RP0=0, select bank2
  1924  0AEA  1703               	bsf	3,6	;RP1=1, select bank2
  1925  0AEB  00EB               	movwf	107	;volatile
  1926                           
  1927                           ;main.c: 24: UART_Init(9600);
  1928  0AEC  1683               	bsf	3,5	;RP0=1, select bank3
  1929  0AED  3025               	movlw	37
  1930  0AEE  01A4               	clrf	(UART_Init@baudrate+3)^(0+384)
  1931  0AEF  01A3               	clrf	(UART_Init@baudrate+2)^(0+384)
  1932  0AF0  00A2               	movwf	(UART_Init@baudrate+1)^(0+384)
  1933  0AF1  3080               	movlw	128
  1934  0AF2  00A1               	movwf	UART_Init@baudrate^(0+384)
  1935  0AF3  120A  118A  2052  120A  158A  	fcall	_UART_Init
  1936                           
  1937                           ;main.c: 32: UINT8 i, j, StateSecRemaining;
  1938                           ;main.c: 33: UINT16 k, l, State2OnOffCounter=0, StateAudioNormalOnOffCounter=0, StateAud
      +                          ioSplOnOffCounter=0;
  1939  0AF8  1703               	bsf	3,6	;RP1=1, select bank3
  1940  0AF9  3066               	movlw	102
  1941  0AFA  01D1               	clrf	main@State2OnOffCounter^(0+384)
  1942  0AFB  01D2               	clrf	(main@State2OnOffCounter+1)^(0+384)
  1943  0AFC  01D3               	clrf	main@StateAudioNormalOnOffCounter^(0+384)
  1944  0AFD  01D4               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+384)
  1945  0AFE  01D5               	clrf	main@StateAudioSplOnOffCounter^(0+384)
  1946  0AFF  01D6               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+384)
  1947                           
  1948                           ;main.c: 34: UINT8 OutForThePorts[2];
  1949                           ;main.c: 35: INT16 SecError;
  1950                           ;main.c: 36: INT32 TimeSinceTheStartOfCycle, PrevRTCSyncTime;
  1951                           ;main.c: 37: INT8 DiffInSecond;
  1952                           ;main.c: 38: UINT16 GPS_On_Time_Counter=0;
  1953  0B00  01C5               	clrf	main@GPS_On_Time_Counter^(0+384)
  1954  0B01  01C6               	clrf	(main@GPS_On_Time_Counter+1)^(0+384)
  1955                           
  1956                           ;main.c: 39: UINT8 AdjustMilliSecond = 0X66;
  1957  0B02  00DE               	movwf	main@AdjustMilliSecond^(0+384)
  1958                           
  1959                           ;main.c: 40: UINT16 LoadRTCAfterXSec=(5);
  1960  0B03  3005               	movlw	5
  1961  0B04  00C1               	movwf	main@LoadRTCAfterXSec^(0+384)
  1962  0B05  01C2               	clrf	(main@LoadRTCAfterXSec+1)^(0+384)
  1963                           
  1964                           ;main.c: 41: UINT16 NumberOfSystemCyclesSinceLastRTC;
  1965                           ;main.c: 42: INT16 SyncY_1=0, SyncY_2=0, SyncX_1=0, SyncX_2=0, SyncM=0, SyncC=0;
  1966  0B06  01D7               	clrf	main@SyncY_1^(0+384)
  1967  0B07  01D8               	clrf	(main@SyncY_1+1)^(0+384)
  1968  0B08  01CC               	clrf	main@SyncY_2^(0+384)
  1969  0B09  01CD               	clrf	(main@SyncY_2+1)^(0+384)
  1970  0B0A  01D9               	clrf	main@SyncX_1^(0+384)
  1971  0B0B  01DA               	clrf	(main@SyncX_1+1)^(0+384)
  1972  0B0C  01DB               	clrf	main@SyncX_2^(0+384)
  1973  0B0D  01DC               	clrf	(main@SyncX_2+1)^(0+384)
  1974  0B0E  01CE               	clrf	main@SyncM^(0+384)
  1975  0B0F  01CF               	clrf	(main@SyncM+1)^(0+384)
  1976  0B10  01C7               	clrf	main@SyncC^(0+384)
  1977  0B11  01C8               	clrf	(main@SyncC+1)^(0+384)
  1978                           
  1979                           ;main.c: 43: BOOL ReadyForCalcOfSystemSync=0;
  1980  0B12  01C9               	clrf	main@ReadyForCalcOfSystemSync^(0+384)
  1981  0B13                     l3601:	
  1982                           
  1983                           ;main.c: 47: RC0 = 0;
  1984  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0B14  1303               	bcf	3,6	;RP1=0, select bank0
  1986  0B15  1007               	bcf	7,0	;volatile
  1987                           
  1988                           ;main.c: 48: GetCycle();
  1989  0B16  160A  118A  2712  120A  158A  	fcall	_GetCycle
  1990                           
  1991                           ;main.c: 50: if (FLAGS.bits.b0) {
  1992  0B1B  1C6C               	btfss	_FLAGS^(0+384),0	;volatile
  1993  0B1C  2C67               	goto	l3651
  1994                           
  1995                           ;main.c: 51: FLAGS.bits.b0 = 0;
  1996  0B1D  106C               	bcf	_FLAGS^(0+384),0	;volatile
  1997                           
  1998                           ;main.c: 55: TimeSinceTheStartOfCycle = ReadRTCAsSec() + C_D;
  1999  0B1E  120A  158A  2131  120A  158A  	fcall	_ReadRTCAsSec
  2000  0B23  27BF  120A  158A   	fcall	PL8	;call to abstracted procedure
  2001  0B26  1283               	bcf	3,5	;RP0=0, select bank2
  2002  0B27  086F               	movf	111,w	;volatile
  2003  0B28  1683               	bsf	3,5	;RP0=1, select bank3
  2004  0B29  07E4               	addwf	main@TimeSinceTheStartOfCycle^(0+384),f
  2005  0B2A  01FF               	clrf	127
  2006  0B2B  3980               	andlw	128
  2007  0B2C  1D03               	skipz
  2008  0B2D  03FF               	decf	127,f
  2009  0B2E  087F               	movf	127,w
  2010  0B2F  1803               	skipnc
  2011  0B30  0A7F               	incf	127,w
  2012  0B31  1D03               	skipz
  2013  0B32  07E5               	addwf	(main@TimeSinceTheStartOfCycle+1)^(0+384),f
  2014  0B33  087F               	movf	127,w
  2015  0B34  1803               	skipnc
  2016  0B35  0A7F               	incf	127,w
  2017  0B36  1D03               	skipz
  2018  0B37  07E6               	addwf	(main@TimeSinceTheStartOfCycle+2)^(0+384),f
  2019  0B38  087F               	movf	127,w
  2020  0B39  1803               	skipnc
  2021  0B3A  0A7F               	incf	127,w
  2022  0B3B  07E7               	addwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  2023                           
  2024                           ;main.c: 58: if (FLAGS.bits.b1) {
  2025  0B3C  1CEC               	btfss	_FLAGS^(0+384),1	;volatile
  2026  0B3D  2C46               	goto	l679
  2027                           
  2028                           ;main.c: 59: LoadRTCAfterXSec = (60*60);
  2029  0B3E  3010               	movlw	16
  2030  0B3F  00C1               	movwf	main@LoadRTCAfterXSec^(0+384)
  2031  0B40  300E               	movlw	14
  2032  0B41  00C2               	movwf	(main@LoadRTCAfterXSec^(0+384)+1)
  2033                           
  2034                           ;main.c: 60: if (SyncY_1)
  2035  0B42  0857               	movf	main@SyncY_1^(0+384),w
  2036  0B43  0458               	iorwf	(main@SyncY_1+1)^(0+384),w
  2037  0B44  1903               	btfsc	3,2
  2038  0B45  2B48               	goto	l3621
  2039                           
  2040                           ;main.c: 61: ReadyForCalcOfSystemSync = 1;
  2041  0B46  01C9               	clrf	main@ReadyForCalcOfSystemSync^(0+384)
  2042  0B47  0AC9               	incf	main@ReadyForCalcOfSystemSync^(0+384),f
  2043  0B48                     l3621:	
  2044                           
  2045                           ;main.c: 62: SyncY_1 = GetTimePeriod(PrevRTCSyncTime, TimeSinceTheStartOfCycle)*(1000.0/
      +                          NumberOfSystemCyclesSinceLastRTC);
  2046  0B48  0867               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+384),w
  2047  0B49  1303               	bcf	3,6	;RP1=0, select bank1
  2048  0B4A  00A7               	movwf	(GetTimePeriod@PresentTime+3)^(0+128)
  2049  0B4B  1703               	bsf	3,6	;RP1=1, select bank3
  2050  0B4C  0866               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+384),w
  2051  0B4D  1303               	bcf	3,6	;RP1=0, select bank1
  2052  0B4E  00A6               	movwf	(GetTimePeriod@PresentTime+2)^(0+128)
  2053  0B4F  1703               	bsf	3,6	;RP1=1, select bank3
  2054  0B50  0865               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+384),w
  2055  0B51  1303               	bcf	3,6	;RP1=0, select bank1
  2056  0B52  00A5               	movwf	(GetTimePeriod@PresentTime+1)^(0+128)
  2057  0B53  1703               	bsf	3,6	;RP1=1, select bank3
  2058  0B54  0864               	movf	main@TimeSinceTheStartOfCycle^(0+384),w
  2059  0B55  1303               	bcf	3,6	;RP1=0, select bank1
  2060  0B56  00A4               	movwf	GetTimePeriod@PresentTime^(0+128)
  2061  0B57  1703               	bsf	3,6	;RP1=1, select bank3
  2062  0B58  0840               	movf	(main@PrevRTCSyncTime+3)^(0+384),w
  2063  0B59  1303               	bcf	3,6	;RP1=0, select bank1
  2064  0B5A  00A3               	movwf	(GetTimePeriod@PrevTime+3)^(0+128)
  2065  0B5B  1703               	bsf	3,6	;RP1=1, select bank3
  2066  0B5C  083F               	movf	(main@PrevRTCSyncTime+2)^(0+384),w
  2067  0B5D  1303               	bcf	3,6	;RP1=0, select bank1
  2068  0B5E  00A2               	movwf	(GetTimePeriod@PrevTime+2)^(0+128)
  2069  0B5F  1703               	bsf	3,6	;RP1=1, select bank3
  2070  0B60  083E               	movf	(main@PrevRTCSyncTime+1)^(0+384),w
  2071  0B61  1303               	bcf	3,6	;RP1=0, select bank1
  2072  0B62  00A1               	movwf	(GetTimePeriod@PrevTime+1)^(0+128)
  2073  0B63  1703               	bsf	3,6	;RP1=1, select bank3
  2074  0B64  083D               	movf	main@PrevRTCSyncTime^(0+384),w
  2075  0B65  1303               	bcf	3,6	;RP1=0, select bank1
  2076  0B66  00A0               	movwf	GetTimePeriod@PrevTime^(0+128)
  2077  0B67  160A  118A  25EE  120A  158A  	fcall	_GetTimePeriod
  2078  0B6C  0823               	movf	(?_GetTimePeriod+3)^(0+128),w
  2079  0B6D  00B3               	movwf	(___altoft@c+3)^(0+128)
  2080  0B6E  0822               	movf	(?_GetTimePeriod+2)^(0+128),w
  2081  0B6F  00B2               	movwf	(___altoft@c+2)^(0+128)
  2082  0B70  0821               	movf	(?_GetTimePeriod+1)^(0+128),w
  2083  0B71  00B1               	movwf	(___altoft@c+1)^(0+128)
  2084  0B72  0820               	movf	?_GetTimePeriod^(0+128),w
  2085  0B73  00B0               	movwf	___altoft@c^(0+128)
  2086  0B74  120A  118A  2229  120A  158A  	fcall	___altoft
  2087  0B79  120A  118A  27E8  120A  158A  	fcall	PL42	;call to abstracted procedure
  2088  0B7E  307A               	movlw	122
  2089  0B7F  01B9               	clrf	___ftdiv@f1^(0+128)
  2090  0B80  00BA               	movwf	(___ftdiv@f1+1)^(0+128)
  2091  0B81  3044               	movlw	68
  2092  0B82  00BB               	movwf	(___ftdiv@f1+2)^(0+128)
  2093  0B83  1703               	bsf	3,6	;RP1=1, select bank3
  2094  0B84  0844               	movf	(main@NumberOfSystemCyclesSinceLastRTC+1)^(0+384),w
  2095  0B85  1303               	bcf	3,6	;RP1=0, select bank1
  2096  0B86  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  2097  0B87  1703               	bsf	3,6	;RP1=1, select bank3
  2098  0B88  0843               	movf	main@NumberOfSystemCyclesSinceLastRTC^(0+384),w
  2099  0B89  1303               	bcf	3,6	;RP1=0, select bank1
  2100  0B8A  00A8               	movwf	___lwtoft@c^(0+128)
  2101  0B8B  120A  118A  2004  120A  158A  	fcall	___lwtoft
  2102  0B90  0828               	movf	?___lwtoft^(0+128),w
  2103  0B91  00B6               	movwf	___ftdiv@f2^(0+128)
  2104  0B92  0829               	movf	(?___lwtoft+1)^(0+128),w
  2105  0B93  00B7               	movwf	(___ftdiv@f2+1)^(0+128)
  2106  0B94  082A               	movf	(?___lwtoft+2)^(0+128),w
  2107  0B95  00B8               	movwf	(___ftdiv@f2+2)^(0+128)
  2108  0B96  120A  118A  2744  120A  158A  	fcall	___ftdiv
  2109  0B9B  0836               	movf	?___ftdiv^(0+128),w
  2110  0B9C  00C5               	movwf	___ftmul@f1^(0+128)
  2111  0B9D  0837               	movf	(?___ftdiv+1)^(0+128),w
  2112  0B9E  00C6               	movwf	(___ftmul@f1+1)^(0+128)
  2113  0B9F  0838               	movf	(?___ftdiv+2)^(0+128),w
  2114  0BA0  00C7               	movwf	(___ftmul@f1+2)^(0+128)
  2115  0BA1  120A  118A  22B3  120A  158A  	fcall	___ftmul
  2116  0BA6  0845               	movf	?___ftmul^(0+128),w
  2117  0BA7  00E0               	movwf	___fttol@f1^(0+128)
  2118  0BA8  0846               	movf	(?___ftmul+1)^(0+128),w
  2119  0BA9  00E1               	movwf	(___fttol@f1+1)^(0+128)
  2120  0BAA  0847               	movf	(?___ftmul+2)^(0+128),w
  2121  0BAB  00E2               	movwf	(___fttol@f1+2)^(0+128)
  2122  0BAC  120A  118A  2258  120A  158A  	fcall	___fttol
  2123  0BB1  0861               	movf	(?___fttol^(0+128)+1),w
  2124  0BB2  1703               	bsf	3,6	;RP1=1, select bank3
  2125  0BB3  00D8               	movwf	(main@SyncY_1+1)^(0+384)
  2126  0BB4  1303               	bcf	3,6	;RP1=0, select bank1
  2127  0BB5  0860               	movf	?___fttol^(0+128),w
  2128  0BB6  1703               	bsf	3,6	;RP1=1, select bank3
  2129  0BB7  00D7               	movwf	main@SyncY_1^(0+384)
  2130                           
  2131                           ;main.c: 63: SyncX_1 = AdjustMilliSecond;
  2132  0BB8  085E               	movf	main@AdjustMilliSecond^(0+384),w
  2133  0BB9  00D9               	movwf	main@SyncX_1^(0+384)
  2134  0BBA  01DA               	clrf	(main@SyncX_1+1)^(0+384)
  2135                           
  2136                           ;main.c: 65: if (ReadyForCalcOfSystemSync){
  2137  0BBB  0849               	movf	main@ReadyForCalcOfSystemSync^(0+384),w
  2138  0BBC  1903               	btfsc	3,2
  2139  0BBD  2C3C               	goto	l3641
  2140                           
  2141                           ;main.c: 66: if (SyncX_1 != SyncX_2) {
  2142  0BBE  085C               	movf	(main@SyncX_2+1)^(0+384),w
  2143  0BBF  065A               	xorwf	(main@SyncX_1+1)^(0+384),w
  2144  0BC0  1D03               	skipz
  2145  0BC1  2BC4               	goto	u4405
  2146  0BC2  085B               	movf	main@SyncX_2^(0+384),w
  2147  0BC3  0659               	xorwf	main@SyncX_1^(0+384),w
  2148  0BC4                     u4405:	
  2149  0BC4  1903               	skipnz
  2150  0BC5  2C3D               	goto	l3643
  2151                           
  2152                           ;main.c: 67: SyncM = (SyncY_2-SyncY_1)/(SyncX_2-SyncX_1);
  2153  0BC6  084D               	movf	(main@SyncY_2+1)^(0+384),w
  2154  0BC7  1303               	bcf	3,6	;RP1=0, select bank1
  2155  0BC8  00A3               	movwf	(___awdiv@dividend+1)^(0+128)
  2156  0BC9  1703               	bsf	3,6	;RP1=1, select bank3
  2157  0BCA  084C               	movf	main@SyncY_2^(0+384),w
  2158  0BCB  1303               	bcf	3,6	;RP1=0, select bank1
  2159  0BCC  00A2               	movwf	___awdiv@dividend^(0+128)
  2160  0BCD  1703               	bsf	3,6	;RP1=1, select bank3
  2161  0BCE  0857               	movf	main@SyncY_1^(0+384),w
  2162  0BCF  1303               	bcf	3,6	;RP1=0, select bank1
  2163  0BD0  02A2               	subwf	___awdiv@dividend^(0+128),f
  2164  0BD1  1703               	bsf	3,6	;RP1=1, select bank3
  2165  0BD2  0858               	movf	(main@SyncY_1+1)^(0+384),w
  2166  0BD3  1303               	bcf	3,6	;RP1=0, select bank1
  2167  0BD4  1C03               	skipc
  2168  0BD5  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2169  0BD6  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  2170  0BD7  1703               	bsf	3,6	;RP1=1, select bank3
  2171  0BD8  085C               	movf	(main@SyncX_2+1)^(0+384),w
  2172  0BD9  1303               	bcf	3,6	;RP1=0, select bank1
  2173  0BDA  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  2174  0BDB  1703               	bsf	3,6	;RP1=1, select bank3
  2175  0BDC  085B               	movf	main@SyncX_2^(0+384),w
  2176  0BDD  1303               	bcf	3,6	;RP1=0, select bank1
  2177  0BDE  00A0               	movwf	___awdiv@divisor^(0+128)
  2178  0BDF  1703               	bsf	3,6	;RP1=1, select bank3
  2179  0BE0  0859               	movf	main@SyncX_1^(0+384),w
  2180  0BE1  1303               	bcf	3,6	;RP1=0, select bank1
  2181  0BE2  02A0               	subwf	___awdiv@divisor^(0+128),f
  2182  0BE3  1703               	bsf	3,6	;RP1=1, select bank3
  2183  0BE4  085A               	movf	(main@SyncX_1+1)^(0+384),w
  2184  0BE5  1303               	bcf	3,6	;RP1=0, select bank1
  2185  0BE6  1C03               	skipc
  2186  0BE7  03A1               	decf	(___awdiv@divisor+1)^(0+128),f
  2187  0BE8  02A1               	subwf	(___awdiv@divisor+1)^(0+128),f
  2188  0BE9  160A  118A  2540  120A  158A  	fcall	___awdiv
  2189  0BEE  0821               	movf	(?___awdiv+1)^(0+128),w
  2190  0BEF  1703               	bsf	3,6	;RP1=1, select bank3
  2191  0BF0  00CF               	movwf	(main@SyncM+1)^(0+384)
  2192  0BF1  1303               	bcf	3,6	;RP1=0, select bank1
  2193  0BF2  0820               	movf	?___awdiv^(0+128),w
  2194  0BF3  1703               	bsf	3,6	;RP1=1, select bank3
  2195  0BF4  00CE               	movwf	main@SyncM^(0+384)
  2196                           
  2197                           ;main.c: 68: SyncC = SyncY_2 - SyncM*SyncX_2;
  2198  0BF5  084D               	movf	(main@SyncY_2+1)^(0+384),w
  2199  0BF6  00C8               	movwf	(main@SyncC+1)^(0+384)
  2200  0BF7  084C               	movf	main@SyncY_2^(0+384),w
  2201  0BF8  00C7               	movwf	main@SyncC^(0+384)
  2202  0BF9  084F               	movf	(main@SyncM+1)^(0+384),w
  2203  0BFA  1303               	bcf	3,6	;RP1=0, select bank1
  2204  0BFB  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
  2205  0BFC  1703               	bsf	3,6	;RP1=1, select bank3
  2206  0BFD  084E               	movf	main@SyncM^(0+384),w
  2207  0BFE  1303               	bcf	3,6	;RP1=0, select bank1
  2208  0BFF  00A0               	movwf	___wmul@multiplier^(0+128)
  2209  0C00  1703               	bsf	3,6	;RP1=1, select bank3
  2210  0C01  085C               	movf	(main@SyncX_2+1)^(0+384),w
  2211  0C02  1303               	bcf	3,6	;RP1=0, select bank1
  2212  0C03  00A3               	movwf	(___wmul@multiplicand+1)^(0+128)
  2213  0C04  1703               	bsf	3,6	;RP1=1, select bank3
  2214  0C05  085B               	movf	main@SyncX_2^(0+384),w
  2215  0C06  1303               	bcf	3,6	;RP1=0, select bank1
  2216  0C07  00A2               	movwf	___wmul@multiplicand^(0+128)
  2217  0C08  120A  158A  21E5  120A  158A  	fcall	___wmul
  2218  0C0D  0820               	movf	?___wmul^(0+128),w
  2219  0C0E  1703               	bsf	3,6	;RP1=1, select bank3
  2220  0C0F  02C7               	subwf	main@SyncC^(0+384),f
  2221  0C10  1303               	bcf	3,6	;RP1=0, select bank1
  2222  0C11  0821               	movf	(?___wmul+1)^(0+128),w
  2223  0C12  1703               	bsf	3,6	;RP1=1, select bank3
  2224  0C13  1C03               	skipc
  2225  0C14  03C8               	decf	(main@SyncC+1)^(0+384),f
  2226  0C15  02C8               	subwf	(main@SyncC+1)^(0+384),f
  2227                           
  2228                           ;main.c: 69: AdjustMilliSecond = (1000-SyncC)/SyncM;
  2229  0C16  30E8               	movlw	232
  2230  0C17  1303               	bcf	3,6	;RP1=0, select bank1
  2231  0C18  00A2               	movwf	___awdiv@dividend^(0+128)
  2232  0C19  3003               	movlw	3
  2233  0C1A  00A3               	movwf	(___awdiv@dividend^(0+128)+1)
  2234  0C1B  1703               	bsf	3,6	;RP1=1, select bank3
  2235  0C1C  0847               	movf	main@SyncC^(0+384),w
  2236  0C1D  1303               	bcf	3,6	;RP1=0, select bank1
  2237  0C1E  02A2               	subwf	___awdiv@dividend^(0+128),f
  2238  0C1F  1703               	bsf	3,6	;RP1=1, select bank3
  2239  0C20  0848               	movf	(main@SyncC+1)^(0+384),w
  2240  0C21  1303               	bcf	3,6	;RP1=0, select bank1
  2241  0C22  1C03               	skipc
  2242  0C23  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  2243  0C24  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  2244  0C25  1703               	bsf	3,6	;RP1=1, select bank3
  2245  0C26  084F               	movf	(main@SyncM+1)^(0+384),w
  2246  0C27  1303               	bcf	3,6	;RP1=0, select bank1
  2247  0C28  00A1               	movwf	(___awdiv@divisor+1)^(0+128)
  2248  0C29  1703               	bsf	3,6	;RP1=1, select bank3
  2249  0C2A  084E               	movf	main@SyncM^(0+384),w
  2250  0C2B  1303               	bcf	3,6	;RP1=0, select bank1
  2251  0C2C  00A0               	movwf	___awdiv@divisor^(0+128)
  2252  0C2D  160A  118A  2540  120A  158A  	fcall	___awdiv
  2253  0C32  0820               	movf	?___awdiv^(0+128),w
  2254  0C33  1703               	bsf	3,6	;RP1=1, select bank3
  2255  0C34  00DE               	movwf	main@AdjustMilliSecond^(0+384)
  2256                           
  2257                           ;main.c: 70: if (AdjustMilliSecond>250)
  2258  0C35  30FB               	movlw	251
  2259  0C36  025E               	subwf	main@AdjustMilliSecond^(0+384),w
  2260  0C37  1C03               	skipc
  2261  0C38  2C3D               	goto	l3643
  2262                           
  2263                           ;main.c: 71: AdjustMilliSecond = 250;
  2264  0C39  30FA               	movlw	250
  2265  0C3A  00DE               	movwf	main@AdjustMilliSecond^(0+384)
  2266  0C3B  2C3D               	goto	l3643
  2267  0C3C                     l3641:	
  2268                           
  2269                           ;main.c: 74: AdjustMilliSecond += 1;
  2270  0C3C  0ADE               	incf	main@AdjustMilliSecond^(0+384),f
  2271  0C3D                     l3643:	
  2272                           
  2273                           ;main.c: 75: SyncY_2 = SyncY_1;
  2274  0C3D  0858               	movf	(main@SyncY_1+1)^(0+384),w
  2275  0C3E  00CD               	movwf	(main@SyncY_2+1)^(0+384)
  2276  0C3F  0857               	movf	main@SyncY_1^(0+384),w
  2277  0C40  00CC               	movwf	main@SyncY_2^(0+384)
  2278                           
  2279                           ;main.c: 76: SyncX_2 = SyncX_1;
  2280  0C41  085A               	movf	(main@SyncX_1+1)^(0+384),w
  2281  0C42  00DC               	movwf	(main@SyncX_2+1)^(0+384)
  2282  0C43  0859               	movf	main@SyncX_1^(0+384),w
  2283  0C44  00DB               	movwf	main@SyncX_2^(0+384)
  2284                           
  2285                           ;main.c: 78: }
  2286  0C45  2C47               	goto	l3647
  2287  0C46                     l679:	
  2288                           
  2289                           ;main.c: 79: else
  2290                           ;main.c: 80: FLAGS.bits.b1 = 1;
  2291  0C46  14EC               	bsf	_FLAGS^(0+384),1	;volatile
  2292  0C47                     l3647:	
  2293                           
  2294                           ;main.c: 81: S = TimeSinceTheStartOfCycle;
  2295  0C47  0867               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+384),w
  2296  0C48  1283               	bcf	3,5	;RP0=0, select bank2
  2297  0C49  00EE               	movwf	110	;volatile
  2298  0C4A  1683               	bsf	3,5	;RP0=1, select bank3
  2299  0C4B  0866               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+384),w
  2300  0C4C  1283               	bcf	3,5	;RP0=0, select bank2
  2301  0C4D  00ED               	movwf	109	;volatile
  2302  0C4E  1683               	bsf	3,5	;RP0=1, select bank3
  2303  0C4F  0865               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+384),w
  2304  0C50  1283               	bcf	3,5	;RP0=0, select bank2
  2305  0C51  00EC               	movwf	108	;volatile
  2306  0C52  1683               	bsf	3,5	;RP0=1, select bank3
  2307  0C53  0864               	movf	main@TimeSinceTheStartOfCycle^(0+384),w
  2308  0C54  1283               	bcf	3,5	;RP0=0, select bank2
  2309  0C55  00EB               	movwf	107	;volatile
  2310                           
  2311                           ;main.c: 82: PrevRTCSyncTime = S;
  2312  0C56  086E               	movf	110,w	;volatile
  2313  0C57  1683               	bsf	3,5	;RP0=1, select bank3
  2314  0C58  00C0               	movwf	(main@PrevRTCSyncTime+3)^(0+384)
  2315  0C59  1283               	bcf	3,5	;RP0=0, select bank2
  2316  0C5A  086D               	movf	109,w	;volatile
  2317  0C5B  1683               	bsf	3,5	;RP0=1, select bank3
  2318  0C5C  00BF               	movwf	(main@PrevRTCSyncTime+2)^(0+384)
  2319  0C5D  1283               	bcf	3,5	;RP0=0, select bank2
  2320  0C5E  086C               	movf	108,w	;volatile
  2321  0C5F  1683               	bsf	3,5	;RP0=1, select bank3
  2322  0C60  00BE               	movwf	(main@PrevRTCSyncTime+1)^(0+384)
  2323  0C61  1283               	bcf	3,5	;RP0=0, select bank2
  2324  0C62  086B               	movf	107,w	;volatile
  2325  0C63  1683               	bsf	3,5	;RP0=1, select bank3
  2326  0C64  00BD               	movwf	main@PrevRTCSyncTime^(0+384)
  2327                           
  2328                           ;main.c: 83: NumberOfSystemCyclesSinceLastRTC = 0;
  2329  0C65  01C3               	clrf	main@NumberOfSystemCyclesSinceLastRTC^(0+384)
  2330  0C66  01C4               	clrf	(main@NumberOfSystemCyclesSinceLastRTC+1)^(0+384)
  2331  0C67                     l3651:	
  2332                           
  2333                           ;main.c: 84: }
  2334                           ;main.c: 85: if (GPS_On_Time_Counter >= (20*60)) {
  2335  0C67  3004               	movlw	4
  2336  0C68  0246               	subwf	(main@GPS_On_Time_Counter+1)^(0+384),w
  2337  0C69  30B0               	movlw	176
  2338  0C6A  1903               	skipnz
  2339  0C6B  0245               	subwf	main@GPS_On_Time_Counter^(0+384),w
  2340  0C6C  1C03               	skipc
  2341  0C6D  2CE1               	goto	l3675
  2342                           
  2343                           ;main.c: 86: if (UART_ReadValidTimeFromGPS_TO(GPSData,100)) {
  2344  0C6E  3064               	movlw	100
  2345  0C6F  1303               	bcf	3,6	;RP1=0, select bank1
  2346  0C70  00A8               	movwf	UART_ReadValidTimeFromGPS_TO@TimeOut^(0+128)
  2347  0C71  30B7               	movlw	(low (main@GPSData| (0+256)))& (0+255)
  2348  0C72  120A  158A  202E  120A  158A  	fcall	_UART_ReadValidTimeFromGPS_TO
  2349  0C77  3A00               	xorlw	0
  2350  0C78  1903               	skipnz
  2351  0C79  2CD8               	goto	l3673
  2352                           
  2353                           ;main.c: 90: TimeSinceTheStartOfCycle = ReadRTCAsSec();
  2354  0C7A  120A  158A  2131  120A  158A  	fcall	_ReadRTCAsSec
  2355  0C7F  27BF               	fcall	PL8	;call to abstracted procedure
  2356                           
  2357                           ;main.c: 91: WriteToRTC(GPSData);
  2358  0C80  30B7               	movlw	(low (main@GPSData| (0+256)))& (0+255)
  2359  0C81  120A  158A  20E1  120A  158A  	fcall	_WriteToRTC
  2360                           
  2361                           ;main.c: 92: if (FLAGS.bits.b4)
  2362  0C86  1703               	bsf	3,6	;RP1=1, select bank3
  2363  0C87  1E6C               	btfss	_FLAGS^(0+384),4	;volatile
  2364  0C88  2C97               	goto	l688
  2365                           
  2366                           ;main.c: 93: AdjustSec(TimeSinceTheStartOfCycle - ReadRTCAsSec());
  2367  0C89  120A  158A  2131  120A  158A  	fcall	_ReadRTCAsSec
  2368  0C8E  082C               	movf	?_ReadRTCAsSec^(0+128),w
  2369  0C8F  1703               	bsf	3,6	;RP1=1, select bank3
  2370  0C90  0264               	subwf	main@TimeSinceTheStartOfCycle^(0+384),w
  2371  0C91  120A  118A  2014  120A  158A  	fcall	_AdjustSec
  2372  0C96  2C98               	goto	l3663
  2373  0C97                     l688:	
  2374                           
  2375                           ;main.c: 94: else
  2376                           ;main.c: 95: FLAGS.bits.b4 = 1;
  2377  0C97  166C               	bsf	_FLAGS^(0+384),4	;volatile
  2378  0C98                     l3663:	
  2379                           
  2380                           ;main.c: 96: S = ReadRTCAsSec() + C_D;
  2381  0C98  1283               	bcf	3,5	;RP0=0, select bank2
  2382  0C99  1703               	bsf	3,6	;RP1=1, select bank2
  2383  0C9A  086F               	movf	111,w	;volatile
  2384  0C9B  1683               	bsf	3,5	;RP0=1, select bank3
  2385  0C9C  00AD               	movwf	??_main^(0+384)
  2386  0C9D  3000               	movlw	0
  2387  0C9E  1BAD               	btfsc	??_main^(0+384),7
  2388  0C9F  30FF               	movlw	255
  2389  0CA0  00AE               	movwf	(??_main^(0+384)+1)
  2390  0CA1  00AF               	movwf	(??_main^(0+384)+2)
  2391  0CA2  00B0               	movwf	(??_main^(0+384)+3)
  2392  0CA3  120A  158A  2131  120A  158A  	fcall	_ReadRTCAsSec
  2393  0CA8  082C               	movf	?_ReadRTCAsSec^(0+128),w
  2394  0CA9  1703               	bsf	3,6	;RP1=1, select bank3
  2395  0CAA  07AD               	addwf	??_main^(0+384),f
  2396  0CAB  1303               	bcf	3,6	;RP1=0, select bank1
  2397  0CAC  082D               	movf	(?_ReadRTCAsSec+1)^(0+128),w
  2398  0CAD  1803               	skipnc
  2399  0CAE  0F2D               	incfsz	(?_ReadRTCAsSec+1)^(0+128),w
  2400  0CAF  2CB1               	goto	u4450
  2401  0CB0  2CB3               	goto	u4451
  2402  0CB1                     u4450:	
  2403  0CB1  1703               	bsf	3,6	;RP1=1, select bank3
  2404  0CB2  07AE               	addwf	(??_main^(0+384)+1),f
  2405  0CB3                     u4451:	
  2406  0CB3  1303               	bcf	3,6	;RP1=0, select bank1
  2407  0CB4  082E               	movf	(?_ReadRTCAsSec+2)^(0+128),w
  2408  0CB5  1803               	skipnc
  2409  0CB6  0F2E               	incfsz	(?_ReadRTCAsSec+2)^(0+128),w
  2410  0CB7  2CB9               	goto	u4452
  2411  0CB8  2CBB               	goto	u4453
  2412  0CB9                     u4452:	
  2413  0CB9  1703               	bsf	3,6	;RP1=1, select bank3
  2414  0CBA  07AF               	addwf	(??_main^(0+384)+2),f
  2415  0CBB                     u4453:	
  2416  0CBB  1303               	bcf	3,6	;RP1=0, select bank1
  2417  0CBC  082F               	movf	(?_ReadRTCAsSec+3)^(0+128),w
  2418  0CBD  1803               	skipnc
  2419  0CBE  0A2F               	incf	(?_ReadRTCAsSec+3)^(0+128),w
  2420  0CBF  1703               	bsf	3,6	;RP1=1, select bank3
  2421  0CC0  07B0               	addwf	(??_main^(0+384)+3),f
  2422  0CC1  0830               	movf	(??_main+3)^(0+384),w
  2423  0CC2  1283               	bcf	3,5	;RP0=0, select bank2
  2424  0CC3  00EE               	movwf	110	;volatile
  2425  0CC4  1683               	bsf	3,5	;RP0=1, select bank3
  2426  0CC5  082F               	movf	(??_main+2)^(0+384),w
  2427  0CC6  1283               	bcf	3,5	;RP0=0, select bank2
  2428  0CC7  00ED               	movwf	109	;volatile
  2429  0CC8  1683               	bsf	3,5	;RP0=1, select bank3
  2430  0CC9  082E               	movf	(??_main+1)^(0+384),w
  2431  0CCA  1283               	bcf	3,5	;RP0=0, select bank2
  2432  0CCB  00EC               	movwf	108	;volatile
  2433  0CCC  1683               	bsf	3,5	;RP0=1, select bank3
  2434  0CCD  082D               	movf	??_main^(0+384),w
  2435  0CCE  1283               	bcf	3,5	;RP0=0, select bank2
  2436  0CCF  00EB               	movwf	107	;volatile
  2437                           
  2438                           ;main.c: 97: FLAGS.bits.b3 = 1;
  2439  0CD0  1683               	bsf	3,5	;RP0=1, select bank3
  2440  0CD1  15EC               	bsf	_FLAGS^(0+384),3	;volatile
  2441                           
  2442                           ;main.c: 98: GPS_On_Time_Counter = 0;
  2443  0CD2  01C5               	clrf	main@GPS_On_Time_Counter^(0+384)
  2444  0CD3  01C6               	clrf	(main@GPS_On_Time_Counter+1)^(0+384)
  2445                           
  2446                           ;main.c: 99: RC1 = 0;
  2447                           
  2448                           ;main.c: 100: FLAGS.bits.b2 = 0;
  2449  0CD4  27F9  120A  158A   	fcall	PL48	;call to abstracted procedure
  2450                           
  2451                           ;main.c: 104: } else {
  2452  0CD7  2CE1               	goto	l3675
  2453  0CD8                     l3673:	
  2454                           
  2455                           ;main.c: 105: S++;
  2456  0CD8  1283               	bcf	3,5	;RP0=0, select bank2
  2457  0CD9  1703               	bsf	3,6	;RP1=1, select bank2
  2458  0CDA  0AEB               	incf	107,f	;volatile
  2459  0CDB  1903               	skipnz
  2460  0CDC  0AEC               	incf	108,f	;volatile
  2461  0CDD  1903               	skipnz
  2462  0CDE  0AED               	incf	109,f	;volatile
  2463  0CDF  1903               	skipnz
  2464  0CE0  0AEE               	incf	110,f	;volatile
  2465  0CE1                     l3675:	
  2466                           
  2467                           ;main.c: 109: }
  2468                           ;main.c: 110: }
  2469                           ;main.c: 112: if (C[PREV_CYCLE_TYPE] < C[CYCLE_TYPE])
  2470  0CE1  1683               	bsf	3,5	;RP0=1, select bank3
  2471  0CE2  086B               	movf	_CYCLE_TYPE^(0+384),w	;volatile
  2472  0CE3  00AD               	movwf	??_main^(0+384)
  2473  0CE4  3001               	movlw	1
  2474  0CE5  1003               	clrc
  2475  0CE6                     L1:	
  2476  0CE6  0DAD               	rlf	??_main^(0+384),f
  2477  0CE7  3EFF               	addlw	-1
  2478  0CE8  1003               	clrc
  2479  0CE9  1D03               	skipz
  2480  0CEA  2CE6               	goto	L1
  2481  0CEB  0D2D               	rlf	??_main^(0+384),w
  2482  0CEC  3E4C               	addlw	76
  2483  0CED  0084               	movwf	4
  2484  0CEE  1783               	bsf	3,7	;select IRP bank2
  2485  0CEF  0800               	movf	0,w
  2486  0CF0  00AE               	movwf	(??_main+1)^(0+384)
  2487  0CF1  0A84               	incf	4,f
  2488  0CF2  0800               	movf	0,w
  2489  0CF3  00AF               	movwf	((??_main+1)^(0+384)+1)
  2490  0CF4  0A84               	incf	4,f
  2491  0CF5  0800               	movf	0,w
  2492  0CF6  00B0               	movwf	((??_main+1)^(0+384)+2)
  2493  0CF7  0A84               	incf	4,f
  2494  0CF8  0800               	movf	0,w
  2495  0CF9  00B1               	movwf	((??_main+1)^(0+384)+3)
  2496  0CFA  086D               	movf	_PREV_CYCLE_TYPE^(0+384),w	;volatile
  2497  0CFB  00B2               	movwf	(??_main+5)^(0+384)
  2498  0CFC  3001               	movlw	1
  2499  0CFD  1003               	clrc
  2500  0CFE                     L2:	
  2501  0CFE  0DB2               	rlf	(??_main+5)^(0+384),f
  2502  0CFF  3EFF               	addlw	-1
  2503  0D00  1003               	clrc
  2504  0D01  1D03               	skipz
  2505  0D02  2CFE               	goto	L2
  2506  0D03  0D32               	rlf	(??_main+5)^(0+384),w
  2507  0D04  3E4C               	addlw	76
  2508  0D05  0084               	movwf	4
  2509  0D06  0800               	movf	0,w
  2510  0D07  00B3               	movwf	(??_main+6)^(0+384)
  2511  0D08  0A84               	incf	4,f
  2512  0D09  0800               	movf	0,w
  2513  0D0A  00B4               	movwf	((??_main+6)^(0+384)+1)
  2514  0D0B  0A84               	incf	4,f
  2515  0D0C  0800               	movf	0,w
  2516  0D0D  00B5               	movwf	((??_main+6)^(0+384)+2)
  2517  0D0E  0A84               	incf	4,f
  2518  0D0F  0800               	movf	0,w
  2519  0D10  00B6               	movwf	((??_main+6)^(0+384)+3)
  2520  0D11  0836               	movf	(??_main+9)^(0+384),w
  2521  0D12  3A80               	xorlw	128
  2522  0D13  00FF               	movwf	127
  2523  0D14  0831               	movf	(??_main+4)^(0+384),w
  2524  0D15  3A80               	xorlw	128
  2525  0D16  027F               	subwf	127,w
  2526  0D17  1D03               	skipz
  2527  0D18  2D23               	goto	u4483
  2528  0D19  0830               	movf	(??_main+3)^(0+384),w
  2529  0D1A  0235               	subwf	(??_main+8)^(0+384),w
  2530  0D1B  1D03               	skipz
  2531  0D1C  2D23               	goto	u4483
  2532  0D1D  082F               	movf	(??_main+2)^(0+384),w
  2533  0D1E  0234               	subwf	(??_main+7)^(0+384),w
  2534  0D1F  1D03               	skipz
  2535  0D20  2D23               	goto	u4483
  2536  0D21  082E               	movf	(??_main+1)^(0+384),w
  2537  0D22  0233               	subwf	(??_main+6)^(0+384),w
  2538  0D23                     u4483:	
  2539  0D23  1803               	skipnc
  2540  0D24  2D2C               	goto	l3681
  2541                           
  2542                           ;main.c: 113: TimeSinceTheStartOfCycle = S - C[PREV_CYCLE_TYPE];
  2543  0D25  2771  120A  158A   	fcall	PL2	;call to abstracted procedure
  2544  0D28  1C03               	skipc
  2545  0D29  0F31               	incfsz	(??_main+4)^(0+384),w
  2546  0D2A  02E7               	subwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  2547  0D2B  2D40               	goto	l3687
  2548  0D2C                     l3681:	
  2549                           
  2550                           ;main.c: 114: else
  2551                           ;main.c: 115: TimeSinceTheStartOfCycle = S + (86400 - C[PREV_CYCLE_TYPE]);
  2552  0D2C  2771  120A  158A   	fcall	PL2	;call to abstracted procedure
  2553  0D2F  1C03               	skipc
  2554  0D30  0F31               	incfsz	(??_main+4)^(0+384),w
  2555  0D31  02E7               	subwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  2556  0D32  3080               	movlw	128
  2557  0D33  07E4               	addwf	main@TimeSinceTheStartOfCycle^(0+384),f
  2558  0D34  3051               	movlw	81
  2559  0D35  1803               	skipnc
  2560  0D36  3052               	movlw	82
  2561  0D37  07E5               	addwf	(main@TimeSinceTheStartOfCycle+1)^(0+384),f
  2562  0D38  3001               	movlw	1
  2563  0D39  1803               	skipnc
  2564  0D3A  3002               	movlw	2
  2565  0D3B  07E6               	addwf	(main@TimeSinceTheStartOfCycle+2)^(0+384),f
  2566  0D3C  3000               	movlw	0
  2567  0D3D  1803               	skipnc
  2568  0D3E  3001               	movlw	1
  2569  0D3F  07E7               	addwf	(main@TimeSinceTheStartOfCycle+3)^(0+384),f
  2570  0D40                     l3687:	
  2571                           
  2572                           ;main.c: 116: SecError = TimeSinceTheStartOfCycle%STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2573  0D40  27DF               	fcall	PL20	;call to abstracted procedure
  2574  0D41  082D               	movf	??_main^(0+384),w
  2575  0D42  1303               	bcf	3,6	;RP1=0, select bank1
  2576  0D43  00A0               	movwf	___almod@divisor^(0+128)
  2577  0D44  1703               	bsf	3,6	;RP1=1, select bank3
  2578  0D45  082E               	movf	(??_main+1)^(0+384),w
  2579  0D46  1303               	bcf	3,6	;RP1=0, select bank1
  2580  0D47  00A1               	movwf	(___almod@divisor^(0+128)+1)
  2581  0D48  01A2               	clrf	(___almod@divisor^(0+128)+2)
  2582  0D49  01A3               	clrf	(___almod@divisor^(0+128)+3)
  2583  0D4A  1703               	bsf	3,6	;RP1=1, select bank3
  2584  0D4B  0867               	movf	(main@TimeSinceTheStartOfCycle+3)^(0+384),w
  2585  0D4C  1303               	bcf	3,6	;RP1=0, select bank1
  2586  0D4D  00A7               	movwf	(___almod@dividend+3)^(0+128)
  2587  0D4E  1703               	bsf	3,6	;RP1=1, select bank3
  2588  0D4F  0866               	movf	(main@TimeSinceTheStartOfCycle+2)^(0+384),w
  2589  0D50  1303               	bcf	3,6	;RP1=0, select bank1
  2590  0D51  00A6               	movwf	(___almod@dividend+2)^(0+128)
  2591  0D52  1703               	bsf	3,6	;RP1=1, select bank3
  2592  0D53  0865               	movf	(main@TimeSinceTheStartOfCycle+1)^(0+384),w
  2593  0D54  1303               	bcf	3,6	;RP1=0, select bank1
  2594  0D55  00A5               	movwf	(___almod@dividend+1)^(0+128)
  2595  0D56  1703               	bsf	3,6	;RP1=1, select bank3
  2596  0D57  0864               	movf	main@TimeSinceTheStartOfCycle^(0+384),w
  2597  0D58  1303               	bcf	3,6	;RP1=0, select bank1
  2598  0D59  00A4               	movwf	___almod@dividend^(0+128)
  2599  0D5A  160A  118A  2585  120A  158A  	fcall	___almod
  2600  0D5F  0821               	movf	(?___almod^(0+128)+1),w
  2601  0D60  1703               	bsf	3,6	;RP1=1, select bank3
  2602  0D61  00E2               	movwf	(main@SecError+1)^(0+384)
  2603  0D62  1303               	bcf	3,6	;RP1=0, select bank1
  2604  0D63  0820               	movf	?___almod^(0+128),w
  2605  0D64  1703               	bsf	3,6	;RP1=1, select bank3
  2606  0D65  00E1               	movwf	main@SecError^(0+384)
  2607                           
  2608                           ;main.c: 117: (CYCLE_TYPE==0) ? (i = 0) : (i = STATE_BREAKS[CYCLE_TYPE-1]);
  2609  0D66  086B               	movf	_CYCLE_TYPE^(0+384),w	;volatile
  2610  0D67  1D03               	btfss	3,2
  2611  0D68  2D6B               	goto	l3693
  2612  0D69  01E8               	clrf	main@i^(0+384)
  2613  0D6A  2D71               	goto	l696
  2614  0D6B                     l3693:	
  2615  0D6B  086B               	movf	_CYCLE_TYPE^(0+384),w
  2616  0D6C  3E63               	addlw	99
  2617  0D6D  0084               	movwf	4
  2618  0D6E  1783               	bsf	3,7	;select IRP bank2
  2619  0D6F  0800               	movf	0,w
  2620  0D70  00E8               	movwf	main@i^(0+384)
  2621  0D71                     l696:	
  2622                           
  2623                           ;main.c: 118: if (SecError > (STATE_CUMULATIVE_PERIODS[CYCLE_TYPE]/2))
  2624  0D71  27DF  120A  158A   	fcall	PL20	;call to abstracted procedure
  2625  0D74  1003               	clrc
  2626  0D75  0CAE               	rrf	(??_main^(0+384)+1),f
  2627  0D76  0CAD               	rrf	??_main^(0+384),f
  2628  0D77  0862               	movf	(main@SecError+1)^(0+384),w
  2629  0D78  022E               	subwf	(??_main+1)^(0+384),w
  2630  0D79  1D03               	skipz
  2631  0D7A  2D7D               	goto	u4545
  2632  0D7B  0861               	movf	main@SecError^(0+384),w
  2633  0D7C  022D               	subwf	??_main^(0+384),w
  2634  0D7D                     u4545:	
  2635  0D7D  1803               	skipnc
  2636  0D7E  2D8E               	goto	l3831
  2637                           
  2638                           ;main.c: 119: SecError -= STATE_CUMULATIVE_PERIODS[CYCLE_TYPE];
  2639  0D7F  1003               	clrc
  2640  0D80  0D6B               	rlf	_CYCLE_TYPE^(0+384),w	;volatile
  2641  0D81  3E7A               	addlw	122
  2642  0D82  0084               	movwf	4
  2643  0D83  0800               	movf	0,w
  2644  0D84  00AD               	movwf	??_main^(0+384)
  2645  0D85  0A84               	incf	4,f
  2646  0D86  0800               	movf	0,w
  2647  0D87  00AE               	movwf	(??_main^(0+384)+1)
  2648  0D88  082D               	movf	??_main^(0+384),w
  2649  0D89  02E1               	subwf	main@SecError^(0+384),f
  2650  0D8A  082E               	movf	(??_main+1)^(0+384),w
  2651  0D8B  1C03               	skipc
  2652  0D8C  03E2               	decf	(main@SecError+1)^(0+384),f
  2653  0D8D  02E2               	subwf	(main@SecError+1)^(0+384),f
  2654  0D8E                     l3831:	
  2655  0D8E  086B               	movf	_CYCLE_TYPE^(0+384),w
  2656  0D8F  3E64               	addlw	100
  2657  0D90  0084               	movwf	4
  2658  0D91  1783               	bsf	3,7	;select IRP bank2
  2659  0D92  0800               	movf	0,w
  2660  0D93  0268               	subwf	main@i^(0+384),w
  2661  0D94  1803               	btfsc	3,0
  2662  0D95  2B13               	goto	l3601
  2663                           
  2664                           ;main.c: 121: DiffInSecond = 0;
  2665  0D96  01E3               	clrf	main@DiffInSecond^(0+384)
  2666                           
  2667                           ;main.c: 122: for (j=0; j<(STATE_PERIODS[i] + DiffInSecond); j++) {
  2668  0D97  01DD               	clrf	main@j^(0+384)
  2669  0D98                     l3827:	
  2670  0D98  0868               	movf	main@i^(0+384),w
  2671  0D99  3E20               	addlw	32
  2672  0D9A  0084               	movwf	4
  2673  0D9B  1383               	bcf	3,7	;select IRP bank0
  2674  0D9C  0800               	movf	0,w
  2675  0D9D  0763               	addwf	main@DiffInSecond^(0+384),w
  2676  0D9E  00AD               	movwf	??_main^(0+384)
  2677  0D9F  01AE               	clrf	(??_main+1)^(0+384)
  2678  0DA0  1803               	skipnc
  2679  0DA1  0AAE               	incf	(??_main^(0+384)+1),f
  2680  0DA2  1BE3               	btfsc	main@DiffInSecond^(0+384),7
  2681  0DA3  03AE               	decf	(??_main^(0+384)+1),f
  2682  0DA4  1683               	bsf	3,5	;RP0=1, select bank3
  2683  0DA5  1703               	bsf	3,6	;RP1=1, select bank3
  2684  0DA6  082E               	movf	(??_main+1)^(0+384),w
  2685  0DA7  3A80               	xorlw	128
  2686  0DA8  3C80               	sublw	128
  2687  0DA9  1D03               	skipz
  2688  0DAA  2DAD               	goto	u4815
  2689  0DAB  082D               	movf	??_main^(0+384),w
  2690  0DAC  025D               	subwf	main@j^(0+384),w
  2691  0DAD                     u4815:	
  2692  0DAD  1803               	btfsc	3,0
  2693  0DAE  2F6D               	goto	l3829
  2694                           
  2695                           ;main.c: 123: StateSecRemaining = (STATE_PERIODS[i] + DiffInSecond)-j;
  2696  0DAF  1683               	bsf	3,5	;RP0=1, select bank3
  2697  0DB0  27F2  120A  158A   	fcall	PL44	;call to abstracted procedure
  2698  0DB3  00AD               	movwf	??_main^(0+384)
  2699  0DB4  085D               	movf	main@j^(0+384),w
  2700  0DB5  02AD               	subwf	??_main^(0+384),f
  2701  0DB6  0863               	movf	main@DiffInSecond^(0+384),w
  2702  0DB7  072D               	addwf	??_main^(0+384),w
  2703  0DB8  00D0               	movwf	main@StateSecRemaining^(0+384)
  2704                           
  2705                           ;main.c: 124: for (k=0; k<1000; k++) {
  2706  0DB9  01CA               	clrf	main@k^(0+384)
  2707  0DBA  01CB               	clrf	(main@k+1)^(0+384)
  2708  0DBB                     l3703:	
  2709  0DBB  3003               	movlw	3
  2710  0DBC  024B               	subwf	(main@k+1)^(0+384),w
  2711  0DBD  30E8               	movlw	232
  2712  0DBE  1903               	skipnz
  2713  0DBF  024A               	subwf	main@k^(0+384),w
  2714  0DC0  1803               	btfsc	3,0
  2715  0DC1  2E76               	goto	l3785
  2716                           
  2717                           ;main.c: 125: for (l=0; l<2; l++)
  2718  0DC2  01E9               	clrf	main@l^(0+384)
  2719  0DC3  01EA               	clrf	(main@l+1)^(0+384)
  2720  0DC4                     l3709:	
  2721  0DC4  3000               	movlw	0
  2722  0DC5  026A               	subwf	(main@l+1)^(0+384),w
  2723  0DC6  3002               	movlw	2
  2724  0DC7  1903               	skipnz
  2725  0DC8  0269               	subwf	main@l^(0+384),w
  2726  0DC9  1803               	btfsc	3,0
  2727  0DCA  2DE3               	goto	l3719
  2728                           
  2729                           ;main.c: 126: OutForThePorts[l] = STATE_1[i][l];
  2730  0DCB  0868               	movf	main@i^(0+384),w
  2731  0DCC  00AD               	movwf	??_main^(0+384)
  2732  0DCD  303E               	movlw	62
  2733  0DCE  1003               	clrc
  2734  0DCF  0DAD               	rlf	??_main^(0+384),f
  2735  0DD0  072D               	addwf	??_main^(0+384),w
  2736  0DD1  00AE               	movwf	(??_main+1)^(0+384)
  2737  0DD2  0869               	movf	main@l^(0+384),w
  2738  0DD3  072E               	addwf	(??_main+1)^(0+384),w
  2739  0DD4  00AF               	movwf	(??_main+2)^(0+384)
  2740  0DD5  0084               	movwf	4
  2741  0DD6  1383               	bcf	3,7	;select IRP bank0
  2742  0DD7  0800               	movf	0,w
  2743  0DD8  00B0               	movwf	(??_main+3)^(0+384)
  2744  0DD9  0869               	movf	main@l^(0+384),w
  2745  0DDA  3EDF               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  2746  0DDB  0084               	movwf	4
  2747  0DDC  0830               	movf	(??_main+3)^(0+384),w
  2748  0DDD  1783               	bsf	3,7	;select IRP bank3
  2749  0DDE  0080               	movwf	0
  2750  0DDF  0AE9               	incf	main@l^(0+384),f
  2751  0DE0  1903               	skipnz
  2752  0DE1  0AEA               	incf	(main@l+1)^(0+384),f
  2753  0DE2  2DC4               	goto	l3709
  2754  0DE3                     l3719:	
  2755                           
  2756                           ;main.c: 127: if (StateSecRemaining <= 4) {
  2757  0DE3  3005               	movlw	5
  2758  0DE4  0250               	subwf	main@StateSecRemaining^(0+384),w
  2759  0DE5  1803               	skipnc
  2760  0DE6  2DFD               	goto	l3735
  2761                           
  2762                           ;main.c: 128: if (State2OnOffCounter < 700) {
  2763  0DE7  3002               	movlw	2
  2764  0DE8  0252               	subwf	(main@State2OnOffCounter+1)^(0+384),w
  2765  0DE9  30BC               	movlw	188
  2766  0DEA  1903               	skipnz
  2767  0DEB  0251               	subwf	main@State2OnOffCounter^(0+384),w
  2768  0DEC  1803               	skipnc
  2769  0DED  2E0C               	goto	l3747
  2770                           
  2771                           ;main.c: 129: for (l=0; l<2; l++)
  2772  0DEE  01E9               	clrf	main@l^(0+384)
  2773  0DEF  01EA               	clrf	(main@l+1)^(0+384)
  2774  0DF0                     l3725:	
  2775  0DF0  3000               	movlw	0
  2776  0DF1  026A               	subwf	(main@l+1)^(0+384),w
  2777  0DF2  3002               	movlw	2
  2778  0DF3  1903               	skipnz
  2779  0DF4  0269               	subwf	main@l^(0+384),w
  2780  0DF5  1803               	btfsc	3,0
  2781  0DF6  2E0C               	goto	l3747
  2782                           
  2783                           ;main.c: 130: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2784  0DF7  27A4  120A  158A   	fcall	PL6	;call to abstracted procedure
  2785  0DFA  1903               	skipnz
  2786  0DFB  0AEA               	incf	(main@l+1)^(0+384),f
  2787  0DFC  2DF0               	goto	l3725
  2788  0DFD                     l3735:	
  2789                           
  2790                           ;main.c: 133: for (l=0; l<2; l++)
  2791  0DFD  01E9               	clrf	main@l^(0+384)
  2792  0DFE  01EA               	clrf	(main@l+1)^(0+384)
  2793  0DFF                     l3737:	
  2794  0DFF  3000               	movlw	0
  2795  0E00  026A               	subwf	(main@l+1)^(0+384),w
  2796  0E01  3002               	movlw	2
  2797  0E02  1903               	skipnz
  2798  0E03  0269               	subwf	main@l^(0+384),w
  2799  0E04  1803               	btfsc	3,0
  2800  0E05  2E0C               	goto	l3747
  2801                           
  2802                           ;main.c: 134: OutForThePorts[l] = (OutForThePorts[l] | STATE_2[i][l]);
  2803  0E06  27A4  120A  158A   	fcall	PL6	;call to abstracted procedure
  2804  0E09  1903               	skipnz
  2805  0E0A  0AEA               	incf	(main@l+1)^(0+384),f
  2806  0E0B  2DFF               	goto	l3737
  2807  0E0C                     l3747:	
  2808                           
  2809                           ;main.c: 136: }
  2810                           ;main.c: 137: if (StateSecRemaining <= 3) {
  2811  0E0C  3004               	movlw	4
  2812  0E0D  0250               	subwf	main@StateSecRemaining^(0+384),w
  2813                           
  2814                           ;main.c: 138: if ((StateAudioNormalOnOffCounter) < 500) {
  2815  0E0E  3001               	movlw	1
  2816  0E0F  1803               	skipnc
  2817  0E10  2E26               	goto	L6
  2818  0E11  0254               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+384),w
  2819  0E12  30F4               	movlw	244
  2820  0E13  1903               	skipnz
  2821  0E14  0253               	subwf	main@StateAudioNormalOnOffCounter^(0+384),w
  2822  0E15  1803               	skipnc
  2823  0E16  2E22               	goto	l715
  2824                           
  2825                           ;main.c: 139: if ((AUDIO.v[i/4]>>(i%4)) & 0x01)
  2826  0E17  27CF  120A  158A   	fcall	PL10	;call to abstracted procedure
  2827  0E1A  2E1D               	goto	u4634
  2828  0E1B                     u4635:	
  2829  0E1B  1003               	clrc
  2830  0E1C  0CAE               	rrf	(??_main+1)^(0+384),f
  2831  0E1D                     u4634:	
  2832  0E1D  3EFF               	addlw	-1
  2833  0E1E  1D03               	skipz
  2834  0E1F  2E1B               	goto	u4635
  2835  0E20                     L5:	
  2836  0E20  182E               	btfsc	(??_main+1)^(0+384),0
  2837  0E21  2E36               	goto	l3753
  2838  0E22                     l715:	
  2839                           
  2840                           ;main.c: 141: else
  2841                           ;main.c: 142: RC0 = 0;
  2842  0E22  1283               	bcf	3,5	;RP0=0, select bank0
  2843  0E23  1303               	bcf	3,6	;RP1=0, select bank0
  2844  0E24  1007               	bcf	7,0	;volatile
  2845  0E25  2E39               	goto	l3761
  2846  0E26                     L6:	
  2847                           ;main.c: 146: if ((StateAudioSplOnOffCounter) < 500) {
  2848                           
  2849  0E26  0256               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+384),w
  2850  0E27  30F4               	movlw	244
  2851  0E28  1903               	skipnz
  2852  0E29  0255               	subwf	main@StateAudioSplOnOffCounter^(0+384),w
  2853  0E2A  1803               	skipnc
  2854  0E2B  2E22               	goto	l715
  2855                           
  2856                           ;main.c: 147: if ((AUDIO.v[i/4]>>(i%4)) & 0x01)
  2857  0E2C  27CF  120A  158A   	fcall	PL10	;call to abstracted procedure
  2858  0E2F  2E32               	goto	u4664
  2859  0E30                     u4665:	
  2860  0E30  1003               	clrc
  2861  0E31  0CAE               	rrf	(??_main+1)^(0+384),f
  2862  0E32                     u4664:	
  2863  0E32  3EFF               	addlw	-1
  2864  0E33  1D03               	skipz
  2865  0E34  2E30               	goto	u4665
  2866  0E35  2E20               	goto	L5
  2867  0E36                     l3753:	
  2868                           
  2869                           ;main.c: 140: RC0 = 1;
  2870  0E36  1283               	bcf	3,5	;RP0=0, select bank0
  2871  0E37  1303               	bcf	3,6	;RP1=0, select bank0
  2872  0E38  1407               	bsf	7,0	;volatile
  2873  0E39                     l3761:	
  2874                           
  2875                           ;main.c: 153: }
  2876                           ;main.c: 154: State2OnOffCounter++;
  2877  0E39  1683               	bsf	3,5	;RP0=1, select bank3
  2878  0E3A  1703               	bsf	3,6	;RP1=1, select bank3
  2879  0E3B  0AD1               	incf	main@State2OnOffCounter^(0+384),f
  2880  0E3C  1903               	skipnz
  2881  0E3D  0AD2               	incf	(main@State2OnOffCounter+1)^(0+384),f
  2882                           
  2883                           ;main.c: 155: StateAudioNormalOnOffCounter++;
  2884  0E3E  0AD3               	incf	main@StateAudioNormalOnOffCounter^(0+384),f
  2885  0E3F  1903               	skipnz
  2886  0E40  0AD4               	incf	(main@StateAudioNormalOnOffCounter+1)^(0+384),f
  2887                           
  2888                           ;main.c: 156: StateAudioSplOnOffCounter++;
  2889  0E41  0AD5               	incf	main@StateAudioSplOnOffCounter^(0+384),f
  2890  0E42  1903               	skipnz
  2891  0E43  0AD6               	incf	(main@StateAudioSplOnOffCounter+1)^(0+384),f
  2892                           
  2893                           ;main.c: 157: if (State2OnOffCounter >= (700
  2894                           ;main.c: 158: + 300))
  2895  0E44  3003               	movlw	3
  2896  0E45  0252               	subwf	(main@State2OnOffCounter+1)^(0+384),w
  2897  0E46  30E8               	movlw	232
  2898  0E47  1903               	skipnz
  2899  0E48  0251               	subwf	main@State2OnOffCounter^(0+384),w
  2900  0E49  1C03               	skipc
  2901  0E4A  2E4D               	goto	l3767
  2902                           
  2903                           ;main.c: 159: State2OnOffCounter=0;
  2904  0E4B  01D1               	clrf	main@State2OnOffCounter^(0+384)
  2905  0E4C  01D2               	clrf	(main@State2OnOffCounter+1)^(0+384)
  2906  0E4D                     l3767:	
  2907                           
  2908                           ;main.c: 160: if (StateAudioNormalOnOffCounter >= (500
  2909                           ;main.c: 161: + 500))
  2910  0E4D  3003               	movlw	3
  2911  0E4E  0254               	subwf	(main@StateAudioNormalOnOffCounter+1)^(0+384),w
  2912  0E4F  30E8               	movlw	232
  2913  0E50  1903               	skipnz
  2914  0E51  0253               	subwf	main@StateAudioNormalOnOffCounter^(0+384),w
  2915  0E52  1C03               	skipc
  2916  0E53  2E56               	goto	l3771
  2917                           
  2918                           ;main.c: 162: StateAudioNormalOnOffCounter=0;
  2919  0E54  01D3               	clrf	main@StateAudioNormalOnOffCounter^(0+384)
  2920  0E55  01D4               	clrf	(main@StateAudioNormalOnOffCounter+1)^(0+384)
  2921  0E56                     l3771:	
  2922                           
  2923                           ;main.c: 163: if (StateAudioSplOnOffCounter >= (500
  2924                           ;main.c: 164: + 500))
  2925  0E56  3003               	movlw	3
  2926  0E57  0256               	subwf	(main@StateAudioSplOnOffCounter+1)^(0+384),w
  2927  0E58  30E8               	movlw	232
  2928  0E59  1903               	skipnz
  2929  0E5A  0255               	subwf	main@StateAudioSplOnOffCounter^(0+384),w
  2930  0E5B  1C03               	skipc
  2931  0E5C  2E5F               	goto	l3775
  2932                           
  2933                           ;main.c: 165: StateAudioSplOnOffCounter=0;
  2934  0E5D  01D5               	clrf	main@StateAudioSplOnOffCounter^(0+384)
  2935  0E5E  01D6               	clrf	(main@StateAudioSplOnOffCounter+1)^(0+384)
  2936  0E5F                     l3775:	
  2937                           
  2938                           ;main.c: 167: PORTA = OutForThePorts[0];
  2939  0E5F  085F               	movf	main@OutForThePorts^(0+384),w
  2940  0E60  1283               	bcf	3,5	;RP0=0, select bank0
  2941  0E61  1303               	bcf	3,6	;RP1=0, select bank0
  2942  0E62  0085               	movwf	5	;volatile
  2943                           
  2944                           ;main.c: 168: PORTB = OutForThePorts[1];
  2945  0E63  1683               	bsf	3,5	;RP0=1, select bank3
  2946  0E64  1703               	bsf	3,6	;RP1=1, select bank3
  2947  0E65  0860               	movf	(main@OutForThePorts^(0+384)+1),w
  2948  0E66  1283               	bcf	3,5	;RP0=0, select bank0
  2949  0E67  1303               	bcf	3,6	;RP1=0, select bank0
  2950  0E68  0086               	movwf	6	;volatile
  2951                           
  2952                           ;main.c: 170: DelayInUSec(AdjustMilliSecond);
  2953  0E69  1683               	bsf	3,5	;RP0=1, select bank3
  2954  0E6A  1703               	bsf	3,6	;RP1=1, select bank3
  2955  0E6B  085E               	movf	main@AdjustMilliSecond^(0+384),w
  2956  0E6C  160A  118A  2537  120A  158A  	fcall	_DelayInUSec
  2957  0E71  1703               	bsf	3,6	;RP1=1, select bank3
  2958  0E72  0ACA               	incf	main@k^(0+384),f
  2959  0E73  1903               	skipnz
  2960  0E74  0ACB               	incf	(main@k+1)^(0+384),f
  2961  0E75  2DBB               	goto	l3703
  2962  0E76                     l3785:	
  2963                           
  2964                           ;main.c: 171: }
  2965                           ;main.c: 172: if (j==0) {
  2966  0E76  085D               	movf	main@j^(0+384),w
  2967  0E77  1D03               	btfss	3,2
  2968  0E78  2ED5               	goto	l3799
  2969                           
  2970                           ;main.c: 173: DiffInSecond = STATE_PERIODS[i]/3;
  2971  0E79  3003               	movlw	3
  2972  0E7A  1303               	bcf	3,6	;RP1=0, select bank1
  2973  0E7B  00A0               	movwf	___lbdiv@divisor^(0+128)
  2974  0E7C  27F2               	fcall	PL44	;call to abstracted procedure
  2975  0E7D  120A  158A  2012  120A  158A  	fcall	___lbdiv
  2976  0E82  1703               	bsf	3,6	;RP1=1, select bank3
  2977  0E83  00E3               	movwf	main@DiffInSecond^(0+384)
  2978                           
  2979                           ;main.c: 175: if (GetAbs(SecError)<GetAbs(DiffInSecond))
  2980  0E84  27EA               	fcall	PL36	;call to abstracted procedure
  2981  0E85  160A  118A  252F  120A  158A  	fcall	_GetAbs
  2982  0E8A  0820               	movf	?_GetAbs^(0+128),w
  2983  0E8B  1703               	bsf	3,6	;RP1=1, select bank3
  2984  0E8C  00AD               	movwf	??_main^(0+384)
  2985  0E8D  1303               	bcf	3,6	;RP1=0, select bank1
  2986  0E8E  0821               	movf	(?_GetAbs+1)^(0+128),w
  2987  0E8F  1703               	bsf	3,6	;RP1=1, select bank3
  2988  0E90  00AE               	movwf	(??_main^(0+384)+1)
  2989  0E91  0863               	movf	main@DiffInSecond^(0+384),w
  2990  0E92  1303               	bcf	3,6	;RP1=0, select bank1
  2991  0E93  00A0               	movwf	GetAbs@a^(0+128)
  2992  0E94  01A1               	clrf	(GetAbs@a+1)^(0+128)
  2993  0E95  1BA0               	btfsc	GetAbs@a^(0+128),7
  2994  0E96  03A1               	decf	(GetAbs@a+1)^(0+128),f
  2995  0E97  160A  118A  252F  120A  158A  	fcall	_GetAbs
  2996  0E9C  1703               	bsf	3,6	;RP1=1, select bank3
  2997  0E9D  082E               	movf	(??_main+1)^(0+384),w
  2998  0E9E  3A80               	xorlw	128
  2999  0E9F  00AF               	movwf	(??_main+2)^(0+384)
  3000  0EA0  1303               	bcf	3,6	;RP1=0, select bank1
  3001  0EA1  0821               	movf	(?_GetAbs+1)^(0+128),w
  3002  0EA2  3A80               	xorlw	128
  3003  0EA3  1703               	bsf	3,6	;RP1=1, select bank3
  3004  0EA4  022F               	subwf	(??_main+2)^(0+384),w
  3005  0EA5  1D03               	skipz
  3006  0EA6  2EAB               	goto	u4725
  3007  0EA7  1303               	bcf	3,6	;RP1=0, select bank1
  3008  0EA8  0820               	movf	?_GetAbs^(0+128),w
  3009  0EA9  1703               	bsf	3,6	;RP1=1, select bank3
  3010  0EAA  022D               	subwf	??_main^(0+384),w
  3011  0EAB                     u4725:	
  3012  0EAB  1803               	skipnc
  3013  0EAC  2EB8               	goto	l3793
  3014                           
  3015                           ;main.c: 176: DiffInSecond = GetAbs(SecError);
  3016  0EAD  1683               	bsf	3,5	;RP0=1, select bank3
  3017  0EAE  1703               	bsf	3,6	;RP1=1, select bank3
  3018  0EAF  27EA               	fcall	PL36	;call to abstracted procedure
  3019  0EB0  160A  118A  252F  120A  158A  	fcall	_GetAbs
  3020  0EB5  0820               	movf	?_GetAbs^(0+128),w
  3021  0EB6  1703               	bsf	3,6	;RP1=1, select bank3
  3022  0EB7  00E3               	movwf	main@DiffInSecond^(0+384)
  3023  0EB8                     l3793:	
  3024                           
  3025                           ;main.c: 177: if (SecError>0)
  3026  0EB8  1683               	bsf	3,5	;RP0=1, select bank3
  3027  0EB9  1703               	bsf	3,6	;RP1=1, select bank3
  3028  0EBA  0862               	movf	(main@SecError+1)^(0+384),w
  3029  0EBB  3A80               	xorlw	128
  3030  0EBC  00FF               	movwf	127
  3031  0EBD  3080               	movlw	128
  3032  0EBE  027F               	subwf	127,w
  3033  0EBF  1D03               	skipz
  3034  0EC0  2EC3               	goto	u4735
  3035  0EC1  3001               	movlw	1
  3036  0EC2  0261               	subwf	main@SecError^(0+384),w
  3037  0EC3                     u4735:	
  3038  0EC3  1C03               	skipc
  3039  0EC4  2EC9               	goto	l3797
  3040                           
  3041                           ;main.c: 178: DiffInSecond = -DiffInSecond;
  3042  0EC5  1683               	bsf	3,5	;RP0=1, select bank3
  3043  0EC6  1703               	bsf	3,6	;RP1=1, select bank3
  3044  0EC7  09E3               	comf	main@DiffInSecond^(0+384),f
  3045  0EC8  0AE3               	incf	main@DiffInSecond^(0+384),f
  3046  0EC9                     l3797:	
  3047                           
  3048                           ;main.c: 179: SecError = SecError+DiffInSecond;
  3049  0EC9  1683               	bsf	3,5	;RP0=1, select bank3
  3050  0ECA  1703               	bsf	3,6	;RP1=1, select bank3
  3051  0ECB  0861               	movf	main@SecError^(0+384),w
  3052  0ECC  0763               	addwf	main@DiffInSecond^(0+384),w
  3053  0ECD  00E1               	movwf	main@SecError^(0+384)
  3054  0ECE  0862               	movf	(main@SecError+1)^(0+384),w
  3055  0ECF  1803               	skipnc
  3056  0ED0  0A62               	incf	(main@SecError+1)^(0+384),w
  3057  0ED1  3E00               	addlw	0
  3058  0ED2  1BE3               	btfsc	main@DiffInSecond^(0+384),7
  3059  0ED3  3EFF               	addlw	255
  3060  0ED4  00E2               	movwf	(main@SecError+1)^(0+384)
  3061  0ED5                     l3799:	
  3062                           
  3063                           ;main.c: 180: }
  3064                           ;main.c: 198: S++;
  3065  0ED5  1283               	bcf	3,5	;RP0=0, select bank2
  3066  0ED6  0AEB               	incf	107,f	;volatile
  3067  0ED7  1903               	skipnz
  3068  0ED8  0AEC               	incf	108,f	;volatile
  3069  0ED9  1903               	skipnz
  3070  0EDA  0AED               	incf	109,f	;volatile
  3071  0EDB  1903               	skipnz
  3072  0EDC  0AEE               	incf	110,f	;volatile
  3073                           
  3074                           ;main.c: 199: if (S>=86400)
  3075  0EDD  1BEE               	btfsc	110,7	;volatile
  3076  0EDE  2EF2               	goto	l3803
  3077  0EDF  086E               	movf	110,w	;volatile
  3078  0EE0  1D03               	btfss	3,2
  3079  0EE1  2EEE               	goto	l3801
  3080  0EE2  3001               	movlw	1
  3081  0EE3  026D               	subwf	109,w	;volatile
  3082  0EE4  1D03               	skipz
  3083  0EE5  2EEC               	goto	u4743
  3084  0EE6  3051               	movlw	81
  3085  0EE7  026C               	subwf	108,w	;volatile
  3086  0EE8  1D03               	skipz
  3087  0EE9  2EEC               	goto	u4743
  3088  0EEA  3080               	movlw	128
  3089  0EEB  026B               	subwf	107,w	;volatile
  3090  0EEC                     u4743:	
  3091  0EEC  1C03               	btfss	3,0
  3092  0EED  2EF2               	goto	l3803
  3093  0EEE                     l3801:	
  3094                           
  3095                           ;main.c: 200: S=0;
  3096  0EEE  01EB               	clrf	107	;volatile
  3097  0EEF  01EC               	clrf	108	;volatile
  3098  0EF0  01ED               	clrf	109	;volatile
  3099  0EF1  01EE               	clrf	110	;volatile
  3100  0EF2                     l3803:	
  3101                           
  3102                           ;main.c: 201: if ((S%LoadRTCAfterXSec) == 0)
  3103  0EF2  1683               	bsf	3,5	;RP0=1, select bank3
  3104  0EF3  0841               	movf	main@LoadRTCAfterXSec^(0+384),w
  3105  0EF4  1303               	bcf	3,6	;RP1=0, select bank1
  3106  0EF5  00A0               	movwf	___almod@divisor^(0+128)
  3107  0EF6  1703               	bsf	3,6	;RP1=1, select bank3
  3108  0EF7  0842               	movf	(main@LoadRTCAfterXSec+1)^(0+384),w
  3109  0EF8  1303               	bcf	3,6	;RP1=0, select bank1
  3110  0EF9  00A1               	movwf	(___almod@divisor^(0+128)+1)
  3111  0EFA  01A2               	clrf	(___almod@divisor^(0+128)+2)
  3112  0EFB  01A3               	clrf	(___almod@divisor^(0+128)+3)
  3113  0EFC  1283               	bcf	3,5	;RP0=0, select bank2
  3114  0EFD  1703               	bsf	3,6	;RP1=1, select bank2
  3115  0EFE  086E               	movf	110,w	;volatile
  3116  0EFF  1683               	bsf	3,5	;RP0=1, select bank1
  3117  0F00  1303               	bcf	3,6	;RP1=0, select bank1
  3118  0F01  00A7               	movwf	(___almod@dividend+3)^(0+128)
  3119  0F02  1283               	bcf	3,5	;RP0=0, select bank2
  3120  0F03  1703               	bsf	3,6	;RP1=1, select bank2
  3121  0F04  086D               	movf	109,w	;volatile
  3122  0F05  1683               	bsf	3,5	;RP0=1, select bank1
  3123  0F06  1303               	bcf	3,6	;RP1=0, select bank1
  3124  0F07  00A6               	movwf	(___almod@dividend+2)^(0+128)
  3125  0F08  1283               	bcf	3,5	;RP0=0, select bank2
  3126  0F09  1703               	bsf	3,6	;RP1=1, select bank2
  3127  0F0A  086C               	movf	108,w	;volatile
  3128  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
  3129  0F0C  1303               	bcf	3,6	;RP1=0, select bank1
  3130  0F0D  00A5               	movwf	(___almod@dividend+1)^(0+128)
  3131  0F0E  1283               	bcf	3,5	;RP0=0, select bank2
  3132  0F0F  1703               	bsf	3,6	;RP1=1, select bank2
  3133  0F10  086B               	movf	107,w	;volatile
  3134  0F11  1683               	bsf	3,5	;RP0=1, select bank1
  3135  0F12  1303               	bcf	3,6	;RP1=0, select bank1
  3136  0F13  00A4               	movwf	___almod@dividend^(0+128)
  3137  0F14  160A  118A  2585  120A  158A  	fcall	___almod
  3138  0F19  0823               	movf	(?___almod+3)^(0+128),w
  3139  0F1A  0422               	iorwf	(?___almod+2)^(0+128),w
  3140  0F1B  0421               	iorwf	(?___almod+1)^(0+128),w
  3141  0F1C  0420               	iorwf	?___almod^(0+128),w
  3142                           
  3143                           ;main.c: 202: FLAGS.bits.b0 = 1;
  3144  0F1D  1703               	bsf	3,6	;RP1=1, select bank3
  3145  0F1E  1903               	btfsc	3,2
  3146  0F1F  146C               	bsf	_FLAGS^(0+384),0	;volatile
  3147                           
  3148                           ;main.c: 203: if (S < 36000) {
  3149  0F20  1283               	bcf	3,5	;RP0=0, select bank2
  3150  0F21  1703               	bsf	3,6	;RP1=1, select bank2
  3151  0F22  1BEE               	btfsc	110,7	;volatile
  3152  0F23  2F32               	goto	l3809
  3153  0F24  086E               	movf	110,w	;volatile
  3154  0F25  1D03               	btfss	3,2
  3155  0F26  2F44               	goto	l3813
  3156  0F27  086D               	movf	109,w	;volatile
  3157  0F28  1D03               	btfss	3,2
  3158  0F29  2F44               	goto	l3813
  3159  0F2A  308C               	movlw	140
  3160  0F2B  026C               	subwf	108,w	;volatile
  3161  0F2C  1D03               	skipz
  3162  0F2D  2F30               	goto	u4763
  3163  0F2E  30A0               	movlw	160
  3164  0F2F  026B               	subwf	107,w	;volatile
  3165  0F30                     u4763:	
  3166  0F30  1803               	btfsc	3,0
  3167  0F31  2F44               	goto	l3813
  3168  0F32                     l3809:	
  3169                           
  3170                           ;main.c: 204: FLAGS.bits.b3 = 0;
  3171  0F32  1683               	bsf	3,5	;RP0=1, select bank3
  3172  0F33  11EC               	bcf	_FLAGS^(0+384),3	;volatile
  3173                           
  3174                           ;main.c: 205: WriteLongInt(1, 16, 1, 0, 0);
  3175  0F34  3010               	movlw	16
  3176  0F35  1303               	bcf	3,6	;RP1=0, select bank1
  3177  0F36  00B5               	movwf	WriteLongInt@x^(0+128)
  3178  0F37  3001               	movlw	1
  3179  0F38  01B6               	clrf	WriteLongInt@Val^(0+128)
  3180  0F39  0AB6               	incf	WriteLongInt@Val^(0+128),f
  3181  0F3A  01B7               	clrf	(WriteLongInt@Val+1)^(0+128)
  3182  0F3B  01B8               	clrf	(WriteLongInt@Val+2)^(0+128)
  3183  0F3C  01B9               	clrf	(WriteLongInt@Val+3)^(0+128)
  3184  0F3D  01BA               	clrf	WriteLongInt@size^(0+128)
  3185  0F3E  01BB               	clrf	WriteLongInt@Sign^(0+128)
  3186  0F3F  120A  118A  23D2  120A  158A  	fcall	_WriteLongInt
  3187  0F44                     l3813:	
  3188                           
  3189                           ;main.c: 206: }
  3190                           ;main.c: 207: if (FLAGS.bits.b3){
  3191  0F44  1683               	bsf	3,5	;RP0=1, select bank3
  3192  0F45  1703               	bsf	3,6	;RP1=1, select bank3
  3193  0F46  1DEC               	btfss	_FLAGS^(0+384),3	;volatile
  3194  0F47  2F4C               	goto	l3817
  3195                           
  3196                           ;main.c: 208: RC1 = 0;
  3197                           
  3198                           ;main.c: 209: FLAGS.bits.b2 = 0;
  3199  0F48  27F9  120A  158A   	fcall	PL48	;call to abstracted procedure
  3200                           
  3201                           ;main.c: 210: } else if (S >= 36000) {
  3202  0F4B  2F62               	goto	l3821
  3203  0F4C                     l3817:	
  3204  0F4C  1283               	bcf	3,5	;RP0=0, select bank2
  3205  0F4D  1BEE               	btfsc	110,7	;volatile
  3206  0F4E  2F62               	goto	l3821
  3207  0F4F  086E               	movf	110,w	;volatile
  3208  0F50  1D03               	btfss	3,2
  3209  0F51  2F5D               	goto	l3819
  3210  0F52  086D               	movf	109,w	;volatile
  3211  0F53  1D03               	btfss	3,2
  3212  0F54  2F5D               	goto	l3819
  3213  0F55  308C               	movlw	140
  3214  0F56  026C               	subwf	108,w	;volatile
  3215  0F57  1D03               	skipz
  3216  0F58  2F5B               	goto	u4783
  3217  0F59  30A0               	movlw	160
  3218  0F5A  026B               	subwf	107,w	;volatile
  3219  0F5B                     u4783:	
  3220  0F5B  1C03               	btfss	3,0
  3221  0F5C  2F62               	goto	l3821
  3222  0F5D                     l3819:	
  3223                           
  3224                           ;main.c: 211: RC1 = 1;
  3225  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  3226  0F5E  1487               	bsf	7,1	;volatile
  3227                           
  3228                           ;main.c: 212: FLAGS.bits.b2 = 1;
  3229  0F5F  1683               	bsf	3,5	;RP0=1, select bank3
  3230  0F60  1703               	bsf	3,6	;RP1=1, select bank3
  3231  0F61  156C               	bsf	_FLAGS^(0+384),2	;volatile
  3232  0F62                     l3821:	
  3233                           
  3234                           ;main.c: 213: }
  3235                           ;main.c: 214: NumberOfSystemCyclesSinceLastRTC++;
  3236  0F62  1683               	bsf	3,5	;RP0=1, select bank3
  3237  0F63  0AC3               	incf	main@NumberOfSystemCyclesSinceLastRTC^(0+384),f
  3238  0F64  1903               	skipnz
  3239  0F65  0AC4               	incf	(main@NumberOfSystemCyclesSinceLastRTC+1)^(0+384),f
  3240                           
  3241                           ;main.c: 215: if (FLAGS.bits.b2)
  3242  0F66  1D6C               	btfss	_FLAGS^(0+384),2	;volatile
  3243  0F67  2F6B               	goto	l735
  3244                           
  3245                           ;main.c: 216: GPS_On_Time_Counter++;
  3246  0F68  0AC5               	incf	main@GPS_On_Time_Counter^(0+384),f
  3247  0F69  1903               	skipnz
  3248  0F6A  0AC6               	incf	(main@GPS_On_Time_Counter+1)^(0+384),f
  3249  0F6B                     l735:	
  3250  0F6B  0ADD               	incf	main@j^(0+384),f
  3251  0F6C  2D98               	goto	l3827
  3252  0F6D                     l3829:	
  3253  0F6D  1683               	bsf	3,5	;RP0=1, select bank3
  3254  0F6E  1703               	bsf	3,6	;RP1=1, select bank3
  3255  0F6F  0AE8               	incf	main@i^(0+384),f
  3256  0F70  2D8E               	goto	l3831
  3257  0F71                     __end_of_main:	
  3258  0F71                     PL2:	
  3259  0F71  1283               	bcf	3,5	;RP0=0, select bank2
  3260  0F72  086E               	movf	110,w	;volatile
  3261  0F73  1683               	bsf	3,5	;RP0=1, select bank3
  3262  0F74  00E7               	movwf	(main@TimeSinceTheStartOfCycle+3)^(0+384)
  3263  0F75  1283               	bcf	3,5	;RP0=0, select bank2
  3264  0F76  086D               	movf	109,w	;volatile
  3265  0F77  1683               	bsf	3,5	;RP0=1, select bank3
  3266  0F78  00E6               	movwf	(main@TimeSinceTheStartOfCycle+2)^(0+384)
  3267  0F79  1283               	bcf	3,5	;RP0=0, select bank2
  3268  0F7A  086C               	movf	108,w	;volatile
  3269  0F7B  1683               	bsf	3,5	;RP0=1, select bank3
  3270  0F7C  00E5               	movwf	(main@TimeSinceTheStartOfCycle+1)^(0+384)
  3271  0F7D  1283               	bcf	3,5	;RP0=0, select bank2
  3272  0F7E  086B               	movf	107,w	;volatile
  3273  0F7F  1683               	bsf	3,5	;RP0=1, select bank3
  3274  0F80  00E4               	movwf	main@TimeSinceTheStartOfCycle^(0+384)
  3275  0F81  086D               	movf	_PREV_CYCLE_TYPE^(0+384),w	;volatile
  3276  0F82  00AD               	movwf	??_main^(0+384)
  3277  0F83  3001               	movlw	1
  3278  0F84  1003               	clrc
  3279  0F85                     L3:	
  3280  0F85  0DAD               	rlf	??_main^(0+384),f
  3281  0F86  3EFF               	addlw	-1
  3282  0F87  1003               	clrc
  3283  0F88  1D03               	skipz
  3284  0F89  2F85               	goto	L3
  3285  0F8A  0D2D               	rlf	??_main^(0+384),w
  3286  0F8B  3E4C               	addlw	76
  3287  0F8C  0084               	movwf	4
  3288  0F8D  0800               	movf	0,w
  3289  0F8E  00AE               	movwf	(??_main+1)^(0+384)
  3290  0F8F  0A84               	incf	4,f
  3291  0F90  0800               	movf	0,w
  3292  0F91  00AF               	movwf	((??_main+1)^(0+384)+1)
  3293  0F92  0A84               	incf	4,f
  3294  0F93  0800               	movf	0,w
  3295  0F94  00B0               	movwf	((??_main+1)^(0+384)+2)
  3296  0F95  0A84               	incf	4,f
  3297  0F96  0800               	movf	0,w
  3298  0F97  00B1               	movwf	((??_main+1)^(0+384)+3)
  3299  0F98  082E               	movf	(??_main+1)^(0+384),w
  3300  0F99  02E4               	subwf	main@TimeSinceTheStartOfCycle^(0+384),f
  3301  0F9A  082F               	movf	(??_main+2)^(0+384),w
  3302  0F9B  1C03               	skipc
  3303  0F9C  0F2F               	incfsz	(??_main+2)^(0+384),w
  3304  0F9D  02E5               	subwf	(main@TimeSinceTheStartOfCycle+1)^(0+384),f
  3305  0F9E  0830               	movf	(??_main+3)^(0+384),w
  3306  0F9F  1C03               	skipc
  3307  0FA0  0F30               	incfsz	(??_main+3)^(0+384),w
  3308  0FA1  02E6               	subwf	(main@TimeSinceTheStartOfCycle+2)^(0+384),f
  3309  0FA2  0831               	movf	(??_main+4)^(0+384),w
  3310  0FA3  0008               	return
  3311  0FA4                     __end_ofPL2:	
  3312  0FA4                     PL6:	
  3313  0FA4  0868               	movf	main@i^(0+384),w
  3314  0FA5  00AD               	movwf	??_main^(0+384)
  3315  0FA6  3010               	movlw	16
  3316  0FA7  1003               	clrc
  3317  0FA8  0DAD               	rlf	??_main^(0+384),f
  3318  0FA9  072D               	addwf	??_main^(0+384),w
  3319  0FAA  00AE               	movwf	(??_main+1)^(0+384)
  3320  0FAB  0869               	movf	main@l^(0+384),w
  3321  0FAC  072E               	addwf	(??_main+1)^(0+384),w
  3322  0FAD  00AF               	movwf	(??_main+2)^(0+384)
  3323  0FAE  0084               	movwf	4
  3324  0FAF  1783               	bsf	3,7	;select IRP bank2
  3325  0FB0  0800               	movf	0,w
  3326  0FB1  00B0               	movwf	(??_main+3)^(0+384)
  3327  0FB2  0869               	movf	main@l^(0+384),w
  3328  0FB3  3EDF               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  3329  0FB4  0084               	movwf	4
  3330  0FB5  0800               	movf	0,w
  3331  0FB6  0430               	iorwf	(??_main+3)^(0+384),w
  3332  0FB7  00B1               	movwf	(??_main+4)^(0+384)
  3333  0FB8  0869               	movf	main@l^(0+384),w
  3334  0FB9  3EDF               	addlw	(low (main@OutForThePorts| (0+256)))& (0+255)
  3335  0FBA  0084               	movwf	4
  3336  0FBB  0831               	movf	(??_main+4)^(0+384),w
  3337  0FBC  0080               	movwf	0
  3338  0FBD  0AE9               	incf	main@l^(0+384),f
  3339  0FBE  0008               	return
  3340  0FBF                     __end_ofPL6:	
  3341  0FBF                     PL8:	
  3342  0FBF  082F               	movf	(?_ReadRTCAsSec+3)^(0+128),w
  3343  0FC0  1703               	bsf	3,6	;RP1=1, select bank3
  3344  0FC1  00E7               	movwf	(main@TimeSinceTheStartOfCycle+3)^(0+384)
  3345  0FC2  1303               	bcf	3,6	;RP1=0, select bank1
  3346  0FC3  082E               	movf	(?_ReadRTCAsSec+2)^(0+128),w
  3347  0FC4  1703               	bsf	3,6	;RP1=1, select bank3
  3348  0FC5  00E6               	movwf	(main@TimeSinceTheStartOfCycle+2)^(0+384)
  3349  0FC6  1303               	bcf	3,6	;RP1=0, select bank1
  3350  0FC7  082D               	movf	(?_ReadRTCAsSec+1)^(0+128),w
  3351  0FC8  1703               	bsf	3,6	;RP1=1, select bank3
  3352  0FC9  00E5               	movwf	(main@TimeSinceTheStartOfCycle+1)^(0+384)
  3353  0FCA  1303               	bcf	3,6	;RP1=0, select bank1
  3354  0FCB  082C               	movf	?_ReadRTCAsSec^(0+128),w
  3355  0FCC  1703               	bsf	3,6	;RP1=1, select bank3
  3356  0FCD  00E4               	movwf	main@TimeSinceTheStartOfCycle^(0+384)
  3357  0FCE  0008               	return
  3358  0FCF                     __end_ofPL8:	
  3359  0FCF                     PL10:	
  3360  0FCF  0868               	movf	main@i^(0+384),w
  3361  0FD0  00AD               	movwf	??_main^(0+384)
  3362  0FD1  1003               	clrc
  3363  0FD2  0CAD               	rrf	??_main^(0+384),f
  3364  0FD3  1003               	clrc
  3365  0FD4  0CAD               	rrf	??_main^(0+384),f
  3366  0FD5  082D               	movf	??_main^(0+384),w
  3367  0FD6  3E67               	addlw	103
  3368  0FD7  0084               	movwf	4
  3369  0FD8  1783               	bsf	3,7	;select IRP bank2
  3370  0FD9  0800               	movf	0,w
  3371  0FDA  00AE               	movwf	(??_main+1)^(0+384)
  3372  0FDB  0868               	movf	main@i^(0+384),w
  3373  0FDC  3903               	andlw	3
  3374  0FDD  3E01               	addlw	1
  3375  0FDE  0008               	return
  3376  0FDF                     __end_ofPL10:	
  3377  0FDF                     PL20:	
  3378  0FDF  1003               	clrc
  3379  0FE0  0D6B               	rlf	_CYCLE_TYPE^(0+384),w	;volatile
  3380  0FE1  3E7A               	addlw	122
  3381  0FE2  0084               	movwf	4
  3382  0FE3  1383               	bcf	3,7	;select IRP bank0
  3383  0FE4  0800               	movf	0,w
  3384  0FE5  00AD               	movwf	??_main^(0+384)
  3385  0FE6  0A84               	incf	4,f
  3386  0FE7  0800               	movf	0,w
  3387  0FE8  00AE               	movwf	(??_main^(0+384)+1)
  3388  0FE9  0008               	return
  3389  0FEA                     __end_ofPL20:	
  3390  0FEA                     PL36:	
  3391  0FEA  0862               	movf	(main@SecError+1)^(0+384),w
  3392  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
  3393  0FEC  00A1               	movwf	(GetAbs@a+1)^(0+128)
  3394  0FED  1703               	bsf	3,6	;RP1=1, select bank3
  3395  0FEE  0861               	movf	main@SecError^(0+384),w
  3396  0FEF  1303               	bcf	3,6	;RP1=0, select bank1
  3397  0FF0  00A0               	movwf	GetAbs@a^(0+128)
  3398  0FF1  0008               	return
  3399  0FF2                     __end_ofPL36:	
  3400  0FF2                     PL44:	
  3401  0FF2  1703               	bsf	3,6	;RP1=1, select bank3
  3402  0FF3  0868               	movf	main@i^(0+384),w
  3403  0FF4  3E20               	addlw	32
  3404  0FF5  0084               	movwf	4
  3405  0FF6  1383               	bcf	3,7	;select IRP bank0
  3406  0FF7  0800               	movf	0,w
  3407  0FF8  0008               	return
  3408  0FF9                     __end_ofPL44:	
  3409  0FF9                     PL48:	
  3410  0FF9  1283               	bcf	3,5	;RP0=0, select bank0
  3411  0FFA  1303               	bcf	3,6	;RP1=0, select bank0
  3412  0FFB  1087               	bcf	7,1	;volatile
  3413  0FFC  1683               	bsf	3,5	;RP0=1, select bank3
  3414  0FFD  1703               	bsf	3,6	;RP1=1, select bank3
  3415  0FFE  116C               	bcf	_FLAGS^(0+384),2	;volatile
  3416  0FFF  0008               	return
  3417  1000                     __end_ofPL48:	
  3418                           
  3419                           	psect	text1
  3420  0004                     __ptext1:	
  3421 ;; *************** function ___lwtoft *****************
  3422 ;; Defined at:
  3423 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwtoft.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  c               2    8[BANK1 ] unsigned int 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;		None
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  3    8[BANK1 ] float 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2, status,0, pclath, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 300/900
  3434 ;;		On exit  : 300/100
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:      BANK1   BANK3  BANK2l
  3437 ;;      Params:         3       0       0
  3438 ;;      Locals:         0       0       0
  3439 ;;      Temps:          0       0       0
  3440 ;;      Totals:         3       0       0
  3441 ;;Total ram usage:        3 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    1
  3444 ;; This function calls:
  3445 ;;		___ftpack
  3446 ;; This function is called by:
  3447 ;;		_main
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           
  3452                           ;psect for function ___lwtoft
  3453  0004                     ___lwtoft:	
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  3457  0004  0828               	movf	___lwtoft@c^(0+128),w
  3458  0005  00A0               	movwf	___ftpack@arg^(0+128)
  3459  0006  0829               	movf	(___lwtoft@c+1)^(0+128),w
  3460  0007  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  3461  0008  308E               	movlw	142
  3462  0009  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  3463  000A  00A3               	movwf	___ftpack@exp^(0+128)
  3464  000B  01A4               	clrf	___ftpack@sign^(0+128)
  3465  000C  2320               	fcall	___ftpack
  3466  000D  0820               	movf	?___ftpack^(0+128),w
  3467  000E  00A8               	movwf	?___lwtoft^(0+128)
  3468  000F  0821               	movf	(?___ftpack+1)^(0+128),w
  3469  0010  00A9               	movwf	(?___lwtoft+1)^(0+128)
  3470  0011  0822               	movf	(?___ftpack+2)^(0+128),w
  3471  0012  00AA               	movwf	(?___lwtoft+2)^(0+128)
  3472  0013  0008               	return
  3473  0014                     __end_of___lwtoft:	
  3474  0014                     __ptext31:	
  3475 ;; *************** function _AdjustSec *****************
  3476 ;; Defined at:
  3477 ;;		line 57 in file "libs/gsk_RTC_GPS.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  TimeDiff        1    wreg     char 
  3480 ;; Auto vars:     Size  Location     Type
  3481 ;;  TimeDiff        1   20[BANK3 ] char 
  3482 ;;  tRIMVAL         1   21[BANK3 ] char 
  3483 ;;  Sign            1    0        unsigned char 
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 300/B00
  3490 ;;		On exit  : 300/100
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:      BANK1   BANK3  BANK2l
  3493 ;;      Params:         0       0       0
  3494 ;;      Locals:         0       5       0
  3495 ;;      Temps:          0       0       0
  3496 ;;      Totals:         0       5       0
  3497 ;;Total ram usage:        5 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    4
  3500 ;; This function calls:
  3501 ;;		_GetOSCTRIM
  3502 ;;		_SetOSCTRIM
  3503 ;;		___abtoft
  3504 ;;		___ftmul
  3505 ;;		___fttol
  3506 ;;		_round
  3507 ;; This function is called by:
  3508 ;;		_main
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           
  3513                           ;psect for function _AdjustSec
  3514  0014                     _AdjustSec:	
  3515                           
  3516                           ;incstack = 0
  3517                           ; Regs used in _AdjustSec: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3518                           ;AdjustSec@TimeDiff stored from wreg
  3519  0014  00A4               	movwf	AdjustSec@TimeDiff^(0+384)
  3520                           
  3521                           ;gsk_RTC_GPS.c: 58: int8_t tRIMVAL;
  3522                           ;gsk_RTC_GPS.c: 59: char Sign;
  3523                           ;gsk_RTC_GPS.c: 60: tRIMVAL = (round(TimeDiff*11.3778));
  3524  0015  2376  120A  118A   	fcall	___abtoft
  3525  0018  0828               	movf	?___abtoft^(0+128),w
  3526  0019  00C8               	movwf	___ftmul@f2^(0+128)
  3527  001A  0829               	movf	(?___abtoft+1)^(0+128),w
  3528  001B  00C9               	movwf	(___ftmul@f2+1)^(0+128)
  3529  001C  082A               	movf	(?___abtoft+2)^(0+128),w
  3530  001D  00CA               	movwf	(___ftmul@f2+2)^(0+128)
  3531  001E  300B               	movlw	11
  3532  001F  00C5               	movwf	___ftmul@f1^(0+128)
  3533  0020  3036               	movlw	54
  3534  0021  00C6               	movwf	(___ftmul@f1+1)^(0+128)
  3535  0022  3041               	movlw	65
  3536  0023  00C7               	movwf	(___ftmul@f1+2)^(0+128)
  3537  0024  22B3  120A  118A   	fcall	___ftmul
  3538  0027  0845               	movf	?___ftmul^(0+128),w
  3539  0028  1703               	bsf	3,6	;RP1=1, select bank3
  3540  0029  009B               	movwf	round@x^(0+384)
  3541  002A  1303               	bcf	3,6	;RP1=0, select bank1
  3542  002B  0846               	movf	(?___ftmul+1)^(0+128),w
  3543  002C  1703               	bsf	3,6	;RP1=1, select bank3
  3544  002D  009C               	movwf	(round@x+1)^(0+384)
  3545  002E  1303               	bcf	3,6	;RP1=0, select bank1
  3546  002F  0847               	movf	(?___ftmul+2)^(0+128),w
  3547  0030  1703               	bsf	3,6	;RP1=1, select bank3
  3548  0031  009D               	movwf	(round@x+2)^(0+384)
  3549  0032  20CE  120A  118A   	fcall	_round
  3550  0035  081B               	movf	?_round^(0+384),w
  3551  0036  00A1               	movwf	_AdjustSec$1777^(0+384)
  3552  0037  081C               	movf	(?_round+1)^(0+384),w
  3553  0038  00A2               	movwf	(_AdjustSec$1777+1)^(0+384)
  3554  0039  081D               	movf	(?_round+2)^(0+384),w
  3555  003A  00A3               	movwf	(_AdjustSec$1777+2)^(0+384)
  3556                           
  3557                           ;gsk_RTC_GPS.c: 58: int8_t tRIMVAL;
  3558                           ;gsk_RTC_GPS.c: 59: char Sign;
  3559                           ;gsk_RTC_GPS.c: 60: tRIMVAL = (round(TimeDiff*11.3778));
  3560  003B  0821               	movf	_AdjustSec$1777^(0+384),w
  3561  003C  1303               	bcf	3,6	;RP1=0, select bank1
  3562  003D  00E0               	movwf	___fttol@f1^(0+128)
  3563  003E  1703               	bsf	3,6	;RP1=1, select bank3
  3564  003F  0822               	movf	(_AdjustSec$1777+1)^(0+384),w
  3565  0040  1303               	bcf	3,6	;RP1=0, select bank1
  3566  0041  00E1               	movwf	(___fttol@f1+1)^(0+128)
  3567  0042  1703               	bsf	3,6	;RP1=1, select bank3
  3568  0043  0823               	movf	(_AdjustSec$1777+2)^(0+384),w
  3569  0044  1303               	bcf	3,6	;RP1=0, select bank1
  3570  0045  00E2               	movwf	(___fttol@f1+2)^(0+128)
  3571  0046  2258  120A  118A   	fcall	___fttol
  3572  0049  0860               	movf	?___fttol^(0+128),w
  3573  004A  1703               	bsf	3,6	;RP1=1, select bank3
  3574  004B  00A5               	movwf	AdjustSec@tRIMVAL^(0+384)
  3575                           
  3576                           ;gsk_RTC_GPS.c: 61: SetOSCTRIM(GetOSCTRIM () + tRIMVAL);
  3577  004C  2362  120A  118A   	fcall	_GetOSCTRIM
  3578  004F  1703               	bsf	3,6	;RP1=1, select bank3
  3579  0050  0725               	addwf	AdjustSec@tRIMVAL^(0+384),w
  3580  0051  2BBA               	ljmp	_SetOSCTRIM
  3581  0052                     __end_of_AdjustSec:	
  3582  0052                     __ptext16:	
  3583 ;; *************** function _UART_Init *****************
  3584 ;; Defined at:
  3585 ;;		line 3 in file "libs/gsk_usart.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  baudrate        4   17[BANK3 ] const long 
  3588 ;; Auto vars:     Size  Location     Type
  3589 ;;  x               2   27[BANK3 ] unsigned int 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      unsigned char 
  3592 ;; Registers used:
  3593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 300/B00
  3596 ;;		On exit  : 300/100
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:      BANK1   BANK3  BANK2l
  3599 ;;      Params:         0       4       0
  3600 ;;      Locals:         0       8       0
  3601 ;;      Temps:          0       0       0
  3602 ;;      Totals:         0      12       0
  3603 ;;Total ram usage:       12 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    4
  3606 ;; This function calls:
  3607 ;;		___altoft
  3608 ;;		___ftadd
  3609 ;;		___ftdiv
  3610 ;;		___ftmul
  3611 ;;		___fttol
  3612 ;;		_round
  3613 ;; This function is called by:
  3614 ;;		_main
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           
  3619                           ;psect for function _UART_Init
  3620  0052                     _UART_Init:	
  3621                           
  3622                           ;gsk_usart.c: 4: uint16_t x;
  3623                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  3624                           
  3625                           ;incstack = 0
  3626                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3627  0052  3024               	movlw	36
  3628  0053  1303               	bcf	3,6	;RP1=0, select bank1
  3629  0054  00B9               	movwf	___ftdiv@f1^(0+128)
  3630  0055  3074               	movlw	116
  3631  0056  00BA               	movwf	(___ftdiv@f1+1)^(0+128)
  3632  0057  304A               	movlw	74
  3633  0058  00BB               	movwf	(___ftdiv@f1+2)^(0+128)
  3634  0059  1703               	bsf	3,6	;RP1=1, select bank3
  3635  005A  0824               	movf	(UART_Init@baudrate+3)^(0+384),w
  3636  005B  1303               	bcf	3,6	;RP1=0, select bank1
  3637  005C  00B3               	movwf	(___altoft@c+3)^(0+128)
  3638  005D  1703               	bsf	3,6	;RP1=1, select bank3
  3639  005E  0823               	movf	(UART_Init@baudrate+2)^(0+384),w
  3640  005F  1303               	bcf	3,6	;RP1=0, select bank1
  3641  0060  00B2               	movwf	(___altoft@c+2)^(0+128)
  3642  0061  1703               	bsf	3,6	;RP1=1, select bank3
  3643  0062  0822               	movf	(UART_Init@baudrate+1)^(0+384),w
  3644  0063  1303               	bcf	3,6	;RP1=0, select bank1
  3645  0064  00B1               	movwf	(___altoft@c+1)^(0+128)
  3646  0065  1703               	bsf	3,6	;RP1=1, select bank3
  3647  0066  0821               	movf	UART_Init@baudrate^(0+384),w
  3648  0067  1303               	bcf	3,6	;RP1=0, select bank1
  3649  0068  00B0               	movwf	___altoft@c^(0+128)
  3650  0069  2229  120A  118A   	fcall	___altoft
  3651  006C  27E8  120A  118A   	fcall	PL42	;call to abstracted procedure
  3652  006F  3080               	movlw	128
  3653  0070  01C5               	clrf	___ftmul@f1^(0+128)
  3654  0071  00C6               	movwf	(___ftmul@f1+1)^(0+128)
  3655  0072  3040               	movlw	64
  3656  0073  00C7               	movwf	(___ftmul@f1+2)^(0+128)
  3657  0074  22B3  120A  118A   	fcall	___ftmul
  3658  0077  0845               	movf	?___ftmul^(0+128),w
  3659  0078  00B6               	movwf	___ftdiv@f2^(0+128)
  3660  0079  0846               	movf	(?___ftmul+1)^(0+128),w
  3661  007A  00B7               	movwf	(___ftdiv@f2+1)^(0+128)
  3662  007B  0847               	movf	(?___ftmul+2)^(0+128),w
  3663  007C  00B8               	movwf	(___ftdiv@f2+2)^(0+128)
  3664  007D  2744  120A  118A   	fcall	___ftdiv
  3665  0080  0836               	movf	?___ftdiv^(0+128),w
  3666  0081  1703               	bsf	3,6	;RP1=1, select bank3
  3667  0082  00A5               	movwf	_UART_Init$1778^(0+384)
  3668  0083  1303               	bcf	3,6	;RP1=0, select bank1
  3669  0084  0837               	movf	(?___ftdiv+1)^(0+128),w
  3670  0085  1703               	bsf	3,6	;RP1=1, select bank3
  3671  0086  00A6               	movwf	(_UART_Init$1778+1)^(0+384)
  3672  0087  1303               	bcf	3,6	;RP1=0, select bank1
  3673  0088  0838               	movf	(?___ftdiv+2)^(0+128),w
  3674  0089  1703               	bsf	3,6	;RP1=1, select bank3
  3675  008A  00A7               	movwf	(_UART_Init$1778+2)^(0+384)
  3676                           
  3677                           ;gsk_usart.c: 4: uint16_t x;
  3678                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  3679  008B  0825               	movf	_UART_Init$1778^(0+384),w
  3680  008C  009B               	movwf	round@x^(0+384)
  3681  008D  0826               	movf	(_UART_Init$1778+1)^(0+384),w
  3682  008E  009C               	movwf	(round@x+1)^(0+384)
  3683  008F  0827               	movf	(_UART_Init$1778+2)^(0+384),w
  3684  0090  009D               	movwf	(round@x+2)^(0+384)
  3685  0091  20CE  120A  118A   	fcall	_round
  3686  0094  081B               	movf	?_round^(0+384),w
  3687  0095  00A8               	movwf	_UART_Init$1779^(0+384)
  3688  0096  081C               	movf	(?_round+1)^(0+384),w
  3689  0097  00A9               	movwf	(_UART_Init$1779+1)^(0+384)
  3690  0098  081D               	movf	(?_round+2)^(0+384),w
  3691  0099  00AA               	movwf	(_UART_Init$1779+2)^(0+384)
  3692                           
  3693                           ;gsk_usart.c: 4: uint16_t x;
  3694                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  3695  009A  0828               	movf	_UART_Init$1779^(0+384),w
  3696  009B  1303               	bcf	3,6	;RP1=0, select bank1
  3697  009C  00D7               	movwf	___ftadd@f2^(0+128)
  3698  009D  1703               	bsf	3,6	;RP1=1, select bank3
  3699  009E  0829               	movf	(_UART_Init$1779+1)^(0+384),w
  3700  009F  1303               	bcf	3,6	;RP1=0, select bank1
  3701  00A0  00D8               	movwf	(___ftadd@f2+1)^(0+128)
  3702  00A1  1703               	bsf	3,6	;RP1=1, select bank3
  3703  00A2  082A               	movf	(_UART_Init$1779+2)^(0+384),w
  3704  00A3  1303               	bcf	3,6	;RP1=0, select bank1
  3705  00A4  00D9               	movwf	(___ftadd@f2+2)^(0+128)
  3706  00A5  3080               	movlw	128
  3707  00A6  01D4               	clrf	___ftadd@f1^(0+128)
  3708  00A7  00D5               	movwf	(___ftadd@f1+1)^(0+128)
  3709  00A8  30BF               	movlw	191
  3710  00A9  00D6               	movwf	(___ftadd@f1+2)^(0+128)
  3711  00AA  2169  120A  118A   	fcall	___ftadd
  3712  00AD  0854               	movf	?___ftadd^(0+128),w
  3713  00AE  00E0               	movwf	___fttol@f1^(0+128)
  3714  00AF  0855               	movf	(?___ftadd+1)^(0+128),w
  3715  00B0  00E1               	movwf	(___fttol@f1+1)^(0+128)
  3716  00B1  0856               	movf	(?___ftadd+2)^(0+128),w
  3717  00B2  00E2               	movwf	(___fttol@f1+2)^(0+128)
  3718  00B3  2258               	fcall	___fttol
  3719  00B4  0861               	movf	(?___fttol^(0+128)+1),w
  3720  00B5  1703               	bsf	3,6	;RP1=1, select bank3
  3721  00B6  00AC               	movwf	(UART_Init@x+1)^(0+384)
  3722  00B7  1303               	bcf	3,6	;RP1=0, select bank1
  3723  00B8  0860               	movf	?___fttol^(0+128),w
  3724  00B9  1703               	bsf	3,6	;RP1=1, select bank3
  3725  00BA  00AB               	movwf	UART_Init@x^(0+384)
  3726                           
  3727                           ;gsk_usart.c: 6: SPBRG = x;
  3728  00BB  1303               	bcf	3,6	;RP1=0, select bank1
  3729  00BC  0099               	movwf	25	;volatile
  3730                           
  3731                           ;gsk_usart.c: 7: SPBRGH = (x>>8);
  3732  00BD  1703               	bsf	3,6	;RP1=1, select bank3
  3733  00BE  082C               	movf	(UART_Init@x^(0+384)+1),w
  3734  00BF  1303               	bcf	3,6	;RP1=0, select bank1
  3735  00C0  009A               	movwf	26	;volatile
  3736                           
  3737                           ;gsk_usart.c: 8: BRGH = 1;
  3738  00C1  1518               	bsf	24,2	;volatile
  3739                           
  3740                           ;gsk_usart.c: 9: BRG16 = 1;
  3741  00C2  1703               	bsf	3,6	;RP1=1, select bank3
  3742  00C3  1587               	bsf	7,3	;volatile
  3743                           
  3744                           ;gsk_usart.c: 10: CREN = 1;
  3745  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  3746  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  3747  00C6  1618               	bsf	24,4	;volatile
  3748                           
  3749                           ;gsk_usart.c: 11: SYNC = 0;
  3750  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  3751  00C8  1218               	bcf	24,4	;volatile
  3752                           
  3753                           ;gsk_usart.c: 12: SPEN = 1;
  3754  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  3755  00CA  1798               	bsf	24,7	;volatile
  3756                           
  3757                           ;gsk_usart.c: 15: TXEN = 1;
  3758  00CB  1683               	bsf	3,5	;RP0=1, select bank1
  3759  00CC  1698               	bsf	24,5	;volatile
  3760  00CD  0008               	return
  3761  00CE                     __end_of_UART_Init:	
  3762  00CE                     __ptext32:	
  3763 ;; *************** function _round *****************
  3764 ;; Defined at:
  3765 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\round.c"
  3766 ;; Parameters:    Size  Location     Type
  3767 ;;  x               3   11[BANK3 ] void 
  3768 ;; Auto vars:     Size  Location     Type
  3769 ;;  f               3   14[BANK3 ] void 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  3   11[BANK3 ] void 
  3772 ;; Registers used:
  3773 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 300/B00
  3776 ;;		On exit  : 300/300
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:      BANK1   BANK3  BANK2l
  3779 ;;      Params:         0       3       0
  3780 ;;      Locals:         0       3       0
  3781 ;;      Temps:          0       0       0
  3782 ;;      Totals:         0       6       0
  3783 ;;Total ram usage:        6 bytes
  3784 ;; Hardware stack levels used:    1
  3785 ;; Hardware stack levels required when called:    3
  3786 ;; This function calls:
  3787 ;;		___ftadd
  3788 ;;		___ftsub
  3789 ;;		_trunc
  3790 ;; This function is called by:
  3791 ;;		_AdjustSec
  3792 ;;		_UART_Init
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _round
  3798  00CE                     _round:	
  3799                           
  3800                           ;incstack = 0
  3801                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3802  00CE  27B8  120A  118A   	fcall	PL16	;call to abstracted procedure
  3803  00D1  2125  120A  118A   	fcall	_trunc
  3804  00D4  1303               	bcf	3,6	;RP1=0, select bank1
  3805  00D5  086D               	movf	?_trunc^(0+128),w
  3806  00D6  1703               	bsf	3,6	;RP1=1, select bank3
  3807  00D7  0095               	movwf	___ftsub@f2^(0+384)
  3808  00D8  1303               	bcf	3,6	;RP1=0, select bank1
  3809  00D9  086E               	movf	(?_trunc+1)^(0+128),w
  3810  00DA  1703               	bsf	3,6	;RP1=1, select bank3
  3811  00DB  0096               	movwf	(___ftsub@f2+1)^(0+384)
  3812  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  3813  00DD  086F               	movf	(?_trunc+2)^(0+128),w
  3814  00DE  1703               	bsf	3,6	;RP1=1, select bank3
  3815  00DF  0097               	movwf	(___ftsub@f2+2)^(0+384)
  3816  00E0  081B               	movf	round@x^(0+384),w
  3817  00E1  0098               	movwf	___ftsub@f1^(0+384)
  3818  00E2  081C               	movf	(round@x+1)^(0+384),w
  3819  00E3  0099               	movwf	(___ftsub@f1+1)^(0+384)
  3820  00E4  081D               	movf	(round@x+2)^(0+384),w
  3821  00E5  009A               	movwf	(___ftsub@f1+2)^(0+384)
  3822  00E6  238F  120A  118A   	fcall	___ftsub
  3823  00E9  0815               	movf	?___ftsub^(0+384),w
  3824  00EA  009E               	movwf	round@f^(0+384)
  3825  00EB  0816               	movf	(?___ftsub+1)^(0+384),w
  3826  00EC  009F               	movwf	(round@f+1)^(0+384)
  3827  00ED  0817               	movf	(?___ftsub+2)^(0+384),w
  3828  00EE  00A0               	movwf	(round@f+2)^(0+384)
  3829  00EF  081E               	movf	round@f^(0+384),w
  3830  00F0  1303               	bcf	3,6	;RP1=0, select bank1
  3831  00F1  00D4               	movwf	___ftadd@f1^(0+128)
  3832  00F2  1703               	bsf	3,6	;RP1=1, select bank3
  3833  00F3  081F               	movf	(round@f+1)^(0+384),w
  3834  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  3835  00F5  00D5               	movwf	(___ftadd@f1+1)^(0+128)
  3836  00F6  1703               	bsf	3,6	;RP1=1, select bank3
  3837  00F7  0820               	movf	(round@f+2)^(0+384),w
  3838  00F8  1303               	bcf	3,6	;RP1=0, select bank1
  3839  00F9  00D6               	movwf	(___ftadd@f1+2)^(0+128)
  3840  00FA  1703               	bsf	3,6	;RP1=1, select bank3
  3841  00FB  081B               	movf	round@x^(0+384),w
  3842  00FC  1303               	bcf	3,6	;RP1=0, select bank1
  3843  00FD  00D7               	movwf	___ftadd@f2^(0+128)
  3844  00FE  1703               	bsf	3,6	;RP1=1, select bank3
  3845  00FF  081C               	movf	(round@x+1)^(0+384),w
  3846  0100  1303               	bcf	3,6	;RP1=0, select bank1
  3847  0101  00D8               	movwf	(___ftadd@f2+1)^(0+128)
  3848  0102  1703               	bsf	3,6	;RP1=1, select bank3
  3849  0103  081D               	movf	(round@x+2)^(0+384),w
  3850  0104  1303               	bcf	3,6	;RP1=0, select bank1
  3851  0105  00D9               	movwf	(___ftadd@f2+2)^(0+128)
  3852  0106  2169  120A  118A   	fcall	___ftadd
  3853  0109  0854               	movf	?___ftadd^(0+128),w
  3854  010A  1703               	bsf	3,6	;RP1=1, select bank3
  3855  010B  009B               	movwf	round@x^(0+384)
  3856  010C  1303               	bcf	3,6	;RP1=0, select bank1
  3857  010D  0855               	movf	(?___ftadd+1)^(0+128),w
  3858  010E  1703               	bsf	3,6	;RP1=1, select bank3
  3859  010F  009C               	movwf	(round@x+1)^(0+384)
  3860  0110  1303               	bcf	3,6	;RP1=0, select bank1
  3861  0111  0856               	movf	(?___ftadd+2)^(0+128),w
  3862  0112  1703               	bsf	3,6	;RP1=1, select bank3
  3863  0113  009D               	movwf	(round@x+2)^(0+384)
  3864  0114  27B8  120A  118A   	fcall	PL16	;call to abstracted procedure
  3865  0117  2125               	fcall	_trunc
  3866  0118  1303               	bcf	3,6	;RP1=0, select bank1
  3867  0119  086D               	movf	?_trunc^(0+128),w
  3868  011A  1703               	bsf	3,6	;RP1=1, select bank3
  3869  011B  009B               	movwf	?_round^(0+384)
  3870  011C  1303               	bcf	3,6	;RP1=0, select bank1
  3871  011D  086E               	movf	(?_trunc+1)^(0+128),w
  3872  011E  1703               	bsf	3,6	;RP1=1, select bank3
  3873  011F  009C               	movwf	(?_round+1)^(0+384)
  3874  0120  1303               	bcf	3,6	;RP1=0, select bank1
  3875  0121  086F               	movf	(?_trunc+2)^(0+128),w
  3876  0122  1703               	bsf	3,6	;RP1=1, select bank3
  3877  0123  009D               	movwf	(?_round+2)^(0+384)
  3878  0124  0008               	return
  3879  0125                     __end_of_round:	
  3880  0125                     __ptext33:	
  3881 ;; *************** function _trunc *****************
  3882 ;; Defined at:
  3883 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\trunc.c"
  3884 ;; Parameters:    Size  Location     Type
  3885 ;;  x               3   77[BANK1 ] void 
  3886 ;; Auto vars:     Size  Location     Type
  3887 ;;  i               3    0[BANK3 ] void 
  3888 ;;  expon           2    3[BANK3 ] int 
  3889 ;; Return value:  Size  Location     Type
  3890 ;;                  3   77[BANK1 ] int 
  3891 ;; Registers used:
  3892 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3893 ;; Tracked objects:
  3894 ;;		On entry : 300/900
  3895 ;;		On exit  : 100/100
  3896 ;;		Unchanged: 0/0
  3897 ;; Data sizes:      BANK1   BANK3  BANK2l
  3898 ;;      Params:         3       0       0
  3899 ;;      Locals:         0       5       0
  3900 ;;      Temps:          0       0       0
  3901 ;;      Totals:         3       5       0
  3902 ;;Total ram usage:        8 bytes
  3903 ;; Hardware stack levels used:    1
  3904 ;; Hardware stack levels required when called:    2
  3905 ;; This function calls:
  3906 ;;		___altoft
  3907 ;;		___fttol
  3908 ;;		_frexp
  3909 ;; This function is called by:
  3910 ;;		_round
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           
  3915                           ;psect for function _trunc
  3916  0125                     _trunc:	
  3917                           
  3918                           ;incstack = 0
  3919                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3920  0125  086D               	movf	trunc@x^(0+128),w
  3921  0126  00A0               	movwf	frexp@value^(0+128)
  3922  0127  086E               	movf	(trunc@x+1)^(0+128),w
  3923  0128  00A1               	movwf	(frexp@value+1)^(0+128)
  3924  0129  086F               	movf	(trunc@x+2)^(0+128),w
  3925  012A  00A2               	movwf	(frexp@value+2)^(0+128)
  3926  012B  3093               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  3927  012C  00A3               	movwf	frexp@eptr^(0+128)
  3928  012D  270B  120A  118A   	fcall	_frexp
  3929  0130  1703               	bsf	3,6	;RP1=1, select bank3
  3930  0131  1F94               	btfss	(trunc@expon+1)^(0+384),7
  3931  0132  2938               	goto	l2855
  3932  0133  1303               	bcf	3,6	;RP1=0, select bank1
  3933  0134  01ED               	clrf	?_trunc^(0+128)
  3934  0135  01EE               	clrf	(?_trunc+1)^(0+128)
  3935  0136  01EF               	clrf	(?_trunc+2)^(0+128)
  3936  0137  0008               	return
  3937  0138                     l2855:	
  3938  0138  3000               	movlw	0
  3939  0139  0214               	subwf	(trunc@expon+1)^(0+384),w
  3940  013A  3015               	movlw	21
  3941  013B  1903               	skipnz
  3942  013C  0213               	subwf	trunc@expon^(0+384),w
  3943  013D  1803               	btfsc	3,0
  3944  013E  0008               	return
  3945  013F  1303               	bcf	3,6	;RP1=0, select bank1
  3946  0140  086D               	movf	trunc@x^(0+128),w
  3947  0141  00E0               	movwf	___fttol@f1^(0+128)
  3948  0142  086E               	movf	(trunc@x+1)^(0+128),w
  3949  0143  00E1               	movwf	(___fttol@f1+1)^(0+128)
  3950  0144  086F               	movf	(trunc@x+2)^(0+128),w
  3951  0145  00E2               	movwf	(___fttol@f1+2)^(0+128)
  3952  0146  2258  120A  118A   	fcall	___fttol
  3953  0149  0863               	movf	(?___fttol+3)^(0+128),w
  3954  014A  00B3               	movwf	(___altoft@c+3)^(0+128)
  3955  014B  0862               	movf	(?___fttol+2)^(0+128),w
  3956  014C  00B2               	movwf	(___altoft@c+2)^(0+128)
  3957  014D  0861               	movf	(?___fttol+1)^(0+128),w
  3958  014E  00B1               	movwf	(___altoft@c+1)^(0+128)
  3959  014F  0860               	movf	?___fttol^(0+128),w
  3960  0150  00B0               	movwf	___altoft@c^(0+128)
  3961  0151  2229               	fcall	___altoft
  3962  0152  0830               	movf	?___altoft^(0+128),w
  3963  0153  1703               	bsf	3,6	;RP1=1, select bank3
  3964  0154  0090               	movwf	trunc@i^(0+384)
  3965  0155  1303               	bcf	3,6	;RP1=0, select bank1
  3966  0156  0831               	movf	(?___altoft+1)^(0+128),w
  3967  0157  1703               	bsf	3,6	;RP1=1, select bank3
  3968  0158  0091               	movwf	(trunc@i+1)^(0+384)
  3969  0159  1303               	bcf	3,6	;RP1=0, select bank1
  3970  015A  0832               	movf	(?___altoft+2)^(0+128),w
  3971  015B  1703               	bsf	3,6	;RP1=1, select bank3
  3972  015C  0092               	movwf	(trunc@i+2)^(0+384)
  3973  015D  0810               	movf	trunc@i^(0+384),w
  3974  015E  1303               	bcf	3,6	;RP1=0, select bank1
  3975  015F  00ED               	movwf	?_trunc^(0+128)
  3976  0160  1703               	bsf	3,6	;RP1=1, select bank3
  3977  0161  0811               	movf	(trunc@i+1)^(0+384),w
  3978  0162  1303               	bcf	3,6	;RP1=0, select bank1
  3979  0163  00EE               	movwf	(?_trunc+1)^(0+128)
  3980  0164  1703               	bsf	3,6	;RP1=1, select bank3
  3981  0165  0812               	movf	(trunc@i+2)^(0+384),w
  3982  0166  1303               	bcf	3,6	;RP1=0, select bank1
  3983  0167  00EF               	movwf	(?_trunc+2)^(0+128)
  3984  0168  0008               	return
  3985  0169                     __end_of_trunc:	
  3986  0169                     __ptext38:	
  3987 ;; *************** function ___ftadd *****************
  3988 ;; Defined at:
  3989 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;  f1              3   52[BANK1 ] float 
  3992 ;;  f2              3   55[BANK1 ] float 
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  exp1            1   63[BANK1 ] unsigned char 
  3995 ;;  exp2            1   62[BANK1 ] unsigned char 
  3996 ;;  sign            1   61[BANK1 ] unsigned char 
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  3   52[BANK1 ] float 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, pclath, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 300/900
  4003 ;;		On exit  : 300/100
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:      BANK1   BANK3  BANK2l
  4006 ;;      Params:         6       0       0
  4007 ;;      Locals:         3       0       0
  4008 ;;      Temps:          3       0       0
  4009 ;;      Totals:        12       0       0
  4010 ;;Total ram usage:       12 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    1
  4013 ;; This function calls:
  4014 ;;		___ftpack
  4015 ;; This function is called by:
  4016 ;;		_UART_Init
  4017 ;;		___ftsub
  4018 ;;		_round
  4019 ;; This function uses a non-reentrant model
  4020 ;;
  4021                           
  4022                           
  4023                           ;psect for function ___ftadd
  4024  0169                     ___ftadd:	
  4025                           
  4026                           ;incstack = 0
  4027                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4028  0169  0854               	movf	___ftadd@f1^(0+128),w
  4029  016A  00DA               	movwf	??___ftadd^(0+128)
  4030  016B  0855               	movf	(___ftadd@f1+1)^(0+128),w
  4031  016C  00DB               	movwf	(??___ftadd^(0+128)+1)
  4032  016D  0856               	movf	(___ftadd@f1+2)^(0+128),w
  4033  016E  00DC               	movwf	(??___ftadd^(0+128)+2)
  4034  016F  1003               	clrc
  4035  0170  0D5B               	rlf	(??___ftadd^(0+128)+1),w
  4036  0171  0D5C               	rlf	(??___ftadd^(0+128)+2),w
  4037  0172  00DF               	movwf	___ftadd@exp1^(0+128)
  4038  0173  0857               	movf	___ftadd@f2^(0+128),w
  4039  0174  00DA               	movwf	??___ftadd^(0+128)
  4040  0175  0858               	movf	(___ftadd@f2+1)^(0+128),w
  4041  0176  00DB               	movwf	(??___ftadd^(0+128)+1)
  4042  0177  0859               	movf	(___ftadd@f2+2)^(0+128),w
  4043  0178  00DC               	movwf	(??___ftadd^(0+128)+2)
  4044  0179  1003               	clrc
  4045  017A  0D5B               	rlf	(??___ftadd^(0+128)+1),w
  4046  017B  0D5C               	rlf	(??___ftadd^(0+128)+2),w
  4047  017C  00DE               	movwf	___ftadd@exp2^(0+128)
  4048  017D  085F               	movf	___ftadd@exp1^(0+128),w
  4049  017E  1903               	btfsc	3,2
  4050  017F  298C               	goto	l2623
  4051  0180  085E               	movf	___ftadd@exp2^(0+128),w
  4052  0181  025F               	subwf	___ftadd@exp1^(0+128),w
  4053  0182  085E               	movf	___ftadd@exp2^(0+128),w
  4054  0183  1803               	skipnc
  4055  0184  2994               	goto	L34
  4056  0185  00DA               	movwf	??___ftadd^(0+128)
  4057  0186  085F               	movf	___ftadd@exp1^(0+128),w
  4058  0187  02DA               	subwf	??___ftadd^(0+128),f
  4059  0188  3019               	movlw	25
  4060  0189  025A               	subwf	??___ftadd^(0+128),w
  4061  018A  1C03               	skipc
  4062  018B  2993               	goto	l2627
  4063  018C                     l2623:	
  4064  018C  0857               	movf	___ftadd@f2^(0+128),w
  4065  018D  00D4               	movwf	?___ftadd^(0+128)
  4066  018E  0858               	movf	(___ftadd@f2+1)^(0+128),w
  4067  018F  00D5               	movwf	(?___ftadd+1)^(0+128)
  4068  0190  0859               	movf	(___ftadd@f2+2)^(0+128),w
  4069  0191  00D6               	movwf	(?___ftadd+2)^(0+128)
  4070  0192  0008               	return
  4071  0193                     l2627:	
  4072  0193  085E               	movf	___ftadd@exp2^(0+128),w
  4073  0194                     L34:	
  4074  0194  1903               	btfsc	3,2
  4075  0195  0008               	return
  4076  0196  085F               	movf	___ftadd@exp1^(0+128),w
  4077  0197  025E               	subwf	___ftadd@exp2^(0+128),w
  4078  0198  1803               	skipnc
  4079  0199  29A2               	goto	l2633
  4080  019A  085F               	movf	___ftadd@exp1^(0+128),w
  4081  019B  00DA               	movwf	??___ftadd^(0+128)
  4082  019C  085E               	movf	___ftadd@exp2^(0+128),w
  4083  019D  02DA               	subwf	??___ftadd^(0+128),f
  4084  019E  3019               	movlw	25
  4085  019F  025A               	subwf	??___ftadd^(0+128),w
  4086  01A0  1803               	btfsc	3,0
  4087  01A1  0008               	return
  4088  01A2                     l2633:	
  4089  01A2  3006               	movlw	6
  4090  01A3  00DD               	movwf	___ftadd@sign^(0+128)
  4091  01A4  1BD6               	btfsc	(___ftadd@f1+2)^(0+128),7
  4092  01A5  17DD               	bsf	___ftadd@sign^(0+128),7
  4093  01A6  1BD9               	btfsc	(___ftadd@f2+2)^(0+128),7
  4094  01A7  175D               	bsf	___ftadd@sign^(0+128),6
  4095  01A8  17D5               	bsf	(___ftadd@f1^(0+128)+1),7
  4096  01A9  01D6               	clrf	(___ftadd@f1+2)^(0+128)
  4097  01AA  17D8               	bsf	(___ftadd@f2^(0+128)+1),7
  4098  01AB  01D9               	clrf	(___ftadd@f2+2)^(0+128)
  4099  01AC  085E               	movf	___ftadd@exp2^(0+128),w
  4100  01AD  025F               	subwf	___ftadd@exp1^(0+128),w
  4101  01AE  1803               	skipnc
  4102  01AF  29C9               	goto	l2655
  4103  01B0                     l2645:	
  4104  01B0  1003               	clrc
  4105  01B1  0DD7               	rlf	___ftadd@f2^(0+128),f
  4106  01B2  0DD8               	rlf	(___ftadd@f2+1)^(0+128),f
  4107  01B3  0DD9               	rlf	(___ftadd@f2+2)^(0+128),f
  4108  01B4  03DE               	decf	___ftadd@exp2^(0+128),f
  4109  01B5  085E               	movf	___ftadd@exp2^(0+128),w
  4110  01B6  065F               	xorwf	___ftadd@exp1^(0+128),w
  4111  01B7  1903               	skipnz
  4112  01B8  29C4               	goto	l2653
  4113  01B9  03DD               	decf	___ftadd@sign^(0+128),f
  4114  01BA  085D               	movf	___ftadd@sign^(0+128),w
  4115  01BB  3907               	andlw	7
  4116  01BC  1903               	btfsc	3,2
  4117  01BD  29C4               	goto	l2653
  4118  01BE  29B0               	goto	l2645
  4119  01BF                     l2651:	
  4120  01BF  1003               	clrc
  4121  01C0  0CD6               	rrf	(___ftadd@f1+2)^(0+128),f
  4122  01C1  0CD5               	rrf	(___ftadd@f1+1)^(0+128),f
  4123  01C2  0CD4               	rrf	___ftadd@f1^(0+128),f
  4124  01C3  0ADF               	incf	___ftadd@exp1^(0+128),f
  4125  01C4                     l2653:	
  4126  01C4  085F               	movf	___ftadd@exp1^(0+128),w
  4127  01C5  065E               	xorwf	___ftadd@exp2^(0+128),w
  4128  01C6  1903               	btfsc	3,2
  4129  01C7  29E5               	goto	l1031
  4130  01C8  29BF               	goto	l2651
  4131  01C9                     l2655:	
  4132  01C9  085F               	movf	___ftadd@exp1^(0+128),w
  4133  01CA  025E               	subwf	___ftadd@exp2^(0+128),w
  4134  01CB  1803               	skipnc
  4135  01CC  29E5               	goto	l1031
  4136  01CD                     l2657:	
  4137  01CD  1003               	clrc
  4138  01CE  0DD4               	rlf	___ftadd@f1^(0+128),f
  4139  01CF  0DD5               	rlf	(___ftadd@f1+1)^(0+128),f
  4140  01D0  0DD6               	rlf	(___ftadd@f1+2)^(0+128),f
  4141  01D1  03DF               	decf	___ftadd@exp1^(0+128),f
  4142  01D2  085E               	movf	___ftadd@exp2^(0+128),w
  4143  01D3  065F               	xorwf	___ftadd@exp1^(0+128),w
  4144  01D4  1903               	skipnz
  4145  01D5  29E1               	goto	l2665
  4146  01D6  03DD               	decf	___ftadd@sign^(0+128),f
  4147  01D7  085D               	movf	___ftadd@sign^(0+128),w
  4148  01D8  3907               	andlw	7
  4149  01D9  1903               	btfsc	3,2
  4150  01DA  29E1               	goto	l2665
  4151  01DB  29CD               	goto	l2657
  4152  01DC                     l2663:	
  4153  01DC  1003               	clrc
  4154  01DD  0CD9               	rrf	(___ftadd@f2+2)^(0+128),f
  4155  01DE  0CD8               	rrf	(___ftadd@f2+1)^(0+128),f
  4156  01DF  0CD7               	rrf	___ftadd@f2^(0+128),f
  4157  01E0  0ADE               	incf	___ftadd@exp2^(0+128),f
  4158  01E1                     l2665:	
  4159  01E1  085F               	movf	___ftadd@exp1^(0+128),w
  4160  01E2  065E               	xorwf	___ftadd@exp2^(0+128),w
  4161  01E3  1D03               	skipz
  4162  01E4  29DC               	goto	l2663
  4163  01E5                     l1031:	
  4164  01E5  1FDD               	btfss	___ftadd@sign^(0+128),7
  4165  01E6  29F0               	goto	l2671
  4166  01E7  30FF               	movlw	255
  4167  01E8  06D4               	xorwf	___ftadd@f1^(0+128),f
  4168  01E9  06D5               	xorwf	(___ftadd@f1+1)^(0+128),f
  4169  01EA  06D6               	xorwf	(___ftadd@f1+2)^(0+128),f
  4170  01EB  0AD4               	incf	___ftadd@f1^(0+128),f
  4171  01EC  1903               	skipnz
  4172  01ED  0AD5               	incf	(___ftadd@f1+1)^(0+128),f
  4173  01EE  1903               	skipnz
  4174  01EF  0AD6               	incf	(___ftadd@f1+2)^(0+128),f
  4175  01F0                     l2671:	
  4176  01F0  1F5D               	btfss	___ftadd@sign^(0+128),6
  4177  01F1  29FB               	goto	l2677
  4178  01F2  30FF               	movlw	255
  4179  01F3  06D7               	xorwf	___ftadd@f2^(0+128),f
  4180  01F4  06D8               	xorwf	(___ftadd@f2+1)^(0+128),f
  4181  01F5  06D9               	xorwf	(___ftadd@f2+2)^(0+128),f
  4182  01F6  0AD7               	incf	___ftadd@f2^(0+128),f
  4183  01F7  1903               	skipnz
  4184  01F8  0AD8               	incf	(___ftadd@f2+1)^(0+128),f
  4185  01F9  1903               	skipnz
  4186  01FA  0AD9               	incf	(___ftadd@f2+2)^(0+128),f
  4187  01FB                     l2677:	
  4188  01FB  01DD               	clrf	___ftadd@sign^(0+128)
  4189  01FC  0854               	movf	___ftadd@f1^(0+128),w
  4190  01FD  07D7               	addwf	___ftadd@f2^(0+128),f
  4191  01FE  0855               	movf	(___ftadd@f1+1)^(0+128),w
  4192  01FF  1103               	clrz
  4193  0200  1803               	skipnc
  4194  0201  0A55               	incf	(___ftadd@f1+1)^(0+128),w
  4195  0202  1D03               	btfss	3,2
  4196  0203  07D8               	addwf	(___ftadd@f2+1)^(0+128),f
  4197  0204  0856               	movf	(___ftadd@f1+2)^(0+128),w
  4198  0205  1103               	clrz
  4199  0206  1803               	skipnc
  4200  0207  0A56               	incf	(___ftadd@f1+2)^(0+128),w
  4201  0208  1D03               	btfss	3,2
  4202  0209  07D9               	addwf	(___ftadd@f2+2)^(0+128),f
  4203  020A  1FD9               	btfss	(___ftadd@f2+2)^(0+128),7
  4204  020B  2A17               	goto	l2689
  4205  020C  30FF               	movlw	255
  4206  020D  06D7               	xorwf	___ftadd@f2^(0+128),f
  4207  020E  06D8               	xorwf	(___ftadd@f2+1)^(0+128),f
  4208  020F  06D9               	xorwf	(___ftadd@f2+2)^(0+128),f
  4209  0210  0AD7               	incf	___ftadd@f2^(0+128),f
  4210  0211  1903               	skipnz
  4211  0212  0AD8               	incf	(___ftadd@f2+1)^(0+128),f
  4212  0213  1903               	skipnz
  4213  0214  0AD9               	incf	(___ftadd@f2+2)^(0+128),f
  4214  0215  01DD               	clrf	___ftadd@sign^(0+128)
  4215  0216  0ADD               	incf	___ftadd@sign^(0+128),f
  4216  0217                     l2689:	
  4217  0217  0857               	movf	___ftadd@f2^(0+128),w
  4218  0218  00A0               	movwf	___ftpack@arg^(0+128)
  4219  0219  0858               	movf	(___ftadd@f2+1)^(0+128),w
  4220  021A  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  4221  021B  0859               	movf	(___ftadd@f2+2)^(0+128),w
  4222  021C  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  4223  021D  085F               	movf	___ftadd@exp1^(0+128),w
  4224  021E  00A3               	movwf	___ftpack@exp^(0+128)
  4225  021F  085D               	movf	___ftadd@sign^(0+128),w
  4226  0220  00A4               	movwf	___ftpack@sign^(0+128)
  4227  0221  2320               	fcall	___ftpack
  4228  0222  0820               	movf	?___ftpack^(0+128),w
  4229  0223  00D4               	movwf	?___ftadd^(0+128)
  4230  0224  0821               	movf	(?___ftpack+1)^(0+128),w
  4231  0225  00D5               	movwf	(?___ftadd+1)^(0+128)
  4232  0226  0822               	movf	(?___ftpack+2)^(0+128),w
  4233  0227  00D6               	movwf	(?___ftadd+2)^(0+128)
  4234  0228  0008               	return
  4235  0229                     __end_of___ftadd:	
  4236  0229                     __ptext36:	
  4237 ;; *************** function ___altoft *****************
  4238 ;; Defined at:
  4239 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  c               4   16[BANK1 ] long 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  sign            1   21[BANK1 ] unsigned char 
  4244 ;;  exp             1   20[BANK1 ] unsigned char 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  3   16[BANK1 ] float 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, pclath, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 300/900
  4251 ;;		On exit  : 300/100
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:      BANK1   BANK3  BANK2l
  4254 ;;      Params:         4       0       0
  4255 ;;      Locals:         2       0       0
  4256 ;;      Temps:          0       0       0
  4257 ;;      Totals:         6       0       0
  4258 ;;Total ram usage:        6 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    1
  4261 ;; This function calls:
  4262 ;;		___ftpack
  4263 ;; This function is called by:
  4264 ;;		_UART_Init
  4265 ;;		_main
  4266 ;;		_trunc
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           
  4271                           ;psect for function ___altoft
  4272  0229                     ___altoft:	
  4273  0229  308E               	movlw	142
  4274                           
  4275                           ;incstack = 0
  4276                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  4277  022A  01B5               	clrf	___altoft@sign^(0+128)
  4278  022B  00B4               	movwf	___altoft@exp^(0+128)
  4279  022C  1FB3               	btfss	(___altoft@c+3)^(0+128),7
  4280  022D  2A3B               	goto	l2611
  4281  022E  09B0               	comf	___altoft@c^(0+128),f
  4282  022F  09B1               	comf	(___altoft@c+1)^(0+128),f
  4283  0230  09B2               	comf	(___altoft@c+2)^(0+128),f
  4284  0231  09B3               	comf	(___altoft@c+3)^(0+128),f
  4285  0232  0AB0               	incf	___altoft@c^(0+128),f
  4286  0233  1903               	skipnz
  4287  0234  0AB1               	incf	(___altoft@c+1)^(0+128),f
  4288  0235  1903               	skipnz
  4289  0236  0AB2               	incf	(___altoft@c+2)^(0+128),f
  4290  0237  1903               	skipnz
  4291  0238  0AB3               	incf	(___altoft@c+3)^(0+128),f
  4292  0239  01B5               	clrf	___altoft@sign^(0+128)
  4293  023A  0AB5               	incf	___altoft@sign^(0+128),f
  4294  023B                     l2611:	
  4295  023B  30FF               	movlw	255
  4296  023C  0533               	andwf	(___altoft@c+3)^(0+128),w
  4297  023D  1903               	btfsc	3,2
  4298  023E  2A46               	goto	l2613
  4299  023F  1003               	clrc
  4300  0240  0CB3               	rrf	(___altoft@c+3)^(0+128),f
  4301  0241  0CB2               	rrf	(___altoft@c+2)^(0+128),f
  4302  0242  0CB1               	rrf	(___altoft@c+1)^(0+128),f
  4303  0243  0CB0               	rrf	___altoft@c^(0+128),f
  4304  0244  0AB4               	incf	___altoft@exp^(0+128),f
  4305  0245  2A3B               	goto	l2611
  4306  0246                     l2613:	
  4307  0246  0830               	movf	___altoft@c^(0+128),w
  4308  0247  00A0               	movwf	___ftpack@arg^(0+128)
  4309  0248  0831               	movf	(___altoft@c+1)^(0+128),w
  4310  0249  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  4311  024A  0832               	movf	(___altoft@c+2)^(0+128),w
  4312  024B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  4313  024C  0834               	movf	___altoft@exp^(0+128),w
  4314  024D  00A3               	movwf	___ftpack@exp^(0+128)
  4315  024E  0835               	movf	___altoft@sign^(0+128),w
  4316  024F  00A4               	movwf	___ftpack@sign^(0+128)
  4317  0250  2320               	fcall	___ftpack
  4318  0251  0820               	movf	?___ftpack^(0+128),w
  4319  0252  00B0               	movwf	?___altoft^(0+128)
  4320  0253  0821               	movf	(?___ftpack+1)^(0+128),w
  4321  0254  00B1               	movwf	(?___altoft+1)^(0+128)
  4322  0255  0822               	movf	(?___ftpack+2)^(0+128),w
  4323  0256  00B2               	movwf	(?___altoft+2)^(0+128)
  4324  0257  0008               	return
  4325  0258                     __end_of___altoft:	
  4326  0258                     __ptext35:	
  4327 ;; *************** function ___fttol *****************
  4328 ;; Defined at:
  4329 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  f1              3   64[BANK1 ] float 
  4332 ;; Auto vars:     Size  Location     Type
  4333 ;;  lval            4   72[BANK1 ] unsigned long 
  4334 ;;  exp1            1   76[BANK1 ] unsigned char 
  4335 ;;  sign1           1   71[BANK1 ] unsigned char 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  4   64[BANK1 ] long 
  4338 ;; Registers used:
  4339 ;;		wreg, status,2, status,0
  4340 ;; Tracked objects:
  4341 ;;		On entry : 300/900
  4342 ;;		On exit  : 300/100
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:      BANK1   BANK3  BANK2l
  4345 ;;      Params:         4       0       0
  4346 ;;      Locals:         6       0       0
  4347 ;;      Temps:          3       0       0
  4348 ;;      Totals:        13       0       0
  4349 ;;Total ram usage:       13 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; This function calls:
  4352 ;;		Nothing
  4353 ;; This function is called by:
  4354 ;;		_AdjustSec
  4355 ;;		_UART_Init
  4356 ;;		_main
  4357 ;;		_trunc
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           
  4362                           ;psect for function ___fttol
  4363  0258                     ___fttol:	
  4364                           
  4365                           ;incstack = 0
  4366                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  4367  0258  27EF  120A  118A   	fcall	PL46	;call to abstracted procedure
  4368  025B  1003               	clrc
  4369  025C  0D65               	rlf	(??___fttol^(0+128)+1),w
  4370  025D  0D66               	rlf	(??___fttol^(0+128)+2),w
  4371  025E  00EC               	movwf	___fttol@exp1^(0+128)
  4372  025F  086C               	movf	___fttol@exp1^(0+128),w
  4373  0260  1D03               	btfss	3,2
  4374  0261  2A67               	goto	l2697
  4375  0262                     l2695:	
  4376  0262  01E0               	clrf	?___fttol^(0+128)
  4377  0263  01E1               	clrf	(?___fttol+1)^(0+128)
  4378  0264  01E2               	clrf	(?___fttol+2)^(0+128)
  4379  0265  01E3               	clrf	(?___fttol+3)^(0+128)
  4380  0266  0008               	return
  4381  0267                     l2697:	
  4382  0267  27EF  120A  118A   	fcall	PL46	;call to abstracted procedure
  4383  026A  3017               	movlw	23
  4384  026B                     u2775:	
  4385  026B  1003               	clrc
  4386  026C  0CE6               	rrf	(??___fttol^(0+128)+2),f
  4387  026D  0CE5               	rrf	(??___fttol^(0+128)+1),f
  4388  026E  0CE4               	rrf	??___fttol^(0+128),f
  4389  026F  3EFF               	addlw	-1
  4390  0270  1D03               	skipz
  4391  0271  2A6B               	goto	u2775
  4392  0272  0864               	movf	??___fttol^(0+128),w
  4393  0273  00E7               	movwf	___fttol@sign1^(0+128)
  4394  0274  17E1               	bsf	(___fttol@f1^(0+128)+1),7
  4395  0275  01E2               	clrf	(___fttol@f1+2)^(0+128)
  4396  0276  0860               	movf	___fttol@f1^(0+128),w
  4397  0277  00E8               	movwf	___fttol@lval^(0+128)
  4398  0278  0861               	movf	(___fttol@f1+1)^(0+128),w
  4399  0279  00E9               	movwf	(___fttol@lval^(0+128)+1)
  4400  027A  0862               	movf	(___fttol@f1+2)^(0+128),w
  4401  027B  00EA               	movwf	(___fttol@lval^(0+128)+2)
  4402  027C  308E               	movlw	142
  4403  027D  01EB               	clrf	(___fttol@lval^(0+128)+3)
  4404  027E  02EC               	subwf	___fttol@exp1^(0+128),f
  4405  027F  1FEC               	btfss	___fttol@exp1^(0+128),7
  4406  0280  2A8E               	goto	l2717
  4407  0281  086C               	movf	___fttol@exp1^(0+128),w
  4408  0282  3A80               	xorlw	128
  4409  0283  3E8F               	addlw	143
  4410  0284  1C03               	btfss	3,0
  4411  0285  2A62               	goto	l2695
  4412  0286                     l2713:	
  4413  0286  1003               	clrc
  4414  0287  0CEB               	rrf	(___fttol@lval+3)^(0+128),f
  4415  0288  0CEA               	rrf	(___fttol@lval+2)^(0+128),f
  4416  0289  0CE9               	rrf	(___fttol@lval+1)^(0+128),f
  4417  028A  0CE8               	rrf	___fttol@lval^(0+128),f
  4418  028B  0FEC               	incfsz	___fttol@exp1^(0+128),f
  4419  028C  2A86               	goto	l2713
  4420  028D  2A9C               	goto	l2725
  4421  028E                     l2717:	
  4422  028E  3018               	movlw	24
  4423  028F  026C               	subwf	___fttol@exp1^(0+128),w
  4424  0290  1803               	btfsc	3,0
  4425  0291  2A62               	goto	l2695
  4426  0292                     l2723:	
  4427  0292  086C               	movf	___fttol@exp1^(0+128),w
  4428  0293  1903               	btfsc	3,2
  4429  0294  2A9C               	goto	l2725
  4430  0295  1003               	clrc
  4431  0296  0DE8               	rlf	___fttol@lval^(0+128),f
  4432  0297  0DE9               	rlf	(___fttol@lval+1)^(0+128),f
  4433  0298  0DEA               	rlf	(___fttol@lval+2)^(0+128),f
  4434  0299  0DEB               	rlf	(___fttol@lval+3)^(0+128),f
  4435  029A  03EC               	decf	___fttol@exp1^(0+128),f
  4436  029B  2A92               	goto	l2723
  4437  029C                     l2725:	
  4438  029C  0867               	movf	___fttol@sign1^(0+128),w
  4439  029D  1903               	btfsc	3,2
  4440  029E  2AAA               	goto	l2729
  4441  029F  09E8               	comf	___fttol@lval^(0+128),f
  4442  02A0  09E9               	comf	(___fttol@lval+1)^(0+128),f
  4443  02A1  09EA               	comf	(___fttol@lval+2)^(0+128),f
  4444  02A2  09EB               	comf	(___fttol@lval+3)^(0+128),f
  4445  02A3  0AE8               	incf	___fttol@lval^(0+128),f
  4446  02A4  1903               	skipnz
  4447  02A5  0AE9               	incf	(___fttol@lval+1)^(0+128),f
  4448  02A6  1903               	skipnz
  4449  02A7  0AEA               	incf	(___fttol@lval+2)^(0+128),f
  4450  02A8  1903               	skipnz
  4451  02A9  0AEB               	incf	(___fttol@lval+3)^(0+128),f
  4452  02AA                     l2729:	
  4453  02AA  086B               	movf	(___fttol@lval+3)^(0+128),w
  4454  02AB  00E3               	movwf	(?___fttol+3)^(0+128)
  4455  02AC  086A               	movf	(___fttol@lval+2)^(0+128),w
  4456  02AD  00E2               	movwf	(?___fttol+2)^(0+128)
  4457  02AE  0869               	movf	(___fttol@lval+1)^(0+128),w
  4458  02AF  00E1               	movwf	(?___fttol+1)^(0+128)
  4459  02B0  0868               	movf	___fttol@lval^(0+128),w
  4460  02B1  00E0               	movwf	?___fttol^(0+128)
  4461  02B2  0008               	return
  4462  02B3                     __end_of___fttol:	
  4463  02B3                     __ptext39:	
  4464 ;; *************** function ___ftmul *****************
  4465 ;; Defined at:
  4466 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;  f1              3   37[BANK1 ] float 
  4469 ;;  f2              3   40[BANK1 ] float 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  f3_as_produc    3   47[BANK1 ] unsigned um
  4472 ;;  sign            1   51[BANK1 ] unsigned char 
  4473 ;;  cntr            1   50[BANK1 ] unsigned char 
  4474 ;;  exp             1   46[BANK1 ] unsigned char 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  3   37[BANK1 ] float 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2, status,0, pclath, cstack
  4479 ;; Tracked objects:
  4480 ;;		On entry : 300/900
  4481 ;;		On exit  : 300/100
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:      BANK1   BANK3  BANK2l
  4484 ;;      Params:         6       0       0
  4485 ;;      Locals:         6       0       0
  4486 ;;      Temps:          3       0       0
  4487 ;;      Totals:        15       0       0
  4488 ;;Total ram usage:       15 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    1
  4491 ;; This function calls:
  4492 ;;		___ftpack
  4493 ;; This function is called by:
  4494 ;;		_AdjustSec
  4495 ;;		_UART_Init
  4496 ;;		_main
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           
  4501                           ;psect for function ___ftmul
  4502  02B3                     ___ftmul:	
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4506  02B3  0845               	movf	___ftmul@f1^(0+128),w
  4507  02B4  00CB               	movwf	??___ftmul^(0+128)
  4508  02B5  0846               	movf	(___ftmul@f1+1)^(0+128),w
  4509  02B6  00CC               	movwf	(??___ftmul^(0+128)+1)
  4510  02B7  0847               	movf	(___ftmul@f1+2)^(0+128),w
  4511  02B8  00CD               	movwf	(??___ftmul^(0+128)+2)
  4512  02B9  1003               	clrc
  4513  02BA  0D4C               	rlf	(??___ftmul^(0+128)+1),w
  4514  02BB  0D4D               	rlf	(??___ftmul^(0+128)+2),w
  4515  02BC  00CE               	movwf	___ftmul@exp^(0+128)
  4516  02BD  084E               	movf	___ftmul@exp^(0+128),w
  4517  02BE  1D03               	btfss	3,2
  4518  02BF  2AC4               	goto	l3129
  4519  02C0  01C5               	clrf	?___ftmul^(0+128)
  4520  02C1  01C6               	clrf	(?___ftmul+1)^(0+128)
  4521  02C2  01C7               	clrf	(?___ftmul+2)^(0+128)
  4522  02C3  0008               	return
  4523  02C4                     l3129:	
  4524  02C4  0848               	movf	___ftmul@f2^(0+128),w
  4525  02C5  00CB               	movwf	??___ftmul^(0+128)
  4526  02C6  0849               	movf	(___ftmul@f2+1)^(0+128),w
  4527  02C7  00CC               	movwf	(??___ftmul^(0+128)+1)
  4528  02C8  084A               	movf	(___ftmul@f2+2)^(0+128),w
  4529  02C9  00CD               	movwf	(??___ftmul^(0+128)+2)
  4530  02CA  1003               	clrc
  4531  02CB  0D4C               	rlf	(??___ftmul^(0+128)+1),w
  4532  02CC  0D4D               	rlf	(??___ftmul^(0+128)+2),w
  4533  02CD  00D3               	movwf	___ftmul@sign^(0+128)
  4534  02CE  0853               	movf	___ftmul@sign^(0+128),w
  4535  02CF  1D03               	btfss	3,2
  4536  02D0  2AD5               	goto	l3133
  4537  02D1  01C5               	clrf	?___ftmul^(0+128)
  4538  02D2  01C6               	clrf	(?___ftmul+1)^(0+128)
  4539  02D3  01C7               	clrf	(?___ftmul+2)^(0+128)
  4540  02D4  0008               	return
  4541  02D5                     l3133:	
  4542  02D5  0853               	movf	___ftmul@sign^(0+128),w
  4543  02D6  3E7B               	addlw	123
  4544  02D7  07CE               	addwf	___ftmul@exp^(0+128),f
  4545  02D8  0847               	movf	(___ftmul@f1^(0+128)+2),w
  4546  02D9  00D3               	movwf	___ftmul@sign^(0+128)
  4547  02DA  084A               	movf	(___ftmul@f2^(0+128)+2),w
  4548  02DB  06D3               	xorwf	___ftmul@sign^(0+128),f
  4549  02DC  3080               	movlw	128
  4550  02DD  05D3               	andwf	___ftmul@sign^(0+128),f
  4551  02DE  3007               	movlw	7
  4552  02DF  17C6               	bsf	(___ftmul@f1^(0+128)+1),7
  4553  02E0  17C9               	bsf	(___ftmul@f2^(0+128)+1),7
  4554  02E1  01CA               	clrf	(___ftmul@f2+2)^(0+128)
  4555  02E2  01CF               	clrf	___ftmul@f3_as_product^(0+128)
  4556  02E3  01D0               	clrf	(___ftmul@f3_as_product+1)^(0+128)
  4557  02E4  01D1               	clrf	(___ftmul@f3_as_product+2)^(0+128)
  4558  02E5  00D2               	movwf	___ftmul@cntr^(0+128)
  4559  02E6                     l3151:	
  4560  02E6  1C45               	btfss	___ftmul@f1^(0+128),0
  4561  02E7  2AEF               	goto	l3155
  4562  02E8  27C4  120A  118A   	fcall	PL18	;call to abstracted procedure
  4563  02EB  1803               	skipnc
  4564  02EC  0A4A               	incf	(___ftmul@f2+2)^(0+128),w
  4565  02ED  1D03               	btfss	3,2
  4566  02EE  07D1               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  4567  02EF                     l3155:	
  4568  02EF  1003               	clrc
  4569  02F0  0CC7               	rrf	(___ftmul@f1+2)^(0+128),f
  4570  02F1  0CC6               	rrf	(___ftmul@f1+1)^(0+128),f
  4571  02F2  0CC5               	rrf	___ftmul@f1^(0+128),f
  4572  02F3  1003               	clrc
  4573  02F4  0DC8               	rlf	___ftmul@f2^(0+128),f
  4574  02F5  0DC9               	rlf	(___ftmul@f2+1)^(0+128),f
  4575  02F6  0DCA               	rlf	(___ftmul@f2+2)^(0+128),f
  4576  02F7  0BD2               	decfsz	___ftmul@cntr^(0+128),f
  4577  02F8  2AE6               	goto	l3151
  4578  02F9  3009               	movlw	9
  4579  02FA  00D2               	movwf	___ftmul@cntr^(0+128)
  4580  02FB                     l3163:	
  4581  02FB  1C45               	btfss	___ftmul@f1^(0+128),0
  4582  02FC  2B04               	goto	l3167
  4583  02FD  27C4  120A  118A   	fcall	PL18	;call to abstracted procedure
  4584  0300  1803               	skipnc
  4585  0301  0A4A               	incf	(___ftmul@f2+2)^(0+128),w
  4586  0302  1D03               	btfss	3,2
  4587  0303  07D1               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  4588  0304                     l3167:	
  4589  0304  1003               	clrc
  4590  0305  0CC7               	rrf	(___ftmul@f1+2)^(0+128),f
  4591  0306  0CC6               	rrf	(___ftmul@f1+1)^(0+128),f
  4592  0307  0CC5               	rrf	___ftmul@f1^(0+128),f
  4593  0308  1003               	clrc
  4594  0309  0CD1               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  4595  030A  0CD0               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  4596  030B  0CCF               	rrf	___ftmul@f3_as_product^(0+128),f
  4597  030C  0BD2               	decfsz	___ftmul@cntr^(0+128),f
  4598  030D  2AFB               	goto	l3163
  4599  030E  084F               	movf	___ftmul@f3_as_product^(0+128),w
  4600  030F  00A0               	movwf	___ftpack@arg^(0+128)
  4601  0310  0850               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  4602  0311  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  4603  0312  0851               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  4604  0313  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  4605  0314  084E               	movf	___ftmul@exp^(0+128),w
  4606  0315  00A3               	movwf	___ftpack@exp^(0+128)
  4607  0316  0853               	movf	___ftmul@sign^(0+128),w
  4608  0317  00A4               	movwf	___ftpack@sign^(0+128)
  4609  0318  2320               	fcall	___ftpack
  4610  0319  0820               	movf	?___ftpack^(0+128),w
  4611  031A  00C5               	movwf	?___ftmul^(0+128)
  4612  031B  0821               	movf	(?___ftpack+1)^(0+128),w
  4613  031C  00C6               	movwf	(?___ftmul+1)^(0+128)
  4614  031D  0822               	movf	(?___ftpack+2)^(0+128),w
  4615  031E  00C7               	movwf	(?___ftmul+2)^(0+128)
  4616  031F  0008               	return
  4617  0320                     __end_of___ftmul:	
  4618  0320                     __ptext41:	
  4619 ;; *************** function ___ftpack *****************
  4620 ;; Defined at:
  4621 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;  arg             3    0[BANK1 ] unsigned um
  4624 ;;  exp             1    3[BANK1 ] unsigned char 
  4625 ;;  sign            1    4[BANK1 ] unsigned char 
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  3    0[BANK1 ] float 
  4630 ;; Registers used:
  4631 ;;		wreg, status,2, status,0
  4632 ;; Tracked objects:
  4633 ;;		On entry : 300/900
  4634 ;;		On exit  : 300/100
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:      BANK1   BANK3  BANK2l
  4637 ;;      Params:         5       0       0
  4638 ;;      Locals:         0       0       0
  4639 ;;      Temps:          3       0       0
  4640 ;;      Totals:         8       0       0
  4641 ;;Total ram usage:        8 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; This function calls:
  4644 ;;		Nothing
  4645 ;; This function is called by:
  4646 ;;		___abtoft
  4647 ;;		___altoft
  4648 ;;		___ftadd
  4649 ;;		___ftdiv
  4650 ;;		___ftmul
  4651 ;;		___lwtoft
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           
  4656                           ;psect for function ___ftpack
  4657  0320                     ___ftpack:	
  4658                           
  4659                           ;incstack = 0
  4660                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4661  0320  0823               	movf	___ftpack@exp^(0+128),w
  4662  0321  1903               	btfsc	3,2
  4663  0322  2B28               	goto	l995
  4664  0323  0822               	movf	(___ftpack@arg+2)^(0+128),w
  4665  0324  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  4666  0325  0420               	iorwf	___ftpack@arg^(0+128),w
  4667  0326  1D03               	skipz
  4668  0327  2B31               	goto	l2553
  4669  0328                     l995:	
  4670  0328  01A0               	clrf	?___ftpack^(0+128)
  4671  0329  01A1               	clrf	(?___ftpack+1)^(0+128)
  4672  032A  01A2               	clrf	(?___ftpack+2)^(0+128)
  4673  032B  0008               	return
  4674  032C                     l2551:	
  4675  032C  0AA3               	incf	___ftpack@exp^(0+128),f
  4676  032D  1003               	clrc
  4677  032E  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  4678  032F  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  4679  0330  0CA0               	rrf	___ftpack@arg^(0+128),f
  4680  0331                     l2553:	
  4681  0331  30FE               	movlw	254
  4682  0332  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  4683  0333  1903               	btfsc	3,2
  4684  0334  2B40               	goto	l2557
  4685  0335  2B2C               	goto	l2551
  4686  0336                     l2555:	
  4687  0336  0AA3               	incf	___ftpack@exp^(0+128),f
  4688  0337  0AA0               	incf	___ftpack@arg^(0+128),f
  4689  0338  1903               	skipnz
  4690  0339  0AA1               	incf	(___ftpack@arg+1)^(0+128),f
  4691  033A  1903               	skipnz
  4692  033B  0AA2               	incf	(___ftpack@arg+2)^(0+128),f
  4693  033C  1003               	clrc
  4694  033D  0CA2               	rrf	(___ftpack@arg+2)^(0+128),f
  4695  033E  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  4696  033F  0CA0               	rrf	___ftpack@arg^(0+128),f
  4697  0340                     l2557:	
  4698  0340  30FF               	movlw	255
  4699  0341  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  4700  0342  1903               	btfsc	3,2
  4701  0343  2B4E               	goto	l2561
  4702  0344  2B36               	goto	l2555
  4703  0345                     l2563:	
  4704  0345  3002               	movlw	2
  4705  0346  0223               	subwf	___ftpack@exp^(0+128),w
  4706  0347  1C03               	btfss	3,0
  4707  0348  2B50               	goto	l1007
  4708  0349  03A3               	decf	___ftpack@exp^(0+128),f
  4709  034A  1003               	clrc
  4710  034B  0DA0               	rlf	___ftpack@arg^(0+128),f
  4711  034C  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  4712  034D  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  4713  034E                     l2561:	
  4714  034E  1FA1               	btfss	(___ftpack@arg+1)^(0+128),7
  4715  034F  2B45               	goto	l2563
  4716  0350                     l1007:	
  4717  0350  1C23               	btfss	___ftpack@exp^(0+128),0
  4718  0351  13A1               	bcf	(___ftpack@arg^(0+128)+1),7
  4719  0352  1003               	clrc
  4720  0353  0CA3               	rrf	___ftpack@exp^(0+128),f
  4721  0354  0823               	movf	___ftpack@exp^(0+128),w
  4722  0355  00A7               	movwf	(??___ftpack^(0+128)+2)
  4723  0356  01A6               	clrf	(??___ftpack^(0+128)+1)
  4724  0357  01A5               	clrf	??___ftpack^(0+128)
  4725  0358  0825               	movf	??___ftpack^(0+128),w
  4726  0359  04A0               	iorwf	___ftpack@arg^(0+128),f
  4727  035A  0826               	movf	(??___ftpack+1)^(0+128),w
  4728  035B  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  4729  035C  0827               	movf	(??___ftpack+2)^(0+128),w
  4730  035D  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  4731  035E  0824               	movf	___ftpack@sign^(0+128),w
  4732  035F  1D03               	btfss	3,2
  4733  0360  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  4734  0361  0008               	return
  4735  0362                     __end_of___ftpack:	
  4736  0362                     __ptext45:	
  4737 ;; *************** function _GetOSCTRIM *****************
  4738 ;; Defined at:
  4739 ;;		line 42 in file "libs/gsk_RTC_GPS.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;		None
  4742 ;; Auto vars:     Size  Location     Type
  4743 ;;  i               1    7[BANK1 ] unsigned char 
  4744 ;; Return value:  Size  Location     Type
  4745 ;;                  1    wreg      char 
  4746 ;; Registers used:
  4747 ;;		wreg, status,2, status,0, pclath, cstack
  4748 ;; Tracked objects:
  4749 ;;		On entry : 300/B00
  4750 ;;		On exit  : 300/100
  4751 ;;		Unchanged: 0/0
  4752 ;; Data sizes:      BANK1   BANK3  BANK2l
  4753 ;;      Params:         0       0       0
  4754 ;;      Locals:         1       0       0
  4755 ;;      Temps:          0       0       0
  4756 ;;      Totals:         1       0       0
  4757 ;;Total ram usage:        1 bytes
  4758 ;; Hardware stack levels used:    1
  4759 ;; Hardware stack levels required when called:    3
  4760 ;; This function calls:
  4761 ;;		_I2C_ReadAtAddress
  4762 ;; This function is called by:
  4763 ;;		_AdjustSec
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _GetOSCTRIM
  4769  0362                     _GetOSCTRIM:	
  4770                           
  4771                           ;gsk_RTC_GPS.c: 43: char i = I2C_ReadAtAddress(0xde, 0x08);
  4772                           
  4773                           ;incstack = 0
  4774                           ; Regs used in _GetOSCTRIM: [wreg+status,2+status,0+pclath+cstack]
  4775  0362  3008               	movlw	8
  4776  0363  1303               	bcf	3,6	;RP1=0, select bank1
  4777  0364  00A4               	movwf	I2C_ReadAtAddress@IntAdd^(0+128)
  4778  0365  30DE               	movlw	222
  4779  0366  120A  158A  21FE  120A  118A  	fcall	_I2C_ReadAtAddress
  4780  036B  00A7               	movwf	GetOSCTRIM@i^(0+128)
  4781                           
  4782                           ;gsk_RTC_GPS.c: 44: if (i&0x80)
  4783  036C  1FA7               	btfss	GetOSCTRIM@i^(0+128),7
  4784  036D  2B73               	goto	l2895
  4785                           
  4786                           ;gsk_RTC_GPS.c: 45: return -(i&0x7f);
  4787  036E  0827               	movf	GetOSCTRIM@i^(0+128),w
  4788  036F  397F               	andlw	127
  4789  0370  3AFF               	xorlw	255
  4790  0371  3E01               	addlw	1
  4791  0372  0008               	return
  4792  0373                     l2895:	
  4793                           
  4794                           ;gsk_RTC_GPS.c: 46: else
  4795                           ;gsk_RTC_GPS.c: 47: return (i&0x7f);
  4796  0373  0827               	movf	GetOSCTRIM@i^(0+128),w
  4797  0374  397F               	andlw	127
  4798  0375  0008               	return
  4799  0376                     __end_of_GetOSCTRIM:	
  4800  0376                     __ptext40:	
  4801 ;; *************** function ___abtoft *****************
  4802 ;; Defined at:
  4803 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\abtoft.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  c               1    wreg     char 
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;  c               1   13[BANK1 ] char 
  4808 ;;  f1              3    0        float 
  4809 ;;  sign            1   12[BANK1 ] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  3    8[BANK1 ] float 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0, pclath, cstack
  4814 ;; Tracked objects:
  4815 ;;		On entry : 300/B00
  4816 ;;		On exit  : 300/100
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:      BANK1   BANK3  BANK2l
  4819 ;;      Params:         4       0       0
  4820 ;;      Locals:         2       0       0
  4821 ;;      Temps:          0       0       0
  4822 ;;      Totals:         6       0       0
  4823 ;;Total ram usage:        6 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    1
  4826 ;; This function calls:
  4827 ;;		___ftpack
  4828 ;; This function is called by:
  4829 ;;		_AdjustSec
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           
  4834                           ;psect for function ___abtoft
  4835  0376                     ___abtoft:	
  4836                           
  4837                           ;incstack = 0
  4838                           ; Regs used in ___abtoft: [wreg+status,2+status,0+pclath+cstack]
  4839                           ;___abtoft@c stored from wreg
  4840  0376  1303               	bcf	3,6	;RP1=0, select bank1
  4841  0377  00AD               	movwf	___abtoft@c^(0+128)
  4842  0378  01AC               	clrf	___abtoft@sign^(0+128)
  4843  0379  1FAD               	btfss	___abtoft@c^(0+128),7
  4844  037A  2B7F               	goto	l3041
  4845  037B  09AD               	comf	___abtoft@c^(0+128),f
  4846  037C  0AAD               	incf	___abtoft@c^(0+128),f
  4847  037D  01AC               	clrf	___abtoft@sign^(0+128)
  4848  037E  0AAC               	incf	___abtoft@sign^(0+128),f
  4849  037F                     l3041:	
  4850  037F  082D               	movf	___abtoft@c^(0+128),w
  4851  0380  00A0               	movwf	___ftpack@arg^(0+128)
  4852  0381  308E               	movlw	142
  4853  0382  01A1               	clrf	(___ftpack@arg+1)^(0+128)
  4854  0383  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  4855  0384  00A3               	movwf	___ftpack@exp^(0+128)
  4856  0385  082C               	movf	___abtoft@sign^(0+128),w
  4857  0386  00A4               	movwf	___ftpack@sign^(0+128)
  4858  0387  2320               	fcall	___ftpack
  4859  0388  0820               	movf	?___ftpack^(0+128),w
  4860  0389  00A8               	movwf	?___abtoft^(0+128)
  4861  038A  0821               	movf	(?___ftpack+1)^(0+128),w
  4862  038B  00A9               	movwf	(?___abtoft+1)^(0+128)
  4863  038C  0822               	movf	(?___ftpack+2)^(0+128),w
  4864  038D  00AA               	movwf	(?___abtoft+2)^(0+128)
  4865  038E  0008               	return
  4866  038F                     __end_of___abtoft:	
  4867  038F                     __ptext37:	
  4868 ;; *************** function ___ftsub *****************
  4869 ;; Defined at:
  4870 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  4871 ;; Parameters:    Size  Location     Type
  4872 ;;  f2              3    5[BANK3 ] float 
  4873 ;;  f1              3    8[BANK3 ] float 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  3    5[BANK3 ] float 
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0, pclath, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 300/B00
  4882 ;;		On exit  : 300/300
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:      BANK1   BANK3  BANK2l
  4885 ;;      Params:         0       6       0
  4886 ;;      Locals:         0       0       0
  4887 ;;      Temps:          0       0       0
  4888 ;;      Totals:         0       6       0
  4889 ;;Total ram usage:        6 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    2
  4892 ;; This function calls:
  4893 ;;		___ftadd
  4894 ;; This function is called by:
  4895 ;;		_round
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           
  4900                           ;psect for function ___ftsub
  4901  038F                     ___ftsub:	
  4902                           
  4903                           ;incstack = 0
  4904                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  4905  038F  0817               	movf	(___ftsub@f2+2)^(0+384),w
  4906  0390  0416               	iorwf	(___ftsub@f2+1)^(0+384),w
  4907  0391  0415               	iorwf	___ftsub@f2^(0+384),w
  4908  0392  1903               	skipnz
  4909  0393  2B96               	goto	l2845
  4910  0394  3080               	movlw	128
  4911  0395  0697               	xorwf	(___ftsub@f2+2)^(0+384),f
  4912  0396                     l2845:	
  4913  0396  0818               	movf	___ftsub@f1^(0+384),w
  4914  0397  1303               	bcf	3,6	;RP1=0, select bank1
  4915  0398  00D4               	movwf	___ftadd@f1^(0+128)
  4916  0399  1703               	bsf	3,6	;RP1=1, select bank3
  4917  039A  0819               	movf	(___ftsub@f1+1)^(0+384),w
  4918  039B  1303               	bcf	3,6	;RP1=0, select bank1
  4919  039C  00D5               	movwf	(___ftadd@f1+1)^(0+128)
  4920  039D  1703               	bsf	3,6	;RP1=1, select bank3
  4921  039E  081A               	movf	(___ftsub@f1+2)^(0+384),w
  4922  039F  1303               	bcf	3,6	;RP1=0, select bank1
  4923  03A0  00D6               	movwf	(___ftadd@f1+2)^(0+128)
  4924  03A1  1703               	bsf	3,6	;RP1=1, select bank3
  4925  03A2  0815               	movf	___ftsub@f2^(0+384),w
  4926  03A3  1303               	bcf	3,6	;RP1=0, select bank1
  4927  03A4  00D7               	movwf	___ftadd@f2^(0+128)
  4928  03A5  1703               	bsf	3,6	;RP1=1, select bank3
  4929  03A6  0816               	movf	(___ftsub@f2+1)^(0+384),w
  4930  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  4931  03A8  00D8               	movwf	(___ftadd@f2+1)^(0+128)
  4932  03A9  1703               	bsf	3,6	;RP1=1, select bank3
  4933  03AA  0817               	movf	(___ftsub@f2+2)^(0+384),w
  4934  03AB  1303               	bcf	3,6	;RP1=0, select bank1
  4935  03AC  00D9               	movwf	(___ftadd@f2+2)^(0+128)
  4936  03AD  2169               	fcall	___ftadd
  4937  03AE  0854               	movf	?___ftadd^(0+128),w
  4938  03AF  1703               	bsf	3,6	;RP1=1, select bank3
  4939  03B0  0095               	movwf	?___ftsub^(0+384)
  4940  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  4941  03B2  0855               	movf	(?___ftadd+1)^(0+128),w
  4942  03B3  1703               	bsf	3,6	;RP1=1, select bank3
  4943  03B4  0096               	movwf	(?___ftsub+1)^(0+384)
  4944  03B5  1303               	bcf	3,6	;RP1=0, select bank1
  4945  03B6  0856               	movf	(?___ftadd+2)^(0+128),w
  4946  03B7  1703               	bsf	3,6	;RP1=1, select bank3
  4947  03B8  0097               	movwf	(?___ftsub+2)^(0+384)
  4948  03B9  0008               	return
  4949  03BA                     __end_of___ftsub:	
  4950  03BA                     __ptext42:	
  4951 ;; *************** function _SetOSCTRIM *****************
  4952 ;; Defined at:
  4953 ;;		line 50 in file "libs/gsk_RTC_GPS.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  Val             1    wreg     char 
  4956 ;; Auto vars:     Size  Location     Type
  4957 ;;  Val             1   20[BANK1 ] char 
  4958 ;; Return value:  Size  Location     Type
  4959 ;;                  1    wreg      void 
  4960 ;; Registers used:
  4961 ;;		wreg, status,2, status,0, pclath, cstack
  4962 ;; Tracked objects:
  4963 ;;		On entry : 300/B00
  4964 ;;		On exit  : 300/100
  4965 ;;		Unchanged: 0/0
  4966 ;; Data sizes:      BANK1   BANK3  BANK2l
  4967 ;;      Params:         0       0       0
  4968 ;;      Locals:         1       0       0
  4969 ;;      Temps:          0       0       0
  4970 ;;      Totals:         1       0       0
  4971 ;;Total ram usage:        1 bytes
  4972 ;; Hardware stack levels used:    1
  4973 ;; Hardware stack levels required when called:    3
  4974 ;; This function calls:
  4975 ;;		_I2C_WriteAtAddress
  4976 ;;		___bmul
  4977 ;; This function is called by:
  4978 ;;		_AdjustSec
  4979 ;; This function uses a non-reentrant model
  4980 ;;
  4981                           
  4982                           
  4983                           ;psect for function _SetOSCTRIM
  4984  03BA                     _SetOSCTRIM:	
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _SetOSCTRIM: [wreg+status,2+status,0+pclath+cstack]
  4988                           ;SetOSCTRIM@Val stored from wreg
  4989  03BA  1303               	bcf	3,6	;RP1=0, select bank1
  4990  03BB  00B4               	movwf	SetOSCTRIM@Val^(0+128)
  4991                           
  4992                           ;gsk_RTC_GPS.c: 51: if (Val>0)
  4993  03BC  3A80               	xorlw	128
  4994  03BD  3E7F               	addlw	-129
  4995                           
  4996                           ;gsk_RTC_GPS.c: 52: I2C_WriteAtAddress(0xde, 0x08, Val);
  4997  03BE  3008               	movlw	8
  4998  03BF  00B1               	movwf	I2C_WriteAtAddress@IntAdd^(0+128)
  4999  03C0  1C03               	skipc
  5000  03C1  2BC8               	goto	L35
  5001  03C2  0834               	movf	SetOSCTRIM@Val^(0+128),w
  5002  03C3  00B2               	movwf	I2C_WriteAtAddress@data^(0+128)
  5003  03C4  30DE               	movlw	222
  5004  03C5  120A  158A  2918   	ljmp	_I2C_WriteAtAddress
  5005  03C8                     L35:	
  5006                           ;gsk_RTC_GPS.c: 53: else
  5007                           ;gsk_RTC_GPS.c: 54: I2C_WriteAtAddress(0xde, 0x08, ((-1*Val)|0x80) );
  5008                           
  5009  03C8  30FF               	movlw	255
  5010  03C9  00AE               	movwf	___bmul@multiplicand^(0+128)
  5011  03CA  0834               	movf	SetOSCTRIM@Val^(0+128),w
  5012  03CB  25C3               	fcall	___bmul
  5013  03CC  3880               	iorlw	128
  5014  03CD  00B2               	movwf	I2C_WriteAtAddress@data^(0+128)
  5015  03CE  30DE               	movlw	222
  5016  03CF  120A  158A  2918   	ljmp	_I2C_WriteAtAddress
  5017  03D2                     __end_of_SetOSCTRIM:	
  5018  03D2                     __ptext6:	
  5019 ;; *************** function _WriteLongInt *****************
  5020 ;; Defined at:
  5021 ;;		line 183 in file "libs/HD44780.c"
  5022 ;; Parameters:    Size  Location     Type
  5023 ;;  y               1    wreg     unsigned char 
  5024 ;;  x               1   21[BANK1 ] unsigned char 
  5025 ;;  Val             4   22[BANK1 ] long 
  5026 ;;  size            1   26[BANK1 ] char 
  5027 ;;  Sign            1   27[BANK1 ] unsigned char 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  y               1   30[BANK1 ] unsigned char 
  5030 ;;  POS             1   29[BANK1 ] char 
  5031 ;; Return value:  Size  Location     Type
  5032 ;;                  1    wreg      void 
  5033 ;; Registers used:
  5034 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5035 ;; Tracked objects:
  5036 ;;		On entry : 300/100
  5037 ;;		On exit  : 300/100
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:      BANK1   BANK3  BANK2l
  5040 ;;      Params:         7       0       0
  5041 ;;      Locals:         2       0       0
  5042 ;;      Temps:          1       0       0
  5043 ;;      Totals:        10       0       0
  5044 ;;Total ram usage:       10 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    3
  5047 ;; This function calls:
  5048 ;;		_Lcd_WriteChar
  5049 ;;		___aldiv
  5050 ;;		___bmul
  5051 ;;		___lmul
  5052 ;; This function is called by:
  5053 ;;		_main
  5054 ;; This function uses a non-reentrant model
  5055 ;;
  5056                           
  5057                           
  5058                           ;psect for function _WriteLongInt
  5059  03D2                     _WriteLongInt:	
  5060                           
  5061                           ;incstack = 0
  5062                           ; Regs used in _WriteLongInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5063                           ;WriteLongInt@y stored from wreg
  5064  03D2  00BE               	movwf	WriteLongInt@y^(0+128)
  5065                           
  5066                           ;HD44780.c: 184: int8_t POS = 0;
  5067  03D3  01BD               	clrf	WriteLongInt@POS^(0+128)
  5068                           
  5069                           ;HD44780.c: 185: if (Sign) {
  5070  03D4  083B               	movf	WriteLongInt@Sign^(0+128),w
  5071  03D5  1903               	btfsc	3,2
  5072  03D6  2C04               	goto	l3223
  5073                           
  5074                           ;HD44780.c: 186: POS++;
  5075  03D7  0ABD               	incf	WriteLongInt@POS^(0+128),f
  5076                           
  5077                           ;HD44780.c: 187: if (Val<0) {
  5078  03D8  1FB9               	btfss	(WriteLongInt@Val+3)^(0+128),7
  5079  03D9  2BFC               	goto	l3215
  5080                           
  5081                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  5082  03DA  0835               	movf	WriteLongInt@x^(0+128),w
  5083  03DB  00B1               	movwf	Lcd_WriteChar@x^(0+128)
  5084  03DC  302D               	movlw	45
  5085  03DD  00B2               	movwf	Lcd_WriteChar@c^(0+128)
  5086  03DE  083E               	movf	WriteLongInt@y^(0+128),w
  5087  03DF  243E               	fcall	_Lcd_WriteChar
  5088                           
  5089                           ;HD44780.c: 189: Val=-1*Val;
  5090  03E0  30FF               	movlw	255
  5091  03E1  1683               	bsf	3,5	;RP0=1, select bank1
  5092  03E2  1303               	bcf	3,6	;RP1=0, select bank1
  5093  03E3  00A0               	movwf	___lmul@multiplier^(0+128)
  5094  03E4  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  5095  03E5  00A2               	movwf	(___lmul@multiplier+2)^(0+128)
  5096  03E6  00A3               	movwf	(___lmul@multiplier+3)^(0+128)
  5097  03E7  0839               	movf	(WriteLongInt@Val+3)^(0+128),w
  5098  03E8  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  5099  03E9  0838               	movf	(WriteLongInt@Val+2)^(0+128),w
  5100  03EA  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  5101  03EB  0837               	movf	(WriteLongInt@Val+1)^(0+128),w
  5102  03EC  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  5103  03ED  0836               	movf	WriteLongInt@Val^(0+128),w
  5104  03EE  00A4               	movwf	___lmul@multiplicand^(0+128)
  5105  03EF  120A  158A  225C  120A  118A  	fcall	___lmul
  5106  03F4  0823               	movf	(?___lmul+3)^(0+128),w
  5107  03F5  00B9               	movwf	(WriteLongInt@Val+3)^(0+128)
  5108  03F6  0822               	movf	(?___lmul+2)^(0+128),w
  5109  03F7  00B8               	movwf	(WriteLongInt@Val+2)^(0+128)
  5110  03F8  0821               	movf	(?___lmul+1)^(0+128),w
  5111  03F9  00B7               	movwf	(WriteLongInt@Val+1)^(0+128)
  5112  03FA  0820               	movf	?___lmul^(0+128),w
  5113  03FB  2C3C               	goto	L12
  5114  03FC                     l3215:	
  5115                           ;HD44780.c: 190: } else
  5116                           
  5117                           
  5118                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  5119  03FC  0835               	movf	WriteLongInt@x^(0+128),w
  5120  03FD  00B1               	movwf	Lcd_WriteChar@x^(0+128)
  5121  03FE  302B               	movlw	43
  5122  03FF  00B2               	movwf	Lcd_WriteChar@c^(0+128)
  5123  0400  083E               	movf	WriteLongInt@y^(0+128),w
  5124  0401  243E  120A  118A   	fcall	_Lcd_WriteChar
  5125  0404                     l3223:	
  5126  0404  1683               	bsf	3,5	;RP0=1, select bank1
  5127  0405  1303               	bcf	3,6	;RP1=0, select bank1
  5128  0406  083A               	movf	WriteLongInt@size^(0+128),w
  5129  0407  1903               	btfsc	3,2
  5130  0408  0008               	return
  5131                           
  5132                           ;HD44780.c: 194: size--;
  5133  0409  03BA               	decf	WriteLongInt@size^(0+128),f
  5134                           
  5135                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  5136  040A  083D               	movf	WriteLongInt@POS^(0+128),w
  5137  040B  073A               	addwf	WriteLongInt@size^(0+128),w
  5138  040C  00BC               	movwf	??_WriteLongInt^(0+128)
  5139  040D  0835               	movf	WriteLongInt@x^(0+128),w
  5140  040E  073C               	addwf	??_WriteLongInt^(0+128),w
  5141  040F  00B1               	movwf	Lcd_WriteChar@x^(0+128)
  5142  0410  30F6               	movlw	246
  5143  0411  00AE               	movwf	___bmul@multiplicand^(0+128)
  5144  0412  27CF  120A  118A   	fcall	PL26	;call to abstracted procedure
  5145  0415  300A               	movlw	10
  5146  0416  00A0               	movwf	___aldiv@divisor^(0+128)
  5147  0417  01A1               	clrf	(___aldiv@divisor+1)^(0+128)
  5148  0418  01A2               	clrf	(___aldiv@divisor+2)^(0+128)
  5149  0419  01A3               	clrf	(___aldiv@divisor+3)^(0+128)
  5150  041A  2463  120A  118A   	fcall	___aldiv
  5151  041D  0820               	movf	?___aldiv^(0+128),w
  5152  041E  25C3  120A  118A   	fcall	___bmul
  5153  0421  0736               	addwf	WriteLongInt@Val^(0+128),w
  5154  0422  3E30               	addlw	48
  5155  0423  00B2               	movwf	Lcd_WriteChar@c^(0+128)
  5156  0424  083E               	movf	WriteLongInt@y^(0+128),w
  5157  0425  243E  120A  118A   	fcall	_Lcd_WriteChar
  5158                           
  5159                           ;HD44780.c: 196: Val = Val/10;
  5160  0428  300A               	movlw	10
  5161  0429  1683               	bsf	3,5	;RP0=1, select bank1
  5162  042A  1303               	bcf	3,6	;RP1=0, select bank1
  5163  042B  00A0               	movwf	___aldiv@divisor^(0+128)
  5164  042C  01A1               	clrf	(___aldiv@divisor+1)^(0+128)
  5165  042D  01A2               	clrf	(___aldiv@divisor+2)^(0+128)
  5166  042E  01A3               	clrf	(___aldiv@divisor+3)^(0+128)
  5167  042F  27CF  120A  118A   	fcall	PL26	;call to abstracted procedure
  5168  0432  2463  120A  118A   	fcall	___aldiv
  5169  0435  0823               	movf	(?___aldiv+3)^(0+128),w
  5170  0436  00B9               	movwf	(WriteLongInt@Val+3)^(0+128)
  5171  0437  0822               	movf	(?___aldiv+2)^(0+128),w
  5172  0438  00B8               	movwf	(WriteLongInt@Val+2)^(0+128)
  5173  0439  0821               	movf	(?___aldiv+1)^(0+128),w
  5174  043A  00B7               	movwf	(WriteLongInt@Val+1)^(0+128)
  5175  043B  0820               	movf	?___aldiv^(0+128),w
  5176  043C                     L12:	
  5177  043C  00B6               	movwf	WriteLongInt@Val^(0+128)
  5178  043D  2C04               	goto	l3223
  5179  043E                     __end_of_WriteLongInt:	
  5180  043E                     __ptext8:	
  5181 ;; *************** function _Lcd_WriteChar *****************
  5182 ;; Defined at:
  5183 ;;		line 99 in file "libs/HD44780.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  y               1    wreg     unsigned char 
  5186 ;;  x               1   17[BANK1 ] unsigned char 
  5187 ;;  c               1   18[BANK1 ] unsigned char 
  5188 ;; Auto vars:     Size  Location     Type
  5189 ;;  y               1   19[BANK1 ] unsigned char 
  5190 ;;  data            1   20[BANK1 ] unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  1    wreg      void 
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 300/100
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:      BANK1   BANK3  BANK2l
  5200 ;;      Params:         2       0       0
  5201 ;;      Locals:         2       0       0
  5202 ;;      Temps:          0       0       0
  5203 ;;      Totals:         4       0       0
  5204 ;;Total ram usage:        4 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:    2
  5207 ;; This function calls:
  5208 ;;		_Lcd_CharCP
  5209 ;;		_Lcd_Command
  5210 ;; This function is called by:
  5211 ;;		_WriteLongInt
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _Lcd_WriteChar
  5217  043E                     _Lcd_WriteChar:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5221                           ;Lcd_WriteChar@y stored from wreg
  5222  043E  00B3               	movwf	Lcd_WriteChar@y^(0+128)
  5223                           
  5224                           ;HD44780.c: 100: unsigned char data;
  5225                           ;HD44780.c: 101: switch(y) {
  5226  043F  2C4D               	goto	l2877
  5227  0440                     l2867:	
  5228  0440  0831               	movf	Lcd_WriteChar@x^(0+128),w
  5229  0441  3E7F               	addlw	127
  5230  0442  2C4B               	goto	L17
  5231  0443                     l2869:	
  5232  0443  0831               	movf	Lcd_WriteChar@x^(0+128),w
  5233  0444  3EBF               	addlw	191
  5234  0445  2C4B               	goto	L17
  5235  0446                     l2871:	
  5236  0446  0831               	movf	Lcd_WriteChar@x^(0+128),w
  5237  0447  3E93               	addlw	147
  5238  0448  2C4B               	goto	L17
  5239  0449                     l2873:	
  5240  0449  0831               	movf	Lcd_WriteChar@x^(0+128),w
  5241  044A  3ED3               	addlw	211
  5242  044B                     L17:	
  5243  044B  00B4               	movwf	Lcd_WriteChar@data^(0+128)
  5244  044C  2C5B               	goto	l2879
  5245  044D                     l2877:	
  5246  044D  0833               	movf	Lcd_WriteChar@y^(0+128),w
  5247                           
  5248                           ; Switch size 1, requested type "space"
  5249                           ; Number of cases is 4, Range of values is 1 to 4
  5250                           ; switch strategies available:
  5251                           ; Name         Instructions Cycles
  5252                           ; simple_byte           13     7 (average)
  5253                           ; direct_byte           23    11 (fixed)
  5254                           ; jumptable            263     9 (fixed)
  5255                           ;	Chosen strategy is simple_byte
  5256  044E  3A01               	xorlw	1	; case 1
  5257  044F  1903               	skipnz
  5258  0450  2C40               	goto	l2867
  5259  0451  3A03               	xorlw	3	; case 2
  5260  0452  1903               	skipnz
  5261  0453  2C43               	goto	l2869
  5262  0454  3A01               	xorlw	1	; case 3
  5263  0455  1903               	skipnz
  5264  0456  2C46               	goto	l2871
  5265  0457  3A07               	xorlw	7	; case 4
  5266  0458  1903               	skipnz
  5267  0459  2C49               	goto	l2873
  5268  045A  2C5B               	goto	l2879
  5269  045B                     l2879:	
  5270                           
  5271                           ;HD44780.c: 108: Lcd_Command(data);
  5272  045B  0834               	movf	Lcd_WriteChar@data^(0+128),w
  5273  045C  25D1  120A  118A   	fcall	_Lcd_Command
  5274                           
  5275                           ;HD44780.c: 109: Lcd_CharCP(c);
  5276  045F  1683               	bsf	3,5	;RP0=1, select bank1
  5277  0460  1303               	bcf	3,6	;RP1=0, select bank1
  5278  0461  0832               	movf	Lcd_WriteChar@c^(0+128),w
  5279  0462  2E6C               	ljmp	_Lcd_CharCP
  5280  0463                     __end_of_Lcd_WriteChar:	
  5281  0463                     __ptext7:	
  5282 ;; *************** function ___aldiv *****************
  5283 ;; Defined at:
  5284 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  divisor         4    0[BANK1 ] long 
  5287 ;;  dividend        4    4[BANK1 ] long 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  quotient        4   10[BANK1 ] long 
  5290 ;;  sign            1    9[BANK1 ] unsigned char 
  5291 ;;  counter         1    8[BANK1 ] unsigned char 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  4    0[BANK1 ] long 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0
  5296 ;; Tracked objects:
  5297 ;;		On entry : 300/100
  5298 ;;		On exit  : 300/100
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:      BANK1   BANK3  BANK2l
  5301 ;;      Params:         8       0       0
  5302 ;;      Locals:         6       0       0
  5303 ;;      Temps:          0       0       0
  5304 ;;      Totals:        14       0       0
  5305 ;;Total ram usage:       14 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_WriteLongInt
  5311 ;; This function uses a non-reentrant model
  5312 ;;
  5313                           
  5314                           
  5315                           ;psect for function ___aldiv
  5316  0463                     ___aldiv:	
  5317                           
  5318                           ;incstack = 0
  5319                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5320  0463  01A9               	clrf	___aldiv@sign^(0+128)
  5321  0464  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  5322  0465  2C73               	goto	l894
  5323  0466  09A0               	comf	___aldiv@divisor^(0+128),f
  5324  0467  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  5325  0468  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  5326  0469  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  5327  046A  0AA0               	incf	___aldiv@divisor^(0+128),f
  5328  046B  1903               	skipnz
  5329  046C  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  5330  046D  1903               	skipnz
  5331  046E  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  5332  046F  1903               	skipnz
  5333  0470  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  5334  0471  01A9               	clrf	___aldiv@sign^(0+128)
  5335  0472  0AA9               	incf	___aldiv@sign^(0+128),f
  5336  0473                     l894:	
  5337  0473  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  5338  0474  2C82               	goto	l3055
  5339  0475  09A4               	comf	___aldiv@dividend^(0+128),f
  5340  0476  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  5341  0477  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  5342  0478  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  5343  0479  0AA4               	incf	___aldiv@dividend^(0+128),f
  5344  047A  1903               	skipnz
  5345  047B  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  5346  047C  1903               	skipnz
  5347  047D  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  5348  047E  1903               	skipnz
  5349  047F  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  5350  0480  3001               	movlw	1
  5351  0481  06A9               	xorwf	___aldiv@sign^(0+128),f
  5352  0482                     l3055:	
  5353  0482  01AA               	clrf	___aldiv@quotient^(0+128)
  5354  0483  01AB               	clrf	(___aldiv@quotient+1)^(0+128)
  5355  0484  01AC               	clrf	(___aldiv@quotient+2)^(0+128)
  5356  0485  01AD               	clrf	(___aldiv@quotient+3)^(0+128)
  5357  0486  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  5358  0487  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  5359  0488  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  5360  0489  0420               	iorwf	___aldiv@divisor^(0+128),w
  5361  048A  1903               	skipnz
  5362  048B  2CC1               	goto	l3077
  5363  048C  01A8               	clrf	___aldiv@counter^(0+128)
  5364  048D                     L13:	
  5365  048D  0AA8               	incf	___aldiv@counter^(0+128),f
  5366  048E  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  5367  048F  2C96               	goto	l3065
  5368  0490  1003               	clrc
  5369  0491  0DA0               	rlf	___aldiv@divisor^(0+128),f
  5370  0492  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  5371  0493  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  5372  0494  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  5373  0495  2C8D               	goto	L13
  5374  0496                     l3065:	
  5375  0496  1003               	clrc
  5376  0497  0DAA               	rlf	___aldiv@quotient^(0+128),f
  5377  0498  0DAB               	rlf	(___aldiv@quotient+1)^(0+128),f
  5378  0499  0DAC               	rlf	(___aldiv@quotient+2)^(0+128),f
  5379  049A  0DAD               	rlf	(___aldiv@quotient+3)^(0+128),f
  5380  049B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  5381  049C  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  5382  049D  1D03               	skipz
  5383  049E  2CA9               	goto	u3655
  5384  049F  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  5385  04A0  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  5386  04A1  1D03               	skipz
  5387  04A2  2CA9               	goto	u3655
  5388  04A3  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  5389  04A4  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  5390  04A5  1D03               	skipz
  5391  04A6  2CA9               	goto	u3655
  5392  04A7  0820               	movf	___aldiv@divisor^(0+128),w
  5393  04A8  0224               	subwf	___aldiv@dividend^(0+128),w
  5394  04A9                     u3655:	
  5395  04A9  1C03               	skipc
  5396  04AA  2CBB               	goto	L14
  5397  04AB  0820               	movf	___aldiv@divisor^(0+128),w
  5398  04AC  02A4               	subwf	___aldiv@dividend^(0+128),f
  5399  04AD  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  5400  04AE  1C03               	skipc
  5401  04AF  0F21               	incfsz	(___aldiv@divisor+1)^(0+128),w
  5402  04B0  02A5               	subwf	(___aldiv@dividend+1)^(0+128),f
  5403  04B1  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  5404  04B2  1C03               	skipc
  5405  04B3  0F22               	incfsz	(___aldiv@divisor+2)^(0+128),w
  5406  04B4  02A6               	subwf	(___aldiv@dividend+2)^(0+128),f
  5407  04B5  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  5408  04B6  1C03               	skipc
  5409  04B7  0F23               	incfsz	(___aldiv@divisor+3)^(0+128),w
  5410  04B8  02A7               	subwf	(___aldiv@dividend+3)^(0+128),f
  5411  04B9  142A               	bsf	___aldiv@quotient^(0+128),0
  5412  04BA  1003               	clrc
  5413  04BB                     L14:	
  5414  04BB  0CA3               	rrf	(___aldiv@divisor+3)^(0+128),f
  5415  04BC  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  5416  04BD  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  5417  04BE  0CA0               	rrf	___aldiv@divisor^(0+128),f
  5418  04BF  0BA8               	decfsz	___aldiv@counter^(0+128),f
  5419  04C0  2C96               	goto	l3065
  5420  04C1                     l3077:	
  5421  04C1  0829               	movf	___aldiv@sign^(0+128),w
  5422  04C2  1903               	btfsc	3,2
  5423  04C3  2CCF               	goto	l3081
  5424  04C4  09AA               	comf	___aldiv@quotient^(0+128),f
  5425  04C5  09AB               	comf	(___aldiv@quotient+1)^(0+128),f
  5426  04C6  09AC               	comf	(___aldiv@quotient+2)^(0+128),f
  5427  04C7  09AD               	comf	(___aldiv@quotient+3)^(0+128),f
  5428  04C8  0AAA               	incf	___aldiv@quotient^(0+128),f
  5429  04C9  1903               	skipnz
  5430  04CA  0AAB               	incf	(___aldiv@quotient+1)^(0+128),f
  5431  04CB  1903               	skipnz
  5432  04CC  0AAC               	incf	(___aldiv@quotient+2)^(0+128),f
  5433  04CD  1903               	skipnz
  5434  04CE  0AAD               	incf	(___aldiv@quotient+3)^(0+128),f
  5435  04CF                     l3081:	
  5436  04CF  082D               	movf	(___aldiv@quotient+3)^(0+128),w
  5437  04D0  00A3               	movwf	(?___aldiv+3)^(0+128)
  5438  04D1  082C               	movf	(___aldiv@quotient+2)^(0+128),w
  5439  04D2  00A2               	movwf	(?___aldiv+2)^(0+128)
  5440  04D3  082B               	movf	(___aldiv@quotient+1)^(0+128),w
  5441  04D4  00A1               	movwf	(?___aldiv+1)^(0+128)
  5442  04D5  082A               	movf	___aldiv@quotient^(0+128),w
  5443  04D6  00A0               	movwf	?___aldiv^(0+128)
  5444  04D7  0008               	return
  5445  04D8                     __end_of___aldiv:	
  5446  04D8                     __ptext18:	
  5447 ;; *************** function _ReadVars *****************
  5448 ;; Defined at:
  5449 ;;		line 8 in file "libs/eeprom.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;		None
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  i               1   33[BANK1 ] unsigned char 
  5454 ;;  j               1   32[BANK1 ] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;                  1    wreg      void 
  5457 ;; Registers used:
  5458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5459 ;; Tracked objects:
  5460 ;;		On entry : B00/0
  5461 ;;		On exit  : 300/100
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:      BANK1   BANK3  BANK2l
  5464 ;;      Params:         0       0       0
  5465 ;;      Locals:         2       0       0
  5466 ;;      Temps:         15       0       0
  5467 ;;      Totals:        17       0       0
  5468 ;;Total ram usage:       17 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; Hardware stack levels required when called:    1
  5471 ;; This function calls:
  5472 ;;		___bmul
  5473 ;;		_eeprom_read
  5474 ;; This function is called by:
  5475 ;;		_main
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _ReadVars
  5481  04D8                     _ReadVars:	
  5482                           
  5483                           ;eeprom.c: 9: C_D = eeprom_read(0xA6);
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5487  04D8  30A6               	movlw	166
  5488  04D9  25A9  120A  118A   	fcall	_eeprom_read
  5489  04DC  00EF               	movwf	111	;volatile
  5490                           
  5491                           ;eeprom.c: 15: UINT8 i, j;
  5492                           ;eeprom.c: 16: for (i=0; i<4; i++)
  5493  04DD  1683               	bsf	3,5	;RP0=1, select bank1
  5494  04DE  1303               	bcf	3,6	;RP1=0, select bank1
  5495  04DF  01C1               	clrf	ReadVars@i^(0+128)
  5496  04E0                     l3229:	
  5497  04E0  3004               	movlw	4
  5498  04E1  0241               	subwf	ReadVars@i^(0+128),w
  5499  04E2  1803               	btfsc	3,0
  5500  04E3  2CEE               	goto	l3239
  5501                           
  5502                           ;eeprom.c: 17: AUDIO.v[0] = eeprom_read(0x9F+i);
  5503  04E4  0841               	movf	ReadVars@i^(0+128),w
  5504  04E5  3E9F               	addlw	159
  5505  04E6  25A9  120A  118A   	fcall	_eeprom_read
  5506  04E9  00E7               	movwf	103	;volatile
  5507  04EA  1683               	bsf	3,5	;RP0=1, select bank1
  5508  04EB  1303               	bcf	3,6	;RP1=0, select bank1
  5509  04EC  0AC1               	incf	ReadVars@i^(0+128),f
  5510  04ED  2CE0               	goto	l3229
  5511  04EE                     l3239:	
  5512                           
  5513                           ;eeprom.c: 18: for (i = 0; i<3; i++) {
  5514  04EE  01C1               	clrf	ReadVars@i^(0+128)
  5515  04EF                     l3241:	
  5516  04EF  3003               	movlw	3
  5517  04F0  0241               	subwf	ReadVars@i^(0+128),w
  5518  04F1  1803               	btfsc	3,0
  5519  04F2  2D68               	goto	l3253
  5520                           
  5521                           ;eeprom.c: 19: C[i] = (uint32_t) eeprom_read(0x96 + 3*i)*256*256
  5522                           ;eeprom.c: 20: + (uint16_t) eeprom_read(0x96 + 1 + 3*i)*256
  5523                           ;eeprom.c: 21: + eeprom_read(0x96 + 2 + 3*i);
  5524  04F3  0841               	movf	ReadVars@i^(0+128),w
  5525  04F4  0741               	addwf	ReadVars@i^(0+128),w
  5526  04F5  0741               	addwf	ReadVars@i^(0+128),w
  5527  04F6  3E98               	addlw	152
  5528  04F7  25A9  120A  118A   	fcall	_eeprom_read
  5529  04FA  1683               	bsf	3,5	;RP0=1, select bank1
  5530  04FB  1303               	bcf	3,6	;RP1=0, select bank1
  5531  04FC  00B1               	movwf	??_ReadVars^(0+128)
  5532  04FD  01B2               	clrf	(??_ReadVars^(0+128)+1)
  5533  04FE  01B3               	clrf	(??_ReadVars^(0+128)+2)
  5534  04FF  01B4               	clrf	(??_ReadVars^(0+128)+3)
  5535  0500  0841               	movf	ReadVars@i^(0+128),w
  5536  0501  0741               	addwf	ReadVars@i^(0+128),w
  5537  0502  0741               	addwf	ReadVars@i^(0+128),w
  5538  0503  3E97               	addlw	151
  5539  0504  25A9  120A  118A   	fcall	_eeprom_read
  5540  0507  1683               	bsf	3,5	;RP0=1, select bank1
  5541  0508  1303               	bcf	3,6	;RP1=0, select bank1
  5542  0509  00B5               	movwf	(??_ReadVars+4)^(0+128)
  5543  050A  01B6               	clrf	((??_ReadVars+4)^(0+128)+1)
  5544  050B  00B6               	movwf	((??_ReadVars+4)^(0+128)+1)
  5545  050C  01B5               	clrf	(??_ReadVars+4)^(0+128)
  5546  050D  0835               	movf	(??_ReadVars+4)^(0+128),w
  5547  050E  00B7               	movwf	(??_ReadVars+6)^(0+128)
  5548  050F  0836               	movf	(??_ReadVars+5)^(0+128),w
  5549  0510  00B8               	movwf	((??_ReadVars+6)^(0+128)+1)
  5550  0511  01B9               	clrf	((??_ReadVars+6)^(0+128)+2)
  5551  0512  01BA               	clrf	((??_ReadVars+6)^(0+128)+3)
  5552  0513  0841               	movf	ReadVars@i^(0+128),w
  5553  0514  0741               	addwf	ReadVars@i^(0+128),w
  5554  0515  0741               	addwf	ReadVars@i^(0+128),w
  5555  0516  3E96               	addlw	150
  5556  0517  25A9  120A  118A   	fcall	_eeprom_read
  5557  051A  1683               	bsf	3,5	;RP0=1, select bank1
  5558  051B  1303               	bcf	3,6	;RP1=0, select bank1
  5559  051C  00BB               	movwf	(??_ReadVars+10)^(0+128)
  5560  051D  01BC               	clrf	((??_ReadVars+10)^(0+128)+1)
  5561  051E  01BD               	clrf	((??_ReadVars+10)^(0+128)+2)
  5562  051F  01BE               	clrf	((??_ReadVars+10)^(0+128)+3)
  5563  0520  083C               	movf	((??_ReadVars+10)^(0+128)+1),w
  5564  0521  00BE               	movwf	((??_ReadVars+10)^(0+128)+3)
  5565  0522  083B               	movf	(??_ReadVars+10)^(0+128),w
  5566  0523  00BD               	movwf	((??_ReadVars+10)^(0+128)+2)
  5567  0524  01BC               	clrf	((??_ReadVars+10)^(0+128)+1)
  5568  0525  01BB               	clrf	(??_ReadVars+10)^(0+128)
  5569  0526  083B               	movf	(??_ReadVars+10)^(0+128),w
  5570  0527  07B7               	addwf	(??_ReadVars+6)^(0+128),f
  5571  0528  083C               	movf	(??_ReadVars+11)^(0+128),w
  5572  0529  1803               	skipnc
  5573  052A  0F3C               	incfsz	(??_ReadVars+11)^(0+128),w
  5574  052B  07B8               	addwf	((??_ReadVars+6)^(0+128)+1),f
  5575  052C  083D               	movf	(??_ReadVars+12)^(0+128),w
  5576  052D  1803               	skipnc
  5577  052E  0F3D               	incfsz	(??_ReadVars+12)^(0+128),w
  5578  052F  07B9               	addwf	((??_ReadVars+6)^(0+128)+2),f
  5579  0530  083E               	movf	(??_ReadVars+13)^(0+128),w
  5580  0531  1803               	skipnc
  5581  0532  0A3E               	incf	(??_ReadVars+13)^(0+128),w
  5582  0533  07BA               	addwf	((??_ReadVars+6)^(0+128)+3),f
  5583  0534  0837               	movf	(??_ReadVars+6)^(0+128),w
  5584  0535  07B1               	addwf	??_ReadVars^(0+128),f
  5585  0536  0838               	movf	(??_ReadVars+7)^(0+128),w
  5586  0537  1803               	skipnc
  5587  0538  0F38               	incfsz	(??_ReadVars+7)^(0+128),w
  5588  0539  07B2               	addwf	(??_ReadVars^(0+128)+1),f
  5589  053A  0839               	movf	(??_ReadVars+8)^(0+128),w
  5590  053B  1803               	skipnc
  5591  053C  0F39               	incfsz	(??_ReadVars+8)^(0+128),w
  5592  053D  07B3               	addwf	(??_ReadVars^(0+128)+2),f
  5593  053E  083A               	movf	(??_ReadVars+9)^(0+128),w
  5594  053F  1803               	skipnc
  5595  0540  0A3A               	incf	(??_ReadVars+9)^(0+128),w
  5596  0541  07B4               	addwf	(??_ReadVars^(0+128)+3),f
  5597  0542  0841               	movf	ReadVars@i^(0+128),w
  5598  0543  00BF               	movwf	(??_ReadVars+14)^(0+128)
  5599  0544  3001               	movlw	1
  5600  0545  1003               	clrc
  5601  0546                     L20:	
  5602  0546  0DBF               	rlf	(??_ReadVars+14)^(0+128),f
  5603  0547  3EFF               	addlw	-1
  5604  0548  1003               	clrc
  5605  0549  1D03               	skipz
  5606  054A  2D46               	goto	L20
  5607  054B  0D3F               	rlf	(??_ReadVars+14)^(0+128),w
  5608  054C  3E4C               	addlw	76
  5609  054D  0084               	movwf	4
  5610  054E  0831               	movf	??_ReadVars^(0+128),w
  5611  054F  1783               	bsf	3,7	;select IRP bank2
  5612  0550  0080               	movwf	0
  5613  0551  0A84               	incf	4,f
  5614  0552  0832               	movf	(??_ReadVars+1)^(0+128),w
  5615  0553  0080               	movwf	0
  5616  0554  0A84               	incf	4,f
  5617  0555  0833               	movf	(??_ReadVars+2)^(0+128),w
  5618  0556  0080               	movwf	0
  5619  0557  0A84               	incf	4,f
  5620  0558  0834               	movf	(??_ReadVars+3)^(0+128),w
  5621  0559  0080               	movwf	0
  5622                           
  5623                           ;eeprom.c: 22: STATE_BREAKS[i] = eeprom_read(0xA3+i);
  5624  055A  0841               	movf	ReadVars@i^(0+128),w
  5625  055B  3E64               	addlw	100
  5626  055C  0084               	movwf	4
  5627  055D  0841               	movf	ReadVars@i^(0+128),w
  5628  055E  3EA3               	addlw	163
  5629  055F  25A9  120A  118A   	fcall	_eeprom_read
  5630  0562  1783               	bsf	3,7	;select IRP bank2
  5631  0563  0080               	movwf	0
  5632  0564  1683               	bsf	3,5	;RP0=1, select bank1
  5633  0565  1303               	bcf	3,6	;RP1=0, select bank1
  5634  0566  0AC1               	incf	ReadVars@i^(0+128),f
  5635  0567  2CEF               	goto	l3241
  5636  0568                     l3253:	
  5637                           
  5638                           ;eeprom.c: 23: }
  5639                           ;eeprom.c: 24: for (i = 0; i<30; i++) {
  5640  0568  01C1               	clrf	ReadVars@i^(0+128)
  5641  0569                     l3255:	
  5642  0569  301E               	movlw	30
  5643  056A  0241               	subwf	ReadVars@i^(0+128),w
  5644  056B  1803               	btfsc	3,0
  5645  056C  0008               	return
  5646                           
  5647                           ;eeprom.c: 25: STATE_PERIODS[i] = eeprom_read(0x00
  5648                           ;eeprom.c: 26: + i*(1 + 2*2));
  5649  056D  0841               	movf	ReadVars@i^(0+128),w
  5650  056E  3E20               	addlw	32
  5651  056F  0084               	movwf	4
  5652  0570  3005               	movlw	5
  5653  0571  00AE               	movwf	___bmul@multiplicand^(0+128)
  5654  0572  0841               	movf	ReadVars@i^(0+128),w
  5655  0573  25C3  120A  118A   	fcall	___bmul
  5656  0576  25A9  120A  118A   	fcall	_eeprom_read
  5657  0579  1383               	bcf	3,7	;select IRP bank0
  5658  057A  0080               	movwf	0
  5659                           
  5660                           ;eeprom.c: 27: for (j = 0; j<2; j++) {
  5661  057B  1683               	bsf	3,5	;RP0=1, select bank1
  5662  057C  1303               	bcf	3,6	;RP1=0, select bank1
  5663  057D  01C0               	clrf	ReadVars@j^(0+128)
  5664  057E                     l3267:	
  5665                           
  5666                           ;eeprom.c: 28: STATE_1[i][j] = eeprom_read(0x00
  5667                           ;eeprom.c: 29: + i*(1 + 2*2)
  5668                           ;eeprom.c: 30: + (1 + j));
  5669  057E  0841               	movf	ReadVars@i^(0+128),w
  5670  057F  00B1               	movwf	??_ReadVars^(0+128)
  5671  0580  303E               	movlw	62
  5672  0581  27AC  120A  118A   	fcall	PL14	;call to abstracted procedure
  5673  0584  25C3  120A  118A   	fcall	___bmul
  5674  0587  0740               	addwf	ReadVars@j^(0+128),w
  5675  0588  3E01               	addlw	1
  5676  0589  25A9  120A  118A   	fcall	_eeprom_read
  5677  058C  1383               	bcf	3,7	;select IRP bank0
  5678  058D  0080               	movwf	0
  5679                           
  5680                           ;eeprom.c: 31: STATE_2[i][j] = eeprom_read(0x00
  5681                           ;eeprom.c: 32: + i*(1 + 2*2)
  5682                           ;eeprom.c: 33: + (3 + j));
  5683  058E  1683               	bsf	3,5	;RP0=1, select bank1
  5684  058F  1303               	bcf	3,6	;RP1=0, select bank1
  5685  0590  0841               	movf	ReadVars@i^(0+128),w
  5686  0591  00B1               	movwf	??_ReadVars^(0+128)
  5687  0592  3010               	movlw	16
  5688  0593  27AC  120A  118A   	fcall	PL14	;call to abstracted procedure
  5689  0596  25C3  120A  118A   	fcall	___bmul
  5690  0599  0740               	addwf	ReadVars@j^(0+128),w
  5691  059A  3E03               	addlw	3
  5692  059B  25A9  120A  118A   	fcall	_eeprom_read
  5693  059E  1783               	bsf	3,7	;select IRP bank2
  5694  059F  0080               	movwf	0
  5695  05A0  1683               	bsf	3,5	;RP0=1, select bank1
  5696  05A1  1303               	bcf	3,6	;RP1=0, select bank1
  5697  05A2  3002               	movlw	2
  5698  05A3  0AC0               	incf	ReadVars@j^(0+128),f
  5699  05A4  0240               	subwf	ReadVars@j^(0+128),w
  5700  05A5  1C03               	skipc
  5701  05A6  2D7E               	goto	l3267
  5702  05A7  0AC1               	incf	ReadVars@i^(0+128),f
  5703  05A8  2D69               	goto	l3255
  5704  05A9                     __end_of_ReadVars:	
  5705  05A9                     __ptext19:	
  5706 ;; *************** function _eeprom_read *****************
  5707 ;; Defined at:
  5708 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;  addr            1    wreg     unsigned char 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  addr            1    0[BANK1 ] unsigned char 
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      unsigned char 
  5715 ;; Registers used:
  5716 ;;		wreg, status,2, status,0
  5717 ;; Tracked objects:
  5718 ;;		On entry : 200/0
  5719 ;;		On exit  : 300/200
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:      BANK1   BANK3  BANK2l
  5722 ;;      Params:         0       0       0
  5723 ;;      Locals:         1       0       0
  5724 ;;      Temps:          0       0       0
  5725 ;;      Totals:         1       0       0
  5726 ;;Total ram usage:        1 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; This function calls:
  5729 ;;		Nothing
  5730 ;; This function is called by:
  5731 ;;		_ReadVars
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           
  5736                           ;psect for function _eeprom_read
  5737  05A9                     _eeprom_read:	
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  5741                           ;eeprom_read@addr stored from wreg
  5742  05A9  1683               	bsf	3,5	;RP0=1, select bank1
  5743  05AA  00A0               	movwf	eeprom_read@addr^(0+128)
  5744  05AB  2DAD               	goto	l753
  5745  05AC                     u3331:	
  5746  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  5747  05AD                     l753:	
  5748  05AD  0064               	clrwdt	;# 
  5749  05AE  1683               	bsf	3,5	;RP0=1, select bank3
  5750  05AF  1703               	bsf	3,6	;RP1=1, select bank3
  5751  05B0  188C               	btfsc	12,1	;volsfr
  5752  05B1  2DAC               	goto	u3331
  5753  05B2  1303               	bcf	3,6	;RP1=0, select bank1
  5754  05B3  0820               	movf	eeprom_read@addr^(0+128),w
  5755  05B4  1283               	bcf	3,5	;RP0=0, select bank2
  5756  05B5  1703               	bsf	3,6	;RP1=1, select bank2
  5757  05B6  008D               	movwf	13	;volatile
  5758  05B7  303F               	movlw	63
  5759  05B8  1683               	bsf	3,5	;RP0=1, select bank3
  5760  05B9  058C               	andwf	12,f	;volsfr
  5761  05BA  140C               	bsf	12,0	;volsfr
  5762  05BB  1003               	clrc
  5763  05BC  180C               	btfsc	12,0	;volsfr
  5764  05BD  1403               	setc
  5765  05BE  1803               	skipnc
  5766  05BF  3001               	movlw	1
  5767  05C0  1283               	bcf	3,5	;RP0=0, select bank2
  5768  05C1  080C               	movf	12,w	;volatile
  5769  05C2  0008               	return
  5770  05C3                     __end_of_eeprom_read:	
  5771  05C3                     __ptext43:	
  5772 ;; *************** function ___bmul *****************
  5773 ;; Defined at:
  5774 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  5775 ;; Parameters:    Size  Location     Type
  5776 ;;  multiplier      1    wreg     unsigned char 
  5777 ;;  multiplicand    1   14[BANK1 ] unsigned char 
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;  multiplier      1   16[BANK1 ] unsigned char 
  5780 ;;  product         1   15[BANK1 ] unsigned char 
  5781 ;; Return value:  Size  Location     Type
  5782 ;;                  1    wreg      unsigned char 
  5783 ;; Registers used:
  5784 ;;		wreg, status,2, status,0
  5785 ;; Tracked objects:
  5786 ;;		On entry : 300/100
  5787 ;;		On exit  : 300/100
  5788 ;;		Unchanged: 0/0
  5789 ;; Data sizes:      BANK1   BANK3  BANK2l
  5790 ;;      Params:         1       0       0
  5791 ;;      Locals:         2       0       0
  5792 ;;      Temps:          0       0       0
  5793 ;;      Totals:         3       0       0
  5794 ;;Total ram usage:        3 bytes
  5795 ;; Hardware stack levels used:    1
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_WriteLongInt
  5800 ;;		_ReadVars
  5801 ;;		_SetOSCTRIM
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           
  5806                           ;psect for function ___bmul
  5807  05C3                     ___bmul:	
  5808                           
  5809                           ;incstack = 0
  5810                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  5811                           ;___bmul@multiplier stored from wreg
  5812  05C3  00B0               	movwf	___bmul@multiplier^(0+128)
  5813  05C4  01AF               	clrf	___bmul@product^(0+128)
  5814  05C5                     l2829:	
  5815  05C5  082E               	movf	___bmul@multiplicand^(0+128),w
  5816  05C6  1830               	btfsc	___bmul@multiplier^(0+128),0
  5817  05C7  07AF               	addwf	___bmul@product^(0+128),f
  5818  05C8  1003               	clrc
  5819  05C9  0DAE               	rlf	___bmul@multiplicand^(0+128),f
  5820  05CA  1003               	clrc
  5821  05CB  0CB0               	rrf	___bmul@multiplier^(0+128),f
  5822  05CC  0830               	movf	___bmul@multiplier^(0+128),w
  5823  05CD  1D03               	btfss	3,2
  5824  05CE  2DC5               	goto	l2829
  5825  05CF  082F               	movf	___bmul@product^(0+128),w
  5826  05D0  0008               	return
  5827  05D1                     __end_of___bmul:	
  5828  05D1                     __ptext9:	
  5829 ;; *************** function _Lcd_Command *****************
  5830 ;; Defined at:
  5831 ;;		line 133 in file "libs/HD44780.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  command         1    wreg     unsigned char 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  command         1    1[BANK1 ] unsigned char 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;                  1    wreg      void 
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0, pclath, cstack
  5840 ;; Tracked objects:
  5841 ;;		On entry : 300/100
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:      BANK1   BANK3  BANK2l
  5845 ;;      Params:         0       0       0
  5846 ;;      Locals:         1       0       0
  5847 ;;      Temps:          1       0       0
  5848 ;;      Totals:         2       0       0
  5849 ;;Total ram usage:        2 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    1
  5852 ;; This function calls:
  5853 ;;		_Lcd_Delay5us
  5854 ;; This function is called by:
  5855 ;;		_Lcd_WriteChar
  5856 ;; This function uses a non-reentrant model
  5857 ;;
  5858                           
  5859                           
  5860                           ;psect for function _Lcd_Command
  5861  05D1                     _Lcd_Command:	
  5862                           
  5863                           ;incstack = 0
  5864                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+pclath+cstack]
  5865                           ;Lcd_Command@command stored from wreg
  5866  05D1  00A1               	movwf	Lcd_Command@command^(0+128)
  5867                           
  5868                           ;HD44780.c: 134: RA1 = 0; RA0 = 0;
  5869  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  5870  05D3  1085               	bcf	5,1	;volatile
  5871  05D4  1005               	bcf	5,0	;volatile
  5872                           
  5873                           ;HD44780.c: 135: RA5 = (command & 0b10000000)>>7; RA4 = (command & 0b01000000)>>6;
  5874  05D5  1683               	bsf	3,5	;RP0=1, select bank1
  5875  05D6  0821               	movf	Lcd_Command@command^(0+128),w
  5876  05D7  00A0               	movwf	??_Lcd_Command^(0+128)
  5877  05D8  3007               	movlw	7
  5878  05D9                     u2855:	
  5879  05D9  1003               	clrc
  5880  05DA  0CA0               	rrf	??_Lcd_Command^(0+128),f
  5881  05DB  3EFF               	addlw	-1
  5882  05DC  1D03               	skipz
  5883  05DD  2DD9               	goto	u2855
  5884  05DE  1C20               	btfss	??_Lcd_Command^(0+128),0
  5885  05DF  2DE4               	goto	u2860
  5886  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  5887  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  5888  05E2  1685               	bsf	5,5	;volatile
  5889  05E3  2DE7               	goto	u2874
  5890  05E4                     u2860:	
  5891  05E4  1283               	bcf	3,5	;RP0=0, select bank0
  5892  05E5  1303               	bcf	3,6	;RP1=0, select bank0
  5893  05E6  1285               	bcf	5,5	;volatile
  5894  05E7                     u2874:	
  5895  05E7  1683               	bsf	3,5	;RP0=1, select bank1
  5896  05E8  0821               	movf	Lcd_Command@command^(0+128),w
  5897  05E9  00A0               	movwf	??_Lcd_Command^(0+128)
  5898  05EA  3006               	movlw	6
  5899  05EB                     u2885:	
  5900  05EB  1003               	clrc
  5901  05EC  0CA0               	rrf	??_Lcd_Command^(0+128),f
  5902  05ED  3EFF               	addlw	-1
  5903  05EE  1D03               	skipz
  5904  05EF  2DEB               	goto	u2885
  5905  05F0  1C20               	btfss	??_Lcd_Command^(0+128),0
  5906  05F1  2DF6               	goto	u2890
  5907  05F2  1283               	bcf	3,5	;RP0=0, select bank0
  5908  05F3  1303               	bcf	3,6	;RP1=0, select bank0
  5909  05F4  1605               	bsf	5,4	;volatile
  5910  05F5  2DF9               	goto	u2904
  5911  05F6                     u2890:	
  5912  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  5913  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  5914  05F8  1205               	bcf	5,4	;volatile
  5915  05F9                     u2904:	
  5916                           
  5917                           ;HD44780.c: 136: RA3 = (command & 0b00100000)>>5; RA2 = (command & 0b00010000)>>4;
  5918  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  5919  05FA  0821               	movf	Lcd_Command@command^(0+128),w
  5920  05FB  00A0               	movwf	??_Lcd_Command^(0+128)
  5921  05FC  3005               	movlw	5
  5922  05FD                     u2915:	
  5923  05FD  1003               	clrc
  5924  05FE  0CA0               	rrf	??_Lcd_Command^(0+128),f
  5925  05FF  3EFF               	addlw	-1
  5926  0600  1D03               	skipz
  5927  0601  2DFD               	goto	u2915
  5928  0602  1C20               	btfss	??_Lcd_Command^(0+128),0
  5929  0603  2E08               	goto	u2920
  5930  0604  1283               	bcf	3,5	;RP0=0, select bank0
  5931  0605  1303               	bcf	3,6	;RP1=0, select bank0
  5932  0606  1585               	bsf	5,3	;volatile
  5933  0607  2E0B               	goto	u2934
  5934  0608                     u2920:	
  5935  0608  1283               	bcf	3,5	;RP0=0, select bank0
  5936  0609  1303               	bcf	3,6	;RP1=0, select bank0
  5937  060A  1185               	bcf	5,3	;volatile
  5938  060B                     u2934:	
  5939  060B  1683               	bsf	3,5	;RP0=1, select bank1
  5940  060C  0821               	movf	Lcd_Command@command^(0+128),w
  5941  060D  00A0               	movwf	??_Lcd_Command^(0+128)
  5942  060E  3004               	movlw	4
  5943  060F                     u2945:	
  5944  060F  1003               	clrc
  5945  0610  0CA0               	rrf	??_Lcd_Command^(0+128),f
  5946  0611  3EFF               	addlw	-1
  5947  0612  1D03               	skipz
  5948  0613  2E0F               	goto	u2945
  5949  0614  1C20               	btfss	??_Lcd_Command^(0+128),0
  5950  0615  2E1A               	goto	u2950
  5951  0616  1283               	bcf	3,5	;RP0=0, select bank0
  5952  0617  1303               	bcf	3,6	;RP1=0, select bank0
  5953  0618  1505               	bsf	5,2	;volatile
  5954  0619  2E1D               	goto	l2753
  5955  061A                     u2950:	
  5956  061A  1283               	bcf	3,5	;RP0=0, select bank0
  5957  061B  1303               	bcf	3,6	;RP1=0, select bank0
  5958  061C  1105               	bcf	5,2	;volatile
  5959  061D                     l2753:	
  5960                           
  5961                           ;HD44780.c: 137: _delay(10);
  5962  061D  3003               	movlw	3
  5963  061E  1683               	bsf	3,5	;RP0=1, select bank1
  5964  061F  00A0               	movwf	??_Lcd_Command^(0+128)
  5965  0620                     u4837:	
  5966  0620  0BA0               	decfsz	??_Lcd_Command^(0+128),f
  5967  0621  2E20               	goto	u4837
  5968                           
  5969                           ;HD44780.c: 138: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  5970  0622  1283               	bcf	3,5	;RP0=0, select bank0
  5971  0623  1303               	bcf	3,6	;RP1=0, select bank0
  5972  0624  1485               	bsf	5,1	;volatile
  5973  0625  2707  120A  118A   	fcall	_Lcd_Delay5us
  5974  0628  1283               	bcf	3,5	;RP0=0, select bank0
  5975  0629  1303               	bcf	3,6	;RP1=0, select bank0
  5976  062A  1085               	bcf	5,1	;volatile
  5977                           
  5978                           ;HD44780.c: 139: RA5 = (command & 0b00001000)>>3; RA4 = (command & 0b00000100)>>2;
  5979  062B  27D8  120A  118A   	fcall	PL34	;call to abstracted procedure
  5980  062E  1003               	clrc
  5981  062F  0CA0               	rrf	??_Lcd_Command^(0+128),f
  5982  0630  1C20               	btfss	??_Lcd_Command^(0+128),0
  5983  0631  2E36               	goto	u2970
  5984  0632  1283               	bcf	3,5	;RP0=0, select bank0
  5985  0633  1303               	bcf	3,6	;RP1=0, select bank0
  5986  0634  1685               	bsf	5,5	;volatile
  5987  0635  2E39               	goto	l2763
  5988  0636                     u2970:	
  5989  0636  1283               	bcf	3,5	;RP0=0, select bank0
  5990  0637  1303               	bcf	3,6	;RP1=0, select bank0
  5991  0638  1285               	bcf	5,5	;volatile
  5992  0639                     l2763:	
  5993  0639  27D8  120A  118A   	fcall	PL34	;call to abstracted procedure
  5994  063C  1C20               	btfss	??_Lcd_Command^(0+128),0
  5995  063D  2E42               	goto	u2990
  5996  063E  1283               	bcf	3,5	;RP0=0, select bank0
  5997  063F  1303               	bcf	3,6	;RP1=0, select bank0
  5998  0640  1605               	bsf	5,4	;volatile
  5999  0641  2E45               	goto	l2765
  6000  0642                     u2990:	
  6001  0642  1283               	bcf	3,5	;RP0=0, select bank0
  6002  0643  1303               	bcf	3,6	;RP1=0, select bank0
  6003  0644  1205               	bcf	5,4	;volatile
  6004  0645                     l2765:	
  6005                           
  6006                           ;HD44780.c: 140: RA3 = (command & 0b00000010)>>1; RA2 = (command & 0b00000001);
  6007  0645  1683               	bsf	3,5	;RP0=1, select bank1
  6008  0646  0821               	movf	Lcd_Command@command^(0+128),w
  6009  0647  00A0               	movwf	??_Lcd_Command^(0+128)
  6010  0648  1003               	clrc
  6011  0649  0CA0               	rrf	??_Lcd_Command^(0+128),f
  6012  064A  1C20               	btfss	??_Lcd_Command^(0+128),0
  6013  064B  2E50               	goto	u3010
  6014  064C  1283               	bcf	3,5	;RP0=0, select bank0
  6015  064D  1303               	bcf	3,6	;RP1=0, select bank0
  6016  064E  1585               	bsf	5,3	;volatile
  6017  064F  2E53               	goto	l2767
  6018  0650                     u3010:	
  6019  0650  1283               	bcf	3,5	;RP0=0, select bank0
  6020  0651  1303               	bcf	3,6	;RP1=0, select bank0
  6021  0652  1185               	bcf	5,3	;volatile
  6022  0653                     l2767:	
  6023  0653  1683               	bsf	3,5	;RP0=1, select bank1
  6024  0654  1C21               	btfss	Lcd_Command@command^(0+128),0
  6025  0655  2E5A               	goto	u3030
  6026  0656  1283               	bcf	3,5	;RP0=0, select bank0
  6027  0657  1303               	bcf	3,6	;RP1=0, select bank0
  6028  0658  1505               	bsf	5,2	;volatile
  6029  0659  2E5D               	goto	l2769
  6030  065A                     u3030:	
  6031  065A  1283               	bcf	3,5	;RP0=0, select bank0
  6032  065B  1303               	bcf	3,6	;RP1=0, select bank0
  6033  065C  1105               	bcf	5,2	;volatile
  6034  065D                     l2769:	
  6035                           
  6036                           ;HD44780.c: 141: _delay(10);
  6037  065D  3003               	movlw	3
  6038  065E  1683               	bsf	3,5	;RP0=1, select bank1
  6039  065F  00A0               	movwf	??_Lcd_Command^(0+128)
  6040  0660                     u4847:	
  6041  0660  0BA0               	decfsz	??_Lcd_Command^(0+128),f
  6042  0661  2E60               	goto	u4847
  6043                           
  6044                           ;HD44780.c: 142: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  6045  0662  1283               	bcf	3,5	;RP0=0, select bank0
  6046  0663  1303               	bcf	3,6	;RP1=0, select bank0
  6047  0664  1485               	bsf	5,1	;volatile
  6048  0665  2707  120A  118A   	fcall	_Lcd_Delay5us
  6049  0668  1283               	bcf	3,5	;RP0=0, select bank0
  6050  0669  1303               	bcf	3,6	;RP1=0, select bank0
  6051  066A  1085               	bcf	5,1	;volatile
  6052                           
  6053                           ;HD44780.c: 144: Lcd_Delay5us();
  6054  066B  2F07               	ljmp	l2571
  6055  066C                     __end_of_Lcd_Command:	
  6056  066C                     __ptext10:	
  6057 ;; *************** function _Lcd_CharCP *****************
  6058 ;; Defined at:
  6059 ;;		line 116 in file "libs/HD44780.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  c               1    wreg     unsigned char 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  c               1    1[BANK1 ] unsigned char 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      void 
  6066 ;; Registers used:
  6067 ;;		wreg, status,2, status,0, pclath, cstack
  6068 ;; Tracked objects:
  6069 ;;		On entry : 300/100
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:      BANK1   BANK3  BANK2l
  6073 ;;      Params:         0       0       0
  6074 ;;      Locals:         1       0       0
  6075 ;;      Temps:          1       0       0
  6076 ;;      Totals:         2       0       0
  6077 ;;Total ram usage:        2 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    1
  6080 ;; This function calls:
  6081 ;;		_Lcd_Delay5us
  6082 ;; This function is called by:
  6083 ;;		_Lcd_WriteChar
  6084 ;; This function uses a non-reentrant model
  6085 ;;
  6086                           
  6087                           
  6088                           ;psect for function _Lcd_CharCP
  6089  066C                     _Lcd_CharCP:	
  6090                           
  6091                           ;incstack = 0
  6092                           ; Regs used in _Lcd_CharCP: [wreg+status,2+status,0+pclath+cstack]
  6093                           ;Lcd_CharCP@c stored from wreg
  6094  066C  00A1               	movwf	Lcd_CharCP@c^(0+128)
  6095                           
  6096                           ;HD44780.c: 117: RA1 = 0; RA0 = 1;
  6097  066D  1283               	bcf	3,5	;RP0=0, select bank0
  6098  066E  1085               	bcf	5,1	;volatile
  6099  066F  1405               	bsf	5,0	;volatile
  6100                           
  6101                           ;HD44780.c: 118: RA5 = (c & 0b10000000)>>7; RA4 = (c & 0b01000000)>>6;
  6102  0670  1683               	bsf	3,5	;RP0=1, select bank1
  6103  0671  0821               	movf	Lcd_CharCP@c^(0+128),w
  6104  0672  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6105  0673  3007               	movlw	7
  6106  0674                     u3055:	
  6107  0674  1003               	clrc
  6108  0675  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6109  0676  3EFF               	addlw	-1
  6110  0677  1D03               	skipz
  6111  0678  2E74               	goto	u3055
  6112  0679  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6113  067A  2E7F               	goto	u3060
  6114  067B  1283               	bcf	3,5	;RP0=0, select bank0
  6115  067C  1303               	bcf	3,6	;RP1=0, select bank0
  6116  067D  1685               	bsf	5,5	;volatile
  6117  067E  2E82               	goto	u3074
  6118  067F                     u3060:	
  6119  067F  1283               	bcf	3,5	;RP0=0, select bank0
  6120  0680  1303               	bcf	3,6	;RP1=0, select bank0
  6121  0681  1285               	bcf	5,5	;volatile
  6122  0682                     u3074:	
  6123  0682  1683               	bsf	3,5	;RP0=1, select bank1
  6124  0683  0821               	movf	Lcd_CharCP@c^(0+128),w
  6125  0684  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6126  0685  3006               	movlw	6
  6127  0686                     u3085:	
  6128  0686  1003               	clrc
  6129  0687  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6130  0688  3EFF               	addlw	-1
  6131  0689  1D03               	skipz
  6132  068A  2E86               	goto	u3085
  6133  068B  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6134  068C  2E91               	goto	u3090
  6135  068D  1283               	bcf	3,5	;RP0=0, select bank0
  6136  068E  1303               	bcf	3,6	;RP1=0, select bank0
  6137  068F  1605               	bsf	5,4	;volatile
  6138  0690  2E94               	goto	u3104
  6139  0691                     u3090:	
  6140  0691  1283               	bcf	3,5	;RP0=0, select bank0
  6141  0692  1303               	bcf	3,6	;RP1=0, select bank0
  6142  0693  1205               	bcf	5,4	;volatile
  6143  0694                     u3104:	
  6144                           
  6145                           ;HD44780.c: 119: RA3 = (c & 0b00100000)>>5; RA2 = (c & 0b00010000)>>4;
  6146  0694  1683               	bsf	3,5	;RP0=1, select bank1
  6147  0695  0821               	movf	Lcd_CharCP@c^(0+128),w
  6148  0696  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6149  0697  3005               	movlw	5
  6150  0698                     u3115:	
  6151  0698  1003               	clrc
  6152  0699  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6153  069A  3EFF               	addlw	-1
  6154  069B  1D03               	skipz
  6155  069C  2E98               	goto	u3115
  6156  069D  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6157  069E  2EA3               	goto	u3120
  6158  069F  1283               	bcf	3,5	;RP0=0, select bank0
  6159  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  6160  06A1  1585               	bsf	5,3	;volatile
  6161  06A2  2EA6               	goto	u3134
  6162  06A3                     u3120:	
  6163  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  6164  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  6165  06A5  1185               	bcf	5,3	;volatile
  6166  06A6                     u3134:	
  6167  06A6  1683               	bsf	3,5	;RP0=1, select bank1
  6168  06A7  0821               	movf	Lcd_CharCP@c^(0+128),w
  6169  06A8  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6170  06A9  3004               	movlw	4
  6171  06AA                     u3145:	
  6172  06AA  1003               	clrc
  6173  06AB  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6174  06AC  3EFF               	addlw	-1
  6175  06AD  1D03               	skipz
  6176  06AE  2EAA               	goto	u3145
  6177  06AF  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6178  06B0  2EB5               	goto	u3150
  6179  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  6180  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  6181  06B3  1505               	bsf	5,2	;volatile
  6182  06B4  2EB8               	goto	l2779
  6183  06B5                     u3150:	
  6184  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  6185  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  6186  06B7  1105               	bcf	5,2	;volatile
  6187  06B8                     l2779:	
  6188                           
  6189                           ;HD44780.c: 120: _delay(10);
  6190  06B8  3003               	movlw	3
  6191  06B9  1683               	bsf	3,5	;RP0=1, select bank1
  6192  06BA  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6193  06BB                     u4857:	
  6194  06BB  0BA0               	decfsz	??_Lcd_CharCP^(0+128),f
  6195  06BC  2EBB               	goto	u4857
  6196                           
  6197                           ;HD44780.c: 121: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  6198  06BD  1283               	bcf	3,5	;RP0=0, select bank0
  6199  06BE  1303               	bcf	3,6	;RP1=0, select bank0
  6200  06BF  1485               	bsf	5,1	;volatile
  6201  06C0  2707  120A  118A   	fcall	_Lcd_Delay5us
  6202  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  6203  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  6204  06C5  1085               	bcf	5,1	;volatile
  6205                           
  6206                           ;HD44780.c: 122: RA5 = (c & 0b00001000)>>3; RA4 = (c & 0b00000100)>>2;
  6207  06C6  27E0  120A  118A   	fcall	PL38	;call to abstracted procedure
  6208  06C9  1003               	clrc
  6209  06CA  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6210  06CB  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6211  06CC  2ED1               	goto	u3170
  6212  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  6213  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  6214  06CF  1685               	bsf	5,5	;volatile
  6215  06D0  2ED4               	goto	l2789
  6216  06D1                     u3170:	
  6217  06D1  1283               	bcf	3,5	;RP0=0, select bank0
  6218  06D2  1303               	bcf	3,6	;RP1=0, select bank0
  6219  06D3  1285               	bcf	5,5	;volatile
  6220  06D4                     l2789:	
  6221  06D4  27E0  120A  118A   	fcall	PL38	;call to abstracted procedure
  6222  06D7  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6223  06D8  2EDD               	goto	u3190
  6224  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  6225  06DA  1303               	bcf	3,6	;RP1=0, select bank0
  6226  06DB  1605               	bsf	5,4	;volatile
  6227  06DC  2EE0               	goto	l2791
  6228  06DD                     u3190:	
  6229  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  6230  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  6231  06DF  1205               	bcf	5,4	;volatile
  6232  06E0                     l2791:	
  6233                           
  6234                           ;HD44780.c: 123: RA3 = (c & 0b00000010)>>1; RA2 = (c & 0b00000001);
  6235  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  6236  06E1  0821               	movf	Lcd_CharCP@c^(0+128),w
  6237  06E2  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6238  06E3  1003               	clrc
  6239  06E4  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6240  06E5  1C20               	btfss	??_Lcd_CharCP^(0+128),0
  6241  06E6  2EEB               	goto	u3210
  6242  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  6243  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  6244  06E9  1585               	bsf	5,3	;volatile
  6245  06EA  2EEE               	goto	l2793
  6246  06EB                     u3210:	
  6247  06EB  1283               	bcf	3,5	;RP0=0, select bank0
  6248  06EC  1303               	bcf	3,6	;RP1=0, select bank0
  6249  06ED  1185               	bcf	5,3	;volatile
  6250  06EE                     l2793:	
  6251  06EE  1683               	bsf	3,5	;RP0=1, select bank1
  6252  06EF  1C21               	btfss	Lcd_CharCP@c^(0+128),0
  6253  06F0  2EF5               	goto	u3230
  6254  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  6255  06F2  1303               	bcf	3,6	;RP1=0, select bank0
  6256  06F3  1505               	bsf	5,2	;volatile
  6257  06F4  2EF8               	goto	l2795
  6258  06F5                     u3230:	
  6259  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  6260  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  6261  06F7  1105               	bcf	5,2	;volatile
  6262  06F8                     l2795:	
  6263                           
  6264                           ;HD44780.c: 124: _delay(10);
  6265  06F8  3003               	movlw	3
  6266  06F9  1683               	bsf	3,5	;RP0=1, select bank1
  6267  06FA  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6268  06FB                     u4867:	
  6269  06FB  0BA0               	decfsz	??_Lcd_CharCP^(0+128),f
  6270  06FC  2EFB               	goto	u4867
  6271                           
  6272                           ;HD44780.c: 125: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  6273  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  6274  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  6275  06FF  1485               	bsf	5,1	;volatile
  6276  0700  2707  120A  118A   	fcall	_Lcd_Delay5us
  6277  0703  1283               	bcf	3,5	;RP0=0, select bank0
  6278  0704  1303               	bcf	3,6	;RP1=0, select bank0
  6279  0705  1085               	bcf	5,1	;volatile
  6280                           
  6281                           ;HD44780.c: 126: Lcd_Delay5us();
  6282  0706  2F07               	ljmp	l2571
  6283  0707                     __end_of_Lcd_CharCP:	
  6284  0707                     __ptext11:	
  6285 ;; *************** function _Lcd_Delay5us *****************
  6286 ;; Defined at:
  6287 ;;		line 150 in file "libs/HD44780.c"
  6288 ;; Parameters:    Size  Location     Type
  6289 ;;		None
  6290 ;; Auto vars:     Size  Location     Type
  6291 ;;		None
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  1    wreg      void 
  6294 ;; Registers used:
  6295 ;;		None
  6296 ;; Tracked objects:
  6297 ;;		On entry : 300/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:      BANK1   BANK3  BANK2l
  6301 ;;      Params:         0       0       0
  6302 ;;      Locals:         0       0       0
  6303 ;;      Temps:          0       0       0
  6304 ;;      Totals:         0       0       0
  6305 ;;Total ram usage:        0 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_Lcd_CharCP
  6311 ;;		_Lcd_Command
  6312 ;; This function uses a non-reentrant model
  6313 ;;
  6314                           
  6315                           
  6316                           ;psect for function _Lcd_Delay5us
  6317  0707                     _Lcd_Delay5us:	
  6318  0707                     l2571:	
  6319                           ;incstack = 0
  6320                           ; Regs used in _Lcd_Delay5us: []
  6321                           
  6322                           
  6323                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  6324  0707  2F08               	nop2	;2 cycle nop
  6325  0708  2F09               	nop2	;2 cycle nop
  6326  0709  0000               	nop
  6327  070A  0008               	return
  6328  070B                     __end_of_Lcd_Delay5us:	
  6329  070B                     __ptext34:	
  6330 ;; *************** function _frexp *****************
  6331 ;; Defined at:
  6332 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  value           3    0[BANK1 ] int 
  6335 ;;  eptr            1    3[BANK1 ] PTR int 
  6336 ;;		 -> trunc@expon(2), 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;		None
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  3    0[BANK1 ] PTR int 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6343 ;; Tracked objects:
  6344 ;;		On entry : 300/900
  6345 ;;		On exit  : B00/900
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:      BANK1   BANK3  BANK2l
  6348 ;;      Params:         4       0       0
  6349 ;;      Locals:         0       0       0
  6350 ;;      Temps:          2       0       0
  6351 ;;      Totals:         6       0       0
  6352 ;;Total ram usage:        6 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		_trunc
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           
  6362                           ;psect for function _frexp
  6363  070B                     _frexp:	
  6364                           
  6365                           ;incstack = 0
  6366                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  6367  070B  0822               	movf	(frexp@value+2)^(0+128),w
  6368  070C  0421               	iorwf	(frexp@value+1)^(0+128),w
  6369  070D  0420               	iorwf	frexp@value^(0+128),w
  6370  070E  1D03               	skipz
  6371  070F  2F17               	goto	l2739
  6372  0710  0823               	movf	frexp@eptr^(0+128),w
  6373  0711  0084               	movwf	4
  6374  0712  1783               	bsf	3,7	;select IRP bank2
  6375  0713  0180               	clrf	0
  6376  0714  0A84               	incf	4,f
  6377  0715  0180               	clrf	0
  6378  0716  0008               	return
  6379  0717                     l2739:	
  6380  0717  0822               	movf	(frexp@value^(0+128)+2),w
  6381  0718  397F               	andlw	127
  6382  0719  00A4               	movwf	??_frexp^(0+128)
  6383  071A  01A5               	clrf	(??_frexp^(0+128)+1)
  6384  071B  1003               	clrc
  6385  071C  0DA4               	rlf	??_frexp^(0+128),f
  6386  071D  0DA5               	rlf	(??_frexp^(0+128)+1),f
  6387  071E  0823               	movf	frexp@eptr^(0+128),w
  6388  071F  0084               	movwf	4
  6389  0720  0824               	movf	??_frexp^(0+128),w
  6390  0721  1783               	bsf	3,7	;select IRP bank2
  6391  0722  0080               	movwf	0
  6392  0723  0A84               	incf	4,f
  6393  0724  0825               	movf	(??_frexp+1)^(0+128),w
  6394  0725  0080               	movwf	0
  6395  0726  0D21               	rlf	(frexp@value^(0+128)+1),w
  6396  0727  0D21               	rlf	(frexp@value^(0+128)+1),w
  6397  0728  3901               	andlw	1
  6398  0729  00A4               	movwf	??_frexp^(0+128)
  6399  072A  01A5               	clrf	(??_frexp^(0+128)+1)
  6400  072B  0823               	movf	frexp@eptr^(0+128),w
  6401  072C  0084               	movwf	4
  6402  072D  0824               	movf	??_frexp^(0+128),w
  6403  072E  0480               	iorwf	0,f
  6404  072F  0A84               	incf	4,f
  6405  0730  0825               	movf	(??_frexp+1)^(0+128),w
  6406  0731  0480               	iorwf	0,f
  6407  0732  0823               	movf	frexp@eptr^(0+128),w
  6408  0733  0084               	movwf	4
  6409  0734  3082               	movlw	130
  6410  0735  0780               	addwf	0,f
  6411  0736  0F84               	incfsz	4,f
  6412  0737  0800               	movf	0,w
  6413  0738  1803               	skipnc
  6414  0739  0A00               	incf	0,w
  6415  073A  00FF               	movwf	127
  6416  073B  3EFF               	addlw	255
  6417  073C  0080               	movwf	0
  6418  073D  0384               	decf	4,f
  6419  073E  0822               	movf	(frexp@value^(0+128)+2),w
  6420  073F  3980               	andlw	-128
  6421  0740  383F               	iorlw	63
  6422  0741  00A2               	movwf	(frexp@value^(0+128)+2)
  6423  0742  13A1               	bcf	(frexp@value^(0+128)+1),7
  6424  0743  0008               	return
  6425  0744                     __end_of_frexp:	
  6426  0744                     __ptext17:	
  6427 ;; *************** function ___ftdiv *****************
  6428 ;; Defined at:
  6429 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  f2              3   22[BANK1 ] float 
  6432 ;;  f1              3   25[BANK1 ] float 
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;  f3              3   32[BANK1 ] float 
  6435 ;;  sign            1   36[BANK1 ] unsigned char 
  6436 ;;  exp             1   35[BANK1 ] unsigned char 
  6437 ;;  cntr            1   31[BANK1 ] unsigned char 
  6438 ;; Return value:  Size  Location     Type
  6439 ;;                  3   22[BANK1 ] float 
  6440 ;; Registers used:
  6441 ;;		wreg, status,2, status,0, pclath, cstack
  6442 ;; Tracked objects:
  6443 ;;		On entry : 300/900
  6444 ;;		On exit  : 300/100
  6445 ;;		Unchanged: 0/0
  6446 ;; Data sizes:      BANK1   BANK3  BANK2l
  6447 ;;      Params:         6       0       0
  6448 ;;      Locals:         6       0       0
  6449 ;;      Temps:          3       0       0
  6450 ;;      Totals:        15       0       0
  6451 ;;Total ram usage:       15 bytes
  6452 ;; Hardware stack levels used:    1
  6453 ;; Hardware stack levels required when called:    1
  6454 ;; This function calls:
  6455 ;;		___ftpack
  6456 ;; This function is called by:
  6457 ;;		_UART_Init
  6458 ;;		_main
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function ___ftdiv
  6464  0744                     ___ftdiv:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6468  0744  0839               	movf	___ftdiv@f1^(0+128),w
  6469  0745  00BC               	movwf	??___ftdiv^(0+128)
  6470  0746  083A               	movf	(___ftdiv@f1+1)^(0+128),w
  6471  0747  00BD               	movwf	(??___ftdiv^(0+128)+1)
  6472  0748  083B               	movf	(___ftdiv@f1+2)^(0+128),w
  6473  0749  00BE               	movwf	(??___ftdiv^(0+128)+2)
  6474  074A  1003               	clrc
  6475  074B  0D3D               	rlf	(??___ftdiv^(0+128)+1),w
  6476  074C  0D3E               	rlf	(??___ftdiv^(0+128)+2),w
  6477  074D  00C3               	movwf	___ftdiv@exp^(0+128)
  6478  074E  0843               	movf	___ftdiv@exp^(0+128),w
  6479  074F  1D03               	btfss	3,2
  6480  0750  2F55               	goto	l3089
  6481  0751  01B6               	clrf	?___ftdiv^(0+128)
  6482  0752  01B7               	clrf	(?___ftdiv+1)^(0+128)
  6483  0753  01B8               	clrf	(?___ftdiv+2)^(0+128)
  6484  0754  0008               	return
  6485  0755                     l3089:	
  6486  0755  0836               	movf	___ftdiv@f2^(0+128),w
  6487  0756  00BC               	movwf	??___ftdiv^(0+128)
  6488  0757  0837               	movf	(___ftdiv@f2+1)^(0+128),w
  6489  0758  00BD               	movwf	(??___ftdiv^(0+128)+1)
  6490  0759  0838               	movf	(___ftdiv@f2+2)^(0+128),w
  6491  075A  00BE               	movwf	(??___ftdiv^(0+128)+2)
  6492  075B  1003               	clrc
  6493  075C  0D3D               	rlf	(??___ftdiv^(0+128)+1),w
  6494  075D  0D3E               	rlf	(??___ftdiv^(0+128)+2),w
  6495  075E  00C4               	movwf	___ftdiv@sign^(0+128)
  6496  075F  0844               	movf	___ftdiv@sign^(0+128),w
  6497  0760  1D03               	btfss	3,2
  6498  0761  2F66               	goto	l1049
  6499  0762  01B6               	clrf	?___ftdiv^(0+128)
  6500  0763  01B7               	clrf	(?___ftdiv+1)^(0+128)
  6501  0764  01B8               	clrf	(?___ftdiv+2)^(0+128)
  6502  0765  0008               	return
  6503  0766                     l1049:	
  6504  0766  3089               	movlw	137
  6505  0767  01C0               	clrf	___ftdiv@f3^(0+128)
  6506  0768  01C1               	clrf	(___ftdiv@f3+1)^(0+128)
  6507  0769  01C2               	clrf	(___ftdiv@f3+2)^(0+128)
  6508  076A  0744               	addwf	___ftdiv@sign^(0+128),w
  6509  076B  00BC               	movwf	??___ftdiv^(0+128)
  6510  076C  02C3               	subwf	___ftdiv@exp^(0+128),f
  6511  076D  083B               	movf	(___ftdiv@f1^(0+128)+2),w
  6512  076E  00C4               	movwf	___ftdiv@sign^(0+128)
  6513  076F  0838               	movf	(___ftdiv@f2^(0+128)+2),w
  6514  0770  06C4               	xorwf	___ftdiv@sign^(0+128),f
  6515  0771  3080               	movlw	128
  6516  0772  05C4               	andwf	___ftdiv@sign^(0+128),f
  6517  0773  3018               	movlw	24
  6518  0774  17BA               	bsf	(___ftdiv@f1^(0+128)+1),7
  6519  0775  01BB               	clrf	(___ftdiv@f1+2)^(0+128)
  6520  0776  17B7               	bsf	(___ftdiv@f2^(0+128)+1),7
  6521  0777  01B8               	clrf	(___ftdiv@f2+2)^(0+128)
  6522  0778  00BF               	movwf	___ftdiv@cntr^(0+128)
  6523  0779                     l3111:	
  6524  0779  1003               	clrc
  6525  077A  0DC0               	rlf	___ftdiv@f3^(0+128),f
  6526  077B  0DC1               	rlf	(___ftdiv@f3+1)^(0+128),f
  6527  077C  0DC2               	rlf	(___ftdiv@f3+2)^(0+128),f
  6528  077D  0838               	movf	(___ftdiv@f2+2)^(0+128),w
  6529  077E  023B               	subwf	(___ftdiv@f1+2)^(0+128),w
  6530  077F  1D03               	skipz
  6531  0780  2F87               	goto	u3705
  6532  0781  0837               	movf	(___ftdiv@f2+1)^(0+128),w
  6533  0782  023A               	subwf	(___ftdiv@f1+1)^(0+128),w
  6534  0783  1D03               	skipz
  6535  0784  2F87               	goto	u3705
  6536  0785  0836               	movf	___ftdiv@f2^(0+128),w
  6537  0786  0239               	subwf	___ftdiv@f1^(0+128),w
  6538  0787                     u3705:	
  6539  0787  1C03               	skipc
  6540  0788  2F95               	goto	L19
  6541  0789  0836               	movf	___ftdiv@f2^(0+128),w
  6542  078A  02B9               	subwf	___ftdiv@f1^(0+128),f
  6543  078B  0837               	movf	(___ftdiv@f2+1)^(0+128),w
  6544  078C  1C03               	skipc
  6545  078D  0F37               	incfsz	(___ftdiv@f2+1)^(0+128),w
  6546  078E  02BA               	subwf	(___ftdiv@f1+1)^(0+128),f
  6547  078F  0838               	movf	(___ftdiv@f2+2)^(0+128),w
  6548  0790  1C03               	skipc
  6549  0791  0A38               	incf	(___ftdiv@f2+2)^(0+128),w
  6550  0792  02BB               	subwf	(___ftdiv@f1+2)^(0+128),f
  6551  0793  1440               	bsf	___ftdiv@f3^(0+128),0
  6552  0794  1003               	clrc
  6553  0795                     L19:	
  6554  0795  0DB9               	rlf	___ftdiv@f1^(0+128),f
  6555  0796  0DBA               	rlf	(___ftdiv@f1+1)^(0+128),f
  6556  0797  0DBB               	rlf	(___ftdiv@f1+2)^(0+128),f
  6557  0798  0BBF               	decfsz	___ftdiv@cntr^(0+128),f
  6558  0799  2F79               	goto	l3111
  6559  079A  0840               	movf	___ftdiv@f3^(0+128),w
  6560  079B  00A0               	movwf	___ftpack@arg^(0+128)
  6561  079C  0841               	movf	(___ftdiv@f3+1)^(0+128),w
  6562  079D  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  6563  079E  0842               	movf	(___ftdiv@f3+2)^(0+128),w
  6564  079F  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  6565  07A0  0843               	movf	___ftdiv@exp^(0+128),w
  6566  07A1  00A3               	movwf	___ftpack@exp^(0+128)
  6567  07A2  0844               	movf	___ftdiv@sign^(0+128),w
  6568  07A3  00A4               	movwf	___ftpack@sign^(0+128)
  6569  07A4  2320               	fcall	___ftpack
  6570  07A5  0820               	movf	?___ftpack^(0+128),w
  6571  07A6  00B6               	movwf	?___ftdiv^(0+128)
  6572  07A7  0821               	movf	(?___ftpack+1)^(0+128),w
  6573  07A8  00B7               	movwf	(?___ftdiv+1)^(0+128)
  6574  07A9  0822               	movf	(?___ftpack+2)^(0+128),w
  6575  07AA  00B8               	movwf	(?___ftdiv+2)^(0+128)
  6576  07AB  0008               	return
  6577  07AC                     __end_of___ftdiv:	
  6578  07AC                     PL14:	
  6579  07AC  1003               	clrc
  6580  07AD  0DB1               	rlf	??_ReadVars^(0+128),f
  6581  07AE  0731               	addwf	??_ReadVars^(0+128),w
  6582  07AF  00B2               	movwf	(??_ReadVars+1)^(0+128)
  6583  07B0  0840               	movf	ReadVars@j^(0+128),w
  6584  07B1  0732               	addwf	(??_ReadVars+1)^(0+128),w
  6585  07B2  00B3               	movwf	(??_ReadVars+2)^(0+128)
  6586  07B3  0084               	movwf	4
  6587  07B4  3005               	movlw	5
  6588  07B5  00AE               	movwf	___bmul@multiplicand^(0+128)
  6589  07B6  0841               	movf	ReadVars@i^(0+128),w
  6590  07B7  0008               	return
  6591  07B8                     __end_ofPL14:	
  6592  07B8                     PL16:	
  6593  07B8  081B               	movf	round@x^(0+384),w
  6594  07B9  1303               	bcf	3,6	;RP1=0, select bank1
  6595  07BA  00ED               	movwf	trunc@x^(0+128)
  6596  07BB  1703               	bsf	3,6	;RP1=1, select bank3
  6597  07BC  081C               	movf	(round@x+1)^(0+384),w
  6598  07BD  1303               	bcf	3,6	;RP1=0, select bank1
  6599  07BE  00EE               	movwf	(trunc@x+1)^(0+128)
  6600  07BF  1703               	bsf	3,6	;RP1=1, select bank3
  6601  07C0  081D               	movf	(round@x+2)^(0+384),w
  6602  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  6603  07C2  00EF               	movwf	(trunc@x+2)^(0+128)
  6604  07C3  0008               	return
  6605  07C4                     __end_ofPL16:	
  6606  07C4                     PL18:	
  6607  07C4  0848               	movf	___ftmul@f2^(0+128),w
  6608  07C5  07CF               	addwf	___ftmul@f3_as_product^(0+128),f
  6609  07C6  0849               	movf	(___ftmul@f2+1)^(0+128),w
  6610  07C7  1103               	clrz
  6611  07C8  1803               	skipnc
  6612  07C9  0A49               	incf	(___ftmul@f2+1)^(0+128),w
  6613  07CA  1D03               	btfss	3,2
  6614  07CB  07D0               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  6615  07CC  084A               	movf	(___ftmul@f2+2)^(0+128),w
  6616  07CD  1103               	clrz
  6617  07CE  0008               	return
  6618  07CF                     __end_ofPL18:	
  6619  07CF                     PL26:	
  6620  07CF  0839               	movf	(WriteLongInt@Val+3)^(0+128),w
  6621  07D0  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  6622  07D1  0838               	movf	(WriteLongInt@Val+2)^(0+128),w
  6623  07D2  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  6624  07D3  0837               	movf	(WriteLongInt@Val+1)^(0+128),w
  6625  07D4  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  6626  07D5  0836               	movf	WriteLongInt@Val^(0+128),w
  6627  07D6  00A4               	movwf	___aldiv@dividend^(0+128)
  6628  07D7  0008               	return
  6629  07D8                     __end_ofPL26:	
  6630  07D8                     PL34:	
  6631  07D8  1683               	bsf	3,5	;RP0=1, select bank1
  6632  07D9  0821               	movf	Lcd_Command@command^(0+128),w
  6633  07DA  00A0               	movwf	??_Lcd_Command^(0+128)
  6634  07DB  1003               	clrc
  6635  07DC  0CA0               	rrf	??_Lcd_Command^(0+128),f
  6636  07DD  1003               	clrc
  6637  07DE  0CA0               	rrf	??_Lcd_Command^(0+128),f
  6638  07DF  0008               	return
  6639  07E0                     __end_ofPL34:	
  6640  07E0                     PL38:	
  6641  07E0  1683               	bsf	3,5	;RP0=1, select bank1
  6642  07E1  0821               	movf	Lcd_CharCP@c^(0+128),w
  6643  07E2  00A0               	movwf	??_Lcd_CharCP^(0+128)
  6644  07E3  1003               	clrc
  6645  07E4  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6646  07E5  1003               	clrc
  6647  07E6  0CA0               	rrf	??_Lcd_CharCP^(0+128),f
  6648  07E7  0008               	return
  6649  07E8                     __end_ofPL38:	
  6650  07E8                     PL42:	
  6651  07E8  0830               	movf	?___altoft^(0+128),w
  6652  07E9  00C8               	movwf	___ftmul@f2^(0+128)
  6653  07EA  0831               	movf	(?___altoft+1)^(0+128),w
  6654  07EB  00C9               	movwf	(___ftmul@f2+1)^(0+128)
  6655  07EC  0832               	movf	(?___altoft+2)^(0+128),w
  6656  07ED  00CA               	movwf	(___ftmul@f2+2)^(0+128)
  6657  07EE  0008               	return
  6658  07EF                     __end_ofPL42:	
  6659  07EF                     PL46:	
  6660  07EF  0860               	movf	___fttol@f1^(0+128),w
  6661  07F0  00E4               	movwf	??___fttol^(0+128)
  6662  07F1  0861               	movf	(___fttol@f1+1)^(0+128),w
  6663  07F2  00E5               	movwf	(??___fttol^(0+128)+1)
  6664  07F3  0862               	movf	(___fttol@f1+2)^(0+128),w
  6665  07F4  00E6               	movwf	(??___fttol^(0+128)+2)
  6666  07F5  0008               	return
  6667  07F6                     __end_ofPL46:	
  6668                           
  6669                           	psect	text2
  6670  0812                     __ptext2:	
  6671 ;; *************** function ___lbdiv *****************
  6672 ;; Defined at:
  6673 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lbdiv.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  dividend        1    wreg     unsigned char 
  6676 ;;  divisor         1    0[BANK1 ] unsigned char 
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  dividend        1    1[BANK1 ] unsigned char 
  6679 ;;  quotient        1    3[BANK1 ] unsigned char 
  6680 ;;  counter         1    2[BANK1 ] unsigned char 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      unsigned char 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0
  6685 ;; Tracked objects:
  6686 ;;		On entry : B00/300
  6687 ;;		On exit  : B00/100
  6688 ;;		Unchanged: 800/0
  6689 ;; Data sizes:      BANK1   BANK3  BANK2l
  6690 ;;      Params:         1       0       0
  6691 ;;      Locals:         3       0       0
  6692 ;;      Temps:          0       0       0
  6693 ;;      Totals:         4       0       0
  6694 ;;Total ram usage:        4 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; This function calls:
  6697 ;;		Nothing
  6698 ;; This function is called by:
  6699 ;;		_main
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           
  6704                           ;psect for function ___lbdiv
  6705  0812                     ___lbdiv:	
  6706                           
  6707                           ;incstack = 0
  6708                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  6709                           ;___lbdiv@dividend stored from wreg
  6710  0812  1303               	bcf	3,6	;RP1=0, select bank1
  6711  0813  00A1               	movwf	___lbdiv@dividend^(0+128)
  6712  0814  01A3               	clrf	___lbdiv@quotient^(0+128)
  6713  0815  0820               	movf	___lbdiv@divisor^(0+128),w
  6714  0816  1903               	btfsc	3,2
  6715  0817  282C               	goto	l3551
  6716  0818  01A2               	clrf	___lbdiv@counter^(0+128)
  6717  0819                     l3537:	
  6718  0819  0AA2               	incf	___lbdiv@counter^(0+128),f
  6719  081A  1BA0               	btfsc	___lbdiv@divisor^(0+128),7
  6720  081B  281F               	goto	l1101
  6721  081C  1003               	clrc
  6722  081D  0DA0               	rlf	___lbdiv@divisor^(0+128),f
  6723  081E  2819               	goto	l3537
  6724  081F                     l1101:	
  6725  081F  1003               	clrc
  6726  0820  0DA3               	rlf	___lbdiv@quotient^(0+128),f
  6727  0821  0820               	movf	___lbdiv@divisor^(0+128),w
  6728  0822  0221               	subwf	___lbdiv@dividend^(0+128),w
  6729  0823  1C03               	skipc
  6730  0824  2829               	goto	L7
  6731  0825  0820               	movf	___lbdiv@divisor^(0+128),w
  6732  0826  02A1               	subwf	___lbdiv@dividend^(0+128),f
  6733  0827  1423               	bsf	___lbdiv@quotient^(0+128),0
  6734  0828  1003               	clrc
  6735  0829                     L7:	
  6736  0829  0CA0               	rrf	___lbdiv@divisor^(0+128),f
  6737  082A  0BA2               	decfsz	___lbdiv@counter^(0+128),f
  6738  082B  281F               	goto	l1101
  6739  082C                     l3551:	
  6740  082C  0823               	movf	___lbdiv@quotient^(0+128),w
  6741  082D  0008               	return
  6742  082E                     __end_of___lbdiv:	
  6743                           
  6744                           	psect	text3
  6745  1540                     __ptext3:	
  6746 ;; *************** function ___awdiv *****************
  6747 ;; Defined at:
  6748 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  6749 ;; Parameters:    Size  Location     Type
  6750 ;;  divisor         2    0[BANK1 ] int 
  6751 ;;  dividend        2    2[BANK1 ] int 
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;  quotient        2    6[BANK1 ] int 
  6754 ;;  sign            1    5[BANK1 ] unsigned char 
  6755 ;;  counter         1    4[BANK1 ] unsigned char 
  6756 ;; Return value:  Size  Location     Type
  6757 ;;                  2    0[BANK1 ] int 
  6758 ;; Registers used:
  6759 ;;		wreg, status,2, status,0
  6760 ;; Tracked objects:
  6761 ;;		On entry : 300/900
  6762 ;;		On exit  : 300/100
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:      BANK1   BANK3  BANK2l
  6765 ;;      Params:         4       0       0
  6766 ;;      Locals:         4       0       0
  6767 ;;      Temps:          0       0       0
  6768 ;;      Totals:         8       0       0
  6769 ;;Total ram usage:        8 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; This function calls:
  6772 ;;		Nothing
  6773 ;; This function is called by:
  6774 ;;		_main
  6775 ;; This function uses a non-reentrant model
  6776 ;;
  6777                           
  6778                           
  6779                           ;psect for function ___awdiv
  6780  1540                     ___awdiv:	
  6781                           
  6782                           ;incstack = 0
  6783                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6784  1540  01A5               	clrf	___awdiv@sign^(0+128)
  6785  1541  1FA1               	btfss	(___awdiv@divisor+1)^(0+128),7
  6786  1542  2D4A               	goto	l3495
  6787  1543  09A0               	comf	___awdiv@divisor^(0+128),f
  6788  1544  09A1               	comf	(___awdiv@divisor+1)^(0+128),f
  6789  1545  0AA0               	incf	___awdiv@divisor^(0+128),f
  6790  1546  1903               	skipnz
  6791  1547  0AA1               	incf	(___awdiv@divisor+1)^(0+128),f
  6792  1548  01A5               	clrf	___awdiv@sign^(0+128)
  6793  1549  0AA5               	incf	___awdiv@sign^(0+128),f
  6794  154A                     l3495:	
  6795  154A  1FA3               	btfss	(___awdiv@dividend+1)^(0+128),7
  6796  154B  2D53               	goto	l3501
  6797  154C  09A2               	comf	___awdiv@dividend^(0+128),f
  6798  154D  09A3               	comf	(___awdiv@dividend+1)^(0+128),f
  6799  154E  0AA2               	incf	___awdiv@dividend^(0+128),f
  6800  154F  1903               	skipnz
  6801  1550  0AA3               	incf	(___awdiv@dividend+1)^(0+128),f
  6802  1551  3001               	movlw	1
  6803  1552  06A5               	xorwf	___awdiv@sign^(0+128),f
  6804  1553                     l3501:	
  6805  1553  01A6               	clrf	___awdiv@quotient^(0+128)
  6806  1554  01A7               	clrf	(___awdiv@quotient+1)^(0+128)
  6807  1555  0820               	movf	___awdiv@divisor^(0+128),w
  6808  1556  0421               	iorwf	(___awdiv@divisor+1)^(0+128),w
  6809  1557  1903               	btfsc	3,2
  6810  1558  2D78               	goto	l3523
  6811  1559  01A4               	clrf	___awdiv@counter^(0+128)
  6812  155A                     L8:	
  6813  155A  0AA4               	incf	___awdiv@counter^(0+128),f
  6814  155B  1BA1               	btfsc	(___awdiv@divisor+1)^(0+128),7
  6815  155C  2D61               	goto	l3511
  6816  155D  1003               	clrc
  6817  155E  0DA0               	rlf	___awdiv@divisor^(0+128),f
  6818  155F  0DA1               	rlf	(___awdiv@divisor+1)^(0+128),f
  6819  1560  2D5A               	goto	L8
  6820  1561                     l3511:	
  6821  1561  1003               	clrc
  6822  1562  0DA6               	rlf	___awdiv@quotient^(0+128),f
  6823  1563  0DA7               	rlf	(___awdiv@quotient+1)^(0+128),f
  6824  1564  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  6825  1565  0223               	subwf	(___awdiv@dividend+1)^(0+128),w
  6826  1566  1D03               	skipz
  6827  1567  2D6A               	goto	u4295
  6828  1568  0820               	movf	___awdiv@divisor^(0+128),w
  6829  1569  0222               	subwf	___awdiv@dividend^(0+128),w
  6830  156A                     u4295:	
  6831  156A  1C03               	skipc
  6832  156B  2D74               	goto	L9
  6833  156C  0820               	movf	___awdiv@divisor^(0+128),w
  6834  156D  02A2               	subwf	___awdiv@dividend^(0+128),f
  6835  156E  0821               	movf	(___awdiv@divisor+1)^(0+128),w
  6836  156F  1C03               	skipc
  6837  1570  03A3               	decf	(___awdiv@dividend+1)^(0+128),f
  6838  1571  02A3               	subwf	(___awdiv@dividend+1)^(0+128),f
  6839  1572  1426               	bsf	___awdiv@quotient^(0+128),0
  6840  1573  1003               	clrc
  6841  1574                     L9:	
  6842  1574  0CA1               	rrf	(___awdiv@divisor+1)^(0+128),f
  6843  1575  0CA0               	rrf	___awdiv@divisor^(0+128),f
  6844  1576  0BA4               	decfsz	___awdiv@counter^(0+128),f
  6845  1577  2D61               	goto	l3511
  6846  1578                     l3523:	
  6847  1578  0825               	movf	___awdiv@sign^(0+128),w
  6848  1579  1903               	btfsc	3,2
  6849  157A  2D80               	goto	l3527
  6850  157B  09A6               	comf	___awdiv@quotient^(0+128),f
  6851  157C  09A7               	comf	(___awdiv@quotient+1)^(0+128),f
  6852  157D  0AA6               	incf	___awdiv@quotient^(0+128),f
  6853  157E  1903               	skipnz
  6854  157F  0AA7               	incf	(___awdiv@quotient+1)^(0+128),f
  6855  1580                     l3527:	
  6856  1580  0827               	movf	(___awdiv@quotient+1)^(0+128),w
  6857  1581  00A1               	movwf	(?___awdiv+1)^(0+128)
  6858  1582  0826               	movf	___awdiv@quotient^(0+128),w
  6859  1583  00A0               	movwf	?___awdiv^(0+128)
  6860  1584  0008               	return
  6861  1585                     __end_of___awdiv:	
  6862                           
  6863                           	psect	text4
  6864  1585                     __ptext4:	
  6865 ;; *************** function ___almod *****************
  6866 ;; Defined at:
  6867 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\almod.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;  divisor         4    0[BANK1 ] long 
  6870 ;;  dividend        4    4[BANK1 ] long 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  sign            1    9[BANK1 ] unsigned char 
  6873 ;;  counter         1    8[BANK1 ] unsigned char 
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  4    0[BANK1 ] long 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, status,0
  6878 ;; Tracked objects:
  6879 ;;		On entry : 300/100
  6880 ;;		On exit  : 300/100
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:      BANK1   BANK3  BANK2l
  6883 ;;      Params:         8       0       0
  6884 ;;      Locals:         2       0       0
  6885 ;;      Temps:          0       0       0
  6886 ;;      Totals:        10       0       0
  6887 ;;Total ram usage:       10 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; This function calls:
  6890 ;;		Nothing
  6891 ;; This function is called by:
  6892 ;;		_main
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           
  6897                           ;psect for function ___almod
  6898  1585                     ___almod:	
  6899                           
  6900                           ;incstack = 0
  6901                           ; Regs used in ___almod: [wreg+status,2+status,0]
  6902  1585  01A9               	clrf	___almod@sign^(0+128)
  6903  1586  1FA7               	btfss	(___almod@dividend+3)^(0+128),7
  6904  1587  2D95               	goto	l907
  6905  1588  09A4               	comf	___almod@dividend^(0+128),f
  6906  1589  09A5               	comf	(___almod@dividend+1)^(0+128),f
  6907  158A  09A6               	comf	(___almod@dividend+2)^(0+128),f
  6908  158B  09A7               	comf	(___almod@dividend+3)^(0+128),f
  6909  158C  0AA4               	incf	___almod@dividend^(0+128),f
  6910  158D  1903               	skipnz
  6911  158E  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  6912  158F  1903               	skipnz
  6913  1590  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  6914  1591  1903               	skipnz
  6915  1592  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  6916  1593  01A9               	clrf	___almod@sign^(0+128)
  6917  1594  0AA9               	incf	___almod@sign^(0+128),f
  6918  1595                     l907:	
  6919  1595  1FA3               	btfss	(___almod@divisor+3)^(0+128),7
  6920  1596  2DA2               	goto	l3463
  6921  1597  09A0               	comf	___almod@divisor^(0+128),f
  6922  1598  09A1               	comf	(___almod@divisor+1)^(0+128),f
  6923  1599  09A2               	comf	(___almod@divisor+2)^(0+128),f
  6924  159A  09A3               	comf	(___almod@divisor+3)^(0+128),f
  6925  159B  0AA0               	incf	___almod@divisor^(0+128),f
  6926  159C  1903               	skipnz
  6927  159D  0AA1               	incf	(___almod@divisor+1)^(0+128),f
  6928  159E  1903               	skipnz
  6929  159F  0AA2               	incf	(___almod@divisor+2)^(0+128),f
  6930  15A0  1903               	skipnz
  6931  15A1  0AA3               	incf	(___almod@divisor+3)^(0+128),f
  6932  15A2                     l3463:	
  6933  15A2  0823               	movf	(___almod@divisor+3)^(0+128),w
  6934  15A3  0422               	iorwf	(___almod@divisor+2)^(0+128),w
  6935  15A4  0421               	iorwf	(___almod@divisor+1)^(0+128),w
  6936  15A5  0420               	iorwf	___almod@divisor^(0+128),w
  6937  15A6  1903               	skipnz
  6938  15A7  2DD7               	goto	l3479
  6939  15A8  01A8               	clrf	___almod@counter^(0+128)
  6940  15A9                     L10:	
  6941  15A9  0AA8               	incf	___almod@counter^(0+128),f
  6942  15AA  1BA3               	btfsc	(___almod@divisor+3)^(0+128),7
  6943  15AB  2DB2               	goto	l3471
  6944  15AC  1003               	clrc
  6945  15AD  0DA0               	rlf	___almod@divisor^(0+128),f
  6946  15AE  0DA1               	rlf	(___almod@divisor+1)^(0+128),f
  6947  15AF  0DA2               	rlf	(___almod@divisor+2)^(0+128),f
  6948  15B0  0DA3               	rlf	(___almod@divisor+3)^(0+128),f
  6949  15B1  2DA9               	goto	L10
  6950  15B2                     l3471:	
  6951  15B2  0823               	movf	(___almod@divisor+3)^(0+128),w
  6952  15B3  0227               	subwf	(___almod@dividend+3)^(0+128),w
  6953  15B4  1D03               	skipz
  6954  15B5  2DC0               	goto	u4225
  6955  15B6  0822               	movf	(___almod@divisor+2)^(0+128),w
  6956  15B7  0226               	subwf	(___almod@dividend+2)^(0+128),w
  6957  15B8  1D03               	skipz
  6958  15B9  2DC0               	goto	u4225
  6959  15BA  0821               	movf	(___almod@divisor+1)^(0+128),w
  6960  15BB  0225               	subwf	(___almod@dividend+1)^(0+128),w
  6961  15BC  1D03               	skipz
  6962  15BD  2DC0               	goto	u4225
  6963  15BE  0820               	movf	___almod@divisor^(0+128),w
  6964  15BF  0224               	subwf	___almod@dividend^(0+128),w
  6965  15C0                     u4225:	
  6966  15C0  1C03               	skipc
  6967  15C1  2DD1               	goto	L11
  6968  15C2  0820               	movf	___almod@divisor^(0+128),w
  6969  15C3  02A4               	subwf	___almod@dividend^(0+128),f
  6970  15C4  0821               	movf	(___almod@divisor+1)^(0+128),w
  6971  15C5  1C03               	skipc
  6972  15C6  0F21               	incfsz	(___almod@divisor+1)^(0+128),w
  6973  15C7  02A5               	subwf	(___almod@dividend+1)^(0+128),f
  6974  15C8  0822               	movf	(___almod@divisor+2)^(0+128),w
  6975  15C9  1C03               	skipc
  6976  15CA  0F22               	incfsz	(___almod@divisor+2)^(0+128),w
  6977  15CB  02A6               	subwf	(___almod@dividend+2)^(0+128),f
  6978  15CC  0823               	movf	(___almod@divisor+3)^(0+128),w
  6979  15CD  1C03               	skipc
  6980  15CE  0F23               	incfsz	(___almod@divisor+3)^(0+128),w
  6981  15CF  02A7               	subwf	(___almod@dividend+3)^(0+128),f
  6982  15D0  1003               	clrc
  6983  15D1                     L11:	
  6984  15D1  0CA3               	rrf	(___almod@divisor+3)^(0+128),f
  6985  15D2  0CA2               	rrf	(___almod@divisor+2)^(0+128),f
  6986  15D3  0CA1               	rrf	(___almod@divisor+1)^(0+128),f
  6987  15D4  0CA0               	rrf	___almod@divisor^(0+128),f
  6988  15D5  0BA8               	decfsz	___almod@counter^(0+128),f
  6989  15D6  2DB2               	goto	l3471
  6990  15D7                     l3479:	
  6991  15D7  0829               	movf	___almod@sign^(0+128),w
  6992  15D8  1903               	btfsc	3,2
  6993  15D9  2DE5               	goto	l3483
  6994  15DA  09A4               	comf	___almod@dividend^(0+128),f
  6995  15DB  09A5               	comf	(___almod@dividend+1)^(0+128),f
  6996  15DC  09A6               	comf	(___almod@dividend+2)^(0+128),f
  6997  15DD  09A7               	comf	(___almod@dividend+3)^(0+128),f
  6998  15DE  0AA4               	incf	___almod@dividend^(0+128),f
  6999  15DF  1903               	skipnz
  7000  15E0  0AA5               	incf	(___almod@dividend+1)^(0+128),f
  7001  15E1  1903               	skipnz
  7002  15E2  0AA6               	incf	(___almod@dividend+2)^(0+128),f
  7003  15E3  1903               	skipnz
  7004  15E4  0AA7               	incf	(___almod@dividend+3)^(0+128),f
  7005  15E5                     l3483:	
  7006  15E5  0827               	movf	(___almod@dividend+3)^(0+128),w
  7007  15E6  00A3               	movwf	(?___almod+3)^(0+128)
  7008  15E7  0826               	movf	(___almod@dividend+2)^(0+128),w
  7009  15E8  00A2               	movwf	(?___almod+2)^(0+128)
  7010  15E9  0825               	movf	(___almod@dividend+1)^(0+128),w
  7011  15EA  00A1               	movwf	(?___almod+1)^(0+128)
  7012  15EB  0824               	movf	___almod@dividend^(0+128),w
  7013  15EC  00A0               	movwf	?___almod^(0+128)
  7014  15ED  0008               	return
  7015  15EE                     __end_of___almod:	
  7016                           
  7017                           	psect	text5
  7018  08E1                     __ptext5:	
  7019 ;; *************** function _WriteToRTC *****************
  7020 ;; Defined at:
  7021 ;;		line 3 in file "libs/gsk_RTC_GPS.c"
  7022 ;; Parameters:    Size  Location     Type
  7023 ;;  Time            1    wreg     PTR unsigned char 
  7024 ;;		 -> main@GPSData(6), 
  7025 ;; Auto vars:     Size  Location     Type
  7026 ;;  Time            1   20[BANK1 ] PTR unsigned char 
  7027 ;;		 -> main@GPSData(6), 
  7028 ;;  TempVar000      1   21[BANK1 ] unsigned char 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  1    wreg      void 
  7031 ;; Registers used:
  7032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7033 ;; Tracked objects:
  7034 ;;		On entry : 300/B00
  7035 ;;		On exit  : 300/100
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:      BANK1   BANK3  BANK2l
  7038 ;;      Params:         0       0       0
  7039 ;;      Locals:         2       0       0
  7040 ;;      Temps:          0       0       0
  7041 ;;      Totals:         2       0       0
  7042 ;;Total ram usage:        2 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    3
  7045 ;; This function calls:
  7046 ;;		_I2C_WriteAtAddress
  7047 ;; This function is called by:
  7048 ;;		_main
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           
  7053                           ;psect for function _WriteToRTC
  7054  08E1                     _WriteToRTC:	
  7055                           
  7056                           ;incstack = 0
  7057                           ; Regs used in _WriteToRTC: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7058                           ;WriteToRTC@Time stored from wreg
  7059  08E1  1303               	bcf	3,6	;RP1=0, select bank1
  7060  08E2  00B4               	movwf	WriteToRTC@Time^(0+128)
  7061                           
  7062                           ;gsk_RTC_GPS.c: 7: TempVar000 = 0x03 & (Time[0]-0x30);
  7063  08E3  0084               	movwf	4
  7064  08E4  1783               	bsf	3,7	;select IRP bank2
  7065  08E5  0800               	movf	0,w
  7066  08E6  3ED0               	addlw	208
  7067  08E7  00B5               	movwf	WriteToRTC@TempVar000^(0+128)
  7068  08E8  3003               	movlw	3
  7069  08E9  05B5               	andwf	WriteToRTC@TempVar000^(0+128),f
  7070  08EA  30F0               	movlw	240
  7071                           
  7072                           ;gsk_RTC_GPS.c: 8: TempVar000 = TempVar000<<4;
  7073  08EB  0EB5               	swapf	WriteToRTC@TempVar000^(0+128),f
  7074  08EC  05B5               	andwf	WriteToRTC@TempVar000^(0+128),f
  7075                           
  7076                           ;gsk_RTC_GPS.c: 9: TempVar000 = TempVar000 | (0x0f & (Time[1]-0x30));
  7077  08ED  0A34               	incf	WriteToRTC@Time^(0+128),w
  7078  08EE  0084               	movwf	4
  7079  08EF  0800               	movf	0,w
  7080  08F0  3ED0               	addlw	208
  7081  08F1  390F               	andlw	15
  7082  08F2  04B5               	iorwf	WriteToRTC@TempVar000^(0+128),f
  7083                           
  7084                           ;gsk_RTC_GPS.c: 10: I2C_WriteAtAddress(0xde, 0x02, TempVar000);
  7085  08F3  3002               	movlw	2
  7086  08F4  00B1               	movwf	I2C_WriteAtAddress@IntAdd^(0+128)
  7087  08F5  0835               	movf	WriteToRTC@TempVar000^(0+128),w
  7088  08F6  00B2               	movwf	I2C_WriteAtAddress@data^(0+128)
  7089  08F7  30DE               	movlw	222
  7090  08F8  2118  120A  158A   	fcall	_I2C_WriteAtAddress
  7091                           
  7092                           ;gsk_RTC_GPS.c: 13: TempVar000 = 0x07 & (Time[2]-0x30);
  7093  08FB  0834               	movf	WriteToRTC@Time^(0+128),w
  7094  08FC  3E02               	addlw	2
  7095                           
  7096                           ;gsk_RTC_GPS.c: 14: TempVar000 = TempVar000<<4;
  7097                           
  7098                           ;gsk_RTC_GPS.c: 15: TempVar000 = TempVar000 | (0x0f & (Time[3]-0x30));
  7099  08FD  228F  120A  158A   	fcall	PL12	;call to abstracted procedure
  7100  0900  3E03               	addlw	3
  7101                           
  7102                           ;gsk_RTC_GPS.c: 16: TempVar000 = TempVar000|0x80;
  7103                           
  7104                           ;gsk_RTC_GPS.c: 17: I2C_WriteAtAddress(0xde, 0x01, TempVar000);
  7105  0901  22A4  120A  158A   	fcall	PL40	;call to abstracted procedure
  7106  0904  0AB1               	incf	I2C_WriteAtAddress@IntAdd^(0+128),f
  7107  0905  0835               	movf	WriteToRTC@TempVar000^(0+128),w
  7108  0906  00B2               	movwf	I2C_WriteAtAddress@data^(0+128)
  7109  0907  30DE               	movlw	222
  7110  0908  2118  120A  158A   	fcall	_I2C_WriteAtAddress
  7111                           
  7112                           ;gsk_RTC_GPS.c: 20: TempVar000 = 0x07 & (Time[4]-0x30);
  7113  090B  0834               	movf	WriteToRTC@Time^(0+128),w
  7114  090C  3E04               	addlw	4
  7115                           
  7116                           ;gsk_RTC_GPS.c: 21: TempVar000 = TempVar000<<4;
  7117                           
  7118                           ;gsk_RTC_GPS.c: 22: TempVar000 = TempVar000 | (0x0f & (Time[5]-0x30));
  7119  090D  228F  120A  158A   	fcall	PL12	;call to abstracted procedure
  7120  0910  3E05               	addlw	5
  7121                           
  7122                           ;gsk_RTC_GPS.c: 23: TempVar000 = TempVar000|0x80;
  7123                           
  7124                           ;gsk_RTC_GPS.c: 24: I2C_WriteAtAddress(0xde, 0x00, TempVar000);
  7125  0911  22A4  120A  158A   	fcall	PL40	;call to abstracted procedure
  7126  0914  0835               	movf	WriteToRTC@TempVar000^(0+128),w
  7127  0915  00B2               	movwf	I2C_WriteAtAddress@data^(0+128)
  7128  0916  30DE               	movlw	222
  7129  0917  2918               	ljmp	_I2C_WriteAtAddress
  7130  0918                     __end_of_WriteToRTC:	
  7131  0918                     __ptext44:	
  7132 ;; *************** function _I2C_WriteAtAddress *****************
  7133 ;; Defined at:
  7134 ;;		line 69 in file "libs/gsk_i2c.c"
  7135 ;; Parameters:    Size  Location     Type
  7136 ;;  DevID           1    wreg     unsigned char 
  7137 ;;  IntAdd          1   17[BANK1 ] unsigned char 
  7138 ;;  data            1   18[BANK1 ] unsigned char 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  DevID           1   19[BANK1 ] unsigned char 
  7141 ;; Return value:  Size  Location     Type
  7142 ;;                  1    wreg      void 
  7143 ;; Registers used:
  7144 ;;		wreg, status,2, status,0, pclath, cstack
  7145 ;; Tracked objects:
  7146 ;;		On entry : 300/900
  7147 ;;		On exit  : 300/100
  7148 ;;		Unchanged: 0/0
  7149 ;; Data sizes:      BANK1   BANK3  BANK2l
  7150 ;;      Params:         2       0       0
  7151 ;;      Locals:         1       0       0
  7152 ;;      Temps:          0       0       0
  7153 ;;      Totals:         3       0       0
  7154 ;;Total ram usage:        3 bytes
  7155 ;; Hardware stack levels used:    1
  7156 ;; Hardware stack levels required when called:    2
  7157 ;; This function calls:
  7158 ;;		_I2C_Master_Start
  7159 ;;		_I2C_Master_Stop
  7160 ;;		_I2C_Master_Write
  7161 ;; This function is called by:
  7162 ;;		_WriteToRTC
  7163 ;;		_SetOSCTRIM
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function _I2C_WriteAtAddress
  7169  0918                     _I2C_WriteAtAddress:	
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in _I2C_WriteAtAddress: [wreg+status,2+status,0+pclath+cstack]
  7173                           ;I2C_WriteAtAddress@DevID stored from wreg
  7174  0918  00B3               	movwf	I2C_WriteAtAddress@DevID^(0+128)
  7175                           
  7176                           ;gsk_i2c.c: 71: I2C_Master_Start();
  7177  0919  222E  120A  158A   	fcall	_I2C_Master_Start
  7178                           
  7179                           ;gsk_i2c.c: 72: I2C_Master_Write(DevID);
  7180  091C  0833               	movf	I2C_WriteAtAddress@DevID^(0+128),w
  7181  091D  00A0               	movwf	I2C_Master_Write@d^(0+128)
  7182  091E  01A1               	clrf	(I2C_Master_Write@d+1)^(0+128)
  7183  091F  2229  120A  158A   	fcall	_I2C_Master_Write
  7184                           
  7185                           ;gsk_i2c.c: 73: I2C_Master_Write(IntAdd);
  7186  0922  1683               	bsf	3,5	;RP0=1, select bank1
  7187  0923  0831               	movf	I2C_WriteAtAddress@IntAdd^(0+128),w
  7188  0924  00A0               	movwf	I2C_Master_Write@d^(0+128)
  7189  0925  01A1               	clrf	(I2C_Master_Write@d+1)^(0+128)
  7190  0926  2229  120A  158A   	fcall	_I2C_Master_Write
  7191                           
  7192                           ;gsk_i2c.c: 74: I2C_Master_Write(data);
  7193  0929  1683               	bsf	3,5	;RP0=1, select bank1
  7194  092A  0832               	movf	I2C_WriteAtAddress@data^(0+128),w
  7195  092B  00A0               	movwf	I2C_Master_Write@d^(0+128)
  7196  092C  01A1               	clrf	(I2C_Master_Write@d+1)^(0+128)
  7197  092D  2229  120A  158A   	fcall	_I2C_Master_Write
  7198                           
  7199                           ;gsk_i2c.c: 75: I2C_Master_Stop();
  7200  0930  2A59               	ljmp	l2577
  7201  0931                     __end_of_I2C_WriteAtAddress:	
  7202  0931                     __ptext20:	
  7203 ;; *************** function _ReadRTCAsSec *****************
  7204 ;; Defined at:
  7205 ;;		line 27 in file "libs/gsk_RTC_GPS.c"
  7206 ;; Parameters:    Size  Location     Type
  7207 ;;		None
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  Out             4   25[BANK1 ] long 
  7210 ;;  TempVar000      1   29[BANK1 ] unsigned char 
  7211 ;; Return value:  Size  Location     Type
  7212 ;;                  4   12[BANK1 ] long 
  7213 ;; Registers used:
  7214 ;;		wreg, status,2, status,0, pclath, cstack
  7215 ;; Tracked objects:
  7216 ;;		On entry : 100/900
  7217 ;;		On exit  : 300/100
  7218 ;;		Unchanged: 0/0
  7219 ;; Data sizes:      BANK1   BANK3  BANK2l
  7220 ;;      Params:         4       0       0
  7221 ;;      Locals:         7       0       0
  7222 ;;      Temps:          7       0       0
  7223 ;;      Totals:        18       0       0
  7224 ;;Total ram usage:       18 bytes
  7225 ;; Hardware stack levels used:    1
  7226 ;; Hardware stack levels required when called:    3
  7227 ;; This function calls:
  7228 ;;		_I2C_ReadAtAddress
  7229 ;;		___lmul
  7230 ;;		___wmul
  7231 ;; This function is called by:
  7232 ;;		_main
  7233 ;; This function uses a non-reentrant model
  7234 ;;
  7235                           
  7236                           
  7237                           ;psect for function _ReadRTCAsSec
  7238  0931                     _ReadRTCAsSec:	
  7239                           
  7240                           ;gsk_RTC_GPS.c: 30: TempVar000 = I2C_ReadAtAddress(0xde, 0x02);
  7241                           
  7242                           ;incstack = 0
  7243                           ; Regs used in _ReadRTCAsSec: [wreg+status,2+status,0+pclath+cstack]
  7244  0931  3002               	movlw	2
  7245  0932  1303               	bcf	3,6	;RP1=0, select bank1
  7246  0933  00A4               	movwf	I2C_ReadAtAddress@IntAdd^(0+128)
  7247  0934  30DE               	movlw	222
  7248  0935  21FE  120A  158A   	fcall	_I2C_ReadAtAddress
  7249  0938  00BD               	movwf	ReadRTCAsSec@TempVar000^(0+128)
  7250                           
  7251                           ;gsk_RTC_GPS.c: 31: Out = ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x03)*10);
  7252  0939  390F               	andlw	15
  7253  093A  00B0               	movwf	??_ReadRTCAsSec^(0+128)
  7254  093B  0E3D               	swapf	ReadRTCAsSec@TempVar000^(0+128),w
  7255  093C  390F               	andlw	15
  7256  093D  3903               	andlw	3
  7257  093E  00A0               	movwf	___wmul@multiplier^(0+128)
  7258  093F  300A               	movlw	10
  7259  0940  01A1               	clrf	(___wmul@multiplier+1)^(0+128)
  7260  0941  00A2               	movwf	___wmul@multiplicand^(0+128)
  7261  0942  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
  7262  0943  21E5  120A  158A   	fcall	___wmul
  7263  0946  0830               	movf	??_ReadRTCAsSec^(0+128),w
  7264  0947  0720               	addwf	?___wmul^(0+128),w
  7265  0948  00B9               	movwf	ReadRTCAsSec@Out^(0+128)
  7266  0949  3000               	movlw	0
  7267  094A  1803               	skipnc
  7268  094B  3001               	movlw	1
  7269  094C  0721               	addwf	(?___wmul+1)^(0+128),w
  7270  094D  00BA               	movwf	(ReadRTCAsSec@Out+1)^(0+128)
  7271  094E  01BB               	clrf	(ReadRTCAsSec@Out^(0+128)+2)
  7272  094F  1BBA               	btfsc	(ReadRTCAsSec@Out^(0+128)+1),7
  7273  0950  03BB               	decf	(ReadRTCAsSec@Out+2)^(0+128),f
  7274  0951  083B               	movf	(ReadRTCAsSec@Out^(0+128)+2),w
  7275  0952  00BC               	movwf	(ReadRTCAsSec@Out+3)^(0+128)
  7276                           
  7277                           ;gsk_RTC_GPS.c: 32: Out = Out*3600;
  7278  0953  300E               	movlw	14
  7279  0954  01A3               	clrf	(___lmul@multiplier+3)^(0+128)
  7280  0955  01A2               	clrf	(___lmul@multiplier+2)^(0+128)
  7281  0956  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  7282  0957  3010               	movlw	16
  7283  0958  00A0               	movwf	___lmul@multiplier^(0+128)
  7284  0959  083C               	movf	(ReadRTCAsSec@Out+3)^(0+128),w
  7285  095A  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
  7286  095B  083B               	movf	(ReadRTCAsSec@Out+2)^(0+128),w
  7287  095C  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
  7288  095D  083A               	movf	(ReadRTCAsSec@Out+1)^(0+128),w
  7289  095E  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
  7290  095F  0839               	movf	ReadRTCAsSec@Out^(0+128),w
  7291  0960  00A4               	movwf	___lmul@multiplicand^(0+128)
  7292  0961  225C  120A  158A   	fcall	___lmul
  7293  0964  0823               	movf	(?___lmul+3)^(0+128),w
  7294  0965  00BC               	movwf	(ReadRTCAsSec@Out+3)^(0+128)
  7295  0966  0822               	movf	(?___lmul+2)^(0+128),w
  7296  0967  00BB               	movwf	(ReadRTCAsSec@Out+2)^(0+128)
  7297  0968  0821               	movf	(?___lmul+1)^(0+128),w
  7298  0969  00BA               	movwf	(ReadRTCAsSec@Out+1)^(0+128)
  7299  096A  0820               	movf	?___lmul^(0+128),w
  7300  096B  00B9               	movwf	ReadRTCAsSec@Out^(0+128)
  7301  096C  30DE               	movlw	222
  7302                           
  7303                           ;gsk_RTC_GPS.c: 34: TempVar000 = I2C_ReadAtAddress(0xde, 0x01);
  7304  096D  01A4               	clrf	I2C_ReadAtAddress@IntAdd^(0+128)
  7305  096E  0AA4               	incf	I2C_ReadAtAddress@IntAdd^(0+128),f
  7306  096F  21FE  120A  158A   	fcall	_I2C_ReadAtAddress
  7307  0972  00BD               	movwf	ReadRTCAsSec@TempVar000^(0+128)
  7308                           
  7309                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  7310  0973  229B  120A  158A   	fcall	PL24	;call to abstracted procedure
  7311  0976  21E5  120A  158A   	fcall	___wmul
  7312  0979  0821               	movf	(?___wmul+1)^(0+128),w
  7313  097A  00B8               	movwf	(_ReadRTCAsSec$1776+1)^(0+128)
  7314  097B  0820               	movf	?___wmul^(0+128),w
  7315  097C  00B7               	movwf	_ReadRTCAsSec$1776^(0+128)
  7316  097D  083D               	movf	ReadRTCAsSec@TempVar000^(0+128),w
  7317  097E  390F               	andlw	15
  7318  097F  07B7               	addwf	_ReadRTCAsSec$1776^(0+128),f
  7319  0980  1803               	skipnc
  7320  0981  0AB8               	incf	(_ReadRTCAsSec$1776+1)^(0+128),f
  7321                           
  7322                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  7323  0982  0838               	movf	(_ReadRTCAsSec$1776+1)^(0+128),w
  7324  0983  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
  7325  0984  0837               	movf	_ReadRTCAsSec$1776^(0+128),w
  7326  0985  00A0               	movwf	___wmul@multiplier^(0+128)
  7327  0986  303C               	movlw	60
  7328  0987  00A2               	movwf	___wmul@multiplicand^(0+128)
  7329  0988  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
  7330  0989  21E5  120A  158A   	fcall	___wmul
  7331  098C  0820               	movf	?___wmul^(0+128),w
  7332  098D  00B0               	movwf	??_ReadRTCAsSec^(0+128)
  7333  098E  0821               	movf	(?___wmul+1)^(0+128),w
  7334  098F  00B1               	movwf	(??_ReadRTCAsSec^(0+128)+1)
  7335  0990  3000               	movlw	0
  7336  0991  1BB1               	btfsc	(??_ReadRTCAsSec^(0+128)+1),7
  7337  0992  30FF               	movlw	255
  7338  0993  00B2               	movwf	(??_ReadRTCAsSec^(0+128)+2)
  7339  0994  00B3               	movwf	(??_ReadRTCAsSec^(0+128)+3)
  7340  0995  0830               	movf	??_ReadRTCAsSec^(0+128),w
  7341  0996  07B9               	addwf	ReadRTCAsSec@Out^(0+128),f
  7342  0997  0831               	movf	(??_ReadRTCAsSec+1)^(0+128),w
  7343  0998  1103               	clrz
  7344  0999  1803               	skipnc
  7345  099A  3E01               	addlw	1
  7346  099B  1D03               	btfss	3,2
  7347  099C  07BA               	addwf	(ReadRTCAsSec@Out+1)^(0+128),f
  7348  099D  0832               	movf	(??_ReadRTCAsSec+2)^(0+128),w
  7349  099E  1103               	clrz
  7350  099F  1803               	skipnc
  7351  09A0  3E01               	addlw	1
  7352  09A1  1D03               	btfss	3,2
  7353  09A2  07BB               	addwf	(ReadRTCAsSec@Out+2)^(0+128),f
  7354  09A3  0833               	movf	(??_ReadRTCAsSec+3)^(0+128),w
  7355  09A4  1103               	clrz
  7356  09A5  1803               	skipnc
  7357  09A6  3E01               	addlw	1
  7358  09A7  1D03               	btfss	3,2
  7359  09A8  07BC               	addwf	(ReadRTCAsSec@Out+3)^(0+128),f
  7360  09A9  30DE               	movlw	222
  7361                           
  7362                           ;gsk_RTC_GPS.c: 37: TempVar000 = I2C_ReadAtAddress(0xde, 0x00);
  7363  09AA  01A4               	clrf	I2C_ReadAtAddress@IntAdd^(0+128)
  7364  09AB  21FE  120A  158A   	fcall	_I2C_ReadAtAddress
  7365  09AE  00BD               	movwf	ReadRTCAsSec@TempVar000^(0+128)
  7366                           
  7367                           ;gsk_RTC_GPS.c: 38: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10);
  7368  09AF  390F               	andlw	15
  7369  09B0  00B0               	movwf	??_ReadRTCAsSec^(0+128)
  7370  09B1  229B  120A  158A   	fcall	PL24	;call to abstracted procedure
  7371  09B4  21E5  120A  158A   	fcall	___wmul
  7372  09B7  0830               	movf	??_ReadRTCAsSec^(0+128),w
  7373  09B8  0720               	addwf	?___wmul^(0+128),w
  7374  09B9  00B1               	movwf	(??_ReadRTCAsSec+1)^(0+128)
  7375  09BA  3000               	movlw	0
  7376  09BB  1803               	skipnc
  7377  09BC  3001               	movlw	1
  7378  09BD  0721               	addwf	(?___wmul+1)^(0+128),w
  7379  09BE  00B2               	movwf	(??_ReadRTCAsSec+2)^(0+128)
  7380  09BF  0831               	movf	(??_ReadRTCAsSec+1)^(0+128),w
  7381  09C0  00B3               	movwf	(??_ReadRTCAsSec+3)^(0+128)
  7382  09C1  0832               	movf	(??_ReadRTCAsSec+2)^(0+128),w
  7383  09C2  00B4               	movwf	((??_ReadRTCAsSec+3)^(0+128)+1)
  7384  09C3  3000               	movlw	0
  7385  09C4  1BB4               	btfsc	((??_ReadRTCAsSec+3)^(0+128)+1),7
  7386  09C5  30FF               	movlw	255
  7387  09C6  00B5               	movwf	((??_ReadRTCAsSec+3)^(0+128)+2)
  7388  09C7  00B6               	movwf	((??_ReadRTCAsSec+3)^(0+128)+3)
  7389  09C8  0833               	movf	(??_ReadRTCAsSec+3)^(0+128),w
  7390  09C9  07B9               	addwf	ReadRTCAsSec@Out^(0+128),f
  7391  09CA  0834               	movf	(??_ReadRTCAsSec+4)^(0+128),w
  7392  09CB  1103               	clrz
  7393  09CC  1803               	skipnc
  7394  09CD  3E01               	addlw	1
  7395  09CE  1D03               	btfss	3,2
  7396  09CF  07BA               	addwf	(ReadRTCAsSec@Out+1)^(0+128),f
  7397  09D0  0835               	movf	(??_ReadRTCAsSec+5)^(0+128),w
  7398  09D1  1103               	clrz
  7399  09D2  1803               	skipnc
  7400  09D3  3E01               	addlw	1
  7401  09D4  1D03               	btfss	3,2
  7402  09D5  07BB               	addwf	(ReadRTCAsSec@Out+2)^(0+128),f
  7403  09D6  0836               	movf	(??_ReadRTCAsSec+6)^(0+128),w
  7404  09D7  1103               	clrz
  7405  09D8  1803               	skipnc
  7406  09D9  3E01               	addlw	1
  7407  09DA  1D03               	btfss	3,2
  7408  09DB  07BC               	addwf	(ReadRTCAsSec@Out+3)^(0+128),f
  7409                           
  7410                           ;gsk_RTC_GPS.c: 39: return Out;
  7411  09DC  083C               	movf	(ReadRTCAsSec@Out+3)^(0+128),w
  7412  09DD  00AF               	movwf	(?_ReadRTCAsSec+3)^(0+128)
  7413  09DE  083B               	movf	(ReadRTCAsSec@Out+2)^(0+128),w
  7414  09DF  00AE               	movwf	(?_ReadRTCAsSec+2)^(0+128)
  7415  09E0  083A               	movf	(ReadRTCAsSec@Out+1)^(0+128),w
  7416  09E1  00AD               	movwf	(?_ReadRTCAsSec+1)^(0+128)
  7417  09E2  0839               	movf	ReadRTCAsSec@Out^(0+128),w
  7418  09E3  00AC               	movwf	?_ReadRTCAsSec^(0+128)
  7419  09E4  0008               	return
  7420  09E5                     __end_of_ReadRTCAsSec:	
  7421  09E5                     __ptext21:	
  7422 ;; *************** function ___wmul *****************
  7423 ;; Defined at:
  7424 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;  multiplier      2    0[BANK1 ] unsigned int 
  7427 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  product         2    4[BANK1 ] unsigned int 
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  2    0[BANK1 ] unsigned int 
  7432 ;; Registers used:
  7433 ;;		wreg, status,2, status,0
  7434 ;; Tracked objects:
  7435 ;;		On entry : 300/900
  7436 ;;		On exit  : 300/100
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:      BANK1   BANK3  BANK2l
  7439 ;;      Params:         4       0       0
  7440 ;;      Locals:         2       0       0
  7441 ;;      Temps:          0       0       0
  7442 ;;      Totals:         6       0       0
  7443 ;;Total ram usage:        6 bytes
  7444 ;; Hardware stack levels used:    1
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_ReadRTCAsSec
  7449 ;;		_main
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           
  7454                           ;psect for function ___wmul
  7455  09E5                     ___wmul:	
  7456                           
  7457                           ;incstack = 0
  7458                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7459  09E5  01A4               	clrf	___wmul@product^(0+128)
  7460  09E6  01A5               	clrf	(___wmul@product+1)^(0+128)
  7461  09E7                     l3007:	
  7462  09E7  1C20               	btfss	___wmul@multiplier^(0+128),0
  7463  09E8  29EF               	goto	l3011
  7464  09E9  0822               	movf	___wmul@multiplicand^(0+128),w
  7465  09EA  07A4               	addwf	___wmul@product^(0+128),f
  7466  09EB  1803               	skipnc
  7467  09EC  0AA5               	incf	(___wmul@product+1)^(0+128),f
  7468  09ED  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  7469  09EE  07A5               	addwf	(___wmul@product+1)^(0+128),f
  7470  09EF                     l3011:	
  7471  09EF  1003               	clrc
  7472  09F0  0DA2               	rlf	___wmul@multiplicand^(0+128),f
  7473  09F1  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  7474  09F2  1003               	clrc
  7475  09F3  0CA1               	rrf	(___wmul@multiplier+1)^(0+128),f
  7476  09F4  0CA0               	rrf	___wmul@multiplier^(0+128),f
  7477  09F5  0820               	movf	___wmul@multiplier^(0+128),w
  7478  09F6  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
  7479  09F7  1D03               	btfss	3,2
  7480  09F8  29E7               	goto	l3007
  7481  09F9  0825               	movf	(___wmul@product+1)^(0+128),w
  7482  09FA  00A1               	movwf	(?___wmul+1)^(0+128)
  7483  09FB  0824               	movf	___wmul@product^(0+128),w
  7484  09FC  00A0               	movwf	?___wmul^(0+128)
  7485  09FD  0008               	return
  7486  09FE                     __end_of___wmul:	
  7487  09FE                     __ptext46:	
  7488 ;; *************** function _I2C_ReadAtAddress *****************
  7489 ;; Defined at:
  7490 ;;		line 55 in file "libs/gsk_i2c.c"
  7491 ;; Parameters:    Size  Location     Type
  7492 ;;  DevID           1    wreg     unsigned char 
  7493 ;;  IntAdd          1    4[BANK1 ] unsigned char 
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  DevID           1    6[BANK1 ] unsigned char 
  7496 ;;  data            1    5[BANK1 ] unsigned char 
  7497 ;; Return value:  Size  Location     Type
  7498 ;;                  1    wreg      unsigned char 
  7499 ;; Registers used:
  7500 ;;		wreg, status,2, status,0, pclath, cstack
  7501 ;; Tracked objects:
  7502 ;;		On entry : 300/900
  7503 ;;		On exit  : 300/100
  7504 ;;		Unchanged: 0/0
  7505 ;; Data sizes:      BANK1   BANK3  BANK2l
  7506 ;;      Params:         1       0       0
  7507 ;;      Locals:         2       0       0
  7508 ;;      Temps:          0       0       0
  7509 ;;      Totals:         3       0       0
  7510 ;;Total ram usage:        3 bytes
  7511 ;; Hardware stack levels used:    1
  7512 ;; Hardware stack levels required when called:    2
  7513 ;; This function calls:
  7514 ;;		_I2C_Master_Read
  7515 ;;		_I2C_Master_Start
  7516 ;;		_I2C_Master_Stop
  7517 ;;		_I2C_Master_Write
  7518 ;; This function is called by:
  7519 ;;		_ReadRTCAsSec
  7520 ;;		_GetOSCTRIM
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function _I2C_ReadAtAddress
  7526  09FE                     _I2C_ReadAtAddress:	
  7527                           
  7528                           ;incstack = 0
  7529                           ; Regs used in _I2C_ReadAtAddress: [wreg+status,2+status,0+pclath+cstack]
  7530                           ;I2C_ReadAtAddress@DevID stored from wreg
  7531  09FE  00A6               	movwf	I2C_ReadAtAddress@DevID^(0+128)
  7532                           
  7533                           ;gsk_i2c.c: 57: I2C_Master_Start();
  7534  09FF  222E  120A  158A   	fcall	_I2C_Master_Start
  7535                           
  7536                           ;gsk_i2c.c: 58: I2C_Master_Write(DevID);
  7537  0A02  0826               	movf	I2C_ReadAtAddress@DevID^(0+128),w
  7538  0A03  00A0               	movwf	I2C_Master_Write@d^(0+128)
  7539  0A04  01A1               	clrf	(I2C_Master_Write@d+1)^(0+128)
  7540  0A05  2229  120A  158A   	fcall	_I2C_Master_Write
  7541                           
  7542                           ;gsk_i2c.c: 59: I2C_Master_Write(IntAdd);
  7543  0A08  1683               	bsf	3,5	;RP0=1, select bank1
  7544  0A09  0824               	movf	I2C_ReadAtAddress@IntAdd^(0+128),w
  7545  0A0A  00A0               	movwf	I2C_Master_Write@d^(0+128)
  7546  0A0B  01A1               	clrf	(I2C_Master_Write@d+1)^(0+128)
  7547  0A0C  2229  120A  158A   	fcall	_I2C_Master_Write
  7548                           
  7549                           ;gsk_i2c.c: 60: I2C_Master_Stop();
  7550  0A0F  2259  120A  158A   	fcall	_I2C_Master_Stop
  7551                           
  7552                           ;gsk_i2c.c: 62: I2C_Master_Start();
  7553  0A12  222E  120A  158A   	fcall	_I2C_Master_Start
  7554                           
  7555                           ;gsk_i2c.c: 63: I2C_Master_Write(DevID+1);
  7556  0A15  0826               	movf	I2C_ReadAtAddress@DevID^(0+128),w
  7557  0A16  00A0               	movwf	I2C_Master_Write@d^(0+128)
  7558  0A17  01A1               	clrf	(I2C_Master_Write@d+1)^(0+128)
  7559  0A18  0AA0               	incf	I2C_Master_Write@d^(0+128),f
  7560  0A19  1903               	skipnz
  7561  0A1A  0AA1               	incf	(I2C_Master_Write@d+1)^(0+128),f
  7562  0A1B  2229  120A  158A   	fcall	_I2C_Master_Write
  7563                           
  7564                           ;gsk_i2c.c: 64: char data = I2C_Master_Read(0);
  7565  0A1E  1683               	bsf	3,5	;RP0=1, select bank1
  7566  0A1F  01A0               	clrf	I2C_Master_Read@a^(0+128)
  7567  0A20  01A1               	clrf	(I2C_Master_Read@a+1)^(0+128)
  7568  0A21  2231  120A  158A   	fcall	_I2C_Master_Read
  7569  0A24  0820               	movf	?_I2C_Master_Read^(0+128),w
  7570  0A25  00A5               	movwf	I2C_ReadAtAddress@data^(0+128)
  7571                           
  7572                           ;gsk_i2c.c: 65: I2C_Master_Stop();
  7573  0A26  2259               	fcall	_I2C_Master_Stop
  7574                           
  7575                           ;gsk_i2c.c: 66: return data;
  7576  0A27  0825               	movf	I2C_ReadAtAddress@data^(0+128),w
  7577  0A28  0008               	return
  7578  0A29                     __end_of_I2C_ReadAtAddress:	
  7579  0A29                     __ptext47:	
  7580 ;; *************** function _I2C_Master_Write *****************
  7581 ;; Defined at:
  7582 ;;		line 36 in file "libs/gsk_i2c.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;  d               2    0[BANK1 ] unsigned int 
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0, pclath, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 300/900
  7593 ;;		On exit  : 300/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:      BANK1   BANK3  BANK2l
  7596 ;;      Params:         2       0       0
  7597 ;;      Locals:         0       0       0
  7598 ;;      Temps:          0       0       0
  7599 ;;      Totals:         2       0       0
  7600 ;;Total ram usage:        2 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    1
  7603 ;; This function calls:
  7604 ;;		_I2C_Master_Wait
  7605 ;; This function is called by:
  7606 ;;		_I2C_ReadAtAddress
  7607 ;;		_I2C_WriteAtAddress
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           
  7612                           ;psect for function _I2C_Master_Write
  7613  0A29                     _I2C_Master_Write:	
  7614                           
  7615                           ;gsk_i2c.c: 38: I2C_Master_Wait();
  7616                           
  7617                           ;incstack = 0
  7618                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  7619  0A29  2251               	fcall	_I2C_Master_Wait
  7620                           
  7621                           ;gsk_i2c.c: 39: SSPBUF = d;
  7622  0A2A  0820               	movf	I2C_Master_Write@d^(0+128),w
  7623  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  7624  0A2C  0093               	movwf	19	;volatile
  7625  0A2D  0008               	return
  7626  0A2E                     __end_of_I2C_Master_Write:	
  7627  0A2E                     __ptext49:	
  7628 ;; *************** function _I2C_Master_Start *****************
  7629 ;; Defined at:
  7630 ;;		line 18 in file "libs/gsk_i2c.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, status,2, status,0, pclath, cstack
  7639 ;; Tracked objects:
  7640 ;;		On entry : 300/900
  7641 ;;		On exit  : 300/100
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:      BANK1   BANK3  BANK2l
  7644 ;;      Params:         0       0       0
  7645 ;;      Locals:         0       0       0
  7646 ;;      Temps:          0       0       0
  7647 ;;      Totals:         0       0       0
  7648 ;;Total ram usage:        0 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    1
  7651 ;; This function calls:
  7652 ;;		_I2C_Master_Wait
  7653 ;; This function is called by:
  7654 ;;		_I2C_ReadAtAddress
  7655 ;;		_I2C_WriteAtAddress
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _I2C_Master_Start
  7661  0A2E                     _I2C_Master_Start:	
  7662                           
  7663                           ;gsk_i2c.c: 20: I2C_Master_Wait();
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  7667  0A2E  2251               	fcall	_I2C_Master_Wait
  7668                           
  7669                           ;gsk_i2c.c: 21: SEN = 1;
  7670  0A2F  1411               	bsf	17,0	;volatile
  7671  0A30  0008               	return
  7672  0A31                     __end_of_I2C_Master_Start:	
  7673  0A31                     __ptext50:	
  7674 ;; *************** function _I2C_Master_Read *****************
  7675 ;; Defined at:
  7676 ;;		line 42 in file "libs/gsk_i2c.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  a               2    0[BANK1 ] unsigned short 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  temp            2    2[BANK1 ] unsigned short 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  2    0[BANK1 ] unsigned short 
  7683 ;; Registers used:
  7684 ;;		wreg, status,2, status,0, pclath, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : 300/900
  7687 ;;		On exit  : 300/100
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:      BANK1   BANK3  BANK2l
  7690 ;;      Params:         2       0       0
  7691 ;;      Locals:         2       0       0
  7692 ;;      Temps:          0       0       0
  7693 ;;      Totals:         4       0       0
  7694 ;;Total ram usage:        4 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    1
  7697 ;; This function calls:
  7698 ;;		_I2C_Master_Wait
  7699 ;; This function is called by:
  7700 ;;		_I2C_ReadAtAddress
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           
  7705                           ;psect for function _I2C_Master_Read
  7706  0A31                     _I2C_Master_Read:	
  7707                           
  7708                           ;gsk_i2c.c: 44: unsigned short temp;
  7709                           ;gsk_i2c.c: 45: I2C_Master_Wait();
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  7713  0A31  2251  120A  158A   	fcall	_I2C_Master_Wait
  7714                           
  7715                           ;gsk_i2c.c: 46: RCEN = 1;
  7716  0A34  1591               	bsf	17,3	;volatile
  7717                           
  7718                           ;gsk_i2c.c: 47: I2C_Master_Wait();
  7719  0A35  2251  120A  158A   	fcall	_I2C_Master_Wait
  7720                           
  7721                           ;gsk_i2c.c: 48: temp = SSPBUF;
  7722  0A38  1283               	bcf	3,5	;RP0=0, select bank0
  7723  0A39  0813               	movf	19,w	;volatile
  7724  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
  7725  0A3B  00A2               	movwf	I2C_Master_Read@temp^(0+128)
  7726  0A3C  01A3               	clrf	(I2C_Master_Read@temp+1)^(0+128)
  7727                           
  7728                           ;gsk_i2c.c: 49: I2C_Master_Wait();
  7729  0A3D  2251  120A  158A   	fcall	_I2C_Master_Wait
  7730                           
  7731                           ;gsk_i2c.c: 50: ACKDT = (a)?0:1;
  7732  0A40  0820               	movf	I2C_Master_Read@a^(0+128),w
  7733  0A41  0421               	iorwf	(I2C_Master_Read@a+1)^(0+128),w
  7734  0A42  1D03               	btfss	3,2
  7735  0A43  2A48               	goto	u2520
  7736  0A44  1683               	bsf	3,5	;RP0=1, select bank1
  7737  0A45  1303               	bcf	3,6	;RP1=0, select bank1
  7738  0A46  1691               	bsf	17,5	;volatile
  7739  0A47  2A4B               	goto	l2595
  7740  0A48                     u2520:	
  7741  0A48  1683               	bsf	3,5	;RP0=1, select bank1
  7742  0A49  1303               	bcf	3,6	;RP1=0, select bank1
  7743  0A4A  1291               	bcf	17,5	;volatile
  7744  0A4B                     l2595:	
  7745                           
  7746                           ;gsk_i2c.c: 51: ACKEN = 1;
  7747  0A4B  1611               	bsf	17,4	;volatile
  7748                           
  7749                           ;gsk_i2c.c: 52: return temp;
  7750  0A4C  0823               	movf	(I2C_Master_Read@temp+1)^(0+128),w
  7751  0A4D  00A1               	movwf	(?_I2C_Master_Read+1)^(0+128)
  7752  0A4E  0822               	movf	I2C_Master_Read@temp^(0+128),w
  7753  0A4F  00A0               	movwf	?_I2C_Master_Read^(0+128)
  7754  0A50  0008               	return
  7755  0A51                     __end_of_I2C_Master_Read:	
  7756  0A51                     __ptext51:	
  7757 ;; *************** function _I2C_Master_Wait *****************
  7758 ;; Defined at:
  7759 ;;		line 13 in file "libs/gsk_i2c.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      void 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2
  7768 ;; Tracked objects:
  7769 ;;		On entry : 200/900
  7770 ;;		On exit  : 300/100
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:      BANK1   BANK3  BANK2l
  7773 ;;      Params:         0       0       0
  7774 ;;      Locals:         0       0       0
  7775 ;;      Temps:          0       0       0
  7776 ;;      Totals:         0       0       0
  7777 ;;Total ram usage:        0 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_I2C_Master_Start
  7783 ;;		_I2C_Master_Stop
  7784 ;;		_I2C_Master_Write
  7785 ;;		_I2C_Master_Read
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _I2C_Master_Wait
  7791  0A51                     _I2C_Master_Wait:	
  7792  0A51                     l318:	
  7793                           ;gsk_i2c.c: 15: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  7794                           
  7795                           ;incstack = 0
  7796                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  7797                           
  7798  0A51  1683               	bsf	3,5	;RP0=1, select bank1
  7799  0A52  1914               	btfsc	20,2	;volatile
  7800  0A53  2A51               	goto	l318
  7801  0A54  0811               	movf	17,w	;volatile
  7802  0A55  391F               	andlw	31
  7803  0A56  1903               	btfsc	3,2
  7804  0A57  0008               	return
  7805  0A58  2A51               	goto	l318
  7806  0A59                     __end_of_I2C_Master_Wait:	
  7807  007E                     btemp	set	126	;btemp
  7808  007E                     wtemp	set	126
  7809  007E                     wtemp0	set	126
  7810  0080                     wtemp1	set	128
  7811  0082                     wtemp2	set	130
  7812  0084                     wtemp3	set	132
  7813  0086                     wtemp4	set	134
  7814  0088                     wtemp5	set	136
  7815  007F                     wtemp6	set	127
  7816  007E                     ttemp	set	126
  7817  007E                     ttemp0	set	126
  7818  0081                     ttemp1	set	129
  7819  0084                     ttemp2	set	132
  7820  0087                     ttemp3	set	135
  7821  007F                     ttemp4	set	127
  7822  007E                     ltemp	set	126
  7823  007E                     ltemp0	set	126
  7824  0082                     ltemp1	set	130
  7825  0086                     ltemp2	set	134
  7826  0080                     ltemp3	set	128
  7827  0A59                     __ptext48:	
  7828 ;; *************** function _I2C_Master_Stop *****************
  7829 ;; Defined at:
  7830 ;;		line 30 in file "libs/gsk_i2c.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;		None
  7833 ;; Auto vars:     Size  Location     Type
  7834 ;;		None
  7835 ;; Return value:  Size  Location     Type
  7836 ;;                  1    wreg      void 
  7837 ;; Registers used:
  7838 ;;		wreg, status,2, status,0, pclath, cstack
  7839 ;; Tracked objects:
  7840 ;;		On entry : 200/800
  7841 ;;		On exit  : 300/100
  7842 ;;		Unchanged: 0/0
  7843 ;; Data sizes:      BANK1   BANK3  BANK2l
  7844 ;;      Params:         0       0       0
  7845 ;;      Locals:         0       0       0
  7846 ;;      Temps:          0       0       0
  7847 ;;      Totals:         0       0       0
  7848 ;;Total ram usage:        0 bytes
  7849 ;; Hardware stack levels used:    1
  7850 ;; Hardware stack levels required when called:    1
  7851 ;; This function calls:
  7852 ;;		_I2C_Master_Wait
  7853 ;; This function is called by:
  7854 ;;		_I2C_ReadAtAddress
  7855 ;;		_I2C_WriteAtAddress
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           
  7860                           ;psect for function _I2C_Master_Stop
  7861  0A59                     _I2C_Master_Stop:	
  7862  0A59                     l2577:	
  7863                           ;incstack = 0
  7864                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  7865                           
  7866                           
  7867                           ;gsk_i2c.c: 32: I2C_Master_Wait();
  7868  0A59  2251               	fcall	_I2C_Master_Wait
  7869                           
  7870                           ;gsk_i2c.c: 33: PEN = 1;
  7871  0A5A  1511               	bsf	17,2	;volatile
  7872  0A5B  0008               	return
  7873  0A5C                     __end_of_I2C_Master_Stop:	
  7874  0A5C                     __ptext22:	
  7875 ;; *************** function ___lmul *****************
  7876 ;; Defined at:
  7877 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  multiplier      4    0[BANK1 ] unsigned long 
  7880 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  product         4    8[BANK1 ] unsigned long 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;                  4    0[BANK1 ] unsigned long 
  7885 ;; Registers used:
  7886 ;;		wreg, status,2, status,0
  7887 ;; Tracked objects:
  7888 ;;		On entry : 300/100
  7889 ;;		On exit  : 300/100
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:      BANK1   BANK3  BANK2l
  7892 ;;      Params:         8       0       0
  7893 ;;      Locals:         4       0       0
  7894 ;;      Temps:          0       0       0
  7895 ;;      Totals:        12       0       0
  7896 ;;Total ram usage:       12 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; This function calls:
  7899 ;;		Nothing
  7900 ;; This function is called by:
  7901 ;;		_WriteLongInt
  7902 ;;		_ReadRTCAsSec
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function ___lmul
  7908  0A5C                     ___lmul:	
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  7912  0A5C  01A8               	clrf	___lmul@product^(0+128)
  7913  0A5D  01A9               	clrf	(___lmul@product+1)^(0+128)
  7914  0A5E  01AA               	clrf	(___lmul@product+2)^(0+128)
  7915  0A5F  01AB               	clrf	(___lmul@product+3)^(0+128)
  7916  0A60                     l850:	
  7917  0A60  1C20               	btfss	___lmul@multiplier^(0+128),0
  7918  0A61  2A76               	goto	l3025
  7919  0A62  0824               	movf	___lmul@multiplicand^(0+128),w
  7920  0A63  07A8               	addwf	___lmul@product^(0+128),f
  7921  0A64  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  7922  0A65  1103               	clrz
  7923  0A66  1803               	skipnc
  7924  0A67  3E01               	addlw	1
  7925  0A68  1D03               	btfss	3,2
  7926  0A69  07A9               	addwf	(___lmul@product+1)^(0+128),f
  7927  0A6A  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  7928  0A6B  1103               	clrz
  7929  0A6C  1803               	skipnc
  7930  0A6D  3E01               	addlw	1
  7931  0A6E  1D03               	btfss	3,2
  7932  0A6F  07AA               	addwf	(___lmul@product+2)^(0+128),f
  7933  0A70  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  7934  0A71  1103               	clrz
  7935  0A72  1803               	skipnc
  7936  0A73  3E01               	addlw	1
  7937  0A74  1D03               	btfss	3,2
  7938  0A75  07AB               	addwf	(___lmul@product+3)^(0+128),f
  7939  0A76                     l3025:	
  7940  0A76  1003               	clrc
  7941  0A77  0DA4               	rlf	___lmul@multiplicand^(0+128),f
  7942  0A78  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  7943  0A79  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  7944  0A7A  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  7945  0A7B  1003               	clrc
  7946  0A7C  0CA3               	rrf	(___lmul@multiplier+3)^(0+128),f
  7947  0A7D  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  7948  0A7E  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  7949  0A7F  0CA0               	rrf	___lmul@multiplier^(0+128),f
  7950  0A80  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  7951  0A81  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  7952  0A82  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  7953  0A83  0420               	iorwf	___lmul@multiplier^(0+128),w
  7954  0A84  1D03               	skipz
  7955  0A85  2A60               	goto	l850
  7956  0A86  082B               	movf	(___lmul@product+3)^(0+128),w
  7957  0A87  00A3               	movwf	(?___lmul+3)^(0+128)
  7958  0A88  082A               	movf	(___lmul@product+2)^(0+128),w
  7959  0A89  00A2               	movwf	(?___lmul+2)^(0+128)
  7960  0A8A  0829               	movf	(___lmul@product+1)^(0+128),w
  7961  0A8B  00A1               	movwf	(?___lmul+1)^(0+128)
  7962  0A8C  0828               	movf	___lmul@product^(0+128),w
  7963  0A8D  00A0               	movwf	?___lmul^(0+128)
  7964  0A8E  0008               	return
  7965  0A8F                     __end_of___lmul:	
  7966  0A8F                     PL12:	
  7967  0A8F  0084               	movwf	4
  7968  0A90  1783               	bsf	3,7	;select IRP bank2
  7969  0A91  0800               	movf	0,w
  7970  0A92  3ED0               	addlw	208
  7971  0A93  00B5               	movwf	WriteToRTC@TempVar000^(0+128)
  7972  0A94  3007               	movlw	7
  7973  0A95  05B5               	andwf	WriteToRTC@TempVar000^(0+128),f
  7974  0A96  30F0               	movlw	240
  7975  0A97  0EB5               	swapf	WriteToRTC@TempVar000^(0+128),f
  7976  0A98  05B5               	andwf	WriteToRTC@TempVar000^(0+128),f
  7977  0A99  0834               	movf	WriteToRTC@Time^(0+128),w
  7978  0A9A  0008               	return
  7979  0A9B                     __end_ofPL12:	
  7980  0A9B                     PL24:	
  7981  0A9B  0E3D               	swapf	ReadRTCAsSec@TempVar000^(0+128),w
  7982  0A9C  390F               	andlw	15
  7983  0A9D  3907               	andlw	7
  7984  0A9E  00A0               	movwf	___wmul@multiplier^(0+128)
  7985  0A9F  300A               	movlw	10
  7986  0AA0  01A1               	clrf	(___wmul@multiplier+1)^(0+128)
  7987  0AA1  00A2               	movwf	___wmul@multiplicand^(0+128)
  7988  0AA2  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
  7989  0AA3  0008               	return
  7990  0AA4                     __end_ofPL24:	
  7991  0AA4                     PL40:	
  7992  0AA4  0084               	movwf	4
  7993  0AA5  0800               	movf	0,w
  7994  0AA6  3ED0               	addlw	208
  7995  0AA7  390F               	andlw	15
  7996  0AA8  04B5               	iorwf	WriteToRTC@TempVar000^(0+128),f
  7997  0AA9  17B5               	bsf	WriteToRTC@TempVar000^(0+128),7
  7998  0AAA  01B1               	clrf	I2C_WriteAtAddress@IntAdd^(0+128)
  7999  0AAB  0008               	return
  8000  0AAC                     __end_ofPL40:	
  8001                           
  8002                           	psect	text12
  8003  082E                     __ptext12:	
  8004 ;; *************** function _UART_ReadValidTimeFromGPS_TO *****************
  8005 ;; Defined at:
  8006 ;;		line 114 in file "libs/gsk_usart.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  Output          1    wreg     PTR unsigned char 
  8009 ;;		 -> main@GPSData(6), 
  8010 ;;  TimeOut         1    8[BANK1 ] unsigned char 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  Output          1    9[BANK1 ] PTR unsigned char 
  8013 ;;		 -> main@GPSData(6), 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      unsigned char 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 300/900
  8020 ;;		On exit  : B00/900
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:      BANK1   BANK3  BANK2l
  8023 ;;      Params:         1       0       0
  8024 ;;      Locals:         1       0       0
  8025 ;;      Temps:          0       0       0
  8026 ;;      Totals:         2       0       0
  8027 ;;Total ram usage:        2 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    2
  8030 ;; This function calls:
  8031 ;;		_IsValidGPS
  8032 ;;		_UART_ReadFromGPS_TO
  8033 ;; This function is called by:
  8034 ;;		_main
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           
  8039                           ;psect for function _UART_ReadValidTimeFromGPS_TO
  8040  082E                     _UART_ReadValidTimeFromGPS_TO:	
  8041                           
  8042                           ;incstack = 0
  8043                           ; Regs used in _UART_ReadValidTimeFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstac
      +                          k]
  8044                           ;UART_ReadValidTimeFromGPS_TO@Output stored from wreg
  8045  082E  00A9               	movwf	UART_ReadValidTimeFromGPS_TO@Output^(0+128)
  8046                           
  8047                           ;gsk_usart.c: 115: UART_ReadFromGPS_TO (Output, TimeOut);
  8048  082F  0828               	movf	UART_ReadValidTimeFromGPS_TO@TimeOut^(0+128),w
  8049  0830  00A1               	movwf	UART_ReadFromGPS_TO@TimeOut^(0+128)
  8050  0831  0829               	movf	UART_ReadValidTimeFromGPS_TO@Output^(0+128),w
  8051  0832  208B  120A  158A   	fcall	_UART_ReadFromGPS_TO
  8052                           
  8053                           ;gsk_usart.c: 116: return IsValidGPS(Output);
  8054  0835  1683               	bsf	3,5	;RP0=1, select bank1
  8055  0836  0829               	movf	UART_ReadValidTimeFromGPS_TO@Output^(0+128),w
  8056  0837  2838               	ljmp	_IsValidGPS
  8057  0838                     __end_of_UART_ReadValidTimeFromGPS_TO:	
  8058  0838                     __ptext15:	
  8059 ;; *************** function _IsValidGPS *****************
  8060 ;; Defined at:
  8061 ;;		line 120 in file "libs/gsk_usart.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  GPSData         1    wreg     PTR unsigned char 
  8064 ;;		 -> main@GPSData(6), 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  GPSData         1    1[BANK1 ] PTR unsigned char 
  8067 ;;		 -> main@GPSData(6), 
  8068 ;;  Result          1    0[BANK1 ] unsigned char 
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      unsigned char 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8073 ;; Tracked objects:
  8074 ;;		On entry : 300/900
  8075 ;;		On exit  : B00/900
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:      BANK1   BANK3  BANK2l
  8078 ;;      Params:         0       0       0
  8079 ;;      Locals:         2       0       0
  8080 ;;      Temps:          0       0       0
  8081 ;;      Totals:         2       0       0
  8082 ;;Total ram usage:        2 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; This function calls:
  8085 ;;		Nothing
  8086 ;; This function is called by:
  8087 ;;		_UART_ReadValidTimeFromGPS_TO
  8088 ;; This function uses a non-reentrant model
  8089 ;;
  8090                           
  8091                           
  8092                           ;psect for function _IsValidGPS
  8093  0838                     _IsValidGPS:	
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _IsValidGPS: [wreg-fsr0h+status,2+status,0]
  8097                           ;IsValidGPS@GPSData stored from wreg
  8098  0838  00A1               	movwf	IsValidGPS@GPSData^(0+128)
  8099                           
  8100                           ;gsk_usart.c: 121: bool Result;
  8101                           ;gsk_usart.c: 122: if (GPSData[0]<0x30 || GPSData[0]>0x32)
  8102  0839  0084               	movwf	4
  8103  083A  3030               	movlw	48
  8104  083B  1783               	bsf	3,7	;select IRP bank2
  8105  083C  0200               	subwf	0,w
  8106  083D  1C03               	skipc
  8107  083E  2844               	goto	l2969
  8108  083F  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8109  0840  0084               	movwf	4
  8110  0841  3033               	movlw	51
  8111  0842  0200               	subwf	0,w
  8112  0843  1803               	btfsc	3,0
  8113  0844                     l2969:	
  8114                           
  8115                           ;gsk_usart.c: 123: Result = 0;
  8116  0844  01A0               	clrf	IsValidGPS@Result^(0+128)
  8117                           
  8118                           ;gsk_usart.c: 124: if (GPSData[1]<0x30 || GPSData[1]>0x39)
  8119  0845  0A21               	incf	IsValidGPS@GPSData^(0+128),w
  8120  0846  0084               	movwf	4
  8121  0847  3030               	movlw	48
  8122  0848  0200               	subwf	0,w
  8123  0849  1C03               	skipc
  8124  084A  2850               	goto	l2975
  8125  084B  0A21               	incf	IsValidGPS@GPSData^(0+128),w
  8126  084C  0084               	movwf	4
  8127  084D  303A               	movlw	58
  8128  084E  0200               	subwf	0,w
  8129  084F  1803               	btfsc	3,0
  8130  0850                     l2975:	
  8131                           
  8132                           ;gsk_usart.c: 125: Result = 0;
  8133  0850  01A0               	clrf	IsValidGPS@Result^(0+128)
  8134                           
  8135                           ;gsk_usart.c: 126: if (GPSData[2]<0x30 || GPSData[2]>0x36)
  8136  0851  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8137  0852  3E02               	addlw	2
  8138  0853  0084               	movwf	4
  8139  0854  3030               	movlw	48
  8140  0855  0200               	subwf	0,w
  8141  0856  1C03               	skipc
  8142  0857  285E               	goto	l2981
  8143  0858  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8144  0859  3E02               	addlw	2
  8145  085A  0084               	movwf	4
  8146  085B  3037               	movlw	55
  8147  085C  0200               	subwf	0,w
  8148  085D  1803               	btfsc	3,0
  8149  085E                     l2981:	
  8150                           
  8151                           ;gsk_usart.c: 127: Result = 0;
  8152  085E  01A0               	clrf	IsValidGPS@Result^(0+128)
  8153                           
  8154                           ;gsk_usart.c: 128: if (GPSData[3]<0x30 || GPSData[3]>0x39)
  8155  085F  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8156  0860  3E03               	addlw	3
  8157  0861  0084               	movwf	4
  8158  0862  3030               	movlw	48
  8159  0863  0200               	subwf	0,w
  8160  0864  1C03               	skipc
  8161  0865  286C               	goto	l2987
  8162  0866  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8163  0867  3E03               	addlw	3
  8164  0868  0084               	movwf	4
  8165  0869  303A               	movlw	58
  8166  086A  0200               	subwf	0,w
  8167  086B  1803               	btfsc	3,0
  8168  086C                     l2987:	
  8169                           
  8170                           ;gsk_usart.c: 129: Result = 0;
  8171  086C  01A0               	clrf	IsValidGPS@Result^(0+128)
  8172                           
  8173                           ;gsk_usart.c: 130: if (GPSData[4]<0x30 || GPSData[4]>0x36)
  8174  086D  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8175  086E  3E04               	addlw	4
  8176  086F  0084               	movwf	4
  8177  0870  3030               	movlw	48
  8178  0871  0200               	subwf	0,w
  8179  0872  1C03               	skipc
  8180  0873  287A               	goto	l2993
  8181  0874  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8182  0875  3E04               	addlw	4
  8183  0876  0084               	movwf	4
  8184  0877  3037               	movlw	55
  8185  0878  0200               	subwf	0,w
  8186  0879  1803               	btfsc	3,0
  8187  087A                     l2993:	
  8188                           
  8189                           ;gsk_usart.c: 131: Result = 0;
  8190  087A  01A0               	clrf	IsValidGPS@Result^(0+128)
  8191                           
  8192                           ;gsk_usart.c: 132: if (GPSData[5]<0x30 || GPSData[5]>0x39)
  8193  087B  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8194  087C  3E05               	addlw	5
  8195  087D  0084               	movwf	4
  8196  087E  3030               	movlw	48
  8197  087F  0200               	subwf	0,w
  8198  0880  1C03               	skipc
  8199  0881  2888               	goto	l2999
  8200  0882  0821               	movf	IsValidGPS@GPSData^(0+128),w
  8201  0883  3E05               	addlw	5
  8202  0884  0084               	movwf	4
  8203  0885  303A               	movlw	58
  8204  0886  0200               	subwf	0,w
  8205  0887  1803               	btfsc	3,0
  8206  0888                     l2999:	
  8207                           
  8208                           ;gsk_usart.c: 133: Result = 0;
  8209  0888  01A0               	clrf	IsValidGPS@Result^(0+128)
  8210                           
  8211                           ;gsk_usart.c: 134: return Result;
  8212  0889  0820               	movf	IsValidGPS@Result^(0+128),w
  8213  088A  0008               	return
  8214  088B                     __end_of_IsValidGPS:	
  8215  088B                     __ptext13:	
  8216 ;; *************** function _UART_ReadFromGPS_TO *****************
  8217 ;; Defined at:
  8218 ;;		line 80 in file "libs/gsk_usart.c"
  8219 ;; Parameters:    Size  Location     Type
  8220 ;;  Output          1    wreg     PTR unsigned char 
  8221 ;;		 -> main@GPSData(6), 
  8222 ;;  TimeOut         1    1[BANK1 ] unsigned char 
  8223 ;; Auto vars:     Size  Location     Type
  8224 ;;  Output          1    5[BANK1 ] PTR unsigned char 
  8225 ;;		 -> main@GPSData(6), 
  8226 ;;  i               2    3[BANK1 ] unsigned int 
  8227 ;;  Pos             1    7[BANK1 ] unsigned char 
  8228 ;;  TempChar        1    6[BANK1 ] unsigned char 
  8229 ;; Return value:  Size  Location     Type
  8230 ;;                  1    wreg      void 
  8231 ;; Registers used:
  8232 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8233 ;; Tracked objects:
  8234 ;;		On entry : 300/900
  8235 ;;		On exit  : 200/0
  8236 ;;		Unchanged: 0/0
  8237 ;; Data sizes:      BANK1   BANK3  BANK2l
  8238 ;;      Params:         1       0       0
  8239 ;;      Locals:         5       0       0
  8240 ;;      Temps:          1       0       0
  8241 ;;      Totals:         7       0       0
  8242 ;;Total ram usage:        7 bytes
  8243 ;; Hardware stack levels used:    1
  8244 ;; Hardware stack levels required when called:    1
  8245 ;; This function calls:
  8246 ;;		_UART_Read_TO
  8247 ;; This function is called by:
  8248 ;;		_UART_ReadValidTimeFromGPS_TO
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function _UART_ReadFromGPS_TO
  8254  088B                     _UART_ReadFromGPS_TO:	
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in _UART_ReadFromGPS_TO: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8258                           ;UART_ReadFromGPS_TO@Output stored from wreg
  8259  088B  00A5               	movwf	UART_ReadFromGPS_TO@Output^(0+128)
  8260                           
  8261                           ;gsk_usart.c: 81: Output[0]=0x00;
  8262  088C  0084               	movwf	4
  8263  088D  1783               	bsf	3,7	;select IRP bank2
  8264  088E  0180               	clrf	0
  8265                           
  8266                           ;gsk_usart.c: 82: const char StartCode[7]="$GPRMC,";
  8267                           ;gsk_usart.c: 83: char Pos=0x00;
  8268  088F  01A7               	clrf	UART_ReadFromGPS_TO@Pos^(0+128)
  8269                           
  8270                           ;gsk_usart.c: 85: CREN = 0;
  8271  0890  1283               	bcf	3,5	;RP0=0, select bank0
  8272  0891  1218               	bcf	24,4	;volatile
  8273                           
  8274                           ;gsk_usart.c: 86: CREN = 1;
  8275  0892  1618               	bsf	24,4	;volatile
  8276                           
  8277                           ;gsk_usart.c: 87: for(uint16_t i=0; i<=768; i++) {
  8278  0893  1683               	bsf	3,5	;RP0=1, select bank1
  8279  0894  01A3               	clrf	UART_ReadFromGPS_TO@i^(0+128)
  8280  0895  01A4               	clrf	(UART_ReadFromGPS_TO@i+1)^(0+128)
  8281  0896                     l2937:	
  8282                           
  8283                           ;gsk_usart.c: 89: TempChar = UART_Read_TO(TimeOut);
  8284  0896  0821               	movf	UART_ReadFromGPS_TO@TimeOut^(0+128),w
  8285  0897  20CF  120A  158A   	fcall	_UART_Read_TO
  8286  089A  1683               	bsf	3,5	;RP0=1, select bank1
  8287  089B  00A6               	movwf	UART_ReadFromGPS_TO@TempChar^(0+128)
  8288                           
  8289                           ;gsk_usart.c: 90: if ((Pos>=0x07) & (Pos<=0x0c)) {
  8290  089C  3007               	movlw	7
  8291  089D  0227               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  8292  089E  1C03               	skipc
  8293  089F  28AE               	goto	l2947
  8294  08A0  300D               	movlw	13
  8295  08A1  0227               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  8296                           
  8297                           ;gsk_usart.c: 91: Output[Pos-0x07]= TempChar;
  8298  08A2  0827               	movf	UART_ReadFromGPS_TO@Pos^(0+128),w
  8299  08A3  1803               	skipnc
  8300  08A4  28AF               	goto	L18
  8301  08A5  0725               	addwf	UART_ReadFromGPS_TO@Output^(0+128),w
  8302  08A6  00A2               	movwf	??_UART_ReadFromGPS_TO^(0+128)
  8303  08A7  3EF9               	addlw	-7
  8304  08A8  0084               	movwf	4
  8305  08A9  0826               	movf	UART_ReadFromGPS_TO@TempChar^(0+128),w
  8306  08AA  1783               	bsf	3,7	;select IRP bank2
  8307  08AB  0080               	movwf	0
  8308  08AC                     l2945:	
  8309                           
  8310                           ;gsk_usart.c: 92: Pos++;
  8311  08AC  0AA7               	incf	UART_ReadFromGPS_TO@Pos^(0+128),f
  8312                           
  8313                           ;gsk_usart.c: 93: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  8314  08AD  28C2               	goto	l2961
  8315  08AE                     l2947:	
  8316  08AE  0827               	movf	UART_ReadFromGPS_TO@Pos^(0+128),w
  8317  08AF                     L18:	
  8318  08AF  3E01               	addlw	low ((UART_ReadFromGPS_TO@StartCode-__stringbase)| (0+32768))
  8319  08B0  0084               	movwf	4
  8320  08B1  160A  118A  2000  120A  158A  	fcall	stringdir
  8321  08B6  0626               	xorwf	UART_ReadFromGPS_TO@TempChar^(0+128),w
  8322  08B7  1D03               	skipz
  8323  08B8  28BD               	goto	l2953
  8324  08B9  3007               	movlw	7
  8325  08BA  0227               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  8326  08BB  1C03               	btfss	3,0
  8327  08BC  28AC               	goto	l2945
  8328  08BD                     l2953:	
  8329  08BD  300D               	movlw	13
  8330  08BE  0227               	subwf	UART_ReadFromGPS_TO@Pos^(0+128),w
  8331  08BF  1803               	btfsc	3,0
  8332  08C0  0008               	return
  8333                           
  8334                           ;gsk_usart.c: 97: else
  8335                           ;gsk_usart.c: 98: Pos=0;
  8336  08C1  01A7               	clrf	UART_ReadFromGPS_TO@Pos^(0+128)
  8337  08C2                     l2961:	
  8338  08C2  0AA3               	incf	UART_ReadFromGPS_TO@i^(0+128),f
  8339  08C3  1903               	skipnz
  8340  08C4  0AA4               	incf	(UART_ReadFromGPS_TO@i+1)^(0+128),f
  8341  08C5  3003               	movlw	3
  8342  08C6  0224               	subwf	(UART_ReadFromGPS_TO@i+1)^(0+128),w
  8343  08C7  3001               	movlw	1
  8344  08C8  1903               	skipnz
  8345  08C9  0223               	subwf	UART_ReadFromGPS_TO@i^(0+128),w
  8346  08CA  1C03               	skipc
  8347  08CB  2896               	goto	l2937
  8348                           
  8349                           ;gsk_usart.c: 99: }
  8350                           ;gsk_usart.c: 100: CREN = 0;
  8351  08CC  1283               	bcf	3,5	;RP0=0, select bank0
  8352  08CD  1218               	bcf	24,4	;volatile
  8353  08CE  0008               	return
  8354  08CF                     __end_of_UART_ReadFromGPS_TO:	
  8355  08CF                     __ptext14:	
  8356 ;; *************** function _UART_Read_TO *****************
  8357 ;; Defined at:
  8358 ;;		line 103 in file "libs/gsk_usart.c"
  8359 ;; Parameters:    Size  Location     Type
  8360 ;;  TimeOut         1    wreg     unsigned char 
  8361 ;; Auto vars:     Size  Location     Type
  8362 ;;  TimeOut         1    0[BANK1 ] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      unsigned char 
  8365 ;; Registers used:
  8366 ;;		wreg, status,2, status,0
  8367 ;; Tracked objects:
  8368 ;;		On entry : 300/900
  8369 ;;		On exit  : 300/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:      BANK1   BANK3  BANK2l
  8372 ;;      Params:         0       0       0
  8373 ;;      Locals:         1       0       0
  8374 ;;      Temps:          0       0       0
  8375 ;;      Totals:         1       0       0
  8376 ;;Total ram usage:        1 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; This function calls:
  8379 ;;		Nothing
  8380 ;; This function is called by:
  8381 ;;		_UART_ReadFromGPS_TO
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           
  8386                           ;psect for function _UART_Read_TO
  8387  08CF                     _UART_Read_TO:	
  8388                           
  8389                           ;incstack = 0
  8390                           ; Regs used in _UART_Read_TO: [wreg+status,2+status,0]
  8391                           ;UART_Read_TO@TimeOut stored from wreg
  8392  08CF  00A0               	movwf	UART_Read_TO@TimeOut^(0+128)
  8393                           
  8394                           ;gsk_usart.c: 104: while(!RCIF && TimeOut !=0) {
  8395  08D0  28D9               	goto	l2813
  8396  08D1                     l2815:	
  8397  08D1  1683               	bsf	3,5	;RP0=1, select bank1
  8398  08D2  0820               	movf	UART_Read_TO@TimeOut^(0+128),w
  8399  08D3  1903               	btfsc	3,2
  8400  08D4  28DC               	goto	l568
  8401                           
  8402                           ;gsk_usart.c: 105: _delay((unsigned long)((1)*(4000000/4000000.0)));
  8403  08D5  0000               	nop
  8404                           
  8405                           ;gsk_usart.c: 106: TimeOut--;
  8406  08D6  1683               	bsf	3,5	;RP0=1, select bank1
  8407  08D7  1303               	bcf	3,6	;RP1=0, select bank1
  8408  08D8  03A0               	decf	UART_Read_TO@TimeOut^(0+128),f
  8409  08D9                     l2813:	
  8410  08D9  1283               	bcf	3,5	;RP0=0, select bank0
  8411  08DA  1E8C               	btfss	12,5	;volatile
  8412  08DB  28D1               	goto	l2815
  8413  08DC                     l568:	
  8414                           
  8415                           ;gsk_usart.c: 107: }
  8416                           ;gsk_usart.c: 108: if (RCIF)
  8417  08DC  1283               	bcf	3,5	;RP0=0, select bank0
  8418  08DD  1E8C               	btfss	12,5	;volatile
  8419  08DE  3441               	retlw	65
  8420                           
  8421                           ;gsk_usart.c: 109: return RCREG;
  8422  08DF  081A               	movf	26,w	;volatile
  8423  08E0  0008               	return
  8424  08E1                     __end_of_UART_Read_TO:	
  8425                           ;gsk_usart.c: 110: else
  8426                           ;gsk_usart.c: 111: return 0x41;
  8427                           
  8428                           
  8429                           	psect	text23
  8430  1658                     __ptext23:	
  8431 ;; *************** function _I2C_Master_Init *****************
  8432 ;; Defined at:
  8433 ;;		line 3 in file "libs/gsk_i2c.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;  c               4   13[BANK1 ] const unsigned long 
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;		None
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  1    wreg      void 
  8440 ;; Registers used:
  8441 ;;		wreg, status,2, status,0, pclath, cstack
  8442 ;; Tracked objects:
  8443 ;;		On entry : B00/900
  8444 ;;		On exit  : B00/900
  8445 ;;		Unchanged: 800/0
  8446 ;; Data sizes:      BANK1   BANK3  BANK2l
  8447 ;;      Params:         4       0       0
  8448 ;;      Locals:         0       0       0
  8449 ;;      Temps:          4       0       0
  8450 ;;      Totals:         8       0       0
  8451 ;;Total ram usage:        8 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    1
  8454 ;; This function calls:
  8455 ;;		___lldiv
  8456 ;; This function is called by:
  8457 ;;		_main
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           
  8462                           ;psect for function _I2C_Master_Init
  8463  1658                     _I2C_Master_Init:	
  8464                           
  8465                           ;gsk_i2c.c: 5: SSPCON = 0b00101000;
  8466                           
  8467                           ;incstack = 0
  8468                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  8469  1658  3028               	movlw	40
  8470  1659  1283               	bcf	3,5	;RP0=0, select bank0
  8471  165A  0094               	movwf	20	;volatile
  8472                           
  8473                           ;gsk_i2c.c: 6: SSPCON2 = 0;
  8474  165B  1683               	bsf	3,5	;RP0=1, select bank1
  8475  165C  0191               	clrf	17	;volatile
  8476                           
  8477                           ;gsk_i2c.c: 7: SSPADD = (4000000/(4*c))-1;
  8478  165D  082D               	movf	I2C_Master_Init@c^(0+128),w
  8479  165E  00B1               	movwf	??_I2C_Master_Init^(0+128)
  8480  165F  082E               	movf	(I2C_Master_Init@c+1)^(0+128),w
  8481  1660  00B2               	movwf	(??_I2C_Master_Init^(0+128)+1)
  8482  1661  082F               	movf	(I2C_Master_Init@c+2)^(0+128),w
  8483  1662  00B3               	movwf	(??_I2C_Master_Init^(0+128)+2)
  8484  1663  0830               	movf	(I2C_Master_Init@c+3)^(0+128),w
  8485  1664  00B4               	movwf	(??_I2C_Master_Init^(0+128)+3)
  8486  1665  3002               	movlw	2
  8487  1666                     u3965:	
  8488  1666  1003               	clrc
  8489  1667  0DB1               	rlf	??_I2C_Master_Init^(0+128),f
  8490  1668  0DB2               	rlf	(??_I2C_Master_Init^(0+128)+1),f
  8491  1669  0DB3               	rlf	(??_I2C_Master_Init^(0+128)+2),f
  8492  166A  0DB4               	rlf	(??_I2C_Master_Init^(0+128)+3),f
  8493  166B  3EFF               	addlw	-1
  8494  166C  1D03               	skipz
  8495  166D  2E66               	goto	u3965
  8496  166E  0834               	movf	(??_I2C_Master_Init+3)^(0+128),w
  8497  166F  00A3               	movwf	(___lldiv@divisor+3)^(0+128)
  8498  1670  0833               	movf	(??_I2C_Master_Init+2)^(0+128),w
  8499  1671  00A2               	movwf	(___lldiv@divisor+2)^(0+128)
  8500  1672  0832               	movf	(??_I2C_Master_Init+1)^(0+128),w
  8501  1673  00A1               	movwf	(___lldiv@divisor+1)^(0+128)
  8502  1674  0831               	movf	??_I2C_Master_Init^(0+128),w
  8503  1675  00A0               	movwf	___lldiv@divisor^(0+128)
  8504  1676  303D               	movlw	61
  8505  1677  01A7               	clrf	(___lldiv@dividend+3)^(0+128)
  8506  1678  00A6               	movwf	(___lldiv@dividend+2)^(0+128)
  8507  1679  3009               	movlw	9
  8508  167A  00A5               	movwf	(___lldiv@dividend+1)^(0+128)
  8509  167B  01A4               	clrf	___lldiv@dividend^(0+128)
  8510  167C  2684               	fcall	___lldiv
  8511  167D  0820               	movf	?___lldiv^(0+128),w
  8512  167E  3EFF               	addlw	255
  8513  167F  0093               	movwf	19	;volatile
  8514                           
  8515                           ;gsk_i2c.c: 8: SSPSTAT = 0;
  8516  1680  0194               	clrf	20	;volatile
  8517                           
  8518                           ;gsk_i2c.c: 9: TRISC3 = 1;
  8519  1681  1587               	bsf	7,3	;volatile
  8520                           
  8521                           ;gsk_i2c.c: 10: TRISC4 = 1;
  8522  1682  1607               	bsf	7,4	;volatile
  8523  1683  0008               	return
  8524  1684                     __end_of_I2C_Master_Init:	
  8525  1684                     __ptext24:	
  8526 ;; *************** function ___lldiv *****************
  8527 ;; Defined at:
  8528 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;  divisor         4    0[BANK1 ] unsigned long 
  8531 ;;  dividend        4    4[BANK1 ] unsigned long 
  8532 ;; Auto vars:     Size  Location     Type
  8533 ;;  quotient        4    8[BANK1 ] unsigned long 
  8534 ;;  counter         1   12[BANK1 ] unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;                  4    0[BANK1 ] unsigned long 
  8537 ;; Registers used:
  8538 ;;		wreg, status,2, status,0
  8539 ;; Tracked objects:
  8540 ;;		On entry : B00/900
  8541 ;;		On exit  : B00/900
  8542 ;;		Unchanged: 800/0
  8543 ;; Data sizes:      BANK1   BANK3  BANK2l
  8544 ;;      Params:         8       0       0
  8545 ;;      Locals:         5       0       0
  8546 ;;      Temps:          0       0       0
  8547 ;;      Totals:        13       0       0
  8548 ;;Total ram usage:       13 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_I2C_Master_Init
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function ___lldiv
  8559  1684                     ___lldiv:	
  8560                           
  8561                           ;incstack = 0
  8562                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  8563  1684  01A8               	clrf	___lldiv@quotient^(0+128)
  8564  1685  01A9               	clrf	(___lldiv@quotient+1)^(0+128)
  8565  1686  01AA               	clrf	(___lldiv@quotient+2)^(0+128)
  8566  1687  01AB               	clrf	(___lldiv@quotient+3)^(0+128)
  8567  1688  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  8568  1689  0422               	iorwf	(___lldiv@divisor+2)^(0+128),w
  8569  168A  0421               	iorwf	(___lldiv@divisor+1)^(0+128),w
  8570  168B  0420               	iorwf	___lldiv@divisor^(0+128),w
  8571  168C  1903               	skipnz
  8572  168D  2EC3               	goto	l3199
  8573  168E  01AC               	clrf	___lldiv@counter^(0+128)
  8574  168F                     L21:	
  8575  168F  0AAC               	incf	___lldiv@counter^(0+128),f
  8576  1690  1BA3               	btfsc	(___lldiv@divisor+3)^(0+128),7
  8577  1691  2E98               	goto	l3187
  8578  1692  1003               	clrc
  8579  1693  0DA0               	rlf	___lldiv@divisor^(0+128),f
  8580  1694  0DA1               	rlf	(___lldiv@divisor+1)^(0+128),f
  8581  1695  0DA2               	rlf	(___lldiv@divisor+2)^(0+128),f
  8582  1696  0DA3               	rlf	(___lldiv@divisor+3)^(0+128),f
  8583  1697  2E8F               	goto	L21
  8584  1698                     l3187:	
  8585  1698  1003               	clrc
  8586  1699  0DA8               	rlf	___lldiv@quotient^(0+128),f
  8587  169A  0DA9               	rlf	(___lldiv@quotient+1)^(0+128),f
  8588  169B  0DAA               	rlf	(___lldiv@quotient+2)^(0+128),f
  8589  169C  0DAB               	rlf	(___lldiv@quotient+3)^(0+128),f
  8590  169D  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  8591  169E  0227               	subwf	(___lldiv@dividend+3)^(0+128),w
  8592  169F  1D03               	skipz
  8593  16A0  2EAB               	goto	u3825
  8594  16A1  0822               	movf	(___lldiv@divisor+2)^(0+128),w
  8595  16A2  0226               	subwf	(___lldiv@dividend+2)^(0+128),w
  8596  16A3  1D03               	skipz
  8597  16A4  2EAB               	goto	u3825
  8598  16A5  0821               	movf	(___lldiv@divisor+1)^(0+128),w
  8599  16A6  0225               	subwf	(___lldiv@dividend+1)^(0+128),w
  8600  16A7  1D03               	skipz
  8601  16A8  2EAB               	goto	u3825
  8602  16A9  0820               	movf	___lldiv@divisor^(0+128),w
  8603  16AA  0224               	subwf	___lldiv@dividend^(0+128),w
  8604  16AB                     u3825:	
  8605  16AB  1C03               	skipc
  8606  16AC  2EBD               	goto	L22
  8607  16AD  0820               	movf	___lldiv@divisor^(0+128),w
  8608  16AE  02A4               	subwf	___lldiv@dividend^(0+128),f
  8609  16AF  0821               	movf	(___lldiv@divisor+1)^(0+128),w
  8610  16B0  1C03               	skipc
  8611  16B1  0F21               	incfsz	(___lldiv@divisor+1)^(0+128),w
  8612  16B2  02A5               	subwf	(___lldiv@dividend+1)^(0+128),f
  8613  16B3  0822               	movf	(___lldiv@divisor+2)^(0+128),w
  8614  16B4  1C03               	skipc
  8615  16B5  0F22               	incfsz	(___lldiv@divisor+2)^(0+128),w
  8616  16B6  02A6               	subwf	(___lldiv@dividend+2)^(0+128),f
  8617  16B7  0823               	movf	(___lldiv@divisor+3)^(0+128),w
  8618  16B8  1C03               	skipc
  8619  16B9  0F23               	incfsz	(___lldiv@divisor+3)^(0+128),w
  8620  16BA  02A7               	subwf	(___lldiv@dividend+3)^(0+128),f
  8621  16BB  1428               	bsf	___lldiv@quotient^(0+128),0
  8622  16BC  1003               	clrc
  8623  16BD                     L22:	
  8624  16BD  0CA3               	rrf	(___lldiv@divisor+3)^(0+128),f
  8625  16BE  0CA2               	rrf	(___lldiv@divisor+2)^(0+128),f
  8626  16BF  0CA1               	rrf	(___lldiv@divisor+1)^(0+128),f
  8627  16C0  0CA0               	rrf	___lldiv@divisor^(0+128),f
  8628  16C1  0BAC               	decfsz	___lldiv@counter^(0+128),f
  8629  16C2  2E98               	goto	l3187
  8630  16C3                     l3199:	
  8631  16C3  082B               	movf	(___lldiv@quotient+3)^(0+128),w
  8632  16C4  00A3               	movwf	(?___lldiv+3)^(0+128)
  8633  16C5  082A               	movf	(___lldiv@quotient+2)^(0+128),w
  8634  16C6  00A2               	movwf	(?___lldiv+2)^(0+128)
  8635  16C7  0829               	movf	(___lldiv@quotient+1)^(0+128),w
  8636  16C8  00A1               	movwf	(?___lldiv+1)^(0+128)
  8637  16C9  0828               	movf	___lldiv@quotient^(0+128),w
  8638  16CA  00A0               	movwf	?___lldiv^(0+128)
  8639  16CB  0008               	return
  8640  16CC                     __end_of___lldiv:	
  8641                           
  8642                           	psect	text25
  8643  15EE                     __ptext25:	
  8644 ;; *************** function _GetTimePeriod *****************
  8645 ;; Defined at:
  8646 ;;		line 73 in file "libs/gsk_algo_funcs.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;  PrevTime        4    0[BANK1 ] long 
  8649 ;;  PresentTime     4    4[BANK1 ] long 
  8650 ;; Auto vars:     Size  Location     Type
  8651 ;;		None
  8652 ;; Return value:  Size  Location     Type
  8653 ;;                  4    0[BANK1 ] long 
  8654 ;; Registers used:
  8655 ;;		wreg, btemp+1
  8656 ;; Tracked objects:
  8657 ;;		On entry : 300/900
  8658 ;;		On exit  : 300/100
  8659 ;;		Unchanged: 0/0
  8660 ;; Data sizes:      BANK1   BANK3  BANK2l
  8661 ;;      Params:         8       0       0
  8662 ;;      Locals:         0       0       0
  8663 ;;      Temps:          8       0       0
  8664 ;;      Totals:        16       0       0
  8665 ;;Total ram usage:       16 bytes
  8666 ;; Hardware stack levels used:    1
  8667 ;; This function calls:
  8668 ;;		Nothing
  8669 ;; This function is called by:
  8670 ;;		_main
  8671 ;; This function uses a non-reentrant model
  8672 ;;
  8673                           
  8674                           
  8675                           ;psect for function _GetTimePeriod
  8676  15EE                     _GetTimePeriod:	
  8677                           
  8678                           ;gsk_algo_funcs.c: 74: if (PrevTime<=PresentTime)
  8679                           
  8680                           ;incstack = 0
  8681                           ; Regs used in _GetTimePeriod: [wreg+btemp+1]
  8682  15EE  0827               	movf	(GetTimePeriod@PresentTime+3)^(0+128),w
  8683  15EF  3A80               	xorlw	128
  8684  15F0  00FF               	movwf	127
  8685  15F1  0823               	movf	(GetTimePeriod@PrevTime+3)^(0+128),w
  8686  15F2  3A80               	xorlw	128
  8687  15F3  027F               	subwf	127,w
  8688  15F4  1D03               	skipz
  8689  15F5  2E00               	goto	u4143
  8690  15F6  0822               	movf	(GetTimePeriod@PrevTime+2)^(0+128),w
  8691  15F7  0226               	subwf	(GetTimePeriod@PresentTime+2)^(0+128),w
  8692  15F8  1D03               	skipz
  8693  15F9  2E00               	goto	u4143
  8694  15FA  0821               	movf	(GetTimePeriod@PrevTime+1)^(0+128),w
  8695  15FB  0225               	subwf	(GetTimePeriod@PresentTime+1)^(0+128),w
  8696  15FC  1D03               	skipz
  8697  15FD  2E00               	goto	u4143
  8698  15FE  0820               	movf	GetTimePeriod@PrevTime^(0+128),w
  8699  15FF  0224               	subwf	GetTimePeriod@PresentTime^(0+128),w
  8700  1600                     u4143:	
  8701  1600  1C03               	skipc
  8702  1601  2E1E               	goto	l3423
  8703                           
  8704                           ;gsk_algo_funcs.c: 75: return (PresentTime - PrevTime);
  8705  1602  0820               	movf	GetTimePeriod@PrevTime^(0+128),w
  8706  1603  0224               	subwf	GetTimePeriod@PresentTime^(0+128),w
  8707  1604  00A8               	movwf	??_GetTimePeriod^(0+128)
  8708  1605  0825               	movf	(GetTimePeriod@PresentTime+1)^(0+128),w
  8709  1606  00A9               	movwf	(??_GetTimePeriod^(0+128)+1)
  8710  1607  0821               	movf	(GetTimePeriod@PrevTime+1)^(0+128),w
  8711  1608  1C03               	skipc
  8712  1609  0F21               	incfsz	(GetTimePeriod@PrevTime+1)^(0+128),w
  8713  160A  02A9               	subwf	(??_GetTimePeriod^(0+128)+1),f
  8714  160B  1683               	bsf	3,5	;RP0=1, select bank1
  8715  160C  1303               	bcf	3,6	;RP1=0, select bank1
  8716  160D  0826               	movf	(GetTimePeriod@PresentTime+2)^(0+128),w
  8717  160E  00AA               	movwf	(??_GetTimePeriod^(0+128)+2)
  8718  160F  0822               	movf	(GetTimePeriod@PrevTime+2)^(0+128),w
  8719  1610  1C03               	skipc
  8720  1611  0F22               	incfsz	(GetTimePeriod@PrevTime+2)^(0+128),w
  8721  1612  02AA               	subwf	(??_GetTimePeriod^(0+128)+2),f
  8722  1613  1683               	bsf	3,5	;RP0=1, select bank1
  8723  1614  1303               	bcf	3,6	;RP1=0, select bank1
  8724  1615  0827               	movf	(GetTimePeriod@PresentTime+3)^(0+128),w
  8725  1616  00AB               	movwf	(??_GetTimePeriod^(0+128)+3)
  8726  1617  0823               	movf	(GetTimePeriod@PrevTime+3)^(0+128),w
  8727  1618  1C03               	skipc
  8728  1619  0F23               	incfsz	(GetTimePeriod@PrevTime+3)^(0+128),w
  8729  161A  02AB               	subwf	(??_GetTimePeriod^(0+128)+3),f
  8730  161B  1683               	bsf	3,5	;RP0=1, select bank1
  8731  161C  1303               	bcf	3,6	;RP1=0, select bank1
  8732  161D  2E4F               	ljmp	PL22	;call to abstracted procedure
  8733  161E                     l3423:	
  8734                           
  8735                           ;gsk_algo_funcs.c: 76: else
  8736                           ;gsk_algo_funcs.c: 77: return (86400-PrevTime + PresentTime);
  8737  161E  3080               	movlw	128
  8738  161F  00A8               	movwf	??_GetTimePeriod^(0+128)
  8739  1620  3051               	movlw	81
  8740  1621  00A9               	movwf	(??_GetTimePeriod^(0+128)+1)
  8741  1622  3001               	movlw	1
  8742  1623  00AA               	movwf	(??_GetTimePeriod^(0+128)+2)
  8743  1624  01AB               	clrf	(??_GetTimePeriod^(0+128)+3)
  8744  1625  0820               	movf	GetTimePeriod@PrevTime^(0+128),w
  8745  1626  0224               	subwf	GetTimePeriod@PresentTime^(0+128),w
  8746  1627  00AC               	movwf	(??_GetTimePeriod+4)^(0+128)
  8747  1628  0825               	movf	(GetTimePeriod@PresentTime+1)^(0+128),w
  8748  1629  00AD               	movwf	((??_GetTimePeriod+4)^(0+128)+1)
  8749  162A  0821               	movf	(GetTimePeriod@PrevTime+1)^(0+128),w
  8750  162B  1C03               	skipc
  8751  162C  0F21               	incfsz	(GetTimePeriod@PrevTime+1)^(0+128),w
  8752  162D  02AD               	subwf	((??_GetTimePeriod+4)^(0+128)+1),f
  8753  162E  1683               	bsf	3,5	;RP0=1, select bank1
  8754  162F  1303               	bcf	3,6	;RP1=0, select bank1
  8755  1630  0826               	movf	(GetTimePeriod@PresentTime+2)^(0+128),w
  8756  1631  00AE               	movwf	((??_GetTimePeriod+4)^(0+128)+2)
  8757  1632  0822               	movf	(GetTimePeriod@PrevTime+2)^(0+128),w
  8758  1633  1C03               	skipc
  8759  1634  0F22               	incfsz	(GetTimePeriod@PrevTime+2)^(0+128),w
  8760  1635  02AE               	subwf	((??_GetTimePeriod+4)^(0+128)+2),f
  8761  1636  1683               	bsf	3,5	;RP0=1, select bank1
  8762  1637  1303               	bcf	3,6	;RP1=0, select bank1
  8763  1638  0827               	movf	(GetTimePeriod@PresentTime+3)^(0+128),w
  8764  1639  00AF               	movwf	((??_GetTimePeriod+4)^(0+128)+3)
  8765  163A  0823               	movf	(GetTimePeriod@PrevTime+3)^(0+128),w
  8766  163B  1C03               	skipc
  8767  163C  0F23               	incfsz	(GetTimePeriod@PrevTime+3)^(0+128),w
  8768  163D  02AF               	subwf	((??_GetTimePeriod+4)^(0+128)+3),f
  8769  163E  1683               	bsf	3,5	;RP0=1, select bank1
  8770  163F  1303               	bcf	3,6	;RP1=0, select bank1
  8771  1640  082C               	movf	(??_GetTimePeriod+4)^(0+128),w
  8772  1641  07A8               	addwf	??_GetTimePeriod^(0+128),f
  8773  1642  082D               	movf	(??_GetTimePeriod+5)^(0+128),w
  8774  1643  1803               	skipnc
  8775  1644  0F2D               	incfsz	(??_GetTimePeriod+5)^(0+128),w
  8776  1645  07A9               	addwf	(??_GetTimePeriod^(0+128)+1),f
  8777  1646  082E               	movf	(??_GetTimePeriod+6)^(0+128),w
  8778  1647  1803               	skipnc
  8779  1648  0F2E               	incfsz	(??_GetTimePeriod+6)^(0+128),w
  8780  1649  07AA               	addwf	(??_GetTimePeriod^(0+128)+2),f
  8781  164A  082F               	movf	(??_GetTimePeriod+7)^(0+128),w
  8782  164B  1803               	skipnc
  8783  164C  0A2F               	incf	(??_GetTimePeriod+7)^(0+128),w
  8784  164D  07AB               	addwf	(??_GetTimePeriod^(0+128)+3),f
  8785  164E  2E4F               	ljmp	PL22	;call to abstracted procedure
  8786  164F                     __end_of_GetTimePeriod:	
  8787  164F                     PL22:	
  8788  164F  082B               	movf	(??_GetTimePeriod+3)^(0+128),w
  8789  1650  00A3               	movwf	(?_GetTimePeriod+3)^(0+128)
  8790  1651  082A               	movf	(??_GetTimePeriod+2)^(0+128),w
  8791  1652  00A2               	movwf	(?_GetTimePeriod+2)^(0+128)
  8792  1653  0829               	movf	(??_GetTimePeriod+1)^(0+128),w
  8793  1654  00A1               	movwf	(?_GetTimePeriod+1)^(0+128)
  8794  1655  0828               	movf	??_GetTimePeriod^(0+128),w
  8795  1656  00A0               	movwf	?_GetTimePeriod^(0+128)
  8796  1657  0008               	return
  8797  1658                     __end_ofPL22:	
  8798                           
  8799                           	psect	text27
  8800  16CC                     __ptext27:	
  8801 ;; *************** function _GetCumulativePeriodsForStates *****************
  8802 ;; Defined at:
  8803 ;;		line 3 in file "libs/gsk_algo_funcs.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  i               1    7[BANK1 ] unsigned char 
  8808 ;;  j               1    6[BANK1 ] unsigned char 
  8809 ;; Return value:  Size  Location     Type
  8810 ;;                  1    wreg      void 
  8811 ;; Registers used:
  8812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8813 ;; Tracked objects:
  8814 ;;		On entry : 300/200
  8815 ;;		On exit  : B00/900
  8816 ;;		Unchanged: 0/0
  8817 ;; Data sizes:      BANK1   BANK3  BANK2l
  8818 ;;      Params:         0       0       0
  8819 ;;      Locals:         2       0       0
  8820 ;;      Temps:          4       0       0
  8821 ;;      Totals:         6       0       0
  8822 ;;Total ram usage:        6 bytes
  8823 ;; Hardware stack levels used:    1
  8824 ;; Hardware stack levels required when called:    1
  8825 ;; This function calls:
  8826 ;;		_GetPrevCycle
  8827 ;; This function is called by:
  8828 ;;		_main
  8829 ;; This function uses a non-reentrant model
  8830 ;;
  8831                           
  8832                           
  8833                           ;psect for function _GetCumulativePeriodsForStates
  8834  16CC                     _GetCumulativePeriodsForStates:	
  8835                           
  8836                           ;gsk_algo_funcs.c: 4: char i, j;
  8837                           ;gsk_algo_funcs.c: 5: for (i=0; i< 2; i++) {
  8838                           
  8839                           ;incstack = 0
  8840                           ; Regs used in _GetCumulativePeriodsForStates: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
  8841  16CC  1683               	bsf	3,5	;RP0=1, select bank1
  8842  16CD  1303               	bcf	3,6	;RP1=0, select bank1
  8843  16CE  01A7               	clrf	GetCumulativePeriodsForStates@i^(0+128)
  8844  16CF                     l3355:	
  8845                           
  8846                           ;gsk_algo_funcs.c: 6: STATE_CUMULATIVE_PERIODS[i] = 0;
  8847  16CF  1003               	clrc
  8848  16D0  0D27               	rlf	GetCumulativePeriodsForStates@i^(0+128),w
  8849  16D1  3E7A               	addlw	122
  8850  16D2  0084               	movwf	4
  8851  16D3  1383               	bcf	3,7	;select IRP bank0
  8852  16D4  0180               	clrf	0
  8853  16D5  0A84               	incf	4,f
  8854  16D6  0180               	clrf	0
  8855                           
  8856                           ;gsk_algo_funcs.c: 7: if (i==0)
  8857  16D7  0827               	movf	GetCumulativePeriodsForStates@i^(0+128),w
  8858  16D8  1D03               	btfss	3,2
  8859  16D9  2EDC               	goto	l3361
  8860                           
  8861                           ;gsk_algo_funcs.c: 8: j = 0;
  8862  16DA  01A6               	clrf	GetCumulativePeriodsForStates@j^(0+128)
  8863  16DB  2EE5               	goto	l3367
  8864  16DC                     l3361:	
  8865                           
  8866                           ;gsk_algo_funcs.c: 9: else
  8867                           ;gsk_algo_funcs.c: 10: j = STATE_BREAKS[GetPrevCycle(i)];
  8868  16DC  0827               	movf	GetCumulativePeriodsForStates@i^(0+128),w
  8869  16DD  27C7  160A  118A   	fcall	_GetPrevCycle
  8870  16E0  3E64               	addlw	100
  8871  16E1  0084               	movwf	4
  8872  16E2  1783               	bsf	3,7	;select IRP bank2
  8873  16E3  0800               	movf	0,w
  8874  16E4  00A6               	movwf	GetCumulativePeriodsForStates@j^(0+128)
  8875  16E5                     l3367:	
  8876  16E5  0827               	movf	GetCumulativePeriodsForStates@i^(0+128),w
  8877  16E6  3E64               	addlw	100
  8878  16E7  0084               	movwf	4
  8879  16E8  1783               	bsf	3,7	;select IRP bank2
  8880  16E9  0800               	movf	0,w
  8881  16EA  0226               	subwf	GetCumulativePeriodsForStates@j^(0+128),w
  8882  16EB  1803               	btfsc	3,0
  8883  16EC  2F0C               	goto	l3369
  8884                           
  8885                           ;gsk_algo_funcs.c: 12: STATE_CUMULATIVE_PERIODS[i] = STATE_CUMULATIVE_PERIODS[i]
  8886                           ;gsk_algo_funcs.c: 13: + STATE_PERIODS[j];
  8887  16ED  1003               	clrc
  8888  16EE  0D27               	rlf	GetCumulativePeriodsForStates@i^(0+128),w
  8889  16EF  3E7A               	addlw	122
  8890  16F0  0084               	movwf	4
  8891  16F1  1383               	bcf	3,7	;select IRP bank0
  8892  16F2  0800               	movf	0,w
  8893  16F3  00A2               	movwf	??_GetCumulativePeriodsForStates^(0+128)
  8894  16F4  0A84               	incf	4,f
  8895  16F5  0800               	movf	0,w
  8896  16F6  00A3               	movwf	(??_GetCumulativePeriodsForStates^(0+128)+1)
  8897  16F7  0826               	movf	GetCumulativePeriodsForStates@j^(0+128),w
  8898  16F8  3E20               	addlw	32
  8899  16F9  0084               	movwf	4
  8900  16FA  0800               	movf	0,w
  8901  16FB  0722               	addwf	??_GetCumulativePeriodsForStates^(0+128),w
  8902  16FC  00A4               	movwf	(??_GetCumulativePeriodsForStates+2)^(0+128)
  8903  16FD  0823               	movf	(??_GetCumulativePeriodsForStates+1)^(0+128),w
  8904  16FE  1803               	skipnc
  8905  16FF  0A23               	incf	(??_GetCumulativePeriodsForStates+1)^(0+128),w
  8906  1700  00A5               	movwf	((??_GetCumulativePeriodsForStates+2)^(0+128)+1)
  8907  1701  1003               	clrc
  8908  1702  0D27               	rlf	GetCumulativePeriodsForStates@i^(0+128),w
  8909  1703  3E7A               	addlw	122
  8910  1704  0084               	movwf	4
  8911  1705  0824               	movf	(??_GetCumulativePeriodsForStates+2)^(0+128),w
  8912  1706  0080               	movwf	0
  8913  1707  0A84               	incf	4,f
  8914  1708  0825               	movf	((??_GetCumulativePeriodsForStates+2)^(0+128)+1),w
  8915  1709  0080               	movwf	0
  8916  170A  0AA6               	incf	GetCumulativePeriodsForStates@j^(0+128),f
  8917  170B  2EE5               	goto	l3367
  8918  170C                     l3369:	
  8919  170C  3002               	movlw	2
  8920  170D  0AA7               	incf	GetCumulativePeriodsForStates@i^(0+128),f
  8921  170E  0227               	subwf	GetCumulativePeriodsForStates@i^(0+128),w
  8922  170F  1803               	btfsc	3,0
  8923  1710  0008               	return
  8924  1711  2ECF               	goto	l3355
  8925  1712                     __end_of_GetCumulativePeriodsForStates:	
  8926  1712                     __ptext26:	
  8927 ;; *************** function _GetCycle *****************
  8928 ;; Defined at:
  8929 ;;		line 27 in file "libs/gsk_algo_funcs.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  i               1   13[BANK1 ] unsigned char 
  8934 ;;  PrevCycle       1   12[BANK1 ] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      void 
  8937 ;; Registers used:
  8938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 300/800
  8941 ;;		On exit  : 300/300
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:      BANK1   BANK3  BANK2l
  8944 ;;      Params:         0       0       0
  8945 ;;      Locals:         2       0       0
  8946 ;;      Temps:         10       0       0
  8947 ;;      Totals:        12       0       0
  8948 ;;Total ram usage:       12 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    1
  8951 ;; This function calls:
  8952 ;;		_GetPrevCycle
  8953 ;; This function is called by:
  8954 ;;		_main
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _GetCycle
  8960  1712                     _GetCycle:	
  8961                           
  8962                           ;gsk_algo_funcs.c: 28: char PrevCycle;
  8963                           ;gsk_algo_funcs.c: 29: for (char i = 0; i < 3; i++) {
  8964                           
  8965                           ;incstack = 0
  8966                           ; Regs used in _GetCycle: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8967  1712  1683               	bsf	3,5	;RP0=1, select bank1
  8968  1713  01AD               	clrf	GetCycle@i^(0+128)
  8969  1714                     l3379:	
  8970                           
  8971                           ;gsk_algo_funcs.c: 30: PrevCycle = GetPrevCycle(i);
  8972  1714  082D               	movf	GetCycle@i^(0+128),w
  8973  1715  27C7  160A  118A   	fcall	_GetPrevCycle
  8974  1718  00AC               	movwf	GetCycle@PrevCycle^(0+128)
  8975                           
  8976                           ;gsk_algo_funcs.c: 31: if (C[PrevCycle] <= C[i]) {
  8977  1719  00A2               	movwf	??_GetCycle^(0+128)
  8978  171A  3001               	movlw	1
  8979  171B  1003               	clrc
  8980  171C                     L23:	
  8981  171C  0DA2               	rlf	??_GetCycle^(0+128),f
  8982  171D  3EFF               	addlw	-1
  8983  171E  1003               	clrc
  8984  171F  1D03               	skipz
  8985  1720  2F1C               	goto	L23
  8986  1721  0D22               	rlf	??_GetCycle^(0+128),w
  8987  1722  3E4C               	addlw	76
  8988  1723  0084               	movwf	4
  8989  1724  1783               	bsf	3,7	;select IRP bank2
  8990  1725  0800               	movf	0,w
  8991  1726  00A3               	movwf	(??_GetCycle+1)^(0+128)
  8992  1727  0A84               	incf	4,f
  8993  1728  0800               	movf	0,w
  8994  1729  00A4               	movwf	((??_GetCycle+1)^(0+128)+1)
  8995  172A  0A84               	incf	4,f
  8996  172B  0800               	movf	0,w
  8997  172C  00A5               	movwf	((??_GetCycle+1)^(0+128)+2)
  8998  172D  0A84               	incf	4,f
  8999  172E  0800               	movf	0,w
  9000  172F  00A6               	movwf	((??_GetCycle+1)^(0+128)+3)
  9001  1730  082D               	movf	GetCycle@i^(0+128),w
  9002  1731  00A7               	movwf	(??_GetCycle+5)^(0+128)
  9003  1732  3001               	movlw	1
  9004  1733  1003               	clrc
  9005  1734                     L24:	
  9006  1734  0DA7               	rlf	(??_GetCycle+5)^(0+128),f
  9007  1735  3EFF               	addlw	-1
  9008  1736  1003               	clrc
  9009  1737  1D03               	skipz
  9010  1738  2F34               	goto	L24
  9011  1739  0D27               	rlf	(??_GetCycle+5)^(0+128),w
  9012  173A  3E4C               	addlw	76
  9013  173B  0084               	movwf	4
  9014  173C  0800               	movf	0,w
  9015  173D  00A8               	movwf	(??_GetCycle+6)^(0+128)
  9016  173E  0A84               	incf	4,f
  9017  173F  0800               	movf	0,w
  9018  1740  00A9               	movwf	((??_GetCycle+6)^(0+128)+1)
  9019  1741  0A84               	incf	4,f
  9020  1742  0800               	movf	0,w
  9021  1743  00AA               	movwf	((??_GetCycle+6)^(0+128)+2)
  9022  1744  0A84               	incf	4,f
  9023  1745  0800               	movf	0,w
  9024  1746  00AB               	movwf	((??_GetCycle+6)^(0+128)+3)
  9025  1747  082B               	movf	(??_GetCycle+9)^(0+128),w
  9026  1748  3A80               	xorlw	128
  9027  1749  00FF               	movwf	127
  9028  174A  0826               	movf	(??_GetCycle+4)^(0+128),w
  9029  174B  3A80               	xorlw	128
  9030  174C  027F               	subwf	127,w
  9031  174D  1D03               	skipz
  9032  174E  2F59               	goto	u4023
  9033  174F  0825               	movf	(??_GetCycle+3)^(0+128),w
  9034  1750  022A               	subwf	(??_GetCycle+8)^(0+128),w
  9035  1751  1D03               	skipz
  9036  1752  2F59               	goto	u4023
  9037  1753  0824               	movf	(??_GetCycle+2)^(0+128),w
  9038  1754  0229               	subwf	(??_GetCycle+7)^(0+128),w
  9039  1755  1D03               	skipz
  9040  1756  2F59               	goto	u4023
  9041  1757  0823               	movf	(??_GetCycle+1)^(0+128),w
  9042  1758  0228               	subwf	(??_GetCycle+6)^(0+128),w
  9043  1759                     u4023:	
  9044                           
  9045                           ;gsk_algo_funcs.c: 32: if ((S>C[PrevCycle]) && (S<=C[i])) {
  9046  1759  082C               	movf	GetCycle@PrevCycle^(0+128),w
  9047  175A  00A2               	movwf	??_GetCycle^(0+128)
  9048  175B  3001               	movlw	1
  9049  175C  1C03               	skipc
  9050  175D  2F82               	goto	L27
  9051  175E  1003               	clrc
  9052  175F                     L25:	
  9053  175F  0DA2               	rlf	??_GetCycle^(0+128),f
  9054  1760  3EFF               	addlw	-1
  9055  1761  1003               	clrc
  9056  1762  1D03               	skipz
  9057  1763  2F5F               	goto	L25
  9058  1764  27D2  160A  118A   	fcall	PL4	;call to abstracted procedure
  9059  1767  1D03               	skipz
  9060  1768  2F76               	goto	u4043
  9061  1769  27EB  160A  118A   	fcall	PL28	;call to abstracted procedure
  9062  176C  1D03               	skipz
  9063  176D  2F76               	goto	u4043
  9064  176E  27F2  160A  118A   	fcall	PL30	;call to abstracted procedure
  9065  1771  1D03               	skipz
  9066  1772  2F76               	goto	u4043
  9067  1773  27F9  160A  118A   	fcall	PL32	;call to abstracted procedure
  9068  1776                     u4043:	
  9069  1776  1803               	skipnc
  9070  1777  2FBB               	goto	l3395
  9071  1778  082D               	movf	GetCycle@i^(0+128),w
  9072  1779  00A2               	movwf	??_GetCycle^(0+128)
  9073  177A  3001               	movlw	1
  9074  177B  1003               	clrc
  9075  177C                     L26:	
  9076  177C  0DA2               	rlf	??_GetCycle^(0+128),f
  9077  177D  3EFF               	addlw	-1
  9078  177E  1003               	clrc
  9079  177F  1D03               	skipz
  9080  1780  2F7C               	goto	L26
  9081  1781  2FA4               	goto	L29
  9082  1782                     L27:	
  9083                           ;gsk_algo_funcs.c: 36: if ((S>C[PrevCycle]) || (S<=C[i])) {
  9084                           
  9085  1782  0DA2               	rlf	??_GetCycle^(0+128),f
  9086  1783  3EFF               	addlw	-1
  9087  1784  1003               	clrc
  9088  1785  1D03               	skipz
  9089  1786  2F82               	goto	L27
  9090  1787  27D2  160A  118A   	fcall	PL4	;call to abstracted procedure
  9091  178A  1D03               	skipz
  9092  178B  2F99               	goto	u4083
  9093  178C  27EB  160A  118A   	fcall	PL28	;call to abstracted procedure
  9094  178F  1D03               	skipz
  9095  1790  2F99               	goto	u4083
  9096  1791  27F2  160A  118A   	fcall	PL30	;call to abstracted procedure
  9097  1794  1D03               	skipz
  9098  1795  2F99               	goto	u4083
  9099  1796  27F9  160A  118A   	fcall	PL32	;call to abstracted procedure
  9100  1799                     u4083:	
  9101  1799  082D               	movf	GetCycle@i^(0+128),w
  9102  179A  1C03               	skipc
  9103  179B  2FB9               	goto	L31
  9104  179C  00A2               	movwf	??_GetCycle^(0+128)
  9105  179D  3001               	movlw	1
  9106  179E  1003               	clrc
  9107  179F                     L28:	
  9108  179F  0DA2               	rlf	??_GetCycle^(0+128),f
  9109  17A0  3EFF               	addlw	-1
  9110  17A1  1003               	clrc
  9111  17A2  1D03               	skipz
  9112  17A3  2F9F               	goto	L28
  9113  17A4                     L29:	
  9114  17A4  27D2  160A  118A   	fcall	PL4	;call to abstracted procedure
  9115  17A7  1D03               	skipz
  9116  17A8  2FB6               	goto	u4103
  9117  17A9  27EB  160A  118A   	fcall	PL28	;call to abstracted procedure
  9118  17AC  1D03               	skipz
  9119  17AD  2FB6               	goto	u4103
  9120  17AE  27F2  160A  118A   	fcall	PL30	;call to abstracted procedure
  9121  17B1  1D03               	skipz
  9122  17B2  2FB6               	goto	u4103
  9123  17B3  27F9  160A  118A   	fcall	PL32	;call to abstracted procedure
  9124  17B6                     u4103:	
  9125  17B6  1C03               	skipc
  9126  17B7  2FBB               	goto	l3395
  9127                           
  9128                           ;gsk_algo_funcs.c: 33: CYCLE_TYPE = i;
  9129  17B8  082D               	movf	GetCycle@i^(0+128),w
  9130  17B9                     L31:	
  9131  17B9  1703               	bsf	3,6	;RP1=1, select bank3
  9132  17BA  00EB               	movwf	_CYCLE_TYPE^(0+384)	;volatile
  9133  17BB                     l3395:	
  9134  17BB  1303               	bcf	3,6	;RP1=0, select bank1
  9135  17BC  3003               	movlw	3
  9136  17BD  0AAD               	incf	GetCycle@i^(0+128),f
  9137  17BE  022D               	subwf	GetCycle@i^(0+128),w
  9138  17BF  1C03               	skipc
  9139  17C0  2F14               	goto	l3379
  9140                           
  9141                           ;gsk_algo_funcs.c: 38: }
  9142                           ;gsk_algo_funcs.c: 39: }
  9143                           ;gsk_algo_funcs.c: 40: }
  9144                           ;gsk_algo_funcs.c: 41: PREV_CYCLE_TYPE = GetPrevCycle(CYCLE_TYPE);
  9145  17C1  1703               	bsf	3,6	;RP1=1, select bank3
  9146  17C2  086B               	movf	_CYCLE_TYPE^(0+384),w	;volatile
  9147  17C3  27C7               	fcall	_GetPrevCycle
  9148  17C4  1703               	bsf	3,6	;RP1=1, select bank3
  9149  17C5  00ED               	movwf	_PREV_CYCLE_TYPE^(0+384)	;volatile
  9150  17C6  0008               	return
  9151  17C7                     __end_of_GetCycle:	
  9152  17C7                     __ptext28:	
  9153 ;; *************** function _GetPrevCycle *****************
  9154 ;; Defined at:
  9155 ;;		line 18 in file "libs/gsk_algo_funcs.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  cycle           1    wreg     unsigned char 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;  cycle           1    1[BANK1 ] unsigned char 
  9160 ;;  PrevCycle       1    0[BANK1 ] unsigned char 
  9161 ;; Return value:  Size  Location     Type
  9162 ;;                  1    wreg      unsigned char 
  9163 ;; Registers used:
  9164 ;;		wreg, status,2, status,0
  9165 ;; Tracked objects:
  9166 ;;		On entry : 100/900
  9167 ;;		On exit  : 300/100
  9168 ;;		Unchanged: 0/0
  9169 ;; Data sizes:      BANK1   BANK3  BANK2l
  9170 ;;      Params:         0       0       0
  9171 ;;      Locals:         2       0       0
  9172 ;;      Temps:          0       0       0
  9173 ;;      Totals:         2       0       0
  9174 ;;Total ram usage:        2 bytes
  9175 ;; Hardware stack levels used:    1
  9176 ;; This function calls:
  9177 ;;		Nothing
  9178 ;; This function is called by:
  9179 ;;		_GetCumulativePeriodsForStates
  9180 ;;		_GetCycle
  9181 ;; This function uses a non-reentrant model
  9182 ;;
  9183                           
  9184                           
  9185                           ;psect for function _GetPrevCycle
  9186  17C7                     _GetPrevCycle:	
  9187                           
  9188                           ;incstack = 0
  9189                           ; Regs used in _GetPrevCycle: [wreg+status,2+status,0]
  9190                           ;GetPrevCycle@cycle stored from wreg
  9191  17C7  1303               	bcf	3,6	;RP1=0, select bank1
  9192  17C8  00A1               	movwf	GetPrevCycle@cycle^(0+128)
  9193                           
  9194                           ;gsk_algo_funcs.c: 19: UINT8 PrevCycle;
  9195                           ;gsk_algo_funcs.c: 20: if (cycle > 0)
  9196  17C9  0821               	movf	GetPrevCycle@cycle^(0+128),w
  9197  17CA  1903               	btfsc	3,2
  9198  17CB  2FCF               	goto	l2917
  9199                           
  9200                           ;gsk_algo_funcs.c: 21: PrevCycle = cycle - 1;
  9201  17CC  0821               	movf	GetPrevCycle@cycle^(0+128),w
  9202  17CD  3EFF               	addlw	255
  9203  17CE  2FD0               	goto	L33
  9204  17CF                     l2917:	
  9205                           
  9206                           ;gsk_algo_funcs.c: 22: else
  9207                           ;gsk_algo_funcs.c: 23: PrevCycle = 3 - 1;
  9208  17CF  3002               	movlw	2
  9209  17D0                     L33:	
  9210  17D0  00A0               	movwf	GetPrevCycle@PrevCycle^(0+128)
  9211                           
  9212                           ;gsk_algo_funcs.c: 24: return PrevCycle;
  9213  17D1  0008               	return
  9214  17D2                     __end_of_GetPrevCycle:	
  9215  17D2                     PL4:	
  9216  17D2  0D22               	rlf	??_GetCycle^(0+128),w
  9217  17D3  3E4C               	addlw	76
  9218  17D4  0084               	movwf	4
  9219  17D5  0800               	movf	0,w
  9220  17D6  00A3               	movwf	(??_GetCycle+1)^(0+128)
  9221  17D7  0A84               	incf	4,f
  9222  17D8  0800               	movf	0,w
  9223  17D9  00A4               	movwf	((??_GetCycle+1)^(0+128)+1)
  9224  17DA  0A84               	incf	4,f
  9225  17DB  0800               	movf	0,w
  9226  17DC  00A5               	movwf	((??_GetCycle+1)^(0+128)+2)
  9227  17DD  0A84               	incf	4,f
  9228  17DE  0800               	movf	0,w
  9229  17DF  00A6               	movwf	((??_GetCycle+1)^(0+128)+3)
  9230  17E0  0826               	movf	(??_GetCycle+4)^(0+128),w
  9231  17E1  3A80               	xorlw	128
  9232  17E2  00FF               	movwf	127
  9233  17E3  1283               	bcf	3,5	;RP0=0, select bank2
  9234  17E4  1703               	bsf	3,6	;RP1=1, select bank2
  9235  17E5  086E               	movf	110,w	;volatile
  9236  17E6  3A80               	xorlw	128
  9237  17E7  027F               	subwf	127,w
  9238  17E8  1683               	bsf	3,5	;RP0=1, select bank1
  9239  17E9  1303               	bcf	3,6	;RP1=0, select bank1
  9240  17EA  0008               	return
  9241  17EB                     __end_ofPL4:	
  9242  17EB                     PL28:	
  9243  17EB  1283               	bcf	3,5	;RP0=0, select bank2
  9244  17EC  1703               	bsf	3,6	;RP1=1, select bank2
  9245  17ED  086D               	movf	109,w	;volatile
  9246  17EE  1683               	bsf	3,5	;RP0=1, select bank1
  9247  17EF  1303               	bcf	3,6	;RP1=0, select bank1
  9248  17F0  0225               	subwf	(??_GetCycle+3)^(0+128),w
  9249  17F1  0008               	return
  9250  17F2                     __end_ofPL28:	
  9251  17F2                     PL30:	
  9252  17F2  1283               	bcf	3,5	;RP0=0, select bank2
  9253  17F3  1703               	bsf	3,6	;RP1=1, select bank2
  9254  17F4  086C               	movf	108,w	;volatile
  9255  17F5  1683               	bsf	3,5	;RP0=1, select bank1
  9256  17F6  1303               	bcf	3,6	;RP1=0, select bank1
  9257  17F7  0224               	subwf	(??_GetCycle+2)^(0+128),w
  9258  17F8  0008               	return
  9259  17F9                     __end_ofPL30:	
  9260  17F9                     PL32:	
  9261  17F9  1283               	bcf	3,5	;RP0=0, select bank2
  9262  17FA  1703               	bsf	3,6	;RP1=1, select bank2
  9263  17FB  086B               	movf	107,w	;volatile
  9264  17FC  1683               	bsf	3,5	;RP0=1, select bank1
  9265  17FD  1303               	bcf	3,6	;RP1=0, select bank1
  9266  17FE  0223               	subwf	(??_GetCycle+1)^(0+128),w
  9267  17FF  0008               	return
  9268  1800                     __end_ofPL32:	
  9269                           
  9270                           	psect	text29
  9271  152F                     __ptext29:	
  9272 ;; *************** function _GetAbs *****************
  9273 ;; Defined at:
  9274 ;;		line 55 in file "libs/gsk_algo_funcs.c"
  9275 ;; Parameters:    Size  Location     Type
  9276 ;;  a               2    0[BANK1 ] short 
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;		None
  9279 ;; Return value:  Size  Location     Type
  9280 ;;                  2    0[BANK1 ] short 
  9281 ;; Registers used:
  9282 ;;		status,2, status,0
  9283 ;; Tracked objects:
  9284 ;;		On entry : 300/100
  9285 ;;		On exit  : 300/100
  9286 ;;		Unchanged: 0/0
  9287 ;; Data sizes:      BANK1   BANK3  BANK2l
  9288 ;;      Params:         2       0       0
  9289 ;;      Locals:         0       0       0
  9290 ;;      Temps:          0       0       0
  9291 ;;      Totals:         2       0       0
  9292 ;;Total ram usage:        2 bytes
  9293 ;; Hardware stack levels used:    1
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_main
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function _GetAbs
  9303  152F                     _GetAbs:	
  9304                           
  9305                           ;gsk_algo_funcs.c: 56: if (a<0)
  9306                           
  9307                           ;incstack = 0
  9308                           ; Regs used in _GetAbs: [status]
  9309  152F  1FA1               	btfss	(GetAbs@a+1)^(0+128),7
  9310  1530  0008               	return
  9311                           
  9312                           ;gsk_algo_funcs.c: 57: a=a*(-1);
  9313  1531  09A0               	comf	GetAbs@a^(0+128),f
  9314  1532  09A1               	comf	(GetAbs@a+1)^(0+128),f
  9315  1533  0AA0               	incf	GetAbs@a^(0+128),f
  9316  1534  1903               	skipnz
  9317  1535  0AA1               	incf	(GetAbs@a+1)^(0+128),f
  9318                           
  9319                           ;gsk_algo_funcs.c: 58: return a;
  9320  1536  0008               	return
  9321  1537                     __end_of_GetAbs:	
  9322                           
  9323                           	psect	text30
  9324  1537                     __ptext30:	
  9325 ;; *************** function _DelayInUSec *****************
  9326 ;; Defined at:
  9327 ;;		line 68 in file "libs/gsk_algo_funcs.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  a               1    wreg     unsigned char 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  a               1    0[BANK1 ] unsigned char 
  9332 ;;  i               1    1[BANK1 ] unsigned char 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		wreg, status,2, status,0
  9337 ;; Tracked objects:
  9338 ;;		On entry : 300/B00
  9339 ;;		On exit  : 300/100
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:      BANK1   BANK3  BANK2l
  9342 ;;      Params:         0       0       0
  9343 ;;      Locals:         2       0       0
  9344 ;;      Temps:          0       0       0
  9345 ;;      Totals:         2       0       0
  9346 ;;Total ram usage:        2 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; This function calls:
  9349 ;;		Nothing
  9350 ;; This function is called by:
  9351 ;;		_main
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           
  9356                           ;psect for function _DelayInUSec
  9357  1537                     _DelayInUSec:	
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in _DelayInUSec: [wreg+status,2+status,0]
  9361                           ;DelayInUSec@a stored from wreg
  9362  1537  1303               	bcf	3,6	;RP1=0, select bank1
  9363  1538  00A0               	movwf	DelayInUSec@a^(0+128)
  9364                           
  9365                           ;gsk_algo_funcs.c: 69: for (UINT8 i = 0; i<a; i++);
  9366  1539  01A1               	clrf	DelayInUSec@i^(0+128)
  9367  153A                     l3413:	
  9368  153A  0820               	movf	DelayInUSec@a^(0+128),w
  9369  153B  0221               	subwf	DelayInUSec@i^(0+128),w
  9370  153C  1803               	btfsc	3,0
  9371  153D  0008               	return
  9372  153E  0AA1               	incf	DelayInUSec@i^(0+128),f
  9373  153F  2D3A               	goto	l3413
  9374  1540                     __end_of_DelayInUSec:	


Data Sizes:
    Strings     0
    Constant    7
    Data        167
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    BANK1            80     80      80
    BANK3            96     91      94
    BANK2l           12      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK3[2]), 

    IsValidGPS@GPSData	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK3[6]), 

    UART_ReadValidTimeFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK3[6]), 

    UART_ReadFromGPS_TO@Output	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK3[6]), 

    WriteToRTC@Time	PTR unsigned char  size(1) Largest target is 6
		 -> main@GPSData(BANK3[6]), 


Critical Paths under _main in BANK1

    ___lwtoft->___ftpack
    _WriteToRTC->_I2C_WriteAtAddress
    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___bmul
    _UART_ReadValidTimeFromGPS_TO->_UART_ReadFromGPS_TO
    _UART_ReadFromGPS_TO->_UART_Read_TO
    ___ftdiv->___altoft
    _ReadVars->___bmul
    _ReadRTCAsSec->___lmul
    _I2C_Master_Init->___lldiv
    _GetCycle->_GetPrevCycle
    _GetCumulativePeriodsForStates->_GetPrevCycle
    _round->_trunc
    _trunc->___fttol
    ___fttol->___ftadd
    ___altoft->_GetTimePeriod
    ___ftsub->_trunc
    ___ftadd->___ftmul
    ___ftmul->___ftdiv
    ___abtoft->___ftpack
    _SetOSCTRIM->_I2C_WriteAtAddress
    ___bmul->___aldiv
    _I2C_WriteAtAddress->___bmul
    _GetOSCTRIM->_I2C_ReadAtAddress
    _I2C_ReadAtAddress->_I2C_Master_Read

Critical Paths under _main in BANK3

    _main->_UART_Init
    _UART_Init->_round
    _AdjustSec->_round
    _round->___ftsub
    ___ftsub->_trunc

Critical Paths under _main in BANK2l

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                62    62      0   59190
                                             29 BANK3     62    62      0
                          _AdjustSec
                        _DelayInUSec
                             _GetAbs
      _GetCumulativePeriodsForStates
                           _GetCycle
                      _GetTimePeriod
                    _I2C_Master_Init
                       _ReadRTCAsSec
                           _ReadVars
                          _UART_Init
       _UART_ReadValidTimeFromGPS_TO
                       _WriteLongInt
                         _WriteToRTC
                            ___almod
                           ___altoft
                            ___awdiv
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lbdiv
                           ___lwtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    1860
                                              8 BANK1      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lbdiv                                              4     3      1     295
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     578
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) ___almod                                             10     2      8     508
                                              0 BANK1     10     2      8
 ---------------------------------------------------------------------------------
 (1) _WriteToRTC                                           2     2      0    1200
                                             20 BANK1      2     2      0
                 _I2C_WriteAtAddress
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                        10     3      7    2908
                                             21 BANK1     10     3      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___bmul
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     592
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2     908
                                             17 BANK1      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          2     2      0     176
                                              0 BANK1      2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           2     2      0     176
                                              0 BANK1      2     2      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_ReadValidTimeFromGPS_TO                         2     1      1     862
                                              8 BANK1      2     1      1
                         _IsValidGPS
                _UART_ReadFromGPS_TO
 ---------------------------------------------------------------------------------
 (2) _UART_ReadFromGPS_TO                                  7     6      1     397
                                              1 BANK1      7     6      1
                       _UART_Read_TO
 ---------------------------------------------------------------------------------
 (3) _UART_Read_TO                                         1     1      0      23
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IsValidGPS                                           2     2      0     319
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           12     8      4   19772
                                             17 BANK3     12     8      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2279
                                             22 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            17    17      0     977
                                             17 BANK1     17    17      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAsSec                                        18    14      4    2255
                                             12 BANK1     18    14      4
                  _I2C_ReadAtAddress
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     702
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     464
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     343
                                             13 BANK1      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (1) _GetTimePeriod                                       16     8      8     238
                                              0 BANK1     16     8      8
 ---------------------------------------------------------------------------------
 (1) _GetCycle                                            12    12      0     313
                                              2 BANK1     12    12      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (1) _GetCumulativePeriodsForStates                        6     6      0     293
                                              2 BANK1      6     6      0
                       _GetPrevCycle
 ---------------------------------------------------------------------------------
 (2) _GetPrevCycle                                         2     2      0      68
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _GetAbs                                               2     0      2     226
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _DelayInUSec                                          2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _AdjustSec                                            6     6      0   16614
                                             17 BANK3      5     5      0
                         _GetOSCTRIM
                         _SetOSCTRIM
                           ___abtoft
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    9406
                                             11 BANK3      6     3      3
                           ___abtoft (ARG)
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    3129
                                             77 BANK1      3     0      3
                                              0 BANK3      5     5      0
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     314
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             13     9      4     464
                                             64 BANK1     13     9      4
                      _GetTimePeriod (ARG)
                           ___abtoft (ARG)
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             6     2      4    2082
                                             16 BANK1      6     2      4
                      _GetTimePeriod (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3116
                                              5 BANK3      6     0      6
                            ___ftadd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    2943
                                             52 BANK1     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    2431
                                             37 BANK1     15     9      6
                      _GetTimePeriod (ARG)
                           ___abtoft (ARG)
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___abtoft                                             9     5      4    1876
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    1785
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _SetOSCTRIM                                           1     1      0    1421
                                             20 BANK1      1     1      0
                 _I2C_WriteAtAddress
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     397
                                             14 BANK1      3     2      1
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _I2C_WriteAtAddress                                   3     1      2     958
                                             17 BANK1      3     1      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _GetOSCTRIM                                           1     1      0     948
                                              7 BANK1      1     1      0
                  _I2C_ReadAtAddress
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadAtAddress                                    3     2      1     881
                                              4 BANK1      3     2      1
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     362
                                              0 BANK1      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      4     2      2      98
                                              0 BANK1      4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdjustSec
     _GetOSCTRIM
       _I2C_ReadAtAddress
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _SetOSCTRIM
       _I2C_WriteAtAddress
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         ___bmul (ARG)
           ___aldiv (ARG)
       ___bmul
         ___aldiv (ARG)
     ___abtoft
       ___ftpack
     ___ftmul
       _GetTimePeriod (ARG)
       ___abtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _GetTimePeriod (ARG)
       ___abtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _GetTimePeriod (ARG)
           ___abtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _GetTimePeriod (ARG)
         ___abtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _round
       ___abtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _GetTimePeriod (ARG)
           ___abtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _GetTimePeriod (ARG)
         ___abtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _GetTimePeriod (ARG)
             ___abtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___fttol
             _GetTimePeriod (ARG)
             ___abtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 _GetTimePeriod (ARG)
                 ___abtoft (ARG)
                   ___ftpack
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     _GetTimePeriod (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               _GetTimePeriod (ARG)
               ___abtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
       _trunc (ARG)
         ___altoft
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___fttol
           _GetTimePeriod (ARG)
           ___abtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               _GetTimePeriod (ARG)
               ___abtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _GetTimePeriod (ARG)
             ___abtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         _frexp
   _DelayInUSec
   _GetAbs
   _GetCumulativePeriodsForStates
     _GetPrevCycle
   _GetCycle
     _GetPrevCycle
   _GetTimePeriod
   _I2C_Master_Init
     ___lldiv
   _ReadRTCAsSec
     _I2C_ReadAtAddress
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___lmul
     ___wmul
   _ReadVars
     ___bmul
       ___aldiv (ARG)
     _eeprom_read
   _UART_Init
     ___altoft
       _GetTimePeriod (ARG)
       ___ftpack (ARG)
     ___ftadd
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _GetTimePeriod (ARG)
         ___abtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       _GetTimePeriod (ARG)
       ___abtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
       _GetTimePeriod (ARG)
       ___abtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftadd (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _GetTimePeriod (ARG)
           ___abtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _GetTimePeriod (ARG)
         ___abtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     _round
       ___abtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           _GetTimePeriod (ARG)
           ___abtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _GetTimePeriod (ARG)
         ___abtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _GetTimePeriod (ARG)
             ___abtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___fttol
             _GetTimePeriod (ARG)
             ___abtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftadd (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 _GetTimePeriod (ARG)
                 ___abtoft (ARG)
                   ___ftpack
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     _GetTimePeriod (ARG)
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               _GetTimePeriod (ARG)
               ___abtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           _frexp
       _trunc (ARG)
         ___altoft
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___fttol
           _GetTimePeriod (ARG)
           ___abtoft (ARG)
             ___ftpack
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftadd (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               _GetTimePeriod (ARG)
               ___abtoft (ARG)
                 ___ftpack
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   _GetTimePeriod (ARG)
                   ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             _GetTimePeriod (ARG)
             ___abtoft (ARG)
               ___ftpack
             ___altoft (ARG)
               _GetTimePeriod (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 _GetTimePeriod (ARG)
                 ___ftpack (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         _frexp
   _UART_ReadValidTimeFromGPS_TO
     _IsValidGPS
     _UART_ReadFromGPS_TO
       _UART_Read_TO
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
       ___bmul (ARG)
         ___aldiv (ARG)
     ___aldiv
     ___bmul
       ___aldiv (ARG)
     ___lmul
   _WriteToRTC
     _I2C_WriteAtAddress
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
       ___bmul (ARG)
         ___aldiv (ARG)
   ___almod
   ___altoft
     _GetTimePeriod (ARG)
     ___ftpack (ARG)
   ___awdiv
   ___ftdiv
     ___altoft (ARG)
       _GetTimePeriod (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     _GetTimePeriod (ARG)
     ___abtoft (ARG)
       ___ftpack
     ___altoft (ARG)
       _GetTimePeriod (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     _GetTimePeriod (ARG)
     ___abtoft (ARG)
       ___ftpack
     ___altoft (ARG)
       _GetTimePeriod (ARG)
       ___ftpack (ARG)
     ___ftadd (ARG)
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         _GetTimePeriod (ARG)
         ___abtoft (ARG)
           ___ftpack
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             _GetTimePeriod (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       _GetTimePeriod (ARG)
       ___abtoft (ARG)
         ___ftpack
       ___altoft (ARG)
         _GetTimePeriod (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           _GetTimePeriod (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lbdiv
   ___lwtoft
     ___ftpack
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     5B      5E       5       97.9%
BITBANK3            60      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2l               C      0       0       7        0.0%
BITBANK2l            C      0       0       6        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     50      50       3      100.0%
BITBANK1            50      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      AE       8        0.0%
ABS                  0      0      AE       1        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       0        0.0%
EEDATA             100      0      A7       0       65.2%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Dec 01 06:42:35 2016

                          ___altoft@exp 00B4                                       _C 014C  
                                     _S 016B                                       pc 0002  
                        ___bmul@product 00AF                             __CFG_CP$OFF 0000  
                                    PL2 0F71                                      PL4 17D2  
                                    PL6 0FA4                                      PL8 0FBF  
                         ___altoft@sign 00B5               UART_ReadFromGPS_TO@Output 00A5  
                                    _RD 0C60                                      _WR 0C61  
                          ___awdiv@sign 00A5                                      fsr 0004  
                   ___wmul@multiplicand 00A2              UART_ReadFromGPS_TO@TimeOut 00A1  
                          ___ftadd@exp1 00DF                            ___ftadd@exp2 00DE  
                                   PL10 0FCF                                     PL20 0FDF  
                                   PL12 0A8F                                     PL30 17F2  
                                   PL22 164F                                     PL14 07AC  
                                   PL40 0AA4                                     PL32 17F9  
                                   PL24 0A9B                                     PL16 07B8  
                                   PL42 07E8                                     PL34 07D8  
                                   PL26 07CF                                     PL18 07C4  
                                   PL44 0FF2                                     PL36 0FEA  
                                   PL28 17EB                                     PL46 07EF  
                                   PL38 07E0                                     PL48 0FF9  
                          ___ftadd@sign 00DD                                     l318 0A51  
                                   l715 0E22                                     l735 0F6B  
                                   l568 08DC                                     l753 05AD  
                                   l850 0A60                                     l907 1595  
                                   l679 0C46                                     l696 0D71  
                                   l688 0C97                                     l894 0473  
                                   l995 0328                                     _RA0 0028  
                                   _RA1 0029                                     _RA2 002A  
                                   _RA3 002B                                     _RC0 0038  
                                   _RA4 002C                                     _RC1 0039  
                                   _RA5 002D                                     _C_D 016F  
                                   _PEN 048A                            __CFG_CPD$OFF 0000  
                                   _SEN 0488                            main@SecError 01E1  
                           main@SyncX_1 01D9                             main@SyncX_2 01DB  
                           main@SyncY_1 01D7                                     fsr0 0004  
                           main@SyncY_2 01CC                                     indf 0000  
                          __CFG_IESO$ON 0000                            __CFG_FOSC$HS 0000  
                     GetCycle@PrevCycle 00AC                     _UART_ReadFromGPS_TO 088B  
                   __end_of_Lcd_Command 066C                       GetPrevCycle@cycle 00A1  
                         ?_ReadRTCAsSec 00AC                            __CFG_LVP$OFF 0000  
                          ___ftdiv@cntr 00BF                        main@DiffInSecond 01E3  
                          ___ftdiv@sign 00C4                                    l1101 081F  
                                  l1007 0350                                    l1031 01E5  
                                  l1049 0766                                    l3011 09EF  
                                  l3007 09E7                                    l3111 0779  
                                  l3041 037F                                    l3025 0A76  
                                  l3133 02D5                                    l3151 02E6  
                                  l3055 0482                                    l3215 03FC  
                                  l3223 0404                                    l3129 02C4  
                                  l3241 04EF                                    l3081 04CF  
                                  l3065 0496                                    l3163 02FB  
                                  l3155 02EF                                    l2611 023B  
                                  l2613 0246                                    l3413 153A  
                                  l3253 0568                                    l3229 04E0  
                                  l3077 04C1                                    l3501 1553  
                                  l2551 032C                                    l3167 0304  
                                  l2623 018C                                    l3423 161E  
                                  l3255 0569                                    l3239 04EE  
                                  l3511 1561                                    l2561 034E  
                                  l2553 0331                                    l2633 01A2  
                                  l2713 0286                                    l3361 16DC  
                                  l3089 0755                                    l3601 0B13  
                                  l2563 0345                                    l2555 0336  
                                  l2651 01BF                                    l2627 0193  
                                  l2723 0292                                    l3355 16CF  
                                  l3187 1698                                    l3267 057E  
                                  l2571 0707                                    l3523 1578  
                                  l2557 0340                                    l2653 01C4  
                                  l2645 01B0                                    l2725 029C  
                                  l2717 028E                                    l2813 08D9  
                                  l3621 0B48                                    l2671 01F0  
                                  l2663 01DC                                    l2655 01C9  
                                  l3367 16E5                                    l3199 16C3  
                                  l2815 08D1                                    l3471 15B2  
                                  l3463 15A2                                    l3527 1580  
                                  l3551 082C                                    l3703 0DBB  
                                  l2577 0A59                                    l2665 01E1  
                                  l2657 01CD                                    l2729 02AA  
                                  l3369 170C                                    l2753 061D  
                                  l3537 0819                                    l3801 0EEE  
                                  l3641 0C3C                                    l2595 0A4B  
                                  l2739 0717                                    l3395 17BB  
                                  l3379 1714                                    l2763 0639  
                                  l3483 15E5                                    l3803 0EF2  
                                  l3643 0C3D                                    l3651 0C67  
                                  l2829 05C5                                    l2677 01FB  
                                  l2845 0396                                    l2917 17CF  
                                  l2765 0645                                    l3821 0F62  
                                  l3813 0F44                                    l3725 0DF0  
                                  l3709 0DC4                                    l2695 0262  
                                  l2855 0138                                    l2791 06E0  
                                  l2767 0653                                    l2871 0446  
                                  l3479 15D7                                    l3495 154A  
                                  l3735 0DFD                                    l3719 0DE3  
                                  l3831 0D8E                                    l3663 0C98  
                                  l3647 0C47                                    l2689 0217  
                                  l2697 0267                                    l2953 08BD  
                                  l2961 08C2                                    l2945 08AC  
                                  l2937 0896                                    l2793 06EE  
                                  l2769 065D                                    l2873 0449  
                                  l3817 0F4C                                    l3809 0F32  
                                  l3761 0E39                                    l3753 0E36  
                                  l3737 0DFF                                    l3681 0D2C  
                                  l3673 0CD8                                    l2947 08AE  
                                  l2795 06F8                                    l2779 06B8  
                                  l2867 0440                                    l3819 0F5D  
                                  l3771 0E56                                    l3747 0E0C  
                                  l3827 0D98                                    l3675 0CE1  
                                  l2981 085E                                    l2789 06D4  
                                  l2869 0443                                    l2877 044D  
                                  l3829 0F6D                                    l3693 0D6B  
                                  l2895 0373                                    l2975 0850  
                                  l2879 045B                                    l3775 0E5F  
                                  l3767 0E4D                                    l3687 0D40  
                                  l2993 087A                                    l2969 0844  
                                  l3793 0EB8                                    l3785 0E76  
                                  l2987 086C                                    l3797 0EC9  
                                  l2999 0888                                    l3799 0ED5  
                                  _BRGH 04C2                                    _CREN 00C4  
                                  _EE_C 0096                                    u3010 0650  
                                  u3030 065A                                    u3120 06A3  
                                  u3104 0694                                    u3210 06EB  
                                  u3115 0698                                    u3060 067F  
                                  u3230 06F5                                    u3150 06B5  
                                  u3134 06A6                                    u4103 17B6  
                                  u4023 1759                                    u3055 0674  
                                  u2520 0A48                                    u3145 06AA  
                                  u3170 06D1                                    u3090 0691  
                                  u3074 0682                                    u4043 1776  
                                  u3331 05AC                                    u3085 0686  
                                  u3190 06DD                                    u4143 1600  
                                  u4225 15C0                                    u4083 1799  
                                  u4405 0BC4                                    u2920 0608  
                                  u2904 05F9                                    u3705 0787  
                 __size_of_WriteLongInt 006C                                    u4450 0CB1  
                                  u2915 05FD                                    u4451 0CB3  
                                  u2860 05E4                                    u4452 0CB9  
                                  u4453 0CBB                                    u2950 061A  
                                  u2934 060B                                    u2775 026B  
                                  u2855 05D9                                    u3655 04A9  
                                  u4295 156A                                    u3825 16AB  
                                  u2945 060F                                    u4545 0D7D  
                                  u2970 0636                                    u2890 05F6  
                                  u2874 05E7                                    u4634 0E1D  
                                  u4635 0E1B                                    u4483 0D23  
                                  _RCEN 048B                                    _RCIF 0065  
                                  u2885 05EB                                    u4725 0EAB  
                                  u2990 0642                                    u4815 0DAD  
                                  u4743 0EEC                                    u4735 0EC3  
                                  u4664 0E32                                    u4665 0E30  
                                  u4763 0F30                                    u3965 1666  
                                  u4837 0620                                    u4847 0660  
                                  u4783 0F5B                                    u4857 06BB  
                                  u4867 06FB                                    _SPEN 00C7  
                                  _TXEN 04C5                                    _SYNC 04C4  
                            _GetOSCTRIM 0362                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000                                    _main 0AAC  
                          ___ftpack@arg 00A0                            ___ftpack@exp 00A3  
                  __end_of_Lcd_Delay5us 070B                                    btemp 007E  
                                  ltemp 007E                                    start 0000  
                                  ttemp 007E                                    wtemp 007E  
                  ?_UART_ReadFromGPS_TO 00A1                       ___bmul@multiplier 00B0  
                         __CFG_MCLRE$ON 0000                            ___ftmul@cntr 00D2  
                          ___ftmul@sign 00D3                              _Lcd_CharCP 066C  
                          ___fttol@exp1 00EC                            ___fttol@lval 00E8  
                      ?_I2C_Master_Init 00AD                        ?_I2C_Master_Read 00A0  
                      ?_I2C_Master_Wait 00A0                        ?_I2C_Master_Stop 00A0  
                       __end_of___aldiv 04D8                         __end_of___almod 15EE  
                                 ?_main 00A0                                   _ACKEN 048C  
                                 _ACKDT 048D                         __end_of___awdiv 1585  
                       __end_of___lbdiv 082E                                   _EEADR 010D  
                       __end_of___ftadd 0229                                   _BRG16 0C3B  
                         __CFG_WDTE$OFF 0000                         __end_of___ftdiv 07AC  
                                 _ANSEL 0188                         __end_of___lldiv 16CC  
                                 _FLAGS 01EC                    __end_of_GetPrevCycle 17D2  
                                 _AUDIO 0167                         __end_of___ftmul 0320  
                       ___awdiv@divisor 00A0                         __end_of___ftsub 03BA  
                       __end_of___fttol 02B3                         ___awdiv@counter 00A4  
                                 _RCREG 001A                                   _SPBRG 0099  
                                 _PORTA 0005                                   _PORTB 0006  
                                 _TRISA 0085                                   _TRISB 0086  
                                 _TRISC 0087                            _WriteLongInt 03D2  
                   ___lmul@multiplicand 00A4                          ??_ReadRTCAsSec 00B0  
                    __size_of_UART_Init 007C                             _DelayInUSec 1537  
                            _IsValidGPS 0838                                   _frexp 070B  
                         ___ftpack@sign 00A4                                   _round 00CE  
                                 main@i 01E8                                   main@j 01DD  
                                 main@k 01CA                                   main@l 01E9  
                                 _trunc 0125                          __CFG_BOREN$OFF 0000  
                                 pclath 000A                                   ltemp0 007E  
                                 ltemp1 0082                                   ltemp2 0086  
                                 ltemp3 0080                                   ttemp0 007E  
                                 ttemp1 0081                                   ttemp2 0084  
                                 ttemp3 0087                                   ttemp4 007F  
                   main@PrevRTCSyncTime 01BD                                   status 0003  
                                 wtemp0 007E                                   wtemp1 0080  
                                 wtemp2 0082                                   wtemp3 0084  
                                 wtemp4 0086                                   wtemp5 0088  
                                 wtemp6 007F                         ___lbdiv@divisor 00A0  
                     _ReadRTCAsSec$1776 00B7                         ___lbdiv@counter 00A2  
                      __end_of_GetCycle 17C7                   ??_UART_ReadFromGPS_TO 00A2  
                       __initialization 07F6                    WriteToRTC@TempVar000 00B5  
                          __end_of_main 0F71                      __size_of_AdjustSec 003E  
                      __end_of_ReadVars 05A9                              _SetOSCTRIM 03BA  
                           _Lcd_Command 05D1           main@StateAudioSplOnOffCounter 01D5  
                       ReadRTCAsSec@Out 00B9                                  ??_main 01AD  
                         ___fttol@sign1 00E7                       ?_I2C_Master_Start 00A0  
                     ?_I2C_Master_Write 00A0                        __end_of___abtoft 038F  
                    ??_I2C_Master_Start 00A0                      ??_I2C_Master_Write 00A2  
                                ?_frexp 00A0                        __end_of___altoft 0258  
                                _EEDATA 010C                                  _EECON1 018C  
                      ___awdiv@dividend 00A2                   __end_of_GetTimePeriod 164F  
                      __end_of___ftpack 0362                                  ?_round 019B  
                                _ANSELH 0189                                  ?_trunc 00ED  
                                _EE_C_D 00A6                       _I2C_ReadAtAddress 09FE  
                           ?_GetOSCTRIM 00A0                        __end_of___lwtoft 0014  
                      WriteLongInt@Sign 00BB                                  _SPBRGH 009A  
                    ?_I2C_ReadAtAddress 00A4                                  _SSPADD 0093  
                                _TRISC3 043B                                  _TRISC4 043C  
                                _SSPCON 0014                                  _SSPBUF 0013  
                      WriteLongInt@size 00BA                                  _GetAbs 152F  
                        __CFG_PWRTE$OFF 0000                    __size_of_eeprom_read 001A  
                   ??_I2C_ReadAtAddress 00A5                       __end_of_UART_Init 00CE  
                                ___bmul 05C3                             ?_Lcd_CharCP 0000  
                                ___lmul 0A5C                               ??___aldiv 00A8  
                             ??___almod 00A8                                  ___wmul 09E5  
                             ??___awdiv 00A4                               ??___lbdiv 00A1  
                             ??___ftadd 00DA                               ??___ftdiv 00BC  
                             ??___lldiv 00A8                               ??___ftmul 00CB  
                             ??___ftsub 00F0                               ??___fttol 00E4  
                      ___awdiv@quotient 00A6                   __end_of_Lcd_WriteChar 0463  
                 ___ftmul@f3_as_product 00CF                            __pdataEEDATA 0000  
             __end_of_I2C_ReadAtAddress 0A29                                  round@f 019E  
                                round@x 019B                             ?_IsValidGPS 0000  
                            ___abtoft@c 00AD                                  trunc@i 0190  
                 __size_of_Lcd_Delay5us 0004                                  trunc@x 00ED  
                      ___lbdiv@dividend 00A1                       __end_of_AdjustSec 0052  
                    Lcd_Command@command 00A1                 __end_of__initialization 07FC  
                            ___altoft@c 00B0                   main@StateSecRemaining 01D0  
                       eeprom_read@addr 00A0                              ___ftadd@f1 00D4  
                            ___ftadd@f2 00D7    __end_ofUART_ReadFromGPS_TO@StartCode 100D  
          UART_ReadFromGPS_TO@StartCode 1006                              ___ftdiv@f1 00B9  
                            ___ftdiv@f2 00B6                              ___ftdiv@f3 00C0  
                     IsValidGPS@GPSData 00A1                     ___bmul@multiplicand 00AE  
                            ___ftmul@f1 00C5                              ___ftmul@f2 00C8  
                            ___ftsub@f1 0198                              ___ftsub@f2 0195  
                            ___fttol@f1 00E0                          WriteToRTC@Time 00B4  
                        __pcstackCOMMON 0000                    __end_of_ReadRTCAsSec 09E5  
                          __pidataBANK3 0000                              _WriteToRTC 08E1  
                 __size_of_GetPrevCycle 000B                           __end_of_frexp 0744  
                         __end_of_round 0125                           __end_of_trunc 0169  
                            __end_ofPL2 0FA4                              __end_ofPL4 17EB  
                            __end_ofPL6 0FBF                              __end_ofPL8 0FCF  
                      ___lbdiv@quotient 00A3                             ?_SetOSCTRIM 00A0  
                            ___lwtoft@c 00A8                     __size_of_GetOSCTRIM 0014  
                          _Lcd_Delay5us 0707                          Lcd_WriteChar@c 00B2  
                             ?_GetCycle 00A0                          Lcd_WriteChar@x 00B1  
                        Lcd_WriteChar@y 00B3    main@NumberOfSystemCyclesSinceLastRTC 01C3  
                               ??_frexp 00A4                     __size_of_Lcd_CharCP 009B  
                               ??_round 00F0                                 ??_trunc 00F0  
                            __pbssBANK3 01EB                               ?_ReadVars 00A0  
               I2C_ReadAtAddress@IntAdd 00A4              __end_of_I2C_WriteAtAddress 0931  
                          _GetPrevCycle 17C7                                 ?_GetAbs 00A0  
                   UART_Read_TO@TimeOut 00A0                              __pmaintext 0AAC  
                               ?___bmul 00AE                                 ?___lmul 00A0  
                               ?___wmul 00A0                     __size_of_IsValidGPS 0053  
                             ?___abtoft 00A8                               ?___altoft 00B0  
                        ___lmul@product 00A8                               ?___ftpack 00A0  
      main@StateAudioNormalOnOffCounter 01D3                               ?___lwtoft 00A8  
                               GetAbs@a 00A0                              ??_GetCycle 00A2  
                          ?_DelayInUSec 00A0              __size_of_I2C_ReadAtAddress 002B  
                               _STATE_1 003E                                 _STATE_2 0110  
                               _SSPCON2 0091                                 _SSPSTAT 0094  
                            __stringtab 1000                          _UART_Init$1778 01A5  
                        _UART_Init$1779 01A8                           ?_UART_Read_TO 0000  
                       _EE_STATE_BREAKS 00A3                              ??_ReadVars 00B1  
                   __size_of_SetOSCTRIM 0018                    main@LoadRTCAfterXSec 01C1  
                       __size_of_GetAbs 0008                  ReadRTCAsSec@TempVar000 00BD  
                               ___aldiv 0463                         __size_of___bmul 000E  
                               ___almod 1585                             ?_WriteToRTC 00A0  
                     Lcd_WriteChar@data 00B4                                 ___awdiv 1540  
                               ___lbdiv 0812                         __size_of___lmul 0033  
                               ___ftadd 0169                                 ___ftdiv 0744  
                               ___lldiv 1684                         __size_of___wmul 0019  
                               ___ftmul 02B3                                 ___ftsub 038F  
                               ___fttol 0258                              ??___abtoft 00AC  
                            ??___altoft 00B4                              ??___ftpack 00A5  
                          ?_Lcd_Command 0000                                 __ptext1 0004  
                               __ptext2 0812                                 __ptext3 1540  
                               __ptext4 1585                                 __ptext5 08E1  
                               __ptext6 03D2                                 __ptext7 0463  
                               __ptext8 043E                                 __ptext9 05D1  
                            ??___lwtoft 00AB                               _EE_STATES 0000  
                      ___aldiv@dividend 00A4                __size_of_I2C_Master_Init 002C  
              __size_of_I2C_Master_Read 0020                __size_of_I2C_Master_Wait 0008  
              __size_of_I2C_Master_Stop 0003                    end_of_initialization 07FC  
                        ??_UART_Read_TO 00A0             __end_of_UART_ReadFromGPS_TO 08CF  
                          ??_GetOSCTRIM 00A7                   GetPrevCycle@PrevCycle 00A0  
       ??_GetCumulativePeriodsForStates 00A2                   __size_of_ReadRTCAsSec 00B4  
             __size_of_I2C_Master_Start 0003               __size_of_I2C_Master_Write 0005  
                       ___lldiv@divisor 00A0                               GetCycle@i 00AD  
                       ___lldiv@counter 00AC    __end_of_UART_ReadValidTimeFromGPS_TO 0838  
 __size_of_UART_ReadValidTimeFromGPS_TO 000A            _UART_ReadValidTimeFromGPS_TO 082E  
              I2C_WriteAtAddress@IntAdd 00B1                            ??_Lcd_CharCP 00A0  
                      ___aldiv@quotient 00AA                        I2C_Master_Init@c 00AD  
                      I2C_Master_Read@a 00A0                   main@AdjustMilliSecond 01DE  
                             _UART_Init 0052                      __end_of_GetOSCTRIM 0376  
   UART_ReadValidTimeFromGPS_TO@TimeOut 00A8                            ??_IsValidGPS 00A0  
                          _ReadRTCAsSec 0931                     __size_of_WriteToRTC 0037  
                    __end_of_Lcd_CharCP 0707                             ___ftdiv@exp 00C3  
                         ??_eeprom_read 00A0                               _AdjustSec 0014  
              GetTimePeriod@PresentTime 00A4                          __end_of_GetAbs 1537  
                             ReadVars@i 00C1                               ReadVars@j 00C0  
                           ___ftmul@exp 00CE           ?_UART_ReadValidTimeFromGPS_TO 00A8  
                        __end_of___bmul 05D1                          __end_of___lmul 0A8F  
                         __pidataEEDATA 0000                          __end_of___wmul 09FE  
                    __end_of_IsValidGPS 088B                  __size_of_GetTimePeriod 0061  
                          DelayInUSec@a 00A0                              ?_UART_Init 01A1  
                          DelayInUSec@i 00A1                            ??_SetOSCTRIM 00B4  
              _STATE_CUMULATIVE_PERIODS 007A                             __end_ofPL10 0FDF  
                           __end_ofPL20 0FEA                             __end_ofPL12 0A9B  
                           __end_ofPL30 17F9                             __end_ofPL22 1658  
                           __end_ofPL14 07B8                             __end_ofPL40 0AAC  
                           __end_ofPL32 1800                             __end_ofPL24 0AA4  
                           __end_ofPL16 07C4                             __end_ofPL42 07EF  
                           __end_ofPL34 07E0                             __end_ofPL26 07D8  
                           __end_ofPL18 07CF                             __end_ofPL44 0FF9  
                           __end_ofPL36 0FF2                             __end_ofPL28 17F2  
                           __end_ofPL46 07F6                             __end_ofPL38 07E8  
                           __end_ofPL48 1000                     start_initialization 07F6  
                     __size_of_GetCycle 00B5                    __size_of_DelayInUSec 0009  
                            frexp@value 00A0                       ??_I2C_Master_Init 00B1  
                     ??_I2C_Master_Read 00A2                       ??_I2C_Master_Wait 00A0  
                     ??_I2C_Master_Stop 00A0                              ?_AdjustSec 00A0  
                       WriteLongInt@POS 00BD                                ??_GetAbs 00A2  
                       WriteLongInt@Val 00B6                      __end_of_SetOSCTRIM 03D2  
                __size_of_Lcd_WriteChar 0025                       __size_of_ReadVars 00D1  
 __end_of_GetCumulativePeriodsForStates 1712  __size_of_GetCumulativePeriodsForStates 0046  
         _GetCumulativePeriodsForStates 16CC                                ??___bmul 00AF  
                              ??___lmul 00A8                                ??___wmul 00A4  
                   __end_of_eeprom_read 05C3                              init_fetch0 0801  
                           __pdataBANK3 01ED                      _I2C_WriteAtAddress 0918  
                  __end_of_UART_Read_TO 08E1             UART_ReadFromGPS_TO@TempChar 00A6  
                     __size_of___abtoft 0019                       __size_of___altoft 002F  
                     __size_of___ftpack 0042                             __pbssEEDATA 00A6  
                         ?_WriteLongInt 00B5                    __size_of_Lcd_Command 009B  
                   ?_I2C_WriteAtAddress 00B1                               ___latbits 0002  
               main@GPS_On_Time_Counter 01C5                       __size_of___lwtoft 0010  
                         __pcstackBANK1 00A0                           __pcstackBANK3 0190  
                         _GetTimePeriod 15EE                           WriteLongInt@x 00B5  
                         WriteLongInt@y 00BE                  main@State2OnOffCounter 01D1  
                      IsValidGPS@Result 00A0                  I2C_ReadAtAddress@DevID 00A6  
                      _I2C_Master_Start 0A2E                        _I2C_Master_Write 0A29  
                  ??_I2C_WriteAtAddress 00B3                            ??_WriteToRTC 00B4  
                              ?___aldiv 00A0                                ?___almod 00A0  
                       _PREV_CYCLE_TYPE 01ED                           SetOSCTRIM@Val 00B4  
                              ?___awdiv 00A0                                ?___lbdiv 00A0  
                              ?___ftadd 00D4                                ?___ftdiv 00B6  
                              ?___lldiv 00A0                                ?___ftmul 00C5  
                              ?___ftsub 0195                                ?___fttol 00E0  
                           ??_UART_Init 00F0                        ___almod@dividend 00A4  
                             __pstrings 1000                          ??_WriteLongInt 00BC  
        ??_UART_ReadValidTimeFromGPS_TO 00A9                           _Lcd_WriteChar 043E  
                        _AdjustSec$1777 01A1                    UART_ReadFromGPS_TO@i 00A3  
                        __size_of_frexp 0039                          ?_GetTimePeriod 00A0  
                            UART_Init@x 01AB                                _EE_AUDIO 009F  
                        __size_of_round 0057                          __size_of_trunc 0044  
                    __end_of_WriteToRTC 0918                         ___aldiv@divisor 00A0  
                       ___aldiv@counter 00A8                          ___wmul@product 00A4  
                           ??_AdjustSec 00F0                             _eeprom_read 05A9  
               I2C_WriteAtAddress@DevID 00B3                       AdjustSec@TimeDiff 01A4  
                    main@OutForThePorts 01DF          ?_GetCumulativePeriodsForStates 00A0  
                     UART_Init@baudrate 01A1      UART_ReadValidTimeFromGPS_TO@Output 00A9  
                           __stringbase 1005                          ?_Lcd_WriteChar 00B1  
                     ___wmul@multiplier 00A0                               main@SyncC 01C7  
                             main@SyncM 01CE                             GetOSCTRIM@i 00A7  
                              _GetCycle 1712                     I2C_Master_Read@temp 00A2  
                     ___lmul@multiplier 00A0                                _ReadVars 04D8  
                             frexp@eptr 00A3                           _STATE_PERIODS 0020  
          __size_of_UART_ReadFromGPS_TO 0044            main@TimeSinceTheStartOfCycle 01E4  
                UART_ReadFromGPS_TO@Pos 00A7                   __size_of_UART_Read_TO 0012  
                      __size_of___aldiv 0075                                ___abtoft 0376  
                      __size_of___almod 0069                        __size_of___awdiv 0045  
                      __size_of___lbdiv 001C                        __size_of___ftadd 00C0  
                      __size_of___ftdiv 0068                        __size_of___lldiv 0048  
                              ___altoft 0229                        __size_of___ftmul 006D  
                      __size_of___ftsub 002B                        __size_of___fttol 005B  
                 GetTimePeriod@PrevTime 00A0                                ___ftpack 0320  
                    __end_of__stringtab 1006                           ?_Lcd_Delay5us 0000  
                              ___lwtoft 0004                         _I2C_Master_Init 1658  
                       _I2C_Master_Read 0A31                         _I2C_Master_Wait 0A51  
                       _I2C_Master_Stop 0A59                   I2C_ReadAtAddress@data 00A5  
                       ??_GetTimePeriod 00A8                                __ptext10 066C  
                              __ptext11 0707                                __ptext20 0931  
                              __ptext12 082E                                __ptext21 09E5  
                              __ptext13 088B                                __ptext30 1537  
                              __ptext22 0A5C                                __ptext14 08CF  
                              __ptext31 0014                                __ptext23 1658  
                              __ptext15 0838                                __ptext40 0376  
                              __ptext32 00CE                                __ptext24 1684  
                              __ptext16 0052                                __ptext41 0320  
                              __ptext33 0125                                __ptext25 15EE  
                              __ptext17 0744                                __ptext50 0A31  
                              __ptext42 03BA                                __ptext34 070B  
                              __ptext26 1712                                __ptext18 04D8  
                              __ptext51 0A51                                __ptext43 05C3  
                              __ptext35 0258                                __ptext27 16CC  
                              __ptext19 05A9                                __ptext44 0918  
                              __ptext36 0229                                __ptext28 17C7  
                              __ptext45 0362                                __ptext37 038F  
                              __ptext29 152F                                __ptext46 09FE  
                              __ptext38 0169                                __ptext47 0A29  
                              __ptext39 02B3                                __ptext48 0A59  
                              __ptext49 0A2E                       __CFG_BOR4V$BOR21V 0000  
                       ___almod@divisor 00A0                         ___almod@counter 00A8  
                           Lcd_CharCP@c 00A1                            _UART_Read_TO 08CF  
                            trunc@expon 0193                           __size_of_main 04C5  
                         ?_GetPrevCycle 0000                              _CYCLE_TYPE 01EB  
                  __end_of_WriteLongInt 043E                  I2C_WriteAtAddress@data 00B2  
        GetCumulativePeriodsForStates@i 00A7          GetCumulativePeriodsForStates@j 00A6  
                      AdjustSec@tRIMVAL 01A5                         ??_Lcd_WriteChar 00B3  
                        ??_Lcd_Delay5us 00A0                            _STATE_BREAKS 0164  
              __end_of_I2C_Master_Start 0A31                __end_of_I2C_Master_Write 0A2E  
                         ??_DelayInUSec 00A0                                init_ram0 0805  
                        ??_GetPrevCycle 00A0                        ___lldiv@dividend 00A4  
                         ___abtoft@sign 00AC                               stringcode 1000  
               __end_of_I2C_Master_Init 1684                 __end_of_I2C_Master_Read 0A51  
               __end_of_I2C_Master_Wait 0A59                 __end_of_I2C_Master_Stop 0A5C  
                         ??_Lcd_Command 00A0            main@ReadyForCalcOfSystemSync 01C9  
                      ___lldiv@quotient 00A8                       I2C_Master_Write@d 00A0  
                              stringdir 1000                                stringtab 1000  
                          ___aldiv@sign 00A9                            ___almod@sign 00A9  
                           main@GPSData 01B7                     __end_of_DelayInUSec 1540  
                          ?_eeprom_read 0000             __size_of_I2C_WriteAtAddress 0019  
