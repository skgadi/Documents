

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Mon Jul 17 18:06:29 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75                           	psect	pa_nodes0,global,class=CODE,delta=1
    76  0000                     
    77                           ; Version 1.42
    78                           ; Generated 13/04/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC18F26K40 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     tosu	equ	0xFFF
   112                           tosh	equ	0xFFE
   113                           tosl	equ	0xFFD
   114                           pclath	equ	0xFFA
   115                           tblptru	equ	0xFF8
   116                           tblptrh	equ	0xFF7
   117                           tblptrl	equ	0xFF6
   118                           tablat	equ	0xFF5
   119                           prodh	equ	0xFF4
   120                           prodl	equ	0xFF3
   121                           intcon	equ	0xFF2
   122                           plusw0	equ	0xFEB
   123                           wreg	equ	0xFE8
   124                           indf1	equ	0xFE7
   125                           plusw1	equ	0xFE3
   126                           fsr1h	equ	0xFE2
   127                           fsr1l	equ	0xFE1
   128                           indf2	equ	0xFDF
   129                           postinc2	equ	0xFDE
   130                           postdec2	equ	0xFDD
   131                           plusw2	equ	0xFDB
   132                           fsr2h	equ	0xFDA
   133                           fsr2l	equ	0xFD9
   134                           status	equ	0xFD8
   135                           
   136                           	psect	idataCOMRAM
   137  0029AE                     __pidataCOMRAM:
   138                           	opt stack 0
   139                           
   140                           ;initializer for GetDay@t
   141  0029AE  0000               	dw	0
   142  0029B0  0003               	dw	3
   143  0029B2  0002               	dw	2
   144  0029B4  0005               	dw	5
   145  0029B6  0000               	dw	0
   146  0029B8  0003               	dw	3
   147  0029BA  0005               	dw	5
   148  0029BC  0001               	dw	1
   149  0029BE  0004               	dw	4
   150  0029C0  0006               	dw	6
   151  0029C2  0002               	dw	2
   152  0029C4  0004               	dw	4
   153                           tosu	equ	0xFFF
   154                           tosh	equ	0xFFE
   155                           tosl	equ	0xFFD
   156                           pclath	equ	0xFFA
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           prodh	equ	0xFF4
   162                           prodl	equ	0xFF3
   163                           intcon	equ	0xFF2
   164                           plusw0	equ	0xFEB
   165                           wreg	equ	0xFE8
   166                           indf1	equ	0xFE7
   167                           plusw1	equ	0xFE3
   168                           fsr1h	equ	0xFE2
   169                           fsr1l	equ	0xFE1
   170                           indf2	equ	0xFDF
   171                           postinc2	equ	0xFDE
   172                           postdec2	equ	0xFDD
   173                           plusw2	equ	0xFDB
   174                           fsr2h	equ	0xFDA
   175                           fsr2l	equ	0xFD9
   176                           status	equ	0xFD8
   177                           
   178                           	psect	idataBANK0
   179  002946                     __pidataBANK0:
   180                           	opt stack 0
   181                           
   182                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
   183  002946  001F               	dw	31
   184  002948  001C               	dw	28
   185  00294A  001F               	dw	31
   186  00294C  001E               	dw	30
   187  00294E  001F               	dw	31
   188  002950  001E               	dw	30
   189  002952  001F               	dw	31
   190  002954  001F               	dw	31
   191  002956  001E               	dw	30
   192  002958  001F               	dw	31
   193  00295A  001E               	dw	30
   194  00295C  001F               	dw	31
   195                           
   196                           ;initializer for ReadGPS_DATE_TIME@F11442
   197  00295E  2D                 	db	45
   198  00295F  2D                 	db	45
   199  002960  2D                 	db	45
   200  002961  2D                 	db	45
   201  002962  2D                 	db	45
   202  002963  2D                 	db	45
   203  002964  00                 	db	0
   204                           
   205                           ;initializer for ReadGPS_DATE_TIME@F11440
   206  002965  2D                 	db	45
   207  002966  2D                 	db	45
   208  002967  2D                 	db	45
   209  002968  2D                 	db	45
   210  002969  2D                 	db	45
   211  00296A  2D                 	db	45
   212  00296B  00                 	db	0
   213                           
   214                           ;initializer for _GLOBAL_CENTURY
   215  00296C  14                 	db	20
   216                           tosu	equ	0xFFF
   217                           tosh	equ	0xFFE
   218                           tosl	equ	0xFFD
   219                           pclath	equ	0xFFA
   220                           tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           tblptrl	equ	0xFF6
   223                           tablat	equ	0xFF5
   224                           prodh	equ	0xFF4
   225                           prodl	equ	0xFF3
   226                           intcon	equ	0xFF2
   227                           plusw0	equ	0xFEB
   228                           wreg	equ	0xFE8
   229                           indf1	equ	0xFE7
   230                           plusw1	equ	0xFE3
   231                           fsr1h	equ	0xFE2
   232                           fsr1l	equ	0xFE1
   233                           indf2	equ	0xFDF
   234                           postinc2	equ	0xFDE
   235                           postdec2	equ	0xFDD
   236                           plusw2	equ	0xFDB
   237                           fsr2h	equ	0xFDA
   238                           fsr2l	equ	0xFD9
   239                           status	equ	0xFD8
   240                           
   241                           	psect	smallconst
   242  000F00                     __psmallconst:
   243                           	opt stack 0
   244  000F00  00                 	db	0
   245  000F01                     ReadGPSDateTime@F11434:
   246                           	opt stack 0
   247  000F01  24                 	db	36
   248  000F02  47                 	db	71
   249  000F03  50                 	db	80
   250  000F04  52                 	db	82
   251  000F05  4D                 	db	77
   252  000F06  43                 	db	67
   253  000F07  2C                 	db	44
   254  000F08                     __end_ofReadGPSDateTime@F11434:
   255                           	opt stack 0
   256  0000                     _OSCTUNE	set	3805
   257  0000                     _OSCFRQ	set	3806
   258  0000                     _OSCEN	set	3804
   259  0000                     _OSCCON3	set	3802
   260  0000                     _OSCCON1	set	3800
   261  0000                     _RC6PPS	set	3837
   262  0000                     _RX1PPSbits	set	3765
   263  0000                     _PPSLOCKbits	set	3744
   264  0000                     _PPSLOCK	set	3744
   265  0000                     _PIR0bits	set	3786
   266  0000                     _PIE0bits	set	3778
   267  0000                     _PIR3bits	set	3789
   268  0000                     _PLLR	set	30424
   269  0000                     _ODCONC	set	3871
   270  0000                     _ODCONB	set	3863
   271  0000                     _ODCONA	set	3855
   272  0000                     _WPUC	set	3872
   273  0000                     _WPUA	set	3856
   274  0000                     _WPUB	set	3864
   275  0000                     _WPUE	set	3885
   276  0000                     _ANSELA	set	3857
   277  0000                     _ANSELB	set	3865
   278  0000                     _ANSELC	set	3873
   279  0000                     _LATCbits	set	3973
   280  0000                     _T0CON0bits	set	4053
   281  0000                     _TMR0L	set	4051
   282  0000                     _TMR0H	set	4052
   283  0000                     _T0CON1	set	4054
   284  0000                     _T0CON0	set	4053
   285  0000                     _TRISC	set	3978
   286  0000                     _TRISB	set	3977
   287  0000                     _TRISA	set	3976
   288  0000                     _LATC	set	3973
   289  0000                     _LATB	set	3972
   290  0000                     _LATA	set	3971
   291  0000                     _INTCONbits	set	4082
   292  0000                     _RC1REG	set	3993
   293  0000                     _RC1STAbits	set	3997
   294  0000                     _SP1BRGH	set	3996
   295  0000                     _SP1BRGL	set	3995
   296  0000                     _TX1STA	set	3998
   297  0000                     _RC1STA	set	3997
   298  0000                     _BAUD1CON	set	3999
   299  0000                     _NVMDAT	set	3968
   300  0000                     _NVMADRH	set	3967
   301  0000                     _NVMADRL	set	3966
   302  0000                     _NVMCON1bits	set	3969
   303  0000                     _LATAbits	set	3971
   304  0000                     _TRISAbits	set	3976
   305  0000                     _GIE	set	32663
   306  000F08                     STR_2:
   307                           
   308                           ; BSR set to: 14
   309  000F08  3A                 	db	58	;':'
   310  000F09  28                 	db	40
   311  000F0A  00                 	db	0
   312  000F0B                     STR_1:
   313                           
   314                           ; BSR set to: 14
   315  000F0B  3A                 	db	58	;':'
   316  000F0C  29                 	db	41
   317  000F0D  00                 	db	0
   318                           
   319                           ; #config settings
   320  000F0E  00                 	db	0	; dummy byte at the end
   321  0000                     tosu	equ	0xFFF
   322                           tosh	equ	0xFFE
   323                           tosl	equ	0xFFD
   324                           pclath	equ	0xFFA
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           prodh	equ	0xFF4
   330                           prodl	equ	0xFF3
   331                           intcon	equ	0xFF2
   332                           plusw0	equ	0xFEB
   333                           wreg	equ	0xFE8
   334                           indf1	equ	0xFE7
   335                           plusw1	equ	0xFE3
   336                           fsr1h	equ	0xFE2
   337                           fsr1l	equ	0xFE1
   338                           indf2	equ	0xFDF
   339                           postinc2	equ	0xFDE
   340                           postdec2	equ	0xFDD
   341                           plusw2	equ	0xFDB
   342                           fsr2h	equ	0xFDA
   343                           fsr2l	equ	0xFD9
   344                           status	equ	0xFD8
   345                           
   346                           	psect	cinit
   347  00233A                     __pcinit:
   348                           	opt stack 0
   349  00233A                     start_initialization:
   350                           	opt stack 0
   351  00233A                     __initialization:
   352                           	opt stack 0
   353                           
   354                           ; Initialize objects allocated to BANK0 (39 bytes)
   355                           ; load TBLPTR registers with __pidataBANK0
   356  00233A  0E46               	movlw	low __pidataBANK0
   357  00233C  6EF6               	movwf	tblptrl,c
   358  00233E  0E29               	movlw	high __pidataBANK0
   359  002340  6EF7               	movwf	tblptrh,c
   360  002342  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   361  002344  6EF8               	movwf	tblptru,c
   362  002346  EE00  F0AC         	lfsr	0,__pdataBANK0
   363  00234A  EE10 F027          	lfsr	1,39
   364  00234E                     copy_data0:
   365  00234E  0009               	tblrd		*+
   366  002350  CFF5 FFEE          	movff	tablat,postinc0
   367  002354  50E5               	movf	postdec1,w,c
   368  002356  50E1               	movf	fsr1l,w,c
   369  002358  E1FA               	bnz	copy_data0
   370                           
   371                           ; Initialize objects allocated to COMRAM (24 bytes)
   372                           ; load TBLPTR registers with __pidataCOMRAM
   373  00235A  0EAE               	movlw	low __pidataCOMRAM
   374  00235C  6EF6               	movwf	tblptrl,c
   375  00235E  0E29               	movlw	high __pidataCOMRAM
   376  002360  6EF7               	movwf	tblptrh,c
   377  002362  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   378  002364  6EF8               	movwf	tblptru,c
   379  002366  EE00  F03D         	lfsr	0,__pdataCOMRAM
   380  00236A  EE10 F018          	lfsr	1,24
   381  00236E                     copy_data1:
   382  00236E  0009               	tblrd		*+
   383  002370  CFF5 FFEE          	movff	tablat,postinc0
   384  002374  50E5               	movf	postdec1,w,c
   385  002376  50E1               	movf	fsr1l,w,c
   386  002378  E1FA               	bnz	copy_data1
   387                           
   388                           ; Clear objects allocated to BIGRAM (960 bytes)
   389  00237A  EE02  F0F0         	lfsr	0,__pbssBIGRAM
   390  00237E  EE13 F0C0          	lfsr	1,960
   391  002382                     clear_0:
   392  002382  6AEE               	clrf	postinc0,c
   393  002384  50E5               	movf	postdec1,w,c
   394  002386  50E1               	movf	fsr1l,w,c
   395  002388  E1FC               	bnz	clear_0
   396  00238A  50E2               	movf	fsr1h,w,c
   397  00238C  E1FA               	bnz	clear_0
   398                           
   399                           ; Clear objects allocated to BANK2 (240 bytes)
   400  00238E  EE02  F000         	lfsr	0,__pbssBANK2
   401  002392  0EF0               	movlw	240
   402  002394                     clear_1:
   403  002394  6AEE               	clrf	postinc0,c
   404  002396  06E8               	decf	wreg,f,c
   405  002398  E1FD               	bnz	clear_1
   406                           
   407                           ; Clear objects allocated to BANK1 (68 bytes)
   408  00239A  EE01  F000         	lfsr	0,__pbssBANK1
   409  00239E  0E44               	movlw	68
   410  0023A0                     clear_2:
   411  0023A0  6AEE               	clrf	postinc0,c
   412  0023A2  06E8               	decf	wreg,f,c
   413  0023A4  E1FD               	bnz	clear_2
   414                           
   415                           ; Clear objects allocated to BANK0 (32 bytes)
   416  0023A6  EE00  F0D3         	lfsr	0,__pbssBANK0
   417  0023AA  0E20               	movlw	32
   418  0023AC                     clear_3:
   419  0023AC  6AEE               	clrf	postinc0,c
   420  0023AE  06E8               	decf	wreg,f,c
   421  0023B0  E1FD               	bnz	clear_3
   422                           
   423                           ; Clear objects allocated to COMRAM (7 bytes)
   424  0023B2  EE00  F055         	lfsr	0,__pbssCOMRAM
   425  0023B6  0E07               	movlw	7
   426  0023B8                     clear_4:
   427  0023B8  6AEE               	clrf	postinc0,c
   428  0023BA  06E8               	decf	wreg,f,c
   429  0023BC  E1FD               	bnz	clear_4
   430  0023BE                     end_of_initialization:
   431                           	opt stack 0
   432  0023BE                     __end_of__initialization:
   433                           	opt stack 0
   434  0023BE  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   435  0023C0  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   436  0023C2  0100               	movlb	0
   437  0023C4  EFF3  F009         	goto	_main	;jump to C main() function
   438                           tosu	equ	0xFFF
   439                           tosh	equ	0xFFE
   440                           tosl	equ	0xFFD
   441                           pclath	equ	0xFFA
   442                           tblptru	equ	0xFF8
   443                           tblptrh	equ	0xFF7
   444                           tblptrl	equ	0xFF6
   445                           tablat	equ	0xFF5
   446                           prodh	equ	0xFF4
   447                           prodl	equ	0xFF3
   448                           intcon	equ	0xFF2
   449                           postinc0	equ	0xFEE
   450                           plusw0	equ	0xFEB
   451                           wreg	equ	0xFE8
   452                           indf1	equ	0xFE7
   453                           postdec1	equ	0xFE5
   454                           plusw1	equ	0xFE3
   455                           fsr1h	equ	0xFE2
   456                           fsr1l	equ	0xFE1
   457                           indf2	equ	0xFDF
   458                           postinc2	equ	0xFDE
   459                           postdec2	equ	0xFDD
   460                           plusw2	equ	0xFDB
   461                           fsr2h	equ	0xFDA
   462                           fsr2l	equ	0xFD9
   463                           status	equ	0xFD8
   464                           
   465                           	psect	bssCOMRAM
   466  000055                     __pbssCOMRAM:
   467                           	opt stack 0
   468  000055                     _TMR0_InterruptHandler:
   469                           	opt stack 0
   470  000055                     	ds	2
   471  000057                     _timer0ReloadVal16bit:
   472                           	opt stack 0
   473  000057                     	ds	2
   474  000059                     _GLOBAL_I:
   475                           	opt stack 0
   476  000059                     	ds	2
   477  00005B                     _CENTI_SECOND_COUNT:
   478                           	opt stack 0
   479  00005B                     	ds	1
   480                           tosu	equ	0xFFF
   481                           tosh	equ	0xFFE
   482                           tosl	equ	0xFFD
   483                           pclath	equ	0xFFA
   484                           tblptru	equ	0xFF8
   485                           tblptrh	equ	0xFF7
   486                           tblptrl	equ	0xFF6
   487                           tablat	equ	0xFF5
   488                           prodh	equ	0xFF4
   489                           prodl	equ	0xFF3
   490                           intcon	equ	0xFF2
   491                           postinc0	equ	0xFEE
   492                           plusw0	equ	0xFEB
   493                           wreg	equ	0xFE8
   494                           indf1	equ	0xFE7
   495                           postdec1	equ	0xFE5
   496                           plusw1	equ	0xFE3
   497                           fsr1h	equ	0xFE2
   498                           fsr1l	equ	0xFE1
   499                           indf2	equ	0xFDF
   500                           postinc2	equ	0xFDE
   501                           postdec2	equ	0xFDD
   502                           plusw2	equ	0xFDB
   503                           fsr2h	equ	0xFDA
   504                           fsr2l	equ	0xFD9
   505                           status	equ	0xFD8
   506                           
   507                           	psect	dataCOMRAM
   508  00003D                     __pdataCOMRAM:
   509                           	opt stack 0
   510  00003D                     GetDay@t:
   511                           	opt stack 0
   512  00003D                     	ds	24
   513                           tosu	equ	0xFFF
   514                           tosh	equ	0xFFE
   515                           tosl	equ	0xFFD
   516                           pclath	equ	0xFFA
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           prodh	equ	0xFF4
   522                           prodl	equ	0xFF3
   523                           intcon	equ	0xFF2
   524                           postinc0	equ	0xFEE
   525                           plusw0	equ	0xFEB
   526                           wreg	equ	0xFE8
   527                           indf1	equ	0xFE7
   528                           postdec1	equ	0xFE5
   529                           plusw1	equ	0xFE3
   530                           fsr1h	equ	0xFE2
   531                           fsr1l	equ	0xFE1
   532                           indf2	equ	0xFDF
   533                           postinc2	equ	0xFDE
   534                           postdec2	equ	0xFDD
   535                           plusw2	equ	0xFDB
   536                           fsr2h	equ	0xFDA
   537                           fsr2l	equ	0xFD9
   538                           status	equ	0xFD8
   539                           
   540                           	psect	bssBANK0
   541  0000D3                     __pbssBANK0:
   542                           	opt stack 0
   543  0000D3                     _GPS_DATE_TIME:
   544                           	opt stack 0
   545  0000D3                     	ds	11
   546  0000DE                     _DATE_TIME:
   547                           	opt stack 0
   548  0000DE                     	ds	11
   549  0000E9                     _DAY_LIGHT_END:
   550                           	opt stack 0
   551  0000E9                     	ds	4
   552  0000ED                     _DAY_LIGHT_START:
   553                           	opt stack 0
   554  0000ED                     	ds	4
   555  0000F1                     _TIME_ZONE:
   556                           	opt stack 0
   557  0000F1                     	ds	2
   558                           tosu	equ	0xFFF
   559                           tosh	equ	0xFFE
   560                           tosl	equ	0xFFD
   561                           pclath	equ	0xFFA
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           prodh	equ	0xFF4
   567                           prodl	equ	0xFF3
   568                           intcon	equ	0xFF2
   569                           postinc0	equ	0xFEE
   570                           plusw0	equ	0xFEB
   571                           wreg	equ	0xFE8
   572                           indf1	equ	0xFE7
   573                           postdec1	equ	0xFE5
   574                           plusw1	equ	0xFE3
   575                           fsr1h	equ	0xFE2
   576                           fsr1l	equ	0xFE1
   577                           indf2	equ	0xFDF
   578                           postinc2	equ	0xFDE
   579                           postdec2	equ	0xFDD
   580                           plusw2	equ	0xFDB
   581                           fsr2h	equ	0xFDA
   582                           fsr2l	equ	0xFD9
   583                           status	equ	0xFD8
   584                           
   585                           	psect	dataBANK0
   586  0000AC                     __pdataBANK0:
   587                           	opt stack 0
   588  0000AC                     projMain@NO_OF_DAYS_IN_A_MONTH:
   589                           	opt stack 0
   590  0000AC                     	ds	24
   591  0000C4                     ReadGPS_DATE_TIME@F11442:
   592                           	opt stack 0
   593  0000C4                     	ds	7
   594  0000CB                     ReadGPS_DATE_TIME@F11440:
   595                           	opt stack 0
   596  0000CB                     	ds	7
   597  0000D2                     _GLOBAL_CENTURY:
   598                           	opt stack 0
   599  0000D2                     	ds	1
   600                           tosu	equ	0xFFF
   601                           tosh	equ	0xFFE
   602                           tosl	equ	0xFFD
   603                           pclath	equ	0xFFA
   604                           tblptru	equ	0xFF8
   605                           tblptrh	equ	0xFF7
   606                           tblptrl	equ	0xFF6
   607                           tablat	equ	0xFF5
   608                           prodh	equ	0xFF4
   609                           prodl	equ	0xFF3
   610                           intcon	equ	0xFF2
   611                           postinc0	equ	0xFEE
   612                           plusw0	equ	0xFEB
   613                           wreg	equ	0xFE8
   614                           indf1	equ	0xFE7
   615                           postdec1	equ	0xFE5
   616                           plusw1	equ	0xFE3
   617                           fsr1h	equ	0xFE2
   618                           fsr1l	equ	0xFE1
   619                           indf2	equ	0xFDF
   620                           postinc2	equ	0xFDE
   621                           postdec2	equ	0xFDD
   622                           plusw2	equ	0xFDB
   623                           fsr2h	equ	0xFDA
   624                           fsr2l	equ	0xFD9
   625                           status	equ	0xFD8
   626                           
   627                           	psect	bssBANK1
   628  000100                     __pbssBANK1:
   629                           	opt stack 0
   630  000100                     _CYCLES:
   631                           	opt stack 0
   632  000100                     	ds	68
   633                           tosu	equ	0xFFF
   634                           tosh	equ	0xFFE
   635                           tosl	equ	0xFFD
   636                           pclath	equ	0xFFA
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           prodh	equ	0xFF4
   642                           prodl	equ	0xFF3
   643                           intcon	equ	0xFF2
   644                           postinc0	equ	0xFEE
   645                           plusw0	equ	0xFEB
   646                           wreg	equ	0xFE8
   647                           indf1	equ	0xFE7
   648                           postdec1	equ	0xFE5
   649                           plusw1	equ	0xFE3
   650                           fsr1h	equ	0xFE2
   651                           fsr1l	equ	0xFE1
   652                           indf2	equ	0xFDF
   653                           postinc2	equ	0xFDE
   654                           postdec2	equ	0xFDD
   655                           plusw2	equ	0xFDB
   656                           fsr2h	equ	0xFDA
   657                           fsr2l	equ	0xFD9
   658                           status	equ	0xFD8
   659                           
   660                           	psect	bssBANK2
   661  000200                     __pbssBANK2:
   662                           	opt stack 0
   663  000200                     _EVENTS:
   664                           	opt stack 0
   665  000200                     	ds	240
   666                           tosu	equ	0xFFF
   667                           tosh	equ	0xFFE
   668                           tosl	equ	0xFFD
   669                           pclath	equ	0xFFA
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           prodh	equ	0xFF4
   675                           prodl	equ	0xFF3
   676                           intcon	equ	0xFF2
   677                           postinc0	equ	0xFEE
   678                           plusw0	equ	0xFEB
   679                           wreg	equ	0xFE8
   680                           indf1	equ	0xFE7
   681                           postdec1	equ	0xFE5
   682                           plusw1	equ	0xFE3
   683                           fsr1h	equ	0xFE2
   684                           fsr1l	equ	0xFE1
   685                           indf2	equ	0xFDF
   686                           postinc2	equ	0xFDE
   687                           postdec2	equ	0xFDD
   688                           plusw2	equ	0xFDB
   689                           fsr2h	equ	0xFDA
   690                           fsr2l	equ	0xFD9
   691                           status	equ	0xFD8
   692                           
   693                           	psect	bssBIGRAM
   694  0002F0                     __pbssBIGRAM:
   695                           	opt stack 0
   696  0002F0                     _STATES:
   697                           	opt stack 0
   698  0002F0                     	ds	960
   699                           tosu	equ	0xFFF
   700                           tosh	equ	0xFFE
   701                           tosl	equ	0xFFD
   702                           pclath	equ	0xFFA
   703                           tblptru	equ	0xFF8
   704                           tblptrh	equ	0xFF7
   705                           tblptrl	equ	0xFF6
   706                           tablat	equ	0xFF5
   707                           prodh	equ	0xFF4
   708                           prodl	equ	0xFF3
   709                           intcon	equ	0xFF2
   710                           postinc0	equ	0xFEE
   711                           plusw0	equ	0xFEB
   712                           wreg	equ	0xFE8
   713                           indf1	equ	0xFE7
   714                           postdec1	equ	0xFE5
   715                           plusw1	equ	0xFE3
   716                           fsr1h	equ	0xFE2
   717                           fsr1l	equ	0xFE1
   718                           indf2	equ	0xFDF
   719                           postinc2	equ	0xFDE
   720                           postdec2	equ	0xFDD
   721                           plusw2	equ	0xFDB
   722                           fsr2h	equ	0xFDA
   723                           fsr2l	equ	0xFD9
   724                           status	equ	0xFD8
   725                           
   726                           	psect	cstackBANK0
   727  000060                     __pcstackBANK0:
   728                           	opt stack 0
   729  000060                     ??_Lcd_CharCP:
   730  000060                     ??_Lcd_Delay5500us:
   731  000060                     ??_Lcd_Command:
   732  000060                     ?___wmul:
   733                           	opt stack 0
   734  000060                     ?___awdiv:
   735                           	opt stack 0
   736  000060                     ?___lwmod:
   737                           	opt stack 0
   738  000060                     ?___lmul:
   739                           	opt stack 0
   740  000060                     ?___aldiv:
   741                           	opt stack 0
   742  000060                     ReadGPSDateTime@Date:
   743                           	opt stack 0
   744  000060                     ValidateDateTime@Date:
   745                           	opt stack 0
   746  000060                     PIN_MANAGER_Initialize@state:
   747                           	opt stack 0
   748  000060                     ReadEeprom@Address:
   749                           	opt stack 0
   750  000060                     TMR0_SetInterruptHandler@InterruptHandler:
   751                           	opt stack 0
   752  000060                     ___wmul@multiplier:
   753                           	opt stack 0
   754  000060                     ___awdiv@dividend:
   755                           	opt stack 0
   756  000060                     ___lwmod@dividend:
   757                           	opt stack 0
   758  000060                     ___lmul@multiplier:
   759                           	opt stack 0
   760  000060                     ___aldiv@dividend:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x0
   764  000060                     	ds	1
   765  000061                     ReadGPSDateTime@Time:
   766                           	opt stack 0
   767  000061                     ValidateDateTime@Time:
   768                           	opt stack 0
   769                           
   770                           ; 1 bytes @ 0x1
   771  000061                     	ds	1
   772  000062                     ??_TMR0_Initialize:
   773  000062                     ??_ReadGPSDateTime:
   774  000062                     ??_ValidateDateTime:
   775  000062                     Lcd_CharCP@c:
   776                           	opt stack 0
   777  000062                     Lcd_Command@command:
   778                           	opt stack 0
   779  000062                     ___wmul@multiplicand:
   780                           	opt stack 0
   781  000062                     ___awdiv@divisor:
   782                           	opt stack 0
   783  000062                     ___lwmod@divisor:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x2
   787  000062                     	ds	1
   788  000063                     ValidateDateTime@Item:
   789                           	opt stack 0
   790  000063                     Lcd_Init@data:
   791                           	opt stack 0
   792  000063                     Lcd_Text@x:
   793                           	opt stack 0
   794                           
   795                           ; 1 bytes @ 0x3
   796  000063                     	ds	1
   797  000064                     Lcd_Text@buffer:
   798                           	opt stack 0
   799  000064                     ___awdiv@counter:
   800                           	opt stack 0
   801  000064                     ___lwmod@counter:
   802                           	opt stack 0
   803  000064                     ___wmul@product:
   804                           	opt stack 0
   805  000064                     ___lmul@multiplicand:
   806                           	opt stack 0
   807  000064                     ___aldiv@divisor:
   808                           	opt stack 0
   809                           
   810                           ; 4 bytes @ 0x4
   811  000064                     	ds	1
   812  000065                     ?_IncreaseByAYear:
   813                           	opt stack 0
   814  000065                     ?_DecreaseByAYear:
   815                           	opt stack 0
   816  000065                     Lcd_Text@y:
   817                           	opt stack 0
   818  000065                     ___awdiv@sign:
   819                           	opt stack 0
   820  000065                     IncreaseByAYear@dt:
   821                           	opt stack 0
   822  000065                     DecreaseByAYear@dt:
   823                           	opt stack 0
   824                           
   825                           ; 11 bytes @ 0x5
   826  000065                     	ds	1
   827  000066                     ??_LoadEventsFromEeprom:
   828  000066                     ??_LoadCyclesFromEeprom:
   829  000066                     Lcd_Text@data:
   830                           	opt stack 0
   831  000066                     ___awdiv@quotient:
   832                           	opt stack 0
   833  000066                     LoadSettingsFromEeprom@Temp32:
   834                           	opt stack 0
   835  000066                     ReadGPSDateTime@StartCode:
   836                           	opt stack 0
   837                           
   838                           ; 7 bytes @ 0x6
   839  000066                     	ds	2
   840  000068                     ??_LoadStatesFromEeprom:
   841  000068                     ?___awmod:
   842                           	opt stack 0
   843  000068                     ___aldiv@counter:
   844                           	opt stack 0
   845  000068                     ___awmod@dividend:
   846                           	opt stack 0
   847  000068                     ___lmul@product:
   848                           	opt stack 0
   849                           
   850                           ; 4 bytes @ 0x8
   851  000068                     	ds	1
   852  000069                     ___aldiv@sign:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x9
   856  000069                     	ds	1
   857  00006A                     LoadSettingsFromEeprom@Temp16:
   858                           	opt stack 0
   859  00006A                     LoadEventsFromEeprom@i:
   860                           	opt stack 0
   861  00006A                     ___awmod@divisor:
   862                           	opt stack 0
   863  00006A                     ___aldiv@quotient:
   864                           	opt stack 0
   865                           
   866                           ; 4 bytes @ 0xA
   867  00006A                     	ds	1
   868  00006B                     LoadStatesFromEeprom@AddAudioNormal:
   869                           	opt stack 0
   870                           
   871                           ; 2 bytes @ 0xB
   872  00006B                     	ds	1
   873  00006C                     ?_TimeTextToSecond:
   874                           	opt stack 0
   875  00006C                     TimeTextToSecond@Time:
   876                           	opt stack 0
   877  00006C                     ___awmod@counter:
   878                           	opt stack 0
   879  00006C                     LoadSettingsFromEeprom@Address:
   880                           	opt stack 0
   881  00006C                     LoadEventsFromEeprom@Address:
   882                           	opt stack 0
   883                           
   884                           ; 2 bytes @ 0xC
   885  00006C                     	ds	1
   886  00006D                     ___awmod@sign:
   887                           	opt stack 0
   888  00006D                     ReadGPSDateTime@i:
   889                           	opt stack 0
   890  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
   891                           	opt stack 0
   892  00006D                     LoadCyclesFromEeprom@Address:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0xD
   896  00006D                     	ds	1
   897  00006E                     GetDay@Date:
   898                           	opt stack 0
   899  00006E                     Lcd_WriteChar@x:
   900                           	opt stack 0
   901  00006E                     LoadEventsFromEeprom@Temp16:
   902                           	opt stack 0
   903                           
   904                           ; 2 bytes @ 0xE
   905  00006E                     	ds	1
   906  00006F                     ??_GetDay:
   907  00006F                     ReadGPSDateTime@Commas:
   908                           	opt stack 0
   909  00006F                     Lcd_WriteChar@c:
   910                           	opt stack 0
   911  00006F                     LoadStatesFromEeprom@TempNormalAdd:
   912                           	opt stack 0
   913  00006F                     LoadCyclesFromEeprom@j:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0xF
   917  00006F                     	ds	1
   918  000070                     ??_TimeTextToSecond:
   919  000070                     ?_IncreaseByAMonth:
   920                           	opt stack 0
   921  000070                     ?_DecreaseByAMonth:
   922                           	opt stack 0
   923  000070                     ReadGPSDateTime@TempChar:
   924                           	opt stack 0
   925  000070                     Lcd_WriteChar@y:
   926                           	opt stack 0
   927  000070                     IncreaseByAMonth@dt:
   928                           	opt stack 0
   929  000070                     DecreaseByAMonth@dt:
   930                           	opt stack 0
   931                           
   932                           ; 11 bytes @ 0x10
   933  000070                     	ds	1
   934  000071                     ReadGPSDateTime@Pos:
   935                           	opt stack 0
   936  000071                     Lcd_WriteChar@data:
   937                           	opt stack 0
   938  000071                     LoadStatesFromEeprom@TempSpecialAdd:
   939                           	opt stack 0
   940  000071                     LoadCyclesFromEeprom@i:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x11
   944  000071                     	ds	1
   945  000072                     WriteLongInt@x:
   946                           	opt stack 0
   947                           
   948                           ; 1 bytes @ 0x12
   949  000072                     	ds	1
   950  000073                     GetDay@d:
   951                           	opt stack 0
   952  000073                     LoadStatesFromEeprom@AudAddInc:
   953                           	opt stack 0
   954  000073                     LoadCyclesFromEeprom@i_1299:
   955                           	opt stack 0
   956  000073                     WriteLongInt@Val:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x13
   960  000073                     	ds	1
   961  000074                     GetDay@m:
   962                           	opt stack 0
   963  000074                     LoadStatesFromEeprom@j:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x14
   967  000074                     	ds	1
   968  000075                     GetDay@y:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x15
   972  000075                     	ds	1
   973  000076                     LoadStatesFromEeprom@j_1234:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x16
   977  000076                     	ds	1
   978  000077                     WriteLongInt@size:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x17
   982  000077                     	ds	1
   983  000078                     WriteLongInt@Sign:
   984                           	opt stack 0
   985  000078                     LoadStatesFromEeprom@AddStates:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x18
   989  000078                     	ds	1
   990  000079                     WriteLongInt@POS:
   991                           	opt stack 0
   992                           
   993                           ; 1 bytes @ 0x19
   994  000079                     	ds	1
   995  00007A                     WriteLongInt@y:
   996                           	opt stack 0
   997  00007A                     LoadStatesFromEeprom@i:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x1A
  1001  00007A                     	ds	1
  1002  00007B                     ?_IncreaseByADay:
  1003                           	opt stack 0
  1004  00007B                     ?_DecreaseByADay:
  1005                           	opt stack 0
  1006  00007B                     IncreaseByADay@dt:
  1007                           	opt stack 0
  1008  00007B                     DecreaseByADay@dt:
  1009                           	opt stack 0
  1010                           
  1011                           ; 11 bytes @ 0x1B
  1012  00007B                     	ds	1
  1013  00007C                     
  1014                           ; 1 bytes @ 0x1C
  1015  00007C                     	ds	4
  1016  000080                     TimeTextToSecond@Second:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x20
  1020  000080                     	ds	6
  1021  000086                     ??_IncreaseByADay:
  1022  000086                     ??_DecreaseByADay:
  1023                           
  1024                           ; 1 bytes @ 0x26
  1025  000086                     	ds	1
  1026  000087                     DecreaseByADay@MonthDays:
  1027                           	opt stack 0
  1028                           
  1029                           ; 1 bytes @ 0x27
  1030  000087                     	ds	1
  1031  000088                     IncreaseByADay@MonthDays:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x28
  1035  000088                     	ds	1
  1036  000089                     ?_AdjustDayLightSaving:
  1037                           	opt stack 0
  1038  000089                     AdjustDayLightSaving@dt:
  1039                           	opt stack 0
  1040                           
  1041                           ; 11 bytes @ 0x29
  1042  000089                     	ds	11
  1043  000094                     AdjustDayLightSaving@Start:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x34
  1047  000094                     	ds	2
  1048  000096                     AdjustDayLightSaving@End:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x36
  1052  000096                     	ds	2
  1053  000098                     AdjustDayLightSaving@Present:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x38
  1057  000098                     	ds	2
  1058  00009A                     ??_ReadGPS_DATE_TIME:
  1059                           
  1060                           ; 1 bytes @ 0x3A
  1061  00009A                     	ds	4
  1062  00009E                     ReadGPS_DATE_TIME@Time:
  1063                           	opt stack 0
  1064                           
  1065                           ; 7 bytes @ 0x3E
  1066  00009E                     	ds	7
  1067  0000A5                     ReadGPS_DATE_TIME@Date:
  1068                           	opt stack 0
  1069                           
  1070                           ; 7 bytes @ 0x45
  1071  0000A5                     	ds	7
  1072  0000AC                     tosu	equ	0xFFF
  1073                           tosh	equ	0xFFE
  1074                           tosl	equ	0xFFD
  1075                           pclath	equ	0xFFA
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           prodh	equ	0xFF4
  1081                           prodl	equ	0xFF3
  1082                           intcon	equ	0xFF2
  1083                           postinc0	equ	0xFEE
  1084                           plusw0	equ	0xFEB
  1085                           wreg	equ	0xFE8
  1086                           indf1	equ	0xFE7
  1087                           postdec1	equ	0xFE5
  1088                           plusw1	equ	0xFE3
  1089                           fsr1h	equ	0xFE2
  1090                           fsr1l	equ	0xFE1
  1091                           indf2	equ	0xFDF
  1092                           postinc2	equ	0xFDE
  1093                           postdec2	equ	0xFDD
  1094                           plusw2	equ	0xFDB
  1095                           fsr2h	equ	0xFDA
  1096                           fsr2l	equ	0xFD9
  1097                           status	equ	0xFD8
  1098                           
  1099                           ; 1 bytes @ 0x4C
  1100                           
  1101                           	psect	cstackCOMRAM
  1102  000001                     __pcstackCOMRAM:
  1103                           	opt stack 0
  1104  000001                     ?i2___awmod:
  1105                           	opt stack 0
  1106  000001                     ?i2___lwmod:
  1107                           	opt stack 0
  1108  000001                     i2___awmod@dividend:
  1109                           	opt stack 0
  1110  000001                     i2___lwmod@dividend:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x0
  1114  000001                     	ds	2
  1115  000003                     i2___awmod@divisor:
  1116                           	opt stack 0
  1117  000003                     i2___lwmod@divisor:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x2
  1121  000003                     	ds	2
  1122  000005                     i2___awmod@counter:
  1123                           	opt stack 0
  1124  000005                     i2___lwmod@counter:
  1125                           	opt stack 0
  1126                           
  1127                           ; 1 bytes @ 0x4
  1128  000005                     	ds	1
  1129  000006                     ?i2_IncreaseByAYear:
  1130                           	opt stack 0
  1131  000006                     i2___awmod@sign:
  1132                           	opt stack 0
  1133  000006                     i2IncreaseByAYear@dt:
  1134                           	opt stack 0
  1135                           
  1136                           ; 11 bytes @ 0x5
  1137  000006                     	ds	11
  1138  000011                     ?i2_IncreaseByAMonth:
  1139                           	opt stack 0
  1140  000011                     i2IncreaseByAMonth@dt:
  1141                           	opt stack 0
  1142                           
  1143                           ; 11 bytes @ 0x10
  1144  000011                     	ds	11
  1145  00001C                     ?i2_IncreaseByADay:
  1146                           	opt stack 0
  1147  00001C                     i2IncreaseByADay@dt:
  1148                           	opt stack 0
  1149                           
  1150                           ; 11 bytes @ 0x1B
  1151  00001C                     	ds	11
  1152  000027                     ??i2_IncreaseByADay:
  1153                           
  1154                           ; 1 bytes @ 0x26
  1155  000027                     	ds	2
  1156  000029                     i2IncreaseByADay@MonthDays:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x28
  1160  000029                     	ds	1
  1161  00002A                     ?_IncreaseByASecond:
  1162                           	opt stack 0
  1163  00002A                     IncreaseByASecond@dt:
  1164                           	opt stack 0
  1165                           
  1166                           ; 11 bytes @ 0x29
  1167  00002A                     	ds	11
  1168  000035                     ??_INTERRUPT_InterruptManager:
  1169                           
  1170                           ; 1 bytes @ 0x34
  1171  000035                     	ds	8
  1172                           tosu	equ	0xFFF
  1173                           tosh	equ	0xFFE
  1174                           tosl	equ	0xFFD
  1175                           pclath	equ	0xFFA
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           prodh	equ	0xFF4
  1181                           prodl	equ	0xFF3
  1182                           intcon	equ	0xFF2
  1183                           postinc0	equ	0xFEE
  1184                           plusw0	equ	0xFEB
  1185                           wreg	equ	0xFE8
  1186                           indf1	equ	0xFE7
  1187                           postdec1	equ	0xFE5
  1188                           plusw1	equ	0xFE3
  1189                           fsr1h	equ	0xFE2
  1190                           fsr1l	equ	0xFE1
  1191                           indf2	equ	0xFDF
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           plusw2	equ	0xFDB
  1195                           fsr2h	equ	0xFDA
  1196                           fsr2l	equ	0xFD9
  1197                           status	equ	0xFD8
  1198                           
  1199 ;;
  1200 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1201 ;;
  1202 ;; *************** function _main *****************
  1203 ;; Defined at:
  1204 ;;		line 53 in file "main.c"
  1205 ;; Parameters:    Size  Location     Type
  1206 ;;		None
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;		None
  1209 ;; Return value:  Size  Location     Type
  1210 ;;                  1    wreg      void 
  1211 ;; Registers used:
  1212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1213 ;; Tracked objects:
  1214 ;;		On entry : 0/0
  1215 ;;		On exit  : 3F/0
  1216 ;;		Unchanged: 0/0
  1217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1222 ;;Total ram usage:        0 bytes
  1223 ;; Hardware stack levels required when called:   15
  1224 ;; This function calls:
  1225 ;;		_AdjustDayLightSaving
  1226 ;;		_Lcd_Command
  1227 ;;		_Lcd_Init
  1228 ;;		_Lcd_Text
  1229 ;;		_LoadAllFromEeprom
  1230 ;;		_ReadGPS_DATE_TIME
  1231 ;;		_SYSTEM_Initialize
  1232 ;;		_TMR0_SetInterruptHandler
  1233 ;;		_WriteLongInt
  1234 ;; This function is called by:
  1235 ;;		Startup code after reset
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text0
  1240  0013E6                     __ptext0:
  1241                           	opt stack 0
  1242  0013E6                     _main:
  1243                           	opt stack 16
  1244                           
  1245                           ;main.c: 56: SYSTEM_Initialize();
  1246                           
  1247                           ; BSR set to: 14
  1248                           ;incstack = 0
  1249  0013E6  ECEE  F014         	call	_SYSTEM_Initialize	;wreg free
  1250                           
  1251                           ;main.c: 87: (INTCONbits.GIE = 1);
  1252  0013EA  8EF2               	bsf	intcon,7,c	;volatile
  1253                           
  1254                           ;main.c: 88: (INTCONbits.PEIE = 1);
  1255  0013EC  8CF2               	bsf	intcon,6,c	;volatile
  1256                           
  1257                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  1258  0013EE  0E2C               	movlw	low _Timer0_10ms
  1259  0013F0  0100               	movlb	0	; () banked
  1260  0013F2  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1261  0013F4  0E26               	movlw	high _Timer0_10ms
  1262  0013F6  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1263  0013F8  EC2D  F015         	call	_TMR0_SetInterruptHandler	;wreg free
  1264                           
  1265                           ;main.c: 92: Lcd_Init();
  1266  0013FC  EC4D  F011         	call	_Lcd_Init	;wreg free
  1267                           
  1268                           ;main.c: 93: Lcd_Command(1);
  1269  001400  0E01               	movlw	1
  1270  001402  EC65  F00E         	call	_Lcd_Command
  1271                           
  1272                           ;main.c: 95: LATCbits.LC1=ON;
  1273  001406  8285               	bsf	3973,1,c	;volatile
  1274                           
  1275                           ;main.c: 96: LoadAllFromEeprom();
  1276  001408  EC1E  F015         	call	_LoadAllFromEeprom	;wreg free
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;main.c: 97: DATE_TIME.SECOND = 30;
  1280  00140C  0E1E               	movlw	30
  1281  00140E  6FDE               	movwf	_DATE_TIME& (0+255),b
  1282  001410  6BDF               	clrf	(_DATE_TIME+1)& (0+255),b
  1283  001412  6BE0               	clrf	(_DATE_TIME+2)& (0+255),b
  1284  001414  6BE1               	clrf	(_DATE_TIME+3)& (0+255),b
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;main.c: 98: DATE_TIME.DAY.Val = 0x01;
  1288  001416  51E6               	movf	(_DATE_TIME+8)& (0+255),w,b
  1289  001418  0B01               	andlw	-255
  1290  00141A  0902               	iorlw	2
  1291  00141C  6FE6               	movwf	(_DATE_TIME+8)& (0+255),b
  1292                           
  1293                           ; BSR set to: 0
  1294                           ;main.c: 99: DATE_TIME.DATE.Day = 1;
  1295  00141E  6BE3               	clrf	(_DATE_TIME+5)& (0+255),b
  1296  001420  0E01               	movlw	1
  1297  001422  6FE2               	movwf	(_DATE_TIME+4)& (0+255),b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;main.c: 100: DATE_TIME.DATE.Month = 10;
  1301  001424  6BE5               	clrf	(_DATE_TIME+7)& (0+255),b
  1302  001426  0E0A               	movlw	10
  1303  001428  6FE4               	movwf	(_DATE_TIME+6)& (0+255),b
  1304                           
  1305                           ; BSR set to: 0
  1306                           ;main.c: 101: DATE_TIME.YEAR = 2017;
  1307  00142A  0E07               	movlw	7
  1308  00142C  6FE8               	movwf	(_DATE_TIME+10)& (0+255),b
  1309  00142E  0EE1               	movlw	225
  1310  001430  6FE7               	movwf	(_DATE_TIME+9)& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313                           ;main.c: 102: DATE_TIME = AdjustDayLightSaving(DATE_TIME);
  1314  001432  EE20  F0DE         	lfsr	2,_DATE_TIME
  1315  001436  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  1316  00143A  0E0A               	movlw	10
  1317  00143C                     u3481:
  1318  00143C  CFDB FFEB          	movff	plusw2,plusw0
  1319  001440  06E8               	decf	wreg,f,c
  1320  001442  E2FC               	bc	u3481
  1321  001444  ECEC  F00B         	call	_AdjustDayLightSaving	;wreg free
  1322  001448  EE20  F0DE         	lfsr	2,_DATE_TIME
  1323  00144C  0E0A               	movlw	10
  1324  00144E                     u3491:
  1325  00144E  CFEB FFDB          	movff	plusw0,plusw2
  1326  001452  06E8               	decf	wreg,f,c
  1327  001454  E2FC               	bc	u3491
  1328  001456                     l3824:
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;main.c: 105: {
  1332                           ;main.c: 107: if (ReadGPS_DATE_TIME()) {
  1333  001456  EC88  F007         	call	_ReadGPS_DATE_TIME	;wreg free
  1334  00145A  0900               	iorlw	0
  1335  00145C  E03B               	bz	l3830
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;main.c: 108: WriteLongInt(2,1, GPS_DATE_TIME.SECOND,5,1);
  1339  00145E  0E01               	movlw	1
  1340  001460  6F72               	movwf	WriteLongInt@x& (0+255),b
  1341  001462  C0D3  F073         	movff	_GPS_DATE_TIME,WriteLongInt@Val
  1342  001466  C0D4  F074         	movff	_GPS_DATE_TIME+1,WriteLongInt@Val+1
  1343  00146A  C0D5  F075         	movff	_GPS_DATE_TIME+2,WriteLongInt@Val+2
  1344  00146E  C0D6  F076         	movff	_GPS_DATE_TIME+3,WriteLongInt@Val+3
  1345  001472  D870               	call	PL102	;call to abstracted procedure
  1346  001474  0E02               	movlw	2
  1347  001476  EC8F  F010         	call	_WriteLongInt
  1348                           
  1349                           ;main.c: 109: WriteLongInt(2,7, GPS_DATE_TIME.DATE.Day,2,0);
  1350  00147A  0E07               	movlw	7
  1351  00147C  6F72               	movwf	WriteLongInt@x& (0+255),b
  1352  00147E  C0D7  F073         	movff	_GPS_DATE_TIME+4,WriteLongInt@Val
  1353  001482  C0D8  F074         	movff	_GPS_DATE_TIME+5,WriteLongInt@Val+1
  1354  001486  D85A               	call	PL28	;call to abstracted procedure
  1355  001488  EC8F  F010         	call	_WriteLongInt
  1356                           
  1357                           ;main.c: 110: WriteLongInt(2,9, GPS_DATE_TIME.DATE.Month,2,0);
  1358  00148C  0E09               	movlw	9
  1359  00148E  6F72               	movwf	WriteLongInt@x& (0+255),b
  1360  001490  C0D9  F073         	movff	_GPS_DATE_TIME+6,WriteLongInt@Val
  1361  001494  C0DA  F074         	movff	_GPS_DATE_TIME+7,WriteLongInt@Val+1
  1362  001498  D851               	call	PL28	;call to abstracted procedure
  1363  00149A  EC8F  F010         	call	_WriteLongInt
  1364                           
  1365                           ;main.c: 111: WriteLongInt(2,11, GPS_DATE_TIME.YEAR,4,0);
  1366  00149E  0E0B               	movlw	11
  1367  0014A0  6F72               	movwf	WriteLongInt@x& (0+255),b
  1368  0014A2  C0DC  F073         	movff	_GPS_DATE_TIME+9,WriteLongInt@Val
  1369  0014A6  C0DD  F074         	movff	_GPS_DATE_TIME+10,WriteLongInt@Val+1
  1370  0014AA  D84E               	call	PL88	;call to abstracted procedure
  1371  0014AC  0E02               	movlw	2
  1372  0014AE  EC8F  F010         	call	_WriteLongInt
  1373                           
  1374                           ;main.c: 112: WriteLongInt(2,15, GPS_DATE_TIME.DAY.Val,2,0);
  1375  0014B2  0E0F               	movlw	15
  1376  0014B4  6F72               	movwf	WriteLongInt@x& (0+255),b
  1377  0014B6  31DB               	rrcf	(_GPS_DATE_TIME+8)& (0+255),w,b
  1378  0014B8  0B7F               	andlw	127
  1379  0014BA  6F73               	movwf	WriteLongInt@Val& (0+255),b
  1380  0014BC  6B74               	clrf	(WriteLongInt@Val+1)& (0+255),b
  1381  0014BE  D83E               	call	PL28	;call to abstracted procedure
  1382  0014C0  EC8F  F010         	call	_WriteLongInt
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;main.c: 113: Lcd_Text(1, 1, ":)");
  1386  0014C4  0E01               	movlw	1
  1387  0014C6  6F63               	movwf	Lcd_Text@x& (0+255),b
  1388  0014C8  0E0B               	movlw	low STR_1
  1389  0014CA  6F64               	movwf	Lcd_Text@buffer& (0+255),b
  1390  0014CC  0E01               	movlw	1
  1391  0014CE  ECE9  F012         	call	_Lcd_Text
  1392                           
  1393                           ;main.c: 114: } else {
  1394  0014D2  D007               	goto	l3832
  1395  0014D4                     l3830:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 115: Lcd_Text(1, 1, ":(");
  1399  0014D4  0E01               	movlw	1
  1400  0014D6  6F63               	movwf	Lcd_Text@x& (0+255),b
  1401  0014D8  0E08               	movlw	low STR_2
  1402  0014DA  6F64               	movwf	Lcd_Text@buffer& (0+255),b
  1403  0014DC  0E01               	movlw	1
  1404  0014DE  ECE9  F012         	call	_Lcd_Text
  1405  0014E2                     l3832:
  1406                           
  1407                           ;main.c: 116: }
  1408                           ;main.c: 117: WriteLongInt(1, 3, DATE_TIME.SECOND, 5,1);
  1409  0014E2  0E03               	movlw	3
  1410  0014E4  0100               	movlb	0	; () banked
  1411  0014E6  6F72               	movwf	WriteLongInt@x& (0+255),b
  1412  0014E8  C0DE  F073         	movff	_DATE_TIME,WriteLongInt@Val
  1413  0014EC  C0DF  F074         	movff	_DATE_TIME+1,WriteLongInt@Val+1
  1414  0014F0  C0E0  F075         	movff	_DATE_TIME+2,WriteLongInt@Val+2
  1415  0014F4  C0E1  F076         	movff	_DATE_TIME+3,WriteLongInt@Val+3
  1416  0014F8  D82D               	call	PL102	;call to abstracted procedure
  1417  0014FA  EC8F  F010         	call	_WriteLongInt
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;main.c: 118: WriteLongInt(1, 9, DATE_TIME.YEAR, 4,0);
  1421  0014FE  0E09               	movlw	9
  1422  001500  6F72               	movwf	WriteLongInt@x& (0+255),b
  1423  001502  C0E7  F073         	movff	_DATE_TIME+9,WriteLongInt@Val
  1424  001506  C0E8  F074         	movff	_DATE_TIME+10,WriteLongInt@Val+1
  1425  00150A  D81E               	call	PL88	;call to abstracted procedure
  1426  00150C  0E01               	movlw	1
  1427  00150E  EC8F  F010         	call	_WriteLongInt
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;main.c: 119: WriteLongInt(1, 13, DATE_TIME.DATE.Month, 2,0);
  1431  001512  0E0D               	movlw	13
  1432  001514  6F72               	movwf	WriteLongInt@x& (0+255),b
  1433  001516  C0E4  F073         	movff	_DATE_TIME+6,WriteLongInt@Val
  1434  00151A  C0E5  F074         	movff	_DATE_TIME+7,WriteLongInt@Val+1
  1435  00151E  D80E               	call	PL28	;call to abstracted procedure
  1436  001520  0E01               	movlw	1
  1437  001522  EC8F  F010         	call	_WriteLongInt
  1438                           
  1439                           ; BSR set to: 0
  1440                           ;main.c: 120: WriteLongInt(1, 15, DATE_TIME.DATE.Day, 2,0);
  1441  001526  0E0F               	movlw	15
  1442  001528  6F72               	movwf	WriteLongInt@x& (0+255),b
  1443  00152A  C0E2  F073         	movff	_DATE_TIME+4,WriteLongInt@Val
  1444  00152E  C0E3  F074         	movff	_DATE_TIME+5,WriteLongInt@Val+1
  1445  001532  D804               	call	PL28	;call to abstracted procedure
  1446  001534  0E01               	movlw	1
  1447  001536  EC8F  F010         	call	_WriteLongInt
  1448  00153A  D78D               	goto	l3824
  1449  00153C                     __end_of_main:
  1450                           	opt stack 0
  1451  00153C                     PL28:
  1452                           	opt stack 16
  1453  00153C  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  1454  00153E  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  1455  001540  0E02               	movlw	2
  1456  001542  6F77               	movwf	WriteLongInt@size& (0+255),b
  1457  001544  6B78               	clrf	WriteLongInt@Sign& (0+255),b
  1458  001546  0C02               	retlw	2
  1459  001548                     __end_ofPL28:
  1460                           	opt stack 0
  1461  001548                     PL88:
  1462                           	opt stack 16
  1463  001548  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  1464  00154A  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  1465  00154C  0E04               	movlw	4
  1466  00154E  6F77               	movwf	WriteLongInt@size& (0+255),b
  1467  001550  6B78               	clrf	WriteLongInt@Sign& (0+255),b
  1468  001552  0C04               	retlw	4
  1469  001554                     __end_ofPL88:
  1470                           	opt stack 0
  1471  001554                     PL102:
  1472                           	opt stack 16
  1473  001554  0E05               	movlw	5
  1474  001556  6F77               	movwf	WriteLongInt@size& (0+255),b
  1475  001558  0E01               	movlw	1
  1476  00155A  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  1477  00155C  0C01               	retlw	1
  1478  00155E                     __end_ofPL102:
  1479                           	opt stack 0
  1480                           tosu	equ	0xFFF
  1481                           tosh	equ	0xFFE
  1482                           tosl	equ	0xFFD
  1483                           pclath	equ	0xFFA
  1484                           tblptru	equ	0xFF8
  1485                           tblptrh	equ	0xFF7
  1486                           tblptrl	equ	0xFF6
  1487                           tablat	equ	0xFF5
  1488                           prodh	equ	0xFF4
  1489                           prodl	equ	0xFF3
  1490                           intcon	equ	0xFF2
  1491                           postinc0	equ	0xFEE
  1492                           plusw0	equ	0xFEB
  1493                           wreg	equ	0xFE8
  1494                           indf1	equ	0xFE7
  1495                           postdec1	equ	0xFE5
  1496                           plusw1	equ	0xFE3
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           indf2	equ	0xFDF
  1500                           postinc2	equ	0xFDE
  1501                           postdec2	equ	0xFDD
  1502                           plusw2	equ	0xFDB
  1503                           fsr2h	equ	0xFDA
  1504                           fsr2l	equ	0xFD9
  1505                           status	equ	0xFD8
  1506                           
  1507 ;; *************** function _WriteLongInt *****************
  1508 ;; Defined at:
  1509 ;;		line 183 in file "libs/HD44780.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  y               1    wreg     unsigned char 
  1512 ;;  x               1   18[BANK0 ] unsigned char 
  1513 ;;  Val             4   19[BANK0 ] long 
  1514 ;;  size            1   23[BANK0 ] char 
  1515 ;;  Sign            1   24[BANK0 ] unsigned char 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  y               1   26[BANK0 ] unsigned char 
  1518 ;;  POS             1   25[BANK0 ] char 
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 3F/0
  1525 ;;		On exit  : 3F/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1528 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1529 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1531 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;Total ram usage:        9 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:   12
  1535 ;; This function calls:
  1536 ;;		_Lcd_WriteChar
  1537 ;;		___aldiv
  1538 ;;		___lmul
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text1
  1545  00211E                     __ptext1:
  1546                           	opt stack 0
  1547  00211E                     _WriteLongInt:
  1548                           	opt stack 18
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;incstack = 0
  1552                           ;WriteLongInt@y stored from wreg
  1553  00211E  6F7A               	movwf	WriteLongInt@y& (0+255),b
  1554                           
  1555                           ;HD44780.c: 184: int8_t POS = 0;
  1556  002120  0100               	movlb	0	; () banked
  1557  002122  6B79               	clrf	WriteLongInt@POS& (0+255),b
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;HD44780.c: 185: if (Sign) {
  1561  002124  5178               	movf	WriteLongInt@Sign& (0+255),w,b
  1562  002126  E049               	bz	l3732
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;HD44780.c: 186: POS++;
  1566  002128  2B79               	incf	WriteLongInt@POS& (0+255),f,b
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;HD44780.c: 187: if (Val<0) {
  1570  00212A  AF76               	btfss	(WriteLongInt@Val+3)& (0+255),7,b
  1571  00212C  D01F               	goto	l3724
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  1575  00212E  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  1576  002132  0E2D               	movlw	45
  1577  002134  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1578  002136  517A               	movf	WriteLongInt@y& (0+255),w,b
  1579  002138  ECD5  F013         	call	_Lcd_WriteChar
  1580                           
  1581                           ;HD44780.c: 189: Val=-1*Val;
  1582  00213C  C073  F060         	movff	WriteLongInt@Val,___lmul@multiplier
  1583  002140  C074  F061         	movff	WriteLongInt@Val+1,___lmul@multiplier+1
  1584  002144  C075  F062         	movff	WriteLongInt@Val+2,___lmul@multiplier+2
  1585  002148  C076  F063         	movff	WriteLongInt@Val+3,___lmul@multiplier+3
  1586  00214C  0100               	movlb	0	; () banked
  1587  00214E  6964               	setf	___lmul@multiplicand& (0+255),b
  1588  002150  6965               	setf	(___lmul@multiplicand+1)& (0+255),b
  1589  002152  6966               	setf	(___lmul@multiplicand+2)& (0+255),b
  1590  002154  6967               	setf	(___lmul@multiplicand+3)& (0+255),b
  1591  002156  EC3F  F013         	call	___lmul	;wreg free
  1592  00215A  C060  F073         	movff	?___lmul,WriteLongInt@Val
  1593  00215E  C061  F074         	movff	?___lmul+1,WriteLongInt@Val+1
  1594  002162  C062  F075         	movff	?___lmul+2,WriteLongInt@Val+2
  1595  002166  C063  F076         	movff	?___lmul+3,WriteLongInt@Val+3
  1596                           
  1597                           ;HD44780.c: 190: } else
  1598  00216A  D027               	goto	l3732
  1599  00216C                     l3724:
  1600                           
  1601                           ; BSR set to: 0
  1602                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  1603  00216C  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  1604  002170  0E2B               	movlw	43
  1605  002172  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1606  002174  517A               	movf	WriteLongInt@y& (0+255),w,b
  1607  002176  ECD5  F013         	call	_Lcd_WriteChar
  1608  00217A  D01F               	goto	l3732
  1609  00217C                     l3726:
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;HD44780.c: 194: size--;
  1613  00217C  0777               	decf	WriteLongInt@size& (0+255),f,b
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  1617  00217E  5177               	movf	WriteLongInt@size& (0+255),w,b
  1618  002180  2579               	addwf	WriteLongInt@POS& (0+255),w,b
  1619  002182  2572               	addwf	WriteLongInt@x& (0+255),w,b
  1620  002184  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  1621  002186  D81D               	call	PL58	;call to abstracted procedure
  1622  002188  D825               	call	PL96	;call to abstracted procedure
  1623  00218A  ECEF  F010         	call	___aldiv	;wreg free
  1624  00218E  5160               	movf	?___aldiv& (0+255),w,b
  1625  002190  0DF6               	mullw	246
  1626  002192  50F3               	movf	prodl,w,c
  1627  002194  2573               	addwf	WriteLongInt@Val& (0+255),w,b
  1628  002196  0F30               	addlw	48
  1629  002198  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1630  00219A  517A               	movf	WriteLongInt@y& (0+255),w,b
  1631  00219C  ECD5  F013         	call	_Lcd_WriteChar
  1632                           
  1633                           ;HD44780.c: 196: Val = Val/10;
  1634  0021A0  D810               	call	PL58	;call to abstracted procedure
  1635  0021A2  0100               	movlb	0	; () banked
  1636  0021A4  D817               	call	PL96	;call to abstracted procedure
  1637  0021A6  ECEF  F010         	call	___aldiv	;wreg free
  1638  0021AA  C060  F073         	movff	?___aldiv,WriteLongInt@Val
  1639  0021AE  C061  F074         	movff	?___aldiv+1,WriteLongInt@Val+1
  1640  0021B2  C062  F075         	movff	?___aldiv+2,WriteLongInt@Val+2
  1641  0021B6  C063  F076         	movff	?___aldiv+3,WriteLongInt@Val+3
  1642  0021BA                     l3732:
  1643  0021BA  0100               	movlb	0	; () banked
  1644  0021BC  5177               	movf	WriteLongInt@size& (0+255),w,b
  1645  0021BE  E1DE               	bnz	l3726
  1646                           
  1647                           ; BSR set to: 0
  1648  0021C0  0012               	return		;funcret
  1649  0021C2                     __end_of_WriteLongInt:
  1650                           	opt stack 0
  1651  0021C2                     PL58:
  1652                           	opt stack 18
  1653  0021C2  C073  F060         	movff	WriteLongInt@Val,___aldiv@dividend
  1654  0021C6  C074  F061         	movff	WriteLongInt@Val+1,___aldiv@dividend+1
  1655  0021CA  C075  F062         	movff	WriteLongInt@Val+2,___aldiv@dividend+2
  1656  0021CE  C076  F063         	movff	WriteLongInt@Val+3,___aldiv@dividend+3
  1657  0021D2  0C0A               	retlw	10
  1658  0021D4                     __end_ofPL58:
  1659                           	opt stack 0
  1660  0021D4                     PL96:
  1661                           	opt stack 18
  1662  0021D4  6F64               	movwf	___aldiv@divisor& (0+255),b
  1663  0021D6  6B65               	clrf	(___aldiv@divisor+1)& (0+255),b
  1664  0021D8  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  1665  0021DA  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  1666  0021DC  0012               	return	
  1667  0021DE                     __end_ofPL96:
  1668                           	opt stack 0
  1669                           tosu	equ	0xFFF
  1670                           tosh	equ	0xFFE
  1671                           tosl	equ	0xFFD
  1672                           pclath	equ	0xFFA
  1673                           tblptru	equ	0xFF8
  1674                           tblptrh	equ	0xFF7
  1675                           tblptrl	equ	0xFF6
  1676                           tablat	equ	0xFF5
  1677                           prodh	equ	0xFF4
  1678                           prodl	equ	0xFF3
  1679                           intcon	equ	0xFF2
  1680                           postinc0	equ	0xFEE
  1681                           plusw0	equ	0xFEB
  1682                           wreg	equ	0xFE8
  1683                           indf1	equ	0xFE7
  1684                           postdec1	equ	0xFE5
  1685                           plusw1	equ	0xFE3
  1686                           fsr1h	equ	0xFE2
  1687                           fsr1l	equ	0xFE1
  1688                           indf2	equ	0xFDF
  1689                           postinc2	equ	0xFDE
  1690                           postdec2	equ	0xFDD
  1691                           plusw2	equ	0xFDB
  1692                           fsr2h	equ	0xFDA
  1693                           fsr2l	equ	0xFD9
  1694                           status	equ	0xFD8
  1695                           
  1696 ;; *************** function ___aldiv *****************
  1697 ;; Defined at:
  1698 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;  dividend        4    0[BANK0 ] long 
  1701 ;;  divisor         4    4[BANK0 ] long 
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;  quotient        4   10[BANK0 ] long 
  1704 ;;  sign            1    9[BANK0 ] unsigned char 
  1705 ;;  counter         1    8[BANK0 ] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  4    0[BANK0 ] long 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0
  1710 ;; Tracked objects:
  1711 ;;		On entry : 3F/0
  1712 ;;		On exit  : 3F/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1715 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1716 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1718 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1719 ;;Total ram usage:       14 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    9
  1722 ;; This function calls:
  1723 ;;		Nothing
  1724 ;; This function is called by:
  1725 ;;		_WriteLongInt
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text2
  1730  0021DE                     __ptext2:
  1731                           	opt stack 0
  1732  0021DE                     ___aldiv:
  1733                           	opt stack 20
  1734                           
  1735                           ; BSR set to: 0
  1736                           
  1737                           ; BSR set to: 0
  1738                           ;incstack = 0
  1739  0021DE  6B69               	clrf	___aldiv@sign& (0+255),b
  1740                           
  1741                           ; BSR set to: 0
  1742  0021E0  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1743  0021E2  D00A               	goto	l3596
  1744                           
  1745                           ; BSR set to: 0
  1746  0021E4  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1747  0021E6  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1748  0021E8  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1749  0021EA  6D64               	negf	___aldiv@divisor& (0+255),b
  1750  0021EC  0E00               	movlw	0
  1751  0021EE  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1752  0021F0  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1753  0021F2  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1754                           
  1755                           ; BSR set to: 0
  1756  0021F4  0E01               	movlw	1
  1757  0021F6  6F69               	movwf	___aldiv@sign& (0+255),b
  1758  0021F8                     l3596:
  1759                           
  1760                           ; BSR set to: 0
  1761  0021F8  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1762  0021FA  D00A               	goto	l3602
  1763                           
  1764                           ; BSR set to: 0
  1765  0021FC  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1766  0021FE  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1767  002200  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1768  002202  6D60               	negf	___aldiv@dividend& (0+255),b
  1769  002204  0E00               	movlw	0
  1770  002206  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1771  002208  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1772  00220A  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1773                           
  1774                           ; BSR set to: 0
  1775  00220C  0E01               	movlw	1
  1776  00220E  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  1777  002210                     l3602:
  1778                           
  1779                           ; BSR set to: 0
  1780  002210  6B6A               	clrf	___aldiv@quotient& (0+255),b
  1781  002212  6B6B               	clrf	(___aldiv@quotient+1)& (0+255),b
  1782  002214  6B6C               	clrf	(___aldiv@quotient+2)& (0+255),b
  1783  002216  6B6D               	clrf	(___aldiv@quotient+3)& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786  002218  5164               	movf	___aldiv@divisor& (0+255),w,b
  1787  00221A  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1788  00221C  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1789  00221E  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1790  002220  E029               	bz	l3624
  1791                           
  1792                           ; BSR set to: 0
  1793  002222  0E01               	movlw	1
  1794  002224  6F68               	movwf	___aldiv@counter& (0+255),b
  1795  002226  D006               	goto	l3610
  1796  002228                     l3608:
  1797                           
  1798                           ; BSR set to: 0
  1799  002228  90D8               	bcf	status,0,c
  1800  00222A  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  1801  00222C  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1802  00222E  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1803  002230  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1804  002232  2B68               	incf	___aldiv@counter& (0+255),f,b
  1805  002234                     l3610:
  1806                           
  1807                           ; BSR set to: 0
  1808  002234  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1809  002236  D7F8               	goto	l3608
  1810  002238                     l3612:
  1811                           
  1812                           ; BSR set to: 0
  1813  002238  90D8               	bcf	status,0,c
  1814  00223A  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  1815  00223C  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1816  00223E  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1817  002240  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1818                           
  1819                           ; BSR set to: 0
  1820  002242  5164               	movf	___aldiv@divisor& (0+255),w,b
  1821  002244  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  1822  002246  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1823  002248  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1824  00224A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1825  00224C  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1826  00224E  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1827  002250  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1828  002252  E309               	bnc	l3620
  1829                           
  1830                           ; BSR set to: 0
  1831  002254  5164               	movf	___aldiv@divisor& (0+255),w,b
  1832  002256  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  1833  002258  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1834  00225A  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1835  00225C  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1836  00225E  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1837  002260  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1838  002262  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1839                           
  1840                           ; BSR set to: 0
  1841  002264  816A               	bsf	___aldiv@quotient& (0+255),0,b
  1842  002266                     l3620:
  1843                           
  1844                           ; BSR set to: 0
  1845  002266  90D8               	bcf	status,0,c
  1846  002268  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1847  00226A  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1848  00226C  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1849  00226E  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  1850                           
  1851                           ; BSR set to: 0
  1852  002270  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  1853  002272  D7E2               	goto	l3612
  1854  002274                     l3624:
  1855                           
  1856                           ; BSR set to: 0
  1857  002274  5169               	movf	___aldiv@sign& (0+255),w,b
  1858  002276  E008               	bz	l3628
  1859                           
  1860                           ; BSR set to: 0
  1861  002278  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1862  00227A  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1863  00227C  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1864  00227E  6D6A               	negf	___aldiv@quotient& (0+255),b
  1865  002280  0E00               	movlw	0
  1866  002282  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1867  002284  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1868  002286  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1869  002288                     l3628:
  1870                           
  1871                           ; BSR set to: 0
  1872  002288  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  1873  00228C  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  1874  002290  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  1875  002294  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  1876                           
  1877                           ; BSR set to: 0
  1878  002298  0012               	return		;funcret
  1879  00229A                     __end_of___aldiv:
  1880                           	opt stack 0
  1881                           tosu	equ	0xFFF
  1882                           tosh	equ	0xFFE
  1883                           tosl	equ	0xFFD
  1884                           pclath	equ	0xFFA
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           prodh	equ	0xFF4
  1890                           prodl	equ	0xFF3
  1891                           intcon	equ	0xFF2
  1892                           postinc0	equ	0xFEE
  1893                           plusw0	equ	0xFEB
  1894                           wreg	equ	0xFE8
  1895                           indf1	equ	0xFE7
  1896                           postdec1	equ	0xFE5
  1897                           plusw1	equ	0xFE3
  1898                           fsr1h	equ	0xFE2
  1899                           fsr1l	equ	0xFE1
  1900                           indf2	equ	0xFDF
  1901                           postinc2	equ	0xFDE
  1902                           postdec2	equ	0xFDD
  1903                           plusw2	equ	0xFDB
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _Lcd_WriteChar *****************
  1909 ;; Defined at:
  1910 ;;		line 99 in file "libs/HD44780.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;  y               1    wreg     unsigned char 
  1913 ;;  x               1   14[BANK0 ] unsigned char 
  1914 ;;  c               1   15[BANK0 ] unsigned char 
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  y               1   16[BANK0 ] unsigned char 
  1917 ;;  data            1   17[BANK0 ] unsigned char 
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  1    wreg      void 
  1920 ;; Registers used:
  1921 ;;		wreg, status,2, status,0, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 3F/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1927 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1928 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1931 ;;Total ram usage:        4 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:   11
  1934 ;; This function calls:
  1935 ;;		_Lcd_CharCP
  1936 ;;		_Lcd_Command
  1937 ;; This function is called by:
  1938 ;;		_WriteLongInt
  1939 ;; This function uses a non-reentrant model
  1940 ;;
  1941                           
  1942                           	psect	text3
  1943  0027AA                     __ptext3:
  1944                           	opt stack 0
  1945  0027AA                     _Lcd_WriteChar:
  1946                           	opt stack 18
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;incstack = 0
  1950                           ;Lcd_WriteChar@y stored from wreg
  1951  0027AA  6F70               	movwf	Lcd_WriteChar@y& (0+255),b
  1952                           
  1953                           ;HD44780.c: 100: unsigned char data;
  1954                           ;HD44780.c: 101: switch(y) {
  1955  0027AC  D00D               	goto	l3258
  1956  0027AE                     l3248:
  1957                           
  1958                           ; BSR set to: 0
  1959  0027AE  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  1960  0027B0  0F7F               	addlw	127
  1961  0027B2  D008               	goto	L3
  1962  0027B4                     l3250:
  1963                           
  1964                           ; BSR set to: 0
  1965  0027B4  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  1966  0027B6  0FBF               	addlw	191
  1967  0027B8  D005               	goto	L3
  1968  0027BA                     l3252:
  1969                           
  1970                           ; BSR set to: 0
  1971  0027BA  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  1972  0027BC  0F93               	addlw	147
  1973  0027BE  D002               	goto	L3
  1974  0027C0                     l3254:
  1975                           
  1976                           ; BSR set to: 0
  1977  0027C0  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  1978  0027C2  0FD3               	addlw	211
  1979  0027C4                     L3:
  1980  0027C4  6F71               	movwf	Lcd_WriteChar@data& (0+255),b
  1981  0027C6  D00A               	goto	l3260
  1982  0027C8                     l3258:
  1983  0027C8  0100               	movlb	0	; () banked
  1984  0027CA  5170               	movf	Lcd_WriteChar@y& (0+255),w,b
  1985                           
  1986                           ; Switch size 1, requested type "space"
  1987                           ; Number of cases is 4, Range of values is 1 to 4
  1988                           ; switch strategies available:
  1989                           ; Name         Instructions Cycles
  1990                           ; simple_byte           13     7 (average)
  1991                           ;	Chosen strategy is simple_byte
  1992  0027CC  0A01               	xorlw	1	; case 1
  1993  0027CE  E0EF               	bz	l3248
  1994  0027D0  0A03               	xorlw	3	; case 2
  1995  0027D2  E0F0               	bz	l3250
  1996  0027D4  0A01               	xorlw	1	; case 3
  1997  0027D6  E0F1               	bz	l3252
  1998  0027D8  0A07               	xorlw	7	; case 4
  1999  0027DA  E0F2               	bz	l3254
  2000  0027DC                     l3260:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;HD44780.c: 108: Lcd_Command(data);
  2004  0027DC  5171               	movf	Lcd_WriteChar@data& (0+255),w,b
  2005  0027DE  EC65  F00E         	call	_Lcd_Command
  2006                           
  2007                           ;HD44780.c: 109: Lcd_CharCP(c);
  2008  0027E2  0100               	movlb	0	; () banked
  2009  0027E4  516F               	movf	Lcd_WriteChar@c& (0+255),w,b
  2010  0027E6  EF47  F00F         	goto	_Lcd_CharCP
  2011  0027EA                     __end_of_Lcd_WriteChar:
  2012                           	opt stack 0
  2013                           tosu	equ	0xFFF
  2014                           tosh	equ	0xFFE
  2015                           tosl	equ	0xFFD
  2016                           pclath	equ	0xFFA
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           prodh	equ	0xFF4
  2022                           prodl	equ	0xFF3
  2023                           intcon	equ	0xFF2
  2024                           postinc0	equ	0xFEE
  2025                           plusw0	equ	0xFEB
  2026                           wreg	equ	0xFE8
  2027                           indf1	equ	0xFE7
  2028                           postdec1	equ	0xFE5
  2029                           plusw1	equ	0xFE3
  2030                           fsr1h	equ	0xFE2
  2031                           fsr1l	equ	0xFE1
  2032                           indf2	equ	0xFDF
  2033                           postinc2	equ	0xFDE
  2034                           postdec2	equ	0xFDD
  2035                           plusw2	equ	0xFDB
  2036                           fsr2h	equ	0xFDA
  2037                           fsr2l	equ	0xFD9
  2038                           status	equ	0xFD8
  2039                           
  2040 ;; *************** function _SYSTEM_Initialize *****************
  2041 ;; Defined at:
  2042 ;;		line 107 in file "mcc_generated_files/mcc.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  1    wreg      void 
  2049 ;; Registers used:
  2050 ;;		wreg, status,2, status,0, cstack
  2051 ;; Tracked objects:
  2052 ;;		On entry : 0/0
  2053 ;;		On exit  : 0/0
  2054 ;;		Unchanged: 0/0
  2055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2060 ;;Total ram usage:        0 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:   11
  2063 ;; This function calls:
  2064 ;;		_EUSART1_Initialize
  2065 ;;		_INTERRUPT_Initialize
  2066 ;;		_OSCILLATOR_Initialize
  2067 ;;		_PIN_MANAGER_Initialize
  2068 ;;		_TMR0_Initialize
  2069 ;; This function is called by:
  2070 ;;		_main
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074                           	psect	text4
  2075  0029DC                     __ptext4:
  2076                           	opt stack 0
  2077  0029DC                     _SYSTEM_Initialize:
  2078                           	opt stack 19
  2079                           
  2080                           ;mcc.c: 110: INTERRUPT_Initialize();
  2081                           
  2082                           ;incstack = 0
  2083  0029DC  EC38  F015         	call	_INTERRUPT_Initialize	;wreg free
  2084                           
  2085                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  2086  0029E0  EC88  F012         	call	_PIN_MANAGER_Initialize	;wreg free
  2087                           
  2088                           ;mcc.c: 112: OSCILLATOR_Initialize();
  2089  0029E4  ECE3  F014         	call	_OSCILLATOR_Initialize	;wreg free
  2090                           
  2091                           ; BSR set to: 14
  2092                           ;mcc.c: 113: TMR0_Initialize();
  2093  0029E8  ECF5  F013         	call	_TMR0_Initialize	;wreg free
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;mcc.c: 114: EUSART1_Initialize();
  2097  0029EC  EFF8  F014         	goto	_EUSART1_Initialize	;wreg free
  2098  0029F0                     __end_of_SYSTEM_Initialize:
  2099                           	opt stack 0
  2100                           tosu	equ	0xFFF
  2101                           tosh	equ	0xFFE
  2102                           tosl	equ	0xFFD
  2103                           pclath	equ	0xFFA
  2104                           tblptru	equ	0xFF8
  2105                           tblptrh	equ	0xFF7
  2106                           tblptrl	equ	0xFF6
  2107                           tablat	equ	0xFF5
  2108                           prodh	equ	0xFF4
  2109                           prodl	equ	0xFF3
  2110                           intcon	equ	0xFF2
  2111                           postinc0	equ	0xFEE
  2112                           plusw0	equ	0xFEB
  2113                           wreg	equ	0xFE8
  2114                           indf1	equ	0xFE7
  2115                           postdec1	equ	0xFE5
  2116                           plusw1	equ	0xFE3
  2117                           fsr1h	equ	0xFE2
  2118                           fsr1l	equ	0xFE1
  2119                           indf2	equ	0xFDF
  2120                           postinc2	equ	0xFDE
  2121                           postdec2	equ	0xFDD
  2122                           plusw2	equ	0xFDB
  2123                           fsr2h	equ	0xFDA
  2124                           fsr2l	equ	0xFD9
  2125                           status	equ	0xFD8
  2126                           
  2127 ;; *************** function _TMR0_Initialize *****************
  2128 ;; Defined at:
  2129 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg, status,2, status,0, cstack
  2138 ;; Tracked objects:
  2139 ;;		On entry : 3F/E
  2140 ;;		On exit  : 3F/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2146 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2147 ;;Total ram usage:        2 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:   10
  2150 ;; This function calls:
  2151 ;;		_TMR0_SetInterruptHandler
  2152 ;;		_TMR0_StartTimer
  2153 ;; This function is called by:
  2154 ;;		_SYSTEM_Initialize
  2155 ;; This function uses a non-reentrant model
  2156 ;;
  2157                           
  2158                           	psect	text5
  2159  0027EA                     __ptext5:
  2160                           	opt stack 0
  2161  0027EA                     _TMR0_Initialize:
  2162                           	opt stack 19
  2163                           
  2164                           ; BSR set to: 14
  2165                           ;tmr0.c: 70: T0CON0 = 0x10;
  2166                           
  2167                           ;incstack = 0
  2168  0027EA  0E10               	movlw	16
  2169  0027EC  6ED5               	movwf	4053,c	;volatile
  2170                           
  2171                           ;tmr0.c: 73: T0CON1 = 0x50;
  2172  0027EE  0E50               	movlw	80
  2173  0027F0  6ED6               	movwf	4054,c	;volatile
  2174                           
  2175                           ;tmr0.c: 76: TMR0H = 0xD8;
  2176  0027F2  0ED8               	movlw	216
  2177  0027F4  6ED4               	movwf	4052,c	;volatile
  2178                           
  2179                           ;tmr0.c: 79: TMR0L = 0xF0;
  2180  0027F6  0EF0               	movlw	240
  2181  0027F8  6ED3               	movwf	4051,c	;volatile
  2182                           
  2183                           ; BSR set to: 14
  2184                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  2185  0027FA  50D3               	movf	4051,w,c	;volatile
  2186  0027FC  CFD4 F062          	movff	4052,??_TMR0_Initialize	;volatile
  2187  002800  0100               	movlb	0	; () banked
  2188  002802  6B63               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  2189  002804  C062  F063         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  2190  002808  6B62               	clrf	??_TMR0_Initialize& (0+255),b
  2191  00280A  1162               	iorwf	??_TMR0_Initialize& (0+255),w,b
  2192  00280C  6E57               	movwf	_timer0ReloadVal16bit,c	;volatile
  2193  00280E  5163               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  2194  002810  6E58               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
  2198  002812  010E               	movlb	14	; () banked
  2199  002814  9BCA               	bcf	202,5,b	;volatile
  2200                           
  2201                           ; BSR set to: 14
  2202                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
  2203  002816  8BC2               	bsf	194,5,b	;volatile
  2204                           
  2205                           ; BSR set to: 14
  2206                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2207  002818  0E74               	movlw	low _TMR0_DefaultInterruptHandler
  2208  00281A  0100               	movlb	0	; () banked
  2209  00281C  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  2210  00281E  0E2A               	movlw	high _TMR0_DefaultInterruptHandler
  2211  002820  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2212  002822  EC2D  F015         	call	_TMR0_SetInterruptHandler	;wreg free
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;tmr0.c: 94: TMR0_StartTimer();
  2216  002826  EF36  F015         	goto	_TMR0_StartTimer	;wreg free
  2217  00282A                     __end_of_TMR0_Initialize:
  2218                           	opt stack 0
  2219                           tosu	equ	0xFFF
  2220                           tosh	equ	0xFFE
  2221                           tosl	equ	0xFFD
  2222                           pclath	equ	0xFFA
  2223                           tblptru	equ	0xFF8
  2224                           tblptrh	equ	0xFF7
  2225                           tblptrl	equ	0xFF6
  2226                           tablat	equ	0xFF5
  2227                           prodh	equ	0xFF4
  2228                           prodl	equ	0xFF3
  2229                           intcon	equ	0xFF2
  2230                           postinc0	equ	0xFEE
  2231                           plusw0	equ	0xFEB
  2232                           wreg	equ	0xFE8
  2233                           indf1	equ	0xFE7
  2234                           postdec1	equ	0xFE5
  2235                           plusw1	equ	0xFE3
  2236                           fsr1h	equ	0xFE2
  2237                           fsr1l	equ	0xFE1
  2238                           indf2	equ	0xFDF
  2239                           postinc2	equ	0xFDE
  2240                           postdec2	equ	0xFDD
  2241                           plusw2	equ	0xFDB
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _TMR0_StartTimer *****************
  2247 ;; Defined at:
  2248 ;;		line 97 in file "mcc_generated_files/tmr0.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;		None
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		None
  2257 ;; Tracked objects:
  2258 ;;		On entry : 3F/0
  2259 ;;		On exit  : 3F/0
  2260 ;;		Unchanged: 3F/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2266 ;;Total ram usage:        0 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; Hardware stack levels required when called:    9
  2269 ;; This function calls:
  2270 ;;		Nothing
  2271 ;; This function is called by:
  2272 ;;		_TMR0_Initialize
  2273 ;; This function uses a non-reentrant model
  2274 ;;
  2275                           
  2276                           	psect	text6
  2277  002A6C                     __ptext6:
  2278                           	opt stack 0
  2279  002A6C                     _TMR0_StartTimer:
  2280                           	opt stack 19
  2281                           
  2282                           ; BSR set to: 0
  2283                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
  2284                           
  2285                           ; BSR set to: 0
  2286                           ;incstack = 0
  2287  002A6C  8ED5               	bsf	4053,7,c	;volatile
  2288                           
  2289                           ; BSR set to: 0
  2290  002A6E  0012               	return		;funcret
  2291  002A70                     __end_of_TMR0_StartTimer:
  2292                           	opt stack 0
  2293                           tosu	equ	0xFFF
  2294                           tosh	equ	0xFFE
  2295                           tosl	equ	0xFFD
  2296                           pclath	equ	0xFFA
  2297                           tblptru	equ	0xFF8
  2298                           tblptrh	equ	0xFF7
  2299                           tblptrl	equ	0xFF6
  2300                           tablat	equ	0xFF5
  2301                           prodh	equ	0xFF4
  2302                           prodl	equ	0xFF3
  2303                           intcon	equ	0xFF2
  2304                           postinc0	equ	0xFEE
  2305                           plusw0	equ	0xFEB
  2306                           wreg	equ	0xFE8
  2307                           indf1	equ	0xFE7
  2308                           postdec1	equ	0xFE5
  2309                           plusw1	equ	0xFE3
  2310                           fsr1h	equ	0xFE2
  2311                           fsr1l	equ	0xFE1
  2312                           indf2	equ	0xFDF
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           plusw2	equ	0xFDB
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _TMR0_SetInterruptHandler *****************
  2321 ;; Defined at:
  2322 ;;		line 161 in file "mcc_generated_files/tmr0.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2325 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;		None
  2328 ;; Return value:  Size  Location     Type
  2329 ;;                  1    wreg      void 
  2330 ;; Registers used:
  2331 ;;		wreg, status,2, status,0
  2332 ;; Tracked objects:
  2333 ;;		On entry : 3F/0
  2334 ;;		On exit  : 3F/0
  2335 ;;		Unchanged: 3F/0
  2336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2341 ;;Total ram usage:        2 bytes
  2342 ;; Hardware stack levels used:    1
  2343 ;; Hardware stack levels required when called:    9
  2344 ;; This function calls:
  2345 ;;		Nothing
  2346 ;; This function is called by:
  2347 ;;		_TMR0_Initialize
  2348 ;;		_main
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text7
  2353  002A5A                     __ptext7:
  2354                           	opt stack 0
  2355  002A5A                     _TMR0_SetInterruptHandler:
  2356                           	opt stack 21
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;incstack = 0
  2363  002A5A  C060  F055         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2364  002A5E  C061  F056         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2365                           
  2366                           ; BSR set to: 0
  2367  002A62  0012               	return		;funcret
  2368  002A64                     __end_of_TMR0_SetInterruptHandler:
  2369                           	opt stack 0
  2370                           tosu	equ	0xFFF
  2371                           tosh	equ	0xFFE
  2372                           tosl	equ	0xFFD
  2373                           pclath	equ	0xFFA
  2374                           tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           prodh	equ	0xFF4
  2379                           prodl	equ	0xFF3
  2380                           intcon	equ	0xFF2
  2381                           postinc0	equ	0xFEE
  2382                           plusw0	equ	0xFEB
  2383                           wreg	equ	0xFE8
  2384                           indf1	equ	0xFE7
  2385                           postdec1	equ	0xFE5
  2386                           plusw1	equ	0xFE3
  2387                           fsr1h	equ	0xFE2
  2388                           fsr1l	equ	0xFE1
  2389                           indf2	equ	0xFDF
  2390                           postinc2	equ	0xFDE
  2391                           postdec2	equ	0xFDD
  2392                           plusw2	equ	0xFDB
  2393                           fsr2h	equ	0xFDA
  2394                           fsr2l	equ	0xFD9
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _PIN_MANAGER_Initialize *****************
  2398 ;; Defined at:
  2399 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;  state           1    0[BANK0 ] unsigned char 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2416 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2417 ;;Total ram usage:        1 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    9
  2420 ;; This function calls:
  2421 ;;		Nothing
  2422 ;; This function is called by:
  2423 ;;		_SYSTEM_Initialize
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text8
  2428  002510                     __ptext8:
  2429                           	opt stack 0
  2430  002510                     _PIN_MANAGER_Initialize:
  2431                           	opt stack 20
  2432                           
  2433                           ;pin_manager.c: 57: LATA = 0x00;
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;incstack = 0
  2437  002510  6A83               	clrf	3971,c	;volatile
  2438                           
  2439                           ;pin_manager.c: 58: LATB = 0x00;
  2440  002512  6A84               	clrf	3972,c	;volatile
  2441                           
  2442                           ;pin_manager.c: 59: LATC = 0x00;
  2443  002514  6A85               	clrf	3973,c	;volatile
  2444                           
  2445                           ;pin_manager.c: 64: TRISA = 0xC0;
  2446  002516  0EC0               	movlw	192
  2447  002518  6E88               	movwf	3976,c	;volatile
  2448                           
  2449                           ;pin_manager.c: 65: TRISB = 0x00;
  2450  00251A  6A89               	clrf	3977,c	;volatile
  2451                           
  2452                           ;pin_manager.c: 66: TRISC = 0x84;
  2453  00251C  0E84               	movlw	132
  2454  00251E  6E8A               	movwf	3978,c	;volatile
  2455                           
  2456                           ;pin_manager.c: 71: ANSELC = 0x44;
  2457  002520  0E44               	movlw	68
  2458  002522  010F               	movlb	15	; () banked
  2459  002524  6F21               	movwf	33,b	;volatile
  2460                           
  2461                           ; BSR set to: 15
  2462                           ;pin_manager.c: 72: ANSELB = 0x00;
  2463  002526  6B19               	clrf	25,b	;volatile
  2464                           
  2465                           ;pin_manager.c: 73: ANSELA = 0xC0;
  2466  002528  0EC0               	movlw	192
  2467  00252A  6F11               	movwf	17,b	;volatile
  2468                           
  2469                           ; BSR set to: 15
  2470                           ;pin_manager.c: 78: WPUE = 0x00;
  2471  00252C  6B2D               	clrf	45,b	;volatile
  2472                           
  2473                           ; BSR set to: 15
  2474                           ;pin_manager.c: 79: WPUB = 0x00;
  2475  00252E  6B18               	clrf	24,b	;volatile
  2476                           
  2477                           ; BSR set to: 15
  2478                           ;pin_manager.c: 80: WPUA = 0x00;
  2479  002530  6B10               	clrf	16,b	;volatile
  2480                           
  2481                           ; BSR set to: 15
  2482                           ;pin_manager.c: 81: WPUC = 0x00;
  2483  002532  6B20               	clrf	32,b	;volatile
  2484                           
  2485                           ; BSR set to: 15
  2486                           ;pin_manager.c: 86: ODCONA = 0x00;
  2487  002534  6B0F               	clrf	15,b	;volatile
  2488                           
  2489                           ; BSR set to: 15
  2490                           ;pin_manager.c: 87: ODCONB = 0x00;
  2491  002536  6B17               	clrf	23,b	;volatile
  2492                           
  2493                           ; BSR set to: 15
  2494                           ;pin_manager.c: 88: ODCONC = 0x00;
  2495  002538  6B1F               	clrf	31,b	;volatile
  2496                           
  2497                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  2498  00253A  0E00               	movlw	0
  2499  00253C  BEF2               	btfsc	intcon,7,c	;volatile
  2500  00253E  0E01               	movlw	1
  2501  002540  0100               	movlb	0	; () banked
  2502  002542  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;pin_manager.c: 96: GIE = 0;
  2506  002544  9EF2               	bcf	intcon,7,c	;volatile
  2507                           
  2508                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  2509  002546  0E55               	movlw	85
  2510  002548  010E               	movlb	14	; () banked
  2511  00254A  6FA0               	movwf	160,b	;volatile
  2512                           
  2513                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  2514  00254C  0EAA               	movlw	170
  2515  00254E  6FA0               	movwf	160,b	;volatile
  2516                           
  2517                           ; BSR set to: 14
  2518                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  2519  002550  91A0               	bcf	160,0,b	;volatile
  2520                           
  2521                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  2522  002552  51B5               	movf	181,w,b	;volatile
  2523  002554  0BE0               	andlw	-32
  2524  002556  0917               	iorlw	23
  2525  002558  6FB5               	movwf	181,b	;volatile
  2526                           
  2527                           ;pin_manager.c: 102: RC6PPS = 0x09;
  2528  00255A  0E09               	movlw	9
  2529  00255C  6FFD               	movwf	253,b	;volatile
  2530                           
  2531                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  2532  00255E  0E55               	movlw	85
  2533  002560  6FA0               	movwf	160,b	;volatile
  2534                           
  2535                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  2536  002562  0EAA               	movlw	170
  2537  002564  6FA0               	movwf	160,b	;volatile
  2538                           
  2539                           ; BSR set to: 14
  2540                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  2541  002566  81A0               	bsf	160,0,b	;volatile
  2542                           
  2543                           ; BSR set to: 14
  2544                           ;pin_manager.c: 108: GIE = state;
  2545  002568  0100               	movlb	0	; () banked
  2546  00256A  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  2547  00256C  D002               	goto	u3060
  2548  00256E  8EF2               	bsf	intcon,7,c	;volatile
  2549  002570  0CAA               	retlw	170
  2550  002572                     u3060:
  2551  002572  9EF2               	bcf	intcon,7,c	;volatile
  2552  002574  0012               	return		;funcret
  2553  002576                     __end_of_PIN_MANAGER_Initialize:
  2554                           	opt stack 0
  2555                           tosu	equ	0xFFF
  2556                           tosh	equ	0xFFE
  2557                           tosl	equ	0xFFD
  2558                           pclath	equ	0xFFA
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           intcon	equ	0xFF2
  2566                           postinc0	equ	0xFEE
  2567                           plusw0	equ	0xFEB
  2568                           wreg	equ	0xFE8
  2569                           indf1	equ	0xFE7
  2570                           postdec1	equ	0xFE5
  2571                           plusw1	equ	0xFE3
  2572                           fsr1h	equ	0xFE2
  2573                           fsr1l	equ	0xFE1
  2574                           indf2	equ	0xFDF
  2575                           postinc2	equ	0xFDE
  2576                           postdec2	equ	0xFDD
  2577                           plusw2	equ	0xFDB
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _OSCILLATOR_Initialize *****************
  2583 ;; Defined at:
  2584 ;;		line 117 in file "mcc_generated_files/mcc.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;		None
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 3F/E
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2602 ;;Total ram usage:        0 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; Hardware stack levels required when called:    9
  2605 ;; This function calls:
  2606 ;;		Nothing
  2607 ;; This function is called by:
  2608 ;;		_SYSTEM_Initialize
  2609 ;; This function uses a non-reentrant model
  2610 ;;
  2611                           
  2612                           	psect	text9
  2613  0029C6                     __ptext9:
  2614                           	opt stack 0
  2615  0029C6                     _OSCILLATOR_Initialize:
  2616                           	opt stack 20
  2617                           
  2618                           ;mcc.c: 120: OSCCON1 = 0x22;
  2619                           
  2620                           ;incstack = 0
  2621  0029C6  0E22               	movlw	34
  2622  0029C8  010E               	movlb	14	; () banked
  2623  0029CA  6FD8               	movwf	216,b	;volatile
  2624                           
  2625                           ; BSR set to: 14
  2626                           ;mcc.c: 122: OSCCON3 = 0x00;
  2627  0029CC  6BDA               	clrf	218,b	;volatile
  2628                           
  2629                           ; BSR set to: 14
  2630                           ;mcc.c: 124: OSCEN = 0x00;
  2631  0029CE  6BDC               	clrf	220,b	;volatile
  2632                           
  2633                           ;mcc.c: 126: OSCFRQ = 0x02;
  2634  0029D0  0E02               	movlw	2
  2635  0029D2  6FDE               	movwf	222,b	;volatile
  2636                           
  2637                           ; BSR set to: 14
  2638                           ;mcc.c: 128: OSCTUNE = 0x00;
  2639  0029D4  6BDD               	clrf	221,b	;volatile
  2640  0029D6                     l524:
  2641                           
  2642                           ; BSR set to: 14
  2643  0029D6  B1DB               	btfsc	219,0,b	;volatile
  2644                           
  2645                           ; BSR set to: 14
  2646  0029D8  0012               	return		;funcret
  2647  0029DA  D7FD               	goto	l524
  2648  0029DC                     __end_of_OSCILLATOR_Initialize:
  2649                           	opt stack 0
  2650                           tosu	equ	0xFFF
  2651                           tosh	equ	0xFFE
  2652                           tosl	equ	0xFFD
  2653                           pclath	equ	0xFFA
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           prodh	equ	0xFF4
  2659                           prodl	equ	0xFF3
  2660                           intcon	equ	0xFF2
  2661                           postinc0	equ	0xFEE
  2662                           plusw0	equ	0xFEB
  2663                           wreg	equ	0xFE8
  2664                           indf1	equ	0xFE7
  2665                           postdec1	equ	0xFE5
  2666                           plusw1	equ	0xFE3
  2667                           fsr1h	equ	0xFE2
  2668                           fsr1l	equ	0xFE1
  2669                           indf2	equ	0xFDF
  2670                           postinc2	equ	0xFDE
  2671                           postdec2	equ	0xFDD
  2672                           plusw2	equ	0xFDB
  2673                           fsr2h	equ	0xFDA
  2674                           fsr2l	equ	0xFD9
  2675                           status	equ	0xFD8
  2676                           
  2677 ;; *************** function _INTERRUPT_Initialize *****************
  2678 ;; Defined at:
  2679 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2680 ;; Parameters:    Size  Location     Type
  2681 ;;		None
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;		None
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		None
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;Total ram usage:        0 bytes
  2698 ;; Hardware stack levels used:    1
  2699 ;; Hardware stack levels required when called:    9
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_SYSTEM_Initialize
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           	psect	text10
  2708  002A70                     __ptext10:
  2709                           	opt stack 0
  2710  002A70                     _INTERRUPT_Initialize:
  2711                           	opt stack 20
  2712                           
  2713                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  2714                           
  2715                           ; BSR set to: 14
  2716                           ;incstack = 0
  2717  002A70  9AF2               	bcf	intcon,5,c	;volatile
  2718  002A72  0012               	return		;funcret
  2719  002A74                     __end_of_INTERRUPT_Initialize:
  2720                           	opt stack 0
  2721                           tosu	equ	0xFFF
  2722                           tosh	equ	0xFFE
  2723                           tosl	equ	0xFFD
  2724                           pclath	equ	0xFFA
  2725                           tblptru	equ	0xFF8
  2726                           tblptrh	equ	0xFF7
  2727                           tblptrl	equ	0xFF6
  2728                           tablat	equ	0xFF5
  2729                           prodh	equ	0xFF4
  2730                           prodl	equ	0xFF3
  2731                           intcon	equ	0xFF2
  2732                           postinc0	equ	0xFEE
  2733                           plusw0	equ	0xFEB
  2734                           wreg	equ	0xFE8
  2735                           indf1	equ	0xFE7
  2736                           postdec1	equ	0xFE5
  2737                           plusw1	equ	0xFE3
  2738                           fsr1h	equ	0xFE2
  2739                           fsr1l	equ	0xFE1
  2740                           indf2	equ	0xFDF
  2741                           postinc2	equ	0xFDE
  2742                           postdec2	equ	0xFDD
  2743                           plusw2	equ	0xFDB
  2744                           fsr2h	equ	0xFDA
  2745                           fsr2l	equ	0xFD9
  2746                           status	equ	0xFD8
  2747                           
  2748 ;; *************** function _ReadGPS_DATE_TIME *****************
  2749 ;; Defined at:
  2750 ;;		line 115 in file "libs/funcs.c"
  2751 ;; Parameters:    Size  Location     Type
  2752 ;;		None
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  Date            7   69[BANK0 ] unsigned char [7]
  2755 ;;  Time            7   62[BANK0 ] unsigned char [7]
  2756 ;; Return value:  Size  Location     Type
  2757 ;;                  1    wreg      enum E11037
  2758 ;; Registers used:
  2759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2760 ;; Tracked objects:
  2761 ;;		On entry : 0/0
  2762 ;;		On exit  : 3F/0
  2763 ;;		Unchanged: 0/0
  2764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2766 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2768 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2769 ;;Total ram usage:       18 bytes
  2770 ;; Hardware stack levels used:    1
  2771 ;; Hardware stack levels required when called:   14
  2772 ;; This function calls:
  2773 ;;		_AdjustDayLightSaving
  2774 ;;		_DecreaseByADay
  2775 ;;		_EUSART1_Initialize
  2776 ;;		_GetDay
  2777 ;;		_IncreaseByADay
  2778 ;;		_ReadGPSDateTime
  2779 ;;		_TimeTextToSecond
  2780 ;;		_ValidateDateTime
  2781 ;; This function is called by:
  2782 ;;		_main
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text11
  2787  000F10                     __ptext11:
  2788                           	opt stack 0
  2789  000F10                     _ReadGPS_DATE_TIME:
  2790                           	opt stack 16
  2791                           
  2792                           ;funcs.c: 116: char Date[] = "------";
  2793                           
  2794                           ;incstack = 0
  2795  000F10  EE20  F0CB         	lfsr	2,ReadGPS_DATE_TIME@F11440
  2796  000F14  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  2797  000F18  0E06               	movlw	6
  2798  000F1A                     u3341:
  2799  000F1A  CFDB FFE3          	movff	plusw2,plusw1
  2800  000F1E  06E8               	decf	wreg,f,c
  2801  000F20  E2FC               	bc	u3341
  2802                           
  2803                           ;funcs.c: 117: char Time[] = "------";
  2804  000F22  EE20  F0C4         	lfsr	2,ReadGPS_DATE_TIME@F11442
  2805  000F26  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  2806  000F2A  0E06               	movlw	6
  2807  000F2C                     u3351:
  2808  000F2C  CFDB FFE3          	movff	plusw2,plusw1
  2809  000F30  06E8               	decf	wreg,f,c
  2810  000F32  E2FC               	bc	u3351
  2811                           
  2812                           ;funcs.c: 118: EUSART1_Initialize();
  2813  000F34  ECF8  F014         	call	_EUSART1_Initialize	;wreg free
  2814                           
  2815                           ;funcs.c: 119: ReadGPSDateTime(Date, Time);
  2816  000F38  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  2817  000F3A  0100               	movlb	0	; () banked
  2818  000F3C  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  2819  000F3E  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  2820  000F40  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  2821  000F42  EC24  F010         	call	_ReadGPSDateTime	;wreg free
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;funcs.c: 120: if (ValidateDateTime(Date, Time)) {
  2825  000F46  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  2826  000F48  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  2827  000F4A  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  2828  000F4C  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  2829  000F4E  EC7A  F00D         	call	_ValidateDateTime	;wreg free
  2830  000F52  0900               	iorlw	0
  2831  000F54  E101 D0AD          	bz	l3792
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;funcs.c: 121: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  2835  000F58  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  2836  000F5A  0D0A               	mullw	10
  2837  000F5C  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  2838  000F5E  D8AA               	call	PL68	;call to abstracted procedure
  2839  000F60  6FD7               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  2840  000F62  0EFD               	movlw	253
  2841  000F64  20F4               	addwfc	prodh,w,c
  2842  000F66  6FD8               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  2843                           
  2844                           ;funcs.c: 122: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  2845  000F68  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  2846  000F6A  0D0A               	mullw	10
  2847  000F6C  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  2848  000F6E  D8A2               	call	PL68	;call to abstracted procedure
  2849  000F70  6FD9               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  2850  000F72  0EFD               	movlw	253
  2851  000F74  20F4               	addwfc	prodh,w,c
  2852  000F76  6FDA               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;funcs.c: 123: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  2856  000F78  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  2857  000F7A  6F6E               	movwf	GetDay@Date& (0+255),b
  2858  000F7C  EC7E  F00C         	call	_GetDay	;wreg free
  2859  000F80  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  2860  000F82  0E40               	movlw	64
  2861  000F84  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  2862  000F86  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  2863  000F88  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  2864  000F8A  D003               	goto	u3374
  2865  000F8C                     u3375:
  2866  000F8C  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  2867  000F8E  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  2868  000F90  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  2869  000F92                     u3374:
  2870  000F92  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  2871  000F94  D7FB               	goto	u3375
  2872  000F96  0100               	movlb	0	; () banked
  2873  000F98  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  2874  000F9A  51DB               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  2875  000F9C  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  2876  000F9E  0B01               	andlw	-255
  2877  000FA0  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  2878  000FA2  6FDB               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;funcs.c: 124: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + GLOBAL_CENTURY*
      +                          100;
  2882  000FA4  51D2               	movf	_GLOBAL_CENTURY& (0+255),w,b
  2883  000FA6  0D64               	mullw	100
  2884  000FA8  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  2885  000FAC  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  2886  000FB0  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  2887  000FB2  0D0A               	mullw	10
  2888  000FB4  50F3               	movf	prodl,w,c
  2889  000FB6  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  2890  000FB8  50F4               	movf	prodh,w,c
  2891  000FBA  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  2892  000FBC  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  2893  000FBE  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  2894  000FC0  0E00               	movlw	0
  2895  000FC2  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  2896  000FC4  0EF0               	movlw	240
  2897  000FC6  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  2898  000FC8  6FDC               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  2899  000FCA  0EFD               	movlw	253
  2900  000FCC  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  2901  000FCE  6FDD               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  2902                           
  2903                           ;funcs.c: 125: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  2904  000FD0  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  2905  000FD2  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  2906  000FD4  EC00  F00D         	call	_TimeTextToSecond	;wreg free
  2907  000FD8  C06C  F0D3         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  2908  000FDC  C06D  F0D4         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  2909  000FE0  C06E  F0D5         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  2910  000FE4  C06F  F0D6         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;funcs.c: 126: GPS_DATE_TIME.SECOND += TIME_ZONE;
  2914  000FE8  C0F1  F09A         	movff	_TIME_ZONE,??_ReadGPS_DATE_TIME
  2915  000FEC  C0F2  F09B         	movff	_TIME_ZONE+1,??_ReadGPS_DATE_TIME+1
  2916  000FF0  0E00               	movlw	0
  2917  000FF2  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  2918  000FF4  0EFF               	movlw	255
  2919  000FF6  6F9C               	movwf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  2920  000FF8  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  2921  000FFA  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  2922  000FFC  27D3               	addwf	_GPS_DATE_TIME& (0+255),f,b
  2923  000FFE  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  2924  001000  23D4               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  2925  001002  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  2926  001004  23D5               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  2927  001006  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  2928  001008  23D6               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;funcs.c: 127: if (GPS_DATE_TIME.SECOND < 0) {
  2932  00100A  AFD6               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  2933  00100C  D01A               	goto	l3778
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;funcs.c: 128: GPS_DATE_TIME.SECOND += 86400;
  2937  00100E  0E80               	movlw	128
  2938  001010  27D3               	addwf	_GPS_DATE_TIME& (0+255),f,b
  2939  001012  0E51               	movlw	81
  2940  001014  23D4               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  2941  001016  0E01               	movlw	1
  2942  001018  23D5               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  2943  00101A  0E00               	movlw	0
  2944  00101C  23D6               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;funcs.c: 129: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  2948  00101E  EE20  F0D3         	lfsr	2,_GPS_DATE_TIME
  2949  001022  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  2950  001026  0E0A               	movlw	10
  2951  001028                     u3391:
  2952  001028  CFDB FFEB          	movff	plusw2,plusw0
  2953  00102C  06E8               	decf	wreg,f,c
  2954  00102E  E2FC               	bc	u3391
  2955  001030  ECF0  F00D         	call	_DecreaseByADay	;wreg free
  2956  001034  EE20  F0D3         	lfsr	2,_GPS_DATE_TIME
  2957  001038  0E0A               	movlw	10
  2958  00103A                     u3401:
  2959  00103A  CFEB FFDB          	movff	plusw0,plusw2
  2960  00103E  06E8               	decf	wreg,f,c
  2961  001040  E2FC               	bc	u3401
  2962  001042                     l3778:
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;funcs.c: 130: }
  2966                           ;funcs.c: 131: if (GPS_DATE_TIME.SECOND > 86400) {
  2967  001042  BFD6               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  2968  001044  D023               	goto	l3784
  2969  001046  51D6               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  2970  001048  E107               	bnz	u3410
  2971  00104A  0E81               	movlw	129
  2972  00104C  5DD3               	subwf	_GPS_DATE_TIME& (0+255),w,b
  2973  00104E  0E51               	movlw	81
  2974  001050  59D4               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  2975  001052  0E01               	movlw	1
  2976  001054  59D5               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  2977  001056  E31A               	bnc	l3784
  2978  001058                     u3410:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;funcs.c: 132: GPS_DATE_TIME.SECOND -= 86400;
  2982  001058  0E80               	movlw	128
  2983  00105A  27D3               	addwf	_GPS_DATE_TIME& (0+255),f,b
  2984  00105C  0EAE               	movlw	174
  2985  00105E  23D4               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  2986  001060  0EFE               	movlw	254
  2987  001062  23D5               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  2988  001064  0EFF               	movlw	255
  2989  001066  23D6               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;funcs.c: 133: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  2993  001068  EE20  F0D3         	lfsr	2,_GPS_DATE_TIME
  2994  00106C  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  2995  001070  0E0A               	movlw	10
  2996  001072                     u3421:
  2997  001072  CFDB FFEB          	movff	plusw2,plusw0
  2998  001076  06E8               	decf	wreg,f,c
  2999  001078  E2FC               	bc	u3421
  3000  00107A  ECB6  F00F         	call	_IncreaseByADay	;wreg free
  3001  00107E  EE20  F0D3         	lfsr	2,_GPS_DATE_TIME
  3002  001082  0E0A               	movlw	10
  3003  001084                     u3431:
  3004  001084  CFEB FFDB          	movff	plusw0,plusw2
  3005  001088  06E8               	decf	wreg,f,c
  3006  00108A  E2FC               	bc	u3431
  3007  00108C                     l3784:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;funcs.c: 134: }
  3011                           ;funcs.c: 135: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  3012  00108C  EE20  F0D3         	lfsr	2,_GPS_DATE_TIME
  3013  001090  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  3014  001094  0E0A               	movlw	10
  3015  001096                     u3441:
  3016  001096  CFDB FFEB          	movff	plusw2,plusw0
  3017  00109A  06E8               	decf	wreg,f,c
  3018  00109C  E2FC               	bc	u3441
  3019  00109E  ECEC  F00B         	call	_AdjustDayLightSaving	;wreg free
  3020  0010A2  EE20  F0D3         	lfsr	2,_GPS_DATE_TIME
  3021  0010A6  0E0A               	movlw	10
  3022  0010A8                     u3451:
  3023  0010A8  CFEB FFDB          	movff	plusw0,plusw2
  3024  0010AC  06E8               	decf	wreg,f,c
  3025  0010AE  E2FC               	bc	u3451
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;funcs.c: 136: return 1;
  3029  0010B0  0C01               	retlw	1
  3030  0010B2                     l3792:
  3031                           
  3032                           ; BSR set to: 0
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;funcs.c: 138: return 0;
  3036  0010B2  0C00               	retlw	0	;funcret
  3037  0010B4                     __end_of_ReadGPS_DATE_TIME:
  3038                           	opt stack 0
  3039  0010B4                     PL68:
  3040                           	opt stack 16
  3041  0010B4  26F3               	addwf	prodl,f,c
  3042  0010B6  0E00               	movlw	0
  3043  0010B8  22F4               	addwfc	prodh,f,c
  3044  0010BA  0EF0               	movlw	240
  3045  0010BC  24F3               	addwf	prodl,w,c
  3046  0010BE  0012               	return	
  3047  0010C0                     __end_ofPL68:
  3048                           	opt stack 0
  3049                           tosu	equ	0xFFF
  3050                           tosh	equ	0xFFE
  3051                           tosl	equ	0xFFD
  3052                           pclath	equ	0xFFA
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           prodh	equ	0xFF4
  3058                           prodl	equ	0xFF3
  3059                           intcon	equ	0xFF2
  3060                           postinc0	equ	0xFEE
  3061                           plusw0	equ	0xFEB
  3062                           wreg	equ	0xFE8
  3063                           indf1	equ	0xFE7
  3064                           postdec1	equ	0xFE5
  3065                           plusw1	equ	0xFE3
  3066                           fsr1h	equ	0xFE2
  3067                           fsr1l	equ	0xFE1
  3068                           indf2	equ	0xFDF
  3069                           postinc2	equ	0xFDE
  3070                           postdec2	equ	0xFDD
  3071                           plusw2	equ	0xFDB
  3072                           fsr2h	equ	0xFDA
  3073                           fsr2l	equ	0xFD9
  3074                           status	equ	0xFD8
  3075                           
  3076 ;; *************** function _ValidateDateTime *****************
  3077 ;; Defined at:
  3078 ;;		line 138 in file "libs/gps.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  3081 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  3082 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  3083 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  Item            1    3[BANK0 ] char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      enum E11037
  3088 ;; Registers used:
  3089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3090 ;; Tracked objects:
  3091 ;;		On entry : 3F/0
  3092 ;;		On exit  : 3F/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3095 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3098 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3099 ;;Total ram usage:        4 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    9
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_ReadGPS_DATE_TIME
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text12
  3110  001AF4                     __ptext12:
  3111                           	opt stack 0
  3112  001AF4                     _ValidateDateTime:
  3113                           	opt stack 20
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;gps.c: 139: INT8 Item;
  3117                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;incstack = 0
  3121  001AF4  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3122  001AF6  D86F               	call	PL78	;call to abstracted procedure
  3123  001AF8  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3124  001AFA  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3125  001AFC  6ED9               	movwf	fsr2l,c
  3126  001AFE  6ADA               	clrf	fsr2h,c
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  3130  001B00  D84A               	call	PL12	;call to abstracted procedure
  3131  001B02  A0D8               	btfss	status,0,c
  3132  001B04  0C00               	retlw	0
  3133                           
  3134                           ; BSR set to: 0
  3135  001B06  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3136  001B08  0A80               	xorlw	128
  3137  001B0A  0F60               	addlw	-160
  3138  001B0C  E301               	bnc	l3190
  3139                           
  3140                           ; BSR set to: 0
  3141  001B0E  0C00               	retlw	0
  3142  001B10                     l3190:
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  3146  001B10  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3147  001B12  D855               	call	PL44	;call to abstracted procedure
  3148  001B14  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3149  001B16  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3150  001B18  D848               	call	PL24	;call to abstracted procedure
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  3154  001B1A  D83D               	call	PL12	;call to abstracted procedure
  3155  001B1C  A0D8               	btfss	status,0,c
  3156  001B1E  0C00               	retlw	0
  3157                           
  3158                           ; BSR set to: 0
  3159  001B20  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3160  001B22  0A80               	xorlw	128
  3161  001B24  0F73               	addlw	-141
  3162  001B26  E301               	bnc	l3200
  3163  001B28  0C00               	retlw	0
  3164  001B2A                     l3200:
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  3168  001B2A  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3169  001B2C  D84E               	call	PL50	;call to abstracted procedure
  3170  001B2E  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3171  001B30  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3172  001B32  D840               	call	PL26	;call to abstracted procedure
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  3176  001B34  D830               	call	PL12	;call to abstracted procedure
  3177  001B36  A0D8               	btfss	status,0,c
  3178  001B38  0C00               	retlw	0
  3179                           
  3180                           ; BSR set to: 0
  3181  001B3A  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3182  001B3C  0A80               	xorlw	128
  3183  001B3E  0F1C               	addlw	-228
  3184  001B40  E301               	bnc	l3210
  3185  001B42  0C00               	retlw	0
  3186  001B44                     l3210:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  3190  001B44  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3191  001B46  D847               	call	PL78	;call to abstracted procedure
  3192  001B48  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3193  001B4A  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3194  001B4C  6ED9               	movwf	fsr2l,c
  3195  001B4E  6ADA               	clrf	fsr2h,c
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  3199  001B50  D822               	call	PL12	;call to abstracted procedure
  3200  001B52  A0D8               	btfss	status,0,c
  3201  001B54  0C00               	retlw	0
  3202                           
  3203                           ; BSR set to: 0
  3204  001B56  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3205  001B58  0A80               	xorlw	128
  3206  001B5A  0F68               	addlw	-152
  3207  001B5C  E301               	bnc	l3220
  3208  001B5E  0C00               	retlw	0
  3209  001B60                     l3220:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  3213  001B60  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3214  001B62  D82D               	call	PL44	;call to abstracted procedure
  3215  001B64  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3216  001B66  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3217  001B68  D820               	call	PL24	;call to abstracted procedure
  3218                           
  3219                           ; BSR set to: 0
  3220                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  3221  001B6A  D815               	call	PL12	;call to abstracted procedure
  3222  001B6C  A0D8               	btfss	status,0,c
  3223  001B6E  0C00               	retlw	0
  3224                           
  3225                           ; BSR set to: 0
  3226  001B70  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3227  001B72  0A80               	xorlw	128
  3228  001B74  0F44               	addlw	-188
  3229  001B76  E301               	bnc	l3230
  3230  001B78  0C00               	retlw	0
  3231  001B7A                     l3230:
  3232                           
  3233                           ; BSR set to: 0
  3234                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  3235  001B7A  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3236  001B7C  D826               	call	PL50	;call to abstracted procedure
  3237  001B7E  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3238  001B80  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3239  001B82  D818               	call	PL26	;call to abstracted procedure
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  3243  001B84  D808               	call	PL12	;call to abstracted procedure
  3244  001B86  A0D8               	btfss	status,0,c
  3245  001B88  0C00               	retlw	0
  3246                           
  3247                           ; BSR set to: 0
  3248  001B8A  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3249  001B8C  0A80               	xorlw	128
  3250  001B8E  0F44               	addlw	-188
  3251  001B90  E301               	bnc	l3240
  3252  001B92  0C00               	retlw	0
  3253  001B94                     l3240:
  3254                           
  3255                           ; BSR set to: 0
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;gps.c: 160: return 1;
  3259  001B94  0C01               	retlw	1	;funcret
  3260  001B96                     __end_of_ValidateDateTime:
  3261                           	opt stack 0
  3262  001B96                     PL12:
  3263                           	opt stack 20
  3264  001B96  50DF               	movf	indf2,w,c
  3265  001B98  0D0A               	mullw	10
  3266  001B9A  50F3               	movf	prodl,w,c
  3267  001B9C  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  3268  001B9E  0FF0               	addlw	240
  3269  001BA0  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  3270  001BA2  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3271  001BA4  0A80               	xorlw	128
  3272  001BA6  0F7F               	addlw	-129
  3273  001BA8  0012               	return	
  3274  001BAA                     __end_ofPL12:
  3275                           	opt stack 0
  3276  001BAA                     PL24:
  3277                           	opt stack 20
  3278  001BAA  6ED9               	movwf	fsr2l,c
  3279  001BAC  6ADA               	clrf	fsr2h,c
  3280  001BAE  0E02               	movlw	2
  3281  001BB0  26D9               	addwf	fsr2l,f,c
  3282  001BB2  0C02               	retlw	2
  3283  001BB4                     __end_ofPL24:
  3284                           	opt stack 0
  3285  001BB4                     PL26:
  3286                           	opt stack 20
  3287  001BB4  6ED9               	movwf	fsr2l,c
  3288  001BB6  6ADA               	clrf	fsr2h,c
  3289  001BB8  0E04               	movlw	4
  3290  001BBA  26D9               	addwf	fsr2l,f,c
  3291  001BBC  0C04               	retlw	4
  3292  001BBE                     __end_ofPL26:
  3293                           	opt stack 0
  3294  001BBE                     PL44:
  3295                           	opt stack 20
  3296  001BBE  6ED9               	movwf	fsr2l,c
  3297  001BC0  6ADA               	clrf	fsr2h,c
  3298  001BC2  0E03               	movlw	3
  3299  001BC4  26D9               	addwf	fsr2l,f,c
  3300  001BC6  50DF               	movf	indf2,w,c
  3301  001BC8  0012               	return	
  3302  001BCA                     __end_ofPL44:
  3303                           	opt stack 0
  3304  001BCA                     PL50:
  3305                           	opt stack 20
  3306  001BCA  6ED9               	movwf	fsr2l,c
  3307  001BCC  6ADA               	clrf	fsr2h,c
  3308  001BCE  0E05               	movlw	5
  3309  001BD0  26D9               	addwf	fsr2l,f,c
  3310  001BD2  50DF               	movf	indf2,w,c
  3311  001BD4  0012               	return	
  3312  001BD6                     __end_ofPL50:
  3313                           	opt stack 0
  3314  001BD6                     PL78:
  3315                           	opt stack 20
  3316  001BD6  6ED9               	movwf	fsr2l,c
  3317  001BD8  6ADA               	clrf	fsr2h,c
  3318  001BDA  2AD9               	incf	fsr2l,f,c
  3319  001BDC  50DF               	movf	indf2,w,c
  3320  001BDE  0012               	return	
  3321  001BE0                     __end_ofPL78:
  3322                           	opt stack 0
  3323                           tosu	equ	0xFFF
  3324                           tosh	equ	0xFFE
  3325                           tosl	equ	0xFFD
  3326                           pclath	equ	0xFFA
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon	equ	0xFF2
  3334                           postinc0	equ	0xFEE
  3335                           plusw0	equ	0xFEB
  3336                           wreg	equ	0xFE8
  3337                           indf1	equ	0xFE7
  3338                           postdec1	equ	0xFE5
  3339                           plusw1	equ	0xFE3
  3340                           fsr1h	equ	0xFE2
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           postdec2	equ	0xFDD
  3345                           plusw2	equ	0xFDB
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _TimeTextToSecond *****************
  3351 ;; Defined at:
  3352 ;;		line 141 in file "libs/funcs.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  3355 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  Second          4   32[BANK0 ] long 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  4   12[BANK0 ] long 
  3360 ;; Registers used:
  3361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 3F/0
  3364 ;;		On exit  : 3F/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3367 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3368 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3369 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3370 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3371 ;;Total ram usage:       24 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:   10
  3374 ;; This function calls:
  3375 ;;		___lmul
  3376 ;; This function is called by:
  3377 ;;		_ReadGPS_DATE_TIME
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text13
  3382  001A00                     __ptext13:
  3383                           	opt stack 0
  3384  001A00                     _TimeTextToSecond:
  3385                           	opt stack 19
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;funcs.c: 142: INT32 Second;
  3389                           ;funcs.c: 143: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  3390                           ;funcs.c: 144: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  3391                           ;funcs.c: 145: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  3392                           
  3393                           ; BSR set to: 0
  3394                           ;incstack = 0
  3395  001A00  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3396  001A02  ECDA  F00D         	call	PL26	;call to abstracted procedure
  3397  001A06  D872               	call	PL70	;call to abstracted procedure
  3398  001A08  ECE5  F00D         	call	PL50	;call to abstracted procedure
  3399  001A0C  EC5A  F008         	call	PL68	;call to abstracted procedure
  3400  001A10  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  3401  001A12  0EFD               	movlw	253
  3402  001A14  20F4               	addwfc	prodh,w,c
  3403  001A16  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  3404  001A18  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  3405  001A1A  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  3406  001A1C  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  3407  001A1E  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  3408  001A20  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  3409  001A22  0EF0               	movlw	240
  3410  001A24  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  3411  001A26  0EFD               	movlw	253
  3412  001A28  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  3413  001A2A  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3414  001A2C  6ED9               	movwf	fsr2l,c
  3415  001A2E  6ADA               	clrf	fsr2h,c
  3416  001A30  D85D               	call	PL70	;call to abstracted procedure
  3417  001A32  ECEB  F00D         	call	PL78	;call to abstracted procedure
  3418  001A36  26F3               	addwf	prodl,f,c
  3419  001A38  0E00               	movlw	0
  3420  001A3A  22F4               	addwfc	prodh,f,c
  3421  001A3C  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  3422  001A3E  26F3               	addwf	prodl,f,c
  3423  001A40  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  3424  001A42  D849               	call	PL40	;call to abstracted procedure
  3425  001A44  0E10               	movlw	16
  3426  001A46  6F64               	movwf	___lmul@multiplicand& (0+255),b
  3427  001A48  0E0E               	movlw	14
  3428  001A4A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  3429  001A4C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  3430  001A4E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  3431  001A50  EC3F  F013         	call	___lmul	;wreg free
  3432  001A54  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  3433  001A58  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  3434  001A5C  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  3435  001A60  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  3436  001A64  0EF0               	movlw	240
  3437  001A66  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  3438  001A68  0EFD               	movlw	253
  3439  001A6A  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  3440  001A6C  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3441  001A6E  ECD5  F00D         	call	PL24	;call to abstracted procedure
  3442  001A72  D83C               	call	PL70	;call to abstracted procedure
  3443  001A74  ECDF  F00D         	call	PL44	;call to abstracted procedure
  3444  001A78  26F3               	addwf	prodl,f,c
  3445  001A7A  0E00               	movlw	0
  3446  001A7C  22F4               	addwfc	prodh,f,c
  3447  001A7E  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  3448  001A80  26F3               	addwf	prodl,f,c
  3449  001A82  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  3450  001A84  D828               	call	PL40	;call to abstracted procedure
  3451  001A86  0E3C               	movlw	60
  3452  001A88  6F64               	movwf	___lmul@multiplicand& (0+255),b
  3453  001A8A  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  3454  001A8C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  3455  001A8E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  3456  001A90  EC3F  F013         	call	___lmul	;wreg free
  3457  001A94  5160               	movf	?___lmul& (0+255),w,b
  3458  001A96  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  3459  001A98  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  3460  001A9A  5161               	movf	(?___lmul+1)& (0+255),w,b
  3461  001A9C  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  3462  001A9E  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  3463  001AA0  5162               	movf	(?___lmul+2)& (0+255),w,b
  3464  001AA2  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  3465  001AA4  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  3466  001AA6  5163               	movf	(?___lmul+3)& (0+255),w,b
  3467  001AA8  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  3468  001AAA  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  3469  001AAC  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  3470  001AAE  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  3471  001AB0  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  3472  001AB2  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  3473  001AB4  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  3474  001AB6  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  3475  001AB8  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  3476  001ABA  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  3477  001ABC  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  3478  001ABE  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  3479  001AC0  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  3480  001AC2  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;funcs.c: 146: return Second;
  3484  001AC4  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  3485  001AC8  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  3486  001ACC  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  3487  001AD0  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  3488                           
  3489                           ; BSR set to: 0
  3490  001AD4  0012               	return		;funcret
  3491  001AD6                     __end_of_TimeTextToSecond:
  3492                           	opt stack 0
  3493  001AD6                     PL40:
  3494                           	opt stack 19
  3495  001AD6  22F4               	addwfc	prodh,f,c
  3496  001AD8  CFF3 F060          	movff	prodl,___lmul@multiplier
  3497  001ADC  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  3498  001AE0  0E00               	movlw	0
  3499  001AE2  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  3500  001AE4  0EFF               	movlw	-1
  3501  001AE6  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  3502  001AE8  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  3503  001AEA  0012               	return	
  3504  001AEC                     __end_ofPL40:
  3505                           	opt stack 0
  3506  001AEC                     PL70:
  3507                           	opt stack 19
  3508  001AEC  50DF               	movf	indf2,w,c
  3509  001AEE  0D0A               	mullw	10
  3510  001AF0  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3511  001AF2  0012               	return	
  3512  001AF4                     __end_ofPL70:
  3513                           	opt stack 0
  3514                           tosu	equ	0xFFF
  3515                           tosh	equ	0xFFE
  3516                           tosl	equ	0xFFD
  3517                           pclath	equ	0xFFA
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           postinc0	equ	0xFEE
  3526                           plusw0	equ	0xFEB
  3527                           wreg	equ	0xFE8
  3528                           indf1	equ	0xFE7
  3529                           postdec1	equ	0xFE5
  3530                           plusw1	equ	0xFE3
  3531                           fsr1h	equ	0xFE2
  3532                           fsr1l	equ	0xFE1
  3533                           indf2	equ	0xFDF
  3534                           postinc2	equ	0xFDE
  3535                           postdec2	equ	0xFDD
  3536                           plusw2	equ	0xFDB
  3537                           fsr2h	equ	0xFDA
  3538                           fsr2l	equ	0xFD9
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function ___lmul *****************
  3542 ;; Defined at:
  3543 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;  multiplier      4    0[BANK0 ] unsigned long 
  3546 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;  product         4    8[BANK0 ] unsigned long 
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  4    0[BANK0 ] unsigned long 
  3551 ;; Registers used:
  3552 ;;		wreg, status,2, status,0
  3553 ;; Tracked objects:
  3554 ;;		On entry : 3F/0
  3555 ;;		On exit  : 3F/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3558 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3559 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3561 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3562 ;;Total ram usage:       12 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    9
  3565 ;; This function calls:
  3566 ;;		Nothing
  3567 ;; This function is called by:
  3568 ;;		_WriteLongInt
  3569 ;;		_TimeTextToSecond
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text14
  3574  00267E                     __ptext14:
  3575                           	opt stack 0
  3576  00267E                     ___lmul:
  3577                           	opt stack 20
  3578                           
  3579                           ; BSR set to: 0
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;incstack = 0
  3583  00267E  6B68               	clrf	___lmul@product& (0+255),b
  3584  002680  6B69               	clrf	(___lmul@product+1)& (0+255),b
  3585  002682  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  3586  002684  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  3587  002686                     l898:
  3588                           
  3589                           ; BSR set to: 0
  3590  002686  A160               	btfss	___lmul@multiplier& (0+255),0,b
  3591  002688  D008               	goto	l3040
  3592                           
  3593                           ; BSR set to: 0
  3594  00268A  5164               	movf	___lmul@multiplicand& (0+255),w,b
  3595  00268C  2768               	addwf	___lmul@product& (0+255),f,b
  3596  00268E  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  3597  002690  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  3598  002692  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  3599  002694  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  3600  002696  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  3601  002698  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  3602  00269A                     l3040:
  3603                           
  3604                           ; BSR set to: 0
  3605  00269A  90D8               	bcf	status,0,c
  3606  00269C  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  3607  00269E  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  3608  0026A0  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  3609  0026A2  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  3610                           
  3611                           ; BSR set to: 0
  3612  0026A4  90D8               	bcf	status,0,c
  3613  0026A6  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  3614  0026A8  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  3615  0026AA  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  3616  0026AC  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  3617  0026AE  5160               	movf	___lmul@multiplier& (0+255),w,b
  3618  0026B0  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  3619  0026B2  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  3620  0026B4  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  3621  0026B6  E1E7               	bnz	l898
  3622                           
  3623                           ; BSR set to: 0
  3624  0026B8  C068  F060         	movff	___lmul@product,?___lmul
  3625  0026BC  C069  F061         	movff	___lmul@product+1,?___lmul+1
  3626  0026C0  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  3627  0026C4  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  3628                           
  3629                           ; BSR set to: 0
  3630  0026C8  0012               	return		;funcret
  3631  0026CA                     __end_of___lmul:
  3632                           	opt stack 0
  3633                           tosu	equ	0xFFF
  3634                           tosh	equ	0xFFE
  3635                           tosl	equ	0xFFD
  3636                           pclath	equ	0xFFA
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           postinc0	equ	0xFEE
  3645                           plusw0	equ	0xFEB
  3646                           wreg	equ	0xFE8
  3647                           indf1	equ	0xFE7
  3648                           postdec1	equ	0xFE5
  3649                           plusw1	equ	0xFE3
  3650                           fsr1h	equ	0xFE2
  3651                           fsr1l	equ	0xFE1
  3652                           indf2	equ	0xFDF
  3653                           postinc2	equ	0xFDE
  3654                           postdec2	equ	0xFDD
  3655                           plusw2	equ	0xFDB
  3656                           fsr2h	equ	0xFDA
  3657                           fsr2l	equ	0xFD9
  3658                           status	equ	0xFD8
  3659                           
  3660 ;; *************** function _ReadGPSDateTime *****************
  3661 ;; Defined at:
  3662 ;;		line 39 in file "libs/gps.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  3665 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  3666 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  3667 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  3668 ;; Auto vars:     Size  Location     Type
  3669 ;;  StartCode       7    6[BANK0 ] const unsigned char [7]
  3670 ;;  i               2   13[BANK0 ] int 
  3671 ;;  Pos             1   17[BANK0 ] unsigned char 
  3672 ;;  TempChar        1   16[BANK0 ] unsigned char 
  3673 ;;  Commas          1   15[BANK0 ] unsigned char 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 3F/0
  3680 ;;		On exit  : 3F/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3683 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3684 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3685 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3686 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3687 ;;Total ram usage:       18 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:   10
  3690 ;; This function calls:
  3691 ;;		_EUSART1_Read
  3692 ;; This function is called by:
  3693 ;;		_ReadGPS_DATE_TIME
  3694 ;; This function uses a non-reentrant model
  3695 ;;
  3696                           
  3697                           	psect	text15
  3698  002048                     __ptext15:
  3699                           	opt stack 0
  3700  002048                     _ReadGPSDateTime:
  3701                           	opt stack 19
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;gps.c: 40: const char StartCode[7]="$GPRMC,";
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;incstack = 0
  3708  002048  0E01               	movlw	low ReadGPSDateTime@F11434
  3709  00204A  6EF6               	movwf	tblptrl,c
  3710  00204C                     	if	1	;There is more than 1 active tblptr byte
  3711  00204C  0E0F               	movlw	high ReadGPSDateTime@F11434
  3712  00204E  6EF7               	movwf	tblptrh,c
  3713  002050                     	endif
  3714  002050                     	if	1	;There are 3 active tblptr bytes
  3715  002050  0E00               	movlw	low (ReadGPSDateTime@F11434 shr (0+16))
  3716  002052  6EF8               	movwf	tblptru,c
  3717  002054                     	endif
  3718  002054  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  3719  002058  0E06               	movlw	6
  3720  00205A                     u2690:
  3721  00205A  0009               	tblrd		*+
  3722  00205C  CFF5 FFDE          	movff	tablat,postinc2
  3723  002060  06E8               	decf	wreg,f,c
  3724  002062  E2FB               	bc	u2690
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;gps.c: 41: char Pos=0x00;
  3728  002064  6B71               	clrf	ReadGPSDateTime@Pos& (0+255),b
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;gps.c: 43: int i=0;
  3732                           
  3733                           ; BSR set to: 0
  3734  002066  6B6D               	clrf	ReadGPSDateTime@i& (0+255),b
  3735  002068  6B6E               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;gps.c: 44: UINT8 Commas=0;
  3739  00206A  6B6F               	clrf	ReadGPSDateTime@Commas& (0+255),b
  3740  00206C                     l3134:
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  3744  00206C  010E               	movlb	14	; () banked
  3745  00206E  ABCD               	btfss	205,5,b	;volatile
  3746  002070  D047               	goto	l3168
  3747                           
  3748                           ; BSR set to: 14
  3749                           ;gps.c: 47: i=0;
  3750  002072  0100               	movlb	0	; () banked
  3751  002074  6B6D               	clrf	ReadGPSDateTime@i& (0+255),b
  3752  002076  6B6E               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;gps.c: 48: TempChar = EUSART1_Read();
  3756  002078  EC0C  F015         	call	_EUSART1_Read	;wreg free
  3757  00207C  0100               	movlb	0	; () banked
  3758  00207E  6F70               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  3762  002080  0E06               	movlw	6
  3763  002082  6571               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  3764  002084  D00D               	goto	l3148
  3765                           
  3766                           ; BSR set to: 0
  3767  002086  0E0D               	movlw	13
  3768  002088  6171               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  3769  00208A  D00A               	goto	l3148
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  3773  00208C  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  3774  00208E  2571               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  3775  002090  6ED9               	movwf	fsr2l,c
  3776  002092  6ADA               	clrf	fsr2h,c
  3777  002094  0EF9               	movlw	249
  3778  002096  26D9               	addwf	fsr2l,f,c
  3779  002098  C070  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  3780  00209C                     l3146:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;gps.c: 51: Pos++;
  3784  00209C  2B71               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  3785                           
  3786                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  3787  00209E  D034               	goto	l3170
  3788  0020A0                     l3148:
  3789                           
  3790                           ; BSR set to: 0
  3791  0020A0  5171               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  3792  0020A2  0F66               	addlw	low ReadGPSDateTime@StartCode
  3793  0020A4  6ED9               	movwf	fsr2l,c
  3794  0020A6  6ADA               	clrf	fsr2h,c
  3795  0020A8  5170               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  3796  0020AA  18DE               	xorwf	postinc2,w,c
  3797  0020AC  E104               	bnz	l3154
  3798                           
  3799                           ; BSR set to: 0
  3800  0020AE  0E07               	movlw	7
  3801  0020B0  6171               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  3802  0020B2  D001               	goto	l3154
  3803  0020B4  D7F3               	goto	l3146
  3804  0020B6                     l3154:
  3805                           
  3806                           ; BSR set to: 0
  3807  0020B6  0E0C               	movlw	12
  3808  0020B8  6571               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  3809  0020BA  D020               	goto	l97
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;gps.c: 55: if (Commas<8) {
  3813  0020BC  0E08               	movlw	8
  3814  0020BE  616F               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  3815  0020C0  D005               	goto	l3162
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;gps.c: 56: if (TempChar == 0x2C)
  3819  0020C2  0E2C               	movlw	44
  3820  0020C4  1970               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  3821  0020C6  E120               	bnz	l3170
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;gps.c: 57: Commas++;
  3825  0020C8  2B6F               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  3826  0020CA  D01E               	goto	l3170
  3827  0020CC                     l3162:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  3831  0020CC  0EF3               	movlw	243
  3832  0020CE  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  3833  0020D0  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  3834  0020D2  5171               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  3835  0020D4  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  3836  0020D6  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  3837  0020D8  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  3838  0020DA  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  3839  0020DC  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  3840  0020DE  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  3841  0020E0  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  3842  0020E2  D006               	goto	l3164
  3843  0020E4  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  3844  0020E6  E11A               	bnz	l103
  3845  0020E8  0E06               	movlw	6
  3846  0020EA  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  3847  0020EC  B0D8               	btfsc	status,0,c
  3848  0020EE  0012               	return	
  3849  0020F0                     l3164:
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  3853  0020F0  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  3854  0020F2  2571               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  3855  0020F4  6ED9               	movwf	fsr2l,c
  3856  0020F6  6ADA               	clrf	fsr2h,c
  3857  0020F8  0EF3               	movlw	243
  3858  0020FA  D7CD               	goto	L4
  3859  0020FC                     l97:
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;gps.c: 66: Pos=0;
  3863  0020FC  6B71               	clrf	ReadGPSDateTime@Pos& (0+255),b
  3864                           
  3865                           ; BSR set to: 0
  3866  0020FE  D004               	goto	l3170
  3867  002100                     l3168:
  3868                           
  3869                           ; BSR set to: 14
  3870                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3871  002100  0E06               	movlw	6
  3872  002102                     u3517:
  3873  002102  2EE8               	decfsz	wreg,f,c
  3874  002104  D7FE               	bra	u3517
  3875  002106  D000               	nop2	
  3876  002108                     l3170:
  3877                           
  3878                           ;gps.c: 69: i++;
  3879  002108  0100               	movlb	0	; () banked
  3880  00210A  4B6D               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  3881  00210C  2B6E               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  3882                           
  3883                           ;gps.c: 70: } while(i<1000);
  3884  00210E  BF6E               	btfsc	(ReadGPSDateTime@i+1)& (0+255),7,b
  3885  002110  D7AD               	goto	l3134
  3886  002112  0EE8               	movlw	232
  3887  002114  5D6D               	subwf	ReadGPSDateTime@i& (0+255),w,b
  3888  002116  0E03               	movlw	3
  3889  002118  596E               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  3890  00211A  E3A8               	bnc	l3134
  3891  00211C                     l103:
  3892                           
  3893                           ; BSR set to: 0
  3894  00211C  0012               	return		;funcret
  3895  00211E                     __end_of_ReadGPSDateTime:
  3896                           	opt stack 0
  3897                           tosu	equ	0xFFF
  3898                           tosh	equ	0xFFE
  3899                           tosl	equ	0xFFD
  3900                           pclath	equ	0xFFA
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           intcon	equ	0xFF2
  3908                           postinc0	equ	0xFEE
  3909                           plusw0	equ	0xFEB
  3910                           wreg	equ	0xFE8
  3911                           indf1	equ	0xFE7
  3912                           postdec1	equ	0xFE5
  3913                           plusw1	equ	0xFE3
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           plusw2	equ	0xFDB
  3920                           fsr2h	equ	0xFDA
  3921                           fsr2l	equ	0xFD9
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _EUSART1_Read *****************
  3925 ;; Defined at:
  3926 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;		None
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;		None
  3931 ;; Return value:  Size  Location     Type
  3932 ;;                  1    wreg      unsigned char 
  3933 ;; Registers used:
  3934 ;;		wreg, status,2
  3935 ;; Tracked objects:
  3936 ;;		On entry : 3F/0
  3937 ;;		On exit  : 3F/E
  3938 ;;		Unchanged: 0/0
  3939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3944 ;;Total ram usage:        0 bytes
  3945 ;; Hardware stack levels used:    1
  3946 ;; Hardware stack levels required when called:    9
  3947 ;; This function calls:
  3948 ;;		Nothing
  3949 ;; This function is called by:
  3950 ;;		_ReadGPSDateTime
  3951 ;; This function uses a non-reentrant model
  3952 ;;
  3953                           
  3954                           	psect	text16
  3955  002A18                     __ptext16:
  3956                           	opt stack 0
  3957  002A18                     _EUSART1_Read:
  3958                           	opt stack 19
  3959  002A18                     l420:
  3960  002A18  010E               	movlb	14	; () banked
  3961  002A1A  ABCD               	btfss	205,5,b	;volatile
  3962  002A1C  D7FD               	goto	l420
  3963                           
  3964                           ; BSR set to: 14
  3965                           ;eusart1.c: 82: }
  3966                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  3967  002A1E  A29D               	btfss	3997,1,c	;volatile
  3968  002A20  D002               	goto	l2864
  3969                           
  3970                           ; BSR set to: 14
  3971                           ;eusart1.c: 86: {
  3972                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  3973  002A22  9E9D               	bcf	3997,7,c	;volatile
  3974                           
  3975                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  3976  002A24  8E9D               	bsf	3997,7,c	;volatile
  3977  002A26                     l2864:
  3978                           
  3979                           ; BSR set to: 14
  3980                           ;eusart1.c: 91: }
  3981                           ;eusart1.c: 93: return RC1REG;
  3982  002A26  5099               	movf	3993,w,c	;volatile
  3983                           
  3984                           ; BSR set to: 14
  3985  002A28  0012               	return		;funcret
  3986  002A2A                     __end_of_EUSART1_Read:
  3987                           	opt stack 0
  3988                           tosu	equ	0xFFF
  3989                           tosh	equ	0xFFE
  3990                           tosl	equ	0xFFD
  3991                           pclath	equ	0xFFA
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           postinc0	equ	0xFEE
  4000                           plusw0	equ	0xFEB
  4001                           wreg	equ	0xFE8
  4002                           indf1	equ	0xFE7
  4003                           postdec1	equ	0xFE5
  4004                           plusw1	equ	0xFE3
  4005                           fsr1h	equ	0xFE2
  4006                           fsr1l	equ	0xFE1
  4007                           indf2	equ	0xFDF
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           plusw2	equ	0xFDB
  4011                           fsr2h	equ	0xFDA
  4012                           fsr2l	equ	0xFD9
  4013                           status	equ	0xFD8
  4014                           
  4015 ;; *************** function _GetDay *****************
  4016 ;; Defined at:
  4017 ;;		line 129 in file "libs/gps.c"
  4018 ;; Parameters:    Size  Location     Type
  4019 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  4020 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4021 ;; Auto vars:     Size  Location     Type
  4022 ;;  y               2   21[BANK0 ] int 
  4023 ;;  m               1   20[BANK0 ] unsigned char 
  4024 ;;  d               1   19[BANK0 ] unsigned char 
  4025 ;; Return value:  Size  Location     Type
  4026 ;;                  1    wreg      char 
  4027 ;; Registers used:
  4028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4029 ;; Tracked objects:
  4030 ;;		On entry : 3F/0
  4031 ;;		On exit  : 3F/0
  4032 ;;		Unchanged: 0/0
  4033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4034 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4035 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4036 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4037 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4038 ;;Total ram usage:        9 bytes
  4039 ;; Hardware stack levels used:    1
  4040 ;; Hardware stack levels required when called:   10
  4041 ;; This function calls:
  4042 ;;		___awdiv
  4043 ;;		___awmod
  4044 ;; This function is called by:
  4045 ;;		_ReadGPS_DATE_TIME
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           	psect	text17
  4050  0018FC                     __ptext17:
  4051                           	opt stack 0
  4052  0018FC                     _GetDay:
  4053                           	opt stack 19
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  4057                           
  4058                           ; BSR set to: 14
  4059                           ;incstack = 0
  4060  0018FC  516E               	movf	GetDay@Date& (0+255),w,b
  4061  0018FE  ECEB  F00D         	call	PL78	;call to abstracted procedure
  4062  001902  D879               	call	PL94	;call to abstracted procedure
  4063  001904  50DF               	movf	indf2,w,c
  4064  001906  0D0A               	mullw	10
  4065  001908  50F3               	movf	prodl,w,c
  4066  00190A  256F               	addwf	??_GetDay& (0+255),w,b
  4067  00190C  0FF0               	addlw	240
  4068  00190E  6F73               	movwf	GetDay@d& (0+255),b
  4069                           
  4070                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  4071  001910  516E               	movf	GetDay@Date& (0+255),w,b
  4072  001912  ECDF  F00D         	call	PL44	;call to abstracted procedure
  4073  001916  D86F               	call	PL94	;call to abstracted procedure
  4074  001918  0E02               	movlw	2
  4075  00191A  D862               	call	PL16	;call to abstracted procedure
  4076  00191C  256F               	addwf	??_GetDay& (0+255),w,b
  4077  00191E  0FF0               	addlw	240
  4078  001920  6F74               	movwf	GetDay@m& (0+255),b
  4079                           
  4080                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + GLOBAL_CENTURY*100;
  4081  001922  51D2               	movf	_GLOBAL_CENTURY& (0+255),w,b
  4082  001924  0D64               	mullw	100
  4083  001926  CFF3 F06F          	movff	prodl,??_GetDay
  4084  00192A  CFF4 F070          	movff	prodh,??_GetDay+1
  4085  00192E  516E               	movf	GetDay@Date& (0+255),w,b
  4086  001930  6ED9               	movwf	fsr2l,c
  4087  001932  6ADA               	clrf	fsr2h,c
  4088  001934  0E04               	movlw	4
  4089  001936  D854               	call	PL16	;call to abstracted procedure
  4090  001938  276F               	addwf	??_GetDay& (0+255),f,b
  4091  00193A  50F4               	movf	prodh,w,c
  4092  00193C  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  4093  00193E  516E               	movf	GetDay@Date& (0+255),w,b
  4094  001940  ECE5  F00D         	call	PL50	;call to abstracted procedure
  4095  001944  276F               	addwf	??_GetDay& (0+255),f,b
  4096  001946  0E00               	movlw	0
  4097  001948  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  4098  00194A  0EF0               	movlw	240
  4099  00194C  256F               	addwf	??_GetDay& (0+255),w,b
  4100  00194E  6F75               	movwf	GetDay@y& (0+255),b
  4101  001950  0EFD               	movlw	253
  4102  001952  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  4103  001954  6F76               	movwf	(GetDay@y+1)& (0+255),b
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  4107                           ;gps.c: 134: y -= m < 3;
  4108  001956  0E02               	movlw	2
  4109  001958  6574               	cpfsgt	GetDay@m& (0+255),b
  4110  00195A  D001               	goto	u2801
  4111  00195C  D002               	goto	u2800
  4112  00195E                     u2801:
  4113  00195E  0E01               	movlw	1
  4114  001960  D001               	goto	u2810
  4115  001962                     u2800:
  4116  001962  0E00               	movlw	0
  4117  001964                     u2810:
  4118  001964  5F75               	subwf	GetDay@y& (0+255),f,b
  4119  001966  0E00               	movlw	0
  4120  001968  5B76               	subwfb	(GetDay@y+1)& (0+255),f,b
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  4124  00196A  5174               	movf	GetDay@m& (0+255),w,b
  4125  00196C  0D02               	mullw	2
  4126  00196E  50F3               	movf	prodl,w,c
  4127  001970  0F3B               	addlw	low (GetDay@t+254)
  4128  001972  6ED9               	movwf	fsr2l,c
  4129  001974  6ADA               	clrf	fsr2h,c
  4130  001976  CFDE F06F          	movff	postinc2,??_GetDay
  4131  00197A  CFDD F070          	movff	postdec2,??_GetDay+1
  4132  00197E  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4133  001980  0E04               	movlw	4
  4134  001982  D833               	call	PL72	;call to abstracted procedure
  4135  001984  ECE4  F011         	call	___awdiv	;wreg free
  4136  001988  C060  F071         	movff	?___awdiv,??_GetDay+2
  4137  00198C  C061  F072         	movff	?___awdiv+1,??_GetDay+3
  4138  001990  0E01               	movlw	1
  4139  001992  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4140  001994  0E90               	movlw	144
  4141  001996  D829               	call	PL72	;call to abstracted procedure
  4142  001998  ECE4  F011         	call	___awdiv	;wreg free
  4143  00199C  5160               	movf	?___awdiv& (0+255),w,b
  4144  00199E  2771               	addwf	(??_GetDay+2)& (0+255),f,b
  4145  0019A0  5161               	movf	(?___awdiv+1)& (0+255),w,b
  4146  0019A2  2372               	addwfc	(??_GetDay+3)& (0+255),f,b
  4147  0019A4  5173               	movf	GetDay@d& (0+255),w,b
  4148  0019A6  2771               	addwf	(??_GetDay+2)& (0+255),f,b
  4149  0019A8  0E00               	movlw	0
  4150  0019AA  2372               	addwfc	(??_GetDay+3)& (0+255),f,b
  4151  0019AC  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4152  0019AE  0E64               	movlw	100
  4153  0019B0  D81C               	call	PL72	;call to abstracted procedure
  4154  0019B2  ECE4  F011         	call	___awdiv	;wreg free
  4155  0019B6  5160               	movf	?___awdiv& (0+255),w,b
  4156  0019B8  5F71               	subwf	(??_GetDay+2)& (0+255),f,b
  4157  0019BA  5161               	movf	(?___awdiv+1)& (0+255),w,b
  4158  0019BC  5B72               	subwfb	(??_GetDay+3)& (0+255),f,b
  4159  0019BE  516F               	movf	??_GetDay& (0+255),w,b
  4160  0019C0  2771               	addwf	(??_GetDay+2)& (0+255),f,b
  4161  0019C2  5170               	movf	(??_GetDay+1)& (0+255),w,b
  4162  0019C4  2372               	addwfc	(??_GetDay+3)& (0+255),f,b
  4163  0019C6  5175               	movf	GetDay@y& (0+255),w,b
  4164  0019C8  2571               	addwf	(??_GetDay+2)& (0+255),w,b
  4165  0019CA  6F68               	movwf	___awmod@dividend& (0+255),b
  4166  0019CC  5176               	movf	(GetDay@y+1)& (0+255),w,b
  4167  0019CE  2172               	addwfc	(??_GetDay+3)& (0+255),w,b
  4168  0019D0  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  4169  0019D2  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  4170  0019D4  0E07               	movlw	7
  4171  0019D6  6F6A               	movwf	___awmod@divisor& (0+255),b
  4172  0019D8  EC20  F012         	call	___awmod	;wreg free
  4173  0019DC  5168               	movf	?___awmod& (0+255),w,b
  4174                           
  4175                           ; BSR set to: 0
  4176  0019DE  0012               	return		;funcret
  4177  0019E0                     __end_of_GetDay:
  4178                           	opt stack 0
  4179  0019E0                     PL16:
  4180                           	opt stack 19
  4181  0019E0  26D9               	addwf	fsr2l,f,c
  4182  0019E2  50DF               	movf	indf2,w,c
  4183  0019E4  0D0A               	mullw	10
  4184  0019E6  50F3               	movf	prodl,w,c
  4185  0019E8  0012               	return	
  4186  0019EA                     __end_ofPL16:
  4187                           	opt stack 0
  4188  0019EA                     PL72:
  4189                           	opt stack 19
  4190  0019EA  6F62               	movwf	___awdiv@divisor& (0+255),b
  4191  0019EC  C075  F060         	movff	GetDay@y,___awdiv@dividend
  4192  0019F0  C076  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  4193  0019F4  0012               	return	
  4194  0019F6                     __end_ofPL72:
  4195                           	opt stack 0
  4196  0019F6                     PL94:
  4197                           	opt stack 19
  4198  0019F6  6F6F               	movwf	??_GetDay& (0+255),b
  4199  0019F8  516E               	movf	GetDay@Date& (0+255),w,b
  4200  0019FA  6ED9               	movwf	fsr2l,c
  4201  0019FC  6ADA               	clrf	fsr2h,c
  4202  0019FE  0012               	return	
  4203  001A00                     __end_ofPL94:
  4204                           	opt stack 0
  4205                           tosu	equ	0xFFF
  4206                           tosh	equ	0xFFE
  4207                           tosl	equ	0xFFD
  4208                           pclath	equ	0xFFA
  4209                           tblptru	equ	0xFF8
  4210                           tblptrh	equ	0xFF7
  4211                           tblptrl	equ	0xFF6
  4212                           tablat	equ	0xFF5
  4213                           prodh	equ	0xFF4
  4214                           prodl	equ	0xFF3
  4215                           intcon	equ	0xFF2
  4216                           postinc0	equ	0xFEE
  4217                           plusw0	equ	0xFEB
  4218                           wreg	equ	0xFE8
  4219                           indf1	equ	0xFE7
  4220                           postdec1	equ	0xFE5
  4221                           plusw1	equ	0xFE3
  4222                           fsr1h	equ	0xFE2
  4223                           fsr1l	equ	0xFE1
  4224                           indf2	equ	0xFDF
  4225                           postinc2	equ	0xFDE
  4226                           postdec2	equ	0xFDD
  4227                           plusw2	equ	0xFDB
  4228                           fsr2h	equ	0xFDA
  4229                           fsr2l	equ	0xFD9
  4230                           status	equ	0xFD8
  4231                           
  4232 ;; *************** function ___awmod *****************
  4233 ;; Defined at:
  4234 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;  dividend        2    8[BANK0 ] int 
  4237 ;;  divisor         2   10[BANK0 ] int 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  sign            1   13[BANK0 ] unsigned char 
  4240 ;;  counter         1   12[BANK0 ] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  2    8[BANK0 ] int 
  4243 ;; Registers used:
  4244 ;;		wreg, status,2, status,0
  4245 ;; Tracked objects:
  4246 ;;		On entry : 3F/0
  4247 ;;		On exit  : 3F/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4250 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4253 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4254 ;;Total ram usage:        6 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    9
  4257 ;; This function calls:
  4258 ;;		Nothing
  4259 ;; This function is called by:
  4260 ;;		_GetDay
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text18
  4265  002440                     __ptext18:
  4266                           	opt stack 0
  4267  002440                     ___awmod:
  4268                           	opt stack 19
  4269                           
  4270                           ; BSR set to: 0
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;incstack = 0
  4274  002440  6B6D               	clrf	___awmod@sign& (0+255),b
  4275                           
  4276                           ; BSR set to: 0
  4277  002442  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4278  002444  D006               	goto	l3096
  4279                           
  4280                           ; BSR set to: 0
  4281  002446  6D68               	negf	___awmod@dividend& (0+255),b
  4282  002448  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  4283  00244A  B0D8               	btfsc	status,0,c
  4284  00244C  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  4285                           
  4286                           ; BSR set to: 0
  4287  00244E  0E01               	movlw	1
  4288  002450  6F6D               	movwf	___awmod@sign& (0+255),b
  4289  002452                     l3096:
  4290                           
  4291                           ; BSR set to: 0
  4292  002452  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4293  002454  D004               	goto	l3100
  4294                           
  4295                           ; BSR set to: 0
  4296  002456  6D6A               	negf	___awmod@divisor& (0+255),b
  4297  002458  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  4298  00245A  B0D8               	btfsc	status,0,c
  4299  00245C  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  4300  00245E                     l3100:
  4301                           
  4302                           ; BSR set to: 0
  4303  00245E  516A               	movf	___awmod@divisor& (0+255),w,b
  4304  002460  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4305  002462  E017               	bz	l3116
  4306                           
  4307                           ; BSR set to: 0
  4308  002464  0E01               	movlw	1
  4309  002466  6F6C               	movwf	___awmod@counter& (0+255),b
  4310  002468  D004               	goto	l3106
  4311  00246A                     l3104:
  4312                           
  4313                           ; BSR set to: 0
  4314  00246A  90D8               	bcf	status,0,c
  4315  00246C  376A               	rlcf	___awmod@divisor& (0+255),f,b
  4316  00246E  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4317  002470  2B6C               	incf	___awmod@counter& (0+255),f,b
  4318  002472                     l3106:
  4319                           
  4320                           ; BSR set to: 0
  4321  002472  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4322  002474  D7FA               	goto	l3104
  4323  002476                     l3108:
  4324                           
  4325                           ; BSR set to: 0
  4326  002476  516A               	movf	___awmod@divisor& (0+255),w,b
  4327  002478  5D68               	subwf	___awmod@dividend& (0+255),w,b
  4328  00247A  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  4329  00247C  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4330  00247E  E304               	bnc	l3112
  4331                           
  4332                           ; BSR set to: 0
  4333  002480  516A               	movf	___awmod@divisor& (0+255),w,b
  4334  002482  5F68               	subwf	___awmod@dividend& (0+255),f,b
  4335  002484  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  4336  002486  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4337  002488                     l3112:
  4338                           
  4339                           ; BSR set to: 0
  4340  002488  90D8               	bcf	status,0,c
  4341  00248A  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4342  00248C  336A               	rrcf	___awmod@divisor& (0+255),f,b
  4343                           
  4344                           ; BSR set to: 0
  4345  00248E  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  4346  002490  D7F2               	goto	l3108
  4347  002492                     l3116:
  4348                           
  4349                           ; BSR set to: 0
  4350  002492  516D               	movf	___awmod@sign& (0+255),w,b
  4351  002494  E004               	bz	l3120
  4352                           
  4353                           ; BSR set to: 0
  4354  002496  6D68               	negf	___awmod@dividend& (0+255),b
  4355  002498  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  4356  00249A  B0D8               	btfsc	status,0,c
  4357  00249C  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  4358  00249E                     l3120:
  4359                           
  4360                           ; BSR set to: 0
  4361  00249E  C068  F068         	movff	___awmod@dividend,?___awmod
  4362  0024A2  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  4363                           
  4364                           ; BSR set to: 0
  4365  0024A6  0012               	return		;funcret
  4366  0024A8                     __end_of___awmod:
  4367                           	opt stack 0
  4368                           tosu	equ	0xFFF
  4369                           tosh	equ	0xFFE
  4370                           tosl	equ	0xFFD
  4371                           pclath	equ	0xFFA
  4372                           tblptru	equ	0xFF8
  4373                           tblptrh	equ	0xFF7
  4374                           tblptrl	equ	0xFF6
  4375                           tablat	equ	0xFF5
  4376                           prodh	equ	0xFF4
  4377                           prodl	equ	0xFF3
  4378                           intcon	equ	0xFF2
  4379                           postinc0	equ	0xFEE
  4380                           plusw0	equ	0xFEB
  4381                           wreg	equ	0xFE8
  4382                           indf1	equ	0xFE7
  4383                           postdec1	equ	0xFE5
  4384                           plusw1	equ	0xFE3
  4385                           fsr1h	equ	0xFE2
  4386                           fsr1l	equ	0xFE1
  4387                           indf2	equ	0xFDF
  4388                           postinc2	equ	0xFDE
  4389                           postdec2	equ	0xFDD
  4390                           plusw2	equ	0xFDB
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _EUSART1_Initialize *****************
  4396 ;; Defined at:
  4397 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;		None
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;		None
  4402 ;; Return value:  Size  Location     Type
  4403 ;;                  1    wreg      void 
  4404 ;; Registers used:
  4405 ;;		wreg, status,2
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4415 ;;Total ram usage:        0 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    9
  4418 ;; This function calls:
  4419 ;;		Nothing
  4420 ;; This function is called by:
  4421 ;;		_SYSTEM_Initialize
  4422 ;;		_ReadGPS_DATE_TIME
  4423 ;; This function uses a non-reentrant model
  4424 ;;
  4425                           
  4426                           	psect	text19
  4427  0029F0                     __ptext19:
  4428                           	opt stack 0
  4429  0029F0                     _EUSART1_Initialize:
  4430                           	opt stack 20
  4431                           
  4432                           ;eusart1.c: 60: BAUD1CON = 0x08;
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;incstack = 0
  4436  0029F0  0E08               	movlw	8
  4437  0029F2  6E9F               	movwf	3999,c	;volatile
  4438                           
  4439                           ;eusart1.c: 63: RC1STA = 0x90;
  4440  0029F4  0E90               	movlw	144
  4441  0029F6  6E9D               	movwf	3997,c	;volatile
  4442                           
  4443                           ;eusart1.c: 66: TX1STA = 0x84;
  4444  0029F8  0E84               	movlw	132
  4445  0029FA  6E9E               	movwf	3998,c	;volatile
  4446                           
  4447                           ;eusart1.c: 69: SP1BRGL = 0x67;
  4448  0029FC  0E67               	movlw	103
  4449  0029FE  6E9B               	movwf	3995,c	;volatile
  4450                           
  4451                           ;eusart1.c: 72: SP1BRGH = 0x00;
  4452  002A00  6A9C               	clrf	3996,c	;volatile
  4453  002A02  0012               	return		;funcret
  4454  002A04                     __end_of_EUSART1_Initialize:
  4455                           	opt stack 0
  4456                           tosu	equ	0xFFF
  4457                           tosh	equ	0xFFE
  4458                           tosl	equ	0xFFD
  4459                           pclath	equ	0xFFA
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           postinc0	equ	0xFEE
  4468                           plusw0	equ	0xFEB
  4469                           wreg	equ	0xFE8
  4470                           indf1	equ	0xFE7
  4471                           postdec1	equ	0xFE5
  4472                           plusw1	equ	0xFE3
  4473                           fsr1h	equ	0xFE2
  4474                           fsr1l	equ	0xFE1
  4475                           indf2	equ	0xFDF
  4476                           postinc2	equ	0xFDE
  4477                           postdec2	equ	0xFDD
  4478                           plusw2	equ	0xFDB
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _AdjustDayLightSaving *****************
  4484 ;; Defined at:
  4485 ;;		line 93 in file "libs/funcs.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;  Present         2   56[BANK0 ] unsigned short 
  4490 ;;  End             2   54[BANK0 ] unsigned short 
  4491 ;;  Start           2   52[BANK0 ] unsigned short 
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  4494 ;; Registers used:
  4495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4496 ;; Tracked objects:
  4497 ;;		On entry : 3F/0
  4498 ;;		On exit  : 3F/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4501 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4502 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4504 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4505 ;;Total ram usage:       17 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; Hardware stack levels required when called:   13
  4508 ;; This function calls:
  4509 ;;		_DecreaseByADay
  4510 ;;		_IncreaseByADay
  4511 ;;		___wmul
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;;		_ReadGPS_DATE_TIME
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           	psect	text20
  4519  0017D8                     __ptext20:
  4520                           	opt stack 0
  4521  0017D8                     _AdjustDayLightSaving:
  4522                           	opt stack 16
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;funcs.c: 94: UINT16 Start, End, Present;
  4526                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  4527                           
  4528                           ;incstack = 0
  4529  0017D8  C0EF  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  4530  0017DC  C0F0  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  4531  0017E0  D889               	call	PL110	;call to abstracted procedure
  4532  0017E2  ECB7  F014         	call	___wmul	;wreg free
  4533  0017E6  51ED               	movf	_DAY_LIGHT_START& (0+255),w,b
  4534  0017E8  2560               	addwf	?___wmul& (0+255),w,b
  4535  0017EA  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  4536  0017EC  51EE               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  4537  0017EE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4538  0017F0  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  4539                           
  4540                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  4541  0017F2  C0EB  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  4542  0017F6  C0EC  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  4543  0017FA  D87C               	call	PL110	;call to abstracted procedure
  4544  0017FC  ECB7  F014         	call	___wmul	;wreg free
  4545  001800  51E9               	movf	_DAY_LIGHT_END& (0+255),w,b
  4546  001802  2560               	addwf	?___wmul& (0+255),w,b
  4547  001804  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  4548  001806  51EA               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  4549  001808  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4550  00180A  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  4551                           
  4552                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  4553  00180C  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  4554  001810  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  4555  001814  D86F               	call	PL110	;call to abstracted procedure
  4556  001816  ECB7  F014         	call	___wmul	;wreg free
  4557  00181A  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  4558  00181C  2560               	addwf	?___wmul& (0+255),w,b
  4559  00181E  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  4560  001820  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  4561  001822  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4562  001824  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;funcs.c: 98: if (Start > End) {
  4566  001826  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  4567  001828  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  4568  00182A  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  4569  00182C  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  4570  00182E  E20F               	bc	l3562
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  4574  001830  D85C               	call	PL104	;call to abstracted procedure
  4575  001832  E205               	bc	l3560
  4576  001834                     l3558:
  4577                           
  4578                           ; BSR set to: 0
  4579  001834  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  4580  001836  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  4581  001838  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  4582  00183A  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  4583  00183C  E30B               	bnc	l868
  4584  00183E                     l3560:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;funcs.c: 100: dt.SECOND += 3600;
  4588  00183E  0E10               	movlw	16
  4589  001840  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  4590  001842  0E0E               	movlw	14
  4591  001844  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  4592  001846  0E00               	movlw	0
  4593  001848  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  4594  00184A  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  4595  00184C  D003               	goto	l868
  4596  00184E                     l3562:
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  4600  00184E  D84D               	call	PL104	;call to abstracted procedure
  4601  001850  E301               	bnc	l868
  4602  001852  D7F0               	goto	l3558
  4603  001854                     l868:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;funcs.c: 104: }
  4607                           ;funcs.c: 105: if (dt.SECOND < 0) {
  4608  001854  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  4609  001856  D01A               	goto	l3572
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;funcs.c: 106: dt.SECOND += 86400;
  4613  001858  0E80               	movlw	128
  4614  00185A  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  4615  00185C  0E51               	movlw	81
  4616  00185E  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  4617  001860  0E01               	movlw	1
  4618  001862  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  4619  001864  0E00               	movlw	0
  4620  001866  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  4624  001868  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4625  00186C  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  4626  001870  0E0A               	movlw	10
  4627  001872                     u3171:
  4628  001872  CFDB FFEB          	movff	plusw2,plusw0
  4629  001876  06E8               	decf	wreg,f,c
  4630  001878  E2FC               	bc	u3171
  4631  00187A  ECF0  F00D         	call	_DecreaseByADay	;wreg free
  4632  00187E  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4633  001882  0E0A               	movlw	10
  4634  001884                     u3181:
  4635  001884  CFEB FFDB          	movff	plusw0,plusw2
  4636  001888  06E8               	decf	wreg,f,c
  4637  00188A  E2FC               	bc	u3181
  4638  00188C                     l3572:
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;funcs.c: 108: }
  4642                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  4643  00188C  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  4644  00188E  D023               	goto	l3578
  4645  001890  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  4646  001892  E107               	bnz	u3190
  4647  001894  0E81               	movlw	129
  4648  001896  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  4649  001898  0E51               	movlw	81
  4650  00189A  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  4651  00189C  0E01               	movlw	1
  4652  00189E  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  4653  0018A0  E31A               	bnc	l3578
  4654  0018A2                     u3190:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;funcs.c: 110: dt.SECOND -= 86400;
  4658  0018A2  0E80               	movlw	128
  4659  0018A4  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  4660  0018A6  0EAE               	movlw	174
  4661  0018A8  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  4662  0018AA  0EFE               	movlw	254
  4663  0018AC  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  4664  0018AE  0EFF               	movlw	255
  4665  0018B0  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  4666                           
  4667                           ; BSR set to: 0
  4668                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  4669  0018B2  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4670  0018B6  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  4671  0018BA  0E0A               	movlw	10
  4672  0018BC                     u3201:
  4673  0018BC  CFDB FFEB          	movff	plusw2,plusw0
  4674  0018C0  06E8               	decf	wreg,f,c
  4675  0018C2  E2FC               	bc	u3201
  4676  0018C4  ECB6  F00F         	call	_IncreaseByADay	;wreg free
  4677  0018C8  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4678  0018CC  0E0A               	movlw	10
  4679  0018CE                     u3211:
  4680  0018CE  CFEB FFDB          	movff	plusw0,plusw2
  4681  0018D2  06E8               	decf	wreg,f,c
  4682  0018D4  E2FC               	bc	u3211
  4683  0018D6                     l3578:
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;funcs.c: 112: }
  4687                           ;funcs.c: 113: return dt;
  4688  0018D6  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4689  0018DA  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  4690  0018DE  0E0A               	movlw	10
  4691  0018E0                     u3221:
  4692  0018E0  CFDB FFEB          	movff	plusw2,plusw0
  4693  0018E4  06E8               	decf	wreg,f,c
  4694  0018E6  E2FC               	bc	u3221
  4695                           
  4696                           ; BSR set to: 0
  4697  0018E8  0012               	return		;funcret
  4698  0018EA                     __end_of_AdjustDayLightSaving:
  4699                           	opt stack 0
  4700  0018EA                     PL104:
  4701                           	opt stack 16
  4702  0018EA  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  4703  0018EC  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  4704  0018EE  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  4705  0018F0  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  4706  0018F2  0012               	return	
  4707  0018F4                     __end_ofPL104:
  4708                           	opt stack 0
  4709  0018F4                     PL110:
  4710                           	opt stack 16
  4711  0018F4  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  4712  0018F6  0E64               	movlw	100
  4713  0018F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4714  0018FA  0C64               	retlw	100
  4715  0018FC                     __end_ofPL110:
  4716                           	opt stack 0
  4717                           tosu	equ	0xFFF
  4718                           tosh	equ	0xFFE
  4719                           tosl	equ	0xFFD
  4720                           pclath	equ	0xFFA
  4721                           tblptru	equ	0xFF8
  4722                           tblptrh	equ	0xFF7
  4723                           tblptrl	equ	0xFF6
  4724                           tablat	equ	0xFF5
  4725                           prodh	equ	0xFF4
  4726                           prodl	equ	0xFF3
  4727                           intcon	equ	0xFF2
  4728                           postinc0	equ	0xFEE
  4729                           plusw0	equ	0xFEB
  4730                           wreg	equ	0xFE8
  4731                           indf1	equ	0xFE7
  4732                           postdec1	equ	0xFE5
  4733                           plusw1	equ	0xFE3
  4734                           fsr1h	equ	0xFE2
  4735                           fsr1l	equ	0xFE1
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           plusw2	equ	0xFDB
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _IncreaseByADay *****************
  4745 ;; Defined at:
  4746 ;;		line 12 in file "libs/funcs.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;  MonthDays       1   40[BANK0 ] char 
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  4753 ;; Registers used:
  4754 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4755 ;; Tracked objects:
  4756 ;;		On entry : 3F/0
  4757 ;;		On exit  : 3F/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4760 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4762 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4763 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4764 ;;Total ram usage:       14 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:   12
  4767 ;; This function calls:
  4768 ;;		_IncreaseByAMonth
  4769 ;;		___lwmod
  4770 ;; This function is called by:
  4771 ;;		_AdjustDayLightSaving
  4772 ;;		_ReadGPS_DATE_TIME
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text21
  4777  001F6C                     __ptext21:
  4778                           	opt stack 0
  4779  001F6C                     _IncreaseByADay:
  4780                           	opt stack 17
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;funcs.c: 13: dt.DATE.Day++;
  4784                           
  4785                           ; BSR set to: 0
  4786                           ;incstack = 0
  4787  001F6C  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  4788  001F6E  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  4792  001F70  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  4793  001F72  0B7F               	andlw	127
  4794  001F74  06E8               	decf	wreg,f,c
  4795  001F76  E104               	bnz	l2964
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  4799  001F78  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  4800  001F7A  0B01               	andlw	-255
  4801  001F7C  0980               	iorlw	128
  4802  001F7E  D00A               	goto	L5
  4803  001F80                     l2964:
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;funcs.c: 16: else
  4807                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  4808  001F80  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  4809  001F82  0B7F               	andlw	127
  4810  001F84  6F86               	movwf	??_IncreaseByADay& (0+255),b
  4811  001F86  90D8               	bcf	status,0,c
  4812  001F88  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  4813  001F8A  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  4814  001F8C  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  4815  001F8E  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  4816  001F90  0B01               	andlw	-255
  4817  001F92  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  4818  001F94                     L5:
  4819  001F94  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  4823  001F96  5181               	movf	(IncreaseByADay@dt+6)& (0+255),w,b
  4824  001F98  EC54  F00E         	call	PL56	;call to abstracted procedure
  4825  001F9C  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  4829  001F9E  0E02               	movlw	2
  4830  001FA0  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  4831  001FA2  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  4832  001FA4  E107               	bnz	l2974
  4833                           
  4834                           ; BSR set to: 0
  4835  001FA6  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  4836  001FAA  0E03               	movlw	3
  4837  001FAC  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  4838  001FAE  E102               	bnz	l2974
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;funcs.c: 20: MonthDays = 29;
  4842  001FB0  0E1D               	movlw	29
  4843  001FB2  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4844  001FB4                     l2974:
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  4848  001FB4  0E02               	movlw	2
  4849  001FB6  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  4850  001FB8  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  4851  001FBA  E10A               	bnz	l2980
  4852                           
  4853                           ; BSR set to: 0
  4854  001FBC  D840               	call	PL92	;call to abstracted procedure
  4855  001FBE  EC86  F014         	call	PL98	;call to abstracted procedure
  4856  001FC2  EC15  F014         	call	___lwmod	;wreg free
  4857  001FC6  5160               	movf	?___lwmod& (0+255),w,b
  4858  001FC8  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  4859  001FCA  E102               	bnz	l2980
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;funcs.c: 22: MonthDays = 28;
  4863  001FCC  0E1C               	movlw	28
  4864  001FCE  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4865  001FD0                     l2980:
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  4869  001FD0  0E02               	movlw	2
  4870  001FD2  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  4871  001FD4  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  4872  001FD6  E10A               	bnz	l2986
  4873                           
  4874                           ; BSR set to: 0
  4875  001FD8  D832               	call	PL92	;call to abstracted procedure
  4876  001FDA  EC60  F00E         	call	PL106	;call to abstracted procedure
  4877  001FDE  EC15  F014         	call	___lwmod	;wreg free
  4878  001FE2  5160               	movf	?___lwmod& (0+255),w,b
  4879  001FE4  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  4880  001FE6  E102               	bnz	l2986
  4881                           
  4882                           ; BSR set to: 0
  4883                           ;funcs.c: 24: MonthDays = 29;
  4884  001FE8  0E1D               	movlw	29
  4885  001FEA  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4886  001FEC                     l2986:
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  4890  001FEC  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  4891  001FF0  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  4892  001FF2  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  4893  001FF4  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  4894  001FF6  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  4895  001FF8  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  4896  001FFA  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  4897  001FFC  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  4898  001FFE  E215               	bc	l2992
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;funcs.c: 26: dt.DATE.Day = 1;
  4902  002000  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  4903  002002  0E01               	movlw	1
  4904  002004  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  4908  002006  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  4909  00200A  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  4910  00200E  0E0A               	movlw	10
  4911  002010                     u2411:
  4912  002010  CFDB FFEB          	movff	plusw2,plusw0
  4913  002014  06E8               	decf	wreg,f,c
  4914  002016  E2FC               	bc	u2411
  4915  002018  EC8B  F013         	call	_IncreaseByAMonth	;wreg free
  4916  00201C  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  4917  002020  0E0A               	movlw	10
  4918  002022                     u2421:
  4919  002022  CFEB FFDB          	movff	plusw0,plusw2
  4920  002026  06E8               	decf	wreg,f,c
  4921  002028  E2FC               	bc	u2421
  4922  00202A                     l2992:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;funcs.c: 28: }
  4926                           ;funcs.c: 29: return dt;
  4927  00202A  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  4928  00202E  EE00  F07B         	lfsr	0,?_IncreaseByADay
  4929  002032  0E0A               	movlw	10
  4930  002034                     u2431:
  4931  002034  CFDB FFEB          	movff	plusw2,plusw0
  4932  002038  06E8               	decf	wreg,f,c
  4933  00203A  E2FC               	bc	u2431
  4934                           
  4935                           ; BSR set to: 0
  4936  00203C  0012               	return		;funcret
  4937  00203E                     __end_of_IncreaseByADay:
  4938                           	opt stack 0
  4939  00203E                     PL92:
  4940                           	opt stack 17
  4941  00203E  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  4942  002042  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  4943  002046  0012               	return	
  4944  002048                     __end_ofPL92:
  4945                           	opt stack 0
  4946                           tosu	equ	0xFFF
  4947                           tosh	equ	0xFFE
  4948                           tosl	equ	0xFFD
  4949                           pclath	equ	0xFFA
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           postinc0	equ	0xFEE
  4958                           plusw0	equ	0xFEB
  4959                           wreg	equ	0xFE8
  4960                           indf1	equ	0xFE7
  4961                           postdec1	equ	0xFE5
  4962                           plusw1	equ	0xFE3
  4963                           fsr1h	equ	0xFE2
  4964                           fsr1l	equ	0xFE1
  4965                           indf2	equ	0xFDF
  4966                           postinc2	equ	0xFDE
  4967                           postdec2	equ	0xFDD
  4968                           plusw2	equ	0xFDB
  4969                           fsr2h	equ	0xFDA
  4970                           fsr2l	equ	0xFD9
  4971                           status	equ	0xFD8
  4972                           
  4973 ;; *************** function _IncreaseByAMonth *****************
  4974 ;; Defined at:
  4975 ;;		line 32 in file "libs/funcs.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  4982 ;; Registers used:
  4983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 3F/0
  4986 ;;		On exit  : 3F/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4989 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4992 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4993 ;;Total ram usage:       11 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:   11
  4996 ;; This function calls:
  4997 ;;		_IncreaseByAYear
  4998 ;; This function is called by:
  4999 ;;		_IncreaseByADay
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           	psect	text22
  5004  002716                     __ptext22:
  5005                           	opt stack 0
  5006  002716                     _IncreaseByAMonth:
  5007                           	opt stack 17
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;funcs.c: 33: dt.DATE.Month++;
  5011                           
  5012                           ; BSR set to: 0
  5013                           ;incstack = 0
  5014  002716  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  5015  002718  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  5019  00271A  0E0D               	movlw	13
  5020  00271C  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  5021  00271E  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  5022  002720  E115               	bnz	l2808
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;funcs.c: 35: dt.DATE.Month = 1;
  5026  002722  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  5027  002724  0E01               	movlw	1
  5028  002726  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  5032  002728  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  5033  00272C  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  5034  002730  0E0A               	movlw	10
  5035  002732                     u2081:
  5036  002732  CFDB FFEB          	movff	plusw2,plusw0
  5037  002736  06E8               	decf	wreg,f,c
  5038  002738  E2FC               	bc	u2081
  5039  00273A  EC6F  F014         	call	_IncreaseByAYear	;wreg free
  5040  00273E  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  5041  002742  0E0A               	movlw	10
  5042  002744                     u2091:
  5043  002744  CFEB FFDB          	movff	plusw0,plusw2
  5044  002748  06E8               	decf	wreg,f,c
  5045  00274A  E2FC               	bc	u2091
  5046  00274C                     l2808:
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;funcs.c: 37: }
  5050                           ;funcs.c: 38: return dt;
  5051  00274C  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  5052  002750  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  5053  002754  0E0A               	movlw	10
  5054  002756                     u2101:
  5055  002756  CFDB FFEB          	movff	plusw2,plusw0
  5056  00275A  06E8               	decf	wreg,f,c
  5057  00275C  E2FC               	bc	u2101
  5058                           
  5059                           ; BSR set to: 0
  5060  00275E  0012               	return		;funcret
  5061  002760                     __end_of_IncreaseByAMonth:
  5062                           	opt stack 0
  5063                           tosu	equ	0xFFF
  5064                           tosh	equ	0xFFE
  5065                           tosl	equ	0xFFD
  5066                           pclath	equ	0xFFA
  5067                           tblptru	equ	0xFF8
  5068                           tblptrh	equ	0xFF7
  5069                           tblptrl	equ	0xFF6
  5070                           tablat	equ	0xFF5
  5071                           prodh	equ	0xFF4
  5072                           prodl	equ	0xFF3
  5073                           intcon	equ	0xFF2
  5074                           postinc0	equ	0xFEE
  5075                           plusw0	equ	0xFEB
  5076                           wreg	equ	0xFE8
  5077                           indf1	equ	0xFE7
  5078                           postdec1	equ	0xFE5
  5079                           plusw1	equ	0xFE3
  5080                           fsr1h	equ	0xFE2
  5081                           fsr1l	equ	0xFE1
  5082                           indf2	equ	0xFDF
  5083                           postinc2	equ	0xFDE
  5084                           postdec2	equ	0xFDD
  5085                           plusw2	equ	0xFDB
  5086                           fsr2h	equ	0xFDA
  5087                           fsr2l	equ	0xFD9
  5088                           status	equ	0xFD8
  5089                           
  5090 ;; *************** function _IncreaseByAYear *****************
  5091 ;; Defined at:
  5092 ;;		line 41 in file "libs/funcs.c"
  5093 ;; Parameters:    Size  Location     Type
  5094 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  5095 ;; Auto vars:     Size  Location     Type
  5096 ;;		None
  5097 ;; Return value:  Size  Location     Type
  5098 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  5099 ;; Registers used:
  5100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5101 ;; Tracked objects:
  5102 ;;		On entry : 3F/0
  5103 ;;		On exit  : 3F/0
  5104 ;;		Unchanged: 0/0
  5105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5106 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5109 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5110 ;;Total ram usage:       11 bytes
  5111 ;; Hardware stack levels used:    1
  5112 ;; Hardware stack levels required when called:   10
  5113 ;; This function calls:
  5114 ;;		___lwmod
  5115 ;; This function is called by:
  5116 ;;		_IncreaseByAMonth
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	text23
  5121  0028DE                     __ptext23:
  5122                           	opt stack 0
  5123  0028DE                     _IncreaseByAYear:
  5124                           	opt stack 17
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;funcs.c: 42: dt.YEAR++;
  5128                           
  5129                           ; BSR set to: 0
  5130                           ;incstack = 0
  5131  0028DE  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  5132  0028E0  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  5136  0028E2  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  5137  0028E6  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  5138  0028EA  D810               	call	PL98	;call to abstracted procedure
  5139  0028EC  EC15  F014         	call	___lwmod	;wreg free
  5140  0028F0  5160               	movf	?___lwmod& (0+255),w,b
  5141  0028F2  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5142  0028F4  E101               	bnz	l2738
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;funcs.c: 44: GLOBAL_CENTURY++;
  5146  0028F6  2BD2               	incf	_GLOBAL_CENTURY& (0+255),f,b
  5147  0028F8                     l2738:
  5148                           
  5149                           ; BSR set to: 0
  5150                           ;funcs.c: 45: return dt;
  5151  0028F8  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  5152  0028FC  EE00  F065         	lfsr	0,?_IncreaseByAYear
  5153  002900  0E0A               	movlw	10
  5154  002902                     u1891:
  5155  002902  CFDB FFEB          	movff	plusw2,plusw0
  5156  002906  06E8               	decf	wreg,f,c
  5157  002908  E2FC               	bc	u1891
  5158                           
  5159                           ; BSR set to: 0
  5160  00290A  0012               	return		;funcret
  5161  00290C                     __end_of_IncreaseByAYear:
  5162                           	opt stack 0
  5163  00290C                     PL98:
  5164                           	opt stack 17
  5165  00290C  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  5166  00290E  0E64               	movlw	100
  5167  002910  6F62               	movwf	___lwmod@divisor& (0+255),b
  5168  002912  0C64               	retlw	100
  5169  002914                     __end_ofPL98:
  5170                           	opt stack 0
  5171                           tosu	equ	0xFFF
  5172                           tosh	equ	0xFFE
  5173                           tosl	equ	0xFFD
  5174                           pclath	equ	0xFFA
  5175                           tblptru	equ	0xFF8
  5176                           tblptrh	equ	0xFF7
  5177                           tblptrl	equ	0xFF6
  5178                           tablat	equ	0xFF5
  5179                           prodh	equ	0xFF4
  5180                           prodl	equ	0xFF3
  5181                           intcon	equ	0xFF2
  5182                           postinc0	equ	0xFEE
  5183                           plusw0	equ	0xFEB
  5184                           wreg	equ	0xFE8
  5185                           indf1	equ	0xFE7
  5186                           postdec1	equ	0xFE5
  5187                           plusw1	equ	0xFE3
  5188                           fsr1h	equ	0xFE2
  5189                           fsr1l	equ	0xFE1
  5190                           indf2	equ	0xFDF
  5191                           postinc2	equ	0xFDE
  5192                           postdec2	equ	0xFDD
  5193                           plusw2	equ	0xFDB
  5194                           fsr2h	equ	0xFDA
  5195                           fsr2l	equ	0xFD9
  5196                           status	equ	0xFD8
  5197                           
  5198 ;; *************** function _DecreaseByADay *****************
  5199 ;; Defined at:
  5200 ;;		line 57 in file "libs/funcs.c"
  5201 ;; Parameters:    Size  Location     Type
  5202 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  5203 ;; Auto vars:     Size  Location     Type
  5204 ;;  MonthDays       1   39[BANK0 ] char 
  5205 ;; Return value:  Size  Location     Type
  5206 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  5207 ;; Registers used:
  5208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5209 ;; Tracked objects:
  5210 ;;		On entry : 3F/0
  5211 ;;		On exit  : 3F/0
  5212 ;;		Unchanged: 0/0
  5213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5214 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5217 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5218 ;;Total ram usage:       13 bytes
  5219 ;; Hardware stack levels used:    1
  5220 ;; Hardware stack levels required when called:   12
  5221 ;; This function calls:
  5222 ;;		_DecreaseByAMonth
  5223 ;;		___lwmod
  5224 ;; This function is called by:
  5225 ;;		_AdjustDayLightSaving
  5226 ;;		_ReadGPS_DATE_TIME
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text24
  5231  001BE0                     __ptext24:
  5232                           	opt stack 0
  5233  001BE0                     _DecreaseByADay:
  5234                           	opt stack 17
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;incstack = 0
  5241  001BE0  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  5242  001BE2  0B7F               	andlw	127
  5243  001BE4  0A40               	xorlw	64
  5244  001BE6  E104               	bnz	l3000
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  5248  001BE8  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  5249  001BEA  0B01               	andlw	-255
  5250  001BEC  0902               	iorlw	2
  5251  001BEE  D00A               	goto	L6
  5252  001BF0                     l3000:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;funcs.c: 60: else
  5256                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  5257  001BF0  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  5258  001BF2  0B7F               	andlw	127
  5259  001BF4  6F86               	movwf	??_DecreaseByADay& (0+255),b
  5260  001BF6  90D8               	bcf	status,0,c
  5261  001BF8  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  5262  001BFA  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  5263  001BFC  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  5264  001BFE  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  5265  001C00  0B01               	andlw	-255
  5266  001C02  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  5267  001C04                     L6:
  5268  001C04  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  5272  001C06  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  5273  001C08  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  5274  001C0A  E141               	bnz	l3024
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  5278  001C0C  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  5279  001C10  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  5280  001C14  0E0A               	movlw	10
  5281  001C16                     u2461:
  5282  001C16  CFDB FFEB          	movff	plusw2,plusw0
  5283  001C1A  06E8               	decf	wreg,f,c
  5284  001C1C  E2FC               	bc	u2461
  5285  001C1E  EC65  F013         	call	_DecreaseByAMonth	;wreg free
  5286  001C22  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  5287  001C26  0E0A               	movlw	10
  5288  001C28                     u2471:
  5289  001C28  CFEB FFDB          	movff	plusw0,plusw2
  5290  001C2C  06E8               	decf	wreg,f,c
  5291  001C2E  E2FC               	bc	u2471
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  5295  001C30  5181               	movf	(DecreaseByADay@dt+6)& (0+255),w,b
  5296  001C32  D83A               	call	PL56	;call to abstracted procedure
  5297  001C34  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5298                           
  5299                           ; BSR set to: 0
  5300                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  5301  001C36  0E02               	movlw	2
  5302  001C38  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  5303  001C3A  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  5304  001C3C  E107               	bnz	l3012
  5305                           
  5306                           ; BSR set to: 0
  5307  001C3E  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  5308  001C42  0E03               	movlw	3
  5309  001C44  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  5310  001C46  E102               	bnz	l3012
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;funcs.c: 66: MonthDays = 29;
  5314  001C48  0E1D               	movlw	29
  5315  001C4A  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5316  001C4C                     l3012:
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  5320  001C4C  0E02               	movlw	2
  5321  001C4E  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  5322  001C50  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  5323  001C52  E10A               	bnz	l3018
  5324                           
  5325                           ; BSR set to: 0
  5326  001C54  D830               	call	PL90	;call to abstracted procedure
  5327  001C56  EC86  F014         	call	PL98	;call to abstracted procedure
  5328  001C5A  EC15  F014         	call	___lwmod	;wreg free
  5329  001C5E  5160               	movf	?___lwmod& (0+255),w,b
  5330  001C60  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5331  001C62  E102               	bnz	l3018
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;funcs.c: 68: MonthDays = 28;
  5335  001C64  0E1C               	movlw	28
  5336  001C66  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5337  001C68                     l3018:
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  5341  001C68  0E02               	movlw	2
  5342  001C6A  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  5343  001C6C  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  5344  001C6E  E109               	bnz	l850
  5345                           
  5346                           ; BSR set to: 0
  5347  001C70  D822               	call	PL90	;call to abstracted procedure
  5348  001C72  D826               	call	PL106	;call to abstracted procedure
  5349  001C74  EC15  F014         	call	___lwmod	;wreg free
  5350  001C78  5160               	movf	?___lwmod& (0+255),w,b
  5351  001C7A  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5352  001C7C  E102               	bnz	l850
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;funcs.c: 70: MonthDays = 29;
  5356  001C7E  0E1D               	movlw	29
  5357  001C80  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5358  001C82                     l850:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  5362  001C82  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  5363  001C84  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  5364  001C86  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  5365  001C88  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  5366  001C8A  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  5367                           
  5368                           ;funcs.c: 72: } else
  5369  001C8C  D003               	goto	l3026
  5370  001C8E                     l3024:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;funcs.c: 73: dt.DATE.Day--;
  5374  001C8E  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  5375  001C90  A0D8               	btfss	status,0,c
  5376  001C92  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  5377  001C94                     l3026:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;funcs.c: 74: return dt;
  5381  001C94  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  5382  001C98  EE00  F07B         	lfsr	0,?_DecreaseByADay
  5383  001C9C  0E0A               	movlw	10
  5384  001C9E                     u2541:
  5385  001C9E  CFDB FFEB          	movff	plusw2,plusw0
  5386  001CA2  06E8               	decf	wreg,f,c
  5387  001CA4  E2FC               	bc	u2541
  5388                           
  5389                           ; BSR set to: 0
  5390  001CA6  0012               	return		;funcret
  5391  001CA8                     __end_of_DecreaseByADay:
  5392                           	opt stack 0
  5393  001CA8                     PL56:
  5394                           	opt stack 17
  5395  001CA8  0D02               	mullw	2
  5396  001CAA  50F3               	movf	prodl,w,c
  5397  001CAC  0FAA               	addlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+254)
  5398  001CAE  6ED9               	movwf	fsr2l,c
  5399  001CB0  6ADA               	clrf	fsr2h,c
  5400  001CB2  50DF               	movf	indf2,w,c
  5401  001CB4  0012               	return	
  5402  001CB6                     __end_ofPL56:
  5403                           	opt stack 0
  5404  001CB6                     PL90:
  5405                           	opt stack 17
  5406  001CB6  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  5407  001CBA  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  5408  001CBE  0012               	return	
  5409  001CC0                     __end_ofPL90:
  5410                           	opt stack 0
  5411  001CC0                     PL106:
  5412                           	opt stack 17
  5413  001CC0  0E01               	movlw	1
  5414  001CC2  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  5415  001CC4  0E90               	movlw	144
  5416  001CC6  6F62               	movwf	___lwmod@divisor& (0+255),b
  5417  001CC8  0C90               	retlw	144
  5418  001CCA                     __end_ofPL106:
  5419                           	opt stack 0
  5420                           tosu	equ	0xFFF
  5421                           tosh	equ	0xFFE
  5422                           tosl	equ	0xFFD
  5423                           pclath	equ	0xFFA
  5424                           tblptru	equ	0xFF8
  5425                           tblptrh	equ	0xFF7
  5426                           tblptrl	equ	0xFF6
  5427                           tablat	equ	0xFF5
  5428                           prodh	equ	0xFF4
  5429                           prodl	equ	0xFF3
  5430                           intcon	equ	0xFF2
  5431                           postinc0	equ	0xFEE
  5432                           plusw0	equ	0xFEB
  5433                           wreg	equ	0xFE8
  5434                           indf1	equ	0xFE7
  5435                           postdec1	equ	0xFE5
  5436                           plusw1	equ	0xFE3
  5437                           fsr1h	equ	0xFE2
  5438                           fsr1l	equ	0xFE1
  5439                           indf2	equ	0xFDF
  5440                           postinc2	equ	0xFDE
  5441                           postdec2	equ	0xFDD
  5442                           plusw2	equ	0xFDB
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _DecreaseByAMonth *****************
  5448 ;; Defined at:
  5449 ;;		line 77 in file "libs/funcs.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;		None
  5454 ;; Return value:  Size  Location     Type
  5455 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  5456 ;; Registers used:
  5457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 3F/0
  5460 ;;		On exit  : 3F/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5463 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5466 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5467 ;;Total ram usage:       11 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:   11
  5470 ;; This function calls:
  5471 ;;		_DecreaseByAYear
  5472 ;; This function is called by:
  5473 ;;		_DecreaseByADay
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text25
  5478  0026CA                     __ptext25:
  5479                           	opt stack 0
  5480  0026CA                     _DecreaseByAMonth:
  5481                           	opt stack 17
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;incstack = 0
  5488  0026CA  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  5489  0026CC  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  5490  0026CE  E116               	bnz	l2818
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;funcs.c: 79: dt.DATE.Month = 12;
  5494  0026D0  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  5495  0026D2  0E0C               	movlw	12
  5496  0026D4  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  5500  0026D6  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  5501  0026DA  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  5502  0026DE  0E0A               	movlw	10
  5503  0026E0                     u2121:
  5504  0026E0  CFDB FFEB          	movff	plusw2,plusw0
  5505  0026E4  06E8               	decf	wreg,f,c
  5506  0026E6  E2FC               	bc	u2121
  5507  0026E8  EC8A  F014         	call	_DecreaseByAYear	;wreg free
  5508  0026EC  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  5509  0026F0  0E0A               	movlw	10
  5510  0026F2                     u2131:
  5511  0026F2  CFEB FFDB          	movff	plusw0,plusw2
  5512  0026F6  06E8               	decf	wreg,f,c
  5513  0026F8  E2FC               	bc	u2131
  5514                           
  5515                           ;funcs.c: 81: } else
  5516  0026FA  D003               	goto	l2820
  5517  0026FC                     l2818:
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;funcs.c: 82: dt.DATE.Month--;
  5521  0026FC  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  5522  0026FE  A0D8               	btfss	status,0,c
  5523  002700  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  5524  002702                     l2820:
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;funcs.c: 83: return dt;
  5528  002702  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  5529  002706  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  5530  00270A  0E0A               	movlw	10
  5531  00270C                     u2141:
  5532  00270C  CFDB FFEB          	movff	plusw2,plusw0
  5533  002710  06E8               	decf	wreg,f,c
  5534  002712  E2FC               	bc	u2141
  5535                           
  5536                           ; BSR set to: 0
  5537  002714  0012               	return		;funcret
  5538  002716                     __end_of_DecreaseByAMonth:
  5539                           	opt stack 0
  5540                           tosu	equ	0xFFF
  5541                           tosh	equ	0xFFE
  5542                           tosl	equ	0xFFD
  5543                           pclath	equ	0xFFA
  5544                           tblptru	equ	0xFF8
  5545                           tblptrh	equ	0xFF7
  5546                           tblptrl	equ	0xFF6
  5547                           tablat	equ	0xFF5
  5548                           prodh	equ	0xFF4
  5549                           prodl	equ	0xFF3
  5550                           intcon	equ	0xFF2
  5551                           postinc0	equ	0xFEE
  5552                           plusw0	equ	0xFEB
  5553                           wreg	equ	0xFE8
  5554                           indf1	equ	0xFE7
  5555                           postdec1	equ	0xFE5
  5556                           plusw1	equ	0xFE3
  5557                           fsr1h	equ	0xFE2
  5558                           fsr1l	equ	0xFE1
  5559                           indf2	equ	0xFDF
  5560                           postinc2	equ	0xFDE
  5561                           postdec2	equ	0xFDD
  5562                           plusw2	equ	0xFDB
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _DecreaseByAYear *****************
  5568 ;; Defined at:
  5569 ;;		line 86 in file "libs/funcs.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;		None
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  5576 ;; Registers used:
  5577 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 3F/0
  5580 ;;		On exit  : 3F/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5583 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5586 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5587 ;;Total ram usage:       11 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:   10
  5590 ;; This function calls:
  5591 ;;		___lwmod
  5592 ;; This function is called by:
  5593 ;;		_DecreaseByAMonth
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text26
  5598  002914                     __ptext26:
  5599                           	opt stack 0
  5600  002914                     _DecreaseByAYear:
  5601                           	opt stack 17
  5602                           
  5603                           ; BSR set to: 0
  5604                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;incstack = 0
  5608  002914  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  5609  002918  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  5610  00291C  EC86  F014         	call	PL98	;call to abstracted procedure
  5611  002920  EC15  F014         	call	___lwmod	;wreg free
  5612  002924  5160               	movf	?___lwmod& (0+255),w,b
  5613  002926  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5614  002928  E101               	bnz	l860
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;funcs.c: 88: GLOBAL_CENTURY--;
  5618  00292A  07D2               	decf	_GLOBAL_CENTURY& (0+255),f,b
  5619  00292C                     l860:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;funcs.c: 89: dt.YEAR--;
  5623  00292C  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  5624  00292E  A0D8               	btfss	status,0,c
  5625  002930  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;funcs.c: 90: return dt;
  5629  002932  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  5630  002936  EE00  F065         	lfsr	0,?_DecreaseByAYear
  5631  00293A  0E0A               	movlw	10
  5632  00293C                     u1911:
  5633  00293C  CFDB FFEB          	movff	plusw2,plusw0
  5634  002940  06E8               	decf	wreg,f,c
  5635  002942  E2FC               	bc	u1911
  5636                           
  5637                           ; BSR set to: 0
  5638  002944  0012               	return		;funcret
  5639  002946                     __end_of_DecreaseByAYear:
  5640                           	opt stack 0
  5641                           tosu	equ	0xFFF
  5642                           tosh	equ	0xFFE
  5643                           tosl	equ	0xFFD
  5644                           pclath	equ	0xFFA
  5645                           tblptru	equ	0xFF8
  5646                           tblptrh	equ	0xFF7
  5647                           tblptrl	equ	0xFF6
  5648                           tablat	equ	0xFF5
  5649                           prodh	equ	0xFF4
  5650                           prodl	equ	0xFF3
  5651                           intcon	equ	0xFF2
  5652                           postinc0	equ	0xFEE
  5653                           plusw0	equ	0xFEB
  5654                           wreg	equ	0xFE8
  5655                           indf1	equ	0xFE7
  5656                           postdec1	equ	0xFE5
  5657                           plusw1	equ	0xFE3
  5658                           fsr1h	equ	0xFE2
  5659                           fsr1l	equ	0xFE1
  5660                           indf2	equ	0xFDF
  5661                           postinc2	equ	0xFDE
  5662                           postdec2	equ	0xFDD
  5663                           plusw2	equ	0xFDB
  5664                           fsr2h	equ	0xFDA
  5665                           fsr2l	equ	0xFD9
  5666                           status	equ	0xFD8
  5667                           
  5668 ;; *************** function ___lwmod *****************
  5669 ;; Defined at:
  5670 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  5671 ;; Parameters:    Size  Location     Type
  5672 ;;  dividend        2    0[BANK0 ] unsigned int 
  5673 ;;  divisor         2    2[BANK0 ] unsigned int 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  counter         1    4[BANK0 ] unsigned char 
  5676 ;; Return value:  Size  Location     Type
  5677 ;;                  2    0[BANK0 ] unsigned int 
  5678 ;; Registers used:
  5679 ;;		wreg, status,2, status,0
  5680 ;; Tracked objects:
  5681 ;;		On entry : 3F/0
  5682 ;;		On exit  : 3F/0
  5683 ;;		Unchanged: 0/0
  5684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5685 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5688 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5689 ;;Total ram usage:        5 bytes
  5690 ;; Hardware stack levels used:    1
  5691 ;; Hardware stack levels required when called:    9
  5692 ;; This function calls:
  5693 ;;		Nothing
  5694 ;; This function is called by:
  5695 ;;		_IncreaseByADay
  5696 ;;		_IncreaseByAYear
  5697 ;;		_DecreaseByADay
  5698 ;;		_DecreaseByAYear
  5699 ;; This function uses a non-reentrant model
  5700 ;;
  5701                           
  5702                           	psect	text27
  5703  00282A                     __ptext27:
  5704                           	opt stack 0
  5705  00282A                     ___lwmod:
  5706                           	opt stack 19
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711                           ;incstack = 0
  5712  00282A  5162               	movf	___lwmod@divisor& (0+255),w,b
  5713  00282C  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5714  00282E  E017               	bz	l1299
  5715                           
  5716                           ; BSR set to: 0
  5717  002830  0E01               	movlw	1
  5718  002832  6F64               	movwf	___lwmod@counter& (0+255),b
  5719  002834  D004               	goto	l2710
  5720  002836                     l2708:
  5721                           
  5722                           ; BSR set to: 0
  5723  002836  90D8               	bcf	status,0,c
  5724  002838  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  5725  00283A  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5726  00283C  2B64               	incf	___lwmod@counter& (0+255),f,b
  5727  00283E                     l2710:
  5728                           
  5729                           ; BSR set to: 0
  5730  00283E  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5731  002840  D7FA               	goto	l2708
  5732  002842                     l2712:
  5733                           
  5734                           ; BSR set to: 0
  5735  002842  5162               	movf	___lwmod@divisor& (0+255),w,b
  5736  002844  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  5737  002846  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5738  002848  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5739  00284A  E304               	bnc	l2716
  5740                           
  5741                           ; BSR set to: 0
  5742  00284C  5162               	movf	___lwmod@divisor& (0+255),w,b
  5743  00284E  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  5744  002850  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5745  002852  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5746  002854                     l2716:
  5747                           
  5748                           ; BSR set to: 0
  5749  002854  90D8               	bcf	status,0,c
  5750  002856  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5751  002858  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  5752                           
  5753                           ; BSR set to: 0
  5754  00285A  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  5755  00285C  D7F2               	goto	l2712
  5756  00285E                     l1299:
  5757                           
  5758                           ; BSR set to: 0
  5759  00285E  C060  F060         	movff	___lwmod@dividend,?___lwmod
  5760  002862  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  5761                           
  5762                           ; BSR set to: 0
  5763  002866  0012               	return		;funcret
  5764  002868                     __end_of___lwmod:
  5765                           	opt stack 0
  5766                           tosu	equ	0xFFF
  5767                           tosh	equ	0xFFE
  5768                           tosl	equ	0xFFD
  5769                           pclath	equ	0xFFA
  5770                           tblptru	equ	0xFF8
  5771                           tblptrh	equ	0xFF7
  5772                           tblptrl	equ	0xFF6
  5773                           tablat	equ	0xFF5
  5774                           prodh	equ	0xFF4
  5775                           prodl	equ	0xFF3
  5776                           intcon	equ	0xFF2
  5777                           postinc0	equ	0xFEE
  5778                           plusw0	equ	0xFEB
  5779                           wreg	equ	0xFE8
  5780                           indf1	equ	0xFE7
  5781                           postdec1	equ	0xFE5
  5782                           plusw1	equ	0xFE3
  5783                           fsr1h	equ	0xFE2
  5784                           fsr1l	equ	0xFE1
  5785                           indf2	equ	0xFDF
  5786                           postinc2	equ	0xFDE
  5787                           postdec2	equ	0xFDD
  5788                           plusw2	equ	0xFDB
  5789                           fsr2h	equ	0xFDA
  5790                           fsr2l	equ	0xFD9
  5791                           status	equ	0xFD8
  5792                           
  5793 ;; *************** function _LoadAllFromEeprom *****************
  5794 ;; Defined at:
  5795 ;;		line 159 in file "libs/eeprom.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;		None
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;		None
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  1    wreg      void 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 3F/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5813 ;;Total ram usage:        0 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:   11
  5816 ;; This function calls:
  5817 ;;		_LoadCyclesFromEeprom
  5818 ;;		_LoadEventsFromEeprom
  5819 ;;		_LoadSettingsFromEeprom
  5820 ;;		_LoadStatesFromEeprom
  5821 ;; This function is called by:
  5822 ;;		_main
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text28
  5827  002A3C                     __ptext28:
  5828                           	opt stack 0
  5829  002A3C                     _LoadAllFromEeprom:
  5830                           	opt stack 19
  5831                           
  5832                           ;eeprom.c: 160: LoadSettingsFromEeprom ();
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;incstack = 0
  5836  002A3C  EC36  F009         	call	_LoadSettingsFromEeprom	;wreg free
  5837                           
  5838                           ; BSR set to: 0
  5839                           ;eeprom.c: 161: LoadEventsFromEeprom ();
  5840  002A40  EC52  F00B         	call	_LoadEventsFromEeprom	;wreg free
  5841                           
  5842                           ; BSR set to: 0
  5843                           ;eeprom.c: 162: LoadStatesFromEeprom();
  5844  002A44  EC60  F008         	call	_LoadStatesFromEeprom	;wreg free
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;eeprom.c: 163: LoadCyclesFromEeprom();
  5848  002A48  EFAF  F00A         	goto	_LoadCyclesFromEeprom	;wreg free
  5849  002A4C                     __end_of_LoadAllFromEeprom:
  5850                           	opt stack 0
  5851                           tosu	equ	0xFFF
  5852                           tosh	equ	0xFFE
  5853                           tosl	equ	0xFFD
  5854                           pclath	equ	0xFFA
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodh	equ	0xFF4
  5860                           prodl	equ	0xFF3
  5861                           intcon	equ	0xFF2
  5862                           postinc0	equ	0xFEE
  5863                           plusw0	equ	0xFEB
  5864                           wreg	equ	0xFE8
  5865                           indf1	equ	0xFE7
  5866                           postdec1	equ	0xFE5
  5867                           plusw1	equ	0xFE3
  5868                           fsr1h	equ	0xFE2
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           plusw2	equ	0xFDB
  5874                           fsr2h	equ	0xFDA
  5875                           fsr2l	equ	0xFD9
  5876                           status	equ	0xFD8
  5877                           
  5878 ;; *************** function _LoadStatesFromEeprom *****************
  5879 ;; Defined at:
  5880 ;;		line 108 in file "libs/eeprom.c"
  5881 ;; Parameters:    Size  Location     Type
  5882 ;;		None
  5883 ;; Auto vars:     Size  Location     Type
  5884 ;;  j               2   22[BANK0 ] int 
  5885 ;;  j               2   20[BANK0 ] int 
  5886 ;;  i               2   26[BANK0 ] int 
  5887 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  5888 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  5889 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  5890 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  5891 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  5892 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      void 
  5895 ;; Registers used:
  5896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 3F/0
  5899 ;;		On exit  : 3F/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5903 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5904 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5905 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5906 ;;Total ram usage:       20 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:   10
  5909 ;; This function calls:
  5910 ;;		_ReadEeprom
  5911 ;;		___awdiv
  5912 ;;		___wmul
  5913 ;; This function is called by:
  5914 ;;		_LoadAllFromEeprom
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text29
  5919  0010C0                     __ptext29:
  5920                           	opt stack 0
  5921  0010C0                     _LoadStatesFromEeprom:
  5922                           	opt stack 19
  5923                           
  5924                           ; BSR set to: 0
  5925                           ;eeprom.c: 109: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  5926                           ;eeprom.c: 110: UINT8 AudAddInc;
  5927                           ;eeprom.c: 111: AddStates.Val = 224;
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;incstack = 0
  5931  0010C0  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  5932  0010C2  0EE0               	movlw	224
  5933  0010C4  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  5934                           
  5935                           ;eeprom.c: 112: AddAudioNormal.Val = 23;
  5936  0010C6  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  5937  0010C8  0E17               	movlw	23
  5938  0010CA  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  5939                           
  5940                           ;eeprom.c: 113: AddAudioSpecial.Val = 43;
  5941  0010CC  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  5942  0010CE  0E2B               	movlw	43
  5943  0010D0  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;eeprom.c: 114: for (int i=0; i<160; i++) {
  5947  0010D2  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  5948  0010D4  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  5949  0010D6                     l3404:
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;eeprom.c: 115: STATES[i].PERIOD = ReadEeprom(AddStates);
  5953  0010D6  D8A3               	call	PL14	;call to abstracted procedure
  5954  0010D8  ECB7  F014         	call	___wmul	;wreg free
  5955  0010DC  0EF0               	movlw	low _STATES
  5956  0010DE  2560               	addwf	?___wmul& (0+255),w,b
  5957  0010E0  6ED9               	movwf	fsr2l,c
  5958  0010E2  0E02               	movlw	high _STATES
  5959  0010E4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5960  0010E6  D8B3               	call	PL74	;call to abstracted procedure
  5961  0010E8  EC02  F015         	call	_ReadEeprom	;wreg free
  5962  0010EC  6EDF               	movwf	indf2,c
  5963                           
  5964                           ;eeprom.c: 116: AddStates.Val++;
  5965  0010EE  0100               	movlb	0	; () banked
  5966  0010F0  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  5967  0010F2  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;eeprom.c: 117: for (int j=0; j<2; j++) {
  5971  0010F4  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  5972  0010F6  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  5973  0010F8                     l3414:
  5974                           
  5975                           ; BSR set to: 0
  5976                           ;eeprom.c: 118: STATES[i].ON[j] = ReadEeprom(AddStates);
  5977  0010F8  D892               	call	PL14	;call to abstracted procedure
  5978  0010FA  ECB7  F014         	call	___wmul	;wreg free
  5979  0010FE  D8AD               	call	PL100	;call to abstracted procedure
  5980  001100  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  5981  001102  0E00               	movlw	0
  5982  001104  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  5983  001106  5160               	movf	?___wmul& (0+255),w,b
  5984  001108  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  5985  00110A  5161               	movf	(?___wmul+1)& (0+255),w,b
  5986  00110C  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  5987  00110E  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  5988  001110  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  5989  001112  6ED9               	movwf	fsr2l,c
  5990  001114  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  5991  001116  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  5992  001118  D89A               	call	PL74	;call to abstracted procedure
  5993  00111A  EC02  F015         	call	_ReadEeprom	;wreg free
  5994  00111E  6EDF               	movwf	indf2,c
  5995                           
  5996                           ;eeprom.c: 119: AddStates.Val++;
  5997  001120  0100               	movlb	0	; () banked
  5998  001122  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  5999  001124  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6000                           
  6001                           ; BSR set to: 0
  6002  001126  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  6003  001128  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  6004                           
  6005                           ; BSR set to: 0
  6006  00112A  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  6007  00112C  D7E5               	goto	l3414
  6008  00112E  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  6009  001130  E103               	bnz	u2950
  6010  001132  0E02               	movlw	2
  6011  001134  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  6012  001136  E3E0               	bnc	l3414
  6013  001138                     u2950:
  6014                           
  6015                           ; BSR set to: 0
  6016                           ;eeprom.c: 120: }
  6017                           ;eeprom.c: 121: for (int j=0; j<2; j++) {
  6018  001138  6B76               	clrf	LoadStatesFromEeprom@j_1234& (0+255),b
  6019  00113A  6B77               	clrf	(LoadStatesFromEeprom@j_1234+1)& (0+255),b
  6020  00113C                     l3426:
  6021                           
  6022                           ; BSR set to: 0
  6023                           ;eeprom.c: 122: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  6024  00113C  D870               	call	PL14	;call to abstracted procedure
  6025  00113E  ECB7  F014         	call	___wmul	;wreg free
  6026  001142  D88B               	call	PL100	;call to abstracted procedure
  6027  001144  0E03               	movlw	3
  6028  001146  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  6029  001148  0E00               	movlw	0
  6030  00114A  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6031  00114C  5160               	movf	?___wmul& (0+255),w,b
  6032  00114E  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  6033  001150  5161               	movf	(?___wmul+1)& (0+255),w,b
  6034  001152  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6035  001154  5176               	movf	LoadStatesFromEeprom@j_1234& (0+255),w,b
  6036  001156  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  6037  001158  6ED9               	movwf	fsr2l,c
  6038  00115A  5177               	movf	(LoadStatesFromEeprom@j_1234+1)& (0+255),w,b
  6039  00115C  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6040  00115E  D877               	call	PL74	;call to abstracted procedure
  6041  001160  EC02  F015         	call	_ReadEeprom	;wreg free
  6042  001164  6EDF               	movwf	indf2,c
  6043                           
  6044                           ;eeprom.c: 123: AddStates.Val++;
  6045  001166  0100               	movlb	0	; () banked
  6046  001168  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  6047  00116A  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6048                           
  6049                           ; BSR set to: 0
  6050  00116C  4B76               	infsnz	LoadStatesFromEeprom@j_1234& (0+255),f,b
  6051  00116E  2B77               	incf	(LoadStatesFromEeprom@j_1234+1)& (0+255),f,b
  6052                           
  6053                           ; BSR set to: 0
  6054  001170  BF77               	btfsc	(LoadStatesFromEeprom@j_1234+1)& (0+255),7,b
  6055  001172  D7E4               	goto	l3426
  6056  001174  5177               	movf	(LoadStatesFromEeprom@j_1234+1)& (0+255),w,b
  6057  001176  E103               	bnz	u2960
  6058  001178  0E02               	movlw	2
  6059  00117A  5D76               	subwf	LoadStatesFromEeprom@j_1234& (0+255),w,b
  6060  00117C  E3DF               	bnc	l3426
  6061  00117E                     u2960:
  6062                           
  6063                           ; BSR set to: 0
  6064                           ;eeprom.c: 124: }
  6065                           ;eeprom.c: 125: AudAddInc = i/8;
  6066  00117E  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  6067  001182  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  6068  001186  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6069  001188  0E08               	movlw	8
  6070  00118A  6F62               	movwf	___awdiv@divisor& (0+255),b
  6071  00118C  ECE4  F011         	call	___awdiv	;wreg free
  6072  001190  5160               	movf	?___awdiv& (0+255),w,b
  6073  001192  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;eeprom.c: 126: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  6077  001194  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  6078  001196  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  6079  001198  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  6080  00119A  0E00               	movlw	0
  6081  00119C  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  6082  00119E  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;eeprom.c: 127: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  6086  0011A0  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  6087  0011A2  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  6088  0011A4  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  6089  0011A6  0E00               	movlw	0
  6090  0011A8  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  6091  0011AA  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  6092                           
  6093                           ;eeprom.c: 128: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  6094  0011AC  D847               	call	PL66	;call to abstracted procedure
  6095  0011AE  D001               	goto	u2974
  6096  0011B0                     u2975:
  6097  0011B0  D859               	call	PL112	;call to abstracted procedure
  6098  0011B2                     u2974:
  6099  0011B2  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  6100  0011B4  D7FD               	goto	u2975
  6101  0011B6  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  6102  0011BA  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  6103  0011BE  EC02  F015         	call	_ReadEeprom	;wreg free
  6104  0011C2  0100               	movlb	0	; () banked
  6105  0011C4  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6106  0011C6  E006               	bz	l3442
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;eeprom.c: 129: STATES[i].AUDIO = AUDIO_NORMAL;
  6110  0011C8  D82A               	call	PL14	;call to abstracted procedure
  6111  0011CA  ECB7  F014         	call	___wmul	;wreg free
  6112  0011CE  D82F               	call	PL54	;call to abstracted procedure
  6113  0011D0  0E01               	movlw	1
  6114  0011D2  D019               	goto	L7
  6115  0011D4                     l3442:
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;eeprom.c: 130: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  6119  0011D4  D833               	call	PL66	;call to abstracted procedure
  6120  0011D6  D001               	goto	u2994
  6121  0011D8                     u2995:
  6122  0011D8  D845               	call	PL112	;call to abstracted procedure
  6123  0011DA                     u2994:
  6124  0011DA  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  6125  0011DC  D7FD               	goto	u2995
  6126  0011DE  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  6127  0011E2  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  6128  0011E6  EC02  F015         	call	_ReadEeprom	;wreg free
  6129  0011EA  0100               	movlb	0	; () banked
  6130  0011EC  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6131  0011EE  E006               	bz	l3446
  6132                           
  6133                           ; BSR set to: 0
  6134                           ;eeprom.c: 131: STATES[i].AUDIO = AUDIO_SPECIAL;
  6135  0011F0  D816               	call	PL14	;call to abstracted procedure
  6136  0011F2  ECB7  F014         	call	___wmul	;wreg free
  6137  0011F6  D81B               	call	PL54	;call to abstracted procedure
  6138  0011F8  0E02               	movlw	2
  6139  0011FA  D005               	goto	L7
  6140  0011FC                     l3446:
  6141                           
  6142                           ; BSR set to: 0
  6143                           ;eeprom.c: 132: else
  6144                           ;eeprom.c: 133: STATES[i].AUDIO = AUDIO_OFF;
  6145  0011FC  D810               	call	PL14	;call to abstracted procedure
  6146  0011FE  ECB7  F014         	call	___wmul	;wreg free
  6147  001202  D815               	call	PL54	;call to abstracted procedure
  6148  001204  0E00               	movlw	0
  6149  001206                     L7:
  6150  001206  6EDF               	movwf	indf2,c
  6151                           
  6152                           ; BSR set to: 0
  6153  001208  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  6154  00120A  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  6155                           
  6156                           ; BSR set to: 0
  6157  00120C  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  6158  00120E  D763               	goto	l3404
  6159  001210  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  6160  001212  E104               	bnz	u3010
  6161  001214  0EA0               	movlw	160
  6162  001216  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  6163  001218  E201 D75D          	bnc	l3404
  6164  00121C                     u3010:
  6165                           
  6166                           ; BSR set to: 0
  6167  00121C  0012               	return		;funcret
  6168  00121E                     __end_of_LoadStatesFromEeprom:
  6169                           	opt stack 0
  6170  00121E                     PL14:
  6171                           	opt stack 19
  6172  00121E  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  6173  001222  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  6174  001226  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  6175  001228  0E06               	movlw	6
  6176  00122A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6177  00122C  0C06               	retlw	6
  6178  00122E                     __end_ofPL14:
  6179                           	opt stack 0
  6180  00122E                     PL54:
  6181                           	opt stack 19
  6182  00122E  0EF5               	movlw	low (_STATES+5)
  6183  001230  2560               	addwf	?___wmul& (0+255),w,b
  6184  001232  6ED9               	movwf	fsr2l,c
  6185  001234  0E02               	movlw	high (_STATES+5)
  6186  001236  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6187  001238  6EDA               	movwf	fsr2h,c
  6188  00123A  0012               	return	
  6189  00123C                     __end_ofPL54:
  6190                           	opt stack 0
  6191  00123C                     PL66:
  6192                           	opt stack 19
  6193  00123C  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  6194  001240  0E07               	movlw	7
  6195  001242  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  6196  001244  0E80               	movlw	128
  6197  001246  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  6198  001248  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  6199  00124A  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  6200  00124C  0C80               	retlw	128
  6201  00124E                     __end_ofPL66:
  6202                           	opt stack 0
  6203  00124E                     PL74:
  6204                           	opt stack 19
  6205  00124E  6EDA               	movwf	fsr2h,c
  6206  001250  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  6207  001254  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  6208  001258  0012               	return	
  6209  00125A                     __end_ofPL74:
  6210                           	opt stack 0
  6211  00125A                     PL100:
  6212                           	opt stack 19
  6213  00125A  0EF0               	movlw	low _STATES
  6214  00125C  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  6215  00125E  0E02               	movlw	high _STATES
  6216  001260  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  6217  001262  0012               	return	
  6218  001264                     __end_ofPL100:
  6219                           	opt stack 0
  6220  001264                     PL112:
  6221                           	opt stack 19
  6222  001264  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  6223  001266  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  6224  001268  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6225  00126A  0012               	return	
  6226  00126C                     __end_ofPL112:
  6227                           	opt stack 0
  6228                           tosu	equ	0xFFF
  6229                           tosh	equ	0xFFE
  6230                           tosl	equ	0xFFD
  6231                           pclath	equ	0xFFA
  6232                           tblptru	equ	0xFF8
  6233                           tblptrh	equ	0xFF7
  6234                           tblptrl	equ	0xFF6
  6235                           tablat	equ	0xFF5
  6236                           prodh	equ	0xFF4
  6237                           prodl	equ	0xFF3
  6238                           intcon	equ	0xFF2
  6239                           postinc0	equ	0xFEE
  6240                           plusw0	equ	0xFEB
  6241                           wreg	equ	0xFE8
  6242                           indf1	equ	0xFE7
  6243                           postdec1	equ	0xFE5
  6244                           plusw1	equ	0xFE3
  6245                           fsr1h	equ	0xFE2
  6246                           fsr1l	equ	0xFE1
  6247                           indf2	equ	0xFDF
  6248                           postinc2	equ	0xFDE
  6249                           postdec2	equ	0xFDD
  6250                           plusw2	equ	0xFDB
  6251                           fsr2h	equ	0xFDA
  6252                           fsr2l	equ	0xFD9
  6253                           status	equ	0xFD8
  6254                           
  6255 ;; *************** function ___awdiv *****************
  6256 ;; Defined at:
  6257 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  6258 ;; Parameters:    Size  Location     Type
  6259 ;;  dividend        2    0[BANK0 ] int 
  6260 ;;  divisor         2    2[BANK0 ] int 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  quotient        2    6[BANK0 ] int 
  6263 ;;  sign            1    5[BANK0 ] unsigned char 
  6264 ;;  counter         1    4[BANK0 ] unsigned char 
  6265 ;; Return value:  Size  Location     Type
  6266 ;;                  2    0[BANK0 ] int 
  6267 ;; Registers used:
  6268 ;;		wreg, status,2, status,0
  6269 ;; Tracked objects:
  6270 ;;		On entry : 3F/0
  6271 ;;		On exit  : 3F/0
  6272 ;;		Unchanged: 0/0
  6273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6275 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6277 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6278 ;;Total ram usage:        8 bytes
  6279 ;; Hardware stack levels used:    1
  6280 ;; Hardware stack levels required when called:    9
  6281 ;; This function calls:
  6282 ;;		Nothing
  6283 ;; This function is called by:
  6284 ;;		_GetDay
  6285 ;;		_LoadStatesFromEeprom
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text30
  6290  0023C8                     __ptext30:
  6291                           	opt stack 0
  6292  0023C8                     ___awdiv:
  6293                           	opt stack 19
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ; BSR set to: 0
  6298                           ;incstack = 0
  6299  0023C8  6B65               	clrf	___awdiv@sign& (0+255),b
  6300                           
  6301                           ; BSR set to: 0
  6302  0023CA  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6303  0023CC  D006               	goto	l3052
  6304                           
  6305                           ; BSR set to: 0
  6306  0023CE  6D62               	negf	___awdiv@divisor& (0+255),b
  6307  0023D0  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6308  0023D2  B0D8               	btfsc	status,0,c
  6309  0023D4  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6310                           
  6311                           ; BSR set to: 0
  6312  0023D6  0E01               	movlw	1
  6313  0023D8  6F65               	movwf	___awdiv@sign& (0+255),b
  6314  0023DA                     l3052:
  6315                           
  6316                           ; BSR set to: 0
  6317  0023DA  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6318  0023DC  D006               	goto	l3058
  6319                           
  6320                           ; BSR set to: 0
  6321  0023DE  6D60               	negf	___awdiv@dividend& (0+255),b
  6322  0023E0  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6323  0023E2  B0D8               	btfsc	status,0,c
  6324  0023E4  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6325                           
  6326                           ; BSR set to: 0
  6327  0023E6  0E01               	movlw	1
  6328  0023E8  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  6329  0023EA                     l3058:
  6330                           
  6331                           ; BSR set to: 0
  6332  0023EA  6B66               	clrf	___awdiv@quotient& (0+255),b
  6333  0023EC  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  6334                           
  6335                           ; BSR set to: 0
  6336  0023EE  5162               	movf	___awdiv@divisor& (0+255),w,b
  6337  0023F0  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6338  0023F2  E01B               	bz	l3080
  6339                           
  6340                           ; BSR set to: 0
  6341  0023F4  0E01               	movlw	1
  6342  0023F6  6F64               	movwf	___awdiv@counter& (0+255),b
  6343  0023F8  D004               	goto	l3066
  6344  0023FA                     l3064:
  6345                           
  6346                           ; BSR set to: 0
  6347  0023FA  90D8               	bcf	status,0,c
  6348  0023FC  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  6349  0023FE  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6350  002400  2B64               	incf	___awdiv@counter& (0+255),f,b
  6351  002402                     l3066:
  6352                           
  6353                           ; BSR set to: 0
  6354  002402  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6355  002404  D7FA               	goto	l3064
  6356  002406                     l3068:
  6357                           
  6358                           ; BSR set to: 0
  6359  002406  90D8               	bcf	status,0,c
  6360  002408  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  6361  00240A  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6362                           
  6363                           ; BSR set to: 0
  6364  00240C  5162               	movf	___awdiv@divisor& (0+255),w,b
  6365  00240E  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  6366  002410  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6367  002412  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6368  002414  E305               	bnc	l3076
  6369                           
  6370                           ; BSR set to: 0
  6371  002416  5162               	movf	___awdiv@divisor& (0+255),w,b
  6372  002418  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  6373  00241A  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6374  00241C  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6375                           
  6376                           ; BSR set to: 0
  6377  00241E  8166               	bsf	___awdiv@quotient& (0+255),0,b
  6378  002420                     l3076:
  6379                           
  6380                           ; BSR set to: 0
  6381  002420  90D8               	bcf	status,0,c
  6382  002422  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6383  002424  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  6384                           
  6385                           ; BSR set to: 0
  6386  002426  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  6387  002428  D7EE               	goto	l3068
  6388  00242A                     l3080:
  6389                           
  6390                           ; BSR set to: 0
  6391  00242A  5165               	movf	___awdiv@sign& (0+255),w,b
  6392  00242C  E004               	bz	l3084
  6393                           
  6394                           ; BSR set to: 0
  6395  00242E  6D66               	negf	___awdiv@quotient& (0+255),b
  6396  002430  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6397  002432  B0D8               	btfsc	status,0,c
  6398  002434  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6399  002436                     l3084:
  6400                           
  6401                           ; BSR set to: 0
  6402  002436  C066  F060         	movff	___awdiv@quotient,?___awdiv
  6403  00243A  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  6404                           
  6405                           ; BSR set to: 0
  6406  00243E  0012               	return		;funcret
  6407  002440                     __end_of___awdiv:
  6408                           	opt stack 0
  6409                           tosu	equ	0xFFF
  6410                           tosh	equ	0xFFE
  6411                           tosl	equ	0xFFD
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           plusw0	equ	0xFEB
  6422                           wreg	equ	0xFE8
  6423                           indf1	equ	0xFE7
  6424                           postdec1	equ	0xFE5
  6425                           plusw1	equ	0xFE3
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _LoadSettingsFromEeprom *****************
  6437 ;; Defined at:
  6438 ;;		line 15 in file "libs/eeprom.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  6443 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  6444 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 3F/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6457 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6458 ;;Total ram usage:        8 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:   10
  6461 ;; This function calls:
  6462 ;;		_ReadEeprom
  6463 ;;		___wmul
  6464 ;; This function is called by:
  6465 ;;		_LoadAllFromEeprom
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text31
  6470  00126C                     __ptext31:
  6471                           	opt stack 0
  6472  00126C                     _LoadSettingsFromEeprom:
  6473                           	opt stack 19
  6474                           
  6475                           ;eeprom.c: 16: WORD_VAL Temp16, Address;
  6476                           ;eeprom.c: 17: DWORD_VAL Temp32;
  6477                           ;eeprom.c: 19: Address.Val = 0;
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;incstack = 0
  6481  00126C  0100               	movlb	0	; () banked
  6482  00126E  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  6483  001270  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;eeprom.c: 20: Temp16.v[0] = ReadEeprom(Address);
  6487  001272  D8B4               	call	PL10	;call to abstracted procedure
  6488  001274  EC02  F015         	call	_ReadEeprom	;wreg free
  6489  001278  0100               	movlb	0	; () banked
  6490  00127A  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;eeprom.c: 21: Address.Val++;
  6494  00127C  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6495  00127E  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6496                           
  6497                           ; BSR set to: 0
  6498                           ;eeprom.c: 22: Temp16.v[1] = ReadEeprom(Address);
  6499  001280  D8AD               	call	PL10	;call to abstracted procedure
  6500  001282  EC02  F015         	call	_ReadEeprom	;wreg free
  6501  001286  0100               	movlb	0	; () banked
  6502  001288  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  6503                           
  6504                           ; BSR set to: 0
  6505                           ;eeprom.c: 23: TIME_ZONE = (INT16) 60*Temp16.Val;
  6506  00128A  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  6507  00128E  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  6508  001292  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  6509  001294  0E3C               	movlw	60
  6510  001296  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6511  001298  ECB7  F014         	call	___wmul	;wreg free
  6512  00129C  C060  F0F1         	movff	?___wmul,_TIME_ZONE
  6513  0012A0  C061  F0F2         	movff	?___wmul+1,_TIME_ZONE+1
  6514                           
  6515                           ; BSR set to: 0
  6516                           ;eeprom.c: 25: Address.Val = 2;
  6517  0012A4  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6518  0012A6  0E02               	movlw	2
  6519                           
  6520                           ; BSR set to: 0
  6521                           ;eeprom.c: 26: DAY_LIGHT_START.Day = ReadEeprom (Address);
  6522  0012A8  D893               	call	PL8	;call to abstracted procedure
  6523  0012AA  EC02  F015         	call	_ReadEeprom	;wreg free
  6524  0012AE  0100               	movlb	0	; () banked
  6525  0012B0  6FED               	movwf	_DAY_LIGHT_START& (0+255),b
  6526  0012B2  6BEE               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  6527                           
  6528                           ; BSR set to: 0
  6529                           ;eeprom.c: 27: Address.Val++;
  6530  0012B4  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6531  0012B6  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6532                           
  6533                           ; BSR set to: 0
  6534                           ;eeprom.c: 28: DAY_LIGHT_START.Month = ReadEeprom (Address);
  6535  0012B8  D891               	call	PL10	;call to abstracted procedure
  6536  0012BA  EC02  F015         	call	_ReadEeprom	;wreg free
  6537  0012BE  0100               	movlb	0	; () banked
  6538  0012C0  6FEF               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  6539  0012C2  6BF0               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  6540                           
  6541                           ; BSR set to: 0
  6542                           ;eeprom.c: 30: Address.Val = 4;
  6543  0012C4  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6544  0012C6  0E04               	movlw	4
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;eeprom.c: 31: DAY_LIGHT_END.Day = ReadEeprom (Address);
  6548  0012C8  D883               	call	PL8	;call to abstracted procedure
  6549  0012CA  EC02  F015         	call	_ReadEeprom	;wreg free
  6550  0012CE  0100               	movlb	0	; () banked
  6551  0012D0  6FE9               	movwf	_DAY_LIGHT_END& (0+255),b
  6552  0012D2  6BEA               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;eeprom.c: 32: Address.Val++;
  6556  0012D4  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6557  0012D6  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6558                           
  6559                           ; BSR set to: 0
  6560                           ;eeprom.c: 33: DAY_LIGHT_END.Month = ReadEeprom (Address);
  6561  0012D8  D881               	call	PL10	;call to abstracted procedure
  6562  0012DA  EC02  F015         	call	_ReadEeprom	;wreg free
  6563  0012DE  0100               	movlb	0	; () banked
  6564  0012E0  6FEB               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  6565  0012E2  6BEC               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  6566                           
  6567                           ; BSR set to: 0
  6568                           ;eeprom.c: 35: Address.Val = 6;
  6569  0012E4  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6570  0012E6  0E06               	movlw	6
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;eeprom.c: 36: CENTURY = ReadEeprom(Address);
  6574  0012E8  D873               	call	PL8	;call to abstracted procedure
  6575  0012EA  EC02  F015         	call	_ReadEeprom	;wreg free
  6576                           
  6577                           ;eeprom.c: 38: Address.Val = 7;
  6578  0012EE  0100               	movlb	0	; () banked
  6579  0012F0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6580  0012F2  0E07               	movlw	7
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;eeprom.c: 39: Temp16.v[0] = ReadEeprom(Address);
  6584  0012F4  D86D               	call	PL8	;call to abstracted procedure
  6585  0012F6  EC02  F015         	call	_ReadEeprom	;wreg free
  6586  0012FA  0100               	movlb	0	; () banked
  6587  0012FC  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;eeprom.c: 40: Address.Val++;
  6591  0012FE  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6592  001300  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;eeprom.c: 42: CYCLE_DELAY = (INT16) Temp16.Val;
  6596  001302  D86C               	call	PL10	;call to abstracted procedure
  6597  001304  EC02  F015         	call	_ReadEeprom	;wreg free
  6598  001308  0100               	movlb	0	; () banked
  6599  00130A  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;eeprom.c: 44: Address.Val = 9;
  6603  00130C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6604  00130E  0E09               	movlw	9
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;eeprom.c: 45: BLINK_ON_TIME = ReadEeprom(Address);
  6608  001310  D85F               	call	PL8	;call to abstracted procedure
  6609  001312  EC02  F015         	call	_ReadEeprom	;wreg free
  6610                           
  6611                           ;eeprom.c: 47: Address.Val = 10;
  6612  001316  0100               	movlb	0	; () banked
  6613  001318  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6614  00131A  0E0A               	movlw	10
  6615                           
  6616                           ; BSR set to: 0
  6617                           ;eeprom.c: 48: BLINK_OFF_TIME = ReadEeprom(Address);
  6618  00131C  D859               	call	PL8	;call to abstracted procedure
  6619  00131E  EC02  F015         	call	_ReadEeprom	;wreg free
  6620                           
  6621                           ;eeprom.c: 50: Address.Val = 11;
  6622  001322  0100               	movlb	0	; () banked
  6623  001324  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6624  001326  0E0B               	movlw	11
  6625                           
  6626                           ; BSR set to: 0
  6627                           ;eeprom.c: 51: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  6628  001328  D853               	call	PL8	;call to abstracted procedure
  6629  00132A  EC02  F015         	call	_ReadEeprom	;wreg free
  6630                           
  6631                           ;eeprom.c: 53: Address.Val = 12;
  6632  00132E  0100               	movlb	0	; () banked
  6633  001330  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6634  001332  0E0C               	movlw	12
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;eeprom.c: 54: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  6638  001334  D84D               	call	PL8	;call to abstracted procedure
  6639  001336  EC02  F015         	call	_ReadEeprom	;wreg free
  6640                           
  6641                           ;eeprom.c: 56: Address.Val = 13;
  6642  00133A  0100               	movlb	0	; () banked
  6643  00133C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6644  00133E  0E0D               	movlw	13
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;eeprom.c: 57: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  6648  001340  D847               	call	PL8	;call to abstracted procedure
  6649  001342  EC02  F015         	call	_ReadEeprom	;wreg free
  6650                           
  6651                           ;eeprom.c: 59: Address.Val = 14;
  6652  001346  0100               	movlb	0	; () banked
  6653  001348  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6654  00134A  0E0E               	movlw	14
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;eeprom.c: 60: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  6658  00134C  D841               	call	PL8	;call to abstracted procedure
  6659  00134E  EC02  F015         	call	_ReadEeprom	;wreg free
  6660                           
  6661                           ;eeprom.c: 62: Address.Val = 15;
  6662  001352  0100               	movlb	0	; () banked
  6663  001354  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6664  001356  0E0F               	movlw	15
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;eeprom.c: 63: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  6668  001358  D83B               	call	PL8	;call to abstracted procedure
  6669  00135A  EC02  F015         	call	_ReadEeprom	;wreg free
  6670                           
  6671                           ;eeprom.c: 65: Address.Val = 16;
  6672  00135E  0100               	movlb	0	; () banked
  6673  001360  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6674  001362  0E10               	movlw	16
  6675                           
  6676                           ; BSR set to: 0
  6677                           ;eeprom.c: 66: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  6678  001364  D835               	call	PL8	;call to abstracted procedure
  6679  001366  EC02  F015         	call	_ReadEeprom	;wreg free
  6680                           
  6681                           ;eeprom.c: 68: Address.Val = 17;
  6682  00136A  0100               	movlb	0	; () banked
  6683  00136C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6684  00136E  0E11               	movlw	17
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;eeprom.c: 69: GPS_SYNC_AT_START = ReadEeprom(Address);
  6688  001370  D82F               	call	PL8	;call to abstracted procedure
  6689  001372  EC02  F015         	call	_ReadEeprom	;wreg free
  6690                           
  6691                           ;eeprom.c: 71: Address.Val = 18;
  6692  001376  0100               	movlb	0	; () banked
  6693  001378  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6694  00137A  0E12               	movlw	18
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;eeprom.c: 73: Temp32.v[0] = ReadEeprom(Address);
  6698                           
  6699                           ; BSR set to: 0
  6700  00137C  D829               	call	PL8	;call to abstracted procedure
  6701  00137E  EC02  F015         	call	_ReadEeprom	;wreg free
  6702  001382  0100               	movlb	0	; () banked
  6703  001384  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;eeprom.c: 74: Address.Val++;
  6707  001386  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6708  001388  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;eeprom.c: 75: Temp32.v[1] = ReadEeprom(Address);
  6712  00138A  D828               	call	PL10	;call to abstracted procedure
  6713  00138C  EC02  F015         	call	_ReadEeprom	;wreg free
  6714  001390  0100               	movlb	0	; () banked
  6715  001392  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;eeprom.c: 76: Address.Val++;
  6719  001394  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6720  001396  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;eeprom.c: 78: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  6724  001398  D821               	call	PL10	;call to abstracted procedure
  6725  00139A  EC02  F015         	call	_ReadEeprom	;wreg free
  6726  00139E  0100               	movlb	0	; () banked
  6727  0013A0  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;eeprom.c: 80: Address.Val = 21;
  6731  0013A2  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6732  0013A4  0E15               	movlw	21
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;eeprom.c: 81: Temp16.v[0] = ReadEeprom(Address);
  6736  0013A6  D814               	call	PL8	;call to abstracted procedure
  6737  0013A8  EC02  F015         	call	_ReadEeprom	;wreg free
  6738  0013AC  0100               	movlb	0	; () banked
  6739  0013AE  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;eeprom.c: 82: Address.Val++;
  6743  0013B0  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6744  0013B2  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6745                           
  6746                           ; BSR set to: 0
  6747                           ;eeprom.c: 83: Temp16.v[1] = ReadEeprom(Address);
  6748  0013B4  D813               	call	PL10	;call to abstracted procedure
  6749  0013B6  EC02  F015         	call	_ReadEeprom	;wreg free
  6750  0013BA  0100               	movlb	0	; () banked
  6751  0013BC  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;eeprom.c: 84: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  6755  0013BE  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  6756  0013C2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  6757  0013C4  0E0E               	movlw	14
  6758  0013C6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6759  0013C8  0E10               	movlw	16
  6760  0013CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6761  0013CC  EFB7  F014         	goto	___wmul	;wreg free
  6762  0013D0                     __end_of_LoadSettingsFromEeprom:
  6763                           	opt stack 0
  6764  0013D0                     PL8:
  6765                           	opt stack 19
  6766  0013D0  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6767  0013D2  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  6768  0013D6  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  6769  0013DA  0012               	return	
  6770  0013DC                     __end_ofPL8:
  6771                           	opt stack 0
  6772  0013DC                     PL10:
  6773                           	opt stack 19
  6774  0013DC  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  6775  0013E0  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  6776  0013E4  0012               	return	
  6777  0013E6                     __end_ofPL10:
  6778                           	opt stack 0
  6779                           tosu	equ	0xFFF
  6780                           tosh	equ	0xFFE
  6781                           tosl	equ	0xFFD
  6782                           pclath	equ	0xFFA
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           postinc0	equ	0xFEE
  6791                           plusw0	equ	0xFEB
  6792                           wreg	equ	0xFE8
  6793                           indf1	equ	0xFE7
  6794                           postdec1	equ	0xFE5
  6795                           plusw1	equ	0xFE3
  6796                           fsr1h	equ	0xFE2
  6797                           fsr1l	equ	0xFE1
  6798                           indf2	equ	0xFDF
  6799                           postinc2	equ	0xFDE
  6800                           postdec2	equ	0xFDD
  6801                           plusw2	equ	0xFDB
  6802                           fsr2h	equ	0xFDA
  6803                           fsr2l	equ	0xFD9
  6804                           status	equ	0xFD8
  6805                           
  6806 ;; *************** function _LoadEventsFromEeprom *****************
  6807 ;; Defined at:
  6808 ;;		line 87 in file "libs/eeprom.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;		None
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;  i               2   10[BANK0 ] int 
  6813 ;;  Temp16          2   14[BANK0 ] struct _WORD_VAL
  6814 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  6815 ;; Return value:  Size  Location     Type
  6816 ;;                  1    wreg      void 
  6817 ;; Registers used:
  6818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6819 ;; Tracked objects:
  6820 ;;		On entry : 3F/0
  6821 ;;		On exit  : 3F/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6825 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6826 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6827 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6828 ;;Total ram usage:       10 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:   10
  6831 ;; This function calls:
  6832 ;;		_ReadEeprom
  6833 ;;		___wmul
  6834 ;; This function is called by:
  6835 ;;		_LoadAllFromEeprom
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           	psect	text32
  6840  0016A4                     __ptext32:
  6841                           	opt stack 0
  6842  0016A4                     _LoadEventsFromEeprom:
  6843                           	opt stack 19
  6844                           
  6845                           ; BSR set to: 0
  6846                           ;eeprom.c: 88: WORD_VAL Temp16, Address;
  6847                           ;eeprom.c: 89: Address.Val = 80;
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;incstack = 0
  6851  0016A4  6B6D               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  6852  0016A6  0E50               	movlw	80
  6853  0016A8  6F6C               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  6854                           
  6855                           ; BSR set to: 0
  6856                           ;eeprom.c: 90: for (int i=0; i<24; i++) {
  6857  0016AA  6B6A               	clrf	LoadEventsFromEeprom@i& (0+255),b
  6858  0016AC  6B6B               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  6859  0016AE                     l3368:
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;eeprom.c: 91: Temp16.v[0] = ReadEeprom(Address);
  6863  0016AE  D885               	call	PL48	;call to abstracted procedure
  6864  0016B0  EC02  F015         	call	_ReadEeprom	;wreg free
  6865  0016B4  0100               	movlb	0	; () banked
  6866  0016B6  6F6E               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;eeprom.c: 92: Address.Val++;
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;eeprom.c: 93: Temp16.v[1] = ReadEeprom(Address);
  6873  0016B8  D86E               	call	PL22	;call to abstracted procedure
  6874  0016BA  EC02  F015         	call	_ReadEeprom	;wreg free
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;eeprom.c: 94: EVENTS[i].START_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  6878  0016BE  D882               	call	PL60	;call to abstracted procedure
  6879  0016C0  ECB7  F014         	call	___wmul	;wreg free
  6880  0016C4  D84B               	call	PL18	;call to abstracted procedure
  6881  0016C6  ECB7  F014         	call	___wmul	;wreg free
  6882  0016CA  0E00               	movlw	low _EVENTS
  6883  0016CC  2560               	addwf	?___wmul& (0+255),w,b
  6884  0016CE  6ED9               	movwf	fsr2l,c
  6885  0016D0  0E02               	movlw	high _EVENTS
  6886  0016D2  D868               	call	PL42	;call to abstracted procedure
  6887                           
  6888                           ; BSR set to: 0
  6889                           ;eeprom.c: 95: Address.Val++;
  6890                           
  6891                           ; BSR set to: 0
  6892                           ;eeprom.c: 96: Temp16.v[0] = ReadEeprom(Address);
  6893  0016D4  D860               	call	PL22	;call to abstracted procedure
  6894  0016D6  EC02  F015         	call	_ReadEeprom	;wreg free
  6895  0016DA  0100               	movlb	0	; () banked
  6896  0016DC  6F6E               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;eeprom.c: 97: Address.Val++;
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;eeprom.c: 98: Temp16.v[1] = ReadEeprom(Address);
  6903  0016DE  D85B               	call	PL22	;call to abstracted procedure
  6904  0016E0  EC02  F015         	call	_ReadEeprom	;wreg free
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;eeprom.c: 99: EVENTS[i].END_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  6908  0016E4  D86F               	call	PL60	;call to abstracted procedure
  6909  0016E6  ECB7  F014         	call	___wmul	;wreg free
  6910  0016EA  D838               	call	PL18	;call to abstracted procedure
  6911  0016EC  ECB7  F014         	call	___wmul	;wreg free
  6912  0016F0  0E04               	movlw	low (_EVENTS+4)
  6913  0016F2  2560               	addwf	?___wmul& (0+255),w,b
  6914  0016F4  6ED9               	movwf	fsr2l,c
  6915  0016F6  0E02               	movlw	high (_EVENTS+4)
  6916  0016F8  D855               	call	PL42	;call to abstracted procedure
  6917                           
  6918                           ;eeprom.c: 100: Address.Val++;
  6919  0016FA  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  6920  0016FC  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;eeprom.c: 101: EVENTS[i].CYCLE = ReadEeprom(Address);
  6924  0016FE  D843               	call	PL20	;call to abstracted procedure
  6925  001700  ECB7  F014         	call	___wmul	;wreg free
  6926  001704  0E08               	movlw	low (_EVENTS+8)
  6927  001706  2560               	addwf	?___wmul& (0+255),w,b
  6928  001708  6ED9               	movwf	fsr2l,c
  6929  00170A  0E02               	movlw	high (_EVENTS+8)
  6930  00170C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6931  00170E  6EDA               	movwf	fsr2h,c
  6932  001710  D854               	call	PL48	;call to abstracted procedure
  6933  001712  EC02  F015         	call	_ReadEeprom	;wreg free
  6934  001716  6EDF               	movwf	indf2,c
  6935                           
  6936                           ;eeprom.c: 102: Address.Val++;
  6937  001718  0100               	movlb	0	; () banked
  6938                           
  6939                           ;eeprom.c: 103: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  6940  00171A  D83D               	call	PL22	;call to abstracted procedure
  6941  00171C  EC02  F015         	call	_ReadEeprom	;wreg free
  6942  001720  0100               	movlb	0	; () banked
  6943  001722  6F66               	movwf	??_LoadEventsFromEeprom& (0+255),b
  6944  001724  D830               	call	PL20	;call to abstracted procedure
  6945  001726  ECB7  F014         	call	___wmul	;wreg free
  6946  00172A  0E09               	movlw	low (_EVENTS+9)
  6947  00172C  2560               	addwf	?___wmul& (0+255),w,b
  6948  00172E  6ED9               	movwf	fsr2l,c
  6949  001730  0E02               	movlw	high (_EVENTS+9)
  6950  001732  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6951  001734  6EDA               	movwf	fsr2h,c
  6952  001736  4766               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  6953  001738  50DF               	movf	223,w,c
  6954  00173A  0100               	movlb	0	; () banked
  6955  00173C  1966               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  6956  00173E  0B01               	andlw	-255
  6957  001740  1966               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  6958  001742  6EDF               	movwf	223,c
  6959                           
  6960                           ; BSR set to: 2
  6961                           ;eeprom.c: 104: Address.Val++;
  6962  001744  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  6963  001746  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  6964                           
  6965                           ; BSR set to: 0
  6966  001748  4B6A               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  6967  00174A  2B6B               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  6968                           
  6969                           ; BSR set to: 0
  6970  00174C  BF6B               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  6971  00174E  D7AF               	goto	l3368
  6972  001750  516B               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  6973  001752  E103               	bnz	u2940
  6974  001754  0E18               	movlw	24
  6975  001756  5D6A               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  6976  001758  E3AA               	bnc	l3368
  6977  00175A                     u2940:
  6978                           
  6979                           ; BSR set to: 0
  6980  00175A  0012               	return		;funcret
  6981  00175C                     __end_of_LoadEventsFromEeprom:
  6982                           	opt stack 0
  6983  00175C                     PL18:
  6984                           	opt stack 19
  6985  00175C  516E               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  6986  00175E  0D3C               	mullw	60
  6987  001760  5160               	movf	?___wmul& (0+255),w,b
  6988  001762  24F3               	addwf	prodl,w,c
  6989  001764  6F66               	movwf	??_LoadEventsFromEeprom& (0+255),b
  6990  001766  5161               	movf	(?___wmul+1)& (0+255),w,b
  6991  001768  20F4               	addwfc	prodh,w,c
  6992  00176A  6F67               	movwf	(??_LoadEventsFromEeprom+1)& (0+255),b
  6993  00176C  6B68               	clrf	(??_LoadEventsFromEeprom+2)& (0+255),b
  6994  00176E  BF67               	btfsc	(??_LoadEventsFromEeprom+1)& (0+255),7,b
  6995  001770  0768               	decf	(??_LoadEventsFromEeprom+2)& (0+255),f,b
  6996  001772  5168               	movf	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  6997  001774  6F69               	movwf	(??_LoadEventsFromEeprom+3)& (0+255),b
  6998  001776  C06A  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  6999  00177A  C06B  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  7000  00177E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7001  001780  0E0A               	movlw	10
  7002  001782  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7003  001784  0C0A               	retlw	10
  7004  001786                     __end_ofPL18:
  7005                           	opt stack 0
  7006  001786                     PL20:
  7007                           	opt stack 19
  7008  001786  C06A  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  7009  00178A  C06B  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  7010  00178E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7011  001790  0E0A               	movlw	10
  7012  001792  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7013  001794  0C0A               	retlw	10
  7014  001796                     __end_ofPL20:
  7015                           	opt stack 0
  7016  001796                     PL22:
  7017                           	opt stack 19
  7018  001796  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  7019  001798  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  7020  00179A  C06C  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  7021  00179E  C06D  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  7022  0017A2  0012               	return	
  7023  0017A4                     __end_ofPL22:
  7024                           	opt stack 0
  7025  0017A4                     PL42:
  7026                           	opt stack 19
  7027  0017A4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7028  0017A6  6EDA               	movwf	fsr2h,c
  7029  0017A8  C066  FFDE         	movff	??_LoadEventsFromEeprom,postinc2
  7030  0017AC  C067  FFDE         	movff	??_LoadEventsFromEeprom+1,postinc2
  7031  0017B0  C068  FFDE         	movff	??_LoadEventsFromEeprom+2,postinc2
  7032  0017B4  C069  FFDE         	movff	??_LoadEventsFromEeprom+3,postinc2
  7033  0017B8  0012               	return	
  7034  0017BA                     __end_ofPL42:
  7035                           	opt stack 0
  7036  0017BA                     PL48:
  7037                           	opt stack 19
  7038  0017BA  C06C  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  7039  0017BE  C06D  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  7040  0017C2  0012               	return	
  7041  0017C4                     __end_ofPL48:
  7042                           	opt stack 0
  7043  0017C4                     PL60:
  7044                           	opt stack 19
  7045  0017C4  0100               	movlb	0	; () banked
  7046  0017C6  6F6F               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  7047  0017C8  C06F  F060         	movff	LoadEventsFromEeprom@Temp16+1,___wmul@multiplier
  7048  0017CC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  7049  0017CE  0E0E               	movlw	14
  7050  0017D0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7051  0017D2  0E10               	movlw	16
  7052  0017D4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7053  0017D6  0C10               	retlw	16
  7054  0017D8                     __end_ofPL60:
  7055                           	opt stack 0
  7056                           tosu	equ	0xFFF
  7057                           tosh	equ	0xFFE
  7058                           tosl	equ	0xFFD
  7059                           pclath	equ	0xFFA
  7060                           tblptru	equ	0xFF8
  7061                           tblptrh	equ	0xFF7
  7062                           tblptrl	equ	0xFF6
  7063                           tablat	equ	0xFF5
  7064                           prodh	equ	0xFF4
  7065                           prodl	equ	0xFF3
  7066                           intcon	equ	0xFF2
  7067                           postinc0	equ	0xFEE
  7068                           plusw0	equ	0xFEB
  7069                           wreg	equ	0xFE8
  7070                           indf1	equ	0xFE7
  7071                           postdec1	equ	0xFE5
  7072                           plusw1	equ	0xFE3
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           plusw2	equ	0xFDB
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _LoadCyclesFromEeprom *****************
  7084 ;; Defined at:
  7085 ;;		line 137 in file "libs/eeprom.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;  j               2   15[BANK0 ] int 
  7090 ;;  i               2   19[BANK0 ] int 
  7091 ;;  i               2   17[BANK0 ] int 
  7092 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7097 ;; Tracked objects:
  7098 ;;		On entry : 3F/0
  7099 ;;		On exit  : 3F/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7103 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7104 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7105 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7106 ;;Total ram usage:       15 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; Hardware stack levels required when called:   10
  7109 ;; This function calls:
  7110 ;;		_ReadEeprom
  7111 ;;		___wmul
  7112 ;; This function is called by:
  7113 ;;		_LoadAllFromEeprom
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text33
  7118  00155E                     __ptext33:
  7119                           	opt stack 0
  7120  00155E                     _LoadCyclesFromEeprom:
  7121                           	opt stack 19
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;eeprom.c: 138: WORD_VAL Address;
  7125                           ;eeprom.c: 139: Address.Val = 63;
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;incstack = 0
  7129  00155E  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  7130  001560  0E3F               	movlw	63
  7131  001562  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;eeprom.c: 141: for (int i=0; i<17; i++) {
  7135  001564  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  7136  001566  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  7137  001568                     l3460:
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;eeprom.c: 142: CYCLES[i].END_STATE = ReadEeprom(Address);
  7141  001568  D898               	call	PL6	;call to abstracted procedure
  7142  00156A  0E03               	movlw	3
  7143  00156C  D892               	call	PL4	;call to abstracted procedure
  7144  00156E  90D8               	bcf	status,0,c
  7145  001570  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  7146  001572  6ED9               	movwf	fsr2l,c
  7147  001574  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  7148  001576  6EDA               	movwf	fsr2h,c
  7149  001578  90D8               	bcf	status,0,c
  7150  00157A  36D9               	rlcf	fsr2l,f,c
  7151  00157C  36DA               	rlcf	fsr2h,f,c
  7152  00157E  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  7153  001580  26D9               	addwf	fsr2l,f,c
  7154  001582  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  7155  001584  22DA               	addwfc	fsr2h,f,c
  7156  001586  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  7157  00158A  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  7158  00158E  EC02  F015         	call	_ReadEeprom	;wreg free
  7159  001592  6EDF               	movwf	indf2,c
  7160                           
  7161                           ;eeprom.c: 143: Address.Val++;
  7162  001594  0100               	movlb	0	; () banked
  7163  001596  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  7164  001598  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  7165                           
  7166                           ; BSR set to: 0
  7167  00159A  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  7168  00159C  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  7169                           
  7170                           ; BSR set to: 0
  7171  00159E  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  7172  0015A0  D7E3               	goto	l3460
  7173  0015A2  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  7174  0015A4  E103               	bnz	u3020
  7175  0015A6  0E11               	movlw	17
  7176  0015A8  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  7177  0015AA  E3DE               	bnc	l3460
  7178  0015AC                     u3020:
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;eeprom.c: 144: }
  7182                           ;eeprom.c: 146: for (int i=0; i<17; i++) {
  7183  0015AC  6B73               	clrf	LoadCyclesFromEeprom@i_1299& (0+255),b
  7184  0015AE  6B74               	clrf	(LoadCyclesFromEeprom@i_1299+1)& (0+255),b
  7185  0015B0                     l3472:
  7186                           
  7187                           ; BSR set to: 0
  7188                           ;eeprom.c: 147: if (i==0)
  7189  0015B0  5173               	movf	LoadCyclesFromEeprom@i_1299& (0+255),w,b
  7190  0015B2  1174               	iorwf	(LoadCyclesFromEeprom@i_1299+1)& (0+255),w,b
  7191  0015B4  E106               	bnz	l3476
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;eeprom.c: 148: CYCLES[i].START_STATE = 0;
  7195  0015B6  D871               	call	PL6	;call to abstracted procedure
  7196  0015B8  0E02               	movlw	2
  7197  0015BA  D86B               	call	PL4	;call to abstracted procedure
  7198  0015BC  D85D               	call	PL2	;call to abstracted procedure
  7199  0015BE  6ADF               	clrf	indf2,c
  7200  0015C0  D01E               	goto	l3478
  7201  0015C2                     l3476:
  7202                           
  7203                           ; BSR set to: 0
  7204                           ;eeprom.c: 149: else
  7205                           ;eeprom.c: 152: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  7206  0015C2  D86B               	call	PL6	;call to abstracted procedure
  7207  0015C4  0E02               	movlw	2
  7208  0015C6  D865               	call	PL4	;call to abstracted procedure
  7209  0015C8  D857               	call	PL2	;call to abstracted procedure
  7210  0015CA  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  7211  0015CC  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  7212  0015CE  0E00               	movlw	low _CYCLES
  7213  0015D0  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  7214  0015D2  0E01               	movlw	high _CYCLES
  7215  0015D4  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  7216  0015D6  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  7217  0015D8  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  7218  0015DA  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  7219  0015DC  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  7220  0015DE  90D8               	bcf	status,0,c
  7221  0015E0  3573               	rlcf	LoadCyclesFromEeprom@i_1299& (0+255),w,b
  7222  0015E2  6EE1               	movwf	fsr1l,c
  7223  0015E4  3574               	rlcf	(LoadCyclesFromEeprom@i_1299+1)& (0+255),w,b
  7224  0015E6  6EE2               	movwf	fsr1h,c
  7225  0015E8  90D8               	bcf	status,0,c
  7226  0015EA  36E1               	rlcf	fsr1l,f,c
  7227  0015EC  36E2               	rlcf	fsr1h,f,c
  7228  0015EE  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  7229  0015F0  26E1               	addwf	fsr1l,f,c
  7230  0015F2  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  7231  0015F4  22E2               	addwfc	fsr1h,f,c
  7232  0015F6  50E7               	movf	indf1,w,c
  7233  0015F8  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  7234  0015FA  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  7235  0015FC  6EDF               	movwf	indf2,c
  7236  0015FE                     l3478:
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;eeprom.c: 153: CYCLES[i].PERIOD = 0;
  7240  0015FE  D84D               	call	PL6	;call to abstracted procedure
  7241  001600  D83B               	call	PL2	;call to abstracted procedure
  7242  001602  6ADE               	clrf	postinc2,c
  7243  001604  6ADD               	clrf	postdec2,c
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;eeprom.c: 154: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  7247  001606  D849               	call	PL6	;call to abstracted procedure
  7248  001608  0E02               	movlw	2
  7249  00160A  D843               	call	PL4	;call to abstracted procedure
  7250  00160C  D835               	call	PL2	;call to abstracted procedure
  7251  00160E  50DF               	movf	indf2,w,c
  7252  001610  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  7253  001612  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  7254  001614  D017               	goto	l3486
  7255  001616                     l3482:
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;eeprom.c: 155: CYCLES[i].PERIOD += STATES[j].PERIOD;
  7259  001616  D841               	call	PL6	;call to abstracted procedure
  7260  001618  D82F               	call	PL2	;call to abstracted procedure
  7261  00161A  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  7262  00161E  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  7263  001622  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7264  001624  0E06               	movlw	6
  7265  001626  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7266  001628  ECB7  F014         	call	___wmul	;wreg free
  7267  00162C  0EF0               	movlw	low _STATES
  7268  00162E  2560               	addwf	?___wmul& (0+255),w,b
  7269  001630  6EE1               	movwf	fsr1l,c
  7270  001632  0E02               	movlw	high _STATES
  7271  001634  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7272  001636  6EE2               	movwf	fsr1h,c
  7273  001638  50E7               	movf	indf1,w,c
  7274  00163A  26DE               	addwf	postinc2,f,c
  7275  00163C  0E00               	movlw	0
  7276  00163E  22DD               	addwfc	postdec2,f,c
  7277                           
  7278                           ; BSR set to: 0
  7279  001640  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  7280  001642  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  7281  001644                     l3486:
  7282                           
  7283                           ; BSR set to: 0
  7284  001644  D82A               	call	PL6	;call to abstracted procedure
  7285  001646  0E03               	movlw	3
  7286  001648  D824               	call	PL4	;call to abstracted procedure
  7287  00164A  D816               	call	PL2	;call to abstracted procedure
  7288  00164C  50DF               	movf	indf2,w,c
  7289  00164E  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  7290  001650  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  7291  001652  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  7292  001654  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  7293  001656  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  7294  001658  0A80               	xorlw	128
  7295  00165A  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  7296  00165C  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  7297  00165E  0A80               	xorlw	128
  7298  001660  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  7299  001662  E2D9               	bc	l3482
  7300                           
  7301                           ; BSR set to: 0
  7302  001664  4B73               	infsnz	LoadCyclesFromEeprom@i_1299& (0+255),f,b
  7303  001666  2B74               	incf	(LoadCyclesFromEeprom@i_1299+1)& (0+255),f,b
  7304                           
  7305                           ; BSR set to: 0
  7306  001668  BF74               	btfsc	(LoadCyclesFromEeprom@i_1299+1)& (0+255),7,b
  7307  00166A  D7A2               	goto	l3472
  7308  00166C  5174               	movf	(LoadCyclesFromEeprom@i_1299+1)& (0+255),w,b
  7309  00166E  E103               	bnz	u3050
  7310  001670  0E11               	movlw	17
  7311  001672  5D73               	subwf	LoadCyclesFromEeprom@i_1299& (0+255),w,b
  7312  001674  E39D               	bnc	l3472
  7313  001676                     u3050:
  7314                           
  7315                           ; BSR set to: 0
  7316  001676  0012               	return		;funcret
  7317  001678                     __end_of_LoadCyclesFromEeprom:
  7318                           	opt stack 0
  7319  001678                     PL2:
  7320                           	opt stack 19
  7321  001678  90D8               	bcf	status,0,c
  7322  00167A  3573               	rlcf	LoadCyclesFromEeprom@i_1299& (0+255),w,b
  7323  00167C  6ED9               	movwf	fsr2l,c
  7324  00167E  3574               	rlcf	(LoadCyclesFromEeprom@i_1299+1)& (0+255),w,b
  7325  001680  6EDA               	movwf	fsr2h,c
  7326  001682  90D8               	bcf	status,0,c
  7327  001684  36D9               	rlcf	fsr2l,f,c
  7328  001686  36DA               	rlcf	fsr2h,f,c
  7329  001688  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  7330  00168A  26D9               	addwf	fsr2l,f,c
  7331  00168C  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  7332  00168E  22DA               	addwfc	fsr2h,f,c
  7333  001690  0012               	return	
  7334  001692                     __end_ofPL2:
  7335                           	opt stack 0
  7336  001692                     PL4:
  7337                           	opt stack 19
  7338  001692  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  7339  001694  0E00               	movlw	0
  7340  001696  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  7341  001698  0C00               	retlw	0
  7342  00169A                     __end_ofPL4:
  7343                           	opt stack 0
  7344  00169A                     PL6:
  7345                           	opt stack 19
  7346  00169A  0E00               	movlw	low _CYCLES
  7347  00169C  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  7348  00169E  0E01               	movlw	high _CYCLES
  7349  0016A0  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  7350  0016A2  0012               	return	
  7351  0016A4                     __end_ofPL6:
  7352                           	opt stack 0
  7353                           tosu	equ	0xFFF
  7354                           tosh	equ	0xFFE
  7355                           tosl	equ	0xFFD
  7356                           pclath	equ	0xFFA
  7357                           tblptru	equ	0xFF8
  7358                           tblptrh	equ	0xFF7
  7359                           tblptrl	equ	0xFF6
  7360                           tablat	equ	0xFF5
  7361                           prodh	equ	0xFF4
  7362                           prodl	equ	0xFF3
  7363                           intcon	equ	0xFF2
  7364                           postinc0	equ	0xFEE
  7365                           plusw0	equ	0xFEB
  7366                           wreg	equ	0xFE8
  7367                           indf1	equ	0xFE7
  7368                           postdec1	equ	0xFE5
  7369                           plusw1	equ	0xFE3
  7370                           fsr1h	equ	0xFE2
  7371                           fsr1l	equ	0xFE1
  7372                           indf2	equ	0xFDF
  7373                           postinc2	equ	0xFDE
  7374                           postdec2	equ	0xFDD
  7375                           plusw2	equ	0xFDB
  7376                           fsr2h	equ	0xFDA
  7377                           fsr2l	equ	0xFD9
  7378                           status	equ	0xFD8
  7379                           
  7380 ;; *************** function ___wmul *****************
  7381 ;; Defined at:
  7382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  7383 ;; Parameters:    Size  Location     Type
  7384 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7385 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7386 ;; Auto vars:     Size  Location     Type
  7387 ;;  product         2    4[BANK0 ] unsigned int 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  2    0[BANK0 ] unsigned int 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0, prodl, prodh
  7392 ;; Tracked objects:
  7393 ;;		On entry : 3F/0
  7394 ;;		On exit  : 3F/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7398 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7400 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7401 ;;Total ram usage:        6 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    9
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_LoadSettingsFromEeprom
  7408 ;;		_LoadEventsFromEeprom
  7409 ;;		_LoadStatesFromEeprom
  7410 ;;		_LoadCyclesFromEeprom
  7411 ;;		_AdjustDayLightSaving
  7412 ;; This function uses a non-reentrant model
  7413 ;;
  7414                           
  7415                           	psect	text34
  7416  00296E                     __ptext34:
  7417                           	opt stack 0
  7418  00296E                     ___wmul:
  7419                           	opt stack 19
  7420                           
  7421                           ; BSR set to: 0
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;incstack = 0
  7425  00296E  5160               	movf	___wmul@multiplier& (0+255),w,b
  7426  002970  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7427  002972  CFF3 F064          	movff	prodl,___wmul@product
  7428  002976  CFF4 F065          	movff	prodh,___wmul@product+1
  7429  00297A  5160               	movf	___wmul@multiplier& (0+255),w,b
  7430  00297C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7431  00297E  50F3               	movf	prodl,w,c
  7432  002980  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7433  002982  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7434  002984  0362               	mulwf	___wmul@multiplicand& (0+255),b
  7435  002986  50F3               	movf	prodl,w,c
  7436  002988  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  7437                           
  7438                           ; BSR set to: 0
  7439  00298A  C064  F060         	movff	___wmul@product,?___wmul
  7440  00298E  C065  F061         	movff	___wmul@product+1,?___wmul+1
  7441                           
  7442                           ; BSR set to: 0
  7443  002992  0012               	return		;funcret
  7444  002994                     __end_of___wmul:
  7445                           	opt stack 0
  7446                           tosu	equ	0xFFF
  7447                           tosh	equ	0xFFE
  7448                           tosl	equ	0xFFD
  7449                           pclath	equ	0xFFA
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           intcon	equ	0xFF2
  7457                           postinc0	equ	0xFEE
  7458                           plusw0	equ	0xFEB
  7459                           wreg	equ	0xFE8
  7460                           indf1	equ	0xFE7
  7461                           postdec1	equ	0xFE5
  7462                           plusw1	equ	0xFE3
  7463                           fsr1h	equ	0xFE2
  7464                           fsr1l	equ	0xFE1
  7465                           indf2	equ	0xFDF
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           plusw2	equ	0xFDB
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function _ReadEeprom *****************
  7474 ;; Defined at:
  7475 ;;		line 3 in file "libs/eeprom.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;		None
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      unsigned char 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7493 ;;Total ram usage:        2 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    9
  7496 ;; This function calls:
  7497 ;;		Nothing
  7498 ;; This function is called by:
  7499 ;;		_LoadSettingsFromEeprom
  7500 ;;		_LoadEventsFromEeprom
  7501 ;;		_LoadStatesFromEeprom
  7502 ;;		_LoadCyclesFromEeprom
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text35
  7507  002A04                     __ptext35:
  7508                           	opt stack 0
  7509  002A04                     _ReadEeprom:
  7510                           	opt stack 19
  7511                           
  7512                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;incstack = 0
  7516  002A04  0E3F               	movlw	-193
  7517  002A06  1681               	andwf	3969,f,c	;volatile
  7518                           
  7519                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  7520  002A08  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  7521                           
  7522                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  7523  002A0C  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  7524                           
  7525                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  7526  002A10  8081               	bsf	3969,0,c	;volatile
  7527                           
  7528                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  7529  002A12  8E81               	bsf	3969,7,c	;volatile
  7530                           
  7531                           ;eeprom.c: 12: return NVMDAT;
  7532  002A14  5080               	movf	3968,w,c	;volatile
  7533  002A16  0012               	return		;funcret
  7534  002A18                     __end_of_ReadEeprom:
  7535                           	opt stack 0
  7536                           tosu	equ	0xFFF
  7537                           tosh	equ	0xFFE
  7538                           tosl	equ	0xFFD
  7539                           pclath	equ	0xFFA
  7540                           tblptru	equ	0xFF8
  7541                           tblptrh	equ	0xFF7
  7542                           tblptrl	equ	0xFF6
  7543                           tablat	equ	0xFF5
  7544                           prodh	equ	0xFF4
  7545                           prodl	equ	0xFF3
  7546                           intcon	equ	0xFF2
  7547                           postinc0	equ	0xFEE
  7548                           plusw0	equ	0xFEB
  7549                           wreg	equ	0xFE8
  7550                           indf1	equ	0xFE7
  7551                           postdec1	equ	0xFE5
  7552                           plusw1	equ	0xFE3
  7553                           fsr1h	equ	0xFE2
  7554                           fsr1l	equ	0xFE1
  7555                           indf2	equ	0xFDF
  7556                           postinc2	equ	0xFDE
  7557                           postdec2	equ	0xFDD
  7558                           plusw2	equ	0xFDB
  7559                           fsr2h	equ	0xFDA
  7560                           fsr2l	equ	0xFD9
  7561                           status	equ	0xFD8
  7562                           
  7563 ;; *************** function _Lcd_Text *****************
  7564 ;; Defined at:
  7565 ;;		line 76 in file "libs/HD44780.c"
  7566 ;; Parameters:    Size  Location     Type
  7567 ;;  y               1    wreg     unsigned char 
  7568 ;;  x               1    3[BANK0 ] unsigned char 
  7569 ;;  buffer          1    4[BANK0 ] PTR unsigned char 
  7570 ;;		 -> STR_2(3), STR_1(3), 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  y               1    5[BANK0 ] unsigned char 
  7573 ;;  data            1    6[BANK0 ] unsigned char 
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  1    wreg      void 
  7576 ;; Registers used:
  7577 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 3F/0
  7580 ;;		On exit  : 0/0
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7583 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7584 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7586 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7587 ;;Total ram usage:        4 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:   11
  7590 ;; This function calls:
  7591 ;;		_Lcd_CharCP
  7592 ;;		_Lcd_Command
  7593 ;; This function is called by:
  7594 ;;		_main
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           	psect	text36
  7599  0025D2                     __ptext36:
  7600                           	opt stack 0
  7601  0025D2                     _Lcd_Text:
  7602                           	opt stack 19
  7603                           
  7604                           ;incstack = 0
  7605                           ;Lcd_Text@y stored from wreg
  7606  0025D2  6F65               	movwf	Lcd_Text@y& (0+255),b
  7607                           
  7608                           ;HD44780.c: 77: unsigned char data;
  7609                           ;HD44780.c: 78: switch(y){
  7610  0025D4  D00D               	goto	l3704
  7611  0025D6                     l3694:
  7612                           
  7613                           ; BSR set to: 0
  7614  0025D6  5163               	movf	Lcd_Text@x& (0+255),w,b
  7615  0025D8  0F7F               	addlw	127
  7616  0025DA  D008               	goto	L10
  7617  0025DC                     l3696:
  7618                           
  7619                           ; BSR set to: 0
  7620  0025DC  5163               	movf	Lcd_Text@x& (0+255),w,b
  7621  0025DE  0FBF               	addlw	191
  7622  0025E0  D005               	goto	L10
  7623  0025E2                     l3698:
  7624                           
  7625                           ; BSR set to: 0
  7626  0025E2  5163               	movf	Lcd_Text@x& (0+255),w,b
  7627  0025E4  0F93               	addlw	147
  7628  0025E6  D002               	goto	L10
  7629  0025E8                     l3700:
  7630                           
  7631                           ; BSR set to: 0
  7632  0025E8  5163               	movf	Lcd_Text@x& (0+255),w,b
  7633  0025EA  0FD3               	addlw	211
  7634  0025EC                     L10:
  7635  0025EC  6F66               	movwf	Lcd_Text@data& (0+255),b
  7636  0025EE  D00A               	goto	l3706
  7637  0025F0                     l3704:
  7638  0025F0  0100               	movlb	0	; () banked
  7639  0025F2  5165               	movf	Lcd_Text@y& (0+255),w,b
  7640                           
  7641                           ; Switch size 1, requested type "space"
  7642                           ; Number of cases is 4, Range of values is 1 to 4
  7643                           ; switch strategies available:
  7644                           ; Name         Instructions Cycles
  7645                           ; simple_byte           13     7 (average)
  7646                           ;	Chosen strategy is simple_byte
  7647  0025F4  0A01               	xorlw	1	; case 1
  7648  0025F6  E0EF               	bz	l3694
  7649  0025F8  0A03               	xorlw	3	; case 2
  7650  0025FA  E0F0               	bz	l3696
  7651  0025FC  0A01               	xorlw	1	; case 3
  7652  0025FE  E0F1               	bz	l3698
  7653  002600  0A07               	xorlw	7	; case 4
  7654  002602  E0F2               	bz	l3700
  7655  002604                     l3706:
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;HD44780.c: 84: Lcd_Command(data);
  7659  002604  5166               	movf	Lcd_Text@data& (0+255),w,b
  7660  002606  EC65  F00E         	call	_Lcd_Command
  7661                           
  7662                           ;HD44780.c: 85: while(*buffer)
  7663  00260A  D005               	goto	l3712
  7664  00260C                     l3708:
  7665                           
  7666                           ;HD44780.c: 86: {
  7667                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  7668  00260C  D807               	call	PL82	;call to abstracted procedure
  7669  00260E  EC47  F00F         	call	_Lcd_CharCP
  7670                           
  7671                           ;HD44780.c: 88: buffer++;
  7672  002612  0100               	movlb	0	; () banked
  7673  002614  2B64               	incf	Lcd_Text@buffer& (0+255),f,b
  7674  002616                     l3712:
  7675  002616  D802               	call	PL82	;call to abstracted procedure
  7676  002618  E1F9               	bnz	l3708
  7677  00261A  0012               	return		;funcret
  7678  00261C                     __end_of_Lcd_Text:
  7679                           	opt stack 0
  7680  00261C                     PL82:
  7681                           	opt stack 19
  7682  00261C  C064  FFF6         	movff	Lcd_Text@buffer,tblptrl
  7683  002620                     	if	1	;There is more than 1 active tblptr byte
  7684  002620  0E0F               	movlw	high __smallconst
  7685  002622  6EF7               	movwf	tblptrh,c
  7686  002624                     	endif
  7687  002624                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7688  002624  6AF8               	clrf	tblptru,c
  7689  002626                     	endif
  7690  002626                     	if	0	;tblptru may be non-zero
  7691  002626                     	endif
  7692  002626  0008               	tblrd		*
  7693  002628  50F5               	movf	tablat,w,c
  7694  00262A  0012               	return	
  7695  00262C                     __end_ofPL82:
  7696                           	opt stack 0
  7697                           tosu	equ	0xFFF
  7698                           tosh	equ	0xFFE
  7699                           tosl	equ	0xFFD
  7700                           pclath	equ	0xFFA
  7701                           tblptru	equ	0xFF8
  7702                           tblptrh	equ	0xFF7
  7703                           tblptrl	equ	0xFF6
  7704                           tablat	equ	0xFF5
  7705                           prodh	equ	0xFF4
  7706                           prodl	equ	0xFF3
  7707                           intcon	equ	0xFF2
  7708                           postinc0	equ	0xFEE
  7709                           plusw0	equ	0xFEB
  7710                           wreg	equ	0xFE8
  7711                           indf1	equ	0xFE7
  7712                           postdec1	equ	0xFE5
  7713                           plusw1	equ	0xFE3
  7714                           fsr1h	equ	0xFE2
  7715                           fsr1l	equ	0xFE1
  7716                           indf2	equ	0xFDF
  7717                           postinc2	equ	0xFDE
  7718                           postdec2	equ	0xFDD
  7719                           plusw2	equ	0xFDB
  7720                           fsr2h	equ	0xFDA
  7721                           fsr2l	equ	0xFD9
  7722                           status	equ	0xFD8
  7723                           
  7724 ;; *************** function _Lcd_CharCP *****************
  7725 ;; Defined at:
  7726 ;;		line 116 in file "libs/HD44780.c"
  7727 ;; Parameters:    Size  Location     Type
  7728 ;;  c               1    wreg     unsigned char 
  7729 ;; Auto vars:     Size  Location     Type
  7730 ;;  c               1    2[BANK0 ] unsigned char 
  7731 ;; Return value:  Size  Location     Type
  7732 ;;                  1    wreg      void 
  7733 ;; Registers used:
  7734 ;;		wreg, status,2, status,0, cstack
  7735 ;; Tracked objects:
  7736 ;;		On entry : 0/0
  7737 ;;		On exit  : 0/0
  7738 ;;		Unchanged: 0/0
  7739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7744 ;;Total ram usage:        3 bytes
  7745 ;; Hardware stack levels used:    1
  7746 ;; Hardware stack levels required when called:   10
  7747 ;; This function calls:
  7748 ;;		_Lcd_Delay5us
  7749 ;; This function is called by:
  7750 ;;		_Lcd_Text
  7751 ;;		_Lcd_WriteChar
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           	psect	text37
  7756  001E8E                     __ptext37:
  7757                           	opt stack 0
  7758  001E8E                     _Lcd_CharCP:
  7759                           	opt stack 18
  7760                           
  7761                           ;incstack = 0
  7762                           ;Lcd_CharCP@c stored from wreg
  7763  001E8E  0100               	movlb	0	; () banked
  7764  001E90  6F62               	movwf	Lcd_CharCP@c& (0+255),b
  7765                           
  7766                           ;HD44780.c: 117: LATAbits.LA1 = 0; LATAbits.LA0 = 1;
  7767  001E92  9283               	bcf	3971,1,c	;volatile
  7768  001E94  8083               	bsf	3971,0,c	;volatile
  7769                           
  7770                           ;HD44780.c: 118: LATAbits.LA5 = (c & 0b10000000)>>7; LATAbits.LA4 = (c & 0b01000000)>>6;
  7771  001E96  6B60               	clrf	??_Lcd_CharCP& (0+255),b
  7772  001E98  AF62               	btfss	Lcd_CharCP@c& (0+255),7,b
  7773  001E9A  D001               	bra	u2235
  7774  001E9C  2B60               	incf	??_Lcd_CharCP& (0+255),f,b
  7775  001E9E                     u2235:
  7776  001E9E  D835               	call	PL30	;call to abstracted procedure
  7777  001EA0  0E06               	movlw	6
  7778  001EA2  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  7779  001EA4                     u2245:
  7780  001EA4  90D8               	bcf	status,0,c
  7781  001EA6  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  7782  001EA8  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  7783  001EAA  D7FC               	goto	u2245
  7784                           
  7785                           ;HD44780.c: 119: LATAbits.LA3 = (c & 0b00100000)>>5; LATAbits.LA2 = (c & 0b00010000)>>4;
  7786  001EAC  D846               	call	PL38	;call to abstracted procedure
  7787  001EAE  0E05               	movlw	5
  7788  001EB0  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  7789  001EB2                     u2255:
  7790  001EB2  90D8               	bcf	status,0,c
  7791  001EB4  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  7792  001EB6  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  7793  001EB8  D7FC               	goto	u2255
  7794  001EBA  0E01               	movlw	1
  7795  001EBC  D832               	call	PL32	;call to abstracted procedure
  7796  001EBE  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  7797  001EC0  0E0F               	movlw	15
  7798  001EC2  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  7799  001EC4  0E01               	movlw	1
  7800  001EC6  D844               	call	PL64	;call to abstracted procedure
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;HD44780.c: 120: _delay(10);
  7804  001EC8  0E03               	movlw	3
  7805  001ECA                     u3527:
  7806  001ECA  2EE8               	decfsz	wreg,f,c
  7807  001ECC  D7FE               	bra	u3527
  7808  001ECE  F000               	nop	
  7809                           
  7810                           ;HD44780.c: 121: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  7811  001ED0  8283               	bsf	3971,1,c	;volatile
  7812  001ED2  EC32  F015         	call	_Lcd_Delay5us	;wreg free
  7813  001ED6  9283               	bcf	3971,1,c	;volatile
  7814                           
  7815                           ;HD44780.c: 122: LATAbits.LA5 = (c & 0b00001000)>>3; LATAbits.LA4 = (c & 0b00000100)>>2;
  7816  001ED8  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  7817  001EDC  0100               	movlb	0	; () banked
  7818  001EDE  90D8               	bcf	status,0,c
  7819  001EE0  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  7820  001EE2  D83F               	call	PL80	;call to abstracted procedure
  7821                           
  7822                           ; BSR set to: 0
  7823  001EE4  D812               	call	PL30	;call to abstracted procedure
  7824  001EE6  D83D               	call	PL80	;call to abstracted procedure
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;HD44780.c: 123: LATAbits.LA3 = (c & 0b00000010)>>1; LATAbits.LA2 = (c & 0b00000001);
  7828  001EE8  D828               	call	PL38	;call to abstracted procedure
  7829  001EEA  90D8               	bcf	status,0,c
  7830  001EEC  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  7831  001EEE  0E01               	movlw	1
  7832                           
  7833                           ; BSR set to: 0
  7834  001EF0  D818               	call	PL32	;call to abstracted procedure
  7835  001EF2  0E01               	movlw	1
  7836  001EF4  D82D               	call	PL64	;call to abstracted procedure
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;HD44780.c: 124: _delay(10);
  7840  001EF6  0E03               	movlw	3
  7841  001EF8                     u3537:
  7842  001EF8  2EE8               	decfsz	wreg,f,c
  7843  001EFA  D7FE               	bra	u3537
  7844  001EFC  F000               	nop	
  7845                           
  7846                           ;HD44780.c: 125: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  7847  001EFE  8283               	bsf	3971,1,c	;volatile
  7848  001F00  EC32  F015         	call	_Lcd_Delay5us	;wreg free
  7849  001F04  9283               	bcf	3971,1,c	;volatile
  7850                           
  7851                           ;HD44780.c: 126: Lcd_Delay5us();
  7852  001F06  EF32  F015         	goto	_Lcd_Delay5us	;wreg free
  7853  001F0A                     __end_of_Lcd_CharCP:
  7854                           	opt stack 0
  7855  001F0A                     PL30:
  7856                           	opt stack 18
  7857  001F0A  0E01               	movlw	1
  7858  001F0C  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  7859  001F0E  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  7860  001F10  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  7861  001F12  5083               	movf	3971,w,c	;volatile
  7862  001F14  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7863  001F16  0BDF               	andlw	-33
  7864  001F18  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7865  001F1A  6E83               	movwf	3971,c	;volatile
  7866  001F1C  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  7867  001F20  0012               	return	
  7868  001F22                     __end_ofPL30:
  7869                           	opt stack 0
  7870  001F22                     PL32:
  7871                           	opt stack 18
  7872  001F22  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  7873  001F24  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  7874  001F26  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  7875  001F28  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  7876  001F2A  5083               	movf	3971,w,c	;volatile
  7877  001F2C  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7878  001F2E  0BF7               	andlw	-9
  7879  001F30  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7880  001F32  6E83               	movwf	3971,c	;volatile
  7881  001F34  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  7882  001F38  0012               	return	
  7883  001F3A                     __end_ofPL32:
  7884                           	opt stack 0
  7885  001F3A                     PL38:
  7886                           	opt stack 18
  7887  001F3A  0E01               	movlw	1
  7888  001F3C  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  7889  001F3E  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  7890  001F40  5083               	movf	3971,w,c	;volatile
  7891  001F42  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7892  001F44  0BEF               	andlw	-17
  7893  001F46  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7894  001F48  6E83               	movwf	3971,c	;volatile
  7895  001F4A  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  7896  001F4E  0012               	return	
  7897  001F50                     __end_ofPL38:
  7898                           	opt stack 0
  7899  001F50                     PL64:
  7900                           	opt stack 18
  7901  001F50  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  7902  001F52  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  7903  001F54  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  7904  001F56  5083               	movf	3971,w,c	;volatile
  7905  001F58  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7906  001F5A  0BFB               	andlw	-5
  7907  001F5C  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  7908  001F5E  6E83               	movwf	3971,c	;volatile
  7909  001F60  0012               	return	
  7910  001F62                     __end_ofPL64:
  7911                           	opt stack 0
  7912  001F62                     PL80:
  7913                           	opt stack 18
  7914  001F62  90D8               	bcf	status,0,c
  7915  001F64  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  7916  001F66  90D8               	bcf	status,0,c
  7917  001F68  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  7918  001F6A  0012               	return	
  7919  001F6C                     __end_ofPL80:
  7920                           	opt stack 0
  7921                           tosu	equ	0xFFF
  7922                           tosh	equ	0xFFE
  7923                           tosl	equ	0xFFD
  7924                           pclath	equ	0xFFA
  7925                           tblptru	equ	0xFF8
  7926                           tblptrh	equ	0xFF7
  7927                           tblptrl	equ	0xFF6
  7928                           tablat	equ	0xFF5
  7929                           prodh	equ	0xFF4
  7930                           prodl	equ	0xFF3
  7931                           intcon	equ	0xFF2
  7932                           postinc0	equ	0xFEE
  7933                           plusw0	equ	0xFEB
  7934                           wreg	equ	0xFE8
  7935                           indf1	equ	0xFE7
  7936                           postdec1	equ	0xFE5
  7937                           plusw1	equ	0xFE3
  7938                           fsr1h	equ	0xFE2
  7939                           fsr1l	equ	0xFE1
  7940                           indf2	equ	0xFDF
  7941                           postinc2	equ	0xFDE
  7942                           postdec2	equ	0xFDD
  7943                           plusw2	equ	0xFDB
  7944                           fsr2h	equ	0xFDA
  7945                           fsr2l	equ	0xFD9
  7946                           status	equ	0xFD8
  7947                           
  7948 ;; *************** function _Lcd_Init *****************
  7949 ;; Defined at:
  7950 ;;		line 17 in file "libs/HD44780.c"
  7951 ;; Parameters:    Size  Location     Type
  7952 ;;		None
  7953 ;; Auto vars:     Size  Location     Type
  7954 ;;  data            1    3[BANK0 ] unsigned char 
  7955 ;; Return value:  Size  Location     Type
  7956 ;;                  1    wreg      void 
  7957 ;; Registers used:
  7958 ;;		wreg, status,2, status,0, cstack
  7959 ;; Tracked objects:
  7960 ;;		On entry : 3F/0
  7961 ;;		On exit  : 0/0
  7962 ;;		Unchanged: 0/0
  7963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7965 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7967 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7968 ;;Total ram usage:        1 bytes
  7969 ;; Hardware stack levels used:    1
  7970 ;; Hardware stack levels required when called:   11
  7971 ;; This function calls:
  7972 ;;		_Lcd_Command
  7973 ;;		_Lcd_Delay5500us
  7974 ;;		_Lcd_Delay5us
  7975 ;; This function is called by:
  7976 ;;		_main
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           	psect	text38
  7981  00229A                     __ptext38:
  7982                           	opt stack 0
  7983  00229A                     _Lcd_Init:
  7984                           	opt stack 19
  7985                           
  7986                           ; BSR set to: 0
  7987                           ;HD44780.c: 23: unsigned char data;
  7988                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  7989                           
  7990                           ;incstack = 0
  7991  00229A  9A88               	bcf	3976,5,c	;volatile
  7992  00229C  9888               	bcf	3976,4,c	;volatile
  7993  00229E  9688               	bcf	3976,3,c	;volatile
  7994  0022A0  9488               	bcf	3976,2,c	;volatile
  7995  0022A2  9288               	bcf	3976,1,c	;volatile
  7996  0022A4  9088               	bcf	3976,0,c	;volatile
  7997                           
  7998                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  7999  0022A6  9A83               	bcf	3971,5,c	;volatile
  8000  0022A8  9883               	bcf	3971,4,c	;volatile
  8001  0022AA  9683               	bcf	3971,3,c	;volatile
  8002  0022AC  9483               	bcf	3971,2,c	;volatile
  8003  0022AE  9283               	bcf	3971,1,c	;volatile
  8004  0022B0  9083               	bcf	3971,0,c	;volatile
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  8008  0022B2  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8009  0022B6  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8010  0022BA  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8011                           
  8012                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  8013  0022BE  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8014  0022C2  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8015  0022C6  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8016                           
  8017                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  8018  0022CA  0E01               	movlw	1
  8019  0022CC  0100               	movlb	0	; () banked
  8020  0022CE  6F63               	movwf	Lcd_Init@data& (0+255),b
  8021  0022D0                     l214:
  8022                           
  8023                           ; BSR set to: 0
  8024                           ;HD44780.c: 29: {
  8025                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8026  0022D0  D82F               	call	PL86	;call to abstracted procedure
  8027  0022D2  9283               	bcf	3971,1,c	;volatile
  8028  0022D4  9083               	bcf	3971,0,c	;volatile
  8029                           
  8030                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  8031  0022D6  D82C               	call	PL86	;call to abstracted procedure
  8032  0022D8  8283               	bsf	3971,1,c	;volatile
  8033  0022DA  9083               	bcf	3971,0,c	;volatile
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;HD44780.c: 32: Lcd_Delay5us();
  8037  0022DC  EC32  F015         	call	_Lcd_Delay5us	;wreg free
  8038                           
  8039                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8040  0022E0  D827               	call	PL86	;call to abstracted procedure
  8041  0022E2  9283               	bcf	3971,1,c	;volatile
  8042  0022E4  9083               	bcf	3971,0,c	;volatile
  8043                           
  8044                           ;HD44780.c: 34: Lcd_Delay5500us();
  8045  0022E6  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8046  0022EA  0100               	movlb	0	; () banked
  8047  0022EC  2B63               	incf	Lcd_Init@data& (0+255),f,b
  8048  0022EE  0E03               	movlw	3
  8049  0022F0  6563               	cpfsgt	Lcd_Init@data& (0+255),b
  8050  0022F2  D7EE               	goto	l214
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;HD44780.c: 35: }
  8054                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8055  0022F4  D818               	call	PL84	;call to abstracted procedure
  8056  0022F6  9283               	bcf	3971,1,c	;volatile
  8057  0022F8  9083               	bcf	3971,0,c	;volatile
  8058                           
  8059                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  8060  0022FA  D815               	call	PL84	;call to abstracted procedure
  8061  0022FC  8283               	bsf	3971,1,c	;volatile
  8062  0022FE  9083               	bcf	3971,0,c	;volatile
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;HD44780.c: 38: Lcd_Delay5us();
  8066  002300  EC32  F015         	call	_Lcd_Delay5us	;wreg free
  8067                           
  8068                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8069  002304  D810               	call	PL84	;call to abstracted procedure
  8070  002306  9283               	bcf	3971,1,c	;volatile
  8071  002308  9083               	bcf	3971,0,c	;volatile
  8072                           
  8073                           ;HD44780.c: 40: Lcd_Delay5500us();
  8074  00230A  EC15  F015         	call	_Lcd_Delay5500us	;wreg free
  8075  00230E  0E28               	movlw	40
  8076  002310  EC65  F00E         	call	_Lcd_Command
  8077  002314  0E10               	movlw	16
  8078  002316  EC65  F00E         	call	_Lcd_Command
  8079  00231A  0E01               	movlw	1
  8080  00231C  EC65  F00E         	call	_Lcd_Command
  8081  002320  0E0F               	movlw	15
  8082  002322  EF65  F00E         	goto	_Lcd_Command
  8083  002326                     __end_of_Lcd_Init:
  8084                           	opt stack 0
  8085  002326                     PL84:
  8086                           	opt stack 19
  8087  002326  9A83               	bcf	3971,5,c	;volatile
  8088  002328  9883               	bcf	3971,4,c	;volatile
  8089  00232A  8683               	bsf	3971,3,c	;volatile
  8090  00232C  9483               	bcf	3971,2,c	;volatile
  8091  00232E  0012               	return	
  8092  002330                     __end_ofPL84:
  8093                           	opt stack 0
  8094  002330                     PL86:
  8095                           	opt stack 19
  8096  002330  9A83               	bcf	3971,5,c	;volatile
  8097  002332  9883               	bcf	3971,4,c	;volatile
  8098  002334  8683               	bsf	3971,3,c	;volatile
  8099  002336  8483               	bsf	3971,2,c	;volatile
  8100  002338  0012               	return	
  8101  00233A                     __end_ofPL86:
  8102                           	opt stack 0
  8103                           tosu	equ	0xFFF
  8104                           tosh	equ	0xFFE
  8105                           tosl	equ	0xFFD
  8106                           pclath	equ	0xFFA
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           postinc0	equ	0xFEE
  8115                           plusw0	equ	0xFEB
  8116                           wreg	equ	0xFE8
  8117                           indf1	equ	0xFE7
  8118                           postdec1	equ	0xFE5
  8119                           plusw1	equ	0xFE3
  8120                           fsr1h	equ	0xFE2
  8121                           fsr1l	equ	0xFE1
  8122                           indf2	equ	0xFDF
  8123                           postinc2	equ	0xFDE
  8124                           postdec2	equ	0xFDD
  8125                           plusw2	equ	0xFDB
  8126                           fsr2h	equ	0xFDA
  8127                           fsr2l	equ	0xFD9
  8128                           status	equ	0xFD8
  8129                           
  8130 ;; *************** function _Lcd_Delay5500us *****************
  8131 ;; Defined at:
  8132 ;;		line 153 in file "libs/HD44780.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;		None
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;		None
  8137 ;; Return value:  Size  Location     Type
  8138 ;;                  1    wreg      void 
  8139 ;; Registers used:
  8140 ;;		wreg
  8141 ;; Tracked objects:
  8142 ;;		On entry : 0/0
  8143 ;;		On exit  : 0/0
  8144 ;;		Unchanged: 0/0
  8145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8149 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8150 ;;Total ram usage:        1 bytes
  8151 ;; Hardware stack levels used:    1
  8152 ;; Hardware stack levels required when called:    9
  8153 ;; This function calls:
  8154 ;;		Nothing
  8155 ;; This function is called by:
  8156 ;;		_Lcd_Init
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text39
  8161  002A2A                     __ptext39:
  8162                           	opt stack 0
  8163  002A2A                     _Lcd_Delay5500us:
  8164                           	opt stack 20
  8165                           
  8166                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  8167                           
  8168                           ;incstack = 0
  8169  002A2A  0E08               	movlw	8
  8170  002A2C  0100               	movlb	0	; () banked
  8171  002A2E  6F60               	movwf	??_Lcd_Delay5500us& (0+255),b
  8172  002A30  0E23               	movlw	35
  8173  002A32                     u3547:
  8174  002A32  2EE8               	decfsz	wreg,f,c
  8175  002A34  D7FE               	bra	u3547
  8176  002A36  2F60               	decfsz	??_Lcd_Delay5500us& (0+255),f,b
  8177  002A38  D7FC               	bra	u3547
  8178  002A3A  0012               	return		;funcret
  8179  002A3C                     __end_of_Lcd_Delay5500us:
  8180                           	opt stack 0
  8181                           tosu	equ	0xFFF
  8182                           tosh	equ	0xFFE
  8183                           tosl	equ	0xFFD
  8184                           pclath	equ	0xFFA
  8185                           tblptru	equ	0xFF8
  8186                           tblptrh	equ	0xFF7
  8187                           tblptrl	equ	0xFF6
  8188                           tablat	equ	0xFF5
  8189                           prodh	equ	0xFF4
  8190                           prodl	equ	0xFF3
  8191                           intcon	equ	0xFF2
  8192                           postinc0	equ	0xFEE
  8193                           plusw0	equ	0xFEB
  8194                           wreg	equ	0xFE8
  8195                           indf1	equ	0xFE7
  8196                           postdec1	equ	0xFE5
  8197                           plusw1	equ	0xFE3
  8198                           fsr1h	equ	0xFE2
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           plusw2	equ	0xFDB
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _Lcd_Command *****************
  8209 ;; Defined at:
  8210 ;;		line 133 in file "libs/HD44780.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;  command         1    wreg     unsigned char 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  command         1    2[BANK0 ] unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      void 
  8217 ;; Registers used:
  8218 ;;		wreg, status,2, status,0, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8226 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8227 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8228 ;;Total ram usage:        3 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:   10
  8231 ;; This function calls:
  8232 ;;		_Lcd_Delay5us
  8233 ;; This function is called by:
  8234 ;;		_Lcd_Init
  8235 ;;		_Lcd_Text
  8236 ;;		_Lcd_WriteChar
  8237 ;;		_main
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text40
  8242  001CCA                     __ptext40:
  8243                           	opt stack 0
  8244  001CCA                     _Lcd_Command:
  8245                           	opt stack 18
  8246                           
  8247                           ;incstack = 0
  8248                           ;Lcd_Command@command stored from wreg
  8249  001CCA  0100               	movlb	0	; () banked
  8250  001CCC  6F62               	movwf	Lcd_Command@command& (0+255),b
  8251                           
  8252                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8253  001CCE  9283               	bcf	3971,1,c	;volatile
  8254  001CD0  9083               	bcf	3971,0,c	;volatile
  8255                           
  8256                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
  8257  001CD2  6B60               	clrf	??_Lcd_Command& (0+255),b
  8258  001CD4  AF62               	btfss	Lcd_Command@command& (0+255),7,b
  8259  001CD6  D001               	bra	u2265
  8260  001CD8  2B60               	incf	??_Lcd_Command& (0+255),f,b
  8261  001CDA                     u2265:
  8262  001CDA  D843               	call	PL36	;call to abstracted procedure
  8263  001CDC  0E06               	movlw	6
  8264  001CDE  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
  8265  001CE0                     u2275:
  8266  001CE0  90D8               	bcf	status,0,c
  8267  001CE2  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8268  001CE4  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
  8269  001CE6  D7FC               	goto	u2275
  8270  001CE8  D84D               	call	PL52	;call to abstracted procedure
  8271                           
  8272                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
  8273  001CEA  D847               	call	PL46	;call to abstracted procedure
  8274  001CEC  0E05               	movlw	5
  8275  001CEE  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
  8276  001CF0                     u2285:
  8277  001CF0  90D8               	bcf	status,0,c
  8278  001CF2  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8279  001CF4  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
  8280  001CF6  D7FC               	goto	u2285
  8281  001CF8  0E01               	movlw	1
  8282  001CFA  D827               	call	PL34	;call to abstracted procedure
  8283  001CFC  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  8284  001CFE  0E0F               	movlw	15
  8285  001D00  1760               	andwf	??_Lcd_Command& (0+255),f,b
  8286  001D02  0E01               	movlw	1
  8287  001D04  D846               	call	PL62	;call to abstracted procedure
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;HD44780.c: 137: _delay(10);
  8291  001D06  0E03               	movlw	3
  8292  001D08                     u3557:
  8293  001D08  2EE8               	decfsz	wreg,f,c
  8294  001D0A  D7FE               	bra	u3557
  8295  001D0C  F000               	nop	
  8296                           
  8297                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  8298  001D0E  8283               	bsf	3971,1,c	;volatile
  8299  001D10  EC32  F015         	call	_Lcd_Delay5us	;wreg free
  8300  001D14  9283               	bcf	3971,1,c	;volatile
  8301                           
  8302                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
  8303  001D16  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  8304  001D1A  0100               	movlb	0	; () banked
  8305  001D1C  90D8               	bcf	status,0,c
  8306  001D1E  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8307  001D20  D841               	call	PL76	;call to abstracted procedure
  8308                           
  8309                           ; BSR set to: 0
  8310  001D22  D81F               	call	PL36	;call to abstracted procedure
  8311  001D24  D83F               	call	PL76	;call to abstracted procedure
  8312  001D26  D82E               	call	PL52	;call to abstracted procedure
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
  8316  001D28  D828               	call	PL46	;call to abstracted procedure
  8317  001D2A  90D8               	bcf	status,0,c
  8318  001D2C  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8319  001D2E  0E01               	movlw	1
  8320                           
  8321                           ; BSR set to: 0
  8322  001D30  D80C               	call	PL34	;call to abstracted procedure
  8323  001D32  0E01               	movlw	1
  8324  001D34  D82E               	call	PL62	;call to abstracted procedure
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;HD44780.c: 141: _delay(10);
  8328  001D36  0E03               	movlw	3
  8329  001D38                     u3567:
  8330  001D38  2EE8               	decfsz	wreg,f,c
  8331  001D3A  D7FE               	bra	u3567
  8332  001D3C  F000               	nop	
  8333                           
  8334                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  8335  001D3E  8283               	bsf	3971,1,c	;volatile
  8336  001D40  EC32  F015         	call	_Lcd_Delay5us	;wreg free
  8337  001D44  9283               	bcf	3971,1,c	;volatile
  8338                           
  8339                           ;HD44780.c: 144: Lcd_Delay5us();
  8340  001D46  EF32  F015         	goto	_Lcd_Delay5us	;wreg free
  8341  001D4A                     __end_of_Lcd_Command:
  8342                           	opt stack 0
  8343  001D4A                     PL34:
  8344                           	opt stack 18
  8345  001D4A  1760               	andwf	??_Lcd_Command& (0+255),f,b
  8346  001D4C  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  8347  001D4E  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  8348  001D50  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  8349  001D52  5083               	movf	3971,w,c	;volatile
  8350  001D54  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8351  001D56  0BF7               	andlw	-9
  8352  001D58  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8353  001D5A  6E83               	movwf	3971,c	;volatile
  8354  001D5C  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  8355  001D60  0012               	return	
  8356  001D62                     __end_ofPL34:
  8357                           	opt stack 0
  8358  001D62                     PL36:
  8359                           	opt stack 18
  8360  001D62  0E01               	movlw	1
  8361  001D64  1760               	andwf	??_Lcd_Command& (0+255),f,b
  8362  001D66  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  8363  001D68  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  8364  001D6A  5083               	movf	3971,w,c	;volatile
  8365  001D6C  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8366  001D6E  0BDF               	andlw	-33
  8367  001D70  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8368  001D72  6E83               	movwf	3971,c	;volatile
  8369  001D74  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  8370  001D78  0012               	return	
  8371  001D7A                     __end_ofPL36:
  8372                           	opt stack 0
  8373  001D7A                     PL46:
  8374                           	opt stack 18
  8375  001D7A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8376  001D7C  6E83               	movwf	3971,c	;volatile
  8377  001D7E  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  8378  001D82  0012               	return	
  8379  001D84                     __end_ofPL46:
  8380                           	opt stack 0
  8381  001D84                     PL52:
  8382                           	opt stack 18
  8383  001D84  0E01               	movlw	1
  8384  001D86  1760               	andwf	??_Lcd_Command& (0+255),f,b
  8385  001D88  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  8386  001D8A  5083               	movf	3971,w,c	;volatile
  8387  001D8C  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8388  001D8E  0BEF               	andlw	-17
  8389  001D90  0012               	return	
  8390  001D92                     __end_ofPL52:
  8391                           	opt stack 0
  8392  001D92                     PL62:
  8393                           	opt stack 18
  8394  001D92  1760               	andwf	??_Lcd_Command& (0+255),f,b
  8395  001D94  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  8396  001D96  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  8397  001D98  5083               	movf	3971,w,c	;volatile
  8398  001D9A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8399  001D9C  0BFB               	andlw	-5
  8400  001D9E  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  8401  001DA0  6E83               	movwf	3971,c	;volatile
  8402  001DA2  0012               	return	
  8403  001DA4                     __end_ofPL62:
  8404                           	opt stack 0
  8405  001DA4                     PL76:
  8406                           	opt stack 18
  8407  001DA4  90D8               	bcf	status,0,c
  8408  001DA6  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8409  001DA8  90D8               	bcf	status,0,c
  8410  001DAA  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8411  001DAC  0012               	return	
  8412  001DAE                     __end_ofPL76:
  8413                           	opt stack 0
  8414                           tosu	equ	0xFFF
  8415                           tosh	equ	0xFFE
  8416                           tosl	equ	0xFFD
  8417                           pclath	equ	0xFFA
  8418                           tblptru	equ	0xFF8
  8419                           tblptrh	equ	0xFF7
  8420                           tblptrl	equ	0xFF6
  8421                           tablat	equ	0xFF5
  8422                           prodh	equ	0xFF4
  8423                           prodl	equ	0xFF3
  8424                           intcon	equ	0xFF2
  8425                           postinc0	equ	0xFEE
  8426                           plusw0	equ	0xFEB
  8427                           wreg	equ	0xFE8
  8428                           indf1	equ	0xFE7
  8429                           postdec1	equ	0xFE5
  8430                           plusw1	equ	0xFE3
  8431                           fsr1h	equ	0xFE2
  8432                           fsr1l	equ	0xFE1
  8433                           indf2	equ	0xFDF
  8434                           postinc2	equ	0xFDE
  8435                           postdec2	equ	0xFDD
  8436                           plusw2	equ	0xFDB
  8437                           fsr2h	equ	0xFDA
  8438                           fsr2l	equ	0xFD9
  8439                           status	equ	0xFD8
  8440                           
  8441 ;; *************** function _Lcd_Delay5us *****************
  8442 ;; Defined at:
  8443 ;;		line 150 in file "libs/HD44780.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;		None
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;		None
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		None
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8461 ;;Total ram usage:        0 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    9
  8464 ;; This function calls:
  8465 ;;		Nothing
  8466 ;; This function is called by:
  8467 ;;		_Lcd_Init
  8468 ;;		_Lcd_CharCP
  8469 ;;		_Lcd_Command
  8470 ;; This function uses a non-reentrant model
  8471 ;;
  8472                           
  8473                           	psect	text41
  8474  002A64                     __ptext41:
  8475                           	opt stack 0
  8476  002A64                     _Lcd_Delay5us:
  8477                           	opt stack 18
  8478                           
  8479                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  8480                           
  8481                           ;incstack = 0
  8482  002A64  D000               	nop2		;2 cycle nop
  8483  002A66  D000               	nop2		;2 cycle nop
  8484  002A68  F000               	nop	
  8485  002A6A  0012               	return		;funcret
  8486  002A6C                     __end_of_Lcd_Delay5us:
  8487                           	opt stack 0
  8488                           tosu	equ	0xFFF
  8489                           tosh	equ	0xFFE
  8490                           tosl	equ	0xFFD
  8491                           pclath	equ	0xFFA
  8492                           tblptru	equ	0xFF8
  8493                           tblptrh	equ	0xFF7
  8494                           tblptrl	equ	0xFF6
  8495                           tablat	equ	0xFF5
  8496                           prodh	equ	0xFF4
  8497                           prodl	equ	0xFF3
  8498                           intcon	equ	0xFF2
  8499                           postinc0	equ	0xFEE
  8500                           plusw0	equ	0xFEB
  8501                           wreg	equ	0xFE8
  8502                           indf1	equ	0xFE7
  8503                           postdec1	equ	0xFE5
  8504                           plusw1	equ	0xFE3
  8505                           fsr1h	equ	0xFE2
  8506                           fsr1l	equ	0xFE1
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           plusw2	equ	0xFDB
  8511                           fsr2h	equ	0xFDA
  8512                           fsr2l	equ	0xFD9
  8513                           status	equ	0xFD8
  8514                           
  8515 ;; *************** function _INTERRUPT_InterruptManager *****************
  8516 ;; Defined at:
  8517 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;		None
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;		None
  8522 ;; Return value:  Size  Location     Type
  8523 ;;                  1    wreg      void 
  8524 ;; Registers used:
  8525 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8526 ;; Tracked objects:
  8527 ;;		On entry : 0/0
  8528 ;;		On exit  : 0/0
  8529 ;;		Unchanged: 0/0
  8530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8533 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8534 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8535 ;;Total ram usage:        8 bytes
  8536 ;; Hardware stack levels used:    1
  8537 ;; Hardware stack levels required when called:    8
  8538 ;; This function calls:
  8539 ;;		_TMR0_ISR
  8540 ;; This function is called by:
  8541 ;;		Interrupt level 2
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	intcode
  8546  000008                     __pintcode:
  8547                           	opt stack 0
  8548  000008                     _INTERRUPT_InterruptManager:
  8549                           	opt stack 16
  8550                           
  8551                           ;incstack = 0
  8552  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8553  00000A  CFFA F035          	movff	pclath,??_INTERRUPT_InterruptManager
  8554  00000E  CFFB F036          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8555  000012  CFE9 F037          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8556  000016  CFEA F038          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8557  00001A  CFD9 F039          	movff	fsr2l,??_INTERRUPT_InterruptManager+4
  8558  00001E  CFDA F03A          	movff	fsr2h,??_INTERRUPT_InterruptManager+5
  8559  000022  CFF3 F03B          	movff	prodl,??_INTERRUPT_InterruptManager+6
  8560  000026  CFF4 F03C          	movff	prodh,??_INTERRUPT_InterruptManager+7
  8561                           
  8562                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  8563  00002A  010E               	movlb	14	; () banked
  8564  00002C  BBC2               	btfsc	194,5,b	;volatile
  8565                           
  8566                           ; BSR set to: 14
  8567  00002E  ABCA               	btfss	202,5,b	;volatile
  8568  000030  D002               	goto	i2l448
  8569                           
  8570                           ; BSR set to: 14
  8571                           ;interrupt_manager.c: 61: {
  8572                           ;interrupt_manager.c: 62: TMR0_ISR();
  8573  000032  EC26  F015         	call	_TMR0_ISR	;wreg free
  8574  000036                     i2l448:
  8575  000036  C03C  FFF4         	movff	??_INTERRUPT_InterruptManager+7,prodh
  8576  00003A  C03B  FFF3         	movff	??_INTERRUPT_InterruptManager+6,prodl
  8577  00003E  C03A  FFDA         	movff	??_INTERRUPT_InterruptManager+5,fsr2h
  8578  000042  C039  FFD9         	movff	??_INTERRUPT_InterruptManager+4,fsr2l
  8579  000046  C038  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8580  00004A  C037  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8581  00004E  C036  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8582  000052  C035  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8583  000056  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8584  000058  0011               	retfie		f
  8585  00005A                     __end_of_INTERRUPT_InterruptManager:
  8586                           	opt stack 0
  8587                           tosu	equ	0xFFF
  8588                           tosh	equ	0xFFE
  8589                           tosl	equ	0xFFD
  8590                           pclatu	equ	0xFFB
  8591                           pclath	equ	0xFFA
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           postinc0	equ	0xFEE
  8600                           plusw0	equ	0xFEB
  8601                           fsr0h	equ	0xFEA
  8602                           fsr0l	equ	0xFE9
  8603                           wreg	equ	0xFE8
  8604                           indf1	equ	0xFE7
  8605                           postdec1	equ	0xFE5
  8606                           plusw1	equ	0xFE3
  8607                           fsr1h	equ	0xFE2
  8608                           fsr1l	equ	0xFE1
  8609                           indf2	equ	0xFDF
  8610                           postinc2	equ	0xFDE
  8611                           postdec2	equ	0xFDD
  8612                           plusw2	equ	0xFDB
  8613                           fsr2h	equ	0xFDA
  8614                           fsr2l	equ	0xFD9
  8615                           status	equ	0xFD8
  8616                           
  8617 ;; *************** function _TMR0_ISR *****************
  8618 ;; Defined at:
  8619 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  8620 ;; Parameters:    Size  Location     Type
  8621 ;;		None
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;		None
  8624 ;; Return value:  Size  Location     Type
  8625 ;;                  1    wreg      void 
  8626 ;; Registers used:
  8627 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8628 ;; Tracked objects:
  8629 ;;		On entry : 3F/E
  8630 ;;		On exit  : 0/0
  8631 ;;		Unchanged: 0/0
  8632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8637 ;;Total ram usage:        0 bytes
  8638 ;; Hardware stack levels used:    1
  8639 ;; Hardware stack levels required when called:    7
  8640 ;; This function calls:
  8641 ;;		_TMR0_CallBack
  8642 ;; This function is called by:
  8643 ;;		_INTERRUPT_InterruptManager
  8644 ;; This function uses a non-reentrant model
  8645 ;;
  8646                           
  8647                           	psect	text43
  8648  002A4C                     __ptext43:
  8649                           	opt stack 0
  8650  002A4C                     _TMR0_ISR:
  8651                           	opt stack 16
  8652                           
  8653                           ; BSR set to: 14
  8654                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
  8655                           
  8656                           ;incstack = 0
  8657  002A4C  9BCA               	bcf	202,5,b	;volatile
  8658                           
  8659                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
  8660  002A4E  C058  FFD4         	movff	_timer0ReloadVal16bit+1,4052	;volatile
  8661                           
  8662                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
  8663  002A52  C057  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
  8664                           
  8665                           ; BSR set to: 14
  8666                           ;tmr0.c: 146: TMR0_CallBack();
  8667  002A56  EFCA  F014         	goto	_TMR0_CallBack	;wreg free
  8668  002A5A                     __end_of_TMR0_ISR:
  8669                           	opt stack 0
  8670                           tosu	equ	0xFFF
  8671                           tosh	equ	0xFFE
  8672                           tosl	equ	0xFFD
  8673                           pclatu	equ	0xFFB
  8674                           pclath	equ	0xFFA
  8675                           tblptru	equ	0xFF8
  8676                           tblptrh	equ	0xFF7
  8677                           tblptrl	equ	0xFF6
  8678                           tablat	equ	0xFF5
  8679                           prodh	equ	0xFF4
  8680                           prodl	equ	0xFF3
  8681                           intcon	equ	0xFF2
  8682                           postinc0	equ	0xFEE
  8683                           plusw0	equ	0xFEB
  8684                           fsr0h	equ	0xFEA
  8685                           fsr0l	equ	0xFE9
  8686                           wreg	equ	0xFE8
  8687                           indf1	equ	0xFE7
  8688                           postdec1	equ	0xFE5
  8689                           plusw1	equ	0xFE3
  8690                           fsr1h	equ	0xFE2
  8691                           fsr1l	equ	0xFE1
  8692                           indf2	equ	0xFDF
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           plusw2	equ	0xFDB
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _TMR0_CallBack *****************
  8701 ;; Defined at:
  8702 ;;		line 151 in file "mcc_generated_files/tmr0.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;		None
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 3F/E
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8720 ;;Total ram usage:        0 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    6
  8723 ;; This function calls:
  8724 ;;		Absolute function
  8725 ;;		_TMR0_DefaultInterruptHandler
  8726 ;;		_Timer0_10ms
  8727 ;; This function is called by:
  8728 ;;		_TMR0_ISR
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           	psect	text44
  8733  002994                     __ptext44:
  8734                           	opt stack 0
  8735  002994                     _TMR0_CallBack:
  8736                           	opt stack 16
  8737                           
  8738                           ; BSR set to: 14
  8739                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
  8740                           
  8741                           ;incstack = 0
  8742  002994  5055               	movf	_TMR0_InterruptHandler,w,c
  8743  002996  1056               	iorwf	_TMR0_InterruptHandler+1,w,c
  8744  002998  B4D8               	btfsc	status,2,c
  8745  00299A  0012               	return	
  8746                           
  8747                           ; BSR set to: 14
  8748                           ;tmr0.c: 156: {
  8749                           ;tmr0.c: 157: TMR0_InterruptHandler();
  8750  00299C  0005               	push	
  8751  00299E  6EFA               	movwf	pclath,c
  8752  0029A0  5055               	movf	_TMR0_InterruptHandler,w,c
  8753  0029A2  6EFD               	movwf	tosl,c
  8754  0029A4  5056               	movf	_TMR0_InterruptHandler+1,w,c
  8755  0029A6  6EFE               	movwf	tosh,c
  8756  0029A8  6AFF               	clrf	tosu,c
  8757  0029AA  50FA               	movf	pclath,w,c
  8758  0029AC  0012               	return		;indir
  8759  0029AE                     __end_of_TMR0_CallBack:
  8760                           	opt stack 0
  8761                           tosu	equ	0xFFF
  8762                           tosh	equ	0xFFE
  8763                           tosl	equ	0xFFD
  8764                           pclatu	equ	0xFFB
  8765                           pclath	equ	0xFFA
  8766                           tblptru	equ	0xFF8
  8767                           tblptrh	equ	0xFF7
  8768                           tblptrl	equ	0xFF6
  8769                           tablat	equ	0xFF5
  8770                           prodh	equ	0xFF4
  8771                           prodl	equ	0xFF3
  8772                           intcon	equ	0xFF2
  8773                           postinc0	equ	0xFEE
  8774                           plusw0	equ	0xFEB
  8775                           fsr0h	equ	0xFEA
  8776                           fsr0l	equ	0xFE9
  8777                           wreg	equ	0xFE8
  8778                           indf1	equ	0xFE7
  8779                           postdec1	equ	0xFE5
  8780                           plusw1	equ	0xFE3
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           plusw2	equ	0xFDB
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  8792 ;; Defined at:
  8793 ;;		line 165 in file "mcc_generated_files/tmr0.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		None
  8802 ;; Tracked objects:
  8803 ;;		On entry : 3F/E
  8804 ;;		On exit  : 3F/E
  8805 ;;		Unchanged: 3F/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8811 ;;Total ram usage:        0 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; This function calls:
  8814 ;;		Nothing
  8815 ;; This function is called by:
  8816 ;;		_TMR0_Initialize
  8817 ;;		_TMR0_CallBack
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           	psect	text45
  8822  002A74                     __ptext45:
  8823                           	opt stack 0
  8824  002A74                     _TMR0_DefaultInterruptHandler:
  8825                           	opt stack 21
  8826                           
  8827                           ; BSR set to: 14
  8828                           
  8829                           ;incstack = 0
  8830  002A74  0012               	return		;funcret
  8831  002A76                     __end_of_TMR0_DefaultInterruptHandler:
  8832                           	opt stack 0
  8833                           tosu	equ	0xFFF
  8834                           tosh	equ	0xFFE
  8835                           tosl	equ	0xFFD
  8836                           pclatu	equ	0xFFB
  8837                           pclath	equ	0xFFA
  8838                           tblptru	equ	0xFF8
  8839                           tblptrh	equ	0xFF7
  8840                           tblptrl	equ	0xFF6
  8841                           tablat	equ	0xFF5
  8842                           prodh	equ	0xFF4
  8843                           prodl	equ	0xFF3
  8844                           intcon	equ	0xFF2
  8845                           postinc0	equ	0xFEE
  8846                           plusw0	equ	0xFEB
  8847                           fsr0h	equ	0xFEA
  8848                           fsr0l	equ	0xFE9
  8849                           wreg	equ	0xFE8
  8850                           indf1	equ	0xFE7
  8851                           postdec1	equ	0xFE5
  8852                           plusw1	equ	0xFE3
  8853                           fsr1h	equ	0xFE2
  8854                           fsr1l	equ	0xFE1
  8855                           indf2	equ	0xFDF
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           plusw2	equ	0xFDB
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function _Timer0_10ms *****************
  8864 ;; Defined at:
  8865 ;;		line 3 in file "libs/projMain.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;		None
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;		None
  8870 ;; Return value:  Size  Location     Type
  8871 ;;                  1    wreg      void 
  8872 ;; Registers used:
  8873 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 3F/E
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8883 ;;Total ram usage:        0 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    5
  8886 ;; This function calls:
  8887 ;;		_IncreaseByASecond
  8888 ;;		i2___awmod
  8889 ;; This function is called by:
  8890 ;;		_main
  8891 ;;		_TMR0_CallBack
  8892 ;; This function uses a non-reentrant model
  8893 ;;
  8894                           
  8895                           	psect	text46
  8896  00262C                     __ptext46:
  8897                           	opt stack 0
  8898  00262C                     _Timer0_10ms:
  8899                           	opt stack 16
  8900                           
  8901                           ; BSR set to: 14
  8902                           ;projMain.c: 5: GLOBAL_I++;
  8903                           
  8904                           ; BSR set to: 14
  8905                           ;incstack = 0
  8906  00262C  4A59               	infsnz	_GLOBAL_I,f,c
  8907  00262E  2A5A               	incf	_GLOBAL_I+1,f,c
  8908                           
  8909                           ; BSR set to: 14
  8910                           ;projMain.c: 6: if (GLOBAL_I%10==0) {
  8911  002630  C059  F001         	movff	_GLOBAL_I,i2___awmod@dividend
  8912  002634  C05A  F002         	movff	_GLOBAL_I+1,i2___awmod@dividend+1
  8913  002638  6A04               	clrf	i2___awmod@divisor+1,c
  8914  00263A  0E0A               	movlw	10
  8915  00263C  6E03               	movwf	i2___awmod@divisor,c
  8916  00263E  EC54  F012         	call	i2___awmod	;wreg free
  8917  002642  5001               	movf	?i2___awmod,w,c
  8918  002644  1002               	iorwf	?i2___awmod+1,w,c
  8919  002646  E102               	bnz	i2l2950
  8920                           
  8921                           ; BSR set to: 14
  8922                           ;projMain.c: 7: LATB ^= 0xFF;
  8923  002648  0EFF               	movlw	255
  8924  00264A  1A84               	xorwf	3972,f,c	;volatile
  8925  00264C                     i2l2950:
  8926                           
  8927                           ; BSR set to: 14
  8928                           ;projMain.c: 8: }
  8929                           ;projMain.c: 9: CENTI_SECOND_COUNT++;
  8930  00264C  2A5B               	incf	_CENTI_SECOND_COUNT,f,c
  8931                           
  8932                           ; BSR set to: 14
  8933                           ;projMain.c: 10: if (CENTI_SECOND_COUNT == 100) {
  8934  00264E  0E64               	movlw	100
  8935  002650  185B               	xorwf	_CENTI_SECOND_COUNT,w,c
  8936  002652  A4D8               	btfss	status,2,c
  8937  002654  0012               	return	
  8938                           
  8939                           ; BSR set to: 14
  8940                           ;projMain.c: 11: CENTI_SECOND_COUNT = 0;
  8941  002656  6A5B               	clrf	_CENTI_SECOND_COUNT,c
  8942                           
  8943                           ; BSR set to: 14
  8944                           ;projMain.c: 12: DATE_TIME = IncreaseByASecond(DATE_TIME);
  8945  002658  EE20  F0DE         	lfsr	2,_DATE_TIME
  8946  00265C  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
  8947  002660  0E0A               	movlw	10
  8948  002662                     i2u231_41:
  8949  002662  CFDB FFEB          	movff	plusw2,plusw0
  8950  002666  06E8               	decf	wreg,f,c
  8951  002668  E2FC               	bc	i2u231_41
  8952  00266A  ECBB  F012         	call	_IncreaseByASecond	;wreg free
  8953  00266E  EE20  F0DE         	lfsr	2,_DATE_TIME
  8954  002672  0E0A               	movlw	10
  8955  002674                     i2u232_41:
  8956  002674  CFEB FFDB          	movff	plusw0,plusw2
  8957  002678  06E8               	decf	wreg,f,c
  8958  00267A  E2FC               	bc	i2u232_41
  8959  00267C  0012               	return		;funcret
  8960  00267E                     __end_of_Timer0_10ms:
  8961                           	opt stack 0
  8962                           tosu	equ	0xFFF
  8963                           tosh	equ	0xFFE
  8964                           tosl	equ	0xFFD
  8965                           pclatu	equ	0xFFB
  8966                           pclath	equ	0xFFA
  8967                           tblptru	equ	0xFF8
  8968                           tblptrh	equ	0xFF7
  8969                           tblptrl	equ	0xFF6
  8970                           tablat	equ	0xFF5
  8971                           prodh	equ	0xFF4
  8972                           prodl	equ	0xFF3
  8973                           intcon	equ	0xFF2
  8974                           postinc0	equ	0xFEE
  8975                           plusw0	equ	0xFEB
  8976                           fsr0h	equ	0xFEA
  8977                           fsr0l	equ	0xFE9
  8978                           wreg	equ	0xFE8
  8979                           indf1	equ	0xFE7
  8980                           postdec1	equ	0xFE5
  8981                           plusw1	equ	0xFE3
  8982                           fsr1h	equ	0xFE2
  8983                           fsr1l	equ	0xFE1
  8984                           indf2	equ	0xFDF
  8985                           postinc2	equ	0xFDE
  8986                           postdec2	equ	0xFDD
  8987                           plusw2	equ	0xFDB
  8988                           fsr2h	equ	0xFDA
  8989                           fsr2l	equ	0xFD9
  8990                           status	equ	0xFD8
  8991                           
  8992 ;; *************** function i2___awmod *****************
  8993 ;; Defined at:
  8994 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;  dividend        2    0[COMRAM] int 
  8997 ;;  divisor         2    2[COMRAM] int 
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;  __awmod         1    5[COMRAM] unsigned char 
  9000 ;;  __awmod         1    4[COMRAM] unsigned char 
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  2    0[COMRAM] int 
  9003 ;; Registers used:
  9004 ;;		wreg, status,2, status,0
  9005 ;; Tracked objects:
  9006 ;;		On entry : 3F/E
  9007 ;;		On exit  : 3F/E
  9008 ;;		Unchanged: 3F/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9010 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9011 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9013 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9014 ;;Total ram usage:        6 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; This function calls:
  9017 ;;		Nothing
  9018 ;; This function is called by:
  9019 ;;		_Timer0_10ms
  9020 ;; This function uses a non-reentrant model
  9021 ;;
  9022                           
  9023                           	psect	text47
  9024  0024A8                     __ptext47:
  9025                           	opt stack 0
  9026  0024A8                     i2___awmod:
  9027                           	opt stack 20
  9028                           
  9029                           ; BSR set to: 14
  9030                           
  9031                           ;incstack = 0
  9032  0024A8  6A06               	clrf	i2___awmod@sign,c
  9033                           
  9034                           ; BSR set to: 14
  9035  0024AA  AE02               	btfss	i2___awmod@dividend+1,7,c
  9036  0024AC  D006               	goto	i2l2832
  9037                           
  9038                           ; BSR set to: 14
  9039  0024AE  6C01               	negf	i2___awmod@dividend,c
  9040  0024B0  1E02               	comf	i2___awmod@dividend+1,f,c
  9041  0024B2  B0D8               	btfsc	status,0,c
  9042  0024B4  2A02               	incf	i2___awmod@dividend+1,f,c
  9043                           
  9044                           ; BSR set to: 14
  9045  0024B6  0E01               	movlw	1
  9046  0024B8  6E06               	movwf	i2___awmod@sign,c
  9047  0024BA                     i2l2832:
  9048                           
  9049                           ; BSR set to: 14
  9050  0024BA  AE04               	btfss	i2___awmod@divisor+1,7,c
  9051  0024BC  D004               	goto	i2l2836
  9052                           
  9053                           ; BSR set to: 14
  9054  0024BE  6C03               	negf	i2___awmod@divisor,c
  9055  0024C0  1E04               	comf	i2___awmod@divisor+1,f,c
  9056  0024C2  B0D8               	btfsc	status,0,c
  9057  0024C4  2A04               	incf	i2___awmod@divisor+1,f,c
  9058  0024C6                     i2l2836:
  9059                           
  9060                           ; BSR set to: 14
  9061  0024C6  5003               	movf	i2___awmod@divisor,w,c
  9062  0024C8  1004               	iorwf	i2___awmod@divisor+1,w,c
  9063  0024CA  E017               	bz	i2l2852
  9064                           
  9065                           ; BSR set to: 14
  9066  0024CC  0E01               	movlw	1
  9067  0024CE  6E05               	movwf	i2___awmod@counter,c
  9068  0024D0  D004               	goto	i2l2842
  9069  0024D2                     i2l2840:
  9070                           
  9071                           ; BSR set to: 14
  9072  0024D2  90D8               	bcf	status,0,c
  9073  0024D4  3603               	rlcf	i2___awmod@divisor,f,c
  9074  0024D6  3604               	rlcf	i2___awmod@divisor+1,f,c
  9075  0024D8  2A05               	incf	i2___awmod@counter,f,c
  9076  0024DA                     i2l2842:
  9077                           
  9078                           ; BSR set to: 14
  9079  0024DA  AE04               	btfss	i2___awmod@divisor+1,7,c
  9080  0024DC  D7FA               	goto	i2l2840
  9081  0024DE                     i2l2844:
  9082                           
  9083                           ; BSR set to: 14
  9084  0024DE  5003               	movf	i2___awmod@divisor,w,c
  9085  0024E0  5C01               	subwf	i2___awmod@dividend,w,c
  9086  0024E2  5004               	movf	i2___awmod@divisor+1,w,c
  9087  0024E4  5802               	subwfb	i2___awmod@dividend+1,w,c
  9088  0024E6  E304               	bnc	i2l2848
  9089                           
  9090                           ; BSR set to: 14
  9091  0024E8  5003               	movf	i2___awmod@divisor,w,c
  9092  0024EA  5E01               	subwf	i2___awmod@dividend,f,c
  9093  0024EC  5004               	movf	i2___awmod@divisor+1,w,c
  9094  0024EE  5A02               	subwfb	i2___awmod@dividend+1,f,c
  9095  0024F0                     i2l2848:
  9096                           
  9097                           ; BSR set to: 14
  9098  0024F0  90D8               	bcf	status,0,c
  9099  0024F2  3204               	rrcf	i2___awmod@divisor+1,f,c
  9100  0024F4  3203               	rrcf	i2___awmod@divisor,f,c
  9101                           
  9102                           ; BSR set to: 14
  9103  0024F6  2E05               	decfsz	i2___awmod@counter,f,c
  9104  0024F8  D7F2               	goto	i2l2844
  9105  0024FA                     i2l2852:
  9106                           
  9107                           ; BSR set to: 14
  9108  0024FA  5006               	movf	i2___awmod@sign,w,c
  9109  0024FC  E004               	bz	i2l2856
  9110                           
  9111                           ; BSR set to: 14
  9112  0024FE  6C01               	negf	i2___awmod@dividend,c
  9113  002500  1E02               	comf	i2___awmod@dividend+1,f,c
  9114  002502  B0D8               	btfsc	status,0,c
  9115  002504  2A02               	incf	i2___awmod@dividend+1,f,c
  9116  002506                     i2l2856:
  9117                           
  9118                           ; BSR set to: 14
  9119  002506  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  9120  00250A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  9121                           
  9122                           ; BSR set to: 14
  9123  00250E  0012               	return		;funcret
  9124  002510                     __end_ofi2___awmod:
  9125                           	opt stack 0
  9126                           tosu	equ	0xFFF
  9127                           tosh	equ	0xFFE
  9128                           tosl	equ	0xFFD
  9129                           pclatu	equ	0xFFB
  9130                           pclath	equ	0xFFA
  9131                           tblptru	equ	0xFF8
  9132                           tblptrh	equ	0xFF7
  9133                           tblptrl	equ	0xFF6
  9134                           tablat	equ	0xFF5
  9135                           prodh	equ	0xFF4
  9136                           prodl	equ	0xFF3
  9137                           intcon	equ	0xFF2
  9138                           postinc0	equ	0xFEE
  9139                           plusw0	equ	0xFEB
  9140                           fsr0h	equ	0xFEA
  9141                           fsr0l	equ	0xFE9
  9142                           wreg	equ	0xFE8
  9143                           indf1	equ	0xFE7
  9144                           postdec1	equ	0xFE5
  9145                           plusw1	equ	0xFE3
  9146                           fsr1h	equ	0xFE2
  9147                           fsr1l	equ	0xFE1
  9148                           indf2	equ	0xFDF
  9149                           postinc2	equ	0xFDE
  9150                           postdec2	equ	0xFDD
  9151                           plusw2	equ	0xFDB
  9152                           fsr2h	equ	0xFDA
  9153                           fsr2l	equ	0xFD9
  9154                           status	equ	0xFD8
  9155                           
  9156 ;; *************** function _IncreaseByASecond *****************
  9157 ;; Defined at:
  9158 ;;		line 3 in file "libs/funcs.c"
  9159 ;; Parameters:    Size  Location     Type
  9160 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
  9161 ;; Auto vars:     Size  Location     Type
  9162 ;;		None
  9163 ;; Return value:  Size  Location     Type
  9164 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
  9165 ;; Registers used:
  9166 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 3F/E
  9169 ;;		On exit  : 0/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9172 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9175 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9176 ;;Total ram usage:       11 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    4
  9179 ;; This function calls:
  9180 ;;		i2_IncreaseByADay
  9181 ;; This function is called by:
  9182 ;;		_Timer0_10ms
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           	psect	text48
  9187  002576                     __ptext48:
  9188                           	opt stack 0
  9189  002576                     _IncreaseByASecond:
  9190                           	opt stack 16
  9191                           
  9192                           ; BSR set to: 14
  9193                           ;funcs.c: 4: dt.SECOND++;
  9194                           
  9195                           ; BSR set to: 14
  9196                           ;incstack = 0
  9197  002576  2A2A               	incf	IncreaseByASecond@dt,f,c
  9198  002578  0E00               	movlw	0
  9199  00257A  222B               	addwfc	IncreaseByASecond@dt+1,f,c
  9200  00257C  222C               	addwfc	IncreaseByASecond@dt+2,f,c
  9201  00257E  222D               	addwfc	IncreaseByASecond@dt+3,f,c
  9202                           
  9203                           ;funcs.c: 5: if (dt.SECOND == 86400) {
  9204  002580  0E80               	movlw	128
  9205  002582  182A               	xorwf	IncreaseByASecond@dt,w,c
  9206  002584  E11C               	bnz	i2l2796
  9207  002586  0E51               	movlw	81
  9208  002588  182B               	xorwf	IncreaseByASecond@dt+1,w,c
  9209  00258A  E119               	bnz	i2l2796
  9210  00258C  042C               	decf	IncreaseByASecond@dt+2,w,c
  9211  00258E  102D               	iorwf	IncreaseByASecond@dt+3,w,c
  9212  002590  E116               	bnz	i2l2796
  9213                           
  9214                           ; BSR set to: 14
  9215                           ;funcs.c: 6: dt.SECOND = 0;
  9216  002592  6A2A               	clrf	IncreaseByASecond@dt,c
  9217  002594  6A2B               	clrf	IncreaseByASecond@dt+1,c
  9218  002596  6A2C               	clrf	IncreaseByASecond@dt+2,c
  9219  002598  6A2D               	clrf	IncreaseByASecond@dt+3,c
  9220                           
  9221                           ; BSR set to: 14
  9222                           ;funcs.c: 7: dt = IncreaseByADay(dt);
  9223  00259A  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
  9224  00259E  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
  9225  0025A2  0E0A               	movlw	10
  9226  0025A4                     i2u204_41:
  9227  0025A4  CFDB FFEB          	movff	plusw2,plusw0
  9228  0025A8  06E8               	decf	wreg,f,c
  9229  0025AA  E2FC               	bc	i2u204_41
  9230  0025AC  ECD7  F00E         	call	i2_IncreaseByADay	;wreg free
  9231  0025B0  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
  9232  0025B4  0E0A               	movlw	10
  9233  0025B6                     i2u205_41:
  9234  0025B6  CFEB FFDB          	movff	plusw0,plusw2
  9235  0025BA  06E8               	decf	wreg,f,c
  9236  0025BC  E2FC               	bc	i2u205_41
  9237  0025BE                     i2l2796:
  9238                           
  9239                           ;funcs.c: 8: }
  9240                           ;funcs.c: 9: return dt;
  9241  0025BE  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
  9242  0025C2  EE00  F02A         	lfsr	0,?_IncreaseByASecond
  9243  0025C6  0E0A               	movlw	10
  9244  0025C8                     i2u206_41:
  9245  0025C8  CFDB FFEB          	movff	plusw2,plusw0
  9246  0025CC  06E8               	decf	wreg,f,c
  9247  0025CE  E2FC               	bc	i2u206_41
  9248  0025D0  0012               	return		;funcret
  9249  0025D2                     __end_of_IncreaseByASecond:
  9250                           	opt stack 0
  9251                           tosu	equ	0xFFF
  9252                           tosh	equ	0xFFE
  9253                           tosl	equ	0xFFD
  9254                           pclatu	equ	0xFFB
  9255                           pclath	equ	0xFFA
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           intcon	equ	0xFF2
  9263                           postinc0	equ	0xFEE
  9264                           plusw0	equ	0xFEB
  9265                           fsr0h	equ	0xFEA
  9266                           fsr0l	equ	0xFE9
  9267                           wreg	equ	0xFE8
  9268                           indf1	equ	0xFE7
  9269                           postdec1	equ	0xFE5
  9270                           plusw1	equ	0xFE3
  9271                           fsr1h	equ	0xFE2
  9272                           fsr1l	equ	0xFE1
  9273                           indf2	equ	0xFDF
  9274                           postinc2	equ	0xFDE
  9275                           postdec2	equ	0xFDD
  9276                           plusw2	equ	0xFDB
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281 ;; *************** function i2_IncreaseByADay *****************
  9282 ;; Defined at:
  9283 ;;		line 12 in file "libs/funcs.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;  IncreaseByAD    1   40[COMRAM] char 
  9288 ;; Return value:  Size  Location     Type
  9289 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
  9290 ;; Registers used:
  9291 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9292 ;; Tracked objects:
  9293 ;;		On entry : 3F/E
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9297 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9299 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9300 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9301 ;;Total ram usage:       14 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    3
  9304 ;; This function calls:
  9305 ;;		i2_IncreaseByAMonth
  9306 ;;		i2___lwmod
  9307 ;; This function is called by:
  9308 ;;		_IncreaseByASecond
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           	psect	text49
  9313  001DAE                     __ptext49:
  9314                           	opt stack 0
  9315  001DAE                     i2_IncreaseByADay:
  9316                           	opt stack 16
  9317                           
  9318                           ; BSR set to: 14
  9319                           ;funcs.c: 13: dt.DATE.Day++;
  9320                           
  9321                           ;incstack = 0
  9322  001DAE  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
  9323  001DB0  2A21               	incf	i2IncreaseByADay@dt+5,f,c
  9324                           
  9325                           ; BSR set to: 14
  9326                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  9327  001DB2  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
  9328  001DB4  0B7F               	andlw	127
  9329  001DB6  06E8               	decf	wreg,f,c
  9330  001DB8  E104               	bnz	i2l2756
  9331                           
  9332                           ; BSR set to: 14
  9333                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  9334  001DBA  5024               	movf	i2IncreaseByADay@dt+8,w,c
  9335  001DBC  0B01               	andlw	-255
  9336  001DBE  0980               	iorlw	128
  9337  001DC0  D00A               	goto	L11
  9338  001DC2                     i2l2756:
  9339                           
  9340                           ; BSR set to: 14
  9341                           ;funcs.c: 16: else
  9342                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  9343  001DC2  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
  9344  001DC4  0B7F               	andlw	127
  9345  001DC6  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
  9346  001DC8  90D8               	bcf	status,0,c
  9347  001DCA  3227               	rrcf	??i2_IncreaseByADay,f,c
  9348  001DCC  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
  9349  001DCE  5024               	movf	i2IncreaseByADay@dt+8,w,c
  9350  001DD0  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
  9351  001DD2  0B01               	andlw	-255
  9352  001DD4  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
  9353  001DD6                     L11:
  9354  001DD6  6E24               	movwf	i2IncreaseByADay@dt+8,c
  9355                           
  9356                           ; BSR set to: 14
  9357                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  9358  001DD8  5022               	movf	i2IncreaseByADay@dt+6,w,c
  9359  001DDA  EC54  F00E         	call	PL56	;call to abstracted procedure
  9360  001DDE  6E29               	movwf	i2IncreaseByADay@MonthDays,c
  9361                           
  9362                           ; BSR set to: 14
  9363                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  9364  001DE0  0E02               	movlw	2
  9365  001DE2  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
  9366  001DE4  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
  9367  001DE6  E107               	bnz	i2l2766
  9368                           
  9369                           ; BSR set to: 14
  9370  001DE8  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
  9371  001DEC  0E03               	movlw	3
  9372  001DEE  1627               	andwf	??i2_IncreaseByADay,f,c
  9373  001DF0  E102               	bnz	i2l2766
  9374                           
  9375                           ; BSR set to: 14
  9376                           ;funcs.c: 20: MonthDays = 29;
  9377  001DF2  0E1D               	movlw	29
  9378  001DF4  6E29               	movwf	i2IncreaseByADay@MonthDays,c
  9379  001DF6                     i2l2766:
  9380                           
  9381                           ; BSR set to: 14
  9382                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  9383  001DF6  0E02               	movlw	2
  9384  001DF8  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
  9385  001DFA  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
  9386  001DFC  E10A               	bnz	i2l2772
  9387                           
  9388                           ; BSR set to: 14
  9389  001DFE  D842               	call	PL108	;call to abstracted procedure
  9390  001E00  EC6B  F014         	call	PL114	;call to abstracted procedure
  9391  001E04  EC34  F014         	call	i2___lwmod	;wreg free
  9392  001E08  5001               	movf	?i2___lwmod,w,c
  9393  001E0A  1002               	iorwf	?i2___lwmod+1,w,c
  9394  001E0C  E102               	bnz	i2l2772
  9395                           
  9396                           ;funcs.c: 22: MonthDays = 28;
  9397  001E0E  0E1C               	movlw	28
  9398  001E10  6E29               	movwf	i2IncreaseByADay@MonthDays,c
  9399  001E12                     i2l2772:
  9400                           
  9401                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  9402  001E12  0E02               	movlw	2
  9403  001E14  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
  9404  001E16  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
  9405  001E18  E10C               	bnz	i2l2778
  9406  001E1A  D834               	call	PL108	;call to abstracted procedure
  9407  001E1C  0E01               	movlw	1
  9408  001E1E  6E04               	movwf	i2___lwmod@divisor+1,c
  9409  001E20  0E90               	movlw	144
  9410  001E22  6E03               	movwf	i2___lwmod@divisor,c
  9411  001E24  EC34  F014         	call	i2___lwmod	;wreg free
  9412  001E28  5001               	movf	?i2___lwmod,w,c
  9413  001E2A  1002               	iorwf	?i2___lwmod+1,w,c
  9414  001E2C  E102               	bnz	i2l2778
  9415                           
  9416                           ;funcs.c: 24: MonthDays = 29;
  9417  001E2E  0E1D               	movlw	29
  9418  001E30  6E29               	movwf	i2IncreaseByADay@MonthDays,c
  9419  001E32                     i2l2778:
  9420                           
  9421                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  9422  001E32  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
  9423  001E36  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
  9424  001E38  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
  9425  001E3A  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
  9426  001E3C  5020               	movf	i2IncreaseByADay@dt+4,w,c
  9427  001E3E  5C27               	subwf	??i2_IncreaseByADay,w,c
  9428  001E40  5021               	movf	i2IncreaseByADay@dt+5,w,c
  9429  001E42  5828               	subwfb	??i2_IncreaseByADay+1,w,c
  9430  001E44  E215               	bc	i2l2784
  9431                           
  9432                           ;funcs.c: 26: dt.DATE.Day = 1;
  9433  001E46  6A21               	clrf	i2IncreaseByADay@dt+5,c
  9434  001E48  0E01               	movlw	1
  9435  001E4A  6E20               	movwf	i2IncreaseByADay@dt+4,c
  9436                           
  9437                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  9438  001E4C  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
  9439  001E50  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
  9440  001E54  0E0A               	movlw	10
  9441  001E56                     i2u200_41:
  9442  001E56  CFDB FFEB          	movff	plusw2,plusw0
  9443  001E5A  06E8               	decf	wreg,f,c
  9444  001E5C  E2FC               	bc	i2u200_41
  9445  001E5E  ECB0  F013         	call	i2_IncreaseByAMonth	;wreg free
  9446  001E62  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
  9447  001E66  0E0A               	movlw	10
  9448  001E68                     i2u201_41:
  9449  001E68  CFEB FFDB          	movff	plusw0,plusw2
  9450  001E6C  06E8               	decf	wreg,f,c
  9451  001E6E  E2FC               	bc	i2u201_41
  9452  001E70                     i2l2784:
  9453                           
  9454                           ;funcs.c: 28: }
  9455                           ;funcs.c: 29: return dt;
  9456  001E70  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
  9457  001E74  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
  9458  001E78  0E0A               	movlw	10
  9459  001E7A                     i2u202_41:
  9460  001E7A  CFDB FFEB          	movff	plusw2,plusw0
  9461  001E7E  06E8               	decf	wreg,f,c
  9462  001E80  E2FC               	bc	i2u202_41
  9463  001E82  0012               	return		;funcret
  9464  001E84                     __end_ofi2_IncreaseByADay:
  9465                           	opt stack 0
  9466  001E84                     PL108:
  9467                           	opt stack 16
  9468  001E84  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
  9469  001E88  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
  9470  001E8C  0012               	return	
  9471  001E8E                     __end_ofPL108:
  9472                           	opt stack 0
  9473                           tosu	equ	0xFFF
  9474                           tosh	equ	0xFFE
  9475                           tosl	equ	0xFFD
  9476                           pclatu	equ	0xFFB
  9477                           pclath	equ	0xFFA
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           prodh	equ	0xFF4
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           postinc0	equ	0xFEE
  9486                           plusw0	equ	0xFEB
  9487                           fsr0h	equ	0xFEA
  9488                           fsr0l	equ	0xFE9
  9489                           wreg	equ	0xFE8
  9490                           indf1	equ	0xFE7
  9491                           postdec1	equ	0xFE5
  9492                           plusw1	equ	0xFE3
  9493                           fsr1h	equ	0xFE2
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           plusw2	equ	0xFDB
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function i2_IncreaseByAMonth *****************
  9504 ;; Defined at:
  9505 ;;		line 32 in file "libs/funcs.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;		None
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
  9512 ;; Registers used:
  9513 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/E
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9519 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9522 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9523 ;;Total ram usage:       11 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    2
  9526 ;; This function calls:
  9527 ;;		i2_IncreaseByAYear
  9528 ;; This function is called by:
  9529 ;;		i2_IncreaseByADay
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           	psect	text50
  9534  002760                     __ptext50:
  9535                           	opt stack 0
  9536  002760                     i2_IncreaseByAMonth:
  9537                           	opt stack 16
  9538                           
  9539                           ;funcs.c: 33: dt.DATE.Month++;
  9540                           
  9541                           ;incstack = 0
  9542  002760  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
  9543  002762  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
  9544                           
  9545                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  9546  002764  0E0D               	movlw	13
  9547  002766  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
  9548  002768  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
  9549  00276A  E115               	bnz	i2l2728
  9550                           
  9551                           ;funcs.c: 35: dt.DATE.Month = 1;
  9552  00276C  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
  9553  00276E  0E01               	movlw	1
  9554  002770  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
  9555                           
  9556                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  9557  002772  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
  9558  002776  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
  9559  00277A  0E0A               	movlw	10
  9560  00277C                     i2u185_41:
  9561  00277C  CFDB FFEB          	movff	plusw2,plusw0
  9562  002780  06E8               	decf	wreg,f,c
  9563  002782  E2FC               	bc	i2u185_41
  9564  002784  EC53  F014         	call	i2_IncreaseByAYear	;wreg free
  9565  002788  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
  9566  00278C  0E0A               	movlw	10
  9567  00278E                     i2u186_41:
  9568  00278E  CFEB FFDB          	movff	plusw0,plusw2
  9569  002792  06E8               	decf	wreg,f,c
  9570  002794  E2FC               	bc	i2u186_41
  9571  002796                     i2l2728:
  9572                           
  9573                           ;funcs.c: 37: }
  9574                           ;funcs.c: 38: return dt;
  9575  002796  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
  9576  00279A  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
  9577  00279E  0E0A               	movlw	10
  9578  0027A0                     i2u187_41:
  9579  0027A0  CFDB FFEB          	movff	plusw2,plusw0
  9580  0027A4  06E8               	decf	wreg,f,c
  9581  0027A6  E2FC               	bc	i2u187_41
  9582  0027A8  0012               	return		;funcret
  9583  0027AA                     __end_ofi2_IncreaseByAMonth:
  9584                           	opt stack 0
  9585                           tosu	equ	0xFFF
  9586                           tosh	equ	0xFFE
  9587                           tosl	equ	0xFFD
  9588                           pclatu	equ	0xFFB
  9589                           pclath	equ	0xFFA
  9590                           tblptru	equ	0xFF8
  9591                           tblptrh	equ	0xFF7
  9592                           tblptrl	equ	0xFF6
  9593                           tablat	equ	0xFF5
  9594                           prodh	equ	0xFF4
  9595                           prodl	equ	0xFF3
  9596                           intcon	equ	0xFF2
  9597                           postinc0	equ	0xFEE
  9598                           plusw0	equ	0xFEB
  9599                           fsr0h	equ	0xFEA
  9600                           fsr0l	equ	0xFE9
  9601                           wreg	equ	0xFE8
  9602                           indf1	equ	0xFE7
  9603                           postdec1	equ	0xFE5
  9604                           plusw1	equ	0xFE3
  9605                           fsr1h	equ	0xFE2
  9606                           fsr1l	equ	0xFE1
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           plusw2	equ	0xFDB
  9611                           fsr2h	equ	0xFDA
  9612                           fsr2l	equ	0xFD9
  9613                           status	equ	0xFD8
  9614                           
  9615 ;; *************** function i2_IncreaseByAYear *****************
  9616 ;; Defined at:
  9617 ;;		line 41 in file "libs/funcs.c"
  9618 ;; Parameters:    Size  Location     Type
  9619 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
  9620 ;; Auto vars:     Size  Location     Type
  9621 ;;		None
  9622 ;; Return value:  Size  Location     Type
  9623 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
  9624 ;; Registers used:
  9625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  9626 ;; Tracked objects:
  9627 ;;		On entry : 0/E
  9628 ;;		On exit  : 0/0
  9629 ;;		Unchanged: 0/0
  9630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9631 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9634 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9635 ;;Total ram usage:       11 bytes
  9636 ;; Hardware stack levels used:    1
  9637 ;; Hardware stack levels required when called:    1
  9638 ;; This function calls:
  9639 ;;		i2___lwmod
  9640 ;; This function is called by:
  9641 ;;		i2_IncreaseByAMonth
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text51
  9646  0028A6                     __ptext51:
  9647                           	opt stack 0
  9648  0028A6                     i2_IncreaseByAYear:
  9649                           	opt stack 16
  9650                           
  9651                           ;funcs.c: 42: dt.YEAR++;
  9652                           
  9653                           ;incstack = 0
  9654  0028A6  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
  9655  0028A8  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
  9656                           
  9657                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  9658  0028AA  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
  9659  0028AE  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
  9660  0028B2  D811               	call	PL114	;call to abstracted procedure
  9661  0028B4  EC34  F014         	call	i2___lwmod	;wreg free
  9662  0028B8  5001               	movf	?i2___lwmod,w,c
  9663  0028BA  1002               	iorwf	?i2___lwmod+1,w,c
  9664  0028BC  E102               	bnz	i2l2700
  9665                           
  9666                           ;funcs.c: 44: GLOBAL_CENTURY++;
  9667  0028BE  0100               	movlb	0	; () banked
  9668  0028C0  2BD2               	incf	_GLOBAL_CENTURY& (0+255),f,b
  9669  0028C2                     i2l2700:
  9670                           
  9671                           ;funcs.c: 45: return dt;
  9672  0028C2  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
  9673  0028C6  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
  9674  0028CA  0E0A               	movlw	10
  9675  0028CC                     i2u180_41:
  9676  0028CC  CFDB FFEB          	movff	plusw2,plusw0
  9677  0028D0  06E8               	decf	wreg,f,c
  9678  0028D2  E2FC               	bc	i2u180_41
  9679  0028D4  0012               	return		;funcret
  9680  0028D6                     __end_ofi2_IncreaseByAYear:
  9681                           	opt stack 0
  9682  0028D6                     PL114:
  9683                           	opt stack 16
  9684  0028D6  6A04               	clrf	i2___lwmod@divisor+1,c
  9685  0028D8  0E64               	movlw	100
  9686  0028DA  6E03               	movwf	i2___lwmod@divisor,c
  9687  0028DC  0C64               	retlw	100
  9688  0028DE                     __end_ofPL114:
  9689                           	opt stack 0
  9690                           tosu	equ	0xFFF
  9691                           tosh	equ	0xFFE
  9692                           tosl	equ	0xFFD
  9693                           pclatu	equ	0xFFB
  9694                           pclath	equ	0xFFA
  9695                           tblptru	equ	0xFF8
  9696                           tblptrh	equ	0xFF7
  9697                           tblptrl	equ	0xFF6
  9698                           tablat	equ	0xFF5
  9699                           prodh	equ	0xFF4
  9700                           prodl	equ	0xFF3
  9701                           intcon	equ	0xFF2
  9702                           postinc0	equ	0xFEE
  9703                           plusw0	equ	0xFEB
  9704                           fsr0h	equ	0xFEA
  9705                           fsr0l	equ	0xFE9
  9706                           wreg	equ	0xFE8
  9707                           indf1	equ	0xFE7
  9708                           postdec1	equ	0xFE5
  9709                           plusw1	equ	0xFE3
  9710                           fsr1h	equ	0xFE2
  9711                           fsr1l	equ	0xFE1
  9712                           indf2	equ	0xFDF
  9713                           postinc2	equ	0xFDE
  9714                           postdec2	equ	0xFDD
  9715                           plusw2	equ	0xFDB
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8
  9719                           
  9720 ;; *************** function i2___lwmod *****************
  9721 ;; Defined at:
  9722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;  dividend        2    0[COMRAM] unsigned int 
  9725 ;;  divisor         2    2[COMRAM] unsigned int 
  9726 ;; Auto vars:     Size  Location     Type
  9727 ;;  __lwmod         1    4[COMRAM] unsigned char 
  9728 ;; Return value:  Size  Location     Type
  9729 ;;                  2    0[COMRAM] unsigned int 
  9730 ;; Registers used:
  9731 ;;		wreg, status,2, status,0
  9732 ;; Tracked objects:
  9733 ;;		On entry : 0/E
  9734 ;;		On exit  : 0/0
  9735 ;;		Unchanged: 0/0
  9736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9737 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9738 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9740 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9741 ;;Total ram usage:        5 bytes
  9742 ;; Hardware stack levels used:    1
  9743 ;; This function calls:
  9744 ;;		Nothing
  9745 ;; This function is called by:
  9746 ;;		i2_IncreaseByADay
  9747 ;;		i2_IncreaseByAYear
  9748 ;; This function uses a non-reentrant model
  9749 ;;
  9750                           
  9751                           	psect	text52
  9752  002868                     __ptext52:
  9753                           	opt stack 0
  9754  002868                     i2___lwmod:
  9755                           	opt stack 18
  9756                           
  9757                           ;incstack = 0
  9758  002868  5003               	movf	i2___lwmod@divisor,w,c
  9759  00286A  1004               	iorwf	i2___lwmod@divisor+1,w,c
  9760  00286C  E017               	bz	i2l1299
  9761  00286E  0E01               	movlw	1
  9762  002870  6E05               	movwf	i2___lwmod@counter,c
  9763  002872  D004               	goto	i2l2684
  9764  002874                     i2l2682:
  9765  002874  90D8               	bcf	status,0,c
  9766  002876  3603               	rlcf	i2___lwmod@divisor,f,c
  9767  002878  3604               	rlcf	i2___lwmod@divisor+1,f,c
  9768  00287A  2A05               	incf	i2___lwmod@counter,f,c
  9769  00287C                     i2l2684:
  9770  00287C  AE04               	btfss	i2___lwmod@divisor+1,7,c
  9771  00287E  D7FA               	goto	i2l2682
  9772  002880                     i2l2686:
  9773  002880  5003               	movf	i2___lwmod@divisor,w,c
  9774  002882  5C01               	subwf	i2___lwmod@dividend,w,c
  9775  002884  5004               	movf	i2___lwmod@divisor+1,w,c
  9776  002886  5802               	subwfb	i2___lwmod@dividend+1,w,c
  9777  002888  E304               	bnc	i2l2690
  9778  00288A  5003               	movf	i2___lwmod@divisor,w,c
  9779  00288C  5E01               	subwf	i2___lwmod@dividend,f,c
  9780  00288E  5004               	movf	i2___lwmod@divisor+1,w,c
  9781  002890  5A02               	subwfb	i2___lwmod@dividend+1,f,c
  9782  002892                     i2l2690:
  9783  002892  90D8               	bcf	status,0,c
  9784  002894  3204               	rrcf	i2___lwmod@divisor+1,f,c
  9785  002896  3203               	rrcf	i2___lwmod@divisor,f,c
  9786  002898  2E05               	decfsz	i2___lwmod@counter,f,c
  9787  00289A  D7F2               	goto	i2l2686
  9788  00289C                     i2l1299:
  9789  00289C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
  9790  0028A0  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9791  0028A4  0012               	return		;funcret
  9792  0028A6                     __end_ofi2___lwmod:
  9793                           	opt stack 0
  9794                           tosu	equ	0xFFF
  9795                           tosh	equ	0xFFE
  9796                           tosl	equ	0xFFD
  9797                           pclatu	equ	0xFFB
  9798                           pclath	equ	0xFFA
  9799                           tblptru	equ	0xFF8
  9800                           tblptrh	equ	0xFF7
  9801                           tblptrl	equ	0xFF6
  9802                           tablat	equ	0xFF5
  9803                           prodh	equ	0xFF4
  9804                           prodl	equ	0xFF3
  9805                           intcon	equ	0xFF2
  9806                           postinc0	equ	0xFEE
  9807                           plusw0	equ	0xFEB
  9808                           fsr0h	equ	0xFEA
  9809                           fsr0l	equ	0xFE9
  9810                           wreg	equ	0xFE8
  9811                           indf1	equ	0xFE7
  9812                           postdec1	equ	0xFE5
  9813                           plusw1	equ	0xFE3
  9814                           fsr1h	equ	0xFE2
  9815                           fsr1l	equ	0xFE1
  9816                           indf2	equ	0xFDF
  9817                           postinc2	equ	0xFDE
  9818                           postdec2	equ	0xFDD
  9819                           plusw2	equ	0xFDB
  9820                           fsr2h	equ	0xFDA
  9821                           fsr2l	equ	0xFD9
  9822                           status	equ	0xFD8
  9823                           tosu	equ	0xFFF
  9824                           tosh	equ	0xFFE
  9825                           tosl	equ	0xFFD
  9826                           pclatu	equ	0xFFB
  9827                           pclath	equ	0xFFA
  9828                           tblptru	equ	0xFF8
  9829                           tblptrh	equ	0xFF7
  9830                           tblptrl	equ	0xFF6
  9831                           tablat	equ	0xFF5
  9832                           prodh	equ	0xFF4
  9833                           prodl	equ	0xFF3
  9834                           intcon	equ	0xFF2
  9835                           postinc0	equ	0xFEE
  9836                           plusw0	equ	0xFEB
  9837                           fsr0h	equ	0xFEA
  9838                           fsr0l	equ	0xFE9
  9839                           wreg	equ	0xFE8
  9840                           indf1	equ	0xFE7
  9841                           postdec1	equ	0xFE5
  9842                           plusw1	equ	0xFE3
  9843                           fsr1h	equ	0xFE2
  9844                           fsr1l	equ	0xFE1
  9845                           indf2	equ	0xFDF
  9846                           postinc2	equ	0xFDE
  9847                           postdec2	equ	0xFDD
  9848                           plusw2	equ	0xFDB
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853                           	psect	text53
  9854  000000                     __ptext53:
  9855                           	opt stack 0
  9856                           tosu	equ	0xFFF
  9857                           tosh	equ	0xFFE
  9858                           tosl	equ	0xFFD
  9859                           pclatu	equ	0xFFB
  9860                           pclath	equ	0xFFA
  9861                           tblptru	equ	0xFF8
  9862                           tblptrh	equ	0xFF7
  9863                           tblptrl	equ	0xFF6
  9864                           tablat	equ	0xFF5
  9865                           prodh	equ	0xFF4
  9866                           prodl	equ	0xFF3
  9867                           intcon	equ	0xFF2
  9868                           postinc0	equ	0xFEE
  9869                           plusw0	equ	0xFEB
  9870                           fsr0h	equ	0xFEA
  9871                           fsr0l	equ	0xFE9
  9872                           wreg	equ	0xFE8
  9873                           indf1	equ	0xFE7
  9874                           postdec1	equ	0xFE5
  9875                           plusw1	equ	0xFE3
  9876                           fsr1h	equ	0xFE2
  9877                           fsr1l	equ	0xFE1
  9878                           indf2	equ	0xFDF
  9879                           postinc2	equ	0xFDE
  9880                           postdec2	equ	0xFDD
  9881                           plusw2	equ	0xFDB
  9882                           fsr2h	equ	0xFDA
  9883                           fsr2l	equ	0xFD9
  9884                           status	equ	0xFD8
  9885                           
  9886                           	psect	rparam
  9887  0000                     tosu	equ	0xFFF
  9888                           tosh	equ	0xFFE
  9889                           tosl	equ	0xFFD
  9890                           pclatu	equ	0xFFB
  9891                           pclath	equ	0xFFA
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           postinc0	equ	0xFEE
  9900                           plusw0	equ	0xFEB
  9901                           fsr0h	equ	0xFEA
  9902                           fsr0l	equ	0xFE9
  9903                           wreg	equ	0xFE8
  9904                           indf1	equ	0xFE7
  9905                           postdec1	equ	0xFE5
  9906                           plusw1	equ	0xFE3
  9907                           fsr1h	equ	0xFE2
  9908                           fsr1l	equ	0xFE1
  9909                           indf2	equ	0xFDF
  9910                           postinc2	equ	0xFDE
  9911                           postdec2	equ	0xFDD
  9912                           plusw2	equ	0xFDB
  9913                           fsr2h	equ	0xFDA
  9914                           fsr2l	equ	0xFD9
  9915                           status	equ	0xFD8
  9916                           
  9917                           	psect	temp
  9918  00005C                     btemp:
  9919                           	opt stack 0
  9920  00005C                     	ds	1
  9921  0000                     int$flags	set	btemp
  9922                           tosu	equ	0xFFF
  9923                           tosh	equ	0xFFE
  9924                           tosl	equ	0xFFD
  9925                           pclatu	equ	0xFFB
  9926                           pclath	equ	0xFFA
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon	equ	0xFF2
  9934                           postinc0	equ	0xFEE
  9935                           plusw0	equ	0xFEB
  9936                           fsr0h	equ	0xFEA
  9937                           fsr0l	equ	0xFE9
  9938                           wreg	equ	0xFE8
  9939                           indf1	equ	0xFE7
  9940                           postdec1	equ	0xFE5
  9941                           plusw1	equ	0xFE3
  9942                           fsr1h	equ	0xFE2
  9943                           fsr1l	equ	0xFE1
  9944                           indf2	equ	0xFDF
  9945                           postinc2	equ	0xFDE
  9946                           postdec2	equ	0xFDD
  9947                           plusw2	equ	0xFDB
  9948                           fsr2h	equ	0xFDA
  9949                           fsr2l	equ	0xFD9
  9950                           status	equ	0xFD8
  9951                           tosu	equ	0xFFF
  9952                           tosh	equ	0xFFE
  9953                           tosl	equ	0xFFD
  9954                           pclatu	equ	0xFFB
  9955                           pclath	equ	0xFFA
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           postinc0	equ	0xFEE
  9964                           plusw0	equ	0xFEB
  9965                           fsr0h	equ	0xFEA
  9966                           fsr0l	equ	0xFE9
  9967                           wreg	equ	0xFE8
  9968                           indf1	equ	0xFE7
  9969                           postdec1	equ	0xFE5
  9970                           plusw1	equ	0xFE3
  9971                           fsr1h	equ	0xFE2
  9972                           fsr1l	equ	0xFE1
  9973                           indf2	equ	0xFDF
  9974                           postinc2	equ	0xFDE
  9975                           postdec2	equ	0xFDD
  9976                           plusw2	equ	0xFDB
  9977                           fsr2h	equ	0xFDA
  9978                           fsr2l	equ	0xFD9
  9979                           status	equ	0xFD8


Data Sizes:
    Strings     6
    Constant    7
    Data        63
    BSS         1307
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      91
    BANK0           160     76     147
    BANK1           256      0      68
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    Lcd_Text@buffer	PTR unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _Timer0_10ms->_IncreaseByASecond
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _main->_ReadGPS_DATE_TIME
    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___aldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___wmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Init->_Lcd_Command

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   71209
               _AdjustDayLightSaving
                        _Lcd_Command
                           _Lcd_Init
                           _Lcd_Text
                  _LoadAllFromEeprom
                  _ReadGPS_DATE_TIME
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                         9     2      7    6169
                                             18 BANK0      9     2      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     656
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2    1196
                                             14 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS_DATE_TIME                                   18    18      0   22460
                                             58 BANK0     18    18      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (2) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _TimeTextToSecond                                    24    20      4    1022
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     778
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _ReadGPSDateTime                                     18    16      2     566
                                              0 BANK0     18    16      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetDay                                               9     8      1    1991
                                             14 BANK0      9     8      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     600
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdjustDayLightSaving                                17     6     11   10974
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   29804
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    8274
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    7407
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                10    10      0    7088
                                              6 BANK0     10    10      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    7035
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3515
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             4     2      2     889
                                              3 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              3 BANK0      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           8     8      0    1748
                                             52 COMRAM     8     8      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0    1748
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (9) _TMR0_CallBack                                        0     0      0    1748
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (10) _Timer0_10ms                                         0     0      0    1748
                  _IncreaseByASecond
                          i2___awmod
 ---------------------------------------------------------------------------------
 (11) i2___awmod                                           6     2      4     348
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (11) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (12) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (13) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdjustDayLightSaving
     _DecreaseByADay
       _DecreaseByAMonth
         _DecreaseByAYear
           ___lwmod
       ___lwmod
     _IncreaseByADay
       _IncreaseByAMonth
         _IncreaseByAYear
           ___lwmod
       ___lwmod
     ___wmul
   _Lcd_Command
     _Lcd_Delay5us
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5us
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS_DATE_TIME
     _AdjustDayLightSaving
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       ___wmul
     _DecreaseByADay
       _DecreaseByAMonth
         _DecreaseByAYear
           ___lwmod
       ___lwmod
     _EUSART1_Initialize
     _GetDay
       ___awdiv
       ___awmod
         ___awdiv (ARG)
     _IncreaseByADay
       _IncreaseByAMonth
         _IncreaseByAYear
           ___lwmod
       ___lwmod
     _ReadGPSDateTime
       _EUSART1_Read
     _TimeTextToSecond
       ___lmul
     _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _TMR0_SetInterruptHandler
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
     ___aldiv
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod
         i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     3C0      35       25.9%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      44       8       26.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4C      93       5       91.9%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      5B       1       96.8%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     222       6        0.0%
DATA                 0      0     5E2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Jul 17 18:06:29 2017

            __end_of_LoadStatesFromEeprom 121E                   __end_of_ReadGPSDateTime 211E  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1678                                        PL4 1692  
                                      PL6 169A                                        PL8 13D0  
                                      l97 20FC                              ___awdiv@sign 0065  
                     ___wmul@multiplicand 0062                                       PL10 13DC  
                                     PL20 1786                                       PL12 1B96  
                                     PL30 1F0A                                       PL22 1796  
                                     PL14 121E                                       PL40 1AD6  
                                     PL32 1F22                                       PL24 1BAA  
                                     PL16 19E0                                       PL50 1BCA  
                                     PL42 17A4                                       PL34 1D4A  
                                     PL26 1BB4                                       PL18 175C  
                                     PL60 17C4                                       PL52 1D84  
                                     PL44 1BBE                                       PL36 1D62  
                                     PL28 153C                                       PL70 1AEC  
                                     PL62 1D92                                       PL54 122E  
                                     PL46 1D7A                                       PL38 1F3A  
                             __CFG_LVP$ON 000000                                       PL80 1F62  
                                     PL72 19EA                                       PL64 1F50  
                                     PL56 1CA8                                       PL48 17BA  
                                     PL90 1CB6                                       PL82 261C  
                                     PL74 124E                                       PL66 123C  
                                     PL58 21C2                                       PL92 203E  
                                     PL84 2326                                       PL76 1DA4  
                                     PL68 10B4                                       PL94 19F6  
                                     PL86 2330                                       PL78 1BD6  
                                     PL96 21D4                                       PL88 1548  
                                     PL98 290C                                       l103 211C  
                                     l214 22D0                                       l420 2A18  
                                     l524 29D6                                       l850 1C82  
                                     l860 292C                                       l868 1854  
                                     l898 2686                                       _GIE 007F97  
                            __CFG_CPD$OFF 000000                        DecreaseByAMonth@dt 0070  
                            ___awmod@sign 006D                                       tosl 000FFD  
                                     wreg 000FE8                       __end_of_Lcd_Command 1D4A  
           projMain@NO_OF_DAYS_IN_A_MONTH 00AC                                      PL100 125A  
                                    PL110 18F4                                      PL102 1554  
                                    PL112 1264                                      PL104 18EA  
                                    PL114 28D6                                      PL106 1CC0  
                                    PL108 1E84                              __CFG_ZCD$OFF 000000  
                                    l3000 1BF0                                      l3012 1C4C  
                                    l3100 245E                                      l3024 1C8E  
                                    l3120 249E                                      l3112 2488  
                                    l3104 246A                                      l3040 269A  
                                    l3200 1B2A                                      l3026 1C94  
                                    l3018 1C68                                      l3106 2472  
                                    l3210 1B44                                      l3052 23DA  
                                    l3108 2476                                      l3116 2492  
                                    l3220 1B60                                      l3134 206C  
                                    l3230 1B7A                                      l3064 23FA  
                                    l3080 242A                                      l3240 1B94  
                                    l3066 2402                                      l3058 23EA  
                                    l3162 20CC                                      l3154 20B6  
                                    l3170 2108                                      l3146 209C  
                                    l3250 27B4                                      l1299 285E  
                                    l3084 2436                                      l3076 2420  
                                    l3068 2406                                      l3404 10D6  
                                    l3164 20F0                                      l3148 20A0  
                                    l3252 27BA                                      l3260 27DC  
                                    l3414 10F8                                      l2710 283E  
                                    l3190 1B10                                      l3254 27C0  
                                    l2712 2842                                      l3096 2452  
                                    l3168 2100                                      l3248 27AE  
                                    l3442 11D4                                      l3426 113C  
                                    l3258 27C8                                      l3610 2234  
                                    l3602 2210                                      l3700 25E8  
                                    l3460 1568                                      l2716 2854  
                                    l2708 2836                                      l2820 2702  
                                    l3620 2266                                      l3612 2238  
                                    l3446 11FC                                      l3712 2616  
                                    l3704 25F0                                      l3472 15B0  
                                    l3368 16AE                                      l2808 274C  
                                    l3560 183E                                      l3608 2228  
                                    l3624 2274                                      l3706 2604  
                                    l3482 1616                                      l2818 26FC  
                                    l2738 28F8                                      l3562 184E  
                                    l3708 260C                                      l3476 15C2  
                                    l3572 188C                                      l3628 2288  
                                    l3724 216C                                      l3732 21BA  
                                    l3486 1644                                      l3478 15FE  
                                    l3558 1834                                      l3726 217C  
                                    l3830 14D4                                      l2864 2A26  
                                    l3832 14E2                                      l3824 1456  
                                    l3578 18D6                                      l2980 1FD0  
                                    l2964 1F80                                      l3596 21F8  
                                    l3694 25D6                                      l2974 1FB4  
                                    l3696 25DC                                      l2992 202A  
                                    l3784 108C                                      l3792 10B2  
                                    l3698 25E2                                      l2986 1FEC  
                                    l3778 1042                                      STR_1 0F0B  
                                    STR_2 0F08                                      u2101 2756  
                                    u2121 26E0                                      u3010 121C  
                                    u2131 26F2                                      u3020 15AC  
                                    u2141 270C                                      _LATA 000F83  
                                    _LATB 000F84                                      _LATC 000F85  
                                    u2081 2732                                      u3201 18BC  
                                    u3050 1676                                      u2235 1E9E  
                                    u2091 2744                                      u2411 2010  
                                    u3211 18CE                                      u3060 2572  
                                    u2245 1EA4                                      u2421 2022  
                                    u3221 18E0                                      u2255 1EB2  
                                    u2431 2034                                      u2265 1CDA  
                                    u3401 103A                                      u3410 1058  
                                    u2275 1CE0                                      u3171 1872  
                                    u2285 1CF0                                      u2541 1C9E  
                                    u2461 1C16                                      u3181 1884  
                                    u3421 1072                                      u3341 0F1A  
                                    u3190 18A2                                      u1911 293C  
                                    u2471 1C28                                      u3431 1084  
                                    u3351 0F2C                                      u2800 1962  
                                    u2801 195E                                      u3441 1096  
                                    u2810 1964                                      u3451 10A8  
                                    u3517 2102                                      u3374 0F92  
                                    u3527 1ECA                                      u3391 1028  
                                    u3375 0F8C                                      u3537 1EF8  
                                    u3481 143C                                      u2690 205A  
                   __size_of_WriteLongInt 00A4                                      u3547 2A32  
                                    u1891 2902                                      u3491 144E  
                                    u2940 175A                                      u3557 1D08  
                                    u2950 1138                                      u3567 1D38  
                                    u2960 117E                                      u2974 11B2  
                                    u2975 11B0                                      u2994 11DA  
                                    u2995 11D8                                      _PLLR 0076D8  
                                    _WPUA 000F10                                      _WPUB 000F18  
                                    _WPUC 000F20                                      _WPUE 000F2D  
                          _IncreaseByADay 1F6C                          _DecreaseByAMonth 26CA  
                       ??_Lcd_Delay5500us 0060                             __CFG_FCMEN$ON 000000  
                                    _main 13E6                             ?_EUSART1_Read 0001  
                         _TMR0_StartTimer 2A6C                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                    __end_of_Lcd_Delay5us 2A6C                                      fsr2l 000FD9  
                                    btemp 005C                                      prodh 000FF4  
                                    prodl 000FF3                                      start 0060  
              LoadEventsFromEeprom@Temp16 006E                             __CFG_CSWEN$ON 000000  
                            ___param_bank 000000                                _Lcd_CharCP 1E8E  
                           __CFG_SCANE$ON 000000                    AdjustDayLightSaving@dt 0089  
                 __end_of_TMR0_Initialize 282A            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0016                   ?_LoadSettingsFromEeprom 0001  
           __end_of_OSCILLATOR_Initialize 29DC                LoadStatesFromEeprom@j_1234 0076  
                         __end_of___aldiv 229A                                     ?_main 0001  
                         __end_of___awdiv 2440                             __CFG_WDTE$OFF 000000  
                         __end_of___awmod 24A8                           ___awdiv@divisor 0062  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 2868  
                                   i2l448 0036                           ___awdiv@counter 0064  
                                   _OSCEN 000EDC                                     _TMR0H 000FD4  
                                   _TMR0L 000FD3                                     _TRISA 000F88  
                                   _TRISB 000F89                                     _TRISC 000F8A  
                            _WriteLongInt 211E         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 0064  
               ?_TMR0_SetInterruptHandler 0060                             __CFG_WRT3$OFF 000000  
                         _IncreaseByAYear 28DE                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         IncreaseByAYear@dt 0065  
                        __end_of_TMR0_ISR 2A5A                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                    __end_of_IncreaseByADay 203E  
               __size_of_ValidateDateTime 00A2                        __CFG_MCLRE$EXTMCLR 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0060                                     plusw0 000FEB  
                                   plusw1 000FE3                                     plusw2 000FDB  
                __end_ofi2_IncreaseByADay 1E84                                     status 000FD8  
                            __end_ofPL100 1264                              __end_ofPL110 18FC  
                            __end_ofPL102 155E                              __end_ofPL112 126C  
                            __end_ofPL104 18F4                              __end_ofPL114 28DE  
                            __end_ofPL106 1CCA                              __end_ofPL108 1E8E  
           __size_of_LoadCyclesFromEeprom 011A                        __size_ofi2___awmod 0068  
                      _CENTI_SECOND_COUNT 005B                        __size_ofi2___lwmod 003E  
                __size_of_DecreaseByAYear 0032                          __end_of_Lcd_Init 2326  
                        __end_of_Lcd_Text 261C                                _ReadEeprom 2A04  
                         __initialization 233A                __end_of_EUSART1_Initialize 2A04  
                            __end_of_main 153C                          ??_DecreaseByADay 0086  
                        ?_ReadGPSDateTime 0060            __end_of_LoadSettingsFromEeprom 13D0  
                __end_of_TimeTextToSecond 1AD6               ?_INTERRUPT_InterruptManager 0001  
           LoadStatesFromEeprom@AddStates 0078                               _Lcd_Command 1CCA  
                 ReadGPS_DATE_TIME@F11440 00CB                   ReadGPS_DATE_TIME@F11442 00C4  
                 AdjustDayLightSaving@End 0096                                    ??_main 00AC  
                           __activetblptr 000003             LoadStatesFromEeprom@AudAddInc 0073  
                 __end_of_TMR0_StartTimer 2A70                           ?_IncreaseByADay 007B  
                        ___awdiv@dividend 0060                      _LoadStatesFromEeprom 10C0  
                                  _ANSELA 000F11                                    _ANSELB 000F19  
                                  _ANSELC 000F21                                    _T0CON0 000FD5  
                                  _T0CON1 000FD6                                    _RC1REG 000F99  
                                  _CYCLES 0100                                    _RC1STA 000F9D  
                                  _ODCONA 000F0F                                    _ODCONB 000F17  
                                  _ODCONC 000F1F                                    _RC6PPS 000EFD  
                                  _EVENTS 0200                            __CFG_WDTCCS$SC 000000  
                                  i2l1299 289C                                    i2l2700 28C2  
                                  i2l2728 2796                                    i2l2840 24D2  
                                  i2l2832 24BA                                    i2l2690 2892  
                                  i2l2682 2874                                    i2l2842 24DA  
                                  i2l2684 287C                                    i2l2772 1E12  
                                  i2l2756 1DC2                                    i2l2844 24DE  
                                  i2l2852 24FA                                    i2l2836 24C6  
                                  i2l2686 2880                                    i2l2766 1DF6  
                                  i2l2950 264C                                    i2l2784 1E70  
                                  i2l2856 2506                                    i2l2848 24F0  
                                  i2l2778 1E32                                    i2l2796 25BE  
                        WriteLongInt@Sign 0078                                    _OSCFRQ 000EDE  
                                  _NVMDAT 000F80                            Lcd_Text@buffer 0064  
                                  _TX1STA 000F9E                                    _STATES 02F0  
                           _GPS_DATE_TIME 00D3                             ??_Timer0_10ms 0035  
                        WriteLongInt@size 0077                                    _GetDay 18FC  
                        _IncreaseByAMonth 2716                            __CFG_PWRTE$OFF 000000  
                      IncreaseByAMonth@dt 0070                            __CFG_XINST$OFF 000000  
                             ?_Lcd_CharCP 0001                 AdjustDayLightSaving@Start 0094  
                                  ___lmul 267E                                 ??___aldiv 0068  
                                  ___wmul 296E                                 ??___awdiv 0064  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___lwmod 0064                          ?_TMR0_Initialize 0001  
                                  clear_0 2382                                    clear_1 2394  
                                  clear_2 23A0                                    clear_3 23AC  
                                  clear_4 23B8                   __end_of_IncreaseByAYear 290C  
                        ___awdiv@quotient 0066                           ___awmod@divisor 006A  
                         ___awmod@counter 006C                     __end_of_Lcd_WriteChar 27EA  
                            __pdataCOMRAM 003D                         __end_ofi2___awmod 2510  
                            __mediumconst 0000                         __end_ofi2___lwmod 28A6  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                     __end_of_TMR0_CallBack 29AE  
                          i2___awmod@sign 0006                     ?_LoadStatesFromEeprom 0001  
TMR0_SetInterruptHandler@InterruptHandler 0060                     __size_of_Lcd_Delay5us 0008  
           __size_of_INTERRUPT_Initialize 0004                        Lcd_Command@command 0062  
                   LoadEventsFromEeprom@i 006A                          DecreaseByADay@dt 007B  
                       _SYSTEM_Initialize 29DC                                __accesstop 0060  
                 __end_of__initialization 23BE                __end_ofi2_IncreaseByAMonth 27AA  
                         __CFG_FEXTOSC$HS 000000                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001              LoadSettingsFromEeprom@Temp16 006A  
            LoadSettingsFromEeprom@Temp32 0066                               ?_ReadEeprom 0060  
               i2IncreaseByADay@MonthDays 0029                        i2___lwmod@dividend 0001  
                          __pcstackCOMRAM 0001                              __pidataBANK0 2946  
                     __end_of_Timer0_10ms 267E                       ??_SYSTEM_Initialize 0064  
                               ?_TMR0_ISR 0001                         ??_DecreaseByAYear 0070  
                              __end_ofPL2 1692                                __end_ofPL4 169A  
                              __end_ofPL6 16A4                                __end_ofPL8 13DC  
                __end_of_DecreaseByAMonth 2716                      __end_of_EUSART1_Read 2A2A  
                            _Lcd_Delay5us 2A64                           _Lcd_Delay5500us 2A2A  
                          Lcd_WriteChar@c 006F                            Lcd_WriteChar@x 006E  
                          Lcd_WriteChar@y 0070                                 ?_Lcd_Init 0001  
            __end_of_AdjustDayLightSaving 18EA                                 ?_Lcd_Text 0063  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 29F0  
                        _ValidateDateTime 1AF4                       __size_of_Lcd_CharCP 007C  
           __size_of_LoadEventsFromEeprom 00B8                                __pbssBANK0 00D3  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                                 ?_GetDay 006E                         ReadEeprom@Address 0060  
        __end_of_TMR0_SetInterruptHandler 2A64                                   ?___lmul 0060  
                                 ?___wmul 0060                                ??_TMR0_ISR 0035  
                         __CFG_PPS1WAY$ON 000000                            ___lmul@product 0068  
                        ?_IncreaseByAYear 0065               LoadCyclesFromEeprom@Address 006D  
                                 GetDay@d 0073                                   GetDay@m 0074  
                                 GetDay@t 003D                                   GetDay@y 0075  
                                 _SP1BRGH 000F9C                                   _SP1BRGL 000F9B  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                  ??_LoadStatesFromEeprom 0068                                   _NVMADRH 000F7F  
                                 _NVMADRL 000F7E                                   _OSCTUNE 000EDD  
                              ??_Lcd_Init 0063                                   _PPSLOCK 000EA0  
                              ??_Lcd_Text 0065                       __size_of_ReadEeprom 0014  
                     IncreaseByASecond@dt 002A                         _IncreaseByASecond 2576  
              LoadCyclesFromEeprom@i_1299 0073                         ?i2_IncreaseByADay 001C  
                    ValidateDateTime@Date 0060                               _Timer0_10ms 262C  
                    ValidateDateTime@Item 0063                      ValidateDateTime@Time 0061  
                         __size_of_GetDay 00E4                        ?_IncreaseByASecond 002A  
                                 __Hparam 0000                        ??i2_IncreaseByADay 0027  
                                 __Lparam 0000                                 _DATE_TIME 00DE  
             AdjustDayLightSaving@Present 0098                                   ___aldiv 21DE  
                       Lcd_WriteChar@data 0071                                   ___awdiv 23C8  
                         __size_of___lmul 004C                                   ___awmod 2440  
                         __size_of___wmul 0026                   __end_of_Lcd_Delay5500us 2A3C  
                                 ___lwmod 282A                              __psmallconst 0F00  
                     ??_IncreaseByASecond 0035                                   __pcinit 233A  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 13E6  
                                 __ptext1 211E                                   __ptext2 21DE  
                                 __ptext3 27AA                                   __ptext4 29DC  
                                 __ptext5 27EA                                   __ptext6 2A6C  
                                 __ptext7 2A5A                                   __ptext8 2510  
                                 __ptext9 29C6              __end_of_LoadCyclesFromEeprom 1678  
                      ??_TimeTextToSecond 0070                          ??_IncreaseByADay 0086  
                   _OSCILLATOR_Initialize 29C6                  __end_of_IncreaseByAMonth 2760  
                        ___awmod@dividend 0068                          ___aldiv@dividend 0060  
                      _EUSART1_Initialize 29F0                  ??_PIN_MANAGER_Initialize 0060  
              __size_of_SYSTEM_Initialize 0014        LoadStatesFromEeprom@AddAudioNormal 006B  
                    end_of_initialization 23BE                 __end_of_IncreaseByASecond 25D2  
                     ?_EUSART1_Initialize 0001                           _DAY_LIGHT_START 00ED  
                            ??_Lcd_CharCP 0060                          ___aldiv@quotient 006A  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0012                                 Lcd_Text@x 0063  
                    _AdjustDayLightSaving 17D8                                 Lcd_Text@y 0065  
                    ??_EUSART1_Initialize 0060                                 _TIME_ZONE 00F1  
                   __CFG_WDTCPS$WDTCPS_31 000000                  _TMR0_SetInterruptHandler 2A5A  
                __size_of_ReadGPSDateTime 00D6                                 _TRISAbits 000F88  
           LoadSettingsFromEeprom@Address 006C                            _GLOBAL_CENTURY 00D2  
                   LoadCyclesFromEeprom@i 0071                     LoadCyclesFromEeprom@j 006F  
                               i2___awmod 24A8                                 i2___lwmod 2868  
                      __end_of_Lcd_CharCP 1F0A                         DecreaseByAYear@dt 0065  
                       _LoadAllFromEeprom 2A3C                         _ReadGPS_DATE_TIME 0F10  
                            _EUSART1_Read 2A18                           _DecreaseByAYear 2914  
                      ?_LoadAllFromEeprom 0001                        ?_ReadGPS_DATE_TIME 0001  
                 DecreaseByADay@MonthDays 0087                            __end_of_GetDay 19E0  
                            ??_ReadEeprom 0062                      _timer0ReloadVal16bit 0057  
                   ?_AdjustDayLightSaving 0089                          IncreaseByADay@dt 007B  
            __end_of_INTERRUPT_Initialize 2A74                  __end_of_ValidateDateTime 1B96  
                     ??_LoadAllFromEeprom 007C                        i2_IncreaseByAMonth 2760  
                          __end_of___lmul 26CA                       ??_ReadGPS_DATE_TIME 009A  
                        ?_Lcd_Delay5500us 0001                            __end_of___wmul 2994  
                           __pidataCOMRAM 29AE                         __size_of_TMR0_ISR 000E  
                       ?_DecreaseByAMonth 0070                    ?_OSCILLATOR_Initialize 0001  
                     ?i2_IncreaseByAMonth 0011                        ??_DecreaseByAMonth 007B  
                             __end_ofPL10 13E6                               __end_ofPL20 1796  
                             __end_ofPL12 1BAA                               __end_ofPL30 1F22  
                             __end_ofPL22 17A4                               __end_ofPL14 122E  
                             __end_ofPL40 1AEC                               __end_ofPL32 1F3A  
                             __end_ofPL24 1BB4                               __end_ofPL16 19EA  
                             __end_ofPL50 1BD6                               __end_ofPL42 17BA  
                             __end_ofPL34 1D62                               __end_ofPL26 1BBE  
                             __end_ofPL18 1786                               __end_ofPL60 17D8  
                             __end_ofPL52 1D92                               __end_ofPL44 1BCA  
                             __end_ofPL36 1D7A                               __end_ofPL28 1548  
                             __end_ofPL70 1AF4                               __end_ofPL62 1DA4  
                             __end_ofPL54 123C                               __end_ofPL46 1D84  
                             __end_ofPL38 1F50                               __end_ofPL80 1F6C  
                             __end_ofPL72 19F6                               __end_ofPL64 1F62  
                             __end_ofPL56 1CB6                               __end_ofPL48 17C4  
                             __end_ofPL90 1CC0                               __end_ofPL82 262C  
                             __end_ofPL74 125A                               __end_ofPL66 124E  
                             __end_ofPL58 21D4                               __end_ofPL92 2048  
                             __end_ofPL84 2330                               __end_ofPL76 1DAE  
                             __end_ofPL68 10C0                               __end_ofPL94 1A00  
                             __end_ofPL86 233A                               __end_ofPL78 1BE0  
                             __end_ofPL96 21DE                               __end_ofPL88 1554  
                             __end_ofPL98 2914                       start_initialization 233A  
                 __size_of_DecreaseByADay 00C8                  __size_of_TMR0_Initialize 0040  
         __size_of_PIN_MANAGER_Initialize 0066             __end_ofReadGPSDateTime@F11434 0F08  
                              ?i2___awmod 0001                        __end_of_ReadEeprom 2A18  
                              ?i2___lwmod 0001                 __end_of_LoadAllFromEeprom 2A4C  
                       __size_of_Lcd_Init 008C                __size_of_IncreaseByASecond 005C  
               __end_of_ReadGPS_DATE_TIME 10B4                         __size_of_Lcd_Text 004A  
                         WriteLongInt@POS 0079                                  ??_GetDay 006F  
                         WriteLongInt@Val 0073                    __size_of_Lcd_WriteChar 0040  
                    _LoadCyclesFromEeprom 155E                      ??i2_IncreaseByAMonth 001C  
                ??_LoadSettingsFromEeprom 0066                      i2IncreaseByAMonth@dt 0011  
                        __CFG_LPBOREN$OFF 000000                                  ??___lmul 0068  
            __end_of_LoadEventsFromEeprom 175C                                  ??___wmul 0064  
                  __size_of_TMR0_CallBack 001A                               __pdataBANK0 00AC  
                           _DAY_LIGHT_END 00E9                               __pbssBIGRAM 02F0  
                           ?_WriteLongInt 0072                      __size_of_Lcd_Command 0080  
                ReadGPSDateTime@StartCode 0066                               __pbssCOMRAM 0055  
                           __pcstackBANK0 0060                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                   __end_of_DecreaseByAYear 2946  
                       ??_ReadGPSDateTime 0062                             WriteLongInt@x 0072  
                           WriteLongInt@y 007A                              ?_Timer0_10ms 0001  
                   ?_LoadCyclesFromEeprom 0001                     _TMR0_InterruptHandler 0055  
                __size_of_TMR0_StartTimer 0004         LoadStatesFromEeprom@TempNormalAdd 006F  
                  _PIN_MANAGER_Initialize 2510                    ??_AdjustDayLightSaving 0094  
                               __pintcode 0008                                  ?___aldiv 0060  
                                ?___awdiv 0060                                  ?___awmod 0068  
                                ?___lwmod 0060              ??_INTERRUPT_InterruptManager 0035  
               __size_ofi2_IncreaseByADay 00D6                            ??_WriteLongInt 0079  
                                _BAUD1CON 000F9F                             _Lcd_WriteChar 27AA  
                             __smallconst 0F00               LoadEventsFromEeprom@Address 006C  
                       ?_IncreaseByAMonth 0070                  __size_of_IncreaseByAYear 002E  
                      ??_IncreaseByAMonth 007B                               ??i2___awmod 0005  
                           _TMR0_CallBack 2994             __size_of_LoadStatesFromEeprom 015E  
                             ??i2___lwmod 0005                __size_of_LoadAllFromEeprom 0010  
                                _GLOBAL_I 0059                      _INTERRUPT_Initialize 2A70  
              __size_of_ReadGPS_DATE_TIME 01A4                 __size_of_TimeTextToSecond 00D6  
                         ___aldiv@divisor 0064                         ??_TMR0_Initialize 0062  
                        ReadGPSDateTime@i 006D                           ___aldiv@counter 0068  
                          ___wmul@product 0064                                  _LATAbits 000F83  
                                _LATCbits 000F85                                  _PIE0bits 000EC2  
                     __CFG_BORV$VBOR_2P45 000000           __size_of_LoadSettingsFromEeprom 0164  
                                i2u200_41 1E56                                  i2u201_41 1E68  
                                i2u202_41 1E7A                                  i2u204_41 25A4  
                                i2u205_41 25B6                                  i2u206_41 25C8  
                                i2u231_41 2662       __size_of_INTERRUPT_InterruptManager 0052  
                                i2u232_41 2674                                  i2u180_41 28CC  
              ??_TMR0_SetInterruptHandler 0062                                  _PIR0bits 000ECA  
                                i2u185_41 277C                                  i2u186_41 278E  
                                i2u187_41 27A0                                  _PIR3bits 000ECD  
                     ReadGPSDateTime@Date 0060                       ReadGPSDateTime@Time 0061  
                                _TMR0_ISR 2A4C                      TimeTextToSecond@Time 006C  
                            Lcd_Init@data 0063                            ?_Lcd_WriteChar 006E  
                       ___wmul@multiplier 0060                            _DecreaseByADay 1BE0  
                                _Lcd_Init 229A                            ?_TMR0_CallBack 0001  
                                _Lcd_Text 25D2                         i2_IncreaseByAYear 28A6  
                       ___lmul@multiplier 0060                                 copy_data0 234E  
                               copy_data1 236E                     ?_INTERRUPT_Initialize 0001  
                        ?_DecreaseByAYear 0065                      _LoadEventsFromEeprom 16A4  
                      i2___awmod@dividend 0001                        ?i2_IncreaseByAYear 0006  
                  ??_LoadCyclesFromEeprom 0066                     ReadGPS_DATE_TIME@Date 00A5  
                            Lcd_Text@data 0066                                  __Hrparam 0000  
                     ??i2_IncreaseByAYear 0011                     ReadGPS_DATE_TIME@Time 009E  
                 __CFG_RSTOSC$EXTOSC_4PLL 000000                       i2IncreaseByAYear@dt 0006  
                                __Lrparam 0000                   ReadGPSDateTime@TempChar 0070  
                      __CFG_BOREN$SBORDIS 000000                   ??_OSCILLATOR_Initialize 0060  
                       ??_TMR0_StartTimer 0060                          __size_of___aldiv 00BC  
                       ?_ValidateDateTime 0060                          __size_of___awdiv 0078  
                        __size_of___awmod 0068               __size_of_EUSART1_Initialize 0014  
                        __size_of___lwmod 003E                        ??_ValidateDateTime 0062  
                  __end_of_DecreaseByADay 1CA8                             ?_Lcd_Delay5us 0001  
                  _LoadSettingsFromEeprom 126C                                _T0CON0bits 000FD5  
               __end_ofi2_IncreaseByAYear 28D6                                  __ptext10 2A70  
                                __ptext11 0F10                                  __ptext20 17D8  
                                __ptext12 1AF4                                  __ptext21 1F6C  
                                __ptext13 1A00                                  __ptext30 23C8  
                                __ptext22 2716                                  __ptext14 267E  
                                __ptext31 126C                                  __ptext23 28DE  
                                __ptext15 2048                                  __ptext40 1CCA  
                                __ptext32 16A4                                  __ptext24 1BE0  
                                __ptext16 2A18                                  __ptext41 2A64  
                                __ptext33 155E                                  __ptext25 26CA  
                                __ptext17 18FC                                  __ptext50 2760  
                                __ptext34 296E                                  __ptext26 2914  
                                __ptext18 2440                                  __ptext51 28A6  
                                __ptext43 2A4C                                  __ptext35 2A04  
                                __ptext27 282A                                  __ptext19 29F0  
                                __ptext52 2868                                  __ptext44 2994  
                                __ptext36 25D2                                  __ptext28 2A3C  
                                __ptext53 0000                                  __ptext45 2A74  
                                __ptext37 1E8E                                  __ptext29 10C0  
                                __ptext46 262C                                  __ptext38 229A  
                                __ptext47 24A8                                  __ptext39 2A2A  
                                __ptext48 2576                                  __ptext49 1DAE  
                   ?_LoadEventsFromEeprom 0001                     LoadStatesFromEeprom@i 007A  
                   LoadStatesFromEeprom@j 0074                 __size_of_DecreaseByAMonth 004C  
                             Lcd_CharCP@c 0062                   __size_of_IncreaseByADay 00D2  
                           __size_of_main 0156                         ??_IncreaseByAYear 0070  
    __end_of_TMR0_DefaultInterruptHandler 2A76     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 2A74                      __end_of_WriteLongInt 21C2  
                    __CFG_WDTCWS$WDTCWS_7 000000                      __size_of_Timer0_10ms 0052  
                              _RC1STAbits 000F9D                        ReadGPSDateTime@Pos 0071  
                                int$flags 005C        __end_of_INTERRUPT_InterruptManager 005A  
              _INTERRUPT_InterruptManager 0008                           ??_Lcd_WriteChar 0070  
     LoadStatesFromEeprom@AddAudioSpecial 006D                            ??_Lcd_Delay5us 0060  
                        i2_IncreaseByADay 1DAE               PIN_MANAGER_Initialize@state 0060  
                         ?_DecreaseByADay 007B                        i2IncreaseByADay@dt 001C  
                         _ReadGPSDateTime 2048                         i2___awmod@divisor 0003  
                       i2___awmod@counter 0005                                _INTCONbits 000FF2  
                         ??_TMR0_CallBack 0035                               _NVMCON1bits 000F81  
                              GetDay@Date 006E                  __size_of_Lcd_Delay5500us 0012  
                 IncreaseByADay@MonthDays 0088                    ??_INTERRUPT_Initialize 0060  
                                intlevel2 0000                          _TimeTextToSecond 1A00  
                   ReadGPSDateTime@F11434 0F01                          ___lwmod@dividend 0060  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
                             _PPSLOCKbits 000EA0               __size_ofi2_IncreaseByAMonth 004A  
      LoadStatesFromEeprom@TempSpecialAdd 0071             ?_TMR0_DefaultInterruptHandler 0001  
                   ReadGPSDateTime@Commas 006F                             ??_Lcd_Command 0060  
                              _RX1PPSbits 000EB5                           ___lwmod@divisor 0062  
                         _TMR0_Initialize 27EA                           ___lwmod@counter 0064  
              __size_ofi2_IncreaseByAYear 0030                              ___aldiv@sign 0069  
                  ??_LoadEventsFromEeprom 0066            __end_of_PIN_MANAGER_Initialize 2576  
                  TimeTextToSecond@Second 0080                 __size_of_IncreaseByAMonth 004A  
