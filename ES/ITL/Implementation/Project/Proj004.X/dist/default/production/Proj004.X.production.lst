

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Thu Jul 20 16:42:37 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84                           	psect	pa_nodes0,global,class=CODE,delta=1
    85  0000                     
    86                           ; Version 1.42
    87                           ; Generated 13/04/2017 GMT
    88                           ; 
    89                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    90                           ; All rights reserved.
    91                           ; 
    92                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    93                           ; 
    94                           ; Redistribution and use in source and binary forms, with or without modification, are
    95                           ; permitted provided that the following conditions are met:
    96                           ; 
    97                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    98                           ;        conditions and the following disclaimer.
    99                           ; 
   100                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   101                           ;        of conditions and the following disclaimer in the documentation and/or other
   102                           ;        materials provided with the distribution.
   103                           ; 
   104                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   105                           ;        software without specific prior written permission.
   106                           ; 
   107                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   108                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   109                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   110                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   111                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   112                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   113                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   114                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   115                           ; 
   116                           ; 
   117                           ; Code-generator required, PIC18F26K40 Definitions
   118                           ; 
   119                           ; SFR Addresses
   120  0000                     tosu	equ	0xFFF
   121                           tosh	equ	0xFFE
   122                           tosl	equ	0xFFD
   123                           pclath	equ	0xFFA
   124                           tblptru	equ	0xFF8
   125                           tblptrh	equ	0xFF7
   126                           tblptrl	equ	0xFF6
   127                           tablat	equ	0xFF5
   128                           prodh	equ	0xFF4
   129                           prodl	equ	0xFF3
   130                           intcon	equ	0xFF2
   131                           plusw0	equ	0xFEB
   132                           wreg	equ	0xFE8
   133                           indf1	equ	0xFE7
   134                           postinc1	equ	0xFE6
   135                           plusw1	equ	0xFE3
   136                           fsr1h	equ	0xFE2
   137                           fsr1l	equ	0xFE1
   138                           indf2	equ	0xFDF
   139                           postinc2	equ	0xFDE
   140                           postdec2	equ	0xFDD
   141                           plusw2	equ	0xFDB
   142                           fsr2h	equ	0xFDA
   143                           fsr2l	equ	0xFD9
   144                           status	equ	0xFD8
   145                           
   146                           	psect	idataCOMRAM
   147  003236                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _NEXT_EVENT
   151  003236  FF                 	db	255
   152                           
   153                           ;initializer for _PRESENT_EVENT
   154  003237  FF                 	db	255
   155                           tosu	equ	0xFFF
   156                           tosh	equ	0xFFE
   157                           tosl	equ	0xFFD
   158                           pclath	equ	0xFFA
   159                           tblptru	equ	0xFF8
   160                           tblptrh	equ	0xFF7
   161                           tblptrl	equ	0xFF6
   162                           tablat	equ	0xFF5
   163                           prodh	equ	0xFF4
   164                           prodl	equ	0xFF3
   165                           intcon	equ	0xFF2
   166                           plusw0	equ	0xFEB
   167                           wreg	equ	0xFE8
   168                           indf1	equ	0xFE7
   169                           postinc1	equ	0xFE6
   170                           plusw1	equ	0xFE3
   171                           fsr1h	equ	0xFE2
   172                           fsr1l	equ	0xFE1
   173                           indf2	equ	0xFDF
   174                           postinc2	equ	0xFDE
   175                           postdec2	equ	0xFDD
   176                           plusw2	equ	0xFDB
   177                           fsr2h	equ	0xFDA
   178                           fsr2l	equ	0xFD9
   179                           status	equ	0xFD8
   180                           
   181                           	psect	idataBIGRAM
   182  000F0A                     __pidataBIGRAM:
   183                           	opt stack 0
   184                           
   185                           ;initializer for _EE_Settings
   186  000F0A  98                 	db	152
   187  000F0B  FE                 	db	254
   188  000F0C  01                 	db	1
   189  000F0D  04                 	db	4
   190  000F0E  01                 	db	1
   191  000F0F  0A                 	db	10
   192  000F10  14                 	db	20
   193  000F11  F6                 	db	246
   194  000F12  FF                 	db	255
   195  000F13  3C                 	db	60
   196  000F14  28                 	db	40
   197  000F15  04                 	db	4
   198  000F16  08                 	db	8
   199  000F17  C0                 	db	192
   200  000F18  08                 	db	8
   201  000F19  2A                 	db	42
   202  000F1A  05                 	db	5
   203  000F1B  01                 	db	1
   204  000F1C  80                 	db	128
   205  000F1D  51                 	db	81
   206  000F1E  01                 	db	1
   207  000F1F  00                 	db	0
   208  000F20  05                 	db	5
   209  000F21  C5                 	db	197
   210  000F22  80                 	db	128
   211  000F23  00                 	db	0
   212  000F24  00                 	db	0
   213  000F25  00                 	db	0
   214  000F26  00                 	db	0
   215  000F27  00                 	db	0
   216  000F28  00                 	db	0
   217  000F29  00                 	db	0
   218  000F2A  00                 	db	0
   219  000F2B  00                 	db	0
   220  000F2C  00                 	db	0
   221  000F2D  00                 	db	0
   222  000F2E  00                 	db	0
   223  000F2F  00                 	db	0
   224  000F30  00                 	db	0
   225  000F31  00                 	db	0
   226  000F32  00                 	db	0
   227  000F33  00                 	db	0
   228  000F34  00                 	db	0
   229  000F35  20                 	db	32
   230  000F36  00                 	db	0
   231  000F37  00                 	db	0
   232  000F38  00                 	db	0
   233  000F39  00                 	db	0
   234  000F3A  00                 	db	0
   235  000F3B  00                 	db	0
   236  000F3C  00                 	db	0
   237  000F3D  00                 	db	0
   238  000F3E  00                 	db	0
   239  000F3F  00                 	db	0
   240  000F40  00                 	db	0
   241  000F41  00                 	db	0
   242  000F42  00                 	db	0
   243  000F43  00                 	db	0
   244  000F44  00                 	db	0
   245  000F45  00                 	db	0
   246  000F46  00                 	db	0
   247  000F47  00                 	db	0
   248  000F48  00                 	db	0
   249  000F49  02                 	db	2
   250  000F4A  08                 	db	8
   251  000F4B  08                 	db	8
   252  000F4C  08                 	db	8
   253  000F4D  08                 	db	8
   254  000F4E  08                 	db	8
   255  000F4F  08                 	db	8
   256  000F50  08                 	db	8
   257  000F51  08                 	db	8
   258  000F52  08                 	db	8
   259  000F53  08                 	db	8
   260  000F54  08                 	db	8
   261  000F55  08                 	db	8
   262  000F56  08                 	db	8
   263  000F57  08                 	db	8
   264  000F58  08                 	db	8
   265  000F59  A0                 	db	160
   266  000F5A  FF                 	db	255
   267  000F5B  FF                 	db	255
   268  000F5C  FF                 	db	255
   269  000F5D  FF                 	db	255
   270  000F5E  01                 	db	1
   271  000F5F  7F                 	db	127
   272  000F60  FF                 	db	255
   273  000F61  FF                 	db	255
   274  000F62  FF                 	db	255
   275  000F63  FF                 	db	255
   276  000F64  01                 	db	1
   277  000F65  7F                 	db	127
   278  000F66  FF                 	db	255
   279  000F67  FF                 	db	255
   280  000F68  FF                 	db	255
   281  000F69  FF                 	db	255
   282  000F6A  01                 	db	1
   283  000F6B  7F                 	db	127
   284  000F6C  FF                 	db	255
   285  000F6D  FF                 	db	255
   286  000F6E  FF                 	db	255
   287  000F6F  FF                 	db	255
   288  000F70  01                 	db	1
   289  000F71  7F                 	db	127
   290  000F72  FF                 	db	255
   291  000F73  FF                 	db	255
   292  000F74  FF                 	db	255
   293  000F75  FF                 	db	255
   294  000F76  01                 	db	1
   295  000F77  7F                 	db	127
   296  000F78  FF                 	db	255
   297  000F79  FF                 	db	255
   298  000F7A  FF                 	db	255
   299  000F7B  FF                 	db	255
   300  000F7C  01                 	db	1
   301  000F7D  7F                 	db	127
   302  000F7E  FF                 	db	255
   303  000F7F  FF                 	db	255
   304  000F80  FF                 	db	255
   305  000F81  FF                 	db	255
   306  000F82  01                 	db	1
   307  000F83  7F                 	db	127
   308  000F84  FF                 	db	255
   309  000F85  FF                 	db	255
   310  000F86  FF                 	db	255
   311  000F87  FF                 	db	255
   312  000F88  01                 	db	1
   313  000F89  7F                 	db	127
   314  000F8A  FF                 	db	255
   315  000F8B  FF                 	db	255
   316  000F8C  FF                 	db	255
   317  000F8D  FF                 	db	255
   318  000F8E  01                 	db	1
   319  000F8F  7F                 	db	127
   320  000F90  FF                 	db	255
   321  000F91  FF                 	db	255
   322  000F92  FF                 	db	255
   323  000F93  FF                 	db	255
   324  000F94  01                 	db	1
   325  000F95  7F                 	db	127
   326  000F96  FF                 	db	255
   327  000F97  FF                 	db	255
   328  000F98  FF                 	db	255
   329  000F99  FF                 	db	255
   330  000F9A  01                 	db	1
   331  000F9B  7F                 	db	127
   332  000F9C  FF                 	db	255
   333  000F9D  FF                 	db	255
   334  000F9E  FF                 	db	255
   335  000F9F  FF                 	db	255
   336  000FA0  01                 	db	1
   337  000FA1  7F                 	db	127
   338  000FA2  FF                 	db	255
   339  000FA3  FF                 	db	255
   340  000FA4  FF                 	db	255
   341  000FA5  FF                 	db	255
   342  000FA6  01                 	db	1
   343  000FA7  7F                 	db	127
   344  000FA8  FF                 	db	255
   345  000FA9  FF                 	db	255
   346  000FAA  FF                 	db	255
   347  000FAB  FF                 	db	255
   348  000FAC  01                 	db	1
   349  000FAD  7F                 	db	127
   350  000FAE  FF                 	db	255
   351  000FAF  FF                 	db	255
   352  000FB0  FF                 	db	255
   353  000FB1  FF                 	db	255
   354  000FB2  01                 	db	1
   355  000FB3  7F                 	db	127
   356  000FB4  FF                 	db	255
   357  000FB5  FF                 	db	255
   358  000FB6  FF                 	db	255
   359  000FB7  FF                 	db	255
   360  000FB8  01                 	db	1
   361  000FB9  7F                 	db	127
   362  000FBA  FF                 	db	255
   363  000FBB  FF                 	db	255
   364  000FBC  FF                 	db	255
   365  000FBD  FF                 	db	255
   366  000FBE  01                 	db	1
   367  000FBF  7F                 	db	127
   368  000FC0  FF                 	db	255
   369  000FC1  FF                 	db	255
   370  000FC2  FF                 	db	255
   371  000FC3  FF                 	db	255
   372  000FC4  01                 	db	1
   373  000FC5  7F                 	db	127
   374  000FC6  FF                 	db	255
   375  000FC7  FF                 	db	255
   376  000FC8  FF                 	db	255
   377  000FC9  FF                 	db	255
   378  000FCA  01                 	db	1
   379  000FCB  7F                 	db	127
   380  000FCC  FF                 	db	255
   381  000FCD  FF                 	db	255
   382  000FCE  FF                 	db	255
   383  000FCF  FF                 	db	255
   384  000FD0  01                 	db	1
   385  000FD1  7F                 	db	127
   386  000FD2  FF                 	db	255
   387  000FD3  FF                 	db	255
   388  000FD4  FF                 	db	255
   389  000FD5  FF                 	db	255
   390  000FD6  01                 	db	1
   391  000FD7  7F                 	db	127
   392  000FD8  FF                 	db	255
   393  000FD9  FF                 	db	255
   394  000FDA  FF                 	db	255
   395  000FDB  FF                 	db	255
   396  000FDC  01                 	db	1
   397  000FDD  7F                 	db	127
   398  000FDE  FF                 	db	255
   399  000FDF  FF                 	db	255
   400  000FE0  FF                 	db	255
   401  000FE1  FF                 	db	255
   402  000FE2  01                 	db	1
   403  000FE3  7F                 	db	127
   404  000FE4  FF                 	db	255
   405  000FE5  FF                 	db	255
   406  000FE6  FF                 	db	255
   407  000FE7  FF                 	db	255
   408  000FE8  01                 	db	1
   409  000FE9  7F                 	db	127
   410  000FEA  0A                 	db	10
   411  000FEB  24                 	db	36
   412  000FEC  90                 	db	144
   413  000FED  12                 	db	18
   414  000FEE  48                 	db	72
   415  000FEF  0A                 	db	10
   416  000FF0  12                 	db	18
   417  000FF1  48                 	db	72
   418  000FF2  09                 	db	9
   419  000FF3  24                 	db	36
   420  000FF4  0A                 	db	10
   421  000FF5  09                 	db	9
   422  000FF6  24                 	db	36
   423  000FF7  24                 	db	36
   424  000FF8  90                 	db	144
   425  000FF9  03                 	db	3
   426  000FFA  04                 	db	4
   427  000FFB  90                 	db	144
   428  000FFC  08                 	db	8
   429  000FFD  00                 	db	0
   430  000FFE  02                 	db	2
   431  000FFF  14                 	db	20
   432  001000  90                 	db	144
   433  001001  00                 	db	0
   434  001002  00                 	db	0
   435  001003  15                 	db	21
   436  001004  24                 	db	36
   437  001005  24                 	db	36
   438  001006  00                 	db	0
   439  001007  00                 	db	0
   440  001008  02                 	db	2
   441  001009  24                 	db	36
   442  00100A  10                 	db	16
   443  00100B  00                 	db	0
   444  00100C  20                 	db	32
   445  00100D  02                 	db	2
   446  00100E  24                 	db	36
   447  00100F  50                 	db	80
   448  001010  00                 	db	0
   449  001011  00                 	db	0
   450  001012  01                 	db	1
   451  001013  00                 	db	0
   452  001014  00                 	db	0
   453  001015  14                 	db	20
   454  001016  20                 	db	32
   455  001017  00                 	db	0
   456  001018  00                 	db	0
   457  001019  00                 	db	0
   458  00101A  00                 	db	0
   459  00101B  00                 	db	0
   460  00101C  00                 	db	0
   461  00101D  00                 	db	0
   462  00101E  00                 	db	0
   463  00101F  00                 	db	0
   464  001020  00                 	db	0
   465  001021  00                 	db	0
   466  001022  00                 	db	0
   467  001023  00                 	db	0
   468  001024  00                 	db	0
   469  001025  00                 	db	0
   470  001026  00                 	db	0
   471  001027  00                 	db	0
   472  001028  00                 	db	0
   473  001029  00                 	db	0
   474  00102A  00                 	db	0
   475  00102B  00                 	db	0
   476  00102C  00                 	db	0
   477  00102D  00                 	db	0
   478  00102E  00                 	db	0
   479  00102F  00                 	db	0
   480  001030  00                 	db	0
   481  001031  00                 	db	0
   482  001032  00                 	db	0
   483  001033  00                 	db	0
   484  001034  00                 	db	0
   485  001035  00                 	db	0
   486  001036  00                 	db	0
   487  001037  00                 	db	0
   488  001038  00                 	db	0
   489  001039  00                 	db	0
   490  00103A  00                 	db	0
   491  00103B  00                 	db	0
   492  00103C  00                 	db	0
   493  00103D  00                 	db	0
   494  00103E  00                 	db	0
   495  00103F  00                 	db	0
   496  001040  00                 	db	0
   497  001041  00                 	db	0
   498  001042  00                 	db	0
   499  001043  00                 	db	0
   500  001044  00                 	db	0
   501  001045  00                 	db	0
   502  001046  00                 	db	0
   503  001047  00                 	db	0
   504  001048  00                 	db	0
   505  001049  00                 	db	0
   506  00104A  00                 	db	0
   507  00104B  00                 	db	0
   508  00104C  00                 	db	0
   509  00104D  00                 	db	0
   510  00104E  00                 	db	0
   511  00104F  00                 	db	0
   512  001050  00                 	db	0
   513  001051  00                 	db	0
   514  001052  00                 	db	0
   515  001053  00                 	db	0
   516  001054  00                 	db	0
   517  001055  00                 	db	0
   518  001056  00                 	db	0
   519  001057  00                 	db	0
   520  001058  00                 	db	0
   521  001059  00                 	db	0
   522  00105A  00                 	db	0
   523  00105B  00                 	db	0
   524  00105C  00                 	db	0
   525  00105D  00                 	db	0
   526  00105E  00                 	db	0
   527  00105F  00                 	db	0
   528  001060  00                 	db	0
   529  001061  00                 	db	0
   530  001062  00                 	db	0
   531  001063  00                 	db	0
   532  001064  00                 	db	0
   533  001065  00                 	db	0
   534  001066  00                 	db	0
   535  001067  00                 	db	0
   536  001068  00                 	db	0
   537  001069  00                 	db	0
   538  00106A  00                 	db	0
   539  00106B  00                 	db	0
   540  00106C  00                 	db	0
   541  00106D  00                 	db	0
   542  00106E  00                 	db	0
   543  00106F  00                 	db	0
   544  001070  00                 	db	0
   545  001071  00                 	db	0
   546  001072  00                 	db	0
   547  001073  00                 	db	0
   548  001074  00                 	db	0
   549  001075  00                 	db	0
   550  001076  00                 	db	0
   551  001077  00                 	db	0
   552  001078  00                 	db	0
   553  001079  00                 	db	0
   554  00107A  00                 	db	0
   555  00107B  00                 	db	0
   556  00107C  00                 	db	0
   557  00107D  00                 	db	0
   558  00107E  00                 	db	0
   559  00107F  00                 	db	0
   560  001080  00                 	db	0
   561  001081  00                 	db	0
   562  001082  00                 	db	0
   563  001083  00                 	db	0
   564  001084  00                 	db	0
   565  001085  00                 	db	0
   566  001086  00                 	db	0
   567  001087  00                 	db	0
   568  001088  00                 	db	0
   569  001089  00                 	db	0
   570  00108A  00                 	db	0
   571  00108B  00                 	db	0
   572  00108C  00                 	db	0
   573  00108D  00                 	db	0
   574  00108E  00                 	db	0
   575  00108F  00                 	db	0
   576  001090  00                 	db	0
   577  001091  00                 	db	0
   578  001092  00                 	db	0
   579  001093  00                 	db	0
   580  001094  00                 	db	0
   581  001095  00                 	db	0
   582  001096  00                 	db	0
   583  001097  00                 	db	0
   584  001098  00                 	db	0
   585  001099  00                 	db	0
   586  00109A  00                 	db	0
   587  00109B  00                 	db	0
   588  00109C  00                 	db	0
   589  00109D  00                 	db	0
   590  00109E  00                 	db	0
   591  00109F  00                 	db	0
   592  0010A0  00                 	db	0
   593  0010A1  00                 	db	0
   594  0010A2  00                 	db	0
   595  0010A3  00                 	db	0
   596  0010A4  00                 	db	0
   597  0010A5  00                 	db	0
   598  0010A6  00                 	db	0
   599  0010A7  00                 	db	0
   600  0010A8  00                 	db	0
   601  0010A9  00                 	db	0
   602  0010AA  00                 	db	0
   603  0010AB  00                 	db	0
   604  0010AC  00                 	db	0
   605  0010AD  00                 	db	0
   606  0010AE  00                 	db	0
   607  0010AF  00                 	db	0
   608  0010B0  00                 	db	0
   609  0010B1  00                 	db	0
   610  0010B2  00                 	db	0
   611  0010B3  00                 	db	0
   612  0010B4  00                 	db	0
   613  0010B5  00                 	db	0
   614  0010B6  00                 	db	0
   615  0010B7  00                 	db	0
   616  0010B8  00                 	db	0
   617  0010B9  00                 	db	0
   618  0010BA  00                 	db	0
   619  0010BB  00                 	db	0
   620  0010BC  00                 	db	0
   621  0010BD  00                 	db	0
   622  0010BE  00                 	db	0
   623  0010BF  00                 	db	0
   624  0010C0  00                 	db	0
   625  0010C1  00                 	db	0
   626  0010C2  00                 	db	0
   627  0010C3  00                 	db	0
   628  0010C4  00                 	db	0
   629  0010C5  00                 	db	0
   630  0010C6  00                 	db	0
   631  0010C7  00                 	db	0
   632  0010C8  00                 	db	0
   633  0010C9  00                 	db	0
   634  0010CA  00                 	db	0
   635  0010CB  00                 	db	0
   636  0010CC  00                 	db	0
   637  0010CD  00                 	db	0
   638  0010CE  00                 	db	0
   639  0010CF  00                 	db	0
   640  0010D0  00                 	db	0
   641  0010D1  00                 	db	0
   642  0010D2  00                 	db	0
   643  0010D3  00                 	db	0
   644  0010D4  00                 	db	0
   645  0010D5  00                 	db	0
   646  0010D6  00                 	db	0
   647  0010D7  00                 	db	0
   648  0010D8  00                 	db	0
   649  0010D9  00                 	db	0
   650  0010DA  00                 	db	0
   651  0010DB  00                 	db	0
   652  0010DC  00                 	db	0
   653  0010DD  00                 	db	0
   654  0010DE  00                 	db	0
   655  0010DF  00                 	db	0
   656  0010E0  00                 	db	0
   657  0010E1  00                 	db	0
   658  0010E2  00                 	db	0
   659  0010E3  00                 	db	0
   660  0010E4  00                 	db	0
   661  0010E5  00                 	db	0
   662  0010E6  00                 	db	0
   663  0010E7  00                 	db	0
   664  0010E8  00                 	db	0
   665  0010E9  00                 	db	0
   666  0010EA  00                 	db	0
   667  0010EB  00                 	db	0
   668  0010EC  00                 	db	0
   669  0010ED  00                 	db	0
   670  0010EE  00                 	db	0
   671  0010EF  00                 	db	0
   672  0010F0  00                 	db	0
   673  0010F1  00                 	db	0
   674  0010F2  00                 	db	0
   675  0010F3  00                 	db	0
   676  0010F4  00                 	db	0
   677  0010F5  00                 	db	0
   678  0010F6  00                 	db	0
   679  0010F7  00                 	db	0
   680  0010F8  00                 	db	0
   681  0010F9  00                 	db	0
   682  0010FA  00                 	db	0
   683  0010FB  00                 	db	0
   684  0010FC  00                 	db	0
   685  0010FD  00                 	db	0
   686  0010FE  00                 	db	0
   687  0010FF  00                 	db	0
   688  001100  00                 	db	0
   689  001101  00                 	db	0
   690  001102  00                 	db	0
   691  001103  00                 	db	0
   692  001104  00                 	db	0
   693  001105  00                 	db	0
   694  001106  00                 	db	0
   695  001107  00                 	db	0
   696  001108  00                 	db	0
   697  001109  00                 	db	0
   698  00110A  00                 	db	0
   699  00110B  00                 	db	0
   700  00110C  00                 	db	0
   701  00110D  00                 	db	0
   702  00110E  00                 	db	0
   703  00110F  00                 	db	0
   704  001110  00                 	db	0
   705  001111  00                 	db	0
   706  001112  00                 	db	0
   707  001113  00                 	db	0
   708  001114  00                 	db	0
   709  001115  00                 	db	0
   710  001116  00                 	db	0
   711  001117  00                 	db	0
   712  001118  00                 	db	0
   713  001119  00                 	db	0
   714  00111A  00                 	db	0
   715  00111B  00                 	db	0
   716  00111C  00                 	db	0
   717  00111D  00                 	db	0
   718  00111E  00                 	db	0
   719  00111F  00                 	db	0
   720  001120  00                 	db	0
   721  001121  00                 	db	0
   722  001122  00                 	db	0
   723  001123  00                 	db	0
   724  001124  00                 	db	0
   725  001125  00                 	db	0
   726  001126  00                 	db	0
   727  001127  00                 	db	0
   728  001128  00                 	db	0
   729  001129  00                 	db	0
   730  00112A  00                 	db	0
   731  00112B  00                 	db	0
   732  00112C  00                 	db	0
   733  00112D  00                 	db	0
   734  00112E  00                 	db	0
   735  00112F  00                 	db	0
   736  001130  00                 	db	0
   737  001131  00                 	db	0
   738  001132  00                 	db	0
   739  001133  00                 	db	0
   740  001134  00                 	db	0
   741  001135  00                 	db	0
   742  001136  00                 	db	0
   743  001137  00                 	db	0
   744  001138  00                 	db	0
   745  001139  00                 	db	0
   746  00113A  00                 	db	0
   747  00113B  00                 	db	0
   748  00113C  00                 	db	0
   749  00113D  00                 	db	0
   750  00113E  00                 	db	0
   751  00113F  00                 	db	0
   752  001140  00                 	db	0
   753  001141  00                 	db	0
   754  001142  00                 	db	0
   755  001143  00                 	db	0
   756  001144  00                 	db	0
   757  001145  00                 	db	0
   758  001146  00                 	db	0
   759  001147  00                 	db	0
   760  001148  00                 	db	0
   761  001149  00                 	db	0
   762  00114A  00                 	db	0
   763  00114B  00                 	db	0
   764  00114C  00                 	db	0
   765  00114D  00                 	db	0
   766  00114E  00                 	db	0
   767  00114F  00                 	db	0
   768  001150  00                 	db	0
   769  001151  00                 	db	0
   770  001152  00                 	db	0
   771  001153  00                 	db	0
   772  001154  00                 	db	0
   773  001155  00                 	db	0
   774  001156  00                 	db	0
   775  001157  00                 	db	0
   776  001158  00                 	db	0
   777  001159  00                 	db	0
   778  00115A  00                 	db	0
   779  00115B  00                 	db	0
   780  00115C  00                 	db	0
   781  00115D  00                 	db	0
   782  00115E  00                 	db	0
   783  00115F  00                 	db	0
   784  001160  00                 	db	0
   785  001161  00                 	db	0
   786  001162  00                 	db	0
   787  001163  00                 	db	0
   788  001164  00                 	db	0
   789  001165  00                 	db	0
   790  001166  00                 	db	0
   791  001167  00                 	db	0
   792  001168  00                 	db	0
   793  001169  00                 	db	0
   794  00116A  00                 	db	0
   795  00116B  00                 	db	0
   796  00116C  00                 	db	0
   797  00116D  00                 	db	0
   798  00116E  00                 	db	0
   799  00116F  00                 	db	0
   800  001170  00                 	db	0
   801  001171  00                 	db	0
   802  001172  00                 	db	0
   803  001173  00                 	db	0
   804  001174  00                 	db	0
   805  001175  00                 	db	0
   806  001176  00                 	db	0
   807  001177  00                 	db	0
   808  001178  00                 	db	0
   809  001179  00                 	db	0
   810  00117A  00                 	db	0
   811  00117B  00                 	db	0
   812  00117C  00                 	db	0
   813  00117D  00                 	db	0
   814  00117E  00                 	db	0
   815  00117F  00                 	db	0
   816  001180  00                 	db	0
   817  001181  00                 	db	0
   818  001182  00                 	db	0
   819  001183  00                 	db	0
   820  001184  00                 	db	0
   821  001185  00                 	db	0
   822  001186  00                 	db	0
   823  001187  00                 	db	0
   824  001188  00                 	db	0
   825  001189  00                 	db	0
   826  00118A  00                 	db	0
   827  00118B  00                 	db	0
   828  00118C  00                 	db	0
   829  00118D  00                 	db	0
   830  00118E  00                 	db	0
   831  00118F  00                 	db	0
   832  001190  00                 	db	0
   833  001191  00                 	db	0
   834  001192  00                 	db	0
   835  001193  00                 	db	0
   836  001194  00                 	db	0
   837  001195  00                 	db	0
   838  001196  00                 	db	0
   839  001197  00                 	db	0
   840  001198  00                 	db	0
   841  001199  00                 	db	0
   842  00119A  00                 	db	0
   843  00119B  00                 	db	0
   844  00119C  00                 	db	0
   845  00119D  00                 	db	0
   846  00119E  00                 	db	0
   847  00119F  00                 	db	0
   848  0011A0  00                 	db	0
   849  0011A1  00                 	db	0
   850  0011A2  00                 	db	0
   851  0011A3  00                 	db	0
   852  0011A4  00                 	db	0
   853  0011A5  00                 	db	0
   854  0011A6  00                 	db	0
   855  0011A7  00                 	db	0
   856  0011A8  00                 	db	0
   857  0011A9  00                 	db	0
   858  0011AA  00                 	db	0
   859  0011AB  00                 	db	0
   860  0011AC  00                 	db	0
   861  0011AD  00                 	db	0
   862  0011AE  00                 	db	0
   863  0011AF  00                 	db	0
   864  0011B0  00                 	db	0
   865  0011B1  00                 	db	0
   866  0011B2  00                 	db	0
   867  0011B3  00                 	db	0
   868  0011B4  00                 	db	0
   869  0011B5  00                 	db	0
   870  0011B6  00                 	db	0
   871  0011B7  00                 	db	0
   872  0011B8  00                 	db	0
   873  0011B9  00                 	db	0
   874  0011BA  00                 	db	0
   875  0011BB  00                 	db	0
   876  0011BC  00                 	db	0
   877  0011BD  00                 	db	0
   878  0011BE  00                 	db	0
   879  0011BF  00                 	db	0
   880  0011C0  00                 	db	0
   881  0011C1  00                 	db	0
   882  0011C2  00                 	db	0
   883  0011C3  00                 	db	0
   884  0011C4  00                 	db	0
   885  0011C5  00                 	db	0
   886  0011C6  00                 	db	0
   887  0011C7  00                 	db	0
   888  0011C8  00                 	db	0
   889  0011C9  00                 	db	0
   890  0011CA  00                 	db	0
   891  0011CB  00                 	db	0
   892  0011CC  00                 	db	0
   893  0011CD  00                 	db	0
   894  0011CE  00                 	db	0
   895  0011CF  00                 	db	0
   896  0011D0  00                 	db	0
   897  0011D1  00                 	db	0
   898  0011D2  00                 	db	0
   899  0011D3  00                 	db	0
   900  0011D4  00                 	db	0
   901  0011D5  00                 	db	0
   902  0011D6  00                 	db	0
   903  0011D7  00                 	db	0
   904  0011D8  00                 	db	0
   905  0011D9  00                 	db	0
   906  0011DA  00                 	db	0
   907  0011DB  00                 	db	0
   908  0011DC  00                 	db	0
   909  0011DD  00                 	db	0
   910  0011DE  00                 	db	0
   911  0011DF  00                 	db	0
   912  0011E0  00                 	db	0
   913  0011E1  00                 	db	0
   914  0011E2  00                 	db	0
   915  0011E3  00                 	db	0
   916  0011E4  00                 	db	0
   917  0011E5  00                 	db	0
   918  0011E6  00                 	db	0
   919  0011E7  00                 	db	0
   920  0011E8  00                 	db	0
   921  0011E9  00                 	db	0
   922  0011EA  00                 	db	0
   923  0011EB  00                 	db	0
   924  0011EC  00                 	db	0
   925  0011ED  00                 	db	0
   926  0011EE  00                 	db	0
   927  0011EF  00                 	db	0
   928  0011F0  00                 	db	0
   929  0011F1  00                 	db	0
   930  0011F2  00                 	db	0
   931  0011F3  00                 	db	0
   932  0011F4  00                 	db	0
   933  0011F5  00                 	db	0
   934  0011F6  00                 	db	0
   935  0011F7  00                 	db	0
   936  0011F8  00                 	db	0
   937  0011F9  00                 	db	0
   938  0011FA  00                 	db	0
   939  0011FB  00                 	db	0
   940  0011FC  00                 	db	0
   941  0011FD  00                 	db	0
   942  0011FE  00                 	db	0
   943  0011FF  00                 	db	0
   944  001200  00                 	db	0
   945  001201  00                 	db	0
   946  001202  00                 	db	0
   947  001203  00                 	db	0
   948  001204  00                 	db	0
   949  001205  00                 	db	0
   950  001206  00                 	db	0
   951  001207  00                 	db	0
   952  001208  00                 	db	0
   953  001209  00                 	db	0
   954  00120A  00                 	db	0
   955  00120B  00                 	db	0
   956  00120C  00                 	db	0
   957  00120D  00                 	db	0
   958  00120E  00                 	db	0
   959  00120F  00                 	db	0
   960  001210  00                 	db	0
   961  001211  00                 	db	0
   962  001212  00                 	db	0
   963  001213  00                 	db	0
   964  001214  00                 	db	0
   965  001215  00                 	db	0
   966  001216  00                 	db	0
   967  001217  00                 	db	0
   968  001218  00                 	db	0
   969  001219  00                 	db	0
   970  00121A  00                 	db	0
   971  00121B  00                 	db	0
   972  00121C  00                 	db	0
   973  00121D  00                 	db	0
   974  00121E  00                 	db	0
   975  00121F  00                 	db	0
   976  001220  00                 	db	0
   977  001221  00                 	db	0
   978  001222  00                 	db	0
   979  001223  00                 	db	0
   980  001224  00                 	db	0
   981  001225  00                 	db	0
   982  001226  00                 	db	0
   983  001227  00                 	db	0
   984  001228  00                 	db	0
   985  001229  00                 	db	0
   986  00122A  00                 	db	0
   987  00122B  00                 	db	0
   988  00122C  00                 	db	0
   989  00122D  00                 	db	0
   990  00122E  00                 	db	0
   991  00122F  00                 	db	0
   992  001230  00                 	db	0
   993  001231  00                 	db	0
   994  001232  00                 	db	0
   995  001233  00                 	db	0
   996  001234  00                 	db	0
   997  001235  00                 	db	0
   998  001236  00                 	db	0
   999  001237  00                 	db	0
  1000  001238  00                 	db	0
  1001  001239  00                 	db	0
  1002  00123A  00                 	db	0
  1003  00123B  00                 	db	0
  1004  00123C  00                 	db	0
  1005  00123D  00                 	db	0
  1006  00123E  00                 	db	0
  1007  00123F  00                 	db	0
  1008  001240  00                 	db	0
  1009  001241  00                 	db	0
  1010  001242  00                 	db	0
  1011  001243  00                 	db	0
  1012  001244  00                 	db	0
  1013  001245  00                 	db	0
  1014  001246  00                 	db	0
  1015  001247  00                 	db	0
  1016  001248  00                 	db	0
  1017  001249  00                 	db	0
  1018  00124A  00                 	db	0
  1019  00124B  00                 	db	0
  1020  00124C  00                 	db	0
  1021  00124D  00                 	db	0
  1022  00124E  00                 	db	0
  1023  00124F  00                 	db	0
  1024  001250  00                 	db	0
  1025  001251  00                 	db	0
  1026  001252  00                 	db	0
  1027  001253  00                 	db	0
  1028  001254  00                 	db	0
  1029  001255  00                 	db	0
  1030  001256  00                 	db	0
  1031  001257  00                 	db	0
  1032  001258  00                 	db	0
  1033  001259  00                 	db	0
  1034  00125A  00                 	db	0
  1035  00125B  00                 	db	0
  1036  00125C  00                 	db	0
  1037  00125D  00                 	db	0
  1038  00125E  00                 	db	0
  1039  00125F  00                 	db	0
  1040  001260  00                 	db	0
  1041  001261  00                 	db	0
  1042  001262  00                 	db	0
  1043  001263  00                 	db	0
  1044  001264  00                 	db	0
  1045  001265  00                 	db	0
  1046  001266  00                 	db	0
  1047  001267  00                 	db	0
  1048  001268  00                 	db	0
  1049  001269  00                 	db	0
  1050  00126A  00                 	db	0
  1051  00126B  00                 	db	0
  1052  00126C  00                 	db	0
  1053  00126D  00                 	db	0
  1054  00126E  00                 	db	0
  1055  00126F  00                 	db	0
  1056  001270  00                 	db	0
  1057  001271  00                 	db	0
  1058  001272  00                 	db	0
  1059  001273  00                 	db	0
  1060  001274  00                 	db	0
  1061  001275  00                 	db	0
  1062  001276  00                 	db	0
  1063  001277  00                 	db	0
  1064  001278  00                 	db	0
  1065  001279  00                 	db	0
  1066  00127A  00                 	db	0
  1067  00127B  00                 	db	0
  1068  00127C  00                 	db	0
  1069  00127D  00                 	db	0
  1070  00127E  00                 	db	0
  1071  00127F  00                 	db	0
  1072  001280  00                 	db	0
  1073  001281  00                 	db	0
  1074  001282  00                 	db	0
  1075  001283  00                 	db	0
  1076  001284  00                 	db	0
  1077  001285  00                 	db	0
  1078  001286  00                 	db	0
  1079  001287  00                 	db	0
  1080  001288  00                 	db	0
  1081  001289  00                 	db	0
  1082  00128A  00                 	db	0
  1083  00128B  00                 	db	0
  1084  00128C  00                 	db	0
  1085  00128D  00                 	db	0
  1086  00128E  00                 	db	0
  1087  00128F  00                 	db	0
  1088  001290  00                 	db	0
  1089  001291  00                 	db	0
  1090  001292  00                 	db	0
  1091  001293  00                 	db	0
  1092  001294  00                 	db	0
  1093  001295  00                 	db	0
  1094  001296  00                 	db	0
  1095  001297  00                 	db	0
  1096  001298  00                 	db	0
  1097  001299  00                 	db	0
  1098  00129A  00                 	db	0
  1099  00129B  00                 	db	0
  1100  00129C  00                 	db	0
  1101  00129D  00                 	db	0
  1102  00129E  00                 	db	0
  1103  00129F  00                 	db	0
  1104  0012A0  00                 	db	0
  1105  0012A1  00                 	db	0
  1106  0012A2  00                 	db	0
  1107  0012A3  00                 	db	0
  1108  0012A4  00                 	db	0
  1109  0012A5  00                 	db	0
  1110  0012A6  00                 	db	0
  1111  0012A7  00                 	db	0
  1112  0012A8  00                 	db	0
  1113  0012A9  00                 	db	0
  1114  0012AA  00                 	db	0
  1115  0012AB  00                 	db	0
  1116  0012AC  00                 	db	0
  1117  0012AD  00                 	db	0
  1118  0012AE  00                 	db	0
  1119  0012AF  00                 	db	0
  1120  0012B0  00                 	db	0
  1121  0012B1  00                 	db	0
  1122  0012B2  00                 	db	0
  1123  0012B3  00                 	db	0
  1124  0012B4  00                 	db	0
  1125  0012B5  00                 	db	0
  1126  0012B6  00                 	db	0
  1127  0012B7  00                 	db	0
  1128  0012B8  00                 	db	0
  1129  0012B9  00                 	db	0
  1130  0012BA  00                 	db	0
  1131  0012BB  00                 	db	0
  1132  0012BC  00                 	db	0
  1133  0012BD  00                 	db	0
  1134  0012BE  00                 	db	0
  1135  0012BF  00                 	db	0
  1136  0012C0  00                 	db	0
  1137  0012C1  00                 	db	0
  1138  0012C2  00                 	db	0
  1139  0012C3  00                 	db	0
  1140  0012C4  00                 	db	0
  1141  0012C5  00                 	db	0
  1142  0012C6  00                 	db	0
  1143  0012C7  00                 	db	0
  1144  0012C8  00                 	db	0
  1145  0012C9  00                 	db	0
  1146  0012CA  00                 	db	0
  1147  0012CB  00                 	db	0
  1148  0012CC  00                 	db	0
  1149  0012CD  00                 	db	0
  1150  0012CE  00                 	db	0
  1151  0012CF  00                 	db	0
  1152  0012D0  00                 	db	0
  1153  0012D1  00                 	db	0
  1154  0012D2  00                 	db	0
  1155  0012D3  00                 	db	0
  1156  0012D4  00                 	db	0
  1157  0012D5  00                 	db	0
  1158  0012D6  00                 	db	0
  1159  0012D7  00                 	db	0
  1160  0012D8  00                 	db	0
  1161  0012D9  00                 	db	0
  1162  0012DA  00                 	db	0
  1163  0012DB  00                 	db	0
  1164  0012DC  00                 	db	0
  1165  0012DD  00                 	db	0
  1166  0012DE  00                 	db	0
  1167  0012DF  00                 	db	0
  1168  0012E0  00                 	db	0
  1169  0012E1  00                 	db	0
  1170  0012E2  00                 	db	0
  1171  0012E3  00                 	db	0
  1172  0012E4  00                 	db	0
  1173  0012E5  00                 	db	0
  1174  0012E6  00                 	db	0
  1175  0012E7  00                 	db	0
  1176  0012E8  00                 	db	0
  1177  0012E9  00                 	db	0
  1178  0012EA  00                 	db	0
  1179  0012EB  00                 	db	0
  1180  0012EC  00                 	db	0
  1181  0012ED  00                 	db	0
  1182  0012EE  00                 	db	0
  1183  0012EF  00                 	db	0
  1184  0012F0  00                 	db	0
  1185  0012F1  00                 	db	0
  1186  0012F2  00                 	db	0
  1187  0012F3  00                 	db	0
  1188  0012F4  00                 	db	0
  1189  0012F5  00                 	db	0
  1190  0012F6  00                 	db	0
  1191  0012F7  00                 	db	0
  1192  0012F8  00                 	db	0
  1193  0012F9  00                 	db	0
  1194  0012FA  00                 	db	0
  1195  0012FB  00                 	db	0
  1196  0012FC  00                 	db	0
  1197  0012FD  00                 	db	0
  1198  0012FE  00                 	db	0
  1199  0012FF  00                 	db	0
  1200  001300  00                 	db	0
  1201  001301  00                 	db	0
  1202  001302  00                 	db	0
  1203  001303  00                 	db	0
  1204  001304  00                 	db	0
  1205  001305  00                 	db	0
  1206  001306  00                 	db	0
  1207  001307  00                 	db	0
  1208  001308  00                 	db	0
  1209  001309  00                 	db	0
  1210                           tosu	equ	0xFFF
  1211                           tosh	equ	0xFFE
  1212                           tosl	equ	0xFFD
  1213                           pclath	equ	0xFFA
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           prodh	equ	0xFF4
  1219                           prodl	equ	0xFF3
  1220                           intcon	equ	0xFF2
  1221                           plusw0	equ	0xFEB
  1222                           wreg	equ	0xFE8
  1223                           indf1	equ	0xFE7
  1224                           postinc1	equ	0xFE6
  1225                           plusw1	equ	0xFE3
  1226                           fsr1h	equ	0xFE2
  1227                           fsr1l	equ	0xFE1
  1228                           indf2	equ	0xFDF
  1229                           postinc2	equ	0xFDE
  1230                           postdec2	equ	0xFDD
  1231                           plusw2	equ	0xFDB
  1232                           fsr2h	equ	0xFDA
  1233                           fsr2l	equ	0xFD9
  1234                           status	equ	0xFD8
  1235                           
  1236                           	psect	idataBANK0
  1237  0031C0                     __pidataBANK0:
  1238                           	opt stack 0
  1239                           
  1240                           ;initializer for ReadGPS_DATE_TIME@F11472
  1241  0031C0  2D                 	db	45
  1242  0031C1  2D                 	db	45
  1243  0031C2  2D                 	db	45
  1244  0031C3  2D                 	db	45
  1245  0031C4  2D                 	db	45
  1246  0031C5  2D                 	db	45
  1247  0031C6  00                 	db	0
  1248                           
  1249                           ;initializer for ReadGPS_DATE_TIME@F11470
  1250  0031C7  2D                 	db	45
  1251  0031C8  2D                 	db	45
  1252  0031C9  2D                 	db	45
  1253  0031CA  2D                 	db	45
  1254  0031CB  2D                 	db	45
  1255  0031CC  2D                 	db	45
  1256  0031CD  00                 	db	0
  1257                           
  1258                           ;initializer for _LIGHTS
  1259  0031CE  83                 	db	131
  1260  0031CF  0F                 	db	15
  1261  0031D0  84                 	db	132
  1262  0031D1  0F                 	db	15
  1263                           
  1264                           ;initializer for _CENTURY
  1265  0031D2  14                 	db	20
  1266                           tosu	equ	0xFFF
  1267                           tosh	equ	0xFFE
  1268                           tosl	equ	0xFFD
  1269                           pclath	equ	0xFFA
  1270                           tblptru	equ	0xFF8
  1271                           tblptrh	equ	0xFF7
  1272                           tblptrl	equ	0xFF6
  1273                           tablat	equ	0xFF5
  1274                           prodh	equ	0xFF4
  1275                           prodl	equ	0xFF3
  1276                           intcon	equ	0xFF2
  1277                           plusw0	equ	0xFEB
  1278                           wreg	equ	0xFE8
  1279                           indf1	equ	0xFE7
  1280                           postinc1	equ	0xFE6
  1281                           plusw1	equ	0xFE3
  1282                           fsr1h	equ	0xFE2
  1283                           fsr1l	equ	0xFE1
  1284                           indf2	equ	0xFDF
  1285                           postinc2	equ	0xFDE
  1286                           postdec2	equ	0xFDD
  1287                           plusw2	equ	0xFDB
  1288                           fsr2h	equ	0xFDA
  1289                           fsr2l	equ	0xFD9
  1290                           status	equ	0xFD8
  1291                           
  1292                           	psect	idataBANK1
  1293  0030E2                     __pidataBANK1:
  1294                           	opt stack 0
  1295                           
  1296                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
  1297  0030E2  001F               	dw	31
  1298  0030E4  001C               	dw	28
  1299  0030E6  001F               	dw	31
  1300  0030E8  001E               	dw	30
  1301  0030EA  001F               	dw	31
  1302  0030EC  001E               	dw	30
  1303  0030EE  001F               	dw	31
  1304  0030F0  001F               	dw	31
  1305  0030F2  001E               	dw	30
  1306  0030F4  001F               	dw	31
  1307  0030F6  001E               	dw	30
  1308  0030F8  001F               	dw	31
  1309                           
  1310                           ;initializer for GetDay@t
  1311  0030FA  0000               	dw	0
  1312  0030FC  0003               	dw	3
  1313  0030FE  0002               	dw	2
  1314  003100  0005               	dw	5
  1315  003102  0000               	dw	0
  1316  003104  0003               	dw	3
  1317  003106  0005               	dw	5
  1318  003108  0001               	dw	1
  1319  00310A  0004               	dw	4
  1320  00310C  0006               	dw	6
  1321  00310E  0002               	dw	2
  1322  003110  0004               	dw	4
  1323                           tosu	equ	0xFFF
  1324                           tosh	equ	0xFFE
  1325                           tosl	equ	0xFFD
  1326                           pclath	equ	0xFFA
  1327                           tblptru	equ	0xFF8
  1328                           tblptrh	equ	0xFF7
  1329                           tblptrl	equ	0xFF6
  1330                           tablat	equ	0xFF5
  1331                           prodh	equ	0xFF4
  1332                           prodl	equ	0xFF3
  1333                           intcon	equ	0xFF2
  1334                           plusw0	equ	0xFEB
  1335                           wreg	equ	0xFE8
  1336                           indf1	equ	0xFE7
  1337                           postinc1	equ	0xFE6
  1338                           plusw1	equ	0xFE3
  1339                           fsr1h	equ	0xFE2
  1340                           fsr1l	equ	0xFE1
  1341                           indf2	equ	0xFDF
  1342                           postinc2	equ	0xFDE
  1343                           postdec2	equ	0xFDD
  1344                           plusw2	equ	0xFDB
  1345                           fsr2h	equ	0xFDA
  1346                           fsr2l	equ	0xFD9
  1347                           status	equ	0xFD8
  1348                           
  1349                           	psect	smallconst
  1350  000F00                     __psmallconst:
  1351                           	opt stack 0
  1352  000F00  00                 	db	0
  1353  000F01                     ReadGPSDateTime@F11464:
  1354                           	opt stack 0
  1355  000F01  24                 	db	36
  1356  000F02  47                 	db	71
  1357  000F03  50                 	db	80
  1358  000F04  52                 	db	82
  1359  000F05  4D                 	db	77
  1360  000F06  43                 	db	67
  1361  000F07  2C                 	db	44
  1362  000F08                     __end_ofReadGPSDateTime@F11464:
  1363                           	opt stack 0
  1364  0000                     _OSCTUNE	set	3805
  1365  0000                     _OSCFRQ	set	3806
  1366  0000                     _OSCEN	set	3804
  1367  0000                     _OSCCON3	set	3802
  1368  0000                     _OSCCON1	set	3800
  1369  0000                     _RC6PPS	set	3837
  1370  0000                     _RX1PPSbits	set	3765
  1371  0000                     _PPSLOCKbits	set	3744
  1372  0000                     _PPSLOCK	set	3744
  1373  0000                     _PIR0bits	set	3786
  1374  0000                     _PIE0bits	set	3778
  1375  0000                     _PIR3bits	set	3789
  1376  0000                     _PLLR	set	30424
  1377  0000                     _ODCONC	set	3871
  1378  0000                     _ODCONB	set	3863
  1379  0000                     _ODCONA	set	3855
  1380  0000                     _WPUC	set	3872
  1381  0000                     _WPUA	set	3856
  1382  0000                     _WPUB	set	3864
  1383  0000                     _WPUE	set	3885
  1384  0000                     _ANSELA	set	3857
  1385  0000                     _ANSELB	set	3865
  1386  0000                     _ANSELC	set	3873
  1387  0000                     _T0CON0bits	set	4053
  1388  0000                     _TMR0L	set	4051
  1389  0000                     _TMR0H	set	4052
  1390  0000                     _T0CON1	set	4054
  1391  0000                     _T0CON0	set	4053
  1392  0000                     _TRISC	set	3978
  1393  0000                     _TRISB	set	3977
  1394  0000                     _TRISA	set	3976
  1395  0000                     _LATC	set	3973
  1396  0000                     _RC1REG	set	3993
  1397  0000                     _RC1STAbits	set	3997
  1398  0000                     _SP1BRGH	set	3996
  1399  0000                     _SP1BRGL	set	3995
  1400  0000                     _TX1STA	set	3998
  1401  0000                     _RC1STA	set	3997
  1402  0000                     _BAUD1CON	set	3999
  1403  0000                     _LATCbits	set	3973
  1404  0000                     _NVMCON2	set	3970
  1405  0000                     _INTCONbits	set	4082
  1406  0000                     _NVMDAT	set	3968
  1407  0000                     _NVMADRH	set	3967
  1408  0000                     _NVMADRL	set	3966
  1409  0000                     _NVMCON1bits	set	3969
  1410  0000                     _LATAbits	set	3971
  1411  0000                     _TRISAbits	set	3976
  1412  0000                     _LATB	set	3972
  1413  0000                     _LATA	set	3971
  1414  0000                     _GIE	set	32663
  1415                           
  1416                           ; #config settings
  1417  000F08  00                 	db	0	; dummy byte at the end
  1418  0000                     tosu	equ	0xFFF
  1419                           tosh	equ	0xFFE
  1420                           tosl	equ	0xFFD
  1421                           pclath	equ	0xFFA
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           prodh	equ	0xFF4
  1427                           prodl	equ	0xFF3
  1428                           intcon	equ	0xFF2
  1429                           plusw0	equ	0xFEB
  1430                           wreg	equ	0xFE8
  1431                           indf1	equ	0xFE7
  1432                           postinc1	equ	0xFE6
  1433                           plusw1	equ	0xFE3
  1434                           fsr1h	equ	0xFE2
  1435                           fsr1l	equ	0xFE1
  1436                           indf2	equ	0xFDF
  1437                           postinc2	equ	0xFDE
  1438                           postdec2	equ	0xFDD
  1439                           plusw2	equ	0xFDB
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444                           	psect	cinit
  1445  002876                     __pcinit:
  1446                           	opt stack 0
  1447  002876                     start_initialization:
  1448                           	opt stack 0
  1449  002876                     __initialization:
  1450                           	opt stack 0
  1451                           
  1452                           ; Initialize objects allocated to BIGRAM (1024 bytes)
  1453                           ; load TBLPTR registers with __pidataBIGRAM
  1454  002876  0E0A               	movlw	low __pidataBIGRAM
  1455  002878  6EF6               	movwf	tblptrl,c
  1456  00287A  0E0F               	movlw	high __pidataBIGRAM
  1457  00287C  6EF7               	movwf	tblptrh,c
  1458  00287E  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1459  002880  6EF8               	movwf	tblptru,c
  1460  002882  EE02  F0F0         	lfsr	0,__pdataBIGRAM
  1461  002886  EE14 F000          	lfsr	1,1024
  1462  00288A                     copy_data0:
  1463  00288A  0009               	tblrd		*+
  1464  00288C  CFF5 FFEE          	movff	tablat,postinc0
  1465  002890  50E5               	movf	postdec1,w,c
  1466  002892  50E1               	movf	fsr1l,w,c
  1467  002894  E1FA               	bnz	copy_data0
  1468  002896  50E2               	movf	fsr1h,w,c
  1469  002898  E1F8               	bnz	copy_data0
  1470                           
  1471                           ; Initialize objects allocated to BANK1 (48 bytes)
  1472                           ; load TBLPTR registers with __pidataBANK1
  1473  00289A  0EE2               	movlw	low __pidataBANK1
  1474  00289C  6EF6               	movwf	tblptrl,c
  1475  00289E  0E30               	movlw	high __pidataBANK1
  1476  0028A0  6EF7               	movwf	tblptrh,c
  1477  0028A2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1478  0028A4  6EF8               	movwf	tblptru,c
  1479  0028A6  EE01  F044         	lfsr	0,__pdataBANK1
  1480  0028AA  EE10 F030          	lfsr	1,48
  1481  0028AE                     copy_data1:
  1482  0028AE  0009               	tblrd		*+
  1483  0028B0  CFF5 FFEE          	movff	tablat,postinc0
  1484  0028B4  50E5               	movf	postdec1,w,c
  1485  0028B6  50E1               	movf	fsr1l,w,c
  1486  0028B8  E1FA               	bnz	copy_data1
  1487                           
  1488                           ; Initialize objects allocated to BANK0 (19 bytes)
  1489                           ; load TBLPTR registers with __pidataBANK0
  1490  0028BA  0EC0               	movlw	low __pidataBANK0
  1491  0028BC  6EF6               	movwf	tblptrl,c
  1492  0028BE  0E31               	movlw	high __pidataBANK0
  1493  0028C0  6EF7               	movwf	tblptrh,c
  1494  0028C2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1495  0028C4  6EF8               	movwf	tblptru,c
  1496  0028C6  EE00  F0E5         	lfsr	0,__pdataBANK0
  1497  0028CA  EE10 F013          	lfsr	1,19
  1498  0028CE                     copy_data2:
  1499  0028CE  0009               	tblrd		*+
  1500  0028D0  CFF5 FFEE          	movff	tablat,postinc0
  1501  0028D4  50E5               	movf	postdec1,w,c
  1502  0028D6  50E1               	movf	fsr1l,w,c
  1503  0028D8  E1FA               	bnz	copy_data2
  1504                           
  1505                           ; Initialize objects allocated to COMRAM (2 bytes)
  1506                           ; load TBLPTR registers with __pidataCOMRAM
  1507  0028DA  0E36               	movlw	low __pidataCOMRAM
  1508  0028DC  6EF6               	movwf	tblptrl,c
  1509  0028DE  0E32               	movlw	high __pidataCOMRAM
  1510  0028E0  6EF7               	movwf	tblptrh,c
  1511  0028E2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1512  0028E4  6EF8               	movwf	tblptru,c
  1513  0028E6  0009               	tblrd		*+	;fetch initializer
  1514  0028E8  CFF5 F05C          	movff	tablat,__pdataCOMRAM
  1515  0028EC  0009               	tblrd		*+	;fetch initializer
  1516  0028EE  CFF5 F05D          	movff	tablat,__pdataCOMRAM+1
  1517                           
  1518                           ; Clear objects allocated to BIGRAM (960 bytes)
  1519  0028F2  EE06  F0F0         	lfsr	0,__pbssBIGRAM
  1520  0028F6  EE13 F0C0          	lfsr	1,960
  1521  0028FA                     clear_0:
  1522  0028FA  6AEE               	clrf	postinc0,c
  1523  0028FC  50E5               	movf	postdec1,w,c
  1524  0028FE  50E1               	movf	fsr1l,w,c
  1525  002900  E1FC               	bnz	clear_0
  1526  002902  50E2               	movf	fsr1h,w,c
  1527  002904  E1FA               	bnz	clear_0
  1528                           
  1529                           ; Clear objects allocated to BANK2 (240 bytes)
  1530  002906  EE02  F000         	lfsr	0,__pbssBANK2
  1531  00290A  0EF0               	movlw	240
  1532  00290C                     clear_1:
  1533  00290C  6AEE               	clrf	postinc0,c
  1534  00290E  06E8               	decf	wreg,f,c
  1535  002910  E1FD               	bnz	clear_1
  1536                           
  1537                           ; Clear objects allocated to BANK1 (68 bytes)
  1538  002912  EE01  F000         	lfsr	0,__pbssBANK1
  1539  002916  0E44               	movlw	68
  1540  002918                     clear_2:
  1541  002918  6AEE               	clrf	postinc0,c
  1542  00291A  06E8               	decf	wreg,f,c
  1543  00291C  E1FD               	bnz	clear_2
  1544                           
  1545                           ; Clear objects allocated to BANK0 (55 bytes)
  1546  00291E  EE00  F0AE         	lfsr	0,__pbssBANK0
  1547  002922  0E37               	movlw	55
  1548  002924                     clear_3:
  1549  002924  6AEE               	clrf	postinc0,c
  1550  002926  06E8               	decf	wreg,f,c
  1551  002928  E1FD               	bnz	clear_3
  1552                           
  1553                           ; Clear objects allocated to COMRAM (17 bytes)
  1554  00292A  EE00  F04B         	lfsr	0,__pbssCOMRAM
  1555  00292E  0E11               	movlw	17
  1556  002930                     clear_4:
  1557  002930  6AEE               	clrf	postinc0,c
  1558  002932  06E8               	decf	wreg,f,c
  1559  002934  E1FD               	bnz	clear_4
  1560  002936                     end_of_initialization:
  1561                           	opt stack 0
  1562  002936                     __end_of__initialization:
  1563                           	opt stack 0
  1564  002936  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1565  002938  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1566  00293A  0100               	movlb	0
  1567  00293C  EFE0  F00D         	goto	_main	;jump to C main() function
  1568                           tosu	equ	0xFFF
  1569                           tosh	equ	0xFFE
  1570                           tosl	equ	0xFFD
  1571                           pclath	equ	0xFFA
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           prodh	equ	0xFF4
  1577                           prodl	equ	0xFF3
  1578                           intcon	equ	0xFF2
  1579                           postinc0	equ	0xFEE
  1580                           plusw0	equ	0xFEB
  1581                           wreg	equ	0xFE8
  1582                           indf1	equ	0xFE7
  1583                           postinc1	equ	0xFE6
  1584                           postdec1	equ	0xFE5
  1585                           plusw1	equ	0xFE3
  1586                           fsr1h	equ	0xFE2
  1587                           fsr1l	equ	0xFE1
  1588                           indf2	equ	0xFDF
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           plusw2	equ	0xFDB
  1592                           fsr2h	equ	0xFDA
  1593                           fsr2l	equ	0xFD9
  1594                           status	equ	0xFD8
  1595                           
  1596                           	psect	bssCOMRAM
  1597  00004B                     __pbssCOMRAM:
  1598                           	opt stack 0
  1599  00004B                     _timer0ReloadVal16bit:
  1600                           	opt stack 0
  1601  00004B                     	ds	2
  1602  00004D                     _FLAGS_1:
  1603                           	opt stack 0
  1604  00004D                     	ds	1
  1605  00004E                     _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER:
  1606                           	opt stack 0
  1607  00004E                     	ds	1
  1608  00004F                     _NORMAL_AUDIO_STATE_ON_OFF_COUNTER:
  1609                           	opt stack 0
  1610  00004F                     	ds	1
  1611  000050                     _BLINK_STATE_ON_OFF_COUNTER:
  1612                           	opt stack 0
  1613  000050                     	ds	1
  1614  000051                     _CENTI_SECOND_COUNT:
  1615                           	opt stack 0
  1616  000051                     	ds	1
  1617  000052                     _STATE_SECONDS_REMAINING:
  1618                           	opt stack 0
  1619  000052                     	ds	1
  1620  000053                     _STATE_SECONDS:
  1621                           	opt stack 0
  1622  000053                     	ds	1
  1623  000054                     _SPECIAL_AUDIO_LAST_X_SECONDS:
  1624                           	opt stack 0
  1625  000054                     	ds	1
  1626  000055                     _AUDIO_SPECIAL_OFF_TIME:
  1627                           	opt stack 0
  1628  000055                     	ds	1
  1629  000056                     _AUDIO_SPECIAL_ON_TIME:
  1630                           	opt stack 0
  1631  000056                     	ds	1
  1632  000057                     _AUDIO_NORMAL_OFF_TIME:
  1633                           	opt stack 0
  1634  000057                     	ds	1
  1635  000058                     _AUDIO_NORMAL_ON_TIME:
  1636                           	opt stack 0
  1637  000058                     	ds	1
  1638  000059                     _BLINK_LAST_X_SECONDS:
  1639                           	opt stack 0
  1640  000059                     	ds	1
  1641  00005A                     _BLINK_OFF_TIME:
  1642                           	opt stack 0
  1643  00005A                     	ds	1
  1644  00005B                     _BLINK_ON_TIME:
  1645                           	opt stack 0
  1646  00005B                     	ds	1
  1647                           tosu	equ	0xFFF
  1648                           tosh	equ	0xFFE
  1649                           tosl	equ	0xFFD
  1650                           pclath	equ	0xFFA
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           intcon	equ	0xFF2
  1658                           postinc0	equ	0xFEE
  1659                           plusw0	equ	0xFEB
  1660                           wreg	equ	0xFE8
  1661                           indf1	equ	0xFE7
  1662                           postinc1	equ	0xFE6
  1663                           postdec1	equ	0xFE5
  1664                           plusw1	equ	0xFE3
  1665                           fsr1h	equ	0xFE2
  1666                           fsr1l	equ	0xFE1
  1667                           indf2	equ	0xFDF
  1668                           postinc2	equ	0xFDE
  1669                           postdec2	equ	0xFDD
  1670                           plusw2	equ	0xFDB
  1671                           fsr2h	equ	0xFDA
  1672                           fsr2l	equ	0xFD9
  1673                           status	equ	0xFD8
  1674                           
  1675                           	psect	dataCOMRAM
  1676  00005C                     __pdataCOMRAM:
  1677                           	opt stack 0
  1678  00005C                     _NEXT_EVENT:
  1679                           	opt stack 0
  1680  00005C                     	ds	1
  1681  00005D                     _PRESENT_EVENT:
  1682                           	opt stack 0
  1683  00005D                     	ds	1
  1684                           tosu	equ	0xFFF
  1685                           tosh	equ	0xFFE
  1686                           tosl	equ	0xFFD
  1687                           pclath	equ	0xFFA
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           prodh	equ	0xFF4
  1693                           prodl	equ	0xFF3
  1694                           intcon	equ	0xFF2
  1695                           postinc0	equ	0xFEE
  1696                           plusw0	equ	0xFEB
  1697                           wreg	equ	0xFE8
  1698                           indf1	equ	0xFE7
  1699                           postinc1	equ	0xFE6
  1700                           postdec1	equ	0xFE5
  1701                           plusw1	equ	0xFE3
  1702                           fsr1h	equ	0xFE2
  1703                           fsr1l	equ	0xFE1
  1704                           indf2	equ	0xFDF
  1705                           postinc2	equ	0xFDE
  1706                           postdec2	equ	0xFDD
  1707                           plusw2	equ	0xFDB
  1708                           fsr2h	equ	0xFDA
  1709                           fsr2l	equ	0xFD9
  1710                           status	equ	0xFD8
  1711                           
  1712                           	psect	bssBANK0
  1713  0000AE                     __pbssBANK0:
  1714                           	opt stack 0
  1715  0000AE                     _GPS_DATE_TIME:
  1716                           	opt stack 0
  1717  0000AE                     	ds	11
  1718  0000B9                     _DATE_TIME:
  1719                           	opt stack 0
  1720  0000B9                     	ds	11
  1721  0000C4                     _TIME_AT_LAST_GPS_SYNC:
  1722                           	opt stack 0
  1723  0000C4                     	ds	4
  1724  0000C8                     _TIME_WHEN_GPS_IS_SWITCHED_ON:
  1725                           	opt stack 0
  1726  0000C8                     	ds	4
  1727  0000CC                     _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME:
  1728                           	opt stack 0
  1729  0000CC                     	ds	4
  1730  0000D0                     _GPS_SYNC_EVERY_x_SECONDS:
  1731                           	opt stack 0
  1732  0000D0                     	ds	4
  1733  0000D4                     _DAY_LIGHT_END:
  1734                           	opt stack 0
  1735  0000D4                     	ds	4
  1736  0000D8                     _DAY_LIGHT_START:
  1737                           	opt stack 0
  1738  0000D8                     	ds	4
  1739  0000DC                     _TMR0_InterruptHandler:
  1740                           	opt stack 0
  1741  0000DC                     	ds	2
  1742  0000DE                     _TIME_ZONE:
  1743                           	opt stack 0
  1744  0000DE                     	ds	2
  1745  0000E0                     _FLAGS_0:
  1746                           	opt stack 0
  1747  0000E0                     	ds	1
  1748  0000E1                     _NO_OF_TIMES_GPS_FAILED:
  1749                           	opt stack 0
  1750  0000E1                     	ds	1
  1751  0000E2                     _NEXT_STATE:
  1752                           	opt stack 0
  1753  0000E2                     	ds	1
  1754  0000E3                     _PRESENT_STATE:
  1755                           	opt stack 0
  1756  0000E3                     	ds	1
  1757  0000E4                     _GPS_SYNC_AT_START:
  1758                           	opt stack 0
  1759  0000E4                     	ds	1
  1760                           tosu	equ	0xFFF
  1761                           tosh	equ	0xFFE
  1762                           tosl	equ	0xFFD
  1763                           pclath	equ	0xFFA
  1764                           tblptru	equ	0xFF8
  1765                           tblptrh	equ	0xFF7
  1766                           tblptrl	equ	0xFF6
  1767                           tablat	equ	0xFF5
  1768                           prodh	equ	0xFF4
  1769                           prodl	equ	0xFF3
  1770                           intcon	equ	0xFF2
  1771                           postinc0	equ	0xFEE
  1772                           plusw0	equ	0xFEB
  1773                           wreg	equ	0xFE8
  1774                           indf1	equ	0xFE7
  1775                           postinc1	equ	0xFE6
  1776                           postdec1	equ	0xFE5
  1777                           plusw1	equ	0xFE3
  1778                           fsr1h	equ	0xFE2
  1779                           fsr1l	equ	0xFE1
  1780                           indf2	equ	0xFDF
  1781                           postinc2	equ	0xFDE
  1782                           postdec2	equ	0xFDD
  1783                           plusw2	equ	0xFDB
  1784                           fsr2h	equ	0xFDA
  1785                           fsr2l	equ	0xFD9
  1786                           status	equ	0xFD8
  1787                           
  1788                           	psect	dataBANK0
  1789  0000E5                     __pdataBANK0:
  1790                           	opt stack 0
  1791  0000E5                     ReadGPS_DATE_TIME@F11472:
  1792                           	opt stack 0
  1793  0000E5                     	ds	7
  1794  0000EC                     ReadGPS_DATE_TIME@F11470:
  1795                           	opt stack 0
  1796  0000EC                     	ds	7
  1797  0000F3                     _LIGHTS:
  1798                           	opt stack 0
  1799  0000F3                     	ds	4
  1800  0000F7                     _CENTURY:
  1801                           	opt stack 0
  1802  0000F7                     	ds	1
  1803                           tosu	equ	0xFFF
  1804                           tosh	equ	0xFFE
  1805                           tosl	equ	0xFFD
  1806                           pclath	equ	0xFFA
  1807                           tblptru	equ	0xFF8
  1808                           tblptrh	equ	0xFF7
  1809                           tblptrl	equ	0xFF6
  1810                           tablat	equ	0xFF5
  1811                           prodh	equ	0xFF4
  1812                           prodl	equ	0xFF3
  1813                           intcon	equ	0xFF2
  1814                           postinc0	equ	0xFEE
  1815                           plusw0	equ	0xFEB
  1816                           wreg	equ	0xFE8
  1817                           indf1	equ	0xFE7
  1818                           postinc1	equ	0xFE6
  1819                           postdec1	equ	0xFE5
  1820                           plusw1	equ	0xFE3
  1821                           fsr1h	equ	0xFE2
  1822                           fsr1l	equ	0xFE1
  1823                           indf2	equ	0xFDF
  1824                           postinc2	equ	0xFDE
  1825                           postdec2	equ	0xFDD
  1826                           plusw2	equ	0xFDB
  1827                           fsr2h	equ	0xFDA
  1828                           fsr2l	equ	0xFD9
  1829                           status	equ	0xFD8
  1830                           
  1831                           	psect	bssBANK1
  1832  000100                     __pbssBANK1:
  1833                           	opt stack 0
  1834  000100                     _CYCLES:
  1835                           	opt stack 0
  1836  000100                     	ds	68
  1837                           tosu	equ	0xFFF
  1838                           tosh	equ	0xFFE
  1839                           tosl	equ	0xFFD
  1840                           pclath	equ	0xFFA
  1841                           tblptru	equ	0xFF8
  1842                           tblptrh	equ	0xFF7
  1843                           tblptrl	equ	0xFF6
  1844                           tablat	equ	0xFF5
  1845                           prodh	equ	0xFF4
  1846                           prodl	equ	0xFF3
  1847                           intcon	equ	0xFF2
  1848                           postinc0	equ	0xFEE
  1849                           plusw0	equ	0xFEB
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           postinc1	equ	0xFE6
  1853                           postdec1	equ	0xFE5
  1854                           plusw1	equ	0xFE3
  1855                           fsr1h	equ	0xFE2
  1856                           fsr1l	equ	0xFE1
  1857                           indf2	equ	0xFDF
  1858                           postinc2	equ	0xFDE
  1859                           postdec2	equ	0xFDD
  1860                           plusw2	equ	0xFDB
  1861                           fsr2h	equ	0xFDA
  1862                           fsr2l	equ	0xFD9
  1863                           status	equ	0xFD8
  1864                           
  1865                           	psect	dataBANK1
  1866  000144                     __pdataBANK1:
  1867                           	opt stack 0
  1868  000144                     projMain@NO_OF_DAYS_IN_A_MONTH:
  1869                           	opt stack 0
  1870  000144                     	ds	24
  1871  00015C                     GetDay@t:
  1872                           	opt stack 0
  1873  00015C                     	ds	24
  1874                           tosu	equ	0xFFF
  1875                           tosh	equ	0xFFE
  1876                           tosl	equ	0xFFD
  1877                           pclath	equ	0xFFA
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           prodh	equ	0xFF4
  1883                           prodl	equ	0xFF3
  1884                           intcon	equ	0xFF2
  1885                           postinc0	equ	0xFEE
  1886                           plusw0	equ	0xFEB
  1887                           wreg	equ	0xFE8
  1888                           indf1	equ	0xFE7
  1889                           postinc1	equ	0xFE6
  1890                           postdec1	equ	0xFE5
  1891                           plusw1	equ	0xFE3
  1892                           fsr1h	equ	0xFE2
  1893                           fsr1l	equ	0xFE1
  1894                           indf2	equ	0xFDF
  1895                           postinc2	equ	0xFDE
  1896                           postdec2	equ	0xFDD
  1897                           plusw2	equ	0xFDB
  1898                           fsr2h	equ	0xFDA
  1899                           fsr2l	equ	0xFD9
  1900                           status	equ	0xFD8
  1901                           
  1902                           	psect	bssBANK2
  1903  000200                     __pbssBANK2:
  1904                           	opt stack 0
  1905  000200                     _EVENTS:
  1906                           	opt stack 0
  1907  000200                     	ds	240
  1908                           tosu	equ	0xFFF
  1909                           tosh	equ	0xFFE
  1910                           tosl	equ	0xFFD
  1911                           pclath	equ	0xFFA
  1912                           tblptru	equ	0xFF8
  1913                           tblptrh	equ	0xFF7
  1914                           tblptrl	equ	0xFF6
  1915                           tablat	equ	0xFF5
  1916                           prodh	equ	0xFF4
  1917                           prodl	equ	0xFF3
  1918                           intcon	equ	0xFF2
  1919                           postinc0	equ	0xFEE
  1920                           plusw0	equ	0xFEB
  1921                           wreg	equ	0xFE8
  1922                           indf1	equ	0xFE7
  1923                           postinc1	equ	0xFE6
  1924                           postdec1	equ	0xFE5
  1925                           plusw1	equ	0xFE3
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           indf2	equ	0xFDF
  1929                           postinc2	equ	0xFDE
  1930                           postdec2	equ	0xFDD
  1931                           plusw2	equ	0xFDB
  1932                           fsr2h	equ	0xFDA
  1933                           fsr2l	equ	0xFD9
  1934                           status	equ	0xFD8
  1935                           
  1936                           	psect	bssBIGRAM
  1937  0006F0                     __pbssBIGRAM:
  1938                           	opt stack 0
  1939  0006F0                     _STATES:
  1940                           	opt stack 0
  1941  0006F0                     	ds	960
  1942                           tosu	equ	0xFFF
  1943                           tosh	equ	0xFFE
  1944                           tosl	equ	0xFFD
  1945                           pclath	equ	0xFFA
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           prodh	equ	0xFF4
  1951                           prodl	equ	0xFF3
  1952                           intcon	equ	0xFF2
  1953                           postinc0	equ	0xFEE
  1954                           plusw0	equ	0xFEB
  1955                           wreg	equ	0xFE8
  1956                           indf1	equ	0xFE7
  1957                           postinc1	equ	0xFE6
  1958                           postdec1	equ	0xFE5
  1959                           plusw1	equ	0xFE3
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           postinc2	equ	0xFDE
  1964                           postdec2	equ	0xFDD
  1965                           plusw2	equ	0xFDB
  1966                           fsr2h	equ	0xFDA
  1967                           fsr2l	equ	0xFD9
  1968                           status	equ	0xFD8
  1969                           
  1970                           	psect	dataBIGRAM
  1971  0002F0                     __pdataBIGRAM:
  1972                           	opt stack 0
  1973  0002F0                     _EE_Settings:
  1974                           	opt stack 0
  1975  0002F0                     	ds	1024
  1976                           tosu	equ	0xFFF
  1977                           tosh	equ	0xFFE
  1978                           tosl	equ	0xFFD
  1979                           pclath	equ	0xFFA
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           prodh	equ	0xFF4
  1985                           prodl	equ	0xFF3
  1986                           intcon	equ	0xFF2
  1987                           postinc0	equ	0xFEE
  1988                           plusw0	equ	0xFEB
  1989                           wreg	equ	0xFE8
  1990                           indf1	equ	0xFE7
  1991                           postinc1	equ	0xFE6
  1992                           postdec1	equ	0xFE5
  1993                           plusw1	equ	0xFE3
  1994                           fsr1h	equ	0xFE2
  1995                           fsr1l	equ	0xFE1
  1996                           indf2	equ	0xFDF
  1997                           postinc2	equ	0xFDE
  1998                           postdec2	equ	0xFDD
  1999                           plusw2	equ	0xFDB
  2000                           fsr2h	equ	0xFDA
  2001                           fsr2l	equ	0xFD9
  2002                           status	equ	0xFD8
  2003                           
  2004                           	psect	cstackBANK0
  2005  000060                     __pcstackBANK0:
  2006                           	opt stack 0
  2007  000060                     ??_Lcd_CharCP:
  2008  000060                     ??_Lcd_Delay5500us:
  2009  000060                     ??_Lcd_Command:
  2010  000060                     ??_TestGPSStartCondition:
  2011  000060                     ?___wmul:
  2012                           	opt stack 0
  2013  000060                     ?___awdiv:
  2014                           	opt stack 0
  2015  000060                     ?___lwmod:
  2016                           	opt stack 0
  2017  000060                     ?___lmul:
  2018                           	opt stack 0
  2019  000060                     ?___aldiv:
  2020                           	opt stack 0
  2021  000060                     ReadGPSDateTime@Date:
  2022                           	opt stack 0
  2023  000060                     ValidateDateTime@Date:
  2024                           	opt stack 0
  2025  000060                     PIN_MANAGER_Initialize@state:
  2026                           	opt stack 0
  2027  000060                     ReadEeprom@Address:
  2028                           	opt stack 0
  2029  000060                     WriteEeprom@Add:
  2030                           	opt stack 0
  2031  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  2032                           	opt stack 0
  2033  000060                     ___wmul@multiplier:
  2034                           	opt stack 0
  2035  000060                     ___awdiv@dividend:
  2036                           	opt stack 0
  2037  000060                     ___lwmod@dividend:
  2038                           	opt stack 0
  2039  000060                     VerifyForGPSOnTIme@TimeDiff:
  2040                           	opt stack 0
  2041  000060                     ___lmul@multiplier:
  2042                           	opt stack 0
  2043  000060                     ___aldiv@dividend:
  2044                           	opt stack 0
  2045                           
  2046                           ; 4 bytes @ 0x0
  2047  000060                     	ds	1
  2048  000061                     ReadGPSDateTime@Time:
  2049                           	opt stack 0
  2050  000061                     ValidateDateTime@Time:
  2051                           	opt stack 0
  2052                           
  2053                           ; 1 bytes @ 0x1
  2054  000061                     	ds	1
  2055  000062                     ??_TMR0_Initialize:
  2056  000062                     ??_ReadGPSDateTime:
  2057  000062                     ??_ValidateDateTime:
  2058  000062                     Lcd_CharCP@c:
  2059                           	opt stack 0
  2060  000062                     Lcd_Command@command:
  2061                           	opt stack 0
  2062  000062                     WriteEeprom@Data:
  2063                           	opt stack 0
  2064  000062                     ___wmul@multiplicand:
  2065                           	opt stack 0
  2066  000062                     ___awdiv@divisor:
  2067                           	opt stack 0
  2068  000062                     ___lwmod@divisor:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x2
  2072  000062                     	ds	1
  2073  000063                     ValidateDateTime@Item:
  2074                           	opt stack 0
  2075  000063                     Lcd_Init@data:
  2076                           	opt stack 0
  2077  000063                     WriteEeprom@Address:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x3
  2081  000063                     	ds	1
  2082  000064                     ___awdiv@counter:
  2083                           	opt stack 0
  2084  000064                     ___lwmod@counter:
  2085                           	opt stack 0
  2086  000064                     ___wmul@product:
  2087                           	opt stack 0
  2088  000064                     ___lmul@multiplicand:
  2089                           	opt stack 0
  2090  000064                     ___aldiv@divisor:
  2091                           	opt stack 0
  2092                           
  2093                           ; 4 bytes @ 0x4
  2094  000064                     	ds	1
  2095  000065                     ?_IncreaseByAYear:
  2096                           	opt stack 0
  2097  000065                     ?_DecreaseByAYear:
  2098                           	opt stack 0
  2099  000065                     ___awdiv@sign:
  2100                           	opt stack 0
  2101  000065                     IncreaseByAYear@dt:
  2102                           	opt stack 0
  2103  000065                     DecreaseByAYear@dt:
  2104                           	opt stack 0
  2105                           
  2106                           ; 11 bytes @ 0x5
  2107  000065                     	ds	1
  2108  000066                     ??_LoadEventsFromEeprom:
  2109  000066                     ??_LoadCyclesFromEeprom:
  2110  000066                     ??_GetEventNumber:
  2111  000066                     ___awdiv@quotient:
  2112                           	opt stack 0
  2113  000066                     LoadSettingsFromEeprom@Temp32:
  2114                           	opt stack 0
  2115  000066                     ReadGPSDateTime@StartCode:
  2116                           	opt stack 0
  2117                           
  2118                           ; 7 bytes @ 0x6
  2119  000066                     	ds	2
  2120  000068                     ??_LoadStatesFromEeprom:
  2121  000068                     ?___awmod:
  2122                           	opt stack 0
  2123  000068                     ___aldiv@counter:
  2124                           	opt stack 0
  2125  000068                     ___awmod@dividend:
  2126                           	opt stack 0
  2127  000068                     ___lmul@product:
  2128                           	opt stack 0
  2129                           
  2130                           ; 4 bytes @ 0x8
  2131  000068                     	ds	1
  2132  000069                     ___aldiv@sign:
  2133                           	opt stack 0
  2134                           
  2135                           ; 1 bytes @ 0x9
  2136  000069                     	ds	1
  2137  00006A                     LoadSettingsFromEeprom@Temp16:
  2138                           	opt stack 0
  2139  00006A                     LoadEventsFromEeprom@i:
  2140                           	opt stack 0
  2141  00006A                     ___awmod@divisor:
  2142                           	opt stack 0
  2143  00006A                     ___aldiv@quotient:
  2144                           	opt stack 0
  2145                           
  2146                           ; 4 bytes @ 0xA
  2147  00006A                     	ds	1
  2148  00006B                     LoadStatesFromEeprom@AddAudioNormal:
  2149                           	opt stack 0
  2150                           
  2151                           ; 2 bytes @ 0xB
  2152  00006B                     	ds	1
  2153  00006C                     ?_TimeTextToSecond:
  2154                           	opt stack 0
  2155  00006C                     TimeTextToSecond@Time:
  2156                           	opt stack 0
  2157  00006C                     ___awmod@counter:
  2158                           	opt stack 0
  2159  00006C                     LoadSettingsFromEeprom@Address:
  2160                           	opt stack 0
  2161  00006C                     LoadEventsFromEeprom@Address:
  2162                           	opt stack 0
  2163                           
  2164                           ; 2 bytes @ 0xC
  2165  00006C                     	ds	1
  2166  00006D                     ___awmod@sign:
  2167                           	opt stack 0
  2168  00006D                     ReadGPSDateTime@i:
  2169                           	opt stack 0
  2170  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
  2171                           	opt stack 0
  2172  00006D                     LoadCyclesFromEeprom@Address:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0xD
  2176  00006D                     	ds	1
  2177  00006E                     GetDay@Date:
  2178                           	opt stack 0
  2179  00006E                     Lcd_WriteChar@x:
  2180                           	opt stack 0
  2181  00006E                     LoadEventsFromEeprom@Temp16:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0xE
  2185  00006E                     	ds	1
  2186  00006F                     ??_GetDay:
  2187  00006F                     ReadGPSDateTime@Commas:
  2188                           	opt stack 0
  2189  00006F                     Lcd_WriteChar@c:
  2190                           	opt stack 0
  2191  00006F                     LoadStatesFromEeprom@TempNormalAdd:
  2192                           	opt stack 0
  2193  00006F                     LoadCyclesFromEeprom@j:
  2194                           	opt stack 0
  2195  00006F                     GetEventNumber@i:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0xF
  2199  00006F                     	ds	1
  2200  000070                     ??_TimeTextToSecond:
  2201  000070                     ?_IncreaseByAMonth:
  2202                           	opt stack 0
  2203  000070                     ?_DecreaseByAMonth:
  2204                           	opt stack 0
  2205  000070                     ReadGPSDateTime@TempChar:
  2206                           	opt stack 0
  2207  000070                     Lcd_WriteChar@y:
  2208                           	opt stack 0
  2209  000070                     IncreaseByAMonth@dt:
  2210                           	opt stack 0
  2211  000070                     DecreaseByAMonth@dt:
  2212                           	opt stack 0
  2213                           
  2214                           ; 11 bytes @ 0x10
  2215  000070                     	ds	1
  2216  000071                     ReadGPSDateTime@Pos:
  2217                           	opt stack 0
  2218  000071                     Lcd_WriteChar@data:
  2219                           	opt stack 0
  2220  000071                     LoadStatesFromEeprom@TempSpecialAdd:
  2221                           	opt stack 0
  2222  000071                     LoadCyclesFromEeprom@i:
  2223                           	opt stack 0
  2224                           
  2225                           ; 2 bytes @ 0x11
  2226  000071                     	ds	1
  2227  000072                     WriteLongInt@x:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x12
  2231  000072                     	ds	1
  2232  000073                     LoadStatesFromEeprom@AudAddInc:
  2233                           	opt stack 0
  2234  000073                     LoadCyclesFromEeprom@i_1461:
  2235                           	opt stack 0
  2236  000073                     WriteLongInt@Val:
  2237                           	opt stack 0
  2238                           
  2239                           ; 4 bytes @ 0x13
  2240  000073                     	ds	1
  2241  000074                     LoadStatesFromEeprom@j:
  2242                           	opt stack 0
  2243                           
  2244                           ; 2 bytes @ 0x14
  2245  000074                     	ds	1
  2246  000075                     GetDay@d:
  2247                           	opt stack 0
  2248                           
  2249                           ; 1 bytes @ 0x15
  2250  000075                     	ds	1
  2251  000076                     GetDay@m:
  2252                           	opt stack 0
  2253  000076                     LoadStatesFromEeprom@j_1396:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x16
  2257  000076                     	ds	1
  2258  000077                     WriteLongInt@size:
  2259                           	opt stack 0
  2260  000077                     GetDay@y:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x17
  2264  000077                     	ds	1
  2265  000078                     WriteLongInt@Sign:
  2266                           	opt stack 0
  2267  000078                     LoadStatesFromEeprom@AddStates:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x18
  2271  000078                     	ds	1
  2272  000079                     WriteLongInt@POS:
  2273                           	opt stack 0
  2274                           
  2275                           ; 1 bytes @ 0x19
  2276  000079                     	ds	1
  2277  00007A                     WriteLongInt@y:
  2278                           	opt stack 0
  2279  00007A                     LoadStatesFromEeprom@i:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x1A
  2283  00007A                     	ds	1
  2284  00007B                     ?_IncreaseByADay:
  2285                           	opt stack 0
  2286  00007B                     ?_DecreaseByADay:
  2287                           	opt stack 0
  2288  00007B                     IncreaseByADay@dt:
  2289                           	opt stack 0
  2290  00007B                     DecreaseByADay@dt:
  2291                           	opt stack 0
  2292                           
  2293                           ; 11 bytes @ 0x1B
  2294  00007B                     	ds	1
  2295  00007C                     
  2296                           ; 1 bytes @ 0x1C
  2297  00007C                     	ds	4
  2298  000080                     TimeTextToSecond@Second:
  2299                           	opt stack 0
  2300                           
  2301                           ; 4 bytes @ 0x20
  2302  000080                     	ds	6
  2303  000086                     ??_IncreaseByADay:
  2304  000086                     ??_DecreaseByADay:
  2305                           
  2306                           ; 1 bytes @ 0x26
  2307  000086                     	ds	1
  2308  000087                     DecreaseByADay@MonthDays:
  2309                           	opt stack 0
  2310                           
  2311                           ; 1 bytes @ 0x27
  2312  000087                     	ds	1
  2313  000088                     IncreaseByADay@MonthDays:
  2314                           	opt stack 0
  2315                           
  2316                           ; 1 bytes @ 0x28
  2317  000088                     	ds	1
  2318  000089                     ?_AdjustDayLightSaving:
  2319                           	opt stack 0
  2320  000089                     AdjustDayLightSaving@dt:
  2321                           	opt stack 0
  2322                           
  2323                           ; 11 bytes @ 0x29
  2324  000089                     	ds	11
  2325  000094                     AdjustDayLightSaving@Start:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x34
  2329  000094                     	ds	2
  2330  000096                     AdjustDayLightSaving@End:
  2331                           	opt stack 0
  2332                           
  2333                           ; 2 bytes @ 0x36
  2334  000096                     	ds	2
  2335  000098                     AdjustDayLightSaving@Present:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x38
  2339  000098                     	ds	2
  2340  00009A                     ??_ReadGPS_DATE_TIME:
  2341                           
  2342                           ; 1 bytes @ 0x3A
  2343  00009A                     	ds	4
  2344  00009E                     ReadGPS_DATE_TIME@Time:
  2345                           	opt stack 0
  2346                           
  2347                           ; 7 bytes @ 0x3E
  2348  00009E                     	ds	7
  2349  0000A5                     ReadGPS_DATE_TIME@Date:
  2350                           	opt stack 0
  2351                           
  2352                           ; 7 bytes @ 0x45
  2353  0000A5                     	ds	7
  2354  0000AC                     main@i:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x4C
  2358  0000AC                     	ds	2
  2359                           tosu	equ	0xFFF
  2360                           tosh	equ	0xFFE
  2361                           tosl	equ	0xFFD
  2362                           pclath	equ	0xFFA
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           intcon	equ	0xFF2
  2370                           postinc0	equ	0xFEE
  2371                           plusw0	equ	0xFEB
  2372                           wreg	equ	0xFE8
  2373                           indf1	equ	0xFE7
  2374                           postinc1	equ	0xFE6
  2375                           postdec1	equ	0xFE5
  2376                           plusw1	equ	0xFE3
  2377                           fsr1h	equ	0xFE2
  2378                           fsr1l	equ	0xFE1
  2379                           indf2	equ	0xFDF
  2380                           postinc2	equ	0xFDE
  2381                           postdec2	equ	0xFDD
  2382                           plusw2	equ	0xFDB
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387                           	psect	cstackCOMRAM
  2388  000001                     __pcstackCOMRAM:
  2389                           	opt stack 0
  2390  000001                     ?i2___lwmod:
  2391                           	opt stack 0
  2392  000001                     i2___lwmod@dividend:
  2393                           	opt stack 0
  2394                           
  2395                           ; 2 bytes @ 0x0
  2396  000001                     	ds	2
  2397  000003                     i2___lwmod@divisor:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x2
  2401  000003                     	ds	2
  2402  000005                     i2___lwmod@counter:
  2403                           	opt stack 0
  2404                           
  2405                           ; 1 bytes @ 0x4
  2406  000005                     	ds	1
  2407  000006                     ?i2_IncreaseByAYear:
  2408                           	opt stack 0
  2409  000006                     i2IncreaseByAYear@dt:
  2410                           	opt stack 0
  2411                           
  2412                           ; 11 bytes @ 0x5
  2413  000006                     	ds	11
  2414  000011                     ?i2_IncreaseByAMonth:
  2415                           	opt stack 0
  2416  000011                     i2IncreaseByAMonth@dt:
  2417                           	opt stack 0
  2418                           
  2419                           ; 11 bytes @ 0x10
  2420  000011                     	ds	11
  2421  00001C                     ?i2_IncreaseByADay:
  2422                           	opt stack 0
  2423  00001C                     i2IncreaseByADay@dt:
  2424                           	opt stack 0
  2425                           
  2426                           ; 11 bytes @ 0x1B
  2427  00001C                     	ds	11
  2428  000027                     ??i2_IncreaseByADay:
  2429                           
  2430                           ; 1 bytes @ 0x26
  2431  000027                     	ds	2
  2432  000029                     i2IncreaseByADay@MonthDays:
  2433                           	opt stack 0
  2434                           
  2435                           ; 1 bytes @ 0x28
  2436  000029                     	ds	1
  2437  00002A                     ?_IncreaseByASecond:
  2438                           	opt stack 0
  2439  00002A                     IncreaseByASecond@dt:
  2440                           	opt stack 0
  2441                           
  2442                           ; 11 bytes @ 0x29
  2443  00002A                     	ds	11
  2444  000035                     ??_Timer0_10ms:
  2445  000035                     
  2446                           ; 1 bytes @ 0x34
  2447  000035                     	ds	5
  2448  00003A                     Timer0_10ms@ThisCycle:
  2449                           	opt stack 0
  2450                           
  2451                           ; 1 bytes @ 0x39
  2452  00003A                     	ds	1
  2453  00003B                     Timer0_10ms@i:
  2454                           	opt stack 0
  2455                           
  2456                           ; 1 bytes @ 0x3A
  2457  00003B                     	ds	1
  2458  00003C                     Timer0_10ms@OutForThePorts:
  2459                           	opt stack 0
  2460                           
  2461                           ; 2 bytes @ 0x3B
  2462  00003C                     	ds	2
  2463  00003E                     Timer0_10ms@i_2890:
  2464                           	opt stack 0
  2465                           
  2466                           ; 1 bytes @ 0x3D
  2467  00003E                     	ds	1
  2468  00003F                     Timer0_10ms@i_2891:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x3E
  2472  00003F                     	ds	1
  2473  000040                     Timer0_10ms@i_2892:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x3F
  2477  000040                     	ds	1
  2478  000041                     ??_INTERRUPT_InterruptManager:
  2479                           
  2480                           ; 1 bytes @ 0x40
  2481  000041                     	ds	10
  2482                           tosu	equ	0xFFF
  2483                           tosh	equ	0xFFE
  2484                           tosl	equ	0xFFD
  2485                           pclath	equ	0xFFA
  2486                           tblptru	equ	0xFF8
  2487                           tblptrh	equ	0xFF7
  2488                           tblptrl	equ	0xFF6
  2489                           tablat	equ	0xFF5
  2490                           prodh	equ	0xFF4
  2491                           prodl	equ	0xFF3
  2492                           intcon	equ	0xFF2
  2493                           postinc0	equ	0xFEE
  2494                           plusw0	equ	0xFEB
  2495                           wreg	equ	0xFE8
  2496                           indf1	equ	0xFE7
  2497                           postinc1	equ	0xFE6
  2498                           postdec1	equ	0xFE5
  2499                           plusw1	equ	0xFE3
  2500                           fsr1h	equ	0xFE2
  2501                           fsr1l	equ	0xFE1
  2502                           indf2	equ	0xFDF
  2503                           postinc2	equ	0xFDE
  2504                           postdec2	equ	0xFDD
  2505                           plusw2	equ	0xFDB
  2506                           fsr2h	equ	0xFDA
  2507                           fsr2l	equ	0xFD9
  2508                           status	equ	0xFD8
  2509                           
  2510 ;;
  2511 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2512 ;;
  2513 ;; *************** function _main *****************
  2514 ;; Defined at:
  2515 ;;		line 53 in file "main.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;		None
  2518 ;; Auto vars:     Size  Location     Type
  2519 ;;  i               2   76[BANK0 ] short 
  2520 ;; Return value:  Size  Location     Type
  2521 ;;                  1    wreg      void 
  2522 ;; Registers used:
  2523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2524 ;; Tracked objects:
  2525 ;;		On entry : 0/0
  2526 ;;		On exit  : 3F/0
  2527 ;;		Unchanged: 0/0
  2528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2530 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2533 ;;Total ram usage:        2 bytes
  2534 ;; Hardware stack levels required when called:   16
  2535 ;; This function calls:
  2536 ;;		_GetEventNumber
  2537 ;;		_Lcd_Command
  2538 ;;		_Lcd_Init
  2539 ;;		_LoadAllFromEeprom
  2540 ;;		_ReadGPS
  2541 ;;		_SYSTEM_Initialize
  2542 ;;		_StopGPS
  2543 ;;		_SwitchOnGPS
  2544 ;;		_TMR0_SetInterruptHandler
  2545 ;;		_TestGPSStartCondition
  2546 ;;		_VerifyForGPSOnTIme
  2547 ;;		_WriteEeprom
  2548 ;;		_WriteLongInt
  2549 ;; This function is called by:
  2550 ;;		Startup code after reset
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           	psect	text0
  2555  001BC0                     __ptext0:
  2556                           	opt stack 0
  2557  001BC0                     _main:
  2558                           	opt stack 15
  2559                           
  2560                           ;main.c: 56: SYSTEM_Initialize();
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;incstack = 0
  2564  001BC0  ECC2  F018         	call	_SYSTEM_Initialize	;wreg free
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 87: (INTCONbits.GIE = 1);
  2568  001BC4  8EF2               	bsf	intcon,7,c	;volatile
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;main.c: 88: (INTCONbits.PEIE = 1);
  2572  001BC6  8CF2               	bsf	intcon,6,c	;volatile
  2573                           
  2574                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  2575  001BC8  0E0A               	movlw	low _Timer0_10ms
  2576  001BCA  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  2577  001BCC  0E13               	movlw	high _Timer0_10ms
  2578  001BCE  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2579  001BD0  EC0B  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 91: for (INT16 i=0; i<1024; i++)
  2583  001BD4  6BAC               	clrf	main@i& (0+255),b
  2584  001BD6  6BAD               	clrf	(main@i+1)& (0+255),b
  2585  001BD8                     l4365:
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;main.c: 92: WriteEeprom(i,EE_Settings[i]);
  2589  001BD8  C0AC  F060         	movff	main@i,WriteEeprom@Add
  2590  001BDC  C0AD  F061         	movff	main@i+1,WriteEeprom@Add+1
  2591  001BE0  0EF0               	movlw	low _EE_Settings
  2592  001BE2  25AC               	addwf	main@i& (0+255),w,b
  2593  001BE4  6ED9               	movwf	fsr2l,c
  2594  001BE6  0E02               	movlw	high _EE_Settings
  2595  001BE8  21AD               	addwfc	(main@i+1)& (0+255),w,b
  2596  001BEA  6EDA               	movwf	fsr2h,c
  2597  001BEC  50DF               	movf	indf2,w,c
  2598  001BEE  6F62               	movwf	WriteEeprom@Data& (0+255),b
  2599  001BF0  EC3F  F018         	call	_WriteEeprom	;wreg free
  2600                           
  2601                           ; BSR set to: 0
  2602  001BF4  4BAC               	infsnz	main@i& (0+255),f,b
  2603  001BF6  2BAD               	incf	(main@i+1)& (0+255),f,b
  2604                           
  2605                           ; BSR set to: 0
  2606  001BF8  BFAD               	btfsc	(main@i+1)& (0+255),7,b
  2607  001BFA  D7EE               	goto	l4365
  2608  001BFC  0E04               	movlw	4
  2609  001BFE  5DAD               	subwf	(main@i+1)& (0+255),w,b
  2610  001C00  E3EB               	bnc	l4365
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 94: LoadAllFromEeprom();
  2614  001C02  ECFC  F018         	call	_LoadAllFromEeprom	;wreg free
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;main.c: 96: Lcd_Init();
  2618  001C06  EC5E  F015         	call	_Lcd_Init	;wreg free
  2619                           
  2620                           ;main.c: 97: Lcd_Command(14);
  2621  001C0A  0E0E               	movlw	14
  2622  001C0C  ECED  F012         	call	_Lcd_Command
  2623                           
  2624                           ;main.c: 100: if (GPS_SYNC_AT_START == 1)
  2625  001C10  0100               	movlb	0	; () banked
  2626  001C12  05E4               	decf	_GPS_SYNC_AT_START& (0+255),w,b
  2627  001C14  E101               	bnz	l1005
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;main.c: 101: FLAGS_0.bits.b0 = SET;
  2631  001C16  81E0               	bsf	_FLAGS_0& (0+255),0,b
  2632  001C18                     l1005:
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 102: LATCbits.LC0 = OFF;
  2636  001C18  9085               	bcf	3973,0,c	;volatile
  2637  001C1A                     l1006:
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 105: {
  2641                           ;main.c: 107: if (FLAGS_0.bits.b0) SwitchOnGPS();
  2642  001C1A  B1E0               	btfsc	_FLAGS_0& (0+255),0,b
  2643                           
  2644                           ; BSR set to: 0
  2645  001C1C  ECAA  F018         	call	_SwitchOnGPS	;wreg free
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 108: if (FLAGS_0.bits.b1) VerifyForGPSOnTIme();
  2649  001C20  B3E0               	btfsc	_FLAGS_0& (0+255),1,b
  2650                           
  2651                           ; BSR set to: 0
  2652  001C22  EC4A  F017         	call	_VerifyForGPSOnTIme	;wreg free
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 109: if (FLAGS_0.bits.b2) ReadGPS();
  2656  001C26  B5E0               	btfsc	_FLAGS_0& (0+255),2,b
  2657                           
  2658                           ; BSR set to: 0
  2659  001C28  ECEA  F015         	call	_ReadGPS	;wreg free
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 110: if (FLAGS_0.bits.b3) StopGPS();
  2663  001C2C  B7E0               	btfsc	_FLAGS_0& (0+255),3,b
  2664                           
  2665                           ; BSR set to: 0
  2666  001C2E  EC14  F019         	call	_StopGPS	;wreg free
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 111: TestGPSStartCondition();
  2670  001C32  ECEC  F017         	call	_TestGPSStartCondition	;wreg free
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;main.c: 112: NEXT_EVENT = GetEventNumber();
  2674  001C36  EC21  F010         	call	_GetEventNumber	;wreg free
  2675  001C3A  6E5C               	movwf	_NEXT_EVENT,c
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;main.c: 114: WriteLongInt(1, 1, DATE_TIME.SECOND, 6, 1);
  2679  001C3C  0E01               	movlw	1
  2680  001C3E  6F72               	movwf	WriteLongInt@x& (0+255),b
  2681  001C40  C0B9  F073         	movff	_DATE_TIME,WriteLongInt@Val
  2682  001C44  C0BA  F074         	movff	_DATE_TIME+1,WriteLongInt@Val+1
  2683  001C48  C0BB  F075         	movff	_DATE_TIME+2,WriteLongInt@Val+2
  2684  001C4C  C0BC  F076         	movff	_DATE_TIME+3,WriteLongInt@Val+3
  2685  001C50  0E06               	movlw	6
  2686  001C52  6F77               	movwf	WriteLongInt@size& (0+255),b
  2687  001C54  0E01               	movlw	1
  2688  001C56  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2689  001C58  ECA0  F014         	call	_WriteLongInt
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;main.c: 115: WriteLongInt(1, 8, PRESENT_STATE, 3, 1);
  2693  001C5C  0E08               	movlw	8
  2694  001C5E  6F72               	movwf	WriteLongInt@x& (0+255),b
  2695  001C60  51E3               	movf	_PRESENT_STATE& (0+255),w,b
  2696  001C62  D839               	call	PL14	;call to abstracted procedure
  2697  001C64  ECA0  F014         	call	_WriteLongInt
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;main.c: 116: WriteLongInt(1, 12, NEXT_STATE, 3, 1);
  2701  001C68  0E0C               	movlw	12
  2702  001C6A  6F72               	movwf	WriteLongInt@x& (0+255),b
  2703  001C6C  51E2               	movf	_NEXT_STATE& (0+255),w,b
  2704  001C6E  D833               	call	PL14	;call to abstracted procedure
  2705  001C70  ECA0  F014         	call	_WriteLongInt
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 117: WriteLongInt(2, 1, STATES[PRESENT_STATE].PERIOD, 3, 1);
  2709  001C74  0E01               	movlw	1
  2710  001C76  6F72               	movwf	WriteLongInt@x& (0+255),b
  2711  001C78  EC7A  F00A         	call	PL32	;call to abstracted procedure
  2712  001C7C  D820               	call	PL12	;call to abstracted procedure
  2713  001C7E  ECA0  F014         	call	_WriteLongInt
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;main.c: 118: WriteLongInt(2, 5, STATES[PRESENT_STATE].ON[0], 3, 1);
  2717  001C82  0E05               	movlw	5
  2718  001C84  6F72               	movwf	WriteLongInt@x& (0+255),b
  2719  001C86  51E3               	movf	_PRESENT_STATE& (0+255),w,b
  2720  001C88  0D06               	mullw	6
  2721  001C8A  0EF1               	movlw	low (_STATES+1)
  2722  001C8C  24F3               	addwf	prodl,w,c
  2723  001C8E  6ED9               	movwf	fsr2l,c
  2724  001C90  0E06               	movlw	high (_STATES+1)
  2725  001C92  D815               	call	PL12	;call to abstracted procedure
  2726  001C94  ECA0  F014         	call	_WriteLongInt
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;main.c: 119: WriteLongInt(2, 9, STATES[PRESENT_STATE].BLINK[0], 3, 1);
  2730  001C98  0E09               	movlw	9
  2731  001C9A  6F72               	movwf	WriteLongInt@x& (0+255),b
  2732  001C9C  51E3               	movf	_PRESENT_STATE& (0+255),w,b
  2733  001C9E  0D06               	mullw	6
  2734  001CA0  0EF3               	movlw	low (_STATES+3)
  2735  001CA2  24F3               	addwf	prodl,w,c
  2736  001CA4  6ED9               	movwf	fsr2l,c
  2737  001CA6  0E06               	movlw	high (_STATES+3)
  2738  001CA8  D80A               	call	PL12	;call to abstracted procedure
  2739  001CAA  ECA0  F014         	call	_WriteLongInt
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 120: WriteLongInt(2, 13, STATES[PRESENT_STATE].AUDIO, 3, 1);
  2743  001CAE  0E0D               	movlw	13
  2744  001CB0  6F72               	movwf	WriteLongInt@x& (0+255),b
  2745  001CB2  EC56  F00A         	call	PL24	;call to abstracted procedure
  2746  001CB6  D803               	call	PL12	;call to abstracted procedure
  2747  001CB8  ECA0  F014         	call	_WriteLongInt
  2748  001CBC  D7AE               	goto	l1006
  2749  001CBE                     __end_of_main:
  2750                           	opt stack 0
  2751  001CBE                     PL12:
  2752                           	opt stack 15
  2753  001CBE  20F4               	addwfc	prodh,w,c
  2754  001CC0  6EDA               	movwf	fsr2h,c
  2755  001CC2  50DF               	movf	indf2,w,c
  2756  001CC4  6F73               	movwf	WriteLongInt@Val& (0+255),b
  2757  001CC6  6B74               	clrf	(WriteLongInt@Val+1)& (0+255),b
  2758  001CC8  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  2759  001CCA  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  2760  001CCC  0E03               	movlw	3
  2761  001CCE  6F77               	movwf	WriteLongInt@size& (0+255),b
  2762  001CD0  0E01               	movlw	1
  2763  001CD2  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2764  001CD4  0C02               	retlw	2
  2765  001CD6                     __end_ofPL12:
  2766                           	opt stack 0
  2767  001CD6                     PL14:
  2768                           	opt stack 15
  2769  001CD6  6F73               	movwf	WriteLongInt@Val& (0+255),b
  2770  001CD8  6B74               	clrf	(WriteLongInt@Val+1)& (0+255),b
  2771  001CDA  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  2772  001CDC  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  2773  001CDE  0E03               	movlw	3
  2774  001CE0  6F77               	movwf	WriteLongInt@size& (0+255),b
  2775  001CE2  0E01               	movlw	1
  2776  001CE4  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2777  001CE6  0C01               	retlw	1
  2778  001CE8                     __end_ofPL14:
  2779                           	opt stack 0
  2780                           tosu	equ	0xFFF
  2781                           tosh	equ	0xFFE
  2782                           tosl	equ	0xFFD
  2783                           pclath	equ	0xFFA
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           intcon	equ	0xFF2
  2791                           postinc0	equ	0xFEE
  2792                           plusw0	equ	0xFEB
  2793                           wreg	equ	0xFE8
  2794                           indf1	equ	0xFE7
  2795                           postinc1	equ	0xFE6
  2796                           postdec1	equ	0xFE5
  2797                           plusw1	equ	0xFE3
  2798                           fsr1h	equ	0xFE2
  2799                           fsr1l	equ	0xFE1
  2800                           indf2	equ	0xFDF
  2801                           postinc2	equ	0xFDE
  2802                           postdec2	equ	0xFDD
  2803                           plusw2	equ	0xFDB
  2804                           fsr2h	equ	0xFDA
  2805                           fsr2l	equ	0xFD9
  2806                           status	equ	0xFD8
  2807                           
  2808 ;; *************** function _WriteLongInt *****************
  2809 ;; Defined at:
  2810 ;;		line 183 in file "libs/HD44780.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;  y               1    wreg     unsigned char 
  2813 ;;  x               1   18[BANK0 ] unsigned char 
  2814 ;;  Val             4   19[BANK0 ] long 
  2815 ;;  size            1   23[BANK0 ] char 
  2816 ;;  Sign            1   24[BANK0 ] unsigned char 
  2817 ;; Auto vars:     Size  Location     Type
  2818 ;;  y               1   26[BANK0 ] unsigned char 
  2819 ;;  POS             1   25[BANK0 ] char 
  2820 ;; Return value:  Size  Location     Type
  2821 ;;                  1    wreg      void 
  2822 ;; Registers used:
  2823 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2824 ;; Tracked objects:
  2825 ;;		On entry : 3F/0
  2826 ;;		On exit  : 3F/0
  2827 ;;		Unchanged: 0/0
  2828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2829 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2830 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2832 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2833 ;;Total ram usage:        9 bytes
  2834 ;; Hardware stack levels used:    1
  2835 ;; Hardware stack levels required when called:   12
  2836 ;; This function calls:
  2837 ;;		_Lcd_WriteChar
  2838 ;;		___aldiv
  2839 ;;		___lmul
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845                           	psect	text1
  2846  002940                     __ptext1:
  2847                           	opt stack 0
  2848  002940                     _WriteLongInt:
  2849                           	opt stack 18
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;incstack = 0
  2853                           ;WriteLongInt@y stored from wreg
  2854  002940  6F7A               	movwf	WriteLongInt@y& (0+255),b
  2855                           
  2856                           ;HD44780.c: 184: int8_t POS = 0;
  2857  002942  0100               	movlb	0	; () banked
  2858  002944  6B79               	clrf	WriteLongInt@POS& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;HD44780.c: 185: if (Sign) {
  2862  002946  5178               	movf	WriteLongInt@Sign& (0+255),w,b
  2863  002948  E049               	bz	l4237
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;HD44780.c: 186: POS++;
  2867  00294A  2B79               	incf	WriteLongInt@POS& (0+255),f,b
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;HD44780.c: 187: if (Val<0) {
  2871  00294C  AF76               	btfss	(WriteLongInt@Val+3)& (0+255),7,b
  2872  00294E  D01F               	goto	l4229
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  2876  002950  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  2877  002954  0E2D               	movlw	45
  2878  002956  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  2879  002958  517A               	movf	WriteLongInt@y& (0+255),w,b
  2880  00295A  EC6E  F017         	call	_Lcd_WriteChar
  2881                           
  2882                           ;HD44780.c: 189: Val=-1*Val;
  2883  00295E  C073  F060         	movff	WriteLongInt@Val,___lmul@multiplier
  2884  002962  C074  F061         	movff	WriteLongInt@Val+1,___lmul@multiplier+1
  2885  002966  C075  F062         	movff	WriteLongInt@Val+2,___lmul@multiplier+2
  2886  00296A  C076  F063         	movff	WriteLongInt@Val+3,___lmul@multiplier+3
  2887  00296E  0100               	movlb	0	; () banked
  2888  002970  6964               	setf	___lmul@multiplicand& (0+255),b
  2889  002972  6965               	setf	(___lmul@multiplicand+1)& (0+255),b
  2890  002974  6966               	setf	(___lmul@multiplicand+2)& (0+255),b
  2891  002976  6967               	setf	(___lmul@multiplicand+3)& (0+255),b
  2892  002978  ECB4  F016         	call	___lmul	;wreg free
  2893  00297C  C060  F073         	movff	?___lmul,WriteLongInt@Val
  2894  002980  C061  F074         	movff	?___lmul+1,WriteLongInt@Val+1
  2895  002984  C062  F075         	movff	?___lmul+2,WriteLongInt@Val+2
  2896  002988  C063  F076         	movff	?___lmul+3,WriteLongInt@Val+3
  2897                           
  2898                           ;HD44780.c: 190: } else
  2899  00298C  D027               	goto	l4237
  2900  00298E                     l4229:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  2904  00298E  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  2905  002992  0E2B               	movlw	43
  2906  002994  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  2907  002996  517A               	movf	WriteLongInt@y& (0+255),w,b
  2908  002998  EC6E  F017         	call	_Lcd_WriteChar
  2909  00299C  D01F               	goto	l4237
  2910  00299E                     l4231:
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;HD44780.c: 194: size--;
  2914  00299E  0777               	decf	WriteLongInt@size& (0+255),f,b
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  2918  0029A0  5177               	movf	WriteLongInt@size& (0+255),w,b
  2919  0029A2  2579               	addwf	WriteLongInt@POS& (0+255),w,b
  2920  0029A4  2572               	addwf	WriteLongInt@x& (0+255),w,b
  2921  0029A6  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  2922  0029A8  D81D               	call	PL78	;call to abstracted procedure
  2923  0029AA  D825               	call	PL126	;call to abstracted procedure
  2924  0029AC  EC00  F015         	call	___aldiv	;wreg free
  2925  0029B0  5160               	movf	?___aldiv& (0+255),w,b
  2926  0029B2  0DF6               	mullw	246
  2927  0029B4  50F3               	movf	prodl,w,c
  2928  0029B6  2573               	addwf	WriteLongInt@Val& (0+255),w,b
  2929  0029B8  0F30               	addlw	48
  2930  0029BA  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  2931  0029BC  517A               	movf	WriteLongInt@y& (0+255),w,b
  2932  0029BE  EC6E  F017         	call	_Lcd_WriteChar
  2933                           
  2934                           ;HD44780.c: 196: Val = Val/10;
  2935  0029C2  D810               	call	PL78	;call to abstracted procedure
  2936  0029C4  0100               	movlb	0	; () banked
  2937  0029C6  D817               	call	PL126	;call to abstracted procedure
  2938  0029C8  EC00  F015         	call	___aldiv	;wreg free
  2939  0029CC  C060  F073         	movff	?___aldiv,WriteLongInt@Val
  2940  0029D0  C061  F074         	movff	?___aldiv+1,WriteLongInt@Val+1
  2941  0029D4  C062  F075         	movff	?___aldiv+2,WriteLongInt@Val+2
  2942  0029D8  C063  F076         	movff	?___aldiv+3,WriteLongInt@Val+3
  2943  0029DC                     l4237:
  2944  0029DC  0100               	movlb	0	; () banked
  2945  0029DE  5177               	movf	WriteLongInt@size& (0+255),w,b
  2946  0029E0  E1DE               	bnz	l4231
  2947                           
  2948                           ; BSR set to: 0
  2949  0029E2  0012               	return		;funcret
  2950  0029E4                     __end_of_WriteLongInt:
  2951                           	opt stack 0
  2952  0029E4                     PL78:
  2953                           	opt stack 18
  2954  0029E4  C073  F060         	movff	WriteLongInt@Val,___aldiv@dividend
  2955  0029E8  C074  F061         	movff	WriteLongInt@Val+1,___aldiv@dividend+1
  2956  0029EC  C075  F062         	movff	WriteLongInt@Val+2,___aldiv@dividend+2
  2957  0029F0  C076  F063         	movff	WriteLongInt@Val+3,___aldiv@dividend+3
  2958  0029F4  0C0A               	retlw	10
  2959  0029F6                     __end_ofPL78:
  2960                           	opt stack 0
  2961  0029F6                     PL126:
  2962                           	opt stack 18
  2963  0029F6  6F64               	movwf	___aldiv@divisor& (0+255),b
  2964  0029F8  6B65               	clrf	(___aldiv@divisor+1)& (0+255),b
  2965  0029FA  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  2966  0029FC  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  2967  0029FE  0012               	return	
  2968  002A00                     __end_ofPL126:
  2969                           	opt stack 0
  2970                           tosu	equ	0xFFF
  2971                           tosh	equ	0xFFE
  2972                           tosl	equ	0xFFD
  2973                           pclath	equ	0xFFA
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           intcon	equ	0xFF2
  2981                           postinc0	equ	0xFEE
  2982                           plusw0	equ	0xFEB
  2983                           wreg	equ	0xFE8
  2984                           indf1	equ	0xFE7
  2985                           postinc1	equ	0xFE6
  2986                           postdec1	equ	0xFE5
  2987                           plusw1	equ	0xFE3
  2988                           fsr1h	equ	0xFE2
  2989                           fsr1l	equ	0xFE1
  2990                           indf2	equ	0xFDF
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           plusw2	equ	0xFDB
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function ___aldiv *****************
  2999 ;; Defined at:
  3000 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  dividend        4    0[BANK0 ] long 
  3003 ;;  divisor         4    4[BANK0 ] long 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  quotient        4   10[BANK0 ] long 
  3006 ;;  sign            1    9[BANK0 ] unsigned char 
  3007 ;;  counter         1    8[BANK0 ] unsigned char 
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  4    0[BANK0 ] long 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2, status,0
  3012 ;; Tracked objects:
  3013 ;;		On entry : 3F/0
  3014 ;;		On exit  : 3F/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3017 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3018 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3020 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3021 ;;Total ram usage:       14 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    9
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_WriteLongInt
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           	psect	text2
  3032  002A00                     __ptext2:
  3033                           	opt stack 0
  3034  002A00                     ___aldiv:
  3035                           	opt stack 20
  3036                           
  3037                           ; BSR set to: 0
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;incstack = 0
  3041  002A00  6B69               	clrf	___aldiv@sign& (0+255),b
  3042                           
  3043                           ; BSR set to: 0
  3044  002A02  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3045  002A04  D00A               	goto	l4123
  3046                           
  3047                           ; BSR set to: 0
  3048  002A06  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3049  002A08  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3050  002A0A  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3051  002A0C  6D64               	negf	___aldiv@divisor& (0+255),b
  3052  002A0E  0E00               	movlw	0
  3053  002A10  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3054  002A12  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3055  002A14  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3056                           
  3057                           ; BSR set to: 0
  3058  002A16  0E01               	movlw	1
  3059  002A18  6F69               	movwf	___aldiv@sign& (0+255),b
  3060  002A1A                     l4123:
  3061                           
  3062                           ; BSR set to: 0
  3063  002A1A  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3064  002A1C  D00A               	goto	l4129
  3065                           
  3066                           ; BSR set to: 0
  3067  002A1E  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3068  002A20  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3069  002A22  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3070  002A24  6D60               	negf	___aldiv@dividend& (0+255),b
  3071  002A26  0E00               	movlw	0
  3072  002A28  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3073  002A2A  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3074  002A2C  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3075                           
  3076                           ; BSR set to: 0
  3077  002A2E  0E01               	movlw	1
  3078  002A30  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  3079  002A32                     l4129:
  3080                           
  3081                           ; BSR set to: 0
  3082  002A32  6B6A               	clrf	___aldiv@quotient& (0+255),b
  3083  002A34  6B6B               	clrf	(___aldiv@quotient+1)& (0+255),b
  3084  002A36  6B6C               	clrf	(___aldiv@quotient+2)& (0+255),b
  3085  002A38  6B6D               	clrf	(___aldiv@quotient+3)& (0+255),b
  3086                           
  3087                           ; BSR set to: 0
  3088  002A3A  5164               	movf	___aldiv@divisor& (0+255),w,b
  3089  002A3C  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3090  002A3E  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3091  002A40  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3092  002A42  E029               	bz	l4151
  3093                           
  3094                           ; BSR set to: 0
  3095  002A44  0E01               	movlw	1
  3096  002A46  6F68               	movwf	___aldiv@counter& (0+255),b
  3097  002A48  D006               	goto	l4137
  3098  002A4A                     l4135:
  3099                           
  3100                           ; BSR set to: 0
  3101  002A4A  90D8               	bcf	status,0,c
  3102  002A4C  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  3103  002A4E  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3104  002A50  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3105  002A52  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3106  002A54  2B68               	incf	___aldiv@counter& (0+255),f,b
  3107  002A56                     l4137:
  3108                           
  3109                           ; BSR set to: 0
  3110  002A56  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3111  002A58  D7F8               	goto	l4135
  3112  002A5A                     l4139:
  3113                           
  3114                           ; BSR set to: 0
  3115  002A5A  90D8               	bcf	status,0,c
  3116  002A5C  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  3117  002A5E  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3118  002A60  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3119  002A62  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3120                           
  3121                           ; BSR set to: 0
  3122  002A64  5164               	movf	___aldiv@divisor& (0+255),w,b
  3123  002A66  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  3124  002A68  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3125  002A6A  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3126  002A6C  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3127  002A6E  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3128  002A70  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3129  002A72  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3130  002A74  E309               	bnc	l4147
  3131                           
  3132                           ; BSR set to: 0
  3133  002A76  5164               	movf	___aldiv@divisor& (0+255),w,b
  3134  002A78  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  3135  002A7A  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3136  002A7C  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3137  002A7E  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3138  002A80  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3139  002A82  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3140  002A84  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3141                           
  3142                           ; BSR set to: 0
  3143  002A86  816A               	bsf	___aldiv@quotient& (0+255),0,b
  3144  002A88                     l4147:
  3145                           
  3146                           ; BSR set to: 0
  3147  002A88  90D8               	bcf	status,0,c
  3148  002A8A  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3149  002A8C  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3150  002A8E  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3151  002A90  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  3152                           
  3153                           ; BSR set to: 0
  3154  002A92  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  3155  002A94  D7E2               	goto	l4139
  3156  002A96                     l4151:
  3157                           
  3158                           ; BSR set to: 0
  3159  002A96  5169               	movf	___aldiv@sign& (0+255),w,b
  3160  002A98  E008               	bz	l4155
  3161                           
  3162                           ; BSR set to: 0
  3163  002A9A  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3164  002A9C  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3165  002A9E  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3166  002AA0  6D6A               	negf	___aldiv@quotient& (0+255),b
  3167  002AA2  0E00               	movlw	0
  3168  002AA4  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3169  002AA6  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3170  002AA8  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3171  002AAA                     l4155:
  3172                           
  3173                           ; BSR set to: 0
  3174  002AAA  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  3175  002AAE  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  3176  002AB2  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  3177  002AB6  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  3178                           
  3179                           ; BSR set to: 0
  3180  002ABA  0012               	return		;funcret
  3181  002ABC                     __end_of___aldiv:
  3182                           	opt stack 0
  3183                           tosu	equ	0xFFF
  3184                           tosh	equ	0xFFE
  3185                           tosl	equ	0xFFD
  3186                           pclath	equ	0xFFA
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           prodh	equ	0xFF4
  3192                           prodl	equ	0xFF3
  3193                           intcon	equ	0xFF2
  3194                           postinc0	equ	0xFEE
  3195                           plusw0	equ	0xFEB
  3196                           wreg	equ	0xFE8
  3197                           indf1	equ	0xFE7
  3198                           postinc1	equ	0xFE6
  3199                           postdec1	equ	0xFE5
  3200                           plusw1	equ	0xFE3
  3201                           fsr1h	equ	0xFE2
  3202                           fsr1l	equ	0xFE1
  3203                           indf2	equ	0xFDF
  3204                           postinc2	equ	0xFDE
  3205                           postdec2	equ	0xFDD
  3206                           plusw2	equ	0xFDB
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function _Lcd_WriteChar *****************
  3212 ;; Defined at:
  3213 ;;		line 99 in file "libs/HD44780.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  y               1    wreg     unsigned char 
  3216 ;;  x               1   14[BANK0 ] unsigned char 
  3217 ;;  c               1   15[BANK0 ] unsigned char 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  y               1   16[BANK0 ] unsigned char 
  3220 ;;  data            1   17[BANK0 ] unsigned char 
  3221 ;; Return value:  Size  Location     Type
  3222 ;;                  1    wreg      void 
  3223 ;; Registers used:
  3224 ;;		wreg, status,2, status,0, cstack
  3225 ;; Tracked objects:
  3226 ;;		On entry : 3F/0
  3227 ;;		On exit  : 0/0
  3228 ;;		Unchanged: 0/0
  3229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3230 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3233 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3234 ;;Total ram usage:        4 bytes
  3235 ;; Hardware stack levels used:    1
  3236 ;; Hardware stack levels required when called:   11
  3237 ;; This function calls:
  3238 ;;		_Lcd_CharCP
  3239 ;;		_Lcd_Command
  3240 ;; This function is called by:
  3241 ;;		_WriteLongInt
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           	psect	text3
  3246  002EDC                     __ptext3:
  3247                           	opt stack 0
  3248  002EDC                     _Lcd_WriteChar:
  3249                           	opt stack 18
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;incstack = 0
  3253                           ;Lcd_WriteChar@y stored from wreg
  3254  002EDC  6F70               	movwf	Lcd_WriteChar@y& (0+255),b
  3255                           
  3256                           ;HD44780.c: 100: unsigned char data;
  3257                           ;HD44780.c: 101: switch(y) {
  3258  002EDE  D00D               	goto	l3783
  3259  002EE0                     l3773:
  3260                           
  3261                           ; BSR set to: 0
  3262  002EE0  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3263  002EE2  0F7F               	addlw	127
  3264  002EE4  D008               	goto	L3
  3265  002EE6                     l3775:
  3266                           
  3267                           ; BSR set to: 0
  3268  002EE6  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3269  002EE8  0FBF               	addlw	191
  3270  002EEA  D005               	goto	L3
  3271  002EEC                     l3777:
  3272                           
  3273                           ; BSR set to: 0
  3274  002EEC  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3275  002EEE  0F93               	addlw	147
  3276  002EF0  D002               	goto	L3
  3277  002EF2                     l3779:
  3278                           
  3279                           ; BSR set to: 0
  3280  002EF2  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3281  002EF4  0FD3               	addlw	211
  3282  002EF6                     L3:
  3283  002EF6  6F71               	movwf	Lcd_WriteChar@data& (0+255),b
  3284  002EF8  D00A               	goto	l3785
  3285  002EFA                     l3783:
  3286  002EFA  0100               	movlb	0	; () banked
  3287  002EFC  5170               	movf	Lcd_WriteChar@y& (0+255),w,b
  3288                           
  3289                           ; Switch size 1, requested type "space"
  3290                           ; Number of cases is 4, Range of values is 1 to 4
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte           13     7 (average)
  3294                           ;	Chosen strategy is simple_byte
  3295  002EFE  0A01               	xorlw	1	; case 1
  3296  002F00  E0EF               	bz	l3773
  3297  002F02  0A03               	xorlw	3	; case 2
  3298  002F04  E0F0               	bz	l3775
  3299  002F06  0A01               	xorlw	1	; case 3
  3300  002F08  E0F1               	bz	l3777
  3301  002F0A  0A07               	xorlw	7	; case 4
  3302  002F0C  E0F2               	bz	l3779
  3303  002F0E                     l3785:
  3304                           
  3305                           ; BSR set to: 0
  3306                           ;HD44780.c: 108: Lcd_Command(data);
  3307  002F0E  5171               	movf	Lcd_WriteChar@data& (0+255),w,b
  3308  002F10  ECED  F012         	call	_Lcd_Command
  3309                           
  3310                           ;HD44780.c: 109: Lcd_CharCP(c);
  3311  002F14  0100               	movlb	0	; () banked
  3312  002F16  516F               	movf	Lcd_WriteChar@c& (0+255),w,b
  3313  002F18  EF7B  F012         	goto	_Lcd_CharCP
  3314  002F1C                     __end_of_Lcd_WriteChar:
  3315                           	opt stack 0
  3316                           tosu	equ	0xFFF
  3317                           tosh	equ	0xFFE
  3318                           tosl	equ	0xFFD
  3319                           pclath	equ	0xFFA
  3320                           tblptru	equ	0xFF8
  3321                           tblptrh	equ	0xFF7
  3322                           tblptrl	equ	0xFF6
  3323                           tablat	equ	0xFF5
  3324                           prodh	equ	0xFF4
  3325                           prodl	equ	0xFF3
  3326                           intcon	equ	0xFF2
  3327                           postinc0	equ	0xFEE
  3328                           plusw0	equ	0xFEB
  3329                           wreg	equ	0xFE8
  3330                           indf1	equ	0xFE7
  3331                           postinc1	equ	0xFE6
  3332                           postdec1	equ	0xFE5
  3333                           plusw1	equ	0xFE3
  3334                           fsr1h	equ	0xFE2
  3335                           fsr1l	equ	0xFE1
  3336                           indf2	equ	0xFDF
  3337                           postinc2	equ	0xFDE
  3338                           postdec2	equ	0xFDD
  3339                           plusw2	equ	0xFDB
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function _Lcd_CharCP *****************
  3345 ;; Defined at:
  3346 ;;		line 116 in file "libs/HD44780.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  c               1    wreg     unsigned char 
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  c               1    2[BANK0 ] unsigned char 
  3351 ;; Return value:  Size  Location     Type
  3352 ;;                  1    wreg      void 
  3353 ;; Registers used:
  3354 ;;		wreg, status,2, status,0, cstack
  3355 ;; Tracked objects:
  3356 ;;		On entry : 3F/0
  3357 ;;		On exit  : 0/0
  3358 ;;		Unchanged: 0/0
  3359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3361 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3362 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3363 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3364 ;;Total ram usage:        3 bytes
  3365 ;; Hardware stack levels used:    1
  3366 ;; Hardware stack levels required when called:   10
  3367 ;; This function calls:
  3368 ;;		_Lcd_Delay5us
  3369 ;; This function is called by:
  3370 ;;		_Lcd_WriteChar
  3371 ;; This function uses a non-reentrant model
  3372 ;;
  3373                           
  3374                           	psect	text4
  3375  0024F6                     __ptext4:
  3376                           	opt stack 0
  3377  0024F6                     _Lcd_CharCP:
  3378                           	opt stack 18
  3379                           
  3380                           ;incstack = 0
  3381                           ;Lcd_CharCP@c stored from wreg
  3382  0024F6  6F62               	movwf	Lcd_CharCP@c& (0+255),b
  3383                           
  3384                           ;HD44780.c: 117: LATAbits.LA1 = 0; LATAbits.LA0 = 1;
  3385  0024F8  9283               	bcf	3971,1,c	;volatile
  3386  0024FA  8083               	bsf	3971,0,c	;volatile
  3387                           
  3388                           ;HD44780.c: 118: LATAbits.LA5 = (c & 0b10000000)>>7; LATAbits.LA4 = (c & 0b01000000)>>6;
  3389  0024FC  0100               	movlb	0	; () banked
  3390  0024FE  6B60               	clrf	??_Lcd_CharCP& (0+255),b
  3391  002500  AF62               	btfss	Lcd_CharCP@c& (0+255),7,b
  3392  002502  D001               	bra	u2855
  3393  002504  2B60               	incf	??_Lcd_CharCP& (0+255),f,b
  3394  002506                     u2855:
  3395  002506  D837               	call	PL44	;call to abstracted procedure
  3396  002508  0E06               	movlw	6
  3397  00250A  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  3398  00250C                     u2865:
  3399  00250C  90D8               	bcf	status,0,c
  3400  00250E  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3401  002510  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  3402  002512  D7FC               	goto	u2865
  3403  002514  D84D               	call	PL62	;call to abstracted procedure
  3404                           
  3405                           ;HD44780.c: 119: LATAbits.LA3 = (c & 0b00100000)>>5; LATAbits.LA2 = (c & 0b00010000)>>4;
  3406  002516  D847               	call	PL60	;call to abstracted procedure
  3407  002518  0E05               	movlw	5
  3408  00251A  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  3409  00251C                     u2875:
  3410  00251C  90D8               	bcf	status,0,c
  3411  00251E  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3412  002520  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  3413  002522  D7FC               	goto	u2875
  3414  002524  0E01               	movlw	1
  3415  002526  D833               	call	PL46	;call to abstracted procedure
  3416  002528  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3417  00252A  0E0F               	movlw	15
  3418  00252C  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3419  00252E  0E01               	movlw	1
  3420  002530  D846               	call	PL86	;call to abstracted procedure
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;HD44780.c: 120: _delay(10);
  3424  002532  0E03               	movlw	3
  3425  002534                     u4157:
  3426  002534  2EE8               	decfsz	wreg,f,c
  3427  002536  D7FE               	bra	u4157
  3428  002538  F000               	nop	
  3429                           
  3430                           ;HD44780.c: 121: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  3431  00253A  8283               	bsf	3971,1,c	;volatile
  3432  00253C  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  3433  002540  9283               	bcf	3971,1,c	;volatile
  3434                           
  3435                           ;HD44780.c: 122: LATAbits.LA5 = (c & 0b00001000)>>3; LATAbits.LA4 = (c & 0b00000100)>>2;
  3436  002542  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3437  002546  0100               	movlb	0	; () banked
  3438  002548  90D8               	bcf	status,0,c
  3439  00254A  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3440  00254C  D841               	call	PL96	;call to abstracted procedure
  3441                           
  3442                           ; BSR set to: 0
  3443  00254E  D813               	call	PL44	;call to abstracted procedure
  3444  002550  D83F               	call	PL96	;call to abstracted procedure
  3445  002552  D82E               	call	PL62	;call to abstracted procedure
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;HD44780.c: 123: LATAbits.LA3 = (c & 0b00000010)>>1; LATAbits.LA2 = (c & 0b00000001);
  3449  002554  D828               	call	PL60	;call to abstracted procedure
  3450  002556  90D8               	bcf	status,0,c
  3451  002558  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3452  00255A  0E01               	movlw	1
  3453                           
  3454                           ; BSR set to: 0
  3455  00255C  D818               	call	PL46	;call to abstracted procedure
  3456  00255E  0E01               	movlw	1
  3457  002560  D82E               	call	PL86	;call to abstracted procedure
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;HD44780.c: 124: _delay(10);
  3461  002562  0E03               	movlw	3
  3462  002564                     u4167:
  3463  002564  2EE8               	decfsz	wreg,f,c
  3464  002566  D7FE               	bra	u4167
  3465  002568  F000               	nop	
  3466                           
  3467                           ;HD44780.c: 125: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  3468  00256A  8283               	bsf	3971,1,c	;volatile
  3469  00256C  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  3470  002570  9283               	bcf	3971,1,c	;volatile
  3471                           
  3472                           ;HD44780.c: 126: Lcd_Delay5us();
  3473  002572  EF10  F019         	goto	_Lcd_Delay5us	;wreg free
  3474  002576                     __end_of_Lcd_CharCP:
  3475                           	opt stack 0
  3476  002576                     PL44:
  3477                           	opt stack 18
  3478  002576  0E01               	movlw	1
  3479  002578  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3480  00257A  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3481  00257C  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3482  00257E  5083               	movf	3971,w,c	;volatile
  3483  002580  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3484  002582  0BDF               	andlw	-33
  3485  002584  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3486  002586  6E83               	movwf	3971,c	;volatile
  3487  002588  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3488  00258C  0012               	return	
  3489  00258E                     __end_ofPL44:
  3490                           	opt stack 0
  3491  00258E                     PL46:
  3492                           	opt stack 18
  3493  00258E  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3494  002590  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3495  002592  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3496  002594  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3497  002596  5083               	movf	3971,w,c	;volatile
  3498  002598  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3499  00259A  0BF7               	andlw	-9
  3500  00259C  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3501  00259E  6E83               	movwf	3971,c	;volatile
  3502  0025A0  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3503  0025A4  0012               	return	
  3504  0025A6                     __end_ofPL46:
  3505                           	opt stack 0
  3506  0025A6                     PL60:
  3507                           	opt stack 18
  3508  0025A6  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3509  0025A8  6E83               	movwf	3971,c	;volatile
  3510  0025AA  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3511  0025AE  0012               	return	
  3512  0025B0                     __end_ofPL60:
  3513                           	opt stack 0
  3514  0025B0                     PL62:
  3515                           	opt stack 18
  3516  0025B0  0E01               	movlw	1
  3517  0025B2  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3518  0025B4  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3519  0025B6  5083               	movf	3971,w,c	;volatile
  3520  0025B8  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3521  0025BA  0BEF               	andlw	-17
  3522  0025BC  0012               	return	
  3523  0025BE                     __end_ofPL62:
  3524                           	opt stack 0
  3525  0025BE                     PL86:
  3526                           	opt stack 18
  3527  0025BE  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3528  0025C0  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3529  0025C2  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3530  0025C4  5083               	movf	3971,w,c	;volatile
  3531  0025C6  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3532  0025C8  0BFB               	andlw	-5
  3533  0025CA  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3534  0025CC  6E83               	movwf	3971,c	;volatile
  3535  0025CE  0012               	return	
  3536  0025D0                     __end_ofPL86:
  3537                           	opt stack 0
  3538  0025D0                     PL96:
  3539                           	opt stack 18
  3540  0025D0  90D8               	bcf	status,0,c
  3541  0025D2  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3542  0025D4  90D8               	bcf	status,0,c
  3543  0025D6  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3544  0025D8  0012               	return	
  3545  0025DA                     __end_ofPL96:
  3546                           	opt stack 0
  3547                           tosu	equ	0xFFF
  3548                           tosh	equ	0xFFE
  3549                           tosl	equ	0xFFD
  3550                           pclath	equ	0xFFA
  3551                           tblptru	equ	0xFF8
  3552                           tblptrh	equ	0xFF7
  3553                           tblptrl	equ	0xFF6
  3554                           tablat	equ	0xFF5
  3555                           prodh	equ	0xFF4
  3556                           prodl	equ	0xFF3
  3557                           intcon	equ	0xFF2
  3558                           postinc0	equ	0xFEE
  3559                           plusw0	equ	0xFEB
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postinc1	equ	0xFE6
  3563                           postdec1	equ	0xFE5
  3564                           plusw1	equ	0xFE3
  3565                           fsr1h	equ	0xFE2
  3566                           fsr1l	equ	0xFE1
  3567                           indf2	equ	0xFDF
  3568                           postinc2	equ	0xFDE
  3569                           postdec2	equ	0xFDD
  3570                           plusw2	equ	0xFDB
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _WriteEeprom *****************
  3576 ;; Defined at:
  3577 ;;		line 15 in file "libs/eeprom.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  Add             2    0[BANK0 ] unsigned short 
  3580 ;;  Data            1    2[BANK0 ] unsigned char 
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  Address         2    3[BANK0 ] struct _WORD_VAL
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      void 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2
  3587 ;; Tracked objects:
  3588 ;;		On entry : 3F/0
  3589 ;;		On exit  : 3F/0
  3590 ;;		Unchanged: 3F/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3592 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3595 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3596 ;;Total ram usage:        5 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    9
  3599 ;; This function calls:
  3600 ;;		Nothing
  3601 ;; This function is called by:
  3602 ;;		_main
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text5
  3607  00307E                     __ptext5:
  3608                           	opt stack 0
  3609  00307E                     _WriteEeprom:
  3610                           	opt stack 21
  3611                           
  3612                           ; BSR set to: 0
  3613                           ;eeprom.c: 16: WORD_VAL Address;
  3614                           ;eeprom.c: 17: Address.Val = Add;
  3615                           
  3616                           ;incstack = 0
  3617  00307E  C060  F063         	movff	WriteEeprom@Add,WriteEeprom@Address
  3618  003082  C061  F064         	movff	WriteEeprom@Add+1,WriteEeprom@Address+1
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;eeprom.c: 18: NVMCON1bits.NVMREG = 00;
  3622  003086  0E3F               	movlw	-193
  3623  003088  1681               	andwf	3969,f,c	;volatile
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;eeprom.c: 19: NVMADRL = Address.v[0];
  3627  00308A  C063  FF7E         	movff	WriteEeprom@Address,3966	;volatile
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;eeprom.c: 20: NVMADRH = Address.v[1];
  3631  00308E  C064  FF7F         	movff	WriteEeprom@Address+1,3967	;volatile
  3632                           
  3633                           ; BSR set to: 0
  3634                           ;eeprom.c: 21: NVMDAT = Data;
  3635  003092  C062  FF80         	movff	WriteEeprom@Data,3968	;volatile
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;eeprom.c: 22: NVMCON1bits.WREN = 1;
  3639  003096  8481               	bsf	3969,2,c	;volatile
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;eeprom.c: 23: INTCONbits.GIE = 0;
  3643  003098  9EF2               	bcf	intcon,7,c	;volatile
  3644                           
  3645                           ;eeprom.c: 24: NVMCON2 = 0x55;
  3646  00309A  0E55               	movlw	85
  3647  00309C  6E82               	movwf	3970,c	;volatile
  3648                           
  3649                           ;eeprom.c: 25: NVMCON2 = 0xAA;
  3650  00309E  0EAA               	movlw	170
  3651  0030A0  6E82               	movwf	3970,c	;volatile
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;eeprom.c: 26: NVMCON1bits.WR = 1;
  3655  0030A2  8281               	bsf	3969,1,c	;volatile
  3656  0030A4                     l445:
  3657                           
  3658                           ; BSR set to: 0
  3659  0030A4  B281               	btfsc	3969,1,c	;volatile
  3660  0030A6  D7FE               	goto	l445
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;eeprom.c: 28: INTCONbits.GIE = 1;
  3664  0030A8  8EF2               	bsf	intcon,7,c	;volatile
  3665                           
  3666                           ;eeprom.c: 29: NVMCON1bits.WREN = 0;
  3667  0030AA  9481               	bcf	3969,2,c	;volatile
  3668                           
  3669                           ;eeprom.c: 30: NVMCON1bits.NVMREG1 = 1;
  3670  0030AC  8E81               	bsf	3969,7,c	;volatile
  3671                           
  3672                           ; BSR set to: 0
  3673  0030AE  0012               	return		;funcret
  3674  0030B0                     __end_of_WriteEeprom:
  3675                           	opt stack 0
  3676                           tosu	equ	0xFFF
  3677                           tosh	equ	0xFFE
  3678                           tosl	equ	0xFFD
  3679                           pclath	equ	0xFFA
  3680                           tblptru	equ	0xFF8
  3681                           tblptrh	equ	0xFF7
  3682                           tblptrl	equ	0xFF6
  3683                           tablat	equ	0xFF5
  3684                           prodh	equ	0xFF4
  3685                           prodl	equ	0xFF3
  3686                           intcon	equ	0xFF2
  3687                           postinc0	equ	0xFEE
  3688                           plusw0	equ	0xFEB
  3689                           wreg	equ	0xFE8
  3690                           indf1	equ	0xFE7
  3691                           postinc1	equ	0xFE6
  3692                           postdec1	equ	0xFE5
  3693                           plusw1	equ	0xFE3
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           indf2	equ	0xFDF
  3697                           postinc2	equ	0xFDE
  3698                           postdec2	equ	0xFDD
  3699                           plusw2	equ	0xFDB
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704 ;; *************** function _VerifyForGPSOnTIme *****************
  3705 ;; Defined at:
  3706 ;;		line 157 in file "libs/funcs.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;		None
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;  TimeDiff        4    0[BANK0 ] long 
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  1    wreg      void 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0
  3715 ;; Tracked objects:
  3716 ;;		On entry : 3F/0
  3717 ;;		On exit  : 3F/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3721 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3724 ;;Total ram usage:        4 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    9
  3727 ;; This function calls:
  3728 ;;		Nothing
  3729 ;; This function is called by:
  3730 ;;		_main
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           	psect	text6
  3735  002E94                     __ptext6:
  3736                           	opt stack 0
  3737  002E94                     _VerifyForGPSOnTIme:
  3738                           	opt stack 21
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;funcs.c: 158: INT32 TimeDiff = DATE_TIME.SECOND - TIME_WHEN_GPS_IS_SWITCHED_ON;
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;incstack = 0
  3745  002E94  51C8               	movf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),w,b
  3746  002E96  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  3747  002E98  6F60               	movwf	VerifyForGPSOnTIme@TimeDiff& (0+255),b
  3748  002E9A  51C9               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),w,b
  3749  002E9C  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  3750  002E9E  6F61               	movwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),b
  3751  002EA0  51CA               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),w,b
  3752  002EA2  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  3753  002EA4  6F62               	movwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),b
  3754  002EA6  51CB               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),w,b
  3755  002EA8  59BC               	subwfb	(_DATE_TIME+3)& (0+255),w,b
  3756  002EAA  6F63               	movwf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),b
  3757                           
  3758                           ;funcs.c: 159: if (TimeDiff<0)
  3759  002EAC  AF63               	btfss	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  3760  002EAE  D008               	goto	l665
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;funcs.c: 160: TimeDiff += 86400;
  3764  002EB0  0E80               	movlw	128
  3765  002EB2  2760               	addwf	VerifyForGPSOnTIme@TimeDiff& (0+255),f,b
  3766  002EB4  0E51               	movlw	81
  3767  002EB6  2361               	addwfc	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),f,b
  3768  002EB8  0E01               	movlw	1
  3769  002EBA  2362               	addwfc	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),f,b
  3770  002EBC  0E00               	movlw	0
  3771  002EBE  2363               	addwfc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),f,b
  3772  002EC0                     l665:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;funcs.c: 161: if (TimeDiff >= (20*60)) {
  3776  002EC0  BF63               	btfsc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  3777  002EC2  0012               	return	
  3778  002EC4  5163               	movf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),w,b
  3779  002EC6  1162               	iorwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),w,b
  3780  002EC8  E106               	bnz	u3930
  3781  002ECA  0EB0               	movlw	176
  3782  002ECC  5D60               	subwf	VerifyForGPSOnTIme@TimeDiff& (0+255),w,b
  3783  002ECE  0E04               	movlw	4
  3784  002ED0  5961               	subwfb	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),w,b
  3785  002ED2  A0D8               	btfss	status,0,c
  3786  002ED4  0012               	return	
  3787  002ED6                     u3930:
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;funcs.c: 162: FLAGS_0.bits.b2 = SET;
  3791  002ED6  85E0               	bsf	_FLAGS_0& (0+255),2,b
  3792                           
  3793                           ;funcs.c: 163: FLAGS_0.bits.b1 = RESET;
  3794  002ED8  93E0               	bcf	_FLAGS_0& (0+255),1,b
  3795                           
  3796                           ; BSR set to: 0
  3797  002EDA  0012               	return		;funcret
  3798  002EDC                     __end_of_VerifyForGPSOnTIme:
  3799                           	opt stack 0
  3800                           tosu	equ	0xFFF
  3801                           tosh	equ	0xFFE
  3802                           tosl	equ	0xFFD
  3803                           pclath	equ	0xFFA
  3804                           tblptru	equ	0xFF8
  3805                           tblptrh	equ	0xFF7
  3806                           tblptrl	equ	0xFF6
  3807                           tablat	equ	0xFF5
  3808                           prodh	equ	0xFF4
  3809                           prodl	equ	0xFF3
  3810                           intcon	equ	0xFF2
  3811                           postinc0	equ	0xFEE
  3812                           plusw0	equ	0xFEB
  3813                           wreg	equ	0xFE8
  3814                           indf1	equ	0xFE7
  3815                           postinc1	equ	0xFE6
  3816                           postdec1	equ	0xFE5
  3817                           plusw1	equ	0xFE3
  3818                           fsr1h	equ	0xFE2
  3819                           fsr1l	equ	0xFE1
  3820                           indf2	equ	0xFDF
  3821                           postinc2	equ	0xFDE
  3822                           postdec2	equ	0xFDD
  3823                           plusw2	equ	0xFDB
  3824                           fsr2h	equ	0xFDA
  3825                           fsr2l	equ	0xFD9
  3826                           status	equ	0xFD8
  3827                           
  3828 ;; *************** function _TestGPSStartCondition *****************
  3829 ;; Defined at:
  3830 ;;		line 191 in file "libs/funcs.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;		None
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      void 
  3837 ;; Registers used:
  3838 ;;		wreg, status,2, status,0
  3839 ;; Tracked objects:
  3840 ;;		On entry : 3F/0
  3841 ;;		On exit  : 3F/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3847 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3848 ;;Total ram usage:        1 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; Hardware stack levels required when called:    9
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_main
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text7
  3859  002FD8                     __ptext7:
  3860                           	opt stack 0
  3861  002FD8                     _TestGPSStartCondition:
  3862                           	opt stack 21
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;funcs.c: 192: if ((DATE_TIME.SECOND == GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME)
  3866                           ;funcs.c: 193: || (TIME_AT_LAST_GPS_SYNC >= GPS_SYNC_EVERY_x_SECONDS))
  3867                           
  3868                           ; BSR set to: 0
  3869                           ;incstack = 0
  3870  002FD8  51CC               	movf	_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME& (0+255),w,b
  3871  002FDA  19B9               	xorwf	_DATE_TIME& (0+255),w,b
  3872  002FDC  E109               	bnz	u3980
  3873  002FDE  51CD               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),w,b
  3874  002FE0  19BA               	xorwf	(_DATE_TIME+1)& (0+255),w,b
  3875  002FE2  E106               	bnz	u3980
  3876  002FE4  51CE               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),w,b
  3877  002FE6  19BB               	xorwf	(_DATE_TIME+2)& (0+255),w,b
  3878  002FE8  E103               	bnz	u3980
  3879  002FEA  51CF               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),w,b
  3880  002FEC  19BC               	xorwf	(_DATE_TIME+3)& (0+255),w,b
  3881  002FEE  E00E               	bz	l683
  3882  002FF0                     u3980:
  3883                           
  3884                           ; BSR set to: 0
  3885  002FF0  51D0               	movf	_GPS_SYNC_EVERY_x_SECONDS& (0+255),w,b
  3886  002FF2  5DC4               	subwf	_TIME_AT_LAST_GPS_SYNC& (0+255),w,b
  3887  002FF4  51D1               	movf	(_GPS_SYNC_EVERY_x_SECONDS+1)& (0+255),w,b
  3888  002FF6  59C5               	subwfb	(_TIME_AT_LAST_GPS_SYNC+1)& (0+255),w,b
  3889  002FF8  51D2               	movf	(_GPS_SYNC_EVERY_x_SECONDS+2)& (0+255),w,b
  3890  002FFA  59C6               	subwfb	(_TIME_AT_LAST_GPS_SYNC+2)& (0+255),w,b
  3891  002FFC  51C7               	movf	(_TIME_AT_LAST_GPS_SYNC+3)& (0+255),w,b
  3892  002FFE  0A80               	xorlw	128
  3893  003000  6F60               	movwf	??_TestGPSStartCondition& (0+255),b
  3894  003002  51D3               	movf	(_GPS_SYNC_EVERY_x_SECONDS+3)& (0+255),w,b
  3895  003004  0A80               	xorlw	128
  3896  003006  5960               	subwfb	??_TestGPSStartCondition& (0+255),w,b
  3897  003008  A0D8               	btfss	status,0,c
  3898  00300A  0012               	return	
  3899  00300C                     l683:
  3900                           
  3901                           ; BSR set to: 0
  3902                           ;funcs.c: 194: FLAGS_0.bits.b0 = SET;
  3903  00300C  81E0               	bsf	_FLAGS_0& (0+255),0,b
  3904                           
  3905                           ; BSR set to: 0
  3906  00300E  0012               	return		;funcret
  3907  003010                     __end_of_TestGPSStartCondition:
  3908                           	opt stack 0
  3909                           tosu	equ	0xFFF
  3910                           tosh	equ	0xFFE
  3911                           tosl	equ	0xFFD
  3912                           pclath	equ	0xFFA
  3913                           tblptru	equ	0xFF8
  3914                           tblptrh	equ	0xFF7
  3915                           tblptrl	equ	0xFF6
  3916                           tablat	equ	0xFF5
  3917                           prodh	equ	0xFF4
  3918                           prodl	equ	0xFF3
  3919                           intcon	equ	0xFF2
  3920                           postinc0	equ	0xFEE
  3921                           plusw0	equ	0xFEB
  3922                           wreg	equ	0xFE8
  3923                           indf1	equ	0xFE7
  3924                           postinc1	equ	0xFE6
  3925                           postdec1	equ	0xFE5
  3926                           plusw1	equ	0xFE3
  3927                           fsr1h	equ	0xFE2
  3928                           fsr1l	equ	0xFE1
  3929                           indf2	equ	0xFDF
  3930                           postinc2	equ	0xFDE
  3931                           postdec2	equ	0xFDD
  3932                           plusw2	equ	0xFDB
  3933                           fsr2h	equ	0xFDA
  3934                           fsr2l	equ	0xFD9
  3935                           status	equ	0xFD8
  3936                           
  3937 ;; *************** function _SwitchOnGPS *****************
  3938 ;; Defined at:
  3939 ;;		line 149 in file "libs/funcs.c"
  3940 ;; Parameters:    Size  Location     Type
  3941 ;;		None
  3942 ;; Auto vars:     Size  Location     Type
  3943 ;;		None
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		None
  3948 ;; Tracked objects:
  3949 ;;		On entry : 3F/0
  3950 ;;		On exit  : 3F/0
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3957 ;;Total ram usage:        0 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    9
  3960 ;; This function calls:
  3961 ;;		Nothing
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text8
  3968  003154                     __ptext8:
  3969                           	opt stack 0
  3970  003154                     _SwitchOnGPS:
  3971                           	opt stack 21
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;funcs.c: 150: LATCbits.LC1 = ON;
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;incstack = 0
  3978  003154  8285               	bsf	3973,1,c	;volatile
  3979                           
  3980                           ;funcs.c: 151: NO_OF_TIMES_GPS_FAILED = 0;
  3981  003156  6BE1               	clrf	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  3982                           
  3983                           ;funcs.c: 152: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND;
  3984  003158  C0B9  F0C8         	movff	_DATE_TIME,_TIME_WHEN_GPS_IS_SWITCHED_ON
  3985  00315C  C0BA  F0C9         	movff	_DATE_TIME+1,_TIME_WHEN_GPS_IS_SWITCHED_ON+1
  3986  003160  C0BB  F0CA         	movff	_DATE_TIME+2,_TIME_WHEN_GPS_IS_SWITCHED_ON+2
  3987  003164  C0BC  F0CB         	movff	_DATE_TIME+3,_TIME_WHEN_GPS_IS_SWITCHED_ON+3
  3988                           
  3989                           ;funcs.c: 153: FLAGS_0.bits.b1 = SET;
  3990  003168  83E0               	bsf	_FLAGS_0& (0+255),1,b
  3991                           
  3992                           ;funcs.c: 154: FLAGS_0.bits.b0 = RESET;
  3993  00316A  91E0               	bcf	_FLAGS_0& (0+255),0,b
  3994                           
  3995                           ; BSR set to: 0
  3996  00316C  0012               	return		;funcret
  3997  00316E                     __end_of_SwitchOnGPS:
  3998                           	opt stack 0
  3999                           tosu	equ	0xFFF
  4000                           tosh	equ	0xFFE
  4001                           tosl	equ	0xFFD
  4002                           pclath	equ	0xFFA
  4003                           tblptru	equ	0xFF8
  4004                           tblptrh	equ	0xFF7
  4005                           tblptrl	equ	0xFF6
  4006                           tablat	equ	0xFF5
  4007                           prodh	equ	0xFF4
  4008                           prodl	equ	0xFF3
  4009                           intcon	equ	0xFF2
  4010                           postinc0	equ	0xFEE
  4011                           plusw0	equ	0xFEB
  4012                           wreg	equ	0xFE8
  4013                           indf1	equ	0xFE7
  4014                           postinc1	equ	0xFE6
  4015                           postdec1	equ	0xFE5
  4016                           plusw1	equ	0xFE3
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           plusw2	equ	0xFDB
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _StopGPS *****************
  4028 ;; Defined at:
  4029 ;;		line 186 in file "libs/funcs.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  1    wreg      void 
  4036 ;; Registers used:
  4037 ;;		None
  4038 ;; Tracked objects:
  4039 ;;		On entry : 3F/0
  4040 ;;		On exit  : 3F/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    9
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_main
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text9
  4058  003228                     __ptext9:
  4059                           	opt stack 0
  4060  003228                     _StopGPS:
  4061                           	opt stack 21
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;funcs.c: 187: LATCbits.LC1 = OFF;
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;incstack = 0
  4068  003228  9285               	bcf	3973,1,c	;volatile
  4069                           
  4070                           ;funcs.c: 188: FLAGS_0.bits.b3 = RESET;
  4071  00322A  97E0               	bcf	_FLAGS_0& (0+255),3,b
  4072                           
  4073                           ; BSR set to: 0
  4074  00322C  0012               	return		;funcret
  4075  00322E                     __end_of_StopGPS:
  4076                           	opt stack 0
  4077                           tosu	equ	0xFFF
  4078                           tosh	equ	0xFFE
  4079                           tosl	equ	0xFFD
  4080                           pclath	equ	0xFFA
  4081                           tblptru	equ	0xFF8
  4082                           tblptrh	equ	0xFF7
  4083                           tblptrl	equ	0xFF6
  4084                           tablat	equ	0xFF5
  4085                           prodh	equ	0xFF4
  4086                           prodl	equ	0xFF3
  4087                           intcon	equ	0xFF2
  4088                           postinc0	equ	0xFEE
  4089                           plusw0	equ	0xFEB
  4090                           wreg	equ	0xFE8
  4091                           indf1	equ	0xFE7
  4092                           postinc1	equ	0xFE6
  4093                           postdec1	equ	0xFE5
  4094                           plusw1	equ	0xFE3
  4095                           fsr1h	equ	0xFE2
  4096                           fsr1l	equ	0xFE1
  4097                           indf2	equ	0xFDF
  4098                           postinc2	equ	0xFDE
  4099                           postdec2	equ	0xFDD
  4100                           plusw2	equ	0xFDB
  4101                           fsr2h	equ	0xFDA
  4102                           fsr2l	equ	0xFD9
  4103                           status	equ	0xFD8
  4104                           
  4105 ;; *************** function _SYSTEM_Initialize *****************
  4106 ;; Defined at:
  4107 ;;		line 107 in file "mcc_generated_files/mcc.c"
  4108 ;; Parameters:    Size  Location     Type
  4109 ;;		None
  4110 ;; Auto vars:     Size  Location     Type
  4111 ;;		None
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 3F/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4125 ;;Total ram usage:        0 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:   11
  4128 ;; This function calls:
  4129 ;;		_EUSART1_Initialize
  4130 ;;		_INTERRUPT_Initialize
  4131 ;;		_OSCILLATOR_Initialize
  4132 ;;		_PIN_MANAGER_Initialize
  4133 ;;		_TMR0_Initialize
  4134 ;; This function is called by:
  4135 ;;		_main
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text10
  4140  003184                     __ptext10:
  4141                           	opt stack 0
  4142  003184                     _SYSTEM_Initialize:
  4143                           	opt stack 19
  4144                           
  4145                           ;mcc.c: 110: INTERRUPT_Initialize();
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;incstack = 0
  4149  003184  EC19  F019         	call	_INTERRUPT_Initialize	;wreg free
  4150                           
  4151                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  4152  003188  EC53  F016         	call	_PIN_MANAGER_Initialize	;wreg free
  4153                           
  4154                           ;mcc.c: 112: OSCILLATOR_Initialize();
  4155  00318C  ECB7  F018         	call	_OSCILLATOR_Initialize	;wreg free
  4156                           
  4157                           ; BSR set to: 14
  4158                           ;mcc.c: 113: TMR0_Initialize();
  4159  003190  EC8E  F017         	call	_TMR0_Initialize	;wreg free
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;mcc.c: 114: EUSART1_Initialize();
  4163  003194  EFCC  F018         	goto	_EUSART1_Initialize	;wreg free
  4164  003198                     __end_of_SYSTEM_Initialize:
  4165                           	opt stack 0
  4166                           tosu	equ	0xFFF
  4167                           tosh	equ	0xFFE
  4168                           tosl	equ	0xFFD
  4169                           pclath	equ	0xFFA
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           postinc0	equ	0xFEE
  4178                           plusw0	equ	0xFEB
  4179                           wreg	equ	0xFE8
  4180                           indf1	equ	0xFE7
  4181                           postinc1	equ	0xFE6
  4182                           postdec1	equ	0xFE5
  4183                           plusw1	equ	0xFE3
  4184                           fsr1h	equ	0xFE2
  4185                           fsr1l	equ	0xFE1
  4186                           indf2	equ	0xFDF
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           plusw2	equ	0xFDB
  4190                           fsr2h	equ	0xFDA
  4191                           fsr2l	equ	0xFD9
  4192                           status	equ	0xFD8
  4193                           
  4194 ;; *************** function _TMR0_Initialize *****************
  4195 ;; Defined at:
  4196 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;		None
  4201 ;; Return value:  Size  Location     Type
  4202 ;;                  1    wreg      void 
  4203 ;; Registers used:
  4204 ;;		wreg, status,2, status,0, cstack
  4205 ;; Tracked objects:
  4206 ;;		On entry : 3F/E
  4207 ;;		On exit  : 3F/0
  4208 ;;		Unchanged: 0/0
  4209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4214 ;;Total ram usage:        2 bytes
  4215 ;; Hardware stack levels used:    1
  4216 ;; Hardware stack levels required when called:   10
  4217 ;; This function calls:
  4218 ;;		_TMR0_SetInterruptHandler
  4219 ;;		_TMR0_StartTimer
  4220 ;; This function is called by:
  4221 ;;		_SYSTEM_Initialize
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text11
  4226  002F1C                     __ptext11:
  4227                           	opt stack 0
  4228  002F1C                     _TMR0_Initialize:
  4229                           	opt stack 19
  4230                           
  4231                           ; BSR set to: 14
  4232                           ;tmr0.c: 70: T0CON0 = 0x10;
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;incstack = 0
  4236  002F1C  0E10               	movlw	16
  4237  002F1E  6ED5               	movwf	4053,c	;volatile
  4238                           
  4239                           ;tmr0.c: 73: T0CON1 = 0x50;
  4240  002F20  0E50               	movlw	80
  4241  002F22  6ED6               	movwf	4054,c	;volatile
  4242                           
  4243                           ;tmr0.c: 76: TMR0H = 0xD8;
  4244  002F24  0ED8               	movlw	216
  4245  002F26  6ED4               	movwf	4052,c	;volatile
  4246                           
  4247                           ;tmr0.c: 79: TMR0L = 0xF0;
  4248  002F28  0EF0               	movlw	240
  4249  002F2A  6ED3               	movwf	4051,c	;volatile
  4250                           
  4251                           ; BSR set to: 14
  4252                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  4253  002F2C  50D3               	movf	4051,w,c	;volatile
  4254  002F2E  CFD4 F062          	movff	4052,??_TMR0_Initialize	;volatile
  4255  002F32  0100               	movlb	0	; () banked
  4256  002F34  6B63               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4257  002F36  C062  F063         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4258  002F3A  6B62               	clrf	??_TMR0_Initialize& (0+255),b
  4259  002F3C  1162               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4260  002F3E  6E4B               	movwf	_timer0ReloadVal16bit,c	;volatile
  4261  002F40  5163               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4262  002F42  6E4C               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
  4266  002F44  010E               	movlb	14	; () banked
  4267  002F46  9BCA               	bcf	202,5,b	;volatile
  4268                           
  4269                           ; BSR set to: 14
  4270                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
  4271  002F48  8BC2               	bsf	194,5,b	;volatile
  4272                           
  4273                           ; BSR set to: 14
  4274                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4275  002F4A  0E38               	movlw	low _TMR0_DefaultInterruptHandler
  4276  002F4C  0100               	movlb	0	; () banked
  4277  002F4E  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4278  002F50  0E32               	movlw	high _TMR0_DefaultInterruptHandler
  4279  002F52  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4280  002F54  EC0B  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  4281                           
  4282                           ; BSR set to: 0
  4283                           ;tmr0.c: 94: TMR0_StartTimer();
  4284  002F58  EF17  F019         	goto	_TMR0_StartTimer	;wreg free
  4285  002F5C                     __end_of_TMR0_Initialize:
  4286                           	opt stack 0
  4287                           tosu	equ	0xFFF
  4288                           tosh	equ	0xFFE
  4289                           tosl	equ	0xFFD
  4290                           pclath	equ	0xFFA
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           intcon	equ	0xFF2
  4298                           postinc0	equ	0xFEE
  4299                           plusw0	equ	0xFEB
  4300                           wreg	equ	0xFE8
  4301                           indf1	equ	0xFE7
  4302                           postinc1	equ	0xFE6
  4303                           postdec1	equ	0xFE5
  4304                           plusw1	equ	0xFE3
  4305                           fsr1h	equ	0xFE2
  4306                           fsr1l	equ	0xFE1
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           plusw2	equ	0xFDB
  4311                           fsr2h	equ	0xFDA
  4312                           fsr2l	equ	0xFD9
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _TMR0_StartTimer *****************
  4316 ;; Defined at:
  4317 ;;		line 97 in file "mcc_generated_files/tmr0.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;		None
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;		None
  4322 ;; Return value:  Size  Location     Type
  4323 ;;                  1    wreg      void 
  4324 ;; Registers used:
  4325 ;;		None
  4326 ;; Tracked objects:
  4327 ;;		On entry : 3F/0
  4328 ;;		On exit  : 3F/0
  4329 ;;		Unchanged: 3F/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4335 ;;Total ram usage:        0 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:    9
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_TMR0_Initialize
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text12
  4346  00322E                     __ptext12:
  4347                           	opt stack 0
  4348  00322E                     _TMR0_StartTimer:
  4349                           	opt stack 19
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
  4353                           
  4354                           ; BSR set to: 0
  4355                           ;incstack = 0
  4356  00322E  8ED5               	bsf	4053,7,c	;volatile
  4357                           
  4358                           ; BSR set to: 0
  4359  003230  0012               	return		;funcret
  4360  003232                     __end_of_TMR0_StartTimer:
  4361                           	opt stack 0
  4362                           tosu	equ	0xFFF
  4363                           tosh	equ	0xFFE
  4364                           tosl	equ	0xFFD
  4365                           pclath	equ	0xFFA
  4366                           tblptru	equ	0xFF8
  4367                           tblptrh	equ	0xFF7
  4368                           tblptrl	equ	0xFF6
  4369                           tablat	equ	0xFF5
  4370                           prodh	equ	0xFF4
  4371                           prodl	equ	0xFF3
  4372                           intcon	equ	0xFF2
  4373                           postinc0	equ	0xFEE
  4374                           plusw0	equ	0xFEB
  4375                           wreg	equ	0xFE8
  4376                           indf1	equ	0xFE7
  4377                           postinc1	equ	0xFE6
  4378                           postdec1	equ	0xFE5
  4379                           plusw1	equ	0xFE3
  4380                           fsr1h	equ	0xFE2
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           plusw2	equ	0xFDB
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _TMR0_SetInterruptHandler *****************
  4391 ;; Defined at:
  4392 ;;		line 161 in file "mcc_generated_files/tmr0.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4395 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  4396 ;; Auto vars:     Size  Location     Type
  4397 ;;		None
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  1    wreg      void 
  4400 ;; Registers used:
  4401 ;;		wreg, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 3F/0
  4404 ;;		On exit  : 3F/0
  4405 ;;		Unchanged: 3F/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4407 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4410 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4411 ;;Total ram usage:        2 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    9
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_TMR0_Initialize
  4418 ;;		_main
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           	psect	text13
  4423  003216                     __ptext13:
  4424                           	opt stack 0
  4425  003216                     _TMR0_SetInterruptHandler:
  4426                           	opt stack 21
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
  4430                           
  4431                           ; BSR set to: 0
  4432                           ;incstack = 0
  4433  003216  C060  F0DC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4434  00321A  C061  F0DD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4435                           
  4436                           ; BSR set to: 0
  4437  00321E  0012               	return		;funcret
  4438  003220                     __end_of_TMR0_SetInterruptHandler:
  4439                           	opt stack 0
  4440                           tosu	equ	0xFFF
  4441                           tosh	equ	0xFFE
  4442                           tosl	equ	0xFFD
  4443                           pclath	equ	0xFFA
  4444                           tblptru	equ	0xFF8
  4445                           tblptrh	equ	0xFF7
  4446                           tblptrl	equ	0xFF6
  4447                           tablat	equ	0xFF5
  4448                           prodh	equ	0xFF4
  4449                           prodl	equ	0xFF3
  4450                           intcon	equ	0xFF2
  4451                           postinc0	equ	0xFEE
  4452                           plusw0	equ	0xFEB
  4453                           wreg	equ	0xFE8
  4454                           indf1	equ	0xFE7
  4455                           postinc1	equ	0xFE6
  4456                           postdec1	equ	0xFE5
  4457                           plusw1	equ	0xFE3
  4458                           fsr1h	equ	0xFE2
  4459                           fsr1l	equ	0xFE1
  4460                           indf2	equ	0xFDF
  4461                           postinc2	equ	0xFDE
  4462                           postdec2	equ	0xFDD
  4463                           plusw2	equ	0xFDB
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function _PIN_MANAGER_Initialize *****************
  4469 ;; Defined at:
  4470 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;		None
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;  state           1    0[BANK0 ] unsigned char 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, status,2
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4487 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4488 ;;Total ram usage:        1 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    9
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_SYSTEM_Initialize
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498                           	psect	text14
  4499  002CA6                     __ptext14:
  4500                           	opt stack 0
  4501  002CA6                     _PIN_MANAGER_Initialize:
  4502                           	opt stack 20
  4503                           
  4504                           ;pin_manager.c: 57: LATA = 0x00;
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;incstack = 0
  4508  002CA6  6A83               	clrf	3971,c	;volatile
  4509                           
  4510                           ;pin_manager.c: 58: LATB = 0x00;
  4511  002CA8  6A84               	clrf	3972,c	;volatile
  4512                           
  4513                           ;pin_manager.c: 59: LATC = 0x00;
  4514  002CAA  6A85               	clrf	3973,c	;volatile
  4515                           
  4516                           ;pin_manager.c: 64: TRISA = 0xC0;
  4517  002CAC  0EC0               	movlw	192
  4518  002CAE  6E88               	movwf	3976,c	;volatile
  4519                           
  4520                           ;pin_manager.c: 65: TRISB = 0x00;
  4521  002CB0  6A89               	clrf	3977,c	;volatile
  4522                           
  4523                           ;pin_manager.c: 66: TRISC = 0x84;
  4524  002CB2  0E84               	movlw	132
  4525  002CB4  6E8A               	movwf	3978,c	;volatile
  4526                           
  4527                           ;pin_manager.c: 71: ANSELC = 0x44;
  4528  002CB6  0E44               	movlw	68
  4529  002CB8  010F               	movlb	15	; () banked
  4530  002CBA  6F21               	movwf	33,b	;volatile
  4531                           
  4532                           ; BSR set to: 15
  4533                           ;pin_manager.c: 72: ANSELB = 0x00;
  4534  002CBC  6B19               	clrf	25,b	;volatile
  4535                           
  4536                           ;pin_manager.c: 73: ANSELA = 0xC0;
  4537  002CBE  0EC0               	movlw	192
  4538  002CC0  6F11               	movwf	17,b	;volatile
  4539                           
  4540                           ; BSR set to: 15
  4541                           ;pin_manager.c: 78: WPUE = 0x00;
  4542  002CC2  6B2D               	clrf	45,b	;volatile
  4543                           
  4544                           ; BSR set to: 15
  4545                           ;pin_manager.c: 79: WPUB = 0x00;
  4546  002CC4  6B18               	clrf	24,b	;volatile
  4547                           
  4548                           ; BSR set to: 15
  4549                           ;pin_manager.c: 80: WPUA = 0x00;
  4550  002CC6  6B10               	clrf	16,b	;volatile
  4551                           
  4552                           ; BSR set to: 15
  4553                           ;pin_manager.c: 81: WPUC = 0x00;
  4554  002CC8  6B20               	clrf	32,b	;volatile
  4555                           
  4556                           ; BSR set to: 15
  4557                           ;pin_manager.c: 86: ODCONA = 0x00;
  4558  002CCA  6B0F               	clrf	15,b	;volatile
  4559                           
  4560                           ; BSR set to: 15
  4561                           ;pin_manager.c: 87: ODCONB = 0x00;
  4562  002CCC  6B17               	clrf	23,b	;volatile
  4563                           
  4564                           ; BSR set to: 15
  4565                           ;pin_manager.c: 88: ODCONC = 0x00;
  4566  002CCE  6B1F               	clrf	31,b	;volatile
  4567                           
  4568                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  4569  002CD0  0E00               	movlw	0
  4570  002CD2  BEF2               	btfsc	intcon,7,c	;volatile
  4571  002CD4  0E01               	movlw	1
  4572  002CD6  0100               	movlb	0	; () banked
  4573  002CD8  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;pin_manager.c: 96: GIE = 0;
  4577  002CDA  9EF2               	bcf	intcon,7,c	;volatile
  4578                           
  4579                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  4580  002CDC  0E55               	movlw	85
  4581  002CDE  010E               	movlb	14	; () banked
  4582  002CE0  6FA0               	movwf	160,b	;volatile
  4583                           
  4584                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  4585  002CE2  0EAA               	movlw	170
  4586  002CE4  6FA0               	movwf	160,b	;volatile
  4587                           
  4588                           ; BSR set to: 14
  4589                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  4590  002CE6  91A0               	bcf	160,0,b	;volatile
  4591                           
  4592                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  4593  002CE8  51B5               	movf	181,w,b	;volatile
  4594  002CEA  0BE0               	andlw	-32
  4595  002CEC  0917               	iorlw	23
  4596  002CEE  6FB5               	movwf	181,b	;volatile
  4597                           
  4598                           ;pin_manager.c: 102: RC6PPS = 0x09;
  4599  002CF0  0E09               	movlw	9
  4600  002CF2  6FFD               	movwf	253,b	;volatile
  4601                           
  4602                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  4603  002CF4  0E55               	movlw	85
  4604  002CF6  6FA0               	movwf	160,b	;volatile
  4605                           
  4606                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  4607  002CF8  0EAA               	movlw	170
  4608  002CFA  6FA0               	movwf	160,b	;volatile
  4609                           
  4610                           ; BSR set to: 14
  4611                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  4612  002CFC  81A0               	bsf	160,0,b	;volatile
  4613                           
  4614                           ; BSR set to: 14
  4615                           ;pin_manager.c: 108: GIE = state;
  4616  002CFE  0100               	movlb	0	; () banked
  4617  002D00  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  4618  002D02  D002               	goto	u3760
  4619  002D04  8EF2               	bsf	intcon,7,c	;volatile
  4620  002D06  0CAA               	retlw	170
  4621  002D08                     u3760:
  4622  002D08  9EF2               	bcf	intcon,7,c	;volatile
  4623  002D0A  0012               	return		;funcret
  4624  002D0C                     __end_of_PIN_MANAGER_Initialize:
  4625                           	opt stack 0
  4626                           tosu	equ	0xFFF
  4627                           tosh	equ	0xFFE
  4628                           tosl	equ	0xFFD
  4629                           pclath	equ	0xFFA
  4630                           tblptru	equ	0xFF8
  4631                           tblptrh	equ	0xFF7
  4632                           tblptrl	equ	0xFF6
  4633                           tablat	equ	0xFF5
  4634                           prodh	equ	0xFF4
  4635                           prodl	equ	0xFF3
  4636                           intcon	equ	0xFF2
  4637                           postinc0	equ	0xFEE
  4638                           plusw0	equ	0xFEB
  4639                           wreg	equ	0xFE8
  4640                           indf1	equ	0xFE7
  4641                           postinc1	equ	0xFE6
  4642                           postdec1	equ	0xFE5
  4643                           plusw1	equ	0xFE3
  4644                           fsr1h	equ	0xFE2
  4645                           fsr1l	equ	0xFE1
  4646                           indf2	equ	0xFDF
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           plusw2	equ	0xFDB
  4650                           fsr2h	equ	0xFDA
  4651                           fsr2l	equ	0xFD9
  4652                           status	equ	0xFD8
  4653                           
  4654 ;; *************** function _OSCILLATOR_Initialize *****************
  4655 ;; Defined at:
  4656 ;;		line 117 in file "mcc_generated_files/mcc.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;		None
  4661 ;; Return value:  Size  Location     Type
  4662 ;;                  1    wreg      void 
  4663 ;; Registers used:
  4664 ;;		wreg, status,2
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 3F/E
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4674 ;;Total ram usage:        0 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; Hardware stack levels required when called:    9
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_SYSTEM_Initialize
  4681 ;; This function uses a non-reentrant model
  4682 ;;
  4683                           
  4684                           	psect	text15
  4685  00316E                     __ptext15:
  4686                           	opt stack 0
  4687  00316E                     _OSCILLATOR_Initialize:
  4688                           	opt stack 20
  4689                           
  4690                           ;mcc.c: 120: OSCCON1 = 0x22;
  4691                           
  4692                           ;incstack = 0
  4693  00316E  0E22               	movlw	34
  4694  003170  010E               	movlb	14	; () banked
  4695  003172  6FD8               	movwf	216,b	;volatile
  4696                           
  4697                           ; BSR set to: 14
  4698                           ;mcc.c: 122: OSCCON3 = 0x00;
  4699  003174  6BDA               	clrf	218,b	;volatile
  4700                           
  4701                           ; BSR set to: 14
  4702                           ;mcc.c: 124: OSCEN = 0x00;
  4703  003176  6BDC               	clrf	220,b	;volatile
  4704                           
  4705                           ;mcc.c: 126: OSCFRQ = 0x02;
  4706  003178  0E02               	movlw	2
  4707  00317A  6FDE               	movwf	222,b	;volatile
  4708                           
  4709                           ; BSR set to: 14
  4710                           ;mcc.c: 128: OSCTUNE = 0x00;
  4711  00317C  6BDD               	clrf	221,b	;volatile
  4712  00317E                     l824:
  4713                           
  4714                           ; BSR set to: 14
  4715  00317E  B1DB               	btfsc	219,0,b	;volatile
  4716                           
  4717                           ; BSR set to: 14
  4718  003180  0012               	return		;funcret
  4719  003182  D7FD               	goto	l824
  4720  003184                     __end_of_OSCILLATOR_Initialize:
  4721                           	opt stack 0
  4722                           tosu	equ	0xFFF
  4723                           tosh	equ	0xFFE
  4724                           tosl	equ	0xFFD
  4725                           pclath	equ	0xFFA
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           intcon	equ	0xFF2
  4733                           postinc0	equ	0xFEE
  4734                           plusw0	equ	0xFEB
  4735                           wreg	equ	0xFE8
  4736                           indf1	equ	0xFE7
  4737                           postinc1	equ	0xFE6
  4738                           postdec1	equ	0xFE5
  4739                           plusw1	equ	0xFE3
  4740                           fsr1h	equ	0xFE2
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           plusw2	equ	0xFDB
  4746                           fsr2h	equ	0xFDA
  4747                           fsr2l	equ	0xFD9
  4748                           status	equ	0xFD8
  4749                           
  4750 ;; *************** function _INTERRUPT_Initialize *****************
  4751 ;; Defined at:
  4752 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;		None
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;		None
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  1    wreg      void 
  4759 ;; Registers used:
  4760 ;;		None
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4770 ;;Total ram usage:        0 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    9
  4773 ;; This function calls:
  4774 ;;		Nothing
  4775 ;; This function is called by:
  4776 ;;		_SYSTEM_Initialize
  4777 ;; This function uses a non-reentrant model
  4778 ;;
  4779                           
  4780                           	psect	text16
  4781  003232                     __ptext16:
  4782                           	opt stack 0
  4783  003232                     _INTERRUPT_Initialize:
  4784                           	opt stack 20
  4785                           
  4786                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  4787                           
  4788                           ; BSR set to: 14
  4789                           ;incstack = 0
  4790  003232  9AF2               	bcf	intcon,5,c	;volatile
  4791  003234  0012               	return		;funcret
  4792  003236                     __end_of_INTERRUPT_Initialize:
  4793                           	opt stack 0
  4794                           tosu	equ	0xFFF
  4795                           tosh	equ	0xFFE
  4796                           tosl	equ	0xFFD
  4797                           pclath	equ	0xFFA
  4798                           tblptru	equ	0xFF8
  4799                           tblptrh	equ	0xFF7
  4800                           tblptrl	equ	0xFF6
  4801                           tablat	equ	0xFF5
  4802                           prodh	equ	0xFF4
  4803                           prodl	equ	0xFF3
  4804                           intcon	equ	0xFF2
  4805                           postinc0	equ	0xFEE
  4806                           plusw0	equ	0xFEB
  4807                           wreg	equ	0xFE8
  4808                           indf1	equ	0xFE7
  4809                           postinc1	equ	0xFE6
  4810                           postdec1	equ	0xFE5
  4811                           plusw1	equ	0xFE3
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           plusw2	equ	0xFDB
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _ReadGPS *****************
  4823 ;; Defined at:
  4824 ;;		line 167 in file "libs/funcs.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;		None
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;		None
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4833 ;; Tracked objects:
  4834 ;;		On entry : 3F/0
  4835 ;;		On exit  : 3F/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4842 ;;Total ram usage:        0 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:   15
  4845 ;; This function calls:
  4846 ;;		_ReadGPS_DATE_TIME
  4847 ;; This function is called by:
  4848 ;;		_main
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           	psect	text17
  4853  002BD4                     __ptext17:
  4854                           	opt stack 0
  4855  002BD4                     _ReadGPS:
  4856                           	opt stack 15
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;funcs.c: 168: if (ReadGPS_DATE_TIME()) {
  4860                           
  4861                           ;incstack = 0
  4862  002BD4  EC90  F00B         	call	_ReadGPS_DATE_TIME	;wreg free
  4863  002BD8  0900               	iorlw	0
  4864  002BDA  E013               	bz	l4279
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;funcs.c: 169: DATE_TIME = GPS_DATE_TIME;
  4868  002BDC  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4869  002BE0  EE10  F0B9         	lfsr	1,_DATE_TIME
  4870  002BE4  0E0A               	movlw	10
  4871  002BE6                     u3951:
  4872  002BE6  CFDB FFE3          	movff	plusw2,plusw1
  4873  002BEA  06E8               	decf	wreg,f,c
  4874  002BEC  E2FC               	bc	u3951
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;funcs.c: 170: TIME_AT_LAST_GPS_SYNC = DATE_TIME.SECOND;
  4878  002BEE  C0B9  F0C4         	movff	_DATE_TIME,_TIME_AT_LAST_GPS_SYNC
  4879  002BF2  C0BA  F0C5         	movff	_DATE_TIME+1,_TIME_AT_LAST_GPS_SYNC+1
  4880  002BF6  C0BB  F0C6         	movff	_DATE_TIME+2,_TIME_AT_LAST_GPS_SYNC+2
  4881  002BFA  C0BC  F0C7         	movff	_DATE_TIME+3,_TIME_AT_LAST_GPS_SYNC+3
  4882  002BFE                     l4277:
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;funcs.c: 171: FLAGS_0.bits.b3 = SET;
  4886  002BFE  87E0               	bsf	_FLAGS_0& (0+255),3,b
  4887                           
  4888                           ;funcs.c: 172: } else {
  4889  002C00  D01C               	goto	l4291
  4890  002C02                     l4279:
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;funcs.c: 173: NO_OF_TIMES_GPS_FAILED++;
  4894  002C02  2BE1               	incf	_NO_OF_TIMES_GPS_FAILED& (0+255),f,b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;funcs.c: 174: if (NO_OF_TIMES_GPS_FAILED>4) {
  4898  002C04  0E04               	movlw	4
  4899  002C06  65E1               	cpfsgt	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  4900  002C08  D001               	goto	l4285
  4901  002C0A  D7F9               	goto	l4277
  4902  002C0C                     l4285:
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;funcs.c: 177: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND - (2*60);
  4906  002C0C  0E88               	movlw	136
  4907  002C0E  25B9               	addwf	_DATE_TIME& (0+255),w,b
  4908  002C10  6FC8               	movwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),b
  4909  002C12  0EFF               	movlw	255
  4910  002C14  21BA               	addwfc	(_DATE_TIME+1)& (0+255),w,b
  4911  002C16  6FC9               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),b
  4912  002C18  0EFF               	movlw	255
  4913  002C1A  21BB               	addwfc	(_DATE_TIME+2)& (0+255),w,b
  4914  002C1C  6FCA               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),b
  4915  002C1E  0EFF               	movlw	255
  4916  002C20  21BC               	addwfc	(_DATE_TIME+3)& (0+255),w,b
  4917  002C22  6FCB               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),b
  4918                           
  4919                           ;funcs.c: 178: if (TIME_WHEN_GPS_IS_SWITCHED_ON<0)
  4920  002C24  AFCB               	btfss	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),7,b
  4921  002C26  D008               	goto	l4289
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;funcs.c: 179: TIME_WHEN_GPS_IS_SWITCHED_ON += 86400;
  4925  002C28  0E80               	movlw	128
  4926  002C2A  27C8               	addwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),f,b
  4927  002C2C  0E51               	movlw	81
  4928  002C2E  23C9               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),f,b
  4929  002C30  0E01               	movlw	1
  4930  002C32  23CA               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),f,b
  4931  002C34  0E00               	movlw	0
  4932  002C36  23CB               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),f,b
  4933  002C38                     l4289:
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;funcs.c: 180: FLAGS_0.bits.b1 = SET;
  4937  002C38  83E0               	bsf	_FLAGS_0& (0+255),1,b
  4938  002C3A                     l4291:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;funcs.c: 181: }
  4942                           ;funcs.c: 182: }
  4943                           ;funcs.c: 183: FLAGS_0.bits.b2 = RESET;
  4944  002C3A  95E0               	bcf	_FLAGS_0& (0+255),2,b
  4945                           
  4946                           ; BSR set to: 0
  4947  002C3C  0012               	return		;funcret
  4948  002C3E                     __end_of_ReadGPS:
  4949                           	opt stack 0
  4950                           tosu	equ	0xFFF
  4951                           tosh	equ	0xFFE
  4952                           tosl	equ	0xFFD
  4953                           pclath	equ	0xFFA
  4954                           tblptru	equ	0xFF8
  4955                           tblptrh	equ	0xFF7
  4956                           tblptrl	equ	0xFF6
  4957                           tablat	equ	0xFF5
  4958                           prodh	equ	0xFF4
  4959                           prodl	equ	0xFF3
  4960                           intcon	equ	0xFF2
  4961                           postinc0	equ	0xFEE
  4962                           plusw0	equ	0xFEB
  4963                           wreg	equ	0xFE8
  4964                           indf1	equ	0xFE7
  4965                           postinc1	equ	0xFE6
  4966                           postdec1	equ	0xFE5
  4967                           plusw1	equ	0xFE3
  4968                           fsr1h	equ	0xFE2
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           plusw2	equ	0xFDB
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _ReadGPS_DATE_TIME *****************
  4979 ;; Defined at:
  4980 ;;		line 115 in file "libs/funcs.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;  Date            7   69[BANK0 ] unsigned char [7]
  4985 ;;  Time            7   62[BANK0 ] unsigned char [7]
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      enum E11037
  4988 ;; Registers used:
  4989 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4990 ;; Tracked objects:
  4991 ;;		On entry : 3F/0
  4992 ;;		On exit  : 3F/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4996 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4997 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4998 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4999 ;;Total ram usage:       18 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:   14
  5002 ;; This function calls:
  5003 ;;		_AdjustDayLightSaving
  5004 ;;		_DecreaseByADay
  5005 ;;		_EUSART1_Initialize
  5006 ;;		_GetDay
  5007 ;;		_IncreaseByADay
  5008 ;;		_ReadGPSDateTime
  5009 ;;		_TimeTextToSecond
  5010 ;;		_ValidateDateTime
  5011 ;; This function is called by:
  5012 ;;		_ReadGPS
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text18
  5017  001720                     __ptext18:
  5018                           	opt stack 0
  5019  001720                     _ReadGPS_DATE_TIME:
  5020                           	opt stack 15
  5021                           
  5022                           ; BSR set to: 0
  5023                           ;funcs.c: 116: char Date[] = "------";
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  001720  EE20  F0EC         	lfsr	2,ReadGPS_DATE_TIME@F11470
  5028  001724  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  5029  001728  0E06               	movlw	6
  5030  00172A                     u3641:
  5031  00172A  CFDB FFE3          	movff	plusw2,plusw1
  5032  00172E  06E8               	decf	wreg,f,c
  5033  001730  E2FC               	bc	u3641
  5034                           
  5035                           ;funcs.c: 117: char Time[] = "------";
  5036  001732  EE20  F0E5         	lfsr	2,ReadGPS_DATE_TIME@F11472
  5037  001736  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  5038  00173A  0E06               	movlw	6
  5039  00173C                     u3651:
  5040  00173C  CFDB FFE3          	movff	plusw2,plusw1
  5041  001740  06E8               	decf	wreg,f,c
  5042  001742  E2FC               	bc	u3651
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;funcs.c: 118: EUSART1_Initialize();
  5046  001744  ECCC  F018         	call	_EUSART1_Initialize	;wreg free
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;funcs.c: 119: ReadGPSDateTime(Date, Time);
  5050  001748  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5051  00174A  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  5052  00174C  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5053  00174E  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  5054  001750  ECD0  F013         	call	_ReadGPSDateTime	;wreg free
  5055                           
  5056                           ; BSR set to: 0
  5057                           ;funcs.c: 120: if (ValidateDateTime(Date, Time)) {
  5058  001754  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5059  001756  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  5060  001758  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5061  00175A  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  5062  00175C  EC92  F011         	call	_ValidateDateTime	;wreg free
  5063  001760  0900               	iorlw	0
  5064  001762  E101 D0AD          	bz	l4055
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;funcs.c: 121: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5068  001766  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  5069  001768  0D0A               	mullw	10
  5070  00176A  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  5071  00176C  D8AA               	call	PL92	;call to abstracted procedure
  5072  00176E  6FB2               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  5073  001770  0EFD               	movlw	253
  5074  001772  20F4               	addwfc	prodh,w,c
  5075  001774  6FB3               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  5076                           
  5077                           ;funcs.c: 122: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5078  001776  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  5079  001778  0D0A               	mullw	10
  5080  00177A  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  5081  00177C  D8A2               	call	PL92	;call to abstracted procedure
  5082  00177E  6FB4               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  5083  001780  0EFD               	movlw	253
  5084  001782  20F4               	addwfc	prodh,w,c
  5085  001784  6FB5               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;funcs.c: 123: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  5089  001786  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5090  001788  6F6E               	movwf	GetDay@Date& (0+255),b
  5091  00178A  EC99  F00F         	call	_GetDay	;wreg free
  5092  00178E  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  5093  001790  0E40               	movlw	64
  5094  001792  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  5095  001794  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  5096  001796  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5097  001798  D003               	goto	u3674
  5098  00179A                     u3675:
  5099  00179A  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  5100  00179C  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  5101  00179E  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5102  0017A0                     u3674:
  5103  0017A0  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  5104  0017A2  D7FB               	goto	u3675
  5105  0017A4  0100               	movlb	0	; () banked
  5106  0017A6  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5107  0017A8  51B6               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  5108  0017AA  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5109  0017AC  0B01               	andlw	-255
  5110  0017AE  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5111  0017B0  6FB6               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;funcs.c: 124: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  5115  0017B2  51F7               	movf	_CENTURY& (0+255),w,b
  5116  0017B4  0D64               	mullw	100
  5117  0017B6  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  5118  0017BA  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  5119  0017BE  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  5120  0017C0  0D0A               	mullw	10
  5121  0017C2  50F3               	movf	prodl,w,c
  5122  0017C4  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5123  0017C6  50F4               	movf	prodh,w,c
  5124  0017C8  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5125  0017CA  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  5126  0017CC  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5127  0017CE  0E00               	movlw	0
  5128  0017D0  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5129  0017D2  0EF0               	movlw	240
  5130  0017D4  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  5131  0017D6  6FB7               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  5132  0017D8  0EFD               	movlw	253
  5133  0017DA  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5134  0017DC  6FB8               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  5135                           
  5136                           ;funcs.c: 125: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  5137  0017DE  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5138  0017E0  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  5139  0017E2  ECA0  F010         	call	_TimeTextToSecond	;wreg free
  5140  0017E6  C06C  F0AE         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  5141  0017EA  C06D  F0AF         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  5142  0017EE  C06E  F0B0         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  5143  0017F2  C06F  F0B1         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;funcs.c: 126: GPS_DATE_TIME.SECOND += TIME_ZONE;
  5147  0017F6  C0DE  F09A         	movff	_TIME_ZONE,??_ReadGPS_DATE_TIME
  5148  0017FA  C0DF  F09B         	movff	_TIME_ZONE+1,??_ReadGPS_DATE_TIME+1
  5149  0017FE  0E00               	movlw	0
  5150  001800  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  5151  001802  0EFF               	movlw	255
  5152  001804  6F9C               	movwf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  5153  001806  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  5154  001808  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  5155  00180A  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5156  00180C  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5157  00180E  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5158  001810  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  5159  001812  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5160  001814  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  5161  001816  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;funcs.c: 127: if (GPS_DATE_TIME.SECOND < 0) {
  5165  001818  AFB1               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  5166  00181A  D01A               	goto	l4041
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;funcs.c: 128: GPS_DATE_TIME.SECOND += 86400;
  5170  00181C  0E80               	movlw	128
  5171  00181E  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5172  001820  0E51               	movlw	81
  5173  001822  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5174  001824  0E01               	movlw	1
  5175  001826  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5176  001828  0E00               	movlw	0
  5177  00182A  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;funcs.c: 129: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  5181  00182C  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  5182  001830  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  5183  001834  0E0A               	movlw	10
  5184  001836                     u3691:
  5185  001836  CFDB FFEB          	movff	plusw2,plusw0
  5186  00183A  06E8               	decf	wreg,f,c
  5187  00183C  E2FC               	bc	u3691
  5188  00183E  EC1A  F011         	call	_DecreaseByADay	;wreg free
  5189  001842  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  5190  001846  0E0A               	movlw	10
  5191  001848                     u3701:
  5192  001848  CFEB FFDB          	movff	plusw0,plusw2
  5193  00184C  06E8               	decf	wreg,f,c
  5194  00184E  E2FC               	bc	u3701
  5195  001850                     l4041:
  5196                           
  5197                           ; BSR set to: 0
  5198                           ;funcs.c: 130: }
  5199                           ;funcs.c: 131: if (GPS_DATE_TIME.SECOND > 86400) {
  5200  001850  BFB1               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  5201  001852  D023               	goto	l4047
  5202  001854  51B1               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  5203  001856  E107               	bnz	u3710
  5204  001858  0E81               	movlw	129
  5205  00185A  5DAE               	subwf	_GPS_DATE_TIME& (0+255),w,b
  5206  00185C  0E51               	movlw	81
  5207  00185E  59AF               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  5208  001860  0E01               	movlw	1
  5209  001862  59B0               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  5210  001864  E31A               	bnc	l4047
  5211  001866                     u3710:
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;funcs.c: 132: GPS_DATE_TIME.SECOND -= 86400;
  5215  001866  0E80               	movlw	128
  5216  001868  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5217  00186A  0EAE               	movlw	174
  5218  00186C  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5219  00186E  0EFE               	movlw	254
  5220  001870  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5221  001872  0EFF               	movlw	255
  5222  001874  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;funcs.c: 133: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  5226  001876  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  5227  00187A  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  5228  00187E  0E0A               	movlw	10
  5229  001880                     u3721:
  5230  001880  CFDB FFEB          	movff	plusw2,plusw0
  5231  001884  06E8               	decf	wreg,f,c
  5232  001886  E2FC               	bc	u3721
  5233  001888  EC5F  F013         	call	_IncreaseByADay	;wreg free
  5234  00188C  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  5235  001890  0E0A               	movlw	10
  5236  001892                     u3731:
  5237  001892  CFEB FFDB          	movff	plusw0,plusw2
  5238  001896  06E8               	decf	wreg,f,c
  5239  001898  E2FC               	bc	u3731
  5240  00189A                     l4047:
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;funcs.c: 134: }
  5244                           ;funcs.c: 135: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  5245  00189A  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  5246  00189E  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  5247  0018A2  0E0A               	movlw	10
  5248  0018A4                     u3741:
  5249  0018A4  CFDB FFEB          	movff	plusw2,plusw0
  5250  0018A8  06E8               	decf	wreg,f,c
  5251  0018AA  E2FC               	bc	u3741
  5252  0018AC  EC07  F00F         	call	_AdjustDayLightSaving	;wreg free
  5253  0018B0  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  5254  0018B4  0E0A               	movlw	10
  5255  0018B6                     u3751:
  5256  0018B6  CFEB FFDB          	movff	plusw0,plusw2
  5257  0018BA  06E8               	decf	wreg,f,c
  5258  0018BC  E2FC               	bc	u3751
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;funcs.c: 136: return 1;
  5262  0018BE  0C01               	retlw	1
  5263  0018C0                     l4055:
  5264                           
  5265                           ; BSR set to: 0
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;funcs.c: 138: return 0;
  5269  0018C0  0C00               	retlw	0	;funcret
  5270  0018C2                     __end_of_ReadGPS_DATE_TIME:
  5271                           	opt stack 0
  5272  0018C2                     PL92:
  5273                           	opt stack 15
  5274  0018C2  26F3               	addwf	prodl,f,c
  5275  0018C4  0E00               	movlw	0
  5276  0018C6  22F4               	addwfc	prodh,f,c
  5277  0018C8  0EF0               	movlw	240
  5278  0018CA  24F3               	addwf	prodl,w,c
  5279  0018CC  0012               	return	
  5280  0018CE                     __end_ofPL92:
  5281                           	opt stack 0
  5282                           tosu	equ	0xFFF
  5283                           tosh	equ	0xFFE
  5284                           tosl	equ	0xFFD
  5285                           pclath	equ	0xFFA
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           postinc0	equ	0xFEE
  5294                           plusw0	equ	0xFEB
  5295                           wreg	equ	0xFE8
  5296                           indf1	equ	0xFE7
  5297                           postinc1	equ	0xFE6
  5298                           postdec1	equ	0xFE5
  5299                           plusw1	equ	0xFE3
  5300                           fsr1h	equ	0xFE2
  5301                           fsr1l	equ	0xFE1
  5302                           indf2	equ	0xFDF
  5303                           postinc2	equ	0xFDE
  5304                           postdec2	equ	0xFDD
  5305                           plusw2	equ	0xFDB
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function _ValidateDateTime *****************
  5311 ;; Defined at:
  5312 ;;		line 138 in file "libs/gps.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  5315 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5316 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  5317 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;  Item            1    3[BANK0 ] char 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      enum E11037
  5322 ;; Registers used:
  5323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5324 ;; Tracked objects:
  5325 ;;		On entry : 3F/0
  5326 ;;		On exit  : 3F/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5332 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5333 ;;Total ram usage:        4 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    9
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_ReadGPS_DATE_TIME
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343                           	psect	text19
  5344  002324                     __ptext19:
  5345                           	opt stack 0
  5346  002324                     _ValidateDateTime:
  5347                           	opt stack 19
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;gps.c: 139: INT8 Item;
  5351                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;incstack = 0
  5355  002324  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5356  002326  D86F               	call	PL102	;call to abstracted procedure
  5357  002328  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5358  00232A  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5359  00232C  6ED9               	movwf	fsr2l,c
  5360  00232E  6ADA               	clrf	fsr2h,c
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  5364  002330  D84A               	call	PL10	;call to abstracted procedure
  5365  002332  A0D8               	btfss	status,0,c
  5366  002334  0C00               	retlw	0
  5367                           
  5368                           ; BSR set to: 0
  5369  002336  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5370  002338  0A80               	xorlw	128
  5371  00233A  0F60               	addlw	-160
  5372  00233C  E301               	bnc	l3505
  5373                           
  5374                           ; BSR set to: 0
  5375  00233E  0C00               	retlw	0
  5376  002340                     l3505:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5380  002340  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5381  002342  D85B               	call	PL68	;call to abstracted procedure
  5382  002344  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5383  002346  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5384  002348  D84D               	call	PL40	;call to abstracted procedure
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  5388  00234A  D83D               	call	PL10	;call to abstracted procedure
  5389  00234C  A0D8               	btfss	status,0,c
  5390  00234E  0C00               	retlw	0
  5391                           
  5392                           ; BSR set to: 0
  5393  002350  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5394  002352  0A80               	xorlw	128
  5395  002354  0F73               	addlw	-141
  5396  002356  E301               	bnc	l3515
  5397  002358  0C00               	retlw	0
  5398  00235A                     l3515:
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  5402  00235A  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5403  00235C  D848               	call	PL56	;call to abstracted procedure
  5404  00235E  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5405  002360  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5406  002362  D83B               	call	PL36	;call to abstracted procedure
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  5410  002364  D830               	call	PL10	;call to abstracted procedure
  5411  002366  A0D8               	btfss	status,0,c
  5412  002368  0C00               	retlw	0
  5413                           
  5414                           ; BSR set to: 0
  5415  00236A  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5416  00236C  0A80               	xorlw	128
  5417  00236E  0F1C               	addlw	-228
  5418  002370  E301               	bnc	l3525
  5419  002372  0C00               	retlw	0
  5420  002374                     l3525:
  5421                           
  5422                           ; BSR set to: 0
  5423                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  5424  002374  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5425  002376  D847               	call	PL102	;call to abstracted procedure
  5426  002378  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5427  00237A  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5428  00237C  6ED9               	movwf	fsr2l,c
  5429  00237E  6ADA               	clrf	fsr2h,c
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  5433  002380  D822               	call	PL10	;call to abstracted procedure
  5434  002382  A0D8               	btfss	status,0,c
  5435  002384  0C00               	retlw	0
  5436                           
  5437                           ; BSR set to: 0
  5438  002386  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5439  002388  0A80               	xorlw	128
  5440  00238A  0F68               	addlw	-152
  5441  00238C  E301               	bnc	l3535
  5442  00238E  0C00               	retlw	0
  5443  002390                     l3535:
  5444                           
  5445                           ; BSR set to: 0
  5446                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  5447  002390  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5448  002392  D833               	call	PL68	;call to abstracted procedure
  5449  002394  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5450  002396  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5451  002398  D825               	call	PL40	;call to abstracted procedure
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  5455  00239A  D815               	call	PL10	;call to abstracted procedure
  5456  00239C  A0D8               	btfss	status,0,c
  5457  00239E  0C00               	retlw	0
  5458                           
  5459                           ; BSR set to: 0
  5460  0023A0  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5461  0023A2  0A80               	xorlw	128
  5462  0023A4  0F44               	addlw	-188
  5463  0023A6  E301               	bnc	l3545
  5464  0023A8  0C00               	retlw	0
  5465  0023AA                     l3545:
  5466                           
  5467                           ; BSR set to: 0
  5468                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  5469  0023AA  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5470  0023AC  D820               	call	PL56	;call to abstracted procedure
  5471  0023AE  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5472  0023B0  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5473  0023B2  D813               	call	PL36	;call to abstracted procedure
  5474                           
  5475                           ; BSR set to: 0
  5476                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  5477  0023B4  D808               	call	PL10	;call to abstracted procedure
  5478  0023B6  A0D8               	btfss	status,0,c
  5479  0023B8  0C00               	retlw	0
  5480                           
  5481                           ; BSR set to: 0
  5482  0023BA  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5483  0023BC  0A80               	xorlw	128
  5484  0023BE  0F44               	addlw	-188
  5485  0023C0  E301               	bnc	l3555
  5486  0023C2  0C00               	retlw	0
  5487  0023C4                     l3555:
  5488                           
  5489                           ; BSR set to: 0
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;gps.c: 160: return 1;
  5493  0023C4  0C01               	retlw	1	;funcret
  5494  0023C6                     __end_of_ValidateDateTime:
  5495                           	opt stack 0
  5496  0023C6                     PL10:
  5497                           	opt stack 19
  5498  0023C6  50DF               	movf	indf2,w,c
  5499  0023C8  0D0A               	mullw	10
  5500  0023CA  50F3               	movf	prodl,w,c
  5501  0023CC  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  5502  0023CE  0FF0               	addlw	240
  5503  0023D0  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  5504  0023D2  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5505  0023D4  0A80               	xorlw	128
  5506  0023D6  0F7F               	addlw	-129
  5507  0023D8  0012               	return	
  5508  0023DA                     __end_ofPL10:
  5509                           	opt stack 0
  5510  0023DA                     PL36:
  5511                           	opt stack 19
  5512  0023DA  6ED9               	movwf	fsr2l,c
  5513  0023DC  6ADA               	clrf	fsr2h,c
  5514  0023DE  0E04               	movlw	4
  5515  0023E0  26D9               	addwf	fsr2l,f,c
  5516  0023E2  0C04               	retlw	4
  5517  0023E4                     __end_ofPL36:
  5518                           	opt stack 0
  5519  0023E4                     PL40:
  5520                           	opt stack 19
  5521  0023E4  6ED9               	movwf	fsr2l,c
  5522  0023E6  6ADA               	clrf	fsr2h,c
  5523  0023E8  0E02               	movlw	2
  5524  0023EA  26D9               	addwf	fsr2l,f,c
  5525  0023EC  0C02               	retlw	2
  5526  0023EE                     __end_ofPL40:
  5527                           	opt stack 0
  5528  0023EE                     PL56:
  5529                           	opt stack 19
  5530  0023EE  6ED9               	movwf	fsr2l,c
  5531  0023F0  6ADA               	clrf	fsr2h,c
  5532  0023F2  0E05               	movlw	5
  5533  0023F4  26D9               	addwf	fsr2l,f,c
  5534  0023F6  50DF               	movf	indf2,w,c
  5535  0023F8  0012               	return	
  5536  0023FA                     __end_ofPL56:
  5537                           	opt stack 0
  5538  0023FA                     PL68:
  5539                           	opt stack 19
  5540  0023FA  6ED9               	movwf	fsr2l,c
  5541  0023FC  6ADA               	clrf	fsr2h,c
  5542  0023FE  0E03               	movlw	3
  5543  002400  26D9               	addwf	fsr2l,f,c
  5544  002402  50DF               	movf	indf2,w,c
  5545  002404  0012               	return	
  5546  002406                     __end_ofPL68:
  5547                           	opt stack 0
  5548  002406                     PL102:
  5549                           	opt stack 19
  5550  002406  6ED9               	movwf	fsr2l,c
  5551  002408  6ADA               	clrf	fsr2h,c
  5552  00240A  2AD9               	incf	fsr2l,f,c
  5553  00240C  50DF               	movf	indf2,w,c
  5554  00240E  0012               	return	
  5555  002410                     __end_ofPL102:
  5556                           	opt stack 0
  5557                           tosu	equ	0xFFF
  5558                           tosh	equ	0xFFE
  5559                           tosl	equ	0xFFD
  5560                           pclath	equ	0xFFA
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           intcon	equ	0xFF2
  5568                           postinc0	equ	0xFEE
  5569                           plusw0	equ	0xFEB
  5570                           wreg	equ	0xFE8
  5571                           indf1	equ	0xFE7
  5572                           postinc1	equ	0xFE6
  5573                           postdec1	equ	0xFE5
  5574                           plusw1	equ	0xFE3
  5575                           fsr1h	equ	0xFE2
  5576                           fsr1l	equ	0xFE1
  5577                           indf2	equ	0xFDF
  5578                           postinc2	equ	0xFDE
  5579                           postdec2	equ	0xFDD
  5580                           plusw2	equ	0xFDB
  5581                           fsr2h	equ	0xFDA
  5582                           fsr2l	equ	0xFD9
  5583                           status	equ	0xFD8
  5584                           
  5585 ;; *************** function _TimeTextToSecond *****************
  5586 ;; Defined at:
  5587 ;;		line 141 in file "libs/funcs.c"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  5590 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  Second          4   32[BANK0 ] long 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  4   12[BANK0 ] long 
  5595 ;; Registers used:
  5596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 3F/0
  5599 ;;		On exit  : 3F/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5603 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5604 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5605 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5606 ;;Total ram usage:       24 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:   10
  5609 ;; This function calls:
  5610 ;;		___lmul
  5611 ;; This function is called by:
  5612 ;;		_ReadGPS_DATE_TIME
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text20
  5617  002140                     __ptext20:
  5618                           	opt stack 0
  5619  002140                     _TimeTextToSecond:
  5620                           	opt stack 18
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;funcs.c: 142: INT32 Second;
  5624                           ;funcs.c: 143: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  5625                           ;funcs.c: 144: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  5626                           ;funcs.c: 145: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;incstack = 0
  5630  002140  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5631  002142  ECED  F011         	call	PL36	;call to abstracted procedure
  5632  002146  D872               	call	PL94	;call to abstracted procedure
  5633  002148  ECF7  F011         	call	PL56	;call to abstracted procedure
  5634  00214C  EC61  F00C         	call	PL92	;call to abstracted procedure
  5635  002150  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  5636  002152  0EFD               	movlw	253
  5637  002154  20F4               	addwfc	prodh,w,c
  5638  002156  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  5639  002158  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  5640  00215A  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  5641  00215C  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  5642  00215E  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  5643  002160  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  5644  002162  0EF0               	movlw	240
  5645  002164  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  5646  002166  0EFD               	movlw	253
  5647  002168  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  5648  00216A  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5649  00216C  6ED9               	movwf	fsr2l,c
  5650  00216E  6ADA               	clrf	fsr2h,c
  5651  002170  D85D               	call	PL94	;call to abstracted procedure
  5652  002172  EC03  F012         	call	PL102	;call to abstracted procedure
  5653  002176  26F3               	addwf	prodl,f,c
  5654  002178  0E00               	movlw	0
  5655  00217A  22F4               	addwfc	prodh,f,c
  5656  00217C  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  5657  00217E  26F3               	addwf	prodl,f,c
  5658  002180  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  5659  002182  D849               	call	PL64	;call to abstracted procedure
  5660  002184  0E10               	movlw	16
  5661  002186  6F64               	movwf	___lmul@multiplicand& (0+255),b
  5662  002188  0E0E               	movlw	14
  5663  00218A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  5664  00218C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  5665  00218E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  5666  002190  ECB4  F016         	call	___lmul	;wreg free
  5667  002194  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  5668  002198  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  5669  00219C  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  5670  0021A0  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  5671  0021A4  0EF0               	movlw	240
  5672  0021A6  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  5673  0021A8  0EFD               	movlw	253
  5674  0021AA  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  5675  0021AC  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5676  0021AE  ECF2  F011         	call	PL40	;call to abstracted procedure
  5677  0021B2  D83C               	call	PL94	;call to abstracted procedure
  5678  0021B4  ECFD  F011         	call	PL68	;call to abstracted procedure
  5679  0021B8  26F3               	addwf	prodl,f,c
  5680  0021BA  0E00               	movlw	0
  5681  0021BC  22F4               	addwfc	prodh,f,c
  5682  0021BE  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  5683  0021C0  26F3               	addwf	prodl,f,c
  5684  0021C2  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  5685  0021C4  D828               	call	PL64	;call to abstracted procedure
  5686  0021C6  0E3C               	movlw	60
  5687  0021C8  6F64               	movwf	___lmul@multiplicand& (0+255),b
  5688  0021CA  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  5689  0021CC  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  5690  0021CE  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  5691  0021D0  ECB4  F016         	call	___lmul	;wreg free
  5692  0021D4  5160               	movf	?___lmul& (0+255),w,b
  5693  0021D6  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  5694  0021D8  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  5695  0021DA  5161               	movf	(?___lmul+1)& (0+255),w,b
  5696  0021DC  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  5697  0021DE  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  5698  0021E0  5162               	movf	(?___lmul+2)& (0+255),w,b
  5699  0021E2  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  5700  0021E4  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  5701  0021E6  5163               	movf	(?___lmul+3)& (0+255),w,b
  5702  0021E8  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  5703  0021EA  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  5704  0021EC  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  5705  0021EE  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  5706  0021F0  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  5707  0021F2  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  5708  0021F4  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  5709  0021F6  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  5710  0021F8  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  5711  0021FA  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  5712  0021FC  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  5713  0021FE  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  5714  002200  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  5715  002202  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;funcs.c: 146: return Second;
  5719  002204  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  5720  002208  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  5721  00220C  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  5722  002210  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  5723                           
  5724                           ; BSR set to: 0
  5725  002214  0012               	return		;funcret
  5726  002216                     __end_of_TimeTextToSecond:
  5727                           	opt stack 0
  5728  002216                     PL64:
  5729                           	opt stack 18
  5730  002216  22F4               	addwfc	prodh,f,c
  5731  002218  CFF3 F060          	movff	prodl,___lmul@multiplier
  5732  00221C  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  5733  002220  0E00               	movlw	0
  5734  002222  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  5735  002224  0EFF               	movlw	-1
  5736  002226  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  5737  002228  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  5738  00222A  0012               	return	
  5739  00222C                     __end_ofPL64:
  5740                           	opt stack 0
  5741  00222C                     PL94:
  5742                           	opt stack 18
  5743  00222C  50DF               	movf	indf2,w,c
  5744  00222E  0D0A               	mullw	10
  5745  002230  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5746  002232  0012               	return	
  5747  002234                     __end_ofPL94:
  5748                           	opt stack 0
  5749                           tosu	equ	0xFFF
  5750                           tosh	equ	0xFFE
  5751                           tosl	equ	0xFFD
  5752                           pclath	equ	0xFFA
  5753                           tblptru	equ	0xFF8
  5754                           tblptrh	equ	0xFF7
  5755                           tblptrl	equ	0xFF6
  5756                           tablat	equ	0xFF5
  5757                           prodh	equ	0xFF4
  5758                           prodl	equ	0xFF3
  5759                           intcon	equ	0xFF2
  5760                           postinc0	equ	0xFEE
  5761                           plusw0	equ	0xFEB
  5762                           wreg	equ	0xFE8
  5763                           indf1	equ	0xFE7
  5764                           postinc1	equ	0xFE6
  5765                           postdec1	equ	0xFE5
  5766                           plusw1	equ	0xFE3
  5767                           fsr1h	equ	0xFE2
  5768                           fsr1l	equ	0xFE1
  5769                           indf2	equ	0xFDF
  5770                           postinc2	equ	0xFDE
  5771                           postdec2	equ	0xFDD
  5772                           plusw2	equ	0xFDB
  5773                           fsr2h	equ	0xFDA
  5774                           fsr2l	equ	0xFD9
  5775                           status	equ	0xFD8
  5776                           
  5777 ;; *************** function ___lmul *****************
  5778 ;; Defined at:
  5779 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5782 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5783 ;; Auto vars:     Size  Location     Type
  5784 ;;  product         4    8[BANK0 ] unsigned long 
  5785 ;; Return value:  Size  Location     Type
  5786 ;;                  4    0[BANK0 ] unsigned long 
  5787 ;; Registers used:
  5788 ;;		wreg, status,2, status,0
  5789 ;; Tracked objects:
  5790 ;;		On entry : 3F/0
  5791 ;;		On exit  : 3F/0
  5792 ;;		Unchanged: 0/0
  5793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5794 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5795 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5797 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5798 ;;Total ram usage:       12 bytes
  5799 ;; Hardware stack levels used:    1
  5800 ;; Hardware stack levels required when called:    9
  5801 ;; This function calls:
  5802 ;;		Nothing
  5803 ;; This function is called by:
  5804 ;;		_WriteLongInt
  5805 ;;		_TimeTextToSecond
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text21
  5810  002D68                     __ptext21:
  5811                           	opt stack 0
  5812  002D68                     ___lmul:
  5813                           	opt stack 20
  5814                           
  5815                           ; BSR set to: 0
  5816                           
  5817                           ; BSR set to: 0
  5818                           ;incstack = 0
  5819  002D68  6B68               	clrf	___lmul@product& (0+255),b
  5820  002D6A  6B69               	clrf	(___lmul@product+1)& (0+255),b
  5821  002D6C  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  5822  002D6E  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  5823  002D70                     l1147:
  5824                           
  5825                           ; BSR set to: 0
  5826  002D70  A160               	btfss	___lmul@multiplier& (0+255),0,b
  5827  002D72  D008               	goto	l3325
  5828                           
  5829                           ; BSR set to: 0
  5830  002D74  5164               	movf	___lmul@multiplicand& (0+255),w,b
  5831  002D76  2768               	addwf	___lmul@product& (0+255),f,b
  5832  002D78  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  5833  002D7A  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  5834  002D7C  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  5835  002D7E  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  5836  002D80  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  5837  002D82  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  5838  002D84                     l3325:
  5839                           
  5840                           ; BSR set to: 0
  5841  002D84  90D8               	bcf	status,0,c
  5842  002D86  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  5843  002D88  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  5844  002D8A  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  5845  002D8C  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  5846                           
  5847                           ; BSR set to: 0
  5848  002D8E  90D8               	bcf	status,0,c
  5849  002D90  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  5850  002D92  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  5851  002D94  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  5852  002D96  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  5853  002D98  5160               	movf	___lmul@multiplier& (0+255),w,b
  5854  002D9A  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  5855  002D9C  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  5856  002D9E  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  5857  002DA0  E1E7               	bnz	l1147
  5858                           
  5859                           ; BSR set to: 0
  5860  002DA2  C068  F060         	movff	___lmul@product,?___lmul
  5861  002DA6  C069  F061         	movff	___lmul@product+1,?___lmul+1
  5862  002DAA  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  5863  002DAE  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  5864                           
  5865                           ; BSR set to: 0
  5866  002DB2  0012               	return		;funcret
  5867  002DB4                     __end_of___lmul:
  5868                           	opt stack 0
  5869                           tosu	equ	0xFFF
  5870                           tosh	equ	0xFFE
  5871                           tosl	equ	0xFFD
  5872                           pclath	equ	0xFFA
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           postinc0	equ	0xFEE
  5881                           plusw0	equ	0xFEB
  5882                           wreg	equ	0xFE8
  5883                           indf1	equ	0xFE7
  5884                           postinc1	equ	0xFE6
  5885                           postdec1	equ	0xFE5
  5886                           plusw1	equ	0xFE3
  5887                           fsr1h	equ	0xFE2
  5888                           fsr1l	equ	0xFE1
  5889                           indf2	equ	0xFDF
  5890                           postinc2	equ	0xFDE
  5891                           postdec2	equ	0xFDD
  5892                           plusw2	equ	0xFDB
  5893                           fsr2h	equ	0xFDA
  5894                           fsr2l	equ	0xFD9
  5895                           status	equ	0xFD8
  5896                           
  5897 ;; *************** function _ReadGPSDateTime *****************
  5898 ;; Defined at:
  5899 ;;		line 39 in file "libs/gps.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  5902 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5903 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  5904 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  StartCode       7    6[BANK0 ] const unsigned char [7]
  5907 ;;  i               2   13[BANK0 ] int 
  5908 ;;  Pos             1   17[BANK0 ] unsigned char 
  5909 ;;  TempChar        1   16[BANK0 ] unsigned char 
  5910 ;;  Commas          1   15[BANK0 ] unsigned char 
  5911 ;; Return value:  Size  Location     Type
  5912 ;;                  1    wreg      void 
  5913 ;; Registers used:
  5914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5915 ;; Tracked objects:
  5916 ;;		On entry : 3F/0
  5917 ;;		On exit  : 3F/0
  5918 ;;		Unchanged: 0/0
  5919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5920 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5921 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5922 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5923 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5924 ;;Total ram usage:       18 bytes
  5925 ;; Hardware stack levels used:    1
  5926 ;; Hardware stack levels required when called:   10
  5927 ;; This function calls:
  5928 ;;		_EUSART1_Read
  5929 ;; This function is called by:
  5930 ;;		_ReadGPS_DATE_TIME
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text22
  5935  0027A0                     __ptext22:
  5936                           	opt stack 0
  5937  0027A0                     _ReadGPSDateTime:
  5938                           	opt stack 18
  5939                           
  5940                           ; BSR set to: 0
  5941                           ;gps.c: 40: const char StartCode[7]="$GPRMC,";
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;incstack = 0
  5945  0027A0  0E01               	movlw	low ReadGPSDateTime@F11464
  5946  0027A2  6EF6               	movwf	tblptrl,c
  5947  0027A4                     	if	1	;There is more than 1 active tblptr byte
  5948  0027A4  0E0F               	movlw	high ReadGPSDateTime@F11464
  5949  0027A6  6EF7               	movwf	tblptrh,c
  5950  0027A8                     	endif
  5951  0027A8                     	if	1	;There are 3 active tblptr bytes
  5952  0027A8  0E00               	movlw	low (ReadGPSDateTime@F11464 shr (0+16))
  5953  0027AA  6EF8               	movwf	tblptru,c
  5954  0027AC                     	endif
  5955  0027AC  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  5956  0027B0  0E06               	movlw	6
  5957  0027B2                     u2880:
  5958  0027B2  0009               	tblrd		*+
  5959  0027B4  CFF5 FFDE          	movff	tablat,postinc2
  5960  0027B8  06E8               	decf	wreg,f,c
  5961  0027BA  E2FB               	bc	u2880
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;gps.c: 41: char Pos=0x00;
  5965  0027BC  6B71               	clrf	ReadGPSDateTime@Pos& (0+255),b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;gps.c: 43: int i=0;
  5969                           
  5970                           ; BSR set to: 0
  5971  0027BE  6B6D               	clrf	ReadGPSDateTime@i& (0+255),b
  5972  0027C0  6B6E               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975                           ;gps.c: 44: UINT8 Commas=0;
  5976  0027C2  6B6F               	clrf	ReadGPSDateTime@Commas& (0+255),b
  5977  0027C4                     l3449:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  5981  0027C4  010E               	movlb	14	; () banked
  5982  0027C6  ABCD               	btfss	205,5,b	;volatile
  5983  0027C8  D047               	goto	l3483
  5984                           
  5985                           ; BSR set to: 14
  5986                           ;gps.c: 47: i=0;
  5987  0027CA  0100               	movlb	0	; () banked
  5988  0027CC  6B6D               	clrf	ReadGPSDateTime@i& (0+255),b
  5989  0027CE  6B6E               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;gps.c: 48: TempChar = EUSART1_Read();
  5993  0027D0  ECEA  F018         	call	_EUSART1_Read	;wreg free
  5994  0027D4  0100               	movlb	0	; () banked
  5995  0027D6  6F70               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  5999  0027D8  0E06               	movlw	6
  6000  0027DA  6571               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  6001  0027DC  D00D               	goto	l3463
  6002                           
  6003                           ; BSR set to: 0
  6004  0027DE  0E0D               	movlw	13
  6005  0027E0  6171               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  6006  0027E2  D00A               	goto	l3463
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  6010  0027E4  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  6011  0027E6  2571               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  6012  0027E8  6ED9               	movwf	fsr2l,c
  6013  0027EA  6ADA               	clrf	fsr2h,c
  6014  0027EC  0EF9               	movlw	249
  6015  0027EE  26D9               	addwf	fsr2l,f,c
  6016  0027F0  C070  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  6017  0027F4                     l3461:
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;gps.c: 51: Pos++;
  6021  0027F4  2B71               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  6022                           
  6023                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  6024  0027F6  D034               	goto	l3485
  6025  0027F8                     l3463:
  6026                           
  6027                           ; BSR set to: 0
  6028  0027F8  5171               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  6029  0027FA  0F66               	addlw	low ReadGPSDateTime@StartCode
  6030  0027FC  6ED9               	movwf	fsr2l,c
  6031  0027FE  6ADA               	clrf	fsr2h,c
  6032  002800  5170               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  6033  002802  18DE               	xorwf	postinc2,w,c
  6034  002804  E104               	bnz	l3469
  6035                           
  6036                           ; BSR set to: 0
  6037  002806  0E07               	movlw	7
  6038  002808  6171               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  6039  00280A  D001               	goto	l3469
  6040  00280C  D7F3               	goto	l3461
  6041  00280E                     l3469:
  6042                           
  6043                           ; BSR set to: 0
  6044  00280E  0E0C               	movlw	12
  6045  002810  6571               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  6046  002812  D020               	goto	l123
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;gps.c: 55: if (Commas<8) {
  6050  002814  0E08               	movlw	8
  6051  002816  616F               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  6052  002818  D005               	goto	l3477
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;gps.c: 56: if (TempChar == 0x2C)
  6056  00281A  0E2C               	movlw	44
  6057  00281C  1970               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  6058  00281E  E120               	bnz	l3485
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;gps.c: 57: Commas++;
  6062  002820  2B6F               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  6063  002822  D01E               	goto	l3485
  6064  002824                     l3477:
  6065                           
  6066                           ; BSR set to: 0
  6067                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  6068  002824  0EF3               	movlw	243
  6069  002826  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  6070  002828  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  6071  00282A  5171               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  6072  00282C  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  6073  00282E  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  6074  002830  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  6075  002832  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  6076  002834  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  6077  002836  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  6078  002838  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  6079  00283A  D006               	goto	l3479
  6080  00283C  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  6081  00283E  E11A               	bnz	l129
  6082  002840  0E06               	movlw	6
  6083  002842  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  6084  002844  B0D8               	btfsc	status,0,c
  6085  002846  0012               	return	
  6086  002848                     l3479:
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  6090  002848  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  6091  00284A  2571               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  6092  00284C  6ED9               	movwf	fsr2l,c
  6093  00284E  6ADA               	clrf	fsr2h,c
  6094  002850  0EF3               	movlw	243
  6095  002852  D7CD               	goto	L4
  6096  002854                     l123:
  6097                           
  6098                           ; BSR set to: 0
  6099                           ;gps.c: 66: Pos=0;
  6100  002854  6B71               	clrf	ReadGPSDateTime@Pos& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103  002856  D004               	goto	l3485
  6104  002858                     l3483:
  6105                           
  6106                           ; BSR set to: 14
  6107                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  6108  002858  0E06               	movlw	6
  6109  00285A                     u4177:
  6110  00285A  2EE8               	decfsz	wreg,f,c
  6111  00285C  D7FE               	bra	u4177
  6112  00285E  D000               	nop2	
  6113  002860                     l3485:
  6114                           
  6115                           ;gps.c: 69: i++;
  6116  002860  0100               	movlb	0	; () banked
  6117  002862  4B6D               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  6118  002864  2B6E               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  6119                           
  6120                           ;gps.c: 70: } while(i<1000);
  6121  002866  BF6E               	btfsc	(ReadGPSDateTime@i+1)& (0+255),7,b
  6122  002868  D7AD               	goto	l3449
  6123  00286A  0EE8               	movlw	232
  6124  00286C  5D6D               	subwf	ReadGPSDateTime@i& (0+255),w,b
  6125  00286E  0E03               	movlw	3
  6126  002870  596E               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  6127  002872  E3A8               	bnc	l3449
  6128  002874                     l129:
  6129                           
  6130                           ; BSR set to: 0
  6131  002874  0012               	return		;funcret
  6132  002876                     __end_of_ReadGPSDateTime:
  6133                           	opt stack 0
  6134                           tosu	equ	0xFFF
  6135                           tosh	equ	0xFFE
  6136                           tosl	equ	0xFFD
  6137                           pclath	equ	0xFFA
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           postinc0	equ	0xFEE
  6146                           plusw0	equ	0xFEB
  6147                           wreg	equ	0xFE8
  6148                           indf1	equ	0xFE7
  6149                           postinc1	equ	0xFE6
  6150                           postdec1	equ	0xFE5
  6151                           plusw1	equ	0xFE3
  6152                           fsr1h	equ	0xFE2
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           plusw2	equ	0xFDB
  6158                           fsr2h	equ	0xFDA
  6159                           fsr2l	equ	0xFD9
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _EUSART1_Read *****************
  6163 ;; Defined at:
  6164 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;		None
  6167 ;; Auto vars:     Size  Location     Type
  6168 ;;		None
  6169 ;; Return value:  Size  Location     Type
  6170 ;;                  1    wreg      unsigned char 
  6171 ;; Registers used:
  6172 ;;		wreg, status,2
  6173 ;; Tracked objects:
  6174 ;;		On entry : 3F/0
  6175 ;;		On exit  : 3F/E
  6176 ;;		Unchanged: 0/0
  6177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6182 ;;Total ram usage:        0 bytes
  6183 ;; Hardware stack levels used:    1
  6184 ;; Hardware stack levels required when called:    9
  6185 ;; This function calls:
  6186 ;;		Nothing
  6187 ;; This function is called by:
  6188 ;;		_ReadGPSDateTime
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text23
  6193  0031D4                     __ptext23:
  6194                           	opt stack 0
  6195  0031D4                     _EUSART1_Read:
  6196                           	opt stack 18
  6197  0031D4                     l720:
  6198  0031D4  010E               	movlb	14	; () banked
  6199  0031D6  ABCD               	btfss	205,5,b	;volatile
  6200  0031D8  D7FD               	goto	l720
  6201                           
  6202                           ; BSR set to: 14
  6203                           ;eusart1.c: 82: }
  6204                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  6205  0031DA  A29D               	btfss	3997,1,c	;volatile
  6206  0031DC  D002               	goto	l3227
  6207                           
  6208                           ; BSR set to: 14
  6209                           ;eusart1.c: 86: {
  6210                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  6211  0031DE  9E9D               	bcf	3997,7,c	;volatile
  6212                           
  6213                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  6214  0031E0  8E9D               	bsf	3997,7,c	;volatile
  6215  0031E2                     l3227:
  6216                           
  6217                           ; BSR set to: 14
  6218                           ;eusart1.c: 91: }
  6219                           ;eusart1.c: 93: return RC1REG;
  6220  0031E2  5099               	movf	3993,w,c	;volatile
  6221                           
  6222                           ; BSR set to: 14
  6223  0031E4  0012               	return		;funcret
  6224  0031E6                     __end_of_EUSART1_Read:
  6225                           	opt stack 0
  6226                           tosu	equ	0xFFF
  6227                           tosh	equ	0xFFE
  6228                           tosl	equ	0xFFD
  6229                           pclath	equ	0xFFA
  6230                           tblptru	equ	0xFF8
  6231                           tblptrh	equ	0xFF7
  6232                           tblptrl	equ	0xFF6
  6233                           tablat	equ	0xFF5
  6234                           prodh	equ	0xFF4
  6235                           prodl	equ	0xFF3
  6236                           intcon	equ	0xFF2
  6237                           postinc0	equ	0xFEE
  6238                           plusw0	equ	0xFEB
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postinc1	equ	0xFE6
  6242                           postdec1	equ	0xFE5
  6243                           plusw1	equ	0xFE3
  6244                           fsr1h	equ	0xFE2
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           plusw2	equ	0xFDB
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _GetDay *****************
  6255 ;; Defined at:
  6256 ;;		line 129 in file "libs/gps.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  6259 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  6260 ;; Auto vars:     Size  Location     Type
  6261 ;;  y               2   23[BANK0 ] int 
  6262 ;;  m               1   22[BANK0 ] unsigned char 
  6263 ;;  d               1   21[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  1    wreg      char 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 3F/0
  6270 ;;		On exit  : 3F/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6273 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6274 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6275 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6276 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6277 ;;Total ram usage:       11 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:   10
  6280 ;; This function calls:
  6281 ;;		___awdiv
  6282 ;;		___awmod
  6283 ;; This function is called by:
  6284 ;;		_ReadGPS_DATE_TIME
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text24
  6289  001F32                     __ptext24:
  6290                           	opt stack 0
  6291  001F32                     _GetDay:
  6292                           	opt stack 18
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  6296                           
  6297                           ; BSR set to: 14
  6298                           ;incstack = 0
  6299  001F32  516E               	movf	GetDay@Date& (0+255),w,b
  6300  001F34  EC03  F012         	call	PL102	;call to abstracted procedure
  6301  001F38  D87F               	call	PL124	;call to abstracted procedure
  6302  001F3A  50DF               	movf	indf2,w,c
  6303  001F3C  0D0A               	mullw	10
  6304  001F3E  50F3               	movf	prodl,w,c
  6305  001F40  256F               	addwf	??_GetDay& (0+255),w,b
  6306  001F42  0FF0               	addlw	240
  6307  001F44  6F75               	movwf	GetDay@d& (0+255),b
  6308                           
  6309                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  6310  001F46  516E               	movf	GetDay@Date& (0+255),w,b
  6311  001F48  ECFD  F011         	call	PL68	;call to abstracted procedure
  6312  001F4C  D875               	call	PL124	;call to abstracted procedure
  6313  001F4E  0E02               	movlw	2
  6314  001F50  D868               	call	PL18	;call to abstracted procedure
  6315  001F52  256F               	addwf	??_GetDay& (0+255),w,b
  6316  001F54  0FF0               	addlw	240
  6317  001F56  6F76               	movwf	GetDay@m& (0+255),b
  6318                           
  6319                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  6320  001F58  51F7               	movf	_CENTURY& (0+255),w,b
  6321  001F5A  0D64               	mullw	100
  6322  001F5C  CFF3 F06F          	movff	prodl,??_GetDay
  6323  001F60  CFF4 F070          	movff	prodh,??_GetDay+1
  6324  001F64  516E               	movf	GetDay@Date& (0+255),w,b
  6325  001F66  6ED9               	movwf	fsr2l,c
  6326  001F68  6ADA               	clrf	fsr2h,c
  6327  001F6A  0E04               	movlw	4
  6328  001F6C  D85A               	call	PL18	;call to abstracted procedure
  6329  001F6E  276F               	addwf	??_GetDay& (0+255),f,b
  6330  001F70  50F4               	movf	prodh,w,c
  6331  001F72  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  6332  001F74  516E               	movf	GetDay@Date& (0+255),w,b
  6333  001F76  ECF7  F011         	call	PL56	;call to abstracted procedure
  6334  001F7A  276F               	addwf	??_GetDay& (0+255),f,b
  6335  001F7C  0E00               	movlw	0
  6336  001F7E  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  6337  001F80  0EF0               	movlw	240
  6338  001F82  256F               	addwf	??_GetDay& (0+255),w,b
  6339  001F84  6F77               	movwf	GetDay@y& (0+255),b
  6340  001F86  0EFD               	movlw	253
  6341  001F88  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  6342  001F8A  6F78               	movwf	(GetDay@y+1)& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  6346                           ;gps.c: 134: y -= m < 3;
  6347  001F8C  0E02               	movlw	2
  6348  001F8E  6576               	cpfsgt	GetDay@m& (0+255),b
  6349  001F90  D001               	goto	u2991
  6350  001F92  D002               	goto	u2990
  6351  001F94                     u2991:
  6352  001F94  0E01               	movlw	1
  6353  001F96  D001               	goto	u3000
  6354  001F98                     u2990:
  6355  001F98  0E00               	movlw	0
  6356  001F9A                     u3000:
  6357  001F9A  5F77               	subwf	GetDay@y& (0+255),f,b
  6358  001F9C  0E00               	movlw	0
  6359  001F9E  5B78               	subwfb	(GetDay@y+1)& (0+255),f,b
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  6363  001FA0  5176               	movf	GetDay@m& (0+255),w,b
  6364  001FA2  6F6F               	movwf	??_GetDay& (0+255),b
  6365  001FA4  6B70               	clrf	(??_GetDay+1)& (0+255),b
  6366  001FA6  90D8               	bcf	status,0,c
  6367  001FA8  376F               	rlcf	??_GetDay& (0+255),f,b
  6368  001FAA  3770               	rlcf	(??_GetDay+1)& (0+255),f,b
  6369  001FAC  0E5A               	movlw	low (GetDay@t+65534)
  6370  001FAE  256F               	addwf	??_GetDay& (0+255),w,b
  6371  001FB0  6ED9               	movwf	fsr2l,c
  6372  001FB2  0E01               	movlw	high (GetDay@t+65534)
  6373  001FB4  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  6374  001FB6  6EDA               	movwf	fsr2h,c
  6375  001FB8  CFDE F071          	movff	postinc2,??_GetDay+2
  6376  001FBC  CFDD F072          	movff	postdec2,??_GetDay+3
  6377  001FC0  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6378  001FC2  0E04               	movlw	4
  6379  001FC4  D833               	call	PL88	;call to abstracted procedure
  6380  001FC6  ECAE  F015         	call	___awdiv	;wreg free
  6381  001FCA  C060  F073         	movff	?___awdiv,??_GetDay+4
  6382  001FCE  C061  F074         	movff	?___awdiv+1,??_GetDay+5
  6383  001FD2  0E01               	movlw	1
  6384  001FD4  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6385  001FD6  0E90               	movlw	144
  6386  001FD8  D829               	call	PL88	;call to abstracted procedure
  6387  001FDA  ECAE  F015         	call	___awdiv	;wreg free
  6388  001FDE  5160               	movf	?___awdiv& (0+255),w,b
  6389  001FE0  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6390  001FE2  5161               	movf	(?___awdiv+1)& (0+255),w,b
  6391  001FE4  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6392  001FE6  5175               	movf	GetDay@d& (0+255),w,b
  6393  001FE8  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6394  001FEA  0E00               	movlw	0
  6395  001FEC  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6396  001FEE  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6397  001FF0  0E64               	movlw	100
  6398  001FF2  D81C               	call	PL88	;call to abstracted procedure
  6399  001FF4  ECAE  F015         	call	___awdiv	;wreg free
  6400  001FF8  5160               	movf	?___awdiv& (0+255),w,b
  6401  001FFA  5F73               	subwf	(??_GetDay+4)& (0+255),f,b
  6402  001FFC  5161               	movf	(?___awdiv+1)& (0+255),w,b
  6403  001FFE  5B74               	subwfb	(??_GetDay+5)& (0+255),f,b
  6404  002000  5171               	movf	(??_GetDay+2)& (0+255),w,b
  6405  002002  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6406  002004  5172               	movf	(??_GetDay+3)& (0+255),w,b
  6407  002006  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6408  002008  5177               	movf	GetDay@y& (0+255),w,b
  6409  00200A  2573               	addwf	(??_GetDay+4)& (0+255),w,b
  6410  00200C  6F68               	movwf	___awmod@dividend& (0+255),b
  6411  00200E  5178               	movf	(GetDay@y+1)& (0+255),w,b
  6412  002010  2174               	addwfc	(??_GetDay+5)& (0+255),w,b
  6413  002012  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  6414  002014  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  6415  002016  0E07               	movlw	7
  6416  002018  6F6A               	movwf	___awmod@divisor& (0+255),b
  6417  00201A  EC1F  F016         	call	___awmod	;wreg free
  6418  00201E  5168               	movf	?___awmod& (0+255),w,b
  6419                           
  6420                           ; BSR set to: 0
  6421  002020  0012               	return		;funcret
  6422  002022                     __end_of_GetDay:
  6423                           	opt stack 0
  6424  002022                     PL18:
  6425                           	opt stack 18
  6426  002022  26D9               	addwf	fsr2l,f,c
  6427  002024  50DF               	movf	indf2,w,c
  6428  002026  0D0A               	mullw	10
  6429  002028  50F3               	movf	prodl,w,c
  6430  00202A  0012               	return	
  6431  00202C                     __end_ofPL18:
  6432                           	opt stack 0
  6433  00202C                     PL88:
  6434                           	opt stack 18
  6435  00202C  6F62               	movwf	___awdiv@divisor& (0+255),b
  6436  00202E  C077  F060         	movff	GetDay@y,___awdiv@dividend
  6437  002032  C078  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  6438  002036  0012               	return	
  6439  002038                     __end_ofPL88:
  6440                           	opt stack 0
  6441  002038                     PL124:
  6442                           	opt stack 18
  6443  002038  6F6F               	movwf	??_GetDay& (0+255),b
  6444  00203A  516E               	movf	GetDay@Date& (0+255),w,b
  6445  00203C  6ED9               	movwf	fsr2l,c
  6446  00203E  6ADA               	clrf	fsr2h,c
  6447  002040  0012               	return	
  6448  002042                     __end_ofPL124:
  6449                           	opt stack 0
  6450                           tosu	equ	0xFFF
  6451                           tosh	equ	0xFFE
  6452                           tosl	equ	0xFFD
  6453                           pclath	equ	0xFFA
  6454                           tblptru	equ	0xFF8
  6455                           tblptrh	equ	0xFF7
  6456                           tblptrl	equ	0xFF6
  6457                           tablat	equ	0xFF5
  6458                           prodh	equ	0xFF4
  6459                           prodl	equ	0xFF3
  6460                           intcon	equ	0xFF2
  6461                           postinc0	equ	0xFEE
  6462                           plusw0	equ	0xFEB
  6463                           wreg	equ	0xFE8
  6464                           indf1	equ	0xFE7
  6465                           postinc1	equ	0xFE6
  6466                           postdec1	equ	0xFE5
  6467                           plusw1	equ	0xFE3
  6468                           fsr1h	equ	0xFE2
  6469                           fsr1l	equ	0xFE1
  6470                           indf2	equ	0xFDF
  6471                           postinc2	equ	0xFDE
  6472                           postdec2	equ	0xFDD
  6473                           plusw2	equ	0xFDB
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function ___awmod *****************
  6479 ;; Defined at:
  6480 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;  dividend        2    8[BANK0 ] int 
  6483 ;;  divisor         2   10[BANK0 ] int 
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;  sign            1   13[BANK0 ] unsigned char 
  6486 ;;  counter         1   12[BANK0 ] unsigned char 
  6487 ;; Return value:  Size  Location     Type
  6488 ;;                  2    8[BANK0 ] int 
  6489 ;; Registers used:
  6490 ;;		wreg, status,2, status,0
  6491 ;; Tracked objects:
  6492 ;;		On entry : 3F/0
  6493 ;;		On exit  : 3F/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6496 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6497 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6499 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6500 ;;Total ram usage:        6 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    9
  6503 ;; This function calls:
  6504 ;;		Nothing
  6505 ;; This function is called by:
  6506 ;;		_GetDay
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text25
  6511  002C3E                     __ptext25:
  6512                           	opt stack 0
  6513  002C3E                     ___awmod:
  6514                           	opt stack 18
  6515                           
  6516                           ; BSR set to: 0
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;incstack = 0
  6520  002C3E  6B6D               	clrf	___awmod@sign& (0+255),b
  6521                           
  6522                           ; BSR set to: 0
  6523  002C40  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6524  002C42  D006               	goto	l3381
  6525                           
  6526                           ; BSR set to: 0
  6527  002C44  6D68               	negf	___awmod@dividend& (0+255),b
  6528  002C46  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  6529  002C48  B0D8               	btfsc	status,0,c
  6530  002C4A  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  6531                           
  6532                           ; BSR set to: 0
  6533  002C4C  0E01               	movlw	1
  6534  002C4E  6F6D               	movwf	___awmod@sign& (0+255),b
  6535  002C50                     l3381:
  6536                           
  6537                           ; BSR set to: 0
  6538  002C50  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6539  002C52  D004               	goto	l3385
  6540                           
  6541                           ; BSR set to: 0
  6542  002C54  6D6A               	negf	___awmod@divisor& (0+255),b
  6543  002C56  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  6544  002C58  B0D8               	btfsc	status,0,c
  6545  002C5A  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  6546  002C5C                     l3385:
  6547                           
  6548                           ; BSR set to: 0
  6549  002C5C  516A               	movf	___awmod@divisor& (0+255),w,b
  6550  002C5E  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6551  002C60  E017               	bz	l3401
  6552                           
  6553                           ; BSR set to: 0
  6554  002C62  0E01               	movlw	1
  6555  002C64  6F6C               	movwf	___awmod@counter& (0+255),b
  6556  002C66  D004               	goto	l3391
  6557  002C68                     l3389:
  6558                           
  6559                           ; BSR set to: 0
  6560  002C68  90D8               	bcf	status,0,c
  6561  002C6A  376A               	rlcf	___awmod@divisor& (0+255),f,b
  6562  002C6C  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6563  002C6E  2B6C               	incf	___awmod@counter& (0+255),f,b
  6564  002C70                     l3391:
  6565                           
  6566                           ; BSR set to: 0
  6567  002C70  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6568  002C72  D7FA               	goto	l3389
  6569  002C74                     l3393:
  6570                           
  6571                           ; BSR set to: 0
  6572  002C74  516A               	movf	___awmod@divisor& (0+255),w,b
  6573  002C76  5D68               	subwf	___awmod@dividend& (0+255),w,b
  6574  002C78  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  6575  002C7A  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6576  002C7C  E304               	bnc	l3397
  6577                           
  6578                           ; BSR set to: 0
  6579  002C7E  516A               	movf	___awmod@divisor& (0+255),w,b
  6580  002C80  5F68               	subwf	___awmod@dividend& (0+255),f,b
  6581  002C82  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  6582  002C84  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6583  002C86                     l3397:
  6584                           
  6585                           ; BSR set to: 0
  6586  002C86  90D8               	bcf	status,0,c
  6587  002C88  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6588  002C8A  336A               	rrcf	___awmod@divisor& (0+255),f,b
  6589                           
  6590                           ; BSR set to: 0
  6591  002C8C  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  6592  002C8E  D7F2               	goto	l3393
  6593  002C90                     l3401:
  6594                           
  6595                           ; BSR set to: 0
  6596  002C90  516D               	movf	___awmod@sign& (0+255),w,b
  6597  002C92  E004               	bz	l3405
  6598                           
  6599                           ; BSR set to: 0
  6600  002C94  6D68               	negf	___awmod@dividend& (0+255),b
  6601  002C96  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  6602  002C98  B0D8               	btfsc	status,0,c
  6603  002C9A  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  6604  002C9C                     l3405:
  6605                           
  6606                           ; BSR set to: 0
  6607  002C9C  C068  F068         	movff	___awmod@dividend,?___awmod
  6608  002CA0  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  6609                           
  6610                           ; BSR set to: 0
  6611  002CA4  0012               	return		;funcret
  6612  002CA6                     __end_of___awmod:
  6613                           	opt stack 0
  6614                           tosu	equ	0xFFF
  6615                           tosh	equ	0xFFE
  6616                           tosl	equ	0xFFD
  6617                           pclath	equ	0xFFA
  6618                           tblptru	equ	0xFF8
  6619                           tblptrh	equ	0xFF7
  6620                           tblptrl	equ	0xFF6
  6621                           tablat	equ	0xFF5
  6622                           prodh	equ	0xFF4
  6623                           prodl	equ	0xFF3
  6624                           intcon	equ	0xFF2
  6625                           postinc0	equ	0xFEE
  6626                           plusw0	equ	0xFEB
  6627                           wreg	equ	0xFE8
  6628                           indf1	equ	0xFE7
  6629                           postinc1	equ	0xFE6
  6630                           postdec1	equ	0xFE5
  6631                           plusw1	equ	0xFE3
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           plusw2	equ	0xFDB
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _EUSART1_Initialize *****************
  6643 ;; Defined at:
  6644 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;		None
  6647 ;; Auto vars:     Size  Location     Type
  6648 ;;		None
  6649 ;; Return value:  Size  Location     Type
  6650 ;;                  1    wreg      void 
  6651 ;; Registers used:
  6652 ;;		wreg, status,2
  6653 ;; Tracked objects:
  6654 ;;		On entry : 3F/0
  6655 ;;		On exit  : 3F/0
  6656 ;;		Unchanged: 3F/0
  6657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6662 ;;Total ram usage:        0 bytes
  6663 ;; Hardware stack levels used:    1
  6664 ;; Hardware stack levels required when called:    9
  6665 ;; This function calls:
  6666 ;;		Nothing
  6667 ;; This function is called by:
  6668 ;;		_ReadGPS_DATE_TIME
  6669 ;;		_SYSTEM_Initialize
  6670 ;; This function uses a non-reentrant model
  6671 ;;
  6672                           
  6673                           	psect	text26
  6674  003198                     __ptext26:
  6675                           	opt stack 0
  6676  003198                     _EUSART1_Initialize:
  6677                           	opt stack 20
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;incstack = 0
  6684  003198  0E08               	movlw	8
  6685  00319A  6E9F               	movwf	3999,c	;volatile
  6686                           
  6687                           ;eusart1.c: 63: RC1STA = 0x90;
  6688  00319C  0E90               	movlw	144
  6689  00319E  6E9D               	movwf	3997,c	;volatile
  6690                           
  6691                           ;eusart1.c: 66: TX1STA = 0x84;
  6692  0031A0  0E84               	movlw	132
  6693  0031A2  6E9E               	movwf	3998,c	;volatile
  6694                           
  6695                           ;eusart1.c: 69: SP1BRGL = 0x67;
  6696  0031A4  0E67               	movlw	103
  6697  0031A6  6E9B               	movwf	3995,c	;volatile
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;eusart1.c: 72: SP1BRGH = 0x00;
  6701  0031A8  6A9C               	clrf	3996,c	;volatile
  6702                           
  6703                           ; BSR set to: 0
  6704  0031AA  0012               	return		;funcret
  6705  0031AC                     __end_of_EUSART1_Initialize:
  6706                           	opt stack 0
  6707                           tosu	equ	0xFFF
  6708                           tosh	equ	0xFFE
  6709                           tosl	equ	0xFFD
  6710                           pclath	equ	0xFFA
  6711                           tblptru	equ	0xFF8
  6712                           tblptrh	equ	0xFF7
  6713                           tblptrl	equ	0xFF6
  6714                           tablat	equ	0xFF5
  6715                           prodh	equ	0xFF4
  6716                           prodl	equ	0xFF3
  6717                           intcon	equ	0xFF2
  6718                           postinc0	equ	0xFEE
  6719                           plusw0	equ	0xFEB
  6720                           wreg	equ	0xFE8
  6721                           indf1	equ	0xFE7
  6722                           postinc1	equ	0xFE6
  6723                           postdec1	equ	0xFE5
  6724                           plusw1	equ	0xFE3
  6725                           fsr1h	equ	0xFE2
  6726                           fsr1l	equ	0xFE1
  6727                           indf2	equ	0xFDF
  6728                           postinc2	equ	0xFDE
  6729                           postdec2	equ	0xFDD
  6730                           plusw2	equ	0xFDB
  6731                           fsr2h	equ	0xFDA
  6732                           fsr2l	equ	0xFD9
  6733                           status	equ	0xFD8
  6734                           
  6735 ;; *************** function _AdjustDayLightSaving *****************
  6736 ;; Defined at:
  6737 ;;		line 93 in file "libs/funcs.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  Present         2   56[BANK0 ] unsigned short 
  6742 ;;  End             2   54[BANK0 ] unsigned short 
  6743 ;;  Start           2   52[BANK0 ] unsigned short 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  6746 ;; Registers used:
  6747 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 3F/0
  6750 ;;		On exit  : 3F/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6753 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6754 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6756 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6757 ;;Total ram usage:       17 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:   13
  6760 ;; This function calls:
  6761 ;;		_DecreaseByADay
  6762 ;;		_IncreaseByADay
  6763 ;;		___wmul
  6764 ;; This function is called by:
  6765 ;;		_ReadGPS_DATE_TIME
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text27
  6770  001E0E                     __ptext27:
  6771                           	opt stack 0
  6772  001E0E                     _AdjustDayLightSaving:
  6773                           	opt stack 15
  6774                           
  6775                           ; BSR set to: 0
  6776                           ;funcs.c: 94: UINT16 Start, End, Present;
  6777                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;incstack = 0
  6781  001E0E  C0DA  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  6782  001E12  C0DB  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  6783  001E16  D889               	call	PL134	;call to abstracted procedure
  6784  001E18  EC89  F018         	call	___wmul	;wreg free
  6785  001E1C  51D8               	movf	_DAY_LIGHT_START& (0+255),w,b
  6786  001E1E  2560               	addwf	?___wmul& (0+255),w,b
  6787  001E20  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  6788  001E22  51D9               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  6789  001E24  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6790  001E26  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  6791                           
  6792                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  6793  001E28  C0D6  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  6794  001E2C  C0D7  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  6795  001E30  D87C               	call	PL134	;call to abstracted procedure
  6796  001E32  EC89  F018         	call	___wmul	;wreg free
  6797  001E36  51D4               	movf	_DAY_LIGHT_END& (0+255),w,b
  6798  001E38  2560               	addwf	?___wmul& (0+255),w,b
  6799  001E3A  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  6800  001E3C  51D5               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  6801  001E3E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6802  001E40  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  6803                           
  6804                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  6805  001E42  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  6806  001E46  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  6807  001E4A  D86F               	call	PL134	;call to abstracted procedure
  6808  001E4C  EC89  F018         	call	___wmul	;wreg free
  6809  001E50  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  6810  001E52  2560               	addwf	?___wmul& (0+255),w,b
  6811  001E54  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  6812  001E56  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  6813  001E58  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6814  001E5A  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;funcs.c: 98: if (Start > End) {
  6818  001E5C  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  6819  001E5E  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  6820  001E60  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  6821  001E62  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  6822  001E64  E20F               	bc	l3611
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  6826  001E66  D85C               	call	PL114	;call to abstracted procedure
  6827  001E68  E205               	bc	l3609
  6828  001E6A                     l3607:
  6829                           
  6830                           ; BSR set to: 0
  6831  001E6A  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  6832  001E6C  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  6833  001E6E  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  6834  001E70  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  6835  001E72  E30B               	bnc	l641
  6836  001E74                     l3609:
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;funcs.c: 100: dt.SECOND += 3600;
  6840  001E74  0E10               	movlw	16
  6841  001E76  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6842  001E78  0E0E               	movlw	14
  6843  001E7A  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6844  001E7C  0E00               	movlw	0
  6845  001E7E  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6846  001E80  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6847  001E82  D003               	goto	l641
  6848  001E84                     l3611:
  6849                           
  6850                           ; BSR set to: 0
  6851                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  6852  001E84  D84D               	call	PL114	;call to abstracted procedure
  6853  001E86  E301               	bnc	l641
  6854  001E88  D7F0               	goto	l3607
  6855  001E8A                     l641:
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;funcs.c: 104: }
  6859                           ;funcs.c: 105: if (dt.SECOND < 0) {
  6860  001E8A  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  6861  001E8C  D01A               	goto	l3621
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;funcs.c: 106: dt.SECOND += 86400;
  6865  001E8E  0E80               	movlw	128
  6866  001E90  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6867  001E92  0E51               	movlw	81
  6868  001E94  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6869  001E96  0E01               	movlw	1
  6870  001E98  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6871  001E9A  0E00               	movlw	0
  6872  001E9C  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  6876  001E9E  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6877  001EA2  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  6878  001EA6  0E0A               	movlw	10
  6879  001EA8                     u3221:
  6880  001EA8  CFDB FFEB          	movff	plusw2,plusw0
  6881  001EAC  06E8               	decf	wreg,f,c
  6882  001EAE  E2FC               	bc	u3221
  6883  001EB0  EC1A  F011         	call	_DecreaseByADay	;wreg free
  6884  001EB4  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6885  001EB8  0E0A               	movlw	10
  6886  001EBA                     u3231:
  6887  001EBA  CFEB FFDB          	movff	plusw0,plusw2
  6888  001EBE  06E8               	decf	wreg,f,c
  6889  001EC0  E2FC               	bc	u3231
  6890  001EC2                     l3621:
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;funcs.c: 108: }
  6894                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  6895  001EC2  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  6896  001EC4  D023               	goto	l3627
  6897  001EC6  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  6898  001EC8  E107               	bnz	u3240
  6899  001ECA  0E81               	movlw	129
  6900  001ECC  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  6901  001ECE  0E51               	movlw	81
  6902  001ED0  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  6903  001ED2  0E01               	movlw	1
  6904  001ED4  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  6905  001ED6  E31A               	bnc	l3627
  6906  001ED8                     u3240:
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;funcs.c: 110: dt.SECOND -= 86400;
  6910  001ED8  0E80               	movlw	128
  6911  001EDA  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6912  001EDC  0EAE               	movlw	174
  6913  001EDE  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6914  001EE0  0EFE               	movlw	254
  6915  001EE2  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6916  001EE4  0EFF               	movlw	255
  6917  001EE6  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  6921  001EE8  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6922  001EEC  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  6923  001EF0  0E0A               	movlw	10
  6924  001EF2                     u3251:
  6925  001EF2  CFDB FFEB          	movff	plusw2,plusw0
  6926  001EF6  06E8               	decf	wreg,f,c
  6927  001EF8  E2FC               	bc	u3251
  6928  001EFA  EC5F  F013         	call	_IncreaseByADay	;wreg free
  6929  001EFE  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6930  001F02  0E0A               	movlw	10
  6931  001F04                     u3261:
  6932  001F04  CFEB FFDB          	movff	plusw0,plusw2
  6933  001F08  06E8               	decf	wreg,f,c
  6934  001F0A  E2FC               	bc	u3261
  6935  001F0C                     l3627:
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;funcs.c: 112: }
  6939                           ;funcs.c: 113: return dt;
  6940  001F0C  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6941  001F10  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  6942  001F14  0E0A               	movlw	10
  6943  001F16                     u3271:
  6944  001F16  CFDB FFEB          	movff	plusw2,plusw0
  6945  001F1A  06E8               	decf	wreg,f,c
  6946  001F1C  E2FC               	bc	u3271
  6947                           
  6948                           ; BSR set to: 0
  6949  001F1E  0012               	return		;funcret
  6950  001F20                     __end_of_AdjustDayLightSaving:
  6951                           	opt stack 0
  6952  001F20                     PL114:
  6953                           	opt stack 15
  6954  001F20  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  6955  001F22  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  6956  001F24  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  6957  001F26  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  6958  001F28  0012               	return	
  6959  001F2A                     __end_ofPL114:
  6960                           	opt stack 0
  6961  001F2A                     PL134:
  6962                           	opt stack 15
  6963  001F2A  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  6964  001F2C  0E64               	movlw	100
  6965  001F2E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6966  001F30  0C64               	retlw	100
  6967  001F32                     __end_ofPL134:
  6968                           	opt stack 0
  6969                           tosu	equ	0xFFF
  6970                           tosh	equ	0xFFE
  6971                           tosl	equ	0xFFD
  6972                           pclath	equ	0xFFA
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           intcon	equ	0xFF2
  6980                           postinc0	equ	0xFEE
  6981                           plusw0	equ	0xFEB
  6982                           wreg	equ	0xFE8
  6983                           indf1	equ	0xFE7
  6984                           postinc1	equ	0xFE6
  6985                           postdec1	equ	0xFE5
  6986                           plusw1	equ	0xFE3
  6987                           fsr1h	equ	0xFE2
  6988                           fsr1l	equ	0xFE1
  6989                           indf2	equ	0xFDF
  6990                           postinc2	equ	0xFDE
  6991                           postdec2	equ	0xFDD
  6992                           plusw2	equ	0xFDB
  6993                           fsr2h	equ	0xFDA
  6994                           fsr2l	equ	0xFD9
  6995                           status	equ	0xFD8
  6996                           
  6997 ;; *************** function _IncreaseByADay *****************
  6998 ;; Defined at:
  6999 ;;		line 12 in file "libs/funcs.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;  MonthDays       1   40[BANK0 ] char 
  7004 ;; Return value:  Size  Location     Type
  7005 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  7006 ;; Registers used:
  7007 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 3F/0
  7010 ;;		On exit  : 3F/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7013 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7016 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7017 ;;Total ram usage:       14 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:   12
  7020 ;; This function calls:
  7021 ;;		_IncreaseByAMonth
  7022 ;;		___lwmod
  7023 ;; This function is called by:
  7024 ;;		_AdjustDayLightSaving
  7025 ;;		_ReadGPS_DATE_TIME
  7026 ;; This function uses a non-reentrant model
  7027 ;;
  7028                           
  7029                           	psect	text28
  7030  0026BE                     __ptext28:
  7031                           	opt stack 0
  7032  0026BE                     _IncreaseByADay:
  7033                           	opt stack 16
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;funcs.c: 13: dt.DATE.Day++;
  7037                           
  7038                           ; BSR set to: 0
  7039                           ;incstack = 0
  7040  0026BE  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  7041  0026C0  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  7045  0026C2  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  7046  0026C4  0B7F               	andlw	127
  7047  0026C6  06E8               	decf	wreg,f,c
  7048  0026C8  E104               	bnz	l3249
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  7052  0026CA  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  7053  0026CC  0B01               	andlw	-255
  7054  0026CE  0980               	iorlw	128
  7055  0026D0  D00A               	goto	L5
  7056  0026D2                     l3249:
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;funcs.c: 16: else
  7060                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  7061  0026D2  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  7062  0026D4  0B7F               	andlw	127
  7063  0026D6  6F86               	movwf	??_IncreaseByADay& (0+255),b
  7064  0026D8  90D8               	bcf	status,0,c
  7065  0026DA  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  7066  0026DC  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  7067  0026DE  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  7068  0026E0  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  7069  0026E2  0B01               	andlw	-255
  7070  0026E4  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  7071  0026E6                     L5:
  7072  0026E6  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  7073                           
  7074                           ; BSR set to: 0
  7075                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  7076  0026E8  90D8               	bcf	status,0,c
  7077  0026EA  3581               	rlcf	(IncreaseByADay@dt+6)& (0+255),w,b
  7078  0026EC  6ED9               	movwf	fsr2l,c
  7079  0026EE  3582               	rlcf	(IncreaseByADay@dt+7)& (0+255),w,b
  7080  0026F0  EC81  F011         	call	PL76	;call to abstracted procedure
  7081  0026F4  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  7085  0026F6  0E02               	movlw	2
  7086  0026F8  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7087  0026FA  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7088  0026FC  E107               	bnz	l3259
  7089                           
  7090                           ; BSR set to: 0
  7091  0026FE  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  7092  002702  0E03               	movlw	3
  7093  002704  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  7094  002706  E102               	bnz	l3259
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;funcs.c: 20: MonthDays = 29;
  7098  002708  0E1D               	movlw	29
  7099  00270A  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7100  00270C                     l3259:
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  7104  00270C  0E02               	movlw	2
  7105  00270E  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7106  002710  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7107  002712  E10A               	bnz	l3265
  7108                           
  7109                           ; BSR set to: 0
  7110  002714  D840               	call	PL122	;call to abstracted procedure
  7111  002716  EC3B  F018         	call	PL128	;call to abstracted procedure
  7112  00271A  ECAE  F017         	call	___lwmod	;wreg free
  7113  00271E  5160               	movf	?___lwmod& (0+255),w,b
  7114  002720  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7115  002722  E102               	bnz	l3265
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;funcs.c: 22: MonthDays = 28;
  7119  002724  0E1C               	movlw	28
  7120  002726  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7121  002728                     l3265:
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  7125  002728  0E02               	movlw	2
  7126  00272A  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7127  00272C  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7128  00272E  E10A               	bnz	l3271
  7129                           
  7130                           ; BSR set to: 0
  7131  002730  D832               	call	PL122	;call to abstracted procedure
  7132  002732  EC88  F011         	call	PL116	;call to abstracted procedure
  7133  002736  ECAE  F017         	call	___lwmod	;wreg free
  7134  00273A  5160               	movf	?___lwmod& (0+255),w,b
  7135  00273C  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7136  00273E  E102               	bnz	l3271
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;funcs.c: 24: MonthDays = 29;
  7140  002740  0E1D               	movlw	29
  7141  002742  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7142  002744                     l3271:
  7143                           
  7144                           ; BSR set to: 0
  7145                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  7146  002744  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  7147  002748  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  7148  00274A  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  7149  00274C  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  7150  00274E  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  7151  002750  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  7152  002752  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  7153  002754  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  7154  002756  E215               	bc	l3277
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;funcs.c: 26: dt.DATE.Day = 1;
  7158  002758  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  7159  00275A  0E01               	movlw	1
  7160  00275C  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  7164  00275E  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7165  002762  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  7166  002766  0E0A               	movlw	10
  7167  002768                     u2571:
  7168  002768  CFDB FFEB          	movff	plusw2,plusw0
  7169  00276C  06E8               	decf	wreg,f,c
  7170  00276E  E2FC               	bc	u2571
  7171  002770  EC00  F017         	call	_IncreaseByAMonth	;wreg free
  7172  002774  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7173  002778  0E0A               	movlw	10
  7174  00277A                     u2581:
  7175  00277A  CFEB FFDB          	movff	plusw0,plusw2
  7176  00277E  06E8               	decf	wreg,f,c
  7177  002780  E2FC               	bc	u2581
  7178  002782                     l3277:
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;funcs.c: 28: }
  7182                           ;funcs.c: 29: return dt;
  7183  002782  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7184  002786  EE00  F07B         	lfsr	0,?_IncreaseByADay
  7185  00278A  0E0A               	movlw	10
  7186  00278C                     u2591:
  7187  00278C  CFDB FFEB          	movff	plusw2,plusw0
  7188  002790  06E8               	decf	wreg,f,c
  7189  002792  E2FC               	bc	u2591
  7190                           
  7191                           ; BSR set to: 0
  7192  002794  0012               	return		;funcret
  7193  002796                     __end_of_IncreaseByADay:
  7194                           	opt stack 0
  7195  002796                     PL122:
  7196                           	opt stack 16
  7197  002796  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  7198  00279A  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  7199  00279E  0012               	return	
  7200  0027A0                     __end_ofPL122:
  7201                           	opt stack 0
  7202                           tosu	equ	0xFFF
  7203                           tosh	equ	0xFFE
  7204                           tosl	equ	0xFFD
  7205                           pclath	equ	0xFFA
  7206                           tblptru	equ	0xFF8
  7207                           tblptrh	equ	0xFF7
  7208                           tblptrl	equ	0xFF6
  7209                           tablat	equ	0xFF5
  7210                           prodh	equ	0xFF4
  7211                           prodl	equ	0xFF3
  7212                           intcon	equ	0xFF2
  7213                           postinc0	equ	0xFEE
  7214                           plusw0	equ	0xFEB
  7215                           wreg	equ	0xFE8
  7216                           indf1	equ	0xFE7
  7217                           postinc1	equ	0xFE6
  7218                           postdec1	equ	0xFE5
  7219                           plusw1	equ	0xFE3
  7220                           fsr1h	equ	0xFE2
  7221                           fsr1l	equ	0xFE1
  7222                           indf2	equ	0xFDF
  7223                           postinc2	equ	0xFDE
  7224                           postdec2	equ	0xFDD
  7225                           plusw2	equ	0xFDB
  7226                           fsr2h	equ	0xFDA
  7227                           fsr2l	equ	0xFD9
  7228                           status	equ	0xFD8
  7229                           
  7230 ;; *************** function _IncreaseByAMonth *****************
  7231 ;; Defined at:
  7232 ;;		line 32 in file "libs/funcs.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  7239 ;; Registers used:
  7240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 3F/0
  7243 ;;		On exit  : 3F/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7246 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7249 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7250 ;;Total ram usage:       11 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:   11
  7253 ;; This function calls:
  7254 ;;		_IncreaseByAYear
  7255 ;; This function is called by:
  7256 ;;		_IncreaseByADay
  7257 ;; This function uses a non-reentrant model
  7258 ;;
  7259                           
  7260                           	psect	text29
  7261  002E00                     __ptext29:
  7262                           	opt stack 0
  7263  002E00                     _IncreaseByAMonth:
  7264                           	opt stack 16
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;funcs.c: 33: dt.DATE.Month++;
  7268                           
  7269                           ; BSR set to: 0
  7270                           ;incstack = 0
  7271  002E00  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  7272  002E02  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  7276  002E04  0E0D               	movlw	13
  7277  002E06  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  7278  002E08  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  7279  002E0A  E115               	bnz	l3169
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;funcs.c: 35: dt.DATE.Month = 1;
  7283  002E0C  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  7284  002E0E  0E01               	movlw	1
  7285  002E10  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  7289  002E12  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7290  002E16  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  7291  002E1A  0E0A               	movlw	10
  7292  002E1C                     u2251:
  7293  002E1C  CFDB FFEB          	movff	plusw2,plusw0
  7294  002E20  06E8               	decf	wreg,f,c
  7295  002E22  E2FC               	bc	u2251
  7296  002E24  EC24  F018         	call	_IncreaseByAYear	;wreg free
  7297  002E28  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7298  002E2C  0E0A               	movlw	10
  7299  002E2E                     u2261:
  7300  002E2E  CFEB FFDB          	movff	plusw0,plusw2
  7301  002E32  06E8               	decf	wreg,f,c
  7302  002E34  E2FC               	bc	u2261
  7303  002E36                     l3169:
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;funcs.c: 37: }
  7307                           ;funcs.c: 38: return dt;
  7308  002E36  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7309  002E3A  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  7310  002E3E  0E0A               	movlw	10
  7311  002E40                     u2271:
  7312  002E40  CFDB FFEB          	movff	plusw2,plusw0
  7313  002E44  06E8               	decf	wreg,f,c
  7314  002E46  E2FC               	bc	u2271
  7315                           
  7316                           ; BSR set to: 0
  7317  002E48  0012               	return		;funcret
  7318  002E4A                     __end_of_IncreaseByAMonth:
  7319                           	opt stack 0
  7320                           tosu	equ	0xFFF
  7321                           tosh	equ	0xFFE
  7322                           tosl	equ	0xFFD
  7323                           pclath	equ	0xFFA
  7324                           tblptru	equ	0xFF8
  7325                           tblptrh	equ	0xFF7
  7326                           tblptrl	equ	0xFF6
  7327                           tablat	equ	0xFF5
  7328                           prodh	equ	0xFF4
  7329                           prodl	equ	0xFF3
  7330                           intcon	equ	0xFF2
  7331                           postinc0	equ	0xFEE
  7332                           plusw0	equ	0xFEB
  7333                           wreg	equ	0xFE8
  7334                           indf1	equ	0xFE7
  7335                           postinc1	equ	0xFE6
  7336                           postdec1	equ	0xFE5
  7337                           plusw1	equ	0xFE3
  7338                           fsr1h	equ	0xFE2
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           plusw2	equ	0xFDB
  7344                           fsr2h	equ	0xFDA
  7345                           fsr2l	equ	0xFD9
  7346                           status	equ	0xFD8
  7347                           
  7348 ;; *************** function _IncreaseByAYear *****************
  7349 ;; Defined at:
  7350 ;;		line 41 in file "libs/funcs.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  7353 ;; Auto vars:     Size  Location     Type
  7354 ;;		None
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  7357 ;; Registers used:
  7358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 3F/0
  7361 ;;		On exit  : 3F/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7364 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7367 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7368 ;;Total ram usage:       11 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:   10
  7371 ;; This function calls:
  7372 ;;		___lwmod
  7373 ;; This function is called by:
  7374 ;;		_IncreaseByAMonth
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           	psect	text30
  7379  003048                     __ptext30:
  7380                           	opt stack 0
  7381  003048                     _IncreaseByAYear:
  7382                           	opt stack 16
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;funcs.c: 42: dt.YEAR++;
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;incstack = 0
  7389  003048  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  7390  00304A  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  7391                           
  7392                           ; BSR set to: 0
  7393                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  7394  00304C  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  7395  003050  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  7396  003054  D810               	call	PL128	;call to abstracted procedure
  7397  003056  ECAE  F017         	call	___lwmod	;wreg free
  7398  00305A  5160               	movf	?___lwmod& (0+255),w,b
  7399  00305C  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7400  00305E  E101               	bnz	l3137
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;funcs.c: 44: CENTURY++;
  7404  003060  2BF7               	incf	_CENTURY& (0+255),f,b
  7405  003062                     l3137:
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;funcs.c: 45: return dt;
  7409  003062  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  7410  003066  EE00  F065         	lfsr	0,?_IncreaseByAYear
  7411  00306A  0E0A               	movlw	10
  7412  00306C                     u2171:
  7413  00306C  CFDB FFEB          	movff	plusw2,plusw0
  7414  003070  06E8               	decf	wreg,f,c
  7415  003072  E2FC               	bc	u2171
  7416                           
  7417                           ; BSR set to: 0
  7418  003074  0012               	return		;funcret
  7419  003076                     __end_of_IncreaseByAYear:
  7420                           	opt stack 0
  7421  003076                     PL128:
  7422                           	opt stack 16
  7423  003076  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  7424  003078  0E64               	movlw	100
  7425  00307A  6F62               	movwf	___lwmod@divisor& (0+255),b
  7426  00307C  0C64               	retlw	100
  7427  00307E                     __end_ofPL128:
  7428                           	opt stack 0
  7429                           tosu	equ	0xFFF
  7430                           tosh	equ	0xFFE
  7431                           tosl	equ	0xFFD
  7432                           pclath	equ	0xFFA
  7433                           tblptru	equ	0xFF8
  7434                           tblptrh	equ	0xFF7
  7435                           tblptrl	equ	0xFF6
  7436                           tablat	equ	0xFF5
  7437                           prodh	equ	0xFF4
  7438                           prodl	equ	0xFF3
  7439                           intcon	equ	0xFF2
  7440                           postinc0	equ	0xFEE
  7441                           plusw0	equ	0xFEB
  7442                           wreg	equ	0xFE8
  7443                           indf1	equ	0xFE7
  7444                           postinc1	equ	0xFE6
  7445                           postdec1	equ	0xFE5
  7446                           plusw1	equ	0xFE3
  7447                           fsr1h	equ	0xFE2
  7448                           fsr1l	equ	0xFE1
  7449                           indf2	equ	0xFDF
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           plusw2	equ	0xFDB
  7453                           fsr2h	equ	0xFDA
  7454                           fsr2l	equ	0xFD9
  7455                           status	equ	0xFD8
  7456                           
  7457 ;; *************** function _DecreaseByADay *****************
  7458 ;; Defined at:
  7459 ;;		line 57 in file "libs/funcs.c"
  7460 ;; Parameters:    Size  Location     Type
  7461 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  MonthDays       1   39[BANK0 ] char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  7466 ;; Registers used:
  7467 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 3F/0
  7470 ;;		On exit  : 3F/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7473 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7476 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7477 ;;Total ram usage:       13 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:   12
  7480 ;; This function calls:
  7481 ;;		_DecreaseByAMonth
  7482 ;;		___lwmod
  7483 ;; This function is called by:
  7484 ;;		_AdjustDayLightSaving
  7485 ;;		_ReadGPS_DATE_TIME
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           	psect	text31
  7490  002234                     __ptext31:
  7491                           	opt stack 0
  7492  002234                     _DecreaseByADay:
  7493                           	opt stack 16
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;incstack = 0
  7500  002234  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  7501  002236  0B7F               	andlw	127
  7502  002238  0A40               	xorlw	64
  7503  00223A  E104               	bnz	l3285
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  7507  00223C  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  7508  00223E  0B01               	andlw	-255
  7509  002240  0902               	iorlw	2
  7510  002242  D00A               	goto	L6
  7511  002244                     l3285:
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;funcs.c: 60: else
  7515                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  7516  002244  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  7517  002246  0B7F               	andlw	127
  7518  002248  6F86               	movwf	??_DecreaseByADay& (0+255),b
  7519  00224A  90D8               	bcf	status,0,c
  7520  00224C  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  7521  00224E  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  7522  002250  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  7523  002252  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  7524  002254  0B01               	andlw	-255
  7525  002256  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  7526  002258                     L6:
  7527  002258  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  7531  00225A  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  7532  00225C  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  7533  00225E  E144               	bnz	l3309
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  7537  002260  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7538  002264  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  7539  002268  0E0A               	movlw	10
  7540  00226A                     u2621:
  7541  00226A  CFDB FFEB          	movff	plusw2,plusw0
  7542  00226E  06E8               	decf	wreg,f,c
  7543  002270  E2FC               	bc	u2621
  7544  002272  ECDA  F016         	call	_DecreaseByAMonth	;wreg free
  7545  002276  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7546  00227A  0E0A               	movlw	10
  7547  00227C                     u2631:
  7548  00227C  CFEB FFDB          	movff	plusw0,plusw2
  7549  002280  06E8               	decf	wreg,f,c
  7550  002282  E2FC               	bc	u2631
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  7554  002284  90D8               	bcf	status,0,c
  7555  002286  3581               	rlcf	(DecreaseByADay@dt+6)& (0+255),w,b
  7556  002288  6ED9               	movwf	fsr2l,c
  7557  00228A  3582               	rlcf	(DecreaseByADay@dt+7)& (0+255),w,b
  7558  00228C  D83A               	call	PL76	;call to abstracted procedure
  7559  00228E  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  7563  002290  0E02               	movlw	2
  7564  002292  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7565  002294  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7566  002296  E107               	bnz	l3297
  7567                           
  7568                           ; BSR set to: 0
  7569  002298  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  7570  00229C  0E03               	movlw	3
  7571  00229E  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  7572  0022A0  E102               	bnz	l3297
  7573                           
  7574                           ; BSR set to: 0
  7575                           ;funcs.c: 66: MonthDays = 29;
  7576  0022A2  0E1D               	movlw	29
  7577  0022A4  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7578  0022A6                     l3297:
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  7582  0022A6  0E02               	movlw	2
  7583  0022A8  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7584  0022AA  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7585  0022AC  E10A               	bnz	l3303
  7586                           
  7587                           ; BSR set to: 0
  7588  0022AE  D835               	call	PL120	;call to abstracted procedure
  7589  0022B0  EC3B  F018         	call	PL128	;call to abstracted procedure
  7590  0022B4  ECAE  F017         	call	___lwmod	;wreg free
  7591  0022B8  5160               	movf	?___lwmod& (0+255),w,b
  7592  0022BA  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7593  0022BC  E102               	bnz	l3303
  7594                           
  7595                           ; BSR set to: 0
  7596                           ;funcs.c: 68: MonthDays = 28;
  7597  0022BE  0E1C               	movlw	28
  7598  0022C0  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7599  0022C2                     l3303:
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  7603  0022C2  0E02               	movlw	2
  7604  0022C4  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7605  0022C6  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7606  0022C8  E109               	bnz	l623
  7607                           
  7608                           ; BSR set to: 0
  7609  0022CA  D827               	call	PL120	;call to abstracted procedure
  7610  0022CC  D821               	call	PL116	;call to abstracted procedure
  7611  0022CE  ECAE  F017         	call	___lwmod	;wreg free
  7612  0022D2  5160               	movf	?___lwmod& (0+255),w,b
  7613  0022D4  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7614  0022D6  E102               	bnz	l623
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;funcs.c: 70: MonthDays = 29;
  7618  0022D8  0E1D               	movlw	29
  7619  0022DA  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7620  0022DC                     l623:
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  7624  0022DC  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  7625  0022DE  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  7626  0022E0  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  7627  0022E2  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  7628  0022E4  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  7629                           
  7630                           ;funcs.c: 72: } else
  7631  0022E6  D003               	goto	l3311
  7632  0022E8                     l3309:
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;funcs.c: 73: dt.DATE.Day--;
  7636  0022E8  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  7637  0022EA  A0D8               	btfss	status,0,c
  7638  0022EC  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  7639  0022EE                     l3311:
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;funcs.c: 74: return dt;
  7643  0022EE  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7644  0022F2  EE00  F07B         	lfsr	0,?_DecreaseByADay
  7645  0022F6  0E0A               	movlw	10
  7646  0022F8                     u2701:
  7647  0022F8  CFDB FFEB          	movff	plusw2,plusw0
  7648  0022FC  06E8               	decf	wreg,f,c
  7649  0022FE  E2FC               	bc	u2701
  7650                           
  7651                           ; BSR set to: 0
  7652  002300  0012               	return		;funcret
  7653  002302                     __end_of_DecreaseByADay:
  7654                           	opt stack 0
  7655  002302                     PL76:
  7656                           	opt stack 16
  7657  002302  6EDA               	movwf	fsr2h,c
  7658  002304  0E42               	movlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  7659  002306  26D9               	addwf	fsr2l,f,c
  7660  002308  0E01               	movlw	high (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  7661  00230A  22DA               	addwfc	fsr2h,f,c
  7662  00230C  50DF               	movf	indf2,w,c
  7663  00230E  0012               	return	
  7664  002310                     __end_ofPL76:
  7665                           	opt stack 0
  7666  002310                     PL116:
  7667                           	opt stack 16
  7668  002310  0E01               	movlw	1
  7669  002312  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  7670  002314  0E90               	movlw	144
  7671  002316  6F62               	movwf	___lwmod@divisor& (0+255),b
  7672  002318  0C90               	retlw	144
  7673  00231A                     __end_ofPL116:
  7674                           	opt stack 0
  7675  00231A                     PL120:
  7676                           	opt stack 16
  7677  00231A  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  7678  00231E  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  7679  002322  0012               	return	
  7680  002324                     __end_ofPL120:
  7681                           	opt stack 0
  7682                           tosu	equ	0xFFF
  7683                           tosh	equ	0xFFE
  7684                           tosl	equ	0xFFD
  7685                           pclath	equ	0xFFA
  7686                           tblptru	equ	0xFF8
  7687                           tblptrh	equ	0xFF7
  7688                           tblptrl	equ	0xFF6
  7689                           tablat	equ	0xFF5
  7690                           prodh	equ	0xFF4
  7691                           prodl	equ	0xFF3
  7692                           intcon	equ	0xFF2
  7693                           postinc0	equ	0xFEE
  7694                           plusw0	equ	0xFEB
  7695                           wreg	equ	0xFE8
  7696                           indf1	equ	0xFE7
  7697                           postinc1	equ	0xFE6
  7698                           postdec1	equ	0xFE5
  7699                           plusw1	equ	0xFE3
  7700                           fsr1h	equ	0xFE2
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           plusw2	equ	0xFDB
  7706                           fsr2h	equ	0xFDA
  7707                           fsr2l	equ	0xFD9
  7708                           status	equ	0xFD8
  7709                           
  7710 ;; *************** function _DecreaseByAMonth *****************
  7711 ;; Defined at:
  7712 ;;		line 77 in file "libs/funcs.c"
  7713 ;; Parameters:    Size  Location     Type
  7714 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  7719 ;; Registers used:
  7720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 3F/0
  7723 ;;		On exit  : 3F/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7726 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7729 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7730 ;;Total ram usage:       11 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:   11
  7733 ;; This function calls:
  7734 ;;		_DecreaseByAYear
  7735 ;; This function is called by:
  7736 ;;		_DecreaseByADay
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text32
  7741  002DB4                     __ptext32:
  7742                           	opt stack 0
  7743  002DB4                     _DecreaseByAMonth:
  7744                           	opt stack 16
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;incstack = 0
  7751  002DB4  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  7752  002DB6  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  7753  002DB8  E116               	bnz	l3179
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;funcs.c: 79: dt.DATE.Month = 12;
  7757  002DBA  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  7758  002DBC  0E0C               	movlw	12
  7759  002DBE  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  7763  002DC0  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7764  002DC4  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  7765  002DC8  0E0A               	movlw	10
  7766  002DCA                     u2291:
  7767  002DCA  CFDB FFEB          	movff	plusw2,plusw0
  7768  002DCE  06E8               	decf	wreg,f,c
  7769  002DD0  E2FC               	bc	u2291
  7770  002DD2  EC58  F018         	call	_DecreaseByAYear	;wreg free
  7771  002DD6  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7772  002DDA  0E0A               	movlw	10
  7773  002DDC                     u2301:
  7774  002DDC  CFEB FFDB          	movff	plusw0,plusw2
  7775  002DE0  06E8               	decf	wreg,f,c
  7776  002DE2  E2FC               	bc	u2301
  7777                           
  7778                           ;funcs.c: 81: } else
  7779  002DE4  D003               	goto	l3181
  7780  002DE6                     l3179:
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;funcs.c: 82: dt.DATE.Month--;
  7784  002DE6  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  7785  002DE8  A0D8               	btfss	status,0,c
  7786  002DEA  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  7787  002DEC                     l3181:
  7788                           
  7789                           ; BSR set to: 0
  7790                           ;funcs.c: 83: return dt;
  7791  002DEC  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7792  002DF0  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  7793  002DF4  0E0A               	movlw	10
  7794  002DF6                     u2311:
  7795  002DF6  CFDB FFEB          	movff	plusw2,plusw0
  7796  002DFA  06E8               	decf	wreg,f,c
  7797  002DFC  E2FC               	bc	u2311
  7798                           
  7799                           ; BSR set to: 0
  7800  002DFE  0012               	return		;funcret
  7801  002E00                     __end_of_DecreaseByAMonth:
  7802                           	opt stack 0
  7803                           tosu	equ	0xFFF
  7804                           tosh	equ	0xFFE
  7805                           tosl	equ	0xFFD
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           intcon	equ	0xFF2
  7814                           postinc0	equ	0xFEE
  7815                           plusw0	equ	0xFEB
  7816                           wreg	equ	0xFE8
  7817                           indf1	equ	0xFE7
  7818                           postinc1	equ	0xFE6
  7819                           postdec1	equ	0xFE5
  7820                           plusw1	equ	0xFE3
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           plusw2	equ	0xFDB
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _DecreaseByAYear *****************
  7832 ;; Defined at:
  7833 ;;		line 86 in file "libs/funcs.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 3F/0
  7844 ;;		On exit  : 3F/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7847 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7850 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7851 ;;Total ram usage:       11 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:   10
  7854 ;; This function calls:
  7855 ;;		___lwmod
  7856 ;; This function is called by:
  7857 ;;		_DecreaseByAMonth
  7858 ;; This function uses a non-reentrant model
  7859 ;;
  7860                           
  7861                           	psect	text33
  7862  0030B0                     __ptext33:
  7863                           	opt stack 0
  7864  0030B0                     _DecreaseByAYear:
  7865                           	opt stack 16
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  7869                           
  7870                           ; BSR set to: 0
  7871                           ;incstack = 0
  7872  0030B0  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  7873  0030B4  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  7874  0030B8  EC3B  F018         	call	PL128	;call to abstracted procedure
  7875  0030BC  ECAE  F017         	call	___lwmod	;wreg free
  7876  0030C0  5160               	movf	?___lwmod& (0+255),w,b
  7877  0030C2  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7878  0030C4  E101               	bnz	l633
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;funcs.c: 88: CENTURY--;
  7882  0030C6  07F7               	decf	_CENTURY& (0+255),f,b
  7883  0030C8                     l633:
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;funcs.c: 89: dt.YEAR--;
  7887  0030C8  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  7888  0030CA  A0D8               	btfss	status,0,c
  7889  0030CC  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  7890                           
  7891                           ; BSR set to: 0
  7892                           ;funcs.c: 90: return dt;
  7893  0030CE  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  7894  0030D2  EE00  F065         	lfsr	0,?_DecreaseByAYear
  7895  0030D6  0E0A               	movlw	10
  7896  0030D8                     u2191:
  7897  0030D8  CFDB FFEB          	movff	plusw2,plusw0
  7898  0030DC  06E8               	decf	wreg,f,c
  7899  0030DE  E2FC               	bc	u2191
  7900                           
  7901                           ; BSR set to: 0
  7902  0030E0  0012               	return		;funcret
  7903  0030E2                     __end_of_DecreaseByAYear:
  7904                           	opt stack 0
  7905                           tosu	equ	0xFFF
  7906                           tosh	equ	0xFFE
  7907                           tosl	equ	0xFFD
  7908                           pclath	equ	0xFFA
  7909                           tblptru	equ	0xFF8
  7910                           tblptrh	equ	0xFF7
  7911                           tblptrl	equ	0xFF6
  7912                           tablat	equ	0xFF5
  7913                           prodh	equ	0xFF4
  7914                           prodl	equ	0xFF3
  7915                           intcon	equ	0xFF2
  7916                           postinc0	equ	0xFEE
  7917                           plusw0	equ	0xFEB
  7918                           wreg	equ	0xFE8
  7919                           indf1	equ	0xFE7
  7920                           postinc1	equ	0xFE6
  7921                           postdec1	equ	0xFE5
  7922                           plusw1	equ	0xFE3
  7923                           fsr1h	equ	0xFE2
  7924                           fsr1l	equ	0xFE1
  7925                           indf2	equ	0xFDF
  7926                           postinc2	equ	0xFDE
  7927                           postdec2	equ	0xFDD
  7928                           plusw2	equ	0xFDB
  7929                           fsr2h	equ	0xFDA
  7930                           fsr2l	equ	0xFD9
  7931                           status	equ	0xFD8
  7932                           
  7933 ;; *************** function ___lwmod *****************
  7934 ;; Defined at:
  7935 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  7936 ;; Parameters:    Size  Location     Type
  7937 ;;  dividend        2    0[BANK0 ] unsigned int 
  7938 ;;  divisor         2    2[BANK0 ] unsigned int 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  counter         1    4[BANK0 ] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;                  2    0[BANK0 ] unsigned int 
  7943 ;; Registers used:
  7944 ;;		wreg, status,2, status,0
  7945 ;; Tracked objects:
  7946 ;;		On entry : 3F/0
  7947 ;;		On exit  : 3F/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7953 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7954 ;;Total ram usage:        5 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    9
  7957 ;; This function calls:
  7958 ;;		Nothing
  7959 ;; This function is called by:
  7960 ;;		_IncreaseByADay
  7961 ;;		_IncreaseByAYear
  7962 ;;		_DecreaseByADay
  7963 ;;		_DecreaseByAYear
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           	psect	text34
  7968  002F5C                     __ptext34:
  7969                           	opt stack 0
  7970  002F5C                     ___lwmod:
  7971                           	opt stack 18
  7972                           
  7973                           ; BSR set to: 0
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;incstack = 0
  7977  002F5C  5162               	movf	___lwmod@divisor& (0+255),w,b
  7978  002F5E  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7979  002F60  E017               	bz	l1548
  7980                           
  7981                           ; BSR set to: 0
  7982  002F62  0E01               	movlw	1
  7983  002F64  6F64               	movwf	___lwmod@counter& (0+255),b
  7984  002F66  D004               	goto	l3111
  7985  002F68                     l3109:
  7986                           
  7987                           ; BSR set to: 0
  7988  002F68  90D8               	bcf	status,0,c
  7989  002F6A  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  7990  002F6C  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7991  002F6E  2B64               	incf	___lwmod@counter& (0+255),f,b
  7992  002F70                     l3111:
  7993                           
  7994                           ; BSR set to: 0
  7995  002F70  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7996  002F72  D7FA               	goto	l3109
  7997  002F74                     l3113:
  7998                           
  7999                           ; BSR set to: 0
  8000  002F74  5162               	movf	___lwmod@divisor& (0+255),w,b
  8001  002F76  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  8002  002F78  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8003  002F7A  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8004  002F7C  E304               	bnc	l3117
  8005                           
  8006                           ; BSR set to: 0
  8007  002F7E  5162               	movf	___lwmod@divisor& (0+255),w,b
  8008  002F80  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  8009  002F82  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8010  002F84  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8011  002F86                     l3117:
  8012                           
  8013                           ; BSR set to: 0
  8014  002F86  90D8               	bcf	status,0,c
  8015  002F88  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8016  002F8A  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  8017                           
  8018                           ; BSR set to: 0
  8019  002F8C  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  8020  002F8E  D7F2               	goto	l3113
  8021  002F90                     l1548:
  8022                           
  8023                           ; BSR set to: 0
  8024  002F90  C060  F060         	movff	___lwmod@dividend,?___lwmod
  8025  002F94  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  8026                           
  8027                           ; BSR set to: 0
  8028  002F98  0012               	return		;funcret
  8029  002F9A                     __end_of___lwmod:
  8030                           	opt stack 0
  8031                           tosu	equ	0xFFF
  8032                           tosh	equ	0xFFE
  8033                           tosl	equ	0xFFD
  8034                           pclath	equ	0xFFA
  8035                           tblptru	equ	0xFF8
  8036                           tblptrh	equ	0xFF7
  8037                           tblptrl	equ	0xFF6
  8038                           tablat	equ	0xFF5
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           postinc0	equ	0xFEE
  8043                           plusw0	equ	0xFEB
  8044                           wreg	equ	0xFE8
  8045                           indf1	equ	0xFE7
  8046                           postinc1	equ	0xFE6
  8047                           postdec1	equ	0xFE5
  8048                           plusw1	equ	0xFE3
  8049                           fsr1h	equ	0xFE2
  8050                           fsr1l	equ	0xFE1
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           plusw2	equ	0xFDB
  8055                           fsr2h	equ	0xFDA
  8056                           fsr2l	equ	0xFD9
  8057                           status	equ	0xFD8
  8058                           
  8059 ;; *************** function _LoadAllFromEeprom *****************
  8060 ;; Defined at:
  8061 ;;		line 177 in file "libs/eeprom.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;		None
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;		None
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      void 
  8068 ;; Registers used:
  8069 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 3F/0
  8072 ;;		On exit  : 3F/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8079 ;;Total ram usage:        0 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:   11
  8082 ;; This function calls:
  8083 ;;		_LoadCyclesFromEeprom
  8084 ;;		_LoadEventsFromEeprom
  8085 ;;		_LoadSettingsFromEeprom
  8086 ;;		_LoadStatesFromEeprom
  8087 ;; This function is called by:
  8088 ;;		_main
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text35
  8093  0031F8                     __ptext35:
  8094                           	opt stack 0
  8095  0031F8                     _LoadAllFromEeprom:
  8096                           	opt stack 19
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;eeprom.c: 178: LoadSettingsFromEeprom ();
  8100                           
  8101                           ; BSR set to: 0
  8102                           ;incstack = 0
  8103  0031F8  ECA5  F00A         	call	_LoadSettingsFromEeprom	;wreg free
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;eeprom.c: 179: LoadEventsFromEeprom ();
  8107  0031FC  EC74  F00E         	call	_LoadEventsFromEeprom	;wreg free
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;eeprom.c: 180: LoadStatesFromEeprom();
  8111  003200  EC67  F00C         	call	_LoadStatesFromEeprom	;wreg free
  8112                           
  8113                           ; BSR set to: 0
  8114                           ;eeprom.c: 181: LoadCyclesFromEeprom();
  8115  003204  EF3D  F00D         	goto	_LoadCyclesFromEeprom	;wreg free
  8116  003208                     __end_of_LoadAllFromEeprom:
  8117                           	opt stack 0
  8118                           tosu	equ	0xFFF
  8119                           tosh	equ	0xFFE
  8120                           tosl	equ	0xFFD
  8121                           pclath	equ	0xFFA
  8122                           tblptru	equ	0xFF8
  8123                           tblptrh	equ	0xFF7
  8124                           tblptrl	equ	0xFF6
  8125                           tablat	equ	0xFF5
  8126                           prodh	equ	0xFF4
  8127                           prodl	equ	0xFF3
  8128                           intcon	equ	0xFF2
  8129                           postinc0	equ	0xFEE
  8130                           plusw0	equ	0xFEB
  8131                           wreg	equ	0xFE8
  8132                           indf1	equ	0xFE7
  8133                           postinc1	equ	0xFE6
  8134                           postdec1	equ	0xFE5
  8135                           plusw1	equ	0xFE3
  8136                           fsr1h	equ	0xFE2
  8137                           fsr1l	equ	0xFE1
  8138                           indf2	equ	0xFDF
  8139                           postinc2	equ	0xFDE
  8140                           postdec2	equ	0xFDD
  8141                           plusw2	equ	0xFDB
  8142                           fsr2h	equ	0xFDA
  8143                           fsr2l	equ	0xFD9
  8144                           status	equ	0xFD8
  8145                           
  8146 ;; *************** function _LoadStatesFromEeprom *****************
  8147 ;; Defined at:
  8148 ;;		line 126 in file "libs/eeprom.c"
  8149 ;; Parameters:    Size  Location     Type
  8150 ;;		None
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  j               2   22[BANK0 ] int 
  8153 ;;  j               2   20[BANK0 ] int 
  8154 ;;  i               2   26[BANK0 ] int 
  8155 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  8156 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  8157 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  8158 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  8159 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  8160 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  8161 ;; Return value:  Size  Location     Type
  8162 ;;                  1    wreg      void 
  8163 ;; Registers used:
  8164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8165 ;; Tracked objects:
  8166 ;;		On entry : 3F/0
  8167 ;;		On exit  : 3F/0
  8168 ;;		Unchanged: 0/0
  8169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8171 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8172 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8173 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8174 ;;Total ram usage:       20 bytes
  8175 ;; Hardware stack levels used:    1
  8176 ;; Hardware stack levels required when called:   10
  8177 ;; This function calls:
  8178 ;;		_ReadEeprom
  8179 ;;		___awdiv
  8180 ;;		___wmul
  8181 ;; This function is called by:
  8182 ;;		_LoadAllFromEeprom
  8183 ;; This function uses a non-reentrant model
  8184 ;;
  8185                           
  8186                           	psect	text36
  8187  0018CE                     __ptext36:
  8188                           	opt stack 0
  8189  0018CE                     _LoadStatesFromEeprom:
  8190                           	opt stack 19
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;eeprom.c: 127: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  8194                           ;eeprom.c: 128: UINT8 AudAddInc;
  8195                           ;eeprom.c: 129: AddStates.Val = 0xE0;
  8196                           
  8197                           ; BSR set to: 0
  8198                           ;incstack = 0
  8199  0018CE  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  8200  0018D0  0EE0               	movlw	224
  8201  0018D2  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  8202                           
  8203                           ;eeprom.c: 130: AddAudioNormal.Val = 0x17;
  8204  0018D4  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  8205  0018D6  0E17               	movlw	23
  8206  0018D8  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  8207                           
  8208                           ;eeprom.c: 131: AddAudioSpecial.Val = 0x2B;
  8209  0018DA  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  8210  0018DC  0E2B               	movlw	43
  8211  0018DE  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;eeprom.c: 132: for (int i=0; i<160; i++) {
  8215  0018E0  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  8216  0018E2  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  8217  0018E4                     l3931:
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;eeprom.c: 133: STATES[i].PERIOD = ReadEeprom(AddStates);
  8221  0018E4  D8A3               	call	PL20	;call to abstracted procedure
  8222  0018E6  EC89  F018         	call	___wmul	;wreg free
  8223  0018EA  0EF0               	movlw	low _STATES
  8224  0018EC  2560               	addwf	?___wmul& (0+255),w,b
  8225  0018EE  6ED9               	movwf	fsr2l,c
  8226  0018F0  0E06               	movlw	high _STATES
  8227  0018F2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8228  0018F4  D8B3               	call	PL90	;call to abstracted procedure
  8229  0018F6  ECD6  F018         	call	_ReadEeprom	;wreg free
  8230  0018FA  6EDF               	movwf	indf2,c
  8231                           
  8232                           ;eeprom.c: 134: AddStates.Val++;
  8233  0018FC  0100               	movlb	0	; () banked
  8234  0018FE  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8235  001900  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8236                           
  8237                           ; BSR set to: 0
  8238                           ;eeprom.c: 135: for (int j=0; j<2; j++) {
  8239  001902  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  8240  001904  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  8241  001906                     l3941:
  8242                           
  8243                           ; BSR set to: 0
  8244                           ;eeprom.c: 136: STATES[i].ON[j] = ReadEeprom(AddStates);
  8245  001906  D892               	call	PL20	;call to abstracted procedure
  8246  001908  EC89  F018         	call	___wmul	;wreg free
  8247  00190C  D8AD               	call	PL130	;call to abstracted procedure
  8248  00190E  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  8249  001910  0E00               	movlw	0
  8250  001912  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8251  001914  5160               	movf	?___wmul& (0+255),w,b
  8252  001916  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8253  001918  5161               	movf	(?___wmul+1)& (0+255),w,b
  8254  00191A  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8255  00191C  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  8256  00191E  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  8257  001920  6ED9               	movwf	fsr2l,c
  8258  001922  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  8259  001924  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8260  001926  D89A               	call	PL90	;call to abstracted procedure
  8261  001928  ECD6  F018         	call	_ReadEeprom	;wreg free
  8262  00192C  6EDF               	movwf	indf2,c
  8263                           
  8264                           ;eeprom.c: 137: AddStates.Val++;
  8265  00192E  0100               	movlb	0	; () banked
  8266  001930  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8267  001932  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8268                           
  8269                           ; BSR set to: 0
  8270  001934  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  8271  001936  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  8272                           
  8273                           ; BSR set to: 0
  8274  001938  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  8275  00193A  D7E5               	goto	l3941
  8276  00193C  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  8277  00193E  E103               	bnz	u3530
  8278  001940  0E02               	movlw	2
  8279  001942  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  8280  001944  E3E0               	bnc	l3941
  8281  001946                     u3530:
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;eeprom.c: 138: }
  8285                           ;eeprom.c: 139: for (int j=0; j<2; j++) {
  8286  001946  6B76               	clrf	LoadStatesFromEeprom@j_1396& (0+255),b
  8287  001948  6B77               	clrf	(LoadStatesFromEeprom@j_1396+1)& (0+255),b
  8288  00194A                     l3953:
  8289                           
  8290                           ; BSR set to: 0
  8291                           ;eeprom.c: 140: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  8292  00194A  D870               	call	PL20	;call to abstracted procedure
  8293  00194C  EC89  F018         	call	___wmul	;wreg free
  8294  001950  D88B               	call	PL130	;call to abstracted procedure
  8295  001952  0E03               	movlw	3
  8296  001954  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8297  001956  0E00               	movlw	0
  8298  001958  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8299  00195A  5160               	movf	?___wmul& (0+255),w,b
  8300  00195C  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8301  00195E  5161               	movf	(?___wmul+1)& (0+255),w,b
  8302  001960  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8303  001962  5176               	movf	LoadStatesFromEeprom@j_1396& (0+255),w,b
  8304  001964  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  8305  001966  6ED9               	movwf	fsr2l,c
  8306  001968  5177               	movf	(LoadStatesFromEeprom@j_1396+1)& (0+255),w,b
  8307  00196A  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8308  00196C  D877               	call	PL90	;call to abstracted procedure
  8309  00196E  ECD6  F018         	call	_ReadEeprom	;wreg free
  8310  001972  6EDF               	movwf	indf2,c
  8311                           
  8312                           ;eeprom.c: 141: AddStates.Val++;
  8313  001974  0100               	movlb	0	; () banked
  8314  001976  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8315  001978  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8316                           
  8317                           ; BSR set to: 0
  8318  00197A  4B76               	infsnz	LoadStatesFromEeprom@j_1396& (0+255),f,b
  8319  00197C  2B77               	incf	(LoadStatesFromEeprom@j_1396+1)& (0+255),f,b
  8320                           
  8321                           ; BSR set to: 0
  8322  00197E  BF77               	btfsc	(LoadStatesFromEeprom@j_1396+1)& (0+255),7,b
  8323  001980  D7E4               	goto	l3953
  8324  001982  5177               	movf	(LoadStatesFromEeprom@j_1396+1)& (0+255),w,b
  8325  001984  E103               	bnz	u3540
  8326  001986  0E02               	movlw	2
  8327  001988  5D76               	subwf	LoadStatesFromEeprom@j_1396& (0+255),w,b
  8328  00198A  E3DF               	bnc	l3953
  8329  00198C                     u3540:
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;eeprom.c: 142: }
  8333                           ;eeprom.c: 143: AudAddInc = i/8;
  8334  00198C  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  8335  001990  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  8336  001994  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  8337  001996  0E08               	movlw	8
  8338  001998  6F62               	movwf	___awdiv@divisor& (0+255),b
  8339  00199A  ECAE  F015         	call	___awdiv	;wreg free
  8340  00199E  5160               	movf	?___awdiv& (0+255),w,b
  8341  0019A0  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;eeprom.c: 144: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  8345  0019A2  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  8346  0019A4  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  8347  0019A6  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  8348  0019A8  0E00               	movlw	0
  8349  0019AA  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  8350  0019AC  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;eeprom.c: 145: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  8354  0019AE  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  8355  0019B0  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  8356  0019B2  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  8357  0019B4  0E00               	movlw	0
  8358  0019B6  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  8359  0019B8  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  8360                           
  8361                           ;eeprom.c: 146: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  8362  0019BA  D847               	call	PL82	;call to abstracted procedure
  8363  0019BC  D001               	goto	u3554
  8364  0019BE                     u3555:
  8365  0019BE  D859               	call	PL138	;call to abstracted procedure
  8366  0019C0                     u3554:
  8367  0019C0  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  8368  0019C2  D7FD               	goto	u3555
  8369  0019C4  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  8370  0019C8  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  8371  0019CC  ECD6  F018         	call	_ReadEeprom	;wreg free
  8372  0019D0  0100               	movlb	0	; () banked
  8373  0019D2  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8374  0019D4  E006               	bz	l3969
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;eeprom.c: 147: STATES[i].AUDIO = AUDIO_NORMAL;
  8378  0019D6  D82A               	call	PL20	;call to abstracted procedure
  8379  0019D8  EC89  F018         	call	___wmul	;wreg free
  8380  0019DC  D82F               	call	PL72	;call to abstracted procedure
  8381  0019DE  0E01               	movlw	1
  8382  0019E0  D019               	goto	L7
  8383  0019E2                     l3969:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;eeprom.c: 148: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  8387  0019E2  D833               	call	PL82	;call to abstracted procedure
  8388  0019E4  D001               	goto	u3574
  8389  0019E6                     u3575:
  8390  0019E6  D845               	call	PL138	;call to abstracted procedure
  8391  0019E8                     u3574:
  8392  0019E8  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  8393  0019EA  D7FD               	goto	u3575
  8394  0019EC  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  8395  0019F0  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  8396  0019F4  ECD6  F018         	call	_ReadEeprom	;wreg free
  8397  0019F8  0100               	movlb	0	; () banked
  8398  0019FA  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8399  0019FC  E006               	bz	l3973
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;eeprom.c: 149: STATES[i].AUDIO = AUDIO_SPECIAL;
  8403  0019FE  D816               	call	PL20	;call to abstracted procedure
  8404  001A00  EC89  F018         	call	___wmul	;wreg free
  8405  001A04  D81B               	call	PL72	;call to abstracted procedure
  8406  001A06  0E02               	movlw	2
  8407  001A08  D005               	goto	L7
  8408  001A0A                     l3973:
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;eeprom.c: 150: else
  8412                           ;eeprom.c: 151: STATES[i].AUDIO = AUDIO_OFF;
  8413  001A0A  D810               	call	PL20	;call to abstracted procedure
  8414  001A0C  EC89  F018         	call	___wmul	;wreg free
  8415  001A10  D815               	call	PL72	;call to abstracted procedure
  8416  001A12  0E00               	movlw	0
  8417  001A14                     L7:
  8418  001A14  6EDF               	movwf	indf2,c
  8419                           
  8420                           ; BSR set to: 0
  8421  001A16  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  8422  001A18  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  8423                           
  8424                           ; BSR set to: 0
  8425  001A1A  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  8426  001A1C  D763               	goto	l3931
  8427  001A1E  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  8428  001A20  E104               	bnz	u3590
  8429  001A22  0EA0               	movlw	160
  8430  001A24  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  8431  001A26  E201 D75D          	bnc	l3931
  8432  001A2A                     u3590:
  8433                           
  8434                           ; BSR set to: 0
  8435  001A2A  0012               	return		;funcret
  8436  001A2C                     __end_of_LoadStatesFromEeprom:
  8437                           	opt stack 0
  8438  001A2C                     PL20:
  8439                           	opt stack 19
  8440  001A2C  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  8441  001A30  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  8442  001A34  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8443  001A36  0E06               	movlw	6
  8444  001A38  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8445  001A3A  0C06               	retlw	6
  8446  001A3C                     __end_ofPL20:
  8447                           	opt stack 0
  8448  001A3C                     PL72:
  8449                           	opt stack 19
  8450  001A3C  0EF5               	movlw	low (_STATES+5)
  8451  001A3E  2560               	addwf	?___wmul& (0+255),w,b
  8452  001A40  6ED9               	movwf	fsr2l,c
  8453  001A42  0E06               	movlw	high (_STATES+5)
  8454  001A44  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8455  001A46  6EDA               	movwf	fsr2h,c
  8456  001A48  0012               	return	
  8457  001A4A                     __end_ofPL72:
  8458                           	opt stack 0
  8459  001A4A                     PL82:
  8460                           	opt stack 19
  8461  001A4A  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  8462  001A4E  0E07               	movlw	7
  8463  001A50  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  8464  001A52  0E80               	movlw	128
  8465  001A54  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  8466  001A56  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  8467  001A58  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  8468  001A5A  0C80               	retlw	128
  8469  001A5C                     __end_ofPL82:
  8470                           	opt stack 0
  8471  001A5C                     PL90:
  8472                           	opt stack 19
  8473  001A5C  6EDA               	movwf	fsr2h,c
  8474  001A5E  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  8475  001A62  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  8476  001A66  0012               	return	
  8477  001A68                     __end_ofPL90:
  8478                           	opt stack 0
  8479  001A68                     PL130:
  8480                           	opt stack 19
  8481  001A68  0EF0               	movlw	low _STATES
  8482  001A6A  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  8483  001A6C  0E06               	movlw	high _STATES
  8484  001A6E  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  8485  001A70  0012               	return	
  8486  001A72                     __end_ofPL130:
  8487                           	opt stack 0
  8488  001A72                     PL138:
  8489                           	opt stack 19
  8490  001A72  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  8491  001A74  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  8492  001A76  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8493  001A78  0012               	return	
  8494  001A7A                     __end_ofPL138:
  8495                           	opt stack 0
  8496                           tosu	equ	0xFFF
  8497                           tosh	equ	0xFFE
  8498                           tosl	equ	0xFFD
  8499                           pclath	equ	0xFFA
  8500                           tblptru	equ	0xFF8
  8501                           tblptrh	equ	0xFF7
  8502                           tblptrl	equ	0xFF6
  8503                           tablat	equ	0xFF5
  8504                           prodh	equ	0xFF4
  8505                           prodl	equ	0xFF3
  8506                           intcon	equ	0xFF2
  8507                           postinc0	equ	0xFEE
  8508                           plusw0	equ	0xFEB
  8509                           wreg	equ	0xFE8
  8510                           indf1	equ	0xFE7
  8511                           postinc1	equ	0xFE6
  8512                           postdec1	equ	0xFE5
  8513                           plusw1	equ	0xFE3
  8514                           fsr1h	equ	0xFE2
  8515                           fsr1l	equ	0xFE1
  8516                           indf2	equ	0xFDF
  8517                           postinc2	equ	0xFDE
  8518                           postdec2	equ	0xFDD
  8519                           plusw2	equ	0xFDB
  8520                           fsr2h	equ	0xFDA
  8521                           fsr2l	equ	0xFD9
  8522                           status	equ	0xFD8
  8523                           
  8524 ;; *************** function ___awdiv *****************
  8525 ;; Defined at:
  8526 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  8527 ;; Parameters:    Size  Location     Type
  8528 ;;  dividend        2    0[BANK0 ] int 
  8529 ;;  divisor         2    2[BANK0 ] int 
  8530 ;; Auto vars:     Size  Location     Type
  8531 ;;  quotient        2    6[BANK0 ] int 
  8532 ;;  sign            1    5[BANK0 ] unsigned char 
  8533 ;;  counter         1    4[BANK0 ] unsigned char 
  8534 ;; Return value:  Size  Location     Type
  8535 ;;                  2    0[BANK0 ] int 
  8536 ;; Registers used:
  8537 ;;		wreg, status,2, status,0
  8538 ;; Tracked objects:
  8539 ;;		On entry : 3F/0
  8540 ;;		On exit  : 3F/0
  8541 ;;		Unchanged: 0/0
  8542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8543 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8544 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8546 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8547 ;;Total ram usage:        8 bytes
  8548 ;; Hardware stack levels used:    1
  8549 ;; Hardware stack levels required when called:    9
  8550 ;; This function calls:
  8551 ;;		Nothing
  8552 ;; This function is called by:
  8553 ;;		_GetDay
  8554 ;;		_LoadStatesFromEeprom
  8555 ;; This function uses a non-reentrant model
  8556 ;;
  8557                           
  8558                           	psect	text37
  8559  002B5C                     __ptext37:
  8560                           	opt stack 0
  8561  002B5C                     ___awdiv:
  8562                           	opt stack 18
  8563                           
  8564                           ; BSR set to: 0
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;incstack = 0
  8568  002B5C  6B65               	clrf	___awdiv@sign& (0+255),b
  8569                           
  8570                           ; BSR set to: 0
  8571  002B5E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8572  002B60  D006               	goto	l3337
  8573                           
  8574                           ; BSR set to: 0
  8575  002B62  6D62               	negf	___awdiv@divisor& (0+255),b
  8576  002B64  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8577  002B66  B0D8               	btfsc	status,0,c
  8578  002B68  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8579                           
  8580                           ; BSR set to: 0
  8581  002B6A  0E01               	movlw	1
  8582  002B6C  6F65               	movwf	___awdiv@sign& (0+255),b
  8583  002B6E                     l3337:
  8584                           
  8585                           ; BSR set to: 0
  8586  002B6E  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8587  002B70  D006               	goto	l3343
  8588                           
  8589                           ; BSR set to: 0
  8590  002B72  6D60               	negf	___awdiv@dividend& (0+255),b
  8591  002B74  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8592  002B76  B0D8               	btfsc	status,0,c
  8593  002B78  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8594                           
  8595                           ; BSR set to: 0
  8596  002B7A  0E01               	movlw	1
  8597  002B7C  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  8598  002B7E                     l3343:
  8599                           
  8600                           ; BSR set to: 0
  8601  002B7E  6B66               	clrf	___awdiv@quotient& (0+255),b
  8602  002B80  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  8603                           
  8604                           ; BSR set to: 0
  8605  002B82  5162               	movf	___awdiv@divisor& (0+255),w,b
  8606  002B84  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8607  002B86  E01B               	bz	l3365
  8608                           
  8609                           ; BSR set to: 0
  8610  002B88  0E01               	movlw	1
  8611  002B8A  6F64               	movwf	___awdiv@counter& (0+255),b
  8612  002B8C  D004               	goto	l3351
  8613  002B8E                     l3349:
  8614                           
  8615                           ; BSR set to: 0
  8616  002B8E  90D8               	bcf	status,0,c
  8617  002B90  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  8618  002B92  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8619  002B94  2B64               	incf	___awdiv@counter& (0+255),f,b
  8620  002B96                     l3351:
  8621                           
  8622                           ; BSR set to: 0
  8623  002B96  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8624  002B98  D7FA               	goto	l3349
  8625  002B9A                     l3353:
  8626                           
  8627                           ; BSR set to: 0
  8628  002B9A  90D8               	bcf	status,0,c
  8629  002B9C  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  8630  002B9E  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8631                           
  8632                           ; BSR set to: 0
  8633  002BA0  5162               	movf	___awdiv@divisor& (0+255),w,b
  8634  002BA2  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  8635  002BA4  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8636  002BA6  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8637  002BA8  E305               	bnc	l3361
  8638                           
  8639                           ; BSR set to: 0
  8640  002BAA  5162               	movf	___awdiv@divisor& (0+255),w,b
  8641  002BAC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  8642  002BAE  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8643  002BB0  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8644                           
  8645                           ; BSR set to: 0
  8646  002BB2  8166               	bsf	___awdiv@quotient& (0+255),0,b
  8647  002BB4                     l3361:
  8648                           
  8649                           ; BSR set to: 0
  8650  002BB4  90D8               	bcf	status,0,c
  8651  002BB6  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8652  002BB8  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  8653                           
  8654                           ; BSR set to: 0
  8655  002BBA  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  8656  002BBC  D7EE               	goto	l3353
  8657  002BBE                     l3365:
  8658                           
  8659                           ; BSR set to: 0
  8660  002BBE  5165               	movf	___awdiv@sign& (0+255),w,b
  8661  002BC0  E004               	bz	l3369
  8662                           
  8663                           ; BSR set to: 0
  8664  002BC2  6D66               	negf	___awdiv@quotient& (0+255),b
  8665  002BC4  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8666  002BC6  B0D8               	btfsc	status,0,c
  8667  002BC8  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8668  002BCA                     l3369:
  8669                           
  8670                           ; BSR set to: 0
  8671  002BCA  C066  F060         	movff	___awdiv@quotient,?___awdiv
  8672  002BCE  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  8673                           
  8674                           ; BSR set to: 0
  8675  002BD2  0012               	return		;funcret
  8676  002BD4                     __end_of___awdiv:
  8677                           	opt stack 0
  8678                           tosu	equ	0xFFF
  8679                           tosh	equ	0xFFE
  8680                           tosl	equ	0xFFD
  8681                           pclath	equ	0xFFA
  8682                           tblptru	equ	0xFF8
  8683                           tblptrh	equ	0xFF7
  8684                           tblptrl	equ	0xFF6
  8685                           tablat	equ	0xFF5
  8686                           prodh	equ	0xFF4
  8687                           prodl	equ	0xFF3
  8688                           intcon	equ	0xFF2
  8689                           postinc0	equ	0xFEE
  8690                           plusw0	equ	0xFEB
  8691                           wreg	equ	0xFE8
  8692                           indf1	equ	0xFE7
  8693                           postinc1	equ	0xFE6
  8694                           postdec1	equ	0xFE5
  8695                           plusw1	equ	0xFE3
  8696                           fsr1h	equ	0xFE2
  8697                           fsr1l	equ	0xFE1
  8698                           indf2	equ	0xFDF
  8699                           postinc2	equ	0xFDE
  8700                           postdec2	equ	0xFDD
  8701                           plusw2	equ	0xFDB
  8702                           fsr2h	equ	0xFDA
  8703                           fsr2l	equ	0xFD9
  8704                           status	equ	0xFD8
  8705                           
  8706 ;; *************** function _LoadSettingsFromEeprom *****************
  8707 ;; Defined at:
  8708 ;;		line 33 in file "libs/eeprom.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  8713 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  8714 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  8715 ;; Return value:  Size  Location     Type
  8716 ;;                  1    wreg      void 
  8717 ;; Registers used:
  8718 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8719 ;; Tracked objects:
  8720 ;;		On entry : 3F/0
  8721 ;;		On exit  : 3F/0
  8722 ;;		Unchanged: 0/0
  8723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8725 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8727 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8728 ;;Total ram usage:        8 bytes
  8729 ;; Hardware stack levels used:    1
  8730 ;; Hardware stack levels required when called:   10
  8731 ;; This function calls:
  8732 ;;		_ReadEeprom
  8733 ;;		___wmul
  8734 ;; This function is called by:
  8735 ;;		_LoadAllFromEeprom
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           	psect	text38
  8740  00154A                     __ptext38:
  8741                           	opt stack 0
  8742  00154A                     _LoadSettingsFromEeprom:
  8743                           	opt stack 19
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;eeprom.c: 34: WORD_VAL Temp16, Address;
  8747                           ;eeprom.c: 35: DWORD_VAL Temp32;
  8748                           ;eeprom.c: 37: Address.Val = 0x00;
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;incstack = 0
  8752  00154A  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  8753  00154C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8754                           
  8755                           ; BSR set to: 0
  8756                           ;eeprom.c: 38: Temp16.v[0] = ReadEeprom(Address);
  8757  00154E  D8E3               	call	PL8	;call to abstracted procedure
  8758  001550  ECD6  F018         	call	_ReadEeprom	;wreg free
  8759  001554  0100               	movlb	0	; () banked
  8760  001556  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8761                           
  8762                           ; BSR set to: 0
  8763                           ;eeprom.c: 39: Address.Val++;
  8764  001558  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8765  00155A  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8766                           
  8767                           ; BSR set to: 0
  8768                           ;eeprom.c: 40: Temp16.v[1] = ReadEeprom(Address);
  8769  00155C  D8DC               	call	PL8	;call to abstracted procedure
  8770  00155E  ECD6  F018         	call	_ReadEeprom	;wreg free
  8771  001562  0100               	movlb	0	; () banked
  8772  001564  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;eeprom.c: 41: TIME_ZONE = (INT16) 60*Temp16.Val;
  8776  001566  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  8777  00156A  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  8778  00156E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8779  001570  0E3C               	movlw	60
  8780  001572  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8781  001574  EC89  F018         	call	___wmul	;wreg free
  8782  001578  C060  F0DE         	movff	?___wmul,_TIME_ZONE
  8783  00157C  C061  F0DF         	movff	?___wmul+1,_TIME_ZONE+1
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;eeprom.c: 43: Address.Val = 0x02;
  8787  001580  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8788  001582  0E02               	movlw	2
  8789  001584  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;eeprom.c: 44: DAY_LIGHT_START.Day = ReadEeprom (Address);
  8793  001586  D8C7               	call	PL8	;call to abstracted procedure
  8794  001588  ECD6  F018         	call	_ReadEeprom	;wreg free
  8795  00158C  0100               	movlb	0	; () banked
  8796  00158E  6FD8               	movwf	_DAY_LIGHT_START& (0+255),b
  8797  001590  6BD9               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  8798                           
  8799                           ; BSR set to: 0
  8800                           ;eeprom.c: 45: Address.Val++;
  8801  001592  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8802  001594  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8803                           
  8804                           ; BSR set to: 0
  8805                           ;eeprom.c: 46: DAY_LIGHT_START.Month = ReadEeprom (Address);
  8806  001596  D8BF               	call	PL8	;call to abstracted procedure
  8807  001598  ECD6  F018         	call	_ReadEeprom	;wreg free
  8808  00159C  0100               	movlb	0	; () banked
  8809  00159E  6FDA               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  8810  0015A0  6BDB               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;eeprom.c: 48: Address.Val = 0x04;
  8814  0015A2  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8815  0015A4  0E04               	movlw	4
  8816  0015A6  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;eeprom.c: 49: DAY_LIGHT_END.Day = ReadEeprom (Address);
  8820  0015A8  D8B6               	call	PL8	;call to abstracted procedure
  8821  0015AA  ECD6  F018         	call	_ReadEeprom	;wreg free
  8822  0015AE  0100               	movlb	0	; () banked
  8823  0015B0  6FD4               	movwf	_DAY_LIGHT_END& (0+255),b
  8824  0015B2  6BD5               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  8825                           
  8826                           ; BSR set to: 0
  8827                           ;eeprom.c: 50: Address.Val++;
  8828  0015B4  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8829  0015B6  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8830                           
  8831                           ; BSR set to: 0
  8832                           ;eeprom.c: 51: DAY_LIGHT_END.Month = ReadEeprom (Address);
  8833  0015B8  D8AE               	call	PL8	;call to abstracted procedure
  8834  0015BA  ECD6  F018         	call	_ReadEeprom	;wreg free
  8835  0015BE  0100               	movlb	0	; () banked
  8836  0015C0  6FD6               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  8837  0015C2  6BD7               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;eeprom.c: 53: Address.Val = 0x06;
  8841  0015C4  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8842  0015C6  0E06               	movlw	6
  8843  0015C8  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;eeprom.c: 54: CENTURY = ReadEeprom(Address);
  8847  0015CA  D8A5               	call	PL8	;call to abstracted procedure
  8848  0015CC  ECD6  F018         	call	_ReadEeprom	;wreg free
  8849  0015D0  0100               	movlb	0	; () banked
  8850  0015D2  6FF7               	movwf	_CENTURY& (0+255),b
  8851                           
  8852                           ; BSR set to: 0
  8853                           ;eeprom.c: 56: Address.Val = 0x07;
  8854  0015D4  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8855  0015D6  0E07               	movlw	7
  8856  0015D8  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;eeprom.c: 57: Temp16.v[0] = ReadEeprom(Address);
  8860  0015DA  D89D               	call	PL8	;call to abstracted procedure
  8861  0015DC  ECD6  F018         	call	_ReadEeprom	;wreg free
  8862  0015E0  0100               	movlb	0	; () banked
  8863  0015E2  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8864                           
  8865                           ; BSR set to: 0
  8866                           ;eeprom.c: 58: Address.Val++;
  8867  0015E4  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8868  0015E6  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;eeprom.c: 60: CYCLE_DELAY = (INT16) Temp16.Val;
  8872  0015E8  D896               	call	PL8	;call to abstracted procedure
  8873  0015EA  ECD6  F018         	call	_ReadEeprom	;wreg free
  8874  0015EE  0100               	movlb	0	; () banked
  8875  0015F0  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;eeprom.c: 62: Address.Val = 0x09;
  8879  0015F2  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8880  0015F4  0E09               	movlw	9
  8881  0015F6  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;eeprom.c: 63: BLINK_ON_TIME = ReadEeprom(Address);
  8885  0015F8  D88E               	call	PL8	;call to abstracted procedure
  8886  0015FA  ECD6  F018         	call	_ReadEeprom	;wreg free
  8887  0015FE  6E5B               	movwf	_BLINK_ON_TIME,c
  8888                           
  8889                           ;eeprom.c: 65: Address.Val = 0x0A;
  8890  001600  0100               	movlb	0	; () banked
  8891  001602  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8892  001604  0E0A               	movlw	10
  8893  001606  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8894                           
  8895                           ; BSR set to: 0
  8896                           ;eeprom.c: 66: BLINK_OFF_TIME = ReadEeprom(Address);
  8897  001608  D886               	call	PL8	;call to abstracted procedure
  8898  00160A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8899  00160E  6E5A               	movwf	_BLINK_OFF_TIME,c
  8900                           
  8901                           ;eeprom.c: 68: Address.Val = 0x0B;
  8902  001610  0100               	movlb	0	; () banked
  8903  001612  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8904  001614  0E0B               	movlw	11
  8905  001616  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;eeprom.c: 69: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  8909  001618  D87E               	call	PL8	;call to abstracted procedure
  8910  00161A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8911  00161E  6E59               	movwf	_BLINK_LAST_X_SECONDS,c
  8912                           
  8913                           ;eeprom.c: 71: Address.Val = 0x0C;
  8914  001620  0100               	movlb	0	; () banked
  8915  001622  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8916  001624  0E0C               	movlw	12
  8917  001626  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8918                           
  8919                           ; BSR set to: 0
  8920                           ;eeprom.c: 72: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  8921  001628  D876               	call	PL8	;call to abstracted procedure
  8922  00162A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8923  00162E  6E58               	movwf	_AUDIO_NORMAL_ON_TIME,c
  8924                           
  8925                           ;eeprom.c: 74: Address.Val = 0x0D;
  8926  001630  0100               	movlb	0	; () banked
  8927  001632  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8928  001634  0E0D               	movlw	13
  8929  001636  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8930                           
  8931                           ; BSR set to: 0
  8932                           ;eeprom.c: 75: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  8933  001638  D86E               	call	PL8	;call to abstracted procedure
  8934  00163A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8935  00163E  6E57               	movwf	_AUDIO_NORMAL_OFF_TIME,c
  8936                           
  8937                           ;eeprom.c: 77: Address.Val = 0x0E;
  8938  001640  0100               	movlb	0	; () banked
  8939  001642  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8940  001644  0E0E               	movlw	14
  8941  001646  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;eeprom.c: 78: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  8945  001648  D866               	call	PL8	;call to abstracted procedure
  8946  00164A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8947  00164E  6E56               	movwf	_AUDIO_SPECIAL_ON_TIME,c
  8948                           
  8949                           ;eeprom.c: 80: Address.Val = 0x0F;
  8950  001650  0100               	movlb	0	; () banked
  8951  001652  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8952  001654  0E0F               	movlw	15
  8953  001656  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;eeprom.c: 81: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  8957  001658  D85E               	call	PL8	;call to abstracted procedure
  8958  00165A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8959  00165E  6E55               	movwf	_AUDIO_SPECIAL_OFF_TIME,c
  8960                           
  8961                           ;eeprom.c: 83: Address.Val = 0x10;
  8962  001660  0100               	movlb	0	; () banked
  8963  001662  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8964  001664  0E10               	movlw	16
  8965  001666  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;eeprom.c: 84: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  8969  001668  D856               	call	PL8	;call to abstracted procedure
  8970  00166A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8971  00166E  6E54               	movwf	_SPECIAL_AUDIO_LAST_X_SECONDS,c
  8972                           
  8973                           ;eeprom.c: 86: Address.Val = 0x11;
  8974  001670  0100               	movlb	0	; () banked
  8975  001672  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8976  001674  0E11               	movlw	17
  8977  001676  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;eeprom.c: 87: GPS_SYNC_AT_START = ReadEeprom(Address);
  8981  001678  D84E               	call	PL8	;call to abstracted procedure
  8982  00167A  ECD6  F018         	call	_ReadEeprom	;wreg free
  8983  00167E  0100               	movlb	0	; () banked
  8984  001680  6FE4               	movwf	_GPS_SYNC_AT_START& (0+255),b
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;eeprom.c: 89: Address.Val = 0x12;
  8988  001682  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8989  001684  0E12               	movlw	18
  8990  001686  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8991                           
  8992                           ; BSR set to: 0
  8993                           ;eeprom.c: 90: Temp32.Val = 0;
  8994  001688  6B66               	clrf	LoadSettingsFromEeprom@Temp32& (0+255),b
  8995  00168A  6B67               	clrf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  8996  00168C  6B68               	clrf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  8997  00168E  6B69               	clrf	(LoadSettingsFromEeprom@Temp32+3)& (0+255),b
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;eeprom.c: 91: Temp32.v[0] = ReadEeprom(Address);
  9001  001690  D842               	call	PL8	;call to abstracted procedure
  9002  001692  ECD6  F018         	call	_ReadEeprom	;wreg free
  9003  001696  0100               	movlb	0	; () banked
  9004  001698  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;eeprom.c: 92: Address.Val++;
  9008  00169A  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9009  00169C  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;eeprom.c: 93: Temp32.v[1] = ReadEeprom(Address);
  9013  00169E  D83B               	call	PL8	;call to abstracted procedure
  9014  0016A0  ECD6  F018         	call	_ReadEeprom	;wreg free
  9015  0016A4  0100               	movlb	0	; () banked
  9016  0016A6  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;eeprom.c: 94: Address.Val++;
  9020  0016A8  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9021  0016AA  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;eeprom.c: 95: Temp32.v[2] = ReadEeprom(Address);
  9025  0016AC  D834               	call	PL8	;call to abstracted procedure
  9026  0016AE  ECD6  F018         	call	_ReadEeprom	;wreg free
  9027  0016B2  0100               	movlb	0	; () banked
  9028  0016B4  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;eeprom.c: 96: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  9032  0016B6  C066  F0D0         	movff	LoadSettingsFromEeprom@Temp32,_GPS_SYNC_EVERY_x_SECONDS
  9033  0016BA  C067  F0D1         	movff	LoadSettingsFromEeprom@Temp32+1,_GPS_SYNC_EVERY_x_SECONDS+1
  9034  0016BE  C068  F0D2         	movff	LoadSettingsFromEeprom@Temp32+2,_GPS_SYNC_EVERY_x_SECONDS+2
  9035  0016C2  C069  F0D3         	movff	LoadSettingsFromEeprom@Temp32+3,_GPS_SYNC_EVERY_x_SECONDS+3
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;eeprom.c: 98: Address.Val = 0x15;
  9039  0016C6  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9040  0016C8  0E15               	movlw	21
  9041  0016CA  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;eeprom.c: 99: Temp16.v[0] = ReadEeprom(Address);
  9045  0016CC  D824               	call	PL8	;call to abstracted procedure
  9046  0016CE  ECD6  F018         	call	_ReadEeprom	;wreg free
  9047  0016D2  0100               	movlb	0	; () banked
  9048  0016D4  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;eeprom.c: 100: Address.Val++;
  9052  0016D6  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9053  0016D8  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;eeprom.c: 101: Temp16.v[1] = ReadEeprom(Address);
  9057  0016DA  D81D               	call	PL8	;call to abstracted procedure
  9058  0016DC  ECD6  F018         	call	_ReadEeprom	;wreg free
  9059  0016E0  0100               	movlb	0	; () banked
  9060  0016E2  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;eeprom.c: 102: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  9064  0016E4  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  9065  0016E8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9066  0016EA  0E0E               	movlw	14
  9067  0016EC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9068  0016EE  0E10               	movlw	16
  9069  0016F0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9070  0016F2  EC89  F018         	call	___wmul	;wreg free
  9071  0016F6  516A               	movf	LoadSettingsFromEeprom@Temp16& (0+255),w,b
  9072  0016F8  0D3C               	mullw	60
  9073  0016FA  5160               	movf	?___wmul& (0+255),w,b
  9074  0016FC  26F3               	addwf	prodl,f,c
  9075  0016FE  5161               	movf	(?___wmul+1)& (0+255),w,b
  9076  001700  22F4               	addwfc	prodh,f,c
  9077  001702  CFF3 F0CC          	movff	prodl,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME
  9078  001706  CFF4 F0CD          	movff	prodh,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1
  9079  00170A  0E00               	movlw	0
  9080  00170C  BFCD               	btfsc	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),7,b
  9081  00170E  0EFF               	movlw	-1
  9082  001710  6FCE               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),b
  9083  001712  6FCF               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),b
  9084                           
  9085                           ; BSR set to: 0
  9086  001714  0012               	return		;funcret
  9087  001716                     __end_of_LoadSettingsFromEeprom:
  9088                           	opt stack 0
  9089  001716                     PL8:
  9090                           	opt stack 19
  9091  001716  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  9092  00171A  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  9093  00171E  0012               	return	
  9094  001720                     __end_ofPL8:
  9095                           	opt stack 0
  9096                           tosu	equ	0xFFF
  9097                           tosh	equ	0xFFE
  9098                           tosl	equ	0xFFD
  9099                           pclath	equ	0xFFA
  9100                           tblptru	equ	0xFF8
  9101                           tblptrh	equ	0xFF7
  9102                           tblptrl	equ	0xFF6
  9103                           tablat	equ	0xFF5
  9104                           prodh	equ	0xFF4
  9105                           prodl	equ	0xFF3
  9106                           intcon	equ	0xFF2
  9107                           postinc0	equ	0xFEE
  9108                           plusw0	equ	0xFEB
  9109                           wreg	equ	0xFE8
  9110                           indf1	equ	0xFE7
  9111                           postinc1	equ	0xFE6
  9112                           postdec1	equ	0xFE5
  9113                           plusw1	equ	0xFE3
  9114                           fsr1h	equ	0xFE2
  9115                           fsr1l	equ	0xFE1
  9116                           indf2	equ	0xFDF
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           plusw2	equ	0xFDB
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function _LoadEventsFromEeprom *****************
  9125 ;; Defined at:
  9126 ;;		line 105 in file "libs/eeprom.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;		None
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;  i               2   10[BANK0 ] int 
  9131 ;;  Temp16          2   14[BANK0 ] struct _WORD_VAL
  9132 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  1    wreg      void 
  9135 ;; Registers used:
  9136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9137 ;; Tracked objects:
  9138 ;;		On entry : 3F/0
  9139 ;;		On exit  : 3F/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9143 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9144 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9145 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9146 ;;Total ram usage:       10 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:   10
  9149 ;; This function calls:
  9150 ;;		_ReadEeprom
  9151 ;;		___wmul
  9152 ;; This function is called by:
  9153 ;;		_LoadAllFromEeprom
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text39
  9158  001CE8                     __ptext39:
  9159                           	opt stack 0
  9160  001CE8                     _LoadEventsFromEeprom:
  9161                           	opt stack 19
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;eeprom.c: 106: WORD_VAL Temp16, Address;
  9165                           ;eeprom.c: 107: Address.Val = 0x50;
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;incstack = 0
  9169  001CE8  6B6D               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  9170  001CEA  0E50               	movlw	80
  9171  001CEC  6F6C               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  9172                           
  9173                           ; BSR set to: 0
  9174                           ;eeprom.c: 108: for (int i=0; i<24; i++) {
  9175  001CEE  6B6A               	clrf	LoadEventsFromEeprom@i& (0+255),b
  9176  001CF0  6B6B               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  9177  001CF2                     l3895:
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;eeprom.c: 109: Temp16.v[0] = ReadEeprom(Address);
  9181  001CF2  D873               	call	PL54	;call to abstracted procedure
  9182  001CF4  ECD6  F018         	call	_ReadEeprom	;wreg free
  9183  001CF8  0100               	movlb	0	; () banked
  9184  001CFA  6F6E               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;eeprom.c: 110: Address.Val++;
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;eeprom.c: 111: Temp16.v[1] = ReadEeprom(Address);
  9191  001CFC  D867               	call	PL38	;call to abstracted procedure
  9192  001CFE  ECD6  F018         	call	_ReadEeprom	;wreg free
  9193                           
  9194                           ; BSR set to: 0
  9195                           ;eeprom.c: 112: EVENTS[i].START_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  9196  001D02  D87B               	call	PL80	;call to abstracted procedure
  9197  001D04  EC89  F018         	call	___wmul	;wreg free
  9198  001D08  D844               	call	PL22	;call to abstracted procedure
  9199  001D0A  EC89  F018         	call	___wmul	;wreg free
  9200  001D0E  EC90  F010         	call	PL70	;call to abstracted procedure
  9201  001D12  0E02               	movlw	high _EVENTS
  9202  001D14  D867               	call	PL66	;call to abstracted procedure
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;eeprom.c: 113: Address.Val++;
  9206                           
  9207                           ; BSR set to: 0
  9208                           ;eeprom.c: 114: Temp16.v[0] = ReadEeprom(Address);
  9209  001D16  D85A               	call	PL38	;call to abstracted procedure
  9210  001D18  ECD6  F018         	call	_ReadEeprom	;wreg free
  9211  001D1C  0100               	movlb	0	; () banked
  9212  001D1E  6F6E               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;eeprom.c: 115: Address.Val++;
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;eeprom.c: 116: Temp16.v[1] = ReadEeprom(Address);
  9219  001D20  D855               	call	PL38	;call to abstracted procedure
  9220  001D22  ECD6  F018         	call	_ReadEeprom	;wreg free
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;eeprom.c: 117: EVENTS[i].END_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  9224  001D26  D869               	call	PL80	;call to abstracted procedure
  9225  001D28  EC89  F018         	call	___wmul	;wreg free
  9226  001D2C  D832               	call	PL22	;call to abstracted procedure
  9227  001D2E  EC89  F018         	call	___wmul	;wreg free
  9228  001D32  EC94  F010         	call	PL74	;call to abstracted procedure
  9229  001D36  D856               	call	PL66	;call to abstracted procedure
  9230                           
  9231                           ;eeprom.c: 118: Address.Val++;
  9232  001D38  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9233  001D3A  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;eeprom.c: 119: EVENTS[i].CYCLE = ReadEeprom(Address);
  9237  001D3C  D83F               	call	PL30	;call to abstracted procedure
  9238  001D3E  EC89  F018         	call	___wmul	;wreg free
  9239  001D42  0E08               	movlw	low (_EVENTS+8)
  9240  001D44  2560               	addwf	?___wmul& (0+255),w,b
  9241  001D46  6ED9               	movwf	fsr2l,c
  9242  001D48  0E02               	movlw	high (_EVENTS+8)
  9243  001D4A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9244  001D4C  6EDA               	movwf	fsr2h,c
  9245  001D4E  D845               	call	PL54	;call to abstracted procedure
  9246  001D50  ECD6  F018         	call	_ReadEeprom	;wreg free
  9247  001D54  6EDF               	movwf	indf2,c
  9248                           
  9249                           ;eeprom.c: 120: Address.Val++;
  9250  001D56  0100               	movlb	0	; () banked
  9251                           
  9252                           ;eeprom.c: 121: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  9253  001D58  D839               	call	PL38	;call to abstracted procedure
  9254  001D5A  ECD6  F018         	call	_ReadEeprom	;wreg free
  9255  001D5E  0100               	movlb	0	; () banked
  9256  001D60  6F66               	movwf	??_LoadEventsFromEeprom& (0+255),b
  9257  001D62  D82C               	call	PL30	;call to abstracted procedure
  9258  001D64  EC89  F018         	call	___wmul	;wreg free
  9259  001D68  EC99  F010         	call	PL104	;call to abstracted procedure
  9260  001D6C  4766               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  9261  001D6E  50DF               	movf	223,w,c
  9262  001D70  0100               	movlb	0	; () banked
  9263  001D72  1966               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  9264  001D74  0B01               	andlw	-255
  9265  001D76  1966               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  9266  001D78  6EDF               	movwf	223,c
  9267                           
  9268                           ; BSR set to: 2
  9269                           ;eeprom.c: 122: Address.Val++;
  9270  001D7A  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9271  001D7C  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9272                           
  9273                           ; BSR set to: 0
  9274  001D7E  4B6A               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  9275  001D80  2B6B               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  9276                           
  9277                           ; BSR set to: 0
  9278  001D82  BF6B               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  9279  001D84  D7B6               	goto	l3895
  9280  001D86  516B               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  9281  001D88  E103               	bnz	u3520
  9282  001D8A  0E18               	movlw	24
  9283  001D8C  5D6A               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  9284  001D8E  E3B1               	bnc	l3895
  9285  001D90                     u3520:
  9286                           
  9287                           ; BSR set to: 0
  9288  001D90  0012               	return		;funcret
  9289  001D92                     __end_of_LoadEventsFromEeprom:
  9290                           	opt stack 0
  9291  001D92                     PL22:
  9292                           	opt stack 19
  9293  001D92  516E               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  9294  001D94  0D3C               	mullw	60
  9295  001D96  5160               	movf	?___wmul& (0+255),w,b
  9296  001D98  24F3               	addwf	prodl,w,c
  9297  001D9A  6F66               	movwf	??_LoadEventsFromEeprom& (0+255),b
  9298  001D9C  5161               	movf	(?___wmul+1)& (0+255),w,b
  9299  001D9E  20F4               	addwfc	prodh,w,c
  9300  001DA0  6F67               	movwf	(??_LoadEventsFromEeprom+1)& (0+255),b
  9301  001DA2  6B68               	clrf	(??_LoadEventsFromEeprom+2)& (0+255),b
  9302  001DA4  BF67               	btfsc	(??_LoadEventsFromEeprom+1)& (0+255),7,b
  9303  001DA6  0768               	decf	(??_LoadEventsFromEeprom+2)& (0+255),f,b
  9304  001DA8  5168               	movf	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  9305  001DAA  6F69               	movwf	(??_LoadEventsFromEeprom+3)& (0+255),b
  9306  001DAC  C06A  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  9307  001DB0  C06B  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  9308  001DB4  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9309  001DB6  0E0A               	movlw	10
  9310  001DB8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9311  001DBA  0C0A               	retlw	10
  9312  001DBC                     __end_ofPL22:
  9313                           	opt stack 0
  9314  001DBC                     PL30:
  9315                           	opt stack 19
  9316  001DBC  C06A  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  9317  001DC0  C06B  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  9318  001DC4  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9319  001DC6  0E0A               	movlw	10
  9320  001DC8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9321  001DCA  0C0A               	retlw	10
  9322  001DCC                     __end_ofPL30:
  9323                           	opt stack 0
  9324  001DCC                     PL38:
  9325                           	opt stack 19
  9326  001DCC  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9327  001DCE  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9328  001DD0  C06C  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  9329  001DD4  C06D  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  9330  001DD8  0012               	return	
  9331  001DDA                     __end_ofPL38:
  9332                           	opt stack 0
  9333  001DDA                     PL54:
  9334                           	opt stack 19
  9335  001DDA  C06C  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  9336  001DDE  C06D  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  9337  001DE2  0012               	return	
  9338  001DE4                     __end_ofPL54:
  9339                           	opt stack 0
  9340  001DE4                     PL66:
  9341                           	opt stack 19
  9342  001DE4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9343  001DE6  6EDA               	movwf	fsr2h,c
  9344  001DE8  C066  FFDE         	movff	??_LoadEventsFromEeprom,postinc2
  9345  001DEC  C067  FFDE         	movff	??_LoadEventsFromEeprom+1,postinc2
  9346  001DF0  C068  FFDE         	movff	??_LoadEventsFromEeprom+2,postinc2
  9347  001DF4  C069  FFDE         	movff	??_LoadEventsFromEeprom+3,postinc2
  9348  001DF8  0012               	return	
  9349  001DFA                     __end_ofPL66:
  9350                           	opt stack 0
  9351  001DFA                     PL80:
  9352                           	opt stack 19
  9353  001DFA  0100               	movlb	0	; () banked
  9354  001DFC  6F6F               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  9355  001DFE  C06F  F060         	movff	LoadEventsFromEeprom@Temp16+1,___wmul@multiplier
  9356  001E02  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9357  001E04  0E0E               	movlw	14
  9358  001E06  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9359  001E08  0E10               	movlw	16
  9360  001E0A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9361  001E0C  0C10               	retlw	16
  9362  001E0E                     __end_ofPL80:
  9363                           	opt stack 0
  9364                           tosu	equ	0xFFF
  9365                           tosh	equ	0xFFE
  9366                           tosl	equ	0xFFD
  9367                           pclath	equ	0xFFA
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           postinc0	equ	0xFEE
  9376                           plusw0	equ	0xFEB
  9377                           wreg	equ	0xFE8
  9378                           indf1	equ	0xFE7
  9379                           postinc1	equ	0xFE6
  9380                           postdec1	equ	0xFE5
  9381                           plusw1	equ	0xFE3
  9382                           fsr1h	equ	0xFE2
  9383                           fsr1l	equ	0xFE1
  9384                           indf2	equ	0xFDF
  9385                           postinc2	equ	0xFDE
  9386                           postdec2	equ	0xFDD
  9387                           plusw2	equ	0xFDB
  9388                           fsr2h	equ	0xFDA
  9389                           fsr2l	equ	0xFD9
  9390                           status	equ	0xFD8
  9391                           
  9392 ;; *************** function _LoadCyclesFromEeprom *****************
  9393 ;; Defined at:
  9394 ;;		line 155 in file "libs/eeprom.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;		None
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;  j               2   15[BANK0 ] int 
  9399 ;;  i               2   19[BANK0 ] int 
  9400 ;;  i               2   17[BANK0 ] int 
  9401 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  9402 ;; Return value:  Size  Location     Type
  9403 ;;                  1    wreg      void 
  9404 ;; Registers used:
  9405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9406 ;; Tracked objects:
  9407 ;;		On entry : 3F/0
  9408 ;;		On exit  : 3F/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9412 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9413 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9414 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9415 ;;Total ram usage:       15 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:   10
  9418 ;; This function calls:
  9419 ;;		_ReadEeprom
  9420 ;;		___wmul
  9421 ;; This function is called by:
  9422 ;;		_LoadAllFromEeprom
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           	psect	text40
  9427  001A7A                     __ptext40:
  9428                           	opt stack 0
  9429  001A7A                     _LoadCyclesFromEeprom:
  9430                           	opt stack 19
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;eeprom.c: 156: WORD_VAL Address;
  9434                           ;eeprom.c: 157: Address.Val = 0x3F;
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;incstack = 0
  9438  001A7A  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  9439  001A7C  0E3F               	movlw	63
  9440  001A7E  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  9441                           
  9442                           ; BSR set to: 0
  9443                           ;eeprom.c: 159: for (int i=0; i<17; i++) {
  9444  001A80  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  9445  001A82  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  9446  001A84                     l3987:
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;eeprom.c: 160: CYCLES[i].END_STATE = ReadEeprom(Address);
  9450  001A84  D898               	call	PL6	;call to abstracted procedure
  9451  001A86  0E03               	movlw	3
  9452  001A88  D892               	call	PL4	;call to abstracted procedure
  9453  001A8A  90D8               	bcf	status,0,c
  9454  001A8C  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  9455  001A8E  6ED9               	movwf	fsr2l,c
  9456  001A90  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  9457  001A92  6EDA               	movwf	fsr2h,c
  9458  001A94  90D8               	bcf	status,0,c
  9459  001A96  36D9               	rlcf	fsr2l,f,c
  9460  001A98  36DA               	rlcf	fsr2h,f,c
  9461  001A9A  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  9462  001A9C  26D9               	addwf	fsr2l,f,c
  9463  001A9E  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  9464  001AA0  22DA               	addwfc	fsr2h,f,c
  9465  001AA2  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  9466  001AA6  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  9467  001AAA  ECD6  F018         	call	_ReadEeprom	;wreg free
  9468  001AAE  6EDF               	movwf	indf2,c
  9469                           
  9470                           ;eeprom.c: 161: Address.Val++;
  9471  001AB0  0100               	movlb	0	; () banked
  9472  001AB2  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  9473  001AB4  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  9474                           
  9475                           ; BSR set to: 0
  9476  001AB6  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  9477  001AB8  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  9478                           
  9479                           ; BSR set to: 0
  9480  001ABA  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  9481  001ABC  D7E3               	goto	l3987
  9482  001ABE  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  9483  001AC0  E103               	bnz	u3600
  9484  001AC2  0E11               	movlw	17
  9485  001AC4  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  9486  001AC6  E3DE               	bnc	l3987
  9487  001AC8                     u3600:
  9488                           
  9489                           ; BSR set to: 0
  9490                           ;eeprom.c: 162: }
  9491                           ;eeprom.c: 164: for (int i=0; i<17; i++) {
  9492  001AC8  6B73               	clrf	LoadCyclesFromEeprom@i_1461& (0+255),b
  9493  001ACA  6B74               	clrf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),b
  9494  001ACC                     l3999:
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;eeprom.c: 165: if (i==0)
  9498  001ACC  5173               	movf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  9499  001ACE  1174               	iorwf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  9500  001AD0  E106               	bnz	l4003
  9501                           
  9502                           ; BSR set to: 0
  9503                           ;eeprom.c: 166: CYCLES[i].START_STATE = 0;
  9504  001AD2  D871               	call	PL6	;call to abstracted procedure
  9505  001AD4  0E02               	movlw	2
  9506  001AD6  D86B               	call	PL4	;call to abstracted procedure
  9507  001AD8  D85D               	call	PL2	;call to abstracted procedure
  9508  001ADA  6ADF               	clrf	indf2,c
  9509  001ADC  D01E               	goto	l4005
  9510  001ADE                     l4003:
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;eeprom.c: 167: else
  9514                           ;eeprom.c: 170: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  9515  001ADE  D86B               	call	PL6	;call to abstracted procedure
  9516  001AE0  0E02               	movlw	2
  9517  001AE2  D865               	call	PL4	;call to abstracted procedure
  9518  001AE4  D857               	call	PL2	;call to abstracted procedure
  9519  001AE6  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  9520  001AE8  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  9521  001AEA  0E00               	movlw	low _CYCLES
  9522  001AEC  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  9523  001AEE  0E01               	movlw	high _CYCLES
  9524  001AF0  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  9525  001AF2  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  9526  001AF4  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  9527  001AF6  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  9528  001AF8  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  9529  001AFA  90D8               	bcf	status,0,c
  9530  001AFC  3573               	rlcf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  9531  001AFE  6EE1               	movwf	fsr1l,c
  9532  001B00  3574               	rlcf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  9533  001B02  6EE2               	movwf	fsr1h,c
  9534  001B04  90D8               	bcf	status,0,c
  9535  001B06  36E1               	rlcf	fsr1l,f,c
  9536  001B08  36E2               	rlcf	fsr1h,f,c
  9537  001B0A  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  9538  001B0C  26E1               	addwf	fsr1l,f,c
  9539  001B0E  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  9540  001B10  22E2               	addwfc	fsr1h,f,c
  9541  001B12  50E7               	movf	indf1,w,c
  9542  001B14  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  9543  001B16  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  9544  001B18  6EDF               	movwf	indf2,c
  9545  001B1A                     l4005:
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;eeprom.c: 171: CYCLES[i].PERIOD = 0;
  9549  001B1A  D84D               	call	PL6	;call to abstracted procedure
  9550  001B1C  D83B               	call	PL2	;call to abstracted procedure
  9551  001B1E  6ADE               	clrf	postinc2,c
  9552  001B20  6ADD               	clrf	postdec2,c
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;eeprom.c: 172: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  9556  001B22  D849               	call	PL6	;call to abstracted procedure
  9557  001B24  0E02               	movlw	2
  9558  001B26  D843               	call	PL4	;call to abstracted procedure
  9559  001B28  D835               	call	PL2	;call to abstracted procedure
  9560  001B2A  50DF               	movf	indf2,w,c
  9561  001B2C  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  9562  001B2E  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  9563  001B30  D017               	goto	l4013
  9564  001B32                     l4009:
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;eeprom.c: 173: CYCLES[i].PERIOD += STATES[j].PERIOD;
  9568  001B32  D841               	call	PL6	;call to abstracted procedure
  9569  001B34  D82F               	call	PL2	;call to abstracted procedure
  9570  001B36  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  9571  001B3A  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  9572  001B3E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9573  001B40  0E06               	movlw	6
  9574  001B42  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9575  001B44  EC89  F018         	call	___wmul	;wreg free
  9576  001B48  0EF0               	movlw	low _STATES
  9577  001B4A  2560               	addwf	?___wmul& (0+255),w,b
  9578  001B4C  6EE1               	movwf	fsr1l,c
  9579  001B4E  0E06               	movlw	high _STATES
  9580  001B50  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9581  001B52  6EE2               	movwf	fsr1h,c
  9582  001B54  50E7               	movf	indf1,w,c
  9583  001B56  26DE               	addwf	postinc2,f,c
  9584  001B58  0E00               	movlw	0
  9585  001B5A  22DD               	addwfc	postdec2,f,c
  9586                           
  9587                           ; BSR set to: 0
  9588  001B5C  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  9589  001B5E  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  9590  001B60                     l4013:
  9591                           
  9592                           ; BSR set to: 0
  9593  001B60  D82A               	call	PL6	;call to abstracted procedure
  9594  001B62  0E03               	movlw	3
  9595  001B64  D824               	call	PL4	;call to abstracted procedure
  9596  001B66  D816               	call	PL2	;call to abstracted procedure
  9597  001B68  50DF               	movf	indf2,w,c
  9598  001B6A  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  9599  001B6C  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  9600  001B6E  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  9601  001B70  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  9602  001B72  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  9603  001B74  0A80               	xorlw	128
  9604  001B76  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  9605  001B78  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  9606  001B7A  0A80               	xorlw	128
  9607  001B7C  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  9608  001B7E  E2D9               	bc	l4009
  9609                           
  9610                           ; BSR set to: 0
  9611  001B80  4B73               	infsnz	LoadCyclesFromEeprom@i_1461& (0+255),f,b
  9612  001B82  2B74               	incf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),f,b
  9613                           
  9614                           ; BSR set to: 0
  9615  001B84  BF74               	btfsc	(LoadCyclesFromEeprom@i_1461+1)& (0+255),7,b
  9616  001B86  D7A2               	goto	l3999
  9617  001B88  5174               	movf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  9618  001B8A  E103               	bnz	u3630
  9619  001B8C  0E11               	movlw	17
  9620  001B8E  5D73               	subwf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  9621  001B90  E39D               	bnc	l3999
  9622  001B92                     u3630:
  9623                           
  9624                           ; BSR set to: 0
  9625  001B92  0012               	return		;funcret
  9626  001B94                     __end_of_LoadCyclesFromEeprom:
  9627                           	opt stack 0
  9628  001B94                     PL2:
  9629                           	opt stack 19
  9630  001B94  90D8               	bcf	status,0,c
  9631  001B96  3573               	rlcf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  9632  001B98  6ED9               	movwf	fsr2l,c
  9633  001B9A  3574               	rlcf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  9634  001B9C  6EDA               	movwf	fsr2h,c
  9635  001B9E  90D8               	bcf	status,0,c
  9636  001BA0  36D9               	rlcf	fsr2l,f,c
  9637  001BA2  36DA               	rlcf	fsr2h,f,c
  9638  001BA4  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  9639  001BA6  26D9               	addwf	fsr2l,f,c
  9640  001BA8  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  9641  001BAA  22DA               	addwfc	fsr2h,f,c
  9642  001BAC  0012               	return	
  9643  001BAE                     __end_ofPL2:
  9644                           	opt stack 0
  9645  001BAE                     PL4:
  9646                           	opt stack 19
  9647  001BAE  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  9648  001BB0  0E00               	movlw	0
  9649  001BB2  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  9650  001BB4  0C00               	retlw	0
  9651  001BB6                     __end_ofPL4:
  9652                           	opt stack 0
  9653  001BB6                     PL6:
  9654                           	opt stack 19
  9655  001BB6  0E00               	movlw	low _CYCLES
  9656  001BB8  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  9657  001BBA  0E01               	movlw	high _CYCLES
  9658  001BBC  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  9659  001BBE  0012               	return	
  9660  001BC0                     __end_ofPL6:
  9661                           	opt stack 0
  9662                           tosu	equ	0xFFF
  9663                           tosh	equ	0xFFE
  9664                           tosl	equ	0xFFD
  9665                           pclath	equ	0xFFA
  9666                           tblptru	equ	0xFF8
  9667                           tblptrh	equ	0xFF7
  9668                           tblptrl	equ	0xFF6
  9669                           tablat	equ	0xFF5
  9670                           prodh	equ	0xFF4
  9671                           prodl	equ	0xFF3
  9672                           intcon	equ	0xFF2
  9673                           postinc0	equ	0xFEE
  9674                           plusw0	equ	0xFEB
  9675                           wreg	equ	0xFE8
  9676                           indf1	equ	0xFE7
  9677                           postinc1	equ	0xFE6
  9678                           postdec1	equ	0xFE5
  9679                           plusw1	equ	0xFE3
  9680                           fsr1h	equ	0xFE2
  9681                           fsr1l	equ	0xFE1
  9682                           indf2	equ	0xFDF
  9683                           postinc2	equ	0xFDE
  9684                           postdec2	equ	0xFDD
  9685                           plusw2	equ	0xFDB
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function _ReadEeprom *****************
  9691 ;; Defined at:
  9692 ;;		line 3 in file "libs/eeprom.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;		None
  9697 ;; Return value:  Size  Location     Type
  9698 ;;                  1    wreg      unsigned char 
  9699 ;; Registers used:
  9700 ;;		wreg, status,2
  9701 ;; Tracked objects:
  9702 ;;		On entry : 0/0
  9703 ;;		On exit  : 0/0
  9704 ;;		Unchanged: 0/0
  9705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9706 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9709 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9710 ;;Total ram usage:        2 bytes
  9711 ;; Hardware stack levels used:    1
  9712 ;; Hardware stack levels required when called:    9
  9713 ;; This function calls:
  9714 ;;		Nothing
  9715 ;; This function is called by:
  9716 ;;		_LoadSettingsFromEeprom
  9717 ;;		_LoadEventsFromEeprom
  9718 ;;		_LoadStatesFromEeprom
  9719 ;;		_LoadCyclesFromEeprom
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text41
  9724  0031AC                     __ptext41:
  9725                           	opt stack 0
  9726  0031AC                     _ReadEeprom:
  9727                           	opt stack 19
  9728                           
  9729                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;incstack = 0
  9733  0031AC  0E3F               	movlw	-193
  9734  0031AE  1681               	andwf	3969,f,c	;volatile
  9735                           
  9736                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  9737  0031B0  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  9738                           
  9739                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  9740  0031B4  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  9741                           
  9742                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  9743  0031B8  8081               	bsf	3969,0,c	;volatile
  9744                           
  9745                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  9746  0031BA  8E81               	bsf	3969,7,c	;volatile
  9747                           
  9748                           ;eeprom.c: 12: return NVMDAT;
  9749  0031BC  5080               	movf	3968,w,c	;volatile
  9750  0031BE  0012               	return		;funcret
  9751  0031C0                     __end_of_ReadEeprom:
  9752                           	opt stack 0
  9753                           tosu	equ	0xFFF
  9754                           tosh	equ	0xFFE
  9755                           tosl	equ	0xFFD
  9756                           pclath	equ	0xFFA
  9757                           tblptru	equ	0xFF8
  9758                           tblptrh	equ	0xFF7
  9759                           tblptrl	equ	0xFF6
  9760                           tablat	equ	0xFF5
  9761                           prodh	equ	0xFF4
  9762                           prodl	equ	0xFF3
  9763                           intcon	equ	0xFF2
  9764                           postinc0	equ	0xFEE
  9765                           plusw0	equ	0xFEB
  9766                           wreg	equ	0xFE8
  9767                           indf1	equ	0xFE7
  9768                           postinc1	equ	0xFE6
  9769                           postdec1	equ	0xFE5
  9770                           plusw1	equ	0xFE3
  9771                           fsr1h	equ	0xFE2
  9772                           fsr1l	equ	0xFE1
  9773                           indf2	equ	0xFDF
  9774                           postinc2	equ	0xFDE
  9775                           postdec2	equ	0xFDD
  9776                           plusw2	equ	0xFDB
  9777                           fsr2h	equ	0xFDA
  9778                           fsr2l	equ	0xFD9
  9779                           status	equ	0xFD8
  9780                           
  9781 ;; *************** function _Lcd_Init *****************
  9782 ;; Defined at:
  9783 ;;		line 17 in file "libs/HD44780.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  data            1    3[BANK0 ] unsigned char 
  9788 ;; Return value:  Size  Location     Type
  9789 ;;                  1    wreg      void 
  9790 ;; Registers used:
  9791 ;;		wreg, status,2, status,0, cstack
  9792 ;; Tracked objects:
  9793 ;;		On entry : 3F/0
  9794 ;;		On exit  : 0/0
  9795 ;;		Unchanged: 0/0
  9796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9800 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9801 ;;Total ram usage:        1 bytes
  9802 ;; Hardware stack levels used:    1
  9803 ;; Hardware stack levels required when called:   11
  9804 ;; This function calls:
  9805 ;;		_Lcd_Command
  9806 ;;		_Lcd_Delay5500us
  9807 ;;		_Lcd_Delay5us
  9808 ;; This function is called by:
  9809 ;;		_main
  9810 ;; This function uses a non-reentrant model
  9811 ;;
  9812                           
  9813                           	psect	text42
  9814  002ABC                     __ptext42:
  9815                           	opt stack 0
  9816  002ABC                     _Lcd_Init:
  9817                           	opt stack 19
  9818                           
  9819                           ; BSR set to: 0
  9820                           ;HD44780.c: 23: unsigned char data;
  9821                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  9822                           
  9823                           ;incstack = 0
  9824  002ABC  9A88               	bcf	3976,5,c	;volatile
  9825  002ABE  9888               	bcf	3976,4,c	;volatile
  9826  002AC0  9688               	bcf	3976,3,c	;volatile
  9827  002AC2  9488               	bcf	3976,2,c	;volatile
  9828  002AC4  9288               	bcf	3976,1,c	;volatile
  9829  002AC6  9088               	bcf	3976,0,c	;volatile
  9830                           
  9831                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  9832  002AC8  9A83               	bcf	3971,5,c	;volatile
  9833  002ACA  9883               	bcf	3971,4,c	;volatile
  9834  002ACC  9683               	bcf	3971,3,c	;volatile
  9835  002ACE  9483               	bcf	3971,2,c	;volatile
  9836  002AD0  9283               	bcf	3971,1,c	;volatile
  9837  002AD2  9083               	bcf	3971,0,c	;volatile
  9838                           
  9839                           ; BSR set to: 0
  9840                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  9841  002AD4  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9842  002AD8  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9843  002ADC  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9844                           
  9845                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  9846  002AE0  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9847  002AE4  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9848  002AE8  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9849                           
  9850                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  9851  002AEC  0E01               	movlw	1
  9852  002AEE  0100               	movlb	0	; () banked
  9853  002AF0  6F63               	movwf	Lcd_Init@data& (0+255),b
  9854  002AF2                     l266:
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;HD44780.c: 29: {
  9858                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  9859  002AF2  D82F               	call	PL112	;call to abstracted procedure
  9860  002AF4  9283               	bcf	3971,1,c	;volatile
  9861  002AF6  9083               	bcf	3971,0,c	;volatile
  9862                           
  9863                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  9864  002AF8  D82C               	call	PL112	;call to abstracted procedure
  9865  002AFA  8283               	bsf	3971,1,c	;volatile
  9866  002AFC  9083               	bcf	3971,0,c	;volatile
  9867                           
  9868                           ; BSR set to: 0
  9869                           ;HD44780.c: 32: Lcd_Delay5us();
  9870  002AFE  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  9871                           
  9872                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  9873  002B02  D827               	call	PL112	;call to abstracted procedure
  9874  002B04  9283               	bcf	3971,1,c	;volatile
  9875  002B06  9083               	bcf	3971,0,c	;volatile
  9876                           
  9877                           ;HD44780.c: 34: Lcd_Delay5500us();
  9878  002B08  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9879  002B0C  0100               	movlb	0	; () banked
  9880  002B0E  2B63               	incf	Lcd_Init@data& (0+255),f,b
  9881  002B10  0E03               	movlw	3
  9882  002B12  6563               	cpfsgt	Lcd_Init@data& (0+255),b
  9883  002B14  D7EE               	goto	l266
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;HD44780.c: 35: }
  9887                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  9888  002B16  D818               	call	PL110	;call to abstracted procedure
  9889  002B18  9283               	bcf	3971,1,c	;volatile
  9890  002B1A  9083               	bcf	3971,0,c	;volatile
  9891                           
  9892                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  9893  002B1C  D815               	call	PL110	;call to abstracted procedure
  9894  002B1E  8283               	bsf	3971,1,c	;volatile
  9895  002B20  9083               	bcf	3971,0,c	;volatile
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;HD44780.c: 38: Lcd_Delay5us();
  9899  002B22  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  9900                           
  9901                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  9902  002B26  D810               	call	PL110	;call to abstracted procedure
  9903  002B28  9283               	bcf	3971,1,c	;volatile
  9904  002B2A  9083               	bcf	3971,0,c	;volatile
  9905                           
  9906                           ;HD44780.c: 40: Lcd_Delay5500us();
  9907  002B2C  ECF3  F018         	call	_Lcd_Delay5500us	;wreg free
  9908  002B30  0E28               	movlw	40
  9909  002B32  ECED  F012         	call	_Lcd_Command
  9910  002B36  0E10               	movlw	16
  9911  002B38  ECED  F012         	call	_Lcd_Command
  9912  002B3C  0E01               	movlw	1
  9913  002B3E  ECED  F012         	call	_Lcd_Command
  9914  002B42  0E0F               	movlw	15
  9915  002B44  EFED  F012         	goto	_Lcd_Command
  9916  002B48                     __end_of_Lcd_Init:
  9917                           	opt stack 0
  9918  002B48                     PL110:
  9919                           	opt stack 19
  9920  002B48  9A83               	bcf	3971,5,c	;volatile
  9921  002B4A  9883               	bcf	3971,4,c	;volatile
  9922  002B4C  8683               	bsf	3971,3,c	;volatile
  9923  002B4E  9483               	bcf	3971,2,c	;volatile
  9924  002B50  0012               	return	
  9925  002B52                     __end_ofPL110:
  9926                           	opt stack 0
  9927  002B52                     PL112:
  9928                           	opt stack 19
  9929  002B52  9A83               	bcf	3971,5,c	;volatile
  9930  002B54  9883               	bcf	3971,4,c	;volatile
  9931  002B56  8683               	bsf	3971,3,c	;volatile
  9932  002B58  8483               	bsf	3971,2,c	;volatile
  9933  002B5A  0012               	return	
  9934  002B5C                     __end_ofPL112:
  9935                           	opt stack 0
  9936                           tosu	equ	0xFFF
  9937                           tosh	equ	0xFFE
  9938                           tosl	equ	0xFFD
  9939                           pclath	equ	0xFFA
  9940                           tblptru	equ	0xFF8
  9941                           tblptrh	equ	0xFF7
  9942                           tblptrl	equ	0xFF6
  9943                           tablat	equ	0xFF5
  9944                           prodh	equ	0xFF4
  9945                           prodl	equ	0xFF3
  9946                           intcon	equ	0xFF2
  9947                           postinc0	equ	0xFEE
  9948                           plusw0	equ	0xFEB
  9949                           wreg	equ	0xFE8
  9950                           indf1	equ	0xFE7
  9951                           postinc1	equ	0xFE6
  9952                           postdec1	equ	0xFE5
  9953                           plusw1	equ	0xFE3
  9954                           fsr1h	equ	0xFE2
  9955                           fsr1l	equ	0xFE1
  9956                           indf2	equ	0xFDF
  9957                           postinc2	equ	0xFDE
  9958                           postdec2	equ	0xFDD
  9959                           plusw2	equ	0xFDB
  9960                           fsr2h	equ	0xFDA
  9961                           fsr2l	equ	0xFD9
  9962                           status	equ	0xFD8
  9963                           
  9964 ;; *************** function _Lcd_Delay5500us *****************
  9965 ;; Defined at:
  9966 ;;		line 153 in file "libs/HD44780.c"
  9967 ;; Parameters:    Size  Location     Type
  9968 ;;		None
  9969 ;; Auto vars:     Size  Location     Type
  9970 ;;		None
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  1    wreg      void 
  9973 ;; Registers used:
  9974 ;;		wreg
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9984 ;;Total ram usage:        1 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    9
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		_Lcd_Init
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text43
  9995  0031E6                     __ptext43:
  9996                           	opt stack 0
  9997  0031E6                     _Lcd_Delay5500us:
  9998                           	opt stack 20
  9999                           
 10000                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
 10001                           
 10002                           ;incstack = 0
 10003  0031E6  0E08               	movlw	8
 10004  0031E8  0100               	movlb	0	; () banked
 10005  0031EA  6F60               	movwf	??_Lcd_Delay5500us& (0+255),b
 10006  0031EC  0E23               	movlw	35
 10007  0031EE                     u4187:
 10008  0031EE  2EE8               	decfsz	wreg,f,c
 10009  0031F0  D7FE               	bra	u4187
 10010  0031F2  2F60               	decfsz	??_Lcd_Delay5500us& (0+255),f,b
 10011  0031F4  D7FC               	bra	u4187
 10012  0031F6  0012               	return		;funcret
 10013  0031F8                     __end_of_Lcd_Delay5500us:
 10014                           	opt stack 0
 10015                           tosu	equ	0xFFF
 10016                           tosh	equ	0xFFE
 10017                           tosl	equ	0xFFD
 10018                           pclath	equ	0xFFA
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           postinc0	equ	0xFEE
 10027                           plusw0	equ	0xFEB
 10028                           wreg	equ	0xFE8
 10029                           indf1	equ	0xFE7
 10030                           postinc1	equ	0xFE6
 10031                           postdec1	equ	0xFE5
 10032                           plusw1	equ	0xFE3
 10033                           fsr1h	equ	0xFE2
 10034                           fsr1l	equ	0xFE1
 10035                           indf2	equ	0xFDF
 10036                           postinc2	equ	0xFDE
 10037                           postdec2	equ	0xFDD
 10038                           plusw2	equ	0xFDB
 10039                           fsr2h	equ	0xFDA
 10040                           fsr2l	equ	0xFD9
 10041                           status	equ	0xFD8
 10042                           
 10043 ;; *************** function _Lcd_Command *****************
 10044 ;; Defined at:
 10045 ;;		line 133 in file "libs/HD44780.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;  command         1    wreg     unsigned char 
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;  command         1    2[BANK0 ] unsigned char 
 10050 ;; Return value:  Size  Location     Type
 10051 ;;                  1    wreg      void 
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, status,0, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10061 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10062 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10063 ;;Total ram usage:        3 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:   10
 10066 ;; This function calls:
 10067 ;;		_Lcd_Delay5us
 10068 ;; This function is called by:
 10069 ;;		_Lcd_Init
 10070 ;;		_Lcd_WriteChar
 10071 ;;		_main
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text44
 10076  0025DA                     __ptext44:
 10077                           	opt stack 0
 10078  0025DA                     _Lcd_Command:
 10079                           	opt stack 18
 10080                           
 10081                           ;incstack = 0
 10082                           ;Lcd_Command@command stored from wreg
 10083  0025DA  0100               	movlb	0	; () banked
 10084  0025DC  6F62               	movwf	Lcd_Command@command& (0+255),b
 10085                           
 10086                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10087  0025DE  9283               	bcf	3971,1,c	;volatile
 10088  0025E0  9083               	bcf	3971,0,c	;volatile
 10089                           
 10090                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
 10091  0025E2  6B60               	clrf	??_Lcd_Command& (0+255),b
 10092  0025E4  AF62               	btfss	Lcd_Command@command& (0+255),7,b
 10093  0025E6  D001               	bra	u3135
 10094  0025E8  2B60               	incf	??_Lcd_Command& (0+255),f,b
 10095  0025EA                     u3135:
 10096  0025EA  D837               	call	PL42	;call to abstracted procedure
 10097  0025EC  0E06               	movlw	6
 10098  0025EE  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
 10099  0025F0                     u3145:
 10100  0025F0  90D8               	bcf	status,0,c
 10101  0025F2  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10102  0025F4  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
 10103  0025F6  D7FC               	goto	u3145
 10104  0025F8  D84D               	call	PL58	;call to abstracted procedure
 10105                           
 10106                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
 10107  0025FA  D847               	call	PL50	;call to abstracted procedure
 10108  0025FC  0E05               	movlw	5
 10109  0025FE  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
 10110  002600                     u3155:
 10111  002600  90D8               	bcf	status,0,c
 10112  002602  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10113  002604  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
 10114  002606  D7FC               	goto	u3155
 10115  002608  0E01               	movlw	1
 10116  00260A  D833               	call	PL48	;call to abstracted procedure
 10117  00260C  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10118  00260E  0E0F               	movlw	15
 10119  002610  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10120  002612  0E01               	movlw	1
 10121  002614  D846               	call	PL84	;call to abstracted procedure
 10122                           
 10123                           ; BSR set to: 0
 10124                           ;HD44780.c: 137: _delay(10);
 10125  002616  0E03               	movlw	3
 10126  002618                     u4197:
 10127  002618  2EE8               	decfsz	wreg,f,c
 10128  00261A  D7FE               	bra	u4197
 10129  00261C  F000               	nop	
 10130                           
 10131                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
 10132  00261E  8283               	bsf	3971,1,c	;volatile
 10133  002620  EC10  F019         	call	_Lcd_Delay5us	;wreg free
 10134  002624  9283               	bcf	3971,1,c	;volatile
 10135                           
 10136                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
 10137  002626  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10138  00262A  0100               	movlb	0	; () banked
 10139  00262C  90D8               	bcf	status,0,c
 10140  00262E  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10141  002630  D841               	call	PL100	;call to abstracted procedure
 10142                           
 10143                           ; BSR set to: 0
 10144  002632  D813               	call	PL42	;call to abstracted procedure
 10145  002634  D83F               	call	PL100	;call to abstracted procedure
 10146  002636  D82E               	call	PL58	;call to abstracted procedure
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
 10150  002638  D828               	call	PL50	;call to abstracted procedure
 10151  00263A  90D8               	bcf	status,0,c
 10152  00263C  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10153  00263E  0E01               	movlw	1
 10154                           
 10155                           ; BSR set to: 0
 10156  002640  D818               	call	PL48	;call to abstracted procedure
 10157  002642  0E01               	movlw	1
 10158  002644  D82E               	call	PL84	;call to abstracted procedure
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;HD44780.c: 141: _delay(10);
 10162  002646  0E03               	movlw	3
 10163  002648                     u4207:
 10164  002648  2EE8               	decfsz	wreg,f,c
 10165  00264A  D7FE               	bra	u4207
 10166  00264C  F000               	nop	
 10167                           
 10168                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
 10169  00264E  8283               	bsf	3971,1,c	;volatile
 10170  002650  EC10  F019         	call	_Lcd_Delay5us	;wreg free
 10171  002654  9283               	bcf	3971,1,c	;volatile
 10172                           
 10173                           ;HD44780.c: 144: Lcd_Delay5us();
 10174  002656  EF10  F019         	goto	_Lcd_Delay5us	;wreg free
 10175  00265A                     __end_of_Lcd_Command:
 10176                           	opt stack 0
 10177  00265A                     PL42:
 10178                           	opt stack 18
 10179  00265A  0E01               	movlw	1
 10180  00265C  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10181  00265E  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10182  002660  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10183  002662  5083               	movf	3971,w,c	;volatile
 10184  002664  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10185  002666  0BDF               	andlw	-33
 10186  002668  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10187  00266A  6E83               	movwf	3971,c	;volatile
 10188  00266C  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10189  002670  0012               	return	
 10190  002672                     __end_ofPL42:
 10191                           	opt stack 0
 10192  002672                     PL48:
 10193                           	opt stack 18
 10194  002672  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10195  002674  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10196  002676  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10197  002678  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10198  00267A  5083               	movf	3971,w,c	;volatile
 10199  00267C  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10200  00267E  0BF7               	andlw	-9
 10201  002680  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10202  002682  6E83               	movwf	3971,c	;volatile
 10203  002684  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10204  002688  0012               	return	
 10205  00268A                     __end_ofPL48:
 10206                           	opt stack 0
 10207  00268A                     PL50:
 10208                           	opt stack 18
 10209  00268A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10210  00268C  6E83               	movwf	3971,c	;volatile
 10211  00268E  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10212  002692  0012               	return	
 10213  002694                     __end_ofPL50:
 10214                           	opt stack 0
 10215  002694                     PL58:
 10216                           	opt stack 18
 10217  002694  0E01               	movlw	1
 10218  002696  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10219  002698  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10220  00269A  5083               	movf	3971,w,c	;volatile
 10221  00269C  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10222  00269E  0BEF               	andlw	-17
 10223  0026A0  0012               	return	
 10224  0026A2                     __end_ofPL58:
 10225                           	opt stack 0
 10226  0026A2                     PL84:
 10227                           	opt stack 18
 10228  0026A2  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10229  0026A4  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10230  0026A6  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10231  0026A8  5083               	movf	3971,w,c	;volatile
 10232  0026AA  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10233  0026AC  0BFB               	andlw	-5
 10234  0026AE  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10235  0026B0  6E83               	movwf	3971,c	;volatile
 10236  0026B2  0012               	return	
 10237  0026B4                     __end_ofPL84:
 10238                           	opt stack 0
 10239  0026B4                     PL100:
 10240                           	opt stack 18
 10241  0026B4  90D8               	bcf	status,0,c
 10242  0026B6  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10243  0026B8  90D8               	bcf	status,0,c
 10244  0026BA  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10245  0026BC  0012               	return	
 10246  0026BE                     __end_ofPL100:
 10247                           	opt stack 0
 10248                           tosu	equ	0xFFF
 10249                           tosh	equ	0xFFE
 10250                           tosl	equ	0xFFD
 10251                           pclath	equ	0xFFA
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           postinc0	equ	0xFEE
 10260                           plusw0	equ	0xFEB
 10261                           wreg	equ	0xFE8
 10262                           indf1	equ	0xFE7
 10263                           postinc1	equ	0xFE6
 10264                           postdec1	equ	0xFE5
 10265                           plusw1	equ	0xFE3
 10266                           fsr1h	equ	0xFE2
 10267                           fsr1l	equ	0xFE1
 10268                           indf2	equ	0xFDF
 10269                           postinc2	equ	0xFDE
 10270                           postdec2	equ	0xFDD
 10271                           plusw2	equ	0xFDB
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function _Lcd_Delay5us *****************
 10277 ;; Defined at:
 10278 ;;		line 150 in file "libs/HD44780.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      void 
 10285 ;; Registers used:
 10286 ;;		None
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10296 ;;Total ram usage:        0 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    9
 10299 ;; This function calls:
 10300 ;;		Nothing
 10301 ;; This function is called by:
 10302 ;;		_Lcd_Init
 10303 ;;		_Lcd_CharCP
 10304 ;;		_Lcd_Command
 10305 ;; This function uses a non-reentrant model
 10306 ;;
 10307                           
 10308                           	psect	text45
 10309  003220                     __ptext45:
 10310                           	opt stack 0
 10311  003220                     _Lcd_Delay5us:
 10312                           	opt stack 18
 10313                           
 10314                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
 10315                           
 10316                           ;incstack = 0
 10317  003220  D000               	nop2		;2 cycle nop
 10318  003222  D000               	nop2		;2 cycle nop
 10319  003224  F000               	nop	
 10320  003226  0012               	return		;funcret
 10321  003228                     __end_of_Lcd_Delay5us:
 10322                           	opt stack 0
 10323                           tosu	equ	0xFFF
 10324                           tosh	equ	0xFFE
 10325                           tosl	equ	0xFFD
 10326                           pclath	equ	0xFFA
 10327                           tblptru	equ	0xFF8
 10328                           tblptrh	equ	0xFF7
 10329                           tblptrl	equ	0xFF6
 10330                           tablat	equ	0xFF5
 10331                           prodh	equ	0xFF4
 10332                           prodl	equ	0xFF3
 10333                           intcon	equ	0xFF2
 10334                           postinc0	equ	0xFEE
 10335                           plusw0	equ	0xFEB
 10336                           wreg	equ	0xFE8
 10337                           indf1	equ	0xFE7
 10338                           postinc1	equ	0xFE6
 10339                           postdec1	equ	0xFE5
 10340                           plusw1	equ	0xFE3
 10341                           fsr1h	equ	0xFE2
 10342                           fsr1l	equ	0xFE1
 10343                           indf2	equ	0xFDF
 10344                           postinc2	equ	0xFDE
 10345                           postdec2	equ	0xFDD
 10346                           plusw2	equ	0xFDB
 10347                           fsr2h	equ	0xFDA
 10348                           fsr2l	equ	0xFD9
 10349                           status	equ	0xFD8
 10350                           
 10351 ;; *************** function _GetEventNumber *****************
 10352 ;; Defined at:
 10353 ;;		line 197 in file "libs/funcs.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;  i               2   15[BANK0 ] unsigned int 
 10358 ;; Return value:  Size  Location     Type
 10359 ;;                  1    wreg      char 
 10360 ;; Registers used:
 10361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10362 ;; Tracked objects:
 10363 ;;		On entry : 3F/0
 10364 ;;		On exit  : 3F/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10369 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10370 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10371 ;;Total ram usage:       11 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:   10
 10374 ;; This function calls:
 10375 ;;		___wmul
 10376 ;; This function is called by:
 10377 ;;		_main
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           	psect	text46
 10382  002042                     __ptext46:
 10383                           	opt stack 0
 10384  002042                     _GetEventNumber:
 10385                           	opt stack 20
 10386                           
 10387                           ; BSR set to: 0
 10388                           ;funcs.c: 198: for (UINT i=0; i<24; i++) {
 10389                           
 10390                           ;incstack = 0
 10391  002042  6B6F               	clrf	GetEventNumber@i& (0+255),b
 10392  002044  6B70               	clrf	(GetEventNumber@i+1)& (0+255),b
 10393  002046                     l4305:
 10394                           
 10395                           ; BSR set to: 0
 10396                           ;funcs.c: 199: if (DATE_TIME.DAY.Val & EVENTS[i].SELECTED_WEEKS.Val) {
 10397  002046  D854               	call	PL16	;call to abstracted procedure
 10398  002048  EC89  F018         	call	___wmul	;wreg free
 10399  00204C  D872               	call	PL104	;call to abstracted procedure
 10400  00204E  30DF               	rrcf	223,w,c
 10401  002050  0B7F               	andlw	127
 10402  002052  0100               	movlb	0	; () banked
 10403  002054  6F66               	movwf	??_GetEventNumber& (0+255),b
 10404  002056  31C1               	rrcf	(_DATE_TIME+8)& (0+255),w,b
 10405  002058  0B7F               	andlw	127
 10406  00205A  1566               	andwf	??_GetEventNumber& (0+255),w,b
 10407  00205C  E041               	bz	l4325
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;funcs.c: 200: if (EVENTS[i].START_TIME < EVENTS[i].END_TIME) {
 10411  00205E  D848               	call	PL16	;call to abstracted procedure
 10412  002060  EC89  F018         	call	___wmul	;wreg free
 10413  002064  D861               	call	PL74	;call to abstracted procedure
 10414  002066  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10415  002068  6EDA               	movwf	fsr2h,c
 10416  00206A  D842               	call	PL16	;call to abstracted procedure
 10417  00206C  EC89  F018         	call	___wmul	;wreg free
 10418  002070  0E00               	movlw	low _EVENTS
 10419  002072  2560               	addwf	?___wmul& (0+255),w,b
 10420  002074  6EE1               	movwf	fsr1l,c
 10421  002076  0E02               	movlw	high _EVENTS
 10422  002078  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10423  00207A  6EE2               	movwf	fsr1h,c
 10424  00207C  50DE               	movf	postinc2,w,c
 10425  00207E  5CE6               	subwf	postinc1,w,c
 10426  002080  50DE               	movf	postinc2,w,c
 10427  002082  58E6               	subwfb	postinc1,w,c
 10428  002084  50DE               	movf	postinc2,w,c
 10429  002086  58E6               	subwfb	postinc1,w,c
 10430  002088  50E6               	movf	postinc1,w,c
 10431  00208A  0A80               	xorlw	128
 10432  00208C  6F6E               	movwf	(??_GetEventNumber+8)& (0+255),b
 10433  00208E  50DE               	movf	postinc2,w,c
 10434  002090  0A80               	xorlw	128
 10435  002092  596E               	subwfb	(??_GetEventNumber+8)& (0+255),w,b
 10436  002094  E21B               	bc	l4317
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;funcs.c: 201: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
 10440                           ;funcs.c: 202: && (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
 10441  002096  D82C               	call	PL16	;call to abstracted procedure
 10442  002098  EC89  F018         	call	___wmul	;wreg free
 10443  00209C  D841               	call	PL70	;call to abstracted procedure
 10444  00209E  D830               	call	PL34	;call to abstracted procedure
 10445  0020A0  E21F               	bc	l4325
 10446                           
 10447                           ; BSR set to: 0
 10448  0020A2  D826               	call	PL16	;call to abstracted procedure
 10449  0020A4  EC89  F018         	call	___wmul	;wreg free
 10450  0020A8  D83F               	call	PL74	;call to abstracted procedure
 10451  0020AA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10452  0020AC  6EDA               	movwf	fsr2h,c
 10453  0020AE  50DE               	movf	postinc2,w,c
 10454  0020B0  5DB9               	subwf	_DATE_TIME& (0+255),w,b
 10455  0020B2  50DE               	movf	postinc2,w,c
 10456  0020B4  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
 10457  0020B6  50DE               	movf	postinc2,w,c
 10458  0020B8  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
 10459  0020BA  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
 10460  0020BC  0A80               	xorlw	128
 10461  0020BE  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
 10462  0020C0  50DE               	movf	postinc2,w,c
 10463  0020C2  0A80               	xorlw	128
 10464  0020C4  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
 10465  0020C6  E20C               	bc	l4325
 10466  0020C8                     l4313:
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;funcs.c: 203: return i;
 10470  0020C8  516F               	movf	GetEventNumber@i& (0+255),w,b
 10471  0020CA  0012               	return	
 10472  0020CC                     l4317:
 10473                           
 10474                           ; BSR set to: 0
 10475                           ;funcs.c: 206: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
 10476                           ;funcs.c: 207: || (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
 10477  0020CC  D811               	call	PL16	;call to abstracted procedure
 10478  0020CE  EC89  F018         	call	___wmul	;wreg free
 10479  0020D2  D826               	call	PL70	;call to abstracted procedure
 10480  0020D4  D815               	call	PL34	;call to abstracted procedure
 10481  0020D6  E3F8               	bnc	l4313
 10482                           
 10483                           ; BSR set to: 0
 10484  0020D8  D80B               	call	PL16	;call to abstracted procedure
 10485  0020DA  EC89  F018         	call	___wmul	;wreg free
 10486  0020DE  D7E4               	goto	L8
 10487  0020E0                     l4325:
 10488                           
 10489                           ; BSR set to: 0
 10490  0020E0  4B6F               	infsnz	GetEventNumber@i& (0+255),f,b
 10491  0020E2  2B70               	incf	(GetEventNumber@i+1)& (0+255),f,b
 10492                           
 10493                           ; BSR set to: 0
 10494  0020E4  5170               	movf	(GetEventNumber@i+1)& (0+255),w,b
 10495  0020E6  E103               	bnz	u4060
 10496  0020E8  0E18               	movlw	24
 10497  0020EA  5D6F               	subwf	GetEventNumber@i& (0+255),w,b
 10498  0020EC  E3AC               	bnc	l4305
 10499  0020EE                     u4060:
 10500                           
 10501                           ; BSR set to: 0
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;funcs.c: 209: }
 10505                           ;funcs.c: 210: }
 10506                           ;funcs.c: 211: }
 10507                           ;funcs.c: 212: }
 10508                           ;funcs.c: 213: return -1;
 10509  0020EE  0CFF               	retlw	255	;funcret
 10510  0020F0                     __end_of_GetEventNumber:
 10511                           	opt stack 0
 10512  0020F0                     PL16:
 10513                           	opt stack 20
 10514  0020F0  C06F  F060         	movff	GetEventNumber@i,___wmul@multiplier
 10515  0020F4  C070  F061         	movff	GetEventNumber@i+1,___wmul@multiplier+1
 10516  0020F8  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
 10517  0020FA  0E0A               	movlw	10
 10518  0020FC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10519  0020FE  0C0A               	retlw	10
 10520  002100                     __end_ofPL16:
 10521                           	opt stack 0
 10522  002100                     PL34:
 10523                           	opt stack 20
 10524  002100  0E02               	movlw	high _EVENTS
 10525  002102  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10526  002104  6EDA               	movwf	fsr2h,c
 10527  002106  51B9               	movf	_DATE_TIME& (0+255),w,b
 10528  002108  5CDE               	subwf	postinc2,w,c
 10529  00210A  51BA               	movf	(_DATE_TIME+1)& (0+255),w,b
 10530  00210C  58DE               	subwfb	postinc2,w,c
 10531  00210E  51BB               	movf	(_DATE_TIME+2)& (0+255),w,b
 10532  002110  58DE               	subwfb	postinc2,w,c
 10533  002112  50DE               	movf	postinc2,w,c
 10534  002114  0A80               	xorlw	128
 10535  002116  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
 10536  002118  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
 10537  00211A  0A80               	xorlw	128
 10538  00211C  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
 10539  00211E  0012               	return	
 10540  002120                     __end_ofPL34:
 10541                           	opt stack 0
 10542  002120                     PL70:
 10543                           	opt stack 19
 10544  002120  0E00               	movlw	low _EVENTS
 10545  002122  2560               	addwf	?___wmul& (0+255),w,b
 10546  002124  6ED9               	movwf	fsr2l,c
 10547  002126  0012               	return	
 10548  002128                     __end_ofPL70:
 10549                           	opt stack 0
 10550  002128                     PL74:
 10551                           	opt stack 19
 10552  002128  0E04               	movlw	low (_EVENTS+4)
 10553  00212A  2560               	addwf	?___wmul& (0+255),w,b
 10554  00212C  6ED9               	movwf	fsr2l,c
 10555  00212E  0E02               	movlw	high (_EVENTS+4)
 10556  002130  0012               	return	
 10557  002132                     __end_ofPL74:
 10558                           	opt stack 0
 10559  002132                     PL104:
 10560                           	opt stack 19
 10561  002132  0E09               	movlw	low (_EVENTS+9)
 10562  002134  2560               	addwf	?___wmul& (0+255),w,b
 10563  002136  6ED9               	movwf	fsr2l,c
 10564  002138  0E02               	movlw	high (_EVENTS+9)
 10565  00213A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10566  00213C  6EDA               	movwf	fsr2h,c
 10567  00213E  0012               	return	
 10568  002140                     __end_ofPL104:
 10569                           	opt stack 0
 10570                           tosu	equ	0xFFF
 10571                           tosh	equ	0xFFE
 10572                           tosl	equ	0xFFD
 10573                           pclath	equ	0xFFA
 10574                           tblptru	equ	0xFF8
 10575                           tblptrh	equ	0xFF7
 10576                           tblptrl	equ	0xFF6
 10577                           tablat	equ	0xFF5
 10578                           prodh	equ	0xFF4
 10579                           prodl	equ	0xFF3
 10580                           intcon	equ	0xFF2
 10581                           postinc0	equ	0xFEE
 10582                           plusw0	equ	0xFEB
 10583                           wreg	equ	0xFE8
 10584                           indf1	equ	0xFE7
 10585                           postinc1	equ	0xFE6
 10586                           postdec1	equ	0xFE5
 10587                           plusw1	equ	0xFE3
 10588                           fsr1h	equ	0xFE2
 10589                           fsr1l	equ	0xFE1
 10590                           indf2	equ	0xFDF
 10591                           postinc2	equ	0xFDE
 10592                           postdec2	equ	0xFDD
 10593                           plusw2	equ	0xFDB
 10594                           fsr2h	equ	0xFDA
 10595                           fsr2l	equ	0xFD9
 10596                           status	equ	0xFD8
 10597                           
 10598 ;; *************** function ___wmul *****************
 10599 ;; Defined at:
 10600 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10603 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  product         2    4[BANK0 ] unsigned int 
 10606 ;; Return value:  Size  Location     Type
 10607 ;;                  2    0[BANK0 ] unsigned int 
 10608 ;; Registers used:
 10609 ;;		wreg, status,2, status,0, prodl, prodh
 10610 ;; Tracked objects:
 10611 ;;		On entry : 3F/0
 10612 ;;		On exit  : 3F/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10615 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10618 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10619 ;;Total ram usage:        6 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; Hardware stack levels required when called:    9
 10622 ;; This function calls:
 10623 ;;		Nothing
 10624 ;; This function is called by:
 10625 ;;		_LoadSettingsFromEeprom
 10626 ;;		_LoadEventsFromEeprom
 10627 ;;		_LoadStatesFromEeprom
 10628 ;;		_LoadCyclesFromEeprom
 10629 ;;		_AdjustDayLightSaving
 10630 ;;		_GetEventNumber
 10631 ;; This function uses a non-reentrant model
 10632 ;;
 10633                           
 10634                           	psect	text47
 10635  003112                     __ptext47:
 10636                           	opt stack 0
 10637  003112                     ___wmul:
 10638                           	opt stack 18
 10639                           
 10640                           ; BSR set to: 0
 10641                           
 10642                           ; BSR set to: 0
 10643                           ;incstack = 0
 10644  003112  5160               	movf	___wmul@multiplier& (0+255),w,b
 10645  003114  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10646  003116  CFF3 F064          	movff	prodl,___wmul@product
 10647  00311A  CFF4 F065          	movff	prodh,___wmul@product+1
 10648  00311E  5160               	movf	___wmul@multiplier& (0+255),w,b
 10649  003120  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10650  003122  50F3               	movf	prodl,w,c
 10651  003124  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10652  003126  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10653  003128  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10654  00312A  50F3               	movf	prodl,w,c
 10655  00312C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10656                           
 10657                           ; BSR set to: 0
 10658  00312E  C064  F060         	movff	___wmul@product,?___wmul
 10659  003132  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10660                           
 10661                           ; BSR set to: 0
 10662  003136  0012               	return		;funcret
 10663  003138                     __end_of___wmul:
 10664                           	opt stack 0
 10665                           tosu	equ	0xFFF
 10666                           tosh	equ	0xFFE
 10667                           tosl	equ	0xFFD
 10668                           pclath	equ	0xFFA
 10669                           tblptru	equ	0xFF8
 10670                           tblptrh	equ	0xFF7
 10671                           tblptrl	equ	0xFF6
 10672                           tablat	equ	0xFF5
 10673                           prodh	equ	0xFF4
 10674                           prodl	equ	0xFF3
 10675                           intcon	equ	0xFF2
 10676                           postinc0	equ	0xFEE
 10677                           plusw0	equ	0xFEB
 10678                           wreg	equ	0xFE8
 10679                           indf1	equ	0xFE7
 10680                           postinc1	equ	0xFE6
 10681                           postdec1	equ	0xFE5
 10682                           plusw1	equ	0xFE3
 10683                           fsr1h	equ	0xFE2
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           postdec2	equ	0xFDD
 10688                           plusw2	equ	0xFDB
 10689                           fsr2h	equ	0xFDA
 10690                           fsr2l	equ	0xFD9
 10691                           status	equ	0xFD8
 10692                           
 10693 ;; *************** function _INTERRUPT_InterruptManager *****************
 10694 ;; Defined at:
 10695 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;		None
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;		None
 10700 ;; Return value:  Size  Location     Type
 10701 ;;                  1    wreg      void 
 10702 ;; Registers used:
 10703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10704 ;; Tracked objects:
 10705 ;;		On entry : 0/0
 10706 ;;		On exit  : 0/0
 10707 ;;		Unchanged: 0/0
 10708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10711 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10712 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10713 ;;Total ram usage:       10 bytes
 10714 ;; Hardware stack levels used:    1
 10715 ;; Hardware stack levels required when called:    8
 10716 ;; This function calls:
 10717 ;;		_TMR0_ISR
 10718 ;; This function is called by:
 10719 ;;		Interrupt level 2
 10720 ;; This function uses a non-reentrant model
 10721 ;;
 10722                           
 10723                           	psect	intcode
 10724  000008                     __pintcode:
 10725                           	opt stack 0
 10726  000008                     _INTERRUPT_InterruptManager:
 10727                           	opt stack 15
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;incstack = 0
 10731  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10732  00000A  CFFA F041          	movff	pclath,??_INTERRUPT_InterruptManager
 10733  00000E  CFFB F042          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 10734  000012  CFE9 F043          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 10735  000016  CFEA F044          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 10736  00001A  CFE1 F045          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 10737  00001E  CFE2 F046          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 10738  000022  CFD9 F047          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 10739  000026  CFDA F048          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 10740  00002A  CFF3 F049          	movff	prodl,??_INTERRUPT_InterruptManager+8
 10741  00002E  CFF4 F04A          	movff	prodh,??_INTERRUPT_InterruptManager+9
 10742                           
 10743                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 10744  000032  010E               	movlb	14	; () banked
 10745  000034  BBC2               	btfsc	194,5,b	;volatile
 10746                           
 10747                           ; BSR set to: 14
 10748  000036  ABCA               	btfss	202,5,b	;volatile
 10749  000038  D002               	goto	i2l748
 10750                           
 10751                           ; BSR set to: 14
 10752                           ;interrupt_manager.c: 61: {
 10753                           ;interrupt_manager.c: 62: TMR0_ISR();
 10754  00003A  EC04  F019         	call	_TMR0_ISR	;wreg free
 10755  00003E                     i2l748:
 10756  00003E  C04A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 10757  000042  C049  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 10758  000046  C048  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 10759  00004A  C047  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 10760  00004E  C046  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 10761  000052  C045  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 10762  000056  C044  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 10763  00005A  C043  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 10764  00005E  C042  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 10765  000062  C041  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 10766  000066  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10767  000068  0011               	retfie		f
 10768  00006A                     __end_of_INTERRUPT_InterruptManager:
 10769                           	opt stack 0
 10770                           tosu	equ	0xFFF
 10771                           tosh	equ	0xFFE
 10772                           tosl	equ	0xFFD
 10773                           pclatu	equ	0xFFB
 10774                           pclath	equ	0xFFA
 10775                           tblptru	equ	0xFF8
 10776                           tblptrh	equ	0xFF7
 10777                           tblptrl	equ	0xFF6
 10778                           tablat	equ	0xFF5
 10779                           prodh	equ	0xFF4
 10780                           prodl	equ	0xFF3
 10781                           intcon	equ	0xFF2
 10782                           postinc0	equ	0xFEE
 10783                           plusw0	equ	0xFEB
 10784                           fsr0h	equ	0xFEA
 10785                           fsr0l	equ	0xFE9
 10786                           wreg	equ	0xFE8
 10787                           indf1	equ	0xFE7
 10788                           postinc1	equ	0xFE6
 10789                           postdec1	equ	0xFE5
 10790                           plusw1	equ	0xFE3
 10791                           fsr1h	equ	0xFE2
 10792                           fsr1l	equ	0xFE1
 10793                           indf2	equ	0xFDF
 10794                           postinc2	equ	0xFDE
 10795                           postdec2	equ	0xFDD
 10796                           plusw2	equ	0xFDB
 10797                           fsr2h	equ	0xFDA
 10798                           fsr2l	equ	0xFD9
 10799                           status	equ	0xFD8
 10800                           
 10801 ;; *************** function _TMR0_ISR *****************
 10802 ;; Defined at:
 10803 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 10804 ;; Parameters:    Size  Location     Type
 10805 ;;		None
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;		None
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      void 
 10810 ;; Registers used:
 10811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : 3F/E
 10814 ;;		On exit  : 0/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10821 ;;Total ram usage:        0 bytes
 10822 ;; Hardware stack levels used:    1
 10823 ;; Hardware stack levels required when called:    7
 10824 ;; This function calls:
 10825 ;;		_TMR0_CallBack
 10826 ;; This function is called by:
 10827 ;;		_INTERRUPT_InterruptManager
 10828 ;; This function uses a non-reentrant model
 10829 ;;
 10830                           
 10831                           	psect	text49
 10832  003208                     __ptext49:
 10833                           	opt stack 0
 10834  003208                     _TMR0_ISR:
 10835                           	opt stack 15
 10836                           
 10837                           ; BSR set to: 14
 10838                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 10839                           
 10840                           ;incstack = 0
 10841  003208  9BCA               	bcf	202,5,b	;volatile
 10842                           
 10843                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 10844  00320A  C04C  FFD4         	movff	_timer0ReloadVal16bit+1,4052	;volatile
 10845                           
 10846                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 10847  00320E  C04B  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
 10848                           
 10849                           ; BSR set to: 14
 10850                           ;tmr0.c: 146: TMR0_CallBack();
 10851  003212  EF9C  F018         	goto	_TMR0_CallBack	;wreg free
 10852  003216                     __end_of_TMR0_ISR:
 10853                           	opt stack 0
 10854                           tosu	equ	0xFFF
 10855                           tosh	equ	0xFFE
 10856                           tosl	equ	0xFFD
 10857                           pclatu	equ	0xFFB
 10858                           pclath	equ	0xFFA
 10859                           tblptru	equ	0xFF8
 10860                           tblptrh	equ	0xFF7
 10861                           tblptrl	equ	0xFF6
 10862                           tablat	equ	0xFF5
 10863                           prodh	equ	0xFF4
 10864                           prodl	equ	0xFF3
 10865                           intcon	equ	0xFF2
 10866                           postinc0	equ	0xFEE
 10867                           plusw0	equ	0xFEB
 10868                           fsr0h	equ	0xFEA
 10869                           fsr0l	equ	0xFE9
 10870                           wreg	equ	0xFE8
 10871                           indf1	equ	0xFE7
 10872                           postinc1	equ	0xFE6
 10873                           postdec1	equ	0xFE5
 10874                           plusw1	equ	0xFE3
 10875                           fsr1h	equ	0xFE2
 10876                           fsr1l	equ	0xFE1
 10877                           indf2	equ	0xFDF
 10878                           postinc2	equ	0xFDE
 10879                           postdec2	equ	0xFDD
 10880                           plusw2	equ	0xFDB
 10881                           fsr2h	equ	0xFDA
 10882                           fsr2l	equ	0xFD9
 10883                           status	equ	0xFD8
 10884                           
 10885 ;; *************** function _TMR0_CallBack *****************
 10886 ;; Defined at:
 10887 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;		None
 10890 ;; Auto vars:     Size  Location     Type
 10891 ;;		None
 10892 ;; Return value:  Size  Location     Type
 10893 ;;                  1    wreg      void 
 10894 ;; Registers used:
 10895 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 10896 ;; Tracked objects:
 10897 ;;		On entry : 3F/E
 10898 ;;		On exit  : 0/0
 10899 ;;		Unchanged: 0/0
 10900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10905 ;;Total ram usage:        0 bytes
 10906 ;; Hardware stack levels used:    1
 10907 ;; Hardware stack levels required when called:    6
 10908 ;; This function calls:
 10909 ;;		Absolute function
 10910 ;;		_TMR0_DefaultInterruptHandler
 10911 ;;		_Timer0_10ms
 10912 ;; This function is called by:
 10913 ;;		_TMR0_ISR
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           	psect	text50
 10918  003138                     __ptext50:
 10919                           	opt stack 0
 10920  003138                     _TMR0_CallBack:
 10921                           	opt stack 15
 10922                           
 10923                           ; BSR set to: 14
 10924                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 10925                           
 10926                           ;incstack = 0
 10927  003138  0100               	movlb	0	; () banked
 10928  00313A  51DC               	movf	_TMR0_InterruptHandler& (0+255),w,b
 10929  00313C  11DD               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 10930  00313E  B4D8               	btfsc	status,2,c
 10931  003140  0012               	return	
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;tmr0.c: 156: {
 10935                           ;tmr0.c: 157: TMR0_InterruptHandler();
 10936  003142  0005               	push	
 10937  003144  6EFA               	movwf	pclath,c
 10938  003146  51DC               	movf	_TMR0_InterruptHandler& (0+255),w,b
 10939  003148  6EFD               	movwf	tosl,c
 10940  00314A  51DD               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 10941  00314C  6EFE               	movwf	tosh,c
 10942  00314E  6AFF               	clrf	tosu,c
 10943  003150  50FA               	movf	pclath,w,c
 10944  003152  0012               	return		;indir
 10945  003154                     __end_of_TMR0_CallBack:
 10946                           	opt stack 0
 10947                           tosu	equ	0xFFF
 10948                           tosh	equ	0xFFE
 10949                           tosl	equ	0xFFD
 10950                           pclatu	equ	0xFFB
 10951                           pclath	equ	0xFFA
 10952                           tblptru	equ	0xFF8
 10953                           tblptrh	equ	0xFF7
 10954                           tblptrl	equ	0xFF6
 10955                           tablat	equ	0xFF5
 10956                           prodh	equ	0xFF4
 10957                           prodl	equ	0xFF3
 10958                           intcon	equ	0xFF2
 10959                           postinc0	equ	0xFEE
 10960                           plusw0	equ	0xFEB
 10961                           fsr0h	equ	0xFEA
 10962                           fsr0l	equ	0xFE9
 10963                           wreg	equ	0xFE8
 10964                           indf1	equ	0xFE7
 10965                           postinc1	equ	0xFE6
 10966                           postdec1	equ	0xFE5
 10967                           plusw1	equ	0xFE3
 10968                           fsr1h	equ	0xFE2
 10969                           fsr1l	equ	0xFE1
 10970                           indf2	equ	0xFDF
 10971                           postinc2	equ	0xFDE
 10972                           postdec2	equ	0xFDD
 10973                           plusw2	equ	0xFDB
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10979 ;; Defined at:
 10980 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;		None
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;		None
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  1    wreg      void 
 10987 ;; Registers used:
 10988 ;;		None
 10989 ;; Tracked objects:
 10990 ;;		On entry : 3F/0
 10991 ;;		On exit  : 3F/0
 10992 ;;		Unchanged: 3F/0
 10993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10998 ;;Total ram usage:        0 bytes
 10999 ;; Hardware stack levels used:    1
 11000 ;; This function calls:
 11001 ;;		Nothing
 11002 ;; This function is called by:
 11003 ;;		_TMR0_Initialize
 11004 ;;		_TMR0_CallBack
 11005 ;; This function uses a non-reentrant model
 11006 ;;
 11007                           
 11008                           	psect	text51
 11009  003238                     __ptext51:
 11010                           	opt stack 0
 11011  003238                     _TMR0_DefaultInterruptHandler:
 11012                           	opt stack 20
 11013                           
 11014                           ; BSR set to: 0
 11015                           
 11016                           ;incstack = 0
 11017  003238  0012               	return		;funcret
 11018  00323A                     __end_of_TMR0_DefaultInterruptHandler:
 11019                           	opt stack 0
 11020                           tosu	equ	0xFFF
 11021                           tosh	equ	0xFFE
 11022                           tosl	equ	0xFFD
 11023                           pclatu	equ	0xFFB
 11024                           pclath	equ	0xFFA
 11025                           tblptru	equ	0xFF8
 11026                           tblptrh	equ	0xFF7
 11027                           tblptrl	equ	0xFF6
 11028                           tablat	equ	0xFF5
 11029                           prodh	equ	0xFF4
 11030                           prodl	equ	0xFF3
 11031                           intcon	equ	0xFF2
 11032                           postinc0	equ	0xFEE
 11033                           plusw0	equ	0xFEB
 11034                           fsr0h	equ	0xFEA
 11035                           fsr0l	equ	0xFE9
 11036                           wreg	equ	0xFE8
 11037                           indf1	equ	0xFE7
 11038                           postinc1	equ	0xFE6
 11039                           postdec1	equ	0xFE5
 11040                           plusw1	equ	0xFE3
 11041                           fsr1h	equ	0xFE2
 11042                           fsr1l	equ	0xFE1
 11043                           indf2	equ	0xFDF
 11044                           postinc2	equ	0xFDE
 11045                           postdec2	equ	0xFDD
 11046                           plusw2	equ	0xFDB
 11047                           fsr2h	equ	0xFDA
 11048                           fsr2l	equ	0xFD9
 11049                           status	equ	0xFD8
 11050                           
 11051 ;; *************** function _Timer0_10ms *****************
 11052 ;; Defined at:
 11053 ;;		line 3 in file "libs/projMain.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;		None
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  i               1   62[COMRAM] unsigned char 
 11058 ;;  i               1   63[COMRAM] unsigned char 
 11059 ;;  ThisCycle       1   57[COMRAM] unsigned char 
 11060 ;;  i               1   61[COMRAM] unsigned char 
 11061 ;;  i               1   58[COMRAM] unsigned char 
 11062 ;;  OutForThePor    2   59[COMRAM] unsigned char [2]
 11063 ;; Return value:  Size  Location     Type
 11064 ;;                  1    wreg      void 
 11065 ;; Registers used:
 11066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11067 ;; Tracked objects:
 11068 ;;		On entry : 3F/0
 11069 ;;		On exit  : 3F/0
 11070 ;;		Unchanged: 0/0
 11071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11073 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11074 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11075 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11076 ;;Total ram usage:       12 bytes
 11077 ;; Hardware stack levels used:    1
 11078 ;; Hardware stack levels required when called:    5
 11079 ;; This function calls:
 11080 ;;		_IncreaseByASecond
 11081 ;; This function is called by:
 11082 ;;		_main
 11083 ;;		_TMR0_CallBack
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text52
 11088  00130A                     __ptext52:
 11089                           	opt stack 0
 11090  00130A                     _Timer0_10ms:
 11091                           	opt stack 15
 11092                           
 11093                           ; BSR set to: 0
 11094                           ;projMain.c: 4: if (FLAGS_1.bits.b0) {
 11095                           
 11096                           ; BSR set to: 0
 11097                           ;incstack = 0
 11098  00130A  A04D               	btfss	_FLAGS_1,0,c
 11099  00130C  D009               	goto	i2l3651
 11100                           
 11101                           ; BSR set to: 0
 11102                           ;projMain.c: 5: PRESENT_STATE = NEXT_STATE;
 11103  00130E  C0E2  F0E3         	movff	_NEXT_STATE,_PRESENT_STATE
 11104                           
 11105                           ;projMain.c: 6: STATE_SECONDS = 0;
 11106  001312  6A53               	clrf	_STATE_SECONDS,c
 11107                           
 11108                           ;projMain.c: 7: FLAGS_1.bits.b0 = RESET;
 11109  001314  904D               	bcf	_FLAGS_1,0,c
 11110                           
 11111                           ; BSR set to: 0
 11112                           ;projMain.c: 8: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD;
 11113  001316  D8EE               	call	PL32	;call to abstracted procedure
 11114  001318  20F4               	addwfc	prodh,w,c
 11115  00131A  6EDA               	movwf	fsr2h,c
 11116  00131C  50DF               	movf	indf2,w,c
 11117  00131E  6E52               	movwf	_STATE_SECONDS_REMAINING,c
 11118  001320                     i2l3651:
 11119                           
 11120                           ; BSR set to: 0
 11121                           ;projMain.c: 9: }
 11122                           ;projMain.c: 10: UINT8 OutForThePorts[2];
 11123                           ;projMain.c: 11: for (UINT8 i =0; i<2; i++) {
 11124  001320  6A3B               	clrf	Timer0_10ms@i,c
 11125  001322                     i2l3657:
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;projMain.c: 12: OutForThePorts[i] = 0x00;
 11129  001322  503B               	movf	Timer0_10ms@i,w,c
 11130  001324  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11131  001326  6ED9               	movwf	fsr2l,c
 11132  001328  6ADA               	clrf	fsr2h,c
 11133  00132A  6ADF               	clrf	indf2,c
 11134                           
 11135                           ; BSR set to: 0
 11136  00132C  2A3B               	incf	Timer0_10ms@i,f,c
 11137                           
 11138                           ; BSR set to: 0
 11139  00132E  0E01               	movlw	1
 11140  001330  643B               	cpfsgt	Timer0_10ms@i,c
 11141  001332  D7F7               	goto	i2l3657
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;projMain.c: 13: }
 11145                           ;projMain.c: 14: for (UINT8 i =0; i<2; i++) {
 11146  001334  6A3E               	clrf	Timer0_10ms@i_2890,c
 11147  001336                     i2l3667:
 11148                           
 11149                           ; BSR set to: 0
 11150                           ;projMain.c: 15: OutForThePorts[i] = STATES[PRESENT_STATE].ON[i];
 11151  001336  51E3               	movf	_PRESENT_STATE& (0+255),w,b
 11152  001338  0D06               	mullw	6
 11153  00133A  0EF0               	movlw	low _STATES
 11154  00133C  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11155  00133E  0E06               	movlw	high _STATES
 11156  001340  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11157  001342  2A35               	incf	??_Timer0_10ms,f,c
 11158  001344  0E00               	movlw	0
 11159  001346  2236               	addwfc	??_Timer0_10ms+1,f,c
 11160  001348  50F3               	movf	prodl,w,c
 11161  00134A  2635               	addwf	??_Timer0_10ms,f,c
 11162  00134C  50F4               	movf	prodh,w,c
 11163  00134E  2236               	addwfc	??_Timer0_10ms+1,f,c
 11164  001350  503E               	movf	Timer0_10ms@i_2890,w,c
 11165  001352  2435               	addwf	??_Timer0_10ms,w,c
 11166  001354  6ED9               	movwf	fsr2l,c
 11167  001356  0E00               	movlw	0
 11168  001358  2036               	addwfc	??_Timer0_10ms+1,w,c
 11169  00135A  6EDA               	movwf	fsr2h,c
 11170  00135C  503E               	movf	Timer0_10ms@i_2890,w,c
 11171  00135E  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11172  001360  6EE1               	movwf	fsr1l,c
 11173  001362  6AE2               	clrf	fsr1h,c
 11174  001364  CFDF FFE7          	movff	indf2,indf1
 11175                           
 11176                           ; BSR set to: 0
 11177  001368  2A3E               	incf	Timer0_10ms@i_2890,f,c
 11178                           
 11179                           ; BSR set to: 0
 11180  00136A  0E01               	movlw	1
 11181  00136C  643E               	cpfsgt	Timer0_10ms@i_2890,c
 11182  00136E  D7E3               	goto	i2l3667
 11183                           
 11184                           ; BSR set to: 0
 11185                           ;projMain.c: 16: }
 11186                           ;projMain.c: 17: if (STATE_SECONDS_REMAINING <= BLINK_LAST_X_SECONDS) {
 11187  001370  5052               	movf	_STATE_SECONDS_REMAINING,w,c
 11188  001372  5C59               	subwf	_BLINK_LAST_X_SECONDS,w,c
 11189  001374  E30F               	bnc	i2l1107
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;projMain.c: 18: if (BLINK_STATE_ON_OFF_COUNTER < BLINK_ON_TIME) {
 11193  001376  505B               	movf	_BLINK_ON_TIME,w,c
 11194  001378  5C50               	subwf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 11195  00137A  E217               	bc	i2l3699
 11196                           
 11197                           ; BSR set to: 0
 11198                           ;projMain.c: 19: for (UINT8 i =0; i<2; i++)
 11199  00137C  6A3F               	clrf	Timer0_10ms@i_2891,c
 11200  00137E                     i2l3683:
 11201                           
 11202                           ; BSR set to: 0
 11203                           ;projMain.c: 20: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 11204  00137E  503F               	movf	Timer0_10ms@i_2891,w,c
 11205  001380  D8A7               	call	PL28	;call to abstracted procedure
 11206  001382  503F               	movf	Timer0_10ms@i_2891,w,c
 11207  001384  D8C9               	call	PL98	;call to abstracted procedure
 11208  001386  503F               	movf	Timer0_10ms@i_2891,w,c
 11209  001388  D8CF               	call	PL106	;call to abstracted procedure
 11210                           
 11211                           ; BSR set to: 0
 11212  00138A  2A3F               	incf	Timer0_10ms@i_2891,f,c
 11213                           
 11214                           ; BSR set to: 0
 11215  00138C  0E01               	movlw	1
 11216  00138E  643F               	cpfsgt	Timer0_10ms@i_2891,c
 11217  001390  D7F6               	goto	i2l3683
 11218  001392  D00B               	goto	i2l3699
 11219  001394                     i2l1107:
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;projMain.c: 23: for (UINT8 i =0; i<2; i++)
 11223  001394  6A40               	clrf	Timer0_10ms@i_2892,c
 11224  001396                     i2l3693:
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;projMain.c: 24: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 11228  001396  5040               	movf	Timer0_10ms@i_2892,w,c
 11229  001398  D89B               	call	PL28	;call to abstracted procedure
 11230  00139A  5040               	movf	Timer0_10ms@i_2892,w,c
 11231  00139C  D8BD               	call	PL98	;call to abstracted procedure
 11232  00139E  5040               	movf	Timer0_10ms@i_2892,w,c
 11233  0013A0  D8C3               	call	PL106	;call to abstracted procedure
 11234                           
 11235                           ; BSR set to: 0
 11236  0013A2  2A40               	incf	Timer0_10ms@i_2892,f,c
 11237                           
 11238                           ; BSR set to: 0
 11239  0013A4  0E01               	movlw	1
 11240  0013A6  6440               	cpfsgt	Timer0_10ms@i_2892,c
 11241  0013A8  D7F6               	goto	i2l3693
 11242  0013AA                     i2l3699:
 11243                           
 11244                           ; BSR set to: 0
 11245                           ;projMain.c: 25: }
 11246                           ;projMain.c: 31: if ((STATES[PRESENT_STATE].AUDIO == AUDIO_NORMAL)
 11247                           ;projMain.c: 32: || ((STATES[PRESENT_STATE].AUDIO == AUDIO_SPECIAL)
 11248                           ;projMain.c: 33: && (STATE_SECONDS_REMAINING <= SPECIAL_AUDIO_LAST_X_SECONDS))) {
 11249  0013AA  D880               	call	PL24	;call to abstracted procedure
 11250  0013AC  20F4               	addwfc	prodh,w,c
 11251  0013AE  6EDA               	movwf	fsr2h,c
 11252  0013B0  04DE               	decf	postinc2,w,c
 11253  0013B2  E006               	bz	i2l3705
 11254                           
 11255                           ; BSR set to: 0
 11256  0013B4  D87B               	call	PL24	;call to abstracted procedure
 11257  0013B6  D8C4               	call	PL132	;call to abstracted procedure
 11258  0013B8  E106               	bnz	i2l3709
 11259                           
 11260                           ; BSR set to: 0
 11261  0013BA  5052               	movf	_STATE_SECONDS_REMAINING,w,c
 11262  0013BC  5C54               	subwf	_SPECIAL_AUDIO_LAST_X_SECONDS,w,c
 11263  0013BE  E303               	bnc	i2l3709
 11264  0013C0                     i2l3705:
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;projMain.c: 34: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_NORMAL_ON_TIME)
 11268  0013C0  5058               	movf	_AUDIO_NORMAL_ON_TIME,w,c
 11269  0013C2  5C4F               	subwf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11270  0013C4  D005               	goto	L10
 11271  0013C6                     i2l3709:
 11272                           
 11273                           ; BSR set to: 0
 11274  0013C6  D872               	call	PL24	;call to abstracted procedure
 11275  0013C8  D8BB               	call	PL132	;call to abstracted procedure
 11276  0013CA  E105               	bnz	i2l1120
 11277                           
 11278                           ; BSR set to: 0
 11279                           ;projMain.c: 39: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_SPECIAL_ON_TIME)
 11280  0013CC  5056               	movf	_AUDIO_SPECIAL_ON_TIME,w,c
 11281  0013CE  5C4E               	subwf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11282  0013D0                     L10:
 11283  0013D0  E202               	bc	i2l1120
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;projMain.c: 40: LATCbits.LC0 = ON;
 11287  0013D2  8085               	bsf	3973,0,c	;volatile
 11288  0013D4  D001               	goto	i2l3715
 11289  0013D6                     i2l1120:
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;projMain.c: 44: LATCbits.LC0 = OFF;
 11293  0013D6  9085               	bcf	3973,0,c	;volatile
 11294  0013D8                     i2l3715:
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;projMain.c: 45: CENTI_SECOND_COUNT++;
 11298  0013D8  2A51               	incf	_CENTI_SECOND_COUNT,f,c
 11299                           
 11300                           ;projMain.c: 46: BLINK_STATE_ON_OFF_COUNTER++;
 11301  0013DA  2A50               	incf	_BLINK_STATE_ON_OFF_COUNTER,f,c
 11302                           
 11303                           ; BSR set to: 0
 11304                           ;projMain.c: 47: if (BLINK_STATE_ON_OFF_COUNTER >= (BLINK_ON_TIME + BLINK_OFF_TIME))
 11305  0013DC  505A               	movf	_BLINK_OFF_TIME,w,c
 11306  0013DE  C05B  F035         	movff	_BLINK_ON_TIME,??_Timer0_10ms
 11307  0013E2  D8A9               	call	PL108	;call to abstracted procedure
 11308  0013E4  5050               	movf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 11309  0013E6  D869               	call	PL26	;call to abstracted procedure
 11310  0013E8  E301               	bnc	i2l3721
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;projMain.c: 48: BLINK_STATE_ON_OFF_COUNTER=0;
 11314  0013EA  6A50               	clrf	_BLINK_STATE_ON_OFF_COUNTER,c
 11315  0013EC                     i2l3721:
 11316                           
 11317                           ; BSR set to: 0
 11318                           ;projMain.c: 49: NORMAL_AUDIO_STATE_ON_OFF_COUNTER++;
 11319  0013EC  2A4F               	incf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;projMain.c: 50: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_NORMAL_ON_TIME + AUDIO_
      +                          NORMAL_OFF_TIME))
 11323  0013EE  5057               	movf	_AUDIO_NORMAL_OFF_TIME,w,c
 11324  0013F0  C058  F035         	movff	_AUDIO_NORMAL_ON_TIME,??_Timer0_10ms
 11325  0013F4  D8A0               	call	PL108	;call to abstracted procedure
 11326  0013F6  504F               	movf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11327  0013F8  D860               	call	PL26	;call to abstracted procedure
 11328  0013FA  E301               	bnc	i2l3727
 11329                           
 11330                           ; BSR set to: 0
 11331                           ;projMain.c: 51: NORMAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 11332  0013FC  6A4F               	clrf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,c
 11333  0013FE                     i2l3727:
 11334                           
 11335                           ; BSR set to: 0
 11336                           ;projMain.c: 52: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER++;
 11337  0013FE  2A4E               	incf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;projMain.c: 53: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_SPECIAL_ON_TIME + AUDI
      +                          O_SPECIAL_OFF_TIME))
 11341  001400  5055               	movf	_AUDIO_SPECIAL_OFF_TIME,w,c
 11342  001402  C056  F035         	movff	_AUDIO_SPECIAL_ON_TIME,??_Timer0_10ms
 11343  001406  D897               	call	PL108	;call to abstracted procedure
 11344  001408  504E               	movf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11345  00140A  D857               	call	PL26	;call to abstracted procedure
 11346  00140C  E301               	bnc	i2l3733
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;projMain.c: 54: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 11350  00140E  6A4E               	clrf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,c
 11351  001410                     i2l3733:
 11352                           
 11353                           ; BSR set to: 0
 11354                           ;projMain.c: 57: if (CENTI_SECOND_COUNT == 99) {
 11355  001410  0E63               	movlw	99
 11356  001412  1851               	xorwf	_CENTI_SECOND_COUNT,w,c
 11357  001414  E122               	bnz	i2l3747
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;projMain.c: 58: CENTI_SECOND_COUNT = 0;
 11361  001416  6A51               	clrf	_CENTI_SECOND_COUNT,c
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;projMain.c: 59: DATE_TIME = IncreaseByASecond(DATE_TIME);
 11365  001418  EE20  F0B9         	lfsr	2,_DATE_TIME
 11366  00141C  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
 11367  001420  0E0A               	movlw	10
 11368  001422                     i2u345_41:
 11369  001422  CFDB FFEB          	movff	plusw2,plusw0
 11370  001426  06E8               	decf	wreg,f,c
 11371  001428  E2FC               	bc	i2u345_41
 11372  00142A  EC86  F016         	call	_IncreaseByASecond	;wreg free
 11373  00142E  EE20  F0B9         	lfsr	2,_DATE_TIME
 11374  001432  0E0A               	movlw	10
 11375  001434                     i2u346_41:
 11376  001434  CFEB FFDB          	movff	plusw0,plusw2
 11377  001438  06E8               	decf	wreg,f,c
 11378  00143A  E2FC               	bc	i2u346_41
 11379                           
 11380                           ;projMain.c: 60: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD - STATE_SECONDS-
      +                          1;
 11381  00143C  0100               	movlb	0	; () banked
 11382  00143E  D85A               	call	PL32	;call to abstracted procedure
 11383  001440  20F4               	addwfc	prodh,w,c
 11384  001442  6EDA               	movwf	fsr2h,c
 11385  001444  50DF               	movf	indf2,w,c
 11386  001446  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11387  001448  5053               	movf	_STATE_SECONDS,w,c
 11388  00144A  5C35               	subwf	??_Timer0_10ms,w,c
 11389  00144C  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11390  00144E  0436               	decf	??_Timer0_10ms+1,w,c
 11391  001450  6E52               	movwf	_STATE_SECONDS_REMAINING,c
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;projMain.c: 61: if (STATE_SECONDS_REMAINING == 0)
 11395  001452  5052               	movf	_STATE_SECONDS_REMAINING,w,c
 11396  001454  E101               	bnz	i2l3745
 11397                           
 11398                           ; BSR set to: 0
 11399                           ;projMain.c: 62: FLAGS_1.bits.b0 = SET;
 11400  001456  804D               	bsf	_FLAGS_1,0,c
 11401  001458                     i2l3745:
 11402                           
 11403                           ; BSR set to: 0
 11404                           ;projMain.c: 63: STATE_SECONDS++;
 11405  001458  2A53               	incf	_STATE_SECONDS,f,c
 11406  00145A                     i2l3747:
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;projMain.c: 64: }
 11410                           ;projMain.c: 65: if (CENTI_SECOND_COUNT == 90) {
 11411  00145A  0E5A               	movlw	90
 11412  00145C  1851               	xorwf	_CENTI_SECOND_COUNT,w,c
 11413  00145E  A4D8               	btfss	status,2,c
 11414  001460  0012               	return	
 11415                           
 11416                           ; BSR set to: 0
 11417                           ;projMain.c: 67: if (PRESENT_EVENT <0)
 11418                           
 11419                           ; BSR set to: 0
 11420  001462  AE5D               	btfss	_PRESENT_EVENT,7,c
 11421  001464  D002               	goto	i2l3755
 11422                           
 11423                           ; BSR set to: 0
 11424                           ;projMain.c: 68: ThisCycle = 0;
 11425  001466  6A3A               	clrf	Timer0_10ms@ThisCycle,c
 11426  001468  D001               	goto	i2l3757
 11427  00146A                     i2l3755:
 11428                           
 11429                           ; BSR set to: 0
 11430                           ;projMain.c: 69: else
 11431                           ;projMain.c: 70: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 11432  00146A  D84B               	call	PL52	;call to abstracted procedure
 11433  00146C                     i2l3757:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;projMain.c: 71: NEXT_STATE = PRESENT_STATE+1;
 11437  00146C  29E3               	incf	_PRESENT_STATE& (0+255),w,b
 11438  00146E  6FE2               	movwf	_NEXT_STATE& (0+255),b
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;projMain.c: 72: if (NEXT_STATE > CYCLES[ThisCycle].END_STATE) {
 11442  001470  503A               	movf	Timer0_10ms@ThisCycle,w,c
 11443  001472  0D04               	mullw	4
 11444  001474  0E03               	movlw	low (_CYCLES+3)
 11445  001476  24F3               	addwf	prodl,w,c
 11446  001478  6ED9               	movwf	fsr2l,c
 11447  00147A  0E01               	movlw	high (_CYCLES+3)
 11448  00147C  20F4               	addwfc	prodh,w,c
 11449  00147E  6EDA               	movwf	fsr2h,c
 11450  001480  51E2               	movf	_NEXT_STATE& (0+255),w,b
 11451  001482  5CDE               	subwf	postinc2,w,c
 11452  001484  B0D8               	btfsc	status,0,c
 11453  001486  0012               	return	
 11454                           
 11455                           ; BSR set to: 0
 11456                           ;projMain.c: 73: PRESENT_EVENT = NEXT_EVENT;
 11457  001488  C05C  F05D         	movff	_NEXT_EVENT,_PRESENT_EVENT
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;projMain.c: 74: if (PRESENT_EVENT <0)
 11461  00148C  AE5D               	btfss	_PRESENT_EVENT,7,c
 11462  00148E  D002               	goto	i2l3767
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;projMain.c: 75: ThisCycle = 0;
 11466  001490  6A3A               	clrf	Timer0_10ms@ThisCycle,c
 11467  001492  D001               	goto	i2l1134
 11468  001494                     i2l3767:
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;projMain.c: 76: else
 11472                           ;projMain.c: 77: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 11473  001494  D836               	call	PL52	;call to abstracted procedure
 11474  001496                     i2l1134:
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;projMain.c: 78: NEXT_STATE = CYCLES[ThisCycle].START_STATE;
 11478  001496  503A               	movf	Timer0_10ms@ThisCycle,w,c
 11479  001498  0D04               	mullw	4
 11480  00149A  0E02               	movlw	low (_CYCLES+2)
 11481  00149C  24F3               	addwf	prodl,w,c
 11482  00149E  6ED9               	movwf	fsr2l,c
 11483  0014A0  0E01               	movlw	high (_CYCLES+2)
 11484  0014A2  20F4               	addwfc	prodh,w,c
 11485  0014A4  6EDA               	movwf	fsr2h,c
 11486  0014A6  50DF               	movf	indf2,w,c
 11487  0014A8  6FE2               	movwf	_NEXT_STATE& (0+255),b
 11488                           
 11489                           ; BSR set to: 0
 11490  0014AA  0012               	return		;funcret
 11491  0014AC                     __end_of_Timer0_10ms:
 11492                           	opt stack 0
 11493  0014AC                     PL24:
 11494                           	opt stack 15
 11495  0014AC  51E3               	movf	_PRESENT_STATE& (0+255),w,b
 11496  0014AE  0D06               	mullw	6
 11497  0014B0  0EF5               	movlw	low (_STATES+5)
 11498  0014B2  24F3               	addwf	prodl,w,c
 11499  0014B4  6ED9               	movwf	fsr2l,c
 11500  0014B6  0E06               	movlw	high (_STATES+5)
 11501  0014B8  0012               	return	
 11502  0014BA                     __end_ofPL24:
 11503                           	opt stack 0
 11504  0014BA                     PL26:
 11505                           	opt stack 15
 11506  0014BA  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 11507  0014BC  6A38               	clrf	(??_Timer0_10ms+3)& (0+255),c
 11508  0014BE  5035               	movf	??_Timer0_10ms,w,c
 11509  0014C0  5C37               	subwf	??_Timer0_10ms+2,w,c
 11510  0014C2  5038               	movf	??_Timer0_10ms+3,w,c
 11511  0014C4  0A80               	xorlw	128
 11512  0014C6  6E39               	movwf	(??_Timer0_10ms+4)& (0+255),c
 11513  0014C8  5036               	movf	??_Timer0_10ms+1,w,c
 11514  0014CA  0A80               	xorlw	128
 11515  0014CC  5839               	subwfb	(??_Timer0_10ms+4)& (0+255),w,c
 11516  0014CE  0012               	return	
 11517  0014D0                     __end_ofPL26:
 11518                           	opt stack 0
 11519  0014D0                     PL28:
 11520                           	opt stack 15
 11521  0014D0  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11522  0014D2  6ED9               	movwf	fsr2l,c
 11523  0014D4  6ADA               	clrf	fsr2h,c
 11524  0014D6  51E3               	movf	_PRESENT_STATE& (0+255),w,b
 11525  0014D8  0D06               	mullw	6
 11526  0014DA  0EF0               	movlw	low _STATES
 11527  0014DC  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11528  0014DE  0E06               	movlw	high _STATES
 11529  0014E0  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11530  0014E2  0E03               	movlw	3
 11531  0014E4  2635               	addwf	??_Timer0_10ms,f,c
 11532  0014E6  0E00               	movlw	0
 11533  0014E8  2236               	addwfc	??_Timer0_10ms+1,f,c
 11534  0014EA  50F3               	movf	prodl,w,c
 11535  0014EC  2635               	addwf	??_Timer0_10ms,f,c
 11536  0014EE  50F4               	movf	prodh,w,c
 11537  0014F0  2236               	addwfc	??_Timer0_10ms+1,f,c
 11538  0014F2  0012               	return	
 11539  0014F4                     __end_ofPL28:
 11540                           	opt stack 0
 11541  0014F4                     PL32:
 11542                           	opt stack 15
 11543  0014F4  51E3               	movf	_PRESENT_STATE& (0+255),w,b
 11544  0014F6  0D06               	mullw	6
 11545  0014F8  0EF0               	movlw	low _STATES
 11546  0014FA  24F3               	addwf	prodl,w,c
 11547  0014FC  6ED9               	movwf	fsr2l,c
 11548  0014FE  0E06               	movlw	high _STATES
 11549  001500  0012               	return	
 11550  001502                     __end_ofPL32:
 11551                           	opt stack 0
 11552  001502                     PL52:
 11553                           	opt stack 15
 11554  001502  505D               	movf	_PRESENT_EVENT,w,c
 11555  001504  0D0A               	mullw	10
 11556  001506  0E08               	movlw	low (_EVENTS+8)
 11557  001508  24F3               	addwf	prodl,w,c
 11558  00150A  6ED9               	movwf	fsr2l,c
 11559  00150C  0E02               	movlw	high (_EVENTS+8)
 11560  00150E  20F4               	addwfc	prodh,w,c
 11561  001510  6EDA               	movwf	fsr2h,c
 11562  001512  50DF               	movf	indf2,w,c
 11563  001514  6E3A               	movwf	Timer0_10ms@ThisCycle,c
 11564  001516  0012               	return	
 11565  001518                     __end_ofPL52:
 11566                           	opt stack 0
 11567  001518                     PL98:
 11568                           	opt stack 15
 11569  001518  2435               	addwf	??_Timer0_10ms,w,c
 11570  00151A  6EE1               	movwf	fsr1l,c
 11571  00151C  0E00               	movlw	0
 11572  00151E  2036               	addwfc	??_Timer0_10ms+1,w,c
 11573  001520  6EE2               	movwf	fsr1h,c
 11574  001522  50E7               	movf	indf1,w,c
 11575  001524  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 11576  001526  0012               	return	
 11577  001528                     __end_ofPL98:
 11578                           	opt stack 0
 11579  001528                     PL106:
 11580                           	opt stack 15
 11581  001528  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11582  00152A  6EE1               	movwf	fsr1l,c
 11583  00152C  6AE2               	clrf	fsr1h,c
 11584  00152E  50E7               	movf	indf1,w,c
 11585  001530  1037               	iorwf	??_Timer0_10ms+2,w,c
 11586  001532  6EDF               	movwf	indf2,c
 11587  001534  0012               	return	
 11588  001536                     __end_ofPL106:
 11589                           	opt stack 0
 11590  001536                     PL108:
 11591                           	opt stack 15
 11592  001536  6A36               	clrf	(??_Timer0_10ms+1)& (0+255),c
 11593  001538  2635               	addwf	??_Timer0_10ms,f,c
 11594  00153A  0E00               	movlw	0
 11595  00153C  2236               	addwfc	??_Timer0_10ms+1,f,c
 11596  00153E  0C00               	retlw	0
 11597  001540                     __end_ofPL108:
 11598                           	opt stack 0
 11599  001540                     PL132:
 11600                           	opt stack 15
 11601  001540  20F4               	addwfc	prodh,w,c
 11602  001542  6EDA               	movwf	fsr2h,c
 11603  001544  0E02               	movlw	2
 11604  001546  18DE               	xorwf	postinc2,w,c
 11605  001548  0012               	return	
 11606  00154A                     __end_ofPL132:
 11607                           	opt stack 0
 11608                           tosu	equ	0xFFF
 11609                           tosh	equ	0xFFE
 11610                           tosl	equ	0xFFD
 11611                           pclatu	equ	0xFFB
 11612                           pclath	equ	0xFFA
 11613                           tblptru	equ	0xFF8
 11614                           tblptrh	equ	0xFF7
 11615                           tblptrl	equ	0xFF6
 11616                           tablat	equ	0xFF5
 11617                           prodh	equ	0xFF4
 11618                           prodl	equ	0xFF3
 11619                           intcon	equ	0xFF2
 11620                           postinc0	equ	0xFEE
 11621                           plusw0	equ	0xFEB
 11622                           fsr0h	equ	0xFEA
 11623                           fsr0l	equ	0xFE9
 11624                           wreg	equ	0xFE8
 11625                           indf1	equ	0xFE7
 11626                           postinc1	equ	0xFE6
 11627                           postdec1	equ	0xFE5
 11628                           plusw1	equ	0xFE3
 11629                           fsr1h	equ	0xFE2
 11630                           fsr1l	equ	0xFE1
 11631                           indf2	equ	0xFDF
 11632                           postinc2	equ	0xFDE
 11633                           postdec2	equ	0xFDD
 11634                           plusw2	equ	0xFDB
 11635                           fsr2h	equ	0xFDA
 11636                           fsr2l	equ	0xFD9
 11637                           status	equ	0xFD8
 11638                           
 11639 ;; *************** function _IncreaseByASecond *****************
 11640 ;; Defined at:
 11641 ;;		line 3 in file "libs/funcs.c"
 11642 ;; Parameters:    Size  Location     Type
 11643 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;		None
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
 11648 ;; Registers used:
 11649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11650 ;; Tracked objects:
 11651 ;;		On entry : 3F/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11655 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11658 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11659 ;;Total ram usage:       11 bytes
 11660 ;; Hardware stack levels used:    1
 11661 ;; Hardware stack levels required when called:    4
 11662 ;; This function calls:
 11663 ;;		i2_IncreaseByADay
 11664 ;; This function is called by:
 11665 ;;		_Timer0_10ms
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           	psect	text53
 11670  002D0C                     __ptext53:
 11671                           	opt stack 0
 11672  002D0C                     _IncreaseByASecond:
 11673                           	opt stack 15
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;funcs.c: 4: dt.SECOND++;
 11677                           
 11678                           ; BSR set to: 0
 11679                           ;incstack = 0
 11680  002D0C  2A2A               	incf	IncreaseByASecond@dt,f,c
 11681  002D0E  0E00               	movlw	0
 11682  002D10  222B               	addwfc	IncreaseByASecond@dt+1,f,c
 11683  002D12  222C               	addwfc	IncreaseByASecond@dt+2,f,c
 11684  002D14  222D               	addwfc	IncreaseByASecond@dt+3,f,c
 11685                           
 11686                           ;funcs.c: 5: if (dt.SECOND == 86400) {
 11687  002D16  0E80               	movlw	128
 11688  002D18  182A               	xorwf	IncreaseByASecond@dt,w,c
 11689  002D1A  E11C               	bnz	i2l3239
 11690  002D1C  0E51               	movlw	81
 11691  002D1E  182B               	xorwf	IncreaseByASecond@dt+1,w,c
 11692  002D20  E119               	bnz	i2l3239
 11693  002D22  042C               	decf	IncreaseByASecond@dt+2,w,c
 11694  002D24  102D               	iorwf	IncreaseByASecond@dt+3,w,c
 11695  002D26  E116               	bnz	i2l3239
 11696                           
 11697                           ; BSR set to: 0
 11698                           ;funcs.c: 6: dt.SECOND = 0;
 11699  002D28  6A2A               	clrf	IncreaseByASecond@dt,c
 11700  002D2A  6A2B               	clrf	IncreaseByASecond@dt+1,c
 11701  002D2C  6A2C               	clrf	IncreaseByASecond@dt+2,c
 11702  002D2E  6A2D               	clrf	IncreaseByASecond@dt+3,c
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;funcs.c: 7: dt = IncreaseByADay(dt);
 11706  002D30  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 11707  002D34  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
 11708  002D38  0E0A               	movlw	10
 11709  002D3A                     i2u246_41:
 11710  002D3A  CFDB FFEB          	movff	plusw2,plusw0
 11711  002D3E  06E8               	decf	wreg,f,c
 11712  002D40  E2FC               	bc	i2u246_41
 11713  002D42  EC08  F012         	call	i2_IncreaseByADay	;wreg free
 11714  002D46  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 11715  002D4A  0E0A               	movlw	10
 11716  002D4C                     i2u247_41:
 11717  002D4C  CFEB FFDB          	movff	plusw0,plusw2
 11718  002D50  06E8               	decf	wreg,f,c
 11719  002D52  E2FC               	bc	i2u247_41
 11720  002D54                     i2l3239:
 11721                           
 11722                           ;funcs.c: 8: }
 11723                           ;funcs.c: 9: return dt;
 11724  002D54  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 11725  002D58  EE00  F02A         	lfsr	0,?_IncreaseByASecond
 11726  002D5C  0E0A               	movlw	10
 11727  002D5E                     i2u248_41:
 11728  002D5E  CFDB FFEB          	movff	plusw2,plusw0
 11729  002D62  06E8               	decf	wreg,f,c
 11730  002D64  E2FC               	bc	i2u248_41
 11731  002D66  0012               	return		;funcret
 11732  002D68                     __end_of_IncreaseByASecond:
 11733                           	opt stack 0
 11734                           tosu	equ	0xFFF
 11735                           tosh	equ	0xFFE
 11736                           tosl	equ	0xFFD
 11737                           pclatu	equ	0xFFB
 11738                           pclath	equ	0xFFA
 11739                           tblptru	equ	0xFF8
 11740                           tblptrh	equ	0xFF7
 11741                           tblptrl	equ	0xFF6
 11742                           tablat	equ	0xFF5
 11743                           prodh	equ	0xFF4
 11744                           prodl	equ	0xFF3
 11745                           intcon	equ	0xFF2
 11746                           postinc0	equ	0xFEE
 11747                           plusw0	equ	0xFEB
 11748                           fsr0h	equ	0xFEA
 11749                           fsr0l	equ	0xFE9
 11750                           wreg	equ	0xFE8
 11751                           indf1	equ	0xFE7
 11752                           postinc1	equ	0xFE6
 11753                           postdec1	equ	0xFE5
 11754                           plusw1	equ	0xFE3
 11755                           fsr1h	equ	0xFE2
 11756                           fsr1l	equ	0xFE1
 11757                           indf2	equ	0xFDF
 11758                           postinc2	equ	0xFDE
 11759                           postdec2	equ	0xFDD
 11760                           plusw2	equ	0xFDB
 11761                           fsr2h	equ	0xFDA
 11762                           fsr2l	equ	0xFD9
 11763                           status	equ	0xFD8
 11764                           
 11765 ;; *************** function i2_IncreaseByADay *****************
 11766 ;; Defined at:
 11767 ;;		line 12 in file "libs/funcs.c"
 11768 ;; Parameters:    Size  Location     Type
 11769 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
 11770 ;; Auto vars:     Size  Location     Type
 11771 ;;  IncreaseByAD    1   40[COMRAM] char 
 11772 ;; Return value:  Size  Location     Type
 11773 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
 11774 ;; Registers used:
 11775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11776 ;; Tracked objects:
 11777 ;;		On entry : 3F/0
 11778 ;;		On exit  : 0/0
 11779 ;;		Unchanged: 0/0
 11780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11781 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11783 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11784 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11785 ;;Total ram usage:       14 bytes
 11786 ;; Hardware stack levels used:    1
 11787 ;; Hardware stack levels required when called:    3
 11788 ;; This function calls:
 11789 ;;		i2_IncreaseByAMonth
 11790 ;;		i2___lwmod
 11791 ;; This function is called by:
 11792 ;;		_IncreaseByASecond
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           	psect	text54
 11797  002410                     __ptext54:
 11798                           	opt stack 0
 11799  002410                     i2_IncreaseByADay:
 11800                           	opt stack 15
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;funcs.c: 13: dt.DATE.Day++;
 11804                           
 11805                           ;incstack = 0
 11806  002410  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
 11807  002412  2A21               	incf	i2IncreaseByADay@dt+5,f,c
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
 11811  002414  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 11812  002416  0B7F               	andlw	127
 11813  002418  06E8               	decf	wreg,f,c
 11814  00241A  E104               	bnz	i2l3191
 11815                           
 11816                           ; BSR set to: 0
 11817                           ;funcs.c: 15: dt.DAY.Val = 0x40;
 11818  00241C  5024               	movf	i2IncreaseByADay@dt+8,w,c
 11819  00241E  0B01               	andlw	-255
 11820  002420  0980               	iorlw	128
 11821  002422  D00A               	goto	L9
 11822  002424                     i2l3191:
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;funcs.c: 16: else
 11826                           ;funcs.c: 17: dt.DAY.Val >>= 1;
 11827  002424  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 11828  002426  0B7F               	andlw	127
 11829  002428  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
 11830  00242A  90D8               	bcf	status,0,c
 11831  00242C  3227               	rrcf	??i2_IncreaseByADay,f,c
 11832  00242E  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
 11833  002430  5024               	movf	i2IncreaseByADay@dt+8,w,c
 11834  002432  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 11835  002434  0B01               	andlw	-255
 11836  002436  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 11837  002438                     L9:
 11838  002438  6E24               	movwf	i2IncreaseByADay@dt+8,c
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
 11842  00243A  90D8               	bcf	status,0,c
 11843  00243C  3422               	rlcf	i2IncreaseByADay@dt+6,w,c
 11844  00243E  6ED9               	movwf	fsr2l,c
 11845  002440  3423               	rlcf	i2IncreaseByADay@dt+7,w,c
 11846  002442  EC81  F011         	call	PL76	;call to abstracted procedure
 11847  002446  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
 11851  002448  0E02               	movlw	2
 11852  00244A  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 11853  00244C  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 11854  00244E  E107               	bnz	i2l3201
 11855                           
 11856                           ; BSR set to: 0
 11857  002450  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
 11858  002454  0E03               	movlw	3
 11859  002456  1627               	andwf	??i2_IncreaseByADay,f,c
 11860  002458  E102               	bnz	i2l3201
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;funcs.c: 20: MonthDays = 29;
 11864  00245A  0E1D               	movlw	29
 11865  00245C  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11866  00245E                     i2l3201:
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
 11870  00245E  0E02               	movlw	2
 11871  002460  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 11872  002462  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 11873  002464  E10A               	bnz	i2l3207
 11874                           
 11875                           ; BSR set to: 0
 11876  002466  D842               	call	PL118	;call to abstracted procedure
 11877  002468  EC20  F018         	call	PL136	;call to abstracted procedure
 11878  00246C  ECCD  F017         	call	i2___lwmod	;wreg free
 11879  002470  5001               	movf	?i2___lwmod,w,c
 11880  002472  1002               	iorwf	?i2___lwmod+1,w,c
 11881  002474  E102               	bnz	i2l3207
 11882                           
 11883                           ;funcs.c: 22: MonthDays = 28;
 11884  002476  0E1C               	movlw	28
 11885  002478  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11886  00247A                     i2l3207:
 11887                           
 11888                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
 11889  00247A  0E02               	movlw	2
 11890  00247C  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 11891  00247E  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 11892  002480  E10C               	bnz	i2l3213
 11893  002482  D834               	call	PL118	;call to abstracted procedure
 11894  002484  0E01               	movlw	1
 11895  002486  6E04               	movwf	i2___lwmod@divisor+1,c
 11896  002488  0E90               	movlw	144
 11897  00248A  6E03               	movwf	i2___lwmod@divisor,c
 11898  00248C  ECCD  F017         	call	i2___lwmod	;wreg free
 11899  002490  5001               	movf	?i2___lwmod,w,c
 11900  002492  1002               	iorwf	?i2___lwmod+1,w,c
 11901  002494  E102               	bnz	i2l3213
 11902                           
 11903                           ;funcs.c: 24: MonthDays = 29;
 11904  002496  0E1D               	movlw	29
 11905  002498  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11906  00249A                     i2l3213:
 11907                           
 11908                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
 11909  00249A  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
 11910  00249E  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
 11911  0024A0  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
 11912  0024A2  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
 11913  0024A4  5020               	movf	i2IncreaseByADay@dt+4,w,c
 11914  0024A6  5C27               	subwf	??i2_IncreaseByADay,w,c
 11915  0024A8  5021               	movf	i2IncreaseByADay@dt+5,w,c
 11916  0024AA  5828               	subwfb	??i2_IncreaseByADay+1,w,c
 11917  0024AC  E215               	bc	i2l3219
 11918                           
 11919                           ;funcs.c: 26: dt.DATE.Day = 1;
 11920  0024AE  6A21               	clrf	i2IncreaseByADay@dt+5,c
 11921  0024B0  0E01               	movlw	1
 11922  0024B2  6E20               	movwf	i2IncreaseByADay@dt+4,c
 11923                           
 11924                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
 11925  0024B4  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 11926  0024B8  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
 11927  0024BC  0E0A               	movlw	10
 11928  0024BE                     i2u240_41:
 11929  0024BE  CFDB FFEB          	movff	plusw2,plusw0
 11930  0024C2  06E8               	decf	wreg,f,c
 11931  0024C4  E2FC               	bc	i2u240_41
 11932  0024C6  EC25  F017         	call	i2_IncreaseByAMonth	;wreg free
 11933  0024CA  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 11934  0024CE  0E0A               	movlw	10
 11935  0024D0                     i2u241_41:
 11936  0024D0  CFEB FFDB          	movff	plusw0,plusw2
 11937  0024D4  06E8               	decf	wreg,f,c
 11938  0024D6  E2FC               	bc	i2u241_41
 11939  0024D8                     i2l3219:
 11940                           
 11941                           ;funcs.c: 28: }
 11942                           ;funcs.c: 29: return dt;
 11943  0024D8  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 11944  0024DC  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
 11945  0024E0  0E0A               	movlw	10
 11946  0024E2                     i2u242_41:
 11947  0024E2  CFDB FFEB          	movff	plusw2,plusw0
 11948  0024E6  06E8               	decf	wreg,f,c
 11949  0024E8  E2FC               	bc	i2u242_41
 11950  0024EA  0012               	return		;funcret
 11951  0024EC                     __end_ofi2_IncreaseByADay:
 11952                           	opt stack 0
 11953  0024EC                     PL118:
 11954                           	opt stack 15
 11955  0024EC  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
 11956  0024F0  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
 11957  0024F4  0012               	return	
 11958  0024F6                     __end_ofPL118:
 11959                           	opt stack 0
 11960                           tosu	equ	0xFFF
 11961                           tosh	equ	0xFFE
 11962                           tosl	equ	0xFFD
 11963                           pclatu	equ	0xFFB
 11964                           pclath	equ	0xFFA
 11965                           tblptru	equ	0xFF8
 11966                           tblptrh	equ	0xFF7
 11967                           tblptrl	equ	0xFF6
 11968                           tablat	equ	0xFF5
 11969                           prodh	equ	0xFF4
 11970                           prodl	equ	0xFF3
 11971                           intcon	equ	0xFF2
 11972                           postinc0	equ	0xFEE
 11973                           plusw0	equ	0xFEB
 11974                           fsr0h	equ	0xFEA
 11975                           fsr0l	equ	0xFE9
 11976                           wreg	equ	0xFE8
 11977                           indf1	equ	0xFE7
 11978                           postinc1	equ	0xFE6
 11979                           postdec1	equ	0xFE5
 11980                           plusw1	equ	0xFE3
 11981                           fsr1h	equ	0xFE2
 11982                           fsr1l	equ	0xFE1
 11983                           indf2	equ	0xFDF
 11984                           postinc2	equ	0xFDE
 11985                           postdec2	equ	0xFDD
 11986                           plusw2	equ	0xFDB
 11987                           fsr2h	equ	0xFDA
 11988                           fsr2l	equ	0xFD9
 11989                           status	equ	0xFD8
 11990                           
 11991 ;; *************** function i2_IncreaseByAMonth *****************
 11992 ;; Defined at:
 11993 ;;		line 32 in file "libs/funcs.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;		None
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
 12000 ;; Registers used:
 12001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12007 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12010 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12011 ;;Total ram usage:       11 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    2
 12014 ;; This function calls:
 12015 ;;		i2_IncreaseByAYear
 12016 ;; This function is called by:
 12017 ;;		i2_IncreaseByADay
 12018 ;; This function uses a non-reentrant model
 12019 ;;
 12020                           
 12021                           	psect	text55
 12022  002E4A                     __ptext55:
 12023                           	opt stack 0
 12024  002E4A                     i2_IncreaseByAMonth:
 12025                           	opt stack 15
 12026                           
 12027                           ;funcs.c: 33: dt.DATE.Month++;
 12028                           
 12029                           ;incstack = 0
 12030  002E4A  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
 12031  002E4C  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
 12032                           
 12033                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
 12034  002E4E  0E0D               	movlw	13
 12035  002E50  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
 12036  002E52  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
 12037  002E54  E115               	bnz	i2l3157
 12038                           
 12039                           ;funcs.c: 35: dt.DATE.Month = 1;
 12040  002E56  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
 12041  002E58  0E01               	movlw	1
 12042  002E5A  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
 12043                           
 12044                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
 12045  002E5C  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 12046  002E60  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
 12047  002E64  0E0A               	movlw	10
 12048  002E66                     i2u221_41:
 12049  002E66  CFDB FFEB          	movff	plusw2,plusw0
 12050  002E6A  06E8               	decf	wreg,f,c
 12051  002E6C  E2FC               	bc	i2u221_41
 12052  002E6E  EC08  F018         	call	i2_IncreaseByAYear	;wreg free
 12053  002E72  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 12054  002E76  0E0A               	movlw	10
 12055  002E78                     i2u222_41:
 12056  002E78  CFEB FFDB          	movff	plusw0,plusw2
 12057  002E7C  06E8               	decf	wreg,f,c
 12058  002E7E  E2FC               	bc	i2u222_41
 12059  002E80                     i2l3157:
 12060                           
 12061                           ;funcs.c: 37: }
 12062                           ;funcs.c: 38: return dt;
 12063  002E80  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 12064  002E84  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
 12065  002E88  0E0A               	movlw	10
 12066  002E8A                     i2u223_41:
 12067  002E8A  CFDB FFEB          	movff	plusw2,plusw0
 12068  002E8E  06E8               	decf	wreg,f,c
 12069  002E90  E2FC               	bc	i2u223_41
 12070  002E92  0012               	return		;funcret
 12071  002E94                     __end_ofi2_IncreaseByAMonth:
 12072                           	opt stack 0
 12073                           tosu	equ	0xFFF
 12074                           tosh	equ	0xFFE
 12075                           tosl	equ	0xFFD
 12076                           pclatu	equ	0xFFB
 12077                           pclath	equ	0xFFA
 12078                           tblptru	equ	0xFF8
 12079                           tblptrh	equ	0xFF7
 12080                           tblptrl	equ	0xFF6
 12081                           tablat	equ	0xFF5
 12082                           prodh	equ	0xFF4
 12083                           prodl	equ	0xFF3
 12084                           intcon	equ	0xFF2
 12085                           postinc0	equ	0xFEE
 12086                           plusw0	equ	0xFEB
 12087                           fsr0h	equ	0xFEA
 12088                           fsr0l	equ	0xFE9
 12089                           wreg	equ	0xFE8
 12090                           indf1	equ	0xFE7
 12091                           postinc1	equ	0xFE6
 12092                           postdec1	equ	0xFE5
 12093                           plusw1	equ	0xFE3
 12094                           fsr1h	equ	0xFE2
 12095                           fsr1l	equ	0xFE1
 12096                           indf2	equ	0xFDF
 12097                           postinc2	equ	0xFDE
 12098                           postdec2	equ	0xFDD
 12099                           plusw2	equ	0xFDB
 12100                           fsr2h	equ	0xFDA
 12101                           fsr2l	equ	0xFD9
 12102                           status	equ	0xFD8
 12103                           
 12104 ;; *************** function i2_IncreaseByAYear *****************
 12105 ;; Defined at:
 12106 ;;		line 41 in file "libs/funcs.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;		None
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
 12113 ;; Registers used:
 12114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12120 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12123 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12124 ;;Total ram usage:       11 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    1
 12127 ;; This function calls:
 12128 ;;		i2___lwmod
 12129 ;; This function is called by:
 12130 ;;		i2_IncreaseByAMonth
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text56
 12135  003010                     __ptext56:
 12136                           	opt stack 0
 12137  003010                     i2_IncreaseByAYear:
 12138                           	opt stack 15
 12139                           
 12140                           ;funcs.c: 42: dt.YEAR++;
 12141                           
 12142                           ;incstack = 0
 12143  003010  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
 12144  003012  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
 12145                           
 12146                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
 12147  003014  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
 12148  003018  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
 12149  00301C  D811               	call	PL136	;call to abstracted procedure
 12150  00301E  ECCD  F017         	call	i2___lwmod	;wreg free
 12151  003022  5001               	movf	?i2___lwmod,w,c
 12152  003024  1002               	iorwf	?i2___lwmod+1,w,c
 12153  003026  E102               	bnz	i2l3127
 12154                           
 12155                           ;funcs.c: 44: CENTURY++;
 12156  003028  0100               	movlb	0	; () banked
 12157  00302A  2BF7               	incf	_CENTURY& (0+255),f,b
 12158  00302C                     i2l3127:
 12159                           
 12160                           ;funcs.c: 45: return dt;
 12161  00302C  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
 12162  003030  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
 12163  003034  0E0A               	movlw	10
 12164  003036                     i2u215_41:
 12165  003036  CFDB FFEB          	movff	plusw2,plusw0
 12166  00303A  06E8               	decf	wreg,f,c
 12167  00303C  E2FC               	bc	i2u215_41
 12168  00303E  0012               	return		;funcret
 12169  003040                     __end_ofi2_IncreaseByAYear:
 12170                           	opt stack 0
 12171  003040                     PL136:
 12172                           	opt stack 15
 12173  003040  6A04               	clrf	i2___lwmod@divisor+1,c
 12174  003042  0E64               	movlw	100
 12175  003044  6E03               	movwf	i2___lwmod@divisor,c
 12176  003046  0C64               	retlw	100
 12177  003048                     __end_ofPL136:
 12178                           	opt stack 0
 12179                           tosu	equ	0xFFF
 12180                           tosh	equ	0xFFE
 12181                           tosl	equ	0xFFD
 12182                           pclatu	equ	0xFFB
 12183                           pclath	equ	0xFFA
 12184                           tblptru	equ	0xFF8
 12185                           tblptrh	equ	0xFF7
 12186                           tblptrl	equ	0xFF6
 12187                           tablat	equ	0xFF5
 12188                           prodh	equ	0xFF4
 12189                           prodl	equ	0xFF3
 12190                           intcon	equ	0xFF2
 12191                           postinc0	equ	0xFEE
 12192                           plusw0	equ	0xFEB
 12193                           fsr0h	equ	0xFEA
 12194                           fsr0l	equ	0xFE9
 12195                           wreg	equ	0xFE8
 12196                           indf1	equ	0xFE7
 12197                           postinc1	equ	0xFE6
 12198                           postdec1	equ	0xFE5
 12199                           plusw1	equ	0xFE3
 12200                           fsr1h	equ	0xFE2
 12201                           fsr1l	equ	0xFE1
 12202                           indf2	equ	0xFDF
 12203                           postinc2	equ	0xFDE
 12204                           postdec2	equ	0xFDD
 12205                           plusw2	equ	0xFDB
 12206                           fsr2h	equ	0xFDA
 12207                           fsr2l	equ	0xFD9
 12208                           status	equ	0xFD8
 12209                           
 12210 ;; *************** function i2___lwmod *****************
 12211 ;; Defined at:
 12212 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 12213 ;; Parameters:    Size  Location     Type
 12214 ;;  dividend        2    0[COMRAM] unsigned int 
 12215 ;;  divisor         2    2[COMRAM] unsigned int 
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12218 ;; Return value:  Size  Location     Type
 12219 ;;                  2    0[COMRAM] unsigned int 
 12220 ;; Registers used:
 12221 ;;		wreg, status,2, status,0
 12222 ;; Tracked objects:
 12223 ;;		On entry : 0/0
 12224 ;;		On exit  : 0/0
 12225 ;;		Unchanged: 0/0
 12226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12227 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12228 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12230 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12231 ;;Total ram usage:        5 bytes
 12232 ;; Hardware stack levels used:    1
 12233 ;; This function calls:
 12234 ;;		Nothing
 12235 ;; This function is called by:
 12236 ;;		i2_IncreaseByADay
 12237 ;;		i2_IncreaseByAYear
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           	psect	text57
 12242  002F9A                     __ptext57:
 12243                           	opt stack 0
 12244  002F9A                     i2___lwmod:
 12245                           	opt stack 17
 12246                           
 12247                           ;incstack = 0
 12248  002F9A  5003               	movf	i2___lwmod@divisor,w,c
 12249  002F9C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12250  002F9E  E017               	bz	i2l1548
 12251  002FA0  0E01               	movlw	1
 12252  002FA2  6E05               	movwf	i2___lwmod@counter,c
 12253  002FA4  D004               	goto	i2l3095
 12254  002FA6                     i2l3093:
 12255  002FA6  90D8               	bcf	status,0,c
 12256  002FA8  3603               	rlcf	i2___lwmod@divisor,f,c
 12257  002FAA  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12258  002FAC  2A05               	incf	i2___lwmod@counter,f,c
 12259  002FAE                     i2l3095:
 12260  002FAE  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12261  002FB0  D7FA               	goto	i2l3093
 12262  002FB2                     i2l3097:
 12263  002FB2  5003               	movf	i2___lwmod@divisor,w,c
 12264  002FB4  5C01               	subwf	i2___lwmod@dividend,w,c
 12265  002FB6  5004               	movf	i2___lwmod@divisor+1,w,c
 12266  002FB8  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12267  002FBA  E304               	bnc	i2l3101
 12268  002FBC  5003               	movf	i2___lwmod@divisor,w,c
 12269  002FBE  5E01               	subwf	i2___lwmod@dividend,f,c
 12270  002FC0  5004               	movf	i2___lwmod@divisor+1,w,c
 12271  002FC2  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12272  002FC4                     i2l3101:
 12273  002FC4  90D8               	bcf	status,0,c
 12274  002FC6  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12275  002FC8  3203               	rrcf	i2___lwmod@divisor,f,c
 12276  002FCA  2E05               	decfsz	i2___lwmod@counter,f,c
 12277  002FCC  D7F2               	goto	i2l3097
 12278  002FCE                     i2l1548:
 12279  002FCE  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12280  002FD2  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12281  002FD6  0012               	return		;funcret
 12282  002FD8                     __end_ofi2___lwmod:
 12283                           	opt stack 0
 12284                           tosu	equ	0xFFF
 12285                           tosh	equ	0xFFE
 12286                           tosl	equ	0xFFD
 12287                           pclatu	equ	0xFFB
 12288                           pclath	equ	0xFFA
 12289                           tblptru	equ	0xFF8
 12290                           tblptrh	equ	0xFF7
 12291                           tblptrl	equ	0xFF6
 12292                           tablat	equ	0xFF5
 12293                           prodh	equ	0xFF4
 12294                           prodl	equ	0xFF3
 12295                           intcon	equ	0xFF2
 12296                           postinc0	equ	0xFEE
 12297                           plusw0	equ	0xFEB
 12298                           fsr0h	equ	0xFEA
 12299                           fsr0l	equ	0xFE9
 12300                           wreg	equ	0xFE8
 12301                           indf1	equ	0xFE7
 12302                           postinc1	equ	0xFE6
 12303                           postdec1	equ	0xFE5
 12304                           plusw1	equ	0xFE3
 12305                           fsr1h	equ	0xFE2
 12306                           fsr1l	equ	0xFE1
 12307                           indf2	equ	0xFDF
 12308                           postinc2	equ	0xFDE
 12309                           postdec2	equ	0xFDD
 12310                           plusw2	equ	0xFDB
 12311                           fsr2h	equ	0xFDA
 12312                           fsr2l	equ	0xFD9
 12313                           status	equ	0xFD8
 12314                           tosu	equ	0xFFF
 12315                           tosh	equ	0xFFE
 12316                           tosl	equ	0xFFD
 12317                           pclatu	equ	0xFFB
 12318                           pclath	equ	0xFFA
 12319                           tblptru	equ	0xFF8
 12320                           tblptrh	equ	0xFF7
 12321                           tblptrl	equ	0xFF6
 12322                           tablat	equ	0xFF5
 12323                           prodh	equ	0xFF4
 12324                           prodl	equ	0xFF3
 12325                           intcon	equ	0xFF2
 12326                           postinc0	equ	0xFEE
 12327                           plusw0	equ	0xFEB
 12328                           fsr0h	equ	0xFEA
 12329                           fsr0l	equ	0xFE9
 12330                           wreg	equ	0xFE8
 12331                           indf1	equ	0xFE7
 12332                           postinc1	equ	0xFE6
 12333                           postdec1	equ	0xFE5
 12334                           plusw1	equ	0xFE3
 12335                           fsr1h	equ	0xFE2
 12336                           fsr1l	equ	0xFE1
 12337                           indf2	equ	0xFDF
 12338                           postinc2	equ	0xFDE
 12339                           postdec2	equ	0xFDD
 12340                           plusw2	equ	0xFDB
 12341                           fsr2h	equ	0xFDA
 12342                           fsr2l	equ	0xFD9
 12343                           status	equ	0xFD8
 12344                           
 12345                           	psect	text58
 12346  000000                     __ptext58:
 12347                           	opt stack 0
 12348                           tosu	equ	0xFFF
 12349                           tosh	equ	0xFFE
 12350                           tosl	equ	0xFFD
 12351                           pclatu	equ	0xFFB
 12352                           pclath	equ	0xFFA
 12353                           tblptru	equ	0xFF8
 12354                           tblptrh	equ	0xFF7
 12355                           tblptrl	equ	0xFF6
 12356                           tablat	equ	0xFF5
 12357                           prodh	equ	0xFF4
 12358                           prodl	equ	0xFF3
 12359                           intcon	equ	0xFF2
 12360                           postinc0	equ	0xFEE
 12361                           plusw0	equ	0xFEB
 12362                           fsr0h	equ	0xFEA
 12363                           fsr0l	equ	0xFE9
 12364                           wreg	equ	0xFE8
 12365                           indf1	equ	0xFE7
 12366                           postinc1	equ	0xFE6
 12367                           postdec1	equ	0xFE5
 12368                           plusw1	equ	0xFE3
 12369                           fsr1h	equ	0xFE2
 12370                           fsr1l	equ	0xFE1
 12371                           indf2	equ	0xFDF
 12372                           postinc2	equ	0xFDE
 12373                           postdec2	equ	0xFDD
 12374                           plusw2	equ	0xFDB
 12375                           fsr2h	equ	0xFDA
 12376                           fsr2l	equ	0xFD9
 12377                           status	equ	0xFD8
 12378                           
 12379                           	psect	rparam
 12380  0000                     tosu	equ	0xFFF
 12381                           tosh	equ	0xFFE
 12382                           tosl	equ	0xFFD
 12383                           pclatu	equ	0xFFB
 12384                           pclath	equ	0xFFA
 12385                           tblptru	equ	0xFF8
 12386                           tblptrh	equ	0xFF7
 12387                           tblptrl	equ	0xFF6
 12388                           tablat	equ	0xFF5
 12389                           prodh	equ	0xFF4
 12390                           prodl	equ	0xFF3
 12391                           intcon	equ	0xFF2
 12392                           postinc0	equ	0xFEE
 12393                           plusw0	equ	0xFEB
 12394                           fsr0h	equ	0xFEA
 12395                           fsr0l	equ	0xFE9
 12396                           wreg	equ	0xFE8
 12397                           indf1	equ	0xFE7
 12398                           postinc1	equ	0xFE6
 12399                           postdec1	equ	0xFE5
 12400                           plusw1	equ	0xFE3
 12401                           fsr1h	equ	0xFE2
 12402                           fsr1l	equ	0xFE1
 12403                           indf2	equ	0xFDF
 12404                           postinc2	equ	0xFDE
 12405                           postdec2	equ	0xFDD
 12406                           plusw2	equ	0xFDB
 12407                           fsr2h	equ	0xFDA
 12408                           fsr2l	equ	0xFD9
 12409                           status	equ	0xFD8
 12410                           
 12411                           	psect	temp
 12412  00005E                     btemp:
 12413                           	opt stack 0
 12414  00005E                     	ds	1
 12415  0000                     int$flags	set	btemp
 12416                           tosu	equ	0xFFF
 12417                           tosh	equ	0xFFE
 12418                           tosl	equ	0xFFD
 12419                           pclatu	equ	0xFFB
 12420                           pclath	equ	0xFFA
 12421                           tblptru	equ	0xFF8
 12422                           tblptrh	equ	0xFF7
 12423                           tblptrl	equ	0xFF6
 12424                           tablat	equ	0xFF5
 12425                           prodh	equ	0xFF4
 12426                           prodl	equ	0xFF3
 12427                           intcon	equ	0xFF2
 12428                           postinc0	equ	0xFEE
 12429                           plusw0	equ	0xFEB
 12430                           fsr0h	equ	0xFEA
 12431                           fsr0l	equ	0xFE9
 12432                           wreg	equ	0xFE8
 12433                           indf1	equ	0xFE7
 12434                           postinc1	equ	0xFE6
 12435                           postdec1	equ	0xFE5
 12436                           plusw1	equ	0xFE3
 12437                           fsr1h	equ	0xFE2
 12438                           fsr1l	equ	0xFE1
 12439                           indf2	equ	0xFDF
 12440                           postinc2	equ	0xFDE
 12441                           postdec2	equ	0xFDD
 12442                           plusw2	equ	0xFDB
 12443                           fsr2h	equ	0xFDA
 12444                           fsr2l	equ	0xFD9
 12445                           status	equ	0xFD8
 12446                           tosu	equ	0xFFF
 12447                           tosh	equ	0xFFE
 12448                           tosl	equ	0xFFD
 12449                           pclatu	equ	0xFFB
 12450                           pclath	equ	0xFFA
 12451                           tblptru	equ	0xFF8
 12452                           tblptrh	equ	0xFF7
 12453                           tblptrl	equ	0xFF6
 12454                           tablat	equ	0xFF5
 12455                           prodh	equ	0xFF4
 12456                           prodl	equ	0xFF3
 12457                           intcon	equ	0xFF2
 12458                           postinc0	equ	0xFEE
 12459                           plusw0	equ	0xFEB
 12460                           fsr0h	equ	0xFEA
 12461                           fsr0l	equ	0xFE9
 12462                           wreg	equ	0xFE8
 12463                           indf1	equ	0xFE7
 12464                           postinc1	equ	0xFE6
 12465                           postdec1	equ	0xFE5
 12466                           plusw1	equ	0xFE3
 12467                           fsr1h	equ	0xFE2
 12468                           fsr1l	equ	0xFE1
 12469                           indf2	equ	0xFDF
 12470                           postinc2	equ	0xFDE
 12471                           postdec2	equ	0xFDD
 12472                           plusw2	equ	0xFDB
 12473                           fsr2h	equ	0xFDA
 12474                           fsr2l	equ	0xFD9
 12475                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    7
    Data        1093
    BSS         1340
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      93
    BANK0           160     78     152
    BANK1           256      0     116
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    LIGHTS	PTR unsigned char [2] size(2) Largest target is 1
		 -> LATB(SFR_2[1]), LATA(SFR_2[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_Timer0_10ms
    _Timer0_10ms->_IncreaseByASecond
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___aldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS->_ReadGPS_DATE_TIME
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___wmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Init->_Lcd_Command
    _GetEventNumber->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   70080
                                             76 BANK0      2     2      0
                     _GetEventNumber
                        _Lcd_Command
                           _Lcd_Init
                  _LoadAllFromEeprom
                            _ReadGPS
                  _SYSTEM_Initialize
                            _StopGPS
                        _SwitchOnGPS
           _TMR0_SetInterruptHandler
              _TestGPSStartCondition
                 _VerifyForGPSOnTIme
                        _WriteEeprom
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                         9     2      7    5457
                                             18 BANK0      9     2      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     656
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2    1196
                                             14 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _WriteEeprom                                          5     2      3     268
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _VerifyForGPSOnTIme                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _TestGPSStartCondition                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnGPS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StopGPS                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS                                              0     0      0   23491
                  _ReadGPS_DATE_TIME
 ---------------------------------------------------------------------------------
 (2) _ReadGPS_DATE_TIME                                   18    18      0   23491
                                             58 BANK0     18    18      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (3) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _TimeTextToSecond                                    24    20      4    1022
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     778
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ReadGPSDateTime                                     18    16      2     566
                                              0 BANK0     18    16      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetDay                                              11    10      1    1865
                                             14 BANK0     11    10      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     474
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdjustDayLightSaving                                17     6     11   12131
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   34810
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    9520
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    8675
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                10    10      0    8334
                                              6 BANK0     10    10      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    8281
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              3 BANK0      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetEventNumber                                      11    11      0    5005
                                              6 BANK0     11    11      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4761
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          10    10      0    1973
                                             64 COMRAM    10    10      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    1973
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0    1973
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (11) _Timer0_10ms                                        12    12      0    1973
                                             52 COMRAM    12    12      0
                  _IncreaseByASecond
 ---------------------------------------------------------------------------------
 (12) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (15) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetEventNumber
     ___wmul
   _Lcd_Command
     _Lcd_Delay5us
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS
     _ReadGPS_DATE_TIME
       _AdjustDayLightSaving
         _DecreaseByADay
           _DecreaseByAMonth
             _DecreaseByAYear
               ___lwmod
           ___lwmod
         _IncreaseByADay
           _IncreaseByAMonth
             _IncreaseByAYear
               ___lwmod
           ___lwmod
         ___wmul
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _EUSART1_Initialize
       _GetDay
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       _ReadGPSDateTime
         _EUSART1_Read
       _TimeTextToSecond
         ___lmul
       _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _StopGPS
   _SwitchOnGPS
   _TMR0_SetInterruptHandler
   _TestGPSStartCondition
   _VerifyForGPSOnTIme
   _WriteEeprom
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
     ___aldiv
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     7C0      35       53.5%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      74       8       45.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      98       5       95.0%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      5D       1       98.9%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     259       6        0.0%
DATA                 0      0     A19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Jul 20 16:42:37 2017

            __end_of_LoadStatesFromEeprom 1A2C                   __end_of_ReadGPSDateTime 2876  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1B94                                        PL4 1BAE  
                                      PL6 1BB6                                        PL8 1716  
                            ___awdiv@sign 0065                       ___wmul@multiplicand 0062  
                    __size_of_WriteEeprom 0032                                       PL10 23C6  
                                     PL20 1A2C                                       PL12 1CBE  
                                     PL30 1DBC                                       PL22 1D92  
                                     PL14 1CD6                                       PL40 23E4  
                                     PL32 14F4                                       PL24 14AC  
                                     PL16 20F0                                       PL50 268A  
                                     PL42 265A                                       PL34 2100  
                                     PL26 14BA                                       PL18 2022  
                                     PL60 25A6                                       PL52 1502  
                                     PL44 2576                                       PL36 23DA  
                                     PL28 14D0                                       PL70 2120  
                                     PL62 25B0                                       PL54 1DDA  
                                     PL46 258E                                       PL38 1DCC  
                             __CFG_LVP$ON 000000                                       PL80 1DFA  
                                     PL72 1A3C                                       PL64 2216  
                                     PL56 23EE                                       PL48 2672  
                                     PL90 1A5C                                       PL82 1A4A  
                                     PL74 2128                                       PL66 1DE4  
                                     PL58 2694                                       PL92 18C2  
                                     PL84 26A2                                       PL76 2302  
                                     PL68 23FA                                       PL94 222C  
                                     PL86 25BE                                       PL78 29E4  
                                     PL96 25D0                                       PL88 202C  
                                     PL98 1518                                       l123 2854  
                                     l129 2874                                       l266 2AF2  
                                     l445 30A4                                       l623 22DC  
                                     l720 31D4                                       l633 30C8  
                                     l641 1E8A                                       l824 317E  
                                     l665 2EC0                                       l683 300C  
                                     _GIE 007F97                              __CFG_CPD$OFF 000000  
                      DecreaseByAMonth@dt 0070                              ___awmod@sign 006D  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                       __end_of_Lcd_Command 265A  
           projMain@NO_OF_DAYS_IN_A_MONTH 0144                                      PL100 26B4  
                                    PL110 2B48                                      PL102 2406  
                                    PL120 231A                                      PL112 2B52  
                                    PL104 2132                                      PL130 1A68  
                                    PL122 2796                                      PL114 1F20  
                                    PL106 1528                                      PL132 1540  
                                    PL124 2038                                      PL116 2310  
                                    PL108 1536                                      PL134 1F2A  
                                    PL126 29F6                                      PL118 24EC  
                                    PL136 3040                                      PL128 3076  
                                    PL138 1A72                              __CFG_ZCD$OFF 000000  
                                    l1005 1C18                                      l1006 1C1A  
                                    l1147 2D70                                      l3111 2F70  
                                    l3113 2F74                                      l4003 1ADE  
                                    l4013 1B60                                      l4005 1B1A  
                                    l3117 2F86                                      l3109 2F68  
                                    l3311 22EE                                      l3303 22C2  
                                    l4009 1B32                                      l3137 3062  
                                    l3401 2C90                                      l4041 1850  
                                    l3227 31E2                                      l4123 2A1A  
                                    l1548 2F90                                      l3181 2DEC  
                                    l3309 22E8                                      l3405 2C9C  
                                    l3325 2D84                                      l3351 2B96  
                                    l3343 2B7E                                      l3271 2744  
                                    l4047 189A                                      l4055 18C0  
                                    l4135 2A4A                                      l4151 2A96  
                                    l4231 299E                                      l4313 20C8  
                                    l4305 2046                                      l3361 2BB4  
                                    l3353 2B9A                                      l3337 2B6E  
                                    l3169 2E36                                      l3265 2728  
                                    l3249 26D2                                      l3505 2340  
                                    l4137 2A56                                      l4129 2A32  
                                    l3179 2DE6                                      l3259 270C  
                                    l3611 1E84                                      l3515 235A  
                                    l4155 2AAA                                      l4147 2A88  
                                    l4139 2A5A                                      l4317 20CC  
                                    l4325 20E0                                      l3349 2B8E  
                                    l3365 2BBE                                      l3285 2244  
                                    l3277 2782                                      l3621 1EC2  
                                    l3381 2C50                                      l3461 27F4  
                                    l3525 2374                                      l4229 298E  
                                    l4237 29DC                                      l3607 1E6A  
                                    l3391 2C70                                      l3463 27F8  
                                    l3535 2390                                      l3369 2BCA  
                                    l3297 22A6                                      l3609 1E74  
                                    l3393 2C74                                      l3385 2C5C  
                                    l3449 27C4                                      l3545 23AA  
                                    l3627 1F0C                                      l3483 2858  
                                    l3555 23C4                                      l4291 2C3A  
                                    l3397 2C86                                      l3389 2C68  
                                    l3477 2824                                      l3469 280E  
                                    l3485 2860                                      l4285 2C0C  
                                    l4277 2BFE                                      l4365 1BD8  
                                    l3479 2848                                      l4279 2C02  
                                    l4289 2C38                                      l3931 18E4  
                                    l3941 1906                                      l3773 2EE0  
                                    l3775 2EE6                                      l3783 2EFA  
                                    l3953 194A                                      l3777 2EEC  
                                    l3785 2F0E                                      l3779 2EF2  
                                    l3973 1A0A                                      l3895 1CF2  
                                    l3969 19E2                                      l3987 1A84  
                                    l3999 1ACC                                      u3000 1F9A  
                                    u2301 2DDC                                      _LATA 000F83  
                                    _LATB 000F84                                      u2311 2DF6  
                                    _LATC 000F85                                      u2171 306C  
                                    u2251 2E1C                                      u2261 2E2E  
                                    u3221 1EA8                                      u3135 25EA  
                                    u2191 30D8                                      u2271 2E40  
                                    u3231 1EBA                                      u3240 1ED8  
                                    u3145 25F0                                      u3155 2600  
                                    u2291 2DCA                                      u3251 1EF2  
                                    u4060 20EE                                      u2701 22F8  
                                    u2621 226A                                      u3261 1F04  
                                    u4207 2648                                      u2631 227C  
                                    u3271 1F16                                      u3600 1AC8  
                                    u3520 1D90                                      u3530 1946  
                                    u2571 2768                                      u3540 198C  
                                    u2581 277A                                      u3701 1848  
                                    u4157 2534                                      u3630 1B92  
                                    u3710 1866                                      u2591 278C  
                                    u4167 2564                                      u4177 285A  
                                    u3721 1880                                      u3641 172A  
                                    u3554 19C0                     __size_of_WriteLongInt 00A4  
                                    u4187 31EE                                      u3555 19BE  
                                    u3731 1892                                      u3651 173C  
                                    u4197 2618                                      u3741 18A4  
                                    u3590 1A2A                                      u3574 19E8  
                                    u3575 19E6                                      u3751 18B6  
                                    u2855 2506                                      u2880 27B2  
                                    u3760 2D08                                      u2865 250C  
                                    u3674 17A0                                      u3930 2ED6  
                                    u3691 1836                                      u3675 179A  
                                    u2875 251C                                      u2990 1F98  
                                    u2991 1F94                                      u3951 2BE6  
                                    u3980 2FF0                                      _PLLR 0076D8  
                                    _WPUA 000F10                                      _WPUB 000F18  
                                    _WPUC 000F20                                      _WPUE 000F2D  
                          _IncreaseByADay 26BE                          _DecreaseByAMonth 2DB4  
                       ??_Lcd_Delay5500us 0060                             __CFG_FCMEN$ON 000000  
                                    _main 1BC0                             ?_EUSART1_Read 0001  
                         _TMR0_StartTimer 322E                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                    __end_of_Lcd_Delay5us 3228                                      fsr2l 000FD9  
                                    btemp 005E                                      prodh 000FF4  
                                    prodl 000FF3                                      start 0070  
              LoadEventsFromEeprom@Temp16 006E                             __CFG_CSWEN$ON 000000  
                _GPS_SYNC_EVERY_x_SECONDS 00D0                              ___param_bank 000000  
                         __end_of_ReadGPS 2C3E                                _Lcd_CharCP 24F6  
                           __CFG_SCANE$ON 000000                    AdjustDayLightSaving@dt 0089  
                 __end_of_TMR0_Initialize 2F5C            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0016                   ?_LoadSettingsFromEeprom 0001  
           __end_of_OSCILLATOR_Initialize 3184                LoadStatesFromEeprom@j_1396 0076  
                         __end_of_StopGPS 322E                           __end_of___aldiv 2ABC  
                                   ?_main 0001                           __end_of___awdiv 2BD4  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 2CA6  
                         ___awdiv@divisor 0062                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 2F9A                                     i2l748 003E  
                         ___awdiv@counter 0064                                     _OSCEN 000EDC  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
                                   _TRISA 000F88                                     _TRISB 000F89  
                                   _TRISC 000F8A                              _WriteLongInt 2940  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 0064                 ?_TMR0_SetInterruptHandler 0060  
                           __CFG_WRT3$OFF 000000                           _IncreaseByAYear 3048  
                          __CFG_EBTR0$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       IncreaseByAYear@dt 0065                          __end_of_TMR0_ISR 3216  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                  __end_of_IncreaseByADay 2796                 __size_of_ValidateDateTime 00A2  
                      __CFG_MCLRE$EXTMCLR 000000                                     main@i 00AC  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0060                                     plusw0 000FEB  
                                   plusw1 000FE3                                     plusw2 000FDB  
                __end_ofi2_IncreaseByADay 24EC                                     status 000FD8  
                            __end_ofPL100 26BE                              __end_ofPL110 2B52  
                            __end_ofPL102 2410                              __end_ofPL120 2324  
                            __end_ofPL112 2B5C                              __end_ofPL104 2140  
                            __end_ofPL130 1A72                              __end_ofPL122 27A0  
                            __end_ofPL114 1F2A                              __end_ofPL106 1536  
                            __end_ofPL132 154A                              __end_ofPL124 2042  
                            __end_ofPL116 231A                              __end_ofPL108 1540  
                            __end_ofPL134 1F32                              __end_ofPL126 2A00  
                            __end_ofPL118 24F6                              __end_ofPL136 3048  
                            __end_ofPL128 307E                              __end_ofPL138 1A7A  
           __size_of_LoadCyclesFromEeprom 011A                        _CENTI_SECOND_COUNT 0051  
                      __size_ofi2___lwmod 003E                  __size_of_DecreaseByAYear 0032  
                        __end_of_Lcd_Init 2B48                                _ReadEeprom 31AC  
                         __initialization 2876                __end_of_EUSART1_Initialize 31AC  
                            __end_of_main 1CBE                          ??_DecreaseByADay 0086  
                        ?_ReadGPSDateTime 0060            __end_of_LoadSettingsFromEeprom 1716  
                __end_of_TimeTextToSecond 2216               ?_INTERRUPT_InterruptManager 0001  
           LoadStatesFromEeprom@AddStates 0078                               _Lcd_Command 25DA  
                 AdjustDayLightSaving@End 0096                   ReadGPS_DATE_TIME@F11470 00EC  
                 ReadGPS_DATE_TIME@F11472 00E5                                    ??_main 00AC  
                           __activetblptr 000003                            _GetEventNumber 2042  
                   _AUDIO_NORMAL_OFF_TIME 0057                         Timer0_10ms@i_2890 003E  
                       Timer0_10ms@i_2891 003F                         Timer0_10ms@i_2892 0040  
           LoadStatesFromEeprom@AudAddInc 0073                   __end_of_TMR0_StartTimer 3232  
                         ?_IncreaseByADay 007B                          ___awdiv@dividend 0060  
                    _LoadStatesFromEeprom 18CE                                    _ANSELA 000F11  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                                  _T0CON0 000FD5                                    _T0CON1 000FD6  
                                  _RC1REG 000F99                                    _CYCLES 0100  
                                  _RC1STA 000F9D                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _RC6PPS 000EFD                                    _EVENTS 0200  
                                  i2l1120 13D6                                    i2l1107 1394  
                                  _LIGHTS 00F3                                    i2l1134 1496  
                                  i2l3101 2FC4                                    i2l3201 245E  
                          __CFG_WDTCCS$SC 000000                                    i2l3213 249A  
                                  i2l3127 302C                                    i2l3207 247A  
                                  i2l3219 24D8                                    i2l1548 2FCE  
                                  i2l3093 2FA6                                    i2l3157 2E80  
                                  i2l3095 2FAE                                    i2l3191 2424  
                                  i2l3239 2D54                                    i2l3097 2FB2  
                                  i2l3721 13EC                                    i2l3705 13C0  
                                  i2l3715 13D8                                    i2l3651 1320  
                                  i2l3733 1410                                    i2l3709 13C6  
                                  i2l3727 13FE                                    i2l3745 1458  
                                  i2l3657 1322                                    i2l3755 146A  
                                  i2l3747 145A                                    i2l3683 137E  
                                  i2l3667 1336                                    i2l3757 146C  
                                  i2l3693 1396                                    i2l3767 1494  
                                  i2l3699 13AA                          WriteLongInt@Sign 0078  
                                  _OSCFRQ 000EDE                                    _NVMDAT 000F80  
                                  _TX1STA 000F9E                                    _STATES 06F0  
                           _GPS_DATE_TIME 00AE                             ??_Timer0_10ms 0035  
                        WriteLongInt@size 0077                                 ??_ReadGPS 00AC  
                                  _GetDay 1F32                          _IncreaseByAMonth 2E00  
                          __CFG_PWRTE$OFF 000000                        IncreaseByAMonth@dt 0070  
                          __CFG_XINST$OFF 000000              _SPECIAL_AUDIO_LAST_X_SECONDS 0054  
                             ?_Lcd_CharCP 0001                 AdjustDayLightSaving@Start 0094  
                               ??_StopGPS 0060                                    ___lmul 2D68  
                               ??___aldiv 0068                __end_of_VerifyForGPSOnTIme 2EDC  
                                  ___wmul 3112                                 ??___awdiv 0064  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___lwmod 0064                          ?_TMR0_Initialize 0001  
                                  clear_0 28FA                                    clear_1 290C  
                                  clear_2 2918                                    clear_3 2924  
                                  clear_4 2930                   __end_of_IncreaseByAYear 3076  
                        ___awdiv@quotient 0066                           ___awmod@divisor 006A  
                         ___awmod@counter 006C                    __end_of_GetEventNumber 20F0  
                   __end_of_Lcd_WriteChar 2F1C                            WriteEeprom@Add 0060  
                            __pdataBIGRAM 02F0                              __pdataCOMRAM 005C  
                            __mediumconst 0000                         __end_ofi2___lwmod 2FD8  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                     __end_of_TMR0_CallBack 3154  
                   ?_LoadStatesFromEeprom 0001  TMR0_SetInterruptHandler@InterruptHandler 0060  
                   __size_of_Lcd_Delay5us 0008             __size_of_INTERRUPT_Initialize 0004  
                      Lcd_Command@command 0062                     LoadEventsFromEeprom@i 006A  
                        DecreaseByADay@dt 007B                         _SYSTEM_Initialize 3184  
                              __accesstop 0060                   __end_of__initialization 2936  
              __end_ofi2_IncreaseByAMonth 2E94                           __CFG_FEXTOSC$HS 000000  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
            LoadSettingsFromEeprom@Temp16 006A              LoadSettingsFromEeprom@Temp32 0066  
                             ?_ReadEeprom 0060                 i2IncreaseByADay@MonthDays 0029  
                      i2___lwmod@dividend 0001                            __pcstackCOMRAM 0001  
                            __pidataBANK0 31C0                              __pidataBANK1 30E2  
                     __end_of_Timer0_10ms 14AC                       ??_SYSTEM_Initialize 0064  
                   _TIME_AT_LAST_GPS_SYNC 00C4                                 ?_TMR0_ISR 0001  
                       ??_DecreaseByAYear 0070                                __end_ofPL2 1BAE  
                              __end_ofPL4 1BB6                                __end_ofPL6 1BC0  
                              __end_ofPL8 1720                  __end_of_DecreaseByAMonth 2E00  
                         ?_GetEventNumber 0001                      __end_of_EUSART1_Read 31E6  
                   _TestGPSStartCondition 2FD8                              _Lcd_Delay5us 3220  
                         _Lcd_Delay5500us 31E6                            Lcd_WriteChar@c 006F  
                          Lcd_WriteChar@x 006E                            Lcd_WriteChar@y 0070  
                               ?_Lcd_Init 0001              __end_of_AdjustDayLightSaving 1F20  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 3198  
                        _ValidateDateTime 2324                       __size_of_Lcd_CharCP 0080  
           __size_of_LoadEventsFromEeprom 00AA                                __pbssBANK0 00AE  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                           ??_SwitchOnGPS 0060                                   ?_GetDay 006E  
                       ReadEeprom@Address 0060          __end_of_TMR0_SetInterruptHandler 3220  
                                 ?___lmul 0060                                   ?___wmul 0060  
                              ??_TMR0_ISR 0041                             ??_WriteEeprom 0063  
                         __CFG_PPS1WAY$ON 000000                            ___lmul@product 0068  
                    Timer0_10ms@ThisCycle 003A                          ?_IncreaseByAYear 0065  
                                 _CENTURY 00F7                                   _FLAGS_0 00E0  
                                 _FLAGS_1 004D               LoadCyclesFromEeprom@Address 006D  
                                 GetDay@d 0075                                   GetDay@m 0076  
                                 GetDay@t 015C                                   GetDay@y 0077  
                                 _SP1BRGH 000F9C                                   _SP1BRGL 000F9B  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                  ??_LoadStatesFromEeprom 0068                                   _NVMADRH 000F7F  
                                 _NVMADRL 000F7E                                   _OSCTUNE 000EDD  
                                 _NVMCON2 000F82                                ??_Lcd_Init 0063  
                                 _PPSLOCK 000EA0                       __size_of_ReadEeprom 0014  
                     IncreaseByASecond@dt 002A                         _IncreaseByASecond 2D0C  
              LoadCyclesFromEeprom@i_1461 0073                         ?i2_IncreaseByADay 001C  
                    ValidateDateTime@Date 0060                               _Timer0_10ms 130A  
                                 _ReadGPS 2BD4                      ValidateDateTime@Item 0063  
                    ValidateDateTime@Time 0061                           __size_of_GetDay 00F0  
                      ?_IncreaseByASecond 002A                                   __Hparam 0000  
                      ??i2_IncreaseByADay 0027                                   __Lparam 0000  
                               _DATE_TIME 00B9               AdjustDayLightSaving@Present 0098  
                                 _StopGPS 3228                                   ___aldiv 2A00  
                     __end_of_SwitchOnGPS 316E                         Lcd_WriteChar@data 0071  
                                 ___awdiv 2B5C                           __size_of___lmul 004C  
                                 ___awmod 2C3E                           __size_of___wmul 0026  
                 __end_of_Lcd_Delay5500us 31F8                                   ___lwmod 2F5C  
                            __psmallconst 0F00                       ??_IncreaseByASecond 0035  
                                 __pcinit 2876                    ?_TestGPSStartCondition 0001  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 1BC0  
                                 __ptext1 2940                                   __ptext2 2A00  
                                 __ptext3 2EDC                                   __ptext4 24F6  
                                 __ptext5 307E                                   __ptext6 2E94  
                                 __ptext7 2FD8                                   __ptext8 3154  
                                 __ptext9 3228              __end_of_LoadCyclesFromEeprom 1B94  
                      ??_TimeTextToSecond 0070                       __end_of_WriteEeprom 30B0  
                        ??_IncreaseByADay 0086                     _OSCILLATOR_Initialize 316E  
                __end_of_IncreaseByAMonth 2E4A                          ___awmod@dividend 0068  
                        ___aldiv@dividend 0060                        _EUSART1_Initialize 3198  
                ??_PIN_MANAGER_Initialize 0060                __size_of_SYSTEM_Initialize 0014  
      LoadStatesFromEeprom@AddAudioNormal 006B                     _AUDIO_SPECIAL_ON_TIME 0056  
                    end_of_initialization 2936         _NORMAL_AUDIO_STATE_ON_OFF_COUNTER 004F  
               __end_of_IncreaseByASecond 2D68                       ?_EUSART1_Initialize 0001  
                         WriteEeprom@Data 0062                           _DAY_LIGHT_START 00D8  
                            ??_Lcd_CharCP 0060                          ___aldiv@quotient 006A  
                                 postdec1 000FE5                                   postdec2 000FDD  
        _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME 00CC                                   postinc0 000FEE  
                                 postinc1 000FE6                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0012                      _AdjustDayLightSaving 1E0E  
                    ??_EUSART1_Initialize 0060                                 _TIME_ZONE 00DE  
                   __CFG_WDTCPS$WDTCPS_31 000000                  _TMR0_SetInterruptHandler 3216  
                           _BLINK_ON_TIME 005B                  __size_of_ReadGPSDateTime 00D6  
                      _VerifyForGPSOnTIme 2E94                                 _TRISAbits 000F88  
           LoadSettingsFromEeprom@Address 006C                     LoadCyclesFromEeprom@i 0071  
                   LoadCyclesFromEeprom@j 006F                                 i2___lwmod 2F9A  
                      __end_of_Lcd_CharCP 2576                       ?_VerifyForGPSOnTIme 0001  
                       DecreaseByAYear@dt 0065                         _LoadAllFromEeprom 31F8  
                       _ReadGPS_DATE_TIME 1720                              _EUSART1_Read 31D4  
                             _SwitchOnGPS 3154                           _DecreaseByAYear 30B0  
                      ?_LoadAllFromEeprom 0001                        ?_ReadGPS_DATE_TIME 0001  
                 DecreaseByADay@MonthDays 0087                            __end_of_GetDay 2022  
                            ??_ReadEeprom 0062                      _timer0ReloadVal16bit 004B  
                        ??_GetEventNumber 0066                     ?_AdjustDayLightSaving 0089  
                        IncreaseByADay@dt 007B              __end_of_INTERRUPT_Initialize 3236  
                __end_of_ValidateDateTime 23C6                       ??_LoadAllFromEeprom 007C  
                             _WriteEeprom 307E                        i2_IncreaseByAMonth 2E4A  
                          __end_of___lmul 2DB4                       ??_ReadGPS_DATE_TIME 009A  
                        ?_Lcd_Delay5500us 0001                             __pidataBIGRAM 0F0A  
                          __end_of___wmul 3138                      ??_VerifyForGPSOnTIme 0060  
                           __pidataCOMRAM 3236                         __size_of_TMR0_ISR 000E  
                       ?_DecreaseByAMonth 0070                    ?_OSCILLATOR_Initialize 0001  
                     ?i2_IncreaseByAMonth 0011                        ??_DecreaseByAMonth 007B  
                             __end_ofPL10 23DA                               __end_ofPL20 1A3C  
                             __end_ofPL12 1CD6                               __end_ofPL30 1DCC  
                             __end_ofPL22 1DBC                               __end_ofPL14 1CE8  
                             __end_ofPL40 23EE                               __end_ofPL32 1502  
                             __end_ofPL24 14BA                               __end_ofPL16 2100  
                             __end_ofPL50 2694                               __end_ofPL42 2672  
                             __end_ofPL34 2120                               __end_ofPL26 14D0  
                             __end_ofPL18 202C                               __end_ofPL60 25B0  
                             __end_ofPL52 1518                               __end_ofPL44 258E  
                             __end_ofPL36 23E4                               __end_ofPL28 14F4  
                             __end_ofPL70 2128                               __end_ofPL62 25BE  
                             __end_ofPL54 1DE4                               __end_ofPL46 25A6  
                             __end_ofPL38 1DDA                               __end_ofPL80 1E0E  
                             __end_ofPL72 1A4A                               __end_ofPL64 222C  
                             __end_ofPL56 23FA                               __end_ofPL48 268A  
                             __end_ofPL90 1A68                               __end_ofPL82 1A5C  
                             __end_ofPL74 2132                               __end_ofPL66 1DFA  
                             __end_ofPL58 26A2                               __end_ofPL92 18CE  
                             __end_ofPL84 26B4                               __end_ofPL76 2310  
                             __end_ofPL68 2406                               __end_ofPL94 2234  
                             __end_ofPL86 25D0                               __end_ofPL78 29F6  
                             __end_ofPL96 25DA                               __end_ofPL88 2038  
                             __end_ofPL98 1528                       start_initialization 2876  
                 __size_of_DecreaseByADay 00CE                             _PRESENT_EVENT 005D  
                __size_of_TMR0_Initialize 0040           __size_of_PIN_MANAGER_Initialize 0066  
                           _PRESENT_STATE 00E3                      _BLINK_LAST_X_SECONDS 0059  
           __end_ofReadGPSDateTime@F11464 0F08                        __end_of_ReadEeprom 31C0  
                              ?i2___lwmod 0001                 __end_of_LoadAllFromEeprom 3208  
                       __size_of_Lcd_Init 008C                __size_of_IncreaseByASecond 005C  
               __end_of_ReadGPS_DATE_TIME 18C2                        WriteEeprom@Address 0063  
            _TIME_WHEN_GPS_IS_SWITCHED_ON 00C8                           WriteLongInt@POS 0079  
                    _AUDIO_NORMAL_ON_TIME 0058                                  ??_GetDay 006F  
                         WriteLongInt@Val 0073                    __size_of_Lcd_WriteChar 0040  
                    _LoadCyclesFromEeprom 1A7A                      ??i2_IncreaseByAMonth 001C  
      _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER 004E                  ??_LoadSettingsFromEeprom 0066  
                    i2IncreaseByAMonth@dt 0011                          __CFG_LPBOREN$OFF 000000  
                                ??___lmul 0068              __end_of_LoadEventsFromEeprom 1D92  
                                ??___wmul 0064                    __size_of_TMR0_CallBack 001C  
                             __pdataBANK0 00E5                               __pdataBANK1 0144  
                           _DAY_LIGHT_END 00D4                               __pbssBIGRAM 06F0  
                           ?_WriteLongInt 0072                      __size_of_Lcd_Command 0080  
                ReadGPSDateTime@StartCode 0066                               __pbssCOMRAM 004B  
                           __pcstackBANK0 0060                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                   __end_of_DecreaseByAYear 30E2  
                       ??_ReadGPSDateTime 0062                             WriteLongInt@x 0072  
                           WriteLongInt@y 007A                VerifyForGPSOnTIme@TimeDiff 0060  
                            ?_Timer0_10ms 0001                     ?_LoadCyclesFromEeprom 0001  
                                ?_ReadGPS 0001                     _TMR0_InterruptHandler 00DC  
                __size_of_TMR0_StartTimer 0004         LoadStatesFromEeprom@TempNormalAdd 006F  
                  _PIN_MANAGER_Initialize 2CA6                    ??_AdjustDayLightSaving 0094  
                               __pintcode 0008                   ??_TestGPSStartCondition 0060  
                                ?_StopGPS 0001                                  ?___aldiv 0060  
                                ?___awdiv 0060                                  ?___awmod 0068  
                                ?___lwmod 0060                         _GPS_SYNC_AT_START 00E4  
                  _NO_OF_TIMES_GPS_FAILED 00E1              ??_INTERRUPT_InterruptManager 0041  
               __size_ofi2_IncreaseByADay 00DC                            ??_WriteLongInt 0079  
                                _BAUD1CON 000F9F                             _Lcd_WriteChar 2EDC  
                             __smallconst 0F00                              Timer0_10ms@i 003B  
             LoadEventsFromEeprom@Address 006C                         ?_IncreaseByAMonth 0070  
                __size_of_IncreaseByAYear 002E                        ??_IncreaseByAMonth 007B  
                           _TMR0_CallBack 3138             __size_of_LoadStatesFromEeprom 015E  
                             ??i2___lwmod 0005                __size_of_LoadAllFromEeprom 0010  
                    _INTERRUPT_Initialize 3232                __size_of_ReadGPS_DATE_TIME 01A2  
               __size_of_TimeTextToSecond 00D6                           ___aldiv@divisor 0064  
                       ??_TMR0_Initialize 0062                          ReadGPSDateTime@i 006D  
                         ___aldiv@counter 0068                            ___wmul@product 0064  
                                _LATAbits 000F83                           GetEventNumber@i 006F  
                                _LATCbits 000F85                                  _PIE0bits 000EC2  
                     __CFG_BORV$VBOR_2P45 000000           __size_of_LoadSettingsFromEeprom 01CC  
                                i2u221_41 2E66                                  i2u222_41 2E78  
                                i2u215_41 3036                                  i2u223_41 2E8A  
     __size_of_INTERRUPT_InterruptManager 0062                                  i2u240_41 24BE  
                                i2u241_41 24D0                                  i2u242_41 24E2  
              ??_TMR0_SetInterruptHandler 0062                                  i2u246_41 2D3A  
                                i2u247_41 2D4C                                  _PIR0bits 000ECA  
                                i2u248_41 2D5E                                  i2u345_41 1422  
                                i2u346_41 1434                                  _PIR3bits 000ECD  
                     ReadGPSDateTime@Date 0060                       ReadGPSDateTime@Time 0061  
                                _TMR0_ISR 3208                      TimeTextToSecond@Time 006C  
                            Lcd_Init@data 0063                            ?_Lcd_WriteChar 006E  
                       ___wmul@multiplier 0060                            _DecreaseByADay 2234  
                                _Lcd_Init 2ABC                            ?_TMR0_CallBack 0001  
                       i2_IncreaseByAYear 3010                               _EE_Settings 02F0  
                       ___lmul@multiplier 0060                                 copy_data0 288A  
                               copy_data1 28AE                                 copy_data2 28CE  
                   ?_INTERRUPT_Initialize 0001                          ?_DecreaseByAYear 0065  
                    _LoadEventsFromEeprom 1CE8                        ?i2_IncreaseByAYear 0006  
                  ??_LoadCyclesFromEeprom 0066                   _STATE_SECONDS_REMAINING 0052  
                            ?_SwitchOnGPS 0001                     ReadGPS_DATE_TIME@Date 00A5  
                        __size_of_ReadGPS 006A                             _STATE_SECONDS 0053  
                                __Hrparam 0000                       ??i2_IncreaseByAYear 0011  
                   ReadGPS_DATE_TIME@Time 009E                   __CFG_RSTOSC$EXTOSC_4PLL 000000  
                     i2IncreaseByAYear@dt 0006                                  __Lrparam 0000  
                 ReadGPSDateTime@TempChar 0070                        __CFG_BOREN$SBORDIS 000000  
                 ??_OSCILLATOR_Initialize 0060                              ?_WriteEeprom 0060  
                        __size_of_StopGPS 0006                         ??_TMR0_StartTimer 0060  
                        __size_of___aldiv 00BC                         ?_ValidateDateTime 0060  
                        __size_of___awdiv 0078                          __size_of___awmod 0068  
             __size_of_EUSART1_Initialize 0014                          __size_of___lwmod 003E  
                      ??_ValidateDateTime 0062                    __end_of_DecreaseByADay 2302  
                           ?_Lcd_Delay5us 0001                    _LoadSettingsFromEeprom 154A  
                              _T0CON0bits 000FD5                 __end_ofi2_IncreaseByAYear 3040  
                                __ptext10 3184                                  __ptext11 2F1C  
                                __ptext20 2140                                  __ptext12 322E  
                                __ptext21 2D68                                  __ptext13 3216  
                                __ptext30 3048                                  __ptext22 27A0  
                                __ptext14 2CA6                                  __ptext31 2234  
                                __ptext23 31D4                                  __ptext15 316E  
                                __ptext40 1A7A                                  __ptext32 2DB4  
                                __ptext24 1F32                                  __ptext16 3232  
                                __ptext41 31AC                                  __ptext33 30B0  
                                __ptext25 2C3E                                  __ptext17 2BD4  
                                __ptext50 3138                                  __ptext42 2ABC  
                                __ptext34 2F5C                                  __ptext26 3198  
                                __ptext18 1720                                  __ptext51 3238  
                                __ptext43 31E6                                  __ptext35 31F8  
                                __ptext27 1E0E                                  __ptext19 2324  
                                __ptext52 130A                                  __ptext44 25DA  
                                __ptext36 18CE                                  __ptext28 26BE  
                                __ptext53 2D0C                                  __ptext45 3220  
                                __ptext37 2B5C                                  __ptext29 2E00  
                                __ptext54 2410                                  __ptext46 2042  
                                __ptext38 154A                                  __ptext55 2E4A  
                                __ptext47 3112                                  __ptext39 1CE8  
                                __ptext56 3010                                  __ptext57 2F9A  
                                __ptext49 3208                                  __ptext58 0000  
                   ?_LoadEventsFromEeprom 0001                     LoadStatesFromEeprom@i 007A  
                   LoadStatesFromEeprom@j 0074                 __size_of_DecreaseByAMonth 004C  
                             Lcd_CharCP@c 0062                   __size_of_IncreaseByADay 00D8  
                           __size_of_main 00FE                         ??_IncreaseByAYear 0070  
    __end_of_TMR0_DefaultInterruptHandler 323A     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 3238                      __end_of_WriteLongInt 29E4  
                    __CFG_WDTCWS$WDTCWS_7 000000                      __size_of_Timer0_10ms 01A2  
                              _RC1STAbits 000F9D                    _AUDIO_SPECIAL_OFF_TIME 0055  
                      ReadGPSDateTime@Pos 0071                                  int$flags 005E  
      __end_of_INTERRUPT_InterruptManager 006A                _INTERRUPT_InterruptManager 0008  
                         ??_Lcd_WriteChar 0070               __size_of_VerifyForGPSOnTIme 0048  
     LoadStatesFromEeprom@AddAudioSpecial 006D                            ??_Lcd_Delay5us 0060  
                        i2_IncreaseByADay 2410                 Timer0_10ms@OutForThePorts 003C  
             PIN_MANAGER_Initialize@state 0060                           ?_DecreaseByADay 007B  
                      i2IncreaseByADay@dt 001C                           _ReadGPSDateTime 27A0  
                              _INTCONbits 000FF2                           ??_TMR0_CallBack 0041  
                             _NVMCON1bits 000F81                                GetDay@Date 006E  
                __size_of_Lcd_Delay5500us 0012                   IncreaseByADay@MonthDays 0088  
                  ??_INTERRUPT_Initialize 0060                                  intlevel2 0000  
                        _TimeTextToSecond 2140                     ReadGPSDateTime@F11464 0F01  
                        ___lwmod@dividend 0060                   ?_PIN_MANAGER_Initialize 0001  
                       __CFG_CLKOUTEN$OFF 000000                                _NEXT_EVENT 005C  
                             _PPSLOCKbits 000EA0               __size_ofi2_IncreaseByAMonth 004A  
                              _NEXT_STATE 00E2        LoadStatesFromEeprom@TempSpecialAdd 0071  
           ?_TMR0_DefaultInterruptHandler 0001            __size_of_TestGPSStartCondition 0038  
                   ReadGPSDateTime@Commas 006F             __end_of_TestGPSStartCondition 3010  
                           ??_Lcd_Command 0060                _BLINK_STATE_ON_OFF_COUNTER 0050  
                              _RX1PPSbits 000EB5                           ___lwmod@divisor 0062  
                         _TMR0_Initialize 2F1C                           ___lwmod@counter 0064  
                 __size_of_GetEventNumber 00AE                __size_ofi2_IncreaseByAYear 0030  
                            ___aldiv@sign 0069                            _BLINK_OFF_TIME 005A  
                  ??_LoadEventsFromEeprom 0066            __end_of_PIN_MANAGER_Initialize 2D0C  
                  TimeTextToSecond@Second 0080                 __size_of_IncreaseByAMonth 004A  
                    __size_of_SwitchOnGPS 001A  
