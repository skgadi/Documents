

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Mon Aug 07 14:15:42 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91                           	psect	pa_nodes0,global,class=CODE,delta=1
    92  0000                     
    93                           ; Version 1.42
    94                           ; Generated 13/04/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F26K40 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     tosu	equ	0xFFF
   128                           tosh	equ	0xFFE
   129                           tosl	equ	0xFFD
   130                           pclath	equ	0xFFA
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           prodh	equ	0xFF4
   136                           prodl	equ	0xFF3
   137                           intcon	equ	0xFF2
   138                           plusw0	equ	0xFEB
   139                           wreg	equ	0xFE8
   140                           indf1	equ	0xFE7
   141                           postinc1	equ	0xFE6
   142                           plusw1	equ	0xFE3
   143                           fsr1h	equ	0xFE2
   144                           fsr1l	equ	0xFE1
   145                           indf2	equ	0xFDF
   146                           postinc2	equ	0xFDE
   147                           postdec2	equ	0xFDD
   148                           plusw2	equ	0xFDB
   149                           fsr2h	equ	0xFDA
   150                           fsr2l	equ	0xFD9
   151                           status	equ	0xFD8
   152                           
   153                           	psect	idataCOMRAM
   154  0036EA                     __pidataCOMRAM:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _NEXT_EVENT
   158  0036EA  FF                 	db	255
   159                           
   160                           ;initializer for _PRESENT_EVENT
   161  0036EB  FF                 	db	255
   162                           tosu	equ	0xFFF
   163                           tosh	equ	0xFFE
   164                           tosl	equ	0xFFD
   165                           pclath	equ	0xFFA
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           prodh	equ	0xFF4
   171                           prodl	equ	0xFF3
   172                           intcon	equ	0xFF2
   173                           plusw0	equ	0xFEB
   174                           wreg	equ	0xFE8
   175                           indf1	equ	0xFE7
   176                           postinc1	equ	0xFE6
   177                           plusw1	equ	0xFE3
   178                           fsr1h	equ	0xFE2
   179                           fsr1l	equ	0xFE1
   180                           indf2	equ	0xFDF
   181                           postinc2	equ	0xFDE
   182                           postdec2	equ	0xFDD
   183                           plusw2	equ	0xFDB
   184                           fsr2h	equ	0xFDA
   185                           fsr2l	equ	0xFD9
   186                           status	equ	0xFD8
   187                           
   188                           	psect	idataBIGRAM
   189  000F0A                     __pidataBIGRAM:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _EE_Settings
   193  000F0A  98                 	db	152
   194  000F0B  FE                 	db	254
   195  000F0C  01                 	db	1
   196  000F0D  04                 	db	4
   197  000F0E  01                 	db	1
   198  000F0F  0A                 	db	10
   199  000F10  14                 	db	20
   200  000F11  F6                 	db	246
   201  000F12  FF                 	db	255
   202  000F13  3C                 	db	60
   203  000F14  28                 	db	40
   204  000F15  04                 	db	4
   205  000F16  08                 	db	8
   206  000F17  C0                 	db	192
   207  000F18  08                 	db	8
   208  000F19  2A                 	db	42
   209  000F1A  05                 	db	5
   210  000F1B  01                 	db	1
   211  000F1C  80                 	db	128
   212  000F1D  51                 	db	81
   213  000F1E  01                 	db	1
   214  000F1F  00                 	db	0
   215  000F20  05                 	db	5
   216  000F21  C5                 	db	197
   217  000F22  D5                 	db	213
   218  000F23  55                 	db	85
   219  000F24  55                 	db	85
   220  000F25  55                 	db	85
   221  000F26  00                 	db	0
   222  000F27  00                 	db	0
   223  000F28  00                 	db	0
   224  000F29  00                 	db	0
   225  000F2A  00                 	db	0
   226  000F2B  00                 	db	0
   227  000F2C  00                 	db	0
   228  000F2D  00                 	db	0
   229  000F2E  00                 	db	0
   230  000F2F  00                 	db	0
   231  000F30  00                 	db	0
   232  000F31  00                 	db	0
   233  000F32  00                 	db	0
   234  000F33  00                 	db	0
   235  000F34  00                 	db	0
   236  000F35  20                 	db	32
   237  000F36  2A                 	db	42
   238  000F37  AA                 	db	170
   239  000F38  AA                 	db	170
   240  000F39  AA                 	db	170
   241  000F3A  80                 	db	128
   242  000F3B  00                 	db	0
   243  000F3C  00                 	db	0
   244  000F3D  00                 	db	0
   245  000F3E  00                 	db	0
   246  000F3F  00                 	db	0
   247  000F40  00                 	db	0
   248  000F41  00                 	db	0
   249  000F42  00                 	db	0
   250  000F43  00                 	db	0
   251  000F44  00                 	db	0
   252  000F45  00                 	db	0
   253  000F46  00                 	db	0
   254  000F47  00                 	db	0
   255  000F48  00                 	db	0
   256  000F49  02                 	db	2
   257  000F4A  08                 	db	8
   258  000F4B  0A                 	db	10
   259  000F4C  0C                 	db	12
   260  000F4D  0E                 	db	14
   261  000F4E  10                 	db	16
   262  000F4F  12                 	db	18
   263  000F50  14                 	db	20
   264  000F51  16                 	db	22
   265  000F52  18                 	db	24
   266  000F53  1A                 	db	26
   267  000F54  1C                 	db	28
   268  000F55  1E                 	db	30
   269  000F56  20                 	db	32
   270  000F57  22                 	db	34
   271  000F58  24                 	db	36
   272  000F59  26                 	db	38
   273  000F5A  20                 	db	32
   274  000F5B  0C                 	db	12
   275  000F5C  36                 	db	54
   276  000F5D  0E                 	db	14
   277  000F5E  10                 	db	16
   278  000F5F  7F                 	db	127
   279  000F60  FF                 	db	255
   280  000F61  FF                 	db	255
   281  000F62  FF                 	db	255
   282  000F63  FF                 	db	255
   283  000F64  0F                 	db	15
   284  000F65  7F                 	db	127
   285  000F66  FF                 	db	255
   286  000F67  FF                 	db	255
   287  000F68  FF                 	db	255
   288  000F69  FF                 	db	255
   289  000F6A  0E                 	db	14
   290  000F6B  7F                 	db	127
   291  000F6C  FF                 	db	255
   292  000F6D  FF                 	db	255
   293  000F6E  FF                 	db	255
   294  000F6F  FF                 	db	255
   295  000F70  0D                 	db	13
   296  000F71  7F                 	db	127
   297  000F72  FF                 	db	255
   298  000F73  FF                 	db	255
   299  000F74  FF                 	db	255
   300  000F75  FF                 	db	255
   301  000F76  0C                 	db	12
   302  000F77  7F                 	db	127
   303  000F78  FF                 	db	255
   304  000F79  FF                 	db	255
   305  000F7A  FF                 	db	255
   306  000F7B  FF                 	db	255
   307  000F7C  0B                 	db	11
   308  000F7D  7F                 	db	127
   309  000F7E  00                 	db	0
   310  000F7F  10                 	db	16
   311  000F80  14                 	db	20
   312  000F81  10                 	db	16
   313  000F82  0A                 	db	10
   314  000F83  7F                 	db	127
   315  000F84  FF                 	db	255
   316  000F85  FF                 	db	255
   317  000F86  FF                 	db	255
   318  000F87  FF                 	db	255
   319  000F88  09                 	db	9
   320  000F89  7F                 	db	127
   321  000F8A  FF                 	db	255
   322  000F8B  FF                 	db	255
   323  000F8C  FF                 	db	255
   324  000F8D  FF                 	db	255
   325  000F8E  08                 	db	8
   326  000F8F  7F                 	db	127
   327  000F90  FF                 	db	255
   328  000F91  FF                 	db	255
   329  000F92  FF                 	db	255
   330  000F93  FF                 	db	255
   331  000F94  07                 	db	7
   332  000F95  7F                 	db	127
   333  000F96  FF                 	db	255
   334  000F97  FF                 	db	255
   335  000F98  FF                 	db	255
   336  000F99  FF                 	db	255
   337  000F9A  06                 	db	6
   338  000F9B  7F                 	db	127
   339  000F9C  FF                 	db	255
   340  000F9D  FF                 	db	255
   341  000F9E  FF                 	db	255
   342  000F9F  FF                 	db	255
   343  000FA0  05                 	db	5
   344  000FA1  7F                 	db	127
   345  000FA2  FF                 	db	255
   346  000FA3  FF                 	db	255
   347  000FA4  FF                 	db	255
   348  000FA5  FF                 	db	255
   349  000FA6  04                 	db	4
   350  000FA7  7F                 	db	127
   351  000FA8  FF                 	db	255
   352  000FA9  FF                 	db	255
   353  000FAA  FF                 	db	255
   354  000FAB  FF                 	db	255
   355  000FAC  03                 	db	3
   356  000FAD  7F                 	db	127
   357  000FAE  FF                 	db	255
   358  000FAF  FF                 	db	255
   359  000FB0  FF                 	db	255
   360  000FB1  FF                 	db	255
   361  000FB2  02                 	db	2
   362  000FB3  7F                 	db	127
   363  000FB4  FF                 	db	255
   364  000FB5  FF                 	db	255
   365  000FB6  FF                 	db	255
   366  000FB7  FF                 	db	255
   367  000FB8  01                 	db	1
   368  000FB9  7F                 	db	127
   369  000FBA  FF                 	db	255
   370  000FBB  FF                 	db	255
   371  000FBC  FF                 	db	255
   372  000FBD  FF                 	db	255
   373  000FBE  00                 	db	0
   374  000FBF  7F                 	db	127
   375  000FC0  FF                 	db	255
   376  000FC1  FF                 	db	255
   377  000FC2  FF                 	db	255
   378  000FC3  FF                 	db	255
   379  000FC4  10                 	db	16
   380  000FC5  7F                 	db	127
   381  000FC6  FF                 	db	255
   382  000FC7  FF                 	db	255
   383  000FC8  FF                 	db	255
   384  000FC9  FF                 	db	255
   385  000FCA  0F                 	db	15
   386  000FCB  7F                 	db	127
   387  000FCC  FF                 	db	255
   388  000FCD  FF                 	db	255
   389  000FCE  FF                 	db	255
   390  000FCF  FF                 	db	255
   391  000FD0  0E                 	db	14
   392  000FD1  7F                 	db	127
   393  000FD2  FF                 	db	255
   394  000FD3  FF                 	db	255
   395  000FD4  FF                 	db	255
   396  000FD5  FF                 	db	255
   397  000FD6  0D                 	db	13
   398  000FD7  7F                 	db	127
   399  000FD8  FF                 	db	255
   400  000FD9  FF                 	db	255
   401  000FDA  FF                 	db	255
   402  000FDB  FF                 	db	255
   403  000FDC  0C                 	db	12
   404  000FDD  7F                 	db	127
   405  000FDE  FF                 	db	255
   406  000FDF  FF                 	db	255
   407  000FE0  FF                 	db	255
   408  000FE1  FF                 	db	255
   409  000FE2  0B                 	db	11
   410  000FE3  7F                 	db	127
   411  000FE4  FF                 	db	255
   412  000FE5  FF                 	db	255
   413  000FE6  FF                 	db	255
   414  000FE7  FF                 	db	255
   415  000FE8  0A                 	db	10
   416  000FE9  7F                 	db	127
   417  000FEA  0A                 	db	10
   418  000FEB  24                 	db	36
   419  000FEC  90                 	db	144
   420  000FED  12                 	db	18
   421  000FEE  48                 	db	72
   422  000FEF  0A                 	db	10
   423  000FF0  12                 	db	18
   424  000FF1  48                 	db	72
   425  000FF2  09                 	db	9
   426  000FF3  24                 	db	36
   427  000FF4  0A                 	db	10
   428  000FF5  09                 	db	9
   429  000FF6  24                 	db	36
   430  000FF7  24                 	db	36
   431  000FF8  90                 	db	144
   432  000FF9  03                 	db	3
   433  000FFA  04                 	db	4
   434  000FFB  90                 	db	144
   435  000FFC  08                 	db	8
   436  000FFD  00                 	db	0
   437  000FFE  02                 	db	2
   438  000FFF  14                 	db	20
   439  001000  90                 	db	144
   440  001001  00                 	db	0
   441  001002  00                 	db	0
   442  001003  15                 	db	21
   443  001004  24                 	db	36
   444  001005  24                 	db	36
   445  001006  00                 	db	0
   446  001007  00                 	db	0
   447  001008  02                 	db	2
   448  001009  24                 	db	36
   449  00100A  10                 	db	16
   450  00100B  00                 	db	0
   451  00100C  20                 	db	32
   452  00100D  02                 	db	2
   453  00100E  24                 	db	36
   454  00100F  50                 	db	80
   455  001010  00                 	db	0
   456  001011  00                 	db	0
   457  001012  01                 	db	1
   458  001013  00                 	db	0
   459  001014  00                 	db	0
   460  001015  14                 	db	20
   461  001016  20                 	db	32
   462  001017  02                 	db	2
   463  001018  12                 	db	18
   464  001019  48                 	db	72
   465  00101A  00                 	db	0
   466  00101B  00                 	db	0
   467  00101C  06                 	db	6
   468  00101D  12                 	db	18
   469  00101E  48                 	db	72
   470  00101F  00                 	db	0
   471  001020  00                 	db	0
   472  001021  04                 	db	4
   473  001022  12                 	db	18
   474  001023  48                 	db	72
   475  001024  00                 	db	0
   476  001025  00                 	db	0
   477  001026  07                 	db	7
   478  001027  12                 	db	18
   479  001028  48                 	db	72
   480  001029  00                 	db	0
   481  00102A  00                 	db	0
   482  00102B  06                 	db	6
   483  00102C  12                 	db	18
   484  00102D  48                 	db	72
   485  00102E  00                 	db	0
   486  00102F  00                 	db	0
   487  001030  04                 	db	4
   488  001031  12                 	db	18
   489  001032  48                 	db	72
   490  001033  00                 	db	0
   491  001034  00                 	db	0
   492  001035  06                 	db	6
   493  001036  12                 	db	18
   494  001037  48                 	db	72
   495  001038  00                 	db	0
   496  001039  00                 	db	0
   497  00103A  0A                 	db	10
   498  00103B  12                 	db	18
   499  00103C  48                 	db	72
   500  00103D  00                 	db	0
   501  00103E  00                 	db	0
   502  00103F  08                 	db	8
   503  001040  12                 	db	18
   504  001041  48                 	db	72
   505  001042  00                 	db	0
   506  001043  00                 	db	0
   507  001044  06                 	db	6
   508  001045  12                 	db	18
   509  001046  48                 	db	72
   510  001047  00                 	db	0
   511  001048  00                 	db	0
   512  001049  0A                 	db	10
   513  00104A  12                 	db	18
   514  00104B  48                 	db	72
   515  00104C  00                 	db	0
   516  00104D  00                 	db	0
   517  00104E  03                 	db	3
   518  00104F  12                 	db	18
   519  001050  48                 	db	72
   520  001051  00                 	db	0
   521  001052  00                 	db	0
   522  001053  07                 	db	7
   523  001054  12                 	db	18
   524  001055  48                 	db	72
   525  001056  00                 	db	0
   526  001057  00                 	db	0
   527  001058  03                 	db	3
   528  001059  12                 	db	18
   529  00105A  48                 	db	72
   530  00105B  00                 	db	0
   531  00105C  00                 	db	0
   532  00105D  05                 	db	5
   533  00105E  12                 	db	18
   534  00105F  48                 	db	72
   535  001060  00                 	db	0
   536  001061  00                 	db	0
   537  001062  06                 	db	6
   538  001063  12                 	db	18
   539  001064  48                 	db	72
   540  001065  00                 	db	0
   541  001066  00                 	db	0
   542  001067  07                 	db	7
   543  001068  12                 	db	18
   544  001069  48                 	db	72
   545  00106A  00                 	db	0
   546  00106B  00                 	db	0
   547  00106C  03                 	db	3
   548  00106D  12                 	db	18
   549  00106E  48                 	db	72
   550  00106F  00                 	db	0
   551  001070  00                 	db	0
   552  001071  03                 	db	3
   553  001072  12                 	db	18
   554  001073  48                 	db	72
   555  001074  00                 	db	0
   556  001075  00                 	db	0
   557  001076  09                 	db	9
   558  001077  12                 	db	18
   559  001078  48                 	db	72
   560  001079  00                 	db	0
   561  00107A  00                 	db	0
   562  00107B  09                 	db	9
   563  00107C  12                 	db	18
   564  00107D  48                 	db	72
   565  00107E  00                 	db	0
   566  00107F  00                 	db	0
   567  001080  0A                 	db	10
   568  001081  12                 	db	18
   569  001082  48                 	db	72
   570  001083  00                 	db	0
   571  001084  00                 	db	0
   572  001085  07                 	db	7
   573  001086  12                 	db	18
   574  001087  48                 	db	72
   575  001088  00                 	db	0
   576  001089  00                 	db	0
   577  00108A  05                 	db	5
   578  00108B  12                 	db	18
   579  00108C  48                 	db	72
   580  00108D  00                 	db	0
   581  00108E  00                 	db	0
   582  00108F  0A                 	db	10
   583  001090  12                 	db	18
   584  001091  48                 	db	72
   585  001092  00                 	db	0
   586  001093  00                 	db	0
   587  001094  06                 	db	6
   588  001095  12                 	db	18
   589  001096  48                 	db	72
   590  001097  00                 	db	0
   591  001098  00                 	db	0
   592  001099  04                 	db	4
   593  00109A  12                 	db	18
   594  00109B  48                 	db	72
   595  00109C  00                 	db	0
   596  00109D  00                 	db	0
   597  00109E  07                 	db	7
   598  00109F  12                 	db	18
   599  0010A0  48                 	db	72
   600  0010A1  00                 	db	0
   601  0010A2  00                 	db	0
   602  0010A3  04                 	db	4
   603  0010A4  12                 	db	18
   604  0010A5  48                 	db	72
   605  0010A6  00                 	db	0
   606  0010A7  00                 	db	0
   607  0010A8  09                 	db	9
   608  0010A9  12                 	db	18
   609  0010AA  48                 	db	72
   610  0010AB  00                 	db	0
   611  0010AC  00                 	db	0
   612  0010AD  07                 	db	7
   613  0010AE  12                 	db	18
   614  0010AF  48                 	db	72
   615  0010B0  00                 	db	0
   616  0010B1  00                 	db	0
   617  0010B2  09                 	db	9
   618  0010B3  12                 	db	18
   619  0010B4  48                 	db	72
   620  0010B5  00                 	db	0
   621  0010B6  00                 	db	0
   622  0010B7  00                 	db	0
   623  0010B8  00                 	db	0
   624  0010B9  00                 	db	0
   625  0010BA  00                 	db	0
   626  0010BB  00                 	db	0
   627  0010BC  00                 	db	0
   628  0010BD  00                 	db	0
   629  0010BE  00                 	db	0
   630  0010BF  00                 	db	0
   631  0010C0  00                 	db	0
   632  0010C1  00                 	db	0
   633  0010C2  00                 	db	0
   634  0010C3  00                 	db	0
   635  0010C4  00                 	db	0
   636  0010C5  00                 	db	0
   637  0010C6  00                 	db	0
   638  0010C7  00                 	db	0
   639  0010C8  00                 	db	0
   640  0010C9  00                 	db	0
   641  0010CA  00                 	db	0
   642  0010CB  00                 	db	0
   643  0010CC  00                 	db	0
   644  0010CD  00                 	db	0
   645  0010CE  00                 	db	0
   646  0010CF  00                 	db	0
   647  0010D0  00                 	db	0
   648  0010D1  00                 	db	0
   649  0010D2  00                 	db	0
   650  0010D3  00                 	db	0
   651  0010D4  00                 	db	0
   652  0010D5  00                 	db	0
   653  0010D6  00                 	db	0
   654  0010D7  00                 	db	0
   655  0010D8  00                 	db	0
   656  0010D9  00                 	db	0
   657  0010DA  00                 	db	0
   658  0010DB  00                 	db	0
   659  0010DC  00                 	db	0
   660  0010DD  00                 	db	0
   661  0010DE  00                 	db	0
   662  0010DF  00                 	db	0
   663  0010E0  00                 	db	0
   664  0010E1  00                 	db	0
   665  0010E2  00                 	db	0
   666  0010E3  00                 	db	0
   667  0010E4  00                 	db	0
   668  0010E5  00                 	db	0
   669  0010E6  00                 	db	0
   670  0010E7  00                 	db	0
   671  0010E8  00                 	db	0
   672  0010E9  00                 	db	0
   673  0010EA  00                 	db	0
   674  0010EB  00                 	db	0
   675  0010EC  00                 	db	0
   676  0010ED  00                 	db	0
   677  0010EE  00                 	db	0
   678  0010EF  00                 	db	0
   679  0010F0  00                 	db	0
   680  0010F1  00                 	db	0
   681  0010F2  00                 	db	0
   682  0010F3  00                 	db	0
   683  0010F4  00                 	db	0
   684  0010F5  00                 	db	0
   685  0010F6  00                 	db	0
   686  0010F7  00                 	db	0
   687  0010F8  00                 	db	0
   688  0010F9  00                 	db	0
   689  0010FA  00                 	db	0
   690  0010FB  00                 	db	0
   691  0010FC  00                 	db	0
   692  0010FD  00                 	db	0
   693  0010FE  00                 	db	0
   694  0010FF  00                 	db	0
   695  001100  00                 	db	0
   696  001101  00                 	db	0
   697  001102  00                 	db	0
   698  001103  00                 	db	0
   699  001104  00                 	db	0
   700  001105  00                 	db	0
   701  001106  00                 	db	0
   702  001107  00                 	db	0
   703  001108  00                 	db	0
   704  001109  00                 	db	0
   705  00110A  00                 	db	0
   706  00110B  00                 	db	0
   707  00110C  00                 	db	0
   708  00110D  00                 	db	0
   709  00110E  00                 	db	0
   710  00110F  00                 	db	0
   711  001110  00                 	db	0
   712  001111  00                 	db	0
   713  001112  00                 	db	0
   714  001113  00                 	db	0
   715  001114  00                 	db	0
   716  001115  00                 	db	0
   717  001116  00                 	db	0
   718  001117  00                 	db	0
   719  001118  00                 	db	0
   720  001119  00                 	db	0
   721  00111A  00                 	db	0
   722  00111B  00                 	db	0
   723  00111C  00                 	db	0
   724  00111D  00                 	db	0
   725  00111E  00                 	db	0
   726  00111F  00                 	db	0
   727  001120  00                 	db	0
   728  001121  00                 	db	0
   729  001122  00                 	db	0
   730  001123  00                 	db	0
   731  001124  00                 	db	0
   732  001125  00                 	db	0
   733  001126  00                 	db	0
   734  001127  00                 	db	0
   735  001128  00                 	db	0
   736  001129  00                 	db	0
   737  00112A  00                 	db	0
   738  00112B  00                 	db	0
   739  00112C  00                 	db	0
   740  00112D  00                 	db	0
   741  00112E  00                 	db	0
   742  00112F  00                 	db	0
   743  001130  00                 	db	0
   744  001131  00                 	db	0
   745  001132  00                 	db	0
   746  001133  00                 	db	0
   747  001134  00                 	db	0
   748  001135  00                 	db	0
   749  001136  00                 	db	0
   750  001137  00                 	db	0
   751  001138  00                 	db	0
   752  001139  00                 	db	0
   753  00113A  00                 	db	0
   754  00113B  00                 	db	0
   755  00113C  00                 	db	0
   756  00113D  00                 	db	0
   757  00113E  00                 	db	0
   758  00113F  00                 	db	0
   759  001140  00                 	db	0
   760  001141  00                 	db	0
   761  001142  00                 	db	0
   762  001143  00                 	db	0
   763  001144  00                 	db	0
   764  001145  00                 	db	0
   765  001146  00                 	db	0
   766  001147  00                 	db	0
   767  001148  00                 	db	0
   768  001149  00                 	db	0
   769  00114A  00                 	db	0
   770  00114B  00                 	db	0
   771  00114C  00                 	db	0
   772  00114D  00                 	db	0
   773  00114E  00                 	db	0
   774  00114F  00                 	db	0
   775  001150  00                 	db	0
   776  001151  00                 	db	0
   777  001152  00                 	db	0
   778  001153  00                 	db	0
   779  001154  00                 	db	0
   780  001155  00                 	db	0
   781  001156  00                 	db	0
   782  001157  00                 	db	0
   783  001158  00                 	db	0
   784  001159  00                 	db	0
   785  00115A  00                 	db	0
   786  00115B  00                 	db	0
   787  00115C  00                 	db	0
   788  00115D  00                 	db	0
   789  00115E  00                 	db	0
   790  00115F  00                 	db	0
   791  001160  00                 	db	0
   792  001161  00                 	db	0
   793  001162  00                 	db	0
   794  001163  00                 	db	0
   795  001164  00                 	db	0
   796  001165  00                 	db	0
   797  001166  00                 	db	0
   798  001167  00                 	db	0
   799  001168  00                 	db	0
   800  001169  00                 	db	0
   801  00116A  00                 	db	0
   802  00116B  00                 	db	0
   803  00116C  00                 	db	0
   804  00116D  00                 	db	0
   805  00116E  00                 	db	0
   806  00116F  00                 	db	0
   807  001170  00                 	db	0
   808  001171  00                 	db	0
   809  001172  00                 	db	0
   810  001173  00                 	db	0
   811  001174  00                 	db	0
   812  001175  00                 	db	0
   813  001176  00                 	db	0
   814  001177  00                 	db	0
   815  001178  00                 	db	0
   816  001179  00                 	db	0
   817  00117A  00                 	db	0
   818  00117B  00                 	db	0
   819  00117C  00                 	db	0
   820  00117D  00                 	db	0
   821  00117E  00                 	db	0
   822  00117F  00                 	db	0
   823  001180  00                 	db	0
   824  001181  00                 	db	0
   825  001182  00                 	db	0
   826  001183  00                 	db	0
   827  001184  00                 	db	0
   828  001185  00                 	db	0
   829  001186  00                 	db	0
   830  001187  00                 	db	0
   831  001188  00                 	db	0
   832  001189  00                 	db	0
   833  00118A  00                 	db	0
   834  00118B  00                 	db	0
   835  00118C  00                 	db	0
   836  00118D  00                 	db	0
   837  00118E  00                 	db	0
   838  00118F  00                 	db	0
   839  001190  00                 	db	0
   840  001191  00                 	db	0
   841  001192  00                 	db	0
   842  001193  00                 	db	0
   843  001194  00                 	db	0
   844  001195  00                 	db	0
   845  001196  00                 	db	0
   846  001197  00                 	db	0
   847  001198  00                 	db	0
   848  001199  00                 	db	0
   849  00119A  00                 	db	0
   850  00119B  00                 	db	0
   851  00119C  00                 	db	0
   852  00119D  00                 	db	0
   853  00119E  00                 	db	0
   854  00119F  00                 	db	0
   855  0011A0  00                 	db	0
   856  0011A1  00                 	db	0
   857  0011A2  00                 	db	0
   858  0011A3  00                 	db	0
   859  0011A4  00                 	db	0
   860  0011A5  00                 	db	0
   861  0011A6  00                 	db	0
   862  0011A7  00                 	db	0
   863  0011A8  00                 	db	0
   864  0011A9  00                 	db	0
   865  0011AA  00                 	db	0
   866  0011AB  00                 	db	0
   867  0011AC  00                 	db	0
   868  0011AD  00                 	db	0
   869  0011AE  00                 	db	0
   870  0011AF  00                 	db	0
   871  0011B0  00                 	db	0
   872  0011B1  00                 	db	0
   873  0011B2  00                 	db	0
   874  0011B3  00                 	db	0
   875  0011B4  00                 	db	0
   876  0011B5  00                 	db	0
   877  0011B6  00                 	db	0
   878  0011B7  00                 	db	0
   879  0011B8  00                 	db	0
   880  0011B9  00                 	db	0
   881  0011BA  00                 	db	0
   882  0011BB  00                 	db	0
   883  0011BC  00                 	db	0
   884  0011BD  00                 	db	0
   885  0011BE  00                 	db	0
   886  0011BF  00                 	db	0
   887  0011C0  00                 	db	0
   888  0011C1  00                 	db	0
   889  0011C2  00                 	db	0
   890  0011C3  00                 	db	0
   891  0011C4  00                 	db	0
   892  0011C5  00                 	db	0
   893  0011C6  00                 	db	0
   894  0011C7  00                 	db	0
   895  0011C8  00                 	db	0
   896  0011C9  00                 	db	0
   897  0011CA  00                 	db	0
   898  0011CB  00                 	db	0
   899  0011CC  00                 	db	0
   900  0011CD  00                 	db	0
   901  0011CE  00                 	db	0
   902  0011CF  00                 	db	0
   903  0011D0  00                 	db	0
   904  0011D1  00                 	db	0
   905  0011D2  00                 	db	0
   906  0011D3  00                 	db	0
   907  0011D4  00                 	db	0
   908  0011D5  00                 	db	0
   909  0011D6  00                 	db	0
   910  0011D7  00                 	db	0
   911  0011D8  00                 	db	0
   912  0011D9  00                 	db	0
   913  0011DA  00                 	db	0
   914  0011DB  00                 	db	0
   915  0011DC  00                 	db	0
   916  0011DD  00                 	db	0
   917  0011DE  00                 	db	0
   918  0011DF  00                 	db	0
   919  0011E0  00                 	db	0
   920  0011E1  00                 	db	0
   921  0011E2  00                 	db	0
   922  0011E3  00                 	db	0
   923  0011E4  00                 	db	0
   924  0011E5  00                 	db	0
   925  0011E6  00                 	db	0
   926  0011E7  00                 	db	0
   927  0011E8  00                 	db	0
   928  0011E9  00                 	db	0
   929  0011EA  00                 	db	0
   930  0011EB  00                 	db	0
   931  0011EC  00                 	db	0
   932  0011ED  00                 	db	0
   933  0011EE  00                 	db	0
   934  0011EF  00                 	db	0
   935  0011F0  00                 	db	0
   936  0011F1  00                 	db	0
   937  0011F2  00                 	db	0
   938  0011F3  00                 	db	0
   939  0011F4  00                 	db	0
   940  0011F5  00                 	db	0
   941  0011F6  00                 	db	0
   942  0011F7  00                 	db	0
   943  0011F8  00                 	db	0
   944  0011F9  00                 	db	0
   945  0011FA  00                 	db	0
   946  0011FB  00                 	db	0
   947  0011FC  00                 	db	0
   948  0011FD  00                 	db	0
   949  0011FE  00                 	db	0
   950  0011FF  00                 	db	0
   951  001200  00                 	db	0
   952  001201  00                 	db	0
   953  001202  00                 	db	0
   954  001203  00                 	db	0
   955  001204  00                 	db	0
   956  001205  00                 	db	0
   957  001206  00                 	db	0
   958  001207  00                 	db	0
   959  001208  00                 	db	0
   960  001209  00                 	db	0
   961  00120A  00                 	db	0
   962  00120B  00                 	db	0
   963  00120C  00                 	db	0
   964  00120D  00                 	db	0
   965  00120E  00                 	db	0
   966  00120F  00                 	db	0
   967  001210  00                 	db	0
   968  001211  00                 	db	0
   969  001212  00                 	db	0
   970  001213  00                 	db	0
   971  001214  00                 	db	0
   972  001215  00                 	db	0
   973  001216  00                 	db	0
   974  001217  00                 	db	0
   975  001218  00                 	db	0
   976  001219  00                 	db	0
   977  00121A  00                 	db	0
   978  00121B  00                 	db	0
   979  00121C  00                 	db	0
   980  00121D  00                 	db	0
   981  00121E  00                 	db	0
   982  00121F  00                 	db	0
   983  001220  00                 	db	0
   984  001221  00                 	db	0
   985  001222  00                 	db	0
   986  001223  00                 	db	0
   987  001224  00                 	db	0
   988  001225  00                 	db	0
   989  001226  00                 	db	0
   990  001227  00                 	db	0
   991  001228  00                 	db	0
   992  001229  00                 	db	0
   993  00122A  00                 	db	0
   994  00122B  00                 	db	0
   995  00122C  00                 	db	0
   996  00122D  00                 	db	0
   997  00122E  00                 	db	0
   998  00122F  00                 	db	0
   999  001230  00                 	db	0
  1000  001231  00                 	db	0
  1001  001232  00                 	db	0
  1002  001233  00                 	db	0
  1003  001234  00                 	db	0
  1004  001235  00                 	db	0
  1005  001236  00                 	db	0
  1006  001237  00                 	db	0
  1007  001238  00                 	db	0
  1008  001239  00                 	db	0
  1009  00123A  00                 	db	0
  1010  00123B  00                 	db	0
  1011  00123C  00                 	db	0
  1012  00123D  00                 	db	0
  1013  00123E  00                 	db	0
  1014  00123F  00                 	db	0
  1015  001240  00                 	db	0
  1016  001241  00                 	db	0
  1017  001242  00                 	db	0
  1018  001243  00                 	db	0
  1019  001244  00                 	db	0
  1020  001245  00                 	db	0
  1021  001246  00                 	db	0
  1022  001247  00                 	db	0
  1023  001248  00                 	db	0
  1024  001249  00                 	db	0
  1025  00124A  00                 	db	0
  1026  00124B  00                 	db	0
  1027  00124C  00                 	db	0
  1028  00124D  00                 	db	0
  1029  00124E  00                 	db	0
  1030  00124F  00                 	db	0
  1031  001250  00                 	db	0
  1032  001251  00                 	db	0
  1033  001252  00                 	db	0
  1034  001253  00                 	db	0
  1035  001254  00                 	db	0
  1036  001255  00                 	db	0
  1037  001256  00                 	db	0
  1038  001257  00                 	db	0
  1039  001258  00                 	db	0
  1040  001259  00                 	db	0
  1041  00125A  00                 	db	0
  1042  00125B  00                 	db	0
  1043  00125C  00                 	db	0
  1044  00125D  00                 	db	0
  1045  00125E  00                 	db	0
  1046  00125F  00                 	db	0
  1047  001260  00                 	db	0
  1048  001261  00                 	db	0
  1049  001262  00                 	db	0
  1050  001263  00                 	db	0
  1051  001264  00                 	db	0
  1052  001265  00                 	db	0
  1053  001266  00                 	db	0
  1054  001267  00                 	db	0
  1055  001268  00                 	db	0
  1056  001269  00                 	db	0
  1057  00126A  00                 	db	0
  1058  00126B  00                 	db	0
  1059  00126C  00                 	db	0
  1060  00126D  00                 	db	0
  1061  00126E  00                 	db	0
  1062  00126F  00                 	db	0
  1063  001270  00                 	db	0
  1064  001271  00                 	db	0
  1065  001272  00                 	db	0
  1066  001273  00                 	db	0
  1067  001274  00                 	db	0
  1068  001275  00                 	db	0
  1069  001276  00                 	db	0
  1070  001277  00                 	db	0
  1071  001278  00                 	db	0
  1072  001279  00                 	db	0
  1073  00127A  00                 	db	0
  1074  00127B  00                 	db	0
  1075  00127C  00                 	db	0
  1076  00127D  00                 	db	0
  1077  00127E  00                 	db	0
  1078  00127F  00                 	db	0
  1079  001280  00                 	db	0
  1080  001281  00                 	db	0
  1081  001282  00                 	db	0
  1082  001283  00                 	db	0
  1083  001284  00                 	db	0
  1084  001285  00                 	db	0
  1085  001286  00                 	db	0
  1086  001287  00                 	db	0
  1087  001288  00                 	db	0
  1088  001289  00                 	db	0
  1089  00128A  00                 	db	0
  1090  00128B  00                 	db	0
  1091  00128C  00                 	db	0
  1092  00128D  00                 	db	0
  1093  00128E  00                 	db	0
  1094  00128F  00                 	db	0
  1095  001290  00                 	db	0
  1096  001291  00                 	db	0
  1097  001292  00                 	db	0
  1098  001293  00                 	db	0
  1099  001294  00                 	db	0
  1100  001295  00                 	db	0
  1101  001296  00                 	db	0
  1102  001297  00                 	db	0
  1103  001298  00                 	db	0
  1104  001299  00                 	db	0
  1105  00129A  00                 	db	0
  1106  00129B  00                 	db	0
  1107  00129C  00                 	db	0
  1108  00129D  00                 	db	0
  1109  00129E  00                 	db	0
  1110  00129F  00                 	db	0
  1111  0012A0  00                 	db	0
  1112  0012A1  00                 	db	0
  1113  0012A2  00                 	db	0
  1114  0012A3  00                 	db	0
  1115  0012A4  00                 	db	0
  1116  0012A5  00                 	db	0
  1117  0012A6  00                 	db	0
  1118  0012A7  00                 	db	0
  1119  0012A8  00                 	db	0
  1120  0012A9  00                 	db	0
  1121  0012AA  00                 	db	0
  1122  0012AB  00                 	db	0
  1123  0012AC  00                 	db	0
  1124  0012AD  00                 	db	0
  1125  0012AE  00                 	db	0
  1126  0012AF  00                 	db	0
  1127  0012B0  00                 	db	0
  1128  0012B1  00                 	db	0
  1129  0012B2  00                 	db	0
  1130  0012B3  00                 	db	0
  1131  0012B4  00                 	db	0
  1132  0012B5  00                 	db	0
  1133  0012B6  00                 	db	0
  1134  0012B7  00                 	db	0
  1135  0012B8  00                 	db	0
  1136  0012B9  00                 	db	0
  1137  0012BA  00                 	db	0
  1138  0012BB  00                 	db	0
  1139  0012BC  00                 	db	0
  1140  0012BD  00                 	db	0
  1141  0012BE  00                 	db	0
  1142  0012BF  00                 	db	0
  1143  0012C0  00                 	db	0
  1144  0012C1  00                 	db	0
  1145  0012C2  00                 	db	0
  1146  0012C3  00                 	db	0
  1147  0012C4  00                 	db	0
  1148  0012C5  00                 	db	0
  1149  0012C6  00                 	db	0
  1150  0012C7  00                 	db	0
  1151  0012C8  00                 	db	0
  1152  0012C9  00                 	db	0
  1153  0012CA  00                 	db	0
  1154  0012CB  00                 	db	0
  1155  0012CC  00                 	db	0
  1156  0012CD  00                 	db	0
  1157  0012CE  00                 	db	0
  1158  0012CF  00                 	db	0
  1159  0012D0  00                 	db	0
  1160  0012D1  00                 	db	0
  1161  0012D2  00                 	db	0
  1162  0012D3  00                 	db	0
  1163  0012D4  00                 	db	0
  1164  0012D5  00                 	db	0
  1165  0012D6  00                 	db	0
  1166  0012D7  00                 	db	0
  1167  0012D8  00                 	db	0
  1168  0012D9  00                 	db	0
  1169  0012DA  00                 	db	0
  1170  0012DB  00                 	db	0
  1171  0012DC  00                 	db	0
  1172  0012DD  00                 	db	0
  1173  0012DE  00                 	db	0
  1174  0012DF  00                 	db	0
  1175  0012E0  00                 	db	0
  1176  0012E1  00                 	db	0
  1177  0012E2  00                 	db	0
  1178  0012E3  00                 	db	0
  1179  0012E4  00                 	db	0
  1180  0012E5  00                 	db	0
  1181  0012E6  00                 	db	0
  1182  0012E7  00                 	db	0
  1183  0012E8  00                 	db	0
  1184  0012E9  00                 	db	0
  1185  0012EA  00                 	db	0
  1186  0012EB  00                 	db	0
  1187  0012EC  00                 	db	0
  1188  0012ED  00                 	db	0
  1189  0012EE  00                 	db	0
  1190  0012EF  00                 	db	0
  1191  0012F0  00                 	db	0
  1192  0012F1  00                 	db	0
  1193  0012F2  00                 	db	0
  1194  0012F3  00                 	db	0
  1195  0012F4  00                 	db	0
  1196  0012F5  00                 	db	0
  1197  0012F6  00                 	db	0
  1198  0012F7  00                 	db	0
  1199  0012F8  00                 	db	0
  1200  0012F9  00                 	db	0
  1201  0012FA  00                 	db	0
  1202  0012FB  00                 	db	0
  1203  0012FC  00                 	db	0
  1204  0012FD  00                 	db	0
  1205  0012FE  00                 	db	0
  1206  0012FF  00                 	db	0
  1207  001300  00                 	db	0
  1208  001301  00                 	db	0
  1209  001302  00                 	db	0
  1210  001303  00                 	db	0
  1211  001304  00                 	db	0
  1212  001305  00                 	db	0
  1213  001306  00                 	db	0
  1214  001307  00                 	db	0
  1215  001308  00                 	db	0
  1216  001309  00                 	db	0
  1217                           tosu	equ	0xFFF
  1218                           tosh	equ	0xFFE
  1219                           tosl	equ	0xFFD
  1220                           pclath	equ	0xFFA
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           prodh	equ	0xFF4
  1226                           prodl	equ	0xFF3
  1227                           intcon	equ	0xFF2
  1228                           plusw0	equ	0xFEB
  1229                           wreg	equ	0xFE8
  1230                           indf1	equ	0xFE7
  1231                           postinc1	equ	0xFE6
  1232                           plusw1	equ	0xFE3
  1233                           fsr1h	equ	0xFE2
  1234                           fsr1l	equ	0xFE1
  1235                           indf2	equ	0xFDF
  1236                           postinc2	equ	0xFDE
  1237                           postdec2	equ	0xFDD
  1238                           plusw2	equ	0xFDB
  1239                           fsr2h	equ	0xFDA
  1240                           fsr2l	equ	0xFD9
  1241                           status	equ	0xFD8
  1242                           
  1243                           	psect	idataBANK0
  1244  003656                     __pidataBANK0:
  1245                           	opt stack 0
  1246                           
  1247                           ;initializer for ReadGPS_DATE_TIME@F11477
  1248  003656  2D                 	db	45
  1249  003657  2D                 	db	45
  1250  003658  2D                 	db	45
  1251  003659  2D                 	db	45
  1252  00365A  2D                 	db	45
  1253  00365B  2D                 	db	45
  1254  00365C  00                 	db	0
  1255                           
  1256                           ;initializer for ReadGPS_DATE_TIME@F11475
  1257  00365D  2D                 	db	45
  1258  00365E  2D                 	db	45
  1259  00365F  2D                 	db	45
  1260  003660  2D                 	db	45
  1261  003661  2D                 	db	45
  1262  003662  2D                 	db	45
  1263  003663  00                 	db	0
  1264                           
  1265                           ;initializer for _LIGHTS
  1266  003664  83                 	db	131
  1267  003665  0F                 	db	15
  1268  003666  84                 	db	132
  1269  003667  0F                 	db	15
  1270                           
  1271                           ;initializer for _CENTURY
  1272  003668  14                 	db	20
  1273                           tosu	equ	0xFFF
  1274                           tosh	equ	0xFFE
  1275                           tosl	equ	0xFFD
  1276                           pclath	equ	0xFFA
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           intcon	equ	0xFF2
  1284                           plusw0	equ	0xFEB
  1285                           wreg	equ	0xFE8
  1286                           indf1	equ	0xFE7
  1287                           postinc1	equ	0xFE6
  1288                           plusw1	equ	0xFE3
  1289                           fsr1h	equ	0xFE2
  1290                           fsr1l	equ	0xFE1
  1291                           indf2	equ	0xFDF
  1292                           postinc2	equ	0xFDE
  1293                           postdec2	equ	0xFDD
  1294                           plusw2	equ	0xFDB
  1295                           fsr2h	equ	0xFDA
  1296                           fsr2l	equ	0xFD9
  1297                           status	equ	0xFD8
  1298                           
  1299                           	psect	idataBANK1
  1300  00356E                     __pidataBANK1:
  1301                           	opt stack 0
  1302                           
  1303                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
  1304  00356E  001F               	dw	31
  1305  003570  001C               	dw	28
  1306  003572  001F               	dw	31
  1307  003574  001E               	dw	30
  1308  003576  001F               	dw	31
  1309  003578  001E               	dw	30
  1310  00357A  001F               	dw	31
  1311  00357C  001F               	dw	31
  1312  00357E  001E               	dw	30
  1313  003580  001F               	dw	31
  1314  003582  001E               	dw	30
  1315  003584  001F               	dw	31
  1316                           
  1317                           ;initializer for GetDay@t
  1318  003586  0000               	dw	0
  1319  003588  0003               	dw	3
  1320  00358A  0002               	dw	2
  1321  00358C  0005               	dw	5
  1322  00358E  0000               	dw	0
  1323  003590  0003               	dw	3
  1324  003592  0005               	dw	5
  1325  003594  0001               	dw	1
  1326  003596  0004               	dw	4
  1327  003598  0006               	dw	6
  1328  00359A  0002               	dw	2
  1329  00359C  0004               	dw	4
  1330                           tosu	equ	0xFFF
  1331                           tosh	equ	0xFFE
  1332                           tosl	equ	0xFFD
  1333                           pclath	equ	0xFFA
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           intcon	equ	0xFF2
  1341                           plusw0	equ	0xFEB
  1342                           wreg	equ	0xFE8
  1343                           indf1	equ	0xFE7
  1344                           postinc1	equ	0xFE6
  1345                           plusw1	equ	0xFE3
  1346                           fsr1h	equ	0xFE2
  1347                           fsr1l	equ	0xFE1
  1348                           indf2	equ	0xFDF
  1349                           postinc2	equ	0xFDE
  1350                           postdec2	equ	0xFDD
  1351                           plusw2	equ	0xFDB
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356                           	psect	smallconst
  1357  000F00                     __psmallconst:
  1358                           	opt stack 0
  1359  000F00  00                 	db	0
  1360  000F01                     ReadGPSDateTime@F11468:
  1361                           	opt stack 0
  1362  000F01  24                 	db	36
  1363  000F02  47                 	db	71
  1364  000F03  50                 	db	80
  1365  000F04  52                 	db	82
  1366  000F05  4D                 	db	77
  1367  000F06  43                 	db	67
  1368  000F07  2C                 	db	44
  1369  000F08  00                 	db	0
  1370  000F09                     __end_ofReadGPSDateTime@F11468:
  1371                           	opt stack 0
  1372  0000                     _OSCTUNE	set	3805
  1373  0000                     _OSCFRQ	set	3806
  1374  0000                     _OSCEN	set	3804
  1375  0000                     _OSCCON3	set	3802
  1376  0000                     _OSCCON1	set	3800
  1377  0000                     _RC6PPS	set	3837
  1378  0000                     _RX1PPSbits	set	3765
  1379  0000                     _PPSLOCKbits	set	3744
  1380  0000                     _PPSLOCK	set	3744
  1381  0000                     _PIR0bits	set	3786
  1382  0000                     _PIE0bits	set	3778
  1383  0000                     _PIR3bits	set	3789
  1384  0000                     _PLLR	set	30424
  1385  0000                     _ODCONC	set	3871
  1386  0000                     _ODCONB	set	3863
  1387  0000                     _ODCONA	set	3855
  1388  0000                     _WPUC	set	3872
  1389  0000                     _WPUA	set	3856
  1390  0000                     _WPUB	set	3864
  1391  0000                     _WPUE	set	3885
  1392  0000                     _ANSELA	set	3857
  1393  0000                     _ANSELB	set	3865
  1394  0000                     _ANSELC	set	3873
  1395  0000                     _T0CON0bits	set	4053
  1396  0000                     _TMR0L	set	4051
  1397  0000                     _TMR0H	set	4052
  1398  0000                     _T0CON1	set	4054
  1399  0000                     _T0CON0	set	4053
  1400  0000                     _TRISC	set	3978
  1401  0000                     _TRISB	set	3977
  1402  0000                     _TRISA	set	3976
  1403  0000                     _LATC	set	3973
  1404  0000                     _RC1REG	set	3993
  1405  0000                     _RC1STAbits	set	3997
  1406  0000                     _SP1BRGH	set	3996
  1407  0000                     _SP1BRGL	set	3995
  1408  0000                     _TX1STA	set	3998
  1409  0000                     _RC1STA	set	3997
  1410  0000                     _BAUD1CON	set	3999
  1411  0000                     _LATCbits	set	3973
  1412  0000                     _NVMCON2	set	3970
  1413  0000                     _INTCONbits	set	4082
  1414  0000                     _NVMDAT	set	3968
  1415  0000                     _NVMADRH	set	3967
  1416  0000                     _NVMADRL	set	3966
  1417  0000                     _NVMCON1bits	set	3969
  1418  0000                     _LATAbits	set	3971
  1419  0000                     _TRISAbits	set	3976
  1420  0000                     _LATB	set	3972
  1421  0000                     _LATA	set	3971
  1422  0000                     _GIE	set	32663
  1423                           
  1424                           ; #config settings
  1425  000F09  00                 	db	0	; dummy byte at the end
  1426  0000                     tosu	equ	0xFFF
  1427                           tosh	equ	0xFFE
  1428                           tosl	equ	0xFFD
  1429                           pclath	equ	0xFFA
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           prodh	equ	0xFF4
  1435                           prodl	equ	0xFF3
  1436                           intcon	equ	0xFF2
  1437                           plusw0	equ	0xFEB
  1438                           wreg	equ	0xFE8
  1439                           indf1	equ	0xFE7
  1440                           postinc1	equ	0xFE6
  1441                           plusw1	equ	0xFE3
  1442                           fsr1h	equ	0xFE2
  1443                           fsr1l	equ	0xFE1
  1444                           indf2	equ	0xFDF
  1445                           postinc2	equ	0xFDE
  1446                           postdec2	equ	0xFDD
  1447                           plusw2	equ	0xFDB
  1448                           fsr2h	equ	0xFDA
  1449                           fsr2l	equ	0xFD9
  1450                           status	equ	0xFD8
  1451                           
  1452                           	psect	cinit
  1453  002A68                     __pcinit:
  1454                           	opt stack 0
  1455  002A68                     start_initialization:
  1456                           	opt stack 0
  1457  002A68                     __initialization:
  1458                           	opt stack 0
  1459                           
  1460                           ; Initialize objects allocated to BIGRAM (1024 bytes)
  1461                           ; load TBLPTR registers with __pidataBIGRAM
  1462  002A68  0E0A               	movlw	low __pidataBIGRAM
  1463  002A6A  6EF6               	movwf	tblptrl,c
  1464  002A6C  0E0F               	movlw	high __pidataBIGRAM
  1465  002A6E  6EF7               	movwf	tblptrh,c
  1466  002A70  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1467  002A72  6EF8               	movwf	tblptru,c
  1468  002A74  EE02  F0F0         	lfsr	0,__pdataBIGRAM
  1469  002A78  EE14 F000          	lfsr	1,1024
  1470  002A7C                     copy_data0:
  1471  002A7C  0009               	tblrd		*+
  1472  002A7E  CFF5 FFEE          	movff	tablat,postinc0
  1473  002A82  50E5               	movf	postdec1,w,c
  1474  002A84  50E1               	movf	fsr1l,w,c
  1475  002A86  E1FA               	bnz	copy_data0
  1476  002A88  50E2               	movf	fsr1h,w,c
  1477  002A8A  E1F8               	bnz	copy_data0
  1478                           
  1479                           ; Initialize objects allocated to BANK1 (48 bytes)
  1480                           ; load TBLPTR registers with __pidataBANK1
  1481  002A8C  0E6E               	movlw	low __pidataBANK1
  1482  002A8E  6EF6               	movwf	tblptrl,c
  1483  002A90  0E35               	movlw	high __pidataBANK1
  1484  002A92  6EF7               	movwf	tblptrh,c
  1485  002A94  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1486  002A96  6EF8               	movwf	tblptru,c
  1487  002A98  EE01  F044         	lfsr	0,__pdataBANK1
  1488  002A9C  EE10 F030          	lfsr	1,48
  1489  002AA0                     copy_data1:
  1490  002AA0  0009               	tblrd		*+
  1491  002AA2  CFF5 FFEE          	movff	tablat,postinc0
  1492  002AA6  50E5               	movf	postdec1,w,c
  1493  002AA8  50E1               	movf	fsr1l,w,c
  1494  002AAA  E1FA               	bnz	copy_data1
  1495                           
  1496                           ; Initialize objects allocated to BANK0 (19 bytes)
  1497                           ; load TBLPTR registers with __pidataBANK0
  1498  002AAC  0E56               	movlw	low __pidataBANK0
  1499  002AAE  6EF6               	movwf	tblptrl,c
  1500  002AB0  0E36               	movlw	high __pidataBANK0
  1501  002AB2  6EF7               	movwf	tblptrh,c
  1502  002AB4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1503  002AB6  6EF8               	movwf	tblptru,c
  1504  002AB8  EE00  F0EC         	lfsr	0,__pdataBANK0
  1505  002ABC  EE10 F013          	lfsr	1,19
  1506  002AC0                     copy_data2:
  1507  002AC0  0009               	tblrd		*+
  1508  002AC2  CFF5 FFEE          	movff	tablat,postinc0
  1509  002AC6  50E5               	movf	postdec1,w,c
  1510  002AC8  50E1               	movf	fsr1l,w,c
  1511  002ACA  E1FA               	bnz	copy_data2
  1512                           
  1513                           ; Initialize objects allocated to COMRAM (2 bytes)
  1514                           ; load TBLPTR registers with __pidataCOMRAM
  1515  002ACC  0EEA               	movlw	low __pidataCOMRAM
  1516  002ACE  6EF6               	movwf	tblptrl,c
  1517  002AD0  0E36               	movlw	high __pidataCOMRAM
  1518  002AD2  6EF7               	movwf	tblptrh,c
  1519  002AD4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1520  002AD6  6EF8               	movwf	tblptru,c
  1521  002AD8  0009               	tblrd		*+	;fetch initializer
  1522  002ADA  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  1523  002ADE  0009               	tblrd		*+	;fetch initializer
  1524  002AE0  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
  1525                           
  1526                           ; Clear objects allocated to BIGRAM (960 bytes)
  1527  002AE4  EE06  F0F0         	lfsr	0,__pbssBIGRAM
  1528  002AE8  EE13 F0C0          	lfsr	1,960
  1529  002AEC                     clear_0:
  1530  002AEC  6AEE               	clrf	postinc0,c
  1531  002AEE  50E5               	movf	postdec1,w,c
  1532  002AF0  50E1               	movf	fsr1l,w,c
  1533  002AF2  E1FC               	bnz	clear_0
  1534  002AF4  50E2               	movf	fsr1h,w,c
  1535  002AF6  E1FA               	bnz	clear_0
  1536                           
  1537                           ; Clear objects allocated to BANK2 (240 bytes)
  1538  002AF8  EE02  F000         	lfsr	0,__pbssBANK2
  1539  002AFC  0EF0               	movlw	240
  1540  002AFE                     clear_1:
  1541  002AFE  6AEE               	clrf	postinc0,c
  1542  002B00  06E8               	decf	wreg,f,c
  1543  002B02  E1FD               	bnz	clear_1
  1544                           
  1545                           ; Clear objects allocated to BANK1 (68 bytes)
  1546  002B04  EE01  F000         	lfsr	0,__pbssBANK1
  1547  002B08  0E44               	movlw	68
  1548  002B0A                     clear_2:
  1549  002B0A  6AEE               	clrf	postinc0,c
  1550  002B0C  06E8               	decf	wreg,f,c
  1551  002B0E  E1FD               	bnz	clear_2
  1552                           
  1553                           ; Clear objects allocated to BANK0 (58 bytes)
  1554  002B10  EE00  F0B2         	lfsr	0,__pbssBANK0
  1555  002B14  0E3A               	movlw	58
  1556  002B16                     clear_3:
  1557  002B16  6AEE               	clrf	postinc0,c
  1558  002B18  06E8               	decf	wreg,f,c
  1559  002B1A  E1FD               	bnz	clear_3
  1560                           
  1561                           ; Clear objects allocated to COMRAM (17 bytes)
  1562  002B1C  EE00  F04C         	lfsr	0,__pbssCOMRAM
  1563  002B20  0E11               	movlw	17
  1564  002B22                     clear_4:
  1565  002B22  6AEE               	clrf	postinc0,c
  1566  002B24  06E8               	decf	wreg,f,c
  1567  002B26  E1FD               	bnz	clear_4
  1568  002B28                     end_of_initialization:
  1569                           	opt stack 0
  1570  002B28                     __end_of__initialization:
  1571                           	opt stack 0
  1572  002B28  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1573  002B2A  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1574  002B2C  0100               	movlb	0
  1575  002B2E  EFA2  F00E         	goto	_main	;jump to C main() function
  1576                           tosu	equ	0xFFF
  1577                           tosh	equ	0xFFE
  1578                           tosl	equ	0xFFD
  1579                           pclath	equ	0xFFA
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           prodh	equ	0xFF4
  1585                           prodl	equ	0xFF3
  1586                           intcon	equ	0xFF2
  1587                           postinc0	equ	0xFEE
  1588                           plusw0	equ	0xFEB
  1589                           wreg	equ	0xFE8
  1590                           indf1	equ	0xFE7
  1591                           postinc1	equ	0xFE6
  1592                           postdec1	equ	0xFE5
  1593                           plusw1	equ	0xFE3
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           indf2	equ	0xFDF
  1597                           postinc2	equ	0xFDE
  1598                           postdec2	equ	0xFDD
  1599                           plusw2	equ	0xFDB
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604                           	psect	bssCOMRAM
  1605  00004C                     __pbssCOMRAM:
  1606                           	opt stack 0
  1607  00004C                     _timer0ReloadVal16bit:
  1608                           	opt stack 0
  1609  00004C                     	ds	2
  1610  00004E                     _FLAGS_1:
  1611                           	opt stack 0
  1612  00004E                     	ds	1
  1613  00004F                     _SECONDS_TO_ADJUST_PART:
  1614                           	opt stack 0
  1615  00004F                     	ds	1
  1616  000050                     _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER:
  1617                           	opt stack 0
  1618  000050                     	ds	1
  1619  000051                     _NORMAL_AUDIO_STATE_ON_OFF_COUNTER:
  1620                           	opt stack 0
  1621  000051                     	ds	1
  1622  000052                     _BLINK_STATE_ON_OFF_COUNTER:
  1623                           	opt stack 0
  1624  000052                     	ds	1
  1625  000053                     _CENTI_SECOND_COUNT:
  1626                           	opt stack 0
  1627  000053                     	ds	1
  1628  000054                     _STATE_SECONDS:
  1629                           	opt stack 0
  1630  000054                     	ds	1
  1631  000055                     _SPECIAL_AUDIO_LAST_X_SECONDS:
  1632                           	opt stack 0
  1633  000055                     	ds	1
  1634  000056                     _AUDIO_SPECIAL_OFF_TIME:
  1635                           	opt stack 0
  1636  000056                     	ds	1
  1637  000057                     _AUDIO_SPECIAL_ON_TIME:
  1638                           	opt stack 0
  1639  000057                     	ds	1
  1640  000058                     _AUDIO_NORMAL_OFF_TIME:
  1641                           	opt stack 0
  1642  000058                     	ds	1
  1643  000059                     _AUDIO_NORMAL_ON_TIME:
  1644                           	opt stack 0
  1645  000059                     	ds	1
  1646  00005A                     _BLINK_LAST_X_SECONDS:
  1647                           	opt stack 0
  1648  00005A                     	ds	1
  1649  00005B                     _BLINK_OFF_TIME:
  1650                           	opt stack 0
  1651  00005B                     	ds	1
  1652  00005C                     _BLINK_ON_TIME:
  1653                           	opt stack 0
  1654  00005C                     	ds	1
  1655                           tosu	equ	0xFFF
  1656                           tosh	equ	0xFFE
  1657                           tosl	equ	0xFFD
  1658                           pclath	equ	0xFFA
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           prodh	equ	0xFF4
  1664                           prodl	equ	0xFF3
  1665                           intcon	equ	0xFF2
  1666                           postinc0	equ	0xFEE
  1667                           plusw0	equ	0xFEB
  1668                           wreg	equ	0xFE8
  1669                           indf1	equ	0xFE7
  1670                           postinc1	equ	0xFE6
  1671                           postdec1	equ	0xFE5
  1672                           plusw1	equ	0xFE3
  1673                           fsr1h	equ	0xFE2
  1674                           fsr1l	equ	0xFE1
  1675                           indf2	equ	0xFDF
  1676                           postinc2	equ	0xFDE
  1677                           postdec2	equ	0xFDD
  1678                           plusw2	equ	0xFDB
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683                           	psect	dataCOMRAM
  1684  00005D                     __pdataCOMRAM:
  1685                           	opt stack 0
  1686  00005D                     _NEXT_EVENT:
  1687                           	opt stack 0
  1688  00005D                     	ds	1
  1689  00005E                     _PRESENT_EVENT:
  1690                           	opt stack 0
  1691  00005E                     	ds	1
  1692                           tosu	equ	0xFFF
  1693                           tosh	equ	0xFFE
  1694                           tosl	equ	0xFFD
  1695                           pclath	equ	0xFFA
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           postinc0	equ	0xFEE
  1704                           plusw0	equ	0xFEB
  1705                           wreg	equ	0xFE8
  1706                           indf1	equ	0xFE7
  1707                           postinc1	equ	0xFE6
  1708                           postdec1	equ	0xFE5
  1709                           plusw1	equ	0xFE3
  1710                           fsr1h	equ	0xFE2
  1711                           fsr1l	equ	0xFE1
  1712                           indf2	equ	0xFDF
  1713                           postinc2	equ	0xFDE
  1714                           postdec2	equ	0xFDD
  1715                           plusw2	equ	0xFDB
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720                           	psect	bssBANK0
  1721  0000B2                     __pbssBANK0:
  1722                           	opt stack 0
  1723  0000B2                     _GPS_DATE_TIME:
  1724                           	opt stack 0
  1725  0000B2                     	ds	11
  1726  0000BD                     _DATE_TIME:
  1727                           	opt stack 0
  1728  0000BD                     	ds	11
  1729  0000C8                     _TIME_AT_LAST_GPS_SYNC:
  1730                           	opt stack 0
  1731  0000C8                     	ds	4
  1732  0000CC                     _TIME_WHEN_GPS_IS_SWITCHED_ON:
  1733                           	opt stack 0
  1734  0000CC                     	ds	4
  1735  0000D0                     _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME:
  1736                           	opt stack 0
  1737  0000D0                     	ds	4
  1738  0000D4                     _GPS_SYNC_EVERY_x_SECONDS:
  1739                           	opt stack 0
  1740  0000D4                     	ds	4
  1741  0000D8                     _DAY_LIGHT_END:
  1742                           	opt stack 0
  1743  0000D8                     	ds	4
  1744  0000DC                     _DAY_LIGHT_START:
  1745                           	opt stack 0
  1746  0000DC                     	ds	4
  1747  0000E0                     _TMR0_InterruptHandler:
  1748                           	opt stack 0
  1749  0000E0                     	ds	2
  1750  0000E2                     _SECONDS_TO_ADJUST:
  1751                           	opt stack 0
  1752  0000E2                     	ds	2
  1753  0000E4                     _TIME_ZONE:
  1754                           	opt stack 0
  1755  0000E4                     	ds	2
  1756  0000E6                     _FLAGS_0:
  1757                           	opt stack 0
  1758  0000E6                     	ds	1
  1759  0000E7                     _NO_OF_TIMES_GPS_FAILED:
  1760                           	opt stack 0
  1761  0000E7                     	ds	1
  1762  0000E8                     _STATE_SECONDS_REMAINING:
  1763                           	opt stack 0
  1764  0000E8                     	ds	1
  1765  0000E9                     _NEXT_STATE:
  1766                           	opt stack 0
  1767  0000E9                     	ds	1
  1768  0000EA                     _PRESENT_STATE:
  1769                           	opt stack 0
  1770  0000EA                     	ds	1
  1771  0000EB                     _GPS_SYNC_AT_START:
  1772                           	opt stack 0
  1773  0000EB                     	ds	1
  1774                           tosu	equ	0xFFF
  1775                           tosh	equ	0xFFE
  1776                           tosl	equ	0xFFD
  1777                           pclath	equ	0xFFA
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           plusw0	equ	0xFEB
  1787                           wreg	equ	0xFE8
  1788                           indf1	equ	0xFE7
  1789                           postinc1	equ	0xFE6
  1790                           postdec1	equ	0xFE5
  1791                           plusw1	equ	0xFE3
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           indf2	equ	0xFDF
  1795                           postinc2	equ	0xFDE
  1796                           postdec2	equ	0xFDD
  1797                           plusw2	equ	0xFDB
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8
  1801                           
  1802                           	psect	dataBANK0
  1803  0000EC                     __pdataBANK0:
  1804                           	opt stack 0
  1805  0000EC                     ReadGPS_DATE_TIME@F11477:
  1806                           	opt stack 0
  1807  0000EC                     	ds	7
  1808  0000F3                     ReadGPS_DATE_TIME@F11475:
  1809                           	opt stack 0
  1810  0000F3                     	ds	7
  1811  0000FA                     _LIGHTS:
  1812                           	opt stack 0
  1813  0000FA                     	ds	4
  1814  0000FE                     _CENTURY:
  1815                           	opt stack 0
  1816  0000FE                     	ds	1
  1817                           tosu	equ	0xFFF
  1818                           tosh	equ	0xFFE
  1819                           tosl	equ	0xFFD
  1820                           pclath	equ	0xFFA
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           postinc0	equ	0xFEE
  1829                           plusw0	equ	0xFEB
  1830                           wreg	equ	0xFE8
  1831                           indf1	equ	0xFE7
  1832                           postinc1	equ	0xFE6
  1833                           postdec1	equ	0xFE5
  1834                           plusw1	equ	0xFE3
  1835                           fsr1h	equ	0xFE2
  1836                           fsr1l	equ	0xFE1
  1837                           indf2	equ	0xFDF
  1838                           postinc2	equ	0xFDE
  1839                           postdec2	equ	0xFDD
  1840                           plusw2	equ	0xFDB
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845                           	psect	bssBANK1
  1846  000100                     __pbssBANK1:
  1847                           	opt stack 0
  1848  000100                     _CYCLES:
  1849                           	opt stack 0
  1850  000100                     	ds	68
  1851                           tosu	equ	0xFFF
  1852                           tosh	equ	0xFFE
  1853                           tosl	equ	0xFFD
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           postinc0	equ	0xFEE
  1863                           plusw0	equ	0xFEB
  1864                           wreg	equ	0xFE8
  1865                           indf1	equ	0xFE7
  1866                           postinc1	equ	0xFE6
  1867                           postdec1	equ	0xFE5
  1868                           plusw1	equ	0xFE3
  1869                           fsr1h	equ	0xFE2
  1870                           fsr1l	equ	0xFE1
  1871                           indf2	equ	0xFDF
  1872                           postinc2	equ	0xFDE
  1873                           postdec2	equ	0xFDD
  1874                           plusw2	equ	0xFDB
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879                           	psect	dataBANK1
  1880  000144                     __pdataBANK1:
  1881                           	opt stack 0
  1882  000144                     projMain@NO_OF_DAYS_IN_A_MONTH:
  1883                           	opt stack 0
  1884  000144                     	ds	24
  1885  00015C                     GetDay@t:
  1886                           	opt stack 0
  1887  00015C                     	ds	24
  1888                           tosu	equ	0xFFF
  1889                           tosh	equ	0xFFE
  1890                           tosl	equ	0xFFD
  1891                           pclath	equ	0xFFA
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           prodh	equ	0xFF4
  1897                           prodl	equ	0xFF3
  1898                           intcon	equ	0xFF2
  1899                           postinc0	equ	0xFEE
  1900                           plusw0	equ	0xFEB
  1901                           wreg	equ	0xFE8
  1902                           indf1	equ	0xFE7
  1903                           postinc1	equ	0xFE6
  1904                           postdec1	equ	0xFE5
  1905                           plusw1	equ	0xFE3
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           postdec2	equ	0xFDD
  1911                           plusw2	equ	0xFDB
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916                           	psect	bssBANK2
  1917  000200                     __pbssBANK2:
  1918                           	opt stack 0
  1919  000200                     _EVENTS:
  1920                           	opt stack 0
  1921  000200                     	ds	240
  1922                           tosu	equ	0xFFF
  1923                           tosh	equ	0xFFE
  1924                           tosl	equ	0xFFD
  1925                           pclath	equ	0xFFA
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           prodh	equ	0xFF4
  1931                           prodl	equ	0xFF3
  1932                           intcon	equ	0xFF2
  1933                           postinc0	equ	0xFEE
  1934                           plusw0	equ	0xFEB
  1935                           wreg	equ	0xFE8
  1936                           indf1	equ	0xFE7
  1937                           postinc1	equ	0xFE6
  1938                           postdec1	equ	0xFE5
  1939                           plusw1	equ	0xFE3
  1940                           fsr1h	equ	0xFE2
  1941                           fsr1l	equ	0xFE1
  1942                           indf2	equ	0xFDF
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           plusw2	equ	0xFDB
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950                           	psect	bssBIGRAM
  1951  0006F0                     __pbssBIGRAM:
  1952                           	opt stack 0
  1953  0006F0                     _STATES:
  1954                           	opt stack 0
  1955  0006F0                     	ds	960
  1956                           tosu	equ	0xFFF
  1957                           tosh	equ	0xFFE
  1958                           tosl	equ	0xFFD
  1959                           pclath	equ	0xFFA
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           intcon	equ	0xFF2
  1967                           postinc0	equ	0xFEE
  1968                           plusw0	equ	0xFEB
  1969                           wreg	equ	0xFE8
  1970                           indf1	equ	0xFE7
  1971                           postinc1	equ	0xFE6
  1972                           postdec1	equ	0xFE5
  1973                           plusw1	equ	0xFE3
  1974                           fsr1h	equ	0xFE2
  1975                           fsr1l	equ	0xFE1
  1976                           indf2	equ	0xFDF
  1977                           postinc2	equ	0xFDE
  1978                           postdec2	equ	0xFDD
  1979                           plusw2	equ	0xFDB
  1980                           fsr2h	equ	0xFDA
  1981                           fsr2l	equ	0xFD9
  1982                           status	equ	0xFD8
  1983                           
  1984                           	psect	dataBIGRAM
  1985  0002F0                     __pdataBIGRAM:
  1986                           	opt stack 0
  1987  0002F0                     _EE_Settings:
  1988                           	opt stack 0
  1989  0002F0                     	ds	1024
  1990                           tosu	equ	0xFFF
  1991                           tosh	equ	0xFFE
  1992                           tosl	equ	0xFFD
  1993                           pclath	equ	0xFFA
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           prodh	equ	0xFF4
  1999                           prodl	equ	0xFF3
  2000                           intcon	equ	0xFF2
  2001                           postinc0	equ	0xFEE
  2002                           plusw0	equ	0xFEB
  2003                           wreg	equ	0xFE8
  2004                           indf1	equ	0xFE7
  2005                           postinc1	equ	0xFE6
  2006                           postdec1	equ	0xFE5
  2007                           plusw1	equ	0xFE3
  2008                           fsr1h	equ	0xFE2
  2009                           fsr1l	equ	0xFE1
  2010                           indf2	equ	0xFDF
  2011                           postinc2	equ	0xFDE
  2012                           postdec2	equ	0xFDD
  2013                           plusw2	equ	0xFDB
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018                           	psect	cstackBANK0
  2019  000060                     __pcstackBANK0:
  2020                           	opt stack 0
  2021  000060                     ??_Lcd_CharCP:
  2022  000060                     ??_Lcd_Delay5500us:
  2023  000060                     ??_Lcd_Command:
  2024  000060                     ??_TestGPSStartCondition:
  2025  000060                     ?___wmul:
  2026                           	opt stack 0
  2027  000060                     ?___awdiv:
  2028                           	opt stack 0
  2029  000060                     ?___lwmod:
  2030                           	opt stack 0
  2031  000060                     ?___lmul:
  2032                           	opt stack 0
  2033  000060                     ?___aldiv:
  2034                           	opt stack 0
  2035  000060                     ReadGPSDateTime@Date:
  2036                           	opt stack 0
  2037  000060                     ValidateDateTime@Date:
  2038                           	opt stack 0
  2039  000060                     PIN_MANAGER_Initialize@state:
  2040                           	opt stack 0
  2041  000060                     ReadEeprom@Address:
  2042                           	opt stack 0
  2043  000060                     WriteEeprom@Add:
  2044                           	opt stack 0
  2045  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  2046                           	opt stack 0
  2047  000060                     ___wmul@multiplier:
  2048                           	opt stack 0
  2049  000060                     ___awdiv@dividend:
  2050                           	opt stack 0
  2051  000060                     ___lwmod@dividend:
  2052                           	opt stack 0
  2053  000060                     VerifyForGPSOnTIme@TimeDiff:
  2054                           	opt stack 0
  2055  000060                     ___lmul@multiplier:
  2056                           	opt stack 0
  2057  000060                     ___aldiv@dividend:
  2058                           	opt stack 0
  2059                           
  2060                           ; 4 bytes @ 0x0
  2061  000060                     	ds	1
  2062  000061                     ReadGPSDateTime@Time:
  2063                           	opt stack 0
  2064  000061                     ValidateDateTime@Time:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x1
  2068  000061                     	ds	1
  2069  000062                     ??_TMR0_Initialize:
  2070  000062                     ??_ReadGPSDateTime:
  2071  000062                     ??_ValidateDateTime:
  2072  000062                     Lcd_CharCP@c:
  2073                           	opt stack 0
  2074  000062                     Lcd_Command@command:
  2075                           	opt stack 0
  2076  000062                     WriteEeprom@Data:
  2077                           	opt stack 0
  2078  000062                     ___wmul@multiplicand:
  2079                           	opt stack 0
  2080  000062                     ___awdiv@divisor:
  2081                           	opt stack 0
  2082  000062                     ___lwmod@divisor:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x2
  2086  000062                     	ds	1
  2087  000063                     ValidateDateTime@Item:
  2088                           	opt stack 0
  2089  000063                     Lcd_Init@data:
  2090                           	opt stack 0
  2091  000063                     WriteEeprom@Address:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x3
  2095  000063                     	ds	1
  2096  000064                     ___awdiv@counter:
  2097                           	opt stack 0
  2098  000064                     ___lwmod@counter:
  2099                           	opt stack 0
  2100  000064                     ___wmul@product:
  2101                           	opt stack 0
  2102  000064                     ___lmul@multiplicand:
  2103                           	opt stack 0
  2104  000064                     ___aldiv@divisor:
  2105                           	opt stack 0
  2106                           
  2107                           ; 4 bytes @ 0x4
  2108  000064                     	ds	1
  2109  000065                     ?_IncreaseByAYear:
  2110                           	opt stack 0
  2111  000065                     ?_DecreaseByAYear:
  2112                           	opt stack 0
  2113  000065                     ___awdiv@sign:
  2114                           	opt stack 0
  2115  000065                     IncreaseByAYear@dt:
  2116                           	opt stack 0
  2117  000065                     DecreaseByAYear@dt:
  2118                           	opt stack 0
  2119                           
  2120                           ; 11 bytes @ 0x5
  2121  000065                     	ds	1
  2122  000066                     ??_LoadCyclesFromEeprom:
  2123  000066                     ??_GetEventNumber:
  2124  000066                     ___awdiv@quotient:
  2125                           	opt stack 0
  2126  000066                     LoadSettingsFromEeprom@Temp32:
  2127                           	opt stack 0
  2128  000066                     ReadGPSDateTime@StartCode:
  2129                           	opt stack 0
  2130                           
  2131                           ; 8 bytes @ 0x6
  2132  000066                     	ds	2
  2133  000068                     ??_LoadStatesFromEeprom:
  2134  000068                     ?___awmod:
  2135                           	opt stack 0
  2136  000068                     ___aldiv@counter:
  2137                           	opt stack 0
  2138  000068                     ___awmod@dividend:
  2139                           	opt stack 0
  2140  000068                     ___lmul@product:
  2141                           	opt stack 0
  2142                           
  2143                           ; 4 bytes @ 0x8
  2144  000068                     	ds	1
  2145  000069                     ___aldiv@sign:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x9
  2149  000069                     	ds	1
  2150  00006A                     LoadSettingsFromEeprom@Temp16:
  2151                           	opt stack 0
  2152  00006A                     ___awmod@divisor:
  2153                           	opt stack 0
  2154  00006A                     ___aldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0xA
  2158  00006A                     	ds	1
  2159  00006B                     LoadStatesFromEeprom@AddAudioNormal:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0xB
  2163  00006B                     	ds	1
  2164  00006C                     ??_LoadEventsFromEeprom:
  2165  00006C                     ?_TimeTextToSecond:
  2166                           	opt stack 0
  2167  00006C                     TimeTextToSecond@Time:
  2168                           	opt stack 0
  2169  00006C                     ___awmod@counter:
  2170                           	opt stack 0
  2171  00006C                     LoadSettingsFromEeprom@Address:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0xC
  2175  00006C                     	ds	1
  2176  00006D                     ___awmod@sign:
  2177                           	opt stack 0
  2178  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
  2179                           	opt stack 0
  2180  00006D                     LoadCyclesFromEeprom@Address:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0xD
  2184  00006D                     	ds	1
  2185  00006E                     GetDay@Date:
  2186                           	opt stack 0
  2187  00006E                     Lcd_WriteChar@x:
  2188                           	opt stack 0
  2189  00006E                     ReadGPSDateTime@i:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0xE
  2193  00006E                     	ds	1
  2194  00006F                     ??_GetDay:
  2195  00006F                     Lcd_WriteChar@c:
  2196                           	opt stack 0
  2197  00006F                     LoadStatesFromEeprom@TempNormalAdd:
  2198                           	opt stack 0
  2199  00006F                     LoadCyclesFromEeprom@j:
  2200                           	opt stack 0
  2201  00006F                     GetEventNumber@i:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0xF
  2205  00006F                     	ds	1
  2206  000070                     ??_TimeTextToSecond:
  2207  000070                     ?_IncreaseByAMonth:
  2208                           	opt stack 0
  2209  000070                     ?_DecreaseByAMonth:
  2210                           	opt stack 0
  2211  000070                     ReadGPSDateTime@Commas:
  2212                           	opt stack 0
  2213  000070                     Lcd_WriteChar@y:
  2214                           	opt stack 0
  2215  000070                     IncreaseByAMonth@dt:
  2216                           	opt stack 0
  2217  000070                     DecreaseByAMonth@dt:
  2218                           	opt stack 0
  2219                           
  2220                           ; 11 bytes @ 0x10
  2221  000070                     	ds	1
  2222  000071                     ReadGPSDateTime@TempChar:
  2223                           	opt stack 0
  2224  000071                     Lcd_WriteChar@data:
  2225                           	opt stack 0
  2226  000071                     LoadStatesFromEeprom@TempSpecialAdd:
  2227                           	opt stack 0
  2228  000071                     LoadCyclesFromEeprom@i:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x11
  2232  000071                     	ds	1
  2233  000072                     ReadGPSDateTime@Pos:
  2234                           	opt stack 0
  2235  000072                     WriteLongInt@x:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x12
  2239  000072                     	ds	1
  2240  000073                     LoadStatesFromEeprom@AudAddInc:
  2241                           	opt stack 0
  2242  000073                     LoadCyclesFromEeprom@i_1467:
  2243                           	opt stack 0
  2244  000073                     WriteLongInt@Val:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0x13
  2248  000073                     	ds	1
  2249  000074                     LoadEventsFromEeprom@i:
  2250                           	opt stack 0
  2251  000074                     LoadStatesFromEeprom@j:
  2252                           	opt stack 0
  2253                           
  2254                           ; 2 bytes @ 0x14
  2255  000074                     	ds	1
  2256  000075                     GetDay@d:
  2257                           	opt stack 0
  2258                           
  2259                           ; 1 bytes @ 0x15
  2260  000075                     	ds	1
  2261  000076                     GetDay@m:
  2262                           	opt stack 0
  2263  000076                     LoadEventsFromEeprom@Address:
  2264                           	opt stack 0
  2265  000076                     LoadStatesFromEeprom@j_1402:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x16
  2269  000076                     	ds	1
  2270  000077                     WriteLongInt@size:
  2271                           	opt stack 0
  2272  000077                     GetDay@y:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x17
  2276  000077                     	ds	1
  2277  000078                     WriteLongInt@Sign:
  2278                           	opt stack 0
  2279  000078                     LoadEventsFromEeprom@Temp16:
  2280                           	opt stack 0
  2281  000078                     LoadStatesFromEeprom@AddStates:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x18
  2285  000078                     	ds	1
  2286  000079                     WriteLongInt@POS:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x19
  2290  000079                     	ds	1
  2291  00007A                     WriteLongInt@y:
  2292                           	opt stack 0
  2293  00007A                     LoadStatesFromEeprom@i:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x1A
  2297  00007A                     	ds	1
  2298  00007B                     ?_IncreaseByADay:
  2299                           	opt stack 0
  2300  00007B                     ?_DecreaseByADay:
  2301                           	opt stack 0
  2302  00007B                     IncreaseByADay@dt:
  2303                           	opt stack 0
  2304  00007B                     DecreaseByADay@dt:
  2305                           	opt stack 0
  2306                           
  2307                           ; 11 bytes @ 0x1B
  2308  00007B                     	ds	1
  2309  00007C                     
  2310                           ; 1 bytes @ 0x1C
  2311  00007C                     	ds	4
  2312  000080                     TimeTextToSecond@Second:
  2313                           	opt stack 0
  2314                           
  2315                           ; 4 bytes @ 0x20
  2316  000080                     	ds	6
  2317  000086                     ??_IncreaseByADay:
  2318  000086                     ??_DecreaseByADay:
  2319                           
  2320                           ; 1 bytes @ 0x26
  2321  000086                     	ds	1
  2322  000087                     DecreaseByADay@MonthDays:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x27
  2326  000087                     	ds	1
  2327  000088                     IncreaseByADay@MonthDays:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x28
  2331  000088                     	ds	1
  2332  000089                     ?_AdjustDayLightSaving:
  2333                           	opt stack 0
  2334  000089                     AdjustDayLightSaving@dt:
  2335                           	opt stack 0
  2336                           
  2337                           ; 11 bytes @ 0x29
  2338  000089                     	ds	11
  2339  000094                     AdjustDayLightSaving@Start:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x34
  2343  000094                     	ds	2
  2344  000096                     AdjustDayLightSaving@End:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x36
  2348  000096                     	ds	2
  2349  000098                     AdjustDayLightSaving@Present:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x38
  2353  000098                     	ds	2
  2354  00009A                     ??_ReadGPS_DATE_TIME:
  2355                           
  2356                           ; 1 bytes @ 0x3A
  2357  00009A                     	ds	4
  2358  00009E                     ReadGPS_DATE_TIME@Time:
  2359                           	opt stack 0
  2360                           
  2361                           ; 7 bytes @ 0x3E
  2362  00009E                     	ds	7
  2363  0000A5                     ReadGPS_DATE_TIME@Date:
  2364                           	opt stack 0
  2365                           
  2366                           ; 7 bytes @ 0x45
  2367  0000A5                     	ds	7
  2368  0000AC                     ReadGPS_DATE_TIME@IsValidGPS:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x4C
  2372  0000AC                     	ds	1
  2373  0000AD                     ReadGPS_DATE_TIME@TempItr:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x4D
  2377  0000AD                     	ds	1
  2378  0000AE                     ??_main:
  2379                           
  2380                           ; 1 bytes @ 0x4E
  2381  0000AE                     	ds	2
  2382  0000B0                     main@i:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x50
  2386  0000B0                     	ds	2
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           pclath	equ	0xFFA
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           postinc0	equ	0xFEE
  2399                           plusw0	equ	0xFEB
  2400                           wreg	equ	0xFE8
  2401                           indf1	equ	0xFE7
  2402                           postinc1	equ	0xFE6
  2403                           postdec1	equ	0xFE5
  2404                           plusw1	equ	0xFE3
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           indf2	equ	0xFDF
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415                           	psect	cstackCOMRAM
  2416  000001                     __pcstackCOMRAM:
  2417                           	opt stack 0
  2418  000001                     ?i2___lwmod:
  2419                           	opt stack 0
  2420  000001                     ?___ftpack:
  2421                           	opt stack 0
  2422  000001                     ?___almod:
  2423                           	opt stack 0
  2424  000001                     i2___lwmod@dividend:
  2425                           	opt stack 0
  2426  000001                     ___ftpack@arg:
  2427                           	opt stack 0
  2428  000001                     ___almod@dividend:
  2429                           	opt stack 0
  2430                           
  2431                           ; 4 bytes @ 0x0
  2432  000001                     	ds	2
  2433  000003                     i2___lwmod@divisor:
  2434                           	opt stack 0
  2435                           
  2436                           ; 2 bytes @ 0x2
  2437  000003                     	ds	1
  2438  000004                     ___ftpack@exp:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x3
  2442  000004                     	ds	1
  2443  000005                     ___ftpack@sign:
  2444                           	opt stack 0
  2445  000005                     i2___lwmod@counter:
  2446                           	opt stack 0
  2447  000005                     ___almod@divisor:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x4
  2451  000005                     	ds	1
  2452  000006                     ??___ftpack:
  2453  000006                     ?i2_IncreaseByAYear:
  2454                           	opt stack 0
  2455  000006                     i2IncreaseByAYear@dt:
  2456                           	opt stack 0
  2457                           
  2458                           ; 11 bytes @ 0x5
  2459  000006                     	ds	3
  2460  000009                     ?___lbtoft:
  2461                           	opt stack 0
  2462  000009                     ___almod@counter:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x8
  2466  000009                     	ds	1
  2467  00000A                     ___almod@sign:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x9
  2471  00000A                     	ds	2
  2472  00000C                     ___lbtoft@c:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0xB
  2476  00000C                     	ds	1
  2477  00000D                     ?___ftmul:
  2478                           	opt stack 0
  2479  00000D                     ___ftmul@f1:
  2480                           	opt stack 0
  2481                           
  2482                           ; 3 bytes @ 0xC
  2483  00000D                     	ds	3
  2484  000010                     ___ftmul@f2:
  2485                           	opt stack 0
  2486                           
  2487                           ; 3 bytes @ 0xF
  2488  000010                     	ds	1
  2489  000011                     ?i2_IncreaseByAMonth:
  2490                           	opt stack 0
  2491  000011                     i2IncreaseByAMonth@dt:
  2492                           	opt stack 0
  2493                           
  2494                           ; 11 bytes @ 0x10
  2495  000011                     	ds	2
  2496  000013                     ??___ftmul:
  2497                           
  2498                           ; 1 bytes @ 0x12
  2499  000013                     	ds	3
  2500  000016                     ___ftmul@exp:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x15
  2504  000016                     	ds	1
  2505  000017                     ___ftmul@f3_as_product:
  2506                           	opt stack 0
  2507                           
  2508                           ; 3 bytes @ 0x16
  2509  000017                     	ds	3
  2510  00001A                     ___ftmul@cntr:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x19
  2514  00001A                     	ds	1
  2515  00001B                     ___ftmul@sign:
  2516                           	opt stack 0
  2517                           
  2518                           ; 1 bytes @ 0x1A
  2519  00001B                     	ds	1
  2520  00001C                     ?___fttol:
  2521                           	opt stack 0
  2522  00001C                     ?i2_IncreaseByADay:
  2523                           	opt stack 0
  2524  00001C                     ___fttol@f1:
  2525                           	opt stack 0
  2526  00001C                     i2IncreaseByADay@dt:
  2527                           	opt stack 0
  2528                           
  2529                           ; 11 bytes @ 0x1B
  2530  00001C                     	ds	4
  2531  000020                     ??___fttol:
  2532                           
  2533                           ; 1 bytes @ 0x1F
  2534  000020                     	ds	5
  2535  000025                     ___fttol@sign1:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x24
  2539  000025                     	ds	1
  2540  000026                     ___fttol@lval:
  2541                           	opt stack 0
  2542                           
  2543                           ; 4 bytes @ 0x25
  2544  000026                     	ds	1
  2545  000027                     ??i2_IncreaseByADay:
  2546                           
  2547                           ; 1 bytes @ 0x26
  2548  000027                     	ds	2
  2549  000029                     i2IncreaseByADay@MonthDays:
  2550                           	opt stack 0
  2551                           
  2552                           ; 1 bytes @ 0x28
  2553  000029                     	ds	1
  2554  00002A                     ?_IncreaseByASecond:
  2555                           	opt stack 0
  2556  00002A                     ___fttol@exp1:
  2557                           	opt stack 0
  2558  00002A                     IncreaseByASecond@dt:
  2559                           	opt stack 0
  2560                           
  2561                           ; 11 bytes @ 0x29
  2562  00002A                     	ds	11
  2563  000035                     ??_Timer0_10ms:
  2564  000035                     
  2565                           ; 1 bytes @ 0x34
  2566  000035                     	ds	5
  2567  00003A                     Timer0_10ms@ThisCycle_2914:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x39
  2571  00003A                     	ds	1
  2572  00003B                     Timer0_10ms@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x3A
  2576  00003B                     	ds	1
  2577  00003C                     Timer0_10ms@OutForThePorts:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x3B
  2581  00003C                     	ds	2
  2582  00003E                     Timer0_10ms@ThisCycle:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x3D
  2586  00003E                     	ds	1
  2587  00003F                     Timer0_10ms@i_2909:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x3E
  2591  00003F                     	ds	1
  2592  000040                     Timer0_10ms@i_2910:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x3F
  2596  000040                     	ds	1
  2597  000041                     Timer0_10ms@i_2911:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x40
  2601  000041                     	ds	1
  2602  000042                     ??_INTERRUPT_InterruptManager:
  2603                           
  2604                           ; 1 bytes @ 0x41
  2605  000042                     	ds	10
  2606                           tosu	equ	0xFFF
  2607                           tosh	equ	0xFFE
  2608                           tosl	equ	0xFFD
  2609                           pclath	equ	0xFFA
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           postinc0	equ	0xFEE
  2618                           plusw0	equ	0xFEB
  2619                           wreg	equ	0xFE8
  2620                           indf1	equ	0xFE7
  2621                           postinc1	equ	0xFE6
  2622                           postdec1	equ	0xFE5
  2623                           plusw1	equ	0xFE3
  2624                           fsr1h	equ	0xFE2
  2625                           fsr1l	equ	0xFE1
  2626                           indf2	equ	0xFDF
  2627                           postinc2	equ	0xFDE
  2628                           postdec2	equ	0xFDD
  2629                           plusw2	equ	0xFDB
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;;
  2635 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2636 ;;
  2637 ;; *************** function _main *****************
  2638 ;; Defined at:
  2639 ;;		line 53 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  i               2   80[BANK0 ] short 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 3F/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2657 ;;Total ram usage:        4 bytes
  2658 ;; Hardware stack levels required when called:   16
  2659 ;; This function calls:
  2660 ;;		_GetEventNumber
  2661 ;;		_GetThisCycle
  2662 ;;		_Lcd_Init
  2663 ;;		_LoadAllFromEeprom
  2664 ;;		_ReadGPS
  2665 ;;		_SYSTEM_Initialize
  2666 ;;		_StopGPS
  2667 ;;		_SwitchOnGPS
  2668 ;;		_TMR0_SetInterruptHandler
  2669 ;;		_TestGPSStartCondition
  2670 ;;		_VerifyForGPSOnTIme
  2671 ;;		_WriteEeprom
  2672 ;;		_WriteLongInt
  2673 ;; This function is called by:
  2674 ;;		Startup code after reset
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text0
  2679  001D44                     __ptext0:
  2680                           	opt stack 0
  2681  001D44                     _main:
  2682                           	opt stack 15
  2683                           
  2684                           ;main.c: 56: SYSTEM_Initialize();
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;incstack = 0
  2688  001D44  EC0D  F01B         	call	_SYSTEM_Initialize	;wreg free
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 87: (INTCONbits.GIE = 1);
  2692  001D48  8EF2               	bsf	intcon,7,c	;volatile
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 88: (INTCONbits.PEIE = 1);
  2696  001D4A  8CF2               	bsf	intcon,6,c	;volatile
  2697                           
  2698                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  2699  001D4C  0E0A               	movlw	low _Timer0_10ms
  2700  001D4E  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  2701  001D50  0E13               	movlw	high _Timer0_10ms
  2702  001D52  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2703  001D54  EC5D  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 91: for (INT16 i=0; i<1024; i++)
  2707  001D58  6BB0               	clrf	main@i& (0+255),b
  2708  001D5A  6BB1               	clrf	(main@i+1)& (0+255),b
  2709  001D5C                     l4890:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 92: WriteEeprom(i,EE_Settings[i]);
  2713  001D5C  C0B0  F060         	movff	main@i,WriteEeprom@Add
  2714  001D60  C0B1  F061         	movff	main@i+1,WriteEeprom@Add+1
  2715  001D64  0EF0               	movlw	low _EE_Settings
  2716  001D66  25B0               	addwf	main@i& (0+255),w,b
  2717  001D68  6ED9               	movwf	fsr2l,c
  2718  001D6A  0E02               	movlw	high _EE_Settings
  2719  001D6C  21B1               	addwfc	(main@i+1)& (0+255),w,b
  2720  001D6E  6EDA               	movwf	fsr2h,c
  2721  001D70  50DF               	movf	indf2,w,c
  2722  001D72  6F62               	movwf	WriteEeprom@Data& (0+255),b
  2723  001D74  EC85  F01A         	call	_WriteEeprom	;wreg free
  2724                           
  2725                           ; BSR set to: 0
  2726  001D78  4BB0               	infsnz	main@i& (0+255),f,b
  2727  001D7A  2BB1               	incf	(main@i+1)& (0+255),f,b
  2728                           
  2729                           ; BSR set to: 0
  2730  001D7C  BFB1               	btfsc	(main@i+1)& (0+255),7,b
  2731  001D7E  D7EE               	goto	l4890
  2732  001D80  0E04               	movlw	4
  2733  001D82  5DB1               	subwf	(main@i+1)& (0+255),w,b
  2734  001D84  E3EB               	bnc	l4890
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 94: LoadAllFromEeprom();
  2738  001D86  EC47  F01B         	call	_LoadAllFromEeprom	;wreg free
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 96: Lcd_Init();
  2742  001D8A  EC17  F017         	call	_Lcd_Init	;wreg free
  2743                           
  2744                           ;main.c: 100: DATE_TIME.SECOND = 57590;
  2745  001D8E  0EF6               	movlw	246
  2746  001D90  0100               	movlb	0	; () banked
  2747  001D92  6FBD               	movwf	_DATE_TIME& (0+255),b
  2748  001D94  0EE0               	movlw	224
  2749  001D96  6FBE               	movwf	(_DATE_TIME+1)& (0+255),b
  2750  001D98  6BBF               	clrf	(_DATE_TIME+2)& (0+255),b
  2751  001D9A  6BC0               	clrf	(_DATE_TIME+3)& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 101: DATE_TIME.YEAR = 2017;
  2755  001D9C  0E07               	movlw	7
  2756  001D9E  6FC7               	movwf	(_DATE_TIME+10)& (0+255),b
  2757  001DA0  0EE1               	movlw	225
  2758  001DA2  6FC6               	movwf	(_DATE_TIME+9)& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 102: DATE_TIME.DATE.Day = 1;
  2762  001DA4  6BC2               	clrf	(_DATE_TIME+5)& (0+255),b
  2763  001DA6  0E01               	movlw	1
  2764  001DA8  6FC1               	movwf	(_DATE_TIME+4)& (0+255),b
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;main.c: 103: DATE_TIME.DATE.Month = 1;
  2768  001DAA  6BC4               	clrf	(_DATE_TIME+7)& (0+255),b
  2769  001DAC  6FC3               	movwf	(_DATE_TIME+6)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;main.c: 104: DATE_TIME.DAY.Val = 0x40;
  2773  001DAE  51C5               	movf	(_DATE_TIME+8)& (0+255),w,b
  2774  001DB0  0B01               	andlw	-255
  2775  001DB2  0980               	iorlw	128
  2776  001DB4  6FC5               	movwf	(_DATE_TIME+8)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 106: if (GPS_SYNC_AT_START == 1)
  2780  001DB6  05EB               	decf	_GPS_SYNC_AT_START& (0+255),w,b
  2781  001DB8  E101               	bnz	l1033
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 107: FLAGS_0.bits.b0 = SET;
  2785  001DBA  81E6               	bsf	_FLAGS_0& (0+255),0,b
  2786  001DBC                     l1033:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;main.c: 108: LATCbits.LC0 = OFF;
  2790  001DBC  9085               	bcf	3973,0,c	;volatile
  2791  001DBE                     l1034:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 112: {
  2795                           ;main.c: 114: if (FLAGS_0.bits.b0) SwitchOnGPS();
  2796  001DBE  B1E6               	btfsc	_FLAGS_0& (0+255),0,b
  2797                           
  2798                           ; BSR set to: 0
  2799  001DC0  EC4F  F01B         	call	_SwitchOnGPS	;wreg free
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 115: if (FLAGS_0.bits.b1) VerifyForGPSOnTIme();
  2803  001DC4  B3E6               	btfsc	_FLAGS_0& (0+255),1,b
  2804                           
  2805                           ; BSR set to: 0
  2806  001DC6  EC91  F019         	call	_VerifyForGPSOnTIme	;wreg free
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 116: if (FLAGS_0.bits.b2) ReadGPS();
  2810  001DCA  B5E6               	btfsc	_FLAGS_0& (0+255),2,b
  2811                           
  2812                           ; BSR set to: 0
  2813  001DCC  EC9A  F018         	call	_ReadGPS	;wreg free
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 117: if (FLAGS_0.bits.b3) StopGPS();
  2817  001DD0  B7E6               	btfsc	_FLAGS_0& (0+255),3,b
  2818                           
  2819                           ; BSR set to: 0
  2820  001DD2  EC6E  F01B         	call	_StopGPS	;wreg free
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 118: TestGPSStartCondition();
  2824  001DD6  EC32  F01A         	call	_TestGPSStartCondition	;wreg free
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 119: NEXT_EVENT = GetEventNumber();
  2828  001DDA  ECEE  F00F         	call	_GetEventNumber	;wreg free
  2829  001DDE  6E5D               	movwf	_NEXT_EVENT,c
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 136: WriteLongInt(1, 1, DATE_TIME.SECOND, 6, 1);
  2833  001DE0  0E01               	movlw	1
  2834  001DE2  6F72               	movwf	WriteLongInt@x& (0+255),b
  2835  001DE4  C0BD  F073         	movff	_DATE_TIME,WriteLongInt@Val
  2836  001DE8  C0BE  F074         	movff	_DATE_TIME+1,WriteLongInt@Val+1
  2837  001DEC  C0BF  F075         	movff	_DATE_TIME+2,WriteLongInt@Val+2
  2838  001DF0  C0C0  F076         	movff	_DATE_TIME+3,WriteLongInt@Val+3
  2839  001DF4  0E06               	movlw	6
  2840  001DF6  6F77               	movwf	WriteLongInt@size& (0+255),b
  2841  001DF8  0E01               	movlw	1
  2842  001DFA  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2843  001DFC  ECFD  F015         	call	_WriteLongInt
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 137: WriteLongInt(1, 9, PRESENT_STATE, 3, 1);
  2847  001E00  0E09               	movlw	9
  2848  001E02  6F72               	movwf	WriteLongInt@x& (0+255),b
  2849  001E04  51EA               	movf	_PRESENT_STATE& (0+255),w,b
  2850  001E06  D839               	call	PL22	;call to abstracted procedure
  2851  001E08  ECFD  F015         	call	_WriteLongInt
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 138: WriteLongInt(1, 13, NEXT_STATE, 3, 1);
  2855  001E0C  0E0D               	movlw	13
  2856  001E0E  6F72               	movwf	WriteLongInt@x& (0+255),b
  2857  001E10  51E9               	movf	_NEXT_STATE& (0+255),w,b
  2858  001E12  D833               	call	PL22	;call to abstracted procedure
  2859  001E14  ECFD  F015         	call	_WriteLongInt
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 139: WriteLongInt(2, 1, GetThisCycle(), 3, 1);
  2863  001E18  0E01               	movlw	1
  2864  001E1A  6F72               	movwf	WriteLongInt@x& (0+255),b
  2865  001E1C  EC66  F01B         	call	_GetThisCycle	;wreg free
  2866  001E20  D82C               	call	PL22	;call to abstracted procedure
  2867  001E22  0E02               	movlw	2
  2868  001E24  ECFD  F015         	call	_WriteLongInt
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 140: WriteLongInt(2, 5, CYCLES[GetThisCycle()].PERIOD, 3, 1);
  2872  001E28  0E05               	movlw	5
  2873  001E2A  6F72               	movwf	WriteLongInt@x& (0+255),b
  2874  001E2C  EC66  F01B         	call	_GetThisCycle	;wreg free
  2875  001E30  ECF8  F00A         	call	PL34	;call to abstracted procedure
  2876  001E34  CFDE F0AE          	movff	postinc2,??_main
  2877  001E38  CFDD F0AF          	movff	postdec2,??_main+1
  2878  001E3C  C0AE  F073         	movff	??_main,WriteLongInt@Val
  2879  001E40  C0AF  F074         	movff	??_main+1,WriteLongInt@Val+1
  2880  001E44  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  2881  001E46  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  2882  001E48  D821               	call	PL66	;call to abstracted procedure
  2883  001E4A  ECFD  F015         	call	_WriteLongInt
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 141: WriteLongInt(2, 9, STATE_SECONDS_REMAINING, 3, 1);
  2887  001E4E  0E09               	movlw	9
  2888  001E50  6F72               	movwf	WriteLongInt@x& (0+255),b
  2889  001E52  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
  2890  001E54  D812               	call	PL22	;call to abstracted procedure
  2891  001E56  0E02               	movlw	2
  2892  001E58  ECFD  F015         	call	_WriteLongInt
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 142: WriteLongInt(2, 13, SECONDS_TO_ADJUST, 3, 1);
  2896  001E5C  0E0D               	movlw	13
  2897  001E5E  6F72               	movwf	WriteLongInt@x& (0+255),b
  2898  001E60  C0E2  F073         	movff	_SECONDS_TO_ADJUST,WriteLongInt@Val
  2899  001E64  C0E3  F074         	movff	_SECONDS_TO_ADJUST+1,WriteLongInt@Val+1
  2900  001E68  0E00               	movlw	0
  2901  001E6A  BF74               	btfsc	(WriteLongInt@Val+1)& (0+255),7,b
  2902  001E6C  0EFF               	movlw	-1
  2903  001E6E  6F75               	movwf	(WriteLongInt@Val+2)& (0+255),b
  2904  001E70  6F76               	movwf	(WriteLongInt@Val+3)& (0+255),b
  2905  001E72  D80C               	call	PL66	;call to abstracted procedure
  2906  001E74  ECFD  F015         	call	_WriteLongInt
  2907  001E78  D7A2               	goto	l1034
  2908  001E7A                     __end_of_main:
  2909                           	opt stack 0
  2910  001E7A                     PL22:
  2911                           	opt stack 15
  2912  001E7A  6F73               	movwf	WriteLongInt@Val& (0+255),b
  2913  001E7C  6B74               	clrf	(WriteLongInt@Val+1)& (0+255),b
  2914  001E7E  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  2915  001E80  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  2916  001E82  0E03               	movlw	3
  2917  001E84  6F77               	movwf	WriteLongInt@size& (0+255),b
  2918  001E86  0E01               	movlw	1
  2919  001E88  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2920  001E8A  0C01               	retlw	1
  2921  001E8C                     __end_ofPL22:
  2922                           	opt stack 0
  2923  001E8C                     PL66:
  2924                           	opt stack 15
  2925  001E8C  0E03               	movlw	3
  2926  001E8E  6F77               	movwf	WriteLongInt@size& (0+255),b
  2927  001E90  0E01               	movlw	1
  2928  001E92  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2929  001E94  0C02               	retlw	2
  2930  001E96                     __end_ofPL66:
  2931                           	opt stack 0
  2932                           tosu	equ	0xFFF
  2933                           tosh	equ	0xFFE
  2934                           tosl	equ	0xFFD
  2935                           pclath	equ	0xFFA
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           postinc0	equ	0xFEE
  2944                           plusw0	equ	0xFEB
  2945                           wreg	equ	0xFE8
  2946                           indf1	equ	0xFE7
  2947                           postinc1	equ	0xFE6
  2948                           postdec1	equ	0xFE5
  2949                           plusw1	equ	0xFE3
  2950                           fsr1h	equ	0xFE2
  2951                           fsr1l	equ	0xFE1
  2952                           indf2	equ	0xFDF
  2953                           postinc2	equ	0xFDE
  2954                           postdec2	equ	0xFDD
  2955                           plusw2	equ	0xFDB
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _WriteLongInt *****************
  2961 ;; Defined at:
  2962 ;;		line 183 in file "libs/HD44780.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  y               1    wreg     unsigned char 
  2965 ;;  x               1   18[BANK0 ] unsigned char 
  2966 ;;  Val             4   19[BANK0 ] long 
  2967 ;;  size            1   23[BANK0 ] char 
  2968 ;;  Sign            1   24[BANK0 ] unsigned char 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  y               1   26[BANK0 ] unsigned char 
  2971 ;;  POS             1   25[BANK0 ] char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 3F/0
  2978 ;;		On exit  : 3F/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2981 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2984 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2985 ;;Total ram usage:        9 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:   12
  2988 ;; This function calls:
  2989 ;;		_Lcd_WriteChar
  2990 ;;		___aldiv
  2991 ;;		___lmul
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text1
  2998  002BFA                     __ptext1:
  2999                           	opt stack 0
  3000  002BFA                     _WriteLongInt:
  3001                           	opt stack 18
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;incstack = 0
  3005                           ;WriteLongInt@y stored from wreg
  3006  002BFA  6F7A               	movwf	WriteLongInt@y& (0+255),b
  3007                           
  3008                           ;HD44780.c: 184: int8_t POS = 0;
  3009  002BFC  0100               	movlb	0	; () banked
  3010  002BFE  6B79               	clrf	WriteLongInt@POS& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;HD44780.c: 185: if (Sign) {
  3014  002C00  5178               	movf	WriteLongInt@Sign& (0+255),w,b
  3015  002C02  E049               	bz	l4748
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;HD44780.c: 186: POS++;
  3019  002C04  2B79               	incf	WriteLongInt@POS& (0+255),f,b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;HD44780.c: 187: if (Val<0) {
  3023  002C06  AF76               	btfss	(WriteLongInt@Val+3)& (0+255),7,b
  3024  002C08  D01F               	goto	l4740
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  3028  002C0A  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  3029  002C0E  0E2D               	movlw	45
  3030  002C10  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  3031  002C12  517A               	movf	WriteLongInt@y& (0+255),w,b
  3032  002C14  ECB4  F019         	call	_Lcd_WriteChar
  3033                           
  3034                           ;HD44780.c: 189: Val=-1*Val;
  3035  002C18  C073  F060         	movff	WriteLongInt@Val,___lmul@multiplier
  3036  002C1C  C074  F061         	movff	WriteLongInt@Val+1,___lmul@multiplier+1
  3037  002C20  C075  F062         	movff	WriteLongInt@Val+2,___lmul@multiplier+2
  3038  002C24  C076  F063         	movff	WriteLongInt@Val+3,___lmul@multiplier+3
  3039  002C28  0100               	movlb	0	; () banked
  3040  002C2A  6964               	setf	___lmul@multiplicand& (0+255),b
  3041  002C2C  6965               	setf	(___lmul@multiplicand+1)& (0+255),b
  3042  002C2E  6966               	setf	(___lmul@multiplicand+2)& (0+255),b
  3043  002C30  6967               	setf	(___lmul@multiplicand+3)& (0+255),b
  3044  002C32  EC21  F019         	call	___lmul	;wreg free
  3045  002C36  C060  F073         	movff	?___lmul,WriteLongInt@Val
  3046  002C3A  C061  F074         	movff	?___lmul+1,WriteLongInt@Val+1
  3047  002C3E  C062  F075         	movff	?___lmul+2,WriteLongInt@Val+2
  3048  002C42  C063  F076         	movff	?___lmul+3,WriteLongInt@Val+3
  3049                           
  3050                           ;HD44780.c: 190: } else
  3051  002C46  D027               	goto	l4748
  3052  002C48                     l4740:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  3056  002C48  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  3057  002C4C  0E2B               	movlw	43
  3058  002C4E  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  3059  002C50  517A               	movf	WriteLongInt@y& (0+255),w,b
  3060  002C52  ECB4  F019         	call	_Lcd_WriteChar
  3061  002C56  D01F               	goto	l4748
  3062  002C58                     l4742:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;HD44780.c: 194: size--;
  3066  002C58  0777               	decf	WriteLongInt@size& (0+255),f,b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  3070  002C5A  5177               	movf	WriteLongInt@size& (0+255),w,b
  3071  002C5C  2579               	addwf	WriteLongInt@POS& (0+255),w,b
  3072  002C5E  2572               	addwf	WriteLongInt@x& (0+255),w,b
  3073  002C60  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  3074  002C62  D81D               	call	PL84	;call to abstracted procedure
  3075  002C64  D825               	call	PL150	;call to abstracted procedure
  3076  002C66  EC5D  F016         	call	___aldiv	;wreg free
  3077  002C6A  5160               	movf	?___aldiv& (0+255),w,b
  3078  002C6C  0DF6               	mullw	246
  3079  002C6E  50F3               	movf	prodl,w,c
  3080  002C70  2573               	addwf	WriteLongInt@Val& (0+255),w,b
  3081  002C72  0F30               	addlw	48
  3082  002C74  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  3083  002C76  517A               	movf	WriteLongInt@y& (0+255),w,b
  3084  002C78  ECB4  F019         	call	_Lcd_WriteChar
  3085                           
  3086                           ;HD44780.c: 196: Val = Val/10;
  3087  002C7C  D810               	call	PL84	;call to abstracted procedure
  3088  002C7E  0100               	movlb	0	; () banked
  3089  002C80  D817               	call	PL150	;call to abstracted procedure
  3090  002C82  EC5D  F016         	call	___aldiv	;wreg free
  3091  002C86  C060  F073         	movff	?___aldiv,WriteLongInt@Val
  3092  002C8A  C061  F074         	movff	?___aldiv+1,WriteLongInt@Val+1
  3093  002C8E  C062  F075         	movff	?___aldiv+2,WriteLongInt@Val+2
  3094  002C92  C063  F076         	movff	?___aldiv+3,WriteLongInt@Val+3
  3095  002C96                     l4748:
  3096  002C96  0100               	movlb	0	; () banked
  3097  002C98  5177               	movf	WriteLongInt@size& (0+255),w,b
  3098  002C9A  E1DE               	bnz	l4742
  3099                           
  3100                           ; BSR set to: 0
  3101  002C9C  0012               	return		;funcret
  3102  002C9E                     __end_of_WriteLongInt:
  3103                           	opt stack 0
  3104  002C9E                     PL84:
  3105                           	opt stack 18
  3106  002C9E  C073  F060         	movff	WriteLongInt@Val,___aldiv@dividend
  3107  002CA2  C074  F061         	movff	WriteLongInt@Val+1,___aldiv@dividend+1
  3108  002CA6  C075  F062         	movff	WriteLongInt@Val+2,___aldiv@dividend+2
  3109  002CAA  C076  F063         	movff	WriteLongInt@Val+3,___aldiv@dividend+3
  3110  002CAE  0C0A               	retlw	10
  3111  002CB0                     __end_ofPL84:
  3112                           	opt stack 0
  3113  002CB0                     PL150:
  3114                           	opt stack 18
  3115  002CB0  6F64               	movwf	___aldiv@divisor& (0+255),b
  3116  002CB2  6B65               	clrf	(___aldiv@divisor+1)& (0+255),b
  3117  002CB4  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  3118  002CB6  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  3119  002CB8  0012               	return	
  3120  002CBA                     __end_ofPL150:
  3121                           	opt stack 0
  3122                           tosu	equ	0xFFF
  3123                           tosh	equ	0xFFE
  3124                           tosl	equ	0xFFD
  3125                           pclath	equ	0xFFA
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           postinc0	equ	0xFEE
  3134                           plusw0	equ	0xFEB
  3135                           wreg	equ	0xFE8
  3136                           indf1	equ	0xFE7
  3137                           postinc1	equ	0xFE6
  3138                           postdec1	equ	0xFE5
  3139                           plusw1	equ	0xFE3
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           indf2	equ	0xFDF
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           plusw2	equ	0xFDB
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function ___aldiv *****************
  3151 ;; Defined at:
  3152 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  dividend        4    0[BANK0 ] long 
  3155 ;;  divisor         4    4[BANK0 ] long 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  quotient        4   10[BANK0 ] long 
  3158 ;;  sign            1    9[BANK0 ] unsigned char 
  3159 ;;  counter         1    8[BANK0 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  4    0[BANK0 ] long 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2, status,0
  3164 ;; Tracked objects:
  3165 ;;		On entry : 3F/0
  3166 ;;		On exit  : 3F/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3169 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3170 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3172 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3173 ;;Total ram usage:       14 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    9
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_WriteLongInt
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text2
  3184  002CBA                     __ptext2:
  3185                           	opt stack 0
  3186  002CBA                     ___aldiv:
  3187                           	opt stack 20
  3188                           
  3189                           ; BSR set to: 0
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;incstack = 0
  3193  002CBA  6B69               	clrf	___aldiv@sign& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196  002CBC  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3197  002CBE  D00A               	goto	l4634
  3198                           
  3199                           ; BSR set to: 0
  3200  002CC0  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3201  002CC2  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3202  002CC4  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3203  002CC6  6D64               	negf	___aldiv@divisor& (0+255),b
  3204  002CC8  0E00               	movlw	0
  3205  002CCA  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3206  002CCC  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3207  002CCE  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3208                           
  3209                           ; BSR set to: 0
  3210  002CD0  0E01               	movlw	1
  3211  002CD2  6F69               	movwf	___aldiv@sign& (0+255),b
  3212  002CD4                     l4634:
  3213                           
  3214                           ; BSR set to: 0
  3215  002CD4  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3216  002CD6  D00A               	goto	l4640
  3217                           
  3218                           ; BSR set to: 0
  3219  002CD8  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3220  002CDA  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3221  002CDC  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3222  002CDE  6D60               	negf	___aldiv@dividend& (0+255),b
  3223  002CE0  0E00               	movlw	0
  3224  002CE2  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3225  002CE4  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3226  002CE6  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3227                           
  3228                           ; BSR set to: 0
  3229  002CE8  0E01               	movlw	1
  3230  002CEA  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  3231  002CEC                     l4640:
  3232                           
  3233                           ; BSR set to: 0
  3234  002CEC  6B6A               	clrf	___aldiv@quotient& (0+255),b
  3235  002CEE  6B6B               	clrf	(___aldiv@quotient+1)& (0+255),b
  3236  002CF0  6B6C               	clrf	(___aldiv@quotient+2)& (0+255),b
  3237  002CF2  6B6D               	clrf	(___aldiv@quotient+3)& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240  002CF4  5164               	movf	___aldiv@divisor& (0+255),w,b
  3241  002CF6  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3242  002CF8  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3243  002CFA  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3244  002CFC  E029               	bz	l4662
  3245                           
  3246                           ; BSR set to: 0
  3247  002CFE  0E01               	movlw	1
  3248  002D00  6F68               	movwf	___aldiv@counter& (0+255),b
  3249  002D02  D006               	goto	l4648
  3250  002D04                     l4646:
  3251                           
  3252                           ; BSR set to: 0
  3253  002D04  90D8               	bcf	status,0,c
  3254  002D06  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  3255  002D08  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3256  002D0A  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3257  002D0C  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3258  002D0E  2B68               	incf	___aldiv@counter& (0+255),f,b
  3259  002D10                     l4648:
  3260                           
  3261                           ; BSR set to: 0
  3262  002D10  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3263  002D12  D7F8               	goto	l4646
  3264  002D14                     l4650:
  3265                           
  3266                           ; BSR set to: 0
  3267  002D14  90D8               	bcf	status,0,c
  3268  002D16  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  3269  002D18  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3270  002D1A  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3271  002D1C  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3272                           
  3273                           ; BSR set to: 0
  3274  002D1E  5164               	movf	___aldiv@divisor& (0+255),w,b
  3275  002D20  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  3276  002D22  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3277  002D24  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3278  002D26  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3279  002D28  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3280  002D2A  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3281  002D2C  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3282  002D2E  E309               	bnc	l4658
  3283                           
  3284                           ; BSR set to: 0
  3285  002D30  5164               	movf	___aldiv@divisor& (0+255),w,b
  3286  002D32  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  3287  002D34  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3288  002D36  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3289  002D38  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3290  002D3A  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3291  002D3C  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3292  002D3E  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3293                           
  3294                           ; BSR set to: 0
  3295  002D40  816A               	bsf	___aldiv@quotient& (0+255),0,b
  3296  002D42                     l4658:
  3297                           
  3298                           ; BSR set to: 0
  3299  002D42  90D8               	bcf	status,0,c
  3300  002D44  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3301  002D46  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3302  002D48  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3303  002D4A  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  3304                           
  3305                           ; BSR set to: 0
  3306  002D4C  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  3307  002D4E  D7E2               	goto	l4650
  3308  002D50                     l4662:
  3309                           
  3310                           ; BSR set to: 0
  3311  002D50  5169               	movf	___aldiv@sign& (0+255),w,b
  3312  002D52  E008               	bz	l4666
  3313                           
  3314                           ; BSR set to: 0
  3315  002D54  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3316  002D56  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3317  002D58  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3318  002D5A  6D6A               	negf	___aldiv@quotient& (0+255),b
  3319  002D5C  0E00               	movlw	0
  3320  002D5E  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3321  002D60  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3322  002D62  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3323  002D64                     l4666:
  3324                           
  3325                           ; BSR set to: 0
  3326  002D64  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  3327  002D68  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  3328  002D6C  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  3329  002D70  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  3330                           
  3331                           ; BSR set to: 0
  3332  002D74  0012               	return		;funcret
  3333  002D76                     __end_of___aldiv:
  3334                           	opt stack 0
  3335                           tosu	equ	0xFFF
  3336                           tosh	equ	0xFFE
  3337                           tosl	equ	0xFFD
  3338                           pclath	equ	0xFFA
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           postinc0	equ	0xFEE
  3347                           plusw0	equ	0xFEB
  3348                           wreg	equ	0xFE8
  3349                           indf1	equ	0xFE7
  3350                           postinc1	equ	0xFE6
  3351                           postdec1	equ	0xFE5
  3352                           plusw1	equ	0xFE3
  3353                           fsr1h	equ	0xFE2
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           plusw2	equ	0xFDB
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _Lcd_WriteChar *****************
  3364 ;; Defined at:
  3365 ;;		line 99 in file "libs/HD44780.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  y               1    wreg     unsigned char 
  3368 ;;  x               1   14[BANK0 ] unsigned char 
  3369 ;;  c               1   15[BANK0 ] unsigned char 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  y               1   16[BANK0 ] unsigned char 
  3372 ;;  data            1   17[BANK0 ] unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 3F/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3382 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3385 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3386 ;;Total ram usage:        4 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:   11
  3389 ;; This function calls:
  3390 ;;		_Lcd_CharCP
  3391 ;;		_Lcd_Command
  3392 ;; This function is called by:
  3393 ;;		_WriteLongInt
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text3
  3398  003368                     __ptext3:
  3399                           	opt stack 0
  3400  003368                     _Lcd_WriteChar:
  3401                           	opt stack 18
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;incstack = 0
  3405                           ;Lcd_WriteChar@y stored from wreg
  3406  003368  6F70               	movwf	Lcd_WriteChar@y& (0+255),b
  3407                           
  3408                           ;HD44780.c: 100: unsigned char data;
  3409                           ;HD44780.c: 101: switch(y) {
  3410  00336A  D00D               	goto	l4278
  3411  00336C                     l4268:
  3412                           
  3413                           ; BSR set to: 0
  3414  00336C  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3415  00336E  0F7F               	addlw	127
  3416  003370  D008               	goto	L3
  3417  003372                     l4270:
  3418                           
  3419                           ; BSR set to: 0
  3420  003372  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3421  003374  0FBF               	addlw	191
  3422  003376  D005               	goto	L3
  3423  003378                     l4272:
  3424                           
  3425                           ; BSR set to: 0
  3426  003378  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3427  00337A  0F93               	addlw	147
  3428  00337C  D002               	goto	L3
  3429  00337E                     l4274:
  3430                           
  3431                           ; BSR set to: 0
  3432  00337E  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3433  003380  0FD3               	addlw	211
  3434  003382                     L3:
  3435  003382  6F71               	movwf	Lcd_WriteChar@data& (0+255),b
  3436  003384  D00A               	goto	l4280
  3437  003386                     l4278:
  3438  003386  0100               	movlb	0	; () banked
  3439  003388  5170               	movf	Lcd_WriteChar@y& (0+255),w,b
  3440                           
  3441                           ; Switch size 1, requested type "space"
  3442                           ; Number of cases is 4, Range of values is 1 to 4
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte           13     7 (average)
  3446                           ;	Chosen strategy is simple_byte
  3447  00338A  0A01               	xorlw	1	; case 1
  3448  00338C  E0EF               	bz	l4268
  3449  00338E  0A03               	xorlw	3	; case 2
  3450  003390  E0F0               	bz	l4270
  3451  003392  0A01               	xorlw	1	; case 3
  3452  003394  E0F1               	bz	l4272
  3453  003396  0A07               	xorlw	7	; case 4
  3454  003398  E0F2               	bz	l4274
  3455  00339A                     l4280:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;HD44780.c: 108: Lcd_Command(data);
  3459  00339A  5171               	movf	Lcd_WriteChar@data& (0+255),w,b
  3460  00339C  EC5C  F014         	call	_Lcd_Command
  3461                           
  3462                           ;HD44780.c: 109: Lcd_CharCP(c);
  3463  0033A0  0100               	movlb	0	; () banked
  3464  0033A2  516F               	movf	Lcd_WriteChar@c& (0+255),w,b
  3465  0033A4  EF79  F013         	goto	_Lcd_CharCP
  3466  0033A8                     __end_of_Lcd_WriteChar:
  3467                           	opt stack 0
  3468                           tosu	equ	0xFFF
  3469                           tosh	equ	0xFFE
  3470                           tosl	equ	0xFFD
  3471                           pclath	equ	0xFFA
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           plusw0	equ	0xFEB
  3481                           wreg	equ	0xFE8
  3482                           indf1	equ	0xFE7
  3483                           postinc1	equ	0xFE6
  3484                           postdec1	equ	0xFE5
  3485                           plusw1	equ	0xFE3
  3486                           fsr1h	equ	0xFE2
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           plusw2	equ	0xFDB
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _Lcd_CharCP *****************
  3497 ;; Defined at:
  3498 ;;		line 116 in file "libs/HD44780.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  c               1    wreg     unsigned char 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  c               1    2[BANK0 ] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 3F/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3515 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3516 ;;Total ram usage:        3 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:   10
  3519 ;; This function calls:
  3520 ;;		_Lcd_Delay5us
  3521 ;; This function is called by:
  3522 ;;		_Lcd_WriteChar
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text4
  3527  0026F2                     __ptext4:
  3528                           	opt stack 0
  3529  0026F2                     _Lcd_CharCP:
  3530                           	opt stack 18
  3531                           
  3532                           ;incstack = 0
  3533                           ;Lcd_CharCP@c stored from wreg
  3534  0026F2  6F62               	movwf	Lcd_CharCP@c& (0+255),b
  3535                           
  3536                           ;HD44780.c: 117: LATAbits.LA1 = 0; LATAbits.LA0 = 1;
  3537  0026F4  9283               	bcf	3971,1,c	;volatile
  3538  0026F6  8083               	bsf	3971,0,c	;volatile
  3539                           
  3540                           ;HD44780.c: 118: LATAbits.LA5 = (c & 0b10000000)>>7; LATAbits.LA4 = (c & 0b01000000)>>6;
  3541  0026F8  0100               	movlb	0	; () banked
  3542  0026FA  6B60               	clrf	??_Lcd_CharCP& (0+255),b
  3543  0026FC  AF62               	btfss	Lcd_CharCP@c& (0+255),7,b
  3544  0026FE  D001               	bra	u3575
  3545  002700  2B60               	incf	??_Lcd_CharCP& (0+255),f,b
  3546  002702                     u3575:
  3547  002702  D837               	call	PL54	;call to abstracted procedure
  3548  002704  0E06               	movlw	6
  3549  002706  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  3550  002708                     u3585:
  3551  002708  90D8               	bcf	status,0,c
  3552  00270A  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3553  00270C  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  3554  00270E  D7FC               	goto	u3585
  3555  002710  D84D               	call	PL64	;call to abstracted procedure
  3556                           
  3557                           ;HD44780.c: 119: LATAbits.LA3 = (c & 0b00100000)>>5; LATAbits.LA2 = (c & 0b00010000)>>4;
  3558  002712  D847               	call	PL62	;call to abstracted procedure
  3559  002714  0E05               	movlw	5
  3560  002716  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  3561  002718                     u3595:
  3562  002718  90D8               	bcf	status,0,c
  3563  00271A  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3564  00271C  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  3565  00271E  D7FC               	goto	u3595
  3566  002720  0E01               	movlw	1
  3567  002722  D833               	call	PL56	;call to abstracted procedure
  3568  002724  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3569  002726  0E0F               	movlw	15
  3570  002728  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3571  00272A  0E01               	movlw	1
  3572  00272C  D846               	call	PL94	;call to abstracted procedure
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;HD44780.c: 120: _delay(10);
  3576  00272E  0E03               	movlw	3
  3577  002730                     u5017:
  3578  002730  2EE8               	decfsz	wreg,f,c
  3579  002732  D7FE               	bra	u5017
  3580  002734  F000               	nop	
  3581                           
  3582                           ;HD44780.c: 121: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  3583  002736  8283               	bsf	3971,1,c	;volatile
  3584  002738  EC62  F01B         	call	_Lcd_Delay5us	;wreg free
  3585  00273C  9283               	bcf	3971,1,c	;volatile
  3586                           
  3587                           ;HD44780.c: 122: LATAbits.LA5 = (c & 0b00001000)>>3; LATAbits.LA4 = (c & 0b00000100)>>2;
  3588  00273E  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3589  002742  0100               	movlb	0	; () banked
  3590  002744  90D8               	bcf	status,0,c
  3591  002746  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3592  002748  D841               	call	PL112	;call to abstracted procedure
  3593                           
  3594                           ; BSR set to: 0
  3595  00274A  D813               	call	PL54	;call to abstracted procedure
  3596  00274C  D83F               	call	PL112	;call to abstracted procedure
  3597  00274E  D82E               	call	PL64	;call to abstracted procedure
  3598                           
  3599                           ; BSR set to: 0
  3600                           ;HD44780.c: 123: LATAbits.LA3 = (c & 0b00000010)>>1; LATAbits.LA2 = (c & 0b00000001);
  3601  002750  D828               	call	PL62	;call to abstracted procedure
  3602  002752  90D8               	bcf	status,0,c
  3603  002754  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3604  002756  0E01               	movlw	1
  3605                           
  3606                           ; BSR set to: 0
  3607  002758  D818               	call	PL56	;call to abstracted procedure
  3608  00275A  0E01               	movlw	1
  3609  00275C  D82E               	call	PL94	;call to abstracted procedure
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;HD44780.c: 124: _delay(10);
  3613  00275E  0E03               	movlw	3
  3614  002760                     u5027:
  3615  002760  2EE8               	decfsz	wreg,f,c
  3616  002762  D7FE               	bra	u5027
  3617  002764  F000               	nop	
  3618                           
  3619                           ;HD44780.c: 125: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  3620  002766  8283               	bsf	3971,1,c	;volatile
  3621  002768  EC62  F01B         	call	_Lcd_Delay5us	;wreg free
  3622  00276C  9283               	bcf	3971,1,c	;volatile
  3623                           
  3624                           ;HD44780.c: 126: Lcd_Delay5us();
  3625  00276E  EF62  F01B         	goto	_Lcd_Delay5us	;wreg free
  3626  002772                     __end_of_Lcd_CharCP:
  3627                           	opt stack 0
  3628  002772                     PL54:
  3629                           	opt stack 18
  3630  002772  0E01               	movlw	1
  3631  002774  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3632  002776  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3633  002778  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3634  00277A  5083               	movf	3971,w,c	;volatile
  3635  00277C  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3636  00277E  0BDF               	andlw	-33
  3637  002780  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3638  002782  6E83               	movwf	3971,c	;volatile
  3639  002784  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3640  002788  0012               	return	
  3641  00278A                     __end_ofPL54:
  3642                           	opt stack 0
  3643  00278A                     PL56:
  3644                           	opt stack 18
  3645  00278A  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3646  00278C  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3647  00278E  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3648  002790  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3649  002792  5083               	movf	3971,w,c	;volatile
  3650  002794  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3651  002796  0BF7               	andlw	-9
  3652  002798  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3653  00279A  6E83               	movwf	3971,c	;volatile
  3654  00279C  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3655  0027A0  0012               	return	
  3656  0027A2                     __end_ofPL56:
  3657                           	opt stack 0
  3658  0027A2                     PL62:
  3659                           	opt stack 18
  3660  0027A2  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3661  0027A4  6E83               	movwf	3971,c	;volatile
  3662  0027A6  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3663  0027AA  0012               	return	
  3664  0027AC                     __end_ofPL62:
  3665                           	opt stack 0
  3666  0027AC                     PL64:
  3667                           	opt stack 18
  3668  0027AC  0E01               	movlw	1
  3669  0027AE  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3670  0027B0  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3671  0027B2  5083               	movf	3971,w,c	;volatile
  3672  0027B4  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3673  0027B6  0BEF               	andlw	-17
  3674  0027B8  0012               	return	
  3675  0027BA                     __end_ofPL64:
  3676                           	opt stack 0
  3677  0027BA                     PL94:
  3678                           	opt stack 18
  3679  0027BA  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3680  0027BC  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3681  0027BE  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3682  0027C0  5083               	movf	3971,w,c	;volatile
  3683  0027C2  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3684  0027C4  0BFB               	andlw	-5
  3685  0027C6  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3686  0027C8  6E83               	movwf	3971,c	;volatile
  3687  0027CA  0012               	return	
  3688  0027CC                     __end_ofPL94:
  3689                           	opt stack 0
  3690  0027CC                     PL112:
  3691                           	opt stack 18
  3692  0027CC  90D8               	bcf	status,0,c
  3693  0027CE  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3694  0027D0  90D8               	bcf	status,0,c
  3695  0027D2  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3696  0027D4  0012               	return	
  3697  0027D6                     __end_ofPL112:
  3698                           	opt stack 0
  3699                           tosu	equ	0xFFF
  3700                           tosh	equ	0xFFE
  3701                           tosl	equ	0xFFD
  3702                           pclath	equ	0xFFA
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           postinc0	equ	0xFEE
  3711                           plusw0	equ	0xFEB
  3712                           wreg	equ	0xFE8
  3713                           indf1	equ	0xFE7
  3714                           postinc1	equ	0xFE6
  3715                           postdec1	equ	0xFE5
  3716                           plusw1	equ	0xFE3
  3717                           fsr1h	equ	0xFE2
  3718                           fsr1l	equ	0xFE1
  3719                           indf2	equ	0xFDF
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           plusw2	equ	0xFDB
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _WriteEeprom *****************
  3728 ;; Defined at:
  3729 ;;		line 15 in file "libs/eeprom.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  Add             2    0[BANK0 ] unsigned short 
  3732 ;;  Data            1    2[BANK0 ] unsigned char 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  Address         2    3[BANK0 ] struct _WORD_VAL
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2
  3739 ;; Tracked objects:
  3740 ;;		On entry : 3F/0
  3741 ;;		On exit  : 3F/0
  3742 ;;		Unchanged: 3F/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3744 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3745 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3747 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3748 ;;Total ram usage:        5 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    9
  3751 ;; This function calls:
  3752 ;;		Nothing
  3753 ;; This function is called by:
  3754 ;;		_main
  3755 ;; This function uses a non-reentrant model
  3756 ;;
  3757                           
  3758                           	psect	text5
  3759  00350A                     __ptext5:
  3760                           	opt stack 0
  3761  00350A                     _WriteEeprom:
  3762                           	opt stack 21
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;eeprom.c: 16: WORD_VAL Address;
  3766                           ;eeprom.c: 17: Address.Val = Add;
  3767                           
  3768                           ;incstack = 0
  3769  00350A  C060  F063         	movff	WriteEeprom@Add,WriteEeprom@Address
  3770  00350E  C061  F064         	movff	WriteEeprom@Add+1,WriteEeprom@Address+1
  3771                           
  3772                           ; BSR set to: 0
  3773                           ;eeprom.c: 18: NVMCON1bits.NVMREG = 00;
  3774  003512  0E3F               	movlw	-193
  3775  003514  1681               	andwf	3969,f,c	;volatile
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;eeprom.c: 19: NVMADRL = Address.v[0];
  3779  003516  C063  FF7E         	movff	WriteEeprom@Address,3966	;volatile
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;eeprom.c: 20: NVMADRH = Address.v[1];
  3783  00351A  C064  FF7F         	movff	WriteEeprom@Address+1,3967	;volatile
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;eeprom.c: 21: NVMDAT = Data;
  3787  00351E  C062  FF80         	movff	WriteEeprom@Data,3968	;volatile
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;eeprom.c: 22: NVMCON1bits.WREN = 1;
  3791  003522  8481               	bsf	3969,2,c	;volatile
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;eeprom.c: 23: INTCONbits.GIE = 0;
  3795  003524  9EF2               	bcf	intcon,7,c	;volatile
  3796                           
  3797                           ;eeprom.c: 24: NVMCON2 = 0x55;
  3798  003526  0E55               	movlw	85
  3799  003528  6E82               	movwf	3970,c	;volatile
  3800                           
  3801                           ;eeprom.c: 25: NVMCON2 = 0xAA;
  3802  00352A  0EAA               	movlw	170
  3803  00352C  6E82               	movwf	3970,c	;volatile
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;eeprom.c: 26: NVMCON1bits.WR = 1;
  3807  00352E  8281               	bsf	3969,1,c	;volatile
  3808  003530                     l457:
  3809                           
  3810                           ; BSR set to: 0
  3811  003530  B281               	btfsc	3969,1,c	;volatile
  3812  003532  D7FE               	goto	l457
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;eeprom.c: 28: INTCONbits.GIE = 1;
  3816  003534  8EF2               	bsf	intcon,7,c	;volatile
  3817                           
  3818                           ;eeprom.c: 29: NVMCON1bits.WREN = 0;
  3819  003536  9481               	bcf	3969,2,c	;volatile
  3820                           
  3821                           ;eeprom.c: 30: NVMCON1bits.NVMREG1 = 1;
  3822  003538  8E81               	bsf	3969,7,c	;volatile
  3823                           
  3824                           ; BSR set to: 0
  3825  00353A  0012               	return		;funcret
  3826  00353C                     __end_of_WriteEeprom:
  3827                           	opt stack 0
  3828                           tosu	equ	0xFFF
  3829                           tosh	equ	0xFFE
  3830                           tosl	equ	0xFFD
  3831                           pclath	equ	0xFFA
  3832                           tblptru	equ	0xFF8
  3833                           tblptrh	equ	0xFF7
  3834                           tblptrl	equ	0xFF6
  3835                           tablat	equ	0xFF5
  3836                           prodh	equ	0xFF4
  3837                           prodl	equ	0xFF3
  3838                           intcon	equ	0xFF2
  3839                           postinc0	equ	0xFEE
  3840                           plusw0	equ	0xFEB
  3841                           wreg	equ	0xFE8
  3842                           indf1	equ	0xFE7
  3843                           postinc1	equ	0xFE6
  3844                           postdec1	equ	0xFE5
  3845                           plusw1	equ	0xFE3
  3846                           fsr1h	equ	0xFE2
  3847                           fsr1l	equ	0xFE1
  3848                           indf2	equ	0xFDF
  3849                           postinc2	equ	0xFDE
  3850                           postdec2	equ	0xFDD
  3851                           plusw2	equ	0xFDB
  3852                           fsr2h	equ	0xFDA
  3853                           fsr2l	equ	0xFD9
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _VerifyForGPSOnTIme *****************
  3857 ;; Defined at:
  3858 ;;		line 164 in file "libs/funcs.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  TimeDiff        4    0[BANK0 ] long 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0
  3867 ;; Tracked objects:
  3868 ;;		On entry : 3F/0
  3869 ;;		On exit  : 3F/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3873 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3875 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3876 ;;Total ram usage:        4 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    9
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_main
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           	psect	text6
  3887  003322                     __ptext6:
  3888                           	opt stack 0
  3889  003322                     _VerifyForGPSOnTIme:
  3890                           	opt stack 21
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;funcs.c: 165: INT32 TimeDiff = DATE_TIME.SECOND - TIME_WHEN_GPS_IS_SWITCHED_ON;
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;incstack = 0
  3897  003322  51CC               	movf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),w,b
  3898  003324  5DBD               	subwf	_DATE_TIME& (0+255),w,b
  3899  003326  6F60               	movwf	VerifyForGPSOnTIme@TimeDiff& (0+255),b
  3900  003328  51CD               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),w,b
  3901  00332A  59BE               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  3902  00332C  6F61               	movwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),b
  3903  00332E  51CE               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),w,b
  3904  003330  59BF               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  3905  003332  6F62               	movwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),b
  3906  003334  51CF               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),w,b
  3907  003336  59C0               	subwfb	(_DATE_TIME+3)& (0+255),w,b
  3908  003338  6F63               	movwf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),b
  3909                           
  3910                           ;funcs.c: 166: if (TimeDiff<0)
  3911  00333A  AF63               	btfss	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  3912  00333C  D008               	goto	l684
  3913                           
  3914                           ; BSR set to: 0
  3915                           ;funcs.c: 167: TimeDiff += 86400;
  3916  00333E  0E80               	movlw	128
  3917  003340  2760               	addwf	VerifyForGPSOnTIme@TimeDiff& (0+255),f,b
  3918  003342  0E51               	movlw	81
  3919  003344  2361               	addwfc	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),f,b
  3920  003346  0E01               	movlw	1
  3921  003348  2362               	addwfc	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),f,b
  3922  00334A  0E00               	movlw	0
  3923  00334C  2363               	addwfc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),f,b
  3924  00334E                     l684:
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;funcs.c: 168: if (TimeDiff >= (1*60)) {
  3928  00334E  BF63               	btfsc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  3929  003350  0012               	return	
  3930  003352  5163               	movf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),w,b
  3931  003354  1162               	iorwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),w,b
  3932  003356  1161               	iorwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),w,b
  3933  003358  E104               	bnz	u4770
  3934  00335A  0E3C               	movlw	60
  3935  00335C  5D60               	subwf	VerifyForGPSOnTIme@TimeDiff& (0+255),w,b
  3936  00335E  A0D8               	btfss	status,0,c
  3937  003360  0012               	return	
  3938  003362                     u4770:
  3939                           
  3940                           ; BSR set to: 0
  3941                           ;funcs.c: 169: FLAGS_0.bits.b2 = SET;
  3942  003362  85E6               	bsf	_FLAGS_0& (0+255),2,b
  3943                           
  3944                           ;funcs.c: 170: FLAGS_0.bits.b1 = RESET;
  3945  003364  93E6               	bcf	_FLAGS_0& (0+255),1,b
  3946                           
  3947                           ; BSR set to: 0
  3948  003366  0012               	return		;funcret
  3949  003368                     __end_of_VerifyForGPSOnTIme:
  3950                           	opt stack 0
  3951                           tosu	equ	0xFFF
  3952                           tosh	equ	0xFFE
  3953                           tosl	equ	0xFFD
  3954                           pclath	equ	0xFFA
  3955                           tblptru	equ	0xFF8
  3956                           tblptrh	equ	0xFF7
  3957                           tblptrl	equ	0xFF6
  3958                           tablat	equ	0xFF5
  3959                           prodh	equ	0xFF4
  3960                           prodl	equ	0xFF3
  3961                           intcon	equ	0xFF2
  3962                           postinc0	equ	0xFEE
  3963                           plusw0	equ	0xFEB
  3964                           wreg	equ	0xFE8
  3965                           indf1	equ	0xFE7
  3966                           postinc1	equ	0xFE6
  3967                           postdec1	equ	0xFE5
  3968                           plusw1	equ	0xFE3
  3969                           fsr1h	equ	0xFE2
  3970                           fsr1l	equ	0xFE1
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           plusw2	equ	0xFDB
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _TestGPSStartCondition *****************
  3980 ;; Defined at:
  3981 ;;		line 204 in file "libs/funcs.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;		None
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;		None
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, status,2, status,0
  3990 ;; Tracked objects:
  3991 ;;		On entry : 3F/0
  3992 ;;		On exit  : 3F/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3997 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3998 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3999 ;;Total ram usage:        1 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    9
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text7
  4010  003464                     __ptext7:
  4011                           	opt stack 0
  4012  003464                     _TestGPSStartCondition:
  4013                           	opt stack 21
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;funcs.c: 205: if ((DATE_TIME.SECOND == GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME)
  4017                           ;funcs.c: 206: || (TIME_AT_LAST_GPS_SYNC >= GPS_SYNC_EVERY_x_SECONDS))
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;incstack = 0
  4021  003464  51D0               	movf	_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME& (0+255),w,b
  4022  003466  19BD               	xorwf	_DATE_TIME& (0+255),w,b
  4023  003468  E109               	bnz	u4820
  4024  00346A  51D1               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),w,b
  4025  00346C  19BE               	xorwf	(_DATE_TIME+1)& (0+255),w,b
  4026  00346E  E106               	bnz	u4820
  4027  003470  51D2               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),w,b
  4028  003472  19BF               	xorwf	(_DATE_TIME+2)& (0+255),w,b
  4029  003474  E103               	bnz	u4820
  4030  003476  51D3               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),w,b
  4031  003478  19C0               	xorwf	(_DATE_TIME+3)& (0+255),w,b
  4032  00347A  E00E               	bz	l702
  4033  00347C                     u4820:
  4034                           
  4035                           ; BSR set to: 0
  4036  00347C  51D4               	movf	_GPS_SYNC_EVERY_x_SECONDS& (0+255),w,b
  4037  00347E  5DC8               	subwf	_TIME_AT_LAST_GPS_SYNC& (0+255),w,b
  4038  003480  51D5               	movf	(_GPS_SYNC_EVERY_x_SECONDS+1)& (0+255),w,b
  4039  003482  59C9               	subwfb	(_TIME_AT_LAST_GPS_SYNC+1)& (0+255),w,b
  4040  003484  51D6               	movf	(_GPS_SYNC_EVERY_x_SECONDS+2)& (0+255),w,b
  4041  003486  59CA               	subwfb	(_TIME_AT_LAST_GPS_SYNC+2)& (0+255),w,b
  4042  003488  51CB               	movf	(_TIME_AT_LAST_GPS_SYNC+3)& (0+255),w,b
  4043  00348A  0A80               	xorlw	128
  4044  00348C  6F60               	movwf	??_TestGPSStartCondition& (0+255),b
  4045  00348E  51D7               	movf	(_GPS_SYNC_EVERY_x_SECONDS+3)& (0+255),w,b
  4046  003490  0A80               	xorlw	128
  4047  003492  5960               	subwfb	??_TestGPSStartCondition& (0+255),w,b
  4048  003494  A0D8               	btfss	status,0,c
  4049  003496  0012               	return	
  4050  003498                     l702:
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;funcs.c: 207: FLAGS_0.bits.b0 = SET;
  4054  003498  81E6               	bsf	_FLAGS_0& (0+255),0,b
  4055                           
  4056                           ; BSR set to: 0
  4057  00349A  0012               	return		;funcret
  4058  00349C                     __end_of_TestGPSStartCondition:
  4059                           	opt stack 0
  4060                           tosu	equ	0xFFF
  4061                           tosh	equ	0xFFE
  4062                           tosl	equ	0xFFD
  4063                           pclath	equ	0xFFA
  4064                           tblptru	equ	0xFF8
  4065                           tblptrh	equ	0xFF7
  4066                           tblptrl	equ	0xFF6
  4067                           tablat	equ	0xFF5
  4068                           prodh	equ	0xFF4
  4069                           prodl	equ	0xFF3
  4070                           intcon	equ	0xFF2
  4071                           postinc0	equ	0xFEE
  4072                           plusw0	equ	0xFEB
  4073                           wreg	equ	0xFE8
  4074                           indf1	equ	0xFE7
  4075                           postinc1	equ	0xFE6
  4076                           postdec1	equ	0xFE5
  4077                           plusw1	equ	0xFE3
  4078                           fsr1h	equ	0xFE2
  4079                           fsr1l	equ	0xFE1
  4080                           indf2	equ	0xFDF
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           plusw2	equ	0xFDB
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _SwitchOnGPS *****************
  4089 ;; Defined at:
  4090 ;;		line 156 in file "libs/funcs.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;		None
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;		None
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		None
  4099 ;; Tracked objects:
  4100 ;;		On entry : 3F/0
  4101 ;;		On exit  : 3F/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4108 ;;Total ram usage:        0 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    9
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text8
  4119  00369E                     __ptext8:
  4120                           	opt stack 0
  4121  00369E                     _SwitchOnGPS:
  4122                           	opt stack 21
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;funcs.c: 157: LATCbits.LC1 = ON;
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;incstack = 0
  4129  00369E  8285               	bsf	3973,1,c	;volatile
  4130                           
  4131                           ;funcs.c: 158: NO_OF_TIMES_GPS_FAILED = 0;
  4132  0036A0  6BE7               	clrf	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  4133                           
  4134                           ;funcs.c: 159: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND;
  4135  0036A2  ECC4  F018         	call	PL92	;call to abstracted procedure
  4136                           
  4137                           ;funcs.c: 160: FLAGS_0.bits.b1 = SET;
  4138  0036A6  83E6               	bsf	_FLAGS_0& (0+255),1,b
  4139                           
  4140                           ;funcs.c: 161: FLAGS_0.bits.b0 = RESET;
  4141  0036A8  91E6               	bcf	_FLAGS_0& (0+255),0,b
  4142                           
  4143                           ; BSR set to: 0
  4144  0036AA  0012               	return		;funcret
  4145  0036AC                     __end_of_SwitchOnGPS:
  4146                           	opt stack 0
  4147                           tosu	equ	0xFFF
  4148                           tosh	equ	0xFFE
  4149                           tosl	equ	0xFFD
  4150                           pclath	equ	0xFFA
  4151                           tblptru	equ	0xFF8
  4152                           tblptrh	equ	0xFF7
  4153                           tblptrl	equ	0xFF6
  4154                           tablat	equ	0xFF5
  4155                           prodh	equ	0xFF4
  4156                           prodl	equ	0xFF3
  4157                           intcon	equ	0xFF2
  4158                           postinc0	equ	0xFEE
  4159                           plusw0	equ	0xFEB
  4160                           wreg	equ	0xFE8
  4161                           indf1	equ	0xFE7
  4162                           postinc1	equ	0xFE6
  4163                           postdec1	equ	0xFE5
  4164                           plusw1	equ	0xFE3
  4165                           fsr1h	equ	0xFE2
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           postdec2	equ	0xFDD
  4170                           plusw2	equ	0xFDB
  4171                           fsr2h	equ	0xFDA
  4172                           fsr2l	equ	0xFD9
  4173                           status	equ	0xFD8
  4174                           
  4175 ;; *************** function _StopGPS *****************
  4176 ;; Defined at:
  4177 ;;		line 199 in file "libs/funcs.c"
  4178 ;; Parameters:    Size  Location     Type
  4179 ;;		None
  4180 ;; Auto vars:     Size  Location     Type
  4181 ;;		None
  4182 ;; Return value:  Size  Location     Type
  4183 ;;                  1    wreg      void 
  4184 ;; Registers used:
  4185 ;;		None
  4186 ;; Tracked objects:
  4187 ;;		On entry : 3F/0
  4188 ;;		On exit  : 3F/0
  4189 ;;		Unchanged: 0/0
  4190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4195 ;;Total ram usage:        0 bytes
  4196 ;; Hardware stack levels used:    1
  4197 ;; Hardware stack levels required when called:    9
  4198 ;; This function calls:
  4199 ;;		Nothing
  4200 ;; This function is called by:
  4201 ;;		_main
  4202 ;; This function uses a non-reentrant model
  4203 ;;
  4204                           
  4205                           	psect	text9
  4206  0036DC                     __ptext9:
  4207                           	opt stack 0
  4208  0036DC                     _StopGPS:
  4209                           	opt stack 21
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;funcs.c: 200: LATCbits.LC1 = OFF;
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;incstack = 0
  4216  0036DC  9285               	bcf	3973,1,c	;volatile
  4217                           
  4218                           ;funcs.c: 201: FLAGS_0.bits.b3 = RESET;
  4219  0036DE  97E6               	bcf	_FLAGS_0& (0+255),3,b
  4220                           
  4221                           ; BSR set to: 0
  4222  0036E0  0012               	return		;funcret
  4223  0036E2                     __end_of_StopGPS:
  4224                           	opt stack 0
  4225                           tosu	equ	0xFFF
  4226                           tosh	equ	0xFFE
  4227                           tosl	equ	0xFFD
  4228                           pclath	equ	0xFFA
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           intcon	equ	0xFF2
  4236                           postinc0	equ	0xFEE
  4237                           plusw0	equ	0xFEB
  4238                           wreg	equ	0xFE8
  4239                           indf1	equ	0xFE7
  4240                           postinc1	equ	0xFE6
  4241                           postdec1	equ	0xFE5
  4242                           plusw1	equ	0xFE3
  4243                           fsr1h	equ	0xFE2
  4244                           fsr1l	equ	0xFE1
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           plusw2	equ	0xFDB
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function _SYSTEM_Initialize *****************
  4254 ;; Defined at:
  4255 ;;		line 107 in file "mcc_generated_files/mcc.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;		None
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 3F/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4273 ;;Total ram usage:        0 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:   11
  4276 ;; This function calls:
  4277 ;;		_EUSART1_Initialize
  4278 ;;		_INTERRUPT_Initialize
  4279 ;;		_OSCILLATOR_Initialize
  4280 ;;		_PIN_MANAGER_Initialize
  4281 ;;		_TMR0_Initialize
  4282 ;; This function is called by:
  4283 ;;		_main
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text10
  4288  00361A                     __ptext10:
  4289                           	opt stack 0
  4290  00361A                     _SYSTEM_Initialize:
  4291                           	opt stack 19
  4292                           
  4293                           ;mcc.c: 110: INTERRUPT_Initialize();
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;incstack = 0
  4297  00361A  EC73  F01B         	call	_INTERRUPT_Initialize	;wreg free
  4298                           
  4299                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  4300  00361E  EC67  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  4301                           
  4302                           ;mcc.c: 112: OSCILLATOR_Initialize();
  4303  003622  EC02  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  4304                           
  4305                           ; BSR set to: 14
  4306                           ;mcc.c: 113: TMR0_Initialize();
  4307  003626  ECD4  F019         	call	_TMR0_Initialize	;wreg free
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;mcc.c: 114: EUSART1_Initialize();
  4311  00362A  EF17  F01B         	goto	_EUSART1_Initialize	;wreg free
  4312  00362E                     __end_of_SYSTEM_Initialize:
  4313                           	opt stack 0
  4314                           tosu	equ	0xFFF
  4315                           tosh	equ	0xFFE
  4316                           tosl	equ	0xFFD
  4317                           pclath	equ	0xFFA
  4318                           tblptru	equ	0xFF8
  4319                           tblptrh	equ	0xFF7
  4320                           tblptrl	equ	0xFF6
  4321                           tablat	equ	0xFF5
  4322                           prodh	equ	0xFF4
  4323                           prodl	equ	0xFF3
  4324                           intcon	equ	0xFF2
  4325                           postinc0	equ	0xFEE
  4326                           plusw0	equ	0xFEB
  4327                           wreg	equ	0xFE8
  4328                           indf1	equ	0xFE7
  4329                           postinc1	equ	0xFE6
  4330                           postdec1	equ	0xFE5
  4331                           plusw1	equ	0xFE3
  4332                           fsr1h	equ	0xFE2
  4333                           fsr1l	equ	0xFE1
  4334                           indf2	equ	0xFDF
  4335                           postinc2	equ	0xFDE
  4336                           postdec2	equ	0xFDD
  4337                           plusw2	equ	0xFDB
  4338                           fsr2h	equ	0xFDA
  4339                           fsr2l	equ	0xFD9
  4340                           status	equ	0xFD8
  4341                           
  4342 ;; *************** function _TMR0_Initialize *****************
  4343 ;; Defined at:
  4344 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  4345 ;; Parameters:    Size  Location     Type
  4346 ;;		None
  4347 ;; Auto vars:     Size  Location     Type
  4348 ;;		None
  4349 ;; Return value:  Size  Location     Type
  4350 ;;                  1    wreg      void 
  4351 ;; Registers used:
  4352 ;;		wreg, status,2, status,0, cstack
  4353 ;; Tracked objects:
  4354 ;;		On entry : 3F/E
  4355 ;;		On exit  : 3F/0
  4356 ;;		Unchanged: 0/0
  4357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4360 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4362 ;;Total ram usage:        2 bytes
  4363 ;; Hardware stack levels used:    1
  4364 ;; Hardware stack levels required when called:   10
  4365 ;; This function calls:
  4366 ;;		_TMR0_SetInterruptHandler
  4367 ;;		_TMR0_StartTimer
  4368 ;; This function is called by:
  4369 ;;		_SYSTEM_Initialize
  4370 ;; This function uses a non-reentrant model
  4371 ;;
  4372                           
  4373                           	psect	text11
  4374  0033A8                     __ptext11:
  4375                           	opt stack 0
  4376  0033A8                     _TMR0_Initialize:
  4377                           	opt stack 19
  4378                           
  4379                           ; BSR set to: 14
  4380                           ;tmr0.c: 70: T0CON0 = 0x10;
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;incstack = 0
  4384  0033A8  0E10               	movlw	16
  4385  0033AA  6ED5               	movwf	4053,c	;volatile
  4386                           
  4387                           ;tmr0.c: 73: T0CON1 = 0x50;
  4388  0033AC  0E50               	movlw	80
  4389  0033AE  6ED6               	movwf	4054,c	;volatile
  4390                           
  4391                           ;tmr0.c: 76: TMR0H = 0xD8;
  4392  0033B0  0ED8               	movlw	216
  4393  0033B2  6ED4               	movwf	4052,c	;volatile
  4394                           
  4395                           ;tmr0.c: 79: TMR0L = 0xF0;
  4396  0033B4  0EF0               	movlw	240
  4397  0033B6  6ED3               	movwf	4051,c	;volatile
  4398                           
  4399                           ; BSR set to: 14
  4400                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  4401  0033B8  50D3               	movf	4051,w,c	;volatile
  4402  0033BA  CFD4 F062          	movff	4052,??_TMR0_Initialize	;volatile
  4403  0033BE  0100               	movlb	0	; () banked
  4404  0033C0  6B63               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4405  0033C2  C062  F063         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4406  0033C6  6B62               	clrf	??_TMR0_Initialize& (0+255),b
  4407  0033C8  1162               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4408  0033CA  6E4C               	movwf	_timer0ReloadVal16bit,c	;volatile
  4409  0033CC  5163               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4410  0033CE  6E4D               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4411                           
  4412                           ; BSR set to: 0
  4413                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
  4414  0033D0  010E               	movlb	14	; () banked
  4415  0033D2  9BCA               	bcf	202,5,b	;volatile
  4416                           
  4417                           ; BSR set to: 14
  4418                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
  4419  0033D4  8BC2               	bsf	194,5,b	;volatile
  4420                           
  4421                           ; BSR set to: 14
  4422                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4423  0033D6  0EEC               	movlw	low _TMR0_DefaultInterruptHandler
  4424  0033D8  0100               	movlb	0	; () banked
  4425  0033DA  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4426  0033DC  0E36               	movlw	high _TMR0_DefaultInterruptHandler
  4427  0033DE  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4428  0033E0  EC5D  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;tmr0.c: 94: TMR0_StartTimer();
  4432  0033E4  EF71  F01B         	goto	_TMR0_StartTimer	;wreg free
  4433  0033E8                     __end_of_TMR0_Initialize:
  4434                           	opt stack 0
  4435                           tosu	equ	0xFFF
  4436                           tosh	equ	0xFFE
  4437                           tosl	equ	0xFFD
  4438                           pclath	equ	0xFFA
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           intcon	equ	0xFF2
  4446                           postinc0	equ	0xFEE
  4447                           plusw0	equ	0xFEB
  4448                           wreg	equ	0xFE8
  4449                           indf1	equ	0xFE7
  4450                           postinc1	equ	0xFE6
  4451                           postdec1	equ	0xFE5
  4452                           plusw1	equ	0xFE3
  4453                           fsr1h	equ	0xFE2
  4454                           fsr1l	equ	0xFE1
  4455                           indf2	equ	0xFDF
  4456                           postinc2	equ	0xFDE
  4457                           postdec2	equ	0xFDD
  4458                           plusw2	equ	0xFDB
  4459                           fsr2h	equ	0xFDA
  4460                           fsr2l	equ	0xFD9
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _TMR0_StartTimer *****************
  4464 ;; Defined at:
  4465 ;;		line 97 in file "mcc_generated_files/tmr0.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;		None
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;		None
  4470 ;; Return value:  Size  Location     Type
  4471 ;;                  1    wreg      void 
  4472 ;; Registers used:
  4473 ;;		None
  4474 ;; Tracked objects:
  4475 ;;		On entry : 3F/0
  4476 ;;		On exit  : 3F/0
  4477 ;;		Unchanged: 3F/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4483 ;;Total ram usage:        0 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:    9
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_TMR0_Initialize
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text12
  4494  0036E2                     __ptext12:
  4495                           	opt stack 0
  4496  0036E2                     _TMR0_StartTimer:
  4497                           	opt stack 19
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;incstack = 0
  4504  0036E2  8ED5               	bsf	4053,7,c	;volatile
  4505                           
  4506                           ; BSR set to: 0
  4507  0036E4  0012               	return		;funcret
  4508  0036E6                     __end_of_TMR0_StartTimer:
  4509                           	opt stack 0
  4510                           tosu	equ	0xFFF
  4511                           tosh	equ	0xFFE
  4512                           tosl	equ	0xFFD
  4513                           pclath	equ	0xFFA
  4514                           tblptru	equ	0xFF8
  4515                           tblptrh	equ	0xFF7
  4516                           tblptrl	equ	0xFF6
  4517                           tablat	equ	0xFF5
  4518                           prodh	equ	0xFF4
  4519                           prodl	equ	0xFF3
  4520                           intcon	equ	0xFF2
  4521                           postinc0	equ	0xFEE
  4522                           plusw0	equ	0xFEB
  4523                           wreg	equ	0xFE8
  4524                           indf1	equ	0xFE7
  4525                           postinc1	equ	0xFE6
  4526                           postdec1	equ	0xFE5
  4527                           plusw1	equ	0xFE3
  4528                           fsr1h	equ	0xFE2
  4529                           fsr1l	equ	0xFE1
  4530                           indf2	equ	0xFDF
  4531                           postinc2	equ	0xFDE
  4532                           postdec2	equ	0xFDD
  4533                           plusw2	equ	0xFDB
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function _TMR0_SetInterruptHandler *****************
  4539 ;; Defined at:
  4540 ;;		line 161 in file "mcc_generated_files/tmr0.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4543 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  4544 ;; Auto vars:     Size  Location     Type
  4545 ;;		None
  4546 ;; Return value:  Size  Location     Type
  4547 ;;                  1    wreg      void 
  4548 ;; Registers used:
  4549 ;;		wreg, status,2, status,0
  4550 ;; Tracked objects:
  4551 ;;		On entry : 3F/0
  4552 ;;		On exit  : 3F/0
  4553 ;;		Unchanged: 3F/0
  4554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4555 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4559 ;;Total ram usage:        2 bytes
  4560 ;; Hardware stack levels used:    1
  4561 ;; Hardware stack levels required when called:    9
  4562 ;; This function calls:
  4563 ;;		Nothing
  4564 ;; This function is called by:
  4565 ;;		_TMR0_Initialize
  4566 ;;		_main
  4567 ;; This function uses a non-reentrant model
  4568 ;;
  4569                           
  4570                           	psect	text13
  4571  0036BA                     __ptext13:
  4572                           	opt stack 0
  4573  0036BA                     _TMR0_SetInterruptHandler:
  4574                           	opt stack 21
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;incstack = 0
  4581  0036BA  C060  F0E0         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4582  0036BE  C061  F0E1         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4583                           
  4584                           ; BSR set to: 0
  4585  0036C2  0012               	return		;funcret
  4586  0036C4                     __end_of_TMR0_SetInterruptHandler:
  4587                           	opt stack 0
  4588                           tosu	equ	0xFFF
  4589                           tosh	equ	0xFFE
  4590                           tosl	equ	0xFFD
  4591                           pclath	equ	0xFFA
  4592                           tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           intcon	equ	0xFF2
  4599                           postinc0	equ	0xFEE
  4600                           plusw0	equ	0xFEB
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postinc1	equ	0xFE6
  4604                           postdec1	equ	0xFE5
  4605                           plusw1	equ	0xFE3
  4606                           fsr1h	equ	0xFE2
  4607                           fsr1l	equ	0xFE1
  4608                           indf2	equ	0xFDF
  4609                           postinc2	equ	0xFDE
  4610                           postdec2	equ	0xFDD
  4611                           plusw2	equ	0xFDB
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8
  4615                           
  4616 ;; *************** function _PIN_MANAGER_Initialize *****************
  4617 ;; Defined at:
  4618 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4619 ;; Parameters:    Size  Location     Type
  4620 ;;		None
  4621 ;; Auto vars:     Size  Location     Type
  4622 ;;  state           1    0[BANK0 ] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, status,2
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4633 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4636 ;;Total ram usage:        1 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    9
  4639 ;; This function calls:
  4640 ;;		Nothing
  4641 ;; This function is called by:
  4642 ;;		_SYSTEM_Initialize
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text14
  4647  0030CE                     __ptext14:
  4648                           	opt stack 0
  4649  0030CE                     _PIN_MANAGER_Initialize:
  4650                           	opt stack 20
  4651                           
  4652                           ;pin_manager.c: 57: LATA = 0x00;
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;incstack = 0
  4656  0030CE  6A83               	clrf	3971,c	;volatile
  4657                           
  4658                           ;pin_manager.c: 58: LATB = 0x00;
  4659  0030D0  6A84               	clrf	3972,c	;volatile
  4660                           
  4661                           ;pin_manager.c: 59: LATC = 0x00;
  4662  0030D2  6A85               	clrf	3973,c	;volatile
  4663                           
  4664                           ;pin_manager.c: 64: TRISA = 0xC0;
  4665  0030D4  0EC0               	movlw	192
  4666  0030D6  6E88               	movwf	3976,c	;volatile
  4667                           
  4668                           ;pin_manager.c: 65: TRISB = 0x00;
  4669  0030D8  6A89               	clrf	3977,c	;volatile
  4670                           
  4671                           ;pin_manager.c: 66: TRISC = 0x84;
  4672  0030DA  0E84               	movlw	132
  4673  0030DC  6E8A               	movwf	3978,c	;volatile
  4674                           
  4675                           ;pin_manager.c: 71: ANSELC = 0x44;
  4676  0030DE  0E44               	movlw	68
  4677  0030E0  010F               	movlb	15	; () banked
  4678  0030E2  6F21               	movwf	33,b	;volatile
  4679                           
  4680                           ; BSR set to: 15
  4681                           ;pin_manager.c: 72: ANSELB = 0x00;
  4682  0030E4  6B19               	clrf	25,b	;volatile
  4683                           
  4684                           ;pin_manager.c: 73: ANSELA = 0xC0;
  4685  0030E6  0EC0               	movlw	192
  4686  0030E8  6F11               	movwf	17,b	;volatile
  4687                           
  4688                           ; BSR set to: 15
  4689                           ;pin_manager.c: 78: WPUE = 0x00;
  4690  0030EA  6B2D               	clrf	45,b	;volatile
  4691                           
  4692                           ; BSR set to: 15
  4693                           ;pin_manager.c: 79: WPUB = 0x00;
  4694  0030EC  6B18               	clrf	24,b	;volatile
  4695                           
  4696                           ; BSR set to: 15
  4697                           ;pin_manager.c: 80: WPUA = 0x00;
  4698  0030EE  6B10               	clrf	16,b	;volatile
  4699                           
  4700                           ; BSR set to: 15
  4701                           ;pin_manager.c: 81: WPUC = 0x00;
  4702  0030F0  6B20               	clrf	32,b	;volatile
  4703                           
  4704                           ; BSR set to: 15
  4705                           ;pin_manager.c: 86: ODCONA = 0x00;
  4706  0030F2  6B0F               	clrf	15,b	;volatile
  4707                           
  4708                           ; BSR set to: 15
  4709                           ;pin_manager.c: 87: ODCONB = 0x00;
  4710  0030F4  6B17               	clrf	23,b	;volatile
  4711                           
  4712                           ; BSR set to: 15
  4713                           ;pin_manager.c: 88: ODCONC = 0x00;
  4714  0030F6  6B1F               	clrf	31,b	;volatile
  4715                           
  4716                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  4717  0030F8  0E00               	movlw	0
  4718  0030FA  BEF2               	btfsc	intcon,7,c	;volatile
  4719  0030FC  0E01               	movlw	1
  4720  0030FE  0100               	movlb	0	; () banked
  4721  003100  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;pin_manager.c: 96: GIE = 0;
  4725  003102  9EF2               	bcf	intcon,7,c	;volatile
  4726                           
  4727                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  4728  003104  0E55               	movlw	85
  4729  003106  010E               	movlb	14	; () banked
  4730  003108  6FA0               	movwf	160,b	;volatile
  4731                           
  4732                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  4733  00310A  0EAA               	movlw	170
  4734  00310C  6FA0               	movwf	160,b	;volatile
  4735                           
  4736                           ; BSR set to: 14
  4737                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  4738  00310E  91A0               	bcf	160,0,b	;volatile
  4739                           
  4740                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  4741  003110  51B5               	movf	181,w,b	;volatile
  4742  003112  0BE0               	andlw	-32
  4743  003114  0917               	iorlw	23
  4744  003116  6FB5               	movwf	181,b	;volatile
  4745                           
  4746                           ;pin_manager.c: 102: RC6PPS = 0x09;
  4747  003118  0E09               	movlw	9
  4748  00311A  6FFD               	movwf	253,b	;volatile
  4749                           
  4750                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  4751  00311C  0E55               	movlw	85
  4752  00311E  6FA0               	movwf	160,b	;volatile
  4753                           
  4754                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  4755  003120  0EAA               	movlw	170
  4756  003122  6FA0               	movwf	160,b	;volatile
  4757                           
  4758                           ; BSR set to: 14
  4759                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  4760  003124  81A0               	bsf	160,0,b	;volatile
  4761                           
  4762                           ; BSR set to: 14
  4763                           ;pin_manager.c: 108: GIE = state;
  4764  003126  0100               	movlb	0	; () banked
  4765  003128  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  4766  00312A  D002               	goto	u4600
  4767  00312C  8EF2               	bsf	intcon,7,c	;volatile
  4768  00312E  0CAA               	retlw	170
  4769  003130                     u4600:
  4770  003130  9EF2               	bcf	intcon,7,c	;volatile
  4771  003132  0012               	return		;funcret
  4772  003134                     __end_of_PIN_MANAGER_Initialize:
  4773                           	opt stack 0
  4774                           tosu	equ	0xFFF
  4775                           tosh	equ	0xFFE
  4776                           tosl	equ	0xFFD
  4777                           pclath	equ	0xFFA
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           postinc0	equ	0xFEE
  4786                           plusw0	equ	0xFEB
  4787                           wreg	equ	0xFE8
  4788                           indf1	equ	0xFE7
  4789                           postinc1	equ	0xFE6
  4790                           postdec1	equ	0xFE5
  4791                           plusw1	equ	0xFE3
  4792                           fsr1h	equ	0xFE2
  4793                           fsr1l	equ	0xFE1
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           plusw2	equ	0xFDB
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function _OSCILLATOR_Initialize *****************
  4803 ;; Defined at:
  4804 ;;		line 117 in file "mcc_generated_files/mcc.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;		None
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;		None
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 3F/E
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4822 ;;Total ram usage:        0 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    9
  4825 ;; This function calls:
  4826 ;;		Nothing
  4827 ;; This function is called by:
  4828 ;;		_SYSTEM_Initialize
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text15
  4833  003604                     __ptext15:
  4834                           	opt stack 0
  4835  003604                     _OSCILLATOR_Initialize:
  4836                           	opt stack 20
  4837                           
  4838                           ;mcc.c: 120: OSCCON1 = 0x22;
  4839                           
  4840                           ;incstack = 0
  4841  003604  0E22               	movlw	34
  4842  003606  010E               	movlb	14	; () banked
  4843  003608  6FD8               	movwf	216,b	;volatile
  4844                           
  4845                           ; BSR set to: 14
  4846                           ;mcc.c: 122: OSCCON3 = 0x00;
  4847  00360A  6BDA               	clrf	218,b	;volatile
  4848                           
  4849                           ; BSR set to: 14
  4850                           ;mcc.c: 124: OSCEN = 0x00;
  4851  00360C  6BDC               	clrf	220,b	;volatile
  4852                           
  4853                           ;mcc.c: 126: OSCFRQ = 0x02;
  4854  00360E  0E02               	movlw	2
  4855  003610  6FDE               	movwf	222,b	;volatile
  4856                           
  4857                           ; BSR set to: 14
  4858                           ;mcc.c: 128: OSCTUNE = 0x00;
  4859  003612  6BDD               	clrf	221,b	;volatile
  4860  003614                     l848:
  4861                           
  4862                           ; BSR set to: 14
  4863  003614  B1DB               	btfsc	219,0,b	;volatile
  4864                           
  4865                           ; BSR set to: 14
  4866  003616  0012               	return		;funcret
  4867  003618  D7FD               	goto	l848
  4868  00361A                     __end_of_OSCILLATOR_Initialize:
  4869                           	opt stack 0
  4870                           tosu	equ	0xFFF
  4871                           tosh	equ	0xFFE
  4872                           tosl	equ	0xFFD
  4873                           pclath	equ	0xFFA
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           intcon	equ	0xFF2
  4881                           postinc0	equ	0xFEE
  4882                           plusw0	equ	0xFEB
  4883                           wreg	equ	0xFE8
  4884                           indf1	equ	0xFE7
  4885                           postinc1	equ	0xFE6
  4886                           postdec1	equ	0xFE5
  4887                           plusw1	equ	0xFE3
  4888                           fsr1h	equ	0xFE2
  4889                           fsr1l	equ	0xFE1
  4890                           indf2	equ	0xFDF
  4891                           postinc2	equ	0xFDE
  4892                           postdec2	equ	0xFDD
  4893                           plusw2	equ	0xFDB
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _INTERRUPT_Initialize *****************
  4899 ;; Defined at:
  4900 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		None
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:    9
  4921 ;; This function calls:
  4922 ;;		Nothing
  4923 ;; This function is called by:
  4924 ;;		_SYSTEM_Initialize
  4925 ;; This function uses a non-reentrant model
  4926 ;;
  4927                           
  4928                           	psect	text16
  4929  0036E6                     __ptext16:
  4930                           	opt stack 0
  4931  0036E6                     _INTERRUPT_Initialize:
  4932                           	opt stack 20
  4933                           
  4934                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  4935                           
  4936                           ; BSR set to: 14
  4937                           ;incstack = 0
  4938  0036E6  9AF2               	bcf	intcon,5,c	;volatile
  4939  0036E8  0012               	return		;funcret
  4940  0036EA                     __end_of_INTERRUPT_Initialize:
  4941                           	opt stack 0
  4942                           tosu	equ	0xFFF
  4943                           tosh	equ	0xFFE
  4944                           tosl	equ	0xFFD
  4945                           pclath	equ	0xFFA
  4946                           tblptru	equ	0xFF8
  4947                           tblptrh	equ	0xFF7
  4948                           tblptrl	equ	0xFF6
  4949                           tablat	equ	0xFF5
  4950                           prodh	equ	0xFF4
  4951                           prodl	equ	0xFF3
  4952                           intcon	equ	0xFF2
  4953                           postinc0	equ	0xFEE
  4954                           plusw0	equ	0xFEB
  4955                           wreg	equ	0xFE8
  4956                           indf1	equ	0xFE7
  4957                           postinc1	equ	0xFE6
  4958                           postdec1	equ	0xFE5
  4959                           plusw1	equ	0xFE3
  4960                           fsr1h	equ	0xFE2
  4961                           fsr1l	equ	0xFE1
  4962                           indf2	equ	0xFDF
  4963                           postinc2	equ	0xFDE
  4964                           postdec2	equ	0xFDD
  4965                           plusw2	equ	0xFDB
  4966                           fsr2h	equ	0xFDA
  4967                           fsr2l	equ	0xFD9
  4968                           status	equ	0xFD8
  4969                           
  4970 ;; *************** function _ReadGPS *****************
  4971 ;; Defined at:
  4972 ;;		line 174 in file "libs/funcs.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 3F/0
  4983 ;;		On exit  : 3F/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:   15
  4993 ;; This function calls:
  4994 ;;		_ReadGPS_DATE_TIME
  4995 ;; This function is called by:
  4996 ;;		_main
  4997 ;; This function uses a non-reentrant model
  4998 ;;
  4999                           
  5000                           	psect	text17
  5001  003134                     __ptext17:
  5002                           	opt stack 0
  5003  003134                     _ReadGPS:
  5004                           	opt stack 15
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;funcs.c: 175: if (ReadGPS_DATE_TIME()) {
  5008                           
  5009                           ;incstack = 0
  5010  003134  EC32  F00C         	call	_ReadGPS_DATE_TIME	;wreg free
  5011  003138  0900               	iorlw	0
  5012  00313A  E013               	bz	l4790
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;funcs.c: 181: DATE_TIME = GPS_DATE_TIME;
  5016  00313C  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5017  003140  EE10  F0BD         	lfsr	1,_DATE_TIME
  5018  003144  0E0A               	movlw	10
  5019  003146                     u4791:
  5020  003146  CFDB FFE3          	movff	plusw2,plusw1
  5021  00314A  06E8               	decf	wreg,f,c
  5022  00314C  E2FC               	bc	u4791
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;funcs.c: 182: TIME_AT_LAST_GPS_SYNC = DATE_TIME.SECOND;
  5026  00314E  C0BD  F0C8         	movff	_DATE_TIME,_TIME_AT_LAST_GPS_SYNC
  5027  003152  C0BE  F0C9         	movff	_DATE_TIME+1,_TIME_AT_LAST_GPS_SYNC+1
  5028  003156  C0BF  F0CA         	movff	_DATE_TIME+2,_TIME_AT_LAST_GPS_SYNC+2
  5029  00315A  C0C0  F0CB         	movff	_DATE_TIME+3,_TIME_AT_LAST_GPS_SYNC+3
  5030  00315E                     l4788:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;funcs.c: 183: FLAGS_0.bits.b3 = SET;
  5034  00315E  87E6               	bsf	_FLAGS_0& (0+255),3,b
  5035                           
  5036                           ;funcs.c: 184: } else {
  5037  003160  D011               	goto	l4802
  5038  003162                     l4790:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;funcs.c: 185: NO_OF_TIMES_GPS_FAILED++;
  5042  003162  2BE7               	incf	_NO_OF_TIMES_GPS_FAILED& (0+255),f,b
  5043                           
  5044                           ; BSR set to: 0
  5045                           ;funcs.c: 186: if (NO_OF_TIMES_GPS_FAILED > 4) {
  5046  003164  0E04               	movlw	4
  5047  003166  65E7               	cpfsgt	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  5048  003168  D001               	goto	l691
  5049  00316A  D7F9               	goto	l4788
  5050  00316C                     l691:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;funcs.c: 189: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND -
  5054                           ;funcs.c: 190: ((1*60) - (1*60));
  5055  00316C  D80D               	call	PL92	;call to abstracted procedure
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;funcs.c: 191: if (TIME_WHEN_GPS_IS_SWITCHED_ON<0)
  5059  00316E  AFCF               	btfss	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),7,b
  5060  003170  D008               	goto	l4800
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;funcs.c: 192: TIME_WHEN_GPS_IS_SWITCHED_ON += 86400;
  5064  003172  0E80               	movlw	128
  5065  003174  27CC               	addwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),f,b
  5066  003176  0E51               	movlw	81
  5067  003178  23CD               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),f,b
  5068  00317A  0E01               	movlw	1
  5069  00317C  23CE               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),f,b
  5070  00317E  0E00               	movlw	0
  5071  003180  23CF               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),f,b
  5072  003182                     l4800:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;funcs.c: 193: FLAGS_0.bits.b1 = SET;
  5076  003182  83E6               	bsf	_FLAGS_0& (0+255),1,b
  5077  003184                     l4802:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;funcs.c: 194: }
  5081                           ;funcs.c: 195: }
  5082                           ;funcs.c: 196: FLAGS_0.bits.b2 = RESET;
  5083  003184  95E6               	bcf	_FLAGS_0& (0+255),2,b
  5084                           
  5085                           ; BSR set to: 0
  5086  003186  0012               	return		;funcret
  5087  003188                     __end_of_ReadGPS:
  5088                           	opt stack 0
  5089  003188                     PL92:
  5090                           	opt stack 21
  5091  003188  C0BD  F0CC         	movff	_DATE_TIME,_TIME_WHEN_GPS_IS_SWITCHED_ON
  5092  00318C  C0BE  F0CD         	movff	_DATE_TIME+1,_TIME_WHEN_GPS_IS_SWITCHED_ON+1
  5093  003190  C0BF  F0CE         	movff	_DATE_TIME+2,_TIME_WHEN_GPS_IS_SWITCHED_ON+2
  5094  003194  C0C0  F0CF         	movff	_DATE_TIME+3,_TIME_WHEN_GPS_IS_SWITCHED_ON+3
  5095  003198  0012               	return	
  5096  00319A                     __end_ofPL92:
  5097                           	opt stack 0
  5098                           tosu	equ	0xFFF
  5099                           tosh	equ	0xFFE
  5100                           tosl	equ	0xFFD
  5101                           pclath	equ	0xFFA
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           intcon	equ	0xFF2
  5109                           postinc0	equ	0xFEE
  5110                           plusw0	equ	0xFEB
  5111                           wreg	equ	0xFE8
  5112                           indf1	equ	0xFE7
  5113                           postinc1	equ	0xFE6
  5114                           postdec1	equ	0xFE5
  5115                           plusw1	equ	0xFE3
  5116                           fsr1h	equ	0xFE2
  5117                           fsr1l	equ	0xFE1
  5118                           indf2	equ	0xFDF
  5119                           postinc2	equ	0xFDE
  5120                           postdec2	equ	0xFDD
  5121                           plusw2	equ	0xFDB
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _ReadGPS_DATE_TIME *****************
  5127 ;; Defined at:
  5128 ;;		line 115 in file "libs/funcs.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  TempItr         1   77[BANK0 ] unsigned char 
  5133 ;;  Date            7   69[BANK0 ] unsigned char [7]
  5134 ;;  Time            7   62[BANK0 ] unsigned char [7]
  5135 ;;  IsValidGPS      1   76[BANK0 ] enum E11037
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  1    wreg      enum E11037
  5138 ;; Registers used:
  5139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5140 ;; Tracked objects:
  5141 ;;		On entry : 3F/0
  5142 ;;		On exit  : 3F/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5146 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5147 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5148 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5149 ;;Total ram usage:       20 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:   14
  5152 ;; This function calls:
  5153 ;;		_AdjustDayLightSaving
  5154 ;;		_DecreaseByADay
  5155 ;;		_EUSART1_Initialize
  5156 ;;		_GetDay
  5157 ;;		_IncreaseByADay
  5158 ;;		_ReadGPSDateTime
  5159 ;;		_TimeTextToSecond
  5160 ;;		_ValidateDateTime
  5161 ;; This function is called by:
  5162 ;;		_ReadGPS
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           	psect	text18
  5167  001864                     __ptext18:
  5168                           	opt stack 0
  5169  001864                     _ReadGPS_DATE_TIME:
  5170                           	opt stack 15
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;funcs.c: 116: BOOL IsValidGPS = 0;
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;incstack = 0
  5177  001864  6BAC               	clrf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;funcs.c: 117: char Date[] = "------";
  5181  001866  EE20  F0F3         	lfsr	2,ReadGPS_DATE_TIME@F11475
  5182  00186A  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  5183  00186E  0E06               	movlw	6
  5184  001870                     u4461:
  5185  001870  CFDB FFE3          	movff	plusw2,plusw1
  5186  001874  06E8               	decf	wreg,f,c
  5187  001876  E2FC               	bc	u4461
  5188                           
  5189                           ;funcs.c: 118: char Time[] = "------";
  5190  001878  EE20  F0EC         	lfsr	2,ReadGPS_DATE_TIME@F11477
  5191  00187C  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  5192  001880  0E06               	movlw	6
  5193  001882                     u4471:
  5194  001882  CFDB FFE3          	movff	plusw2,plusw1
  5195  001886  06E8               	decf	wreg,f,c
  5196  001888  E2FC               	bc	u4471
  5197                           
  5198                           ; BSR set to: 0
  5199                           ;funcs.c: 119: EUSART1_Initialize();
  5200  00188A  EC17  F01B         	call	_EUSART1_Initialize	;wreg free
  5201                           
  5202                           ; BSR set to: 0
  5203                           ;funcs.c: 120: for (UINT8 TempItr=0; TempItr<5; TempItr++ ) {
  5204  00188E  6BAD               	clrf	ReadGPS_DATE_TIME@TempItr& (0+255),b
  5205  001890                     l4526:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;funcs.c: 121: ReadGPSDateTime(Date, Time);
  5209  001890  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5210  001892  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  5211  001894  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5212  001896  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  5213  001898  ECCB  F014         	call	_ReadGPSDateTime	;wreg free
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;funcs.c: 122: if (ValidateDateTime(Date, Time)) {
  5217  00189C  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5218  00189E  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  5219  0018A0  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5220  0018A2  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  5221  0018A4  EC90  F012         	call	_ValidateDateTime	;wreg free
  5222  0018A8  0900               	iorlw	0
  5223  0018AA  E003               	bz	l4532
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;funcs.c: 123: IsValidGPS = 1;
  5227  0018AC  0E01               	movlw	1
  5228  0018AE  6FAC               	movwf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  5229                           
  5230                           ;funcs.c: 124: break;
  5231  0018B0  D004               	goto	l4536
  5232  0018B2                     l4532:
  5233                           
  5234                           ; BSR set to: 0
  5235  0018B2  2BAD               	incf	ReadGPS_DATE_TIME@TempItr& (0+255),f,b
  5236                           
  5237                           ; BSR set to: 0
  5238  0018B4  0E04               	movlw	4
  5239  0018B6  65AD               	cpfsgt	ReadGPS_DATE_TIME@TempItr& (0+255),b
  5240  0018B8  D7EB               	goto	l4526
  5241  0018BA                     l4536:
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;funcs.c: 125: }
  5245                           ;funcs.c: 126: }
  5246                           ;funcs.c: 127: if (IsValidGPS) {
  5247  0018BA  51AC               	movf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),w,b
  5248  0018BC  E101 D0AD          	bz	l4566
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;funcs.c: 128: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5252  0018C0  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  5253  0018C2  0D0A               	mullw	10
  5254  0018C4  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  5255  0018C6  D8AA               	call	PL96	;call to abstracted procedure
  5256  0018C8  6FB6               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  5257  0018CA  0EFD               	movlw	253
  5258  0018CC  20F4               	addwfc	prodh,w,c
  5259  0018CE  6FB7               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  5260                           
  5261                           ;funcs.c: 129: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5262  0018D0  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  5263  0018D2  0D0A               	mullw	10
  5264  0018D4  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  5265  0018D6  D8A2               	call	PL96	;call to abstracted procedure
  5266  0018D8  6FB8               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  5267  0018DA  0EFD               	movlw	253
  5268  0018DC  20F4               	addwfc	prodh,w,c
  5269  0018DE  6FB9               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  5270                           
  5271                           ; BSR set to: 0
  5272                           ;funcs.c: 130: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  5273  0018E0  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5274  0018E2  6F6E               	movwf	GetDay@Date& (0+255),b
  5275  0018E4  EC16  F011         	call	_GetDay	;wreg free
  5276  0018E8  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  5277  0018EA  0E40               	movlw	64
  5278  0018EC  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  5279  0018EE  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  5280  0018F0  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5281  0018F2  D003               	goto	u4514
  5282  0018F4                     u4515:
  5283  0018F4  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  5284  0018F6  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  5285  0018F8  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5286  0018FA                     u4514:
  5287  0018FA  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  5288  0018FC  D7FB               	goto	u4515
  5289  0018FE  0100               	movlb	0	; () banked
  5290  001900  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5291  001902  51BA               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  5292  001904  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5293  001906  0B01               	andlw	-255
  5294  001908  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5295  00190A  6FBA               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;funcs.c: 131: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  5299  00190C  51FE               	movf	_CENTURY& (0+255),w,b
  5300  00190E  0D64               	mullw	100
  5301  001910  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  5302  001914  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  5303  001918  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  5304  00191A  0D0A               	mullw	10
  5305  00191C  50F3               	movf	prodl,w,c
  5306  00191E  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5307  001920  50F4               	movf	prodh,w,c
  5308  001922  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5309  001924  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  5310  001926  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5311  001928  0E00               	movlw	0
  5312  00192A  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5313  00192C  0EF0               	movlw	240
  5314  00192E  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  5315  001930  6FBB               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  5316  001932  0EFD               	movlw	253
  5317  001934  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5318  001936  6FBC               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  5319                           
  5320                           ;funcs.c: 132: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  5321  001938  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5322  00193A  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  5323  00193C  EC9E  F011         	call	_TimeTextToSecond	;wreg free
  5324  001940  C06C  F0B2         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  5325  001944  C06D  F0B3         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  5326  001948  C06E  F0B4         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  5327  00194C  C06F  F0B5         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;funcs.c: 133: GPS_DATE_TIME.SECOND += TIME_ZONE;
  5331  001950  C0E4  F09A         	movff	_TIME_ZONE,??_ReadGPS_DATE_TIME
  5332  001954  C0E5  F09B         	movff	_TIME_ZONE+1,??_ReadGPS_DATE_TIME+1
  5333  001958  0E00               	movlw	0
  5334  00195A  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  5335  00195C  0EFF               	movlw	255
  5336  00195E  6F9C               	movwf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  5337  001960  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  5338  001962  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  5339  001964  27B2               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5340  001966  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5341  001968  23B3               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5342  00196A  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  5343  00196C  23B4               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5344  00196E  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  5345  001970  23B5               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;funcs.c: 134: if (GPS_DATE_TIME.SECOND < 0) {
  5349  001972  AFB5               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  5350  001974  D01A               	goto	l4552
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;funcs.c: 135: GPS_DATE_TIME.SECOND += 86400;
  5354  001976  0E80               	movlw	128
  5355  001978  27B2               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5356  00197A  0E51               	movlw	81
  5357  00197C  23B3               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5358  00197E  0E01               	movlw	1
  5359  001980  23B4               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5360  001982  0E00               	movlw	0
  5361  001984  23B5               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;funcs.c: 136: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  5365  001986  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5366  00198A  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  5367  00198E  0E0A               	movlw	10
  5368  001990                     u4531:
  5369  001990  CFDB FFEB          	movff	plusw2,plusw0
  5370  001994  06E8               	decf	wreg,f,c
  5371  001996  E2FC               	bc	u4531
  5372  001998  EC18  F012         	call	_DecreaseByADay	;wreg free
  5373  00199C  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5374  0019A0  0E0A               	movlw	10
  5375  0019A2                     u4541:
  5376  0019A2  CFEB FFDB          	movff	plusw0,plusw2
  5377  0019A6  06E8               	decf	wreg,f,c
  5378  0019A8  E2FC               	bc	u4541
  5379  0019AA                     l4552:
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;funcs.c: 137: }
  5383                           ;funcs.c: 138: if (GPS_DATE_TIME.SECOND > 86400) {
  5384  0019AA  BFB5               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  5385  0019AC  D023               	goto	l4558
  5386  0019AE  51B5               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  5387  0019B0  E107               	bnz	u4550
  5388  0019B2  0E81               	movlw	129
  5389  0019B4  5DB2               	subwf	_GPS_DATE_TIME& (0+255),w,b
  5390  0019B6  0E51               	movlw	81
  5391  0019B8  59B3               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  5392  0019BA  0E01               	movlw	1
  5393  0019BC  59B4               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  5394  0019BE  E31A               	bnc	l4558
  5395  0019C0                     u4550:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;funcs.c: 139: GPS_DATE_TIME.SECOND -= 86400;
  5399  0019C0  0E80               	movlw	128
  5400  0019C2  27B2               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5401  0019C4  0EAE               	movlw	174
  5402  0019C6  23B3               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5403  0019C8  0EFE               	movlw	254
  5404  0019CA  23B4               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5405  0019CC  0EFF               	movlw	255
  5406  0019CE  23B5               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;funcs.c: 140: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  5410  0019D0  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5411  0019D4  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  5412  0019D8  0E0A               	movlw	10
  5413  0019DA                     u4561:
  5414  0019DA  CFDB FFEB          	movff	plusw2,plusw0
  5415  0019DE  06E8               	decf	wreg,f,c
  5416  0019E0  E2FC               	bc	u4561
  5417  0019E2  ECEB  F013         	call	_IncreaseByADay	;wreg free
  5418  0019E6  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5419  0019EA  0E0A               	movlw	10
  5420  0019EC                     u4571:
  5421  0019EC  CFEB FFDB          	movff	plusw0,plusw2
  5422  0019F0  06E8               	decf	wreg,f,c
  5423  0019F2  E2FC               	bc	u4571
  5424  0019F4                     l4558:
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;funcs.c: 141: }
  5428                           ;funcs.c: 142: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  5429  0019F4  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5430  0019F8  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  5431  0019FC  0E0A               	movlw	10
  5432  0019FE                     u4581:
  5433  0019FE  CFDB FFEB          	movff	plusw2,plusw0
  5434  001A02  06E8               	decf	wreg,f,c
  5435  001A04  E2FC               	bc	u4581
  5436  001A06  EC84  F010         	call	_AdjustDayLightSaving	;wreg free
  5437  001A0A  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5438  001A0E  0E0A               	movlw	10
  5439  001A10                     u4591:
  5440  001A10  CFEB FFDB          	movff	plusw0,plusw2
  5441  001A14  06E8               	decf	wreg,f,c
  5442  001A16  E2FC               	bc	u4591
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;funcs.c: 143: return 1;
  5446  001A18  0C01               	retlw	1
  5447  001A1A                     l4566:
  5448                           
  5449                           ; BSR set to: 0
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;funcs.c: 145: return 0;
  5453  001A1A  0C00               	retlw	0	;funcret
  5454  001A1C                     __end_of_ReadGPS_DATE_TIME:
  5455                           	opt stack 0
  5456  001A1C                     PL96:
  5457                           	opt stack 15
  5458  001A1C  26F3               	addwf	prodl,f,c
  5459  001A1E  0E00               	movlw	0
  5460  001A20  22F4               	addwfc	prodh,f,c
  5461  001A22  0EF0               	movlw	240
  5462  001A24  24F3               	addwf	prodl,w,c
  5463  001A26  0012               	return	
  5464  001A28                     __end_ofPL96:
  5465                           	opt stack 0
  5466                           tosu	equ	0xFFF
  5467                           tosh	equ	0xFFE
  5468                           tosl	equ	0xFFD
  5469                           pclath	equ	0xFFA
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           postinc0	equ	0xFEE
  5478                           plusw0	equ	0xFEB
  5479                           wreg	equ	0xFE8
  5480                           indf1	equ	0xFE7
  5481                           postinc1	equ	0xFE6
  5482                           postdec1	equ	0xFE5
  5483                           plusw1	equ	0xFE3
  5484                           fsr1h	equ	0xFE2
  5485                           fsr1l	equ	0xFE1
  5486                           indf2	equ	0xFDF
  5487                           postinc2	equ	0xFDE
  5488                           postdec2	equ	0xFDD
  5489                           plusw2	equ	0xFDB
  5490                           fsr2h	equ	0xFDA
  5491                           fsr2l	equ	0xFD9
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function _ValidateDateTime *****************
  5495 ;; Defined at:
  5496 ;;		line 138 in file "libs/gps.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  5499 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5500 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  5501 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  Item            1    3[BANK0 ] char 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  1    wreg      enum E11037
  5506 ;; Registers used:
  5507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5508 ;; Tracked objects:
  5509 ;;		On entry : 3F/0
  5510 ;;		On exit  : 3F/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5513 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5516 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5517 ;;Total ram usage:        4 bytes
  5518 ;; Hardware stack levels used:    1
  5519 ;; Hardware stack levels required when called:    9
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_ReadGPS_DATE_TIME
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text19
  5528  002520                     __ptext19:
  5529                           	opt stack 0
  5530  002520                     _ValidateDateTime:
  5531                           	opt stack 19
  5532                           
  5533                           ; BSR set to: 0
  5534                           ;gps.c: 139: INT8 Item;
  5535                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;incstack = 0
  5539  002520  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5540  002522  D86F               	call	PL110	;call to abstracted procedure
  5541  002524  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5542  002526  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5543  002528  6ED9               	movwf	fsr2l,c
  5544  00252A  6ADA               	clrf	fsr2h,c
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  5548  00252C  D84A               	call	PL10	;call to abstracted procedure
  5549  00252E  A0D8               	btfss	status,0,c
  5550  002530  0C00               	retlw	0
  5551                           
  5552                           ; BSR set to: 0
  5553  002532  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5554  002534  0A80               	xorlw	128
  5555  002536  0F60               	addlw	-160
  5556  002538  E301               	bnc	l3964
  5557                           
  5558                           ; BSR set to: 0
  5559  00253A  0C00               	retlw	0
  5560  00253C                     l3964:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5564  00253C  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5565  00253E  D855               	call	PL70	;call to abstracted procedure
  5566  002540  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5567  002542  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5568  002544  D84D               	call	PL50	;call to abstracted procedure
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  5572  002546  D83D               	call	PL10	;call to abstracted procedure
  5573  002548  A0D8               	btfss	status,0,c
  5574  00254A  0C00               	retlw	0
  5575                           
  5576                           ; BSR set to: 0
  5577  00254C  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5578  00254E  0A80               	xorlw	128
  5579  002550  0F73               	addlw	-141
  5580  002552  E301               	bnc	l3974
  5581  002554  0C00               	retlw	0
  5582  002556                     l3974:
  5583                           
  5584                           ; BSR set to: 0
  5585                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  5586  002556  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5587  002558  D84E               	call	PL76	;call to abstracted procedure
  5588  00255A  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5589  00255C  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5590  00255E  D83B               	call	PL46	;call to abstracted procedure
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  5594  002560  D830               	call	PL10	;call to abstracted procedure
  5595  002562  A0D8               	btfss	status,0,c
  5596  002564  0C00               	retlw	0
  5597                           
  5598                           ; BSR set to: 0
  5599  002566  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5600  002568  0A80               	xorlw	128
  5601  00256A  0F1C               	addlw	-228
  5602  00256C  E301               	bnc	l3984
  5603  00256E  0C00               	retlw	0
  5604  002570                     l3984:
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  5608  002570  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5609  002572  D847               	call	PL110	;call to abstracted procedure
  5610  002574  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5611  002576  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5612  002578  6ED9               	movwf	fsr2l,c
  5613  00257A  6ADA               	clrf	fsr2h,c
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  5617  00257C  D822               	call	PL10	;call to abstracted procedure
  5618  00257E  A0D8               	btfss	status,0,c
  5619  002580  0C00               	retlw	0
  5620                           
  5621                           ; BSR set to: 0
  5622  002582  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5623  002584  0A80               	xorlw	128
  5624  002586  0F68               	addlw	-152
  5625  002588  E301               	bnc	l3994
  5626  00258A  0C00               	retlw	0
  5627  00258C                     l3994:
  5628                           
  5629                           ; BSR set to: 0
  5630                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  5631  00258C  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5632  00258E  D82D               	call	PL70	;call to abstracted procedure
  5633  002590  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5634  002592  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5635  002594  D825               	call	PL50	;call to abstracted procedure
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  5639  002596  D815               	call	PL10	;call to abstracted procedure
  5640  002598  A0D8               	btfss	status,0,c
  5641  00259A  0C00               	retlw	0
  5642                           
  5643                           ; BSR set to: 0
  5644  00259C  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5645  00259E  0A80               	xorlw	128
  5646  0025A0  0F44               	addlw	-188
  5647  0025A2  E301               	bnc	l4004
  5648  0025A4  0C00               	retlw	0
  5649  0025A6                     l4004:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  5653  0025A6  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5654  0025A8  D826               	call	PL76	;call to abstracted procedure
  5655  0025AA  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5656  0025AC  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5657  0025AE  D813               	call	PL46	;call to abstracted procedure
  5658                           
  5659                           ; BSR set to: 0
  5660                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  5661  0025B0  D808               	call	PL10	;call to abstracted procedure
  5662  0025B2  A0D8               	btfss	status,0,c
  5663  0025B4  0C00               	retlw	0
  5664                           
  5665                           ; BSR set to: 0
  5666  0025B6  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5667  0025B8  0A80               	xorlw	128
  5668  0025BA  0F44               	addlw	-188
  5669  0025BC  E301               	bnc	l4014
  5670  0025BE  0C00               	retlw	0
  5671  0025C0                     l4014:
  5672                           
  5673                           ; BSR set to: 0
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;gps.c: 160: return 1;
  5677  0025C0  0C01               	retlw	1	;funcret
  5678  0025C2                     __end_of_ValidateDateTime:
  5679                           	opt stack 0
  5680  0025C2                     PL10:
  5681                           	opt stack 19
  5682  0025C2  50DF               	movf	indf2,w,c
  5683  0025C4  0D0A               	mullw	10
  5684  0025C6  50F3               	movf	prodl,w,c
  5685  0025C8  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  5686  0025CA  0FF0               	addlw	240
  5687  0025CC  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  5688  0025CE  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5689  0025D0  0A80               	xorlw	128
  5690  0025D2  0F7F               	addlw	-129
  5691  0025D4  0012               	return	
  5692  0025D6                     __end_ofPL10:
  5693                           	opt stack 0
  5694  0025D6                     PL46:
  5695                           	opt stack 19
  5696  0025D6  6ED9               	movwf	fsr2l,c
  5697  0025D8  6ADA               	clrf	fsr2h,c
  5698  0025DA  0E04               	movlw	4
  5699  0025DC  26D9               	addwf	fsr2l,f,c
  5700  0025DE  0C04               	retlw	4
  5701  0025E0                     __end_ofPL46:
  5702                           	opt stack 0
  5703  0025E0                     PL50:
  5704                           	opt stack 19
  5705  0025E0  6ED9               	movwf	fsr2l,c
  5706  0025E2  6ADA               	clrf	fsr2h,c
  5707  0025E4  0E02               	movlw	2
  5708  0025E6  26D9               	addwf	fsr2l,f,c
  5709  0025E8  0C02               	retlw	2
  5710  0025EA                     __end_ofPL50:
  5711                           	opt stack 0
  5712  0025EA                     PL70:
  5713                           	opt stack 19
  5714  0025EA  6ED9               	movwf	fsr2l,c
  5715  0025EC  6ADA               	clrf	fsr2h,c
  5716  0025EE  0E03               	movlw	3
  5717  0025F0  26D9               	addwf	fsr2l,f,c
  5718  0025F2  50DF               	movf	indf2,w,c
  5719  0025F4  0012               	return	
  5720  0025F6                     __end_ofPL70:
  5721                           	opt stack 0
  5722  0025F6                     PL76:
  5723                           	opt stack 19
  5724  0025F6  6ED9               	movwf	fsr2l,c
  5725  0025F8  6ADA               	clrf	fsr2h,c
  5726  0025FA  0E05               	movlw	5
  5727  0025FC  26D9               	addwf	fsr2l,f,c
  5728  0025FE  50DF               	movf	indf2,w,c
  5729  002600  0012               	return	
  5730  002602                     __end_ofPL76:
  5731                           	opt stack 0
  5732  002602                     PL110:
  5733                           	opt stack 19
  5734  002602  6ED9               	movwf	fsr2l,c
  5735  002604  6ADA               	clrf	fsr2h,c
  5736  002606  2AD9               	incf	fsr2l,f,c
  5737  002608  50DF               	movf	indf2,w,c
  5738  00260A  0012               	return	
  5739  00260C                     __end_ofPL110:
  5740                           	opt stack 0
  5741                           tosu	equ	0xFFF
  5742                           tosh	equ	0xFFE
  5743                           tosl	equ	0xFFD
  5744                           pclath	equ	0xFFA
  5745                           tblptru	equ	0xFF8
  5746                           tblptrh	equ	0xFF7
  5747                           tblptrl	equ	0xFF6
  5748                           tablat	equ	0xFF5
  5749                           prodh	equ	0xFF4
  5750                           prodl	equ	0xFF3
  5751                           intcon	equ	0xFF2
  5752                           postinc0	equ	0xFEE
  5753                           plusw0	equ	0xFEB
  5754                           wreg	equ	0xFE8
  5755                           indf1	equ	0xFE7
  5756                           postinc1	equ	0xFE6
  5757                           postdec1	equ	0xFE5
  5758                           plusw1	equ	0xFE3
  5759                           fsr1h	equ	0xFE2
  5760                           fsr1l	equ	0xFE1
  5761                           indf2	equ	0xFDF
  5762                           postinc2	equ	0xFDE
  5763                           postdec2	equ	0xFDD
  5764                           plusw2	equ	0xFDB
  5765                           fsr2h	equ	0xFDA
  5766                           fsr2l	equ	0xFD9
  5767                           status	equ	0xFD8
  5768                           
  5769 ;; *************** function _TimeTextToSecond *****************
  5770 ;; Defined at:
  5771 ;;		line 148 in file "libs/funcs.c"
  5772 ;; Parameters:    Size  Location     Type
  5773 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  5774 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  Second          4   32[BANK0 ] long 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  4   12[BANK0 ] long 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 3F/0
  5783 ;;		On exit  : 3F/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5786 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5787 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5788 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5789 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5790 ;;Total ram usage:       24 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:   10
  5793 ;; This function calls:
  5794 ;;		___lmul
  5795 ;; This function is called by:
  5796 ;;		_ReadGPS_DATE_TIME
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           	psect	text20
  5801  00233C                     __ptext20:
  5802                           	opt stack 0
  5803  00233C                     _TimeTextToSecond:
  5804                           	opt stack 18
  5805                           
  5806                           ; BSR set to: 0
  5807                           ;funcs.c: 149: INT32 Second;
  5808                           ;funcs.c: 150: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  5809                           ;funcs.c: 151: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  5810                           ;funcs.c: 152: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814  00233C  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5815  00233E  ECEB  F012         	call	PL46	;call to abstracted procedure
  5816  002342  D872               	call	PL98	;call to abstracted procedure
  5817  002344  ECFB  F012         	call	PL76	;call to abstracted procedure
  5818  002348  EC0E  F00D         	call	PL96	;call to abstracted procedure
  5819  00234C  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  5820  00234E  0EFD               	movlw	253
  5821  002350  20F4               	addwfc	prodh,w,c
  5822  002352  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  5823  002354  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  5824  002356  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  5825  002358  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  5826  00235A  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  5827  00235C  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  5828  00235E  0EF0               	movlw	240
  5829  002360  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  5830  002362  0EFD               	movlw	253
  5831  002364  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  5832  002366  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5833  002368  6ED9               	movwf	fsr2l,c
  5834  00236A  6ADA               	clrf	fsr2h,c
  5835  00236C  D85D               	call	PL98	;call to abstracted procedure
  5836  00236E  EC01  F013         	call	PL110	;call to abstracted procedure
  5837  002372  26F3               	addwf	prodl,f,c
  5838  002374  0E00               	movlw	0
  5839  002376  22F4               	addwfc	prodh,f,c
  5840  002378  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  5841  00237A  26F3               	addwf	prodl,f,c
  5842  00237C  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  5843  00237E  D849               	call	PL68	;call to abstracted procedure
  5844  002380  0E10               	movlw	16
  5845  002382  6F64               	movwf	___lmul@multiplicand& (0+255),b
  5846  002384  0E0E               	movlw	14
  5847  002386  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  5848  002388  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  5849  00238A  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  5850  00238C  EC21  F019         	call	___lmul	;wreg free
  5851  002390  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  5852  002394  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  5853  002398  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  5854  00239C  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  5855  0023A0  0EF0               	movlw	240
  5856  0023A2  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  5857  0023A4  0EFD               	movlw	253
  5858  0023A6  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  5859  0023A8  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5860  0023AA  ECF0  F012         	call	PL50	;call to abstracted procedure
  5861  0023AE  D83C               	call	PL98	;call to abstracted procedure
  5862  0023B0  ECF5  F012         	call	PL70	;call to abstracted procedure
  5863  0023B4  26F3               	addwf	prodl,f,c
  5864  0023B6  0E00               	movlw	0
  5865  0023B8  22F4               	addwfc	prodh,f,c
  5866  0023BA  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  5867  0023BC  26F3               	addwf	prodl,f,c
  5868  0023BE  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  5869  0023C0  D828               	call	PL68	;call to abstracted procedure
  5870  0023C2  0E3C               	movlw	60
  5871  0023C4  6F64               	movwf	___lmul@multiplicand& (0+255),b
  5872  0023C6  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  5873  0023C8  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  5874  0023CA  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  5875  0023CC  EC21  F019         	call	___lmul	;wreg free
  5876  0023D0  5160               	movf	?___lmul& (0+255),w,b
  5877  0023D2  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  5878  0023D4  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  5879  0023D6  5161               	movf	(?___lmul+1)& (0+255),w,b
  5880  0023D8  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  5881  0023DA  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  5882  0023DC  5162               	movf	(?___lmul+2)& (0+255),w,b
  5883  0023DE  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  5884  0023E0  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  5885  0023E2  5163               	movf	(?___lmul+3)& (0+255),w,b
  5886  0023E4  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  5887  0023E6  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  5888  0023E8  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  5889  0023EA  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  5890  0023EC  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  5891  0023EE  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  5892  0023F0  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  5893  0023F2  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  5894  0023F4  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  5895  0023F6  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  5896  0023F8  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  5897  0023FA  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  5898  0023FC  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  5899  0023FE  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  5900                           
  5901                           ; BSR set to: 0
  5902                           ;funcs.c: 153: return Second;
  5903  002400  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  5904  002404  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  5905  002408  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  5906  00240C  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  5907                           
  5908                           ; BSR set to: 0
  5909  002410  0012               	return		;funcret
  5910  002412                     __end_of_TimeTextToSecond:
  5911                           	opt stack 0
  5912  002412                     PL68:
  5913                           	opt stack 18
  5914  002412  22F4               	addwfc	prodh,f,c
  5915  002414  CFF3 F060          	movff	prodl,___lmul@multiplier
  5916  002418  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  5917  00241C  0E00               	movlw	0
  5918  00241E  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  5919  002420  0EFF               	movlw	-1
  5920  002422  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  5921  002424  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  5922  002426  0012               	return	
  5923  002428                     __end_ofPL68:
  5924                           	opt stack 0
  5925  002428                     PL98:
  5926                           	opt stack 18
  5927  002428  50DF               	movf	indf2,w,c
  5928  00242A  0D0A               	mullw	10
  5929  00242C  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5930  00242E  0012               	return	
  5931  002430                     __end_ofPL98:
  5932                           	opt stack 0
  5933                           tosu	equ	0xFFF
  5934                           tosh	equ	0xFFE
  5935                           tosl	equ	0xFFD
  5936                           pclath	equ	0xFFA
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           prodh	equ	0xFF4
  5942                           prodl	equ	0xFF3
  5943                           intcon	equ	0xFF2
  5944                           postinc0	equ	0xFEE
  5945                           plusw0	equ	0xFEB
  5946                           wreg	equ	0xFE8
  5947                           indf1	equ	0xFE7
  5948                           postinc1	equ	0xFE6
  5949                           postdec1	equ	0xFE5
  5950                           plusw1	equ	0xFE3
  5951                           fsr1h	equ	0xFE2
  5952                           fsr1l	equ	0xFE1
  5953                           indf2	equ	0xFDF
  5954                           postinc2	equ	0xFDE
  5955                           postdec2	equ	0xFDD
  5956                           plusw2	equ	0xFDB
  5957                           fsr2h	equ	0xFDA
  5958                           fsr2l	equ	0xFD9
  5959                           status	equ	0xFD8
  5960                           
  5961 ;; *************** function _ReadGPSDateTime *****************
  5962 ;; Defined at:
  5963 ;;		line 39 in file "libs/gps.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  5966 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5967 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  5968 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  StartCode       8    6[BANK0 ] const unsigned char [8]
  5971 ;;  i               2   14[BANK0 ] unsigned short 
  5972 ;;  Pos             1   18[BANK0 ] unsigned char 
  5973 ;;  TempChar        1   17[BANK0 ] unsigned char 
  5974 ;;  Commas          1   16[BANK0 ] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      void 
  5977 ;; Registers used:
  5978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 3F/0
  5981 ;;		On exit  : 3F/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5985 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5986 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5987 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5988 ;;Total ram usage:       19 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:   10
  5991 ;; This function calls:
  5992 ;;		_EUSART1_Read
  5993 ;; This function is called by:
  5994 ;;		_ReadGPS_DATE_TIME
  5995 ;; This function uses a non-reentrant model
  5996 ;;
  5997                           
  5998                           	psect	text21
  5999  002996                     __ptext21:
  6000                           	opt stack 0
  6001  002996                     _ReadGPSDateTime:
  6002                           	opt stack 18
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;gps.c: 40: const char StartCode[]="$GPRMC,";
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;incstack = 0
  6009  002996  0E01               	movlw	low ReadGPSDateTime@F11468
  6010  002998  6EF6               	movwf	tblptrl,c
  6011  00299A                     	if	1	;There is more than 1 active tblptr byte
  6012  00299A  0E0F               	movlw	high ReadGPSDateTime@F11468
  6013  00299C  6EF7               	movwf	tblptrh,c
  6014  00299E                     	endif
  6015  00299E                     	if	1	;There are 3 active tblptr bytes
  6016  00299E  0E00               	movlw	low (ReadGPSDateTime@F11468 shr (0+16))
  6017  0029A0  6EF8               	movwf	tblptru,c
  6018  0029A2                     	endif
  6019  0029A2  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  6020  0029A6  0E07               	movlw	7
  6021  0029A8                     u3600:
  6022  0029A8  0009               	tblrd		*+
  6023  0029AA  CFF5 FFDE          	movff	tablat,postinc2
  6024  0029AE  06E8               	decf	wreg,f,c
  6025  0029B0  E2FB               	bc	u3600
  6026                           
  6027                           ; BSR set to: 0
  6028                           ;gps.c: 41: char Pos=0x00;
  6029  0029B2  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;gps.c: 43: UINT16 i=0;
  6033                           
  6034                           ; BSR set to: 0
  6035  0029B4  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  6036  0029B6  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;gps.c: 44: UINT8 Commas=0;
  6040  0029B8  6B70               	clrf	ReadGPSDateTime@Commas& (0+255),b
  6041  0029BA                     l3908:
  6042                           
  6043                           ; BSR set to: 0
  6044                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  6045  0029BA  010E               	movlb	14	; () banked
  6046  0029BC  ABCD               	btfss	205,5,b	;volatile
  6047  0029BE  D047               	goto	l3942
  6048                           
  6049                           ; BSR set to: 14
  6050                           ;gps.c: 47: i=0;
  6051  0029C0  0100               	movlb	0	; () banked
  6052  0029C2  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  6053  0029C4  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;gps.c: 48: TempChar = EUSART1_Read();
  6057  0029C6  EC35  F01B         	call	_EUSART1_Read	;wreg free
  6058  0029CA  0100               	movlb	0	; () banked
  6059  0029CC  6F71               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  6060                           
  6061                           ; BSR set to: 0
  6062                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  6063  0029CE  0E06               	movlw	6
  6064  0029D0  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  6065  0029D2  D00D               	goto	l3922
  6066                           
  6067                           ; BSR set to: 0
  6068  0029D4  0E0D               	movlw	13
  6069  0029D6  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  6070  0029D8  D00A               	goto	l3922
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  6074  0029DA  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  6075  0029DC  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  6076  0029DE  6ED9               	movwf	fsr2l,c
  6077  0029E0  6ADA               	clrf	fsr2h,c
  6078  0029E2  0EF9               	movlw	249
  6079  0029E4  26D9               	addwf	fsr2l,f,c
  6080  0029E6  C071  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  6081  0029EA                     l3920:
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;gps.c: 51: Pos++;
  6085  0029EA  2B72               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  6086                           
  6087                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  6088  0029EC  D034               	goto	l3944
  6089  0029EE                     l3922:
  6090                           
  6091                           ; BSR set to: 0
  6092  0029EE  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  6093  0029F0  0F66               	addlw	low ReadGPSDateTime@StartCode
  6094  0029F2  6ED9               	movwf	fsr2l,c
  6095  0029F4  6ADA               	clrf	fsr2h,c
  6096  0029F6  5171               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  6097  0029F8  18DE               	xorwf	postinc2,w,c
  6098  0029FA  E104               	bnz	l3928
  6099                           
  6100                           ; BSR set to: 0
  6101  0029FC  0E07               	movlw	7
  6102  0029FE  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  6103  002A00  D001               	goto	l3928
  6104  002A02  D7F3               	goto	l3920
  6105  002A04                     l3928:
  6106                           
  6107                           ; BSR set to: 0
  6108  002A04  0E0C               	movlw	12
  6109  002A06  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  6110  002A08  D020               	goto	l127
  6111                           
  6112                           ; BSR set to: 0
  6113                           ;gps.c: 55: if (Commas<8) {
  6114  002A0A  0E08               	movlw	8
  6115  002A0C  6170               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  6116  002A0E  D005               	goto	l3936
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;gps.c: 56: if (TempChar == 0x2C)
  6120  002A10  0E2C               	movlw	44
  6121  002A12  1971               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  6122  002A14  E120               	bnz	l3944
  6123                           
  6124                           ; BSR set to: 0
  6125                           ;gps.c: 57: Commas++;
  6126  002A16  2B70               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  6127  002A18  D01E               	goto	l3944
  6128  002A1A                     l3936:
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  6132  002A1A  0EF3               	movlw	243
  6133  002A1C  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  6134  002A1E  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  6135  002A20  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  6136  002A22  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  6137  002A24  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  6138  002A26  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  6139  002A28  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  6140  002A2A  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  6141  002A2C  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  6142  002A2E  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  6143  002A30  D006               	goto	l3938
  6144  002A32  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  6145  002A34  E118               	bnz	l133
  6146  002A36  0E06               	movlw	6
  6147  002A38  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  6148  002A3A  B0D8               	btfsc	status,0,c
  6149  002A3C  0012               	return	
  6150  002A3E                     l3938:
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  6154  002A3E  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  6155  002A40  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  6156  002A42  6ED9               	movwf	fsr2l,c
  6157  002A44  6ADA               	clrf	fsr2h,c
  6158  002A46  0EF3               	movlw	243
  6159  002A48  D7CD               	goto	L4
  6160  002A4A                     l127:
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;gps.c: 66: Pos=0;
  6164  002A4A  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  6165                           
  6166                           ; BSR set to: 0
  6167  002A4C  D004               	goto	l3944
  6168  002A4E                     l3942:
  6169                           
  6170                           ; BSR set to: 14
  6171                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  6172  002A4E  0E06               	movlw	6
  6173  002A50                     u5037:
  6174  002A50  2EE8               	decfsz	wreg,f,c
  6175  002A52  D7FE               	bra	u5037
  6176  002A54  D000               	nop2	
  6177  002A56                     l3944:
  6178                           
  6179                           ;gps.c: 69: i++;
  6180  002A56  0100               	movlb	0	; () banked
  6181  002A58  4B6E               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  6182  002A5A  2B6F               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  6183                           
  6184                           ;gps.c: 70: } while(i<5000);
  6185  002A5C  0E88               	movlw	136
  6186  002A5E  5D6E               	subwf	ReadGPSDateTime@i& (0+255),w,b
  6187  002A60  0E13               	movlw	19
  6188  002A62  596F               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  6189  002A64  E3AA               	bnc	l3908
  6190  002A66                     l133:
  6191                           
  6192                           ; BSR set to: 0
  6193  002A66  0012               	return		;funcret
  6194  002A68                     __end_of_ReadGPSDateTime:
  6195                           	opt stack 0
  6196                           tosu	equ	0xFFF
  6197                           tosh	equ	0xFFE
  6198                           tosl	equ	0xFFD
  6199                           pclath	equ	0xFFA
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           postinc0	equ	0xFEE
  6208                           plusw0	equ	0xFEB
  6209                           wreg	equ	0xFE8
  6210                           indf1	equ	0xFE7
  6211                           postinc1	equ	0xFE6
  6212                           postdec1	equ	0xFE5
  6213                           plusw1	equ	0xFE3
  6214                           fsr1h	equ	0xFE2
  6215                           fsr1l	equ	0xFE1
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           plusw2	equ	0xFDB
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _EUSART1_Read *****************
  6225 ;; Defined at:
  6226 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;                  1    wreg      unsigned char 
  6233 ;; Registers used:
  6234 ;;		wreg, status,2
  6235 ;; Tracked objects:
  6236 ;;		On entry : 3F/0
  6237 ;;		On exit  : 3F/E
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    9
  6247 ;; This function calls:
  6248 ;;		Nothing
  6249 ;; This function is called by:
  6250 ;;		_ReadGPSDateTime
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text22
  6255  00366A                     __ptext22:
  6256                           	opt stack 0
  6257  00366A                     _EUSART1_Read:
  6258                           	opt stack 18
  6259  00366A                     l744:
  6260  00366A  010E               	movlb	14	; () banked
  6261  00366C  ABCD               	btfss	205,5,b	;volatile
  6262  00366E  D7FD               	goto	l744
  6263                           
  6264                           ; BSR set to: 14
  6265                           ;eusart1.c: 82: }
  6266                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  6267  003670  A29D               	btfss	3997,1,c	;volatile
  6268  003672  D002               	goto	l3550
  6269                           
  6270                           ; BSR set to: 14
  6271                           ;eusart1.c: 86: {
  6272                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  6273  003674  9E9D               	bcf	3997,7,c	;volatile
  6274                           
  6275                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  6276  003676  8E9D               	bsf	3997,7,c	;volatile
  6277  003678                     l3550:
  6278                           
  6279                           ; BSR set to: 14
  6280                           ;eusart1.c: 91: }
  6281                           ;eusart1.c: 93: return RC1REG;
  6282  003678  5099               	movf	3993,w,c	;volatile
  6283                           
  6284                           ; BSR set to: 14
  6285  00367A  0012               	return		;funcret
  6286  00367C                     __end_of_EUSART1_Read:
  6287                           	opt stack 0
  6288                           tosu	equ	0xFFF
  6289                           tosh	equ	0xFFE
  6290                           tosl	equ	0xFFD
  6291                           pclath	equ	0xFFA
  6292                           tblptru	equ	0xFF8
  6293                           tblptrh	equ	0xFF7
  6294                           tblptrl	equ	0xFF6
  6295                           tablat	equ	0xFF5
  6296                           prodh	equ	0xFF4
  6297                           prodl	equ	0xFF3
  6298                           intcon	equ	0xFF2
  6299                           postinc0	equ	0xFEE
  6300                           plusw0	equ	0xFEB
  6301                           wreg	equ	0xFE8
  6302                           indf1	equ	0xFE7
  6303                           postinc1	equ	0xFE6
  6304                           postdec1	equ	0xFE5
  6305                           plusw1	equ	0xFE3
  6306                           fsr1h	equ	0xFE2
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           plusw2	equ	0xFDB
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316 ;; *************** function _GetDay *****************
  6317 ;; Defined at:
  6318 ;;		line 129 in file "libs/gps.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  6321 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;  y               2   23[BANK0 ] int 
  6324 ;;  m               1   22[BANK0 ] unsigned char 
  6325 ;;  d               1   21[BANK0 ] unsigned char 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      char 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 3F/0
  6332 ;;		On exit  : 3F/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6335 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6337 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6338 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6339 ;;Total ram usage:       11 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:   10
  6342 ;; This function calls:
  6343 ;;		___awdiv
  6344 ;;		___awmod
  6345 ;; This function is called by:
  6346 ;;		_ReadGPS_DATE_TIME
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text23
  6351  00222C                     __ptext23:
  6352                           	opt stack 0
  6353  00222C                     _GetDay:
  6354                           	opt stack 18
  6355                           
  6356                           ; BSR set to: 0
  6357                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  6358                           
  6359                           ; BSR set to: 14
  6360                           ;incstack = 0
  6361  00222C  516E               	movf	GetDay@Date& (0+255),w,b
  6362  00222E  EC01  F013         	call	PL110	;call to abstracted procedure
  6363  002232  D87F               	call	PL148	;call to abstracted procedure
  6364  002234  50DF               	movf	indf2,w,c
  6365  002236  0D0A               	mullw	10
  6366  002238  50F3               	movf	prodl,w,c
  6367  00223A  256F               	addwf	??_GetDay& (0+255),w,b
  6368  00223C  0FF0               	addlw	240
  6369  00223E  6F75               	movwf	GetDay@d& (0+255),b
  6370                           
  6371                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  6372  002240  516E               	movf	GetDay@Date& (0+255),w,b
  6373  002242  ECF5  F012         	call	PL70	;call to abstracted procedure
  6374  002246  D875               	call	PL148	;call to abstracted procedure
  6375  002248  0E02               	movlw	2
  6376  00224A  D868               	call	PL14	;call to abstracted procedure
  6377  00224C  256F               	addwf	??_GetDay& (0+255),w,b
  6378  00224E  0FF0               	addlw	240
  6379  002250  6F76               	movwf	GetDay@m& (0+255),b
  6380                           
  6381                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  6382  002252  51FE               	movf	_CENTURY& (0+255),w,b
  6383  002254  0D64               	mullw	100
  6384  002256  CFF3 F06F          	movff	prodl,??_GetDay
  6385  00225A  CFF4 F070          	movff	prodh,??_GetDay+1
  6386  00225E  516E               	movf	GetDay@Date& (0+255),w,b
  6387  002260  6ED9               	movwf	fsr2l,c
  6388  002262  6ADA               	clrf	fsr2h,c
  6389  002264  0E04               	movlw	4
  6390  002266  D85A               	call	PL14	;call to abstracted procedure
  6391  002268  276F               	addwf	??_GetDay& (0+255),f,b
  6392  00226A  50F4               	movf	prodh,w,c
  6393  00226C  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  6394  00226E  516E               	movf	GetDay@Date& (0+255),w,b
  6395  002270  ECFB  F012         	call	PL76	;call to abstracted procedure
  6396  002274  276F               	addwf	??_GetDay& (0+255),f,b
  6397  002276  0E00               	movlw	0
  6398  002278  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  6399  00227A  0EF0               	movlw	240
  6400  00227C  256F               	addwf	??_GetDay& (0+255),w,b
  6401  00227E  6F77               	movwf	GetDay@y& (0+255),b
  6402  002280  0EFD               	movlw	253
  6403  002282  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  6404  002284  6F78               	movwf	(GetDay@y+1)& (0+255),b
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  6408                           ;gps.c: 134: y -= m < 3;
  6409  002286  0E02               	movlw	2
  6410  002288  6576               	cpfsgt	GetDay@m& (0+255),b
  6411  00228A  D001               	goto	u3711
  6412  00228C  D002               	goto	u3710
  6413  00228E                     u3711:
  6414  00228E  0E01               	movlw	1
  6415  002290  D001               	goto	u3720
  6416  002292                     u3710:
  6417  002292  0E00               	movlw	0
  6418  002294                     u3720:
  6419  002294  5F77               	subwf	GetDay@y& (0+255),f,b
  6420  002296  0E00               	movlw	0
  6421  002298  5B78               	subwfb	(GetDay@y+1)& (0+255),f,b
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  6425  00229A  5176               	movf	GetDay@m& (0+255),w,b
  6426  00229C  6F6F               	movwf	??_GetDay& (0+255),b
  6427  00229E  6B70               	clrf	(??_GetDay+1)& (0+255),b
  6428  0022A0  90D8               	bcf	status,0,c
  6429  0022A2  376F               	rlcf	??_GetDay& (0+255),f,b
  6430  0022A4  3770               	rlcf	(??_GetDay+1)& (0+255),f,b
  6431  0022A6  0E5A               	movlw	low (GetDay@t+65534)
  6432  0022A8  256F               	addwf	??_GetDay& (0+255),w,b
  6433  0022AA  6ED9               	movwf	fsr2l,c
  6434  0022AC  0E01               	movlw	high (GetDay@t+65534)
  6435  0022AE  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  6436  0022B0  6EDA               	movwf	fsr2h,c
  6437  0022B2  CFDE F071          	movff	postinc2,??_GetDay+2
  6438  0022B6  CFDD F072          	movff	postdec2,??_GetDay+3
  6439  0022BA  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6440  0022BC  0E04               	movlw	4
  6441  0022BE  D833               	call	PL100	;call to abstracted procedure
  6442  0022C0  ECF7  F017         	call	___awdiv	;wreg free
  6443  0022C4  C060  F073         	movff	?___awdiv,??_GetDay+4
  6444  0022C8  C061  F074         	movff	?___awdiv+1,??_GetDay+5
  6445  0022CC  0E01               	movlw	1
  6446  0022CE  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6447  0022D0  0E90               	movlw	144
  6448  0022D2  D829               	call	PL100	;call to abstracted procedure
  6449  0022D4  ECF7  F017         	call	___awdiv	;wreg free
  6450  0022D8  5160               	movf	?___awdiv& (0+255),w,b
  6451  0022DA  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6452  0022DC  5161               	movf	(?___awdiv+1)& (0+255),w,b
  6453  0022DE  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6454  0022E0  5175               	movf	GetDay@d& (0+255),w,b
  6455  0022E2  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6456  0022E4  0E00               	movlw	0
  6457  0022E6  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6458  0022E8  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6459  0022EA  0E64               	movlw	100
  6460  0022EC  D81C               	call	PL100	;call to abstracted procedure
  6461  0022EE  ECF7  F017         	call	___awdiv	;wreg free
  6462  0022F2  5160               	movf	?___awdiv& (0+255),w,b
  6463  0022F4  5F73               	subwf	(??_GetDay+4)& (0+255),f,b
  6464  0022F6  5161               	movf	(?___awdiv+1)& (0+255),w,b
  6465  0022F8  5B74               	subwfb	(??_GetDay+5)& (0+255),f,b
  6466  0022FA  5171               	movf	(??_GetDay+2)& (0+255),w,b
  6467  0022FC  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6468  0022FE  5172               	movf	(??_GetDay+3)& (0+255),w,b
  6469  002300  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6470  002302  5177               	movf	GetDay@y& (0+255),w,b
  6471  002304  2573               	addwf	(??_GetDay+4)& (0+255),w,b
  6472  002306  6F68               	movwf	___awmod@dividend& (0+255),b
  6473  002308  5178               	movf	(GetDay@y+1)& (0+255),w,b
  6474  00230A  2174               	addwfc	(??_GetDay+5)& (0+255),w,b
  6475  00230C  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  6476  00230E  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  6477  002310  0E07               	movlw	7
  6478  002312  6F6A               	movwf	___awmod@divisor& (0+255),b
  6479  002314  EC33  F018         	call	___awmod	;wreg free
  6480  002318  5168               	movf	?___awmod& (0+255),w,b
  6481                           
  6482                           ; BSR set to: 0
  6483  00231A  0012               	return		;funcret
  6484  00231C                     __end_of_GetDay:
  6485                           	opt stack 0
  6486  00231C                     PL14:
  6487                           	opt stack 18
  6488  00231C  26D9               	addwf	fsr2l,f,c
  6489  00231E  50DF               	movf	indf2,w,c
  6490  002320  0D0A               	mullw	10
  6491  002322  50F3               	movf	prodl,w,c
  6492  002324  0012               	return	
  6493  002326                     __end_ofPL14:
  6494                           	opt stack 0
  6495  002326                     PL100:
  6496                           	opt stack 18
  6497  002326  6F62               	movwf	___awdiv@divisor& (0+255),b
  6498  002328  C077  F060         	movff	GetDay@y,___awdiv@dividend
  6499  00232C  C078  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  6500  002330  0012               	return	
  6501  002332                     __end_ofPL100:
  6502                           	opt stack 0
  6503  002332                     PL148:
  6504                           	opt stack 18
  6505  002332  6F6F               	movwf	??_GetDay& (0+255),b
  6506  002334  516E               	movf	GetDay@Date& (0+255),w,b
  6507  002336  6ED9               	movwf	fsr2l,c
  6508  002338  6ADA               	clrf	fsr2h,c
  6509  00233A  0012               	return	
  6510  00233C                     __end_ofPL148:
  6511                           	opt stack 0
  6512                           tosu	equ	0xFFF
  6513                           tosh	equ	0xFFE
  6514                           tosl	equ	0xFFD
  6515                           pclath	equ	0xFFA
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           intcon	equ	0xFF2
  6523                           postinc0	equ	0xFEE
  6524                           plusw0	equ	0xFEB
  6525                           wreg	equ	0xFE8
  6526                           indf1	equ	0xFE7
  6527                           postinc1	equ	0xFE6
  6528                           postdec1	equ	0xFE5
  6529                           plusw1	equ	0xFE3
  6530                           fsr1h	equ	0xFE2
  6531                           fsr1l	equ	0xFE1
  6532                           indf2	equ	0xFDF
  6533                           postinc2	equ	0xFDE
  6534                           postdec2	equ	0xFDD
  6535                           plusw2	equ	0xFDB
  6536                           fsr2h	equ	0xFDA
  6537                           fsr2l	equ	0xFD9
  6538                           status	equ	0xFD8
  6539                           
  6540 ;; *************** function ___awmod *****************
  6541 ;; Defined at:
  6542 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  6543 ;; Parameters:    Size  Location     Type
  6544 ;;  dividend        2    8[BANK0 ] int 
  6545 ;;  divisor         2   10[BANK0 ] int 
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;  sign            1   13[BANK0 ] unsigned char 
  6548 ;;  counter         1   12[BANK0 ] unsigned char 
  6549 ;; Return value:  Size  Location     Type
  6550 ;;                  2    8[BANK0 ] int 
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0
  6553 ;; Tracked objects:
  6554 ;;		On entry : 3F/0
  6555 ;;		On exit  : 3F/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6558 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6559 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6560 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6561 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6562 ;;Total ram usage:        6 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    9
  6565 ;; This function calls:
  6566 ;;		Nothing
  6567 ;; This function is called by:
  6568 ;;		_GetDay
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text24
  6573  003066                     __ptext24:
  6574                           	opt stack 0
  6575  003066                     ___awmod:
  6576                           	opt stack 18
  6577                           
  6578                           ; BSR set to: 0
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;incstack = 0
  6582  003066  6B6D               	clrf	___awmod@sign& (0+255),b
  6583                           
  6584                           ; BSR set to: 0
  6585  003068  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6586  00306A  D006               	goto	l3784
  6587                           
  6588                           ; BSR set to: 0
  6589  00306C  6D68               	negf	___awmod@dividend& (0+255),b
  6590  00306E  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  6591  003070  B0D8               	btfsc	status,0,c
  6592  003072  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  6593                           
  6594                           ; BSR set to: 0
  6595  003074  0E01               	movlw	1
  6596  003076  6F6D               	movwf	___awmod@sign& (0+255),b
  6597  003078                     l3784:
  6598                           
  6599                           ; BSR set to: 0
  6600  003078  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6601  00307A  D004               	goto	l3788
  6602                           
  6603                           ; BSR set to: 0
  6604  00307C  6D6A               	negf	___awmod@divisor& (0+255),b
  6605  00307E  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  6606  003080  B0D8               	btfsc	status,0,c
  6607  003082  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  6608  003084                     l3788:
  6609                           
  6610                           ; BSR set to: 0
  6611  003084  516A               	movf	___awmod@divisor& (0+255),w,b
  6612  003086  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6613  003088  E017               	bz	l3804
  6614                           
  6615                           ; BSR set to: 0
  6616  00308A  0E01               	movlw	1
  6617  00308C  6F6C               	movwf	___awmod@counter& (0+255),b
  6618  00308E  D004               	goto	l3794
  6619  003090                     l3792:
  6620                           
  6621                           ; BSR set to: 0
  6622  003090  90D8               	bcf	status,0,c
  6623  003092  376A               	rlcf	___awmod@divisor& (0+255),f,b
  6624  003094  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6625  003096  2B6C               	incf	___awmod@counter& (0+255),f,b
  6626  003098                     l3794:
  6627                           
  6628                           ; BSR set to: 0
  6629  003098  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6630  00309A  D7FA               	goto	l3792
  6631  00309C                     l3796:
  6632                           
  6633                           ; BSR set to: 0
  6634  00309C  516A               	movf	___awmod@divisor& (0+255),w,b
  6635  00309E  5D68               	subwf	___awmod@dividend& (0+255),w,b
  6636  0030A0  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  6637  0030A2  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6638  0030A4  E304               	bnc	l3800
  6639                           
  6640                           ; BSR set to: 0
  6641  0030A6  516A               	movf	___awmod@divisor& (0+255),w,b
  6642  0030A8  5F68               	subwf	___awmod@dividend& (0+255),f,b
  6643  0030AA  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  6644  0030AC  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6645  0030AE                     l3800:
  6646                           
  6647                           ; BSR set to: 0
  6648  0030AE  90D8               	bcf	status,0,c
  6649  0030B0  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6650  0030B2  336A               	rrcf	___awmod@divisor& (0+255),f,b
  6651                           
  6652                           ; BSR set to: 0
  6653  0030B4  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  6654  0030B6  D7F2               	goto	l3796
  6655  0030B8                     l3804:
  6656                           
  6657                           ; BSR set to: 0
  6658  0030B8  516D               	movf	___awmod@sign& (0+255),w,b
  6659  0030BA  E004               	bz	l3808
  6660                           
  6661                           ; BSR set to: 0
  6662  0030BC  6D68               	negf	___awmod@dividend& (0+255),b
  6663  0030BE  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  6664  0030C0  B0D8               	btfsc	status,0,c
  6665  0030C2  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  6666  0030C4                     l3808:
  6667                           
  6668                           ; BSR set to: 0
  6669  0030C4  C068  F068         	movff	___awmod@dividend,?___awmod
  6670  0030C8  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  6671                           
  6672                           ; BSR set to: 0
  6673  0030CC  0012               	return		;funcret
  6674  0030CE                     __end_of___awmod:
  6675                           	opt stack 0
  6676                           tosu	equ	0xFFF
  6677                           tosh	equ	0xFFE
  6678                           tosl	equ	0xFFD
  6679                           pclath	equ	0xFFA
  6680                           tblptru	equ	0xFF8
  6681                           tblptrh	equ	0xFF7
  6682                           tblptrl	equ	0xFF6
  6683                           tablat	equ	0xFF5
  6684                           prodh	equ	0xFF4
  6685                           prodl	equ	0xFF3
  6686                           intcon	equ	0xFF2
  6687                           postinc0	equ	0xFEE
  6688                           plusw0	equ	0xFEB
  6689                           wreg	equ	0xFE8
  6690                           indf1	equ	0xFE7
  6691                           postinc1	equ	0xFE6
  6692                           postdec1	equ	0xFE5
  6693                           plusw1	equ	0xFE3
  6694                           fsr1h	equ	0xFE2
  6695                           fsr1l	equ	0xFE1
  6696                           indf2	equ	0xFDF
  6697                           postinc2	equ	0xFDE
  6698                           postdec2	equ	0xFDD
  6699                           plusw2	equ	0xFDB
  6700                           fsr2h	equ	0xFDA
  6701                           fsr2l	equ	0xFD9
  6702                           status	equ	0xFD8
  6703                           
  6704 ;; *************** function _EUSART1_Initialize *****************
  6705 ;; Defined at:
  6706 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;		None
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      void 
  6713 ;; Registers used:
  6714 ;;		wreg, status,2
  6715 ;; Tracked objects:
  6716 ;;		On entry : 3F/0
  6717 ;;		On exit  : 3F/0
  6718 ;;		Unchanged: 3F/0
  6719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6724 ;;Total ram usage:        0 bytes
  6725 ;; Hardware stack levels used:    1
  6726 ;; Hardware stack levels required when called:    9
  6727 ;; This function calls:
  6728 ;;		Nothing
  6729 ;; This function is called by:
  6730 ;;		_ReadGPS_DATE_TIME
  6731 ;;		_SYSTEM_Initialize
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text25
  6736  00362E                     __ptext25:
  6737                           	opt stack 0
  6738  00362E                     _EUSART1_Initialize:
  6739                           	opt stack 20
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6743                           
  6744                           ; BSR set to: 0
  6745                           ;incstack = 0
  6746  00362E  0E08               	movlw	8
  6747  003630  6E9F               	movwf	3999,c	;volatile
  6748                           
  6749                           ;eusart1.c: 63: RC1STA = 0x90;
  6750  003632  0E90               	movlw	144
  6751  003634  6E9D               	movwf	3997,c	;volatile
  6752                           
  6753                           ;eusart1.c: 66: TX1STA = 0x84;
  6754  003636  0E84               	movlw	132
  6755  003638  6E9E               	movwf	3998,c	;volatile
  6756                           
  6757                           ;eusart1.c: 69: SP1BRGL = 0x67;
  6758  00363A  0E67               	movlw	103
  6759  00363C  6E9B               	movwf	3995,c	;volatile
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;eusart1.c: 72: SP1BRGH = 0x00;
  6763  00363E  6A9C               	clrf	3996,c	;volatile
  6764                           
  6765                           ; BSR set to: 0
  6766  003640  0012               	return		;funcret
  6767  003642                     __end_of_EUSART1_Initialize:
  6768                           	opt stack 0
  6769                           tosu	equ	0xFFF
  6770                           tosh	equ	0xFFE
  6771                           tosl	equ	0xFFD
  6772                           pclath	equ	0xFFA
  6773                           tblptru	equ	0xFF8
  6774                           tblptrh	equ	0xFF7
  6775                           tblptrl	equ	0xFF6
  6776                           tablat	equ	0xFF5
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           postinc0	equ	0xFEE
  6781                           plusw0	equ	0xFEB
  6782                           wreg	equ	0xFE8
  6783                           indf1	equ	0xFE7
  6784                           postinc1	equ	0xFE6
  6785                           postdec1	equ	0xFE5
  6786                           plusw1	equ	0xFE3
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           plusw2	equ	0xFDB
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function _AdjustDayLightSaving *****************
  6798 ;; Defined at:
  6799 ;;		line 93 in file "libs/funcs.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  Present         2   56[BANK0 ] unsigned short 
  6804 ;;  End             2   54[BANK0 ] unsigned short 
  6805 ;;  Start           2   52[BANK0 ] unsigned short 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  6808 ;; Registers used:
  6809 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 3F/0
  6812 ;;		On exit  : 3F/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6815 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6816 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6818 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6819 ;;Total ram usage:       17 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:   13
  6822 ;; This function calls:
  6823 ;;		_DecreaseByADay
  6824 ;;		_IncreaseByADay
  6825 ;;		___wmul
  6826 ;; This function is called by:
  6827 ;;		_ReadGPS_DATE_TIME
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           	psect	text26
  6832  002108                     __ptext26:
  6833                           	opt stack 0
  6834  002108                     _AdjustDayLightSaving:
  6835                           	opt stack 15
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;funcs.c: 94: UINT16 Start, End, Present;
  6839                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;incstack = 0
  6843  002108  C0DE  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  6844  00210C  C0DF  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  6845  002110  D889               	call	PL158	;call to abstracted procedure
  6846  002112  ECCF  F01A         	call	___wmul	;wreg free
  6847  002116  51DC               	movf	_DAY_LIGHT_START& (0+255),w,b
  6848  002118  2560               	addwf	?___wmul& (0+255),w,b
  6849  00211A  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  6850  00211C  51DD               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  6851  00211E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6852  002120  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  6853                           
  6854                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  6855  002122  C0DA  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  6856  002126  C0DB  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  6857  00212A  D87C               	call	PL158	;call to abstracted procedure
  6858  00212C  ECCF  F01A         	call	___wmul	;wreg free
  6859  002130  51D8               	movf	_DAY_LIGHT_END& (0+255),w,b
  6860  002132  2560               	addwf	?___wmul& (0+255),w,b
  6861  002134  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  6862  002136  51D9               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  6863  002138  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6864  00213A  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  6865                           
  6866                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  6867  00213C  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  6868  002140  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  6869  002144  D86F               	call	PL158	;call to abstracted procedure
  6870  002146  ECCF  F01A         	call	___wmul	;wreg free
  6871  00214A  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  6872  00214C  2560               	addwf	?___wmul& (0+255),w,b
  6873  00214E  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  6874  002150  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  6875  002152  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6876  002154  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;funcs.c: 98: if (Start > End) {
  6880  002156  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  6881  002158  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  6882  00215A  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  6883  00215C  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  6884  00215E  E20F               	bc	l4070
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  6888  002160  D85C               	call	PL130	;call to abstracted procedure
  6889  002162  E205               	bc	l4068
  6890  002164                     l4066:
  6891                           
  6892                           ; BSR set to: 0
  6893  002164  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  6894  002166  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  6895  002168  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  6896  00216A  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  6897  00216C  E30B               	bnc	l657
  6898  00216E                     l4068:
  6899                           
  6900                           ; BSR set to: 0
  6901                           ;funcs.c: 100: dt.SECOND += 3600;
  6902  00216E  0E10               	movlw	16
  6903  002170  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6904  002172  0E0E               	movlw	14
  6905  002174  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6906  002176  0E00               	movlw	0
  6907  002178  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6908  00217A  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6909  00217C  D003               	goto	l657
  6910  00217E                     l4070:
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  6914  00217E  D84D               	call	PL130	;call to abstracted procedure
  6915  002180  E301               	bnc	l657
  6916  002182  D7F0               	goto	l4066
  6917  002184                     l657:
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;funcs.c: 104: }
  6921                           ;funcs.c: 105: if (dt.SECOND < 0) {
  6922  002184  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  6923  002186  D01A               	goto	l4080
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;funcs.c: 106: dt.SECOND += 86400;
  6927  002188  0E80               	movlw	128
  6928  00218A  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6929  00218C  0E51               	movlw	81
  6930  00218E  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6931  002190  0E01               	movlw	1
  6932  002192  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6933  002194  0E00               	movlw	0
  6934  002196  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  6938  002198  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6939  00219C  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  6940  0021A0  0E0A               	movlw	10
  6941  0021A2                     u3941:
  6942  0021A2  CFDB FFEB          	movff	plusw2,plusw0
  6943  0021A6  06E8               	decf	wreg,f,c
  6944  0021A8  E2FC               	bc	u3941
  6945  0021AA  EC18  F012         	call	_DecreaseByADay	;wreg free
  6946  0021AE  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6947  0021B2  0E0A               	movlw	10
  6948  0021B4                     u3951:
  6949  0021B4  CFEB FFDB          	movff	plusw0,plusw2
  6950  0021B8  06E8               	decf	wreg,f,c
  6951  0021BA  E2FC               	bc	u3951
  6952  0021BC                     l4080:
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;funcs.c: 108: }
  6956                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  6957  0021BC  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  6958  0021BE  D023               	goto	l4086
  6959  0021C0  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  6960  0021C2  E107               	bnz	u3960
  6961  0021C4  0E81               	movlw	129
  6962  0021C6  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  6963  0021C8  0E51               	movlw	81
  6964  0021CA  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  6965  0021CC  0E01               	movlw	1
  6966  0021CE  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  6967  0021D0  E31A               	bnc	l4086
  6968  0021D2                     u3960:
  6969                           
  6970                           ; BSR set to: 0
  6971                           ;funcs.c: 110: dt.SECOND -= 86400;
  6972  0021D2  0E80               	movlw	128
  6973  0021D4  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6974  0021D6  0EAE               	movlw	174
  6975  0021D8  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6976  0021DA  0EFE               	movlw	254
  6977  0021DC  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6978  0021DE  0EFF               	movlw	255
  6979  0021E0  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  6983  0021E2  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6984  0021E6  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  6985  0021EA  0E0A               	movlw	10
  6986  0021EC                     u3971:
  6987  0021EC  CFDB FFEB          	movff	plusw2,plusw0
  6988  0021F0  06E8               	decf	wreg,f,c
  6989  0021F2  E2FC               	bc	u3971
  6990  0021F4  ECEB  F013         	call	_IncreaseByADay	;wreg free
  6991  0021F8  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6992  0021FC  0E0A               	movlw	10
  6993  0021FE                     u3981:
  6994  0021FE  CFEB FFDB          	movff	plusw0,plusw2
  6995  002202  06E8               	decf	wreg,f,c
  6996  002204  E2FC               	bc	u3981
  6997  002206                     l4086:
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;funcs.c: 112: }
  7001                           ;funcs.c: 113: return dt;
  7002  002206  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  7003  00220A  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  7004  00220E  0E0A               	movlw	10
  7005  002210                     u3991:
  7006  002210  CFDB FFEB          	movff	plusw2,plusw0
  7007  002214  06E8               	decf	wreg,f,c
  7008  002216  E2FC               	bc	u3991
  7009                           
  7010                           ; BSR set to: 0
  7011  002218  0012               	return		;funcret
  7012  00221A                     __end_of_AdjustDayLightSaving:
  7013                           	opt stack 0
  7014  00221A                     PL130:
  7015                           	opt stack 15
  7016  00221A  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  7017  00221C  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  7018  00221E  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  7019  002220  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  7020  002222  0012               	return	
  7021  002224                     __end_ofPL130:
  7022                           	opt stack 0
  7023  002224                     PL158:
  7024                           	opt stack 15
  7025  002224  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7026  002226  0E64               	movlw	100
  7027  002228  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7028  00222A  0C64               	retlw	100
  7029  00222C                     __end_ofPL158:
  7030                           	opt stack 0
  7031                           tosu	equ	0xFFF
  7032                           tosh	equ	0xFFE
  7033                           tosl	equ	0xFFD
  7034                           pclath	equ	0xFFA
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           intcon	equ	0xFF2
  7042                           postinc0	equ	0xFEE
  7043                           plusw0	equ	0xFEB
  7044                           wreg	equ	0xFE8
  7045                           indf1	equ	0xFE7
  7046                           postinc1	equ	0xFE6
  7047                           postdec1	equ	0xFE5
  7048                           plusw1	equ	0xFE3
  7049                           fsr1h	equ	0xFE2
  7050                           fsr1l	equ	0xFE1
  7051                           indf2	equ	0xFDF
  7052                           postinc2	equ	0xFDE
  7053                           postdec2	equ	0xFDD
  7054                           plusw2	equ	0xFDB
  7055                           fsr2h	equ	0xFDA
  7056                           fsr2l	equ	0xFD9
  7057                           status	equ	0xFD8
  7058                           
  7059 ;; *************** function _IncreaseByADay *****************
  7060 ;; Defined at:
  7061 ;;		line 12 in file "libs/funcs.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;  MonthDays       1   40[BANK0 ] char 
  7066 ;; Return value:  Size  Location     Type
  7067 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  7068 ;; Registers used:
  7069 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7070 ;; Tracked objects:
  7071 ;;		On entry : 3F/0
  7072 ;;		On exit  : 3F/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7075 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7077 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7078 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7079 ;;Total ram usage:       14 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; Hardware stack levels required when called:   12
  7082 ;; This function calls:
  7083 ;;		_IncreaseByAMonth
  7084 ;;		___lwmod
  7085 ;; This function is called by:
  7086 ;;		_AdjustDayLightSaving
  7087 ;;		_ReadGPS_DATE_TIME
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text27
  7092  0027D6                     __ptext27:
  7093                           	opt stack 0
  7094  0027D6                     _IncreaseByADay:
  7095                           	opt stack 16
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;funcs.c: 13: dt.DATE.Day++;
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;incstack = 0
  7102  0027D6  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  7103  0027D8  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  7107  0027DA  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  7108  0027DC  0B7F               	andlw	127
  7109  0027DE  06E8               	decf	wreg,f,c
  7110  0027E0  E104               	bnz	l3572
  7111                           
  7112                           ; BSR set to: 0
  7113                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  7114  0027E2  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  7115  0027E4  0B01               	andlw	-255
  7116  0027E6  0980               	iorlw	128
  7117  0027E8  D00A               	goto	L5
  7118  0027EA                     l3572:
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;funcs.c: 16: else
  7122                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  7123  0027EA  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  7124  0027EC  0B7F               	andlw	127
  7125  0027EE  6F86               	movwf	??_IncreaseByADay& (0+255),b
  7126  0027F0  90D8               	bcf	status,0,c
  7127  0027F2  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  7128  0027F4  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  7129  0027F6  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  7130  0027F8  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  7131  0027FA  0B01               	andlw	-255
  7132  0027FC  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  7133  0027FE                     L5:
  7134  0027FE  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  7138  002800  90D8               	bcf	status,0,c
  7139  002802  3581               	rlcf	(IncreaseByADay@dt+6)& (0+255),w,b
  7140  002804  6ED9               	movwf	fsr2l,c
  7141  002806  3582               	rlcf	(IncreaseByADay@dt+7)& (0+255),w,b
  7142  002808  EC7F  F012         	call	PL82	;call to abstracted procedure
  7143  00280C  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  7147  00280E  0E02               	movlw	2
  7148  002810  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7149  002812  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7150  002814  E107               	bnz	l3582
  7151                           
  7152                           ; BSR set to: 0
  7153  002816  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  7154  00281A  0E03               	movlw	3
  7155  00281C  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  7156  00281E  E102               	bnz	l3582
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;funcs.c: 20: MonthDays = 29;
  7160  002820  0E1D               	movlw	29
  7161  002822  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7162  002824                     l3582:
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  7166  002824  0E02               	movlw	2
  7167  002826  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7168  002828  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7169  00282A  E10A               	bnz	l3588
  7170                           
  7171                           ; BSR set to: 0
  7172  00282C  D840               	call	PL146	;call to abstracted procedure
  7173  00282E  EC81  F01A         	call	PL152	;call to abstracted procedure
  7174  002832  ECF4  F019         	call	___lwmod	;wreg free
  7175  002836  5160               	movf	?___lwmod& (0+255),w,b
  7176  002838  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7177  00283A  E102               	bnz	l3588
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;funcs.c: 22: MonthDays = 28;
  7181  00283C  0E1C               	movlw	28
  7182  00283E  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7183  002840                     l3588:
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  7187  002840  0E02               	movlw	2
  7188  002842  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7189  002844  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7190  002846  E10A               	bnz	l3594
  7191                           
  7192                           ; BSR set to: 0
  7193  002848  D832               	call	PL146	;call to abstracted procedure
  7194  00284A  EC86  F012         	call	PL134	;call to abstracted procedure
  7195  00284E  ECF4  F019         	call	___lwmod	;wreg free
  7196  002852  5160               	movf	?___lwmod& (0+255),w,b
  7197  002854  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7198  002856  E102               	bnz	l3594
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;funcs.c: 24: MonthDays = 29;
  7202  002858  0E1D               	movlw	29
  7203  00285A  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7204  00285C                     l3594:
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  7208  00285C  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  7209  002860  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  7210  002862  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  7211  002864  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  7212  002866  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  7213  002868  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  7214  00286A  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  7215  00286C  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  7216  00286E  E215               	bc	l3600
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;funcs.c: 26: dt.DATE.Day = 1;
  7220  002870  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  7221  002872  0E01               	movlw	1
  7222  002874  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  7226  002876  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7227  00287A  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  7228  00287E  0E0A               	movlw	10
  7229  002880                     u3081:
  7230  002880  CFDB FFEB          	movff	plusw2,plusw0
  7231  002884  06E8               	decf	wreg,f,c
  7232  002886  E2FC               	bc	u3081
  7233  002888  EC47  F019         	call	_IncreaseByAMonth	;wreg free
  7234  00288C  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7235  002890  0E0A               	movlw	10
  7236  002892                     u3091:
  7237  002892  CFEB FFDB          	movff	plusw0,plusw2
  7238  002896  06E8               	decf	wreg,f,c
  7239  002898  E2FC               	bc	u3091
  7240  00289A                     l3600:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;funcs.c: 28: }
  7244                           ;funcs.c: 29: return dt;
  7245  00289A  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7246  00289E  EE00  F07B         	lfsr	0,?_IncreaseByADay
  7247  0028A2  0E0A               	movlw	10
  7248  0028A4                     u3101:
  7249  0028A4  CFDB FFEB          	movff	plusw2,plusw0
  7250  0028A8  06E8               	decf	wreg,f,c
  7251  0028AA  E2FC               	bc	u3101
  7252                           
  7253                           ; BSR set to: 0
  7254  0028AC  0012               	return		;funcret
  7255  0028AE                     __end_of_IncreaseByADay:
  7256                           	opt stack 0
  7257  0028AE                     PL146:
  7258                           	opt stack 16
  7259  0028AE  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  7260  0028B2  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  7261  0028B6  0012               	return	
  7262  0028B8                     __end_ofPL146:
  7263                           	opt stack 0
  7264                           tosu	equ	0xFFF
  7265                           tosh	equ	0xFFE
  7266                           tosl	equ	0xFFD
  7267                           pclath	equ	0xFFA
  7268                           tblptru	equ	0xFF8
  7269                           tblptrh	equ	0xFF7
  7270                           tblptrl	equ	0xFF6
  7271                           tablat	equ	0xFF5
  7272                           prodh	equ	0xFF4
  7273                           prodl	equ	0xFF3
  7274                           intcon	equ	0xFF2
  7275                           postinc0	equ	0xFEE
  7276                           plusw0	equ	0xFEB
  7277                           wreg	equ	0xFE8
  7278                           indf1	equ	0xFE7
  7279                           postinc1	equ	0xFE6
  7280                           postdec1	equ	0xFE5
  7281                           plusw1	equ	0xFE3
  7282                           fsr1h	equ	0xFE2
  7283                           fsr1l	equ	0xFE1
  7284                           indf2	equ	0xFDF
  7285                           postinc2	equ	0xFDE
  7286                           postdec2	equ	0xFDD
  7287                           plusw2	equ	0xFDB
  7288                           fsr2h	equ	0xFDA
  7289                           fsr2l	equ	0xFD9
  7290                           status	equ	0xFD8
  7291                           
  7292 ;; *************** function _IncreaseByAMonth *****************
  7293 ;; Defined at:
  7294 ;;		line 32 in file "libs/funcs.c"
  7295 ;; Parameters:    Size  Location     Type
  7296 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  7297 ;; Auto vars:     Size  Location     Type
  7298 ;;		None
  7299 ;; Return value:  Size  Location     Type
  7300 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  7301 ;; Registers used:
  7302 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7303 ;; Tracked objects:
  7304 ;;		On entry : 3F/0
  7305 ;;		On exit  : 3F/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7308 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7311 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7312 ;;Total ram usage:       11 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:   11
  7315 ;; This function calls:
  7316 ;;		_IncreaseByAYear
  7317 ;; This function is called by:
  7318 ;;		_IncreaseByADay
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           	psect	text28
  7323  00328E                     __ptext28:
  7324                           	opt stack 0
  7325  00328E                     _IncreaseByAMonth:
  7326                           	opt stack 16
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;funcs.c: 33: dt.DATE.Month++;
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;incstack = 0
  7333  00328E  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  7334  003290  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  7338  003292  0E0D               	movlw	13
  7339  003294  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  7340  003296  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  7341  003298  E115               	bnz	l3458
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;funcs.c: 35: dt.DATE.Month = 1;
  7345  00329A  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  7346  00329C  0E01               	movlw	1
  7347  00329E  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  7348                           
  7349                           ; BSR set to: 0
  7350                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  7351  0032A0  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7352  0032A4  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  7353  0032A8  0E0A               	movlw	10
  7354  0032AA                     u2681:
  7355  0032AA  CFDB FFEB          	movff	plusw2,plusw0
  7356  0032AE  06E8               	decf	wreg,f,c
  7357  0032B0  E2FC               	bc	u2681
  7358  0032B2  EC6A  F01A         	call	_IncreaseByAYear	;wreg free
  7359  0032B6  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7360  0032BA  0E0A               	movlw	10
  7361  0032BC                     u2691:
  7362  0032BC  CFEB FFDB          	movff	plusw0,plusw2
  7363  0032C0  06E8               	decf	wreg,f,c
  7364  0032C2  E2FC               	bc	u2691
  7365  0032C4                     l3458:
  7366                           
  7367                           ; BSR set to: 0
  7368                           ;funcs.c: 37: }
  7369                           ;funcs.c: 38: return dt;
  7370  0032C4  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7371  0032C8  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  7372  0032CC  0E0A               	movlw	10
  7373  0032CE                     u2701:
  7374  0032CE  CFDB FFEB          	movff	plusw2,plusw0
  7375  0032D2  06E8               	decf	wreg,f,c
  7376  0032D4  E2FC               	bc	u2701
  7377                           
  7378                           ; BSR set to: 0
  7379  0032D6  0012               	return		;funcret
  7380  0032D8                     __end_of_IncreaseByAMonth:
  7381                           	opt stack 0
  7382                           tosu	equ	0xFFF
  7383                           tosh	equ	0xFFE
  7384                           tosl	equ	0xFFD
  7385                           pclath	equ	0xFFA
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodh	equ	0xFF4
  7391                           prodl	equ	0xFF3
  7392                           intcon	equ	0xFF2
  7393                           postinc0	equ	0xFEE
  7394                           plusw0	equ	0xFEB
  7395                           wreg	equ	0xFE8
  7396                           indf1	equ	0xFE7
  7397                           postinc1	equ	0xFE6
  7398                           postdec1	equ	0xFE5
  7399                           plusw1	equ	0xFE3
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           plusw2	equ	0xFDB
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8
  7409                           
  7410 ;; *************** function _IncreaseByAYear *****************
  7411 ;; Defined at:
  7412 ;;		line 41 in file "libs/funcs.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;		None
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  7419 ;; Registers used:
  7420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 3F/0
  7423 ;;		On exit  : 3F/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7426 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7429 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7430 ;;Total ram usage:       11 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:   10
  7433 ;; This function calls:
  7434 ;;		___lwmod
  7435 ;; This function is called by:
  7436 ;;		_IncreaseByAMonth
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text29
  7441  0034D4                     __ptext29:
  7442                           	opt stack 0
  7443  0034D4                     _IncreaseByAYear:
  7444                           	opt stack 16
  7445                           
  7446                           ; BSR set to: 0
  7447                           ;funcs.c: 42: dt.YEAR++;
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;incstack = 0
  7451  0034D4  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  7452  0034D6  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  7456  0034D8  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  7457  0034DC  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  7458  0034E0  D810               	call	PL152	;call to abstracted procedure
  7459  0034E2  ECF4  F019         	call	___lwmod	;wreg free
  7460  0034E6  5160               	movf	?___lwmod& (0+255),w,b
  7461  0034E8  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7462  0034EA  E101               	bnz	l3426
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;funcs.c: 44: CENTURY++;
  7466  0034EC  2BFE               	incf	_CENTURY& (0+255),f,b
  7467  0034EE                     l3426:
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;funcs.c: 45: return dt;
  7471  0034EE  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  7472  0034F2  EE00  F065         	lfsr	0,?_IncreaseByAYear
  7473  0034F6  0E0A               	movlw	10
  7474  0034F8                     u2601:
  7475  0034F8  CFDB FFEB          	movff	plusw2,plusw0
  7476  0034FC  06E8               	decf	wreg,f,c
  7477  0034FE  E2FC               	bc	u2601
  7478                           
  7479                           ; BSR set to: 0
  7480  003500  0012               	return		;funcret
  7481  003502                     __end_of_IncreaseByAYear:
  7482                           	opt stack 0
  7483  003502                     PL152:
  7484                           	opt stack 16
  7485  003502  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  7486  003504  0E64               	movlw	100
  7487  003506  6F62               	movwf	___lwmod@divisor& (0+255),b
  7488  003508  0C64               	retlw	100
  7489  00350A                     __end_ofPL152:
  7490                           	opt stack 0
  7491                           tosu	equ	0xFFF
  7492                           tosh	equ	0xFFE
  7493                           tosl	equ	0xFFD
  7494                           pclath	equ	0xFFA
  7495                           tblptru	equ	0xFF8
  7496                           tblptrh	equ	0xFF7
  7497                           tblptrl	equ	0xFF6
  7498                           tablat	equ	0xFF5
  7499                           prodh	equ	0xFF4
  7500                           prodl	equ	0xFF3
  7501                           intcon	equ	0xFF2
  7502                           postinc0	equ	0xFEE
  7503                           plusw0	equ	0xFEB
  7504                           wreg	equ	0xFE8
  7505                           indf1	equ	0xFE7
  7506                           postinc1	equ	0xFE6
  7507                           postdec1	equ	0xFE5
  7508                           plusw1	equ	0xFE3
  7509                           fsr1h	equ	0xFE2
  7510                           fsr1l	equ	0xFE1
  7511                           indf2	equ	0xFDF
  7512                           postinc2	equ	0xFDE
  7513                           postdec2	equ	0xFDD
  7514                           plusw2	equ	0xFDB
  7515                           fsr2h	equ	0xFDA
  7516                           fsr2l	equ	0xFD9
  7517                           status	equ	0xFD8
  7518                           
  7519 ;; *************** function _DecreaseByADay *****************
  7520 ;; Defined at:
  7521 ;;		line 57 in file "libs/funcs.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;  MonthDays       1   39[BANK0 ] char 
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  7528 ;; Registers used:
  7529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 3F/0
  7532 ;;		On exit  : 3F/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7535 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7538 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7539 ;;Total ram usage:       13 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:   12
  7542 ;; This function calls:
  7543 ;;		_DecreaseByAMonth
  7544 ;;		___lwmod
  7545 ;; This function is called by:
  7546 ;;		_AdjustDayLightSaving
  7547 ;;		_ReadGPS_DATE_TIME
  7548 ;; This function uses a non-reentrant model
  7549 ;;
  7550                           
  7551                           	psect	text30
  7552  002430                     __ptext30:
  7553                           	opt stack 0
  7554  002430                     _DecreaseByADay:
  7555                           	opt stack 16
  7556                           
  7557                           ; BSR set to: 0
  7558                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;incstack = 0
  7562  002430  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  7563  002432  0B7F               	andlw	127
  7564  002434  0A40               	xorlw	64
  7565  002436  E104               	bnz	l3608
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  7569  002438  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  7570  00243A  0B01               	andlw	-255
  7571  00243C  0902               	iorlw	2
  7572  00243E  D00A               	goto	L6
  7573  002440                     l3608:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;funcs.c: 60: else
  7577                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  7578  002440  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  7579  002442  0B7F               	andlw	127
  7580  002444  6F86               	movwf	??_DecreaseByADay& (0+255),b
  7581  002446  90D8               	bcf	status,0,c
  7582  002448  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  7583  00244A  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  7584  00244C  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  7585  00244E  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  7586  002450  0B01               	andlw	-255
  7587  002452  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  7588  002454                     L6:
  7589  002454  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  7593  002456  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  7594  002458  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  7595  00245A  E144               	bnz	l3632
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  7599  00245C  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7600  002460  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  7601  002464  0E0A               	movlw	10
  7602  002466                     u3131:
  7603  002466  CFDB FFEB          	movff	plusw2,plusw0
  7604  00246A  06E8               	decf	wreg,f,c
  7605  00246C  E2FC               	bc	u3131
  7606  00246E  ECFB  F018         	call	_DecreaseByAMonth	;wreg free
  7607  002472  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7608  002476  0E0A               	movlw	10
  7609  002478                     u3141:
  7610  002478  CFEB FFDB          	movff	plusw0,plusw2
  7611  00247C  06E8               	decf	wreg,f,c
  7612  00247E  E2FC               	bc	u3141
  7613                           
  7614                           ; BSR set to: 0
  7615                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  7616  002480  90D8               	bcf	status,0,c
  7617  002482  3581               	rlcf	(DecreaseByADay@dt+6)& (0+255),w,b
  7618  002484  6ED9               	movwf	fsr2l,c
  7619  002486  3582               	rlcf	(DecreaseByADay@dt+7)& (0+255),w,b
  7620  002488  D83A               	call	PL82	;call to abstracted procedure
  7621  00248A  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  7625  00248C  0E02               	movlw	2
  7626  00248E  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7627  002490  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7628  002492  E107               	bnz	l3620
  7629                           
  7630                           ; BSR set to: 0
  7631  002494  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  7632  002498  0E03               	movlw	3
  7633  00249A  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  7634  00249C  E102               	bnz	l3620
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;funcs.c: 66: MonthDays = 29;
  7638  00249E  0E1D               	movlw	29
  7639  0024A0  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7640  0024A2                     l3620:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  7644  0024A2  0E02               	movlw	2
  7645  0024A4  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7646  0024A6  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7647  0024A8  E10A               	bnz	l3626
  7648                           
  7649                           ; BSR set to: 0
  7650  0024AA  D835               	call	PL140	;call to abstracted procedure
  7651  0024AC  EC81  F01A         	call	PL152	;call to abstracted procedure
  7652  0024B0  ECF4  F019         	call	___lwmod	;wreg free
  7653  0024B4  5160               	movf	?___lwmod& (0+255),w,b
  7654  0024B6  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7655  0024B8  E102               	bnz	l3626
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;funcs.c: 68: MonthDays = 28;
  7659  0024BA  0E1C               	movlw	28
  7660  0024BC  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7661  0024BE                     l3626:
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  7665  0024BE  0E02               	movlw	2
  7666  0024C0  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7667  0024C2  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7668  0024C4  E109               	bnz	l639
  7669                           
  7670                           ; BSR set to: 0
  7671  0024C6  D827               	call	PL140	;call to abstracted procedure
  7672  0024C8  D821               	call	PL134	;call to abstracted procedure
  7673  0024CA  ECF4  F019         	call	___lwmod	;wreg free
  7674  0024CE  5160               	movf	?___lwmod& (0+255),w,b
  7675  0024D0  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7676  0024D2  E102               	bnz	l639
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;funcs.c: 70: MonthDays = 29;
  7680  0024D4  0E1D               	movlw	29
  7681  0024D6  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7682  0024D8                     l639:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  7686  0024D8  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  7687  0024DA  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  7688  0024DC  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  7689  0024DE  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  7690  0024E0  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  7691                           
  7692                           ;funcs.c: 72: } else
  7693  0024E2  D003               	goto	l3634
  7694  0024E4                     l3632:
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;funcs.c: 73: dt.DATE.Day--;
  7698  0024E4  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  7699  0024E6  A0D8               	btfss	status,0,c
  7700  0024E8  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  7701  0024EA                     l3634:
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;funcs.c: 74: return dt;
  7705  0024EA  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7706  0024EE  EE00  F07B         	lfsr	0,?_DecreaseByADay
  7707  0024F2  0E0A               	movlw	10
  7708  0024F4                     u3211:
  7709  0024F4  CFDB FFEB          	movff	plusw2,plusw0
  7710  0024F8  06E8               	decf	wreg,f,c
  7711  0024FA  E2FC               	bc	u3211
  7712                           
  7713                           ; BSR set to: 0
  7714  0024FC  0012               	return		;funcret
  7715  0024FE                     __end_of_DecreaseByADay:
  7716                           	opt stack 0
  7717  0024FE                     PL82:
  7718                           	opt stack 16
  7719  0024FE  6EDA               	movwf	fsr2h,c
  7720  002500  0E42               	movlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  7721  002502  26D9               	addwf	fsr2l,f,c
  7722  002504  0E01               	movlw	high (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  7723  002506  22DA               	addwfc	fsr2h,f,c
  7724  002508  50DF               	movf	indf2,w,c
  7725  00250A  0012               	return	
  7726  00250C                     __end_ofPL82:
  7727                           	opt stack 0
  7728  00250C                     PL134:
  7729                           	opt stack 16
  7730  00250C  0E01               	movlw	1
  7731  00250E  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  7732  002510  0E90               	movlw	144
  7733  002512  6F62               	movwf	___lwmod@divisor& (0+255),b
  7734  002514  0C90               	retlw	144
  7735  002516                     __end_ofPL134:
  7736                           	opt stack 0
  7737  002516                     PL140:
  7738                           	opt stack 16
  7739  002516  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  7740  00251A  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  7741  00251E  0012               	return	
  7742  002520                     __end_ofPL140:
  7743                           	opt stack 0
  7744                           tosu	equ	0xFFF
  7745                           tosh	equ	0xFFE
  7746                           tosl	equ	0xFFD
  7747                           pclath	equ	0xFFA
  7748                           tblptru	equ	0xFF8
  7749                           tblptrh	equ	0xFF7
  7750                           tblptrl	equ	0xFF6
  7751                           tablat	equ	0xFF5
  7752                           prodh	equ	0xFF4
  7753                           prodl	equ	0xFF3
  7754                           intcon	equ	0xFF2
  7755                           postinc0	equ	0xFEE
  7756                           plusw0	equ	0xFEB
  7757                           wreg	equ	0xFE8
  7758                           indf1	equ	0xFE7
  7759                           postinc1	equ	0xFE6
  7760                           postdec1	equ	0xFE5
  7761                           plusw1	equ	0xFE3
  7762                           fsr1h	equ	0xFE2
  7763                           fsr1l	equ	0xFE1
  7764                           indf2	equ	0xFDF
  7765                           postinc2	equ	0xFDE
  7766                           postdec2	equ	0xFDD
  7767                           plusw2	equ	0xFDB
  7768                           fsr2h	equ	0xFDA
  7769                           fsr2l	equ	0xFD9
  7770                           status	equ	0xFD8
  7771                           
  7772 ;; *************** function _DecreaseByAMonth *****************
  7773 ;; Defined at:
  7774 ;;		line 77 in file "libs/funcs.c"
  7775 ;; Parameters:    Size  Location     Type
  7776 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  7777 ;; Auto vars:     Size  Location     Type
  7778 ;;		None
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  7781 ;; Registers used:
  7782 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7783 ;; Tracked objects:
  7784 ;;		On entry : 3F/0
  7785 ;;		On exit  : 3F/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7788 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7791 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7792 ;;Total ram usage:       11 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:   11
  7795 ;; This function calls:
  7796 ;;		_DecreaseByAYear
  7797 ;; This function is called by:
  7798 ;;		_DecreaseByADay
  7799 ;; This function uses a non-reentrant model
  7800 ;;
  7801                           
  7802                           	psect	text31
  7803  0031F6                     __ptext31:
  7804                           	opt stack 0
  7805  0031F6                     _DecreaseByAMonth:
  7806                           	opt stack 16
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;incstack = 0
  7813  0031F6  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  7814  0031F8  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  7815  0031FA  E116               	bnz	l3468
  7816                           
  7817                           ; BSR set to: 0
  7818                           ;funcs.c: 79: dt.DATE.Month = 12;
  7819  0031FC  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  7820  0031FE  0E0C               	movlw	12
  7821  003200  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  7825  003202  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7826  003206  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  7827  00320A  0E0A               	movlw	10
  7828  00320C                     u2721:
  7829  00320C  CFDB FFEB          	movff	plusw2,plusw0
  7830  003210  06E8               	decf	wreg,f,c
  7831  003212  E2FC               	bc	u2721
  7832  003214  EC9E  F01A         	call	_DecreaseByAYear	;wreg free
  7833  003218  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7834  00321C  0E0A               	movlw	10
  7835  00321E                     u2731:
  7836  00321E  CFEB FFDB          	movff	plusw0,plusw2
  7837  003222  06E8               	decf	wreg,f,c
  7838  003224  E2FC               	bc	u2731
  7839                           
  7840                           ;funcs.c: 81: } else
  7841  003226  D003               	goto	l3470
  7842  003228                     l3468:
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;funcs.c: 82: dt.DATE.Month--;
  7846  003228  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  7847  00322A  A0D8               	btfss	status,0,c
  7848  00322C  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  7849  00322E                     l3470:
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;funcs.c: 83: return dt;
  7853  00322E  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7854  003232  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  7855  003236  0E0A               	movlw	10
  7856  003238                     u2741:
  7857  003238  CFDB FFEB          	movff	plusw2,plusw0
  7858  00323C  06E8               	decf	wreg,f,c
  7859  00323E  E2FC               	bc	u2741
  7860                           
  7861                           ; BSR set to: 0
  7862  003240  0012               	return		;funcret
  7863  003242                     __end_of_DecreaseByAMonth:
  7864                           	opt stack 0
  7865                           tosu	equ	0xFFF
  7866                           tosh	equ	0xFFE
  7867                           tosl	equ	0xFFD
  7868                           pclath	equ	0xFFA
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           intcon	equ	0xFF2
  7876                           postinc0	equ	0xFEE
  7877                           plusw0	equ	0xFEB
  7878                           wreg	equ	0xFE8
  7879                           indf1	equ	0xFE7
  7880                           postinc1	equ	0xFE6
  7881                           postdec1	equ	0xFE5
  7882                           plusw1	equ	0xFE3
  7883                           fsr1h	equ	0xFE2
  7884                           fsr1l	equ	0xFE1
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           plusw2	equ	0xFDB
  7889                           fsr2h	equ	0xFDA
  7890                           fsr2l	equ	0xFD9
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _DecreaseByAYear *****************
  7894 ;; Defined at:
  7895 ;;		line 86 in file "libs/funcs.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;		None
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  7902 ;; Registers used:
  7903 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 3F/0
  7906 ;;		On exit  : 3F/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7909 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7912 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7913 ;;Total ram usage:       11 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:   10
  7916 ;; This function calls:
  7917 ;;		___lwmod
  7918 ;; This function is called by:
  7919 ;;		_DecreaseByAMonth
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text32
  7924  00353C                     __ptext32:
  7925                           	opt stack 0
  7926  00353C                     _DecreaseByAYear:
  7927                           	opt stack 16
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;incstack = 0
  7934  00353C  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  7935  003540  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  7936  003544  EC81  F01A         	call	PL152	;call to abstracted procedure
  7937  003548  ECF4  F019         	call	___lwmod	;wreg free
  7938  00354C  5160               	movf	?___lwmod& (0+255),w,b
  7939  00354E  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7940  003550  E101               	bnz	l649
  7941                           
  7942                           ; BSR set to: 0
  7943                           ;funcs.c: 88: CENTURY--;
  7944  003552  07FE               	decf	_CENTURY& (0+255),f,b
  7945  003554                     l649:
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;funcs.c: 89: dt.YEAR--;
  7949  003554  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  7950  003556  A0D8               	btfss	status,0,c
  7951  003558  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;funcs.c: 90: return dt;
  7955  00355A  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  7956  00355E  EE00  F065         	lfsr	0,?_DecreaseByAYear
  7957  003562  0E0A               	movlw	10
  7958  003564                     u2621:
  7959  003564  CFDB FFEB          	movff	plusw2,plusw0
  7960  003568  06E8               	decf	wreg,f,c
  7961  00356A  E2FC               	bc	u2621
  7962                           
  7963                           ; BSR set to: 0
  7964  00356C  0012               	return		;funcret
  7965  00356E                     __end_of_DecreaseByAYear:
  7966                           	opt stack 0
  7967                           tosu	equ	0xFFF
  7968                           tosh	equ	0xFFE
  7969                           tosl	equ	0xFFD
  7970                           pclath	equ	0xFFA
  7971                           tblptru	equ	0xFF8
  7972                           tblptrh	equ	0xFF7
  7973                           tblptrl	equ	0xFF6
  7974                           tablat	equ	0xFF5
  7975                           prodh	equ	0xFF4
  7976                           prodl	equ	0xFF3
  7977                           intcon	equ	0xFF2
  7978                           postinc0	equ	0xFEE
  7979                           plusw0	equ	0xFEB
  7980                           wreg	equ	0xFE8
  7981                           indf1	equ	0xFE7
  7982                           postinc1	equ	0xFE6
  7983                           postdec1	equ	0xFE5
  7984                           plusw1	equ	0xFE3
  7985                           fsr1h	equ	0xFE2
  7986                           fsr1l	equ	0xFE1
  7987                           indf2	equ	0xFDF
  7988                           postinc2	equ	0xFDE
  7989                           postdec2	equ	0xFDD
  7990                           plusw2	equ	0xFDB
  7991                           fsr2h	equ	0xFDA
  7992                           fsr2l	equ	0xFD9
  7993                           status	equ	0xFD8
  7994                           
  7995 ;; *************** function ___lwmod *****************
  7996 ;; Defined at:
  7997 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  7998 ;; Parameters:    Size  Location     Type
  7999 ;;  dividend        2    0[BANK0 ] unsigned int 
  8000 ;;  divisor         2    2[BANK0 ] unsigned int 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  counter         1    4[BANK0 ] unsigned char 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  2    0[BANK0 ] unsigned int 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0
  8007 ;; Tracked objects:
  8008 ;;		On entry : 3F/0
  8009 ;;		On exit  : 3F/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8015 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8016 ;;Total ram usage:        5 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    9
  8019 ;; This function calls:
  8020 ;;		Nothing
  8021 ;; This function is called by:
  8022 ;;		_IncreaseByADay
  8023 ;;		_IncreaseByAYear
  8024 ;;		_DecreaseByADay
  8025 ;;		_DecreaseByAYear
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text33
  8030  0033E8                     __ptext33:
  8031                           	opt stack 0
  8032  0033E8                     ___lwmod:
  8033                           	opt stack 18
  8034                           
  8035                           ; BSR set to: 0
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;incstack = 0
  8039  0033E8  5162               	movf	___lwmod@divisor& (0+255),w,b
  8040  0033EA  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8041  0033EC  E017               	bz	l1593
  8042                           
  8043                           ; BSR set to: 0
  8044  0033EE  0E01               	movlw	1
  8045  0033F0  6F64               	movwf	___lwmod@counter& (0+255),b
  8046  0033F2  D004               	goto	l3400
  8047  0033F4                     l3398:
  8048                           
  8049                           ; BSR set to: 0
  8050  0033F4  90D8               	bcf	status,0,c
  8051  0033F6  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  8052  0033F8  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8053  0033FA  2B64               	incf	___lwmod@counter& (0+255),f,b
  8054  0033FC                     l3400:
  8055                           
  8056                           ; BSR set to: 0
  8057  0033FC  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8058  0033FE  D7FA               	goto	l3398
  8059  003400                     l3402:
  8060                           
  8061                           ; BSR set to: 0
  8062  003400  5162               	movf	___lwmod@divisor& (0+255),w,b
  8063  003402  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  8064  003404  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8065  003406  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8066  003408  E304               	bnc	l3406
  8067                           
  8068                           ; BSR set to: 0
  8069  00340A  5162               	movf	___lwmod@divisor& (0+255),w,b
  8070  00340C  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  8071  00340E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8072  003410  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8073  003412                     l3406:
  8074                           
  8075                           ; BSR set to: 0
  8076  003412  90D8               	bcf	status,0,c
  8077  003414  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8078  003416  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  8079                           
  8080                           ; BSR set to: 0
  8081  003418  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  8082  00341A  D7F2               	goto	l3402
  8083  00341C                     l1593:
  8084                           
  8085                           ; BSR set to: 0
  8086  00341C  C060  F060         	movff	___lwmod@dividend,?___lwmod
  8087  003420  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  8088                           
  8089                           ; BSR set to: 0
  8090  003424  0012               	return		;funcret
  8091  003426                     __end_of___lwmod:
  8092                           	opt stack 0
  8093                           tosu	equ	0xFFF
  8094                           tosh	equ	0xFFE
  8095                           tosl	equ	0xFFD
  8096                           pclath	equ	0xFFA
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           postinc0	equ	0xFEE
  8105                           plusw0	equ	0xFEB
  8106                           wreg	equ	0xFE8
  8107                           indf1	equ	0xFE7
  8108                           postinc1	equ	0xFE6
  8109                           postdec1	equ	0xFE5
  8110                           plusw1	equ	0xFE3
  8111                           fsr1h	equ	0xFE2
  8112                           fsr1l	equ	0xFE1
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           plusw2	equ	0xFDB
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _LoadAllFromEeprom *****************
  8122 ;; Defined at:
  8123 ;;		line 179 in file "libs/eeprom.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;		None
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;		None
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      void 
  8130 ;; Registers used:
  8131 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8132 ;; Tracked objects:
  8133 ;;		On entry : 3F/0
  8134 ;;		On exit  : 3F/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8141 ;;Total ram usage:        0 bytes
  8142 ;; Hardware stack levels used:    1
  8143 ;; Hardware stack levels required when called:   11
  8144 ;; This function calls:
  8145 ;;		_LoadCyclesFromEeprom
  8146 ;;		_LoadEventsFromEeprom
  8147 ;;		_LoadSettingsFromEeprom
  8148 ;;		_LoadStatesFromEeprom
  8149 ;; This function is called by:
  8150 ;;		_main
  8151 ;; This function uses a non-reentrant model
  8152 ;;
  8153                           
  8154                           	psect	text34
  8155  00368E                     __ptext34:
  8156                           	opt stack 0
  8157  00368E                     _LoadAllFromEeprom:
  8158                           	opt stack 19
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;eeprom.c: 180: LoadSettingsFromEeprom ();
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;incstack = 0
  8165  00368E  EC47  F00B         	call	_LoadSettingsFromEeprom	;wreg free
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;eeprom.c: 181: LoadEventsFromEeprom ();
  8169  003692  ECEA  F00D         	call	_LoadEventsFromEeprom	;wreg free
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;eeprom.c: 182: LoadStatesFromEeprom();
  8173  003696  EC14  F00D         	call	_LoadStatesFromEeprom	;wreg free
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;eeprom.c: 183: LoadCyclesFromEeprom();
  8177  00369A  EF4B  F00F         	goto	_LoadCyclesFromEeprom	;wreg free
  8178  00369E                     __end_of_LoadAllFromEeprom:
  8179                           	opt stack 0
  8180                           tosu	equ	0xFFF
  8181                           tosh	equ	0xFFE
  8182                           tosl	equ	0xFFD
  8183                           pclath	equ	0xFFA
  8184                           tblptru	equ	0xFF8
  8185                           tblptrh	equ	0xFF7
  8186                           tblptrl	equ	0xFF6
  8187                           tablat	equ	0xFF5
  8188                           prodh	equ	0xFF4
  8189                           prodl	equ	0xFF3
  8190                           intcon	equ	0xFF2
  8191                           postinc0	equ	0xFEE
  8192                           plusw0	equ	0xFEB
  8193                           wreg	equ	0xFE8
  8194                           indf1	equ	0xFE7
  8195                           postinc1	equ	0xFE6
  8196                           postdec1	equ	0xFE5
  8197                           plusw1	equ	0xFE3
  8198                           fsr1h	equ	0xFE2
  8199                           fsr1l	equ	0xFE1
  8200                           indf2	equ	0xFDF
  8201                           postinc2	equ	0xFDE
  8202                           postdec2	equ	0xFDD
  8203                           plusw2	equ	0xFDB
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _LoadStatesFromEeprom *****************
  8209 ;; Defined at:
  8210 ;;		line 128 in file "libs/eeprom.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;		None
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  j               2   22[BANK0 ] int 
  8215 ;;  j               2   20[BANK0 ] int 
  8216 ;;  i               2   26[BANK0 ] int 
  8217 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  8218 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  8219 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  8220 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  8221 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  8222 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  1    wreg      void 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 3F/0
  8229 ;;		On exit  : 3F/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8233 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8234 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8235 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8236 ;;Total ram usage:       20 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:   10
  8239 ;; This function calls:
  8240 ;;		_ReadEeprom
  8241 ;;		___awdiv
  8242 ;;		___wmul
  8243 ;; This function is called by:
  8244 ;;		_LoadAllFromEeprom
  8245 ;; This function uses a non-reentrant model
  8246 ;;
  8247                           
  8248                           	psect	text35
  8249  001A28                     __ptext35:
  8250                           	opt stack 0
  8251  001A28                     _LoadStatesFromEeprom:
  8252                           	opt stack 19
  8253                           
  8254                           ; BSR set to: 0
  8255                           ;eeprom.c: 129: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  8256                           ;eeprom.c: 130: UINT8 AudAddInc;
  8257                           ;eeprom.c: 131: AddStates.Val = 0xE0;
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;incstack = 0
  8261  001A28  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  8262  001A2A  0EE0               	movlw	224
  8263  001A2C  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  8264                           
  8265                           ;eeprom.c: 132: AddAudioNormal.Val = 0x17;
  8266  001A2E  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  8267  001A30  0E17               	movlw	23
  8268  001A32  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  8269                           
  8270                           ;eeprom.c: 133: AddAudioSpecial.Val = 0x2B;
  8271  001A34  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  8272  001A36  0E2B               	movlw	43
  8273  001A38  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;eeprom.c: 134: for (int i=0; i<160; i++) {
  8277  001A3A  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  8278  001A3C  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  8279  001A3E                     l4426:
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;eeprom.c: 135: STATES[i].PERIOD = ReadEeprom(AddStates);
  8283  001A3E  D8A3               	call	PL16	;call to abstracted procedure
  8284  001A40  ECCF  F01A         	call	___wmul	;wreg free
  8285  001A44  0EF0               	movlw	low _STATES
  8286  001A46  2560               	addwf	?___wmul& (0+255),w,b
  8287  001A48  6ED9               	movwf	fsr2l,c
  8288  001A4A  0E06               	movlw	high _STATES
  8289  001A4C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8290  001A4E  D8B3               	call	PL102	;call to abstracted procedure
  8291  001A50  EC21  F01B         	call	_ReadEeprom	;wreg free
  8292  001A54  6EDF               	movwf	indf2,c
  8293                           
  8294                           ;eeprom.c: 136: AddStates.Val++;
  8295  001A56  0100               	movlb	0	; () banked
  8296  001A58  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8297  001A5A  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;eeprom.c: 137: for (int j=0; j<2; j++) {
  8301  001A5C  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  8302  001A5E  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  8303  001A60                     l4436:
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;eeprom.c: 138: STATES[i].ON[j] = ReadEeprom(AddStates);
  8307  001A60  D892               	call	PL16	;call to abstracted procedure
  8308  001A62  ECCF  F01A         	call	___wmul	;wreg free
  8309  001A66  D8AD               	call	PL154	;call to abstracted procedure
  8310  001A68  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  8311  001A6A  0E00               	movlw	0
  8312  001A6C  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8313  001A6E  5160               	movf	?___wmul& (0+255),w,b
  8314  001A70  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8315  001A72  5161               	movf	(?___wmul+1)& (0+255),w,b
  8316  001A74  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8317  001A76  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  8318  001A78  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  8319  001A7A  6ED9               	movwf	fsr2l,c
  8320  001A7C  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  8321  001A7E  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8322  001A80  D89A               	call	PL102	;call to abstracted procedure
  8323  001A82  EC21  F01B         	call	_ReadEeprom	;wreg free
  8324  001A86  6EDF               	movwf	indf2,c
  8325                           
  8326                           ;eeprom.c: 139: AddStates.Val++;
  8327  001A88  0100               	movlb	0	; () banked
  8328  001A8A  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8329  001A8C  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8330                           
  8331                           ; BSR set to: 0
  8332  001A8E  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  8333  001A90  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  8334                           
  8335                           ; BSR set to: 0
  8336  001A92  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  8337  001A94  D7E5               	goto	l4436
  8338  001A96  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  8339  001A98  E103               	bnz	u4350
  8340  001A9A  0E02               	movlw	2
  8341  001A9C  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  8342  001A9E  E3E0               	bnc	l4436
  8343  001AA0                     u4350:
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;eeprom.c: 140: }
  8347                           ;eeprom.c: 141: for (int j=0; j<2; j++) {
  8348  001AA0  6B76               	clrf	LoadStatesFromEeprom@j_1402& (0+255),b
  8349  001AA2  6B77               	clrf	(LoadStatesFromEeprom@j_1402+1)& (0+255),b
  8350  001AA4                     l4448:
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;eeprom.c: 142: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  8354  001AA4  D870               	call	PL16	;call to abstracted procedure
  8355  001AA6  ECCF  F01A         	call	___wmul	;wreg free
  8356  001AAA  D88B               	call	PL154	;call to abstracted procedure
  8357  001AAC  0E03               	movlw	3
  8358  001AAE  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8359  001AB0  0E00               	movlw	0
  8360  001AB2  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8361  001AB4  5160               	movf	?___wmul& (0+255),w,b
  8362  001AB6  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8363  001AB8  5161               	movf	(?___wmul+1)& (0+255),w,b
  8364  001ABA  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8365  001ABC  5176               	movf	LoadStatesFromEeprom@j_1402& (0+255),w,b
  8366  001ABE  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  8367  001AC0  6ED9               	movwf	fsr2l,c
  8368  001AC2  5177               	movf	(LoadStatesFromEeprom@j_1402+1)& (0+255),w,b
  8369  001AC4  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8370  001AC6  D877               	call	PL102	;call to abstracted procedure
  8371  001AC8  EC21  F01B         	call	_ReadEeprom	;wreg free
  8372  001ACC  6EDF               	movwf	indf2,c
  8373                           
  8374                           ;eeprom.c: 143: AddStates.Val++;
  8375  001ACE  0100               	movlb	0	; () banked
  8376  001AD0  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8377  001AD2  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8378                           
  8379                           ; BSR set to: 0
  8380  001AD4  4B76               	infsnz	LoadStatesFromEeprom@j_1402& (0+255),f,b
  8381  001AD6  2B77               	incf	(LoadStatesFromEeprom@j_1402+1)& (0+255),f,b
  8382                           
  8383                           ; BSR set to: 0
  8384  001AD8  BF77               	btfsc	(LoadStatesFromEeprom@j_1402+1)& (0+255),7,b
  8385  001ADA  D7E4               	goto	l4448
  8386  001ADC  5177               	movf	(LoadStatesFromEeprom@j_1402+1)& (0+255),w,b
  8387  001ADE  E103               	bnz	u4360
  8388  001AE0  0E02               	movlw	2
  8389  001AE2  5D76               	subwf	LoadStatesFromEeprom@j_1402& (0+255),w,b
  8390  001AE4  E3DF               	bnc	l4448
  8391  001AE6                     u4360:
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;eeprom.c: 144: }
  8395                           ;eeprom.c: 145: AudAddInc = i/8;
  8396  001AE6  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  8397  001AEA  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  8398  001AEE  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  8399  001AF0  0E08               	movlw	8
  8400  001AF2  6F62               	movwf	___awdiv@divisor& (0+255),b
  8401  001AF4  ECF7  F017         	call	___awdiv	;wreg free
  8402  001AF8  5160               	movf	?___awdiv& (0+255),w,b
  8403  001AFA  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;eeprom.c: 146: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  8407  001AFC  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  8408  001AFE  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  8409  001B00  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  8410  001B02  0E00               	movlw	0
  8411  001B04  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  8412  001B06  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;eeprom.c: 147: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  8416  001B08  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  8417  001B0A  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  8418  001B0C  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  8419  001B0E  0E00               	movlw	0
  8420  001B10  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  8421  001B12  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  8422                           
  8423                           ;eeprom.c: 148: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  8424  001B14  D847               	call	PL86	;call to abstracted procedure
  8425  001B16  D001               	goto	u4374
  8426  001B18                     u4375:
  8427  001B18  D859               	call	PL162	;call to abstracted procedure
  8428  001B1A                     u4374:
  8429  001B1A  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  8430  001B1C  D7FD               	goto	u4375
  8431  001B1E  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  8432  001B22  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  8433  001B26  EC21  F01B         	call	_ReadEeprom	;wreg free
  8434  001B2A  0100               	movlb	0	; () banked
  8435  001B2C  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8436  001B2E  E006               	bz	l4464
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;eeprom.c: 149: STATES[i].AUDIO = AUDIO_NORMAL;
  8440  001B30  D82A               	call	PL16	;call to abstracted procedure
  8441  001B32  ECCF  F01A         	call	___wmul	;wreg free
  8442  001B36  D82F               	call	PL78	;call to abstracted procedure
  8443  001B38  0E01               	movlw	1
  8444  001B3A  D019               	goto	L7
  8445  001B3C                     l4464:
  8446                           
  8447                           ; BSR set to: 0
  8448                           ;eeprom.c: 150: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  8449  001B3C  D833               	call	PL86	;call to abstracted procedure
  8450  001B3E  D001               	goto	u4394
  8451  001B40                     u4395:
  8452  001B40  D845               	call	PL162	;call to abstracted procedure
  8453  001B42                     u4394:
  8454  001B42  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  8455  001B44  D7FD               	goto	u4395
  8456  001B46  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  8457  001B4A  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  8458  001B4E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8459  001B52  0100               	movlb	0	; () banked
  8460  001B54  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8461  001B56  E006               	bz	l4468
  8462                           
  8463                           ; BSR set to: 0
  8464                           ;eeprom.c: 151: STATES[i].AUDIO = AUDIO_SPECIAL;
  8465  001B58  D816               	call	PL16	;call to abstracted procedure
  8466  001B5A  ECCF  F01A         	call	___wmul	;wreg free
  8467  001B5E  D81B               	call	PL78	;call to abstracted procedure
  8468  001B60  0E02               	movlw	2
  8469  001B62  D005               	goto	L7
  8470  001B64                     l4468:
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;eeprom.c: 152: else
  8474                           ;eeprom.c: 153: STATES[i].AUDIO = AUDIO_OFF;
  8475  001B64  D810               	call	PL16	;call to abstracted procedure
  8476  001B66  ECCF  F01A         	call	___wmul	;wreg free
  8477  001B6A  D815               	call	PL78	;call to abstracted procedure
  8478  001B6C  0E00               	movlw	0
  8479  001B6E                     L7:
  8480  001B6E  6EDF               	movwf	indf2,c
  8481                           
  8482                           ; BSR set to: 0
  8483  001B70  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  8484  001B72  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  8485                           
  8486                           ; BSR set to: 0
  8487  001B74  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  8488  001B76  D763               	goto	l4426
  8489  001B78  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  8490  001B7A  E104               	bnz	u4410
  8491  001B7C  0EA0               	movlw	160
  8492  001B7E  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  8493  001B80  E201 D75D          	bnc	l4426
  8494  001B84                     u4410:
  8495                           
  8496                           ; BSR set to: 0
  8497  001B84  0012               	return		;funcret
  8498  001B86                     __end_of_LoadStatesFromEeprom:
  8499                           	opt stack 0
  8500  001B86                     PL16:
  8501                           	opt stack 19
  8502  001B86  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  8503  001B8A  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  8504  001B8E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8505  001B90  0E06               	movlw	6
  8506  001B92  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8507  001B94  0C06               	retlw	6
  8508  001B96                     __end_ofPL16:
  8509                           	opt stack 0
  8510  001B96                     PL78:
  8511                           	opt stack 19
  8512  001B96  0EF5               	movlw	low (_STATES+5)
  8513  001B98  2560               	addwf	?___wmul& (0+255),w,b
  8514  001B9A  6ED9               	movwf	fsr2l,c
  8515  001B9C  0E06               	movlw	high (_STATES+5)
  8516  001B9E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8517  001BA0  6EDA               	movwf	fsr2h,c
  8518  001BA2  0012               	return	
  8519  001BA4                     __end_ofPL78:
  8520                           	opt stack 0
  8521  001BA4                     PL86:
  8522                           	opt stack 19
  8523  001BA4  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  8524  001BA8  0E07               	movlw	7
  8525  001BAA  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  8526  001BAC  0E80               	movlw	128
  8527  001BAE  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  8528  001BB0  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  8529  001BB2  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  8530  001BB4  0C80               	retlw	128
  8531  001BB6                     __end_ofPL86:
  8532                           	opt stack 0
  8533  001BB6                     PL102:
  8534                           	opt stack 19
  8535  001BB6  6EDA               	movwf	fsr2h,c
  8536  001BB8  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  8537  001BBC  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  8538  001BC0  0012               	return	
  8539  001BC2                     __end_ofPL102:
  8540                           	opt stack 0
  8541  001BC2                     PL154:
  8542                           	opt stack 19
  8543  001BC2  0EF0               	movlw	low _STATES
  8544  001BC4  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  8545  001BC6  0E06               	movlw	high _STATES
  8546  001BC8  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  8547  001BCA  0012               	return	
  8548  001BCC                     __end_ofPL154:
  8549                           	opt stack 0
  8550  001BCC                     PL162:
  8551                           	opt stack 19
  8552  001BCC  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  8553  001BCE  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  8554  001BD0  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8555  001BD2  0012               	return	
  8556  001BD4                     __end_ofPL162:
  8557                           	opt stack 0
  8558                           tosu	equ	0xFFF
  8559                           tosh	equ	0xFFE
  8560                           tosl	equ	0xFFD
  8561                           pclath	equ	0xFFA
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           intcon	equ	0xFF2
  8569                           postinc0	equ	0xFEE
  8570                           plusw0	equ	0xFEB
  8571                           wreg	equ	0xFE8
  8572                           indf1	equ	0xFE7
  8573                           postinc1	equ	0xFE6
  8574                           postdec1	equ	0xFE5
  8575                           plusw1	equ	0xFE3
  8576                           fsr1h	equ	0xFE2
  8577                           fsr1l	equ	0xFE1
  8578                           indf2	equ	0xFDF
  8579                           postinc2	equ	0xFDE
  8580                           postdec2	equ	0xFDD
  8581                           plusw2	equ	0xFDB
  8582                           fsr2h	equ	0xFDA
  8583                           fsr2l	equ	0xFD9
  8584                           status	equ	0xFD8
  8585                           
  8586 ;; *************** function ___awdiv *****************
  8587 ;; Defined at:
  8588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  dividend        2    0[BANK0 ] int 
  8591 ;;  divisor         2    2[BANK0 ] int 
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;  quotient        2    6[BANK0 ] int 
  8594 ;;  sign            1    5[BANK0 ] unsigned char 
  8595 ;;  counter         1    4[BANK0 ] unsigned char 
  8596 ;; Return value:  Size  Location     Type
  8597 ;;                  2    0[BANK0 ] int 
  8598 ;; Registers used:
  8599 ;;		wreg, status,2, status,0
  8600 ;; Tracked objects:
  8601 ;;		On entry : 3F/0
  8602 ;;		On exit  : 3F/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8605 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8606 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8608 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8609 ;;Total ram usage:        8 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    9
  8612 ;; This function calls:
  8613 ;;		Nothing
  8614 ;; This function is called by:
  8615 ;;		_GetDay
  8616 ;;		_LoadStatesFromEeprom
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           	psect	text36
  8621  002FEE                     __ptext36:
  8622                           	opt stack 0
  8623  002FEE                     ___awdiv:
  8624                           	opt stack 18
  8625                           
  8626                           ; BSR set to: 0
  8627                           
  8628                           ; BSR set to: 0
  8629                           ;incstack = 0
  8630  002FEE  6B65               	clrf	___awdiv@sign& (0+255),b
  8631                           
  8632                           ; BSR set to: 0
  8633  002FF0  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8634  002FF2  D006               	goto	l3740
  8635                           
  8636                           ; BSR set to: 0
  8637  002FF4  6D62               	negf	___awdiv@divisor& (0+255),b
  8638  002FF6  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8639  002FF8  B0D8               	btfsc	status,0,c
  8640  002FFA  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8641                           
  8642                           ; BSR set to: 0
  8643  002FFC  0E01               	movlw	1
  8644  002FFE  6F65               	movwf	___awdiv@sign& (0+255),b
  8645  003000                     l3740:
  8646                           
  8647                           ; BSR set to: 0
  8648  003000  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8649  003002  D006               	goto	l3746
  8650                           
  8651                           ; BSR set to: 0
  8652  003004  6D60               	negf	___awdiv@dividend& (0+255),b
  8653  003006  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8654  003008  B0D8               	btfsc	status,0,c
  8655  00300A  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8656                           
  8657                           ; BSR set to: 0
  8658  00300C  0E01               	movlw	1
  8659  00300E  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  8660  003010                     l3746:
  8661                           
  8662                           ; BSR set to: 0
  8663  003010  6B66               	clrf	___awdiv@quotient& (0+255),b
  8664  003012  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  8665                           
  8666                           ; BSR set to: 0
  8667  003014  5162               	movf	___awdiv@divisor& (0+255),w,b
  8668  003016  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8669  003018  E01B               	bz	l3768
  8670                           
  8671                           ; BSR set to: 0
  8672  00301A  0E01               	movlw	1
  8673  00301C  6F64               	movwf	___awdiv@counter& (0+255),b
  8674  00301E  D004               	goto	l3754
  8675  003020                     l3752:
  8676                           
  8677                           ; BSR set to: 0
  8678  003020  90D8               	bcf	status,0,c
  8679  003022  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  8680  003024  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8681  003026  2B64               	incf	___awdiv@counter& (0+255),f,b
  8682  003028                     l3754:
  8683                           
  8684                           ; BSR set to: 0
  8685  003028  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8686  00302A  D7FA               	goto	l3752
  8687  00302C                     l3756:
  8688                           
  8689                           ; BSR set to: 0
  8690  00302C  90D8               	bcf	status,0,c
  8691  00302E  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  8692  003030  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8693                           
  8694                           ; BSR set to: 0
  8695  003032  5162               	movf	___awdiv@divisor& (0+255),w,b
  8696  003034  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  8697  003036  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8698  003038  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8699  00303A  E305               	bnc	l3764
  8700                           
  8701                           ; BSR set to: 0
  8702  00303C  5162               	movf	___awdiv@divisor& (0+255),w,b
  8703  00303E  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  8704  003040  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8705  003042  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8706                           
  8707                           ; BSR set to: 0
  8708  003044  8166               	bsf	___awdiv@quotient& (0+255),0,b
  8709  003046                     l3764:
  8710                           
  8711                           ; BSR set to: 0
  8712  003046  90D8               	bcf	status,0,c
  8713  003048  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8714  00304A  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  8715                           
  8716                           ; BSR set to: 0
  8717  00304C  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  8718  00304E  D7EE               	goto	l3756
  8719  003050                     l3768:
  8720                           
  8721                           ; BSR set to: 0
  8722  003050  5165               	movf	___awdiv@sign& (0+255),w,b
  8723  003052  E004               	bz	l3772
  8724                           
  8725                           ; BSR set to: 0
  8726  003054  6D66               	negf	___awdiv@quotient& (0+255),b
  8727  003056  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8728  003058  B0D8               	btfsc	status,0,c
  8729  00305A  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8730  00305C                     l3772:
  8731                           
  8732                           ; BSR set to: 0
  8733  00305C  C066  F060         	movff	___awdiv@quotient,?___awdiv
  8734  003060  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  8735                           
  8736                           ; BSR set to: 0
  8737  003064  0012               	return		;funcret
  8738  003066                     __end_of___awdiv:
  8739                           	opt stack 0
  8740                           tosu	equ	0xFFF
  8741                           tosh	equ	0xFFE
  8742                           tosl	equ	0xFFD
  8743                           pclath	equ	0xFFA
  8744                           tblptru	equ	0xFF8
  8745                           tblptrh	equ	0xFF7
  8746                           tblptrl	equ	0xFF6
  8747                           tablat	equ	0xFF5
  8748                           prodh	equ	0xFF4
  8749                           prodl	equ	0xFF3
  8750                           intcon	equ	0xFF2
  8751                           postinc0	equ	0xFEE
  8752                           plusw0	equ	0xFEB
  8753                           wreg	equ	0xFE8
  8754                           indf1	equ	0xFE7
  8755                           postinc1	equ	0xFE6
  8756                           postdec1	equ	0xFE5
  8757                           plusw1	equ	0xFE3
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           plusw2	equ	0xFDB
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function _LoadSettingsFromEeprom *****************
  8769 ;; Defined at:
  8770 ;;		line 33 in file "libs/eeprom.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;		None
  8773 ;; Auto vars:     Size  Location     Type
  8774 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  8775 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  8776 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  8777 ;; Return value:  Size  Location     Type
  8778 ;;                  1    wreg      void 
  8779 ;; Registers used:
  8780 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8781 ;; Tracked objects:
  8782 ;;		On entry : 3F/0
  8783 ;;		On exit  : 3F/0
  8784 ;;		Unchanged: 0/0
  8785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8787 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8789 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8790 ;;Total ram usage:        8 bytes
  8791 ;; Hardware stack levels used:    1
  8792 ;; Hardware stack levels required when called:   10
  8793 ;; This function calls:
  8794 ;;		_ReadEeprom
  8795 ;;		___wmul
  8796 ;; This function is called by:
  8797 ;;		_LoadAllFromEeprom
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           	psect	text37
  8802  00168E                     __ptext37:
  8803                           	opt stack 0
  8804  00168E                     _LoadSettingsFromEeprom:
  8805                           	opt stack 19
  8806                           
  8807                           ; BSR set to: 0
  8808                           ;eeprom.c: 34: WORD_VAL Temp16, Address;
  8809                           ;eeprom.c: 35: DWORD_VAL Temp32;
  8810                           ;eeprom.c: 37: Address.Val = 0x00;
  8811                           
  8812                           ; BSR set to: 0
  8813                           ;incstack = 0
  8814  00168E  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  8815  001690  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;eeprom.c: 38: Temp16.v[0] = ReadEeprom(Address);
  8819  001692  D8E3               	call	PL8	;call to abstracted procedure
  8820  001694  EC21  F01B         	call	_ReadEeprom	;wreg free
  8821  001698  0100               	movlb	0	; () banked
  8822  00169A  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;eeprom.c: 39: Address.Val++;
  8826  00169C  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8827  00169E  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;eeprom.c: 40: Temp16.v[1] = ReadEeprom(Address);
  8831  0016A0  D8DC               	call	PL8	;call to abstracted procedure
  8832  0016A2  EC21  F01B         	call	_ReadEeprom	;wreg free
  8833  0016A6  0100               	movlb	0	; () banked
  8834  0016A8  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;eeprom.c: 41: TIME_ZONE = (INT16) 60*Temp16.Val;
  8838  0016AA  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  8839  0016AE  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  8840  0016B2  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8841  0016B4  0E3C               	movlw	60
  8842  0016B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8843  0016B8  ECCF  F01A         	call	___wmul	;wreg free
  8844  0016BC  C060  F0E4         	movff	?___wmul,_TIME_ZONE
  8845  0016C0  C061  F0E5         	movff	?___wmul+1,_TIME_ZONE+1
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;eeprom.c: 43: Address.Val = 0x02;
  8849  0016C4  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8850  0016C6  0E02               	movlw	2
  8851  0016C8  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;eeprom.c: 44: DAY_LIGHT_START.Day = ReadEeprom (Address);
  8855  0016CA  D8C7               	call	PL8	;call to abstracted procedure
  8856  0016CC  EC21  F01B         	call	_ReadEeprom	;wreg free
  8857  0016D0  0100               	movlb	0	; () banked
  8858  0016D2  6FDC               	movwf	_DAY_LIGHT_START& (0+255),b
  8859  0016D4  6BDD               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;eeprom.c: 45: Address.Val++;
  8863  0016D6  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8864  0016D8  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;eeprom.c: 46: DAY_LIGHT_START.Month = ReadEeprom (Address);
  8868  0016DA  D8BF               	call	PL8	;call to abstracted procedure
  8869  0016DC  EC21  F01B         	call	_ReadEeprom	;wreg free
  8870  0016E0  0100               	movlb	0	; () banked
  8871  0016E2  6FDE               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  8872  0016E4  6BDF               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;eeprom.c: 48: Address.Val = 0x04;
  8876  0016E6  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8877  0016E8  0E04               	movlw	4
  8878  0016EA  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8879                           
  8880                           ; BSR set to: 0
  8881                           ;eeprom.c: 49: DAY_LIGHT_END.Day = ReadEeprom (Address);
  8882  0016EC  D8B6               	call	PL8	;call to abstracted procedure
  8883  0016EE  EC21  F01B         	call	_ReadEeprom	;wreg free
  8884  0016F2  0100               	movlb	0	; () banked
  8885  0016F4  6FD8               	movwf	_DAY_LIGHT_END& (0+255),b
  8886  0016F6  6BD9               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  8887                           
  8888                           ; BSR set to: 0
  8889                           ;eeprom.c: 50: Address.Val++;
  8890  0016F8  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8891  0016FA  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8892                           
  8893                           ; BSR set to: 0
  8894                           ;eeprom.c: 51: DAY_LIGHT_END.Month = ReadEeprom (Address);
  8895  0016FC  D8AE               	call	PL8	;call to abstracted procedure
  8896  0016FE  EC21  F01B         	call	_ReadEeprom	;wreg free
  8897  001702  0100               	movlb	0	; () banked
  8898  001704  6FDA               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  8899  001706  6BDB               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;eeprom.c: 53: Address.Val = 0x06;
  8903  001708  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8904  00170A  0E06               	movlw	6
  8905  00170C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;eeprom.c: 54: CENTURY = ReadEeprom(Address);
  8909  00170E  D8A5               	call	PL8	;call to abstracted procedure
  8910  001710  EC21  F01B         	call	_ReadEeprom	;wreg free
  8911  001714  0100               	movlb	0	; () banked
  8912  001716  6FFE               	movwf	_CENTURY& (0+255),b
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;eeprom.c: 56: Address.Val = 0x07;
  8916  001718  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8917  00171A  0E07               	movlw	7
  8918  00171C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;eeprom.c: 57: Temp16.v[0] = ReadEeprom(Address);
  8922  00171E  D89D               	call	PL8	;call to abstracted procedure
  8923  001720  EC21  F01B         	call	_ReadEeprom	;wreg free
  8924  001724  0100               	movlb	0	; () banked
  8925  001726  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;eeprom.c: 58: Address.Val++;
  8929  001728  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8930  00172A  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;eeprom.c: 60: CYCLE_DELAY = (INT16) Temp16.Val;
  8934  00172C  D896               	call	PL8	;call to abstracted procedure
  8935  00172E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8936  001732  0100               	movlb	0	; () banked
  8937  001734  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;eeprom.c: 62: Address.Val = 0x09;
  8941  001736  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8942  001738  0E09               	movlw	9
  8943  00173A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8944                           
  8945                           ; BSR set to: 0
  8946                           ;eeprom.c: 63: BLINK_ON_TIME = ReadEeprom(Address);
  8947  00173C  D88E               	call	PL8	;call to abstracted procedure
  8948  00173E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8949  001742  6E5C               	movwf	_BLINK_ON_TIME,c
  8950                           
  8951                           ;eeprom.c: 65: Address.Val = 0x0A;
  8952  001744  0100               	movlb	0	; () banked
  8953  001746  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8954  001748  0E0A               	movlw	10
  8955  00174A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;eeprom.c: 66: BLINK_OFF_TIME = ReadEeprom(Address);
  8959  00174C  D886               	call	PL8	;call to abstracted procedure
  8960  00174E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8961  001752  6E5B               	movwf	_BLINK_OFF_TIME,c
  8962                           
  8963                           ;eeprom.c: 68: Address.Val = 0x0B;
  8964  001754  0100               	movlb	0	; () banked
  8965  001756  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8966  001758  0E0B               	movlw	11
  8967  00175A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8968                           
  8969                           ; BSR set to: 0
  8970                           ;eeprom.c: 69: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  8971  00175C  D87E               	call	PL8	;call to abstracted procedure
  8972  00175E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8973  001762  6E5A               	movwf	_BLINK_LAST_X_SECONDS,c
  8974                           
  8975                           ;eeprom.c: 71: Address.Val = 0x0C;
  8976  001764  0100               	movlb	0	; () banked
  8977  001766  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8978  001768  0E0C               	movlw	12
  8979  00176A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8980                           
  8981                           ; BSR set to: 0
  8982                           ;eeprom.c: 72: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  8983  00176C  D876               	call	PL8	;call to abstracted procedure
  8984  00176E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8985  001772  6E59               	movwf	_AUDIO_NORMAL_ON_TIME,c
  8986                           
  8987                           ;eeprom.c: 74: Address.Val = 0x0D;
  8988  001774  0100               	movlb	0	; () banked
  8989  001776  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8990  001778  0E0D               	movlw	13
  8991  00177A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8992                           
  8993                           ; BSR set to: 0
  8994                           ;eeprom.c: 75: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  8995  00177C  D86E               	call	PL8	;call to abstracted procedure
  8996  00177E  EC21  F01B         	call	_ReadEeprom	;wreg free
  8997  001782  6E58               	movwf	_AUDIO_NORMAL_OFF_TIME,c
  8998                           
  8999                           ;eeprom.c: 77: Address.Val = 0x0E;
  9000  001784  0100               	movlb	0	; () banked
  9001  001786  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9002  001788  0E0E               	movlw	14
  9003  00178A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;eeprom.c: 78: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  9007  00178C  D866               	call	PL8	;call to abstracted procedure
  9008  00178E  EC21  F01B         	call	_ReadEeprom	;wreg free
  9009  001792  6E57               	movwf	_AUDIO_SPECIAL_ON_TIME,c
  9010                           
  9011                           ;eeprom.c: 80: Address.Val = 0x0F;
  9012  001794  0100               	movlb	0	; () banked
  9013  001796  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9014  001798  0E0F               	movlw	15
  9015  00179A  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;eeprom.c: 81: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  9019  00179C  D85E               	call	PL8	;call to abstracted procedure
  9020  00179E  EC21  F01B         	call	_ReadEeprom	;wreg free
  9021  0017A2  6E56               	movwf	_AUDIO_SPECIAL_OFF_TIME,c
  9022                           
  9023                           ;eeprom.c: 83: Address.Val = 0x10;
  9024  0017A4  0100               	movlb	0	; () banked
  9025  0017A6  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9026  0017A8  0E10               	movlw	16
  9027  0017AA  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;eeprom.c: 84: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  9031  0017AC  D856               	call	PL8	;call to abstracted procedure
  9032  0017AE  EC21  F01B         	call	_ReadEeprom	;wreg free
  9033  0017B2  6E55               	movwf	_SPECIAL_AUDIO_LAST_X_SECONDS,c
  9034                           
  9035                           ;eeprom.c: 86: Address.Val = 0x11;
  9036  0017B4  0100               	movlb	0	; () banked
  9037  0017B6  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9038  0017B8  0E11               	movlw	17
  9039  0017BA  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;eeprom.c: 87: GPS_SYNC_AT_START = ReadEeprom(Address);
  9043  0017BC  D84E               	call	PL8	;call to abstracted procedure
  9044  0017BE  EC21  F01B         	call	_ReadEeprom	;wreg free
  9045  0017C2  0100               	movlb	0	; () banked
  9046  0017C4  6FEB               	movwf	_GPS_SYNC_AT_START& (0+255),b
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;eeprom.c: 89: Address.Val = 0x12;
  9050  0017C6  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9051  0017C8  0E12               	movlw	18
  9052  0017CA  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;eeprom.c: 90: Temp32.Val = 0;
  9056  0017CC  6B66               	clrf	LoadSettingsFromEeprom@Temp32& (0+255),b
  9057  0017CE  6B67               	clrf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  9058  0017D0  6B68               	clrf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  9059  0017D2  6B69               	clrf	(LoadSettingsFromEeprom@Temp32+3)& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;eeprom.c: 91: Temp32.v[0] = ReadEeprom(Address);
  9063  0017D4  D842               	call	PL8	;call to abstracted procedure
  9064  0017D6  EC21  F01B         	call	_ReadEeprom	;wreg free
  9065  0017DA  0100               	movlb	0	; () banked
  9066  0017DC  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;eeprom.c: 92: Address.Val++;
  9070  0017DE  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9071  0017E0  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;eeprom.c: 93: Temp32.v[1] = ReadEeprom(Address);
  9075  0017E2  D83B               	call	PL8	;call to abstracted procedure
  9076  0017E4  EC21  F01B         	call	_ReadEeprom	;wreg free
  9077  0017E8  0100               	movlb	0	; () banked
  9078  0017EA  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  9079                           
  9080                           ; BSR set to: 0
  9081                           ;eeprom.c: 94: Address.Val++;
  9082  0017EC  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9083  0017EE  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;eeprom.c: 95: Temp32.v[2] = ReadEeprom(Address);
  9087  0017F0  D834               	call	PL8	;call to abstracted procedure
  9088  0017F2  EC21  F01B         	call	_ReadEeprom	;wreg free
  9089  0017F6  0100               	movlb	0	; () banked
  9090  0017F8  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;eeprom.c: 96: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  9094  0017FA  C066  F0D4         	movff	LoadSettingsFromEeprom@Temp32,_GPS_SYNC_EVERY_x_SECONDS
  9095  0017FE  C067  F0D5         	movff	LoadSettingsFromEeprom@Temp32+1,_GPS_SYNC_EVERY_x_SECONDS+1
  9096  001802  C068  F0D6         	movff	LoadSettingsFromEeprom@Temp32+2,_GPS_SYNC_EVERY_x_SECONDS+2
  9097  001806  C069  F0D7         	movff	LoadSettingsFromEeprom@Temp32+3,_GPS_SYNC_EVERY_x_SECONDS+3
  9098                           
  9099                           ; BSR set to: 0
  9100                           ;eeprom.c: 98: Address.Val = 0x15;
  9101  00180A  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9102  00180C  0E15               	movlw	21
  9103  00180E  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;eeprom.c: 99: Temp16.v[0] = ReadEeprom(Address);
  9107  001810  D824               	call	PL8	;call to abstracted procedure
  9108  001812  EC21  F01B         	call	_ReadEeprom	;wreg free
  9109  001816  0100               	movlb	0	; () banked
  9110  001818  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;eeprom.c: 100: Address.Val++;
  9114  00181A  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9115  00181C  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;eeprom.c: 101: Temp16.v[1] = ReadEeprom(Address);
  9119  00181E  D81D               	call	PL8	;call to abstracted procedure
  9120  001820  EC21  F01B         	call	_ReadEeprom	;wreg free
  9121  001824  0100               	movlb	0	; () banked
  9122  001826  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  9123                           
  9124                           ; BSR set to: 0
  9125                           ;eeprom.c: 102: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  9126  001828  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  9127  00182C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9128  00182E  0E0E               	movlw	14
  9129  001830  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9130  001832  0E10               	movlw	16
  9131  001834  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9132  001836  ECCF  F01A         	call	___wmul	;wreg free
  9133  00183A  516A               	movf	LoadSettingsFromEeprom@Temp16& (0+255),w,b
  9134  00183C  0D3C               	mullw	60
  9135  00183E  5160               	movf	?___wmul& (0+255),w,b
  9136  001840  26F3               	addwf	prodl,f,c
  9137  001842  5161               	movf	(?___wmul+1)& (0+255),w,b
  9138  001844  22F4               	addwfc	prodh,f,c
  9139  001846  CFF3 F0D0          	movff	prodl,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME
  9140  00184A  CFF4 F0D1          	movff	prodh,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1
  9141  00184E  0E00               	movlw	0
  9142  001850  BFD1               	btfsc	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),7,b
  9143  001852  0EFF               	movlw	-1
  9144  001854  6FD2               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),b
  9145  001856  6FD3               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),b
  9146                           
  9147                           ; BSR set to: 0
  9148  001858  0012               	return		;funcret
  9149  00185A                     __end_of_LoadSettingsFromEeprom:
  9150                           	opt stack 0
  9151  00185A                     PL8:
  9152                           	opt stack 19
  9153  00185A  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  9154  00185E  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  9155  001862  0012               	return	
  9156  001864                     __end_ofPL8:
  9157                           	opt stack 0
  9158                           tosu	equ	0xFFF
  9159                           tosh	equ	0xFFE
  9160                           tosl	equ	0xFFD
  9161                           pclath	equ	0xFFA
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           postinc0	equ	0xFEE
  9170                           plusw0	equ	0xFEB
  9171                           wreg	equ	0xFE8
  9172                           indf1	equ	0xFE7
  9173                           postinc1	equ	0xFE6
  9174                           postdec1	equ	0xFE5
  9175                           plusw1	equ	0xFE3
  9176                           fsr1h	equ	0xFE2
  9177                           fsr1l	equ	0xFE1
  9178                           indf2	equ	0xFDF
  9179                           postinc2	equ	0xFDE
  9180                           postdec2	equ	0xFDD
  9181                           plusw2	equ	0xFDB
  9182                           fsr2h	equ	0xFDA
  9183                           fsr2l	equ	0xFD9
  9184                           status	equ	0xFD8
  9185                           
  9186 ;; *************** function _LoadEventsFromEeprom *****************
  9187 ;; Defined at:
  9188 ;;		line 105 in file "libs/eeprom.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  i               2   20[BANK0 ] int 
  9193 ;;  Temp16          2   24[BANK0 ] struct _WORD_VAL
  9194 ;;  Address         2   22[BANK0 ] struct _WORD_VAL
  9195 ;; Return value:  Size  Location     Type
  9196 ;;                  1    wreg      void 
  9197 ;; Registers used:
  9198 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 3F/0
  9201 ;;		On exit  : 3F/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9206 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9207 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9208 ;;Total ram usage:       14 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:   10
  9211 ;; This function calls:
  9212 ;;		_ReadEeprom
  9213 ;;		___lmul
  9214 ;;		___wmul
  9215 ;; This function is called by:
  9216 ;;		_LoadAllFromEeprom
  9217 ;; This function uses a non-reentrant model
  9218 ;;
  9219                           
  9220                           	psect	text38
  9221  001BD4                     __ptext38:
  9222                           	opt stack 0
  9223  001BD4                     _LoadEventsFromEeprom:
  9224                           	opt stack 19
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;eeprom.c: 106: WORD_VAL Temp16, Address;
  9228                           ;eeprom.c: 107: Address.Val = 0x50;
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;incstack = 0
  9232  001BD4  6B77               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  9233  001BD6  0E50               	movlw	80
  9234  001BD8  6F76               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  9235                           
  9236                           ; BSR set to: 0
  9237                           ;eeprom.c: 108: for (int i=0; i<24; i++) {
  9238  001BDA  6B74               	clrf	LoadEventsFromEeprom@i& (0+255),b
  9239  001BDC  6B75               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  9240  001BDE                     l4390:
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;eeprom.c: 109: Temp16.v[0] = ReadEeprom(Address);
  9244  001BDE  D8AD               	call	PL74	;call to abstracted procedure
  9245  001BE0  EC21  F01B         	call	_ReadEeprom	;wreg free
  9246  001BE4  0100               	movlb	0	; () banked
  9247  001BE6  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  9248                           
  9249                           ; BSR set to: 0
  9250                           ;eeprom.c: 110: Address.Val++;
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;eeprom.c: 111: Temp16.v[1] = ReadEeprom(Address);
  9254  001BE8  D896               	call	PL48	;call to abstracted procedure
  9255  001BEA  EC21  F01B         	call	_ReadEeprom	;wreg free
  9256                           
  9257                           ; BSR set to: 0
  9258                           ;eeprom.c: 112: EVENTS[i].START_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  9259                           ;eeprom.c: 113: + (INT32)((INT8)Temp16.v[0])*60;
  9260  001BEE  D887               	call	PL32	;call to abstracted procedure
  9261  001BF0  D878               	call	PL30	;call to abstracted procedure
  9262  001BF2  EC21  F019         	call	___lmul	;wreg free
  9263  001BF6  D84B               	call	PL20	;call to abstracted procedure
  9264  001BF8  EC21  F019         	call	___lmul	;wreg free
  9265  001BFC  D85E               	call	PL24	;call to abstracted procedure
  9266  001BFE  ECCF  F01A         	call	___wmul	;wreg free
  9267  001C02  EC74  F010         	call	PL44	;call to abstracted procedure
  9268  001C06  0E02               	movlw	high _EVENTS
  9269  001C08  D88D               	call	PL72	;call to abstracted procedure
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;eeprom.c: 114: Address.Val++;
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;eeprom.c: 115: Temp16.v[0] = ReadEeprom(Address);
  9276  001C0A  D885               	call	PL48	;call to abstracted procedure
  9277  001C0C  EC21  F01B         	call	_ReadEeprom	;wreg free
  9278  001C10  0100               	movlb	0	; () banked
  9279  001C12  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;eeprom.c: 116: Address.Val++;
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;eeprom.c: 117: Temp16.v[1] = ReadEeprom(Address);
  9286  001C14  D880               	call	PL48	;call to abstracted procedure
  9287  001C16  EC21  F01B         	call	_ReadEeprom	;wreg free
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;eeprom.c: 118: EVENTS[i].END_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  9291                           ;eeprom.c: 119: + (INT32)((INT8)Temp16.v[0])*60;
  9292  001C1A  D871               	call	PL32	;call to abstracted procedure
  9293  001C1C  D862               	call	PL30	;call to abstracted procedure
  9294  001C1E  EC21  F019         	call	___lmul	;wreg free
  9295  001C22  D835               	call	PL20	;call to abstracted procedure
  9296  001C24  EC21  F019         	call	___lmul	;wreg free
  9297  001C28  D848               	call	PL24	;call to abstracted procedure
  9298  001C2A  ECCF  F01A         	call	___wmul	;wreg free
  9299  001C2E  EC78  F010         	call	PL80	;call to abstracted procedure
  9300  001C32  D878               	call	PL72	;call to abstracted procedure
  9301                           
  9302                           ;eeprom.c: 120: Address.Val++;
  9303  001C34  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9304  001C36  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;eeprom.c: 121: EVENTS[i].CYCLE = ReadEeprom(Address);
  9308  001C38  D866               	call	PL36	;call to abstracted procedure
  9309  001C3A  ECCF  F01A         	call	___wmul	;wreg free
  9310  001C3E  0E08               	movlw	low (_EVENTS+8)
  9311  001C40  2560               	addwf	?___wmul& (0+255),w,b
  9312  001C42  6ED9               	movwf	fsr2l,c
  9313  001C44  0E02               	movlw	high (_EVENTS+8)
  9314  001C46  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9315  001C48  6EDA               	movwf	fsr2h,c
  9316  001C4A  D877               	call	PL74	;call to abstracted procedure
  9317  001C4C  EC21  F01B         	call	_ReadEeprom	;wreg free
  9318  001C50  6EDF               	movwf	indf2,c
  9319                           
  9320                           ;eeprom.c: 122: Address.Val++;
  9321  001C52  0100               	movlb	0	; () banked
  9322                           
  9323                           ;eeprom.c: 123: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  9324  001C54  D860               	call	PL48	;call to abstracted procedure
  9325  001C56  EC21  F01B         	call	_ReadEeprom	;wreg free
  9326  001C5A  0100               	movlb	0	; () banked
  9327  001C5C  6F6C               	movwf	??_LoadEventsFromEeprom& (0+255),b
  9328  001C5E  D853               	call	PL36	;call to abstracted procedure
  9329  001C60  ECCF  F01A         	call	___wmul	;wreg free
  9330  001C64  EC7D  F010         	call	PL116	;call to abstracted procedure
  9331  001C68  476C               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  9332  001C6A  50DF               	movf	223,w,c
  9333  001C6C  0100               	movlb	0	; () banked
  9334  001C6E  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  9335  001C70  0B01               	andlw	-255
  9336  001C72  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  9337  001C74  6EDF               	movwf	223,c
  9338                           
  9339                           ; BSR set to: 2
  9340                           ;eeprom.c: 124: Address.Val++;
  9341  001C76  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9342  001C78  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9343                           
  9344                           ; BSR set to: 0
  9345  001C7A  4B74               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  9346  001C7C  2B75               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  9347                           
  9348                           ; BSR set to: 0
  9349  001C7E  BF75               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  9350  001C80  D7AE               	goto	l4390
  9351  001C82  5175               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  9352  001C84  E103               	bnz	u4340
  9353  001C86  0E18               	movlw	24
  9354  001C88  5D74               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  9355  001C8A  E3A9               	bnc	l4390
  9356  001C8C                     u4340:
  9357                           
  9358                           ; BSR set to: 0
  9359  001C8C  0012               	return		;funcret
  9360  001C8E                     __end_of_LoadEventsFromEeprom:
  9361                           	opt stack 0
  9362  001C8E                     PL20:
  9363                           	opt stack 19
  9364  001C8E  C060  F06C         	movff	?___lmul,??_LoadEventsFromEeprom
  9365  001C92  C061  F06D         	movff	?___lmul+1,??_LoadEventsFromEeprom+1
  9366  001C96  C062  F06E         	movff	?___lmul+2,??_LoadEventsFromEeprom+2
  9367  001C9A  C063  F06F         	movff	?___lmul+3,??_LoadEventsFromEeprom+3
  9368  001C9E  5178               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  9369  001CA0  6F60               	movwf	___lmul@multiplier& (0+255),b
  9370  001CA2  0E00               	movlw	0
  9371  001CA4  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  9372  001CA6  0EFF               	movlw	-1
  9373  001CA8  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  9374  001CAA  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  9375  001CAC  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  9376  001CAE  0E3C               	movlw	60
  9377  001CB0  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9378  001CB2  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  9379  001CB4  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  9380  001CB6  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  9381  001CB8  0C3C               	retlw	60
  9382  001CBA                     __end_ofPL20:
  9383                           	opt stack 0
  9384  001CBA                     PL24:
  9385                           	opt stack 19
  9386  001CBA  5160               	movf	?___lmul& (0+255),w,b
  9387  001CBC  256C               	addwf	??_LoadEventsFromEeprom& (0+255),w,b
  9388  001CBE  6F70               	movwf	(??_LoadEventsFromEeprom+4)& (0+255),b
  9389  001CC0  5161               	movf	(?___lmul+1)& (0+255),w,b
  9390  001CC2  216D               	addwfc	(??_LoadEventsFromEeprom+1)& (0+255),w,b
  9391  001CC4  6F71               	movwf	(??_LoadEventsFromEeprom+5)& (0+255),b
  9392  001CC6  5162               	movf	(?___lmul+2)& (0+255),w,b
  9393  001CC8  216E               	addwfc	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  9394  001CCA  6F72               	movwf	(??_LoadEventsFromEeprom+6)& (0+255),b
  9395  001CCC  5163               	movf	(?___lmul+3)& (0+255),w,b
  9396  001CCE  216F               	addwfc	(??_LoadEventsFromEeprom+3)& (0+255),w,b
  9397  001CD0  6F73               	movwf	(??_LoadEventsFromEeprom+7)& (0+255),b
  9398  001CD2  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  9399  001CD6  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  9400  001CDA  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9401  001CDC  0E0A               	movlw	10
  9402  001CDE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9403  001CE0  0C0A               	retlw	10
  9404  001CE2                     __end_ofPL24:
  9405                           	opt stack 0
  9406  001CE2                     PL30:
  9407                           	opt stack 19
  9408  001CE2  6F60               	movwf	___lmul@multiplier& (0+255),b
  9409  001CE4  0E00               	movlw	0
  9410  001CE6  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  9411  001CE8  0EFF               	movlw	-1
  9412  001CEA  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  9413  001CEC  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  9414  001CEE  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  9415  001CF0  0E10               	movlw	16
  9416  001CF2  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9417  001CF4  0E0E               	movlw	14
  9418  001CF6  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  9419  001CF8  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  9420  001CFA  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  9421  001CFC  0C0E               	retlw	14
  9422  001CFE                     __end_ofPL30:
  9423                           	opt stack 0
  9424  001CFE                     PL32:
  9425                           	opt stack 19
  9426  001CFE  0100               	movlb	0	; () banked
  9427  001D00  6F79               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  9428  001D02  5179               	movf	(LoadEventsFromEeprom@Temp16+1)& (0+255),w,b
  9429  001D04  0012               	return	
  9430  001D06                     __end_ofPL32:
  9431                           	opt stack 0
  9432  001D06                     PL36:
  9433                           	opt stack 19
  9434  001D06  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  9435  001D0A  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  9436  001D0E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9437  001D10  0E0A               	movlw	10
  9438  001D12  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9439  001D14  0C0A               	retlw	10
  9440  001D16                     __end_ofPL36:
  9441                           	opt stack 0
  9442  001D16                     PL48:
  9443                           	opt stack 19
  9444  001D16  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9445  001D18  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9446  001D1A  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  9447  001D1E  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  9448  001D22  0012               	return	
  9449  001D24                     __end_ofPL48:
  9450                           	opt stack 0
  9451  001D24                     PL72:
  9452                           	opt stack 19
  9453  001D24  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9454  001D26  6EDA               	movwf	fsr2h,c
  9455  001D28  C070  FFDE         	movff	??_LoadEventsFromEeprom+4,postinc2
  9456  001D2C  C071  FFDE         	movff	??_LoadEventsFromEeprom+5,postinc2
  9457  001D30  C072  FFDE         	movff	??_LoadEventsFromEeprom+6,postinc2
  9458  001D34  C073  FFDE         	movff	??_LoadEventsFromEeprom+7,postinc2
  9459  001D38  0012               	return	
  9460  001D3A                     __end_ofPL72:
  9461                           	opt stack 0
  9462  001D3A                     PL74:
  9463                           	opt stack 19
  9464  001D3A  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  9465  001D3E  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  9466  001D42  0012               	return	
  9467  001D44                     __end_ofPL74:
  9468                           	opt stack 0
  9469                           tosu	equ	0xFFF
  9470                           tosh	equ	0xFFE
  9471                           tosl	equ	0xFFD
  9472                           pclath	equ	0xFFA
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon	equ	0xFF2
  9480                           postinc0	equ	0xFEE
  9481                           plusw0	equ	0xFEB
  9482                           wreg	equ	0xFE8
  9483                           indf1	equ	0xFE7
  9484                           postinc1	equ	0xFE6
  9485                           postdec1	equ	0xFE5
  9486                           plusw1	equ	0xFE3
  9487                           fsr1h	equ	0xFE2
  9488                           fsr1l	equ	0xFE1
  9489                           indf2	equ	0xFDF
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           plusw2	equ	0xFDB
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function ___lmul *****************
  9498 ;; Defined at:
  9499 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9502 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  product         4    8[BANK0 ] unsigned long 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  4    0[BANK0 ] unsigned long 
  9507 ;; Registers used:
  9508 ;;		wreg, status,2, status,0
  9509 ;; Tracked objects:
  9510 ;;		On entry : 3F/0
  9511 ;;		On exit  : 3F/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9514 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9515 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9517 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9518 ;;Total ram usage:       12 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    9
  9521 ;; This function calls:
  9522 ;;		Nothing
  9523 ;; This function is called by:
  9524 ;;		_WriteLongInt
  9525 ;;		_LoadEventsFromEeprom
  9526 ;;		_TimeTextToSecond
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text39
  9531  003242                     __ptext39:
  9532                           	opt stack 0
  9533  003242                     ___lmul:
  9534                           	opt stack 20
  9535                           
  9536                           ; BSR set to: 0
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;incstack = 0
  9540  003242  6B68               	clrf	___lmul@product& (0+255),b
  9541  003244  6B69               	clrf	(___lmul@product+1)& (0+255),b
  9542  003246  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  9543  003248  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  9544  00324A                     l1192:
  9545                           
  9546                           ; BSR set to: 0
  9547  00324A  A160               	btfss	___lmul@multiplier& (0+255),0,b
  9548  00324C  D008               	goto	l3648
  9549                           
  9550                           ; BSR set to: 0
  9551  00324E  5164               	movf	___lmul@multiplicand& (0+255),w,b
  9552  003250  2768               	addwf	___lmul@product& (0+255),f,b
  9553  003252  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  9554  003254  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  9555  003256  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  9556  003258  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  9557  00325A  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  9558  00325C  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  9559  00325E                     l3648:
  9560                           
  9561                           ; BSR set to: 0
  9562  00325E  90D8               	bcf	status,0,c
  9563  003260  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  9564  003262  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  9565  003264  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  9566  003266  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  9567                           
  9568                           ; BSR set to: 0
  9569  003268  90D8               	bcf	status,0,c
  9570  00326A  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  9571  00326C  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  9572  00326E  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  9573  003270  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  9574  003272  5160               	movf	___lmul@multiplier& (0+255),w,b
  9575  003274  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  9576  003276  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  9577  003278  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  9578  00327A  E1E7               	bnz	l1192
  9579                           
  9580                           ; BSR set to: 0
  9581  00327C  C068  F060         	movff	___lmul@product,?___lmul
  9582  003280  C069  F061         	movff	___lmul@product+1,?___lmul+1
  9583  003284  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  9584  003288  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  9585                           
  9586                           ; BSR set to: 0
  9587  00328C  0012               	return		;funcret
  9588  00328E                     __end_of___lmul:
  9589                           	opt stack 0
  9590                           tosu	equ	0xFFF
  9591                           tosh	equ	0xFFE
  9592                           tosl	equ	0xFFD
  9593                           pclath	equ	0xFFA
  9594                           tblptru	equ	0xFF8
  9595                           tblptrh	equ	0xFF7
  9596                           tblptrl	equ	0xFF6
  9597                           tablat	equ	0xFF5
  9598                           prodh	equ	0xFF4
  9599                           prodl	equ	0xFF3
  9600                           intcon	equ	0xFF2
  9601                           postinc0	equ	0xFEE
  9602                           plusw0	equ	0xFEB
  9603                           wreg	equ	0xFE8
  9604                           indf1	equ	0xFE7
  9605                           postinc1	equ	0xFE6
  9606                           postdec1	equ	0xFE5
  9607                           plusw1	equ	0xFE3
  9608                           fsr1h	equ	0xFE2
  9609                           fsr1l	equ	0xFE1
  9610                           indf2	equ	0xFDF
  9611                           postinc2	equ	0xFDE
  9612                           postdec2	equ	0xFDD
  9613                           plusw2	equ	0xFDB
  9614                           fsr2h	equ	0xFDA
  9615                           fsr2l	equ	0xFD9
  9616                           status	equ	0xFD8
  9617                           
  9618 ;; *************** function _LoadCyclesFromEeprom *****************
  9619 ;; Defined at:
  9620 ;;		line 157 in file "libs/eeprom.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;		None
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  j               2   15[BANK0 ] int 
  9625 ;;  i               2   19[BANK0 ] int 
  9626 ;;  i               2   17[BANK0 ] int 
  9627 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  1    wreg      void 
  9630 ;; Registers used:
  9631 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9632 ;; Tracked objects:
  9633 ;;		On entry : 3F/0
  9634 ;;		On exit  : 3F/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9638 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9639 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9640 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9641 ;;Total ram usage:       15 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:   10
  9644 ;; This function calls:
  9645 ;;		_ReadEeprom
  9646 ;;		___wmul
  9647 ;; This function is called by:
  9648 ;;		_LoadAllFromEeprom
  9649 ;; This function uses a non-reentrant model
  9650 ;;
  9651                           
  9652                           	psect	text40
  9653  001E96                     __ptext40:
  9654                           	opt stack 0
  9655  001E96                     _LoadCyclesFromEeprom:
  9656                           	opt stack 19
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;eeprom.c: 158: WORD_VAL Address;
  9660                           ;eeprom.c: 159: Address.Val = 0x3F;
  9661                           
  9662                           ; BSR set to: 0
  9663                           ;incstack = 0
  9664  001E96  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  9665  001E98  0E3F               	movlw	63
  9666  001E9A  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;eeprom.c: 161: for (int i=0; i<17; i++) {
  9670  001E9C  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  9671  001E9E  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  9672  001EA0                     l4482:
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;eeprom.c: 162: CYCLES[i].END_STATE = ReadEeprom(Address);
  9676  001EA0  D898               	call	PL6	;call to abstracted procedure
  9677  001EA2  0E03               	movlw	3
  9678  001EA4  D892               	call	PL4	;call to abstracted procedure
  9679  001EA6  90D8               	bcf	status,0,c
  9680  001EA8  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  9681  001EAA  6ED9               	movwf	fsr2l,c
  9682  001EAC  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  9683  001EAE  6EDA               	movwf	fsr2h,c
  9684  001EB0  90D8               	bcf	status,0,c
  9685  001EB2  36D9               	rlcf	fsr2l,f,c
  9686  001EB4  36DA               	rlcf	fsr2h,f,c
  9687  001EB6  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  9688  001EB8  26D9               	addwf	fsr2l,f,c
  9689  001EBA  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  9690  001EBC  22DA               	addwfc	fsr2h,f,c
  9691  001EBE  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  9692  001EC2  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  9693  001EC6  EC21  F01B         	call	_ReadEeprom	;wreg free
  9694  001ECA  6EDF               	movwf	indf2,c
  9695                           
  9696                           ;eeprom.c: 163: Address.Val++;
  9697  001ECC  0100               	movlb	0	; () banked
  9698  001ECE  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  9699  001ED0  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  9700                           
  9701                           ; BSR set to: 0
  9702  001ED2  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  9703  001ED4  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  9704                           
  9705                           ; BSR set to: 0
  9706  001ED6  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  9707  001ED8  D7E3               	goto	l4482
  9708  001EDA  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  9709  001EDC  E103               	bnz	u4420
  9710  001EDE  0E11               	movlw	17
  9711  001EE0  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  9712  001EE2  E3DE               	bnc	l4482
  9713  001EE4                     u4420:
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;eeprom.c: 164: }
  9717                           ;eeprom.c: 166: for (int i=0; i<17; i++) {
  9718  001EE4  6B73               	clrf	LoadCyclesFromEeprom@i_1467& (0+255),b
  9719  001EE6  6B74               	clrf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),b
  9720  001EE8                     l4494:
  9721                           
  9722                           ; BSR set to: 0
  9723                           ;eeprom.c: 167: if (i==0)
  9724  001EE8  5173               	movf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9725  001EEA  1174               	iorwf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9726  001EEC  E106               	bnz	l4498
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;eeprom.c: 168: CYCLES[i].START_STATE = 0;
  9730  001EEE  D871               	call	PL6	;call to abstracted procedure
  9731  001EF0  0E02               	movlw	2
  9732  001EF2  D86B               	call	PL4	;call to abstracted procedure
  9733  001EF4  D85D               	call	PL2	;call to abstracted procedure
  9734  001EF6  6ADF               	clrf	indf2,c
  9735  001EF8  D01E               	goto	l4500
  9736  001EFA                     l4498:
  9737                           
  9738                           ; BSR set to: 0
  9739                           ;eeprom.c: 169: else
  9740                           ;eeprom.c: 172: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  9741  001EFA  D86B               	call	PL6	;call to abstracted procedure
  9742  001EFC  0E02               	movlw	2
  9743  001EFE  D865               	call	PL4	;call to abstracted procedure
  9744  001F00  D857               	call	PL2	;call to abstracted procedure
  9745  001F02  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  9746  001F04  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  9747  001F06  0E00               	movlw	low _CYCLES
  9748  001F08  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  9749  001F0A  0E01               	movlw	high _CYCLES
  9750  001F0C  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  9751  001F0E  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  9752  001F10  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  9753  001F12  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  9754  001F14  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  9755  001F16  90D8               	bcf	status,0,c
  9756  001F18  3573               	rlcf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9757  001F1A  6EE1               	movwf	fsr1l,c
  9758  001F1C  3574               	rlcf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9759  001F1E  6EE2               	movwf	fsr1h,c
  9760  001F20  90D8               	bcf	status,0,c
  9761  001F22  36E1               	rlcf	fsr1l,f,c
  9762  001F24  36E2               	rlcf	fsr1h,f,c
  9763  001F26  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  9764  001F28  26E1               	addwf	fsr1l,f,c
  9765  001F2A  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  9766  001F2C  22E2               	addwfc	fsr1h,f,c
  9767  001F2E  50E7               	movf	indf1,w,c
  9768  001F30  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  9769  001F32  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  9770  001F34  6EDF               	movwf	indf2,c
  9771  001F36                     l4500:
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;eeprom.c: 173: CYCLES[i].PERIOD = 0;
  9775  001F36  D84D               	call	PL6	;call to abstracted procedure
  9776  001F38  D83B               	call	PL2	;call to abstracted procedure
  9777  001F3A  6ADE               	clrf	postinc2,c
  9778  001F3C  6ADD               	clrf	postdec2,c
  9779                           
  9780                           ; BSR set to: 0
  9781                           ;eeprom.c: 174: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  9782  001F3E  D849               	call	PL6	;call to abstracted procedure
  9783  001F40  0E02               	movlw	2
  9784  001F42  D843               	call	PL4	;call to abstracted procedure
  9785  001F44  D835               	call	PL2	;call to abstracted procedure
  9786  001F46  50DF               	movf	indf2,w,c
  9787  001F48  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  9788  001F4A  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  9789  001F4C  D017               	goto	l4508
  9790  001F4E                     l4504:
  9791                           
  9792                           ; BSR set to: 0
  9793                           ;eeprom.c: 175: CYCLES[i].PERIOD += STATES[j].PERIOD;
  9794  001F4E  D841               	call	PL6	;call to abstracted procedure
  9795  001F50  D82F               	call	PL2	;call to abstracted procedure
  9796  001F52  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  9797  001F56  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  9798  001F5A  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9799  001F5C  0E06               	movlw	6
  9800  001F5E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9801  001F60  ECCF  F01A         	call	___wmul	;wreg free
  9802  001F64  0EF0               	movlw	low _STATES
  9803  001F66  2560               	addwf	?___wmul& (0+255),w,b
  9804  001F68  6EE1               	movwf	fsr1l,c
  9805  001F6A  0E06               	movlw	high _STATES
  9806  001F6C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9807  001F6E  6EE2               	movwf	fsr1h,c
  9808  001F70  50E7               	movf	indf1,w,c
  9809  001F72  26DE               	addwf	postinc2,f,c
  9810  001F74  0E00               	movlw	0
  9811  001F76  22DD               	addwfc	postdec2,f,c
  9812                           
  9813                           ; BSR set to: 0
  9814  001F78  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  9815  001F7A  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  9816  001F7C                     l4508:
  9817                           
  9818                           ; BSR set to: 0
  9819  001F7C  D82A               	call	PL6	;call to abstracted procedure
  9820  001F7E  0E03               	movlw	3
  9821  001F80  D824               	call	PL4	;call to abstracted procedure
  9822  001F82  D816               	call	PL2	;call to abstracted procedure
  9823  001F84  50DF               	movf	indf2,w,c
  9824  001F86  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  9825  001F88  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  9826  001F8A  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  9827  001F8C  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  9828  001F8E  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  9829  001F90  0A80               	xorlw	128
  9830  001F92  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  9831  001F94  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  9832  001F96  0A80               	xorlw	128
  9833  001F98  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  9834  001F9A  E2D9               	bc	l4504
  9835                           
  9836                           ; BSR set to: 0
  9837  001F9C  4B73               	infsnz	LoadCyclesFromEeprom@i_1467& (0+255),f,b
  9838  001F9E  2B74               	incf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),f,b
  9839                           
  9840                           ; BSR set to: 0
  9841  001FA0  BF74               	btfsc	(LoadCyclesFromEeprom@i_1467+1)& (0+255),7,b
  9842  001FA2  D7A2               	goto	l4494
  9843  001FA4  5174               	movf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9844  001FA6  E103               	bnz	u4450
  9845  001FA8  0E11               	movlw	17
  9846  001FAA  5D73               	subwf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9847  001FAC  E39D               	bnc	l4494
  9848  001FAE                     u4450:
  9849                           
  9850                           ; BSR set to: 0
  9851  001FAE  0012               	return		;funcret
  9852  001FB0                     __end_of_LoadCyclesFromEeprom:
  9853                           	opt stack 0
  9854  001FB0                     PL2:
  9855                           	opt stack 19
  9856  001FB0  90D8               	bcf	status,0,c
  9857  001FB2  3573               	rlcf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9858  001FB4  6ED9               	movwf	fsr2l,c
  9859  001FB6  3574               	rlcf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9860  001FB8  6EDA               	movwf	fsr2h,c
  9861  001FBA  90D8               	bcf	status,0,c
  9862  001FBC  36D9               	rlcf	fsr2l,f,c
  9863  001FBE  36DA               	rlcf	fsr2h,f,c
  9864  001FC0  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  9865  001FC2  26D9               	addwf	fsr2l,f,c
  9866  001FC4  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  9867  001FC6  22DA               	addwfc	fsr2h,f,c
  9868  001FC8  0012               	return	
  9869  001FCA                     __end_ofPL2:
  9870                           	opt stack 0
  9871  001FCA                     PL4:
  9872                           	opt stack 19
  9873  001FCA  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  9874  001FCC  0E00               	movlw	0
  9875  001FCE  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  9876  001FD0  0C00               	retlw	0
  9877  001FD2                     __end_ofPL4:
  9878                           	opt stack 0
  9879  001FD2                     PL6:
  9880                           	opt stack 19
  9881  001FD2  0E00               	movlw	low _CYCLES
  9882  001FD4  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  9883  001FD6  0E01               	movlw	high _CYCLES
  9884  001FD8  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  9885  001FDA  0012               	return	
  9886  001FDC                     __end_ofPL6:
  9887                           	opt stack 0
  9888                           tosu	equ	0xFFF
  9889                           tosh	equ	0xFFE
  9890                           tosl	equ	0xFFD
  9891                           pclath	equ	0xFFA
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           postinc0	equ	0xFEE
  9900                           plusw0	equ	0xFEB
  9901                           wreg	equ	0xFE8
  9902                           indf1	equ	0xFE7
  9903                           postinc1	equ	0xFE6
  9904                           postdec1	equ	0xFE5
  9905                           plusw1	equ	0xFE3
  9906                           fsr1h	equ	0xFE2
  9907                           fsr1l	equ	0xFE1
  9908                           indf2	equ	0xFDF
  9909                           postinc2	equ	0xFDE
  9910                           postdec2	equ	0xFDD
  9911                           plusw2	equ	0xFDB
  9912                           fsr2h	equ	0xFDA
  9913                           fsr2l	equ	0xFD9
  9914                           status	equ	0xFD8
  9915                           
  9916 ;; *************** function _ReadEeprom *****************
  9917 ;; Defined at:
  9918 ;;		line 3 in file "libs/eeprom.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;		None
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  1    wreg      unsigned char 
  9925 ;; Registers used:
  9926 ;;		wreg, status,2
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9936 ;;Total ram usage:        2 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    9
  9939 ;; This function calls:
  9940 ;;		Nothing
  9941 ;; This function is called by:
  9942 ;;		_LoadSettingsFromEeprom
  9943 ;;		_LoadEventsFromEeprom
  9944 ;;		_LoadStatesFromEeprom
  9945 ;;		_LoadCyclesFromEeprom
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           	psect	text41
  9950  003642                     __ptext41:
  9951                           	opt stack 0
  9952  003642                     _ReadEeprom:
  9953                           	opt stack 19
  9954                           
  9955                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  9956                           
  9957                           ; BSR set to: 0
  9958                           ;incstack = 0
  9959  003642  0E3F               	movlw	-193
  9960  003644  1681               	andwf	3969,f,c	;volatile
  9961                           
  9962                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  9963  003646  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  9964                           
  9965                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  9966  00364A  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  9967                           
  9968                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  9969  00364E  8081               	bsf	3969,0,c	;volatile
  9970                           
  9971                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  9972  003650  8E81               	bsf	3969,7,c	;volatile
  9973                           
  9974                           ;eeprom.c: 12: return NVMDAT;
  9975  003652  5080               	movf	3968,w,c	;volatile
  9976  003654  0012               	return		;funcret
  9977  003656                     __end_of_ReadEeprom:
  9978                           	opt stack 0
  9979                           tosu	equ	0xFFF
  9980                           tosh	equ	0xFFE
  9981                           tosl	equ	0xFFD
  9982                           pclath	equ	0xFFA
  9983                           tblptru	equ	0xFF8
  9984                           tblptrh	equ	0xFF7
  9985                           tblptrl	equ	0xFF6
  9986                           tablat	equ	0xFF5
  9987                           prodh	equ	0xFF4
  9988                           prodl	equ	0xFF3
  9989                           intcon	equ	0xFF2
  9990                           postinc0	equ	0xFEE
  9991                           plusw0	equ	0xFEB
  9992                           wreg	equ	0xFE8
  9993                           indf1	equ	0xFE7
  9994                           postinc1	equ	0xFE6
  9995                           postdec1	equ	0xFE5
  9996                           plusw1	equ	0xFE3
  9997                           fsr1h	equ	0xFE2
  9998                           fsr1l	equ	0xFE1
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           postdec2	equ	0xFDD
 10002                           plusw2	equ	0xFDB
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function _Lcd_Init *****************
 10008 ;; Defined at:
 10009 ;;		line 17 in file "libs/HD44780.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;		None
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  data            1    3[BANK0 ] unsigned char 
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2, status,0, cstack
 10018 ;; Tracked objects:
 10019 ;;		On entry : 3F/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10027 ;;Total ram usage:        1 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:   11
 10030 ;; This function calls:
 10031 ;;		_Lcd_Command
 10032 ;;		_Lcd_Delay5500us
 10033 ;;		_Lcd_Delay5us
 10034 ;; This function is called by:
 10035 ;;		_main
 10036 ;; This function uses a non-reentrant model
 10037 ;;
 10038                           
 10039                           	psect	text42
 10040  002E2E                     __ptext42:
 10041                           	opt stack 0
 10042  002E2E                     _Lcd_Init:
 10043                           	opt stack 19
 10044                           
 10045                           ; BSR set to: 0
 10046                           ;HD44780.c: 23: unsigned char data;
 10047                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
 10048                           
 10049                           ;incstack = 0
 10050  002E2E  9A88               	bcf	3976,5,c	;volatile
 10051  002E30  9888               	bcf	3976,4,c	;volatile
 10052  002E32  9688               	bcf	3976,3,c	;volatile
 10053  002E34  9488               	bcf	3976,2,c	;volatile
 10054  002E36  9288               	bcf	3976,1,c	;volatile
 10055  002E38  9088               	bcf	3976,0,c	;volatile
 10056                           
 10057                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10058  002E3A  9A83               	bcf	3971,5,c	;volatile
 10059  002E3C  9883               	bcf	3971,4,c	;volatile
 10060  002E3E  9683               	bcf	3971,3,c	;volatile
 10061  002E40  9483               	bcf	3971,2,c	;volatile
 10062  002E42  9283               	bcf	3971,1,c	;volatile
 10063  002E44  9083               	bcf	3971,0,c	;volatile
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
 10067  002E46  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10068  002E4A  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10069  002E4E  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10070                           
 10071                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
 10072  002E52  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10073  002E56  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10074  002E5A  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10075                           
 10076                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
 10077  002E5E  0E01               	movlw	1
 10078  002E60  0100               	movlb	0	; () banked
 10079  002E62  6F63               	movwf	Lcd_Init@data& (0+255),b
 10080  002E64                     l274:
 10081                           
 10082                           ; BSR set to: 0
 10083                           ;HD44780.c: 29: {
 10084                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10085  002E64  D82F               	call	PL128	;call to abstracted procedure
 10086  002E66  9283               	bcf	3971,1,c	;volatile
 10087  002E68  9083               	bcf	3971,0,c	;volatile
 10088                           
 10089                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
 10090  002E6A  D82C               	call	PL128	;call to abstracted procedure
 10091  002E6C  8283               	bsf	3971,1,c	;volatile
 10092  002E6E  9083               	bcf	3971,0,c	;volatile
 10093                           
 10094                           ; BSR set to: 0
 10095                           ;HD44780.c: 32: Lcd_Delay5us();
 10096  002E70  EC62  F01B         	call	_Lcd_Delay5us	;wreg free
 10097                           
 10098                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10099  002E74  D827               	call	PL128	;call to abstracted procedure
 10100  002E76  9283               	bcf	3971,1,c	;volatile
 10101  002E78  9083               	bcf	3971,0,c	;volatile
 10102                           
 10103                           ;HD44780.c: 34: Lcd_Delay5500us();
 10104  002E7A  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10105  002E7E  0100               	movlb	0	; () banked
 10106  002E80  2B63               	incf	Lcd_Init@data& (0+255),f,b
 10107  002E82  0E03               	movlw	3
 10108  002E84  6563               	cpfsgt	Lcd_Init@data& (0+255),b
 10109  002E86  D7EE               	goto	l274
 10110                           
 10111                           ; BSR set to: 0
 10112                           ;HD44780.c: 35: }
 10113                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10114  002E88  D818               	call	PL126	;call to abstracted procedure
 10115  002E8A  9283               	bcf	3971,1,c	;volatile
 10116  002E8C  9083               	bcf	3971,0,c	;volatile
 10117                           
 10118                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
 10119  002E8E  D815               	call	PL126	;call to abstracted procedure
 10120  002E90  8283               	bsf	3971,1,c	;volatile
 10121  002E92  9083               	bcf	3971,0,c	;volatile
 10122                           
 10123                           ; BSR set to: 0
 10124                           ;HD44780.c: 38: Lcd_Delay5us();
 10125  002E94  EC62  F01B         	call	_Lcd_Delay5us	;wreg free
 10126                           
 10127                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10128  002E98  D810               	call	PL126	;call to abstracted procedure
 10129  002E9A  9283               	bcf	3971,1,c	;volatile
 10130  002E9C  9083               	bcf	3971,0,c	;volatile
 10131                           
 10132                           ;HD44780.c: 40: Lcd_Delay5500us();
 10133  002E9E  EC3E  F01B         	call	_Lcd_Delay5500us	;wreg free
 10134  002EA2  0E28               	movlw	40
 10135  002EA4  EC5C  F014         	call	_Lcd_Command
 10136  002EA8  0E10               	movlw	16
 10137  002EAA  EC5C  F014         	call	_Lcd_Command
 10138  002EAE  0E01               	movlw	1
 10139  002EB0  EC5C  F014         	call	_Lcd_Command
 10140  002EB4  0E0F               	movlw	15
 10141  002EB6  EF5C  F014         	goto	_Lcd_Command
 10142  002EBA                     __end_of_Lcd_Init:
 10143                           	opt stack 0
 10144  002EBA                     PL126:
 10145                           	opt stack 19
 10146  002EBA  9A83               	bcf	3971,5,c	;volatile
 10147  002EBC  9883               	bcf	3971,4,c	;volatile
 10148  002EBE  8683               	bsf	3971,3,c	;volatile
 10149  002EC0  9483               	bcf	3971,2,c	;volatile
 10150  002EC2  0012               	return	
 10151  002EC4                     __end_ofPL126:
 10152                           	opt stack 0
 10153  002EC4                     PL128:
 10154                           	opt stack 19
 10155  002EC4  9A83               	bcf	3971,5,c	;volatile
 10156  002EC6  9883               	bcf	3971,4,c	;volatile
 10157  002EC8  8683               	bsf	3971,3,c	;volatile
 10158  002ECA  8483               	bsf	3971,2,c	;volatile
 10159  002ECC  0012               	return	
 10160  002ECE                     __end_ofPL128:
 10161                           	opt stack 0
 10162                           tosu	equ	0xFFF
 10163                           tosh	equ	0xFFE
 10164                           tosl	equ	0xFFD
 10165                           pclath	equ	0xFFA
 10166                           tblptru	equ	0xFF8
 10167                           tblptrh	equ	0xFF7
 10168                           tblptrl	equ	0xFF6
 10169                           tablat	equ	0xFF5
 10170                           prodh	equ	0xFF4
 10171                           prodl	equ	0xFF3
 10172                           intcon	equ	0xFF2
 10173                           postinc0	equ	0xFEE
 10174                           plusw0	equ	0xFEB
 10175                           wreg	equ	0xFE8
 10176                           indf1	equ	0xFE7
 10177                           postinc1	equ	0xFE6
 10178                           postdec1	equ	0xFE5
 10179                           plusw1	equ	0xFE3
 10180                           fsr1h	equ	0xFE2
 10181                           fsr1l	equ	0xFE1
 10182                           indf2	equ	0xFDF
 10183                           postinc2	equ	0xFDE
 10184                           postdec2	equ	0xFDD
 10185                           plusw2	equ	0xFDB
 10186                           fsr2h	equ	0xFDA
 10187                           fsr2l	equ	0xFD9
 10188                           status	equ	0xFD8
 10189                           
 10190 ;; *************** function _Lcd_Delay5500us *****************
 10191 ;; Defined at:
 10192 ;;		line 153 in file "libs/HD44780.c"
 10193 ;; Parameters:    Size  Location     Type
 10194 ;;		None
 10195 ;; Auto vars:     Size  Location     Type
 10196 ;;		None
 10197 ;; Return value:  Size  Location     Type
 10198 ;;                  1    wreg      void 
 10199 ;; Registers used:
 10200 ;;		wreg
 10201 ;; Tracked objects:
 10202 ;;		On entry : 0/0
 10203 ;;		On exit  : 0/0
 10204 ;;		Unchanged: 0/0
 10205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10209 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10210 ;;Total ram usage:        1 bytes
 10211 ;; Hardware stack levels used:    1
 10212 ;; Hardware stack levels required when called:    9
 10213 ;; This function calls:
 10214 ;;		Nothing
 10215 ;; This function is called by:
 10216 ;;		_Lcd_Init
 10217 ;; This function uses a non-reentrant model
 10218 ;;
 10219                           
 10220                           	psect	text43
 10221  00367C                     __ptext43:
 10222                           	opt stack 0
 10223  00367C                     _Lcd_Delay5500us:
 10224                           	opt stack 20
 10225                           
 10226                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
 10227                           
 10228                           ;incstack = 0
 10229  00367C  0E08               	movlw	8
 10230  00367E  0100               	movlb	0	; () banked
 10231  003680  6F60               	movwf	??_Lcd_Delay5500us& (0+255),b
 10232  003682  0E23               	movlw	35
 10233  003684                     u5047:
 10234  003684  2EE8               	decfsz	wreg,f,c
 10235  003686  D7FE               	bra	u5047
 10236  003688  2F60               	decfsz	??_Lcd_Delay5500us& (0+255),f,b
 10237  00368A  D7FC               	bra	u5047
 10238  00368C  0012               	return		;funcret
 10239  00368E                     __end_of_Lcd_Delay5500us:
 10240                           	opt stack 0
 10241                           tosu	equ	0xFFF
 10242                           tosh	equ	0xFFE
 10243                           tosl	equ	0xFFD
 10244                           pclath	equ	0xFFA
 10245                           tblptru	equ	0xFF8
 10246                           tblptrh	equ	0xFF7
 10247                           tblptrl	equ	0xFF6
 10248                           tablat	equ	0xFF5
 10249                           prodh	equ	0xFF4
 10250                           prodl	equ	0xFF3
 10251                           intcon	equ	0xFF2
 10252                           postinc0	equ	0xFEE
 10253                           plusw0	equ	0xFEB
 10254                           wreg	equ	0xFE8
 10255                           indf1	equ	0xFE7
 10256                           postinc1	equ	0xFE6
 10257                           postdec1	equ	0xFE5
 10258                           plusw1	equ	0xFE3
 10259                           fsr1h	equ	0xFE2
 10260                           fsr1l	equ	0xFE1
 10261                           indf2	equ	0xFDF
 10262                           postinc2	equ	0xFDE
 10263                           postdec2	equ	0xFDD
 10264                           plusw2	equ	0xFDB
 10265                           fsr2h	equ	0xFDA
 10266                           fsr2l	equ	0xFD9
 10267                           status	equ	0xFD8
 10268                           
 10269 ;; *************** function _Lcd_Command *****************
 10270 ;; Defined at:
 10271 ;;		line 133 in file "libs/HD44780.c"
 10272 ;; Parameters:    Size  Location     Type
 10273 ;;  command         1    wreg     unsigned char 
 10274 ;; Auto vars:     Size  Location     Type
 10275 ;;  command         1    2[BANK0 ] unsigned char 
 10276 ;; Return value:  Size  Location     Type
 10277 ;;                  1    wreg      void 
 10278 ;; Registers used:
 10279 ;;		wreg, status,2, status,0, cstack
 10280 ;; Tracked objects:
 10281 ;;		On entry : 0/0
 10282 ;;		On exit  : 0/0
 10283 ;;		Unchanged: 0/0
 10284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10286 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10287 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10288 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10289 ;;Total ram usage:        3 bytes
 10290 ;; Hardware stack levels used:    1
 10291 ;; Hardware stack levels required when called:   10
 10292 ;; This function calls:
 10293 ;;		_Lcd_Delay5us
 10294 ;; This function is called by:
 10295 ;;		_Lcd_Init
 10296 ;;		_Lcd_WriteChar
 10297 ;; This function uses a non-reentrant model
 10298 ;;
 10299                           
 10300                           	psect	text44
 10301  0028B8                     __ptext44:
 10302                           	opt stack 0
 10303  0028B8                     _Lcd_Command:
 10304                           	opt stack 18
 10305                           
 10306                           ;incstack = 0
 10307                           ;Lcd_Command@command stored from wreg
 10308  0028B8  0100               	movlb	0	; () banked
 10309  0028BA  6F62               	movwf	Lcd_Command@command& (0+255),b
 10310                           
 10311                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10312  0028BC  9283               	bcf	3971,1,c	;volatile
 10313  0028BE  9083               	bcf	3971,0,c	;volatile
 10314                           
 10315                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
 10316  0028C0  6B60               	clrf	??_Lcd_Command& (0+255),b
 10317  0028C2  AF62               	btfss	Lcd_Command@command& (0+255),7,b
 10318  0028C4  D001               	bra	u3855
 10319  0028C6  2B60               	incf	??_Lcd_Command& (0+255),f,b
 10320  0028C8                     u3855:
 10321  0028C8  D835               	call	PL52	;call to abstracted procedure
 10322  0028CA  0E06               	movlw	6
 10323  0028CC  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
 10324  0028CE                     u3865:
 10325  0028CE  90D8               	bcf	status,0,c
 10326  0028D0  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10327  0028D2  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
 10328  0028D4  D7FC               	goto	u3865
 10329                           
 10330                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
 10331  0028D6  D846               	call	PL60	;call to abstracted procedure
 10332  0028D8  0E05               	movlw	5
 10333  0028DA  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
 10334  0028DC                     u3875:
 10335  0028DC  90D8               	bcf	status,0,c
 10336  0028DE  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10337  0028E0  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
 10338  0028E2  D7FC               	goto	u3875
 10339  0028E4  0E01               	movlw	1
 10340  0028E6  D832               	call	PL58	;call to abstracted procedure
 10341  0028E8  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10342  0028EA  0E0F               	movlw	15
 10343  0028EC  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10344  0028EE  0E01               	movlw	1
 10345  0028F0  D844               	call	PL90	;call to abstracted procedure
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;HD44780.c: 137: _delay(10);
 10349  0028F2  0E03               	movlw	3
 10350  0028F4                     u5057:
 10351  0028F4  2EE8               	decfsz	wreg,f,c
 10352  0028F6  D7FE               	bra	u5057
 10353  0028F8  F000               	nop	
 10354                           
 10355                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
 10356  0028FA  8283               	bsf	3971,1,c	;volatile
 10357  0028FC  EC62  F01B         	call	_Lcd_Delay5us	;wreg free
 10358  002900  9283               	bcf	3971,1,c	;volatile
 10359                           
 10360                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
 10361  002902  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10362  002906  0100               	movlb	0	; () banked
 10363  002908  90D8               	bcf	status,0,c
 10364  00290A  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10365  00290C  D83F               	call	PL108	;call to abstracted procedure
 10366                           
 10367                           ; BSR set to: 0
 10368  00290E  D812               	call	PL52	;call to abstracted procedure
 10369  002910  D83D               	call	PL108	;call to abstracted procedure
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
 10373  002912  D828               	call	PL60	;call to abstracted procedure
 10374  002914  90D8               	bcf	status,0,c
 10375  002916  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10376  002918  0E01               	movlw	1
 10377                           
 10378                           ; BSR set to: 0
 10379  00291A  D818               	call	PL58	;call to abstracted procedure
 10380  00291C  0E01               	movlw	1
 10381  00291E  D82D               	call	PL90	;call to abstracted procedure
 10382                           
 10383                           ; BSR set to: 0
 10384                           ;HD44780.c: 141: _delay(10);
 10385  002920  0E03               	movlw	3
 10386  002922                     u5067:
 10387  002922  2EE8               	decfsz	wreg,f,c
 10388  002924  D7FE               	bra	u5067
 10389  002926  F000               	nop	
 10390                           
 10391                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
 10392  002928  8283               	bsf	3971,1,c	;volatile
 10393  00292A  EC62  F01B         	call	_Lcd_Delay5us	;wreg free
 10394  00292E  9283               	bcf	3971,1,c	;volatile
 10395                           
 10396                           ;HD44780.c: 144: Lcd_Delay5us();
 10397  002930  EF62  F01B         	goto	_Lcd_Delay5us	;wreg free
 10398  002934                     __end_of_Lcd_Command:
 10399                           	opt stack 0
 10400  002934                     PL52:
 10401                           	opt stack 18
 10402  002934  0E01               	movlw	1
 10403  002936  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10404  002938  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10405  00293A  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10406  00293C  5083               	movf	3971,w,c	;volatile
 10407  00293E  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10408  002940  0BDF               	andlw	-33
 10409  002942  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10410  002944  6E83               	movwf	3971,c	;volatile
 10411  002946  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10412  00294A  0012               	return	
 10413  00294C                     __end_ofPL52:
 10414                           	opt stack 0
 10415  00294C                     PL58:
 10416                           	opt stack 18
 10417  00294C  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10418  00294E  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10419  002950  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10420  002952  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10421  002954  5083               	movf	3971,w,c	;volatile
 10422  002956  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10423  002958  0BF7               	andlw	-9
 10424  00295A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10425  00295C  6E83               	movwf	3971,c	;volatile
 10426  00295E  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10427  002962  0012               	return	
 10428  002964                     __end_ofPL58:
 10429                           	opt stack 0
 10430  002964                     PL60:
 10431                           	opt stack 18
 10432  002964  0E01               	movlw	1
 10433  002966  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10434  002968  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10435  00296A  5083               	movf	3971,w,c	;volatile
 10436  00296C  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10437  00296E  0BEF               	andlw	-17
 10438  002970  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10439  002972  6E83               	movwf	3971,c	;volatile
 10440  002974  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10441  002978  0012               	return	
 10442  00297A                     __end_ofPL60:
 10443                           	opt stack 0
 10444  00297A                     PL90:
 10445                           	opt stack 18
 10446  00297A  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10447  00297C  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10448  00297E  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10449  002980  5083               	movf	3971,w,c	;volatile
 10450  002982  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10451  002984  0BFB               	andlw	-5
 10452  002986  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10453  002988  6E83               	movwf	3971,c	;volatile
 10454  00298A  0012               	return	
 10455  00298C                     __end_ofPL90:
 10456                           	opt stack 0
 10457  00298C                     PL108:
 10458                           	opt stack 18
 10459  00298C  90D8               	bcf	status,0,c
 10460  00298E  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10461  002990  90D8               	bcf	status,0,c
 10462  002992  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10463  002994  0012               	return	
 10464  002996                     __end_ofPL108:
 10465                           	opt stack 0
 10466                           tosu	equ	0xFFF
 10467                           tosh	equ	0xFFE
 10468                           tosl	equ	0xFFD
 10469                           pclath	equ	0xFFA
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           prodh	equ	0xFF4
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           postinc0	equ	0xFEE
 10478                           plusw0	equ	0xFEB
 10479                           wreg	equ	0xFE8
 10480                           indf1	equ	0xFE7
 10481                           postinc1	equ	0xFE6
 10482                           postdec1	equ	0xFE5
 10483                           plusw1	equ	0xFE3
 10484                           fsr1h	equ	0xFE2
 10485                           fsr1l	equ	0xFE1
 10486                           indf2	equ	0xFDF
 10487                           postinc2	equ	0xFDE
 10488                           postdec2	equ	0xFDD
 10489                           plusw2	equ	0xFDB
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function _Lcd_Delay5us *****************
 10495 ;; Defined at:
 10496 ;;		line 150 in file "libs/HD44780.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		None
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10514 ;;Total ram usage:        0 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    9
 10517 ;; This function calls:
 10518 ;;		Nothing
 10519 ;; This function is called by:
 10520 ;;		_Lcd_Init
 10521 ;;		_Lcd_CharCP
 10522 ;;		_Lcd_Command
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text45
 10527  0036C4                     __ptext45:
 10528                           	opt stack 0
 10529  0036C4                     _Lcd_Delay5us:
 10530                           	opt stack 18
 10531                           
 10532                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
 10533                           
 10534                           ;incstack = 0
 10535  0036C4  D000               	nop2		;2 cycle nop
 10536  0036C6  D000               	nop2		;2 cycle nop
 10537  0036C8  F000               	nop	
 10538  0036CA  0012               	return		;funcret
 10539  0036CC                     __end_of_Lcd_Delay5us:
 10540                           	opt stack 0
 10541                           tosu	equ	0xFFF
 10542                           tosh	equ	0xFFE
 10543                           tosl	equ	0xFFD
 10544                           pclath	equ	0xFFA
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           postinc0	equ	0xFEE
 10553                           plusw0	equ	0xFEB
 10554                           wreg	equ	0xFE8
 10555                           indf1	equ	0xFE7
 10556                           postinc1	equ	0xFE6
 10557                           postdec1	equ	0xFE5
 10558                           plusw1	equ	0xFE3
 10559                           fsr1h	equ	0xFE2
 10560                           fsr1l	equ	0xFE1
 10561                           indf2	equ	0xFDF
 10562                           postinc2	equ	0xFDE
 10563                           postdec2	equ	0xFDD
 10564                           plusw2	equ	0xFDB
 10565                           fsr2h	equ	0xFDA
 10566                           fsr2l	equ	0xFD9
 10567                           status	equ	0xFD8
 10568                           
 10569 ;; *************** function _GetThisCycle *****************
 10570 ;; Defined at:
 10571 ;;		line 230 in file "libs/funcs.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;		None
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;		None
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  1    wreg      unsigned char 
 10578 ;; Registers used:
 10579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10580 ;; Tracked objects:
 10581 ;;		On entry : 3F/0
 10582 ;;		On exit  : 3F/0
 10583 ;;		Unchanged: 3F/0
 10584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10589 ;;Total ram usage:        0 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    9
 10592 ;; This function calls:
 10593 ;;		Nothing
 10594 ;; This function is called by:
 10595 ;;		_main
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text46
 10600  0036CC                     __ptext46:
 10601                           	opt stack 0
 10602  0036CC                     _GetThisCycle:
 10603                           	opt stack 21
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;funcs.c: 231: if (PRESENT_EVENT <0)
 10607                           
 10608                           ;incstack = 0
 10609  0036CC  BE5E               	btfsc	_PRESENT_EVENT,7,c
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;funcs.c: 232: return 0;
 10613  0036CE  0C00               	retlw	0
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;funcs.c: 233: else
 10617                           ;funcs.c: 234: return EVENTS[PRESENT_EVENT].CYCLE;
 10618  0036D0  EF00  F00B         	goto	PL38	;call to abstracted procedure
 10619  0036D4                     __end_of_GetThisCycle:
 10620                           	opt stack 0
 10621                           tosu	equ	0xFFF
 10622                           tosh	equ	0xFFE
 10623                           tosl	equ	0xFFD
 10624                           pclath	equ	0xFFA
 10625                           tblptru	equ	0xFF8
 10626                           tblptrh	equ	0xFF7
 10627                           tblptrl	equ	0xFF6
 10628                           tablat	equ	0xFF5
 10629                           prodh	equ	0xFF4
 10630                           prodl	equ	0xFF3
 10631                           intcon	equ	0xFF2
 10632                           postinc0	equ	0xFEE
 10633                           plusw0	equ	0xFEB
 10634                           wreg	equ	0xFE8
 10635                           indf1	equ	0xFE7
 10636                           postinc1	equ	0xFE6
 10637                           postdec1	equ	0xFE5
 10638                           plusw1	equ	0xFE3
 10639                           fsr1h	equ	0xFE2
 10640                           fsr1l	equ	0xFE1
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           plusw2	equ	0xFDB
 10645                           fsr2h	equ	0xFDA
 10646                           fsr2l	equ	0xFD9
 10647                           status	equ	0xFD8
 10648                           
 10649 ;; *************** function _GetEventNumber *****************
 10650 ;; Defined at:
 10651 ;;		line 210 in file "libs/funcs.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  i               2   15[BANK0 ] unsigned int 
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      char 
 10658 ;; Registers used:
 10659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10660 ;; Tracked objects:
 10661 ;;		On entry : 3F/0
 10662 ;;		On exit  : 3F/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10666 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10667 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10668 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10669 ;;Total ram usage:       11 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:   10
 10672 ;; This function calls:
 10673 ;;		___wmul
 10674 ;; This function is called by:
 10675 ;;		_main
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text47
 10680  001FDC                     __ptext47:
 10681                           	opt stack 0
 10682  001FDC                     _GetEventNumber:
 10683                           	opt stack 20
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;funcs.c: 211: for (UINT i=0; i<24; i++) {
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;incstack = 0
 10690  001FDC  6B6F               	clrf	GetEventNumber@i& (0+255),b
 10691  001FDE  6B70               	clrf	(GetEventNumber@i+1)& (0+255),b
 10692  001FE0                     l4816:
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;funcs.c: 212: if ((EVENTS[i].START_TIME>0) &&
 10696                           ;funcs.c: 213: (DATE_TIME.DAY.Val & EVENTS[i].SELECTED_WEEKS.Val & 0x7F)) {
 10697  001FE0  D86B               	call	PL12	;call to abstracted procedure
 10698  001FE2  ECCF  F01A         	call	___wmul	;wreg free
 10699  001FE6  D880               	call	PL44	;call to abstracted procedure
 10700  001FE8  0E02               	movlw	high _EVENTS
 10701  001FEA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10702  001FEC  6EDA               	movwf	fsr2h,c
 10703  001FEE  0E03               	movlw	3
 10704  001FF0  BEDB               	btfsc	plusw2,7,c
 10705  001FF2  D05A               	goto	l4838
 10706  001FF4  50DB               	movf	plusw2,w,c
 10707  001FF6  E108               	bnz	u4840
 10708  001FF8  0E02               	movlw	2
 10709  001FFA  50DB               	movf	plusw2,w,c
 10710  001FFC  E105               	bnz	u4840
 10711  001FFE  0E01               	movlw	1
 10712  002000  50DB               	movf	plusw2,w,c
 10713  002002  E102               	bnz	u4840
 10714  002004  04DE               	decf	postinc2,w,c
 10715  002006  E350               	bnc	l4838
 10716  002008                     u4840:
 10717                           
 10718                           ; BSR set to: 0
 10719  002008  D857               	call	PL12	;call to abstracted procedure
 10720  00200A  ECCF  F01A         	call	___wmul	;wreg free
 10721  00200E  D875               	call	PL116	;call to abstracted procedure
 10722  002010  30DF               	rrcf	223,w,c
 10723  002012  0B7F               	andlw	127
 10724  002014  0100               	movlb	0	; () banked
 10725  002016  6F66               	movwf	??_GetEventNumber& (0+255),b
 10726  002018  31C5               	rrcf	(_DATE_TIME+8)& (0+255),w,b
 10727  00201A  0B7F               	andlw	127
 10728  00201C  1566               	andwf	??_GetEventNumber& (0+255),w,b
 10729  00201E  6F67               	movwf	(??_GetEventNumber+1)& (0+255),b
 10730  002020  0E7F               	movlw	127
 10731  002022  1767               	andwf	(??_GetEventNumber+1)& (0+255),f,b
 10732  002024  E041               	bz	l4838
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;funcs.c: 214: if (EVENTS[i].START_TIME < EVENTS[i].END_TIME) {
 10736  002026  D848               	call	PL12	;call to abstracted procedure
 10737  002028  ECCF  F01A         	call	___wmul	;wreg free
 10738  00202C  D861               	call	PL80	;call to abstracted procedure
 10739  00202E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10740  002030  6EDA               	movwf	fsr2h,c
 10741  002032  D842               	call	PL12	;call to abstracted procedure
 10742  002034  ECCF  F01A         	call	___wmul	;wreg free
 10743  002038  0E00               	movlw	low _EVENTS
 10744  00203A  2560               	addwf	?___wmul& (0+255),w,b
 10745  00203C  6EE1               	movwf	fsr1l,c
 10746  00203E  0E02               	movlw	high _EVENTS
 10747  002040  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10748  002042  6EE2               	movwf	fsr1h,c
 10749  002044  50DE               	movf	postinc2,w,c
 10750  002046  5CE6               	subwf	postinc1,w,c
 10751  002048  50DE               	movf	postinc2,w,c
 10752  00204A  58E6               	subwfb	postinc1,w,c
 10753  00204C  50DE               	movf	postinc2,w,c
 10754  00204E  58E6               	subwfb	postinc1,w,c
 10755  002050  50E6               	movf	postinc1,w,c
 10756  002052  0A80               	xorlw	128
 10757  002054  6F6E               	movwf	(??_GetEventNumber+8)& (0+255),b
 10758  002056  50DE               	movf	postinc2,w,c
 10759  002058  0A80               	xorlw	128
 10760  00205A  596E               	subwfb	(??_GetEventNumber+8)& (0+255),w,b
 10761  00205C  E21B               	bc	l4830
 10762                           
 10763                           ; BSR set to: 0
 10764                           ;funcs.c: 215: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
 10765                           ;funcs.c: 216: && (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
 10766  00205E  D82C               	call	PL12	;call to abstracted procedure
 10767  002060  ECCF  F01A         	call	___wmul	;wreg free
 10768  002064  D841               	call	PL44	;call to abstracted procedure
 10769  002066  D830               	call	PL40	;call to abstracted procedure
 10770  002068  E21F               	bc	l4838
 10771                           
 10772                           ; BSR set to: 0
 10773  00206A  D826               	call	PL12	;call to abstracted procedure
 10774  00206C  ECCF  F01A         	call	___wmul	;wreg free
 10775  002070  D83F               	call	PL80	;call to abstracted procedure
 10776  002072  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10777  002074  6EDA               	movwf	fsr2h,c
 10778  002076  50DE               	movf	postinc2,w,c
 10779  002078  5DBD               	subwf	_DATE_TIME& (0+255),w,b
 10780  00207A  50DE               	movf	postinc2,w,c
 10781  00207C  59BE               	subwfb	(_DATE_TIME+1)& (0+255),w,b
 10782  00207E  50DE               	movf	postinc2,w,c
 10783  002080  59BF               	subwfb	(_DATE_TIME+2)& (0+255),w,b
 10784  002082  51C0               	movf	(_DATE_TIME+3)& (0+255),w,b
 10785  002084  0A80               	xorlw	128
 10786  002086  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
 10787  002088  50DE               	movf	postinc2,w,c
 10788  00208A  0A80               	xorlw	128
 10789  00208C  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
 10790  00208E  E20C               	bc	l4838
 10791  002090                     l4826:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;funcs.c: 217: return i;
 10795  002090  516F               	movf	GetEventNumber@i& (0+255),w,b
 10796  002092  0012               	return	
 10797  002094                     l4830:
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;funcs.c: 220: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
 10801                           ;funcs.c: 221: || (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
 10802  002094  D811               	call	PL12	;call to abstracted procedure
 10803  002096  ECCF  F01A         	call	___wmul	;wreg free
 10804  00209A  D826               	call	PL44	;call to abstracted procedure
 10805  00209C  D815               	call	PL40	;call to abstracted procedure
 10806  00209E  E3F8               	bnc	l4826
 10807                           
 10808                           ; BSR set to: 0
 10809  0020A0  D80B               	call	PL12	;call to abstracted procedure
 10810  0020A2  ECCF  F01A         	call	___wmul	;wreg free
 10811  0020A6  D7E4               	goto	L8
 10812  0020A8                     l4838:
 10813                           
 10814                           ; BSR set to: 0
 10815  0020A8  4B6F               	infsnz	GetEventNumber@i& (0+255),f,b
 10816  0020AA  2B70               	incf	(GetEventNumber@i+1)& (0+255),f,b
 10817                           
 10818                           ; BSR set to: 0
 10819  0020AC  5170               	movf	(GetEventNumber@i+1)& (0+255),w,b
 10820  0020AE  E103               	bnz	u4910
 10821  0020B0  0E18               	movlw	24
 10822  0020B2  5D6F               	subwf	GetEventNumber@i& (0+255),w,b
 10823  0020B4  E395               	bnc	l4816
 10824  0020B6                     u4910:
 10825                           
 10826                           ; BSR set to: 0
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;funcs.c: 223: }
 10830                           ;funcs.c: 224: }
 10831                           ;funcs.c: 225: }
 10832                           ;funcs.c: 226: }
 10833                           ;funcs.c: 227: return -1;
 10834  0020B6  0CFF               	retlw	255	;funcret
 10835  0020B8                     __end_of_GetEventNumber:
 10836                           	opt stack 0
 10837  0020B8                     PL12:
 10838                           	opt stack 20
 10839  0020B8  C06F  F060         	movff	GetEventNumber@i,___wmul@multiplier
 10840  0020BC  C070  F061         	movff	GetEventNumber@i+1,___wmul@multiplier+1
 10841  0020C0  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
 10842  0020C2  0E0A               	movlw	10
 10843  0020C4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10844  0020C6  0C0A               	retlw	10
 10845  0020C8                     __end_ofPL12:
 10846                           	opt stack 0
 10847  0020C8                     PL40:
 10848                           	opt stack 20
 10849  0020C8  0E02               	movlw	high _EVENTS
 10850  0020CA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10851  0020CC  6EDA               	movwf	fsr2h,c
 10852  0020CE  51BD               	movf	_DATE_TIME& (0+255),w,b
 10853  0020D0  5CDE               	subwf	postinc2,w,c
 10854  0020D2  51BE               	movf	(_DATE_TIME+1)& (0+255),w,b
 10855  0020D4  58DE               	subwfb	postinc2,w,c
 10856  0020D6  51BF               	movf	(_DATE_TIME+2)& (0+255),w,b
 10857  0020D8  58DE               	subwfb	postinc2,w,c
 10858  0020DA  50DE               	movf	postinc2,w,c
 10859  0020DC  0A80               	xorlw	128
 10860  0020DE  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
 10861  0020E0  51C0               	movf	(_DATE_TIME+3)& (0+255),w,b
 10862  0020E2  0A80               	xorlw	128
 10863  0020E4  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
 10864  0020E6  0012               	return	
 10865  0020E8                     __end_ofPL40:
 10866                           	opt stack 0
 10867  0020E8                     PL44:
 10868                           	opt stack 19
 10869  0020E8  0E00               	movlw	low _EVENTS
 10870  0020EA  2560               	addwf	?___wmul& (0+255),w,b
 10871  0020EC  6ED9               	movwf	fsr2l,c
 10872  0020EE  0012               	return	
 10873  0020F0                     __end_ofPL44:
 10874                           	opt stack 0
 10875  0020F0                     PL80:
 10876                           	opt stack 19
 10877  0020F0  0E04               	movlw	low (_EVENTS+4)
 10878  0020F2  2560               	addwf	?___wmul& (0+255),w,b
 10879  0020F4  6ED9               	movwf	fsr2l,c
 10880  0020F6  0E02               	movlw	high (_EVENTS+4)
 10881  0020F8  0012               	return	
 10882  0020FA                     __end_ofPL80:
 10883                           	opt stack 0
 10884  0020FA                     PL116:
 10885                           	opt stack 19
 10886  0020FA  0E09               	movlw	low (_EVENTS+9)
 10887  0020FC  2560               	addwf	?___wmul& (0+255),w,b
 10888  0020FE  6ED9               	movwf	fsr2l,c
 10889  002100  0E02               	movlw	high (_EVENTS+9)
 10890  002102  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10891  002104  6EDA               	movwf	fsr2h,c
 10892  002106  0012               	return	
 10893  002108                     __end_ofPL116:
 10894                           	opt stack 0
 10895                           tosu	equ	0xFFF
 10896                           tosh	equ	0xFFE
 10897                           tosl	equ	0xFFD
 10898                           pclath	equ	0xFFA
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           postinc0	equ	0xFEE
 10907                           plusw0	equ	0xFEB
 10908                           wreg	equ	0xFE8
 10909                           indf1	equ	0xFE7
 10910                           postinc1	equ	0xFE6
 10911                           postdec1	equ	0xFE5
 10912                           plusw1	equ	0xFE3
 10913                           fsr1h	equ	0xFE2
 10914                           fsr1l	equ	0xFE1
 10915                           indf2	equ	0xFDF
 10916                           postinc2	equ	0xFDE
 10917                           postdec2	equ	0xFDD
 10918                           plusw2	equ	0xFDB
 10919                           fsr2h	equ	0xFDA
 10920                           fsr2l	equ	0xFD9
 10921                           status	equ	0xFD8
 10922                           
 10923 ;; *************** function ___wmul *****************
 10924 ;; Defined at:
 10925 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10928 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;  product         2    4[BANK0 ] unsigned int 
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  2    0[BANK0 ] unsigned int 
 10933 ;; Registers used:
 10934 ;;		wreg, status,2, status,0, prodl, prodh
 10935 ;; Tracked objects:
 10936 ;;		On entry : 3F/0
 10937 ;;		On exit  : 3F/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10940 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10943 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10944 ;;Total ram usage:        6 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:    9
 10947 ;; This function calls:
 10948 ;;		Nothing
 10949 ;; This function is called by:
 10950 ;;		_LoadSettingsFromEeprom
 10951 ;;		_LoadEventsFromEeprom
 10952 ;;		_LoadStatesFromEeprom
 10953 ;;		_LoadCyclesFromEeprom
 10954 ;;		_AdjustDayLightSaving
 10955 ;;		_GetEventNumber
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           	psect	text48
 10960  00359E                     __ptext48:
 10961                           	opt stack 0
 10962  00359E                     ___wmul:
 10963                           	opt stack 18
 10964                           
 10965                           ; BSR set to: 0
 10966                           
 10967                           ; BSR set to: 0
 10968                           ;incstack = 0
 10969  00359E  5160               	movf	___wmul@multiplier& (0+255),w,b
 10970  0035A0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10971  0035A2  CFF3 F064          	movff	prodl,___wmul@product
 10972  0035A6  CFF4 F065          	movff	prodh,___wmul@product+1
 10973  0035AA  5160               	movf	___wmul@multiplier& (0+255),w,b
 10974  0035AC  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10975  0035AE  50F3               	movf	prodl,w,c
 10976  0035B0  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10977  0035B2  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10978  0035B4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10979  0035B6  50F3               	movf	prodl,w,c
 10980  0035B8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10981                           
 10982                           ; BSR set to: 0
 10983  0035BA  C064  F060         	movff	___wmul@product,?___wmul
 10984  0035BE  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10985                           
 10986                           ; BSR set to: 0
 10987  0035C2  0012               	return		;funcret
 10988  0035C4                     __end_of___wmul:
 10989                           	opt stack 0
 10990                           tosu	equ	0xFFF
 10991                           tosh	equ	0xFFE
 10992                           tosl	equ	0xFFD
 10993                           pclath	equ	0xFFA
 10994                           tblptru	equ	0xFF8
 10995                           tblptrh	equ	0xFF7
 10996                           tblptrl	equ	0xFF6
 10997                           tablat	equ	0xFF5
 10998                           prodh	equ	0xFF4
 10999                           prodl	equ	0xFF3
 11000                           intcon	equ	0xFF2
 11001                           postinc0	equ	0xFEE
 11002                           plusw0	equ	0xFEB
 11003                           wreg	equ	0xFE8
 11004                           indf1	equ	0xFE7
 11005                           postinc1	equ	0xFE6
 11006                           postdec1	equ	0xFE5
 11007                           plusw1	equ	0xFE3
 11008                           fsr1h	equ	0xFE2
 11009                           fsr1l	equ	0xFE1
 11010                           indf2	equ	0xFDF
 11011                           postinc2	equ	0xFDE
 11012                           postdec2	equ	0xFDD
 11013                           plusw2	equ	0xFDB
 11014                           fsr2h	equ	0xFDA
 11015                           fsr2l	equ	0xFD9
 11016                           status	equ	0xFD8
 11017                           
 11018 ;; *************** function _INTERRUPT_InterruptManager *****************
 11019 ;; Defined at:
 11020 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;		None
 11023 ;; Auto vars:     Size  Location     Type
 11024 ;;		None
 11025 ;; Return value:  Size  Location     Type
 11026 ;;                  1    wreg      void 
 11027 ;; Registers used:
 11028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11029 ;; Tracked objects:
 11030 ;;		On entry : 0/0
 11031 ;;		On exit  : 0/0
 11032 ;;		Unchanged: 0/0
 11033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11036 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11037 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11038 ;;Total ram usage:       10 bytes
 11039 ;; Hardware stack levels used:    1
 11040 ;; Hardware stack levels required when called:    8
 11041 ;; This function calls:
 11042 ;;		_TMR0_ISR
 11043 ;; This function is called by:
 11044 ;;		Interrupt level 2
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           	psect	intcode
 11049  000008                     __pintcode:
 11050                           	opt stack 0
 11051  000008                     _INTERRUPT_InterruptManager:
 11052                           	opt stack 15
 11053                           
 11054                           ; BSR set to: 0
 11055                           ;incstack = 0
 11056  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11057  00000A  CFFA F042          	movff	pclath,??_INTERRUPT_InterruptManager
 11058  00000E  CFFB F043          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11059  000012  CFE9 F044          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11060  000016  CFEA F045          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11061  00001A  CFE1 F046          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11062  00001E  CFE2 F047          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11063  000022  CFD9 F048          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11064  000026  CFDA F049          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11065  00002A  CFF3 F04A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11066  00002E  CFF4 F04B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11067                           
 11068                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 11069  000032  010E               	movlb	14	; () banked
 11070  000034  BBC2               	btfsc	194,5,b	;volatile
 11071                           
 11072                           ; BSR set to: 14
 11073  000036  ABCA               	btfss	202,5,b	;volatile
 11074  000038  D002               	goto	i2l772
 11075                           
 11076                           ; BSR set to: 14
 11077                           ;interrupt_manager.c: 61: {
 11078                           ;interrupt_manager.c: 62: TMR0_ISR();
 11079  00003A  EC56  F01B         	call	_TMR0_ISR	;wreg free
 11080  00003E                     i2l772:
 11081  00003E  C04B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11082  000042  C04A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11083  000046  C049  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11084  00004A  C048  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11085  00004E  C047  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11086  000052  C046  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11087  000056  C045  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11088  00005A  C044  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11089  00005E  C043  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11090  000062  C042  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11091  000066  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11092  000068  0011               	retfie		f
 11093  00006A                     __end_of_INTERRUPT_InterruptManager:
 11094                           	opt stack 0
 11095                           tosu	equ	0xFFF
 11096                           tosh	equ	0xFFE
 11097                           tosl	equ	0xFFD
 11098                           pclatu	equ	0xFFB
 11099                           pclath	equ	0xFFA
 11100                           tblptru	equ	0xFF8
 11101                           tblptrh	equ	0xFF7
 11102                           tblptrl	equ	0xFF6
 11103                           tablat	equ	0xFF5
 11104                           prodh	equ	0xFF4
 11105                           prodl	equ	0xFF3
 11106                           intcon	equ	0xFF2
 11107                           postinc0	equ	0xFEE
 11108                           plusw0	equ	0xFEB
 11109                           fsr0h	equ	0xFEA
 11110                           fsr0l	equ	0xFE9
 11111                           wreg	equ	0xFE8
 11112                           indf1	equ	0xFE7
 11113                           postinc1	equ	0xFE6
 11114                           postdec1	equ	0xFE5
 11115                           plusw1	equ	0xFE3
 11116                           fsr1h	equ	0xFE2
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           plusw2	equ	0xFDB
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function _TMR0_ISR *****************
 11127 ;; Defined at:
 11128 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;		None
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;		None
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  1    wreg      void 
 11135 ;; Registers used:
 11136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : 3F/E
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11146 ;;Total ram usage:        0 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    7
 11149 ;; This function calls:
 11150 ;;		_TMR0_CallBack
 11151 ;; This function is called by:
 11152 ;;		_INTERRUPT_InterruptManager
 11153 ;; This function uses a non-reentrant model
 11154 ;;
 11155                           
 11156                           	psect	text50
 11157  0036AC                     __ptext50:
 11158                           	opt stack 0
 11159  0036AC                     _TMR0_ISR:
 11160                           	opt stack 15
 11161                           
 11162                           ; BSR set to: 14
 11163                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 11164                           
 11165                           ;incstack = 0
 11166  0036AC  9BCA               	bcf	202,5,b	;volatile
 11167                           
 11168                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 11169  0036AE  C04D  FFD4         	movff	_timer0ReloadVal16bit+1,4052	;volatile
 11170                           
 11171                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 11172  0036B2  C04C  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
 11173                           
 11174                           ; BSR set to: 14
 11175                           ;tmr0.c: 146: TMR0_CallBack();
 11176  0036B6  EFF4  F01A         	goto	_TMR0_CallBack	;wreg free
 11177  0036BA                     __end_of_TMR0_ISR:
 11178                           	opt stack 0
 11179                           tosu	equ	0xFFF
 11180                           tosh	equ	0xFFE
 11181                           tosl	equ	0xFFD
 11182                           pclatu	equ	0xFFB
 11183                           pclath	equ	0xFFA
 11184                           tblptru	equ	0xFF8
 11185                           tblptrh	equ	0xFF7
 11186                           tblptrl	equ	0xFF6
 11187                           tablat	equ	0xFF5
 11188                           prodh	equ	0xFF4
 11189                           prodl	equ	0xFF3
 11190                           intcon	equ	0xFF2
 11191                           postinc0	equ	0xFEE
 11192                           plusw0	equ	0xFEB
 11193                           fsr0h	equ	0xFEA
 11194                           fsr0l	equ	0xFE9
 11195                           wreg	equ	0xFE8
 11196                           indf1	equ	0xFE7
 11197                           postinc1	equ	0xFE6
 11198                           postdec1	equ	0xFE5
 11199                           plusw1	equ	0xFE3
 11200                           fsr1h	equ	0xFE2
 11201                           fsr1l	equ	0xFE1
 11202                           indf2	equ	0xFDF
 11203                           postinc2	equ	0xFDE
 11204                           postdec2	equ	0xFDD
 11205                           plusw2	equ	0xFDB
 11206                           fsr2h	equ	0xFDA
 11207                           fsr2l	equ	0xFD9
 11208                           status	equ	0xFD8
 11209                           
 11210 ;; *************** function _TMR0_CallBack *****************
 11211 ;; Defined at:
 11212 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;		None
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;		None
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  1    wreg      void 
 11219 ;; Registers used:
 11220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 3F/E
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11230 ;;Total ram usage:        0 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    6
 11233 ;; This function calls:
 11234 ;;		Absolute function
 11235 ;;		_TMR0_DefaultInterruptHandler
 11236 ;;		_Timer0_10ms
 11237 ;; This function is called by:
 11238 ;;		_TMR0_ISR
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text51
 11243  0035E8                     __ptext51:
 11244                           	opt stack 0
 11245  0035E8                     _TMR0_CallBack:
 11246                           	opt stack 15
 11247                           
 11248                           ; BSR set to: 14
 11249                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 11250                           
 11251                           ;incstack = 0
 11252  0035E8  0100               	movlb	0	; () banked
 11253  0035EA  51E0               	movf	_TMR0_InterruptHandler& (0+255),w,b
 11254  0035EC  11E1               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 11255  0035EE  B4D8               	btfsc	status,2,c
 11256  0035F0  0012               	return	
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;tmr0.c: 156: {
 11260                           ;tmr0.c: 157: TMR0_InterruptHandler();
 11261  0035F2  0005               	push	
 11262  0035F4  6EFA               	movwf	pclath,c
 11263  0035F6  51E0               	movf	_TMR0_InterruptHandler& (0+255),w,b
 11264  0035F8  6EFD               	movwf	tosl,c
 11265  0035FA  51E1               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 11266  0035FC  6EFE               	movwf	tosh,c
 11267  0035FE  6AFF               	clrf	tosu,c
 11268  003600  50FA               	movf	pclath,w,c
 11269  003602  0012               	return		;indir
 11270  003604                     __end_of_TMR0_CallBack:
 11271                           	opt stack 0
 11272                           tosu	equ	0xFFF
 11273                           tosh	equ	0xFFE
 11274                           tosl	equ	0xFFD
 11275                           pclatu	equ	0xFFB
 11276                           pclath	equ	0xFFA
 11277                           tblptru	equ	0xFF8
 11278                           tblptrh	equ	0xFF7
 11279                           tblptrl	equ	0xFF6
 11280                           tablat	equ	0xFF5
 11281                           prodh	equ	0xFF4
 11282                           prodl	equ	0xFF3
 11283                           intcon	equ	0xFF2
 11284                           postinc0	equ	0xFEE
 11285                           plusw0	equ	0xFEB
 11286                           fsr0h	equ	0xFEA
 11287                           fsr0l	equ	0xFE9
 11288                           wreg	equ	0xFE8
 11289                           indf1	equ	0xFE7
 11290                           postinc1	equ	0xFE6
 11291                           postdec1	equ	0xFE5
 11292                           plusw1	equ	0xFE3
 11293                           fsr1h	equ	0xFE2
 11294                           fsr1l	equ	0xFE1
 11295                           indf2	equ	0xFDF
 11296                           postinc2	equ	0xFDE
 11297                           postdec2	equ	0xFDD
 11298                           plusw2	equ	0xFDB
 11299                           fsr2h	equ	0xFDA
 11300                           fsr2l	equ	0xFD9
 11301                           status	equ	0xFD8
 11302                           
 11303 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11304 ;; Defined at:
 11305 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;		None
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;		None
 11310 ;; Return value:  Size  Location     Type
 11311 ;;                  1    wreg      void 
 11312 ;; Registers used:
 11313 ;;		None
 11314 ;; Tracked objects:
 11315 ;;		On entry : 3F/0
 11316 ;;		On exit  : 3F/0
 11317 ;;		Unchanged: 3F/0
 11318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11323 ;;Total ram usage:        0 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; This function calls:
 11326 ;;		Nothing
 11327 ;; This function is called by:
 11328 ;;		_TMR0_Initialize
 11329 ;;		_TMR0_CallBack
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           	psect	text52
 11334  0036EC                     __ptext52:
 11335                           	opt stack 0
 11336  0036EC                     _TMR0_DefaultInterruptHandler:
 11337                           	opt stack 20
 11338                           
 11339                           ; BSR set to: 0
 11340                           
 11341                           ;incstack = 0
 11342  0036EC  0012               	return		;funcret
 11343  0036EE                     __end_of_TMR0_DefaultInterruptHandler:
 11344                           	opt stack 0
 11345                           tosu	equ	0xFFF
 11346                           tosh	equ	0xFFE
 11347                           tosl	equ	0xFFD
 11348                           pclatu	equ	0xFFB
 11349                           pclath	equ	0xFFA
 11350                           tblptru	equ	0xFF8
 11351                           tblptrh	equ	0xFF7
 11352                           tblptrl	equ	0xFF6
 11353                           tablat	equ	0xFF5
 11354                           prodh	equ	0xFF4
 11355                           prodl	equ	0xFF3
 11356                           intcon	equ	0xFF2
 11357                           postinc0	equ	0xFEE
 11358                           plusw0	equ	0xFEB
 11359                           fsr0h	equ	0xFEA
 11360                           fsr0l	equ	0xFE9
 11361                           wreg	equ	0xFE8
 11362                           indf1	equ	0xFE7
 11363                           postinc1	equ	0xFE6
 11364                           postdec1	equ	0xFE5
 11365                           plusw1	equ	0xFE3
 11366                           fsr1h	equ	0xFE2
 11367                           fsr1l	equ	0xFE1
 11368                           indf2	equ	0xFDF
 11369                           postinc2	equ	0xFDE
 11370                           postdec2	equ	0xFDD
 11371                           plusw2	equ	0xFDB
 11372                           fsr2h	equ	0xFDA
 11373                           fsr2l	equ	0xFD9
 11374                           status	equ	0xFD8
 11375                           
 11376 ;; *************** function _Timer0_10ms *****************
 11377 ;; Defined at:
 11378 ;;		line 3 in file "libs/projMain.c"
 11379 ;; Parameters:    Size  Location     Type
 11380 ;;		None
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  i               1   63[COMRAM] unsigned char 
 11383 ;;  ThisCycle       1   57[COMRAM] unsigned char 
 11384 ;;  i               1   64[COMRAM] unsigned char 
 11385 ;;  ThisCycle       1   61[COMRAM] unsigned char 
 11386 ;;  i               1   62[COMRAM] unsigned char 
 11387 ;;  i               1   58[COMRAM] unsigned char 
 11388 ;;  OutForThePor    2   59[COMRAM] unsigned char [2]
 11389 ;; Return value:  Size  Location     Type
 11390 ;;                  1    wreg      void 
 11391 ;; Registers used:
 11392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11393 ;; Tracked objects:
 11394 ;;		On entry : 3F/0
 11395 ;;		On exit  : 3F/0
 11396 ;;		Unchanged: 0/0
 11397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11399 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11400 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11401 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11402 ;;Total ram usage:       13 bytes
 11403 ;; Hardware stack levels used:    1
 11404 ;; Hardware stack levels required when called:    5
 11405 ;; This function calls:
 11406 ;;		_IncreaseByASecond
 11407 ;;		___almod
 11408 ;;		___ftmul
 11409 ;;		___fttol
 11410 ;;		___lbtoft
 11411 ;;		i2_GetThisCycle
 11412 ;; This function is called by:
 11413 ;;		_main
 11414 ;;		_TMR0_CallBack
 11415 ;; This function uses a non-reentrant model
 11416 ;;
 11417                           
 11418                           	psect	text53
 11419  00130A                     __ptext53:
 11420                           	opt stack 0
 11421  00130A                     _Timer0_10ms:
 11422                           	opt stack 15
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;projMain.c: 4: if (FLAGS_1.bits.b0) {
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;incstack = 0
 11429  00130A  A04E               	btfss	_FLAGS_1,0,c
 11430  00130C  D007               	goto	i2l4110
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;projMain.c: 5: PRESENT_STATE = NEXT_STATE;
 11434  00130E  C0E9  F0EA         	movff	_NEXT_STATE,_PRESENT_STATE
 11435                           
 11436                           ;projMain.c: 6: STATE_SECONDS = 0;
 11437  001312  6A54               	clrf	_STATE_SECONDS,c
 11438                           
 11439                           ;projMain.c: 7: FLAGS_1.bits.b0 = RESET;
 11440  001314  904E               	bcf	_FLAGS_1,0,c
 11441                           
 11442                           ;projMain.c: 8: FLAGS_1.bits.b1 = RESET;
 11443  001316  924E               	bcf	_FLAGS_1,1,c
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;projMain.c: 9: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD;
 11447  001318  D944               	call	PL18	;call to abstracted procedure
 11448  00131A  6FE8               	movwf	_STATE_SECONDS_REMAINING& (0+255),b
 11449  00131C                     i2l4110:
 11450                           
 11451                           ; BSR set to: 0
 11452                           ;projMain.c: 10: }
 11453                           ;projMain.c: 11: UINT8 OutForThePorts[2];
 11454                           ;projMain.c: 12: for (UINT8 i =0; i<2; i++) {
 11455  00131C  6A3B               	clrf	Timer0_10ms@i,c
 11456  00131E                     i2l4116:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;projMain.c: 13: OutForThePorts[i] = 0x00;
 11460  00131E  503B               	movf	Timer0_10ms@i,w,c
 11461  001320  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11462  001322  6ED9               	movwf	fsr2l,c
 11463  001324  6ADA               	clrf	fsr2h,c
 11464  001326  6ADF               	clrf	indf2,c
 11465                           
 11466                           ; BSR set to: 0
 11467  001328  2A3B               	incf	Timer0_10ms@i,f,c
 11468                           
 11469                           ; BSR set to: 0
 11470  00132A  0E01               	movlw	1
 11471  00132C  643B               	cpfsgt	Timer0_10ms@i,c
 11472  00132E  D7F7               	goto	i2l4116
 11473                           
 11474                           ; BSR set to: 0
 11475                           ;projMain.c: 14: }
 11476                           ;projMain.c: 15: for (UINT8 i =0; i<2; i++) {
 11477  001330  6A3F               	clrf	Timer0_10ms@i_2909,c
 11478  001332                     i2l4126:
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;projMain.c: 16: OutForThePorts[i] = STATES[PRESENT_STATE].ON[i];
 11482  001332  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11483  001334  0D06               	mullw	6
 11484  001336  0EF0               	movlw	low _STATES
 11485  001338  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11486  00133A  0E06               	movlw	high _STATES
 11487  00133C  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11488  00133E  2A35               	incf	??_Timer0_10ms,f,c
 11489  001340  0E00               	movlw	0
 11490  001342  2236               	addwfc	??_Timer0_10ms+1,f,c
 11491  001344  50F3               	movf	prodl,w,c
 11492  001346  2635               	addwf	??_Timer0_10ms,f,c
 11493  001348  50F4               	movf	prodh,w,c
 11494  00134A  2236               	addwfc	??_Timer0_10ms+1,f,c
 11495  00134C  503F               	movf	Timer0_10ms@i_2909,w,c
 11496  00134E  2435               	addwf	??_Timer0_10ms,w,c
 11497  001350  6ED9               	movwf	fsr2l,c
 11498  001352  0E00               	movlw	0
 11499  001354  2036               	addwfc	??_Timer0_10ms+1,w,c
 11500  001356  6EDA               	movwf	fsr2h,c
 11501  001358  503F               	movf	Timer0_10ms@i_2909,w,c
 11502  00135A  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11503  00135C  6EE1               	movwf	fsr1l,c
 11504  00135E  6AE2               	clrf	fsr1h,c
 11505  001360  CFDF FFE7          	movff	indf2,indf1
 11506                           
 11507                           ; BSR set to: 0
 11508  001364  2A3F               	incf	Timer0_10ms@i_2909,f,c
 11509                           
 11510                           ; BSR set to: 0
 11511  001366  0E01               	movlw	1
 11512  001368  643F               	cpfsgt	Timer0_10ms@i_2909,c
 11513  00136A  D7E3               	goto	i2l4126
 11514                           
 11515                           ; BSR set to: 0
 11516                           ;projMain.c: 17: }
 11517                           ;projMain.c: 18: if (STATE_SECONDS_REMAINING <= BLINK_LAST_X_SECONDS) {
 11518  00136C  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
 11519  00136E  5C5A               	subwf	_BLINK_LAST_X_SECONDS,w,c
 11520  001370  E30F               	bnc	i2l1141
 11521                           
 11522                           ; BSR set to: 0
 11523                           ;projMain.c: 19: if (BLINK_STATE_ON_OFF_COUNTER < BLINK_ON_TIME) {
 11524  001372  505C               	movf	_BLINK_ON_TIME,w,c
 11525  001374  5C52               	subwf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 11526  001376  E217               	bc	i2l4158
 11527                           
 11528                           ; BSR set to: 0
 11529                           ;projMain.c: 20: for (UINT8 i =0; i<2; i++)
 11530  001378  6A40               	clrf	Timer0_10ms@i_2910,c
 11531  00137A                     i2l4142:
 11532                           
 11533                           ; BSR set to: 0
 11534                           ;projMain.c: 21: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 11535  00137A  5040               	movf	Timer0_10ms@i_2910,w,c
 11536  00137C  D927               	call	PL28	;call to abstracted procedure
 11537  00137E  5040               	movf	Timer0_10ms@i_2910,w,c
 11538  001380  D95A               	call	PL106	;call to abstracted procedure
 11539  001382  5040               	movf	Timer0_10ms@i_2910,w,c
 11540  001384  D967               	call	PL118	;call to abstracted procedure
 11541                           
 11542                           ; BSR set to: 0
 11543  001386  2A40               	incf	Timer0_10ms@i_2910,f,c
 11544                           
 11545                           ; BSR set to: 0
 11546  001388  0E01               	movlw	1
 11547  00138A  6440               	cpfsgt	Timer0_10ms@i_2910,c
 11548  00138C  D7F6               	goto	i2l4142
 11549  00138E  D00B               	goto	i2l4158
 11550  001390                     i2l1141:
 11551                           
 11552                           ; BSR set to: 0
 11553                           ;projMain.c: 24: for (UINT8 i =0; i<2; i++)
 11554  001390  6A41               	clrf	Timer0_10ms@i_2911,c
 11555  001392                     i2l4152:
 11556                           
 11557                           ; BSR set to: 0
 11558                           ;projMain.c: 25: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 11559  001392  5041               	movf	Timer0_10ms@i_2911,w,c
 11560  001394  D91B               	call	PL28	;call to abstracted procedure
 11561  001396  5041               	movf	Timer0_10ms@i_2911,w,c
 11562  001398  D94E               	call	PL106	;call to abstracted procedure
 11563  00139A  5041               	movf	Timer0_10ms@i_2911,w,c
 11564  00139C  D95B               	call	PL118	;call to abstracted procedure
 11565                           
 11566                           ; BSR set to: 0
 11567  00139E  2A41               	incf	Timer0_10ms@i_2911,f,c
 11568                           
 11569                           ; BSR set to: 0
 11570  0013A0  0E01               	movlw	1
 11571  0013A2  6441               	cpfsgt	Timer0_10ms@i_2911,c
 11572  0013A4  D7F6               	goto	i2l4152
 11573  0013A6                     i2l4158:
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;projMain.c: 26: }
 11577                           ;projMain.c: 32: if ((STATES[PRESENT_STATE].AUDIO == AUDIO_NORMAL)
 11578                           ;projMain.c: 33: || ((STATES[PRESENT_STATE].AUDIO == AUDIO_SPECIAL)
 11579                           ;projMain.c: 34: && (STATE_SECONDS_REMAINING <= SPECIAL_AUDIO_LAST_X_SECONDS))) {
 11580  0013A6  D936               	call	PL42	;call to abstracted procedure
 11581  0013A8  04DE               	decf	postinc2,w,c
 11582  0013AA  E007               	bz	i2l4164
 11583                           
 11584                           ; BSR set to: 0
 11585  0013AC  D933               	call	PL42	;call to abstracted procedure
 11586  0013AE  0E02               	movlw	2
 11587  0013B0  18DE               	xorwf	postinc2,w,c
 11588  0013B2  E106               	bnz	i2l4168
 11589                           
 11590                           ; BSR set to: 0
 11591  0013B4  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
 11592  0013B6  5C55               	subwf	_SPECIAL_AUDIO_LAST_X_SECONDS,w,c
 11593  0013B8  E303               	bnc	i2l4168
 11594  0013BA                     i2l4164:
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;projMain.c: 35: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_NORMAL_ON_TIME)
 11598  0013BA  5059               	movf	_AUDIO_NORMAL_ON_TIME,w,c
 11599  0013BC  5C51               	subwf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11600  0013BE  D006               	goto	L11
 11601  0013C0                     i2l4168:
 11602                           
 11603                           ; BSR set to: 0
 11604  0013C0  D929               	call	PL42	;call to abstracted procedure
 11605  0013C2  0E02               	movlw	2
 11606  0013C4  18DE               	xorwf	postinc2,w,c
 11607  0013C6  E105               	bnz	i2l1154
 11608                           
 11609                           ; BSR set to: 0
 11610                           ;projMain.c: 40: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_SPECIAL_ON_TIME)
 11611  0013C8  5057               	movf	_AUDIO_SPECIAL_ON_TIME,w,c
 11612  0013CA  5C50               	subwf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11613  0013CC                     L11:
 11614  0013CC  E202               	bc	i2l1154
 11615                           
 11616                           ; BSR set to: 0
 11617                           ;projMain.c: 41: LATCbits.LC0 = ON;
 11618  0013CE  8085               	bsf	3973,0,c	;volatile
 11619  0013D0  D001               	goto	i2l4174
 11620  0013D2                     i2l1154:
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;projMain.c: 45: LATCbits.LC0 = OFF;
 11624  0013D2  9085               	bcf	3973,0,c	;volatile
 11625  0013D4                     i2l4174:
 11626                           
 11627                           ; BSR set to: 0
 11628                           ;projMain.c: 47: CENTI_SECOND_COUNT++;
 11629  0013D4  2A53               	incf	_CENTI_SECOND_COUNT,f,c
 11630                           
 11631                           ;projMain.c: 48: BLINK_STATE_ON_OFF_COUNTER++;
 11632  0013D6  2A52               	incf	_BLINK_STATE_ON_OFF_COUNTER,f,c
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;projMain.c: 49: if (BLINK_STATE_ON_OFF_COUNTER >= (BLINK_ON_TIME + BLINK_OFF_TIME))
 11636  0013D8  505B               	movf	_BLINK_OFF_TIME,w,c
 11637  0013DA  C05C  F035         	movff	_BLINK_ON_TIME,??_Timer0_10ms
 11638  0013DE  D948               	call	PL124	;call to abstracted procedure
 11639  0013E0  5052               	movf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 11640  0013E2  D8E9               	call	PL26	;call to abstracted procedure
 11641  0013E4  E301               	bnc	i2l4180
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;projMain.c: 50: BLINK_STATE_ON_OFF_COUNTER=0;
 11645  0013E6  6A52               	clrf	_BLINK_STATE_ON_OFF_COUNTER,c
 11646  0013E8                     i2l4180:
 11647                           
 11648                           ; BSR set to: 0
 11649                           ;projMain.c: 51: NORMAL_AUDIO_STATE_ON_OFF_COUNTER++;
 11650  0013E8  2A51               	incf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;projMain.c: 52: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_NORMAL_ON_TIME + AUDIO_
      +                          NORMAL_OFF_TIME))
 11654  0013EA  5058               	movf	_AUDIO_NORMAL_OFF_TIME,w,c
 11655  0013EC  C059  F035         	movff	_AUDIO_NORMAL_ON_TIME,??_Timer0_10ms
 11656  0013F0  D93F               	call	PL124	;call to abstracted procedure
 11657  0013F2  5051               	movf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11658  0013F4  D8E0               	call	PL26	;call to abstracted procedure
 11659  0013F6  E301               	bnc	i2l4186
 11660                           
 11661                           ; BSR set to: 0
 11662                           ;projMain.c: 53: NORMAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 11663  0013F8  6A51               	clrf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,c
 11664  0013FA                     i2l4186:
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;projMain.c: 54: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER++;
 11668  0013FA  2A50               	incf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 11669                           
 11670                           ; BSR set to: 0
 11671                           ;projMain.c: 55: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_SPECIAL_ON_TIME + AUDI
      +                          O_SPECIAL_OFF_TIME))
 11672  0013FC  5056               	movf	_AUDIO_SPECIAL_OFF_TIME,w,c
 11673  0013FE  C057  F035         	movff	_AUDIO_SPECIAL_ON_TIME,??_Timer0_10ms
 11674  001402  D936               	call	PL124	;call to abstracted procedure
 11675  001404  5050               	movf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11676  001406  D8D7               	call	PL26	;call to abstracted procedure
 11677  001408  E301               	bnc	i2l4192
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;projMain.c: 56: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 11681  00140A  6A50               	clrf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,c
 11682  00140C                     i2l4192:
 11683                           
 11684                           ; BSR set to: 0
 11685                           ;projMain.c: 59: if (CENTI_SECOND_COUNT == 100) {
 11686  00140C  0E64               	movlw	100
 11687  00140E  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 11688  001410  E120               	bnz	i2l4206
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;projMain.c: 60: CENTI_SECOND_COUNT = 0;
 11692  001412  6A53               	clrf	_CENTI_SECOND_COUNT,c
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;projMain.c: 61: DATE_TIME = IncreaseByASecond(DATE_TIME);
 11696  001414  EE20  F0BD         	lfsr	2,_DATE_TIME
 11697  001418  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
 11698  00141C  0E0A               	movlw	10
 11699  00141E                     i2u417_41:
 11700  00141E  CFDB FFEB          	movff	plusw2,plusw0
 11701  001422  06E8               	decf	wreg,f,c
 11702  001424  E2FC               	bc	i2u417_41
 11703  001426  ECCD  F018         	call	_IncreaseByASecond	;wreg free
 11704  00142A  EE20  F0BD         	lfsr	2,_DATE_TIME
 11705  00142E  0E0A               	movlw	10
 11706  001430                     i2u418_41:
 11707  001430  CFEB FFDB          	movff	plusw0,plusw2
 11708  001434  06E8               	decf	wreg,f,c
 11709  001436  E2FC               	bc	i2u418_41
 11710                           
 11711                           ;projMain.c: 62: STATE_SECONDS_REMAINING = (STATES[PRESENT_STATE].PERIOD + SECONDS_TO_AD
      +                          JUST_PART) - STATE_SECONDS-1;
 11712  001438  0100               	movlb	0	; () banked
 11713  00143A  D8B3               	call	PL18	;call to abstracted procedure
 11714  00143C  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11715  00143E  5054               	movf	_STATE_SECONDS,w,c
 11716  001440  5C35               	subwf	??_Timer0_10ms,w,c
 11717  001442  244F               	addwf	_SECONDS_TO_ADJUST_PART,w,c
 11718  001444  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11719  001446  0436               	decf	??_Timer0_10ms+1,w,c
 11720  001448  6FE8               	movwf	_STATE_SECONDS_REMAINING& (0+255),b
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;projMain.c: 63: if (STATE_SECONDS_REMAINING == 0)
 11724  00144A  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
 11725  00144C  E101               	bnz	i2l4204
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;projMain.c: 64: FLAGS_1.bits.b0 = SET;
 11729  00144E  804E               	bsf	_FLAGS_1,0,c
 11730  001450                     i2l4204:
 11731                           
 11732                           ; BSR set to: 0
 11733                           ;projMain.c: 65: STATE_SECONDS++;
 11734  001450  2A54               	incf	_STATE_SECONDS,f,c
 11735  001452                     i2l4206:
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;projMain.c: 66: }
 11739                           ;projMain.c: 67: if (CENTI_SECOND_COUNT == 3) {
 11740  001452  0E03               	movlw	3
 11741  001454  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 11742  001456  E147               	bnz	i2l4228
 11743                           
 11744                           ; BSR set to: 0
 11745                           ;projMain.c: 68: if (STATE_SECONDS == 0) {
 11746  001458  5054               	movf	_STATE_SECONDS,w,c
 11747  00145A  E145               	bnz	i2l4228
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;projMain.c: 69: if (SECONDS_TO_ADJUST != 0) {
 11751  00145C  51E2               	movf	_SECONDS_TO_ADJUST& (0+255),w,b
 11752  00145E  11E3               	iorwf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11753  001460  E041               	bz	i2l1165
 11754                           
 11755                           ; BSR set to: 0
 11756                           ;projMain.c: 70: if (SECONDS_TO_ADJUST > 0) {
 11757  001462  BFE3               	btfsc	(_SECONDS_TO_ADJUST+1)& (0+255),7,b
 11758  001464  D020               	goto	i2l4220
 11759  001466  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11760  001468  E102               	bnz	i2u423_40
 11761  00146A  05E2               	decf	_SECONDS_TO_ADJUST& (0+255),w,b
 11762  00146C  E31C               	bnc	i2l4220
 11763  00146E                     i2u423_40:
 11764                           
 11765                           ; BSR set to: 0
 11766                           ;projMain.c: 71: SECONDS_TO_ADJUST_PART = 0.3*STATES[PRESENT_STATE].PERIOD;
 11767  00146E  D905               	call	PL144	;call to abstracted procedure
 11768  001470  0E3E               	movlw	62
 11769  001472  6E12               	movwf	___ftmul@f2+2,c
 11770  001474  D896               	call	PL18	;call to abstracted procedure
 11771  001476  ECE2  F01A         	call	___lbtoft
 11772  00147A  D8F3               	call	PL122	;call to abstracted procedure
 11773  00147C  EC99  F015         	call	___ftmul	;wreg free
 11774  001480  D8E2               	call	PL114	;call to abstracted procedure
 11775  001482  ECBB  F016         	call	___fttol	;wreg free
 11776  001486  501C               	movf	?___fttol,w,c
 11777  001488  6E4F               	movwf	_SECONDS_TO_ADJUST_PART,c
 11778                           
 11779                           ;projMain.c: 72: if (SECONDS_TO_ADJUST_PART > SECONDS_TO_ADJUST)
 11780  00148A  0100               	movlb	0	; () banked
 11781  00148C  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11782  00148E  0A80               	xorlw	128
 11783  001490  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11784  001492  504F               	movf	_SECONDS_TO_ADJUST_PART,w,c
 11785  001494  5DE2               	subwf	_SECONDS_TO_ADJUST& (0+255),w,b
 11786  001496  0E80               	movlw	128
 11787  001498  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 11788  00149A  0E7F               	movlw	127
 11789  00149C  5835               	subwfb	??_Timer0_10ms& (0+255),w,c
 11790  00149E  E21B               	bc	i2l4226
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;projMain.c: 73: SECONDS_TO_ADJUST_PART = SECONDS_TO_ADJUST;
 11794  0014A0  C0E2  F04F         	movff	_SECONDS_TO_ADJUST,_SECONDS_TO_ADJUST_PART
 11795  0014A4  D018               	goto	i2l4226
 11796  0014A6                     i2l4220:
 11797                           
 11798                           ; BSR set to: 0
 11799                           ;projMain.c: 75: SECONDS_TO_ADJUST_PART = -0.3*STATES[PRESENT_STATE].PERIOD;
 11800  0014A6  D8E9               	call	PL144	;call to abstracted procedure
 11801  0014A8  0EBE               	movlw	190
 11802  0014AA  6E12               	movwf	___ftmul@f2+2,c
 11803  0014AC  D87A               	call	PL18	;call to abstracted procedure
 11804  0014AE  ECE2  F01A         	call	___lbtoft
 11805  0014B2  D8D7               	call	PL122	;call to abstracted procedure
 11806  0014B4  EC99  F015         	call	___ftmul	;wreg free
 11807  0014B8  D8C6               	call	PL114	;call to abstracted procedure
 11808  0014BA  ECBB  F016         	call	___fttol	;wreg free
 11809  0014BE  501C               	movf	?___fttol,w,c
 11810  0014C0  6E4F               	movwf	_SECONDS_TO_ADJUST_PART,c
 11811                           
 11812                           ;projMain.c: 76: if (SECONDS_TO_ADJUST_PART < SECONDS_TO_ADJUST)
 11813  0014C2  0E80               	movlw	128
 11814  0014C4  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 11815  0014C6  0E7F               	movlw	127
 11816  0014C8  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11817  0014CA  0100               	movlb	0	; () banked
 11818  0014CC  51E2               	movf	_SECONDS_TO_ADJUST& (0+255),w,b
 11819  0014CE  5C4F               	subwf	_SECONDS_TO_ADJUST_PART,w,c
 11820  0014D0  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11821  0014D2  0A80               	xorlw	128
 11822  0014D4  D7E3               	goto	L9
 11823  0014D6                     i2l4226:
 11824                           
 11825                           ; BSR set to: 0
 11826                           ;projMain.c: 78: }
 11827                           ;projMain.c: 79: SECONDS_TO_ADJUST -= SECONDS_TO_ADJUST_PART;
 11828  0014D6  504F               	movf	_SECONDS_TO_ADJUST_PART,w,c
 11829  0014D8  5FE2               	subwf	_SECONDS_TO_ADJUST& (0+255),f,b
 11830  0014DA  0E00               	movlw	0
 11831  0014DC  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 11832  0014DE  0EFF               	movlw	255
 11833  0014E0  5BE3               	subwfb	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11834                           
 11835                           ;projMain.c: 80: } else
 11836  0014E2  D001               	goto	i2l4228
 11837  0014E4                     i2l1165:
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;projMain.c: 81: SECONDS_TO_ADJUST_PART = 0;
 11841  0014E4  6A4F               	clrf	_SECONDS_TO_ADJUST_PART,c
 11842  0014E6                     i2l4228:
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;projMain.c: 82: }
 11846                           ;projMain.c: 83: }
 11847                           ;projMain.c: 84: if (CENTI_SECOND_COUNT == 2) {
 11848  0014E6  0E02               	movlw	2
 11849  0014E8  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 11850  0014EA  E138               	bnz	i2l4244
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;projMain.c: 85: UINT8 ThisCycle = GetThisCycle();
 11854  0014EC  EC6A  F01B         	call	i2_GetThisCycle	;wreg free
 11855  0014F0  6E3E               	movwf	Timer0_10ms@ThisCycle,c
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;projMain.c: 86: if ((CYCLES[ThisCycle].START_STATE == PRESENT_STATE) && (STATE_SECONDS=
      +                          =0)) {
 11859  0014F2  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11860  0014F4  D898               	call	PL104	;call to abstracted procedure
 11861  0014F6  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11862  0014F8  18DE               	xorwf	postinc2,w,c
 11863  0014FA  E130               	bnz	i2l4244
 11864                           
 11865                           ; BSR set to: 0
 11866  0014FC  5054               	movf	_STATE_SECONDS,w,c
 11867  0014FE  E12E               	bnz	i2l4244
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;projMain.c: 87: SECONDS_TO_ADJUST = (DATE_TIME.SECOND) % (CYCLES[ThisCycle].PERIOD);
 11871  001500  C0BD  F001         	movff	_DATE_TIME,___almod@dividend
 11872  001504  C0BE  F002         	movff	_DATE_TIME+1,___almod@dividend+1
 11873  001508  C0BF  F003         	movff	_DATE_TIME+2,___almod@dividend+2
 11874  00150C  C0C0  F004         	movff	_DATE_TIME+3,___almod@dividend+3
 11875  001510  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11876  001512  D86E               	call	PL34	;call to abstracted procedure
 11877  001514  D8B7               	call	PL156	;call to abstracted procedure
 11878  001516  C035  F005         	movff	??_Timer0_10ms,___almod@divisor
 11879  00151A  C036  F006         	movff	??_Timer0_10ms+1,___almod@divisor+1
 11880  00151E  6A07               	clrf	___almod@divisor+2,c
 11881  001520  6A08               	clrf	___almod@divisor+3,c
 11882  001522  EC67  F017         	call	___almod	;wreg free
 11883  001526  C001  F0E2         	movff	?___almod,_SECONDS_TO_ADJUST
 11884  00152A  C002  F0E3         	movff	?___almod+1,_SECONDS_TO_ADJUST+1
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;projMain.c: 88: if (SECONDS_TO_ADJUST > (CYCLES[ThisCycle].PERIOD)/2)
 11888  00152E  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11889  001530  D85F               	call	PL34	;call to abstracted procedure
 11890  001532  D8A8               	call	PL156	;call to abstracted procedure
 11891  001534  90D8               	bcf	status,0,c
 11892  001536  3036               	rrcf	??_Timer0_10ms+1,w,c
 11893  001538  6E38               	movwf	(??_Timer0_10ms+3)& (0+255),c
 11894  00153A  3035               	rrcf	??_Timer0_10ms,w,c
 11895  00153C  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 11896  00153E  51E2               	movf	_SECONDS_TO_ADJUST& (0+255),w,b
 11897  001540  5C37               	subwf	??_Timer0_10ms+2,w,c
 11898  001542  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11899  001544  5838               	subwfb	??_Timer0_10ms+3,w,c
 11900  001546  E206               	bc	i2l4242
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;projMain.c: 89: SECONDS_TO_ADJUST -= CYCLES[ThisCycle].PERIOD;
 11904  001548  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11905  00154A  D852               	call	PL34	;call to abstracted procedure
 11906  00154C  50DE               	movf	postinc2,w,c
 11907  00154E  5FE2               	subwf	_SECONDS_TO_ADJUST& (0+255),f,b
 11908  001550  50DD               	movf	postdec2,w,c
 11909  001552  5BE3               	subwfb	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11910  001554                     i2l4242:
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;projMain.c: 90: SECONDS_TO_ADJUST = -SECONDS_TO_ADJUST;
 11914  001554  6DE2               	negf	_SECONDS_TO_ADJUST& (0+255),b
 11915  001556  1FE3               	comf	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11916  001558  B0D8               	btfsc	status,0,c
 11917  00155A  2BE3               	incf	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11918  00155C                     i2l4244:
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;projMain.c: 91: }
 11922                           ;projMain.c: 92: }
 11923                           ;projMain.c: 93: if (CENTI_SECOND_COUNT == 1) {
 11924  00155C  0453               	decf	_CENTI_SECOND_COUNT,w,c
 11925  00155E  B4D8               	btfsc	status,2,c
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;projMain.c: 94: if (!FLAGS_1.bits.b1) {
 11929  001560  B24E               	btfsc	_FLAGS_1,1,c
 11930  001562  0012               	return	
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;projMain.c: 95: UINT8 ThisCycle = GetThisCycle();
 11934  001564  EC6A  F01B         	call	i2_GetThisCycle	;wreg free
 11935  001568  6E3A               	movwf	Timer0_10ms@ThisCycle_2914,c
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;projMain.c: 96: if (PRESENT_STATE == CYCLES[ThisCycle].END_STATE) {
 11939  00156A  503A               	movf	Timer0_10ms@ThisCycle_2914,w,c
 11940  00156C  0D04               	mullw	4
 11941  00156E  0E03               	movlw	low (_CYCLES+3)
 11942  001570  24F3               	addwf	prodl,w,c
 11943  001572  6ED9               	movwf	fsr2l,c
 11944  001574  0E01               	movlw	high (_CYCLES+3)
 11945  001576  20F4               	addwfc	prodh,w,c
 11946  001578  6EDA               	movwf	fsr2h,c
 11947  00157A  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11948  00157C  18DE               	xorwf	postinc2,w,c
 11949  00157E  E10E               	bnz	i2l4262
 11950                           
 11951                           ; BSR set to: 0
 11952                           ;projMain.c: 97: PRESENT_EVENT = NEXT_EVENT;
 11953  001580  C05D  F05E         	movff	_NEXT_EVENT,_PRESENT_EVENT
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;projMain.c: 98: if (PRESENT_EVENT < 0) {
 11957  001584  AE5E               	btfss	_PRESENT_EVENT,7,c
 11958  001586  D002               	goto	i2l4258
 11959                           
 11960                           ; BSR set to: 0
 11961                           ;projMain.c: 99: ThisCycle = 0;
 11962  001588  6A3A               	clrf	Timer0_10ms@ThisCycle_2914,c
 11963                           
 11964                           ;projMain.c: 100: } else {
 11965  00158A  D002               	goto	i2l1178
 11966  00158C                     i2l4258:
 11967                           
 11968                           ; BSR set to: 0
 11969                           ;projMain.c: 101: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 11970  00158C  D839               	call	PL38	;call to abstracted procedure
 11971  00158E  6E3A               	movwf	Timer0_10ms@ThisCycle_2914,c
 11972  001590                     i2l1178:
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;projMain.c: 102: }
 11976                           ;projMain.c: 103: NEXT_STATE = CYCLES[ThisCycle].START_STATE;
 11977  001590  503A               	movf	Timer0_10ms@ThisCycle_2914,w,c
 11978  001592  D849               	call	PL104	;call to abstracted procedure
 11979  001594  50DF               	movf	indf2,w,c
 11980  001596  6FE9               	movwf	_NEXT_STATE& (0+255),b
 11981                           
 11982                           ; BSR set to: 0
 11983                           ;projMain.c: 104: FLAGS_1.bits.b1 = SET;
 11984  001598  824E               	bsf	_FLAGS_1,1,c
 11985                           
 11986                           ;projMain.c: 105: } else {
 11987  00159A  0012               	return	
 11988  00159C                     i2l4262:
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;projMain.c: 106: NEXT_STATE = PRESENT_STATE+1;
 11992  00159C  29EA               	incf	_PRESENT_STATE& (0+255),w,b
 11993  00159E  6FE9               	movwf	_NEXT_STATE& (0+255),b
 11994                           
 11995                           ; BSR set to: 0
 11996  0015A0  0012               	return		;funcret
 11997  0015A2                     __end_of_Timer0_10ms:
 11998                           	opt stack 0
 11999  0015A2                     PL18:
 12000                           	opt stack 15
 12001  0015A2  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 12002  0015A4  0D06               	mullw	6
 12003  0015A6  0EF0               	movlw	low _STATES
 12004  0015A8  24F3               	addwf	prodl,w,c
 12005  0015AA  6ED9               	movwf	fsr2l,c
 12006  0015AC  0E06               	movlw	high _STATES
 12007  0015AE  20F4               	addwfc	prodh,w,c
 12008  0015B0  6EDA               	movwf	fsr2h,c
 12009  0015B2  50DF               	movf	indf2,w,c
 12010  0015B4  0012               	return	
 12011  0015B6                     __end_ofPL18:
 12012                           	opt stack 0
 12013  0015B6                     PL26:
 12014                           	opt stack 15
 12015  0015B6  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 12016  0015B8  6A38               	clrf	(??_Timer0_10ms+3)& (0+255),c
 12017  0015BA  5035               	movf	??_Timer0_10ms,w,c
 12018  0015BC  5C37               	subwf	??_Timer0_10ms+2,w,c
 12019  0015BE  5038               	movf	??_Timer0_10ms+3,w,c
 12020  0015C0  0A80               	xorlw	128
 12021  0015C2  6E39               	movwf	(??_Timer0_10ms+4)& (0+255),c
 12022  0015C4  5036               	movf	??_Timer0_10ms+1,w,c
 12023  0015C6  0A80               	xorlw	128
 12024  0015C8  5839               	subwfb	(??_Timer0_10ms+4)& (0+255),w,c
 12025  0015CA  0012               	return	
 12026  0015CC                     __end_ofPL26:
 12027                           	opt stack 0
 12028  0015CC                     PL28:
 12029                           	opt stack 15
 12030  0015CC  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 12031  0015CE  6ED9               	movwf	fsr2l,c
 12032  0015D0  6ADA               	clrf	fsr2h,c
 12033  0015D2  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 12034  0015D4  0D06               	mullw	6
 12035  0015D6  0EF0               	movlw	low _STATES
 12036  0015D8  6E35               	movwf	??_Timer0_10ms& (0+255),c
 12037  0015DA  0E06               	movlw	high _STATES
 12038  0015DC  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 12039  0015DE  0E03               	movlw	3
 12040  0015E0  2635               	addwf	??_Timer0_10ms,f,c
 12041  0015E2  0E00               	movlw	0
 12042  0015E4  2236               	addwfc	??_Timer0_10ms+1,f,c
 12043  0015E6  50F3               	movf	prodl,w,c
 12044  0015E8  2635               	addwf	??_Timer0_10ms,f,c
 12045  0015EA  50F4               	movf	prodh,w,c
 12046  0015EC  2236               	addwfc	??_Timer0_10ms+1,f,c
 12047  0015EE  0012               	return	
 12048  0015F0                     __end_ofPL28:
 12049                           	opt stack 0
 12050  0015F0                     PL34:
 12051                           	opt stack 15
 12052  0015F0  0D04               	mullw	4
 12053  0015F2  0E00               	movlw	low _CYCLES
 12054  0015F4  24F3               	addwf	prodl,w,c
 12055  0015F6  6ED9               	movwf	fsr2l,c
 12056  0015F8  0E01               	movlw	high _CYCLES
 12057  0015FA  20F4               	addwfc	prodh,w,c
 12058  0015FC  6EDA               	movwf	fsr2h,c
 12059  0015FE  0012               	return	
 12060  001600                     __end_ofPL34:
 12061                           	opt stack 0
 12062  001600                     PL38:
 12063                           	opt stack 21
 12064  001600  505E               	movf	_PRESENT_EVENT,w,c
 12065  001602  0D0A               	mullw	10
 12066  001604  0E08               	movlw	low (_EVENTS+8)
 12067  001606  24F3               	addwf	prodl,w,c
 12068  001608  6ED9               	movwf	fsr2l,c
 12069  00160A  0E02               	movlw	high (_EVENTS+8)
 12070  00160C  20F4               	addwfc	prodh,w,c
 12071  00160E  6EDA               	movwf	fsr2h,c
 12072  001610  50DF               	movf	indf2,w,c
 12073  001612  0012               	return	
 12074  001614                     __end_ofPL38:
 12075                           	opt stack 0
 12076  001614                     PL42:
 12077                           	opt stack 15
 12078  001614  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 12079  001616  0D06               	mullw	6
 12080  001618  0EF5               	movlw	low (_STATES+5)
 12081  00161A  24F3               	addwf	prodl,w,c
 12082  00161C  6ED9               	movwf	fsr2l,c
 12083  00161E  0E06               	movlw	high (_STATES+5)
 12084  001620  20F4               	addwfc	prodh,w,c
 12085  001622  6EDA               	movwf	fsr2h,c
 12086  001624  0012               	return	
 12087  001626                     __end_ofPL42:
 12088                           	opt stack 0
 12089  001626                     PL104:
 12090                           	opt stack 15
 12091  001626  0D04               	mullw	4
 12092  001628  0E02               	movlw	low (_CYCLES+2)
 12093  00162A  24F3               	addwf	prodl,w,c
 12094  00162C  6ED9               	movwf	fsr2l,c
 12095  00162E  0E01               	movlw	high (_CYCLES+2)
 12096  001630  20F4               	addwfc	prodh,w,c
 12097  001632  6EDA               	movwf	fsr2h,c
 12098  001634  0012               	return	
 12099  001636                     __end_ofPL104:
 12100                           	opt stack 0
 12101  001636                     PL106:
 12102                           	opt stack 15
 12103  001636  2435               	addwf	??_Timer0_10ms,w,c
 12104  001638  6EE1               	movwf	fsr1l,c
 12105  00163A  0E00               	movlw	0
 12106  00163C  2036               	addwfc	??_Timer0_10ms+1,w,c
 12107  00163E  6EE2               	movwf	fsr1h,c
 12108  001640  50E7               	movf	indf1,w,c
 12109  001642  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 12110  001644  0012               	return	
 12111  001646                     __end_ofPL106:
 12112                           	opt stack 0
 12113  001646                     PL114:
 12114                           	opt stack 15
 12115  001646  C00D  F01C         	movff	?___ftmul,___fttol@f1
 12116  00164A  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
 12117  00164E  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
 12118  001652  0012               	return	
 12119  001654                     __end_ofPL114:
 12120                           	opt stack 0
 12121  001654                     PL118:
 12122                           	opt stack 15
 12123  001654  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 12124  001656  6EE1               	movwf	fsr1l,c
 12125  001658  6AE2               	clrf	fsr1h,c
 12126  00165A  50E7               	movf	indf1,w,c
 12127  00165C  1037               	iorwf	??_Timer0_10ms+2,w,c
 12128  00165E  6EDF               	movwf	indf2,c
 12129  001660  0012               	return	
 12130  001662                     __end_ofPL118:
 12131                           	opt stack 0
 12132  001662                     PL122:
 12133                           	opt stack 15
 12134  001662  C009  F00D         	movff	?___lbtoft,___ftmul@f1
 12135  001666  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
 12136  00166A  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
 12137  00166E  0012               	return	
 12138  001670                     __end_ofPL122:
 12139                           	opt stack 0
 12140  001670                     PL124:
 12141                           	opt stack 15
 12142  001670  6A36               	clrf	(??_Timer0_10ms+1)& (0+255),c
 12143  001672  2635               	addwf	??_Timer0_10ms,f,c
 12144  001674  0E00               	movlw	0
 12145  001676  2236               	addwfc	??_Timer0_10ms+1,f,c
 12146  001678  0C00               	retlw	0
 12147  00167A                     __end_ofPL124:
 12148                           	opt stack 0
 12149  00167A                     PL144:
 12150                           	opt stack 15
 12151  00167A  0E9A               	movlw	154
 12152  00167C  6E10               	movwf	___ftmul@f2,c
 12153  00167E  0E99               	movlw	153
 12154  001680  6E11               	movwf	___ftmul@f2+1,c
 12155  001682  0C99               	retlw	153
 12156  001684                     __end_ofPL144:
 12157                           	opt stack 0
 12158  001684                     PL156:
 12159                           	opt stack 15
 12160  001684  CFDE F035          	movff	postinc2,??_Timer0_10ms
 12161  001688  CFDD F036          	movff	postdec2,??_Timer0_10ms+1
 12162  00168C  0012               	return	
 12163  00168E                     __end_ofPL156:
 12164                           	opt stack 0
 12165                           tosu	equ	0xFFF
 12166                           tosh	equ	0xFFE
 12167                           tosl	equ	0xFFD
 12168                           pclatu	equ	0xFFB
 12169                           pclath	equ	0xFFA
 12170                           tblptru	equ	0xFF8
 12171                           tblptrh	equ	0xFF7
 12172                           tblptrl	equ	0xFF6
 12173                           tablat	equ	0xFF5
 12174                           prodh	equ	0xFF4
 12175                           prodl	equ	0xFF3
 12176                           intcon	equ	0xFF2
 12177                           postinc0	equ	0xFEE
 12178                           plusw0	equ	0xFEB
 12179                           fsr0h	equ	0xFEA
 12180                           fsr0l	equ	0xFE9
 12181                           wreg	equ	0xFE8
 12182                           indf1	equ	0xFE7
 12183                           postinc1	equ	0xFE6
 12184                           postdec1	equ	0xFE5
 12185                           plusw1	equ	0xFE3
 12186                           fsr1h	equ	0xFE2
 12187                           fsr1l	equ	0xFE1
 12188                           indf2	equ	0xFDF
 12189                           postinc2	equ	0xFDE
 12190                           postdec2	equ	0xFDD
 12191                           plusw2	equ	0xFDB
 12192                           fsr2h	equ	0xFDA
 12193                           fsr2l	equ	0xFD9
 12194                           status	equ	0xFD8
 12195                           
 12196 ;; *************** function i2_GetThisCycle *****************
 12197 ;; Defined at:
 12198 ;;		line 230 in file "libs/funcs.c"
 12199 ;; Parameters:    Size  Location     Type
 12200 ;;		None
 12201 ;; Auto vars:     Size  Location     Type
 12202 ;;		None
 12203 ;; Return value:  Size  Location     Type
 12204 ;;                  1    wreg      unsigned char 
 12205 ;; Registers used:
 12206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12207 ;; Tracked objects:
 12208 ;;		On entry : 3F/0
 12209 ;;		On exit  : 3F/0
 12210 ;;		Unchanged: 3F/0
 12211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12216 ;;Total ram usage:        0 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; This function calls:
 12219 ;;		Nothing
 12220 ;; This function is called by:
 12221 ;;		_Timer0_10ms
 12222 ;; This function uses a non-reentrant model
 12223 ;;
 12224                           
 12225                           	psect	text54
 12226  0036D4                     __ptext54:
 12227                           	opt stack 0
 12228  0036D4                     i2_GetThisCycle:
 12229                           	opt stack 19
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;funcs.c: 231: if (PRESENT_EVENT <0)
 12233                           
 12234                           ; BSR set to: 0
 12235                           ;incstack = 0
 12236  0036D4  BE5E               	btfsc	_PRESENT_EVENT,7,c
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;funcs.c: 232: return 0;
 12240  0036D6  0C00               	retlw	0
 12241                           
 12242                           ; BSR set to: 0
 12243                           ;funcs.c: 233: else
 12244                           ;funcs.c: 234: return EVENTS[PRESENT_EVENT].CYCLE;
 12245  0036D8  EF00  F00B         	goto	PL38	;call to abstracted procedure
 12246  0036DC                     __end_ofi2_GetThisCycle:
 12247                           	opt stack 0
 12248                           tosu	equ	0xFFF
 12249                           tosh	equ	0xFFE
 12250                           tosl	equ	0xFFD
 12251                           pclatu	equ	0xFFB
 12252                           pclath	equ	0xFFA
 12253                           tblptru	equ	0xFF8
 12254                           tblptrh	equ	0xFF7
 12255                           tblptrl	equ	0xFF6
 12256                           tablat	equ	0xFF5
 12257                           prodh	equ	0xFF4
 12258                           prodl	equ	0xFF3
 12259                           intcon	equ	0xFF2
 12260                           postinc0	equ	0xFEE
 12261                           plusw0	equ	0xFEB
 12262                           fsr0h	equ	0xFEA
 12263                           fsr0l	equ	0xFE9
 12264                           wreg	equ	0xFE8
 12265                           indf1	equ	0xFE7
 12266                           postinc1	equ	0xFE6
 12267                           postdec1	equ	0xFE5
 12268                           plusw1	equ	0xFE3
 12269                           fsr1h	equ	0xFE2
 12270                           fsr1l	equ	0xFE1
 12271                           indf2	equ	0xFDF
 12272                           postinc2	equ	0xFDE
 12273                           postdec2	equ	0xFDD
 12274                           plusw2	equ	0xFDB
 12275                           fsr2h	equ	0xFDA
 12276                           fsr2l	equ	0xFD9
 12277                           status	equ	0xFD8
 12278                           
 12279 ;; *************** function ___lbtoft *****************
 12280 ;; Defined at:
 12281 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbtoft.c"
 12282 ;; Parameters:    Size  Location     Type
 12283 ;;  c               1    wreg     unsigned char 
 12284 ;; Auto vars:     Size  Location     Type
 12285 ;;  c               1   11[COMRAM] unsigned char 
 12286 ;; Return value:  Size  Location     Type
 12287 ;;                  3    8[COMRAM] float 
 12288 ;; Registers used:
 12289 ;;		wreg, status,2, status,0, cstack
 12290 ;; Tracked objects:
 12291 ;;		On entry : 3F/0
 12292 ;;		On exit  : 0/0
 12293 ;;		Unchanged: 0/0
 12294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12295 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12296 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12298 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12299 ;;Total ram usage:        4 bytes
 12300 ;; Hardware stack levels used:    1
 12301 ;; Hardware stack levels required when called:    1
 12302 ;; This function calls:
 12303 ;;		___ftpack
 12304 ;; This function is called by:
 12305 ;;		_Timer0_10ms
 12306 ;; This function uses a non-reentrant model
 12307 ;;
 12308                           
 12309                           	psect	text55
 12310  0035C4                     __ptext55:
 12311                           	opt stack 0
 12312  0035C4                     ___lbtoft:
 12313                           	opt stack 18
 12314                           
 12315                           ; BSR set to: 0
 12316                           ;incstack = 0
 12317                           ;___lbtoft@c stored from wreg
 12318  0035C4  6E0C               	movwf	___lbtoft@c,c
 12319  0035C6  500C               	movf	___lbtoft@c,w,c
 12320  0035C8  6E01               	movwf	___ftpack@arg,c
 12321  0035CA  6A02               	clrf	___ftpack@arg+1,c
 12322  0035CC  6A03               	clrf	___ftpack@arg+2,c
 12323  0035CE  0E8E               	movlw	142
 12324  0035D0  6E04               	movwf	___ftpack@exp,c
 12325  0035D2  0E00               	movlw	0
 12326  0035D4  6E05               	movwf	___ftpack@sign,c
 12327  0035D6  ECB4  F017         	call	___ftpack	;wreg free
 12328  0035DA  C001  F009         	movff	?___ftpack,?___lbtoft
 12329  0035DE  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
 12330  0035E2  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
 12331  0035E6  0012               	return		;funcret
 12332  0035E8                     __end_of___lbtoft:
 12333                           	opt stack 0
 12334                           tosu	equ	0xFFF
 12335                           tosh	equ	0xFFE
 12336                           tosl	equ	0xFFD
 12337                           pclatu	equ	0xFFB
 12338                           pclath	equ	0xFFA
 12339                           tblptru	equ	0xFF8
 12340                           tblptrh	equ	0xFF7
 12341                           tblptrl	equ	0xFF6
 12342                           tablat	equ	0xFF5
 12343                           prodh	equ	0xFF4
 12344                           prodl	equ	0xFF3
 12345                           intcon	equ	0xFF2
 12346                           postinc0	equ	0xFEE
 12347                           plusw0	equ	0xFEB
 12348                           fsr0h	equ	0xFEA
 12349                           fsr0l	equ	0xFE9
 12350                           wreg	equ	0xFE8
 12351                           indf1	equ	0xFE7
 12352                           postinc1	equ	0xFE6
 12353                           postdec1	equ	0xFE5
 12354                           plusw1	equ	0xFE3
 12355                           fsr1h	equ	0xFE2
 12356                           fsr1l	equ	0xFE1
 12357                           indf2	equ	0xFDF
 12358                           postinc2	equ	0xFDE
 12359                           postdec2	equ	0xFDD
 12360                           plusw2	equ	0xFDB
 12361                           fsr2h	equ	0xFDA
 12362                           fsr2l	equ	0xFD9
 12363                           status	equ	0xFD8
 12364                           
 12365 ;; *************** function ___fttol *****************
 12366 ;; Defined at:
 12367 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
 12368 ;; Parameters:    Size  Location     Type
 12369 ;;  f1              3   27[COMRAM] float 
 12370 ;; Auto vars:     Size  Location     Type
 12371 ;;  lval            4   37[COMRAM] unsigned long 
 12372 ;;  exp1            1   41[COMRAM] unsigned char 
 12373 ;;  sign1           1   36[COMRAM] unsigned char 
 12374 ;; Return value:  Size  Location     Type
 12375 ;;                  4   27[COMRAM] long 
 12376 ;; Registers used:
 12377 ;;		wreg, status,2, status,0
 12378 ;; Tracked objects:
 12379 ;;		On entry : 0/0
 12380 ;;		On exit  : 0/0
 12381 ;;		Unchanged: 0/0
 12382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12384 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12385 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12386 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12387 ;;Total ram usage:       15 bytes
 12388 ;; Hardware stack levels used:    1
 12389 ;; This function calls:
 12390 ;;		Nothing
 12391 ;; This function is called by:
 12392 ;;		_Timer0_10ms
 12393 ;; This function uses a non-reentrant model
 12394 ;;
 12395                           
 12396                           	psect	text56
 12397  002D76                     __ptext56:
 12398                           	opt stack 0
 12399  002D76                     ___fttol:
 12400                           	opt stack 19
 12401                           
 12402                           ;incstack = 0
 12403  002D76  C01E  F020         	movff	___fttol@f1+2,??___fttol
 12404  002D7A  6A21               	clrf	(??___fttol+1)& (0+255),c
 12405  002D7C  6A22               	clrf	(??___fttol+2)& (0+255),c
 12406  002D7E  341D               	rlcf	___fttol@f1+1,w,c
 12407  002D80  3620               	rlcf	??___fttol& (0+255),f,c
 12408  002D82  E301               	bnc	u348_41
 12409  002D84  8021               	bsf	(??___fttol+1)& (0+255),0,c
 12410  002D86                     u348_41:
 12411  002D86  5020               	movf	??___fttol,w,c
 12412  002D88  6E2A               	movwf	___fttol@exp1,c
 12413  002D8A  502A               	movf	___fttol@exp1,w,c
 12414  002D8C  E105               	bnz	i2l3816
 12415  002D8E                     i2l3814:
 12416  002D8E  6A1C               	clrf	?___fttol,c
 12417  002D90  6A1D               	clrf	?___fttol+1,c
 12418  002D92  6A1E               	clrf	?___fttol+2,c
 12419  002D94  6A1F               	clrf	?___fttol+3,c
 12420  002D96  0012               	return	
 12421  002D98                     i2l3816:
 12422  002D98  0E17               	movlw	23
 12423  002D9A  6E20               	movwf	??___fttol& (0+255),c
 12424  002D9C  C01C  F021         	movff	___fttol@f1,??___fttol+1
 12425  002DA0  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
 12426  002DA4  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
 12427  002DA8  2820               	incf	??___fttol,w,c
 12428  002DAA  6E24               	movwf	(??___fttol+4)& (0+255),c
 12429  002DAC  D004               	goto	i2u350_40
 12430  002DAE                     i2u350_45:
 12431  002DAE  90D8               	bcf	status,0,c
 12432  002DB0  3223               	rrcf	??___fttol+3,f,c
 12433  002DB2  3222               	rrcf	??___fttol+2,f,c
 12434  002DB4  3221               	rrcf	??___fttol+1,f,c
 12435  002DB6                     i2u350_40:
 12436  002DB6  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
 12437  002DB8  D7FA               	goto	i2u350_45
 12438  002DBA  5021               	movf	??___fttol+1,w,c
 12439  002DBC  6E25               	movwf	___fttol@sign1,c
 12440  002DBE  8E1D               	bsf	___fttol@f1+1,7,c
 12441  002DC0  6A1E               	clrf	___fttol@f1+2,c
 12442  002DC2  501C               	movf	___fttol@f1,w,c
 12443  002DC4  6E26               	movwf	___fttol@lval,c
 12444  002DC6  501D               	movf	___fttol@f1+1,w,c
 12445  002DC8  6E27               	movwf	___fttol@lval+1,c
 12446  002DCA  501E               	movf	___fttol@f1+2,w,c
 12447  002DCC  6E28               	movwf	___fttol@lval+2,c
 12448  002DCE  6A29               	clrf	___fttol@lval+3,c
 12449  002DD0  0E8E               	movlw	142
 12450  002DD2  5E2A               	subwf	___fttol@exp1,f,c
 12451  002DD4  AE2A               	btfss	___fttol@exp1,7,c
 12452  002DD6  D00C               	goto	i2l3836
 12453  002DD8  502A               	movf	___fttol@exp1,w,c
 12454  002DDA  0A80               	xorlw	128
 12455  002DDC  0F8F               	addlw	143
 12456  002DDE  E3D7               	bnc	i2l3814
 12457  002DE0                     i2l3832:
 12458  002DE0  90D8               	bcf	status,0,c
 12459  002DE2  3229               	rrcf	___fttol@lval+3,f,c
 12460  002DE4  3228               	rrcf	___fttol@lval+2,f,c
 12461  002DE6  3227               	rrcf	___fttol@lval+1,f,c
 12462  002DE8  3226               	rrcf	___fttol@lval,f,c
 12463  002DEA  3E2A               	incfsz	___fttol@exp1,f,c
 12464  002DEC  D7F9               	goto	i2l3832
 12465  002DEE  D00C               	goto	i2l3844
 12466  002DF0                     i2l3836:
 12467  002DF0  0E17               	movlw	23
 12468  002DF2  642A               	cpfsgt	___fttol@exp1,c
 12469  002DF4  D007               	goto	i2l3842
 12470  002DF6  D7CB               	goto	i2l3814
 12471  002DF8                     i2l3840:
 12472  002DF8  90D8               	bcf	status,0,c
 12473  002DFA  3626               	rlcf	___fttol@lval,f,c
 12474  002DFC  3627               	rlcf	___fttol@lval+1,f,c
 12475  002DFE  3628               	rlcf	___fttol@lval+2,f,c
 12476  002E00  3629               	rlcf	___fttol@lval+3,f,c
 12477  002E02  062A               	decf	___fttol@exp1,f,c
 12478  002E04                     i2l3842:
 12479  002E04  502A               	movf	___fttol@exp1,w,c
 12480  002E06  E1F8               	bnz	i2l3840
 12481  002E08                     i2l3844:
 12482  002E08  5025               	movf	___fttol@sign1,w,c
 12483  002E0A  E008               	bz	i2l3848
 12484  002E0C  1E29               	comf	___fttol@lval+3,f,c
 12485  002E0E  1E28               	comf	___fttol@lval+2,f,c
 12486  002E10  1E27               	comf	___fttol@lval+1,f,c
 12487  002E12  6C26               	negf	___fttol@lval,c
 12488  002E14  0E00               	movlw	0
 12489  002E16  2227               	addwfc	___fttol@lval+1,f,c
 12490  002E18  2228               	addwfc	___fttol@lval+2,f,c
 12491  002E1A  2229               	addwfc	___fttol@lval+3,f,c
 12492  002E1C                     i2l3848:
 12493  002E1C  C026  F01C         	movff	___fttol@lval,?___fttol
 12494  002E20  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
 12495  002E24  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
 12496  002E28  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
 12497  002E2C  0012               	return		;funcret
 12498  002E2E                     __end_of___fttol:
 12499                           	opt stack 0
 12500                           tosu	equ	0xFFF
 12501                           tosh	equ	0xFFE
 12502                           tosl	equ	0xFFD
 12503                           pclatu	equ	0xFFB
 12504                           pclath	equ	0xFFA
 12505                           tblptru	equ	0xFF8
 12506                           tblptrh	equ	0xFF7
 12507                           tblptrl	equ	0xFF6
 12508                           tablat	equ	0xFF5
 12509                           prodh	equ	0xFF4
 12510                           prodl	equ	0xFF3
 12511                           intcon	equ	0xFF2
 12512                           postinc0	equ	0xFEE
 12513                           plusw0	equ	0xFEB
 12514                           fsr0h	equ	0xFEA
 12515                           fsr0l	equ	0xFE9
 12516                           wreg	equ	0xFE8
 12517                           indf1	equ	0xFE7
 12518                           postinc1	equ	0xFE6
 12519                           postdec1	equ	0xFE5
 12520                           plusw1	equ	0xFE3
 12521                           fsr1h	equ	0xFE2
 12522                           fsr1l	equ	0xFE1
 12523                           indf2	equ	0xFDF
 12524                           postinc2	equ	0xFDE
 12525                           postdec2	equ	0xFDD
 12526                           plusw2	equ	0xFDB
 12527                           fsr2h	equ	0xFDA
 12528                           fsr2l	equ	0xFD9
 12529                           status	equ	0xFD8
 12530                           
 12531 ;; *************** function ___ftmul *****************
 12532 ;; Defined at:
 12533 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;  f1              3   12[COMRAM] float 
 12536 ;;  f2              3   15[COMRAM] float 
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 12539 ;;  sign            1   26[COMRAM] unsigned char 
 12540 ;;  cntr            1   25[COMRAM] unsigned char 
 12541 ;;  exp             1   21[COMRAM] unsigned char 
 12542 ;; Return value:  Size  Location     Type
 12543 ;;                  3   12[COMRAM] float 
 12544 ;; Registers used:
 12545 ;;		wreg, status,2, status,0, cstack
 12546 ;; Tracked objects:
 12547 ;;		On entry : 0/0
 12548 ;;		On exit  : 0/0
 12549 ;;		Unchanged: 0/0
 12550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12551 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12552 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12553 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12554 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12555 ;;Total ram usage:       15 bytes
 12556 ;; Hardware stack levels used:    1
 12557 ;; Hardware stack levels required when called:    1
 12558 ;; This function calls:
 12559 ;;		___ftpack
 12560 ;; This function is called by:
 12561 ;;		_Timer0_10ms
 12562 ;; This function uses a non-reentrant model
 12563 ;;
 12564                           
 12565                           	psect	text57
 12566  002B32                     __ptext57:
 12567                           	opt stack 0
 12568  002B32                     ___ftmul:
 12569                           	opt stack 18
 12570                           
 12571                           ;incstack = 0
 12572  002B32  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 12573  002B36  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12574  002B38  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12575  002B3A  340E               	rlcf	___ftmul@f1+1,w,c
 12576  002B3C  3613               	rlcf	??___ftmul& (0+255),f,c
 12577  002B3E  E301               	bnc	u330_41
 12578  002B40  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12579  002B42                     u330_41:
 12580  002B42  5013               	movf	??___ftmul,w,c
 12581  002B44  6E16               	movwf	___ftmul@exp,c
 12582  002B46  5016               	movf	___ftmul@exp,w,c
 12583  002B48  E101               	bnz	i2l3692
 12584  002B4A  D053               	goto	PL132	;call to abstracted procedure
 12585  002B4C                     i2l3692:
 12586  002B4C  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 12587  002B50  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12588  002B52  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12589  002B54  3411               	rlcf	___ftmul@f2+1,w,c
 12590  002B56  3613               	rlcf	??___ftmul& (0+255),f,c
 12591  002B58  E301               	bnc	u332_41
 12592  002B5A  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12593  002B5C                     u332_41:
 12594  002B5C  5013               	movf	??___ftmul,w,c
 12595  002B5E  6E1B               	movwf	___ftmul@sign,c
 12596  002B60  501B               	movf	___ftmul@sign,w,c
 12597  002B62  E101               	bnz	i2l3696
 12598  002B64  D046               	goto	PL132	;call to abstracted procedure
 12599  002B66                     i2l3696:
 12600  002B66  501B               	movf	___ftmul@sign,w,c
 12601  002B68  0F7B               	addlw	123
 12602  002B6A  2616               	addwf	___ftmul@exp,f,c
 12603  002B6C  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 12604  002B70  5012               	movf	___ftmul@f2+2,w,c
 12605  002B72  1A1B               	xorwf	___ftmul@sign,f,c
 12606  002B74  0E80               	movlw	128
 12607  002B76  161B               	andwf	___ftmul@sign,f,c
 12608  002B78  8E0E               	bsf	___ftmul@f1+1,7,c
 12609  002B7A  8E11               	bsf	___ftmul@f2+1,7,c
 12610  002B7C  0E00               	movlw	0
 12611  002B7E  1612               	andwf	___ftmul@f2+2,f,c
 12612  002B80  6A17               	clrf	___ftmul@f3_as_product,c
 12613  002B82  6A18               	clrf	___ftmul@f3_as_product+1,c
 12614  002B84  6A19               	clrf	___ftmul@f3_as_product+2,c
 12615  002B86  0E07               	movlw	7
 12616  002B88  6E1A               	movwf	___ftmul@cntr,c
 12617  002B8A                     i2l3710:
 12618  002B8A  B00D               	btfsc	___ftmul@f1,0,c
 12619  002B8C  D82B               	call	PL120	;call to abstracted procedure
 12620  002B8E                     i2l3714:
 12621  002B8E  90D8               	bcf	status,0,c
 12622  002B90  320F               	rrcf	___ftmul@f1+2,f,c
 12623  002B92  320E               	rrcf	___ftmul@f1+1,f,c
 12624  002B94  320D               	rrcf	___ftmul@f1,f,c
 12625  002B96  90D8               	bcf	status,0,c
 12626  002B98  3610               	rlcf	___ftmul@f2,f,c
 12627  002B9A  3611               	rlcf	___ftmul@f2+1,f,c
 12628  002B9C  3612               	rlcf	___ftmul@f2+2,f,c
 12629  002B9E  2E1A               	decfsz	___ftmul@cntr,f,c
 12630  002BA0  D7F4               	goto	i2l3710
 12631  002BA2  0E09               	movlw	9
 12632  002BA4  6E1A               	movwf	___ftmul@cntr,c
 12633  002BA6                     i2l3720:
 12634  002BA6  B00D               	btfsc	___ftmul@f1,0,c
 12635  002BA8  D81D               	call	PL120	;call to abstracted procedure
 12636  002BAA                     i2l3724:
 12637  002BAA  90D8               	bcf	status,0,c
 12638  002BAC  320F               	rrcf	___ftmul@f1+2,f,c
 12639  002BAE  320E               	rrcf	___ftmul@f1+1,f,c
 12640  002BB0  320D               	rrcf	___ftmul@f1,f,c
 12641  002BB2  90D8               	bcf	status,0,c
 12642  002BB4  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 12643  002BB6  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 12644  002BB8  3217               	rrcf	___ftmul@f3_as_product,f,c
 12645  002BBA  2E1A               	decfsz	___ftmul@cntr,f,c
 12646  002BBC  D7F4               	goto	i2l3720
 12647  002BBE  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 12648  002BC2  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12649  002BC6  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12650  002BCA  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 12651  002BCE  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 12652  002BD2  ECB4  F017         	call	___ftpack	;wreg free
 12653  002BD6  C001  F00D         	movff	?___ftpack,?___ftmul
 12654  002BDA  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 12655  002BDE  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 12656  002BE2  0012               	return		;funcret
 12657  002BE4                     __end_of___ftmul:
 12658                           	opt stack 0
 12659  002BE4                     PL120:
 12660                           	opt stack 18
 12661  002BE4  5010               	movf	___ftmul@f2,w,c
 12662  002BE6  2617               	addwf	___ftmul@f3_as_product,f,c
 12663  002BE8  5011               	movf	___ftmul@f2+1,w,c
 12664  002BEA  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12665  002BEC  5012               	movf	___ftmul@f2+2,w,c
 12666  002BEE  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12667  002BF0  0012               	return	
 12668  002BF2                     __end_ofPL120:
 12669                           	opt stack 0
 12670  002BF2                     PL132:
 12671                           	opt stack 18
 12672  002BF2  6A0D               	clrf	?___ftmul,c
 12673  002BF4  6A0E               	clrf	?___ftmul+1,c
 12674  002BF6  6A0F               	clrf	?___ftmul+2,c
 12675  002BF8  0012               	return	
 12676  002BFA                     __end_ofPL132:
 12677                           	opt stack 0
 12678                           tosu	equ	0xFFF
 12679                           tosh	equ	0xFFE
 12680                           tosl	equ	0xFFD
 12681                           pclatu	equ	0xFFB
 12682                           pclath	equ	0xFFA
 12683                           tblptru	equ	0xFF8
 12684                           tblptrh	equ	0xFF7
 12685                           tblptrl	equ	0xFF6
 12686                           tablat	equ	0xFF5
 12687                           prodh	equ	0xFF4
 12688                           prodl	equ	0xFF3
 12689                           intcon	equ	0xFF2
 12690                           postinc0	equ	0xFEE
 12691                           plusw0	equ	0xFEB
 12692                           fsr0h	equ	0xFEA
 12693                           fsr0l	equ	0xFE9
 12694                           wreg	equ	0xFE8
 12695                           indf1	equ	0xFE7
 12696                           postinc1	equ	0xFE6
 12697                           postdec1	equ	0xFE5
 12698                           plusw1	equ	0xFE3
 12699                           fsr1h	equ	0xFE2
 12700                           fsr1l	equ	0xFE1
 12701                           indf2	equ	0xFDF
 12702                           postinc2	equ	0xFDE
 12703                           postdec2	equ	0xFDD
 12704                           plusw2	equ	0xFDB
 12705                           fsr2h	equ	0xFDA
 12706                           fsr2l	equ	0xFD9
 12707                           status	equ	0xFD8
 12708                           
 12709 ;; *************** function ___ftpack *****************
 12710 ;; Defined at:
 12711 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  arg             3    0[COMRAM] unsigned um
 12714 ;;  exp             1    3[COMRAM] unsigned char 
 12715 ;;  sign            1    4[COMRAM] unsigned char 
 12716 ;; Auto vars:     Size  Location     Type
 12717 ;;		None
 12718 ;; Return value:  Size  Location     Type
 12719 ;;                  3    0[COMRAM] float 
 12720 ;; Registers used:
 12721 ;;		wreg, status,2, status,0
 12722 ;; Tracked objects:
 12723 ;;		On entry : 0/0
 12724 ;;		On exit  : 0/0
 12725 ;;		Unchanged: 0/0
 12726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12727 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12729 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12730 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12731 ;;Total ram usage:        8 bytes
 12732 ;; Hardware stack levels used:    1
 12733 ;; This function calls:
 12734 ;;		Nothing
 12735 ;; This function is called by:
 12736 ;;		___ftmul
 12737 ;;		___lbtoft
 12738 ;; This function uses a non-reentrant model
 12739 ;;
 12740                           
 12741                           	psect	text58
 12742  002F68                     __ptext58:
 12743                           	opt stack 0
 12744  002F68                     ___ftpack:
 12745                           	opt stack 18
 12746                           
 12747                           ;incstack = 0
 12748  002F68  5004               	movf	___ftpack@exp,w,c
 12749  002F6A  E004               	bz	i2l1393
 12750  002F6C  5001               	movf	___ftpack@arg,w,c
 12751  002F6E  1002               	iorwf	___ftpack@arg+1,w,c
 12752  002F70  1003               	iorwf	___ftpack@arg+2,w,c
 12753  002F72  E106               	bnz	i2l3480
 12754  002F74                     i2l1393:
 12755  002F74  6A01               	clrf	?___ftpack,c
 12756  002F76  6A02               	clrf	?___ftpack+1,c
 12757  002F78  6A03               	clrf	?___ftpack+2,c
 12758  002F7A  0012               	return	
 12759  002F7C                     i2l3478:
 12760  002F7C  2A04               	incf	___ftpack@exp,f,c
 12761  002F7E  D82D               	call	PL138	;call to abstracted procedure
 12762  002F80                     i2l3480:
 12763  002F80  6A06               	clrf	??___ftpack& (0+255),c
 12764  002F82  6A07               	clrf	(??___ftpack+1)& (0+255),c
 12765  002F84  0EFE               	movlw	254
 12766  002F86  1403               	andwf	___ftpack@arg+2,w,c
 12767  002F88  D82D               	call	PL142	;call to abstracted procedure
 12768  002F8A  E007               	bz	i2l3486
 12769  002F8C  D7F7               	goto	i2l3478
 12770  002F8E                     i2l3482:
 12771  002F8E  2A04               	incf	___ftpack@exp,f,c
 12772  002F90  2A01               	incf	___ftpack@arg,f,c
 12773  002F92  0E00               	movlw	0
 12774  002F94  2202               	addwfc	___ftpack@arg+1,f,c
 12775  002F96  2203               	addwfc	___ftpack@arg+2,f,c
 12776  002F98  D820               	call	PL138	;call to abstracted procedure
 12777  002F9A                     i2l3486:
 12778  002F9A  6A06               	clrf	??___ftpack& (0+255),c
 12779  002F9C  6A07               	clrf	(??___ftpack+1)& (0+255),c
 12780  002F9E  5003               	movf	___ftpack@arg+2,w,c
 12781  002FA0  D821               	call	PL142	;call to abstracted procedure
 12782  002FA2  E006               	bz	i2l3490
 12783  002FA4  D7F4               	goto	i2l3482
 12784  002FA6                     i2l3488:
 12785  002FA6  0604               	decf	___ftpack@exp,f,c
 12786  002FA8  90D8               	bcf	status,0,c
 12787  002FAA  3601               	rlcf	___ftpack@arg,f,c
 12788  002FAC  3602               	rlcf	___ftpack@arg+1,f,c
 12789  002FAE  3603               	rlcf	___ftpack@arg+2,f,c
 12790  002FB0                     i2l3490:
 12791  002FB0  BE02               	btfsc	___ftpack@arg+1,7,c
 12792  002FB2  D003               	goto	i2l1405
 12793  002FB4  0E02               	movlw	2
 12794  002FB6  6004               	cpfslt	___ftpack@exp,c
 12795  002FB8  D7F6               	goto	i2l3488
 12796  002FBA                     i2l1405:
 12797  002FBA  A004               	btfss	___ftpack@exp,0,c
 12798  002FBC  9E02               	bcf	___ftpack@arg+1,7,c
 12799  002FBE  90D8               	bcf	status,0,c
 12800  002FC0  3204               	rrcf	___ftpack@exp,f,c
 12801  002FC2  5004               	movf	___ftpack@exp,w,c
 12802  002FC4  1203               	iorwf	___ftpack@arg+2,f,c
 12803  002FC6  5005               	movf	___ftpack@sign,w,c
 12804  002FC8  E001               	bz	i2l3504
 12805  002FCA  8E03               	bsf	___ftpack@arg+2,7,c
 12806  002FCC                     i2l3504:
 12807  002FCC  C001  F001         	movff	___ftpack@arg,?___ftpack
 12808  002FD0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12809  002FD4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12810  002FD8  0012               	return		;funcret
 12811  002FDA                     __end_of___ftpack:
 12812                           	opt stack 0
 12813  002FDA                     PL138:
 12814                           	opt stack 18
 12815  002FDA  90D8               	bcf	status,0,c
 12816  002FDC  3203               	rrcf	___ftpack@arg+2,f,c
 12817  002FDE  3202               	rrcf	___ftpack@arg+1,f,c
 12818  002FE0  3201               	rrcf	___ftpack@arg,f,c
 12819  002FE2  0012               	return	
 12820  002FE4                     __end_ofPL138:
 12821                           	opt stack 0
 12822  002FE4                     PL142:
 12823                           	opt stack 18
 12824  002FE4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12825  002FE6  5006               	movf	??___ftpack,w,c
 12826  002FE8  1007               	iorwf	??___ftpack+1,w,c
 12827  002FEA  1008               	iorwf	??___ftpack+2,w,c
 12828  002FEC  0012               	return	
 12829  002FEE                     __end_ofPL142:
 12830                           	opt stack 0
 12831                           tosu	equ	0xFFF
 12832                           tosh	equ	0xFFE
 12833                           tosl	equ	0xFFD
 12834                           pclatu	equ	0xFFB
 12835                           pclath	equ	0xFFA
 12836                           tblptru	equ	0xFF8
 12837                           tblptrh	equ	0xFF7
 12838                           tblptrl	equ	0xFF6
 12839                           tablat	equ	0xFF5
 12840                           prodh	equ	0xFF4
 12841                           prodl	equ	0xFF3
 12842                           intcon	equ	0xFF2
 12843                           postinc0	equ	0xFEE
 12844                           plusw0	equ	0xFEB
 12845                           fsr0h	equ	0xFEA
 12846                           fsr0l	equ	0xFE9
 12847                           wreg	equ	0xFE8
 12848                           indf1	equ	0xFE7
 12849                           postinc1	equ	0xFE6
 12850                           postdec1	equ	0xFE5
 12851                           plusw1	equ	0xFE3
 12852                           fsr1h	equ	0xFE2
 12853                           fsr1l	equ	0xFE1
 12854                           indf2	equ	0xFDF
 12855                           postinc2	equ	0xFDE
 12856                           postdec2	equ	0xFDD
 12857                           plusw2	equ	0xFDB
 12858                           fsr2h	equ	0xFDA
 12859                           fsr2l	equ	0xFD9
 12860                           status	equ	0xFD8
 12861                           
 12862 ;; *************** function ___almod *****************
 12863 ;; Defined at:
 12864 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
 12865 ;; Parameters:    Size  Location     Type
 12866 ;;  dividend        4    0[COMRAM] long 
 12867 ;;  divisor         4    4[COMRAM] long 
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;  sign            1    9[COMRAM] unsigned char 
 12870 ;;  counter         1    8[COMRAM] unsigned char 
 12871 ;; Return value:  Size  Location     Type
 12872 ;;                  4    0[COMRAM] long 
 12873 ;; Registers used:
 12874 ;;		wreg, status,2, status,0
 12875 ;; Tracked objects:
 12876 ;;		On entry : 3F/0
 12877 ;;		On exit  : 3F/0
 12878 ;;		Unchanged: 3F/0
 12879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12880 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12881 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12883 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12884 ;;Total ram usage:       10 bytes
 12885 ;; Hardware stack levels used:    1
 12886 ;; This function calls:
 12887 ;;		Nothing
 12888 ;; This function is called by:
 12889 ;;		_Timer0_10ms
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           	psect	text59
 12894  002ECE                     __ptext59:
 12895                           	opt stack 0
 12896  002ECE                     ___almod:
 12897                           	opt stack 19
 12898                           
 12899                           ; BSR set to: 0
 12900                           
 12901                           ;incstack = 0
 12902  002ECE  6A0A               	clrf	___almod@sign,c
 12903                           
 12904                           ; BSR set to: 0
 12905  002ED0  AE04               	btfss	___almod@dividend+3,7,c
 12906  002ED2  D003               	goto	i2l3660
 12907                           
 12908                           ; BSR set to: 0
 12909  002ED4  D840               	call	PL88	;call to abstracted procedure
 12910                           
 12911                           ; BSR set to: 0
 12912  002ED6  0E01               	movlw	1
 12913  002ED8  6E0A               	movwf	___almod@sign,c
 12914  002EDA                     i2l3660:
 12915                           
 12916                           ; BSR set to: 0
 12917  002EDA  AE08               	btfss	___almod@divisor+3,7,c
 12918  002EDC  D008               	goto	i2l3664
 12919                           
 12920                           ; BSR set to: 0
 12921  002EDE  1E08               	comf	___almod@divisor+3,f,c
 12922  002EE0  1E07               	comf	___almod@divisor+2,f,c
 12923  002EE2  1E06               	comf	___almod@divisor+1,f,c
 12924  002EE4  6C05               	negf	___almod@divisor,c
 12925  002EE6  0E00               	movlw	0
 12926  002EE8  2206               	addwfc	___almod@divisor+1,f,c
 12927  002EEA  2207               	addwfc	___almod@divisor+2,f,c
 12928  002EEC  2208               	addwfc	___almod@divisor+3,f,c
 12929  002EEE                     i2l3664:
 12930                           
 12931                           ; BSR set to: 0
 12932  002EEE  5005               	movf	___almod@divisor,w,c
 12933  002EF0  1006               	iorwf	___almod@divisor+1,w,c
 12934  002EF2  1007               	iorwf	___almod@divisor+2,w,c
 12935  002EF4  1008               	iorwf	___almod@divisor+3,w,c
 12936  002EF6  E023               	bz	i2l3680
 12937                           
 12938                           ; BSR set to: 0
 12939  002EF8  0E01               	movlw	1
 12940  002EFA  6E09               	movwf	___almod@counter,c
 12941  002EFC  D006               	goto	i2l3670
 12942  002EFE                     i2l3668:
 12943                           
 12944                           ; BSR set to: 0
 12945  002EFE  90D8               	bcf	status,0,c
 12946  002F00  3605               	rlcf	___almod@divisor,f,c
 12947  002F02  3606               	rlcf	___almod@divisor+1,f,c
 12948  002F04  3607               	rlcf	___almod@divisor+2,f,c
 12949  002F06  3608               	rlcf	___almod@divisor+3,f,c
 12950  002F08  2A09               	incf	___almod@counter,f,c
 12951  002F0A                     i2l3670:
 12952                           
 12953                           ; BSR set to: 0
 12954  002F0A  AE08               	btfss	___almod@divisor+3,7,c
 12955  002F0C  D7F8               	goto	i2l3668
 12956  002F0E                     i2l3672:
 12957                           
 12958                           ; BSR set to: 0
 12959  002F0E  5005               	movf	___almod@divisor,w,c
 12960  002F10  5C01               	subwf	___almod@dividend,w,c
 12961  002F12  5006               	movf	___almod@divisor+1,w,c
 12962  002F14  5802               	subwfb	___almod@dividend+1,w,c
 12963  002F16  5007               	movf	___almod@divisor+2,w,c
 12964  002F18  5803               	subwfb	___almod@dividend+2,w,c
 12965  002F1A  5008               	movf	___almod@divisor+3,w,c
 12966  002F1C  5804               	subwfb	___almod@dividend+3,w,c
 12967  002F1E  E308               	bnc	i2l3676
 12968                           
 12969                           ; BSR set to: 0
 12970  002F20  5005               	movf	___almod@divisor,w,c
 12971  002F22  5E01               	subwf	___almod@dividend,f,c
 12972  002F24  5006               	movf	___almod@divisor+1,w,c
 12973  002F26  5A02               	subwfb	___almod@dividend+1,f,c
 12974  002F28  5007               	movf	___almod@divisor+2,w,c
 12975  002F2A  5A03               	subwfb	___almod@dividend+2,f,c
 12976  002F2C  5008               	movf	___almod@divisor+3,w,c
 12977  002F2E  5A04               	subwfb	___almod@dividend+3,f,c
 12978  002F30                     i2l3676:
 12979                           
 12980                           ; BSR set to: 0
 12981  002F30  90D8               	bcf	status,0,c
 12982  002F32  3208               	rrcf	___almod@divisor+3,f,c
 12983  002F34  3207               	rrcf	___almod@divisor+2,f,c
 12984  002F36  3206               	rrcf	___almod@divisor+1,f,c
 12985  002F38  3205               	rrcf	___almod@divisor,f,c
 12986                           
 12987                           ; BSR set to: 0
 12988  002F3A  2E09               	decfsz	___almod@counter,f,c
 12989  002F3C  D7E8               	goto	i2l3672
 12990  002F3E                     i2l3680:
 12991                           
 12992                           ; BSR set to: 0
 12993  002F3E  500A               	movf	___almod@sign,w,c
 12994  002F40  E001               	bz	i2l3684
 12995                           
 12996                           ; BSR set to: 0
 12997  002F42  D809               	call	PL88	;call to abstracted procedure
 12998  002F44                     i2l3684:
 12999                           
 13000                           ; BSR set to: 0
 13001  002F44  C001  F001         	movff	___almod@dividend,?___almod
 13002  002F48  C002  F002         	movff	___almod@dividend+1,?___almod+1
 13003  002F4C  C003  F003         	movff	___almod@dividend+2,?___almod+2
 13004  002F50  C004  F004         	movff	___almod@dividend+3,?___almod+3
 13005                           
 13006                           ; BSR set to: 0
 13007  002F54  0012               	return		;funcret
 13008  002F56                     __end_of___almod:
 13009                           	opt stack 0
 13010  002F56                     PL88:
 13011                           	opt stack 19
 13012  002F56  1E04               	comf	___almod@dividend+3,f,c
 13013  002F58  1E03               	comf	___almod@dividend+2,f,c
 13014  002F5A  1E02               	comf	___almod@dividend+1,f,c
 13015  002F5C  6C01               	negf	___almod@dividend,c
 13016  002F5E  0E00               	movlw	0
 13017  002F60  2202               	addwfc	___almod@dividend+1,f,c
 13018  002F62  2203               	addwfc	___almod@dividend+2,f,c
 13019  002F64  2204               	addwfc	___almod@dividend+3,f,c
 13020  002F66  0C00               	retlw	0
 13021  002F68                     __end_ofPL88:
 13022                           	opt stack 0
 13023                           tosu	equ	0xFFF
 13024                           tosh	equ	0xFFE
 13025                           tosl	equ	0xFFD
 13026                           pclatu	equ	0xFFB
 13027                           pclath	equ	0xFFA
 13028                           tblptru	equ	0xFF8
 13029                           tblptrh	equ	0xFF7
 13030                           tblptrl	equ	0xFF6
 13031                           tablat	equ	0xFF5
 13032                           prodh	equ	0xFF4
 13033                           prodl	equ	0xFF3
 13034                           intcon	equ	0xFF2
 13035                           postinc0	equ	0xFEE
 13036                           plusw0	equ	0xFEB
 13037                           fsr0h	equ	0xFEA
 13038                           fsr0l	equ	0xFE9
 13039                           wreg	equ	0xFE8
 13040                           indf1	equ	0xFE7
 13041                           postinc1	equ	0xFE6
 13042                           postdec1	equ	0xFE5
 13043                           plusw1	equ	0xFE3
 13044                           fsr1h	equ	0xFE2
 13045                           fsr1l	equ	0xFE1
 13046                           indf2	equ	0xFDF
 13047                           postinc2	equ	0xFDE
 13048                           postdec2	equ	0xFDD
 13049                           plusw2	equ	0xFDB
 13050                           fsr2h	equ	0xFDA
 13051                           fsr2l	equ	0xFD9
 13052                           status	equ	0xFD8
 13053                           
 13054 ;; *************** function _IncreaseByASecond *****************
 13055 ;; Defined at:
 13056 ;;		line 3 in file "libs/funcs.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;		None
 13061 ;; Return value:  Size  Location     Type
 13062 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
 13063 ;; Registers used:
 13064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13065 ;; Tracked objects:
 13066 ;;		On entry : 3F/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13070 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13073 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13074 ;;Total ram usage:       11 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:    4
 13077 ;; This function calls:
 13078 ;;		i2_IncreaseByADay
 13079 ;; This function is called by:
 13080 ;;		_Timer0_10ms
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           	psect	text60
 13085  00319A                     __ptext60:
 13086                           	opt stack 0
 13087  00319A                     _IncreaseByASecond:
 13088                           	opt stack 15
 13089                           
 13090                           ; BSR set to: 0
 13091                           ;funcs.c: 4: dt.SECOND++;
 13092                           
 13093                           ; BSR set to: 0
 13094                           ;incstack = 0
 13095  00319A  2A2A               	incf	IncreaseByASecond@dt,f,c
 13096  00319C  0E00               	movlw	0
 13097  00319E  222B               	addwfc	IncreaseByASecond@dt+1,f,c
 13098  0031A0  222C               	addwfc	IncreaseByASecond@dt+2,f,c
 13099  0031A2  222D               	addwfc	IncreaseByASecond@dt+3,f,c
 13100                           
 13101                           ;funcs.c: 5: if (dt.SECOND == 86400) {
 13102  0031A4  0E80               	movlw	128
 13103  0031A6  182A               	xorwf	IncreaseByASecond@dt,w,c
 13104  0031A8  E11C               	bnz	i2l3562
 13105  0031AA  0E51               	movlw	81
 13106  0031AC  182B               	xorwf	IncreaseByASecond@dt+1,w,c
 13107  0031AE  E119               	bnz	i2l3562
 13108  0031B0  042C               	decf	IncreaseByASecond@dt+2,w,c
 13109  0031B2  102D               	iorwf	IncreaseByASecond@dt+3,w,c
 13110  0031B4  E116               	bnz	i2l3562
 13111                           
 13112                           ; BSR set to: 0
 13113                           ;funcs.c: 6: dt.SECOND = 0;
 13114  0031B6  6A2A               	clrf	IncreaseByASecond@dt,c
 13115  0031B8  6A2B               	clrf	IncreaseByASecond@dt+1,c
 13116  0031BA  6A2C               	clrf	IncreaseByASecond@dt+2,c
 13117  0031BC  6A2D               	clrf	IncreaseByASecond@dt+3,c
 13118                           
 13119                           ; BSR set to: 0
 13120                           ;funcs.c: 7: dt = IncreaseByADay(dt);
 13121  0031BE  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 13122  0031C2  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
 13123  0031C6  0E0A               	movlw	10
 13124  0031C8                     i2u297_41:
 13125  0031C8  CFDB FFEB          	movff	plusw2,plusw0
 13126  0031CC  06E8               	decf	wreg,f,c
 13127  0031CE  E2FC               	bc	i2u297_41
 13128  0031D0  EC06  F013         	call	i2_IncreaseByADay	;wreg free
 13129  0031D4  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 13130  0031D8  0E0A               	movlw	10
 13131  0031DA                     i2u298_41:
 13132  0031DA  CFEB FFDB          	movff	plusw0,plusw2
 13133  0031DE  06E8               	decf	wreg,f,c
 13134  0031E0  E2FC               	bc	i2u298_41
 13135  0031E2                     i2l3562:
 13136                           
 13137                           ;funcs.c: 8: }
 13138                           ;funcs.c: 9: return dt;
 13139  0031E2  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 13140  0031E6  EE00  F02A         	lfsr	0,?_IncreaseByASecond
 13141  0031EA  0E0A               	movlw	10
 13142  0031EC                     i2u299_41:
 13143  0031EC  CFDB FFEB          	movff	plusw2,plusw0
 13144  0031F0  06E8               	decf	wreg,f,c
 13145  0031F2  E2FC               	bc	i2u299_41
 13146  0031F4  0012               	return		;funcret
 13147  0031F6                     __end_of_IncreaseByASecond:
 13148                           	opt stack 0
 13149                           tosu	equ	0xFFF
 13150                           tosh	equ	0xFFE
 13151                           tosl	equ	0xFFD
 13152                           pclatu	equ	0xFFB
 13153                           pclath	equ	0xFFA
 13154                           tblptru	equ	0xFF8
 13155                           tblptrh	equ	0xFF7
 13156                           tblptrl	equ	0xFF6
 13157                           tablat	equ	0xFF5
 13158                           prodh	equ	0xFF4
 13159                           prodl	equ	0xFF3
 13160                           intcon	equ	0xFF2
 13161                           postinc0	equ	0xFEE
 13162                           plusw0	equ	0xFEB
 13163                           fsr0h	equ	0xFEA
 13164                           fsr0l	equ	0xFE9
 13165                           wreg	equ	0xFE8
 13166                           indf1	equ	0xFE7
 13167                           postinc1	equ	0xFE6
 13168                           postdec1	equ	0xFE5
 13169                           plusw1	equ	0xFE3
 13170                           fsr1h	equ	0xFE2
 13171                           fsr1l	equ	0xFE1
 13172                           indf2	equ	0xFDF
 13173                           postinc2	equ	0xFDE
 13174                           postdec2	equ	0xFDD
 13175                           plusw2	equ	0xFDB
 13176                           fsr2h	equ	0xFDA
 13177                           fsr2l	equ	0xFD9
 13178                           status	equ	0xFD8
 13179                           
 13180 ;; *************** function i2_IncreaseByADay *****************
 13181 ;; Defined at:
 13182 ;;		line 12 in file "libs/funcs.c"
 13183 ;; Parameters:    Size  Location     Type
 13184 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
 13185 ;; Auto vars:     Size  Location     Type
 13186 ;;  IncreaseByAD    1   40[COMRAM] char 
 13187 ;; Return value:  Size  Location     Type
 13188 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
 13189 ;; Registers used:
 13190 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13191 ;; Tracked objects:
 13192 ;;		On entry : 3F/0
 13193 ;;		On exit  : 0/0
 13194 ;;		Unchanged: 0/0
 13195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13196 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13199 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13200 ;;Total ram usage:       14 bytes
 13201 ;; Hardware stack levels used:    1
 13202 ;; Hardware stack levels required when called:    3
 13203 ;; This function calls:
 13204 ;;		i2_IncreaseByAMonth
 13205 ;;		i2___lwmod
 13206 ;; This function is called by:
 13207 ;;		_IncreaseByASecond
 13208 ;; This function uses a non-reentrant model
 13209 ;;
 13210                           
 13211                           	psect	text61
 13212  00260C                     __ptext61:
 13213                           	opt stack 0
 13214  00260C                     i2_IncreaseByADay:
 13215                           	opt stack 15
 13216                           
 13217                           ; BSR set to: 0
 13218                           ;funcs.c: 13: dt.DATE.Day++;
 13219                           
 13220                           ;incstack = 0
 13221  00260C  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
 13222  00260E  2A21               	incf	i2IncreaseByADay@dt+5,f,c
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
 13226  002610  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 13227  002612  0B7F               	andlw	127
 13228  002614  06E8               	decf	wreg,f,c
 13229  002616  E104               	bnz	i2l3514
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;funcs.c: 15: dt.DAY.Val = 0x40;
 13233  002618  5024               	movf	i2IncreaseByADay@dt+8,w,c
 13234  00261A  0B01               	andlw	-255
 13235  00261C  0980               	iorlw	128
 13236  00261E  D00A               	goto	L10
 13237  002620                     i2l3514:
 13238                           
 13239                           ; BSR set to: 0
 13240                           ;funcs.c: 16: else
 13241                           ;funcs.c: 17: dt.DAY.Val >>= 1;
 13242  002620  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 13243  002622  0B7F               	andlw	127
 13244  002624  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
 13245  002626  90D8               	bcf	status,0,c
 13246  002628  3227               	rrcf	??i2_IncreaseByADay,f,c
 13247  00262A  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
 13248  00262C  5024               	movf	i2IncreaseByADay@dt+8,w,c
 13249  00262E  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 13250  002630  0B01               	andlw	-255
 13251  002632  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 13252  002634                     L10:
 13253  002634  6E24               	movwf	i2IncreaseByADay@dt+8,c
 13254                           
 13255                           ; BSR set to: 0
 13256                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
 13257  002636  90D8               	bcf	status,0,c
 13258  002638  3422               	rlcf	i2IncreaseByADay@dt+6,w,c
 13259  00263A  6ED9               	movwf	fsr2l,c
 13260  00263C  3423               	rlcf	i2IncreaseByADay@dt+7,w,c
 13261  00263E  EC7F  F012         	call	PL82	;call to abstracted procedure
 13262  002642  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13263                           
 13264                           ; BSR set to: 0
 13265                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
 13266  002644  0E02               	movlw	2
 13267  002646  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 13268  002648  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 13269  00264A  E107               	bnz	i2l3524
 13270                           
 13271                           ; BSR set to: 0
 13272  00264C  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
 13273  002650  0E03               	movlw	3
 13274  002652  1627               	andwf	??i2_IncreaseByADay,f,c
 13275  002654  E102               	bnz	i2l3524
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;funcs.c: 20: MonthDays = 29;
 13279  002656  0E1D               	movlw	29
 13280  002658  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13281  00265A                     i2l3524:
 13282                           
 13283                           ; BSR set to: 0
 13284                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
 13285  00265A  0E02               	movlw	2
 13286  00265C  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 13287  00265E  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 13288  002660  E10A               	bnz	i2l3530
 13289                           
 13290                           ; BSR set to: 0
 13291  002662  D842               	call	PL136	;call to abstracted procedure
 13292  002664  EC66  F01A         	call	PL160	;call to abstracted procedure
 13293  002668  EC13  F01A         	call	i2___lwmod	;wreg free
 13294  00266C  5001               	movf	?i2___lwmod,w,c
 13295  00266E  1002               	iorwf	?i2___lwmod+1,w,c
 13296  002670  E102               	bnz	i2l3530
 13297                           
 13298                           ;funcs.c: 22: MonthDays = 28;
 13299  002672  0E1C               	movlw	28
 13300  002674  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13301  002676                     i2l3530:
 13302                           
 13303                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
 13304  002676  0E02               	movlw	2
 13305  002678  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 13306  00267A  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 13307  00267C  E10C               	bnz	i2l3536
 13308  00267E  D834               	call	PL136	;call to abstracted procedure
 13309  002680  0E01               	movlw	1
 13310  002682  6E04               	movwf	i2___lwmod@divisor+1,c
 13311  002684  0E90               	movlw	144
 13312  002686  6E03               	movwf	i2___lwmod@divisor,c
 13313  002688  EC13  F01A         	call	i2___lwmod	;wreg free
 13314  00268C  5001               	movf	?i2___lwmod,w,c
 13315  00268E  1002               	iorwf	?i2___lwmod+1,w,c
 13316  002690  E102               	bnz	i2l3536
 13317                           
 13318                           ;funcs.c: 24: MonthDays = 29;
 13319  002692  0E1D               	movlw	29
 13320  002694  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13321  002696                     i2l3536:
 13322                           
 13323                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
 13324  002696  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
 13325  00269A  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
 13326  00269C  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
 13327  00269E  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
 13328  0026A0  5020               	movf	i2IncreaseByADay@dt+4,w,c
 13329  0026A2  5C27               	subwf	??i2_IncreaseByADay,w,c
 13330  0026A4  5021               	movf	i2IncreaseByADay@dt+5,w,c
 13331  0026A6  5828               	subwfb	??i2_IncreaseByADay+1,w,c
 13332  0026A8  E215               	bc	i2l3542
 13333                           
 13334                           ;funcs.c: 26: dt.DATE.Day = 1;
 13335  0026AA  6A21               	clrf	i2IncreaseByADay@dt+5,c
 13336  0026AC  0E01               	movlw	1
 13337  0026AE  6E20               	movwf	i2IncreaseByADay@dt+4,c
 13338                           
 13339                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
 13340  0026B0  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 13341  0026B4  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
 13342  0026B8  0E0A               	movlw	10
 13343  0026BA                     i2u291_41:
 13344  0026BA  CFDB FFEB          	movff	plusw2,plusw0
 13345  0026BE  06E8               	decf	wreg,f,c
 13346  0026C0  E2FC               	bc	i2u291_41
 13347  0026C2  EC6C  F019         	call	i2_IncreaseByAMonth	;wreg free
 13348  0026C6  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 13349  0026CA  0E0A               	movlw	10
 13350  0026CC                     i2u292_41:
 13351  0026CC  CFEB FFDB          	movff	plusw0,plusw2
 13352  0026D0  06E8               	decf	wreg,f,c
 13353  0026D2  E2FC               	bc	i2u292_41
 13354  0026D4                     i2l3542:
 13355                           
 13356                           ;funcs.c: 28: }
 13357                           ;funcs.c: 29: return dt;
 13358  0026D4  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 13359  0026D8  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
 13360  0026DC  0E0A               	movlw	10
 13361  0026DE                     i2u293_41:
 13362  0026DE  CFDB FFEB          	movff	plusw2,plusw0
 13363  0026E2  06E8               	decf	wreg,f,c
 13364  0026E4  E2FC               	bc	i2u293_41
 13365  0026E6  0012               	return		;funcret
 13366  0026E8                     __end_ofi2_IncreaseByADay:
 13367                           	opt stack 0
 13368  0026E8                     PL136:
 13369                           	opt stack 15
 13370  0026E8  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
 13371  0026EC  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
 13372  0026F0  0012               	return	
 13373  0026F2                     __end_ofPL136:
 13374                           	opt stack 0
 13375                           tosu	equ	0xFFF
 13376                           tosh	equ	0xFFE
 13377                           tosl	equ	0xFFD
 13378                           pclatu	equ	0xFFB
 13379                           pclath	equ	0xFFA
 13380                           tblptru	equ	0xFF8
 13381                           tblptrh	equ	0xFF7
 13382                           tblptrl	equ	0xFF6
 13383                           tablat	equ	0xFF5
 13384                           prodh	equ	0xFF4
 13385                           prodl	equ	0xFF3
 13386                           intcon	equ	0xFF2
 13387                           postinc0	equ	0xFEE
 13388                           plusw0	equ	0xFEB
 13389                           fsr0h	equ	0xFEA
 13390                           fsr0l	equ	0xFE9
 13391                           wreg	equ	0xFE8
 13392                           indf1	equ	0xFE7
 13393                           postinc1	equ	0xFE6
 13394                           postdec1	equ	0xFE5
 13395                           plusw1	equ	0xFE3
 13396                           fsr1h	equ	0xFE2
 13397                           fsr1l	equ	0xFE1
 13398                           indf2	equ	0xFDF
 13399                           postinc2	equ	0xFDE
 13400                           postdec2	equ	0xFDD
 13401                           plusw2	equ	0xFDB
 13402                           fsr2h	equ	0xFDA
 13403                           fsr2l	equ	0xFD9
 13404                           status	equ	0xFD8
 13405                           
 13406 ;; *************** function i2_IncreaseByAMonth *****************
 13407 ;; Defined at:
 13408 ;;		line 32 in file "libs/funcs.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;		None
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
 13415 ;; Registers used:
 13416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13422 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13425 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13426 ;;Total ram usage:       11 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    2
 13429 ;; This function calls:
 13430 ;;		i2_IncreaseByAYear
 13431 ;; This function is called by:
 13432 ;;		i2_IncreaseByADay
 13433 ;; This function uses a non-reentrant model
 13434 ;;
 13435                           
 13436                           	psect	text62
 13437  0032D8                     __ptext62:
 13438                           	opt stack 0
 13439  0032D8                     i2_IncreaseByAMonth:
 13440                           	opt stack 15
 13441                           
 13442                           ;funcs.c: 33: dt.DATE.Month++;
 13443                           
 13444                           ;incstack = 0
 13445  0032D8  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
 13446  0032DA  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
 13447                           
 13448                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
 13449  0032DC  0E0D               	movlw	13
 13450  0032DE  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
 13451  0032E0  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
 13452  0032E2  E115               	bnz	i2l3446
 13453                           
 13454                           ;funcs.c: 35: dt.DATE.Month = 1;
 13455  0032E4  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
 13456  0032E6  0E01               	movlw	1
 13457  0032E8  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
 13458                           
 13459                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
 13460  0032EA  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 13461  0032EE  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
 13462  0032F2  0E0A               	movlw	10
 13463  0032F4                     i2u264_41:
 13464  0032F4  CFDB FFEB          	movff	plusw2,plusw0
 13465  0032F8  06E8               	decf	wreg,f,c
 13466  0032FA  E2FC               	bc	i2u264_41
 13467  0032FC  EC4E  F01A         	call	i2_IncreaseByAYear	;wreg free
 13468  003300  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 13469  003304  0E0A               	movlw	10
 13470  003306                     i2u265_41:
 13471  003306  CFEB FFDB          	movff	plusw0,plusw2
 13472  00330A  06E8               	decf	wreg,f,c
 13473  00330C  E2FC               	bc	i2u265_41
 13474  00330E                     i2l3446:
 13475                           
 13476                           ;funcs.c: 37: }
 13477                           ;funcs.c: 38: return dt;
 13478  00330E  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 13479  003312  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
 13480  003316  0E0A               	movlw	10
 13481  003318                     i2u266_41:
 13482  003318  CFDB FFEB          	movff	plusw2,plusw0
 13483  00331C  06E8               	decf	wreg,f,c
 13484  00331E  E2FC               	bc	i2u266_41
 13485  003320  0012               	return		;funcret
 13486  003322                     __end_ofi2_IncreaseByAMonth:
 13487                           	opt stack 0
 13488                           tosu	equ	0xFFF
 13489                           tosh	equ	0xFFE
 13490                           tosl	equ	0xFFD
 13491                           pclatu	equ	0xFFB
 13492                           pclath	equ	0xFFA
 13493                           tblptru	equ	0xFF8
 13494                           tblptrh	equ	0xFF7
 13495                           tblptrl	equ	0xFF6
 13496                           tablat	equ	0xFF5
 13497                           prodh	equ	0xFF4
 13498                           prodl	equ	0xFF3
 13499                           intcon	equ	0xFF2
 13500                           postinc0	equ	0xFEE
 13501                           plusw0	equ	0xFEB
 13502                           fsr0h	equ	0xFEA
 13503                           fsr0l	equ	0xFE9
 13504                           wreg	equ	0xFE8
 13505                           indf1	equ	0xFE7
 13506                           postinc1	equ	0xFE6
 13507                           postdec1	equ	0xFE5
 13508                           plusw1	equ	0xFE3
 13509                           fsr1h	equ	0xFE2
 13510                           fsr1l	equ	0xFE1
 13511                           indf2	equ	0xFDF
 13512                           postinc2	equ	0xFDE
 13513                           postdec2	equ	0xFDD
 13514                           plusw2	equ	0xFDB
 13515                           fsr2h	equ	0xFDA
 13516                           fsr2l	equ	0xFD9
 13517                           status	equ	0xFD8
 13518                           
 13519 ;; *************** function i2_IncreaseByAYear *****************
 13520 ;; Defined at:
 13521 ;;		line 41 in file "libs/funcs.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;		None
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
 13528 ;; Registers used:
 13529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13535 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13538 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13539 ;;Total ram usage:       11 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    1
 13542 ;; This function calls:
 13543 ;;		i2___lwmod
 13544 ;; This function is called by:
 13545 ;;		i2_IncreaseByAMonth
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           	psect	text63
 13550  00349C                     __ptext63:
 13551                           	opt stack 0
 13552  00349C                     i2_IncreaseByAYear:
 13553                           	opt stack 15
 13554                           
 13555                           ;funcs.c: 42: dt.YEAR++;
 13556                           
 13557                           ;incstack = 0
 13558  00349C  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
 13559  00349E  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
 13560                           
 13561                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
 13562  0034A0  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
 13563  0034A4  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
 13564  0034A8  D811               	call	PL160	;call to abstracted procedure
 13565  0034AA  EC13  F01A         	call	i2___lwmod	;wreg free
 13566  0034AE  5001               	movf	?i2___lwmod,w,c
 13567  0034B0  1002               	iorwf	?i2___lwmod+1,w,c
 13568  0034B2  E102               	bnz	i2l3416
 13569                           
 13570                           ;funcs.c: 44: CENTURY++;
 13571  0034B4  0100               	movlb	0	; () banked
 13572  0034B6  2BFE               	incf	_CENTURY& (0+255),f,b
 13573  0034B8                     i2l3416:
 13574                           
 13575                           ;funcs.c: 45: return dt;
 13576  0034B8  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
 13577  0034BC  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
 13578  0034C0  0E0A               	movlw	10
 13579  0034C2                     i2u258_41:
 13580  0034C2  CFDB FFEB          	movff	plusw2,plusw0
 13581  0034C6  06E8               	decf	wreg,f,c
 13582  0034C8  E2FC               	bc	i2u258_41
 13583  0034CA  0012               	return		;funcret
 13584  0034CC                     __end_ofi2_IncreaseByAYear:
 13585                           	opt stack 0
 13586  0034CC                     PL160:
 13587                           	opt stack 15
 13588  0034CC  6A04               	clrf	i2___lwmod@divisor+1,c
 13589  0034CE  0E64               	movlw	100
 13590  0034D0  6E03               	movwf	i2___lwmod@divisor,c
 13591  0034D2  0C64               	retlw	100
 13592  0034D4                     __end_ofPL160:
 13593                           	opt stack 0
 13594                           tosu	equ	0xFFF
 13595                           tosh	equ	0xFFE
 13596                           tosl	equ	0xFFD
 13597                           pclatu	equ	0xFFB
 13598                           pclath	equ	0xFFA
 13599                           tblptru	equ	0xFF8
 13600                           tblptrh	equ	0xFF7
 13601                           tblptrl	equ	0xFF6
 13602                           tablat	equ	0xFF5
 13603                           prodh	equ	0xFF4
 13604                           prodl	equ	0xFF3
 13605                           intcon	equ	0xFF2
 13606                           postinc0	equ	0xFEE
 13607                           plusw0	equ	0xFEB
 13608                           fsr0h	equ	0xFEA
 13609                           fsr0l	equ	0xFE9
 13610                           wreg	equ	0xFE8
 13611                           indf1	equ	0xFE7
 13612                           postinc1	equ	0xFE6
 13613                           postdec1	equ	0xFE5
 13614                           plusw1	equ	0xFE3
 13615                           fsr1h	equ	0xFE2
 13616                           fsr1l	equ	0xFE1
 13617                           indf2	equ	0xFDF
 13618                           postinc2	equ	0xFDE
 13619                           postdec2	equ	0xFDD
 13620                           plusw2	equ	0xFDB
 13621                           fsr2h	equ	0xFDA
 13622                           fsr2l	equ	0xFD9
 13623                           status	equ	0xFD8
 13624                           
 13625 ;; *************** function i2___lwmod *****************
 13626 ;; Defined at:
 13627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;  dividend        2    0[COMRAM] unsigned int 
 13630 ;;  divisor         2    2[COMRAM] unsigned int 
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13633 ;; Return value:  Size  Location     Type
 13634 ;;                  2    0[COMRAM] unsigned int 
 13635 ;; Registers used:
 13636 ;;		wreg, status,2, status,0
 13637 ;; Tracked objects:
 13638 ;;		On entry : 0/0
 13639 ;;		On exit  : 0/0
 13640 ;;		Unchanged: 0/0
 13641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13642 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13645 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13646 ;;Total ram usage:        5 bytes
 13647 ;; Hardware stack levels used:    1
 13648 ;; This function calls:
 13649 ;;		Nothing
 13650 ;; This function is called by:
 13651 ;;		i2_IncreaseByADay
 13652 ;;		i2_IncreaseByAYear
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           	psect	text64
 13657  003426                     __ptext64:
 13658                           	opt stack 0
 13659  003426                     i2___lwmod:
 13660                           	opt stack 17
 13661                           
 13662                           ;incstack = 0
 13663  003426  5003               	movf	i2___lwmod@divisor,w,c
 13664  003428  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13665  00342A  E017               	bz	i2l1593
 13666  00342C  0E01               	movlw	1
 13667  00342E  6E05               	movwf	i2___lwmod@counter,c
 13668  003430  D004               	goto	i2l3384
 13669  003432                     i2l3382:
 13670  003432  90D8               	bcf	status,0,c
 13671  003434  3603               	rlcf	i2___lwmod@divisor,f,c
 13672  003436  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13673  003438  2A05               	incf	i2___lwmod@counter,f,c
 13674  00343A                     i2l3384:
 13675  00343A  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13676  00343C  D7FA               	goto	i2l3382
 13677  00343E                     i2l3386:
 13678  00343E  5003               	movf	i2___lwmod@divisor,w,c
 13679  003440  5C01               	subwf	i2___lwmod@dividend,w,c
 13680  003442  5004               	movf	i2___lwmod@divisor+1,w,c
 13681  003444  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13682  003446  E304               	bnc	i2l3390
 13683  003448  5003               	movf	i2___lwmod@divisor,w,c
 13684  00344A  5E01               	subwf	i2___lwmod@dividend,f,c
 13685  00344C  5004               	movf	i2___lwmod@divisor+1,w,c
 13686  00344E  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13687  003450                     i2l3390:
 13688  003450  90D8               	bcf	status,0,c
 13689  003452  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13690  003454  3203               	rrcf	i2___lwmod@divisor,f,c
 13691  003456  2E05               	decfsz	i2___lwmod@counter,f,c
 13692  003458  D7F2               	goto	i2l3386
 13693  00345A                     i2l1593:
 13694  00345A  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13695  00345E  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13696  003462  0012               	return		;funcret
 13697  003464                     __end_ofi2___lwmod:
 13698                           	opt stack 0
 13699                           tosu	equ	0xFFF
 13700                           tosh	equ	0xFFE
 13701                           tosl	equ	0xFFD
 13702                           pclatu	equ	0xFFB
 13703                           pclath	equ	0xFFA
 13704                           tblptru	equ	0xFF8
 13705                           tblptrh	equ	0xFF7
 13706                           tblptrl	equ	0xFF6
 13707                           tablat	equ	0xFF5
 13708                           prodh	equ	0xFF4
 13709                           prodl	equ	0xFF3
 13710                           intcon	equ	0xFF2
 13711                           postinc0	equ	0xFEE
 13712                           plusw0	equ	0xFEB
 13713                           fsr0h	equ	0xFEA
 13714                           fsr0l	equ	0xFE9
 13715                           wreg	equ	0xFE8
 13716                           indf1	equ	0xFE7
 13717                           postinc1	equ	0xFE6
 13718                           postdec1	equ	0xFE5
 13719                           plusw1	equ	0xFE3
 13720                           fsr1h	equ	0xFE2
 13721                           fsr1l	equ	0xFE1
 13722                           indf2	equ	0xFDF
 13723                           postinc2	equ	0xFDE
 13724                           postdec2	equ	0xFDD
 13725                           plusw2	equ	0xFDB
 13726                           fsr2h	equ	0xFDA
 13727                           fsr2l	equ	0xFD9
 13728                           status	equ	0xFD8
 13729                           tosu	equ	0xFFF
 13730                           tosh	equ	0xFFE
 13731                           tosl	equ	0xFFD
 13732                           pclatu	equ	0xFFB
 13733                           pclath	equ	0xFFA
 13734                           tblptru	equ	0xFF8
 13735                           tblptrh	equ	0xFF7
 13736                           tblptrl	equ	0xFF6
 13737                           tablat	equ	0xFF5
 13738                           prodh	equ	0xFF4
 13739                           prodl	equ	0xFF3
 13740                           intcon	equ	0xFF2
 13741                           postinc0	equ	0xFEE
 13742                           plusw0	equ	0xFEB
 13743                           fsr0h	equ	0xFEA
 13744                           fsr0l	equ	0xFE9
 13745                           wreg	equ	0xFE8
 13746                           indf1	equ	0xFE7
 13747                           postinc1	equ	0xFE6
 13748                           postdec1	equ	0xFE5
 13749                           plusw1	equ	0xFE3
 13750                           fsr1h	equ	0xFE2
 13751                           fsr1l	equ	0xFE1
 13752                           indf2	equ	0xFDF
 13753                           postinc2	equ	0xFDE
 13754                           postdec2	equ	0xFDD
 13755                           plusw2	equ	0xFDB
 13756                           fsr2h	equ	0xFDA
 13757                           fsr2l	equ	0xFD9
 13758                           status	equ	0xFD8
 13759                           
 13760                           	psect	text65
 13761  000000                     __ptext65:
 13762                           	opt stack 0
 13763                           tosu	equ	0xFFF
 13764                           tosh	equ	0xFFE
 13765                           tosl	equ	0xFFD
 13766                           pclatu	equ	0xFFB
 13767                           pclath	equ	0xFFA
 13768                           tblptru	equ	0xFF8
 13769                           tblptrh	equ	0xFF7
 13770                           tblptrl	equ	0xFF6
 13771                           tablat	equ	0xFF5
 13772                           prodh	equ	0xFF4
 13773                           prodl	equ	0xFF3
 13774                           intcon	equ	0xFF2
 13775                           postinc0	equ	0xFEE
 13776                           plusw0	equ	0xFEB
 13777                           fsr0h	equ	0xFEA
 13778                           fsr0l	equ	0xFE9
 13779                           wreg	equ	0xFE8
 13780                           indf1	equ	0xFE7
 13781                           postinc1	equ	0xFE6
 13782                           postdec1	equ	0xFE5
 13783                           plusw1	equ	0xFE3
 13784                           fsr1h	equ	0xFE2
 13785                           fsr1l	equ	0xFE1
 13786                           indf2	equ	0xFDF
 13787                           postinc2	equ	0xFDE
 13788                           postdec2	equ	0xFDD
 13789                           plusw2	equ	0xFDB
 13790                           fsr2h	equ	0xFDA
 13791                           fsr2l	equ	0xFD9
 13792                           status	equ	0xFD8
 13793                           
 13794                           	psect	rparam
 13795  0000                     tosu	equ	0xFFF
 13796                           tosh	equ	0xFFE
 13797                           tosl	equ	0xFFD
 13798                           pclatu	equ	0xFFB
 13799                           pclath	equ	0xFFA
 13800                           tblptru	equ	0xFF8
 13801                           tblptrh	equ	0xFF7
 13802                           tblptrl	equ	0xFF6
 13803                           tablat	equ	0xFF5
 13804                           prodh	equ	0xFF4
 13805                           prodl	equ	0xFF3
 13806                           intcon	equ	0xFF2
 13807                           postinc0	equ	0xFEE
 13808                           plusw0	equ	0xFEB
 13809                           fsr0h	equ	0xFEA
 13810                           fsr0l	equ	0xFE9
 13811                           wreg	equ	0xFE8
 13812                           indf1	equ	0xFE7
 13813                           postinc1	equ	0xFE6
 13814                           postdec1	equ	0xFE5
 13815                           plusw1	equ	0xFE3
 13816                           fsr1h	equ	0xFE2
 13817                           fsr1l	equ	0xFE1
 13818                           indf2	equ	0xFDF
 13819                           postinc2	equ	0xFDE
 13820                           postdec2	equ	0xFDD
 13821                           plusw2	equ	0xFDB
 13822                           fsr2h	equ	0xFDA
 13823                           fsr2l	equ	0xFD9
 13824                           status	equ	0xFD8
 13825                           
 13826                           	psect	temp
 13827  00005F                     btemp:
 13828                           	opt stack 0
 13829  00005F                     	ds	1
 13830  0000                     int$flags	set	btemp
 13831                           tosu	equ	0xFFF
 13832                           tosh	equ	0xFFE
 13833                           tosl	equ	0xFFD
 13834                           pclatu	equ	0xFFB
 13835                           pclath	equ	0xFFA
 13836                           tblptru	equ	0xFF8
 13837                           tblptrh	equ	0xFF7
 13838                           tblptrl	equ	0xFF6
 13839                           tablat	equ	0xFF5
 13840                           prodh	equ	0xFF4
 13841                           prodl	equ	0xFF3
 13842                           intcon	equ	0xFF2
 13843                           postinc0	equ	0xFEE
 13844                           plusw0	equ	0xFEB
 13845                           fsr0h	equ	0xFEA
 13846                           fsr0l	equ	0xFE9
 13847                           wreg	equ	0xFE8
 13848                           indf1	equ	0xFE7
 13849                           postinc1	equ	0xFE6
 13850                           postdec1	equ	0xFE5
 13851                           plusw1	equ	0xFE3
 13852                           fsr1h	equ	0xFE2
 13853                           fsr1l	equ	0xFE1
 13854                           indf2	equ	0xFDF
 13855                           postinc2	equ	0xFDE
 13856                           postdec2	equ	0xFDD
 13857                           plusw2	equ	0xFDB
 13858                           fsr2h	equ	0xFDA
 13859                           fsr2l	equ	0xFD9
 13860                           status	equ	0xFD8
 13861                           tosu	equ	0xFFF
 13862                           tosh	equ	0xFFE
 13863                           tosl	equ	0xFFD
 13864                           pclatu	equ	0xFFB
 13865                           pclath	equ	0xFFA
 13866                           tblptru	equ	0xFF8
 13867                           tblptrh	equ	0xFF7
 13868                           tblptrl	equ	0xFF6
 13869                           tablat	equ	0xFF5
 13870                           prodh	equ	0xFF4
 13871                           prodl	equ	0xFF3
 13872                           intcon	equ	0xFF2
 13873                           postinc0	equ	0xFEE
 13874                           plusw0	equ	0xFEB
 13875                           fsr0h	equ	0xFEA
 13876                           fsr0l	equ	0xFE9
 13877                           wreg	equ	0xFE8
 13878                           indf1	equ	0xFE7
 13879                           postinc1	equ	0xFE6
 13880                           postdec1	equ	0xFE5
 13881                           plusw1	equ	0xFE3
 13882                           fsr1h	equ	0xFE2
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           plusw2	equ	0xFDB
 13888                           fsr2h	equ	0xFDA
 13889                           fsr2l	equ	0xFD9
 13890                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1093
    BSS         1343
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      94
    BANK0           160     82     159
    BANK1           256      0     116
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    LIGHTS	PTR unsigned char [2] size(2) Largest target is 1
		 -> LATB(SFR_2[1]), LATA(SFR_2[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_Timer0_10ms
    _Timer0_10ms->_IncreaseByASecond
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___aldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS->_ReadGPS_DATE_TIME
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___lmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Init->_Lcd_Command
    _GetEventNumber->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   71842
                                             78 BANK0      4     4      0
                     _GetEventNumber
                       _GetThisCycle
                           _Lcd_Init
                  _LoadAllFromEeprom
                            _ReadGPS
                  _SYSTEM_Initialize
                            _StopGPS
                        _SwitchOnGPS
           _TMR0_SetInterruptHandler
              _TestGPSStartCondition
                 _VerifyForGPSOnTIme
                        _WriteEeprom
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                         9     2      7    6169
                                             18 BANK0      9     2      7
                       _GetThisCycle (ARG)
                      _Lcd_WriteChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     656
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2    1196
                                             14 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _WriteEeprom                                          5     2      3     268
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _VerifyForGPSOnTIme                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _TestGPSStartCondition                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnGPS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StopGPS                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS                                              0     0      0   24095
                  _ReadGPS_DATE_TIME
 ---------------------------------------------------------------------------------
 (2) _ReadGPS_DATE_TIME                                   20    20      0   24095
                                             58 BANK0     20    20      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (3) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _TimeTextToSecond                                    24    20      4    1734
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _ReadGPSDateTime                                     19    17      2     566
                                              0 BANK0     19    17      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetDay                                              11    10      1    1865
                                             14 BANK0     11    10      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     474
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdjustDayLightSaving                                17     6     11   11953
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   35588
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    9342
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    8497
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                14    14      0    9646
                                             12 BANK0     14    14      0
                         _ReadEeprom
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1490
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    8103
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              3 BANK0      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetThisCycle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetEventNumber                                      11    11      0    4849
                                              6 BANK0     11    11      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4583
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          10    10      0    9456
                                             65 COMRAM    10    10      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    9456
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0    9456
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (11) _Timer0_10ms                                        13    13      0    9456
                                             52 COMRAM    13    13      0
                  _IncreaseByASecond
                            ___almod
                            ___ftmul
                            ___fttol
                           ___lbtoft
                     i2_GetThisCycle
 ---------------------------------------------------------------------------------
 (12) i2_GetThisCycle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) ___lbtoft                                            4     1      3    2839
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___fttol                                            15    11      4     430
                                             27 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (12) ___ftmul                                            15     9      6    3653
                                             12 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftpack                                            8     3      5    2817
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (12) ___almod                                            10     2      8     474
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (12) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (15) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetEventNumber
     ___wmul
   _GetThisCycle
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___lmul
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS
     _ReadGPS_DATE_TIME
       _AdjustDayLightSaving
         _DecreaseByADay
           _DecreaseByAMonth
             _DecreaseByAYear
               ___lwmod
           ___lwmod
         _IncreaseByADay
           _IncreaseByAMonth
             _IncreaseByAYear
               ___lwmod
           ___lwmod
         ___wmul
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _EUSART1_Initialize
       _GetDay
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       _ReadGPSDateTime
         _EUSART1_Read
       _TimeTextToSecond
         ___lmul
       _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _StopGPS
   _SwitchOnGPS
   _TMR0_SetInterruptHandler
   _TestGPSStartCondition
   _VerifyForGPSOnTIme
   _WriteEeprom
   _WriteLongInt
     _GetThisCycle (ARG)
     _Lcd_WriteChar (ARG)
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
     ___aldiv (ARG)
     ___lmul (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod
         ___almod
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         i2_GetThisCycle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     7C0      35       53.5%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      74       8       45.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      9F       5       99.4%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4B      5E       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     261       6        0.0%
DATA                 0      0     A21       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Aug 07 14:15:42 2017

            __end_of_LoadStatesFromEeprom 1B86                   __end_of_ReadGPSDateTime 2A68  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1FB0                                        PL4 1FCA  
                                      PL6 1FD2                                        PL8 185A  
                            ___awdiv@sign 0065                       ___wmul@multiplicand 0062  
                    __size_of_WriteEeprom 0032                                       PL10 25C2  
                                     PL20 1C8E                                       PL12 20B8  
                                     PL30 1CE2                                       PL22 1E7A  
                                     PL14 231C                                       PL40 20C8  
                                     PL32 1CFE                                       PL24 1CBA  
                                     PL16 1B86                                       PL50 25E0  
                                     PL42 1614                                       PL34 15F0  
                                     PL26 15B6                                       PL18 15A2  
                                     PL60 2964                                       PL52 2934  
                                     PL44 20E8                                       PL36 1D06  
                                     PL28 15CC                                       PL70 25EA  
                                     PL62 27A2                                       PL54 2772  
                                     PL46 25D6                                       PL38 1600  
                             __CFG_LVP$ON 000000                                       PL80 20F0  
                                     PL72 1D24                                       PL64 27AC  
                                     PL56 278A                                       PL48 1D16  
                                     PL90 297A                                       PL82 24FE  
                                     PL74 1D3A                                       PL66 1E8C  
                                     PL58 294C                                       PL92 3188  
                                     PL84 2C9E                                       PL76 25F6  
                                     PL68 2412                                       PL94 27BA  
                                     PL86 1BA4                                       PL78 1B96  
                                     PL96 1A1C                                       PL88 2F56  
                                     PL98 2428                                       l133 2A66  
                                     l127 2A4A                                       l274 2E64  
                                     l702 3498                                       l457 3530  
                                     l639 24D8                                       l744 366A  
                                     l649 3554                                       l657 2184  
                                     l691 316C                                       l684 334E  
                                     l848 3614                                       _GIE 007F97  
                            __CFG_CPD$OFF 000000                        DecreaseByAMonth@dt 0070  
                            ___awmod@sign 006D                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                     __end_of_Lcd_Command 2934             projMain@NO_OF_DAYS_IN_A_MONTH 0144  
                                    PL100 2326                                      PL110 2602  
                                    PL102 1BB6                                      PL120 2BE4  
                                    PL112 27CC                                      PL104 1626  
                                    PL130 221A                                      PL122 1662  
                                    PL114 1646                                      PL106 1636  
                                    PL140 2516                                      PL132 2BF2  
                                    PL124 1670                                      PL116 20FA  
                                    PL108 298C                                      PL150 2CB0  
                                    PL142 2FE4                                      PL134 250C  
                                    PL126 2EBA                                      PL118 1654  
                                    PL160 34CC                                      PL152 3502  
                                    PL144 167A                                      PL136 26E8  
                                    PL128 2EC4                                      PL162 1BCC  
                                    PL154 1BC2                                      PL146 28AE  
                                    PL138 2FDA                                      PL156 1684  
                                    PL148 2332                                      PL158 2224  
                            __CFG_ZCD$OFF 000000                                      l1033 1DBC  
                                    l1034 1DBE                                      l1192 324A  
                                    l4004 25A6                                      l4014 25C0  
                                    l3400 33FC                                      l3402 3400  
                                    l3406 3412                                      l4070 217E  
                                    l3600 289A                                      l4080 21BC  
                                    l1593 341C                                      l3426 34EE  
                                    l4066 2164                                      l4500 1F36  
                                    l3620 24A2                                      l4068 216E  
                                    l3470 322E                                      l4086 2206  
                                    l3550 3678                                      l4270 3372  
                                    l4504 1F4E                                      l3632 24E4  
                                    l3608 2440                                      l3800 30AE  
                                    l4272 3378                                      l4280 339A  
                                    l4426 1A3E                                      l3634 24EA  
                                    l3626 24BE                                      l3458 32C4  
                                    l4274 337E                                      l4508 1F7C  
                                    l3740 3000                                      l4436 1A60  
                                    l3468 3228                                      l3572 27EA  
                                    l3804 30B8                                      l4532 18B2  
                                    l4268 336C                                      l4390 1BDE  
                                    l3398 33F4                                      l3582 2824  
                                    l4526 1890                                      l4278 3386  
                                    l3648 325E                                      l3752 3020  
                                    l4464 1B3C                                      l4448 1AA4  
                                    l3808 30C4                                      l3920 29EA  
                                    l4552 19AA                                      l4536 18BA  
                                    l4800 3182                                      l4640 2CEC  
                                    l4482 1EA0                                      l3754 3028  
                                    l3746 3010                                      l3594 285C  
                                    l3922 29EE                                      l4802 3184  
                                    l4650 2D14                                      l4634 2CD4  
                                    l3772 305C                                      l3764 3046  
                                    l3756 302C                                      l4468 1B64  
                                    l3588 2840                                      l3908 29BA  
                                    l4740 2C48                                      l4830 2094  
                                    l4494 1EE8                                      l3942 2A4E  
                                    l4558 19F4                                      l4566 1A1A  
                                    l4646 2D04                                      l4662 2D50  
                                    l4742 2C58                                      l4816 1FE0  
                                    l3768 3050                                      l3792 3090  
                                    l3784 3078                                      l3936 2A1A  
                                    l3928 2A04                                      l3944 2A56  
                                    l4648 2D10                                      l4826 2090  
                                    l4498 1EFA                                      l3794 3098  
                                    l3938 2A3E                                      l4666 2D64  
                                    l4658 2D42                                      l3796 309C  
                                    l3788 3084                                      l3964 253C  
                                    l4748 2C96                                      l4838 20A8  
                                    l3974 2556                                      l4790 3162  
                                    l3984 2570                                      l3994 258C  
                                    l4890 1D5C                                      l4788 315E  
                                    u3101 28A4                                      _LATA 000F83  
                                    _LATB 000F84                                      _LATC 000F85  
                                    u3211 24F4                                      u3131 2466  
                                    u3141 2478                                      u2601 34F8  
                                    u3081 2880                                      u3091 2892  
                                    u2621 3564                                      u2701 32CE  
                                    u3600 29A8                                      u2721 320C  
                                    u5017 2730                                      u4410 1B84  
                                    u2731 321E                                      u5027 2760  
                                    u4420 1EE4                                      u4340 1C8C  
                                    u2741 3238                                      u5037 2A50  
                                    u4350 1AA0                                      u3710 2292  
                                    u5047 3684                                      u3711 228E  
                                    u4360 1AE6                                      u3720 2294  
                                    u4600 3130                                      u5057 28F4  
                                    u2681 32AA                                      u4450 1FAE  
                                    u4514 18FA                     __size_of_WriteLongInt 00A4  
                                    u5067 2922                                      u2691 32BC  
                                    u4531 1990                                      u4515 18F4  
                                    u4541 19A2                                      u4461 1870  
                                    u4374 1B1A                                      u4550 19C0  
                                    u4375 1B18                                      u4471 1882  
                                    u3575 2702                                      u4561 19DA  
                                    u3585 2708                                      u4394 1B42  
                                    u4395 1B40                                      u4571 19EC  
                                    u3595 2718                                      u4820 347C  
                                    u3941 21A2                                      u4581 19FE  
                                    u4910 20B6                                      u3855 28C8  
                                    u3951 21B4                                      u4591 1A10  
                                    u4840 2008                                      u3960 21D2  
                                    u3865 28CE                                      u4770 3362  
                                    u3875 28DC                                      u3971 21EC  
                                    u3981 21FE                                      u3991 2210  
                                    u4791 3146                                      _PLLR 0076D8  
                                    _WPUA 000F10                                      _WPUB 000F18  
                                    _WPUC 000F20                                      _WPUE 000F2D  
                          _IncreaseByADay 27D6                          _DecreaseByAMonth 31F6  
                       ??_Lcd_Delay5500us 0060                             __CFG_FCMEN$ON 000000  
                                    _main 1D44                              ___ftpack@arg 0001  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 0004  
                         _TMR0_StartTimer 36E2                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                    __end_of_Lcd_Delay5us 36CC                                      fsr2l 000FD9  
                                    btemp 005F                                      prodh 000FF4  
                                    prodl 000FF3                                      start 0070  
              LoadEventsFromEeprom@Temp16 0078                             __CFG_CSWEN$ON 000000  
                _GPS_SYNC_EVERY_x_SECONDS 00D4                              ___ftmul@cntr 001A  
                            ___param_bank 000000                              ___ftmul@sign 001B  
                         __end_of_ReadGPS 3188                                _Lcd_CharCP 26F2  
                           __CFG_SCANE$ON 000000                              ___fttol@exp1 002A  
                            ___fttol@lval 0026                    AdjustDayLightSaving@dt 0089  
                 __end_of_TMR0_Initialize 33E8            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0016                   ?_LoadSettingsFromEeprom 0001  
           __end_of_OSCILLATOR_Initialize 361A                LoadStatesFromEeprom@j_1402 0076  
                         __end_of_StopGPS 36E2                           __end_of___aldiv 2D76  
                         __end_of___almod 2F56                                     ?_main 0001  
                    __end_of_GetThisCycle 36D4                           __end_of___awdiv 3066  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 30CE  
                         __end_of___ftmul 2BE4                           ___awdiv@divisor 0062  
                         __end_of___fttol 2E2E                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 3426                                     i2l772 003E  
                         ___awdiv@counter 0064                                     _OSCEN 000EDC  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
                                   _TRISA 000F88                                     _TRISB 000F89  
                                   _TRISC 000F8A                              _WriteLongInt 2BFA  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 0064                 ?_TMR0_SetInterruptHandler 0060  
                           __CFG_WRT3$OFF 000000                           _IncreaseByAYear 34D4  
                          __CFG_EBTR0$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       IncreaseByAYear@dt 0065                          __end_of_TMR0_ISR 36BA  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                  __end_of_IncreaseByADay 28AE                 __size_of_ValidateDateTime 00A2  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   main@i 00B0                                     pclath 000FFA  
                                   tablat 000FF5                            ??_EUSART1_Read 0060  
                                   plusw0 000FEB                                     plusw1 000FE3  
                                   plusw2 000FDB                  __end_ofi2_IncreaseByADay 26E8  
                                   status 000FD8                              __end_ofPL100 2332  
                            __end_ofPL110 260C                              __end_ofPL102 1BC2  
                            __end_ofPL120 2BF2                              __end_ofPL112 27D6  
                            __end_ofPL104 1636                              __end_ofPL130 2224  
                            __end_ofPL122 1670                              __end_ofPL114 1654  
                            __end_ofPL106 1646                              __end_ofPL140 2520  
                            __end_ofPL132 2BFA                              __end_ofPL124 167A  
                            __end_ofPL116 2108                              __end_ofPL108 2996  
                            __end_ofPL150 2CBA                              __end_ofPL142 2FEE  
                            __end_ofPL134 2516                              __end_ofPL126 2EC4  
                            __end_ofPL118 1662                              __end_ofPL160 34D4  
                            __end_ofPL152 350A                              __end_ofPL144 1684  
                            __end_ofPL136 26F2                              __end_ofPL128 2ECE  
                            __end_ofPL162 1BD4                              __end_ofPL154 1BCC  
                            __end_ofPL146 28B8                              __end_ofPL138 2FE4  
                            __end_ofPL156 168E                              __end_ofPL148 233C  
                            __end_ofPL158 222C             __size_of_LoadCyclesFromEeprom 011A  
                      _CENTI_SECOND_COUNT 0053                        __size_ofi2___lwmod 003E  
                __size_of_DecreaseByAYear 0032                          __end_of_Lcd_Init 2EBA  
                              _ReadEeprom 3642                           __initialization 2A68  
              __end_of_EUSART1_Initialize 3642                              __end_of_main 1E7A  
                        ??_DecreaseByADay 0086                          ?_ReadGPSDateTime 0060  
          __end_of_LoadSettingsFromEeprom 185A                  __end_of_TimeTextToSecond 2412  
             ?_INTERRUPT_InterruptManager 0001             LoadStatesFromEeprom@AddStates 0078  
                             _Lcd_Command 28B8                   AdjustDayLightSaving@End 0096  
                 ReadGPS_DATE_TIME@F11475 00F3                   ReadGPS_DATE_TIME@F11477 00EC  
                                  ??_main 00AE                             ___fttol@sign1 0025  
                           __activetblptr 000003                            _GetEventNumber 1FDC  
                   _AUDIO_NORMAL_OFF_TIME 0058                         Timer0_10ms@i_2910 0040  
                       Timer0_10ms@i_2911 0041                         Timer0_10ms@i_2909 003F  
           LoadStatesFromEeprom@AudAddInc 0073                   __end_of_TMR0_StartTimer 36E6  
                         ?_IncreaseByADay 007B                          ___awdiv@dividend 0060  
                    _LoadStatesFromEeprom 1A28                                    _ANSELA 000F11  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                        __end_of___ftpack 2FDA                          __end_of___lbtoft 35E8  
                                  _T0CON0 000FD5                                    _T0CON1 000FD6  
                                  _RC1REG 000F99                                    _CYCLES 0100  
                                  _RC1STA 000F9D                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _RC6PPS 000EFD                                    _EVENTS 0200  
                                  _LIGHTS 00FA                                    i2l1141 1390  
                                  i2l1154 13D2                                    i2l1405 2FBA  
                                  i2l1165 14E4                            __CFG_WDTCCS$SC 000000  
                                  i2l1178 1590                                    i2l4110 131C  
                                  i2l1393 2F74                                    i2l4220 14A6  
                                  i2l4204 1450                                    i2l4116 131E  
                                  i2l4206 1452                                    i2l4142 137A  
                                  i2l4126 1332                                    i2l3416 34B8  
                                  i2l3504 2FCC                                    i2l4152 1392  
                                  i2l1593 345A                                    i2l3530 2676  
                                  i2l3514 2620                                    i2l4242 1554  
                                  i2l4226 14D6                                    i2l3524 265A  
                                  i2l4244 155C                                    i2l4228 14E6  
                                  i2l4180 13E8                                    i2l4164 13BA  
                                  i2l3390 3450                                    i2l3382 3432  
                                  i2l3446 330E                                    i2l3542 26D4  
                                  i2l3710 2B8A                                    i2l4262 159C  
                                  i2l4174 13D4                                    i2l4158 13A6  
                                  i2l3384 343A                                    i2l3536 2696  
                                  i2l3480 2F80                                    i2l3720 2BA6  
                                  i2l4192 140C                                    i2l4168 13C0  
                                  i2l3386 343E                                    i2l3562 31E2  
                                  i2l3490 2FB0                                    i2l3482 2F8E  
                                  i2l3714 2B8E                                    i2l4258 158C  
                                  i2l4186 13FA                                    i2l3660 2EDA  
                                  i2l3724 2BAA                                    i2l3670 2F0A  
                                  i2l3486 2F9A                                    i2l3478 2F7C  
                                  i2l3814 2D8E                                    i2l3672 2F0E  
                                  i2l3680 2F3E                                    i2l3664 2EEE  
                                  i2l3488 2FA6                                    i2l3840 2DF8  
                                  i2l3832 2DE0                                    i2l3816 2D98  
                                  i2l3842 2E04                                    i2l3684 2F44  
                                  i2l3676 2F30                                    i2l3668 2EFE  
                                  i2l3692 2B4C                                    i2l3844 2E08  
                                  i2l3836 2DF0                                    i2l3696 2B66  
                                  i2l3848 2E1C                                    u330_41 2B42  
                                  u332_41 2B5C                                    u348_41 2D86  
                        WriteLongInt@Sign 0078                                    _OSCFRQ 000EDE  
                                  _NVMDAT 000F80                                    _TX1STA 000F9E  
                                  _STATES 06F0                             _GPS_DATE_TIME 00B2  
                           ??_Timer0_10ms 0035                          WriteLongInt@size 0077  
                               ??_ReadGPS 00AE                                    _GetDay 222C  
                        _IncreaseByAMonth 328E                            __CFG_PWRTE$OFF 000000  
                      IncreaseByAMonth@dt 0070                            __CFG_XINST$OFF 000000  
            _SPECIAL_AUDIO_LAST_X_SECONDS 0055                               ?_Lcd_CharCP 0001  
               AdjustDayLightSaving@Start 0094                                 ??_StopGPS 0060  
                                  ___lmul 3242                                 ??___aldiv 0068  
              __end_of_VerifyForGPSOnTIme 3368                                 ??___almod 0009  
                                  ___wmul 359E                                 ??___awdiv 0064  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___ftmul 0013                                 ??___fttol 0020  
                               ??___lwmod 0064                          ?_TMR0_Initialize 0001  
                                  clear_0 2AEC                                    clear_1 2AFE  
                                  clear_2 2B0A                                    clear_3 2B16  
                                  clear_4 2B22                   __end_of_IncreaseByAYear 3502  
                        ___awdiv@quotient 0066                           ___awmod@divisor 006A  
                         ___awmod@counter 006C                    __end_of_GetEventNumber 20B8  
                   __end_of_Lcd_WriteChar 33A8                     ___ftmul@f3_as_product 0017  
                          WriteEeprom@Add 0060                              __pdataBIGRAM 02F0  
                            __pdataCOMRAM 005D                              __mediumconst 0000  
                       __end_ofi2___lwmod 3464                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                   __end_of_TMR0_CallBack 3604                     ?_LoadStatesFromEeprom 0001  
TMR0_SetInterruptHandler@InterruptHandler 0060                     __size_of_Lcd_Delay5us 0008  
           __size_of_INTERRUPT_Initialize 0004                        Lcd_Command@command 0062  
                   LoadEventsFromEeprom@i 0074                          DecreaseByADay@dt 007B  
                       _SYSTEM_Initialize 361A                                __accesstop 0060  
                 __end_of__initialization 2B28                __end_ofi2_IncreaseByAMonth 3322  
                         __CFG_FEXTOSC$HS 000000                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001              LoadSettingsFromEeprom@Temp16 006A  
            LoadSettingsFromEeprom@Temp32 0066                                ___lbtoft@c 000C  
                              ___ftmul@f1 000D                                ___ftmul@f2 0010  
                             ?_ReadEeprom 0060                 i2IncreaseByADay@MonthDays 0029  
                              ___fttol@f1 001C                        i2___lwmod@dividend 0001  
                          __pcstackCOMRAM 0001                              __pidataBANK0 3656  
                            __pidataBANK1 356E                       __end_of_Timer0_10ms 15A2  
                     ??_SYSTEM_Initialize 0064                     __size_of_GetThisCycle 0008  
                   _TIME_AT_LAST_GPS_SYNC 00C8                                 ?_TMR0_ISR 0001  
                       ??_DecreaseByAYear 0070                                __end_ofPL2 1FCA  
                              __end_ofPL4 1FD2                                __end_ofPL6 1FDC  
                              __end_ofPL8 1864                  __end_of_DecreaseByAMonth 3242  
                         ?_GetEventNumber 0001                      __end_of_EUSART1_Read 367C  
                   _TestGPSStartCondition 3464                              _Lcd_Delay5us 36C4  
                         _Lcd_Delay5500us 367C                            Lcd_WriteChar@c 006F  
                          Lcd_WriteChar@x 006E                            Lcd_WriteChar@y 0070  
                               ?_Lcd_Init 0001              __end_of_AdjustDayLightSaving 221A  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 362E  
                        _ValidateDateTime 2520                       __size_of_Lcd_CharCP 0080  
           __size_of_LoadEventsFromEeprom 00BA                                __pbssBANK0 00B2  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                           ??_SwitchOnGPS 0060                              _GetThisCycle 36CC  
                                 ?_GetDay 006E                   __size_ofi2_GetThisCycle 0008  
                       ReadEeprom@Address 0060          __end_of_TMR0_SetInterruptHandler 36C4  
                                 ?___lmul 0060                                   ?___wmul 0060  
                              ??_TMR0_ISR 0042                             ??_WriteEeprom 0063  
                         __CFG_PPS1WAY$ON 000000                            ___lmul@product 0068  
                    Timer0_10ms@ThisCycle 003E                                 ?___ftpack 0001  
                               ?___lbtoft 0009                          ?_IncreaseByAYear 0065  
                                 _CENTURY 00FE                                   _FLAGS_0 00E6  
                                 _FLAGS_1 004E               LoadCyclesFromEeprom@Address 006D  
                                 GetDay@d 0075                                   GetDay@m 0076  
                                 GetDay@t 015C                                   GetDay@y 0077  
                                 _SP1BRGH 000F9C                                   _SP1BRGL 000F9B  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                  ??_LoadStatesFromEeprom 0068                                   _NVMADRH 000F7F  
                                 _NVMADRL 000F7E                                   _OSCTUNE 000EDD  
                                 _NVMCON2 000F82                                ??_Lcd_Init 0063  
                                 _PPSLOCK 000EA0                       __size_of_ReadEeprom 0014  
                ReadGPS_DATE_TIME@TempItr 00AD                       IncreaseByASecond@dt 002A  
                       _IncreaseByASecond 319A                LoadCyclesFromEeprom@i_1467 0073  
                       ?i2_IncreaseByADay 001C                      ValidateDateTime@Date 0060  
                             _Timer0_10ms 130A                                   _ReadGPS 3134  
                    ValidateDateTime@Item 0063                      ValidateDateTime@Time 0061  
                         __size_of_GetDay 00F0                        ?_IncreaseByASecond 002A  
                                 __Hparam 0000                        ??i2_IncreaseByADay 0027  
                                 __Lparam 0000                                 _DATE_TIME 00BD  
             AdjustDayLightSaving@Present 0098                                   _StopGPS 36DC  
                                 ___aldiv 2CBA                                   ___almod 2ECE  
                     __end_of_SwitchOnGPS 36AC                         Lcd_WriteChar@data 0071  
                                 ___awdiv 2FEE                           __size_of___lmul 004C  
                                 ___awmod 3066                           __size_of___wmul 0026  
                                 ___ftmul 2B32                                   ___fttol 2D76  
                 __end_of_Lcd_Delay5500us 368E                                   ___lwmod 33E8  
                            __psmallconst 0F00                       ??_IncreaseByASecond 0035  
                                 __pcinit 2A68                    ?_TestGPSStartCondition 0001  
                              ??___ftpack 0006                                ??___lbtoft 000C  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 1D44  
                                 __ptext1 2BFA                                   __ptext2 2CBA  
                                 __ptext3 3368                                   __ptext4 26F2  
                                 __ptext5 350A                                   __ptext6 3322  
                                 __ptext7 3464                                   __ptext8 369E  
                                 __ptext9 36DC              __end_of_LoadCyclesFromEeprom 1FB0  
                      ??_TimeTextToSecond 0070                       __end_of_WriteEeprom 353C  
                        ??_IncreaseByADay 0086                     _OSCILLATOR_Initialize 3604  
                __end_of_IncreaseByAMonth 32D8                          ___awmod@dividend 0068  
                        ___aldiv@dividend 0060                        _EUSART1_Initialize 362E  
                ??_PIN_MANAGER_Initialize 0060                __size_of_SYSTEM_Initialize 0014  
      LoadStatesFromEeprom@AddAudioNormal 006B                     _AUDIO_SPECIAL_ON_TIME 0057  
                    end_of_initialization 2B28         _NORMAL_AUDIO_STATE_ON_OFF_COUNTER 0051  
               __end_of_IncreaseByASecond 31F6                       ?_EUSART1_Initialize 0001  
                         WriteEeprom@Data 0062                           _DAY_LIGHT_START 00DC  
                       _SECONDS_TO_ADJUST 00E2                              ??_Lcd_CharCP 0060  
                        ___aldiv@quotient 006A                                   postdec1 000FE5  
                                 postdec2 000FDD          _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME 00D0  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0012  
                    _AdjustDayLightSaving 2108                      ??_EUSART1_Initialize 0060  
                               _TIME_ZONE 00E4                     __CFG_WDTCPS$WDTCPS_31 000000  
                _TMR0_SetInterruptHandler 36BA                             _BLINK_ON_TIME 005C  
                __size_of_ReadGPSDateTime 00D2                        _VerifyForGPSOnTIme 3322  
                               _TRISAbits 000F88             LoadSettingsFromEeprom@Address 006C  
                   LoadCyclesFromEeprom@i 0071                     LoadCyclesFromEeprom@j 006F  
                               i2___lwmod 3426                        __end_of_Lcd_CharCP 2772  
                     ?_VerifyForGPSOnTIme 0001                         DecreaseByAYear@dt 0065  
                       _LoadAllFromEeprom 368E                         _ReadGPS_DATE_TIME 1864  
                            _EUSART1_Read 366A                               _SwitchOnGPS 369E  
                         _DecreaseByAYear 353C                        ?_LoadAllFromEeprom 0001  
                      ?_ReadGPS_DATE_TIME 0001                   DecreaseByADay@MonthDays 0087  
                          __end_of_GetDay 231C                            i2_GetThisCycle 36D4  
                            ??_ReadEeprom 0062                               ___ftmul@exp 0016  
                    _timer0ReloadVal16bit 004C                          ??_GetEventNumber 0066  
                   ?_AdjustDayLightSaving 0089                          IncreaseByADay@dt 007B  
            __end_of_INTERRUPT_Initialize 36EA                  __end_of_ValidateDateTime 25C2  
                     ??_LoadAllFromEeprom 007C                               _WriteEeprom 350A  
                      i2_IncreaseByAMonth 32D8                            __end_of___lmul 328E  
                     ??_ReadGPS_DATE_TIME 009A                          ?_Lcd_Delay5500us 0001  
                           __pidataBIGRAM 0F0A                            __end_of___wmul 35C4  
                    ??_VerifyForGPSOnTIme 0060                             __pidataCOMRAM 36EA  
                       __size_of_TMR0_ISR 000E                         ?_DecreaseByAMonth 0070  
                  ?_OSCILLATOR_Initialize 0001                       ?i2_IncreaseByAMonth 0011  
                      ??_DecreaseByAMonth 007B                               __end_ofPL10 25D6  
                             __end_ofPL20 1CBA                               __end_ofPL12 20C8  
                             __end_ofPL30 1CFE                               __end_ofPL22 1E8C  
                             __end_ofPL14 2326                               __end_ofPL40 20E8  
                             __end_ofPL32 1D06                               __end_ofPL24 1CE2  
                             __end_ofPL16 1B96                               __end_ofPL50 25EA  
                             __end_ofPL42 1626                               __end_ofPL34 1600  
                             __end_ofPL26 15CC                               __end_ofPL18 15B6  
                             __end_ofPL60 297A                               __end_ofPL52 294C  
                             __end_ofPL44 20F0                               __end_ofPL36 1D16  
                             __end_ofPL28 15F0                               __end_ofPL70 25F6  
                             __end_ofPL62 27AC                               __end_ofPL54 278A  
                             __end_ofPL46 25E0                               __end_ofPL38 1614  
                             __end_ofPL80 20FA                               __end_ofPL72 1D3A  
                             __end_ofPL64 27BA                               __end_ofPL56 27A2  
                             __end_ofPL48 1D24                               __end_ofPL90 298C  
                             __end_ofPL82 250C                               __end_ofPL74 1D44  
                             __end_ofPL66 1E96                               __end_ofPL58 2964  
                             __end_ofPL92 319A                               __end_ofPL84 2CB0  
                             __end_ofPL76 2602                               __end_ofPL68 2428  
                             __end_ofPL94 27CC                               __end_ofPL86 1BB6  
                             __end_ofPL78 1BA4                               __end_ofPL96 1A28  
                             __end_ofPL88 2F68                               __end_ofPL98 2430  
                     start_initialization 2A68                   __size_of_DecreaseByADay 00CE  
                           _PRESENT_EVENT 005E                  __size_of_TMR0_Initialize 0040  
         __size_of_PIN_MANAGER_Initialize 0066                             _PRESENT_STATE 00EA  
                    _BLINK_LAST_X_SECONDS 005A             __end_ofReadGPSDateTime@F11468 0F09  
                      __end_of_ReadEeprom 3656                                ?i2___lwmod 0001  
               __end_of_LoadAllFromEeprom 369E                         __size_of_Lcd_Init 008C  
              __size_of_IncreaseByASecond 005C                 __end_of_ReadGPS_DATE_TIME 1A1C  
                      WriteEeprom@Address 0063              _TIME_WHEN_GPS_IS_SWITCHED_ON 00CC  
                         WriteLongInt@POS 0079                    __end_ofi2_GetThisCycle 36DC  
                    _AUDIO_NORMAL_ON_TIME 0059                                  ??_GetDay 006F  
                         WriteLongInt@Val 0073                    __size_of_Lcd_WriteChar 0040  
                    _LoadCyclesFromEeprom 1E96                      ??i2_IncreaseByAMonth 001C  
      _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER 0050                  ??_LoadSettingsFromEeprom 0066  
                    i2IncreaseByAMonth@dt 0011                          __CFG_LPBOREN$OFF 000000  
                                ??___lmul 0068              __end_of_LoadEventsFromEeprom 1C8E  
                                ??___wmul 0064                    __size_of_TMR0_CallBack 001C  
                             __pdataBANK0 00EC                               __pdataBANK1 0144  
                           _DAY_LIGHT_END 00D8                         __size_of___ftpack 0072  
                       __size_of___lbtoft 0024                               __pbssBIGRAM 06F0  
                           ?_WriteLongInt 0072                      __size_of_Lcd_Command 007C  
                ReadGPSDateTime@StartCode 0066                               __pbssCOMRAM 004C  
                           __pcstackBANK0 0060                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                   __end_of_DecreaseByAYear 356E  
                       ??_ReadGPSDateTime 0062                             WriteLongInt@x 0072  
                           WriteLongInt@y 007A                VerifyForGPSOnTIme@TimeDiff 0060  
                            ?_Timer0_10ms 0001                     ?_LoadCyclesFromEeprom 0001  
                                ?_ReadGPS 0001                     _TMR0_InterruptHandler 00E0  
                         ?i2_GetThisCycle 0001                  __size_of_TMR0_StartTimer 0004  
       LoadStatesFromEeprom@TempNormalAdd 006F                    _PIN_MANAGER_Initialize 30CE  
                  ??_AdjustDayLightSaving 0094                                 __pintcode 0008  
                 ??_TestGPSStartCondition 0060                                  ?_StopGPS 0001  
                                ?___aldiv 0060                                  ?___almod 0001  
                                ?___awdiv 0060                                  ?___awmod 0068  
                                ?___ftmul 000D                                  ?___fttol 001C  
                                ?___lwmod 0060                         _GPS_SYNC_AT_START 00EB  
                  _NO_OF_TIMES_GPS_FAILED 00E7              ??_INTERRUPT_InterruptManager 0042  
                        ___almod@dividend 0001                 __size_ofi2_IncreaseByADay 00DC  
                          ??_WriteLongInt 0079                                  _BAUD1CON 000F9F  
                           _Lcd_WriteChar 3368                               __smallconst 0F00  
                            Timer0_10ms@i 003B               LoadEventsFromEeprom@Address 0076  
                       ?_IncreaseByAMonth 0070                  __size_of_IncreaseByAYear 002E  
                      ??_IncreaseByAMonth 007B                             _TMR0_CallBack 35E8  
           __size_of_LoadStatesFromEeprom 015E                               ??i2___lwmod 0005  
              __size_of_LoadAllFromEeprom 0010                      _INTERRUPT_Initialize 36E6  
              __size_of_ReadGPS_DATE_TIME 01B8                 __size_of_TimeTextToSecond 00D6  
                         ___aldiv@divisor 0064                         ??_TMR0_Initialize 0062  
                        ReadGPSDateTime@i 006E                           ___aldiv@counter 0068  
                          ___wmul@product 0064                                  _LATAbits 000F83  
                         GetEventNumber@i 006F                                  _LATCbits 000F85  
                                _PIE0bits 000EC2                       __CFG_BORV$VBOR_2P45 000000  
         __size_of_LoadSettingsFromEeprom 01CC       __size_of_INTERRUPT_InterruptManager 0062  
              ??_TMR0_SetInterruptHandler 0062                                  i2u350_40 2DB6  
                                i2u350_45 2DAE                                  i2u423_40 146E  
                                _PIR0bits 000ECA                                  i2u264_41 32F4  
                                i2u265_41 3306                                  i2u417_41 141E  
                                i2u258_41 34C2                                  i2u266_41 3318  
                                i2u418_41 1430                                  i2u291_41 26BA  
                                i2u292_41 26CC                                  i2u293_41 26DE  
                                _PIR3bits 000ECD                                  i2u297_41 31C8  
                                i2u298_41 31DA                                  i2u299_41 31EC  
                     ReadGPSDateTime@Date 0060                       ReadGPSDateTime@Time 0061  
                                _TMR0_ISR 36AC                      TimeTextToSecond@Time 006C  
                            Lcd_Init@data 0063                 Timer0_10ms@ThisCycle_2914 003A  
                          ?_Lcd_WriteChar 006E                         ___wmul@multiplier 0060  
                          _DecreaseByADay 2430                                  _Lcd_Init 2E2E  
                          ?_TMR0_CallBack 0001                         i2_IncreaseByAYear 349C  
                             _EE_Settings 02F0                         ___lmul@multiplier 0060  
                               copy_data0 2A7C                                 copy_data1 2AA0  
                               copy_data2 2AC0                     ?_INTERRUPT_Initialize 0001  
                        ?_DecreaseByAYear 0065                      _LoadEventsFromEeprom 1BD4  
                      ?i2_IncreaseByAYear 0006                    ??_LoadCyclesFromEeprom 0066  
                 _STATE_SECONDS_REMAINING 00E8                              ?_SwitchOnGPS 0001  
                   ReadGPS_DATE_TIME@Date 00A5                          __size_of_ReadGPS 0054  
                           _STATE_SECONDS 0054                                  __Hrparam 0000  
                     ??i2_IncreaseByAYear 0011                     ReadGPS_DATE_TIME@Time 009E  
                 __CFG_RSTOSC$EXTOSC_4PLL 000000                       i2IncreaseByAYear@dt 0006  
                                __Lrparam 0000                   ReadGPSDateTime@TempChar 0071  
                      __CFG_BOREN$SBORDIS 000000                   ??_OSCILLATOR_Initialize 0060  
                            ?_WriteEeprom 0060                          __size_of_StopGPS 0006  
                       ??_TMR0_StartTimer 0060                          __size_of___aldiv 00BC  
                        __size_of___almod 0088                         ?_ValidateDateTime 0060  
                        __size_of___awdiv 0078                          __size_of___awmod 0068  
                        __size_of___ftmul 00B2                          __size_of___fttol 00B8  
             __size_of_EUSART1_Initialize 0014                          __size_of___lwmod 003E  
                                ___ftpack 2F68                                  ___lbtoft 35C4  
                      ??_ValidateDateTime 0062                    __end_of_DecreaseByADay 24FE  
                           ?_Lcd_Delay5us 0001                    _LoadSettingsFromEeprom 168E  
                              _T0CON0bits 000FD5                 __end_ofi2_IncreaseByAYear 34CC  
                                __ptext10 361A                                  __ptext11 33A8  
                                __ptext20 233C                                  __ptext12 36E2  
                                __ptext21 2996                                  __ptext13 36BA  
                                __ptext30 2430                                  __ptext22 366A  
                                __ptext14 30CE                                  __ptext31 31F6  
                                __ptext23 222C                                  __ptext15 3604  
                                __ptext40 1E96                                  __ptext32 353C  
                                __ptext24 3066                                  __ptext16 36E6  
                                __ptext41 3642                                  __ptext33 33E8  
                                __ptext25 362E                                  __ptext17 3134  
                                __ptext50 36AC                                  __ptext42 2E2E  
                                __ptext34 368E                                  __ptext26 2108  
                                __ptext18 1864                                  __ptext51 35E8  
                                __ptext43 367C                                  __ptext35 1A28  
                                __ptext27 27D6                                  __ptext19 2520  
                                __ptext60 319A                                  __ptext52 36EC  
                                __ptext44 28B8                                  __ptext36 2FEE  
                                __ptext28 328E                                  __ptext61 260C  
                                __ptext53 130A                                  __ptext45 36C4  
                                __ptext37 168E                                  __ptext29 34D4  
                                __ptext62 32D8                                  __ptext54 36D4  
                                __ptext46 36CC                                  __ptext38 1BD4  
                                __ptext63 349C                                  __ptext55 35C4  
                                __ptext47 1FDC                                  __ptext39 3242  
                                __ptext64 3426                                  __ptext56 2D76  
                                __ptext48 359E                                  __ptext65 0000  
                                __ptext57 2B32                                  __ptext58 2F68  
                                __ptext59 2ECE                     ?_LoadEventsFromEeprom 0001  
                   LoadStatesFromEeprom@i 007A                     LoadStatesFromEeprom@j 0074  
                         ___almod@divisor 0005                           ___almod@counter 0009  
               __size_of_DecreaseByAMonth 004C                               Lcd_CharCP@c 0062  
                 __size_of_IncreaseByADay 00D8                             __size_of_main 0136  
                       ??_IncreaseByAYear 0070                             ?_GetThisCycle 0001  
    __end_of_TMR0_DefaultInterruptHandler 36EE     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 36EC               ReadGPS_DATE_TIME@IsValidGPS 00AC  
                    __end_of_WriteLongInt 2C9E                      __CFG_WDTCWS$WDTCWS_7 000000  
                    __size_of_Timer0_10ms 0298                                _RC1STAbits 000F9D  
                  _AUDIO_SPECIAL_OFF_TIME 0056                        ReadGPSDateTime@Pos 0072  
                                int$flags 005F        __end_of_INTERRUPT_InterruptManager 006A  
              _INTERRUPT_InterruptManager 0008                           ??_Lcd_WriteChar 0070  
             __size_of_VerifyForGPSOnTIme 0046       LoadStatesFromEeprom@AddAudioSpecial 006D  
                          ??_Lcd_Delay5us 0060                          i2_IncreaseByADay 260C  
               Timer0_10ms@OutForThePorts 003C               PIN_MANAGER_Initialize@state 0060  
                         ?_DecreaseByADay 007B                        i2IncreaseByADay@dt 001C  
                         _ReadGPSDateTime 2996                                _INTCONbits 000FF2  
                         ??_TMR0_CallBack 0042                               _NVMCON1bits 000F81  
                              GetDay@Date 006E                  __size_of_Lcd_Delay5500us 0012  
                 IncreaseByADay@MonthDays 0088                    ??_INTERRUPT_Initialize 0060  
                        ??i2_GetThisCycle 0001                                  intlevel2 0000  
                        _TimeTextToSecond 233C                     ReadGPSDateTime@F11468 0F01  
                          ??_GetThisCycle 0060                          ___lwmod@dividend 0060  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
                              _NEXT_EVENT 005D                               _PPSLOCKbits 000EA0  
             __size_ofi2_IncreaseByAMonth 004A                                _NEXT_STATE 00E9  
      LoadStatesFromEeprom@TempSpecialAdd 0071             ?_TMR0_DefaultInterruptHandler 0001  
          __size_of_TestGPSStartCondition 0038                     ReadGPSDateTime@Commas 0070  
           __end_of_TestGPSStartCondition 349C                             ??_Lcd_Command 0060  
              _BLINK_STATE_ON_OFF_COUNTER 0052                                _RX1PPSbits 000EB5  
                         ___lwmod@divisor 0062                           _TMR0_Initialize 33A8  
                         ___lwmod@counter 0064                   __size_of_GetEventNumber 00DC  
              __size_ofi2_IncreaseByAYear 0030                              ___aldiv@sign 0069  
                          _BLINK_OFF_TIME 005B                    ??_LoadEventsFromEeprom 006C  
          __end_of_PIN_MANAGER_Initialize 3134                              ___almod@sign 000A  
                  _SECONDS_TO_ADJUST_PART 004F                    TimeTextToSecond@Second 0080  
               __size_of_IncreaseByAMonth 004A                      __size_of_SwitchOnGPS 000E  
