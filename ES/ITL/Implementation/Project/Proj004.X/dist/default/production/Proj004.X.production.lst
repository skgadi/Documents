

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Tue Jul 18 15:56:46 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80                           	psect	pa_nodes0,global,class=CODE,delta=1
    81  0000                     
    82                           ; Version 1.42
    83                           ; Generated 13/04/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F26K40 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     tosu	equ	0xFFF
   117                           tosh	equ	0xFFE
   118                           tosl	equ	0xFFD
   119                           pclath	equ	0xFFA
   120                           tblptru	equ	0xFF8
   121                           tblptrh	equ	0xFF7
   122                           tblptrl	equ	0xFF6
   123                           tablat	equ	0xFF5
   124                           prodh	equ	0xFF4
   125                           prodl	equ	0xFF3
   126                           intcon	equ	0xFF2
   127                           plusw0	equ	0xFEB
   128                           wreg	equ	0xFE8
   129                           indf1	equ	0xFE7
   130                           postinc1	equ	0xFE6
   131                           postdec1	equ	0xFE5
   132                           plusw1	equ	0xFE3
   133                           fsr1h	equ	0xFE2
   134                           fsr1l	equ	0xFE1
   135                           indf2	equ	0xFDF
   136                           postinc2	equ	0xFDE
   137                           postdec2	equ	0xFDD
   138                           plusw2	equ	0xFDB
   139                           fsr2h	equ	0xFDA
   140                           fsr2l	equ	0xFD9
   141                           status	equ	0xFD8
   142                           
   143                           	psect	idataCOMRAM
   144  002EF6                     __pidataCOMRAM:
   145                           	opt stack 0
   146                           
   147                           ;initializer for _NEXT_EVENT
   148  002EF6  FF                 	db	255
   149                           
   150                           ;initializer for _PRESENT_EVENT
   151  002EF7  FF                 	db	255
   152                           tosu	equ	0xFFF
   153                           tosh	equ	0xFFE
   154                           tosl	equ	0xFFD
   155                           pclath	equ	0xFFA
   156                           tblptru	equ	0xFF8
   157                           tblptrh	equ	0xFF7
   158                           tblptrl	equ	0xFF6
   159                           tablat	equ	0xFF5
   160                           prodh	equ	0xFF4
   161                           prodl	equ	0xFF3
   162                           intcon	equ	0xFF2
   163                           plusw0	equ	0xFEB
   164                           wreg	equ	0xFE8
   165                           indf1	equ	0xFE7
   166                           postinc1	equ	0xFE6
   167                           postdec1	equ	0xFE5
   168                           plusw1	equ	0xFE3
   169                           fsr1h	equ	0xFE2
   170                           fsr1l	equ	0xFE1
   171                           indf2	equ	0xFDF
   172                           postinc2	equ	0xFDE
   173                           postdec2	equ	0xFDD
   174                           plusw2	equ	0xFDB
   175                           fsr2h	equ	0xFDA
   176                           fsr2l	equ	0xFD9
   177                           status	equ	0xFD8
   178                           
   179                           	psect	idataBIGRAM
   180  000F0A                     __pidataBIGRAM:
   181                           	opt stack 0
   182                           
   183                           ;initializer for _EE_Settings
   184  000F0A  98                 	db	152
   185  000F0B  FE                 	db	254
   186  000F0C  01                 	db	1
   187  000F0D  04                 	db	4
   188  000F0E  01                 	db	1
   189  000F0F  0A                 	db	10
   190  000F10  14                 	db	20
   191  000F11  F6                 	db	246
   192  000F12  FF                 	db	255
   193  000F13  3C                 	db	60
   194  000F14  28                 	db	40
   195  000F15  12                 	db	18
   196  000F16  C0                 	db	192
   197  000F17  08                 	db	8
   198  000F18  2A                 	db	42
   199  000F19  05                 	db	5
   200  000F1A  01                 	db	1
   201  000F1B  80                 	db	128
   202  000F1C  51                 	db	81
   203  000F1D  01                 	db	1
   204  000F1E  00                 	db	0
   205  000F1F  05                 	db	5
   206  000F20  C5                 	db	197
   207  000F21  80                 	db	128
   208  000F22  00                 	db	0
   209  000F23  00                 	db	0
   210  000F24  00                 	db	0
   211  000F25  00                 	db	0
   212  000F26  00                 	db	0
   213  000F27  00                 	db	0
   214  000F28  00                 	db	0
   215  000F29  00                 	db	0
   216  000F2A  00                 	db	0
   217  000F2B  00                 	db	0
   218  000F2C  00                 	db	0
   219  000F2D  00                 	db	0
   220  000F2E  00                 	db	0
   221  000F2F  00                 	db	0
   222  000F30  00                 	db	0
   223  000F31  00                 	db	0
   224  000F32  00                 	db	0
   225  000F33  00                 	db	0
   226  000F34  20                 	db	32
   227  000F35  00                 	db	0
   228  000F36  00                 	db	0
   229  000F37  00                 	db	0
   230  000F38  00                 	db	0
   231  000F39  00                 	db	0
   232  000F3A  00                 	db	0
   233  000F3B  00                 	db	0
   234  000F3C  00                 	db	0
   235  000F3D  00                 	db	0
   236  000F3E  00                 	db	0
   237  000F3F  00                 	db	0
   238  000F40  00                 	db	0
   239  000F41  00                 	db	0
   240  000F42  00                 	db	0
   241  000F43  00                 	db	0
   242  000F44  00                 	db	0
   243  000F45  00                 	db	0
   244  000F46  00                 	db	0
   245  000F47  00                 	db	0
   246  000F48  02                 	db	2
   247  000F49  08                 	db	8
   248  000F4A  08                 	db	8
   249  000F4B  08                 	db	8
   250  000F4C  08                 	db	8
   251  000F4D  08                 	db	8
   252  000F4E  08                 	db	8
   253  000F4F  08                 	db	8
   254  000F50  08                 	db	8
   255  000F51  08                 	db	8
   256  000F52  08                 	db	8
   257  000F53  08                 	db	8
   258  000F54  08                 	db	8
   259  000F55  08                 	db	8
   260  000F56  08                 	db	8
   261  000F57  08                 	db	8
   262  000F58  A0                 	db	160
   263  000F59  00                 	db	0
   264  000F5A  01                 	db	1
   265  000F5B  00                 	db	0
   266  000F5C  05                 	db	5
   267  000F5D  01                 	db	1
   268  000F5E  7F                 	db	127
   269  000F5F  FF                 	db	255
   270  000F60  FF                 	db	255
   271  000F61  FF                 	db	255
   272  000F62  FF                 	db	255
   273  000F63  01                 	db	1
   274  000F64  7F                 	db	127
   275  000F65  FF                 	db	255
   276  000F66  FF                 	db	255
   277  000F67  FF                 	db	255
   278  000F68  FF                 	db	255
   279  000F69  01                 	db	1
   280  000F6A  7F                 	db	127
   281  000F6B  FF                 	db	255
   282  000F6C  FF                 	db	255
   283  000F6D  FF                 	db	255
   284  000F6E  FF                 	db	255
   285  000F6F  01                 	db	1
   286  000F70  7F                 	db	127
   287  000F71  FF                 	db	255
   288  000F72  FF                 	db	255
   289  000F73  FF                 	db	255
   290  000F74  FF                 	db	255
   291  000F75  01                 	db	1
   292  000F76  7F                 	db	127
   293  000F77  FF                 	db	255
   294  000F78  FF                 	db	255
   295  000F79  FF                 	db	255
   296  000F7A  FF                 	db	255
   297  000F7B  01                 	db	1
   298  000F7C  7F                 	db	127
   299  000F7D  FF                 	db	255
   300  000F7E  FF                 	db	255
   301  000F7F  FF                 	db	255
   302  000F80  FF                 	db	255
   303  000F81  01                 	db	1
   304  000F82  7F                 	db	127
   305  000F83  FF                 	db	255
   306  000F84  FF                 	db	255
   307  000F85  FF                 	db	255
   308  000F86  FF                 	db	255
   309  000F87  01                 	db	1
   310  000F88  7F                 	db	127
   311  000F89  FF                 	db	255
   312  000F8A  FF                 	db	255
   313  000F8B  FF                 	db	255
   314  000F8C  FF                 	db	255
   315  000F8D  01                 	db	1
   316  000F8E  7F                 	db	127
   317  000F8F  FF                 	db	255
   318  000F90  FF                 	db	255
   319  000F91  FF                 	db	255
   320  000F92  FF                 	db	255
   321  000F93  01                 	db	1
   322  000F94  7F                 	db	127
   323  000F95  FF                 	db	255
   324  000F96  FF                 	db	255
   325  000F97  FF                 	db	255
   326  000F98  FF                 	db	255
   327  000F99  01                 	db	1
   328  000F9A  7F                 	db	127
   329  000F9B  FF                 	db	255
   330  000F9C  FF                 	db	255
   331  000F9D  FF                 	db	255
   332  000F9E  FF                 	db	255
   333  000F9F  01                 	db	1
   334  000FA0  7F                 	db	127
   335  000FA1  FF                 	db	255
   336  000FA2  FF                 	db	255
   337  000FA3  FF                 	db	255
   338  000FA4  FF                 	db	255
   339  000FA5  01                 	db	1
   340  000FA6  7F                 	db	127
   341  000FA7  FF                 	db	255
   342  000FA8  FF                 	db	255
   343  000FA9  FF                 	db	255
   344  000FAA  FF                 	db	255
   345  000FAB  01                 	db	1
   346  000FAC  7F                 	db	127
   347  000FAD  FF                 	db	255
   348  000FAE  FF                 	db	255
   349  000FAF  FF                 	db	255
   350  000FB0  FF                 	db	255
   351  000FB1  01                 	db	1
   352  000FB2  7F                 	db	127
   353  000FB3  FF                 	db	255
   354  000FB4  FF                 	db	255
   355  000FB5  FF                 	db	255
   356  000FB6  FF                 	db	255
   357  000FB7  01                 	db	1
   358  000FB8  7F                 	db	127
   359  000FB9  FF                 	db	255
   360  000FBA  FF                 	db	255
   361  000FBB  FF                 	db	255
   362  000FBC  FF                 	db	255
   363  000FBD  01                 	db	1
   364  000FBE  7F                 	db	127
   365  000FBF  FF                 	db	255
   366  000FC0  FF                 	db	255
   367  000FC1  FF                 	db	255
   368  000FC2  FF                 	db	255
   369  000FC3  01                 	db	1
   370  000FC4  7F                 	db	127
   371  000FC5  FF                 	db	255
   372  000FC6  FF                 	db	255
   373  000FC7  FF                 	db	255
   374  000FC8  FF                 	db	255
   375  000FC9  01                 	db	1
   376  000FCA  7F                 	db	127
   377  000FCB  FF                 	db	255
   378  000FCC  FF                 	db	255
   379  000FCD  FF                 	db	255
   380  000FCE  FF                 	db	255
   381  000FCF  01                 	db	1
   382  000FD0  7F                 	db	127
   383  000FD1  FF                 	db	255
   384  000FD2  FF                 	db	255
   385  000FD3  FF                 	db	255
   386  000FD4  FF                 	db	255
   387  000FD5  01                 	db	1
   388  000FD6  7F                 	db	127
   389  000FD7  FF                 	db	255
   390  000FD8  FF                 	db	255
   391  000FD9  FF                 	db	255
   392  000FDA  FF                 	db	255
   393  000FDB  01                 	db	1
   394  000FDC  7F                 	db	127
   395  000FDD  FF                 	db	255
   396  000FDE  FF                 	db	255
   397  000FDF  FF                 	db	255
   398  000FE0  FF                 	db	255
   399  000FE1  01                 	db	1
   400  000FE2  7F                 	db	127
   401  000FE3  FF                 	db	255
   402  000FE4  FF                 	db	255
   403  000FE5  FF                 	db	255
   404  000FE6  FF                 	db	255
   405  000FE7  01                 	db	1
   406  000FE8  7F                 	db	127
   407  000FE9  06                 	db	6
   408  000FEA  24                 	db	36
   409  000FEB  90                 	db	144
   410  000FEC  09                 	db	9
   411  000FED  24                 	db	36
   412  000FEE  06                 	db	6
   413  000FEF  12                 	db	18
   414  000FF0  48                 	db	72
   415  000FF1  24                 	db	36
   416  000FF2  90                 	db	144
   417  000FF3  06                 	db	6
   418  000FF4  09                 	db	9
   419  000FF5  24                 	db	36
   420  000FF6  12                 	db	18
   421  000FF7  48                 	db	72
   422  000FF8  03                 	db	3
   423  000FF9  04                 	db	4
   424  000FFA  90                 	db	144
   425  000FFB  08                 	db	8
   426  000FFC  00                 	db	0
   427  000FFD  02                 	db	2
   428  000FFE  14                 	db	20
   429  000FFF  90                 	db	144
   430  001000  00                 	db	0
   431  001001  00                 	db	0
   432  001002  15                 	db	21
   433  001003  24                 	db	36
   434  001004  24                 	db	36
   435  001005  00                 	db	0
   436  001006  00                 	db	0
   437  001007  02                 	db	2
   438  001008  24                 	db	36
   439  001009  10                 	db	16
   440  00100A  00                 	db	0
   441  00100B  20                 	db	32
   442  00100C  02                 	db	2
   443  00100D  24                 	db	36
   444  00100E  50                 	db	80
   445  00100F  00                 	db	0
   446  001010  00                 	db	0
   447  001011  01                 	db	1
   448  001012  00                 	db	0
   449  001013  00                 	db	0
   450  001014  14                 	db	20
   451  001015  20                 	db	32
   452  001016  00                 	db	0
   453  001017  00                 	db	0
   454  001018  00                 	db	0
   455  001019  00                 	db	0
   456  00101A  00                 	db	0
   457  00101B  00                 	db	0
   458  00101C  00                 	db	0
   459  00101D  00                 	db	0
   460  00101E  00                 	db	0
   461  00101F  00                 	db	0
   462  001020  00                 	db	0
   463  001021  00                 	db	0
   464  001022  00                 	db	0
   465  001023  00                 	db	0
   466  001024  00                 	db	0
   467  001025  00                 	db	0
   468  001026  00                 	db	0
   469  001027  00                 	db	0
   470  001028  00                 	db	0
   471  001029  00                 	db	0
   472  00102A  00                 	db	0
   473  00102B  00                 	db	0
   474  00102C  00                 	db	0
   475  00102D  00                 	db	0
   476  00102E  00                 	db	0
   477  00102F  00                 	db	0
   478  001030  00                 	db	0
   479  001031  00                 	db	0
   480  001032  00                 	db	0
   481  001033  00                 	db	0
   482  001034  00                 	db	0
   483  001035  00                 	db	0
   484  001036  00                 	db	0
   485  001037  00                 	db	0
   486  001038  00                 	db	0
   487  001039  00                 	db	0
   488  00103A  00                 	db	0
   489  00103B  00                 	db	0
   490  00103C  00                 	db	0
   491  00103D  00                 	db	0
   492  00103E  00                 	db	0
   493  00103F  00                 	db	0
   494  001040  00                 	db	0
   495  001041  00                 	db	0
   496  001042  00                 	db	0
   497  001043  00                 	db	0
   498  001044  00                 	db	0
   499  001045  00                 	db	0
   500  001046  00                 	db	0
   501  001047  00                 	db	0
   502  001048  00                 	db	0
   503  001049  00                 	db	0
   504  00104A  00                 	db	0
   505  00104B  00                 	db	0
   506  00104C  00                 	db	0
   507  00104D  00                 	db	0
   508  00104E  00                 	db	0
   509  00104F  00                 	db	0
   510  001050  00                 	db	0
   511  001051  00                 	db	0
   512  001052  00                 	db	0
   513  001053  00                 	db	0
   514  001054  00                 	db	0
   515  001055  00                 	db	0
   516  001056  00                 	db	0
   517  001057  00                 	db	0
   518  001058  00                 	db	0
   519  001059  00                 	db	0
   520  00105A  00                 	db	0
   521  00105B  00                 	db	0
   522  00105C  00                 	db	0
   523  00105D  00                 	db	0
   524  00105E  00                 	db	0
   525  00105F  00                 	db	0
   526  001060  00                 	db	0
   527  001061  00                 	db	0
   528  001062  00                 	db	0
   529  001063  00                 	db	0
   530  001064  00                 	db	0
   531  001065  00                 	db	0
   532  001066  00                 	db	0
   533  001067  00                 	db	0
   534  001068  00                 	db	0
   535  001069  00                 	db	0
   536  00106A  00                 	db	0
   537  00106B  00                 	db	0
   538  00106C  00                 	db	0
   539  00106D  00                 	db	0
   540  00106E  00                 	db	0
   541  00106F  00                 	db	0
   542  001070  00                 	db	0
   543  001071  00                 	db	0
   544  001072  00                 	db	0
   545  001073  00                 	db	0
   546  001074  00                 	db	0
   547  001075  00                 	db	0
   548  001076  00                 	db	0
   549  001077  00                 	db	0
   550  001078  00                 	db	0
   551  001079  00                 	db	0
   552  00107A  00                 	db	0
   553  00107B  00                 	db	0
   554  00107C  00                 	db	0
   555  00107D  00                 	db	0
   556  00107E  00                 	db	0
   557  00107F  00                 	db	0
   558  001080  00                 	db	0
   559  001081  00                 	db	0
   560  001082  00                 	db	0
   561  001083  00                 	db	0
   562  001084  00                 	db	0
   563  001085  00                 	db	0
   564  001086  00                 	db	0
   565  001087  00                 	db	0
   566  001088  00                 	db	0
   567  001089  00                 	db	0
   568  00108A  00                 	db	0
   569  00108B  00                 	db	0
   570  00108C  00                 	db	0
   571  00108D  00                 	db	0
   572  00108E  00                 	db	0
   573  00108F  00                 	db	0
   574  001090  00                 	db	0
   575  001091  00                 	db	0
   576  001092  00                 	db	0
   577  001093  00                 	db	0
   578  001094  00                 	db	0
   579  001095  00                 	db	0
   580  001096  00                 	db	0
   581  001097  00                 	db	0
   582  001098  00                 	db	0
   583  001099  00                 	db	0
   584  00109A  00                 	db	0
   585  00109B  00                 	db	0
   586  00109C  00                 	db	0
   587  00109D  00                 	db	0
   588  00109E  00                 	db	0
   589  00109F  00                 	db	0
   590  0010A0  00                 	db	0
   591  0010A1  00                 	db	0
   592  0010A2  00                 	db	0
   593  0010A3  00                 	db	0
   594  0010A4  00                 	db	0
   595  0010A5  00                 	db	0
   596  0010A6  00                 	db	0
   597  0010A7  00                 	db	0
   598  0010A8  00                 	db	0
   599  0010A9  00                 	db	0
   600  0010AA  00                 	db	0
   601  0010AB  00                 	db	0
   602  0010AC  00                 	db	0
   603  0010AD  00                 	db	0
   604  0010AE  00                 	db	0
   605  0010AF  00                 	db	0
   606  0010B0  00                 	db	0
   607  0010B1  00                 	db	0
   608  0010B2  00                 	db	0
   609  0010B3  00                 	db	0
   610  0010B4  00                 	db	0
   611  0010B5  00                 	db	0
   612  0010B6  00                 	db	0
   613  0010B7  00                 	db	0
   614  0010B8  00                 	db	0
   615  0010B9  00                 	db	0
   616  0010BA  00                 	db	0
   617  0010BB  00                 	db	0
   618  0010BC  00                 	db	0
   619  0010BD  00                 	db	0
   620  0010BE  00                 	db	0
   621  0010BF  00                 	db	0
   622  0010C0  00                 	db	0
   623  0010C1  00                 	db	0
   624  0010C2  00                 	db	0
   625  0010C3  00                 	db	0
   626  0010C4  00                 	db	0
   627  0010C5  00                 	db	0
   628  0010C6  00                 	db	0
   629  0010C7  00                 	db	0
   630  0010C8  00                 	db	0
   631  0010C9  00                 	db	0
   632  0010CA  00                 	db	0
   633  0010CB  00                 	db	0
   634  0010CC  00                 	db	0
   635  0010CD  00                 	db	0
   636  0010CE  00                 	db	0
   637  0010CF  00                 	db	0
   638  0010D0  00                 	db	0
   639  0010D1  00                 	db	0
   640  0010D2  00                 	db	0
   641  0010D3  00                 	db	0
   642  0010D4  00                 	db	0
   643  0010D5  00                 	db	0
   644  0010D6  00                 	db	0
   645  0010D7  00                 	db	0
   646  0010D8  00                 	db	0
   647  0010D9  00                 	db	0
   648  0010DA  00                 	db	0
   649  0010DB  00                 	db	0
   650  0010DC  00                 	db	0
   651  0010DD  00                 	db	0
   652  0010DE  00                 	db	0
   653  0010DF  00                 	db	0
   654  0010E0  00                 	db	0
   655  0010E1  00                 	db	0
   656  0010E2  00                 	db	0
   657  0010E3  00                 	db	0
   658  0010E4  00                 	db	0
   659  0010E5  00                 	db	0
   660  0010E6  00                 	db	0
   661  0010E7  00                 	db	0
   662  0010E8  00                 	db	0
   663  0010E9  00                 	db	0
   664  0010EA  00                 	db	0
   665  0010EB  00                 	db	0
   666  0010EC  00                 	db	0
   667  0010ED  00                 	db	0
   668  0010EE  00                 	db	0
   669  0010EF  00                 	db	0
   670  0010F0  00                 	db	0
   671  0010F1  00                 	db	0
   672  0010F2  00                 	db	0
   673  0010F3  00                 	db	0
   674  0010F4  00                 	db	0
   675  0010F5  00                 	db	0
   676  0010F6  00                 	db	0
   677  0010F7  00                 	db	0
   678  0010F8  00                 	db	0
   679  0010F9  00                 	db	0
   680  0010FA  00                 	db	0
   681  0010FB  00                 	db	0
   682  0010FC  00                 	db	0
   683  0010FD  00                 	db	0
   684  0010FE  00                 	db	0
   685  0010FF  00                 	db	0
   686  001100  00                 	db	0
   687  001101  00                 	db	0
   688  001102  00                 	db	0
   689  001103  00                 	db	0
   690  001104  00                 	db	0
   691  001105  00                 	db	0
   692  001106  00                 	db	0
   693  001107  00                 	db	0
   694  001108  00                 	db	0
   695  001109  00                 	db	0
   696  00110A  00                 	db	0
   697  00110B  00                 	db	0
   698  00110C  00                 	db	0
   699  00110D  00                 	db	0
   700  00110E  00                 	db	0
   701  00110F  00                 	db	0
   702  001110  00                 	db	0
   703  001111  00                 	db	0
   704  001112  00                 	db	0
   705  001113  00                 	db	0
   706  001114  00                 	db	0
   707  001115  00                 	db	0
   708  001116  00                 	db	0
   709  001117  00                 	db	0
   710  001118  00                 	db	0
   711  001119  00                 	db	0
   712  00111A  00                 	db	0
   713  00111B  00                 	db	0
   714  00111C  00                 	db	0
   715  00111D  00                 	db	0
   716  00111E  00                 	db	0
   717  00111F  00                 	db	0
   718  001120  00                 	db	0
   719  001121  00                 	db	0
   720  001122  00                 	db	0
   721  001123  00                 	db	0
   722  001124  00                 	db	0
   723  001125  00                 	db	0
   724  001126  00                 	db	0
   725  001127  00                 	db	0
   726  001128  00                 	db	0
   727  001129  00                 	db	0
   728  00112A  00                 	db	0
   729  00112B  00                 	db	0
   730  00112C  00                 	db	0
   731  00112D  00                 	db	0
   732  00112E  00                 	db	0
   733  00112F  00                 	db	0
   734  001130  00                 	db	0
   735  001131  00                 	db	0
   736  001132  00                 	db	0
   737  001133  00                 	db	0
   738  001134  00                 	db	0
   739  001135  00                 	db	0
   740  001136  00                 	db	0
   741  001137  00                 	db	0
   742  001138  00                 	db	0
   743  001139  00                 	db	0
   744  00113A  00                 	db	0
   745  00113B  00                 	db	0
   746  00113C  00                 	db	0
   747  00113D  00                 	db	0
   748  00113E  00                 	db	0
   749  00113F  00                 	db	0
   750  001140  00                 	db	0
   751  001141  00                 	db	0
   752  001142  00                 	db	0
   753  001143  00                 	db	0
   754  001144  00                 	db	0
   755  001145  00                 	db	0
   756  001146  00                 	db	0
   757  001147  00                 	db	0
   758  001148  00                 	db	0
   759  001149  00                 	db	0
   760  00114A  00                 	db	0
   761  00114B  00                 	db	0
   762  00114C  00                 	db	0
   763  00114D  00                 	db	0
   764  00114E  00                 	db	0
   765  00114F  00                 	db	0
   766  001150  00                 	db	0
   767  001151  00                 	db	0
   768  001152  00                 	db	0
   769  001153  00                 	db	0
   770  001154  00                 	db	0
   771  001155  00                 	db	0
   772  001156  00                 	db	0
   773  001157  00                 	db	0
   774  001158  00                 	db	0
   775  001159  00                 	db	0
   776  00115A  00                 	db	0
   777  00115B  00                 	db	0
   778  00115C  00                 	db	0
   779  00115D  00                 	db	0
   780  00115E  00                 	db	0
   781  00115F  00                 	db	0
   782  001160  00                 	db	0
   783  001161  00                 	db	0
   784  001162  00                 	db	0
   785  001163  00                 	db	0
   786  001164  00                 	db	0
   787  001165  00                 	db	0
   788  001166  00                 	db	0
   789  001167  00                 	db	0
   790  001168  00                 	db	0
   791  001169  00                 	db	0
   792  00116A  00                 	db	0
   793  00116B  00                 	db	0
   794  00116C  00                 	db	0
   795  00116D  00                 	db	0
   796  00116E  00                 	db	0
   797  00116F  00                 	db	0
   798  001170  00                 	db	0
   799  001171  00                 	db	0
   800  001172  00                 	db	0
   801  001173  00                 	db	0
   802  001174  00                 	db	0
   803  001175  00                 	db	0
   804  001176  00                 	db	0
   805  001177  00                 	db	0
   806  001178  00                 	db	0
   807  001179  00                 	db	0
   808  00117A  00                 	db	0
   809  00117B  00                 	db	0
   810  00117C  00                 	db	0
   811  00117D  00                 	db	0
   812  00117E  00                 	db	0
   813  00117F  00                 	db	0
   814  001180  00                 	db	0
   815  001181  00                 	db	0
   816  001182  00                 	db	0
   817  001183  00                 	db	0
   818  001184  00                 	db	0
   819  001185  00                 	db	0
   820  001186  00                 	db	0
   821  001187  00                 	db	0
   822  001188  00                 	db	0
   823  001189  00                 	db	0
   824  00118A  00                 	db	0
   825  00118B  00                 	db	0
   826  00118C  00                 	db	0
   827  00118D  00                 	db	0
   828  00118E  00                 	db	0
   829  00118F  00                 	db	0
   830  001190  00                 	db	0
   831  001191  00                 	db	0
   832  001192  00                 	db	0
   833  001193  00                 	db	0
   834  001194  00                 	db	0
   835  001195  00                 	db	0
   836  001196  00                 	db	0
   837  001197  00                 	db	0
   838  001198  00                 	db	0
   839  001199  00                 	db	0
   840  00119A  00                 	db	0
   841  00119B  00                 	db	0
   842  00119C  00                 	db	0
   843  00119D  00                 	db	0
   844  00119E  00                 	db	0
   845  00119F  00                 	db	0
   846  0011A0  00                 	db	0
   847  0011A1  00                 	db	0
   848  0011A2  00                 	db	0
   849  0011A3  00                 	db	0
   850  0011A4  00                 	db	0
   851  0011A5  00                 	db	0
   852  0011A6  00                 	db	0
   853  0011A7  00                 	db	0
   854  0011A8  00                 	db	0
   855  0011A9  00                 	db	0
   856  0011AA  00                 	db	0
   857  0011AB  00                 	db	0
   858  0011AC  00                 	db	0
   859  0011AD  00                 	db	0
   860  0011AE  00                 	db	0
   861  0011AF  00                 	db	0
   862  0011B0  00                 	db	0
   863  0011B1  00                 	db	0
   864  0011B2  00                 	db	0
   865  0011B3  00                 	db	0
   866  0011B4  00                 	db	0
   867  0011B5  00                 	db	0
   868  0011B6  00                 	db	0
   869  0011B7  00                 	db	0
   870  0011B8  00                 	db	0
   871  0011B9  00                 	db	0
   872  0011BA  00                 	db	0
   873  0011BB  00                 	db	0
   874  0011BC  00                 	db	0
   875  0011BD  00                 	db	0
   876  0011BE  00                 	db	0
   877  0011BF  00                 	db	0
   878  0011C0  00                 	db	0
   879  0011C1  00                 	db	0
   880  0011C2  00                 	db	0
   881  0011C3  00                 	db	0
   882  0011C4  00                 	db	0
   883  0011C5  00                 	db	0
   884  0011C6  00                 	db	0
   885  0011C7  00                 	db	0
   886  0011C8  00                 	db	0
   887  0011C9  00                 	db	0
   888  0011CA  00                 	db	0
   889  0011CB  00                 	db	0
   890  0011CC  00                 	db	0
   891  0011CD  00                 	db	0
   892  0011CE  00                 	db	0
   893  0011CF  00                 	db	0
   894  0011D0  00                 	db	0
   895  0011D1  00                 	db	0
   896  0011D2  00                 	db	0
   897  0011D3  00                 	db	0
   898  0011D4  00                 	db	0
   899  0011D5  00                 	db	0
   900  0011D6  00                 	db	0
   901  0011D7  00                 	db	0
   902  0011D8  00                 	db	0
   903  0011D9  00                 	db	0
   904  0011DA  00                 	db	0
   905  0011DB  00                 	db	0
   906  0011DC  00                 	db	0
   907  0011DD  00                 	db	0
   908  0011DE  00                 	db	0
   909  0011DF  00                 	db	0
   910  0011E0  00                 	db	0
   911  0011E1  00                 	db	0
   912  0011E2  00                 	db	0
   913  0011E3  00                 	db	0
   914  0011E4  00                 	db	0
   915  0011E5  00                 	db	0
   916  0011E6  00                 	db	0
   917  0011E7  00                 	db	0
   918  0011E8  00                 	db	0
   919  0011E9  00                 	db	0
   920  0011EA  00                 	db	0
   921  0011EB  00                 	db	0
   922  0011EC  00                 	db	0
   923  0011ED  00                 	db	0
   924  0011EE  00                 	db	0
   925  0011EF  00                 	db	0
   926  0011F0  00                 	db	0
   927  0011F1  00                 	db	0
   928  0011F2  00                 	db	0
   929  0011F3  00                 	db	0
   930  0011F4  00                 	db	0
   931  0011F5  00                 	db	0
   932  0011F6  00                 	db	0
   933  0011F7  00                 	db	0
   934  0011F8  00                 	db	0
   935  0011F9  00                 	db	0
   936  0011FA  00                 	db	0
   937  0011FB  00                 	db	0
   938  0011FC  00                 	db	0
   939  0011FD  00                 	db	0
   940  0011FE  00                 	db	0
   941  0011FF  00                 	db	0
   942  001200  00                 	db	0
   943  001201  00                 	db	0
   944  001202  00                 	db	0
   945  001203  00                 	db	0
   946  001204  00                 	db	0
   947  001205  00                 	db	0
   948  001206  00                 	db	0
   949  001207  00                 	db	0
   950  001208  00                 	db	0
   951  001209  00                 	db	0
   952  00120A  00                 	db	0
   953  00120B  00                 	db	0
   954  00120C  00                 	db	0
   955  00120D  00                 	db	0
   956  00120E  00                 	db	0
   957  00120F  00                 	db	0
   958  001210  00                 	db	0
   959  001211  00                 	db	0
   960  001212  00                 	db	0
   961  001213  00                 	db	0
   962  001214  00                 	db	0
   963  001215  00                 	db	0
   964  001216  00                 	db	0
   965  001217  00                 	db	0
   966  001218  00                 	db	0
   967  001219  00                 	db	0
   968  00121A  00                 	db	0
   969  00121B  00                 	db	0
   970  00121C  00                 	db	0
   971  00121D  00                 	db	0
   972  00121E  00                 	db	0
   973  00121F  00                 	db	0
   974  001220  00                 	db	0
   975  001221  00                 	db	0
   976  001222  00                 	db	0
   977  001223  00                 	db	0
   978  001224  00                 	db	0
   979  001225  00                 	db	0
   980  001226  00                 	db	0
   981  001227  00                 	db	0
   982  001228  00                 	db	0
   983  001229  00                 	db	0
   984  00122A  00                 	db	0
   985  00122B  00                 	db	0
   986  00122C  00                 	db	0
   987  00122D  00                 	db	0
   988  00122E  00                 	db	0
   989  00122F  00                 	db	0
   990  001230  00                 	db	0
   991  001231  00                 	db	0
   992  001232  00                 	db	0
   993  001233  00                 	db	0
   994  001234  00                 	db	0
   995  001235  00                 	db	0
   996  001236  00                 	db	0
   997  001237  00                 	db	0
   998  001238  00                 	db	0
   999  001239  00                 	db	0
  1000  00123A  00                 	db	0
  1001  00123B  00                 	db	0
  1002  00123C  00                 	db	0
  1003  00123D  00                 	db	0
  1004  00123E  00                 	db	0
  1005  00123F  00                 	db	0
  1006  001240  00                 	db	0
  1007  001241  00                 	db	0
  1008  001242  00                 	db	0
  1009  001243  00                 	db	0
  1010  001244  00                 	db	0
  1011  001245  00                 	db	0
  1012  001246  00                 	db	0
  1013  001247  00                 	db	0
  1014  001248  00                 	db	0
  1015  001249  00                 	db	0
  1016  00124A  00                 	db	0
  1017  00124B  00                 	db	0
  1018  00124C  00                 	db	0
  1019  00124D  00                 	db	0
  1020  00124E  00                 	db	0
  1021  00124F  00                 	db	0
  1022  001250  00                 	db	0
  1023  001251  00                 	db	0
  1024  001252  00                 	db	0
  1025  001253  00                 	db	0
  1026  001254  00                 	db	0
  1027  001255  00                 	db	0
  1028  001256  00                 	db	0
  1029  001257  00                 	db	0
  1030  001258  00                 	db	0
  1031  001259  00                 	db	0
  1032  00125A  00                 	db	0
  1033  00125B  00                 	db	0
  1034  00125C  00                 	db	0
  1035  00125D  00                 	db	0
  1036  00125E  00                 	db	0
  1037  00125F  00                 	db	0
  1038  001260  00                 	db	0
  1039  001261  00                 	db	0
  1040  001262  00                 	db	0
  1041  001263  00                 	db	0
  1042  001264  00                 	db	0
  1043  001265  00                 	db	0
  1044  001266  00                 	db	0
  1045  001267  00                 	db	0
  1046  001268  00                 	db	0
  1047  001269  00                 	db	0
  1048  00126A  00                 	db	0
  1049  00126B  00                 	db	0
  1050  00126C  00                 	db	0
  1051  00126D  00                 	db	0
  1052  00126E  00                 	db	0
  1053  00126F  00                 	db	0
  1054  001270  00                 	db	0
  1055  001271  00                 	db	0
  1056  001272  00                 	db	0
  1057  001273  00                 	db	0
  1058  001274  00                 	db	0
  1059  001275  00                 	db	0
  1060  001276  00                 	db	0
  1061  001277  00                 	db	0
  1062  001278  00                 	db	0
  1063  001279  00                 	db	0
  1064  00127A  00                 	db	0
  1065  00127B  00                 	db	0
  1066  00127C  00                 	db	0
  1067  00127D  00                 	db	0
  1068  00127E  00                 	db	0
  1069  00127F  00                 	db	0
  1070  001280  00                 	db	0
  1071  001281  00                 	db	0
  1072  001282  00                 	db	0
  1073  001283  00                 	db	0
  1074  001284  00                 	db	0
  1075  001285  00                 	db	0
  1076  001286  00                 	db	0
  1077  001287  00                 	db	0
  1078  001288  00                 	db	0
  1079  001289  00                 	db	0
  1080  00128A  00                 	db	0
  1081  00128B  00                 	db	0
  1082  00128C  00                 	db	0
  1083  00128D  00                 	db	0
  1084  00128E  00                 	db	0
  1085  00128F  00                 	db	0
  1086  001290  00                 	db	0
  1087  001291  00                 	db	0
  1088  001292  00                 	db	0
  1089  001293  00                 	db	0
  1090  001294  00                 	db	0
  1091  001295  00                 	db	0
  1092  001296  00                 	db	0
  1093  001297  00                 	db	0
  1094  001298  00                 	db	0
  1095  001299  00                 	db	0
  1096  00129A  00                 	db	0
  1097  00129B  00                 	db	0
  1098  00129C  00                 	db	0
  1099  00129D  00                 	db	0
  1100  00129E  00                 	db	0
  1101  00129F  00                 	db	0
  1102  0012A0  00                 	db	0
  1103  0012A1  00                 	db	0
  1104  0012A2  00                 	db	0
  1105  0012A3  00                 	db	0
  1106  0012A4  00                 	db	0
  1107  0012A5  00                 	db	0
  1108  0012A6  00                 	db	0
  1109  0012A7  00                 	db	0
  1110  0012A8  00                 	db	0
  1111  0012A9  00                 	db	0
  1112  0012AA  00                 	db	0
  1113  0012AB  00                 	db	0
  1114  0012AC  00                 	db	0
  1115  0012AD  00                 	db	0
  1116  0012AE  00                 	db	0
  1117  0012AF  00                 	db	0
  1118  0012B0  00                 	db	0
  1119  0012B1  00                 	db	0
  1120  0012B2  00                 	db	0
  1121  0012B3  00                 	db	0
  1122  0012B4  00                 	db	0
  1123  0012B5  00                 	db	0
  1124  0012B6  00                 	db	0
  1125  0012B7  00                 	db	0
  1126  0012B8  00                 	db	0
  1127  0012B9  00                 	db	0
  1128  0012BA  00                 	db	0
  1129  0012BB  00                 	db	0
  1130  0012BC  00                 	db	0
  1131  0012BD  00                 	db	0
  1132  0012BE  00                 	db	0
  1133  0012BF  00                 	db	0
  1134  0012C0  00                 	db	0
  1135  0012C1  00                 	db	0
  1136  0012C2  00                 	db	0
  1137  0012C3  00                 	db	0
  1138  0012C4  00                 	db	0
  1139  0012C5  00                 	db	0
  1140  0012C6  00                 	db	0
  1141  0012C7  00                 	db	0
  1142  0012C8  00                 	db	0
  1143  0012C9  00                 	db	0
  1144  0012CA  00                 	db	0
  1145  0012CB  00                 	db	0
  1146  0012CC  00                 	db	0
  1147  0012CD  00                 	db	0
  1148  0012CE  00                 	db	0
  1149  0012CF  00                 	db	0
  1150  0012D0  00                 	db	0
  1151  0012D1  00                 	db	0
  1152  0012D2  00                 	db	0
  1153  0012D3  00                 	db	0
  1154  0012D4  00                 	db	0
  1155  0012D5  00                 	db	0
  1156  0012D6  00                 	db	0
  1157  0012D7  00                 	db	0
  1158  0012D8  00                 	db	0
  1159  0012D9  00                 	db	0
  1160  0012DA  00                 	db	0
  1161  0012DB  00                 	db	0
  1162  0012DC  00                 	db	0
  1163  0012DD  00                 	db	0
  1164  0012DE  00                 	db	0
  1165  0012DF  00                 	db	0
  1166  0012E0  00                 	db	0
  1167  0012E1  00                 	db	0
  1168  0012E2  00                 	db	0
  1169  0012E3  00                 	db	0
  1170  0012E4  00                 	db	0
  1171  0012E5  00                 	db	0
  1172  0012E6  00                 	db	0
  1173  0012E7  00                 	db	0
  1174  0012E8  00                 	db	0
  1175  0012E9  00                 	db	0
  1176  0012EA  00                 	db	0
  1177  0012EB  00                 	db	0
  1178  0012EC  00                 	db	0
  1179  0012ED  00                 	db	0
  1180  0012EE  00                 	db	0
  1181  0012EF  00                 	db	0
  1182  0012F0  00                 	db	0
  1183  0012F1  00                 	db	0
  1184  0012F2  00                 	db	0
  1185  0012F3  00                 	db	0
  1186  0012F4  00                 	db	0
  1187  0012F5  00                 	db	0
  1188  0012F6  00                 	db	0
  1189  0012F7  00                 	db	0
  1190  0012F8  00                 	db	0
  1191  0012F9  00                 	db	0
  1192  0012FA  00                 	db	0
  1193  0012FB  00                 	db	0
  1194  0012FC  00                 	db	0
  1195  0012FD  00                 	db	0
  1196  0012FE  00                 	db	0
  1197  0012FF  00                 	db	0
  1198  001300  00                 	db	0
  1199  001301  00                 	db	0
  1200  001302  00                 	db	0
  1201  001303  00                 	db	0
  1202  001304  00                 	db	0
  1203  001305  00                 	db	0
  1204  001306  00                 	db	0
  1205  001307  00                 	db	0
  1206  001308  00                 	db	0
  1207                           tosu	equ	0xFFF
  1208                           tosh	equ	0xFFE
  1209                           tosl	equ	0xFFD
  1210                           pclath	equ	0xFFA
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           prodh	equ	0xFF4
  1216                           prodl	equ	0xFF3
  1217                           intcon	equ	0xFF2
  1218                           plusw0	equ	0xFEB
  1219                           wreg	equ	0xFE8
  1220                           indf1	equ	0xFE7
  1221                           postinc1	equ	0xFE6
  1222                           postdec1	equ	0xFE5
  1223                           plusw1	equ	0xFE3
  1224                           fsr1h	equ	0xFE2
  1225                           fsr1l	equ	0xFE1
  1226                           indf2	equ	0xFDF
  1227                           postinc2	equ	0xFDE
  1228                           postdec2	equ	0xFDD
  1229                           plusw2	equ	0xFDB
  1230                           fsr2h	equ	0xFDA
  1231                           fsr2l	equ	0xFD9
  1232                           status	equ	0xFD8
  1233                           
  1234                           	psect	idataBANK0
  1235  002E80                     __pidataBANK0:
  1236                           	opt stack 0
  1237                           
  1238                           ;initializer for ReadGPS_DATE_TIME@F11472
  1239  002E80  2D                 	db	45
  1240  002E81  2D                 	db	45
  1241  002E82  2D                 	db	45
  1242  002E83  2D                 	db	45
  1243  002E84  2D                 	db	45
  1244  002E85  2D                 	db	45
  1245  002E86  00                 	db	0
  1246                           
  1247                           ;initializer for ReadGPS_DATE_TIME@F11470
  1248  002E87  2D                 	db	45
  1249  002E88  2D                 	db	45
  1250  002E89  2D                 	db	45
  1251  002E8A  2D                 	db	45
  1252  002E8B  2D                 	db	45
  1253  002E8C  2D                 	db	45
  1254  002E8D  00                 	db	0
  1255                           
  1256                           ;initializer for _LIGHTS
  1257  002E8E  83                 	db	131
  1258  002E8F  0F                 	db	15
  1259  002E90  84                 	db	132
  1260  002E91  0F                 	db	15
  1261                           
  1262                           ;initializer for _CENTURY
  1263  002E92  14                 	db	20
  1264                           tosu	equ	0xFFF
  1265                           tosh	equ	0xFFE
  1266                           tosl	equ	0xFFD
  1267                           pclath	equ	0xFFA
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           prodh	equ	0xFF4
  1273                           prodl	equ	0xFF3
  1274                           intcon	equ	0xFF2
  1275                           plusw0	equ	0xFEB
  1276                           wreg	equ	0xFE8
  1277                           indf1	equ	0xFE7
  1278                           postinc1	equ	0xFE6
  1279                           postdec1	equ	0xFE5
  1280                           plusw1	equ	0xFE3
  1281                           fsr1h	equ	0xFE2
  1282                           fsr1l	equ	0xFE1
  1283                           indf2	equ	0xFDF
  1284                           postinc2	equ	0xFDE
  1285                           postdec2	equ	0xFDD
  1286                           plusw2	equ	0xFDB
  1287                           fsr2h	equ	0xFDA
  1288                           fsr2l	equ	0xFD9
  1289                           status	equ	0xFD8
  1290                           
  1291                           	psect	idataBANK1
  1292  002DA2                     __pidataBANK1:
  1293                           	opt stack 0
  1294                           
  1295                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
  1296  002DA2  001F               	dw	31
  1297  002DA4  001C               	dw	28
  1298  002DA6  001F               	dw	31
  1299  002DA8  001E               	dw	30
  1300  002DAA  001F               	dw	31
  1301  002DAC  001E               	dw	30
  1302  002DAE  001F               	dw	31
  1303  002DB0  001F               	dw	31
  1304  002DB2  001E               	dw	30
  1305  002DB4  001F               	dw	31
  1306  002DB6  001E               	dw	30
  1307  002DB8  001F               	dw	31
  1308                           
  1309                           ;initializer for GetDay@t
  1310  002DBA  0000               	dw	0
  1311  002DBC  0003               	dw	3
  1312  002DBE  0002               	dw	2
  1313  002DC0  0005               	dw	5
  1314  002DC2  0000               	dw	0
  1315  002DC4  0003               	dw	3
  1316  002DC6  0005               	dw	5
  1317  002DC8  0001               	dw	1
  1318  002DCA  0004               	dw	4
  1319  002DCC  0006               	dw	6
  1320  002DCE  0002               	dw	2
  1321  002DD0  0004               	dw	4
  1322                           tosu	equ	0xFFF
  1323                           tosh	equ	0xFFE
  1324                           tosl	equ	0xFFD
  1325                           pclath	equ	0xFFA
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           prodh	equ	0xFF4
  1331                           prodl	equ	0xFF3
  1332                           intcon	equ	0xFF2
  1333                           plusw0	equ	0xFEB
  1334                           wreg	equ	0xFE8
  1335                           indf1	equ	0xFE7
  1336                           postinc1	equ	0xFE6
  1337                           postdec1	equ	0xFE5
  1338                           plusw1	equ	0xFE3
  1339                           fsr1h	equ	0xFE2
  1340                           fsr1l	equ	0xFE1
  1341                           indf2	equ	0xFDF
  1342                           postinc2	equ	0xFDE
  1343                           postdec2	equ	0xFDD
  1344                           plusw2	equ	0xFDB
  1345                           fsr2h	equ	0xFDA
  1346                           fsr2l	equ	0xFD9
  1347                           status	equ	0xFD8
  1348                           
  1349                           	psect	smallconst
  1350  000F00                     __psmallconst:
  1351                           	opt stack 0
  1352  000F00  00                 	db	0
  1353  000F01                     ReadGPSDateTime@F11464:
  1354                           	opt stack 0
  1355  000F01  24                 	db	36
  1356  000F02  47                 	db	71
  1357  000F03  50                 	db	80
  1358  000F04  52                 	db	82
  1359  000F05  4D                 	db	77
  1360  000F06  43                 	db	67
  1361  000F07  2C                 	db	44
  1362  000F08                     __end_ofReadGPSDateTime@F11464:
  1363                           	opt stack 0
  1364  0000                     _OSCTUNE	set	3805
  1365  0000                     _OSCFRQ	set	3806
  1366  0000                     _OSCEN	set	3804
  1367  0000                     _OSCCON3	set	3802
  1368  0000                     _OSCCON1	set	3800
  1369  0000                     _RC6PPS	set	3837
  1370  0000                     _RX1PPSbits	set	3765
  1371  0000                     _PPSLOCKbits	set	3744
  1372  0000                     _PPSLOCK	set	3744
  1373  0000                     _PIR0bits	set	3786
  1374  0000                     _PIE0bits	set	3778
  1375  0000                     _PIR3bits	set	3789
  1376  0000                     _PLLR	set	30424
  1377  0000                     _ODCONC	set	3871
  1378  0000                     _ODCONB	set	3863
  1379  0000                     _ODCONA	set	3855
  1380  0000                     _WPUC	set	3872
  1381  0000                     _WPUA	set	3856
  1382  0000                     _WPUB	set	3864
  1383  0000                     _WPUE	set	3885
  1384  0000                     _ANSELA	set	3857
  1385  0000                     _ANSELB	set	3865
  1386  0000                     _ANSELC	set	3873
  1387  0000                     _T0CON0bits	set	4053
  1388  0000                     _TMR0L	set	4051
  1389  0000                     _TMR0H	set	4052
  1390  0000                     _T0CON1	set	4054
  1391  0000                     _T0CON0	set	4053
  1392  0000                     _TRISC	set	3978
  1393  0000                     _TRISB	set	3977
  1394  0000                     _TRISA	set	3976
  1395  0000                     _LATC	set	3973
  1396  0000                     _RC1REG	set	3993
  1397  0000                     _RC1STAbits	set	3997
  1398  0000                     _SP1BRGH	set	3996
  1399  0000                     _SP1BRGL	set	3995
  1400  0000                     _TX1STA	set	3998
  1401  0000                     _RC1STA	set	3997
  1402  0000                     _BAUD1CON	set	3999
  1403  0000                     _LATCbits	set	3973
  1404  0000                     _NVMCON2	set	3970
  1405  0000                     _INTCONbits	set	4082
  1406  0000                     _NVMDAT	set	3968
  1407  0000                     _NVMADRH	set	3967
  1408  0000                     _NVMADRL	set	3966
  1409  0000                     _NVMCON1bits	set	3969
  1410  0000                     _LATAbits	set	3971
  1411  0000                     _TRISAbits	set	3976
  1412  0000                     _LATB	set	3972
  1413  0000                     _LATA	set	3971
  1414  0000                     _GIE	set	32663
  1415                           
  1416                           ; #config settings
  1417  000F08  00                 	db	0	; dummy byte at the end
  1418  0000                     tosu	equ	0xFFF
  1419                           tosh	equ	0xFFE
  1420                           tosl	equ	0xFFD
  1421                           pclath	equ	0xFFA
  1422                           tblptru	equ	0xFF8
  1423                           tblptrh	equ	0xFF7
  1424                           tblptrl	equ	0xFF6
  1425                           tablat	equ	0xFF5
  1426                           prodh	equ	0xFF4
  1427                           prodl	equ	0xFF3
  1428                           intcon	equ	0xFF2
  1429                           plusw0	equ	0xFEB
  1430                           wreg	equ	0xFE8
  1431                           indf1	equ	0xFE7
  1432                           postinc1	equ	0xFE6
  1433                           postdec1	equ	0xFE5
  1434                           plusw1	equ	0xFE3
  1435                           fsr1h	equ	0xFE2
  1436                           fsr1l	equ	0xFE1
  1437                           indf2	equ	0xFDF
  1438                           postinc2	equ	0xFDE
  1439                           postdec2	equ	0xFDD
  1440                           plusw2	equ	0xFDB
  1441                           fsr2h	equ	0xFDA
  1442                           fsr2l	equ	0xFD9
  1443                           status	equ	0xFD8
  1444                           
  1445                           	psect	cinit
  1446  002674                     __pcinit:
  1447                           	opt stack 0
  1448  002674                     start_initialization:
  1449                           	opt stack 0
  1450  002674                     __initialization:
  1451                           	opt stack 0
  1452                           
  1453                           ; Initialize objects allocated to BIGRAM (1023 bytes)
  1454                           ; load TBLPTR registers with __pidataBIGRAM
  1455  002674  0E0A               	movlw	low __pidataBIGRAM
  1456  002676  6EF6               	movwf	tblptrl,c
  1457  002678  0E0F               	movlw	high __pidataBIGRAM
  1458  00267A  6EF7               	movwf	tblptrh,c
  1459  00267C  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1460  00267E  6EF8               	movwf	tblptru,c
  1461  002680  EE02  F0F0         	lfsr	0,__pdataBIGRAM
  1462  002684  EE13 F0FF          	lfsr	1,1023
  1463  002688                     copy_data0:
  1464  002688  0009               	tblrd		*+
  1465  00268A  CFF5 FFEE          	movff	tablat,postinc0
  1466  00268E  50E5               	movf	postdec1,w,c
  1467  002690  50E1               	movf	fsr1l,w,c
  1468  002692  E1FA               	bnz	copy_data0
  1469  002694  50E2               	movf	fsr1h,w,c
  1470  002696  E1F8               	bnz	copy_data0
  1471                           
  1472                           ; Initialize objects allocated to BANK1 (48 bytes)
  1473                           ; load TBLPTR registers with __pidataBANK1
  1474  002698  0EA2               	movlw	low __pidataBANK1
  1475  00269A  6EF6               	movwf	tblptrl,c
  1476  00269C  0E2D               	movlw	high __pidataBANK1
  1477  00269E  6EF7               	movwf	tblptrh,c
  1478  0026A0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1479  0026A2  6EF8               	movwf	tblptru,c
  1480  0026A4  EE01  F044         	lfsr	0,__pdataBANK1
  1481  0026A8  EE10 F030          	lfsr	1,48
  1482  0026AC                     copy_data1:
  1483  0026AC  0009               	tblrd		*+
  1484  0026AE  CFF5 FFEE          	movff	tablat,postinc0
  1485  0026B2  50E5               	movf	postdec1,w,c
  1486  0026B4  50E1               	movf	fsr1l,w,c
  1487  0026B6  E1FA               	bnz	copy_data1
  1488                           
  1489                           ; Initialize objects allocated to BANK0 (19 bytes)
  1490                           ; load TBLPTR registers with __pidataBANK0
  1491  0026B8  0E80               	movlw	low __pidataBANK0
  1492  0026BA  6EF6               	movwf	tblptrl,c
  1493  0026BC  0E2E               	movlw	high __pidataBANK0
  1494  0026BE  6EF7               	movwf	tblptrh,c
  1495  0026C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1496  0026C2  6EF8               	movwf	tblptru,c
  1497  0026C4  EE00  F0E4         	lfsr	0,__pdataBANK0
  1498  0026C8  EE10 F013          	lfsr	1,19
  1499  0026CC                     copy_data2:
  1500  0026CC  0009               	tblrd		*+
  1501  0026CE  CFF5 FFEE          	movff	tablat,postinc0
  1502  0026D2  50E5               	movf	postdec1,w,c
  1503  0026D4  50E1               	movf	fsr1l,w,c
  1504  0026D6  E1FA               	bnz	copy_data2
  1505                           
  1506                           ; Initialize objects allocated to COMRAM (2 bytes)
  1507                           ; load TBLPTR registers with __pidataCOMRAM
  1508  0026D8  0EF6               	movlw	low __pidataCOMRAM
  1509  0026DA  6EF6               	movwf	tblptrl,c
  1510  0026DC  0E2E               	movlw	high __pidataCOMRAM
  1511  0026DE  6EF7               	movwf	tblptrh,c
  1512  0026E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1513  0026E2  6EF8               	movwf	tblptru,c
  1514  0026E4  0009               	tblrd		*+	;fetch initializer
  1515  0026E6  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  1516  0026EA  0009               	tblrd		*+	;fetch initializer
  1517  0026EC  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
  1518                           
  1519                           ; Clear objects allocated to BIGRAM (960 bytes)
  1520  0026F0  EE06  F0EF         	lfsr	0,__pbssBIGRAM
  1521  0026F4  EE13 F0C0          	lfsr	1,960
  1522  0026F8                     clear_0:
  1523  0026F8  6AEE               	clrf	postinc0,c
  1524  0026FA  50E5               	movf	postdec1,w,c
  1525  0026FC  50E1               	movf	fsr1l,w,c
  1526  0026FE  E1FC               	bnz	clear_0
  1527  002700  50E2               	movf	fsr1h,w,c
  1528  002702  E1FA               	bnz	clear_0
  1529                           
  1530                           ; Clear objects allocated to BANK2 (240 bytes)
  1531  002704  EE02  F000         	lfsr	0,__pbssBANK2
  1532  002708  0EF0               	movlw	240
  1533  00270A                     clear_1:
  1534  00270A  6AEE               	clrf	postinc0,c
  1535  00270C  06E8               	decf	wreg,f,c
  1536  00270E  E1FD               	bnz	clear_1
  1537                           
  1538                           ; Clear objects allocated to BANK1 (68 bytes)
  1539  002710  EE01  F000         	lfsr	0,__pbssBANK1
  1540  002714  0E44               	movlw	68
  1541  002716                     clear_2:
  1542  002716  6AEE               	clrf	postinc0,c
  1543  002718  06E8               	decf	wreg,f,c
  1544  00271A  E1FD               	bnz	clear_2
  1545                           
  1546                           ; Clear objects allocated to BANK0 (54 bytes)
  1547  00271C  EE00  F0AE         	lfsr	0,__pbssBANK0
  1548  002720  0E36               	movlw	54
  1549  002722                     clear_3:
  1550  002722  6AEE               	clrf	postinc0,c
  1551  002724  06E8               	decf	wreg,f,c
  1552  002726  E1FD               	bnz	clear_3
  1553                           
  1554                           ; Clear objects allocated to COMRAM (18 bytes)
  1555  002728  EE00  F04B         	lfsr	0,__pbssCOMRAM
  1556  00272C  0E12               	movlw	18
  1557  00272E                     clear_4:
  1558  00272E  6AEE               	clrf	postinc0,c
  1559  002730  06E8               	decf	wreg,f,c
  1560  002732  E1FD               	bnz	clear_4
  1561  002734                     end_of_initialization:
  1562                           	opt stack 0
  1563  002734                     __end_of__initialization:
  1564                           	opt stack 0
  1565  002734  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1566  002736  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1567  002738  0100               	movlb	0
  1568  00273A  EFEF  F013         	goto	_main	;jump to C main() function
  1569                           tosu	equ	0xFFF
  1570                           tosh	equ	0xFFE
  1571                           tosl	equ	0xFFD
  1572                           pclath	equ	0xFFA
  1573                           tblptru	equ	0xFF8
  1574                           tblptrh	equ	0xFF7
  1575                           tblptrl	equ	0xFF6
  1576                           tablat	equ	0xFF5
  1577                           prodh	equ	0xFF4
  1578                           prodl	equ	0xFF3
  1579                           intcon	equ	0xFF2
  1580                           postinc0	equ	0xFEE
  1581                           plusw0	equ	0xFEB
  1582                           wreg	equ	0xFE8
  1583                           indf1	equ	0xFE7
  1584                           postinc1	equ	0xFE6
  1585                           postdec1	equ	0xFE5
  1586                           plusw1	equ	0xFE3
  1587                           fsr1h	equ	0xFE2
  1588                           fsr1l	equ	0xFE1
  1589                           indf2	equ	0xFDF
  1590                           postinc2	equ	0xFDE
  1591                           postdec2	equ	0xFDD
  1592                           plusw2	equ	0xFDB
  1593                           fsr2h	equ	0xFDA
  1594                           fsr2l	equ	0xFD9
  1595                           status	equ	0xFD8
  1596                           
  1597                           	psect	bssCOMRAM
  1598  00004B                     __pbssCOMRAM:
  1599                           	opt stack 0
  1600  00004B                     _timer0ReloadVal16bit:
  1601                           	opt stack 0
  1602  00004B                     	ds	2
  1603  00004D                     _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER:
  1604                           	opt stack 0
  1605  00004D                     	ds	1
  1606  00004E                     _NORMAL_AUDIO_STATE_ON_OFF_COUNTER:
  1607                           	opt stack 0
  1608  00004E                     	ds	1
  1609  00004F                     _BLINK_STATE_ON_OFF_COUNTER:
  1610                           	opt stack 0
  1611  00004F                     	ds	1
  1612  000050                     _CENTI_SECOND_COUNT:
  1613                           	opt stack 0
  1614  000050                     	ds	1
  1615  000051                     _STATE_SECONDS_REMAINING:
  1616                           	opt stack 0
  1617  000051                     	ds	1
  1618  000052                     _STATE_SECONDS:
  1619                           	opt stack 0
  1620  000052                     	ds	1
  1621  000053                     _NEXT_STATE:
  1622                           	opt stack 0
  1623  000053                     	ds	1
  1624  000054                     _PRESENT_STATE:
  1625                           	opt stack 0
  1626  000054                     	ds	1
  1627  000055                     _SPECIAL_AUDIO_LAST_X_SECONDS:
  1628                           	opt stack 0
  1629  000055                     	ds	1
  1630  000056                     _AUDIO_SPECIAL_OFF_TIME:
  1631                           	opt stack 0
  1632  000056                     	ds	1
  1633  000057                     _AUDIO_SPECIAL_ON_TIME:
  1634                           	opt stack 0
  1635  000057                     	ds	1
  1636  000058                     _AUDIO_NORMAL_OFF_TIME:
  1637                           	opt stack 0
  1638  000058                     	ds	1
  1639  000059                     _AUDIO_NORMAL_ON_TIME:
  1640                           	opt stack 0
  1641  000059                     	ds	1
  1642  00005A                     _BLINK_LAST_X_SECONDS:
  1643                           	opt stack 0
  1644  00005A                     	ds	1
  1645  00005B                     _BLINK_OFF_TIME:
  1646                           	opt stack 0
  1647  00005B                     	ds	1
  1648  00005C                     _BLINK_ON_TIME:
  1649                           	opt stack 0
  1650  00005C                     	ds	1
  1651                           tosu	equ	0xFFF
  1652                           tosh	equ	0xFFE
  1653                           tosl	equ	0xFFD
  1654                           pclath	equ	0xFFA
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           prodh	equ	0xFF4
  1660                           prodl	equ	0xFF3
  1661                           intcon	equ	0xFF2
  1662                           postinc0	equ	0xFEE
  1663                           plusw0	equ	0xFEB
  1664                           wreg	equ	0xFE8
  1665                           indf1	equ	0xFE7
  1666                           postinc1	equ	0xFE6
  1667                           postdec1	equ	0xFE5
  1668                           plusw1	equ	0xFE3
  1669                           fsr1h	equ	0xFE2
  1670                           fsr1l	equ	0xFE1
  1671                           indf2	equ	0xFDF
  1672                           postinc2	equ	0xFDE
  1673                           postdec2	equ	0xFDD
  1674                           plusw2	equ	0xFDB
  1675                           fsr2h	equ	0xFDA
  1676                           fsr2l	equ	0xFD9
  1677                           status	equ	0xFD8
  1678                           
  1679                           	psect	dataCOMRAM
  1680  00005D                     __pdataCOMRAM:
  1681                           	opt stack 0
  1682  00005D                     _NEXT_EVENT:
  1683                           	opt stack 0
  1684  00005D                     	ds	1
  1685  00005E                     _PRESENT_EVENT:
  1686                           	opt stack 0
  1687  00005E                     	ds	1
  1688                           tosu	equ	0xFFF
  1689                           tosh	equ	0xFFE
  1690                           tosl	equ	0xFFD
  1691                           pclath	equ	0xFFA
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           prodh	equ	0xFF4
  1697                           prodl	equ	0xFF3
  1698                           intcon	equ	0xFF2
  1699                           postinc0	equ	0xFEE
  1700                           plusw0	equ	0xFEB
  1701                           wreg	equ	0xFE8
  1702                           indf1	equ	0xFE7
  1703                           postinc1	equ	0xFE6
  1704                           postdec1	equ	0xFE5
  1705                           plusw1	equ	0xFE3
  1706                           fsr1h	equ	0xFE2
  1707                           fsr1l	equ	0xFE1
  1708                           indf2	equ	0xFDF
  1709                           postinc2	equ	0xFDE
  1710                           postdec2	equ	0xFDD
  1711                           plusw2	equ	0xFDB
  1712                           fsr2h	equ	0xFDA
  1713                           fsr2l	equ	0xFD9
  1714                           status	equ	0xFD8
  1715                           
  1716                           	psect	bssBANK0
  1717  0000AE                     __pbssBANK0:
  1718                           	opt stack 0
  1719  0000AE                     _GPS_DATE_TIME:
  1720                           	opt stack 0
  1721  0000AE                     	ds	11
  1722  0000B9                     _DATE_TIME:
  1723                           	opt stack 0
  1724  0000B9                     	ds	11
  1725  0000C4                     _TIME_AT_LAST_GPS_SYNC:
  1726                           	opt stack 0
  1727  0000C4                     	ds	4
  1728  0000C8                     _TIME_WHEN_GPS_IS_SWITCHED_ON:
  1729                           	opt stack 0
  1730  0000C8                     	ds	4
  1731  0000CC                     _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME:
  1732                           	opt stack 0
  1733  0000CC                     	ds	4
  1734  0000D0                     _GPS_SYNC_EVERY_x_SECONDS:
  1735                           	opt stack 0
  1736  0000D0                     	ds	4
  1737  0000D4                     _DAY_LIGHT_END:
  1738                           	opt stack 0
  1739  0000D4                     	ds	4
  1740  0000D8                     _DAY_LIGHT_START:
  1741                           	opt stack 0
  1742  0000D8                     	ds	4
  1743  0000DC                     _TMR0_InterruptHandler:
  1744                           	opt stack 0
  1745  0000DC                     	ds	2
  1746  0000DE                     _TIME_ZONE:
  1747                           	opt stack 0
  1748  0000DE                     	ds	2
  1749  0000E0                     _FLAGS_1:
  1750                           	opt stack 0
  1751  0000E0                     	ds	1
  1752  0000E1                     _FLAGS_0:
  1753                           	opt stack 0
  1754  0000E1                     	ds	1
  1755  0000E2                     _NO_OF_TIMES_GPS_FAILED:
  1756                           	opt stack 0
  1757  0000E2                     	ds	1
  1758  0000E3                     _GPS_SYNC_AT_START:
  1759                           	opt stack 0
  1760  0000E3                     	ds	1
  1761                           tosu	equ	0xFFF
  1762                           tosh	equ	0xFFE
  1763                           tosl	equ	0xFFD
  1764                           pclath	equ	0xFFA
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           prodh	equ	0xFF4
  1770                           prodl	equ	0xFF3
  1771                           intcon	equ	0xFF2
  1772                           postinc0	equ	0xFEE
  1773                           plusw0	equ	0xFEB
  1774                           wreg	equ	0xFE8
  1775                           indf1	equ	0xFE7
  1776                           postinc1	equ	0xFE6
  1777                           postdec1	equ	0xFE5
  1778                           plusw1	equ	0xFE3
  1779                           fsr1h	equ	0xFE2
  1780                           fsr1l	equ	0xFE1
  1781                           indf2	equ	0xFDF
  1782                           postinc2	equ	0xFDE
  1783                           postdec2	equ	0xFDD
  1784                           plusw2	equ	0xFDB
  1785                           fsr2h	equ	0xFDA
  1786                           fsr2l	equ	0xFD9
  1787                           status	equ	0xFD8
  1788                           
  1789                           	psect	dataBANK0
  1790  0000E4                     __pdataBANK0:
  1791                           	opt stack 0
  1792  0000E4                     ReadGPS_DATE_TIME@F11472:
  1793                           	opt stack 0
  1794  0000E4                     	ds	7
  1795  0000EB                     ReadGPS_DATE_TIME@F11470:
  1796                           	opt stack 0
  1797  0000EB                     	ds	7
  1798  0000F2                     _LIGHTS:
  1799                           	opt stack 0
  1800  0000F2                     	ds	4
  1801  0000F6                     _CENTURY:
  1802                           	opt stack 0
  1803  0000F6                     	ds	1
  1804                           tosu	equ	0xFFF
  1805                           tosh	equ	0xFFE
  1806                           tosl	equ	0xFFD
  1807                           pclath	equ	0xFFA
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           prodh	equ	0xFF4
  1813                           prodl	equ	0xFF3
  1814                           intcon	equ	0xFF2
  1815                           postinc0	equ	0xFEE
  1816                           plusw0	equ	0xFEB
  1817                           wreg	equ	0xFE8
  1818                           indf1	equ	0xFE7
  1819                           postinc1	equ	0xFE6
  1820                           postdec1	equ	0xFE5
  1821                           plusw1	equ	0xFE3
  1822                           fsr1h	equ	0xFE2
  1823                           fsr1l	equ	0xFE1
  1824                           indf2	equ	0xFDF
  1825                           postinc2	equ	0xFDE
  1826                           postdec2	equ	0xFDD
  1827                           plusw2	equ	0xFDB
  1828                           fsr2h	equ	0xFDA
  1829                           fsr2l	equ	0xFD9
  1830                           status	equ	0xFD8
  1831                           
  1832                           	psect	bssBANK1
  1833  000100                     __pbssBANK1:
  1834                           	opt stack 0
  1835  000100                     _CYCLES:
  1836                           	opt stack 0
  1837  000100                     	ds	68
  1838                           tosu	equ	0xFFF
  1839                           tosh	equ	0xFFE
  1840                           tosl	equ	0xFFD
  1841                           pclath	equ	0xFFA
  1842                           tblptru	equ	0xFF8
  1843                           tblptrh	equ	0xFF7
  1844                           tblptrl	equ	0xFF6
  1845                           tablat	equ	0xFF5
  1846                           prodh	equ	0xFF4
  1847                           prodl	equ	0xFF3
  1848                           intcon	equ	0xFF2
  1849                           postinc0	equ	0xFEE
  1850                           plusw0	equ	0xFEB
  1851                           wreg	equ	0xFE8
  1852                           indf1	equ	0xFE7
  1853                           postinc1	equ	0xFE6
  1854                           postdec1	equ	0xFE5
  1855                           plusw1	equ	0xFE3
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           indf2	equ	0xFDF
  1859                           postinc2	equ	0xFDE
  1860                           postdec2	equ	0xFDD
  1861                           plusw2	equ	0xFDB
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866                           	psect	dataBANK1
  1867  000144                     __pdataBANK1:
  1868                           	opt stack 0
  1869  000144                     projMain@NO_OF_DAYS_IN_A_MONTH:
  1870                           	opt stack 0
  1871  000144                     	ds	24
  1872  00015C                     GetDay@t:
  1873                           	opt stack 0
  1874  00015C                     	ds	24
  1875                           tosu	equ	0xFFF
  1876                           tosh	equ	0xFFE
  1877                           tosl	equ	0xFFD
  1878                           pclath	equ	0xFFA
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           prodh	equ	0xFF4
  1884                           prodl	equ	0xFF3
  1885                           intcon	equ	0xFF2
  1886                           postinc0	equ	0xFEE
  1887                           plusw0	equ	0xFEB
  1888                           wreg	equ	0xFE8
  1889                           indf1	equ	0xFE7
  1890                           postinc1	equ	0xFE6
  1891                           postdec1	equ	0xFE5
  1892                           plusw1	equ	0xFE3
  1893                           fsr1h	equ	0xFE2
  1894                           fsr1l	equ	0xFE1
  1895                           indf2	equ	0xFDF
  1896                           postinc2	equ	0xFDE
  1897                           postdec2	equ	0xFDD
  1898                           plusw2	equ	0xFDB
  1899                           fsr2h	equ	0xFDA
  1900                           fsr2l	equ	0xFD9
  1901                           status	equ	0xFD8
  1902                           
  1903                           	psect	bssBANK2
  1904  000200                     __pbssBANK2:
  1905                           	opt stack 0
  1906  000200                     _EVENTS:
  1907                           	opt stack 0
  1908  000200                     	ds	240
  1909                           tosu	equ	0xFFF
  1910                           tosh	equ	0xFFE
  1911                           tosl	equ	0xFFD
  1912                           pclath	equ	0xFFA
  1913                           tblptru	equ	0xFF8
  1914                           tblptrh	equ	0xFF7
  1915                           tblptrl	equ	0xFF6
  1916                           tablat	equ	0xFF5
  1917                           prodh	equ	0xFF4
  1918                           prodl	equ	0xFF3
  1919                           intcon	equ	0xFF2
  1920                           postinc0	equ	0xFEE
  1921                           plusw0	equ	0xFEB
  1922                           wreg	equ	0xFE8
  1923                           indf1	equ	0xFE7
  1924                           postinc1	equ	0xFE6
  1925                           postdec1	equ	0xFE5
  1926                           plusw1	equ	0xFE3
  1927                           fsr1h	equ	0xFE2
  1928                           fsr1l	equ	0xFE1
  1929                           indf2	equ	0xFDF
  1930                           postinc2	equ	0xFDE
  1931                           postdec2	equ	0xFDD
  1932                           plusw2	equ	0xFDB
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937                           	psect	bssBIGRAM
  1938  0006EF                     __pbssBIGRAM:
  1939                           	opt stack 0
  1940  0006EF                     _STATES:
  1941                           	opt stack 0
  1942  0006EF                     	ds	960
  1943                           tosu	equ	0xFFF
  1944                           tosh	equ	0xFFE
  1945                           tosl	equ	0xFFD
  1946                           pclath	equ	0xFFA
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           prodh	equ	0xFF4
  1952                           prodl	equ	0xFF3
  1953                           intcon	equ	0xFF2
  1954                           postinc0	equ	0xFEE
  1955                           plusw0	equ	0xFEB
  1956                           wreg	equ	0xFE8
  1957                           indf1	equ	0xFE7
  1958                           postinc1	equ	0xFE6
  1959                           postdec1	equ	0xFE5
  1960                           plusw1	equ	0xFE3
  1961                           fsr1h	equ	0xFE2
  1962                           fsr1l	equ	0xFE1
  1963                           indf2	equ	0xFDF
  1964                           postinc2	equ	0xFDE
  1965                           postdec2	equ	0xFDD
  1966                           plusw2	equ	0xFDB
  1967                           fsr2h	equ	0xFDA
  1968                           fsr2l	equ	0xFD9
  1969                           status	equ	0xFD8
  1970                           
  1971                           	psect	dataBIGRAM
  1972  0002F0                     __pdataBIGRAM:
  1973                           	opt stack 0
  1974  0002F0                     _EE_Settings:
  1975                           	opt stack 0
  1976  0002F0                     	ds	1023
  1977                           tosu	equ	0xFFF
  1978                           tosh	equ	0xFFE
  1979                           tosl	equ	0xFFD
  1980                           pclath	equ	0xFFA
  1981                           tblptru	equ	0xFF8
  1982                           tblptrh	equ	0xFF7
  1983                           tblptrl	equ	0xFF6
  1984                           tablat	equ	0xFF5
  1985                           prodh	equ	0xFF4
  1986                           prodl	equ	0xFF3
  1987                           intcon	equ	0xFF2
  1988                           postinc0	equ	0xFEE
  1989                           plusw0	equ	0xFEB
  1990                           wreg	equ	0xFE8
  1991                           indf1	equ	0xFE7
  1992                           postinc1	equ	0xFE6
  1993                           postdec1	equ	0xFE5
  1994                           plusw1	equ	0xFE3
  1995                           fsr1h	equ	0xFE2
  1996                           fsr1l	equ	0xFE1
  1997                           indf2	equ	0xFDF
  1998                           postinc2	equ	0xFDE
  1999                           postdec2	equ	0xFDD
  2000                           plusw2	equ	0xFDB
  2001                           fsr2h	equ	0xFDA
  2002                           fsr2l	equ	0xFD9
  2003                           status	equ	0xFD8
  2004                           
  2005                           	psect	cstackBANK0
  2006  000060                     __pcstackBANK0:
  2007                           	opt stack 0
  2008  000060                     ??_Lcd_Delay5500us:
  2009  000060                     ??_Lcd_Command:
  2010  000060                     ??_TestGPSStartCondition:
  2011  000060                     ?___wmul:
  2012                           	opt stack 0
  2013  000060                     ?___awdiv:
  2014                           	opt stack 0
  2015  000060                     ?___lwmod:
  2016                           	opt stack 0
  2017  000060                     ?___lmul:
  2018                           	opt stack 0
  2019  000060                     ReadGPSDateTime@Date:
  2020                           	opt stack 0
  2021  000060                     ValidateDateTime@Date:
  2022                           	opt stack 0
  2023  000060                     PIN_MANAGER_Initialize@state:
  2024                           	opt stack 0
  2025  000060                     ReadEeprom@Address:
  2026                           	opt stack 0
  2027  000060                     WriteEeprom@Add:
  2028                           	opt stack 0
  2029  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  2030                           	opt stack 0
  2031  000060                     ___wmul@multiplier:
  2032                           	opt stack 0
  2033  000060                     ___awdiv@dividend:
  2034                           	opt stack 0
  2035  000060                     ___lwmod@dividend:
  2036                           	opt stack 0
  2037  000060                     VerifyForGPSOnTIme@TimeDiff:
  2038                           	opt stack 0
  2039  000060                     ___lmul@multiplier:
  2040                           	opt stack 0
  2041                           
  2042                           ; 4 bytes @ 0x0
  2043  000060                     	ds	1
  2044  000061                     ReadGPSDateTime@Time:
  2045                           	opt stack 0
  2046  000061                     ValidateDateTime@Time:
  2047                           	opt stack 0
  2048                           
  2049                           ; 1 bytes @ 0x1
  2050  000061                     	ds	1
  2051  000062                     ??_TMR0_Initialize:
  2052  000062                     ??_ReadGPSDateTime:
  2053  000062                     ??_ValidateDateTime:
  2054  000062                     Lcd_Command@command:
  2055                           	opt stack 0
  2056  000062                     WriteEeprom@Data:
  2057                           	opt stack 0
  2058  000062                     ___wmul@multiplicand:
  2059                           	opt stack 0
  2060  000062                     ___awdiv@divisor:
  2061                           	opt stack 0
  2062  000062                     ___lwmod@divisor:
  2063                           	opt stack 0
  2064                           
  2065                           ; 2 bytes @ 0x2
  2066  000062                     	ds	1
  2067  000063                     ValidateDateTime@Item:
  2068                           	opt stack 0
  2069  000063                     Lcd_Init@data:
  2070                           	opt stack 0
  2071  000063                     WriteEeprom@Address:
  2072                           	opt stack 0
  2073                           
  2074                           ; 2 bytes @ 0x3
  2075  000063                     	ds	1
  2076  000064                     ___awdiv@counter:
  2077                           	opt stack 0
  2078  000064                     ___lwmod@counter:
  2079                           	opt stack 0
  2080  000064                     ___wmul@product:
  2081                           	opt stack 0
  2082  000064                     ___lmul@multiplicand:
  2083                           	opt stack 0
  2084                           
  2085                           ; 4 bytes @ 0x4
  2086  000064                     	ds	1
  2087  000065                     ?_IncreaseByAYear:
  2088                           	opt stack 0
  2089  000065                     ?_DecreaseByAYear:
  2090                           	opt stack 0
  2091  000065                     ___awdiv@sign:
  2092                           	opt stack 0
  2093  000065                     IncreaseByAYear@dt:
  2094                           	opt stack 0
  2095  000065                     DecreaseByAYear@dt:
  2096                           	opt stack 0
  2097                           
  2098                           ; 11 bytes @ 0x5
  2099  000065                     	ds	1
  2100  000066                     ??_LoadEventsFromEeprom:
  2101  000066                     ??_LoadCyclesFromEeprom:
  2102  000066                     ??_GetEventNumber:
  2103  000066                     ___awdiv@quotient:
  2104                           	opt stack 0
  2105  000066                     LoadSettingsFromEeprom@Temp32:
  2106                           	opt stack 0
  2107  000066                     ReadGPSDateTime@StartCode:
  2108                           	opt stack 0
  2109                           
  2110                           ; 7 bytes @ 0x6
  2111  000066                     	ds	2
  2112  000068                     ??_LoadStatesFromEeprom:
  2113  000068                     ?___awmod:
  2114                           	opt stack 0
  2115  000068                     ___awmod@dividend:
  2116                           	opt stack 0
  2117  000068                     ___lmul@product:
  2118                           	opt stack 0
  2119                           
  2120                           ; 4 bytes @ 0x8
  2121  000068                     	ds	2
  2122  00006A                     LoadSettingsFromEeprom@Temp16:
  2123                           	opt stack 0
  2124  00006A                     LoadEventsFromEeprom@i:
  2125                           	opt stack 0
  2126  00006A                     ___awmod@divisor:
  2127                           	opt stack 0
  2128                           
  2129                           ; 2 bytes @ 0xA
  2130  00006A                     	ds	1
  2131  00006B                     LoadStatesFromEeprom@AddAudioNormal:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0xB
  2135  00006B                     	ds	1
  2136  00006C                     ?_TimeTextToSecond:
  2137                           	opt stack 0
  2138  00006C                     TimeTextToSecond@Time:
  2139                           	opt stack 0
  2140  00006C                     ___awmod@counter:
  2141                           	opt stack 0
  2142  00006C                     LoadSettingsFromEeprom@Address:
  2143                           	opt stack 0
  2144  00006C                     LoadEventsFromEeprom@Address:
  2145                           	opt stack 0
  2146                           
  2147                           ; 2 bytes @ 0xC
  2148  00006C                     	ds	1
  2149  00006D                     ___awmod@sign:
  2150                           	opt stack 0
  2151  00006D                     ReadGPSDateTime@i:
  2152                           	opt stack 0
  2153  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
  2154                           	opt stack 0
  2155  00006D                     LoadCyclesFromEeprom@Address:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0xD
  2159  00006D                     	ds	1
  2160  00006E                     GetDay@Date:
  2161                           	opt stack 0
  2162  00006E                     LoadEventsFromEeprom@Temp16:
  2163                           	opt stack 0
  2164                           
  2165                           ; 2 bytes @ 0xE
  2166  00006E                     	ds	1
  2167  00006F                     ??_GetDay:
  2168  00006F                     ReadGPSDateTime@Commas:
  2169                           	opt stack 0
  2170  00006F                     LoadStatesFromEeprom@TempNormalAdd:
  2171                           	opt stack 0
  2172  00006F                     LoadCyclesFromEeprom@j:
  2173                           	opt stack 0
  2174  00006F                     GetEventNumber@i:
  2175                           	opt stack 0
  2176                           
  2177                           ; 2 bytes @ 0xF
  2178  00006F                     	ds	1
  2179  000070                     ??_TimeTextToSecond:
  2180  000070                     ?_IncreaseByAMonth:
  2181                           	opt stack 0
  2182  000070                     ?_DecreaseByAMonth:
  2183                           	opt stack 0
  2184  000070                     ReadGPSDateTime@TempChar:
  2185                           	opt stack 0
  2186  000070                     IncreaseByAMonth@dt:
  2187                           	opt stack 0
  2188  000070                     DecreaseByAMonth@dt:
  2189                           	opt stack 0
  2190                           
  2191                           ; 11 bytes @ 0x10
  2192  000070                     	ds	1
  2193  000071                     ReadGPSDateTime@Pos:
  2194                           	opt stack 0
  2195  000071                     LoadStatesFromEeprom@TempSpecialAdd:
  2196                           	opt stack 0
  2197  000071                     LoadCyclesFromEeprom@i:
  2198                           	opt stack 0
  2199                           
  2200                           ; 2 bytes @ 0x11
  2201  000071                     	ds	2
  2202  000073                     LoadStatesFromEeprom@AudAddInc:
  2203                           	opt stack 0
  2204  000073                     LoadCyclesFromEeprom@i_1461:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x13
  2208  000073                     	ds	1
  2209  000074                     LoadStatesFromEeprom@j:
  2210                           	opt stack 0
  2211                           
  2212                           ; 2 bytes @ 0x14
  2213  000074                     	ds	1
  2214  000075                     GetDay@d:
  2215                           	opt stack 0
  2216                           
  2217                           ; 1 bytes @ 0x15
  2218  000075                     	ds	1
  2219  000076                     GetDay@m:
  2220                           	opt stack 0
  2221  000076                     LoadStatesFromEeprom@j_1396:
  2222                           	opt stack 0
  2223                           
  2224                           ; 2 bytes @ 0x16
  2225  000076                     	ds	1
  2226  000077                     GetDay@y:
  2227                           	opt stack 0
  2228                           
  2229                           ; 2 bytes @ 0x17
  2230  000077                     	ds	1
  2231  000078                     LoadStatesFromEeprom@AddStates:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x18
  2235  000078                     	ds	2
  2236  00007A                     LoadStatesFromEeprom@i:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x1A
  2240  00007A                     	ds	1
  2241  00007B                     ?_IncreaseByADay:
  2242                           	opt stack 0
  2243  00007B                     ?_DecreaseByADay:
  2244                           	opt stack 0
  2245  00007B                     IncreaseByADay@dt:
  2246                           	opt stack 0
  2247  00007B                     DecreaseByADay@dt:
  2248                           	opt stack 0
  2249                           
  2250                           ; 11 bytes @ 0x1B
  2251  00007B                     	ds	1
  2252  00007C                     
  2253                           ; 1 bytes @ 0x1C
  2254  00007C                     	ds	4
  2255  000080                     TimeTextToSecond@Second:
  2256                           	opt stack 0
  2257                           
  2258                           ; 4 bytes @ 0x20
  2259  000080                     	ds	6
  2260  000086                     ??_IncreaseByADay:
  2261  000086                     ??_DecreaseByADay:
  2262                           
  2263                           ; 1 bytes @ 0x26
  2264  000086                     	ds	1
  2265  000087                     DecreaseByADay@MonthDays:
  2266                           	opt stack 0
  2267                           
  2268                           ; 1 bytes @ 0x27
  2269  000087                     	ds	1
  2270  000088                     IncreaseByADay@MonthDays:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x28
  2274  000088                     	ds	1
  2275  000089                     ?_AdjustDayLightSaving:
  2276                           	opt stack 0
  2277  000089                     AdjustDayLightSaving@dt:
  2278                           	opt stack 0
  2279                           
  2280                           ; 11 bytes @ 0x29
  2281  000089                     	ds	11
  2282  000094                     AdjustDayLightSaving@Start:
  2283                           	opt stack 0
  2284                           
  2285                           ; 2 bytes @ 0x34
  2286  000094                     	ds	2
  2287  000096                     AdjustDayLightSaving@End:
  2288                           	opt stack 0
  2289                           
  2290                           ; 2 bytes @ 0x36
  2291  000096                     	ds	2
  2292  000098                     AdjustDayLightSaving@Present:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x38
  2296  000098                     	ds	2
  2297  00009A                     ??_ReadGPS_DATE_TIME:
  2298                           
  2299                           ; 1 bytes @ 0x3A
  2300  00009A                     	ds	4
  2301  00009E                     ReadGPS_DATE_TIME@Time:
  2302                           	opt stack 0
  2303                           
  2304                           ; 7 bytes @ 0x3E
  2305  00009E                     	ds	7
  2306  0000A5                     ReadGPS_DATE_TIME@Date:
  2307                           	opt stack 0
  2308                           
  2309                           ; 7 bytes @ 0x45
  2310  0000A5                     	ds	7
  2311  0000AC                     main@i:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x4C
  2315  0000AC                     	ds	2
  2316                           tosu	equ	0xFFF
  2317                           tosh	equ	0xFFE
  2318                           tosl	equ	0xFFD
  2319                           pclath	equ	0xFFA
  2320                           tblptru	equ	0xFF8
  2321                           tblptrh	equ	0xFF7
  2322                           tblptrl	equ	0xFF6
  2323                           tablat	equ	0xFF5
  2324                           prodh	equ	0xFF4
  2325                           prodl	equ	0xFF3
  2326                           intcon	equ	0xFF2
  2327                           postinc0	equ	0xFEE
  2328                           plusw0	equ	0xFEB
  2329                           wreg	equ	0xFE8
  2330                           indf1	equ	0xFE7
  2331                           postinc1	equ	0xFE6
  2332                           postdec1	equ	0xFE5
  2333                           plusw1	equ	0xFE3
  2334                           fsr1h	equ	0xFE2
  2335                           fsr1l	equ	0xFE1
  2336                           indf2	equ	0xFDF
  2337                           postinc2	equ	0xFDE
  2338                           postdec2	equ	0xFDD
  2339                           plusw2	equ	0xFDB
  2340                           fsr2h	equ	0xFDA
  2341                           fsr2l	equ	0xFD9
  2342                           status	equ	0xFD8
  2343                           
  2344                           	psect	cstackCOMRAM
  2345  000001                     __pcstackCOMRAM:
  2346                           	opt stack 0
  2347  000001                     ?i2___lwmod:
  2348                           	opt stack 0
  2349  000001                     i2___lwmod@dividend:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x0
  2353  000001                     	ds	2
  2354  000003                     i2___lwmod@divisor:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x2
  2358  000003                     	ds	2
  2359  000005                     i2___lwmod@counter:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x4
  2363  000005                     	ds	1
  2364  000006                     ?i2_IncreaseByAYear:
  2365                           	opt stack 0
  2366  000006                     i2IncreaseByAYear@dt:
  2367                           	opt stack 0
  2368                           
  2369                           ; 11 bytes @ 0x5
  2370  000006                     	ds	11
  2371  000011                     ?i2_IncreaseByAMonth:
  2372                           	opt stack 0
  2373  000011                     i2IncreaseByAMonth@dt:
  2374                           	opt stack 0
  2375                           
  2376                           ; 11 bytes @ 0x10
  2377  000011                     	ds	11
  2378  00001C                     ?i2_IncreaseByADay:
  2379                           	opt stack 0
  2380  00001C                     i2IncreaseByADay@dt:
  2381                           	opt stack 0
  2382                           
  2383                           ; 11 bytes @ 0x1B
  2384  00001C                     	ds	11
  2385  000027                     ??i2_IncreaseByADay:
  2386                           
  2387                           ; 1 bytes @ 0x26
  2388  000027                     	ds	2
  2389  000029                     i2IncreaseByADay@MonthDays:
  2390                           	opt stack 0
  2391                           
  2392                           ; 1 bytes @ 0x28
  2393  000029                     	ds	1
  2394  00002A                     ?_IncreaseByASecond:
  2395                           	opt stack 0
  2396  00002A                     IncreaseByASecond@dt:
  2397                           	opt stack 0
  2398                           
  2399                           ; 11 bytes @ 0x29
  2400  00002A                     	ds	11
  2401  000035                     ??_Timer0_10ms:
  2402  000035                     
  2403                           ; 1 bytes @ 0x34
  2404  000035                     	ds	5
  2405  00003A                     Timer0_10ms@ThisCycle:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x39
  2409  00003A                     	ds	1
  2410  00003B                     Timer0_10ms@OutForThePorts:
  2411                           	opt stack 0
  2412                           
  2413                           ; 2 bytes @ 0x3A
  2414  00003B                     	ds	2
  2415  00003D                     Timer0_10ms@i:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x3C
  2419  00003D                     	ds	1
  2420  00003E                     Timer0_10ms@i_2890:
  2421                           	opt stack 0
  2422                           
  2423                           ; 1 bytes @ 0x3D
  2424  00003E                     	ds	1
  2425  00003F                     Timer0_10ms@i_2888:
  2426                           	opt stack 0
  2427                           
  2428                           ; 1 bytes @ 0x3E
  2429  00003F                     	ds	1
  2430  000040                     Timer0_10ms@i_2889:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x3F
  2434  000040                     	ds	1
  2435  000041                     ??_INTERRUPT_InterruptManager:
  2436                           
  2437                           ; 1 bytes @ 0x40
  2438  000041                     	ds	10
  2439                           tosu	equ	0xFFF
  2440                           tosh	equ	0xFFE
  2441                           tosl	equ	0xFFD
  2442                           pclath	equ	0xFFA
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           intcon	equ	0xFF2
  2450                           postinc0	equ	0xFEE
  2451                           plusw0	equ	0xFEB
  2452                           wreg	equ	0xFE8
  2453                           indf1	equ	0xFE7
  2454                           postinc1	equ	0xFE6
  2455                           postdec1	equ	0xFE5
  2456                           plusw1	equ	0xFE3
  2457                           fsr1h	equ	0xFE2
  2458                           fsr1l	equ	0xFE1
  2459                           indf2	equ	0xFDF
  2460                           postinc2	equ	0xFDE
  2461                           postdec2	equ	0xFDD
  2462                           plusw2	equ	0xFDB
  2463                           fsr2h	equ	0xFDA
  2464                           fsr2l	equ	0xFD9
  2465                           status	equ	0xFD8
  2466                           
  2467 ;;
  2468 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2469 ;;
  2470 ;; *************** function _main *****************
  2471 ;; Defined at:
  2472 ;;		line 53 in file "main.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;		None
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  i               2   76[BANK0 ] short 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 3F/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2490 ;;Total ram usage:        2 bytes
  2491 ;; Hardware stack levels required when called:   16
  2492 ;; This function calls:
  2493 ;;		_GetEventNumber
  2494 ;;		_Lcd_Command
  2495 ;;		_Lcd_Init
  2496 ;;		_LoadAllFromEeprom
  2497 ;;		_ReadGPS
  2498 ;;		_SYSTEM_Initialize
  2499 ;;		_StopGPS
  2500 ;;		_SwitchOnGPS
  2501 ;;		_TMR0_SetInterruptHandler
  2502 ;;		_TestGPSStartCondition
  2503 ;;		_VerifyForGPSOnTIme
  2504 ;;		_WriteEeprom
  2505 ;; This function is called by:
  2506 ;;		Startup code after reset
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           	psect	text0
  2511  0027DE                     __ptext0:
  2512                           	opt stack 0
  2513  0027DE                     _main:
  2514                           	opt stack 15
  2515                           
  2516                           ;main.c: 56: SYSTEM_Initialize();
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;incstack = 0
  2520  0027DE  EC22  F017         	call	_SYSTEM_Initialize	;wreg free
  2521                           
  2522                           ; BSR set to: 0
  2523                           ;main.c: 87: (INTCONbits.GIE = 1);
  2524  0027E2  8EF2               	bsf	intcon,7,c	;volatile
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 88: (INTCONbits.PEIE = 1);
  2528  0027E4  8CF2               	bsf	intcon,6,c	;volatile
  2529                           
  2530                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  2531  0027E6  0E0A               	movlw	low _Timer0_10ms
  2532  0027E8  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  2533  0027EA  0E13               	movlw	high _Timer0_10ms
  2534  0027EC  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2535  0027EE  EC6B  F017         	call	_TMR0_SetInterruptHandler	;wreg free
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;main.c: 91: for (INT16 i=0; i<1024; i++)
  2539  0027F2  6BAC               	clrf	main@i& (0+255),b
  2540  0027F4  6BAD               	clrf	(main@i+1)& (0+255),b
  2541  0027F6                     l4121:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 92: WriteEeprom(i,EE_Settings[i]);
  2545  0027F6  C0AC  F060         	movff	main@i,WriteEeprom@Add
  2546  0027FA  C0AD  F061         	movff	main@i+1,WriteEeprom@Add+1
  2547  0027FE  0EF0               	movlw	low _EE_Settings
  2548  002800  25AC               	addwf	main@i& (0+255),w,b
  2549  002802  6ED9               	movwf	fsr2l,c
  2550  002804  0E02               	movlw	high _EE_Settings
  2551  002806  21AD               	addwfc	(main@i+1)& (0+255),w,b
  2552  002808  6EDA               	movwf	fsr2h,c
  2553  00280A  50DF               	movf	indf2,w,c
  2554  00280C  6F62               	movwf	WriteEeprom@Data& (0+255),b
  2555  00280E  EC9F  F016         	call	_WriteEeprom	;wreg free
  2556                           
  2557                           ; BSR set to: 0
  2558  002812  4BAC               	infsnz	main@i& (0+255),f,b
  2559  002814  2BAD               	incf	(main@i+1)& (0+255),f,b
  2560                           
  2561                           ; BSR set to: 0
  2562  002816  BFAD               	btfsc	(main@i+1)& (0+255),7,b
  2563  002818  D7EE               	goto	l4121
  2564  00281A  0E04               	movlw	4
  2565  00281C  5DAD               	subwf	(main@i+1)& (0+255),w,b
  2566  00281E  E3EB               	bnc	l4121
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;main.c: 94: LoadAllFromEeprom();
  2570  002820  EC5C  F017         	call	_LoadAllFromEeprom	;wreg free
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;main.c: 96: Lcd_Init();
  2574  002824  EC9F  F013         	call	_Lcd_Init	;wreg free
  2575                           
  2576                           ;main.c: 97: Lcd_Command(1);
  2577  002828  0E01               	movlw	1
  2578  00282A  ECEC  F011         	call	_Lcd_Command
  2579                           
  2580                           ;main.c: 99: if (GPS_SYNC_AT_START == 1)
  2581  00282E  0100               	movlb	0	; () banked
  2582  002830  05E3               	decf	_GPS_SYNC_AT_START& (0+255),w,b
  2583  002832  E101               	bnz	l1003
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 100: FLAGS_0.bits.b0 = SET;
  2587  002834  81E1               	bsf	_FLAGS_0& (0+255),0,b
  2588  002836                     l1003:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 101: LATCbits.LC0 = OFF;
  2592  002836  9085               	bcf	3973,0,c	;volatile
  2593  002838                     l1004:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;main.c: 104: {
  2597                           ;main.c: 106: if (FLAGS_0.bits.b0) SwitchOnGPS();
  2598  002838  B1E1               	btfsc	_FLAGS_0& (0+255),0,b
  2599                           
  2600                           ; BSR set to: 0
  2601  00283A  EC0A  F017         	call	_SwitchOnGPS	;wreg free
  2602                           
  2603                           ; BSR set to: 0
  2604                           ;main.c: 107: if (FLAGS_0.bits.b1) VerifyForGPSOnTIme();
  2605  00283E  B3E1               	btfsc	_FLAGS_0& (0+255),1,b
  2606                           
  2607                           ; BSR set to: 0
  2608  002840  ECCA  F015         	call	_VerifyForGPSOnTIme	;wreg free
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;main.c: 108: if (FLAGS_0.bits.b2) ReadGPS();
  2612  002844  B5E1               	btfsc	_FLAGS_0& (0+255),2,b
  2613                           
  2614                           ; BSR set to: 0
  2615  002846  EC6A  F014         	call	_ReadGPS	;wreg free
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;main.c: 109: if (FLAGS_0.bits.b3) StopGPS();
  2619  00284A  B7E1               	btfsc	_FLAGS_0& (0+255),3,b
  2620                           
  2621                           ; BSR set to: 0
  2622  00284C  EC74  F017         	call	_StopGPS	;wreg free
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;main.c: 110: TestGPSStartCondition();
  2626  002850  EC4C  F016         	call	_TestGPSStartCondition	;wreg free
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;main.c: 111: NEXT_EVENT = GetEventNumber();
  2630  002854  EC92  F00F         	call	_GetEventNumber	;wreg free
  2631  002858  6E5D               	movwf	_NEXT_EVENT,c
  2632  00285A  D7EE               	goto	l1004
  2633  00285C                     __end_of_main:
  2634                           	opt stack 0
  2635                           tosu	equ	0xFFF
  2636                           tosh	equ	0xFFE
  2637                           tosl	equ	0xFFD
  2638                           pclath	equ	0xFFA
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           prodh	equ	0xFF4
  2644                           prodl	equ	0xFF3
  2645                           intcon	equ	0xFF2
  2646                           postinc0	equ	0xFEE
  2647                           plusw0	equ	0xFEB
  2648                           wreg	equ	0xFE8
  2649                           indf1	equ	0xFE7
  2650                           postinc1	equ	0xFE6
  2651                           postdec1	equ	0xFE5
  2652                           plusw1	equ	0xFE3
  2653                           fsr1h	equ	0xFE2
  2654                           fsr1l	equ	0xFE1
  2655                           indf2	equ	0xFDF
  2656                           postinc2	equ	0xFDE
  2657                           postdec2	equ	0xFDD
  2658                           plusw2	equ	0xFDB
  2659                           fsr2h	equ	0xFDA
  2660                           fsr2l	equ	0xFD9
  2661                           status	equ	0xFD8
  2662                           
  2663 ;; *************** function _WriteEeprom *****************
  2664 ;; Defined at:
  2665 ;;		line 15 in file "libs/eeprom.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;  Add             2    0[BANK0 ] unsigned short 
  2668 ;;  Data            1    2[BANK0 ] unsigned char 
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  Address         2    3[BANK0 ] struct _WORD_VAL
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  1    wreg      void 
  2673 ;; Registers used:
  2674 ;;		wreg, status,2
  2675 ;; Tracked objects:
  2676 ;;		On entry : 3F/0
  2677 ;;		On exit  : 3F/0
  2678 ;;		Unchanged: 3F/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2680 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2681 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2683 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2684 ;;Total ram usage:        5 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    9
  2687 ;; This function calls:
  2688 ;;		Nothing
  2689 ;; This function is called by:
  2690 ;;		_main
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text1
  2695  002D3E                     __ptext1:
  2696                           	opt stack 0
  2697  002D3E                     _WriteEeprom:
  2698                           	opt stack 21
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;eeprom.c: 16: WORD_VAL Address;
  2702                           ;eeprom.c: 17: Address.Val = Add;
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;incstack = 0
  2706  002D3E  C060  F063         	movff	WriteEeprom@Add,WriteEeprom@Address
  2707  002D42  C061  F064         	movff	WriteEeprom@Add+1,WriteEeprom@Address+1
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;eeprom.c: 18: NVMCON1bits.NVMREG = 00;
  2711  002D46  0E3F               	movlw	-193
  2712  002D48  1681               	andwf	3969,f,c	;volatile
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;eeprom.c: 19: NVMADRL = Address.v[0];
  2716  002D4A  C063  FF7E         	movff	WriteEeprom@Address,3966	;volatile
  2717                           
  2718                           ; BSR set to: 0
  2719                           ;eeprom.c: 20: NVMADRH = Address.v[1];
  2720  002D4E  C064  FF7F         	movff	WriteEeprom@Address+1,3967	;volatile
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;eeprom.c: 21: NVMDAT = Data;
  2724  002D52  C062  FF80         	movff	WriteEeprom@Data,3968	;volatile
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;eeprom.c: 22: NVMCON1bits.WREN = 1;
  2728  002D56  8481               	bsf	3969,2,c	;volatile
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;eeprom.c: 23: INTCONbits.GIE = 0;
  2732  002D58  9EF2               	bcf	intcon,7,c	;volatile
  2733                           
  2734                           ;eeprom.c: 24: NVMCON2 = 0x55;
  2735  002D5A  0E55               	movlw	85
  2736  002D5C  6E82               	movwf	3970,c	;volatile
  2737                           
  2738                           ;eeprom.c: 25: NVMCON2 = 0xAA;
  2739  002D5E  0EAA               	movlw	170
  2740  002D60  6E82               	movwf	3970,c	;volatile
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;eeprom.c: 26: NVMCON1bits.WR = 1;
  2744  002D62  8281               	bsf	3969,1,c	;volatile
  2745  002D64                     l445:
  2746                           
  2747                           ; BSR set to: 0
  2748  002D64  B281               	btfsc	3969,1,c	;volatile
  2749  002D66  D7FE               	goto	l445
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;eeprom.c: 28: INTCONbits.GIE = 1;
  2753  002D68  8EF2               	bsf	intcon,7,c	;volatile
  2754                           
  2755                           ;eeprom.c: 29: NVMCON1bits.WREN = 0;
  2756  002D6A  9481               	bcf	3969,2,c	;volatile
  2757                           
  2758                           ;eeprom.c: 30: NVMCON1bits.NVMREG1 = 1;
  2759  002D6C  8E81               	bsf	3969,7,c	;volatile
  2760                           
  2761                           ; BSR set to: 0
  2762  002D6E  0012               	return		;funcret
  2763  002D70                     __end_of_WriteEeprom:
  2764                           	opt stack 0
  2765                           tosu	equ	0xFFF
  2766                           tosh	equ	0xFFE
  2767                           tosl	equ	0xFFD
  2768                           pclath	equ	0xFFA
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           prodh	equ	0xFF4
  2774                           prodl	equ	0xFF3
  2775                           intcon	equ	0xFF2
  2776                           postinc0	equ	0xFEE
  2777                           plusw0	equ	0xFEB
  2778                           wreg	equ	0xFE8
  2779                           indf1	equ	0xFE7
  2780                           postinc1	equ	0xFE6
  2781                           postdec1	equ	0xFE5
  2782                           plusw1	equ	0xFE3
  2783                           fsr1h	equ	0xFE2
  2784                           fsr1l	equ	0xFE1
  2785                           indf2	equ	0xFDF
  2786                           postinc2	equ	0xFDE
  2787                           postdec2	equ	0xFDD
  2788                           plusw2	equ	0xFDB
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _VerifyForGPSOnTIme *****************
  2794 ;; Defined at:
  2795 ;;		line 157 in file "libs/funcs.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  TimeDiff        4    0[BANK0 ] long 
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2, status,0
  2804 ;; Tracked objects:
  2805 ;;		On entry : 3F/0
  2806 ;;		On exit  : 3F/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2810 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2812 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2813 ;;Total ram usage:        4 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; Hardware stack levels required when called:    9
  2816 ;; This function calls:
  2817 ;;		Nothing
  2818 ;; This function is called by:
  2819 ;;		_main
  2820 ;; This function uses a non-reentrant model
  2821 ;;
  2822                           
  2823                           	psect	text2
  2824  002B94                     __ptext2:
  2825                           	opt stack 0
  2826  002B94                     _VerifyForGPSOnTIme:
  2827                           	opt stack 21
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;funcs.c: 158: INT32 TimeDiff = DATE_TIME.SECOND - TIME_WHEN_GPS_IS_SWITCHED_ON;
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;incstack = 0
  2834  002B94  51C8               	movf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),w,b
  2835  002B96  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  2836  002B98  6F60               	movwf	VerifyForGPSOnTIme@TimeDiff& (0+255),b
  2837  002B9A  51C9               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),w,b
  2838  002B9C  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  2839  002B9E  6F61               	movwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),b
  2840  002BA0  51CA               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),w,b
  2841  002BA2  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  2842  002BA4  6F62               	movwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),b
  2843  002BA6  51CB               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),w,b
  2844  002BA8  59BC               	subwfb	(_DATE_TIME+3)& (0+255),w,b
  2845  002BAA  6F63               	movwf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),b
  2846                           
  2847                           ;funcs.c: 159: if (TimeDiff<0)
  2848  002BAC  AF63               	btfss	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  2849  002BAE  D008               	goto	l665
  2850                           
  2851                           ; BSR set to: 0
  2852                           ;funcs.c: 160: TimeDiff += 86400;
  2853  002BB0  0E80               	movlw	128
  2854  002BB2  2760               	addwf	VerifyForGPSOnTIme@TimeDiff& (0+255),f,b
  2855  002BB4  0E51               	movlw	81
  2856  002BB6  2361               	addwfc	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),f,b
  2857  002BB8  0E01               	movlw	1
  2858  002BBA  2362               	addwfc	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),f,b
  2859  002BBC  0E00               	movlw	0
  2860  002BBE  2363               	addwfc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),f,b
  2861  002BC0                     l665:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;funcs.c: 161: if (TimeDiff >= (20*60)) {
  2865  002BC0  BF63               	btfsc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  2866  002BC2  0012               	return	
  2867  002BC4  5163               	movf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),w,b
  2868  002BC6  1162               	iorwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),w,b
  2869  002BC8  E106               	bnz	u3690
  2870  002BCA  0EB0               	movlw	176
  2871  002BCC  5D60               	subwf	VerifyForGPSOnTIme@TimeDiff& (0+255),w,b
  2872  002BCE  0E04               	movlw	4
  2873  002BD0  5961               	subwfb	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),w,b
  2874  002BD2  A0D8               	btfss	status,0,c
  2875  002BD4  0012               	return	
  2876  002BD6                     u3690:
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;funcs.c: 162: FLAGS_0.bits.b2 = SET;
  2880  002BD6  85E1               	bsf	_FLAGS_0& (0+255),2,b
  2881                           
  2882                           ;funcs.c: 163: FLAGS_0.bits.b1 = RESET;
  2883  002BD8  93E1               	bcf	_FLAGS_0& (0+255),1,b
  2884                           
  2885                           ; BSR set to: 0
  2886  002BDA  0012               	return		;funcret
  2887  002BDC                     __end_of_VerifyForGPSOnTIme:
  2888                           	opt stack 0
  2889                           tosu	equ	0xFFF
  2890                           tosh	equ	0xFFE
  2891                           tosl	equ	0xFFD
  2892                           pclath	equ	0xFFA
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           prodh	equ	0xFF4
  2898                           prodl	equ	0xFF3
  2899                           intcon	equ	0xFF2
  2900                           postinc0	equ	0xFEE
  2901                           plusw0	equ	0xFEB
  2902                           wreg	equ	0xFE8
  2903                           indf1	equ	0xFE7
  2904                           postinc1	equ	0xFE6
  2905                           postdec1	equ	0xFE5
  2906                           plusw1	equ	0xFE3
  2907                           fsr1h	equ	0xFE2
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           postdec2	equ	0xFDD
  2912                           plusw2	equ	0xFDB
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _TestGPSStartCondition *****************
  2918 ;; Defined at:
  2919 ;;		line 191 in file "libs/funcs.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2, status,0
  2928 ;; Tracked objects:
  2929 ;;		On entry : 3F/0
  2930 ;;		On exit  : 3F/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2936 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2937 ;;Total ram usage:        1 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    9
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text3
  2948  002C98                     __ptext3:
  2949                           	opt stack 0
  2950  002C98                     _TestGPSStartCondition:
  2951                           	opt stack 21
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;funcs.c: 192: if ((DATE_TIME.SECOND == GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME)
  2955                           ;funcs.c: 193: || (TIME_AT_LAST_GPS_SYNC >= GPS_SYNC_EVERY_x_SECONDS))
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;incstack = 0
  2959  002C98  51CC               	movf	_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME& (0+255),w,b
  2960  002C9A  19B9               	xorwf	_DATE_TIME& (0+255),w,b
  2961  002C9C  E109               	bnz	u3740
  2962  002C9E  51CD               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),w,b
  2963  002CA0  19BA               	xorwf	(_DATE_TIME+1)& (0+255),w,b
  2964  002CA2  E106               	bnz	u3740
  2965  002CA4  51CE               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),w,b
  2966  002CA6  19BB               	xorwf	(_DATE_TIME+2)& (0+255),w,b
  2967  002CA8  E103               	bnz	u3740
  2968  002CAA  51CF               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),w,b
  2969  002CAC  19BC               	xorwf	(_DATE_TIME+3)& (0+255),w,b
  2970  002CAE  E00E               	bz	l683
  2971  002CB0                     u3740:
  2972                           
  2973                           ; BSR set to: 0
  2974  002CB0  51D0               	movf	_GPS_SYNC_EVERY_x_SECONDS& (0+255),w,b
  2975  002CB2  5DC4               	subwf	_TIME_AT_LAST_GPS_SYNC& (0+255),w,b
  2976  002CB4  51D1               	movf	(_GPS_SYNC_EVERY_x_SECONDS+1)& (0+255),w,b
  2977  002CB6  59C5               	subwfb	(_TIME_AT_LAST_GPS_SYNC+1)& (0+255),w,b
  2978  002CB8  51D2               	movf	(_GPS_SYNC_EVERY_x_SECONDS+2)& (0+255),w,b
  2979  002CBA  59C6               	subwfb	(_TIME_AT_LAST_GPS_SYNC+2)& (0+255),w,b
  2980  002CBC  51C7               	movf	(_TIME_AT_LAST_GPS_SYNC+3)& (0+255),w,b
  2981  002CBE  0A80               	xorlw	128
  2982  002CC0  6F60               	movwf	??_TestGPSStartCondition& (0+255),b
  2983  002CC2  51D3               	movf	(_GPS_SYNC_EVERY_x_SECONDS+3)& (0+255),w,b
  2984  002CC4  0A80               	xorlw	128
  2985  002CC6  5960               	subwfb	??_TestGPSStartCondition& (0+255),w,b
  2986  002CC8  A0D8               	btfss	status,0,c
  2987  002CCA  0012               	return	
  2988  002CCC                     l683:
  2989                           
  2990                           ; BSR set to: 0
  2991                           ;funcs.c: 194: FLAGS_0.bits.b0 = SET;
  2992  002CCC  81E1               	bsf	_FLAGS_0& (0+255),0,b
  2993                           
  2994                           ; BSR set to: 0
  2995  002CCE  0012               	return		;funcret
  2996  002CD0                     __end_of_TestGPSStartCondition:
  2997                           	opt stack 0
  2998                           tosu	equ	0xFFF
  2999                           tosh	equ	0xFFE
  3000                           tosl	equ	0xFFD
  3001                           pclath	equ	0xFFA
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           prodh	equ	0xFF4
  3007                           prodl	equ	0xFF3
  3008                           intcon	equ	0xFF2
  3009                           postinc0	equ	0xFEE
  3010                           plusw0	equ	0xFEB
  3011                           wreg	equ	0xFE8
  3012                           indf1	equ	0xFE7
  3013                           postinc1	equ	0xFE6
  3014                           postdec1	equ	0xFE5
  3015                           plusw1	equ	0xFE3
  3016                           fsr1h	equ	0xFE2
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           plusw2	equ	0xFDB
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _SwitchOnGPS *****************
  3027 ;; Defined at:
  3028 ;;		line 149 in file "libs/funcs.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		None
  3037 ;; Tracked objects:
  3038 ;;		On entry : 3F/0
  3039 ;;		On exit  : 3F/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    9
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_main
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text4
  3057  002E14                     __ptext4:
  3058                           	opt stack 0
  3059  002E14                     _SwitchOnGPS:
  3060                           	opt stack 21
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;funcs.c: 150: LATCbits.LC1 = ON;
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;incstack = 0
  3067  002E14  8285               	bsf	3973,1,c	;volatile
  3068                           
  3069                           ;funcs.c: 151: NO_OF_TIMES_GPS_FAILED = 0;
  3070  002E16  6BE2               	clrf	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  3071                           
  3072                           ;funcs.c: 152: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND;
  3073  002E18  C0B9  F0C8         	movff	_DATE_TIME,_TIME_WHEN_GPS_IS_SWITCHED_ON
  3074  002E1C  C0BA  F0C9         	movff	_DATE_TIME+1,_TIME_WHEN_GPS_IS_SWITCHED_ON+1
  3075  002E20  C0BB  F0CA         	movff	_DATE_TIME+2,_TIME_WHEN_GPS_IS_SWITCHED_ON+2
  3076  002E24  C0BC  F0CB         	movff	_DATE_TIME+3,_TIME_WHEN_GPS_IS_SWITCHED_ON+3
  3077                           
  3078                           ;funcs.c: 153: FLAGS_0.bits.b1 = SET;
  3079  002E28  83E1               	bsf	_FLAGS_0& (0+255),1,b
  3080                           
  3081                           ;funcs.c: 154: FLAGS_0.bits.b0 = RESET;
  3082  002E2A  91E1               	bcf	_FLAGS_0& (0+255),0,b
  3083                           
  3084                           ; BSR set to: 0
  3085  002E2C  0012               	return		;funcret
  3086  002E2E                     __end_of_SwitchOnGPS:
  3087                           	opt stack 0
  3088                           tosu	equ	0xFFF
  3089                           tosh	equ	0xFFE
  3090                           tosl	equ	0xFFD
  3091                           pclath	equ	0xFFA
  3092                           tblptru	equ	0xFF8
  3093                           tblptrh	equ	0xFF7
  3094                           tblptrl	equ	0xFF6
  3095                           tablat	equ	0xFF5
  3096                           prodh	equ	0xFF4
  3097                           prodl	equ	0xFF3
  3098                           intcon	equ	0xFF2
  3099                           postinc0	equ	0xFEE
  3100                           plusw0	equ	0xFEB
  3101                           wreg	equ	0xFE8
  3102                           indf1	equ	0xFE7
  3103                           postinc1	equ	0xFE6
  3104                           postdec1	equ	0xFE5
  3105                           plusw1	equ	0xFE3
  3106                           fsr1h	equ	0xFE2
  3107                           fsr1l	equ	0xFE1
  3108                           indf2	equ	0xFDF
  3109                           postinc2	equ	0xFDE
  3110                           postdec2	equ	0xFDD
  3111                           plusw2	equ	0xFDB
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _StopGPS *****************
  3117 ;; Defined at:
  3118 ;;		line 186 in file "libs/funcs.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		None
  3127 ;; Tracked objects:
  3128 ;;		On entry : 3F/0
  3129 ;;		On exit  : 3F/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    9
  3139 ;; This function calls:
  3140 ;;		Nothing
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text5
  3147  002EE8                     __ptext5:
  3148                           	opt stack 0
  3149  002EE8                     _StopGPS:
  3150                           	opt stack 21
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;funcs.c: 187: LATCbits.LC1 = OFF;
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;incstack = 0
  3157  002EE8  9285               	bcf	3973,1,c	;volatile
  3158                           
  3159                           ;funcs.c: 188: FLAGS_0.bits.b3 = RESET;
  3160  002EEA  97E1               	bcf	_FLAGS_0& (0+255),3,b
  3161                           
  3162                           ; BSR set to: 0
  3163  002EEC  0012               	return		;funcret
  3164  002EEE                     __end_of_StopGPS:
  3165                           	opt stack 0
  3166                           tosu	equ	0xFFF
  3167                           tosh	equ	0xFFE
  3168                           tosl	equ	0xFFD
  3169                           pclath	equ	0xFFA
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           prodh	equ	0xFF4
  3175                           prodl	equ	0xFF3
  3176                           intcon	equ	0xFF2
  3177                           postinc0	equ	0xFEE
  3178                           plusw0	equ	0xFEB
  3179                           wreg	equ	0xFE8
  3180                           indf1	equ	0xFE7
  3181                           postinc1	equ	0xFE6
  3182                           postdec1	equ	0xFE5
  3183                           plusw1	equ	0xFE3
  3184                           fsr1h	equ	0xFE2
  3185                           fsr1l	equ	0xFE1
  3186                           indf2	equ	0xFDF
  3187                           postinc2	equ	0xFDE
  3188                           postdec2	equ	0xFDD
  3189                           plusw2	equ	0xFDB
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _SYSTEM_Initialize *****************
  3195 ;; Defined at:
  3196 ;;		line 107 in file "mcc_generated_files/mcc.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;		None
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		wreg, status,2, status,0, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 3F/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3214 ;;Total ram usage:        0 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:   11
  3217 ;; This function calls:
  3218 ;;		_EUSART1_Initialize
  3219 ;;		_INTERRUPT_Initialize
  3220 ;;		_OSCILLATOR_Initialize
  3221 ;;		_PIN_MANAGER_Initialize
  3222 ;;		_TMR0_Initialize
  3223 ;; This function is called by:
  3224 ;;		_main
  3225 ;; This function uses a non-reentrant model
  3226 ;;
  3227                           
  3228                           	psect	text6
  3229  002E44                     __ptext6:
  3230                           	opt stack 0
  3231  002E44                     _SYSTEM_Initialize:
  3232                           	opt stack 19
  3233                           
  3234                           ;mcc.c: 110: INTERRUPT_Initialize();
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;incstack = 0
  3238  002E44  EC79  F017         	call	_INTERRUPT_Initialize	;wreg free
  3239                           
  3240                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  3241  002E48  ECD3  F014         	call	_PIN_MANAGER_Initialize	;wreg free
  3242                           
  3243                           ;mcc.c: 112: OSCILLATOR_Initialize();
  3244  002E4C  EC17  F017         	call	_OSCILLATOR_Initialize	;wreg free
  3245                           
  3246                           ; BSR set to: 14
  3247                           ;mcc.c: 113: TMR0_Initialize();
  3248  002E50  ECEE  F015         	call	_TMR0_Initialize	;wreg free
  3249                           
  3250                           ; BSR set to: 0
  3251                           ;mcc.c: 114: EUSART1_Initialize();
  3252  002E54  EF2C  F017         	goto	_EUSART1_Initialize	;wreg free
  3253  002E58                     __end_of_SYSTEM_Initialize:
  3254                           	opt stack 0
  3255                           tosu	equ	0xFFF
  3256                           tosh	equ	0xFFE
  3257                           tosl	equ	0xFFD
  3258                           pclath	equ	0xFFA
  3259                           tblptru	equ	0xFF8
  3260                           tblptrh	equ	0xFF7
  3261                           tblptrl	equ	0xFF6
  3262                           tablat	equ	0xFF5
  3263                           prodh	equ	0xFF4
  3264                           prodl	equ	0xFF3
  3265                           intcon	equ	0xFF2
  3266                           postinc0	equ	0xFEE
  3267                           plusw0	equ	0xFEB
  3268                           wreg	equ	0xFE8
  3269                           indf1	equ	0xFE7
  3270                           postinc1	equ	0xFE6
  3271                           postdec1	equ	0xFE5
  3272                           plusw1	equ	0xFE3
  3273                           fsr1h	equ	0xFE2
  3274                           fsr1l	equ	0xFE1
  3275                           indf2	equ	0xFDF
  3276                           postinc2	equ	0xFDE
  3277                           postdec2	equ	0xFDD
  3278                           plusw2	equ	0xFDB
  3279                           fsr2h	equ	0xFDA
  3280                           fsr2l	equ	0xFD9
  3281                           status	equ	0xFD8
  3282                           
  3283 ;; *************** function _TMR0_Initialize *****************
  3284 ;; Defined at:
  3285 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;		None
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 3F/E
  3296 ;;		On exit  : 3F/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3303 ;;Total ram usage:        2 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:   10
  3306 ;; This function calls:
  3307 ;;		_TMR0_SetInterruptHandler
  3308 ;;		_TMR0_StartTimer
  3309 ;; This function is called by:
  3310 ;;		_SYSTEM_Initialize
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text7
  3315  002BDC                     __ptext7:
  3316                           	opt stack 0
  3317  002BDC                     _TMR0_Initialize:
  3318                           	opt stack 19
  3319                           
  3320                           ; BSR set to: 14
  3321                           ;tmr0.c: 70: T0CON0 = 0x10;
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;incstack = 0
  3325  002BDC  0E10               	movlw	16
  3326  002BDE  6ED5               	movwf	4053,c	;volatile
  3327                           
  3328                           ;tmr0.c: 73: T0CON1 = 0x50;
  3329  002BE0  0E50               	movlw	80
  3330  002BE2  6ED6               	movwf	4054,c	;volatile
  3331                           
  3332                           ;tmr0.c: 76: TMR0H = 0xD8;
  3333  002BE4  0ED8               	movlw	216
  3334  002BE6  6ED4               	movwf	4052,c	;volatile
  3335                           
  3336                           ;tmr0.c: 79: TMR0L = 0xF0;
  3337  002BE8  0EF0               	movlw	240
  3338  002BEA  6ED3               	movwf	4051,c	;volatile
  3339                           
  3340                           ; BSR set to: 14
  3341                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  3342  002BEC  50D3               	movf	4051,w,c	;volatile
  3343  002BEE  CFD4 F062          	movff	4052,??_TMR0_Initialize	;volatile
  3344  002BF2  0100               	movlb	0	; () banked
  3345  002BF4  6B63               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  3346  002BF6  C062  F063         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  3347  002BFA  6B62               	clrf	??_TMR0_Initialize& (0+255),b
  3348  002BFC  1162               	iorwf	??_TMR0_Initialize& (0+255),w,b
  3349  002BFE  6E4B               	movwf	_timer0ReloadVal16bit,c	;volatile
  3350  002C00  5163               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  3351  002C02  6E4C               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
  3355  002C04  010E               	movlb	14	; () banked
  3356  002C06  9BCA               	bcf	202,5,b	;volatile
  3357                           
  3358                           ; BSR set to: 14
  3359                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
  3360  002C08  8BC2               	bsf	194,5,b	;volatile
  3361                           
  3362                           ; BSR set to: 14
  3363                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3364  002C0A  0EF8               	movlw	low _TMR0_DefaultInterruptHandler
  3365  002C0C  0100               	movlb	0	; () banked
  3366  002C0E  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  3367  002C10  0E2E               	movlw	high _TMR0_DefaultInterruptHandler
  3368  002C12  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3369  002C14  EC6B  F017         	call	_TMR0_SetInterruptHandler	;wreg free
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;tmr0.c: 94: TMR0_StartTimer();
  3373  002C18  EF77  F017         	goto	_TMR0_StartTimer	;wreg free
  3374  002C1C                     __end_of_TMR0_Initialize:
  3375                           	opt stack 0
  3376                           tosu	equ	0xFFF
  3377                           tosh	equ	0xFFE
  3378                           tosl	equ	0xFFD
  3379                           pclath	equ	0xFFA
  3380                           tblptru	equ	0xFF8
  3381                           tblptrh	equ	0xFF7
  3382                           tblptrl	equ	0xFF6
  3383                           tablat	equ	0xFF5
  3384                           prodh	equ	0xFF4
  3385                           prodl	equ	0xFF3
  3386                           intcon	equ	0xFF2
  3387                           postinc0	equ	0xFEE
  3388                           plusw0	equ	0xFEB
  3389                           wreg	equ	0xFE8
  3390                           indf1	equ	0xFE7
  3391                           postinc1	equ	0xFE6
  3392                           postdec1	equ	0xFE5
  3393                           plusw1	equ	0xFE3
  3394                           fsr1h	equ	0xFE2
  3395                           fsr1l	equ	0xFE1
  3396                           indf2	equ	0xFDF
  3397                           postinc2	equ	0xFDE
  3398                           postdec2	equ	0xFDD
  3399                           plusw2	equ	0xFDB
  3400                           fsr2h	equ	0xFDA
  3401                           fsr2l	equ	0xFD9
  3402                           status	equ	0xFD8
  3403                           
  3404 ;; *************** function _TMR0_StartTimer *****************
  3405 ;; Defined at:
  3406 ;;		line 97 in file "mcc_generated_files/tmr0.c"
  3407 ;; Parameters:    Size  Location     Type
  3408 ;;		None
  3409 ;; Auto vars:     Size  Location     Type
  3410 ;;		None
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  1    wreg      void 
  3413 ;; Registers used:
  3414 ;;		None
  3415 ;; Tracked objects:
  3416 ;;		On entry : 3F/0
  3417 ;;		On exit  : 3F/0
  3418 ;;		Unchanged: 3F/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3424 ;;Total ram usage:        0 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    9
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_TMR0_Initialize
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text8
  3435  002EEE                     __ptext8:
  3436                           	opt stack 0
  3437  002EEE                     _TMR0_StartTimer:
  3438                           	opt stack 19
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;incstack = 0
  3445  002EEE  8ED5               	bsf	4053,7,c	;volatile
  3446                           
  3447                           ; BSR set to: 0
  3448  002EF0  0012               	return		;funcret
  3449  002EF2                     __end_of_TMR0_StartTimer:
  3450                           	opt stack 0
  3451                           tosu	equ	0xFFF
  3452                           tosh	equ	0xFFE
  3453                           tosl	equ	0xFFD
  3454                           pclath	equ	0xFFA
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           intcon	equ	0xFF2
  3462                           postinc0	equ	0xFEE
  3463                           plusw0	equ	0xFEB
  3464                           wreg	equ	0xFE8
  3465                           indf1	equ	0xFE7
  3466                           postinc1	equ	0xFE6
  3467                           postdec1	equ	0xFE5
  3468                           plusw1	equ	0xFE3
  3469                           fsr1h	equ	0xFE2
  3470                           fsr1l	equ	0xFE1
  3471                           indf2	equ	0xFDF
  3472                           postinc2	equ	0xFDE
  3473                           postdec2	equ	0xFDD
  3474                           plusw2	equ	0xFDB
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _TMR0_SetInterruptHandler *****************
  3480 ;; Defined at:
  3481 ;;		line 161 in file "mcc_generated_files/tmr0.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3484 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, status,2, status,0
  3491 ;; Tracked objects:
  3492 ;;		On entry : 3F/0
  3493 ;;		On exit  : 3F/0
  3494 ;;		Unchanged: 3F/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3496 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3500 ;;Total ram usage:        2 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    9
  3503 ;; This function calls:
  3504 ;;		Nothing
  3505 ;; This function is called by:
  3506 ;;		_TMR0_Initialize
  3507 ;;		_main
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text9
  3512  002ED6                     __ptext9:
  3513                           	opt stack 0
  3514  002ED6                     _TMR0_SetInterruptHandler:
  3515                           	opt stack 21
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;incstack = 0
  3522  002ED6  C060  F0DC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  3523  002EDA  C061  F0DD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  3524                           
  3525                           ; BSR set to: 0
  3526  002EDE  0012               	return		;funcret
  3527  002EE0                     __end_of_TMR0_SetInterruptHandler:
  3528                           	opt stack 0
  3529                           tosu	equ	0xFFF
  3530                           tosh	equ	0xFFE
  3531                           tosl	equ	0xFFD
  3532                           pclath	equ	0xFFA
  3533                           tblptru	equ	0xFF8
  3534                           tblptrh	equ	0xFF7
  3535                           tblptrl	equ	0xFF6
  3536                           tablat	equ	0xFF5
  3537                           prodh	equ	0xFF4
  3538                           prodl	equ	0xFF3
  3539                           intcon	equ	0xFF2
  3540                           postinc0	equ	0xFEE
  3541                           plusw0	equ	0xFEB
  3542                           wreg	equ	0xFE8
  3543                           indf1	equ	0xFE7
  3544                           postinc1	equ	0xFE6
  3545                           postdec1	equ	0xFE5
  3546                           plusw1	equ	0xFE3
  3547                           fsr1h	equ	0xFE2
  3548                           fsr1l	equ	0xFE1
  3549                           indf2	equ	0xFDF
  3550                           postinc2	equ	0xFDE
  3551                           postdec2	equ	0xFDD
  3552                           plusw2	equ	0xFDB
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _PIN_MANAGER_Initialize *****************
  3558 ;; Defined at:
  3559 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  state           1    0[BANK0 ] unsigned char 
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3574 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3577 ;;Total ram usage:        1 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    9
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_SYSTEM_Initialize
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text10
  3588  0029A6                     __ptext10:
  3589                           	opt stack 0
  3590  0029A6                     _PIN_MANAGER_Initialize:
  3591                           	opt stack 20
  3592                           
  3593                           ;pin_manager.c: 57: LATA = 0x00;
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;incstack = 0
  3597  0029A6  6A83               	clrf	3971,c	;volatile
  3598                           
  3599                           ;pin_manager.c: 58: LATB = 0x00;
  3600  0029A8  6A84               	clrf	3972,c	;volatile
  3601                           
  3602                           ;pin_manager.c: 59: LATC = 0x00;
  3603  0029AA  6A85               	clrf	3973,c	;volatile
  3604                           
  3605                           ;pin_manager.c: 64: TRISA = 0xC0;
  3606  0029AC  0EC0               	movlw	192
  3607  0029AE  6E88               	movwf	3976,c	;volatile
  3608                           
  3609                           ;pin_manager.c: 65: TRISB = 0x00;
  3610  0029B0  6A89               	clrf	3977,c	;volatile
  3611                           
  3612                           ;pin_manager.c: 66: TRISC = 0x84;
  3613  0029B2  0E84               	movlw	132
  3614  0029B4  6E8A               	movwf	3978,c	;volatile
  3615                           
  3616                           ;pin_manager.c: 71: ANSELC = 0x44;
  3617  0029B6  0E44               	movlw	68
  3618  0029B8  010F               	movlb	15	; () banked
  3619  0029BA  6F21               	movwf	33,b	;volatile
  3620                           
  3621                           ; BSR set to: 15
  3622                           ;pin_manager.c: 72: ANSELB = 0x00;
  3623  0029BC  6B19               	clrf	25,b	;volatile
  3624                           
  3625                           ;pin_manager.c: 73: ANSELA = 0xC0;
  3626  0029BE  0EC0               	movlw	192
  3627  0029C0  6F11               	movwf	17,b	;volatile
  3628                           
  3629                           ; BSR set to: 15
  3630                           ;pin_manager.c: 78: WPUE = 0x00;
  3631  0029C2  6B2D               	clrf	45,b	;volatile
  3632                           
  3633                           ; BSR set to: 15
  3634                           ;pin_manager.c: 79: WPUB = 0x00;
  3635  0029C4  6B18               	clrf	24,b	;volatile
  3636                           
  3637                           ; BSR set to: 15
  3638                           ;pin_manager.c: 80: WPUA = 0x00;
  3639  0029C6  6B10               	clrf	16,b	;volatile
  3640                           
  3641                           ; BSR set to: 15
  3642                           ;pin_manager.c: 81: WPUC = 0x00;
  3643  0029C8  6B20               	clrf	32,b	;volatile
  3644                           
  3645                           ; BSR set to: 15
  3646                           ;pin_manager.c: 86: ODCONA = 0x00;
  3647  0029CA  6B0F               	clrf	15,b	;volatile
  3648                           
  3649                           ; BSR set to: 15
  3650                           ;pin_manager.c: 87: ODCONB = 0x00;
  3651  0029CC  6B17               	clrf	23,b	;volatile
  3652                           
  3653                           ; BSR set to: 15
  3654                           ;pin_manager.c: 88: ODCONC = 0x00;
  3655  0029CE  6B1F               	clrf	31,b	;volatile
  3656                           
  3657                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  3658  0029D0  0E00               	movlw	0
  3659  0029D2  BEF2               	btfsc	intcon,7,c	;volatile
  3660  0029D4  0E01               	movlw	1
  3661  0029D6  0100               	movlb	0	; () banked
  3662  0029D8  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;pin_manager.c: 96: GIE = 0;
  3666  0029DA  9EF2               	bcf	intcon,7,c	;volatile
  3667                           
  3668                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  3669  0029DC  0E55               	movlw	85
  3670  0029DE  010E               	movlb	14	; () banked
  3671  0029E0  6FA0               	movwf	160,b	;volatile
  3672                           
  3673                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  3674  0029E2  0EAA               	movlw	170
  3675  0029E4  6FA0               	movwf	160,b	;volatile
  3676                           
  3677                           ; BSR set to: 14
  3678                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  3679  0029E6  91A0               	bcf	160,0,b	;volatile
  3680                           
  3681                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  3682  0029E8  51B5               	movf	181,w,b	;volatile
  3683  0029EA  0BE0               	andlw	-32
  3684  0029EC  0917               	iorlw	23
  3685  0029EE  6FB5               	movwf	181,b	;volatile
  3686                           
  3687                           ;pin_manager.c: 102: RC6PPS = 0x09;
  3688  0029F0  0E09               	movlw	9
  3689  0029F2  6FFD               	movwf	253,b	;volatile
  3690                           
  3691                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  3692  0029F4  0E55               	movlw	85
  3693  0029F6  6FA0               	movwf	160,b	;volatile
  3694                           
  3695                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  3696  0029F8  0EAA               	movlw	170
  3697  0029FA  6FA0               	movwf	160,b	;volatile
  3698                           
  3699                           ; BSR set to: 14
  3700                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  3701  0029FC  81A0               	bsf	160,0,b	;volatile
  3702                           
  3703                           ; BSR set to: 14
  3704                           ;pin_manager.c: 108: GIE = state;
  3705  0029FE  0100               	movlb	0	; () banked
  3706  002A00  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  3707  002A02  D002               	goto	u3610
  3708  002A04  8EF2               	bsf	intcon,7,c	;volatile
  3709  002A06  0CAA               	retlw	170
  3710  002A08                     u3610:
  3711  002A08  9EF2               	bcf	intcon,7,c	;volatile
  3712  002A0A  0012               	return		;funcret
  3713  002A0C                     __end_of_PIN_MANAGER_Initialize:
  3714                           	opt stack 0
  3715                           tosu	equ	0xFFF
  3716                           tosh	equ	0xFFE
  3717                           tosl	equ	0xFFD
  3718                           pclath	equ	0xFFA
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           intcon	equ	0xFF2
  3726                           postinc0	equ	0xFEE
  3727                           plusw0	equ	0xFEB
  3728                           wreg	equ	0xFE8
  3729                           indf1	equ	0xFE7
  3730                           postinc1	equ	0xFE6
  3731                           postdec1	equ	0xFE5
  3732                           plusw1	equ	0xFE3
  3733                           fsr1h	equ	0xFE2
  3734                           fsr1l	equ	0xFE1
  3735                           indf2	equ	0xFDF
  3736                           postinc2	equ	0xFDE
  3737                           postdec2	equ	0xFDD
  3738                           plusw2	equ	0xFDB
  3739                           fsr2h	equ	0xFDA
  3740                           fsr2l	equ	0xFD9
  3741                           status	equ	0xFD8
  3742                           
  3743 ;; *************** function _OSCILLATOR_Initialize *****************
  3744 ;; Defined at:
  3745 ;;		line 117 in file "mcc_generated_files/mcc.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;		None
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;		None
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  1    wreg      void 
  3752 ;; Registers used:
  3753 ;;		wreg, status,2
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 3F/E
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3763 ;;Total ram usage:        0 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    9
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_SYSTEM_Initialize
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           	psect	text11
  3774  002E2E                     __ptext11:
  3775                           	opt stack 0
  3776  002E2E                     _OSCILLATOR_Initialize:
  3777                           	opt stack 20
  3778                           
  3779                           ;mcc.c: 120: OSCCON1 = 0x22;
  3780                           
  3781                           ;incstack = 0
  3782  002E2E  0E22               	movlw	34
  3783  002E30  010E               	movlb	14	; () banked
  3784  002E32  6FD8               	movwf	216,b	;volatile
  3785                           
  3786                           ; BSR set to: 14
  3787                           ;mcc.c: 122: OSCCON3 = 0x00;
  3788  002E34  6BDA               	clrf	218,b	;volatile
  3789                           
  3790                           ; BSR set to: 14
  3791                           ;mcc.c: 124: OSCEN = 0x00;
  3792  002E36  6BDC               	clrf	220,b	;volatile
  3793                           
  3794                           ;mcc.c: 126: OSCFRQ = 0x02;
  3795  002E38  0E02               	movlw	2
  3796  002E3A  6FDE               	movwf	222,b	;volatile
  3797                           
  3798                           ; BSR set to: 14
  3799                           ;mcc.c: 128: OSCTUNE = 0x00;
  3800  002E3C  6BDD               	clrf	221,b	;volatile
  3801  002E3E                     l824:
  3802                           
  3803                           ; BSR set to: 14
  3804  002E3E  B1DB               	btfsc	219,0,b	;volatile
  3805                           
  3806                           ; BSR set to: 14
  3807  002E40  0012               	return		;funcret
  3808  002E42  D7FD               	goto	l824
  3809  002E44                     __end_of_OSCILLATOR_Initialize:
  3810                           	opt stack 0
  3811                           tosu	equ	0xFFF
  3812                           tosh	equ	0xFFE
  3813                           tosl	equ	0xFFD
  3814                           pclath	equ	0xFFA
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           prodh	equ	0xFF4
  3820                           prodl	equ	0xFF3
  3821                           intcon	equ	0xFF2
  3822                           postinc0	equ	0xFEE
  3823                           plusw0	equ	0xFEB
  3824                           wreg	equ	0xFE8
  3825                           indf1	equ	0xFE7
  3826                           postinc1	equ	0xFE6
  3827                           postdec1	equ	0xFE5
  3828                           plusw1	equ	0xFE3
  3829                           fsr1h	equ	0xFE2
  3830                           fsr1l	equ	0xFE1
  3831                           indf2	equ	0xFDF
  3832                           postinc2	equ	0xFDE
  3833                           postdec2	equ	0xFDD
  3834                           plusw2	equ	0xFDB
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _INTERRUPT_Initialize *****************
  3840 ;; Defined at:
  3841 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		None
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    9
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_SYSTEM_Initialize
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text12
  3870  002EF2                     __ptext12:
  3871                           	opt stack 0
  3872  002EF2                     _INTERRUPT_Initialize:
  3873                           	opt stack 20
  3874                           
  3875                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  3876                           
  3877                           ; BSR set to: 14
  3878                           ;incstack = 0
  3879  002EF2  9AF2               	bcf	intcon,5,c	;volatile
  3880  002EF4  0012               	return		;funcret
  3881  002EF6                     __end_of_INTERRUPT_Initialize:
  3882                           	opt stack 0
  3883                           tosu	equ	0xFFF
  3884                           tosh	equ	0xFFE
  3885                           tosl	equ	0xFFD
  3886                           pclath	equ	0xFFA
  3887                           tblptru	equ	0xFF8
  3888                           tblptrh	equ	0xFF7
  3889                           tblptrl	equ	0xFF6
  3890                           tablat	equ	0xFF5
  3891                           prodh	equ	0xFF4
  3892                           prodl	equ	0xFF3
  3893                           intcon	equ	0xFF2
  3894                           postinc0	equ	0xFEE
  3895                           plusw0	equ	0xFEB
  3896                           wreg	equ	0xFE8
  3897                           indf1	equ	0xFE7
  3898                           postinc1	equ	0xFE6
  3899                           postdec1	equ	0xFE5
  3900                           plusw1	equ	0xFE3
  3901                           fsr1h	equ	0xFE2
  3902                           fsr1l	equ	0xFE1
  3903                           indf2	equ	0xFDF
  3904                           postinc2	equ	0xFDE
  3905                           postdec2	equ	0xFDD
  3906                           plusw2	equ	0xFDB
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function _ReadGPS *****************
  3912 ;; Defined at:
  3913 ;;		line 167 in file "libs/funcs.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;		None
  3916 ;; Auto vars:     Size  Location     Type
  3917 ;;		None
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      void 
  3920 ;; Registers used:
  3921 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3922 ;; Tracked objects:
  3923 ;;		On entry : 3F/0
  3924 ;;		On exit  : 3F/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3931 ;;Total ram usage:        0 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; Hardware stack levels required when called:   15
  3934 ;; This function calls:
  3935 ;;		_ReadGPS_DATE_TIME
  3936 ;; This function is called by:
  3937 ;;		_main
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text13
  3942  0028D4                     __ptext13:
  3943                           	opt stack 0
  3944  0028D4                     _ReadGPS:
  3945                           	opt stack 15
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;funcs.c: 168: if (ReadGPS_DATE_TIME()) {
  3949                           
  3950                           ;incstack = 0
  3951  0028D4  EC95  F00B         	call	_ReadGPS_DATE_TIME	;wreg free
  3952  0028D8  0900               	iorlw	0
  3953  0028DA  E013               	bz	l4035
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;funcs.c: 169: DATE_TIME = GPS_DATE_TIME;
  3957  0028DC  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3958  0028E0  EE10  F0B9         	lfsr	1,_DATE_TIME
  3959  0028E4  0E0A               	movlw	10
  3960  0028E6                     u3711:
  3961  0028E6  CFDB FFE3          	movff	plusw2,plusw1
  3962  0028EA  06E8               	decf	wreg,f,c
  3963  0028EC  E2FC               	bc	u3711
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;funcs.c: 170: TIME_AT_LAST_GPS_SYNC = DATE_TIME.SECOND;
  3967  0028EE  C0B9  F0C4         	movff	_DATE_TIME,_TIME_AT_LAST_GPS_SYNC
  3968  0028F2  C0BA  F0C5         	movff	_DATE_TIME+1,_TIME_AT_LAST_GPS_SYNC+1
  3969  0028F6  C0BB  F0C6         	movff	_DATE_TIME+2,_TIME_AT_LAST_GPS_SYNC+2
  3970  0028FA  C0BC  F0C7         	movff	_DATE_TIME+3,_TIME_AT_LAST_GPS_SYNC+3
  3971  0028FE                     l4033:
  3972                           
  3973                           ; BSR set to: 0
  3974                           ;funcs.c: 171: FLAGS_0.bits.b3 = SET;
  3975  0028FE  87E1               	bsf	_FLAGS_0& (0+255),3,b
  3976                           
  3977                           ;funcs.c: 172: } else {
  3978  002900  D01C               	goto	l4047
  3979  002902                     l4035:
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;funcs.c: 173: NO_OF_TIMES_GPS_FAILED++;
  3983  002902  2BE2               	incf	_NO_OF_TIMES_GPS_FAILED& (0+255),f,b
  3984                           
  3985                           ; BSR set to: 0
  3986                           ;funcs.c: 174: if (NO_OF_TIMES_GPS_FAILED>4) {
  3987  002904  0E04               	movlw	4
  3988  002906  65E2               	cpfsgt	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  3989  002908  D001               	goto	l4041
  3990  00290A  D7F9               	goto	l4033
  3991  00290C                     l4041:
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;funcs.c: 177: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND - (2*60);
  3995  00290C  0E88               	movlw	136
  3996  00290E  25B9               	addwf	_DATE_TIME& (0+255),w,b
  3997  002910  6FC8               	movwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),b
  3998  002912  0EFF               	movlw	255
  3999  002914  21BA               	addwfc	(_DATE_TIME+1)& (0+255),w,b
  4000  002916  6FC9               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),b
  4001  002918  0EFF               	movlw	255
  4002  00291A  21BB               	addwfc	(_DATE_TIME+2)& (0+255),w,b
  4003  00291C  6FCA               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),b
  4004  00291E  0EFF               	movlw	255
  4005  002920  21BC               	addwfc	(_DATE_TIME+3)& (0+255),w,b
  4006  002922  6FCB               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),b
  4007                           
  4008                           ;funcs.c: 178: if (TIME_WHEN_GPS_IS_SWITCHED_ON<0)
  4009  002924  AFCB               	btfss	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),7,b
  4010  002926  D008               	goto	l4045
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;funcs.c: 179: TIME_WHEN_GPS_IS_SWITCHED_ON += 86400;
  4014  002928  0E80               	movlw	128
  4015  00292A  27C8               	addwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),f,b
  4016  00292C  0E51               	movlw	81
  4017  00292E  23C9               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),f,b
  4018  002930  0E01               	movlw	1
  4019  002932  23CA               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),f,b
  4020  002934  0E00               	movlw	0
  4021  002936  23CB               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),f,b
  4022  002938                     l4045:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;funcs.c: 180: FLAGS_0.bits.b1 = SET;
  4026  002938  83E1               	bsf	_FLAGS_0& (0+255),1,b
  4027  00293A                     l4047:
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;funcs.c: 181: }
  4031                           ;funcs.c: 182: }
  4032                           ;funcs.c: 183: FLAGS_0.bits.b2 = RESET;
  4033  00293A  95E1               	bcf	_FLAGS_0& (0+255),2,b
  4034                           
  4035                           ; BSR set to: 0
  4036  00293C  0012               	return		;funcret
  4037  00293E                     __end_of_ReadGPS:
  4038                           	opt stack 0
  4039                           tosu	equ	0xFFF
  4040                           tosh	equ	0xFFE
  4041                           tosl	equ	0xFFD
  4042                           pclath	equ	0xFFA
  4043                           tblptru	equ	0xFF8
  4044                           tblptrh	equ	0xFF7
  4045                           tblptrl	equ	0xFF6
  4046                           tablat	equ	0xFF5
  4047                           prodh	equ	0xFF4
  4048                           prodl	equ	0xFF3
  4049                           intcon	equ	0xFF2
  4050                           postinc0	equ	0xFEE
  4051                           plusw0	equ	0xFEB
  4052                           wreg	equ	0xFE8
  4053                           indf1	equ	0xFE7
  4054                           postinc1	equ	0xFE6
  4055                           postdec1	equ	0xFE5
  4056                           plusw1	equ	0xFE3
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           plusw2	equ	0xFDB
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _ReadGPS_DATE_TIME *****************
  4068 ;; Defined at:
  4069 ;;		line 115 in file "libs/funcs.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  Date            7   69[BANK0 ] unsigned char [7]
  4074 ;;  Time            7   62[BANK0 ] unsigned char [7]
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      enum E11037
  4077 ;; Registers used:
  4078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4079 ;; Tracked objects:
  4080 ;;		On entry : 3F/0
  4081 ;;		On exit  : 3F/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4085 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4086 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4087 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4088 ;;Total ram usage:       18 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:   14
  4091 ;; This function calls:
  4092 ;;		_AdjustDayLightSaving
  4093 ;;		_DecreaseByADay
  4094 ;;		_EUSART1_Initialize
  4095 ;;		_GetDay
  4096 ;;		_IncreaseByADay
  4097 ;;		_ReadGPSDateTime
  4098 ;;		_TimeTextToSecond
  4099 ;;		_ValidateDateTime
  4100 ;; This function is called by:
  4101 ;;		_ReadGPS
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text14
  4106  00172A                     __ptext14:
  4107                           	opt stack 0
  4108  00172A                     _ReadGPS_DATE_TIME:
  4109                           	opt stack 15
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;funcs.c: 116: char Date[] = "------";
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;incstack = 0
  4116  00172A  EE20  F0EB         	lfsr	2,ReadGPS_DATE_TIME@F11470
  4117  00172E  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  4118  001732  0E06               	movlw	6
  4119  001734                     u3491:
  4120  001734  CFDB FFE3          	movff	plusw2,plusw1
  4121  001738  06E8               	decf	wreg,f,c
  4122  00173A  E2FC               	bc	u3491
  4123                           
  4124                           ;funcs.c: 117: char Time[] = "------";
  4125  00173C  EE20  F0E4         	lfsr	2,ReadGPS_DATE_TIME@F11472
  4126  001740  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  4127  001744  0E06               	movlw	6
  4128  001746                     u3501:
  4129  001746  CFDB FFE3          	movff	plusw2,plusw1
  4130  00174A  06E8               	decf	wreg,f,c
  4131  00174C  E2FC               	bc	u3501
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;funcs.c: 118: EUSART1_Initialize();
  4135  00174E  EC2C  F017         	call	_EUSART1_Initialize	;wreg free
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;funcs.c: 119: ReadGPSDateTime(Date, Time);
  4139  001752  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  4140  001754  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  4141  001756  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  4142  001758  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  4143  00175A  ECCF  F012         	call	_ReadGPSDateTime	;wreg free
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;funcs.c: 120: if (ValidateDateTime(Date, Time)) {
  4147  00175E  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  4148  001760  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  4149  001762  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  4150  001764  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  4151  001766  EC03  F011         	call	_ValidateDateTime	;wreg free
  4152  00176A  0900               	iorlw	0
  4153  00176C  E101 D0AD          	bz	l3875
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;funcs.c: 121: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  4157  001770  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  4158  001772  0D0A               	mullw	10
  4159  001774  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  4160  001776  D8AA               	call	PL70	;call to abstracted procedure
  4161  001778  6FB2               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  4162  00177A  0EFD               	movlw	253
  4163  00177C  20F4               	addwfc	prodh,w,c
  4164  00177E  6FB3               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  4165                           
  4166                           ;funcs.c: 122: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  4167  001780  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  4168  001782  0D0A               	mullw	10
  4169  001784  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  4170  001786  D8A2               	call	PL70	;call to abstracted procedure
  4171  001788  6FB4               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  4172  00178A  0EFD               	movlw	253
  4173  00178C  20F4               	addwfc	prodh,w,c
  4174  00178E  6FB5               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;funcs.c: 123: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  4178  001790  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  4179  001792  6F6E               	movwf	GetDay@Date& (0+255),b
  4180  001794  EC0A  F00F         	call	_GetDay	;wreg free
  4181  001798  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  4182  00179A  0E40               	movlw	64
  4183  00179C  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  4184  00179E  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  4185  0017A0  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  4186  0017A2  D003               	goto	u3524
  4187  0017A4                     u3525:
  4188  0017A4  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  4189  0017A6  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  4190  0017A8  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  4191  0017AA                     u3524:
  4192  0017AA  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  4193  0017AC  D7FB               	goto	u3525
  4194  0017AE  0100               	movlb	0	; () banked
  4195  0017B0  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  4196  0017B2  51B6               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  4197  0017B4  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  4198  0017B6  0B01               	andlw	-255
  4199  0017B8  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  4200  0017BA  6FB6               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;funcs.c: 124: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  4204  0017BC  51F6               	movf	_CENTURY& (0+255),w,b
  4205  0017BE  0D64               	mullw	100
  4206  0017C0  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  4207  0017C4  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  4208  0017C8  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  4209  0017CA  0D0A               	mullw	10
  4210  0017CC  50F3               	movf	prodl,w,c
  4211  0017CE  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  4212  0017D0  50F4               	movf	prodh,w,c
  4213  0017D2  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  4214  0017D4  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  4215  0017D6  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  4216  0017D8  0E00               	movlw	0
  4217  0017DA  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  4218  0017DC  0EF0               	movlw	240
  4219  0017DE  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  4220  0017E0  6FB7               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  4221  0017E2  0EFD               	movlw	253
  4222  0017E4  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  4223  0017E6  6FB8               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  4224                           
  4225                           ;funcs.c: 125: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  4226  0017E8  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  4227  0017EA  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  4228  0017EC  EC11  F010         	call	_TimeTextToSecond	;wreg free
  4229  0017F0  C06C  F0AE         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  4230  0017F4  C06D  F0AF         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  4231  0017F8  C06E  F0B0         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  4232  0017FC  C06F  F0B1         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;funcs.c: 126: GPS_DATE_TIME.SECOND += TIME_ZONE;
  4236  001800  C0DE  F09A         	movff	_TIME_ZONE,??_ReadGPS_DATE_TIME
  4237  001804  C0DF  F09B         	movff	_TIME_ZONE+1,??_ReadGPS_DATE_TIME+1
  4238  001808  0E00               	movlw	0
  4239  00180A  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  4240  00180C  0EFF               	movlw	255
  4241  00180E  6F9C               	movwf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  4242  001810  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  4243  001812  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  4244  001814  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  4245  001816  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  4246  001818  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  4247  00181A  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  4248  00181C  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  4249  00181E  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  4250  001820  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;funcs.c: 127: if (GPS_DATE_TIME.SECOND < 0) {
  4254  001822  AFB1               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  4255  001824  D01A               	goto	l3861
  4256                           
  4257                           ; BSR set to: 0
  4258                           ;funcs.c: 128: GPS_DATE_TIME.SECOND += 86400;
  4259  001826  0E80               	movlw	128
  4260  001828  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  4261  00182A  0E51               	movlw	81
  4262  00182C  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  4263  00182E  0E01               	movlw	1
  4264  001830  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  4265  001832  0E00               	movlw	0
  4266  001834  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;funcs.c: 129: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  4270  001836  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4271  00183A  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  4272  00183E  0E0A               	movlw	10
  4273  001840                     u3541:
  4274  001840  CFDB FFEB          	movff	plusw2,plusw0
  4275  001844  06E8               	decf	wreg,f,c
  4276  001846  E2FC               	bc	u3541
  4277  001848  EC8B  F010         	call	_DecreaseByADay	;wreg free
  4278  00184C  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4279  001850  0E0A               	movlw	10
  4280  001852                     u3551:
  4281  001852  CFEB FFDB          	movff	plusw0,plusw2
  4282  001856  06E8               	decf	wreg,f,c
  4283  001858  E2FC               	bc	u3551
  4284  00185A                     l3861:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;funcs.c: 130: }
  4288                           ;funcs.c: 131: if (GPS_DATE_TIME.SECOND > 86400) {
  4289  00185A  BFB1               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  4290  00185C  D023               	goto	l3867
  4291  00185E  51B1               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  4292  001860  E107               	bnz	u3560
  4293  001862  0E81               	movlw	129
  4294  001864  5DAE               	subwf	_GPS_DATE_TIME& (0+255),w,b
  4295  001866  0E51               	movlw	81
  4296  001868  59AF               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  4297  00186A  0E01               	movlw	1
  4298  00186C  59B0               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  4299  00186E  E31A               	bnc	l3867
  4300  001870                     u3560:
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;funcs.c: 132: GPS_DATE_TIME.SECOND -= 86400;
  4304  001870  0E80               	movlw	128
  4305  001872  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  4306  001874  0EAE               	movlw	174
  4307  001876  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  4308  001878  0EFE               	movlw	254
  4309  00187A  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  4310  00187C  0EFF               	movlw	255
  4311  00187E  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;funcs.c: 133: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  4315  001880  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4316  001884  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  4317  001888  0E0A               	movlw	10
  4318  00188A                     u3571:
  4319  00188A  CFDB FFEB          	movff	plusw2,plusw0
  4320  00188E  06E8               	decf	wreg,f,c
  4321  001890  E2FC               	bc	u3571
  4322  001892  EC5E  F012         	call	_IncreaseByADay	;wreg free
  4323  001896  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4324  00189A  0E0A               	movlw	10
  4325  00189C                     u3581:
  4326  00189C  CFEB FFDB          	movff	plusw0,plusw2
  4327  0018A0  06E8               	decf	wreg,f,c
  4328  0018A2  E2FC               	bc	u3581
  4329  0018A4                     l3867:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;funcs.c: 134: }
  4333                           ;funcs.c: 135: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  4334  0018A4  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4335  0018A8  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  4336  0018AC  0E0A               	movlw	10
  4337  0018AE                     u3591:
  4338  0018AE  CFDB FFEB          	movff	plusw2,plusw0
  4339  0018B2  06E8               	decf	wreg,f,c
  4340  0018B4  E2FC               	bc	u3591
  4341  0018B6  EC78  F00E         	call	_AdjustDayLightSaving	;wreg free
  4342  0018BA  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4343  0018BE  0E0A               	movlw	10
  4344  0018C0                     u3601:
  4345  0018C0  CFEB FFDB          	movff	plusw0,plusw2
  4346  0018C4  06E8               	decf	wreg,f,c
  4347  0018C6  E2FC               	bc	u3601
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;funcs.c: 136: return 1;
  4351  0018C8  0C01               	retlw	1
  4352  0018CA                     l3875:
  4353                           
  4354                           ; BSR set to: 0
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;funcs.c: 138: return 0;
  4358  0018CA  0C00               	retlw	0	;funcret
  4359  0018CC                     __end_of_ReadGPS_DATE_TIME:
  4360                           	opt stack 0
  4361  0018CC                     PL70:
  4362                           	opt stack 15
  4363  0018CC  26F3               	addwf	prodl,f,c
  4364  0018CE  0E00               	movlw	0
  4365  0018D0  22F4               	addwfc	prodh,f,c
  4366  0018D2  0EF0               	movlw	240
  4367  0018D4  24F3               	addwf	prodl,w,c
  4368  0018D6  0012               	return	
  4369  0018D8                     __end_ofPL70:
  4370                           	opt stack 0
  4371                           tosu	equ	0xFFF
  4372                           tosh	equ	0xFFE
  4373                           tosl	equ	0xFFD
  4374                           pclath	equ	0xFFA
  4375                           tblptru	equ	0xFF8
  4376                           tblptrh	equ	0xFF7
  4377                           tblptrl	equ	0xFF6
  4378                           tablat	equ	0xFF5
  4379                           prodh	equ	0xFF4
  4380                           prodl	equ	0xFF3
  4381                           intcon	equ	0xFF2
  4382                           postinc0	equ	0xFEE
  4383                           plusw0	equ	0xFEB
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           postinc1	equ	0xFE6
  4387                           postdec1	equ	0xFE5
  4388                           plusw1	equ	0xFE3
  4389                           fsr1h	equ	0xFE2
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           postdec2	equ	0xFDD
  4394                           plusw2	equ	0xFDB
  4395                           fsr2h	equ	0xFDA
  4396                           fsr2l	equ	0xFD9
  4397                           status	equ	0xFD8
  4398                           
  4399 ;; *************** function _ValidateDateTime *****************
  4400 ;; Defined at:
  4401 ;;		line 138 in file "libs/gps.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  4404 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4405 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  4406 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  4407 ;; Auto vars:     Size  Location     Type
  4408 ;;  Item            1    3[BANK0 ] char 
  4409 ;; Return value:  Size  Location     Type
  4410 ;;                  1    wreg      enum E11037
  4411 ;; Registers used:
  4412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4413 ;; Tracked objects:
  4414 ;;		On entry : 3F/0
  4415 ;;		On exit  : 3F/0
  4416 ;;		Unchanged: 0/0
  4417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4421 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4422 ;;Total ram usage:        4 bytes
  4423 ;; Hardware stack levels used:    1
  4424 ;; Hardware stack levels required when called:    9
  4425 ;; This function calls:
  4426 ;;		Nothing
  4427 ;; This function is called by:
  4428 ;;		_ReadGPS_DATE_TIME
  4429 ;; This function uses a non-reentrant model
  4430 ;;
  4431                           
  4432                           	psect	text15
  4433  002206                     __ptext15:
  4434                           	opt stack 0
  4435  002206                     _ValidateDateTime:
  4436                           	opt stack 19
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;gps.c: 139: INT8 Item;
  4440                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;incstack = 0
  4444  002206  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4445  002208  D86F               	call	PL82	;call to abstracted procedure
  4446  00220A  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4447  00220C  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4448  00220E  6ED9               	movwf	fsr2l,c
  4449  002210  6ADA               	clrf	fsr2h,c
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  4453  002212  D84A               	call	PL10	;call to abstracted procedure
  4454  002214  A0D8               	btfss	status,0,c
  4455  002216  0C00               	retlw	0
  4456                           
  4457                           ; BSR set to: 0
  4458  002218  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4459  00221A  0A80               	xorlw	128
  4460  00221C  0F60               	addlw	-160
  4461  00221E  E301               	bnc	l3343
  4462                           
  4463                           ; BSR set to: 0
  4464  002220  0C00               	retlw	0
  4465  002222                     l3343:
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  4469  002222  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4470  002224  D855               	call	PL44	;call to abstracted procedure
  4471  002226  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4472  002228  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4473  00222A  D848               	call	PL32	;call to abstracted procedure
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  4477  00222C  D83D               	call	PL10	;call to abstracted procedure
  4478  00222E  A0D8               	btfss	status,0,c
  4479  002230  0C00               	retlw	0
  4480                           
  4481                           ; BSR set to: 0
  4482  002232  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4483  002234  0A80               	xorlw	128
  4484  002236  0F73               	addlw	-141
  4485  002238  E301               	bnc	l3353
  4486  00223A  0C00               	retlw	0
  4487  00223C                     l3353:
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  4491  00223C  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4492  00223E  D84E               	call	PL52	;call to abstracted procedure
  4493  002240  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4494  002242  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4495  002244  D840               	call	PL34	;call to abstracted procedure
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  4499  002246  D830               	call	PL10	;call to abstracted procedure
  4500  002248  A0D8               	btfss	status,0,c
  4501  00224A  0C00               	retlw	0
  4502                           
  4503                           ; BSR set to: 0
  4504  00224C  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4505  00224E  0A80               	xorlw	128
  4506  002250  0F1C               	addlw	-228
  4507  002252  E301               	bnc	l3363
  4508  002254  0C00               	retlw	0
  4509  002256                     l3363:
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  4513  002256  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4514  002258  D847               	call	PL82	;call to abstracted procedure
  4515  00225A  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4516  00225C  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4517  00225E  6ED9               	movwf	fsr2l,c
  4518  002260  6ADA               	clrf	fsr2h,c
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  4522  002262  D822               	call	PL10	;call to abstracted procedure
  4523  002264  A0D8               	btfss	status,0,c
  4524  002266  0C00               	retlw	0
  4525                           
  4526                           ; BSR set to: 0
  4527  002268  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4528  00226A  0A80               	xorlw	128
  4529  00226C  0F68               	addlw	-152
  4530  00226E  E301               	bnc	l3373
  4531  002270  0C00               	retlw	0
  4532  002272                     l3373:
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  4536  002272  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4537  002274  D82D               	call	PL44	;call to abstracted procedure
  4538  002276  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4539  002278  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4540  00227A  D820               	call	PL32	;call to abstracted procedure
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  4544  00227C  D815               	call	PL10	;call to abstracted procedure
  4545  00227E  A0D8               	btfss	status,0,c
  4546  002280  0C00               	retlw	0
  4547                           
  4548                           ; BSR set to: 0
  4549  002282  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4550  002284  0A80               	xorlw	128
  4551  002286  0F44               	addlw	-188
  4552  002288  E301               	bnc	l3383
  4553  00228A  0C00               	retlw	0
  4554  00228C                     l3383:
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  4558  00228C  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4559  00228E  D826               	call	PL52	;call to abstracted procedure
  4560  002290  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4561  002292  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4562  002294  D818               	call	PL34	;call to abstracted procedure
  4563                           
  4564                           ; BSR set to: 0
  4565                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  4566  002296  D808               	call	PL10	;call to abstracted procedure
  4567  002298  A0D8               	btfss	status,0,c
  4568  00229A  0C00               	retlw	0
  4569                           
  4570                           ; BSR set to: 0
  4571  00229C  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4572  00229E  0A80               	xorlw	128
  4573  0022A0  0F44               	addlw	-188
  4574  0022A2  E301               	bnc	l3393
  4575  0022A4  0C00               	retlw	0
  4576  0022A6                     l3393:
  4577                           
  4578                           ; BSR set to: 0
  4579                           
  4580                           ; BSR set to: 0
  4581                           ;gps.c: 160: return 1;
  4582  0022A6  0C01               	retlw	1	;funcret
  4583  0022A8                     __end_of_ValidateDateTime:
  4584                           	opt stack 0
  4585  0022A8                     PL10:
  4586                           	opt stack 19
  4587  0022A8  50DF               	movf	indf2,w,c
  4588  0022AA  0D0A               	mullw	10
  4589  0022AC  50F3               	movf	prodl,w,c
  4590  0022AE  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  4591  0022B0  0FF0               	addlw	240
  4592  0022B2  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  4593  0022B4  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4594  0022B6  0A80               	xorlw	128
  4595  0022B8  0F7F               	addlw	-129
  4596  0022BA  0012               	return	
  4597  0022BC                     __end_ofPL10:
  4598                           	opt stack 0
  4599  0022BC                     PL32:
  4600                           	opt stack 19
  4601  0022BC  6ED9               	movwf	fsr2l,c
  4602  0022BE  6ADA               	clrf	fsr2h,c
  4603  0022C0  0E02               	movlw	2
  4604  0022C2  26D9               	addwf	fsr2l,f,c
  4605  0022C4  0C02               	retlw	2
  4606  0022C6                     __end_ofPL32:
  4607                           	opt stack 0
  4608  0022C6                     PL34:
  4609                           	opt stack 19
  4610  0022C6  6ED9               	movwf	fsr2l,c
  4611  0022C8  6ADA               	clrf	fsr2h,c
  4612  0022CA  0E04               	movlw	4
  4613  0022CC  26D9               	addwf	fsr2l,f,c
  4614  0022CE  0C04               	retlw	4
  4615  0022D0                     __end_ofPL34:
  4616                           	opt stack 0
  4617  0022D0                     PL44:
  4618                           	opt stack 19
  4619  0022D0  6ED9               	movwf	fsr2l,c
  4620  0022D2  6ADA               	clrf	fsr2h,c
  4621  0022D4  0E03               	movlw	3
  4622  0022D6  26D9               	addwf	fsr2l,f,c
  4623  0022D8  50DF               	movf	indf2,w,c
  4624  0022DA  0012               	return	
  4625  0022DC                     __end_ofPL44:
  4626                           	opt stack 0
  4627  0022DC                     PL52:
  4628                           	opt stack 19
  4629  0022DC  6ED9               	movwf	fsr2l,c
  4630  0022DE  6ADA               	clrf	fsr2h,c
  4631  0022E0  0E05               	movlw	5
  4632  0022E2  26D9               	addwf	fsr2l,f,c
  4633  0022E4  50DF               	movf	indf2,w,c
  4634  0022E6  0012               	return	
  4635  0022E8                     __end_ofPL52:
  4636                           	opt stack 0
  4637  0022E8                     PL82:
  4638                           	opt stack 19
  4639  0022E8  6ED9               	movwf	fsr2l,c
  4640  0022EA  6ADA               	clrf	fsr2h,c
  4641  0022EC  2AD9               	incf	fsr2l,f,c
  4642  0022EE  50DF               	movf	indf2,w,c
  4643  0022F0  0012               	return	
  4644  0022F2                     __end_ofPL82:
  4645                           	opt stack 0
  4646                           tosu	equ	0xFFF
  4647                           tosh	equ	0xFFE
  4648                           tosl	equ	0xFFD
  4649                           pclath	equ	0xFFA
  4650                           tblptru	equ	0xFF8
  4651                           tblptrh	equ	0xFF7
  4652                           tblptrl	equ	0xFF6
  4653                           tablat	equ	0xFF5
  4654                           prodh	equ	0xFF4
  4655                           prodl	equ	0xFF3
  4656                           intcon	equ	0xFF2
  4657                           postinc0	equ	0xFEE
  4658                           plusw0	equ	0xFEB
  4659                           wreg	equ	0xFE8
  4660                           indf1	equ	0xFE7
  4661                           postinc1	equ	0xFE6
  4662                           postdec1	equ	0xFE5
  4663                           plusw1	equ	0xFE3
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           indf2	equ	0xFDF
  4667                           postinc2	equ	0xFDE
  4668                           postdec2	equ	0xFDD
  4669                           plusw2	equ	0xFDB
  4670                           fsr2h	equ	0xFDA
  4671                           fsr2l	equ	0xFD9
  4672                           status	equ	0xFD8
  4673                           
  4674 ;; *************** function _TimeTextToSecond *****************
  4675 ;; Defined at:
  4676 ;;		line 141 in file "libs/funcs.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  4679 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;  Second          4   32[BANK0 ] long 
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  4   12[BANK0 ] long 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 3F/0
  4688 ;;		On exit  : 3F/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4691 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4692 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4693 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4694 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4695 ;;Total ram usage:       24 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:   10
  4698 ;; This function calls:
  4699 ;;		___lmul
  4700 ;; This function is called by:
  4701 ;;		_ReadGPS_DATE_TIME
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text16
  4706  002022                     __ptext16:
  4707                           	opt stack 0
  4708  002022                     _TimeTextToSecond:
  4709                           	opt stack 18
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;funcs.c: 142: INT32 Second;
  4713                           ;funcs.c: 143: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  4714                           ;funcs.c: 144: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  4715                           ;funcs.c: 145: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;incstack = 0
  4719  002022  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4720  002024  EC63  F011         	call	PL34	;call to abstracted procedure
  4721  002028  D872               	call	PL72	;call to abstracted procedure
  4722  00202A  EC6E  F011         	call	PL52	;call to abstracted procedure
  4723  00202E  EC66  F00C         	call	PL70	;call to abstracted procedure
  4724  002032  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  4725  002034  0EFD               	movlw	253
  4726  002036  20F4               	addwfc	prodh,w,c
  4727  002038  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  4728  00203A  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  4729  00203C  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  4730  00203E  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  4731  002040  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  4732  002042  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  4733  002044  0EF0               	movlw	240
  4734  002046  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  4735  002048  0EFD               	movlw	253
  4736  00204A  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  4737  00204C  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4738  00204E  6ED9               	movwf	fsr2l,c
  4739  002050  6ADA               	clrf	fsr2h,c
  4740  002052  D85D               	call	PL72	;call to abstracted procedure
  4741  002054  EC74  F011         	call	PL82	;call to abstracted procedure
  4742  002058  26F3               	addwf	prodl,f,c
  4743  00205A  0E00               	movlw	0
  4744  00205C  22F4               	addwfc	prodh,f,c
  4745  00205E  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  4746  002060  26F3               	addwf	prodl,f,c
  4747  002062  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  4748  002064  D849               	call	PL40	;call to abstracted procedure
  4749  002066  0E10               	movlw	16
  4750  002068  6F64               	movwf	___lmul@multiplicand& (0+255),b
  4751  00206A  0E0E               	movlw	14
  4752  00206C  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  4753  00206E  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  4754  002070  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  4755  002072  EC34  F015         	call	___lmul	;wreg free
  4756  002076  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  4757  00207A  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  4758  00207E  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  4759  002082  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  4760  002086  0EF0               	movlw	240
  4761  002088  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  4762  00208A  0EFD               	movlw	253
  4763  00208C  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  4764  00208E  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4765  002090  EC5E  F011         	call	PL32	;call to abstracted procedure
  4766  002094  D83C               	call	PL72	;call to abstracted procedure
  4767  002096  EC68  F011         	call	PL44	;call to abstracted procedure
  4768  00209A  26F3               	addwf	prodl,f,c
  4769  00209C  0E00               	movlw	0
  4770  00209E  22F4               	addwfc	prodh,f,c
  4771  0020A0  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  4772  0020A2  26F3               	addwf	prodl,f,c
  4773  0020A4  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  4774  0020A6  D828               	call	PL40	;call to abstracted procedure
  4775  0020A8  0E3C               	movlw	60
  4776  0020AA  6F64               	movwf	___lmul@multiplicand& (0+255),b
  4777  0020AC  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  4778  0020AE  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  4779  0020B0  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  4780  0020B2  EC34  F015         	call	___lmul	;wreg free
  4781  0020B6  5160               	movf	?___lmul& (0+255),w,b
  4782  0020B8  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  4783  0020BA  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  4784  0020BC  5161               	movf	(?___lmul+1)& (0+255),w,b
  4785  0020BE  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  4786  0020C0  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  4787  0020C2  5162               	movf	(?___lmul+2)& (0+255),w,b
  4788  0020C4  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  4789  0020C6  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  4790  0020C8  5163               	movf	(?___lmul+3)& (0+255),w,b
  4791  0020CA  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  4792  0020CC  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  4793  0020CE  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  4794  0020D0  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  4795  0020D2  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  4796  0020D4  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  4797  0020D6  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  4798  0020D8  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  4799  0020DA  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  4800  0020DC  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  4801  0020DE  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  4802  0020E0  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  4803  0020E2  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  4804  0020E4  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;funcs.c: 146: return Second;
  4808  0020E6  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  4809  0020EA  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  4810  0020EE  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  4811  0020F2  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  4812                           
  4813                           ; BSR set to: 0
  4814  0020F6  0012               	return		;funcret
  4815  0020F8                     __end_of_TimeTextToSecond:
  4816                           	opt stack 0
  4817  0020F8                     PL40:
  4818                           	opt stack 18
  4819  0020F8  22F4               	addwfc	prodh,f,c
  4820  0020FA  CFF3 F060          	movff	prodl,___lmul@multiplier
  4821  0020FE  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  4822  002102  0E00               	movlw	0
  4823  002104  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  4824  002106  0EFF               	movlw	-1
  4825  002108  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  4826  00210A  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  4827  00210C  0012               	return	
  4828  00210E                     __end_ofPL40:
  4829                           	opt stack 0
  4830  00210E                     PL72:
  4831                           	opt stack 18
  4832  00210E  50DF               	movf	indf2,w,c
  4833  002110  0D0A               	mullw	10
  4834  002112  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4835  002114  0012               	return	
  4836  002116                     __end_ofPL72:
  4837                           	opt stack 0
  4838                           tosu	equ	0xFFF
  4839                           tosh	equ	0xFFE
  4840                           tosl	equ	0xFFD
  4841                           pclath	equ	0xFFA
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           postinc0	equ	0xFEE
  4850                           plusw0	equ	0xFEB
  4851                           wreg	equ	0xFE8
  4852                           indf1	equ	0xFE7
  4853                           postinc1	equ	0xFE6
  4854                           postdec1	equ	0xFE5
  4855                           plusw1	equ	0xFE3
  4856                           fsr1h	equ	0xFE2
  4857                           fsr1l	equ	0xFE1
  4858                           indf2	equ	0xFDF
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           plusw2	equ	0xFDB
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function ___lmul *****************
  4867 ;; Defined at:
  4868 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  multiplier      4    0[BANK0 ] unsigned long 
  4871 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  product         4    8[BANK0 ] unsigned long 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  4    0[BANK0 ] unsigned long 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0
  4878 ;; Tracked objects:
  4879 ;;		On entry : 3F/0
  4880 ;;		On exit  : 3F/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4883 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4884 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4886 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4887 ;;Total ram usage:       12 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    9
  4890 ;; This function calls:
  4891 ;;		Nothing
  4892 ;; This function is called by:
  4893 ;;		_TimeTextToSecond
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text17
  4898  002A68                     __ptext17:
  4899                           	opt stack 0
  4900  002A68                     ___lmul:
  4901                           	opt stack 18
  4902                           
  4903                           ; BSR set to: 0
  4904                           
  4905                           ; BSR set to: 0
  4906                           ;incstack = 0
  4907  002A68  6B68               	clrf	___lmul@product& (0+255),b
  4908  002A6A  6B69               	clrf	(___lmul@product+1)& (0+255),b
  4909  002A6C  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  4910  002A6E  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  4911  002A70                     l1145:
  4912                           
  4913                           ; BSR set to: 0
  4914  002A70  A160               	btfss	___lmul@multiplier& (0+255),0,b
  4915  002A72  D008               	goto	l3193
  4916                           
  4917                           ; BSR set to: 0
  4918  002A74  5164               	movf	___lmul@multiplicand& (0+255),w,b
  4919  002A76  2768               	addwf	___lmul@product& (0+255),f,b
  4920  002A78  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  4921  002A7A  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  4922  002A7C  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  4923  002A7E  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  4924  002A80  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  4925  002A82  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  4926  002A84                     l3193:
  4927                           
  4928                           ; BSR set to: 0
  4929  002A84  90D8               	bcf	status,0,c
  4930  002A86  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  4931  002A88  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  4932  002A8A  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  4933  002A8C  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  4934                           
  4935                           ; BSR set to: 0
  4936  002A8E  90D8               	bcf	status,0,c
  4937  002A90  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  4938  002A92  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  4939  002A94  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  4940  002A96  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  4941  002A98  5160               	movf	___lmul@multiplier& (0+255),w,b
  4942  002A9A  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  4943  002A9C  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  4944  002A9E  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  4945  002AA0  E1E7               	bnz	l1145
  4946                           
  4947                           ; BSR set to: 0
  4948  002AA2  C068  F060         	movff	___lmul@product,?___lmul
  4949  002AA6  C069  F061         	movff	___lmul@product+1,?___lmul+1
  4950  002AAA  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  4951  002AAE  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  4952                           
  4953                           ; BSR set to: 0
  4954  002AB2  0012               	return		;funcret
  4955  002AB4                     __end_of___lmul:
  4956                           	opt stack 0
  4957                           tosu	equ	0xFFF
  4958                           tosh	equ	0xFFE
  4959                           tosl	equ	0xFFD
  4960                           pclath	equ	0xFFA
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           postinc0	equ	0xFEE
  4969                           plusw0	equ	0xFEB
  4970                           wreg	equ	0xFE8
  4971                           indf1	equ	0xFE7
  4972                           postinc1	equ	0xFE6
  4973                           postdec1	equ	0xFE5
  4974                           plusw1	equ	0xFE3
  4975                           fsr1h	equ	0xFE2
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           plusw2	equ	0xFDB
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _ReadGPSDateTime *****************
  4986 ;; Defined at:
  4987 ;;		line 39 in file "libs/gps.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  4990 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4991 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  4992 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  4993 ;; Auto vars:     Size  Location     Type
  4994 ;;  StartCode       7    6[BANK0 ] const unsigned char [7]
  4995 ;;  i               2   13[BANK0 ] int 
  4996 ;;  Pos             1   17[BANK0 ] unsigned char 
  4997 ;;  TempChar        1   16[BANK0 ] unsigned char 
  4998 ;;  Commas          1   15[BANK0 ] unsigned char 
  4999 ;; Return value:  Size  Location     Type
  5000 ;;                  1    wreg      void 
  5001 ;; Registers used:
  5002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5003 ;; Tracked objects:
  5004 ;;		On entry : 3F/0
  5005 ;;		On exit  : 3F/0
  5006 ;;		Unchanged: 0/0
  5007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5008 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5009 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5010 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5011 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5012 ;;Total ram usage:       18 bytes
  5013 ;; Hardware stack levels used:    1
  5014 ;; Hardware stack levels required when called:   10
  5015 ;; This function calls:
  5016 ;;		_EUSART1_Read
  5017 ;; This function is called by:
  5018 ;;		_ReadGPS_DATE_TIME
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text18
  5023  00259E                     __ptext18:
  5024                           	opt stack 0
  5025  00259E                     _ReadGPSDateTime:
  5026                           	opt stack 18
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;gps.c: 40: const char StartCode[7]="$GPRMC,";
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;incstack = 0
  5033  00259E  0E01               	movlw	low ReadGPSDateTime@F11464
  5034  0025A0  6EF6               	movwf	tblptrl,c
  5035  0025A2                     	if	1	;There is more than 1 active tblptr byte
  5036  0025A2  0E0F               	movlw	high ReadGPSDateTime@F11464
  5037  0025A4  6EF7               	movwf	tblptrh,c
  5038  0025A6                     	endif
  5039  0025A6                     	if	1	;There are 3 active tblptr bytes
  5040  0025A6  0E00               	movlw	low (ReadGPSDateTime@F11464 shr (0+16))
  5041  0025A8  6EF8               	movwf	tblptru,c
  5042  0025AA                     	endif
  5043  0025AA  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  5044  0025AE  0E06               	movlw	6
  5045  0025B0                     u2730:
  5046  0025B0  0009               	tblrd		*+
  5047  0025B2  CFF5 FFDE          	movff	tablat,postinc2
  5048  0025B6  06E8               	decf	wreg,f,c
  5049  0025B8  E2FB               	bc	u2730
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;gps.c: 41: char Pos=0x00;
  5053  0025BA  6B71               	clrf	ReadGPSDateTime@Pos& (0+255),b
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;gps.c: 43: int i=0;
  5057                           
  5058                           ; BSR set to: 0
  5059  0025BC  6B6D               	clrf	ReadGPSDateTime@i& (0+255),b
  5060  0025BE  6B6E               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;gps.c: 44: UINT8 Commas=0;
  5064  0025C0  6B6F               	clrf	ReadGPSDateTime@Commas& (0+255),b
  5065  0025C2                     l3287:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  5069  0025C2  010E               	movlb	14	; () banked
  5070  0025C4  ABCD               	btfss	205,5,b	;volatile
  5071  0025C6  D047               	goto	l3321
  5072                           
  5073                           ; BSR set to: 14
  5074                           ;gps.c: 47: i=0;
  5075  0025C8  0100               	movlb	0	; () banked
  5076  0025CA  6B6D               	clrf	ReadGPSDateTime@i& (0+255),b
  5077  0025CC  6B6E               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;gps.c: 48: TempChar = EUSART1_Read();
  5081  0025CE  EC4A  F017         	call	_EUSART1_Read	;wreg free
  5082  0025D2  0100               	movlb	0	; () banked
  5083  0025D4  6F70               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  5087  0025D6  0E06               	movlw	6
  5088  0025D8  6571               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  5089  0025DA  D00D               	goto	l3301
  5090                           
  5091                           ; BSR set to: 0
  5092  0025DC  0E0D               	movlw	13
  5093  0025DE  6171               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  5094  0025E0  D00A               	goto	l3301
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  5098  0025E2  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  5099  0025E4  2571               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  5100  0025E6  6ED9               	movwf	fsr2l,c
  5101  0025E8  6ADA               	clrf	fsr2h,c
  5102  0025EA  0EF9               	movlw	249
  5103  0025EC  26D9               	addwf	fsr2l,f,c
  5104  0025EE  C070  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  5105  0025F2                     l3299:
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;gps.c: 51: Pos++;
  5109  0025F2  2B71               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  5110                           
  5111                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  5112  0025F4  D034               	goto	l3323
  5113  0025F6                     l3301:
  5114                           
  5115                           ; BSR set to: 0
  5116  0025F6  5171               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  5117  0025F8  0F66               	addlw	low ReadGPSDateTime@StartCode
  5118  0025FA  6ED9               	movwf	fsr2l,c
  5119  0025FC  6ADA               	clrf	fsr2h,c
  5120  0025FE  5170               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  5121  002600  18DE               	xorwf	postinc2,w,c
  5122  002602  E104               	bnz	l3307
  5123                           
  5124                           ; BSR set to: 0
  5125  002604  0E07               	movlw	7
  5126  002606  6171               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  5127  002608  D001               	goto	l3307
  5128  00260A  D7F3               	goto	l3299
  5129  00260C                     l3307:
  5130                           
  5131                           ; BSR set to: 0
  5132  00260C  0E0C               	movlw	12
  5133  00260E  6571               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  5134  002610  D020               	goto	l123
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;gps.c: 55: if (Commas<8) {
  5138  002612  0E08               	movlw	8
  5139  002614  616F               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  5140  002616  D005               	goto	l3315
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;gps.c: 56: if (TempChar == 0x2C)
  5144  002618  0E2C               	movlw	44
  5145  00261A  1970               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  5146  00261C  E120               	bnz	l3323
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;gps.c: 57: Commas++;
  5150  00261E  2B6F               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  5151  002620  D01E               	goto	l3323
  5152  002622                     l3315:
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  5156  002622  0EF3               	movlw	243
  5157  002624  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  5158  002626  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  5159  002628  5171               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  5160  00262A  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  5161  00262C  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  5162  00262E  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  5163  002630  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  5164  002632  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  5165  002634  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  5166  002636  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  5167  002638  D006               	goto	l3317
  5168  00263A  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  5169  00263C  E11A               	bnz	l129
  5170  00263E  0E06               	movlw	6
  5171  002640  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  5172  002642  B0D8               	btfsc	status,0,c
  5173  002644  0012               	return	
  5174  002646                     l3317:
  5175                           
  5176                           ; BSR set to: 0
  5177                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  5178  002646  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  5179  002648  2571               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  5180  00264A  6ED9               	movwf	fsr2l,c
  5181  00264C  6ADA               	clrf	fsr2h,c
  5182  00264E  0EF3               	movlw	243
  5183  002650  D7CD               	goto	L1
  5184  002652                     l123:
  5185                           
  5186                           ; BSR set to: 0
  5187                           ;gps.c: 66: Pos=0;
  5188  002652  6B71               	clrf	ReadGPSDateTime@Pos& (0+255),b
  5189                           
  5190                           ; BSR set to: 0
  5191  002654  D004               	goto	l3323
  5192  002656                     l3321:
  5193                           
  5194                           ; BSR set to: 14
  5195                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  5196  002656  0E06               	movlw	6
  5197  002658                     u3917:
  5198  002658  2EE8               	decfsz	wreg,f,c
  5199  00265A  D7FE               	bra	u3917
  5200  00265C  D000               	nop2	
  5201  00265E                     l3323:
  5202                           
  5203                           ;gps.c: 69: i++;
  5204  00265E  0100               	movlb	0	; () banked
  5205  002660  4B6D               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  5206  002662  2B6E               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  5207                           
  5208                           ;gps.c: 70: } while(i<1000);
  5209  002664  BF6E               	btfsc	(ReadGPSDateTime@i+1)& (0+255),7,b
  5210  002666  D7AD               	goto	l3287
  5211  002668  0EE8               	movlw	232
  5212  00266A  5D6D               	subwf	ReadGPSDateTime@i& (0+255),w,b
  5213  00266C  0E03               	movlw	3
  5214  00266E  596E               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  5215  002670  E3A8               	bnc	l3287
  5216  002672                     l129:
  5217                           
  5218                           ; BSR set to: 0
  5219  002672  0012               	return		;funcret
  5220  002674                     __end_of_ReadGPSDateTime:
  5221                           	opt stack 0
  5222                           tosu	equ	0xFFF
  5223                           tosh	equ	0xFFE
  5224                           tosl	equ	0xFFD
  5225                           pclath	equ	0xFFA
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           postinc0	equ	0xFEE
  5234                           plusw0	equ	0xFEB
  5235                           wreg	equ	0xFE8
  5236                           indf1	equ	0xFE7
  5237                           postinc1	equ	0xFE6
  5238                           postdec1	equ	0xFE5
  5239                           plusw1	equ	0xFE3
  5240                           fsr1h	equ	0xFE2
  5241                           fsr1l	equ	0xFE1
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           plusw2	equ	0xFDB
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function _EUSART1_Read *****************
  5251 ;; Defined at:
  5252 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;		None
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;		None
  5257 ;; Return value:  Size  Location     Type
  5258 ;;                  1    wreg      unsigned char 
  5259 ;; Registers used:
  5260 ;;		wreg, status,2
  5261 ;; Tracked objects:
  5262 ;;		On entry : 3F/0
  5263 ;;		On exit  : 3F/E
  5264 ;;		Unchanged: 0/0
  5265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5270 ;;Total ram usage:        0 bytes
  5271 ;; Hardware stack levels used:    1
  5272 ;; Hardware stack levels required when called:    9
  5273 ;; This function calls:
  5274 ;;		Nothing
  5275 ;; This function is called by:
  5276 ;;		_ReadGPSDateTime
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text19
  5281  002E94                     __ptext19:
  5282                           	opt stack 0
  5283  002E94                     _EUSART1_Read:
  5284                           	opt stack 18
  5285  002E94                     l720:
  5286  002E94  010E               	movlb	14	; () banked
  5287  002E96  ABCD               	btfss	205,5,b	;volatile
  5288  002E98  D7FD               	goto	l720
  5289                           
  5290                           ; BSR set to: 14
  5291                           ;eusart1.c: 82: }
  5292                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  5293  002E9A  A29D               	btfss	3997,1,c	;volatile
  5294  002E9C  D002               	goto	l3097
  5295                           
  5296                           ; BSR set to: 14
  5297                           ;eusart1.c: 86: {
  5298                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  5299  002E9E  9E9D               	bcf	3997,7,c	;volatile
  5300                           
  5301                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  5302  002EA0  8E9D               	bsf	3997,7,c	;volatile
  5303  002EA2                     l3097:
  5304                           
  5305                           ; BSR set to: 14
  5306                           ;eusart1.c: 91: }
  5307                           ;eusart1.c: 93: return RC1REG;
  5308  002EA2  5099               	movf	3993,w,c	;volatile
  5309                           
  5310                           ; BSR set to: 14
  5311  002EA4  0012               	return		;funcret
  5312  002EA6                     __end_of_EUSART1_Read:
  5313                           	opt stack 0
  5314                           tosu	equ	0xFFF
  5315                           tosh	equ	0xFFE
  5316                           tosl	equ	0xFFD
  5317                           pclath	equ	0xFFA
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           postinc0	equ	0xFEE
  5326                           plusw0	equ	0xFEB
  5327                           wreg	equ	0xFE8
  5328                           indf1	equ	0xFE7
  5329                           postinc1	equ	0xFE6
  5330                           postdec1	equ	0xFE5
  5331                           plusw1	equ	0xFE3
  5332                           fsr1h	equ	0xFE2
  5333                           fsr1l	equ	0xFE1
  5334                           indf2	equ	0xFDF
  5335                           postinc2	equ	0xFDE
  5336                           postdec2	equ	0xFDD
  5337                           plusw2	equ	0xFDB
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function _GetDay *****************
  5343 ;; Defined at:
  5344 ;;		line 129 in file "libs/gps.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  5347 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  y               2   23[BANK0 ] int 
  5350 ;;  m               1   22[BANK0 ] unsigned char 
  5351 ;;  d               1   21[BANK0 ] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      char 
  5354 ;; Registers used:
  5355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 3F/0
  5358 ;;		On exit  : 3F/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5361 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5362 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5363 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5364 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5365 ;;Total ram usage:       11 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:   10
  5368 ;; This function calls:
  5369 ;;		___awdiv
  5370 ;;		___awmod
  5371 ;; This function is called by:
  5372 ;;		_ReadGPS_DATE_TIME
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           	psect	text20
  5377  001E14                     __ptext20:
  5378                           	opt stack 0
  5379  001E14                     _GetDay:
  5380                           	opt stack 18
  5381                           
  5382                           ; BSR set to: 0
  5383                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5384                           
  5385                           ; BSR set to: 14
  5386                           ;incstack = 0
  5387  001E14  516E               	movf	GetDay@Date& (0+255),w,b
  5388  001E16  EC74  F011         	call	PL82	;call to abstracted procedure
  5389  001E1A  D87F               	call	PL98	;call to abstracted procedure
  5390  001E1C  50DF               	movf	indf2,w,c
  5391  001E1E  0D0A               	mullw	10
  5392  001E20  50F3               	movf	prodl,w,c
  5393  001E22  256F               	addwf	??_GetDay& (0+255),w,b
  5394  001E24  0FF0               	addlw	240
  5395  001E26  6F75               	movwf	GetDay@d& (0+255),b
  5396                           
  5397                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5398  001E28  516E               	movf	GetDay@Date& (0+255),w,b
  5399  001E2A  EC68  F011         	call	PL44	;call to abstracted procedure
  5400  001E2E  D875               	call	PL98	;call to abstracted procedure
  5401  001E30  0E02               	movlw	2
  5402  001E32  D868               	call	PL16	;call to abstracted procedure
  5403  001E34  256F               	addwf	??_GetDay& (0+255),w,b
  5404  001E36  0FF0               	addlw	240
  5405  001E38  6F76               	movwf	GetDay@m& (0+255),b
  5406                           
  5407                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  5408  001E3A  51F6               	movf	_CENTURY& (0+255),w,b
  5409  001E3C  0D64               	mullw	100
  5410  001E3E  CFF3 F06F          	movff	prodl,??_GetDay
  5411  001E42  CFF4 F070          	movff	prodh,??_GetDay+1
  5412  001E46  516E               	movf	GetDay@Date& (0+255),w,b
  5413  001E48  6ED9               	movwf	fsr2l,c
  5414  001E4A  6ADA               	clrf	fsr2h,c
  5415  001E4C  0E04               	movlw	4
  5416  001E4E  D85A               	call	PL16	;call to abstracted procedure
  5417  001E50  276F               	addwf	??_GetDay& (0+255),f,b
  5418  001E52  50F4               	movf	prodh,w,c
  5419  001E54  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  5420  001E56  516E               	movf	GetDay@Date& (0+255),w,b
  5421  001E58  EC6E  F011         	call	PL52	;call to abstracted procedure
  5422  001E5C  276F               	addwf	??_GetDay& (0+255),f,b
  5423  001E5E  0E00               	movlw	0
  5424  001E60  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  5425  001E62  0EF0               	movlw	240
  5426  001E64  256F               	addwf	??_GetDay& (0+255),w,b
  5427  001E66  6F77               	movwf	GetDay@y& (0+255),b
  5428  001E68  0EFD               	movlw	253
  5429  001E6A  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  5430  001E6C  6F78               	movwf	(GetDay@y+1)& (0+255),b
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  5434                           ;gps.c: 134: y -= m < 3;
  5435  001E6E  0E02               	movlw	2
  5436  001E70  6576               	cpfsgt	GetDay@m& (0+255),b
  5437  001E72  D001               	goto	u2841
  5438  001E74  D002               	goto	u2840
  5439  001E76                     u2841:
  5440  001E76  0E01               	movlw	1
  5441  001E78  D001               	goto	u2850
  5442  001E7A                     u2840:
  5443  001E7A  0E00               	movlw	0
  5444  001E7C                     u2850:
  5445  001E7C  5F77               	subwf	GetDay@y& (0+255),f,b
  5446  001E7E  0E00               	movlw	0
  5447  001E80  5B78               	subwfb	(GetDay@y+1)& (0+255),f,b
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  5451  001E82  5176               	movf	GetDay@m& (0+255),w,b
  5452  001E84  6F6F               	movwf	??_GetDay& (0+255),b
  5453  001E86  6B70               	clrf	(??_GetDay+1)& (0+255),b
  5454  001E88  90D8               	bcf	status,0,c
  5455  001E8A  376F               	rlcf	??_GetDay& (0+255),f,b
  5456  001E8C  3770               	rlcf	(??_GetDay+1)& (0+255),f,b
  5457  001E8E  0E5A               	movlw	low (GetDay@t+65534)
  5458  001E90  256F               	addwf	??_GetDay& (0+255),w,b
  5459  001E92  6ED9               	movwf	fsr2l,c
  5460  001E94  0E01               	movlw	high (GetDay@t+65534)
  5461  001E96  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  5462  001E98  6EDA               	movwf	fsr2h,c
  5463  001E9A  CFDE F071          	movff	postinc2,??_GetDay+2
  5464  001E9E  CFDD F072          	movff	postdec2,??_GetDay+3
  5465  001EA2  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5466  001EA4  0E04               	movlw	4
  5467  001EA6  D833               	call	PL74	;call to abstracted procedure
  5468  001EA8  EC2E  F014         	call	___awdiv	;wreg free
  5469  001EAC  C060  F073         	movff	?___awdiv,??_GetDay+4
  5470  001EB0  C061  F074         	movff	?___awdiv+1,??_GetDay+5
  5471  001EB4  0E01               	movlw	1
  5472  001EB6  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5473  001EB8  0E90               	movlw	144
  5474  001EBA  D829               	call	PL74	;call to abstracted procedure
  5475  001EBC  EC2E  F014         	call	___awdiv	;wreg free
  5476  001EC0  5160               	movf	?___awdiv& (0+255),w,b
  5477  001EC2  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  5478  001EC4  5161               	movf	(?___awdiv+1)& (0+255),w,b
  5479  001EC6  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  5480  001EC8  5175               	movf	GetDay@d& (0+255),w,b
  5481  001ECA  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  5482  001ECC  0E00               	movlw	0
  5483  001ECE  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  5484  001ED0  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5485  001ED2  0E64               	movlw	100
  5486  001ED4  D81C               	call	PL74	;call to abstracted procedure
  5487  001ED6  EC2E  F014         	call	___awdiv	;wreg free
  5488  001EDA  5160               	movf	?___awdiv& (0+255),w,b
  5489  001EDC  5F73               	subwf	(??_GetDay+4)& (0+255),f,b
  5490  001EDE  5161               	movf	(?___awdiv+1)& (0+255),w,b
  5491  001EE0  5B74               	subwfb	(??_GetDay+5)& (0+255),f,b
  5492  001EE2  5171               	movf	(??_GetDay+2)& (0+255),w,b
  5493  001EE4  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  5494  001EE6  5172               	movf	(??_GetDay+3)& (0+255),w,b
  5495  001EE8  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  5496  001EEA  5177               	movf	GetDay@y& (0+255),w,b
  5497  001EEC  2573               	addwf	(??_GetDay+4)& (0+255),w,b
  5498  001EEE  6F68               	movwf	___awmod@dividend& (0+255),b
  5499  001EF0  5178               	movf	(GetDay@y+1)& (0+255),w,b
  5500  001EF2  2174               	addwfc	(??_GetDay+5)& (0+255),w,b
  5501  001EF4  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  5502  001EF6  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  5503  001EF8  0E07               	movlw	7
  5504  001EFA  6F6A               	movwf	___awmod@divisor& (0+255),b
  5505  001EFC  EC9F  F014         	call	___awmod	;wreg free
  5506  001F00  5168               	movf	?___awmod& (0+255),w,b
  5507                           
  5508                           ; BSR set to: 0
  5509  001F02  0012               	return		;funcret
  5510  001F04                     __end_of_GetDay:
  5511                           	opt stack 0
  5512  001F04                     PL16:
  5513                           	opt stack 18
  5514  001F04  26D9               	addwf	fsr2l,f,c
  5515  001F06  50DF               	movf	indf2,w,c
  5516  001F08  0D0A               	mullw	10
  5517  001F0A  50F3               	movf	prodl,w,c
  5518  001F0C  0012               	return	
  5519  001F0E                     __end_ofPL16:
  5520                           	opt stack 0
  5521  001F0E                     PL74:
  5522                           	opt stack 18
  5523  001F0E  6F62               	movwf	___awdiv@divisor& (0+255),b
  5524  001F10  C077  F060         	movff	GetDay@y,___awdiv@dividend
  5525  001F14  C078  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  5526  001F18  0012               	return	
  5527  001F1A                     __end_ofPL74:
  5528                           	opt stack 0
  5529  001F1A                     PL98:
  5530                           	opt stack 18
  5531  001F1A  6F6F               	movwf	??_GetDay& (0+255),b
  5532  001F1C  516E               	movf	GetDay@Date& (0+255),w,b
  5533  001F1E  6ED9               	movwf	fsr2l,c
  5534  001F20  6ADA               	clrf	fsr2h,c
  5535  001F22  0012               	return	
  5536  001F24                     __end_ofPL98:
  5537                           	opt stack 0
  5538                           tosu	equ	0xFFF
  5539                           tosh	equ	0xFFE
  5540                           tosl	equ	0xFFD
  5541                           pclath	equ	0xFFA
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           prodh	equ	0xFF4
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           postinc0	equ	0xFEE
  5550                           plusw0	equ	0xFEB
  5551                           wreg	equ	0xFE8
  5552                           indf1	equ	0xFE7
  5553                           postinc1	equ	0xFE6
  5554                           postdec1	equ	0xFE5
  5555                           plusw1	equ	0xFE3
  5556                           fsr1h	equ	0xFE2
  5557                           fsr1l	equ	0xFE1
  5558                           indf2	equ	0xFDF
  5559                           postinc2	equ	0xFDE
  5560                           postdec2	equ	0xFDD
  5561                           plusw2	equ	0xFDB
  5562                           fsr2h	equ	0xFDA
  5563                           fsr2l	equ	0xFD9
  5564                           status	equ	0xFD8
  5565                           
  5566 ;; *************** function ___awmod *****************
  5567 ;; Defined at:
  5568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  dividend        2    8[BANK0 ] int 
  5571 ;;  divisor         2   10[BANK0 ] int 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  sign            1   13[BANK0 ] unsigned char 
  5574 ;;  counter         1   12[BANK0 ] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  2    8[BANK0 ] int 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0
  5579 ;; Tracked objects:
  5580 ;;		On entry : 3F/0
  5581 ;;		On exit  : 3F/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5584 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5585 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5587 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5588 ;;Total ram usage:        6 bytes
  5589 ;; Hardware stack levels used:    1
  5590 ;; Hardware stack levels required when called:    9
  5591 ;; This function calls:
  5592 ;;		Nothing
  5593 ;; This function is called by:
  5594 ;;		_GetDay
  5595 ;; This function uses a non-reentrant model
  5596 ;;
  5597                           
  5598                           	psect	text21
  5599  00293E                     __ptext21:
  5600                           	opt stack 0
  5601  00293E                     ___awmod:
  5602                           	opt stack 18
  5603                           
  5604                           ; BSR set to: 0
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;incstack = 0
  5608  00293E  6B6D               	clrf	___awmod@sign& (0+255),b
  5609                           
  5610                           ; BSR set to: 0
  5611  002940  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5612  002942  D006               	goto	l3249
  5613                           
  5614                           ; BSR set to: 0
  5615  002944  6D68               	negf	___awmod@dividend& (0+255),b
  5616  002946  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  5617  002948  B0D8               	btfsc	status,0,c
  5618  00294A  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  5619                           
  5620                           ; BSR set to: 0
  5621  00294C  0E01               	movlw	1
  5622  00294E  6F6D               	movwf	___awmod@sign& (0+255),b
  5623  002950                     l3249:
  5624                           
  5625                           ; BSR set to: 0
  5626  002950  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5627  002952  D004               	goto	l3253
  5628                           
  5629                           ; BSR set to: 0
  5630  002954  6D6A               	negf	___awmod@divisor& (0+255),b
  5631  002956  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  5632  002958  B0D8               	btfsc	status,0,c
  5633  00295A  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  5634  00295C                     l3253:
  5635                           
  5636                           ; BSR set to: 0
  5637  00295C  516A               	movf	___awmod@divisor& (0+255),w,b
  5638  00295E  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5639  002960  E017               	bz	l3269
  5640                           
  5641                           ; BSR set to: 0
  5642  002962  0E01               	movlw	1
  5643  002964  6F6C               	movwf	___awmod@counter& (0+255),b
  5644  002966  D004               	goto	l3259
  5645  002968                     l3257:
  5646                           
  5647                           ; BSR set to: 0
  5648  002968  90D8               	bcf	status,0,c
  5649  00296A  376A               	rlcf	___awmod@divisor& (0+255),f,b
  5650  00296C  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5651  00296E  2B6C               	incf	___awmod@counter& (0+255),f,b
  5652  002970                     l3259:
  5653                           
  5654                           ; BSR set to: 0
  5655  002970  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5656  002972  D7FA               	goto	l3257
  5657  002974                     l3261:
  5658                           
  5659                           ; BSR set to: 0
  5660  002974  516A               	movf	___awmod@divisor& (0+255),w,b
  5661  002976  5D68               	subwf	___awmod@dividend& (0+255),w,b
  5662  002978  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  5663  00297A  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5664  00297C  E304               	bnc	l3265
  5665                           
  5666                           ; BSR set to: 0
  5667  00297E  516A               	movf	___awmod@divisor& (0+255),w,b
  5668  002980  5F68               	subwf	___awmod@dividend& (0+255),f,b
  5669  002982  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  5670  002984  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5671  002986                     l3265:
  5672                           
  5673                           ; BSR set to: 0
  5674  002986  90D8               	bcf	status,0,c
  5675  002988  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5676  00298A  336A               	rrcf	___awmod@divisor& (0+255),f,b
  5677                           
  5678                           ; BSR set to: 0
  5679  00298C  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  5680  00298E  D7F2               	goto	l3261
  5681  002990                     l3269:
  5682                           
  5683                           ; BSR set to: 0
  5684  002990  516D               	movf	___awmod@sign& (0+255),w,b
  5685  002992  E004               	bz	l3273
  5686                           
  5687                           ; BSR set to: 0
  5688  002994  6D68               	negf	___awmod@dividend& (0+255),b
  5689  002996  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  5690  002998  B0D8               	btfsc	status,0,c
  5691  00299A  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  5692  00299C                     l3273:
  5693                           
  5694                           ; BSR set to: 0
  5695  00299C  C068  F068         	movff	___awmod@dividend,?___awmod
  5696  0029A0  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  5697                           
  5698                           ; BSR set to: 0
  5699  0029A4  0012               	return		;funcret
  5700  0029A6                     __end_of___awmod:
  5701                           	opt stack 0
  5702                           tosu	equ	0xFFF
  5703                           tosh	equ	0xFFE
  5704                           tosl	equ	0xFFD
  5705                           pclath	equ	0xFFA
  5706                           tblptru	equ	0xFF8
  5707                           tblptrh	equ	0xFF7
  5708                           tblptrl	equ	0xFF6
  5709                           tablat	equ	0xFF5
  5710                           prodh	equ	0xFF4
  5711                           prodl	equ	0xFF3
  5712                           intcon	equ	0xFF2
  5713                           postinc0	equ	0xFEE
  5714                           plusw0	equ	0xFEB
  5715                           wreg	equ	0xFE8
  5716                           indf1	equ	0xFE7
  5717                           postinc1	equ	0xFE6
  5718                           postdec1	equ	0xFE5
  5719                           plusw1	equ	0xFE3
  5720                           fsr1h	equ	0xFE2
  5721                           fsr1l	equ	0xFE1
  5722                           indf2	equ	0xFDF
  5723                           postinc2	equ	0xFDE
  5724                           postdec2	equ	0xFDD
  5725                           plusw2	equ	0xFDB
  5726                           fsr2h	equ	0xFDA
  5727                           fsr2l	equ	0xFD9
  5728                           status	equ	0xFD8
  5729                           
  5730 ;; *************** function _EUSART1_Initialize *****************
  5731 ;; Defined at:
  5732 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  5733 ;; Parameters:    Size  Location     Type
  5734 ;;		None
  5735 ;; Auto vars:     Size  Location     Type
  5736 ;;		None
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  1    wreg      void 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2
  5741 ;; Tracked objects:
  5742 ;;		On entry : 3F/0
  5743 ;;		On exit  : 3F/0
  5744 ;;		Unchanged: 3F/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5750 ;;Total ram usage:        0 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    9
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_ReadGPS_DATE_TIME
  5757 ;;		_SYSTEM_Initialize
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           	psect	text22
  5762  002E58                     __ptext22:
  5763                           	opt stack 0
  5764  002E58                     _EUSART1_Initialize:
  5765                           	opt stack 20
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;eusart1.c: 60: BAUD1CON = 0x08;
  5769                           
  5770                           ; BSR set to: 0
  5771                           ;incstack = 0
  5772  002E58  0E08               	movlw	8
  5773  002E5A  6E9F               	movwf	3999,c	;volatile
  5774                           
  5775                           ;eusart1.c: 63: RC1STA = 0x90;
  5776  002E5C  0E90               	movlw	144
  5777  002E5E  6E9D               	movwf	3997,c	;volatile
  5778                           
  5779                           ;eusart1.c: 66: TX1STA = 0x84;
  5780  002E60  0E84               	movlw	132
  5781  002E62  6E9E               	movwf	3998,c	;volatile
  5782                           
  5783                           ;eusart1.c: 69: SP1BRGL = 0x67;
  5784  002E64  0E67               	movlw	103
  5785  002E66  6E9B               	movwf	3995,c	;volatile
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;eusart1.c: 72: SP1BRGH = 0x00;
  5789  002E68  6A9C               	clrf	3996,c	;volatile
  5790                           
  5791                           ; BSR set to: 0
  5792  002E6A  0012               	return		;funcret
  5793  002E6C                     __end_of_EUSART1_Initialize:
  5794                           	opt stack 0
  5795                           tosu	equ	0xFFF
  5796                           tosh	equ	0xFFE
  5797                           tosl	equ	0xFFD
  5798                           pclath	equ	0xFFA
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           postinc0	equ	0xFEE
  5807                           plusw0	equ	0xFEB
  5808                           wreg	equ	0xFE8
  5809                           indf1	equ	0xFE7
  5810                           postinc1	equ	0xFE6
  5811                           postdec1	equ	0xFE5
  5812                           plusw1	equ	0xFE3
  5813                           fsr1h	equ	0xFE2
  5814                           fsr1l	equ	0xFE1
  5815                           indf2	equ	0xFDF
  5816                           postinc2	equ	0xFDE
  5817                           postdec2	equ	0xFDD
  5818                           plusw2	equ	0xFDB
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function _AdjustDayLightSaving *****************
  5824 ;; Defined at:
  5825 ;;		line 93 in file "libs/funcs.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  Present         2   56[BANK0 ] unsigned short 
  5830 ;;  End             2   54[BANK0 ] unsigned short 
  5831 ;;  Start           2   52[BANK0 ] unsigned short 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  5834 ;; Registers used:
  5835 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5836 ;; Tracked objects:
  5837 ;;		On entry : 3F/0
  5838 ;;		On exit  : 3F/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5841 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5842 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5844 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5845 ;;Total ram usage:       17 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:   13
  5848 ;; This function calls:
  5849 ;;		_DecreaseByADay
  5850 ;;		_IncreaseByADay
  5851 ;;		___wmul
  5852 ;; This function is called by:
  5853 ;;		_ReadGPS_DATE_TIME
  5854 ;; This function uses a non-reentrant model
  5855 ;;
  5856                           
  5857                           	psect	text23
  5858  001CF0                     __ptext23:
  5859                           	opt stack 0
  5860  001CF0                     _AdjustDayLightSaving:
  5861                           	opt stack 15
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;funcs.c: 94: UINT16 Start, End, Present;
  5865                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;incstack = 0
  5869  001CF0  C0DA  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  5870  001CF4  C0DB  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  5871  001CF8  D889               	call	PL110	;call to abstracted procedure
  5872  001CFA  ECE9  F016         	call	___wmul	;wreg free
  5873  001CFE  51D8               	movf	_DAY_LIGHT_START& (0+255),w,b
  5874  001D00  2560               	addwf	?___wmul& (0+255),w,b
  5875  001D02  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  5876  001D04  51D9               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  5877  001D06  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5878  001D08  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  5879                           
  5880                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  5881  001D0A  C0D6  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  5882  001D0E  C0D7  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  5883  001D12  D87C               	call	PL110	;call to abstracted procedure
  5884  001D14  ECE9  F016         	call	___wmul	;wreg free
  5885  001D18  51D4               	movf	_DAY_LIGHT_END& (0+255),w,b
  5886  001D1A  2560               	addwf	?___wmul& (0+255),w,b
  5887  001D1C  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  5888  001D1E  51D5               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  5889  001D20  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5890  001D22  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  5891                           
  5892                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  5893  001D24  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  5894  001D28  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  5895  001D2C  D86F               	call	PL110	;call to abstracted procedure
  5896  001D2E  ECE9  F016         	call	___wmul	;wreg free
  5897  001D32  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  5898  001D34  2560               	addwf	?___wmul& (0+255),w,b
  5899  001D36  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  5900  001D38  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  5901  001D3A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5902  001D3C  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;funcs.c: 98: if (Start > End) {
  5906  001D3E  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  5907  001D40  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  5908  001D42  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  5909  001D44  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  5910  001D46  E20F               	bc	l3421
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  5914  001D48  D85C               	call	PL104	;call to abstracted procedure
  5915  001D4A  E205               	bc	l3419
  5916  001D4C                     l3417:
  5917                           
  5918                           ; BSR set to: 0
  5919  001D4C  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  5920  001D4E  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  5921  001D50  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  5922  001D52  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  5923  001D54  E30B               	bnc	l641
  5924  001D56                     l3419:
  5925                           
  5926                           ; BSR set to: 0
  5927                           ;funcs.c: 100: dt.SECOND += 3600;
  5928  001D56  0E10               	movlw	16
  5929  001D58  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  5930  001D5A  0E0E               	movlw	14
  5931  001D5C  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  5932  001D5E  0E00               	movlw	0
  5933  001D60  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  5934  001D62  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  5935  001D64  D003               	goto	l641
  5936  001D66                     l3421:
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  5940  001D66  D84D               	call	PL104	;call to abstracted procedure
  5941  001D68  E301               	bnc	l641
  5942  001D6A  D7F0               	goto	l3417
  5943  001D6C                     l641:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;funcs.c: 104: }
  5947                           ;funcs.c: 105: if (dt.SECOND < 0) {
  5948  001D6C  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  5949  001D6E  D01A               	goto	l3431
  5950                           
  5951                           ; BSR set to: 0
  5952                           ;funcs.c: 106: dt.SECOND += 86400;
  5953  001D70  0E80               	movlw	128
  5954  001D72  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  5955  001D74  0E51               	movlw	81
  5956  001D76  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  5957  001D78  0E01               	movlw	1
  5958  001D7A  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  5959  001D7C  0E00               	movlw	0
  5960  001D7E  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  5964  001D80  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5965  001D84  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  5966  001D88  0E0A               	movlw	10
  5967  001D8A                     u3041:
  5968  001D8A  CFDB FFEB          	movff	plusw2,plusw0
  5969  001D8E  06E8               	decf	wreg,f,c
  5970  001D90  E2FC               	bc	u3041
  5971  001D92  EC8B  F010         	call	_DecreaseByADay	;wreg free
  5972  001D96  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5973  001D9A  0E0A               	movlw	10
  5974  001D9C                     u3051:
  5975  001D9C  CFEB FFDB          	movff	plusw0,plusw2
  5976  001DA0  06E8               	decf	wreg,f,c
  5977  001DA2  E2FC               	bc	u3051
  5978  001DA4                     l3431:
  5979                           
  5980                           ; BSR set to: 0
  5981                           ;funcs.c: 108: }
  5982                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  5983  001DA4  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  5984  001DA6  D023               	goto	l3437
  5985  001DA8  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  5986  001DAA  E107               	bnz	u3060
  5987  001DAC  0E81               	movlw	129
  5988  001DAE  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  5989  001DB0  0E51               	movlw	81
  5990  001DB2  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  5991  001DB4  0E01               	movlw	1
  5992  001DB6  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  5993  001DB8  E31A               	bnc	l3437
  5994  001DBA                     u3060:
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;funcs.c: 110: dt.SECOND -= 86400;
  5998  001DBA  0E80               	movlw	128
  5999  001DBC  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6000  001DBE  0EAE               	movlw	174
  6001  001DC0  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6002  001DC2  0EFE               	movlw	254
  6003  001DC4  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6004  001DC6  0EFF               	movlw	255
  6005  001DC8  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  6009  001DCA  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6010  001DCE  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  6011  001DD2  0E0A               	movlw	10
  6012  001DD4                     u3071:
  6013  001DD4  CFDB FFEB          	movff	plusw2,plusw0
  6014  001DD8  06E8               	decf	wreg,f,c
  6015  001DDA  E2FC               	bc	u3071
  6016  001DDC  EC5E  F012         	call	_IncreaseByADay	;wreg free
  6017  001DE0  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6018  001DE4  0E0A               	movlw	10
  6019  001DE6                     u3081:
  6020  001DE6  CFEB FFDB          	movff	plusw0,plusw2
  6021  001DEA  06E8               	decf	wreg,f,c
  6022  001DEC  E2FC               	bc	u3081
  6023  001DEE                     l3437:
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;funcs.c: 112: }
  6027                           ;funcs.c: 113: return dt;
  6028  001DEE  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6029  001DF2  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  6030  001DF6  0E0A               	movlw	10
  6031  001DF8                     u3091:
  6032  001DF8  CFDB FFEB          	movff	plusw2,plusw0
  6033  001DFC  06E8               	decf	wreg,f,c
  6034  001DFE  E2FC               	bc	u3091
  6035                           
  6036                           ; BSR set to: 0
  6037  001E00  0012               	return		;funcret
  6038  001E02                     __end_of_AdjustDayLightSaving:
  6039                           	opt stack 0
  6040  001E02                     PL104:
  6041                           	opt stack 15
  6042  001E02  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  6043  001E04  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  6044  001E06  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  6045  001E08  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  6046  001E0A  0012               	return	
  6047  001E0C                     __end_ofPL104:
  6048                           	opt stack 0
  6049  001E0C                     PL110:
  6050                           	opt stack 15
  6051  001E0C  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  6052  001E0E  0E64               	movlw	100
  6053  001E10  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6054  001E12  0C64               	retlw	100
  6055  001E14                     __end_ofPL110:
  6056                           	opt stack 0
  6057                           tosu	equ	0xFFF
  6058                           tosh	equ	0xFFE
  6059                           tosl	equ	0xFFD
  6060                           pclath	equ	0xFFA
  6061                           tblptru	equ	0xFF8
  6062                           tblptrh	equ	0xFF7
  6063                           tblptrl	equ	0xFF6
  6064                           tablat	equ	0xFF5
  6065                           prodh	equ	0xFF4
  6066                           prodl	equ	0xFF3
  6067                           intcon	equ	0xFF2
  6068                           postinc0	equ	0xFEE
  6069                           plusw0	equ	0xFEB
  6070                           wreg	equ	0xFE8
  6071                           indf1	equ	0xFE7
  6072                           postinc1	equ	0xFE6
  6073                           postdec1	equ	0xFE5
  6074                           plusw1	equ	0xFE3
  6075                           fsr1h	equ	0xFE2
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           plusw2	equ	0xFDB
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085 ;; *************** function _IncreaseByADay *****************
  6086 ;; Defined at:
  6087 ;;		line 12 in file "libs/funcs.c"
  6088 ;; Parameters:    Size  Location     Type
  6089 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  MonthDays       1   40[BANK0 ] char 
  6092 ;; Return value:  Size  Location     Type
  6093 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  6094 ;; Registers used:
  6095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6096 ;; Tracked objects:
  6097 ;;		On entry : 3F/0
  6098 ;;		On exit  : 3F/0
  6099 ;;		Unchanged: 0/0
  6100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6101 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6104 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6105 ;;Total ram usage:       14 bytes
  6106 ;; Hardware stack levels used:    1
  6107 ;; Hardware stack levels required when called:   12
  6108 ;; This function calls:
  6109 ;;		_IncreaseByAMonth
  6110 ;;		___lwmod
  6111 ;; This function is called by:
  6112 ;;		_AdjustDayLightSaving
  6113 ;;		_ReadGPS_DATE_TIME
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117                           	psect	text24
  6118  0024BC                     __ptext24:
  6119                           	opt stack 0
  6120  0024BC                     _IncreaseByADay:
  6121                           	opt stack 16
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;funcs.c: 13: dt.DATE.Day++;
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;incstack = 0
  6128  0024BC  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  6129  0024BE  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  6133  0024C0  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  6134  0024C2  0B7F               	andlw	127
  6135  0024C4  06E8               	decf	wreg,f,c
  6136  0024C6  E104               	bnz	l3117
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  6140  0024C8  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  6141  0024CA  0B01               	andlw	-255
  6142  0024CC  0980               	iorlw	128
  6143  0024CE  D00A               	goto	L2
  6144  0024D0                     l3117:
  6145                           
  6146                           ; BSR set to: 0
  6147                           ;funcs.c: 16: else
  6148                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  6149  0024D0  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  6150  0024D2  0B7F               	andlw	127
  6151  0024D4  6F86               	movwf	??_IncreaseByADay& (0+255),b
  6152  0024D6  90D8               	bcf	status,0,c
  6153  0024D8  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  6154  0024DA  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  6155  0024DC  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  6156  0024DE  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  6157  0024E0  0B01               	andlw	-255
  6158  0024E2  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  6159  0024E4                     L2:
  6160  0024E4  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  6164  0024E6  90D8               	bcf	status,0,c
  6165  0024E8  3581               	rlcf	(IncreaseByADay@dt+6)& (0+255),w,b
  6166  0024EA  6ED9               	movwf	fsr2l,c
  6167  0024EC  3582               	rlcf	(IncreaseByADay@dt+7)& (0+255),w,b
  6168  0024EE  ECF2  F010         	call	PL60	;call to abstracted procedure
  6169  0024F2  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  6170                           
  6171                           ; BSR set to: 0
  6172                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  6173  0024F4  0E02               	movlw	2
  6174  0024F6  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  6175  0024F8  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  6176  0024FA  E107               	bnz	l3127
  6177                           
  6178                           ; BSR set to: 0
  6179  0024FC  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  6180  002500  0E03               	movlw	3
  6181  002502  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  6182  002504  E102               	bnz	l3127
  6183                           
  6184                           ; BSR set to: 0
  6185                           ;funcs.c: 20: MonthDays = 29;
  6186  002506  0E1D               	movlw	29
  6187  002508  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  6188  00250A                     l3127:
  6189                           
  6190                           ; BSR set to: 0
  6191                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  6192  00250A  0E02               	movlw	2
  6193  00250C  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  6194  00250E  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  6195  002510  E10A               	bnz	l3133
  6196                           
  6197                           ; BSR set to: 0
  6198  002512  D840               	call	PL96	;call to abstracted procedure
  6199  002514  EC9B  F016         	call	PL100	;call to abstracted procedure
  6200  002518  EC0E  F016         	call	___lwmod	;wreg free
  6201  00251C  5160               	movf	?___lwmod& (0+255),w,b
  6202  00251E  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6203  002520  E102               	bnz	l3133
  6204                           
  6205                           ; BSR set to: 0
  6206                           ;funcs.c: 22: MonthDays = 28;
  6207  002522  0E1C               	movlw	28
  6208  002524  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  6209  002526                     l3133:
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  6213  002526  0E02               	movlw	2
  6214  002528  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  6215  00252A  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  6216  00252C  E10A               	bnz	l3139
  6217                           
  6218                           ; BSR set to: 0
  6219  00252E  D832               	call	PL96	;call to abstracted procedure
  6220  002530  ECFE  F010         	call	PL106	;call to abstracted procedure
  6221  002534  EC0E  F016         	call	___lwmod	;wreg free
  6222  002538  5160               	movf	?___lwmod& (0+255),w,b
  6223  00253A  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6224  00253C  E102               	bnz	l3139
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;funcs.c: 24: MonthDays = 29;
  6228  00253E  0E1D               	movlw	29
  6229  002540  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  6230  002542                     l3139:
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  6234  002542  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  6235  002546  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  6236  002548  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  6237  00254A  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  6238  00254C  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  6239  00254E  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  6240  002550  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  6241  002552  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  6242  002554  E215               	bc	l3145
  6243                           
  6244                           ; BSR set to: 0
  6245                           ;funcs.c: 26: dt.DATE.Day = 1;
  6246  002556  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  6247  002558  0E01               	movlw	1
  6248  00255A  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  6249                           
  6250                           ; BSR set to: 0
  6251                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  6252  00255C  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  6253  002560  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  6254  002564  0E0A               	movlw	10
  6255  002566                     u2451:
  6256  002566  CFDB FFEB          	movff	plusw2,plusw0
  6257  00256A  06E8               	decf	wreg,f,c
  6258  00256C  E2FC               	bc	u2451
  6259  00256E  EC80  F015         	call	_IncreaseByAMonth	;wreg free
  6260  002572  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  6261  002576  0E0A               	movlw	10
  6262  002578                     u2461:
  6263  002578  CFEB FFDB          	movff	plusw0,plusw2
  6264  00257C  06E8               	decf	wreg,f,c
  6265  00257E  E2FC               	bc	u2461
  6266  002580                     l3145:
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;funcs.c: 28: }
  6270                           ;funcs.c: 29: return dt;
  6271  002580  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  6272  002584  EE00  F07B         	lfsr	0,?_IncreaseByADay
  6273  002588  0E0A               	movlw	10
  6274  00258A                     u2471:
  6275  00258A  CFDB FFEB          	movff	plusw2,plusw0
  6276  00258E  06E8               	decf	wreg,f,c
  6277  002590  E2FC               	bc	u2471
  6278                           
  6279                           ; BSR set to: 0
  6280  002592  0012               	return		;funcret
  6281  002594                     __end_of_IncreaseByADay:
  6282                           	opt stack 0
  6283  002594                     PL96:
  6284                           	opt stack 16
  6285  002594  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  6286  002598  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  6287  00259C  0012               	return	
  6288  00259E                     __end_ofPL96:
  6289                           	opt stack 0
  6290                           tosu	equ	0xFFF
  6291                           tosh	equ	0xFFE
  6292                           tosl	equ	0xFFD
  6293                           pclath	equ	0xFFA
  6294                           tblptru	equ	0xFF8
  6295                           tblptrh	equ	0xFF7
  6296                           tblptrl	equ	0xFF6
  6297                           tablat	equ	0xFF5
  6298                           prodh	equ	0xFF4
  6299                           prodl	equ	0xFF3
  6300                           intcon	equ	0xFF2
  6301                           postinc0	equ	0xFEE
  6302                           plusw0	equ	0xFEB
  6303                           wreg	equ	0xFE8
  6304                           indf1	equ	0xFE7
  6305                           postinc1	equ	0xFE6
  6306                           postdec1	equ	0xFE5
  6307                           plusw1	equ	0xFE3
  6308                           fsr1h	equ	0xFE2
  6309                           fsr1l	equ	0xFE1
  6310                           indf2	equ	0xFDF
  6311                           postinc2	equ	0xFDE
  6312                           postdec2	equ	0xFDD
  6313                           plusw2	equ	0xFDB
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _IncreaseByAMonth *****************
  6319 ;; Defined at:
  6320 ;;		line 32 in file "libs/funcs.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;		None
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  6327 ;; Registers used:
  6328 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 3F/0
  6331 ;;		On exit  : 3F/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6334 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6337 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6338 ;;Total ram usage:       11 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:   11
  6341 ;; This function calls:
  6342 ;;		_IncreaseByAYear
  6343 ;; This function is called by:
  6344 ;;		_IncreaseByADay
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text25
  6349  002B00                     __ptext25:
  6350                           	opt stack 0
  6351  002B00                     _IncreaseByAMonth:
  6352                           	opt stack 16
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;funcs.c: 33: dt.DATE.Month++;
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;incstack = 0
  6359  002B00  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  6360  002B02  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  6361                           
  6362                           ; BSR set to: 0
  6363                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  6364  002B04  0E0D               	movlw	13
  6365  002B06  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  6366  002B08  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  6367  002B0A  E115               	bnz	l3039
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;funcs.c: 35: dt.DATE.Month = 1;
  6371  002B0C  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  6372  002B0E  0E01               	movlw	1
  6373  002B10  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  6377  002B12  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  6378  002B16  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  6379  002B1A  0E0A               	movlw	10
  6380  002B1C                     u2131:
  6381  002B1C  CFDB FFEB          	movff	plusw2,plusw0
  6382  002B20  06E8               	decf	wreg,f,c
  6383  002B22  E2FC               	bc	u2131
  6384  002B24  EC84  F016         	call	_IncreaseByAYear	;wreg free
  6385  002B28  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  6386  002B2C  0E0A               	movlw	10
  6387  002B2E                     u2141:
  6388  002B2E  CFEB FFDB          	movff	plusw0,plusw2
  6389  002B32  06E8               	decf	wreg,f,c
  6390  002B34  E2FC               	bc	u2141
  6391  002B36                     l3039:
  6392                           
  6393                           ; BSR set to: 0
  6394                           ;funcs.c: 37: }
  6395                           ;funcs.c: 38: return dt;
  6396  002B36  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  6397  002B3A  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  6398  002B3E  0E0A               	movlw	10
  6399  002B40                     u2151:
  6400  002B40  CFDB FFEB          	movff	plusw2,plusw0
  6401  002B44  06E8               	decf	wreg,f,c
  6402  002B46  E2FC               	bc	u2151
  6403                           
  6404                           ; BSR set to: 0
  6405  002B48  0012               	return		;funcret
  6406  002B4A                     __end_of_IncreaseByAMonth:
  6407                           	opt stack 0
  6408                           tosu	equ	0xFFF
  6409                           tosh	equ	0xFFE
  6410                           tosl	equ	0xFFD
  6411                           pclath	equ	0xFFA
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           postinc0	equ	0xFEE
  6420                           plusw0	equ	0xFEB
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           postinc1	equ	0xFE6
  6424                           postdec1	equ	0xFE5
  6425                           plusw1	equ	0xFE3
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _IncreaseByAYear *****************
  6437 ;; Defined at:
  6438 ;;		line 41 in file "libs/funcs.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  6445 ;; Registers used:
  6446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 3F/0
  6449 ;;		On exit  : 3F/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6452 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;Total ram usage:       11 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:   10
  6459 ;; This function calls:
  6460 ;;		___lwmod
  6461 ;; This function is called by:
  6462 ;;		_IncreaseByAMonth
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text26
  6467  002D08                     __ptext26:
  6468                           	opt stack 0
  6469  002D08                     _IncreaseByAYear:
  6470                           	opt stack 16
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;funcs.c: 42: dt.YEAR++;
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;incstack = 0
  6477  002D08  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  6478  002D0A  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  6482  002D0C  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  6483  002D10  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  6484  002D14  D810               	call	PL100	;call to abstracted procedure
  6485  002D16  EC0E  F016         	call	___lwmod	;wreg free
  6486  002D1A  5160               	movf	?___lwmod& (0+255),w,b
  6487  002D1C  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6488  002D1E  E101               	bnz	l3007
  6489                           
  6490                           ; BSR set to: 0
  6491                           ;funcs.c: 44: CENTURY++;
  6492  002D20  2BF6               	incf	_CENTURY& (0+255),f,b
  6493  002D22                     l3007:
  6494                           
  6495                           ; BSR set to: 0
  6496                           ;funcs.c: 45: return dt;
  6497  002D22  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  6498  002D26  EE00  F065         	lfsr	0,?_IncreaseByAYear
  6499  002D2A  0E0A               	movlw	10
  6500  002D2C                     u2051:
  6501  002D2C  CFDB FFEB          	movff	plusw2,plusw0
  6502  002D30  06E8               	decf	wreg,f,c
  6503  002D32  E2FC               	bc	u2051
  6504                           
  6505                           ; BSR set to: 0
  6506  002D34  0012               	return		;funcret
  6507  002D36                     __end_of_IncreaseByAYear:
  6508                           	opt stack 0
  6509  002D36                     PL100:
  6510                           	opt stack 16
  6511  002D36  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  6512  002D38  0E64               	movlw	100
  6513  002D3A  6F62               	movwf	___lwmod@divisor& (0+255),b
  6514  002D3C  0C64               	retlw	100
  6515  002D3E                     __end_ofPL100:
  6516                           	opt stack 0
  6517                           tosu	equ	0xFFF
  6518                           tosh	equ	0xFFE
  6519                           tosl	equ	0xFFD
  6520                           pclath	equ	0xFFA
  6521                           tblptru	equ	0xFF8
  6522                           tblptrh	equ	0xFF7
  6523                           tblptrl	equ	0xFF6
  6524                           tablat	equ	0xFF5
  6525                           prodh	equ	0xFF4
  6526                           prodl	equ	0xFF3
  6527                           intcon	equ	0xFF2
  6528                           postinc0	equ	0xFEE
  6529                           plusw0	equ	0xFEB
  6530                           wreg	equ	0xFE8
  6531                           indf1	equ	0xFE7
  6532                           postinc1	equ	0xFE6
  6533                           postdec1	equ	0xFE5
  6534                           plusw1	equ	0xFE3
  6535                           fsr1h	equ	0xFE2
  6536                           fsr1l	equ	0xFE1
  6537                           indf2	equ	0xFDF
  6538                           postinc2	equ	0xFDE
  6539                           postdec2	equ	0xFDD
  6540                           plusw2	equ	0xFDB
  6541                           fsr2h	equ	0xFDA
  6542                           fsr2l	equ	0xFD9
  6543                           status	equ	0xFD8
  6544                           
  6545 ;; *************** function _DecreaseByADay *****************
  6546 ;; Defined at:
  6547 ;;		line 57 in file "libs/funcs.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  MonthDays       1   39[BANK0 ] char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  6554 ;; Registers used:
  6555 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 3F/0
  6558 ;;		On exit  : 3F/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6561 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6563 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6564 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6565 ;;Total ram usage:       13 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:   12
  6568 ;; This function calls:
  6569 ;;		_DecreaseByAMonth
  6570 ;;		___lwmod
  6571 ;; This function is called by:
  6572 ;;		_AdjustDayLightSaving
  6573 ;;		_ReadGPS_DATE_TIME
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text27
  6578  002116                     __ptext27:
  6579                           	opt stack 0
  6580  002116                     _DecreaseByADay:
  6581                           	opt stack 16
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  6585                           
  6586                           ; BSR set to: 0
  6587                           ;incstack = 0
  6588  002116  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  6589  002118  0B7F               	andlw	127
  6590  00211A  0A40               	xorlw	64
  6591  00211C  E104               	bnz	l3153
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  6595  00211E  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  6596  002120  0B01               	andlw	-255
  6597  002122  0902               	iorlw	2
  6598  002124  D00A               	goto	L3
  6599  002126                     l3153:
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;funcs.c: 60: else
  6603                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  6604  002126  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  6605  002128  0B7F               	andlw	127
  6606  00212A  6F86               	movwf	??_DecreaseByADay& (0+255),b
  6607  00212C  90D8               	bcf	status,0,c
  6608  00212E  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  6609  002130  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  6610  002132  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  6611  002134  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  6612  002136  0B01               	andlw	-255
  6613  002138  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  6614  00213A                     L3:
  6615  00213A  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  6619  00213C  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  6620  00213E  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  6621  002140  E144               	bnz	l3177
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  6625  002142  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  6626  002146  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  6627  00214A  0E0A               	movlw	10
  6628  00214C                     u2501:
  6629  00214C  CFDB FFEB          	movff	plusw2,plusw0
  6630  002150  06E8               	decf	wreg,f,c
  6631  002152  E2FC               	bc	u2501
  6632  002154  EC5A  F015         	call	_DecreaseByAMonth	;wreg free
  6633  002158  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  6634  00215C  0E0A               	movlw	10
  6635  00215E                     u2511:
  6636  00215E  CFEB FFDB          	movff	plusw0,plusw2
  6637  002162  06E8               	decf	wreg,f,c
  6638  002164  E2FC               	bc	u2511
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  6642  002166  90D8               	bcf	status,0,c
  6643  002168  3581               	rlcf	(DecreaseByADay@dt+6)& (0+255),w,b
  6644  00216A  6ED9               	movwf	fsr2l,c
  6645  00216C  3582               	rlcf	(DecreaseByADay@dt+7)& (0+255),w,b
  6646  00216E  D83A               	call	PL60	;call to abstracted procedure
  6647  002170  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6648                           
  6649                           ; BSR set to: 0
  6650                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  6651  002172  0E02               	movlw	2
  6652  002174  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  6653  002176  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  6654  002178  E107               	bnz	l3165
  6655                           
  6656                           ; BSR set to: 0
  6657  00217A  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  6658  00217E  0E03               	movlw	3
  6659  002180  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  6660  002182  E102               	bnz	l3165
  6661                           
  6662                           ; BSR set to: 0
  6663                           ;funcs.c: 66: MonthDays = 29;
  6664  002184  0E1D               	movlw	29
  6665  002186  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6666  002188                     l3165:
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  6670  002188  0E02               	movlw	2
  6671  00218A  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  6672  00218C  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  6673  00218E  E10A               	bnz	l3171
  6674                           
  6675                           ; BSR set to: 0
  6676  002190  D830               	call	PL94	;call to abstracted procedure
  6677  002192  EC9B  F016         	call	PL100	;call to abstracted procedure
  6678  002196  EC0E  F016         	call	___lwmod	;wreg free
  6679  00219A  5160               	movf	?___lwmod& (0+255),w,b
  6680  00219C  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6681  00219E  E102               	bnz	l3171
  6682                           
  6683                           ; BSR set to: 0
  6684                           ;funcs.c: 68: MonthDays = 28;
  6685  0021A0  0E1C               	movlw	28
  6686  0021A2  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6687  0021A4                     l3171:
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  6691  0021A4  0E02               	movlw	2
  6692  0021A6  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  6693  0021A8  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  6694  0021AA  E109               	bnz	l623
  6695                           
  6696                           ; BSR set to: 0
  6697  0021AC  D822               	call	PL94	;call to abstracted procedure
  6698  0021AE  D826               	call	PL106	;call to abstracted procedure
  6699  0021B0  EC0E  F016         	call	___lwmod	;wreg free
  6700  0021B4  5160               	movf	?___lwmod& (0+255),w,b
  6701  0021B6  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6702  0021B8  E102               	bnz	l623
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;funcs.c: 70: MonthDays = 29;
  6706  0021BA  0E1D               	movlw	29
  6707  0021BC  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6708  0021BE                     l623:
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  6712  0021BE  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  6713  0021C0  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  6714  0021C2  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  6715  0021C4  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  6716  0021C6  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  6717                           
  6718                           ;funcs.c: 72: } else
  6719  0021C8  D003               	goto	l3179
  6720  0021CA                     l3177:
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;funcs.c: 73: dt.DATE.Day--;
  6724  0021CA  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  6725  0021CC  A0D8               	btfss	status,0,c
  6726  0021CE  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  6727  0021D0                     l3179:
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;funcs.c: 74: return dt;
  6731  0021D0  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  6732  0021D4  EE00  F07B         	lfsr	0,?_DecreaseByADay
  6733  0021D8  0E0A               	movlw	10
  6734  0021DA                     u2581:
  6735  0021DA  CFDB FFEB          	movff	plusw2,plusw0
  6736  0021DE  06E8               	decf	wreg,f,c
  6737  0021E0  E2FC               	bc	u2581
  6738                           
  6739                           ; BSR set to: 0
  6740  0021E2  0012               	return		;funcret
  6741  0021E4                     __end_of_DecreaseByADay:
  6742                           	opt stack 0
  6743  0021E4                     PL60:
  6744                           	opt stack 16
  6745  0021E4  6EDA               	movwf	fsr2h,c
  6746  0021E6  0E42               	movlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  6747  0021E8  26D9               	addwf	fsr2l,f,c
  6748  0021EA  0E01               	movlw	high (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  6749  0021EC  22DA               	addwfc	fsr2h,f,c
  6750  0021EE  50DF               	movf	indf2,w,c
  6751  0021F0  0012               	return	
  6752  0021F2                     __end_ofPL60:
  6753                           	opt stack 0
  6754  0021F2                     PL94:
  6755                           	opt stack 16
  6756  0021F2  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  6757  0021F6  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  6758  0021FA  0012               	return	
  6759  0021FC                     __end_ofPL94:
  6760                           	opt stack 0
  6761  0021FC                     PL106:
  6762                           	opt stack 16
  6763  0021FC  0E01               	movlw	1
  6764  0021FE  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  6765  002200  0E90               	movlw	144
  6766  002202  6F62               	movwf	___lwmod@divisor& (0+255),b
  6767  002204  0C90               	retlw	144
  6768  002206                     __end_ofPL106:
  6769                           	opt stack 0
  6770                           tosu	equ	0xFFF
  6771                           tosh	equ	0xFFE
  6772                           tosl	equ	0xFFD
  6773                           pclath	equ	0xFFA
  6774                           tblptru	equ	0xFF8
  6775                           tblptrh	equ	0xFF7
  6776                           tblptrl	equ	0xFF6
  6777                           tablat	equ	0xFF5
  6778                           prodh	equ	0xFF4
  6779                           prodl	equ	0xFF3
  6780                           intcon	equ	0xFF2
  6781                           postinc0	equ	0xFEE
  6782                           plusw0	equ	0xFEB
  6783                           wreg	equ	0xFE8
  6784                           indf1	equ	0xFE7
  6785                           postinc1	equ	0xFE6
  6786                           postdec1	equ	0xFE5
  6787                           plusw1	equ	0xFE3
  6788                           fsr1h	equ	0xFE2
  6789                           fsr1l	equ	0xFE1
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           plusw2	equ	0xFDB
  6794                           fsr2h	equ	0xFDA
  6795                           fsr2l	equ	0xFD9
  6796                           status	equ	0xFD8
  6797                           
  6798 ;; *************** function _DecreaseByAMonth *****************
  6799 ;; Defined at:
  6800 ;;		line 77 in file "libs/funcs.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  6807 ;; Registers used:
  6808 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6809 ;; Tracked objects:
  6810 ;;		On entry : 3F/0
  6811 ;;		On exit  : 3F/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6814 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6817 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6818 ;;Total ram usage:       11 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:   11
  6821 ;; This function calls:
  6822 ;;		_DecreaseByAYear
  6823 ;; This function is called by:
  6824 ;;		_DecreaseByADay
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           	psect	text28
  6829  002AB4                     __ptext28:
  6830                           	opt stack 0
  6831  002AB4                     _DecreaseByAMonth:
  6832                           	opt stack 16
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;incstack = 0
  6839  002AB4  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  6840  002AB6  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  6841  002AB8  E116               	bnz	l3049
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;funcs.c: 79: dt.DATE.Month = 12;
  6845  002ABA  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  6846  002ABC  0E0C               	movlw	12
  6847  002ABE  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  6848                           
  6849                           ; BSR set to: 0
  6850                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  6851  002AC0  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  6852  002AC4  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  6853  002AC8  0E0A               	movlw	10
  6854  002ACA                     u2171:
  6855  002ACA  CFDB FFEB          	movff	plusw2,plusw0
  6856  002ACE  06E8               	decf	wreg,f,c
  6857  002AD0  E2FC               	bc	u2171
  6858  002AD2  ECB8  F016         	call	_DecreaseByAYear	;wreg free
  6859  002AD6  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  6860  002ADA  0E0A               	movlw	10
  6861  002ADC                     u2181:
  6862  002ADC  CFEB FFDB          	movff	plusw0,plusw2
  6863  002AE0  06E8               	decf	wreg,f,c
  6864  002AE2  E2FC               	bc	u2181
  6865                           
  6866                           ;funcs.c: 81: } else
  6867  002AE4  D003               	goto	l3051
  6868  002AE6                     l3049:
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;funcs.c: 82: dt.DATE.Month--;
  6872  002AE6  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  6873  002AE8  A0D8               	btfss	status,0,c
  6874  002AEA  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  6875  002AEC                     l3051:
  6876                           
  6877                           ; BSR set to: 0
  6878                           ;funcs.c: 83: return dt;
  6879  002AEC  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  6880  002AF0  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  6881  002AF4  0E0A               	movlw	10
  6882  002AF6                     u2191:
  6883  002AF6  CFDB FFEB          	movff	plusw2,plusw0
  6884  002AFA  06E8               	decf	wreg,f,c
  6885  002AFC  E2FC               	bc	u2191
  6886                           
  6887                           ; BSR set to: 0
  6888  002AFE  0012               	return		;funcret
  6889  002B00                     __end_of_DecreaseByAMonth:
  6890                           	opt stack 0
  6891                           tosu	equ	0xFFF
  6892                           tosh	equ	0xFFE
  6893                           tosl	equ	0xFFD
  6894                           pclath	equ	0xFFA
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           postinc0	equ	0xFEE
  6903                           plusw0	equ	0xFEB
  6904                           wreg	equ	0xFE8
  6905                           indf1	equ	0xFE7
  6906                           postinc1	equ	0xFE6
  6907                           postdec1	equ	0xFE5
  6908                           plusw1	equ	0xFE3
  6909                           fsr1h	equ	0xFE2
  6910                           fsr1l	equ	0xFE1
  6911                           indf2	equ	0xFDF
  6912                           postinc2	equ	0xFDE
  6913                           postdec2	equ	0xFDD
  6914                           plusw2	equ	0xFDB
  6915                           fsr2h	equ	0xFDA
  6916                           fsr2l	equ	0xFD9
  6917                           status	equ	0xFD8
  6918                           
  6919 ;; *************** function _DecreaseByAYear *****************
  6920 ;; Defined at:
  6921 ;;		line 86 in file "libs/funcs.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;		None
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  6928 ;; Registers used:
  6929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6930 ;; Tracked objects:
  6931 ;;		On entry : 3F/0
  6932 ;;		On exit  : 3F/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6935 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6938 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6939 ;;Total ram usage:       11 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:   10
  6942 ;; This function calls:
  6943 ;;		___lwmod
  6944 ;; This function is called by:
  6945 ;;		_DecreaseByAMonth
  6946 ;; This function uses a non-reentrant model
  6947 ;;
  6948                           
  6949                           	psect	text29
  6950  002D70                     __ptext29:
  6951                           	opt stack 0
  6952  002D70                     _DecreaseByAYear:
  6953                           	opt stack 16
  6954                           
  6955                           ; BSR set to: 0
  6956                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;incstack = 0
  6960  002D70  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  6961  002D74  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  6962  002D78  EC9B  F016         	call	PL100	;call to abstracted procedure
  6963  002D7C  EC0E  F016         	call	___lwmod	;wreg free
  6964  002D80  5160               	movf	?___lwmod& (0+255),w,b
  6965  002D82  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6966  002D84  E101               	bnz	l633
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;funcs.c: 88: CENTURY--;
  6970  002D86  07F6               	decf	_CENTURY& (0+255),f,b
  6971  002D88                     l633:
  6972                           
  6973                           ; BSR set to: 0
  6974                           ;funcs.c: 89: dt.YEAR--;
  6975  002D88  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  6976  002D8A  A0D8               	btfss	status,0,c
  6977  002D8C  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;funcs.c: 90: return dt;
  6981  002D8E  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  6982  002D92  EE00  F065         	lfsr	0,?_DecreaseByAYear
  6983  002D96  0E0A               	movlw	10
  6984  002D98                     u2071:
  6985  002D98  CFDB FFEB          	movff	plusw2,plusw0
  6986  002D9C  06E8               	decf	wreg,f,c
  6987  002D9E  E2FC               	bc	u2071
  6988                           
  6989                           ; BSR set to: 0
  6990  002DA0  0012               	return		;funcret
  6991  002DA2                     __end_of_DecreaseByAYear:
  6992                           	opt stack 0
  6993                           tosu	equ	0xFFF
  6994                           tosh	equ	0xFFE
  6995                           tosl	equ	0xFFD
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           postinc0	equ	0xFEE
  7005                           plusw0	equ	0xFEB
  7006                           wreg	equ	0xFE8
  7007                           indf1	equ	0xFE7
  7008                           postinc1	equ	0xFE6
  7009                           postdec1	equ	0xFE5
  7010                           plusw1	equ	0xFE3
  7011                           fsr1h	equ	0xFE2
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           plusw2	equ	0xFDB
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function ___lwmod *****************
  7022 ;; Defined at:
  7023 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  dividend        2    0[BANK0 ] unsigned int 
  7026 ;;  divisor         2    2[BANK0 ] unsigned int 
  7027 ;; Auto vars:     Size  Location     Type
  7028 ;;  counter         1    4[BANK0 ] unsigned char 
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  2    0[BANK0 ] unsigned int 
  7031 ;; Registers used:
  7032 ;;		wreg, status,2, status,0
  7033 ;; Tracked objects:
  7034 ;;		On entry : 3F/0
  7035 ;;		On exit  : 3F/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7039 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7041 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7042 ;;Total ram usage:        5 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    9
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_IncreaseByADay
  7049 ;;		_IncreaseByAYear
  7050 ;;		_DecreaseByADay
  7051 ;;		_DecreaseByAYear
  7052 ;; This function uses a non-reentrant model
  7053 ;;
  7054                           
  7055                           	psect	text30
  7056  002C1C                     __ptext30:
  7057                           	opt stack 0
  7058  002C1C                     ___lwmod:
  7059                           	opt stack 18
  7060                           
  7061                           ; BSR set to: 0
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;incstack = 0
  7065  002C1C  5162               	movf	___lwmod@divisor& (0+255),w,b
  7066  002C1E  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  7067  002C20  E017               	bz	l1546
  7068                           
  7069                           ; BSR set to: 0
  7070  002C22  0E01               	movlw	1
  7071  002C24  6F64               	movwf	___lwmod@counter& (0+255),b
  7072  002C26  D004               	goto	l2981
  7073  002C28                     l2979:
  7074                           
  7075                           ; BSR set to: 0
  7076  002C28  90D8               	bcf	status,0,c
  7077  002C2A  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  7078  002C2C  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7079  002C2E  2B64               	incf	___lwmod@counter& (0+255),f,b
  7080  002C30                     l2981:
  7081                           
  7082                           ; BSR set to: 0
  7083  002C30  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7084  002C32  D7FA               	goto	l2979
  7085  002C34                     l2983:
  7086                           
  7087                           ; BSR set to: 0
  7088  002C34  5162               	movf	___lwmod@divisor& (0+255),w,b
  7089  002C36  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  7090  002C38  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7091  002C3A  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7092  002C3C  E304               	bnc	l2987
  7093                           
  7094                           ; BSR set to: 0
  7095  002C3E  5162               	movf	___lwmod@divisor& (0+255),w,b
  7096  002C40  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  7097  002C42  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7098  002C44  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7099  002C46                     l2987:
  7100                           
  7101                           ; BSR set to: 0
  7102  002C46  90D8               	bcf	status,0,c
  7103  002C48  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7104  002C4A  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  7105                           
  7106                           ; BSR set to: 0
  7107  002C4C  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  7108  002C4E  D7F2               	goto	l2983
  7109  002C50                     l1546:
  7110                           
  7111                           ; BSR set to: 0
  7112  002C50  C060  F060         	movff	___lwmod@dividend,?___lwmod
  7113  002C54  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  7114                           
  7115                           ; BSR set to: 0
  7116  002C58  0012               	return		;funcret
  7117  002C5A                     __end_of___lwmod:
  7118                           	opt stack 0
  7119                           tosu	equ	0xFFF
  7120                           tosh	equ	0xFFE
  7121                           tosl	equ	0xFFD
  7122                           pclath	equ	0xFFA
  7123                           tblptru	equ	0xFF8
  7124                           tblptrh	equ	0xFF7
  7125                           tblptrl	equ	0xFF6
  7126                           tablat	equ	0xFF5
  7127                           prodh	equ	0xFF4
  7128                           prodl	equ	0xFF3
  7129                           intcon	equ	0xFF2
  7130                           postinc0	equ	0xFEE
  7131                           plusw0	equ	0xFEB
  7132                           wreg	equ	0xFE8
  7133                           indf1	equ	0xFE7
  7134                           postinc1	equ	0xFE6
  7135                           postdec1	equ	0xFE5
  7136                           plusw1	equ	0xFE3
  7137                           fsr1h	equ	0xFE2
  7138                           fsr1l	equ	0xFE1
  7139                           indf2	equ	0xFDF
  7140                           postinc2	equ	0xFDE
  7141                           postdec2	equ	0xFDD
  7142                           plusw2	equ	0xFDB
  7143                           fsr2h	equ	0xFDA
  7144                           fsr2l	equ	0xFD9
  7145                           status	equ	0xFD8
  7146                           
  7147 ;; *************** function _LoadAllFromEeprom *****************
  7148 ;; Defined at:
  7149 ;;		line 177 in file "libs/eeprom.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;		None
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;		None
  7154 ;; Return value:  Size  Location     Type
  7155 ;;                  1    wreg      void 
  7156 ;; Registers used:
  7157 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7158 ;; Tracked objects:
  7159 ;;		On entry : 3F/0
  7160 ;;		On exit  : 3F/0
  7161 ;;		Unchanged: 0/0
  7162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7167 ;;Total ram usage:        0 bytes
  7168 ;; Hardware stack levels used:    1
  7169 ;; Hardware stack levels required when called:   11
  7170 ;; This function calls:
  7171 ;;		_LoadCyclesFromEeprom
  7172 ;;		_LoadEventsFromEeprom
  7173 ;;		_LoadSettingsFromEeprom
  7174 ;;		_LoadStatesFromEeprom
  7175 ;; This function is called by:
  7176 ;;		_main
  7177 ;; This function uses a non-reentrant model
  7178 ;;
  7179                           
  7180                           	psect	text31
  7181  002EB8                     __ptext31:
  7182                           	opt stack 0
  7183  002EB8                     _LoadAllFromEeprom:
  7184                           	opt stack 19
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;eeprom.c: 178: LoadSettingsFromEeprom ();
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;incstack = 0
  7191  002EB8  ECAA  F00A         	call	_LoadSettingsFromEeprom	;wreg free
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;eeprom.c: 179: LoadEventsFromEeprom ();
  7195  002EBC  ECE5  F00D         	call	_LoadEventsFromEeprom	;wreg free
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;eeprom.c: 180: LoadStatesFromEeprom();
  7199  002EC0  EC6C  F00C         	call	_LoadStatesFromEeprom	;wreg free
  7200                           
  7201                           ; BSR set to: 0
  7202                           ;eeprom.c: 181: LoadCyclesFromEeprom();
  7203  002EC4  EF42  F00D         	goto	_LoadCyclesFromEeprom	;wreg free
  7204  002EC8                     __end_of_LoadAllFromEeprom:
  7205                           	opt stack 0
  7206                           tosu	equ	0xFFF
  7207                           tosh	equ	0xFFE
  7208                           tosl	equ	0xFFD
  7209                           pclath	equ	0xFFA
  7210                           tblptru	equ	0xFF8
  7211                           tblptrh	equ	0xFF7
  7212                           tblptrl	equ	0xFF6
  7213                           tablat	equ	0xFF5
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           intcon	equ	0xFF2
  7217                           postinc0	equ	0xFEE
  7218                           plusw0	equ	0xFEB
  7219                           wreg	equ	0xFE8
  7220                           indf1	equ	0xFE7
  7221                           postinc1	equ	0xFE6
  7222                           postdec1	equ	0xFE5
  7223                           plusw1	equ	0xFE3
  7224                           fsr1h	equ	0xFE2
  7225                           fsr1l	equ	0xFE1
  7226                           indf2	equ	0xFDF
  7227                           postinc2	equ	0xFDE
  7228                           postdec2	equ	0xFDD
  7229                           plusw2	equ	0xFDB
  7230                           fsr2h	equ	0xFDA
  7231                           fsr2l	equ	0xFD9
  7232                           status	equ	0xFD8
  7233                           
  7234 ;; *************** function _LoadStatesFromEeprom *****************
  7235 ;; Defined at:
  7236 ;;		line 126 in file "libs/eeprom.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;		None
  7239 ;; Auto vars:     Size  Location     Type
  7240 ;;  j               2   22[BANK0 ] int 
  7241 ;;  j               2   20[BANK0 ] int 
  7242 ;;  i               2   26[BANK0 ] int 
  7243 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  7244 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  7245 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  7246 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  7247 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  7248 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 3F/0
  7255 ;;		On exit  : 3F/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7259 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7260 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7261 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7262 ;;Total ram usage:       20 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:   10
  7265 ;; This function calls:
  7266 ;;		_ReadEeprom
  7267 ;;		___awdiv
  7268 ;;		___wmul
  7269 ;; This function is called by:
  7270 ;;		_LoadAllFromEeprom
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text32
  7275  0018D8                     __ptext32:
  7276                           	opt stack 0
  7277  0018D8                     _LoadStatesFromEeprom:
  7278                           	opt stack 19
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;eeprom.c: 127: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  7282                           ;eeprom.c: 128: UINT8 AudAddInc;
  7283                           ;eeprom.c: 129: AddStates.Val = 224;
  7284                           
  7285                           ; BSR set to: 0
  7286                           ;incstack = 0
  7287  0018D8  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  7288  0018DA  0EE0               	movlw	224
  7289  0018DC  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  7290                           
  7291                           ;eeprom.c: 130: AddAudioNormal.Val = 23;
  7292  0018DE  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  7293  0018E0  0E17               	movlw	23
  7294  0018E2  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  7295                           
  7296                           ;eeprom.c: 131: AddAudioSpecial.Val = 43;
  7297  0018E4  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  7298  0018E6  0E2B               	movlw	43
  7299  0018E8  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;eeprom.c: 132: for (int i=0; i<160; i++) {
  7303  0018EA  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  7304  0018EC  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  7305  0018EE                     l3751:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;eeprom.c: 133: STATES[i].PERIOD = ReadEeprom(AddStates);
  7309  0018EE  D8A3               	call	PL14	;call to abstracted procedure
  7310  0018F0  ECE9  F016         	call	___wmul	;wreg free
  7311  0018F4  0EEF               	movlw	low _STATES
  7312  0018F6  2560               	addwf	?___wmul& (0+255),w,b
  7313  0018F8  6ED9               	movwf	fsr2l,c
  7314  0018FA  0E06               	movlw	high _STATES
  7315  0018FC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7316  0018FE  D8B3               	call	PL76	;call to abstracted procedure
  7317  001900  EC36  F017         	call	_ReadEeprom	;wreg free
  7318  001904  6EDF               	movwf	indf2,c
  7319                           
  7320                           ;eeprom.c: 134: AddStates.Val++;
  7321  001906  0100               	movlb	0	; () banked
  7322  001908  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  7323  00190A  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  7324                           
  7325                           ; BSR set to: 0
  7326                           ;eeprom.c: 135: for (int j=0; j<2; j++) {
  7327  00190C  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  7328  00190E  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  7329  001910                     l3761:
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;eeprom.c: 136: STATES[i].ON[j] = ReadEeprom(AddStates);
  7333  001910  D892               	call	PL14	;call to abstracted procedure
  7334  001912  ECE9  F016         	call	___wmul	;wreg free
  7335  001916  D8AD               	call	PL102	;call to abstracted procedure
  7336  001918  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  7337  00191A  0E00               	movlw	0
  7338  00191C  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7339  00191E  5160               	movf	?___wmul& (0+255),w,b
  7340  001920  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  7341  001922  5161               	movf	(?___wmul+1)& (0+255),w,b
  7342  001924  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7343  001926  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  7344  001928  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  7345  00192A  6ED9               	movwf	fsr2l,c
  7346  00192C  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  7347  00192E  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7348  001930  D89A               	call	PL76	;call to abstracted procedure
  7349  001932  EC36  F017         	call	_ReadEeprom	;wreg free
  7350  001936  6EDF               	movwf	indf2,c
  7351                           
  7352                           ;eeprom.c: 137: AddStates.Val++;
  7353  001938  0100               	movlb	0	; () banked
  7354  00193A  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  7355  00193C  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  7356                           
  7357                           ; BSR set to: 0
  7358  00193E  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  7359  001940  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  7360                           
  7361                           ; BSR set to: 0
  7362  001942  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  7363  001944  D7E5               	goto	l3761
  7364  001946  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  7365  001948  E103               	bnz	u3380
  7366  00194A  0E02               	movlw	2
  7367  00194C  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  7368  00194E  E3E0               	bnc	l3761
  7369  001950                     u3380:
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;eeprom.c: 138: }
  7373                           ;eeprom.c: 139: for (int j=0; j<2; j++) {
  7374  001950  6B76               	clrf	LoadStatesFromEeprom@j_1396& (0+255),b
  7375  001952  6B77               	clrf	(LoadStatesFromEeprom@j_1396+1)& (0+255),b
  7376  001954                     l3773:
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;eeprom.c: 140: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  7380  001954  D870               	call	PL14	;call to abstracted procedure
  7381  001956  ECE9  F016         	call	___wmul	;wreg free
  7382  00195A  D88B               	call	PL102	;call to abstracted procedure
  7383  00195C  0E03               	movlw	3
  7384  00195E  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  7385  001960  0E00               	movlw	0
  7386  001962  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7387  001964  5160               	movf	?___wmul& (0+255),w,b
  7388  001966  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  7389  001968  5161               	movf	(?___wmul+1)& (0+255),w,b
  7390  00196A  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7391  00196C  5176               	movf	LoadStatesFromEeprom@j_1396& (0+255),w,b
  7392  00196E  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  7393  001970  6ED9               	movwf	fsr2l,c
  7394  001972  5177               	movf	(LoadStatesFromEeprom@j_1396+1)& (0+255),w,b
  7395  001974  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7396  001976  D877               	call	PL76	;call to abstracted procedure
  7397  001978  EC36  F017         	call	_ReadEeprom	;wreg free
  7398  00197C  6EDF               	movwf	indf2,c
  7399                           
  7400                           ;eeprom.c: 141: AddStates.Val++;
  7401  00197E  0100               	movlb	0	; () banked
  7402  001980  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  7403  001982  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  7404                           
  7405                           ; BSR set to: 0
  7406  001984  4B76               	infsnz	LoadStatesFromEeprom@j_1396& (0+255),f,b
  7407  001986  2B77               	incf	(LoadStatesFromEeprom@j_1396+1)& (0+255),f,b
  7408                           
  7409                           ; BSR set to: 0
  7410  001988  BF77               	btfsc	(LoadStatesFromEeprom@j_1396+1)& (0+255),7,b
  7411  00198A  D7E4               	goto	l3773
  7412  00198C  5177               	movf	(LoadStatesFromEeprom@j_1396+1)& (0+255),w,b
  7413  00198E  E103               	bnz	u3390
  7414  001990  0E02               	movlw	2
  7415  001992  5D76               	subwf	LoadStatesFromEeprom@j_1396& (0+255),w,b
  7416  001994  E3DF               	bnc	l3773
  7417  001996                     u3390:
  7418                           
  7419                           ; BSR set to: 0
  7420                           ;eeprom.c: 142: }
  7421                           ;eeprom.c: 143: AudAddInc = i/8;
  7422  001996  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  7423  00199A  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  7424  00199E  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7425  0019A0  0E08               	movlw	8
  7426  0019A2  6F62               	movwf	___awdiv@divisor& (0+255),b
  7427  0019A4  EC2E  F014         	call	___awdiv	;wreg free
  7428  0019A8  5160               	movf	?___awdiv& (0+255),w,b
  7429  0019AA  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  7430                           
  7431                           ; BSR set to: 0
  7432                           ;eeprom.c: 144: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  7433  0019AC  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  7434  0019AE  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  7435  0019B0  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  7436  0019B2  0E00               	movlw	0
  7437  0019B4  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  7438  0019B6  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  7439                           
  7440                           ; BSR set to: 0
  7441                           ;eeprom.c: 145: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  7442  0019B8  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  7443  0019BA  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  7444  0019BC  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  7445  0019BE  0E00               	movlw	0
  7446  0019C0  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  7447  0019C2  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  7448                           
  7449                           ;eeprom.c: 146: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  7450  0019C4  D847               	call	PL68	;call to abstracted procedure
  7451  0019C6  D001               	goto	u3404
  7452  0019C8                     u3405:
  7453  0019C8  D859               	call	PL112	;call to abstracted procedure
  7454  0019CA                     u3404:
  7455  0019CA  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  7456  0019CC  D7FD               	goto	u3405
  7457  0019CE  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  7458  0019D2  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  7459  0019D6  EC36  F017         	call	_ReadEeprom	;wreg free
  7460  0019DA  0100               	movlb	0	; () banked
  7461  0019DC  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7462  0019DE  E006               	bz	l3789
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;eeprom.c: 147: STATES[i].AUDIO = AUDIO_NORMAL;
  7466  0019E0  D82A               	call	PL14	;call to abstracted procedure
  7467  0019E2  ECE9  F016         	call	___wmul	;wreg free
  7468  0019E6  D82F               	call	PL56	;call to abstracted procedure
  7469  0019E8  0E01               	movlw	1
  7470  0019EA  D019               	goto	L4
  7471  0019EC                     l3789:
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;eeprom.c: 148: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  7475  0019EC  D833               	call	PL68	;call to abstracted procedure
  7476  0019EE  D001               	goto	u3424
  7477  0019F0                     u3425:
  7478  0019F0  D845               	call	PL112	;call to abstracted procedure
  7479  0019F2                     u3424:
  7480  0019F2  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  7481  0019F4  D7FD               	goto	u3425
  7482  0019F6  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  7483  0019FA  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  7484  0019FE  EC36  F017         	call	_ReadEeprom	;wreg free
  7485  001A02  0100               	movlb	0	; () banked
  7486  001A04  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7487  001A06  E006               	bz	l3793
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;eeprom.c: 149: STATES[i].AUDIO = AUDIO_SPECIAL;
  7491  001A08  D816               	call	PL14	;call to abstracted procedure
  7492  001A0A  ECE9  F016         	call	___wmul	;wreg free
  7493  001A0E  D81B               	call	PL56	;call to abstracted procedure
  7494  001A10  0E02               	movlw	2
  7495  001A12  D005               	goto	L4
  7496  001A14                     l3793:
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;eeprom.c: 150: else
  7500                           ;eeprom.c: 151: STATES[i].AUDIO = AUDIO_OFF;
  7501  001A14  D810               	call	PL14	;call to abstracted procedure
  7502  001A16  ECE9  F016         	call	___wmul	;wreg free
  7503  001A1A  D815               	call	PL56	;call to abstracted procedure
  7504  001A1C  0E00               	movlw	0
  7505  001A1E                     L4:
  7506  001A1E  6EDF               	movwf	indf2,c
  7507                           
  7508                           ; BSR set to: 0
  7509  001A20  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  7510  001A22  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  7511                           
  7512                           ; BSR set to: 0
  7513  001A24  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  7514  001A26  D763               	goto	l3751
  7515  001A28  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  7516  001A2A  E104               	bnz	u3440
  7517  001A2C  0EA0               	movlw	160
  7518  001A2E  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  7519  001A30  E201 D75D          	bnc	l3751
  7520  001A34                     u3440:
  7521                           
  7522                           ; BSR set to: 0
  7523  001A34  0012               	return		;funcret
  7524  001A36                     __end_of_LoadStatesFromEeprom:
  7525                           	opt stack 0
  7526  001A36                     PL14:
  7527                           	opt stack 19
  7528  001A36  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  7529  001A3A  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  7530  001A3E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7531  001A40  0E06               	movlw	6
  7532  001A42  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7533  001A44  0C06               	retlw	6
  7534  001A46                     __end_ofPL14:
  7535                           	opt stack 0
  7536  001A46                     PL56:
  7537                           	opt stack 19
  7538  001A46  0EF4               	movlw	low (_STATES+5)
  7539  001A48  2560               	addwf	?___wmul& (0+255),w,b
  7540  001A4A  6ED9               	movwf	fsr2l,c
  7541  001A4C  0E06               	movlw	high (_STATES+5)
  7542  001A4E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7543  001A50  6EDA               	movwf	fsr2h,c
  7544  001A52  0012               	return	
  7545  001A54                     __end_ofPL56:
  7546                           	opt stack 0
  7547  001A54                     PL68:
  7548                           	opt stack 19
  7549  001A54  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  7550  001A58  0E07               	movlw	7
  7551  001A5A  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  7552  001A5C  0E80               	movlw	128
  7553  001A5E  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  7554  001A60  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  7555  001A62  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  7556  001A64  0C80               	retlw	128
  7557  001A66                     __end_ofPL68:
  7558                           	opt stack 0
  7559  001A66                     PL76:
  7560                           	opt stack 19
  7561  001A66  6EDA               	movwf	fsr2h,c
  7562  001A68  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  7563  001A6C  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  7564  001A70  0012               	return	
  7565  001A72                     __end_ofPL76:
  7566                           	opt stack 0
  7567  001A72                     PL102:
  7568                           	opt stack 19
  7569  001A72  0EEF               	movlw	low _STATES
  7570  001A74  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  7571  001A76  0E06               	movlw	high _STATES
  7572  001A78  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  7573  001A7A  0012               	return	
  7574  001A7C                     __end_ofPL102:
  7575                           	opt stack 0
  7576  001A7C                     PL112:
  7577                           	opt stack 19
  7578  001A7C  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  7579  001A7E  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  7580  001A80  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7581  001A82  0012               	return	
  7582  001A84                     __end_ofPL112:
  7583                           	opt stack 0
  7584                           tosu	equ	0xFFF
  7585                           tosh	equ	0xFFE
  7586                           tosl	equ	0xFFD
  7587                           pclath	equ	0xFFA
  7588                           tblptru	equ	0xFF8
  7589                           tblptrh	equ	0xFF7
  7590                           tblptrl	equ	0xFF6
  7591                           tablat	equ	0xFF5
  7592                           prodh	equ	0xFF4
  7593                           prodl	equ	0xFF3
  7594                           intcon	equ	0xFF2
  7595                           postinc0	equ	0xFEE
  7596                           plusw0	equ	0xFEB
  7597                           wreg	equ	0xFE8
  7598                           indf1	equ	0xFE7
  7599                           postinc1	equ	0xFE6
  7600                           postdec1	equ	0xFE5
  7601                           plusw1	equ	0xFE3
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           plusw2	equ	0xFDB
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function ___awdiv *****************
  7613 ;; Defined at:
  7614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  dividend        2    0[BANK0 ] int 
  7617 ;;  divisor         2    2[BANK0 ] int 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;  quotient        2    6[BANK0 ] int 
  7620 ;;  sign            1    5[BANK0 ] unsigned char 
  7621 ;;  counter         1    4[BANK0 ] unsigned char 
  7622 ;; Return value:  Size  Location     Type
  7623 ;;                  2    0[BANK0 ] int 
  7624 ;; Registers used:
  7625 ;;		wreg, status,2, status,0
  7626 ;; Tracked objects:
  7627 ;;		On entry : 3F/0
  7628 ;;		On exit  : 3F/0
  7629 ;;		Unchanged: 0/0
  7630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7631 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7632 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7634 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7635 ;;Total ram usage:        8 bytes
  7636 ;; Hardware stack levels used:    1
  7637 ;; Hardware stack levels required when called:    9
  7638 ;; This function calls:
  7639 ;;		Nothing
  7640 ;; This function is called by:
  7641 ;;		_GetDay
  7642 ;;		_LoadStatesFromEeprom
  7643 ;; This function uses a non-reentrant model
  7644 ;;
  7645                           
  7646                           	psect	text33
  7647  00285C                     __ptext33:
  7648                           	opt stack 0
  7649  00285C                     ___awdiv:
  7650                           	opt stack 18
  7651                           
  7652                           ; BSR set to: 0
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;incstack = 0
  7656  00285C  6B65               	clrf	___awdiv@sign& (0+255),b
  7657                           
  7658                           ; BSR set to: 0
  7659  00285E  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7660  002860  D006               	goto	l3205
  7661                           
  7662                           ; BSR set to: 0
  7663  002862  6D62               	negf	___awdiv@divisor& (0+255),b
  7664  002864  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7665  002866  B0D8               	btfsc	status,0,c
  7666  002868  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7667                           
  7668                           ; BSR set to: 0
  7669  00286A  0E01               	movlw	1
  7670  00286C  6F65               	movwf	___awdiv@sign& (0+255),b
  7671  00286E                     l3205:
  7672                           
  7673                           ; BSR set to: 0
  7674  00286E  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7675  002870  D006               	goto	l3211
  7676                           
  7677                           ; BSR set to: 0
  7678  002872  6D60               	negf	___awdiv@dividend& (0+255),b
  7679  002874  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7680  002876  B0D8               	btfsc	status,0,c
  7681  002878  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7682                           
  7683                           ; BSR set to: 0
  7684  00287A  0E01               	movlw	1
  7685  00287C  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7686  00287E                     l3211:
  7687                           
  7688                           ; BSR set to: 0
  7689  00287E  6B66               	clrf	___awdiv@quotient& (0+255),b
  7690  002880  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  7691                           
  7692                           ; BSR set to: 0
  7693  002882  5162               	movf	___awdiv@divisor& (0+255),w,b
  7694  002884  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7695  002886  E01B               	bz	l3233
  7696                           
  7697                           ; BSR set to: 0
  7698  002888  0E01               	movlw	1
  7699  00288A  6F64               	movwf	___awdiv@counter& (0+255),b
  7700  00288C  D004               	goto	l3219
  7701  00288E                     l3217:
  7702                           
  7703                           ; BSR set to: 0
  7704  00288E  90D8               	bcf	status,0,c
  7705  002890  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7706  002892  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7707  002894  2B64               	incf	___awdiv@counter& (0+255),f,b
  7708  002896                     l3219:
  7709                           
  7710                           ; BSR set to: 0
  7711  002896  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7712  002898  D7FA               	goto	l3217
  7713  00289A                     l3221:
  7714                           
  7715                           ; BSR set to: 0
  7716  00289A  90D8               	bcf	status,0,c
  7717  00289C  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7718  00289E  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7719                           
  7720                           ; BSR set to: 0
  7721  0028A0  5162               	movf	___awdiv@divisor& (0+255),w,b
  7722  0028A2  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7723  0028A4  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7724  0028A6  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7725  0028A8  E305               	bnc	l3229
  7726                           
  7727                           ; BSR set to: 0
  7728  0028AA  5162               	movf	___awdiv@divisor& (0+255),w,b
  7729  0028AC  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7730  0028AE  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7731  0028B0  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7732                           
  7733                           ; BSR set to: 0
  7734  0028B2  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7735  0028B4                     l3229:
  7736                           
  7737                           ; BSR set to: 0
  7738  0028B4  90D8               	bcf	status,0,c
  7739  0028B6  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7740  0028B8  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7741                           
  7742                           ; BSR set to: 0
  7743  0028BA  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7744  0028BC  D7EE               	goto	l3221
  7745  0028BE                     l3233:
  7746                           
  7747                           ; BSR set to: 0
  7748  0028BE  5165               	movf	___awdiv@sign& (0+255),w,b
  7749  0028C0  E004               	bz	l3237
  7750                           
  7751                           ; BSR set to: 0
  7752  0028C2  6D66               	negf	___awdiv@quotient& (0+255),b
  7753  0028C4  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7754  0028C6  B0D8               	btfsc	status,0,c
  7755  0028C8  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7756  0028CA                     l3237:
  7757                           
  7758                           ; BSR set to: 0
  7759  0028CA  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7760  0028CE  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7761                           
  7762                           ; BSR set to: 0
  7763  0028D2  0012               	return		;funcret
  7764  0028D4                     __end_of___awdiv:
  7765                           	opt stack 0
  7766                           tosu	equ	0xFFF
  7767                           tosh	equ	0xFFE
  7768                           tosl	equ	0xFFD
  7769                           pclath	equ	0xFFA
  7770                           tblptru	equ	0xFF8
  7771                           tblptrh	equ	0xFF7
  7772                           tblptrl	equ	0xFF6
  7773                           tablat	equ	0xFF5
  7774                           prodh	equ	0xFF4
  7775                           prodl	equ	0xFF3
  7776                           intcon	equ	0xFF2
  7777                           postinc0	equ	0xFEE
  7778                           plusw0	equ	0xFEB
  7779                           wreg	equ	0xFE8
  7780                           indf1	equ	0xFE7
  7781                           postinc1	equ	0xFE6
  7782                           postdec1	equ	0xFE5
  7783                           plusw1	equ	0xFE3
  7784                           fsr1h	equ	0xFE2
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           plusw2	equ	0xFDB
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function _LoadSettingsFromEeprom *****************
  7795 ;; Defined at:
  7796 ;;		line 33 in file "libs/eeprom.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;		None
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  7801 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  7802 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  1    wreg      void 
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 3F/0
  7809 ;;		On exit  : 3F/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7813 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7815 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7816 ;;Total ram usage:        8 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:   10
  7819 ;; This function calls:
  7820 ;;		_ReadEeprom
  7821 ;;		___wmul
  7822 ;; This function is called by:
  7823 ;;		_LoadAllFromEeprom
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           	psect	text34
  7828  001554                     __ptext34:
  7829                           	opt stack 0
  7830  001554                     _LoadSettingsFromEeprom:
  7831                           	opt stack 19
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;eeprom.c: 34: WORD_VAL Temp16, Address;
  7835                           ;eeprom.c: 35: DWORD_VAL Temp32;
  7836                           ;eeprom.c: 37: Address.Val = 0;
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;incstack = 0
  7840  001554  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  7841  001556  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;eeprom.c: 38: Temp16.v[0] = ReadEeprom(Address);
  7845  001558  D8E3               	call	PL8	;call to abstracted procedure
  7846  00155A  EC36  F017         	call	_ReadEeprom	;wreg free
  7847  00155E  0100               	movlb	0	; () banked
  7848  001560  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;eeprom.c: 39: Address.Val++;
  7852  001562  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7853  001564  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;eeprom.c: 40: Temp16.v[1] = ReadEeprom(Address);
  7857  001566  D8DC               	call	PL8	;call to abstracted procedure
  7858  001568  EC36  F017         	call	_ReadEeprom	;wreg free
  7859  00156C  0100               	movlb	0	; () banked
  7860  00156E  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;eeprom.c: 41: TIME_ZONE = (INT16) 60*Temp16.Val;
  7864  001570  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  7865  001574  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  7866  001578  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7867  00157A  0E3C               	movlw	60
  7868  00157C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7869  00157E  ECE9  F016         	call	___wmul	;wreg free
  7870  001582  C060  F0DE         	movff	?___wmul,_TIME_ZONE
  7871  001586  C061  F0DF         	movff	?___wmul+1,_TIME_ZONE+1
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;eeprom.c: 43: Address.Val = 2;
  7875  00158A  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7876  00158C  0E02               	movlw	2
  7877  00158E  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;eeprom.c: 44: DAY_LIGHT_START.Day = ReadEeprom (Address);
  7881  001590  D8C7               	call	PL8	;call to abstracted procedure
  7882  001592  EC36  F017         	call	_ReadEeprom	;wreg free
  7883  001596  0100               	movlb	0	; () banked
  7884  001598  6FD8               	movwf	_DAY_LIGHT_START& (0+255),b
  7885  00159A  6BD9               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;eeprom.c: 45: Address.Val++;
  7889  00159C  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7890  00159E  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;eeprom.c: 46: DAY_LIGHT_START.Month = ReadEeprom (Address);
  7894  0015A0  D8BF               	call	PL8	;call to abstracted procedure
  7895  0015A2  EC36  F017         	call	_ReadEeprom	;wreg free
  7896  0015A6  0100               	movlb	0	; () banked
  7897  0015A8  6FDA               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  7898  0015AA  6BDB               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  7899                           
  7900                           ; BSR set to: 0
  7901                           ;eeprom.c: 48: Address.Val = 4;
  7902  0015AC  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7903  0015AE  0E04               	movlw	4
  7904  0015B0  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7905                           
  7906                           ; BSR set to: 0
  7907                           ;eeprom.c: 49: DAY_LIGHT_END.Day = ReadEeprom (Address);
  7908  0015B2  D8B6               	call	PL8	;call to abstracted procedure
  7909  0015B4  EC36  F017         	call	_ReadEeprom	;wreg free
  7910  0015B8  0100               	movlb	0	; () banked
  7911  0015BA  6FD4               	movwf	_DAY_LIGHT_END& (0+255),b
  7912  0015BC  6BD5               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;eeprom.c: 50: Address.Val++;
  7916  0015BE  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7917  0015C0  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;eeprom.c: 51: DAY_LIGHT_END.Month = ReadEeprom (Address);
  7921  0015C2  D8AE               	call	PL8	;call to abstracted procedure
  7922  0015C4  EC36  F017         	call	_ReadEeprom	;wreg free
  7923  0015C8  0100               	movlb	0	; () banked
  7924  0015CA  6FD6               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  7925  0015CC  6BD7               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;eeprom.c: 53: Address.Val = 6;
  7929  0015CE  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7930  0015D0  0E06               	movlw	6
  7931  0015D2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;eeprom.c: 54: CENTURY = ReadEeprom(Address);
  7935  0015D4  D8A5               	call	PL8	;call to abstracted procedure
  7936  0015D6  EC36  F017         	call	_ReadEeprom	;wreg free
  7937  0015DA  0100               	movlb	0	; () banked
  7938  0015DC  6FF6               	movwf	_CENTURY& (0+255),b
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;eeprom.c: 56: Address.Val = 7;
  7942  0015DE  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7943  0015E0  0E07               	movlw	7
  7944  0015E2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;eeprom.c: 57: Temp16.v[0] = ReadEeprom(Address);
  7948  0015E4  D89D               	call	PL8	;call to abstracted procedure
  7949  0015E6  EC36  F017         	call	_ReadEeprom	;wreg free
  7950  0015EA  0100               	movlb	0	; () banked
  7951  0015EC  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;eeprom.c: 58: Address.Val++;
  7955  0015EE  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7956  0015F0  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;eeprom.c: 60: CYCLE_DELAY = (INT16) Temp16.Val;
  7960  0015F2  D896               	call	PL8	;call to abstracted procedure
  7961  0015F4  EC36  F017         	call	_ReadEeprom	;wreg free
  7962  0015F8  0100               	movlb	0	; () banked
  7963  0015FA  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;eeprom.c: 62: Address.Val = 9;
  7967  0015FC  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7968  0015FE  0E09               	movlw	9
  7969  001600  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;eeprom.c: 63: BLINK_ON_TIME = ReadEeprom(Address);
  7973  001602  D88E               	call	PL8	;call to abstracted procedure
  7974  001604  EC36  F017         	call	_ReadEeprom	;wreg free
  7975  001608  6E5C               	movwf	_BLINK_ON_TIME,c
  7976                           
  7977                           ;eeprom.c: 65: Address.Val = 10;
  7978  00160A  0100               	movlb	0	; () banked
  7979  00160C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7980  00160E  0E0A               	movlw	10
  7981  001610  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;eeprom.c: 66: BLINK_OFF_TIME = ReadEeprom(Address);
  7985  001612  D886               	call	PL8	;call to abstracted procedure
  7986  001614  EC36  F017         	call	_ReadEeprom	;wreg free
  7987  001618  6E5B               	movwf	_BLINK_OFF_TIME,c
  7988                           
  7989                           ;eeprom.c: 68: Address.Val = 11;
  7990  00161A  0100               	movlb	0	; () banked
  7991  00161C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7992  00161E  0E0B               	movlw	11
  7993  001620  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7994                           
  7995                           ; BSR set to: 0
  7996                           ;eeprom.c: 69: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  7997  001622  D87E               	call	PL8	;call to abstracted procedure
  7998  001624  EC36  F017         	call	_ReadEeprom	;wreg free
  7999  001628  6E5A               	movwf	_BLINK_LAST_X_SECONDS,c
  8000                           
  8001                           ;eeprom.c: 71: Address.Val = 12;
  8002  00162A  0100               	movlb	0	; () banked
  8003  00162C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8004  00162E  0E0C               	movlw	12
  8005  001630  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;eeprom.c: 72: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  8009  001632  D876               	call	PL8	;call to abstracted procedure
  8010  001634  EC36  F017         	call	_ReadEeprom	;wreg free
  8011  001638  6E59               	movwf	_AUDIO_NORMAL_ON_TIME,c
  8012                           
  8013                           ;eeprom.c: 74: Address.Val = 13;
  8014  00163A  0100               	movlb	0	; () banked
  8015  00163C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8016  00163E  0E0D               	movlw	13
  8017  001640  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;eeprom.c: 75: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  8021  001642  D86E               	call	PL8	;call to abstracted procedure
  8022  001644  EC36  F017         	call	_ReadEeprom	;wreg free
  8023  001648  6E58               	movwf	_AUDIO_NORMAL_OFF_TIME,c
  8024                           
  8025                           ;eeprom.c: 77: Address.Val = 14;
  8026  00164A  0100               	movlb	0	; () banked
  8027  00164C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8028  00164E  0E0E               	movlw	14
  8029  001650  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8030                           
  8031                           ; BSR set to: 0
  8032                           ;eeprom.c: 78: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  8033  001652  D866               	call	PL8	;call to abstracted procedure
  8034  001654  EC36  F017         	call	_ReadEeprom	;wreg free
  8035  001658  6E57               	movwf	_AUDIO_SPECIAL_ON_TIME,c
  8036                           
  8037                           ;eeprom.c: 80: Address.Val = 15;
  8038  00165A  0100               	movlb	0	; () banked
  8039  00165C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8040  00165E  0E0F               	movlw	15
  8041  001660  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;eeprom.c: 81: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  8045  001662  D85E               	call	PL8	;call to abstracted procedure
  8046  001664  EC36  F017         	call	_ReadEeprom	;wreg free
  8047  001668  6E56               	movwf	_AUDIO_SPECIAL_OFF_TIME,c
  8048                           
  8049                           ;eeprom.c: 83: Address.Val = 16;
  8050  00166A  0100               	movlb	0	; () banked
  8051  00166C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8052  00166E  0E10               	movlw	16
  8053  001670  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;eeprom.c: 84: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  8057  001672  D856               	call	PL8	;call to abstracted procedure
  8058  001674  EC36  F017         	call	_ReadEeprom	;wreg free
  8059  001678  6E55               	movwf	_SPECIAL_AUDIO_LAST_X_SECONDS,c
  8060                           
  8061                           ;eeprom.c: 86: Address.Val = 17;
  8062  00167A  0100               	movlb	0	; () banked
  8063  00167C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8064  00167E  0E11               	movlw	17
  8065  001680  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;eeprom.c: 87: GPS_SYNC_AT_START = ReadEeprom(Address);
  8069  001682  D84E               	call	PL8	;call to abstracted procedure
  8070  001684  EC36  F017         	call	_ReadEeprom	;wreg free
  8071  001688  0100               	movlb	0	; () banked
  8072  00168A  6FE3               	movwf	_GPS_SYNC_AT_START& (0+255),b
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;eeprom.c: 89: Address.Val = 18;
  8076  00168C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8077  00168E  0E12               	movlw	18
  8078  001690  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;eeprom.c: 90: Temp32.Val = 0;
  8082  001692  6B66               	clrf	LoadSettingsFromEeprom@Temp32& (0+255),b
  8083  001694  6B67               	clrf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  8084  001696  6B68               	clrf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  8085  001698  6B69               	clrf	(LoadSettingsFromEeprom@Temp32+3)& (0+255),b
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;eeprom.c: 91: Temp32.v[0] = ReadEeprom(Address);
  8089  00169A  D842               	call	PL8	;call to abstracted procedure
  8090  00169C  EC36  F017         	call	_ReadEeprom	;wreg free
  8091  0016A0  0100               	movlb	0	; () banked
  8092  0016A2  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  8093                           
  8094                           ; BSR set to: 0
  8095                           ;eeprom.c: 92: Address.Val++;
  8096  0016A4  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8097  0016A6  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8098                           
  8099                           ; BSR set to: 0
  8100                           ;eeprom.c: 93: Temp32.v[1] = ReadEeprom(Address);
  8101  0016A8  D83B               	call	PL8	;call to abstracted procedure
  8102  0016AA  EC36  F017         	call	_ReadEeprom	;wreg free
  8103  0016AE  0100               	movlb	0	; () banked
  8104  0016B0  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  8105                           
  8106                           ; BSR set to: 0
  8107                           ;eeprom.c: 94: Address.Val++;
  8108  0016B2  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8109  0016B4  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;eeprom.c: 95: Temp32.v[2] = ReadEeprom(Address);
  8113  0016B6  D834               	call	PL8	;call to abstracted procedure
  8114  0016B8  EC36  F017         	call	_ReadEeprom	;wreg free
  8115  0016BC  0100               	movlb	0	; () banked
  8116  0016BE  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;eeprom.c: 96: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  8120  0016C0  C066  F0D0         	movff	LoadSettingsFromEeprom@Temp32,_GPS_SYNC_EVERY_x_SECONDS
  8121  0016C4  C067  F0D1         	movff	LoadSettingsFromEeprom@Temp32+1,_GPS_SYNC_EVERY_x_SECONDS+1
  8122  0016C8  C068  F0D2         	movff	LoadSettingsFromEeprom@Temp32+2,_GPS_SYNC_EVERY_x_SECONDS+2
  8123  0016CC  C069  F0D3         	movff	LoadSettingsFromEeprom@Temp32+3,_GPS_SYNC_EVERY_x_SECONDS+3
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;eeprom.c: 98: Address.Val = 21;
  8127  0016D0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8128  0016D2  0E15               	movlw	21
  8129  0016D4  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8130                           
  8131                           ; BSR set to: 0
  8132                           ;eeprom.c: 99: Temp16.v[0] = ReadEeprom(Address);
  8133  0016D6  D824               	call	PL8	;call to abstracted procedure
  8134  0016D8  EC36  F017         	call	_ReadEeprom	;wreg free
  8135  0016DC  0100               	movlb	0	; () banked
  8136  0016DE  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8137                           
  8138                           ; BSR set to: 0
  8139                           ;eeprom.c: 100: Address.Val++;
  8140  0016E0  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8141  0016E2  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8142                           
  8143                           ; BSR set to: 0
  8144                           ;eeprom.c: 101: Temp16.v[1] = ReadEeprom(Address);
  8145  0016E4  D81D               	call	PL8	;call to abstracted procedure
  8146  0016E6  EC36  F017         	call	_ReadEeprom	;wreg free
  8147  0016EA  0100               	movlb	0	; () banked
  8148  0016EC  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;eeprom.c: 102: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  8152  0016EE  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  8153  0016F2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8154  0016F4  0E0E               	movlw	14
  8155  0016F6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8156  0016F8  0E10               	movlw	16
  8157  0016FA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8158  0016FC  ECE9  F016         	call	___wmul	;wreg free
  8159  001700  516A               	movf	LoadSettingsFromEeprom@Temp16& (0+255),w,b
  8160  001702  0D3C               	mullw	60
  8161  001704  5160               	movf	?___wmul& (0+255),w,b
  8162  001706  26F3               	addwf	prodl,f,c
  8163  001708  5161               	movf	(?___wmul+1)& (0+255),w,b
  8164  00170A  22F4               	addwfc	prodh,f,c
  8165  00170C  CFF3 F0CC          	movff	prodl,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME
  8166  001710  CFF4 F0CD          	movff	prodh,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1
  8167  001714  0E00               	movlw	0
  8168  001716  BFCD               	btfsc	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),7,b
  8169  001718  0EFF               	movlw	-1
  8170  00171A  6FCE               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),b
  8171  00171C  6FCF               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),b
  8172                           
  8173                           ; BSR set to: 0
  8174  00171E  0012               	return		;funcret
  8175  001720                     __end_of_LoadSettingsFromEeprom:
  8176                           	opt stack 0
  8177  001720                     PL8:
  8178                           	opt stack 19
  8179  001720  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  8180  001724  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  8181  001728  0012               	return	
  8182  00172A                     __end_ofPL8:
  8183                           	opt stack 0
  8184                           tosu	equ	0xFFF
  8185                           tosh	equ	0xFFE
  8186                           tosl	equ	0xFFD
  8187                           pclath	equ	0xFFA
  8188                           tblptru	equ	0xFF8
  8189                           tblptrh	equ	0xFF7
  8190                           tblptrl	equ	0xFF6
  8191                           tablat	equ	0xFF5
  8192                           prodh	equ	0xFF4
  8193                           prodl	equ	0xFF3
  8194                           intcon	equ	0xFF2
  8195                           postinc0	equ	0xFEE
  8196                           plusw0	equ	0xFEB
  8197                           wreg	equ	0xFE8
  8198                           indf1	equ	0xFE7
  8199                           postinc1	equ	0xFE6
  8200                           postdec1	equ	0xFE5
  8201                           plusw1	equ	0xFE3
  8202                           fsr1h	equ	0xFE2
  8203                           fsr1l	equ	0xFE1
  8204                           indf2	equ	0xFDF
  8205                           postinc2	equ	0xFDE
  8206                           postdec2	equ	0xFDD
  8207                           plusw2	equ	0xFDB
  8208                           fsr2h	equ	0xFDA
  8209                           fsr2l	equ	0xFD9
  8210                           status	equ	0xFD8
  8211                           
  8212 ;; *************** function _LoadEventsFromEeprom *****************
  8213 ;; Defined at:
  8214 ;;		line 105 in file "libs/eeprom.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;		None
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  i               2   10[BANK0 ] int 
  8219 ;;  Temp16          2   14[BANK0 ] struct _WORD_VAL
  8220 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  8221 ;; Return value:  Size  Location     Type
  8222 ;;                  1    wreg      void 
  8223 ;; Registers used:
  8224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8225 ;; Tracked objects:
  8226 ;;		On entry : 3F/0
  8227 ;;		On exit  : 3F/0
  8228 ;;		Unchanged: 0/0
  8229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8231 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8232 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8233 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8234 ;;Total ram usage:       10 bytes
  8235 ;; Hardware stack levels used:    1
  8236 ;; Hardware stack levels required when called:   10
  8237 ;; This function calls:
  8238 ;;		_ReadEeprom
  8239 ;;		___wmul
  8240 ;; This function is called by:
  8241 ;;		_LoadAllFromEeprom
  8242 ;; This function uses a non-reentrant model
  8243 ;;
  8244                           
  8245                           	psect	text35
  8246  001BCA                     __ptext35:
  8247                           	opt stack 0
  8248  001BCA                     _LoadEventsFromEeprom:
  8249                           	opt stack 19
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;eeprom.c: 106: WORD_VAL Temp16, Address;
  8253                           ;eeprom.c: 107: Address.Val = 80;
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;incstack = 0
  8257  001BCA  6B6D               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  8258  001BCC  0E50               	movlw	80
  8259  001BCE  6F6C               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  8260                           
  8261                           ; BSR set to: 0
  8262                           ;eeprom.c: 108: for (int i=0; i<24; i++) {
  8263  001BD0  6B6A               	clrf	LoadEventsFromEeprom@i& (0+255),b
  8264  001BD2  6B6B               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  8265  001BD4                     l3715:
  8266                           
  8267                           ; BSR set to: 0
  8268                           ;eeprom.c: 109: Temp16.v[0] = ReadEeprom(Address);
  8269  001BD4  D87E               	call	PL50	;call to abstracted procedure
  8270  001BD6  EC36  F017         	call	_ReadEeprom	;wreg free
  8271  001BDA  0100               	movlb	0	; () banked
  8272  001BDC  6F6E               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;eeprom.c: 110: Address.Val++;
  8276                           
  8277                           ; BSR set to: 0
  8278                           ;eeprom.c: 111: Temp16.v[1] = ReadEeprom(Address);
  8279  001BDE  D867               	call	PL30	;call to abstracted procedure
  8280  001BE0  EC36  F017         	call	_ReadEeprom	;wreg free
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;eeprom.c: 112: EVENTS[i].START_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  8284  001BE4  D87B               	call	PL64	;call to abstracted procedure
  8285  001BE6  ECE9  F016         	call	___wmul	;wreg free
  8286  001BEA  D844               	call	PL18	;call to abstracted procedure
  8287  001BEC  ECE9  F016         	call	___wmul	;wreg free
  8288  001BF0  EC06  F010         	call	PL62	;call to abstracted procedure
  8289  001BF4  0E02               	movlw	high _EVENTS
  8290  001BF6  D862               	call	PL42	;call to abstracted procedure
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;eeprom.c: 113: Address.Val++;
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;eeprom.c: 114: Temp16.v[0] = ReadEeprom(Address);
  8297  001BF8  D85A               	call	PL30	;call to abstracted procedure
  8298  001BFA  EC36  F017         	call	_ReadEeprom	;wreg free
  8299  001BFE  0100               	movlb	0	; () banked
  8300  001C00  6F6E               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;eeprom.c: 115: Address.Val++;
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;eeprom.c: 116: Temp16.v[1] = ReadEeprom(Address);
  8307  001C02  D855               	call	PL30	;call to abstracted procedure
  8308  001C04  EC36  F017         	call	_ReadEeprom	;wreg free
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;eeprom.c: 117: EVENTS[i].END_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  8312  001C08  D869               	call	PL64	;call to abstracted procedure
  8313  001C0A  ECE9  F016         	call	___wmul	;wreg free
  8314  001C0E  D832               	call	PL18	;call to abstracted procedure
  8315  001C10  ECE9  F016         	call	___wmul	;wreg free
  8316  001C14  EC01  F010         	call	PL58	;call to abstracted procedure
  8317  001C18  D851               	call	PL42	;call to abstracted procedure
  8318                           
  8319                           ;eeprom.c: 118: Address.Val++;
  8320  001C1A  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  8321  001C1C  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;eeprom.c: 119: EVENTS[i].CYCLE = ReadEeprom(Address);
  8325  001C1E  D83F               	call	PL24	;call to abstracted procedure
  8326  001C20  ECE9  F016         	call	___wmul	;wreg free
  8327  001C24  0E08               	movlw	low (_EVENTS+8)
  8328  001C26  2560               	addwf	?___wmul& (0+255),w,b
  8329  001C28  6ED9               	movwf	fsr2l,c
  8330  001C2A  0E02               	movlw	high (_EVENTS+8)
  8331  001C2C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8332  001C2E  6EDA               	movwf	fsr2h,c
  8333  001C30  D850               	call	PL50	;call to abstracted procedure
  8334  001C32  EC36  F017         	call	_ReadEeprom	;wreg free
  8335  001C36  6EDF               	movwf	indf2,c
  8336                           
  8337                           ;eeprom.c: 120: Address.Val++;
  8338  001C38  0100               	movlb	0	; () banked
  8339                           
  8340                           ;eeprom.c: 121: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  8341  001C3A  D839               	call	PL30	;call to abstracted procedure
  8342  001C3C  EC36  F017         	call	_ReadEeprom	;wreg free
  8343  001C40  0100               	movlb	0	; () banked
  8344  001C42  6F66               	movwf	??_LoadEventsFromEeprom& (0+255),b
  8345  001C44  D82C               	call	PL24	;call to abstracted procedure
  8346  001C46  ECE9  F016         	call	___wmul	;wreg free
  8347  001C4A  EC0A  F010         	call	PL84	;call to abstracted procedure
  8348  001C4E  4766               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  8349  001C50  50DF               	movf	223,w,c
  8350  001C52  0100               	movlb	0	; () banked
  8351  001C54  1966               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  8352  001C56  0B01               	andlw	-255
  8353  001C58  1966               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  8354  001C5A  6EDF               	movwf	223,c
  8355                           
  8356                           ; BSR set to: 2
  8357                           ;eeprom.c: 122: Address.Val++;
  8358  001C5C  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  8359  001C5E  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  8360                           
  8361                           ; BSR set to: 0
  8362  001C60  4B6A               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  8363  001C62  2B6B               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  8364                           
  8365                           ; BSR set to: 0
  8366  001C64  BF6B               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  8367  001C66  D7B6               	goto	l3715
  8368  001C68  516B               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  8369  001C6A  E103               	bnz	u3370
  8370  001C6C  0E18               	movlw	24
  8371  001C6E  5D6A               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  8372  001C70  E3B1               	bnc	l3715
  8373  001C72                     u3370:
  8374                           
  8375                           ; BSR set to: 0
  8376  001C72  0012               	return		;funcret
  8377  001C74                     __end_of_LoadEventsFromEeprom:
  8378                           	opt stack 0
  8379  001C74                     PL18:
  8380                           	opt stack 19
  8381  001C74  516E               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  8382  001C76  0D3C               	mullw	60
  8383  001C78  5160               	movf	?___wmul& (0+255),w,b
  8384  001C7A  24F3               	addwf	prodl,w,c
  8385  001C7C  6F66               	movwf	??_LoadEventsFromEeprom& (0+255),b
  8386  001C7E  5161               	movf	(?___wmul+1)& (0+255),w,b
  8387  001C80  20F4               	addwfc	prodh,w,c
  8388  001C82  6F67               	movwf	(??_LoadEventsFromEeprom+1)& (0+255),b
  8389  001C84  6B68               	clrf	(??_LoadEventsFromEeprom+2)& (0+255),b
  8390  001C86  BF67               	btfsc	(??_LoadEventsFromEeprom+1)& (0+255),7,b
  8391  001C88  0768               	decf	(??_LoadEventsFromEeprom+2)& (0+255),f,b
  8392  001C8A  5168               	movf	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  8393  001C8C  6F69               	movwf	(??_LoadEventsFromEeprom+3)& (0+255),b
  8394  001C8E  C06A  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  8395  001C92  C06B  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  8396  001C96  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8397  001C98  0E0A               	movlw	10
  8398  001C9A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8399  001C9C  0C0A               	retlw	10
  8400  001C9E                     __end_ofPL18:
  8401                           	opt stack 0
  8402  001C9E                     PL24:
  8403                           	opt stack 19
  8404  001C9E  C06A  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  8405  001CA2  C06B  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  8406  001CA6  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8407  001CA8  0E0A               	movlw	10
  8408  001CAA  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8409  001CAC  0C0A               	retlw	10
  8410  001CAE                     __end_ofPL24:
  8411                           	opt stack 0
  8412  001CAE                     PL30:
  8413                           	opt stack 19
  8414  001CAE  4B6C               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  8415  001CB0  2B6D               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  8416  001CB2  C06C  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  8417  001CB6  C06D  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  8418  001CBA  0012               	return	
  8419  001CBC                     __end_ofPL30:
  8420                           	opt stack 0
  8421  001CBC                     PL42:
  8422                           	opt stack 19
  8423  001CBC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8424  001CBE  6EDA               	movwf	fsr2h,c
  8425  001CC0  C066  FFDE         	movff	??_LoadEventsFromEeprom,postinc2
  8426  001CC4  C067  FFDE         	movff	??_LoadEventsFromEeprom+1,postinc2
  8427  001CC8  C068  FFDE         	movff	??_LoadEventsFromEeprom+2,postinc2
  8428  001CCC  C069  FFDE         	movff	??_LoadEventsFromEeprom+3,postinc2
  8429  001CD0  0012               	return	
  8430  001CD2                     __end_ofPL42:
  8431                           	opt stack 0
  8432  001CD2                     PL50:
  8433                           	opt stack 19
  8434  001CD2  C06C  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  8435  001CD6  C06D  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  8436  001CDA  0012               	return	
  8437  001CDC                     __end_ofPL50:
  8438                           	opt stack 0
  8439  001CDC                     PL64:
  8440                           	opt stack 19
  8441  001CDC  0100               	movlb	0	; () banked
  8442  001CDE  6F6F               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  8443  001CE0  C06F  F060         	movff	LoadEventsFromEeprom@Temp16+1,___wmul@multiplier
  8444  001CE4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8445  001CE6  0E0E               	movlw	14
  8446  001CE8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8447  001CEA  0E10               	movlw	16
  8448  001CEC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8449  001CEE  0C10               	retlw	16
  8450  001CF0                     __end_ofPL64:
  8451                           	opt stack 0
  8452                           tosu	equ	0xFFF
  8453                           tosh	equ	0xFFE
  8454                           tosl	equ	0xFFD
  8455                           pclath	equ	0xFFA
  8456                           tblptru	equ	0xFF8
  8457                           tblptrh	equ	0xFF7
  8458                           tblptrl	equ	0xFF6
  8459                           tablat	equ	0xFF5
  8460                           prodh	equ	0xFF4
  8461                           prodl	equ	0xFF3
  8462                           intcon	equ	0xFF2
  8463                           postinc0	equ	0xFEE
  8464                           plusw0	equ	0xFEB
  8465                           wreg	equ	0xFE8
  8466                           indf1	equ	0xFE7
  8467                           postinc1	equ	0xFE6
  8468                           postdec1	equ	0xFE5
  8469                           plusw1	equ	0xFE3
  8470                           fsr1h	equ	0xFE2
  8471                           fsr1l	equ	0xFE1
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           plusw2	equ	0xFDB
  8476                           fsr2h	equ	0xFDA
  8477                           fsr2l	equ	0xFD9
  8478                           status	equ	0xFD8
  8479                           
  8480 ;; *************** function _LoadCyclesFromEeprom *****************
  8481 ;; Defined at:
  8482 ;;		line 155 in file "libs/eeprom.c"
  8483 ;; Parameters:    Size  Location     Type
  8484 ;;		None
  8485 ;; Auto vars:     Size  Location     Type
  8486 ;;  j               2   15[BANK0 ] int 
  8487 ;;  i               2   19[BANK0 ] int 
  8488 ;;  i               2   17[BANK0 ] int 
  8489 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  1    wreg      void 
  8492 ;; Registers used:
  8493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 3F/0
  8496 ;;		On exit  : 3F/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8500 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8501 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8502 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8503 ;;Total ram usage:       15 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:   10
  8506 ;; This function calls:
  8507 ;;		_ReadEeprom
  8508 ;;		___wmul
  8509 ;; This function is called by:
  8510 ;;		_LoadAllFromEeprom
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text36
  8515  001A84                     __ptext36:
  8516                           	opt stack 0
  8517  001A84                     _LoadCyclesFromEeprom:
  8518                           	opt stack 19
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;eeprom.c: 156: WORD_VAL Address;
  8522                           ;eeprom.c: 157: Address.Val = 63;
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;incstack = 0
  8526  001A84  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  8527  001A86  0E3F               	movlw	63
  8528  001A88  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;eeprom.c: 159: for (int i=0; i<17; i++) {
  8532  001A8A  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  8533  001A8C  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  8534  001A8E                     l3807:
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;eeprom.c: 160: CYCLES[i].END_STATE = ReadEeprom(Address);
  8538  001A8E  D898               	call	PL6	;call to abstracted procedure
  8539  001A90  0E03               	movlw	3
  8540  001A92  D892               	call	PL4	;call to abstracted procedure
  8541  001A94  90D8               	bcf	status,0,c
  8542  001A96  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  8543  001A98  6ED9               	movwf	fsr2l,c
  8544  001A9A  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  8545  001A9C  6EDA               	movwf	fsr2h,c
  8546  001A9E  90D8               	bcf	status,0,c
  8547  001AA0  36D9               	rlcf	fsr2l,f,c
  8548  001AA2  36DA               	rlcf	fsr2h,f,c
  8549  001AA4  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  8550  001AA6  26D9               	addwf	fsr2l,f,c
  8551  001AA8  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  8552  001AAA  22DA               	addwfc	fsr2h,f,c
  8553  001AAC  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  8554  001AB0  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  8555  001AB4  EC36  F017         	call	_ReadEeprom	;wreg free
  8556  001AB8  6EDF               	movwf	indf2,c
  8557                           
  8558                           ;eeprom.c: 161: Address.Val++;
  8559  001ABA  0100               	movlb	0	; () banked
  8560  001ABC  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  8561  001ABE  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  8562                           
  8563                           ; BSR set to: 0
  8564  001AC0  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  8565  001AC2  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  8566                           
  8567                           ; BSR set to: 0
  8568  001AC4  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  8569  001AC6  D7E3               	goto	l3807
  8570  001AC8  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  8571  001ACA  E103               	bnz	u3450
  8572  001ACC  0E11               	movlw	17
  8573  001ACE  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  8574  001AD0  E3DE               	bnc	l3807
  8575  001AD2                     u3450:
  8576                           
  8577                           ; BSR set to: 0
  8578                           ;eeprom.c: 162: }
  8579                           ;eeprom.c: 164: for (int i=0; i<17; i++) {
  8580  001AD2  6B73               	clrf	LoadCyclesFromEeprom@i_1461& (0+255),b
  8581  001AD4  6B74               	clrf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),b
  8582  001AD6                     l3819:
  8583                           
  8584                           ; BSR set to: 0
  8585                           ;eeprom.c: 165: if (i==0)
  8586  001AD6  5173               	movf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  8587  001AD8  1174               	iorwf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  8588  001ADA  E106               	bnz	l3823
  8589                           
  8590                           ; BSR set to: 0
  8591                           ;eeprom.c: 166: CYCLES[i].START_STATE = 0;
  8592  001ADC  D871               	call	PL6	;call to abstracted procedure
  8593  001ADE  0E02               	movlw	2
  8594  001AE0  D86B               	call	PL4	;call to abstracted procedure
  8595  001AE2  D85D               	call	PL2	;call to abstracted procedure
  8596  001AE4  6ADF               	clrf	indf2,c
  8597  001AE6  D01E               	goto	l3825
  8598  001AE8                     l3823:
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;eeprom.c: 167: else
  8602                           ;eeprom.c: 170: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  8603  001AE8  D86B               	call	PL6	;call to abstracted procedure
  8604  001AEA  0E02               	movlw	2
  8605  001AEC  D865               	call	PL4	;call to abstracted procedure
  8606  001AEE  D857               	call	PL2	;call to abstracted procedure
  8607  001AF0  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  8608  001AF2  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  8609  001AF4  0E00               	movlw	low _CYCLES
  8610  001AF6  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  8611  001AF8  0E01               	movlw	high _CYCLES
  8612  001AFA  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  8613  001AFC  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  8614  001AFE  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  8615  001B00  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  8616  001B02  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  8617  001B04  90D8               	bcf	status,0,c
  8618  001B06  3573               	rlcf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  8619  001B08  6EE1               	movwf	fsr1l,c
  8620  001B0A  3574               	rlcf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  8621  001B0C  6EE2               	movwf	fsr1h,c
  8622  001B0E  90D8               	bcf	status,0,c
  8623  001B10  36E1               	rlcf	fsr1l,f,c
  8624  001B12  36E2               	rlcf	fsr1h,f,c
  8625  001B14  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  8626  001B16  26E1               	addwf	fsr1l,f,c
  8627  001B18  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  8628  001B1A  22E2               	addwfc	fsr1h,f,c
  8629  001B1C  50E7               	movf	indf1,w,c
  8630  001B1E  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  8631  001B20  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  8632  001B22  6EDF               	movwf	indf2,c
  8633  001B24                     l3825:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;eeprom.c: 171: CYCLES[i].PERIOD = 0;
  8637  001B24  D84D               	call	PL6	;call to abstracted procedure
  8638  001B26  D83B               	call	PL2	;call to abstracted procedure
  8639  001B28  6ADE               	clrf	postinc2,c
  8640  001B2A  6ADD               	clrf	postdec2,c
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;eeprom.c: 172: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  8644  001B2C  D849               	call	PL6	;call to abstracted procedure
  8645  001B2E  0E02               	movlw	2
  8646  001B30  D843               	call	PL4	;call to abstracted procedure
  8647  001B32  D835               	call	PL2	;call to abstracted procedure
  8648  001B34  50DF               	movf	indf2,w,c
  8649  001B36  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  8650  001B38  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  8651  001B3A  D017               	goto	l3833
  8652  001B3C                     l3829:
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;eeprom.c: 173: CYCLES[i].PERIOD += STATES[j].PERIOD;
  8656  001B3C  D841               	call	PL6	;call to abstracted procedure
  8657  001B3E  D82F               	call	PL2	;call to abstracted procedure
  8658  001B40  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  8659  001B44  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  8660  001B48  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8661  001B4A  0E06               	movlw	6
  8662  001B4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8663  001B4E  ECE9  F016         	call	___wmul	;wreg free
  8664  001B52  0EEF               	movlw	low _STATES
  8665  001B54  2560               	addwf	?___wmul& (0+255),w,b
  8666  001B56  6EE1               	movwf	fsr1l,c
  8667  001B58  0E06               	movlw	high _STATES
  8668  001B5A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8669  001B5C  6EE2               	movwf	fsr1h,c
  8670  001B5E  50E7               	movf	indf1,w,c
  8671  001B60  26DE               	addwf	postinc2,f,c
  8672  001B62  0E00               	movlw	0
  8673  001B64  22DD               	addwfc	postdec2,f,c
  8674                           
  8675                           ; BSR set to: 0
  8676  001B66  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  8677  001B68  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  8678  001B6A                     l3833:
  8679                           
  8680                           ; BSR set to: 0
  8681  001B6A  D82A               	call	PL6	;call to abstracted procedure
  8682  001B6C  0E03               	movlw	3
  8683  001B6E  D824               	call	PL4	;call to abstracted procedure
  8684  001B70  D816               	call	PL2	;call to abstracted procedure
  8685  001B72  50DF               	movf	indf2,w,c
  8686  001B74  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  8687  001B76  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  8688  001B78  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  8689  001B7A  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  8690  001B7C  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  8691  001B7E  0A80               	xorlw	128
  8692  001B80  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  8693  001B82  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  8694  001B84  0A80               	xorlw	128
  8695  001B86  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  8696  001B88  E2D9               	bc	l3829
  8697                           
  8698                           ; BSR set to: 0
  8699  001B8A  4B73               	infsnz	LoadCyclesFromEeprom@i_1461& (0+255),f,b
  8700  001B8C  2B74               	incf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),f,b
  8701                           
  8702                           ; BSR set to: 0
  8703  001B8E  BF74               	btfsc	(LoadCyclesFromEeprom@i_1461+1)& (0+255),7,b
  8704  001B90  D7A2               	goto	l3819
  8705  001B92  5174               	movf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  8706  001B94  E103               	bnz	u3480
  8707  001B96  0E11               	movlw	17
  8708  001B98  5D73               	subwf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  8709  001B9A  E39D               	bnc	l3819
  8710  001B9C                     u3480:
  8711                           
  8712                           ; BSR set to: 0
  8713  001B9C  0012               	return		;funcret
  8714  001B9E                     __end_of_LoadCyclesFromEeprom:
  8715                           	opt stack 0
  8716  001B9E                     PL2:
  8717                           	opt stack 19
  8718  001B9E  90D8               	bcf	status,0,c
  8719  001BA0  3573               	rlcf	LoadCyclesFromEeprom@i_1461& (0+255),w,b
  8720  001BA2  6ED9               	movwf	fsr2l,c
  8721  001BA4  3574               	rlcf	(LoadCyclesFromEeprom@i_1461+1)& (0+255),w,b
  8722  001BA6  6EDA               	movwf	fsr2h,c
  8723  001BA8  90D8               	bcf	status,0,c
  8724  001BAA  36D9               	rlcf	fsr2l,f,c
  8725  001BAC  36DA               	rlcf	fsr2h,f,c
  8726  001BAE  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  8727  001BB0  26D9               	addwf	fsr2l,f,c
  8728  001BB2  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  8729  001BB4  22DA               	addwfc	fsr2h,f,c
  8730  001BB6  0012               	return	
  8731  001BB8                     __end_ofPL2:
  8732                           	opt stack 0
  8733  001BB8                     PL4:
  8734                           	opt stack 19
  8735  001BB8  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  8736  001BBA  0E00               	movlw	0
  8737  001BBC  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  8738  001BBE  0C00               	retlw	0
  8739  001BC0                     __end_ofPL4:
  8740                           	opt stack 0
  8741  001BC0                     PL6:
  8742                           	opt stack 19
  8743  001BC0  0E00               	movlw	low _CYCLES
  8744  001BC2  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  8745  001BC4  0E01               	movlw	high _CYCLES
  8746  001BC6  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  8747  001BC8  0012               	return	
  8748  001BCA                     __end_ofPL6:
  8749                           	opt stack 0
  8750                           tosu	equ	0xFFF
  8751                           tosh	equ	0xFFE
  8752                           tosl	equ	0xFFD
  8753                           pclath	equ	0xFFA
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           postinc0	equ	0xFEE
  8762                           plusw0	equ	0xFEB
  8763                           wreg	equ	0xFE8
  8764                           indf1	equ	0xFE7
  8765                           postinc1	equ	0xFE6
  8766                           postdec1	equ	0xFE5
  8767                           plusw1	equ	0xFE3
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           plusw2	equ	0xFDB
  8774                           fsr2h	equ	0xFDA
  8775                           fsr2l	equ	0xFD9
  8776                           status	equ	0xFD8
  8777                           
  8778 ;; *************** function _ReadEeprom *****************
  8779 ;; Defined at:
  8780 ;;		line 3 in file "libs/eeprom.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;		None
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      unsigned char 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8798 ;;Total ram usage:        2 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    9
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_LoadSettingsFromEeprom
  8805 ;;		_LoadEventsFromEeprom
  8806 ;;		_LoadStatesFromEeprom
  8807 ;;		_LoadCyclesFromEeprom
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text37
  8812  002E6C                     __ptext37:
  8813                           	opt stack 0
  8814  002E6C                     _ReadEeprom:
  8815                           	opt stack 19
  8816                           
  8817                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;incstack = 0
  8821  002E6C  0E3F               	movlw	-193
  8822  002E6E  1681               	andwf	3969,f,c	;volatile
  8823                           
  8824                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  8825  002E70  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  8826                           
  8827                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  8828  002E74  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  8829                           
  8830                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  8831  002E78  8081               	bsf	3969,0,c	;volatile
  8832                           
  8833                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  8834  002E7A  8E81               	bsf	3969,7,c	;volatile
  8835                           
  8836                           ;eeprom.c: 12: return NVMDAT;
  8837  002E7C  5080               	movf	3968,w,c	;volatile
  8838  002E7E  0012               	return		;funcret
  8839  002E80                     __end_of_ReadEeprom:
  8840                           	opt stack 0
  8841                           tosu	equ	0xFFF
  8842                           tosh	equ	0xFFE
  8843                           tosl	equ	0xFFD
  8844                           pclath	equ	0xFFA
  8845                           tblptru	equ	0xFF8
  8846                           tblptrh	equ	0xFF7
  8847                           tblptrl	equ	0xFF6
  8848                           tablat	equ	0xFF5
  8849                           prodh	equ	0xFF4
  8850                           prodl	equ	0xFF3
  8851                           intcon	equ	0xFF2
  8852                           postinc0	equ	0xFEE
  8853                           plusw0	equ	0xFEB
  8854                           wreg	equ	0xFE8
  8855                           indf1	equ	0xFE7
  8856                           postinc1	equ	0xFE6
  8857                           postdec1	equ	0xFE5
  8858                           plusw1	equ	0xFE3
  8859                           fsr1h	equ	0xFE2
  8860                           fsr1l	equ	0xFE1
  8861                           indf2	equ	0xFDF
  8862                           postinc2	equ	0xFDE
  8863                           postdec2	equ	0xFDD
  8864                           plusw2	equ	0xFDB
  8865                           fsr2h	equ	0xFDA
  8866                           fsr2l	equ	0xFD9
  8867                           status	equ	0xFD8
  8868                           
  8869 ;; *************** function _Lcd_Init *****************
  8870 ;; Defined at:
  8871 ;;		line 17 in file "libs/HD44780.c"
  8872 ;; Parameters:    Size  Location     Type
  8873 ;;		None
  8874 ;; Auto vars:     Size  Location     Type
  8875 ;;  data            1    3[BANK0 ] unsigned char 
  8876 ;; Return value:  Size  Location     Type
  8877 ;;                  1    wreg      void 
  8878 ;; Registers used:
  8879 ;;		wreg, status,2, status,0, cstack
  8880 ;; Tracked objects:
  8881 ;;		On entry : 3F/0
  8882 ;;		On exit  : 0/0
  8883 ;;		Unchanged: 0/0
  8884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8888 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8889 ;;Total ram usage:        1 bytes
  8890 ;; Hardware stack levels used:    1
  8891 ;; Hardware stack levels required when called:   11
  8892 ;; This function calls:
  8893 ;;		_Lcd_Command
  8894 ;;		_Lcd_Delay5500us
  8895 ;;		_Lcd_Delay5us
  8896 ;; This function is called by:
  8897 ;;		_main
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text38
  8902  00273E                     __ptext38:
  8903                           	opt stack 0
  8904  00273E                     _Lcd_Init:
  8905                           	opt stack 19
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;HD44780.c: 23: unsigned char data;
  8909                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  8910                           
  8911                           ;incstack = 0
  8912  00273E  9A88               	bcf	3976,5,c	;volatile
  8913  002740  9888               	bcf	3976,4,c	;volatile
  8914  002742  9688               	bcf	3976,3,c	;volatile
  8915  002744  9488               	bcf	3976,2,c	;volatile
  8916  002746  9288               	bcf	3976,1,c	;volatile
  8917  002748  9088               	bcf	3976,0,c	;volatile
  8918                           
  8919                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8920  00274A  9A83               	bcf	3971,5,c	;volatile
  8921  00274C  9883               	bcf	3971,4,c	;volatile
  8922  00274E  9683               	bcf	3971,3,c	;volatile
  8923  002750  9483               	bcf	3971,2,c	;volatile
  8924  002752  9283               	bcf	3971,1,c	;volatile
  8925  002754  9083               	bcf	3971,0,c	;volatile
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  8929  002756  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8930  00275A  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8931  00275E  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8932                           
  8933                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  8934  002762  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8935  002766  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8936  00276A  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8937                           
  8938                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  8939  00276E  0E01               	movlw	1
  8940  002770  0100               	movlb	0	; () banked
  8941  002772  6F63               	movwf	Lcd_Init@data& (0+255),b
  8942  002774                     l266:
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;HD44780.c: 29: {
  8946                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8947  002774  D82F               	call	PL92	;call to abstracted procedure
  8948  002776  9283               	bcf	3971,1,c	;volatile
  8949  002778  9083               	bcf	3971,0,c	;volatile
  8950                           
  8951                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  8952  00277A  D82C               	call	PL92	;call to abstracted procedure
  8953  00277C  8283               	bsf	3971,1,c	;volatile
  8954  00277E  9083               	bcf	3971,0,c	;volatile
  8955                           
  8956                           ; BSR set to: 0
  8957                           ;HD44780.c: 32: Lcd_Delay5us();
  8958  002780  EC70  F017         	call	_Lcd_Delay5us	;wreg free
  8959                           
  8960                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8961  002784  D827               	call	PL92	;call to abstracted procedure
  8962  002786  9283               	bcf	3971,1,c	;volatile
  8963  002788  9083               	bcf	3971,0,c	;volatile
  8964                           
  8965                           ;HD44780.c: 34: Lcd_Delay5500us();
  8966  00278A  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8967  00278E  0100               	movlb	0	; () banked
  8968  002790  2B63               	incf	Lcd_Init@data& (0+255),f,b
  8969  002792  0E03               	movlw	3
  8970  002794  6563               	cpfsgt	Lcd_Init@data& (0+255),b
  8971  002796  D7EE               	goto	l266
  8972                           
  8973                           ; BSR set to: 0
  8974                           ;HD44780.c: 35: }
  8975                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8976  002798  D818               	call	PL90	;call to abstracted procedure
  8977  00279A  9283               	bcf	3971,1,c	;volatile
  8978  00279C  9083               	bcf	3971,0,c	;volatile
  8979                           
  8980                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  8981  00279E  D815               	call	PL90	;call to abstracted procedure
  8982  0027A0  8283               	bsf	3971,1,c	;volatile
  8983  0027A2  9083               	bcf	3971,0,c	;volatile
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;HD44780.c: 38: Lcd_Delay5us();
  8987  0027A4  EC70  F017         	call	_Lcd_Delay5us	;wreg free
  8988                           
  8989                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8990  0027A8  D810               	call	PL90	;call to abstracted procedure
  8991  0027AA  9283               	bcf	3971,1,c	;volatile
  8992  0027AC  9083               	bcf	3971,0,c	;volatile
  8993                           
  8994                           ;HD44780.c: 40: Lcd_Delay5500us();
  8995  0027AE  EC53  F017         	call	_Lcd_Delay5500us	;wreg free
  8996  0027B2  0E28               	movlw	40
  8997  0027B4  ECEC  F011         	call	_Lcd_Command
  8998  0027B8  0E10               	movlw	16
  8999  0027BA  ECEC  F011         	call	_Lcd_Command
  9000  0027BE  0E01               	movlw	1
  9001  0027C0  ECEC  F011         	call	_Lcd_Command
  9002  0027C4  0E0F               	movlw	15
  9003  0027C6  EFEC  F011         	goto	_Lcd_Command
  9004  0027CA                     __end_of_Lcd_Init:
  9005                           	opt stack 0
  9006  0027CA                     PL90:
  9007                           	opt stack 19
  9008  0027CA  9A83               	bcf	3971,5,c	;volatile
  9009  0027CC  9883               	bcf	3971,4,c	;volatile
  9010  0027CE  8683               	bsf	3971,3,c	;volatile
  9011  0027D0  9483               	bcf	3971,2,c	;volatile
  9012  0027D2  0012               	return	
  9013  0027D4                     __end_ofPL90:
  9014                           	opt stack 0
  9015  0027D4                     PL92:
  9016                           	opt stack 19
  9017  0027D4  9A83               	bcf	3971,5,c	;volatile
  9018  0027D6  9883               	bcf	3971,4,c	;volatile
  9019  0027D8  8683               	bsf	3971,3,c	;volatile
  9020  0027DA  8483               	bsf	3971,2,c	;volatile
  9021  0027DC  0012               	return	
  9022  0027DE                     __end_ofPL92:
  9023                           	opt stack 0
  9024                           tosu	equ	0xFFF
  9025                           tosh	equ	0xFFE
  9026                           tosl	equ	0xFFD
  9027                           pclath	equ	0xFFA
  9028                           tblptru	equ	0xFF8
  9029                           tblptrh	equ	0xFF7
  9030                           tblptrl	equ	0xFF6
  9031                           tablat	equ	0xFF5
  9032                           prodh	equ	0xFF4
  9033                           prodl	equ	0xFF3
  9034                           intcon	equ	0xFF2
  9035                           postinc0	equ	0xFEE
  9036                           plusw0	equ	0xFEB
  9037                           wreg	equ	0xFE8
  9038                           indf1	equ	0xFE7
  9039                           postinc1	equ	0xFE6
  9040                           postdec1	equ	0xFE5
  9041                           plusw1	equ	0xFE3
  9042                           fsr1h	equ	0xFE2
  9043                           fsr1l	equ	0xFE1
  9044                           indf2	equ	0xFDF
  9045                           postinc2	equ	0xFDE
  9046                           postdec2	equ	0xFDD
  9047                           plusw2	equ	0xFDB
  9048                           fsr2h	equ	0xFDA
  9049                           fsr2l	equ	0xFD9
  9050                           status	equ	0xFD8
  9051                           
  9052 ;; *************** function _Lcd_Delay5500us *****************
  9053 ;; Defined at:
  9054 ;;		line 153 in file "libs/HD44780.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;		None
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;		None
  9059 ;; Return value:  Size  Location     Type
  9060 ;;                  1    wreg      void 
  9061 ;; Registers used:
  9062 ;;		wreg
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9071 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9072 ;;Total ram usage:        1 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    9
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_Lcd_Init
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           	psect	text39
  9083  002EA6                     __ptext39:
  9084                           	opt stack 0
  9085  002EA6                     _Lcd_Delay5500us:
  9086                           	opt stack 20
  9087                           
  9088                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  9089                           
  9090                           ;incstack = 0
  9091  002EA6  0E08               	movlw	8
  9092  002EA8  0100               	movlb	0	; () banked
  9093  002EAA  6F60               	movwf	??_Lcd_Delay5500us& (0+255),b
  9094  002EAC  0E23               	movlw	35
  9095  002EAE                     u3927:
  9096  002EAE  2EE8               	decfsz	wreg,f,c
  9097  002EB0  D7FE               	bra	u3927
  9098  002EB2  2F60               	decfsz	??_Lcd_Delay5500us& (0+255),f,b
  9099  002EB4  D7FC               	bra	u3927
  9100  002EB6  0012               	return		;funcret
  9101  002EB8                     __end_of_Lcd_Delay5500us:
  9102                           	opt stack 0
  9103                           tosu	equ	0xFFF
  9104                           tosh	equ	0xFFE
  9105                           tosl	equ	0xFFD
  9106                           pclath	equ	0xFFA
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon	equ	0xFF2
  9114                           postinc0	equ	0xFEE
  9115                           plusw0	equ	0xFEB
  9116                           wreg	equ	0xFE8
  9117                           indf1	equ	0xFE7
  9118                           postinc1	equ	0xFE6
  9119                           postdec1	equ	0xFE5
  9120                           plusw1	equ	0xFE3
  9121                           fsr1h	equ	0xFE2
  9122                           fsr1l	equ	0xFE1
  9123                           indf2	equ	0xFDF
  9124                           postinc2	equ	0xFDE
  9125                           postdec2	equ	0xFDD
  9126                           plusw2	equ	0xFDB
  9127                           fsr2h	equ	0xFDA
  9128                           fsr2l	equ	0xFD9
  9129                           status	equ	0xFD8
  9130                           
  9131 ;; *************** function _Lcd_Command *****************
  9132 ;; Defined at:
  9133 ;;		line 133 in file "libs/HD44780.c"
  9134 ;; Parameters:    Size  Location     Type
  9135 ;;  command         1    wreg     unsigned char 
  9136 ;; Auto vars:     Size  Location     Type
  9137 ;;  command         1    2[BANK0 ] unsigned char 
  9138 ;; Return value:  Size  Location     Type
  9139 ;;                  1    wreg      void 
  9140 ;; Registers used:
  9141 ;;		wreg, status,2, status,0, cstack
  9142 ;; Tracked objects:
  9143 ;;		On entry : 0/0
  9144 ;;		On exit  : 0/0
  9145 ;;		Unchanged: 0/0
  9146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9149 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9150 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9151 ;;Total ram usage:        3 bytes
  9152 ;; Hardware stack levels used:    1
  9153 ;; Hardware stack levels required when called:   10
  9154 ;; This function calls:
  9155 ;;		_Lcd_Delay5us
  9156 ;; This function is called by:
  9157 ;;		_Lcd_Init
  9158 ;;		_main
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162                           	psect	text40
  9163  0023D8                     __ptext40:
  9164                           	opt stack 0
  9165  0023D8                     _Lcd_Command:
  9166                           	opt stack 19
  9167                           
  9168                           ;incstack = 0
  9169                           ;Lcd_Command@command stored from wreg
  9170  0023D8  0100               	movlb	0	; () banked
  9171  0023DA  6F62               	movwf	Lcd_Command@command& (0+255),b
  9172                           
  9173                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  9174  0023DC  9283               	bcf	3971,1,c	;volatile
  9175  0023DE  9083               	bcf	3971,0,c	;volatile
  9176                           
  9177                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
  9178  0023E0  6B60               	clrf	??_Lcd_Command& (0+255),b
  9179  0023E2  AF62               	btfss	Lcd_Command@command& (0+255),7,b
  9180  0023E4  D001               	bra	u3345
  9181  0023E6  2B60               	incf	??_Lcd_Command& (0+255),f,b
  9182  0023E8                     u3345:
  9183  0023E8  D837               	call	PL36	;call to abstracted procedure
  9184  0023EA  0E06               	movlw	6
  9185  0023EC  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
  9186  0023EE                     u3355:
  9187  0023EE  90D8               	bcf	status,0,c
  9188  0023F0  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9189  0023F2  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
  9190  0023F4  D7FC               	goto	u3355
  9191  0023F6  D84D               	call	PL54	;call to abstracted procedure
  9192                           
  9193                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
  9194  0023F8  D847               	call	PL46	;call to abstracted procedure
  9195  0023FA  0E05               	movlw	5
  9196  0023FC  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
  9197  0023FE                     u3365:
  9198  0023FE  90D8               	bcf	status,0,c
  9199  002400  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9200  002402  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
  9201  002404  D7FC               	goto	u3365
  9202  002406  0E01               	movlw	1
  9203  002408  D833               	call	PL38	;call to abstracted procedure
  9204  00240A  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  9205  00240C  0E0F               	movlw	15
  9206  00240E  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9207  002410  0E01               	movlw	1
  9208  002412  D846               	call	PL66	;call to abstracted procedure
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;HD44780.c: 137: _delay(10);
  9212  002414  0E03               	movlw	3
  9213  002416                     u3937:
  9214  002416  2EE8               	decfsz	wreg,f,c
  9215  002418  D7FE               	bra	u3937
  9216  00241A  F000               	nop	
  9217                           
  9218                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  9219  00241C  8283               	bsf	3971,1,c	;volatile
  9220  00241E  EC70  F017         	call	_Lcd_Delay5us	;wreg free
  9221  002422  9283               	bcf	3971,1,c	;volatile
  9222                           
  9223                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
  9224  002424  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9225  002428  0100               	movlb	0	; () banked
  9226  00242A  90D8               	bcf	status,0,c
  9227  00242C  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9228  00242E  D841               	call	PL80	;call to abstracted procedure
  9229                           
  9230                           ; BSR set to: 0
  9231  002430  D813               	call	PL36	;call to abstracted procedure
  9232  002432  D83F               	call	PL80	;call to abstracted procedure
  9233  002434  D82E               	call	PL54	;call to abstracted procedure
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
  9237  002436  D828               	call	PL46	;call to abstracted procedure
  9238  002438  90D8               	bcf	status,0,c
  9239  00243A  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9240  00243C  0E01               	movlw	1
  9241                           
  9242                           ; BSR set to: 0
  9243  00243E  D818               	call	PL38	;call to abstracted procedure
  9244  002440  0E01               	movlw	1
  9245  002442  D82E               	call	PL66	;call to abstracted procedure
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;HD44780.c: 141: _delay(10);
  9249  002444  0E03               	movlw	3
  9250  002446                     u3947:
  9251  002446  2EE8               	decfsz	wreg,f,c
  9252  002448  D7FE               	bra	u3947
  9253  00244A  F000               	nop	
  9254                           
  9255                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  9256  00244C  8283               	bsf	3971,1,c	;volatile
  9257  00244E  EC70  F017         	call	_Lcd_Delay5us	;wreg free
  9258  002452  9283               	bcf	3971,1,c	;volatile
  9259                           
  9260                           ;HD44780.c: 144: Lcd_Delay5us();
  9261  002454  EF70  F017         	goto	_Lcd_Delay5us	;wreg free
  9262  002458                     __end_of_Lcd_Command:
  9263                           	opt stack 0
  9264  002458                     PL36:
  9265                           	opt stack 19
  9266  002458  0E01               	movlw	1
  9267  00245A  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9268  00245C  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  9269  00245E  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9270  002460  5083               	movf	3971,w,c	;volatile
  9271  002462  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9272  002464  0BDF               	andlw	-33
  9273  002466  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9274  002468  6E83               	movwf	3971,c	;volatile
  9275  00246A  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9276  00246E  0012               	return	
  9277  002470                     __end_ofPL36:
  9278                           	opt stack 0
  9279  002470                     PL38:
  9280                           	opt stack 19
  9281  002470  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9282  002472  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9283  002474  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9284  002476  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9285  002478  5083               	movf	3971,w,c	;volatile
  9286  00247A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9287  00247C  0BF7               	andlw	-9
  9288  00247E  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9289  002480  6E83               	movwf	3971,c	;volatile
  9290  002482  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9291  002486  0012               	return	
  9292  002488                     __end_ofPL38:
  9293                           	opt stack 0
  9294  002488                     PL46:
  9295                           	opt stack 19
  9296  002488  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9297  00248A  6E83               	movwf	3971,c	;volatile
  9298  00248C  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9299  002490  0012               	return	
  9300  002492                     __end_ofPL46:
  9301                           	opt stack 0
  9302  002492                     PL54:
  9303                           	opt stack 19
  9304  002492  0E01               	movlw	1
  9305  002494  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9306  002496  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  9307  002498  5083               	movf	3971,w,c	;volatile
  9308  00249A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9309  00249C  0BEF               	andlw	-17
  9310  00249E  0012               	return	
  9311  0024A0                     __end_ofPL54:
  9312                           	opt stack 0
  9313  0024A0                     PL66:
  9314                           	opt stack 19
  9315  0024A0  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9316  0024A2  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9317  0024A4  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9318  0024A6  5083               	movf	3971,w,c	;volatile
  9319  0024A8  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9320  0024AA  0BFB               	andlw	-5
  9321  0024AC  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9322  0024AE  6E83               	movwf	3971,c	;volatile
  9323  0024B0  0012               	return	
  9324  0024B2                     __end_ofPL66:
  9325                           	opt stack 0
  9326  0024B2                     PL80:
  9327                           	opt stack 19
  9328  0024B2  90D8               	bcf	status,0,c
  9329  0024B4  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9330  0024B6  90D8               	bcf	status,0,c
  9331  0024B8  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9332  0024BA  0012               	return	
  9333  0024BC                     __end_ofPL80:
  9334                           	opt stack 0
  9335                           tosu	equ	0xFFF
  9336                           tosh	equ	0xFFE
  9337                           tosl	equ	0xFFD
  9338                           pclath	equ	0xFFA
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           postinc0	equ	0xFEE
  9347                           plusw0	equ	0xFEB
  9348                           wreg	equ	0xFE8
  9349                           indf1	equ	0xFE7
  9350                           postinc1	equ	0xFE6
  9351                           postdec1	equ	0xFE5
  9352                           plusw1	equ	0xFE3
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           plusw2	equ	0xFDB
  9359                           fsr2h	equ	0xFDA
  9360                           fsr2l	equ	0xFD9
  9361                           status	equ	0xFD8
  9362                           
  9363 ;; *************** function _Lcd_Delay5us *****************
  9364 ;; Defined at:
  9365 ;;		line 150 in file "libs/HD44780.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;		None
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      void 
  9372 ;; Registers used:
  9373 ;;		None
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9383 ;;Total ram usage:        0 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    9
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_Lcd_Init
  9390 ;;		_Lcd_Command
  9391 ;; This function uses a non-reentrant model
  9392 ;;
  9393                           
  9394                           	psect	text41
  9395  002EE0                     __ptext41:
  9396                           	opt stack 0
  9397  002EE0                     _Lcd_Delay5us:
  9398                           	opt stack 20
  9399                           
  9400                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  9401                           
  9402                           ;incstack = 0
  9403  002EE0  D000               	nop2		;2 cycle nop
  9404  002EE2  D000               	nop2		;2 cycle nop
  9405  002EE4  F000               	nop	
  9406  002EE6  0012               	return		;funcret
  9407  002EE8                     __end_of_Lcd_Delay5us:
  9408                           	opt stack 0
  9409                           tosu	equ	0xFFF
  9410                           tosh	equ	0xFFE
  9411                           tosl	equ	0xFFD
  9412                           pclath	equ	0xFFA
  9413                           tblptru	equ	0xFF8
  9414                           tblptrh	equ	0xFF7
  9415                           tblptrl	equ	0xFF6
  9416                           tablat	equ	0xFF5
  9417                           prodh	equ	0xFF4
  9418                           prodl	equ	0xFF3
  9419                           intcon	equ	0xFF2
  9420                           postinc0	equ	0xFEE
  9421                           plusw0	equ	0xFEB
  9422                           wreg	equ	0xFE8
  9423                           indf1	equ	0xFE7
  9424                           postinc1	equ	0xFE6
  9425                           postdec1	equ	0xFE5
  9426                           plusw1	equ	0xFE3
  9427                           fsr1h	equ	0xFE2
  9428                           fsr1l	equ	0xFE1
  9429                           indf2	equ	0xFDF
  9430                           postinc2	equ	0xFDE
  9431                           postdec2	equ	0xFDD
  9432                           plusw2	equ	0xFDB
  9433                           fsr2h	equ	0xFDA
  9434                           fsr2l	equ	0xFD9
  9435                           status	equ	0xFD8
  9436                           
  9437 ;; *************** function _GetEventNumber *****************
  9438 ;; Defined at:
  9439 ;;		line 197 in file "libs/funcs.c"
  9440 ;; Parameters:    Size  Location     Type
  9441 ;;		None
  9442 ;; Auto vars:     Size  Location     Type
  9443 ;;  i               2   15[BANK0 ] unsigned int 
  9444 ;; Return value:  Size  Location     Type
  9445 ;;                  1    wreg      char 
  9446 ;; Registers used:
  9447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9448 ;; Tracked objects:
  9449 ;;		On entry : 3F/0
  9450 ;;		On exit  : 3F/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9455 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9456 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9457 ;;Total ram usage:       11 bytes
  9458 ;; Hardware stack levels used:    1
  9459 ;; Hardware stack levels required when called:   10
  9460 ;; This function calls:
  9461 ;;		___wmul
  9462 ;; This function is called by:
  9463 ;;		_main
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           	psect	text42
  9468  001F24                     __ptext42:
  9469                           	opt stack 0
  9470  001F24                     _GetEventNumber:
  9471                           	opt stack 20
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;funcs.c: 198: for (UINT i=0; i<24; i++) {
  9475                           
  9476                           ;incstack = 0
  9477  001F24  6B6F               	clrf	GetEventNumber@i& (0+255),b
  9478  001F26  6B70               	clrf	(GetEventNumber@i+1)& (0+255),b
  9479  001F28                     l4061:
  9480                           
  9481                           ; BSR set to: 0
  9482                           ;funcs.c: 199: if (DATE_TIME.DAY.Val & EVENTS[i].SELECTED_WEEKS.Val) {
  9483  001F28  D854               	call	PL12	;call to abstracted procedure
  9484  001F2A  ECE9  F016         	call	___wmul	;wreg free
  9485  001F2E  D872               	call	PL84	;call to abstracted procedure
  9486  001F30  30DF               	rrcf	223,w,c
  9487  001F32  0B7F               	andlw	127
  9488  001F34  0100               	movlb	0	; () banked
  9489  001F36  6F66               	movwf	??_GetEventNumber& (0+255),b
  9490  001F38  31C1               	rrcf	(_DATE_TIME+8)& (0+255),w,b
  9491  001F3A  0B7F               	andlw	127
  9492  001F3C  1566               	andwf	??_GetEventNumber& (0+255),w,b
  9493  001F3E  E041               	bz	l4081
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;funcs.c: 200: if (EVENTS[i].START_TIME < EVENTS[i].END_TIME) {
  9497  001F40  D848               	call	PL12	;call to abstracted procedure
  9498  001F42  ECE9  F016         	call	___wmul	;wreg free
  9499  001F46  D85D               	call	PL58	;call to abstracted procedure
  9500  001F48  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9501  001F4A  6EDA               	movwf	fsr2h,c
  9502  001F4C  D842               	call	PL12	;call to abstracted procedure
  9503  001F4E  ECE9  F016         	call	___wmul	;wreg free
  9504  001F52  0E00               	movlw	low _EVENTS
  9505  001F54  2560               	addwf	?___wmul& (0+255),w,b
  9506  001F56  6EE1               	movwf	fsr1l,c
  9507  001F58  0E02               	movlw	high _EVENTS
  9508  001F5A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9509  001F5C  6EE2               	movwf	fsr1h,c
  9510  001F5E  50DE               	movf	postinc2,w,c
  9511  001F60  5CE6               	subwf	postinc1,w,c
  9512  001F62  50DE               	movf	postinc2,w,c
  9513  001F64  58E6               	subwfb	postinc1,w,c
  9514  001F66  50DE               	movf	postinc2,w,c
  9515  001F68  58E6               	subwfb	postinc1,w,c
  9516  001F6A  50E6               	movf	postinc1,w,c
  9517  001F6C  0A80               	xorlw	128
  9518  001F6E  6F6E               	movwf	(??_GetEventNumber+8)& (0+255),b
  9519  001F70  50DE               	movf	postinc2,w,c
  9520  001F72  0A80               	xorlw	128
  9521  001F74  596E               	subwfb	(??_GetEventNumber+8)& (0+255),w,b
  9522  001F76  E21B               	bc	l4073
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;funcs.c: 201: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
  9526                           ;funcs.c: 202: && (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
  9527  001F78  D82C               	call	PL12	;call to abstracted procedure
  9528  001F7A  ECE9  F016         	call	___wmul	;wreg free
  9529  001F7E  D846               	call	PL62	;call to abstracted procedure
  9530  001F80  D830               	call	PL26	;call to abstracted procedure
  9531  001F82  E21F               	bc	l4081
  9532                           
  9533                           ; BSR set to: 0
  9534  001F84  D826               	call	PL12	;call to abstracted procedure
  9535  001F86  ECE9  F016         	call	___wmul	;wreg free
  9536  001F8A  D83B               	call	PL58	;call to abstracted procedure
  9537  001F8C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9538  001F8E  6EDA               	movwf	fsr2h,c
  9539  001F90  50DE               	movf	postinc2,w,c
  9540  001F92  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  9541  001F94  50DE               	movf	postinc2,w,c
  9542  001F96  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  9543  001F98  50DE               	movf	postinc2,w,c
  9544  001F9A  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  9545  001F9C  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
  9546  001F9E  0A80               	xorlw	128
  9547  001FA0  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
  9548  001FA2  50DE               	movf	postinc2,w,c
  9549  001FA4  0A80               	xorlw	128
  9550  001FA6  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
  9551  001FA8  E20C               	bc	l4081
  9552  001FAA                     l4069:
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;funcs.c: 203: return i;
  9556  001FAA  516F               	movf	GetEventNumber@i& (0+255),w,b
  9557  001FAC  0012               	return	
  9558  001FAE                     l4073:
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;funcs.c: 206: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
  9562                           ;funcs.c: 207: || (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
  9563  001FAE  D811               	call	PL12	;call to abstracted procedure
  9564  001FB0  ECE9  F016         	call	___wmul	;wreg free
  9565  001FB4  D82B               	call	PL62	;call to abstracted procedure
  9566  001FB6  D815               	call	PL26	;call to abstracted procedure
  9567  001FB8  E3F8               	bnc	l4069
  9568                           
  9569                           ; BSR set to: 0
  9570  001FBA  D80B               	call	PL12	;call to abstracted procedure
  9571  001FBC  ECE9  F016         	call	___wmul	;wreg free
  9572  001FC0  D7E4               	goto	L5
  9573  001FC2                     l4081:
  9574                           
  9575                           ; BSR set to: 0
  9576  001FC2  4B6F               	infsnz	GetEventNumber@i& (0+255),f,b
  9577  001FC4  2B70               	incf	(GetEventNumber@i+1)& (0+255),f,b
  9578                           
  9579                           ; BSR set to: 0
  9580  001FC6  5170               	movf	(GetEventNumber@i+1)& (0+255),w,b
  9581  001FC8  E103               	bnz	u3820
  9582  001FCA  0E18               	movlw	24
  9583  001FCC  5D6F               	subwf	GetEventNumber@i& (0+255),w,b
  9584  001FCE  E3AC               	bnc	l4061
  9585  001FD0                     u3820:
  9586                           
  9587                           ; BSR set to: 0
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;funcs.c: 209: }
  9591                           ;funcs.c: 210: }
  9592                           ;funcs.c: 211: }
  9593                           ;funcs.c: 212: }
  9594                           ;funcs.c: 213: return -1;
  9595  001FD0  0CFF               	retlw	255	;funcret
  9596  001FD2                     __end_of_GetEventNumber:
  9597                           	opt stack 0
  9598  001FD2                     PL12:
  9599                           	opt stack 20
  9600  001FD2  C06F  F060         	movff	GetEventNumber@i,___wmul@multiplier
  9601  001FD6  C070  F061         	movff	GetEventNumber@i+1,___wmul@multiplier+1
  9602  001FDA  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9603  001FDC  0E0A               	movlw	10
  9604  001FDE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9605  001FE0  0C0A               	retlw	10
  9606  001FE2                     __end_ofPL12:
  9607                           	opt stack 0
  9608  001FE2                     PL26:
  9609                           	opt stack 20
  9610  001FE2  0E02               	movlw	high _EVENTS
  9611  001FE4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9612  001FE6  6EDA               	movwf	fsr2h,c
  9613  001FE8  51B9               	movf	_DATE_TIME& (0+255),w,b
  9614  001FEA  5CDE               	subwf	postinc2,w,c
  9615  001FEC  51BA               	movf	(_DATE_TIME+1)& (0+255),w,b
  9616  001FEE  58DE               	subwfb	postinc2,w,c
  9617  001FF0  51BB               	movf	(_DATE_TIME+2)& (0+255),w,b
  9618  001FF2  58DE               	subwfb	postinc2,w,c
  9619  001FF4  50DE               	movf	postinc2,w,c
  9620  001FF6  0A80               	xorlw	128
  9621  001FF8  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
  9622  001FFA  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
  9623  001FFC  0A80               	xorlw	128
  9624  001FFE  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
  9625  002000  0012               	return	
  9626  002002                     __end_ofPL26:
  9627                           	opt stack 0
  9628  002002                     PL58:
  9629                           	opt stack 19
  9630  002002  0E04               	movlw	low (_EVENTS+4)
  9631  002004  2560               	addwf	?___wmul& (0+255),w,b
  9632  002006  6ED9               	movwf	fsr2l,c
  9633  002008  0E02               	movlw	high (_EVENTS+4)
  9634  00200A  0012               	return	
  9635  00200C                     __end_ofPL58:
  9636                           	opt stack 0
  9637  00200C                     PL62:
  9638                           	opt stack 19
  9639  00200C  0E00               	movlw	low _EVENTS
  9640  00200E  2560               	addwf	?___wmul& (0+255),w,b
  9641  002010  6ED9               	movwf	fsr2l,c
  9642  002012  0012               	return	
  9643  002014                     __end_ofPL62:
  9644                           	opt stack 0
  9645  002014                     PL84:
  9646                           	opt stack 19
  9647  002014  0E09               	movlw	low (_EVENTS+9)
  9648  002016  2560               	addwf	?___wmul& (0+255),w,b
  9649  002018  6ED9               	movwf	fsr2l,c
  9650  00201A  0E02               	movlw	high (_EVENTS+9)
  9651  00201C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9652  00201E  6EDA               	movwf	fsr2h,c
  9653  002020  0012               	return	
  9654  002022                     __end_ofPL84:
  9655                           	opt stack 0
  9656                           tosu	equ	0xFFF
  9657                           tosh	equ	0xFFE
  9658                           tosl	equ	0xFFD
  9659                           pclath	equ	0xFFA
  9660                           tblptru	equ	0xFF8
  9661                           tblptrh	equ	0xFF7
  9662                           tblptrl	equ	0xFF6
  9663                           tablat	equ	0xFF5
  9664                           prodh	equ	0xFF4
  9665                           prodl	equ	0xFF3
  9666                           intcon	equ	0xFF2
  9667                           postinc0	equ	0xFEE
  9668                           plusw0	equ	0xFEB
  9669                           wreg	equ	0xFE8
  9670                           indf1	equ	0xFE7
  9671                           postinc1	equ	0xFE6
  9672                           postdec1	equ	0xFE5
  9673                           plusw1	equ	0xFE3
  9674                           fsr1h	equ	0xFE2
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           plusw2	equ	0xFDB
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function ___wmul *****************
  9685 ;; Defined at:
  9686 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9689 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  product         2    4[BANK0 ] unsigned int 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  2    0[BANK0 ] unsigned int 
  9694 ;; Registers used:
  9695 ;;		wreg, status,2, status,0, prodl, prodh
  9696 ;; Tracked objects:
  9697 ;;		On entry : 3F/0
  9698 ;;		On exit  : 3F/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9701 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9704 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9705 ;;Total ram usage:        6 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    9
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		_LoadSettingsFromEeprom
  9712 ;;		_LoadEventsFromEeprom
  9713 ;;		_LoadStatesFromEeprom
  9714 ;;		_LoadCyclesFromEeprom
  9715 ;;		_AdjustDayLightSaving
  9716 ;;		_GetEventNumber
  9717 ;; This function uses a non-reentrant model
  9718 ;;
  9719                           
  9720                           	psect	text43
  9721  002DD2                     __ptext43:
  9722                           	opt stack 0
  9723  002DD2                     ___wmul:
  9724                           	opt stack 18
  9725                           
  9726                           ; BSR set to: 0
  9727                           
  9728                           ; BSR set to: 0
  9729                           ;incstack = 0
  9730  002DD2  5160               	movf	___wmul@multiplier& (0+255),w,b
  9731  002DD4  0362               	mulwf	___wmul@multiplicand& (0+255),b
  9732  002DD6  CFF3 F064          	movff	prodl,___wmul@product
  9733  002DDA  CFF4 F065          	movff	prodh,___wmul@product+1
  9734  002DDE  5160               	movf	___wmul@multiplier& (0+255),w,b
  9735  002DE0  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9736  002DE2  50F3               	movf	prodl,w,c
  9737  002DE4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  9738  002DE6  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9739  002DE8  0362               	mulwf	___wmul@multiplicand& (0+255),b
  9740  002DEA  50F3               	movf	prodl,w,c
  9741  002DEC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  9742                           
  9743                           ; BSR set to: 0
  9744  002DEE  C064  F060         	movff	___wmul@product,?___wmul
  9745  002DF2  C065  F061         	movff	___wmul@product+1,?___wmul+1
  9746                           
  9747                           ; BSR set to: 0
  9748  002DF6  0012               	return		;funcret
  9749  002DF8                     __end_of___wmul:
  9750                           	opt stack 0
  9751                           tosu	equ	0xFFF
  9752                           tosh	equ	0xFFE
  9753                           tosl	equ	0xFFD
  9754                           pclath	equ	0xFFA
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           prodh	equ	0xFF4
  9760                           prodl	equ	0xFF3
  9761                           intcon	equ	0xFF2
  9762                           postinc0	equ	0xFEE
  9763                           plusw0	equ	0xFEB
  9764                           wreg	equ	0xFE8
  9765                           indf1	equ	0xFE7
  9766                           postinc1	equ	0xFE6
  9767                           postdec1	equ	0xFE5
  9768                           plusw1	equ	0xFE3
  9769                           fsr1h	equ	0xFE2
  9770                           fsr1l	equ	0xFE1
  9771                           indf2	equ	0xFDF
  9772                           postinc2	equ	0xFDE
  9773                           postdec2	equ	0xFDD
  9774                           plusw2	equ	0xFDB
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _INTERRUPT_InterruptManager *****************
  9780 ;; Defined at:
  9781 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;		None
  9786 ;; Return value:  Size  Location     Type
  9787 ;;                  1    wreg      void 
  9788 ;; Registers used:
  9789 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9790 ;; Tracked objects:
  9791 ;;		On entry : 0/0
  9792 ;;		On exit  : 0/0
  9793 ;;		Unchanged: 0/0
  9794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9797 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9798 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9799 ;;Total ram usage:       10 bytes
  9800 ;; Hardware stack levels used:    1
  9801 ;; Hardware stack levels required when called:    8
  9802 ;; This function calls:
  9803 ;;		_TMR0_ISR
  9804 ;; This function is called by:
  9805 ;;		Interrupt level 2
  9806 ;; This function uses a non-reentrant model
  9807 ;;
  9808                           
  9809                           	psect	intcode
  9810  000008                     __pintcode:
  9811                           	opt stack 0
  9812  000008                     _INTERRUPT_InterruptManager:
  9813                           	opt stack 15
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;incstack = 0
  9817  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9818  00000A  CFFA F041          	movff	pclath,??_INTERRUPT_InterruptManager
  9819  00000E  CFFB F042          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9820  000012  CFE9 F043          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9821  000016  CFEA F044          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9822  00001A  CFE1 F045          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9823  00001E  CFE2 F046          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9824  000022  CFD9 F047          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9825  000026  CFDA F048          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9826  00002A  CFF3 F049          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9827  00002E  CFF4 F04A          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9828                           
  9829                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  9830  000032  010E               	movlb	14	; () banked
  9831  000034  BBC2               	btfsc	194,5,b	;volatile
  9832                           
  9833                           ; BSR set to: 14
  9834  000036  ABCA               	btfss	202,5,b	;volatile
  9835  000038  D002               	goto	i2l748
  9836                           
  9837                           ; BSR set to: 14
  9838                           ;interrupt_manager.c: 61: {
  9839                           ;interrupt_manager.c: 62: TMR0_ISR();
  9840  00003A  EC64  F017         	call	_TMR0_ISR	;wreg free
  9841  00003E                     i2l748:
  9842  00003E  C04A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9843  000042  C049  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9844  000046  C048  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9845  00004A  C047  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9846  00004E  C046  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9847  000052  C045  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9848  000056  C044  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9849  00005A  C043  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9850  00005E  C042  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9851  000062  C041  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9852  000066  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9853  000068  0011               	retfie		f
  9854  00006A                     __end_of_INTERRUPT_InterruptManager:
  9855                           	opt stack 0
  9856                           tosu	equ	0xFFF
  9857                           tosh	equ	0xFFE
  9858                           tosl	equ	0xFFD
  9859                           pclatu	equ	0xFFB
  9860                           pclath	equ	0xFFA
  9861                           tblptru	equ	0xFF8
  9862                           tblptrh	equ	0xFF7
  9863                           tblptrl	equ	0xFF6
  9864                           tablat	equ	0xFF5
  9865                           prodh	equ	0xFF4
  9866                           prodl	equ	0xFF3
  9867                           intcon	equ	0xFF2
  9868                           postinc0	equ	0xFEE
  9869                           plusw0	equ	0xFEB
  9870                           fsr0h	equ	0xFEA
  9871                           fsr0l	equ	0xFE9
  9872                           wreg	equ	0xFE8
  9873                           indf1	equ	0xFE7
  9874                           postinc1	equ	0xFE6
  9875                           postdec1	equ	0xFE5
  9876                           plusw1	equ	0xFE3
  9877                           fsr1h	equ	0xFE2
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           postdec2	equ	0xFDD
  9882                           plusw2	equ	0xFDB
  9883                           fsr2h	equ	0xFDA
  9884                           fsr2l	equ	0xFD9
  9885                           status	equ	0xFD8
  9886                           
  9887 ;; *************** function _TMR0_ISR *****************
  9888 ;; Defined at:
  9889 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;		None
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;		None
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  1    wreg      void 
  9896 ;; Registers used:
  9897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9898 ;; Tracked objects:
  9899 ;;		On entry : 3F/E
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9907 ;;Total ram usage:        0 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:    7
  9910 ;; This function calls:
  9911 ;;		_TMR0_CallBack
  9912 ;; This function is called by:
  9913 ;;		_INTERRUPT_InterruptManager
  9914 ;; This function uses a non-reentrant model
  9915 ;;
  9916                           
  9917                           	psect	text45
  9918  002EC8                     __ptext45:
  9919                           	opt stack 0
  9920  002EC8                     _TMR0_ISR:
  9921                           	opt stack 15
  9922                           
  9923                           ; BSR set to: 14
  9924                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
  9925                           
  9926                           ;incstack = 0
  9927  002EC8  9BCA               	bcf	202,5,b	;volatile
  9928                           
  9929                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
  9930  002ECA  C04C  FFD4         	movff	_timer0ReloadVal16bit+1,4052	;volatile
  9931                           
  9932                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
  9933  002ECE  C04B  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
  9934                           
  9935                           ; BSR set to: 14
  9936                           ;tmr0.c: 146: TMR0_CallBack();
  9937  002ED2  EFFC  F016         	goto	_TMR0_CallBack	;wreg free
  9938  002ED6                     __end_of_TMR0_ISR:
  9939                           	opt stack 0
  9940                           tosu	equ	0xFFF
  9941                           tosh	equ	0xFFE
  9942                           tosl	equ	0xFFD
  9943                           pclatu	equ	0xFFB
  9944                           pclath	equ	0xFFA
  9945                           tblptru	equ	0xFF8
  9946                           tblptrh	equ	0xFF7
  9947                           tblptrl	equ	0xFF6
  9948                           tablat	equ	0xFF5
  9949                           prodh	equ	0xFF4
  9950                           prodl	equ	0xFF3
  9951                           intcon	equ	0xFF2
  9952                           postinc0	equ	0xFEE
  9953                           plusw0	equ	0xFEB
  9954                           fsr0h	equ	0xFEA
  9955                           fsr0l	equ	0xFE9
  9956                           wreg	equ	0xFE8
  9957                           indf1	equ	0xFE7
  9958                           postinc1	equ	0xFE6
  9959                           postdec1	equ	0xFE5
  9960                           plusw1	equ	0xFE3
  9961                           fsr1h	equ	0xFE2
  9962                           fsr1l	equ	0xFE1
  9963                           indf2	equ	0xFDF
  9964                           postinc2	equ	0xFDE
  9965                           postdec2	equ	0xFDD
  9966                           plusw2	equ	0xFDB
  9967                           fsr2h	equ	0xFDA
  9968                           fsr2l	equ	0xFD9
  9969                           status	equ	0xFD8
  9970                           
  9971 ;; *************** function _TMR0_CallBack *****************
  9972 ;; Defined at:
  9973 ;;		line 151 in file "mcc_generated_files/tmr0.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;		None
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;		None
  9978 ;; Return value:  Size  Location     Type
  9979 ;;                  1    wreg      void 
  9980 ;; Registers used:
  9981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9982 ;; Tracked objects:
  9983 ;;		On entry : 3F/E
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9991 ;;Total ram usage:        0 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    6
  9994 ;; This function calls:
  9995 ;;		Absolute function
  9996 ;;		_TMR0_DefaultInterruptHandler
  9997 ;;		_Timer0_10ms
  9998 ;; This function is called by:
  9999 ;;		_TMR0_ISR
 10000 ;; This function uses a non-reentrant model
 10001 ;;
 10002                           
 10003                           	psect	text46
 10004  002DF8                     __ptext46:
 10005                           	opt stack 0
 10006  002DF8                     _TMR0_CallBack:
 10007                           	opt stack 15
 10008                           
 10009                           ; BSR set to: 14
 10010                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 10011                           
 10012                           ;incstack = 0
 10013  002DF8  0100               	movlb	0	; () banked
 10014  002DFA  51DC               	movf	_TMR0_InterruptHandler& (0+255),w,b
 10015  002DFC  11DD               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 10016  002DFE  B4D8               	btfsc	status,2,c
 10017  002E00  0012               	return	
 10018                           
 10019                           ; BSR set to: 0
 10020                           ;tmr0.c: 156: {
 10021                           ;tmr0.c: 157: TMR0_InterruptHandler();
 10022  002E02  0005               	push	
 10023  002E04  6EFA               	movwf	pclath,c
 10024  002E06  51DC               	movf	_TMR0_InterruptHandler& (0+255),w,b
 10025  002E08  6EFD               	movwf	tosl,c
 10026  002E0A  51DD               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 10027  002E0C  6EFE               	movwf	tosh,c
 10028  002E0E  6AFF               	clrf	tosu,c
 10029  002E10  50FA               	movf	pclath,w,c
 10030  002E12  0012               	return		;indir
 10031  002E14                     __end_of_TMR0_CallBack:
 10032                           	opt stack 0
 10033                           tosu	equ	0xFFF
 10034                           tosh	equ	0xFFE
 10035                           tosl	equ	0xFFD
 10036                           pclatu	equ	0xFFB
 10037                           pclath	equ	0xFFA
 10038                           tblptru	equ	0xFF8
 10039                           tblptrh	equ	0xFF7
 10040                           tblptrl	equ	0xFF6
 10041                           tablat	equ	0xFF5
 10042                           prodh	equ	0xFF4
 10043                           prodl	equ	0xFF3
 10044                           intcon	equ	0xFF2
 10045                           postinc0	equ	0xFEE
 10046                           plusw0	equ	0xFEB
 10047                           fsr0h	equ	0xFEA
 10048                           fsr0l	equ	0xFE9
 10049                           wreg	equ	0xFE8
 10050                           indf1	equ	0xFE7
 10051                           postinc1	equ	0xFE6
 10052                           postdec1	equ	0xFE5
 10053                           plusw1	equ	0xFE3
 10054                           fsr1h	equ	0xFE2
 10055                           fsr1l	equ	0xFE1
 10056                           indf2	equ	0xFDF
 10057                           postinc2	equ	0xFDE
 10058                           postdec2	equ	0xFDD
 10059                           plusw2	equ	0xFDB
 10060                           fsr2h	equ	0xFDA
 10061                           fsr2l	equ	0xFD9
 10062                           status	equ	0xFD8
 10063                           
 10064 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 10065 ;; Defined at:
 10066 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;		None
 10069 ;; Auto vars:     Size  Location     Type
 10070 ;;		None
 10071 ;; Return value:  Size  Location     Type
 10072 ;;                  1    wreg      void 
 10073 ;; Registers used:
 10074 ;;		None
 10075 ;; Tracked objects:
 10076 ;;		On entry : 3F/0
 10077 ;;		On exit  : 3F/0
 10078 ;;		Unchanged: 3F/0
 10079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10084 ;;Total ram usage:        0 bytes
 10085 ;; Hardware stack levels used:    1
 10086 ;; This function calls:
 10087 ;;		Nothing
 10088 ;; This function is called by:
 10089 ;;		_TMR0_Initialize
 10090 ;;		_TMR0_CallBack
 10091 ;; This function uses a non-reentrant model
 10092 ;;
 10093                           
 10094                           	psect	text47
 10095  002EF8                     __ptext47:
 10096                           	opt stack 0
 10097  002EF8                     _TMR0_DefaultInterruptHandler:
 10098                           	opt stack 20
 10099                           
 10100                           ; BSR set to: 0
 10101                           
 10102                           ;incstack = 0
 10103  002EF8  0012               	return		;funcret
 10104  002EFA                     __end_of_TMR0_DefaultInterruptHandler:
 10105                           	opt stack 0
 10106                           tosu	equ	0xFFF
 10107                           tosh	equ	0xFFE
 10108                           tosl	equ	0xFFD
 10109                           pclatu	equ	0xFFB
 10110                           pclath	equ	0xFFA
 10111                           tblptru	equ	0xFF8
 10112                           tblptrh	equ	0xFF7
 10113                           tblptrl	equ	0xFF6
 10114                           tablat	equ	0xFF5
 10115                           prodh	equ	0xFF4
 10116                           prodl	equ	0xFF3
 10117                           intcon	equ	0xFF2
 10118                           postinc0	equ	0xFEE
 10119                           plusw0	equ	0xFEB
 10120                           fsr0h	equ	0xFEA
 10121                           fsr0l	equ	0xFE9
 10122                           wreg	equ	0xFE8
 10123                           indf1	equ	0xFE7
 10124                           postinc1	equ	0xFE6
 10125                           postdec1	equ	0xFE5
 10126                           plusw1	equ	0xFE3
 10127                           fsr1h	equ	0xFE2
 10128                           fsr1l	equ	0xFE1
 10129                           indf2	equ	0xFDF
 10130                           postinc2	equ	0xFDE
 10131                           postdec2	equ	0xFDD
 10132                           plusw2	equ	0xFDB
 10133                           fsr2h	equ	0xFDA
 10134                           fsr2l	equ	0xFD9
 10135                           status	equ	0xFD8
 10136                           
 10137 ;; *************** function _Timer0_10ms *****************
 10138 ;; Defined at:
 10139 ;;		line 3 in file "libs/projMain.c"
 10140 ;; Parameters:    Size  Location     Type
 10141 ;;		None
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  i               1   62[COMRAM] unsigned char 
 10144 ;;  i               1   63[COMRAM] unsigned char 
 10145 ;;  ThisCycle       1   57[COMRAM] unsigned char 
 10146 ;;  i               1   61[COMRAM] unsigned char 
 10147 ;;  i               1   60[COMRAM] unsigned char 
 10148 ;;  OutForThePor    2   58[COMRAM] unsigned char [2]
 10149 ;; Return value:  Size  Location     Type
 10150 ;;                  1    wreg      void 
 10151 ;; Registers used:
 10152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10153 ;; Tracked objects:
 10154 ;;		On entry : 3F/0
 10155 ;;		On exit  : 0/0
 10156 ;;		Unchanged: 0/0
 10157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10159 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10160 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10161 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10162 ;;Total ram usage:       12 bytes
 10163 ;; Hardware stack levels used:    1
 10164 ;; Hardware stack levels required when called:    5
 10165 ;; This function calls:
 10166 ;;		_IncreaseByASecond
 10167 ;; This function is called by:
 10168 ;;		_main
 10169 ;;		_TMR0_CallBack
 10170 ;; This function uses a non-reentrant model
 10171 ;;
 10172                           
 10173                           	psect	text48
 10174  00130A                     __ptext48:
 10175                           	opt stack 0
 10176  00130A                     _Timer0_10ms:
 10177                           	opt stack 15
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;projMain.c: 4: if (FLAGS_1.bits.b0) {
 10181                           
 10182                           ; BSR set to: 0
 10183                           ;incstack = 0
 10184  00130A  A1E0               	btfss	_FLAGS_1& (0+255),0,b
 10185  00130C  D004               	goto	i2l1100
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;projMain.c: 5: PRESENT_STATE = NEXT_STATE;
 10189  00130E  C053  F054         	movff	_NEXT_STATE,_PRESENT_STATE
 10190                           
 10191                           ;projMain.c: 6: STATE_SECONDS = 0;
 10192  001312  6A52               	clrf	_STATE_SECONDS,c
 10193                           
 10194                           ;projMain.c: 7: FLAGS_1.bits.b0 = RESET;
 10195  001314  91E0               	bcf	_FLAGS_1& (0+255),0,b
 10196  001316                     i2l1100:
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;projMain.c: 8: }
 10200                           ;projMain.c: 9: UINT8 OutForThePorts[2];
 10201                           ;projMain.c: 10: for (UINT8 i =0; i<2; i++) {
 10202  001316  6A3D               	clrf	Timer0_10ms@i,c
 10203  001318                     i2l3463:
 10204                           
 10205                           ; BSR set to: 0
 10206                           ;projMain.c: 11: OutForThePorts[i] = STATES[PRESENT_STATE].ON[i];
 10207  001318  5054               	movf	_PRESENT_STATE,w,c
 10208  00131A  0D06               	mullw	6
 10209  00131C  0EEF               	movlw	low _STATES
 10210  00131E  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10211  001320  0E06               	movlw	high _STATES
 10212  001322  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 10213  001324  2A35               	incf	??_Timer0_10ms,f,c
 10214  001326  0E00               	movlw	0
 10215  001328  2236               	addwfc	??_Timer0_10ms+1,f,c
 10216  00132A  50F3               	movf	prodl,w,c
 10217  00132C  2635               	addwf	??_Timer0_10ms,f,c
 10218  00132E  50F4               	movf	prodh,w,c
 10219  001330  2236               	addwfc	??_Timer0_10ms+1,f,c
 10220  001332  503D               	movf	Timer0_10ms@i,w,c
 10221  001334  2435               	addwf	??_Timer0_10ms,w,c
 10222  001336  6ED9               	movwf	fsr2l,c
 10223  001338  0E00               	movlw	0
 10224  00133A  2036               	addwfc	??_Timer0_10ms+1,w,c
 10225  00133C  6EDA               	movwf	fsr2h,c
 10226  00133E  503D               	movf	Timer0_10ms@i,w,c
 10227  001340  0F3B               	addlw	low Timer0_10ms@OutForThePorts
 10228  001342  6EE1               	movwf	fsr1l,c
 10229  001344  6AE2               	clrf	fsr1h,c
 10230  001346  CFDF FFE7          	movff	indf2,indf1
 10231                           
 10232                           ; BSR set to: 0
 10233  00134A  2A3D               	incf	Timer0_10ms@i,f,c
 10234                           
 10235                           ; BSR set to: 0
 10236  00134C  0E01               	movlw	1
 10237  00134E  643D               	cpfsgt	Timer0_10ms@i,c
 10238  001350  D7E3               	goto	i2l3463
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;projMain.c: 12: }
 10242                           ;projMain.c: 13: if (STATE_SECONDS_REMAINING <= BLINK_LAST_X_SECONDS) {
 10243  001352  5051               	movf	_STATE_SECONDS_REMAINING,w,c
 10244  001354  5C5A               	subwf	_BLINK_LAST_X_SECONDS,w,c
 10245  001356  E30F               	bnc	i2l1103
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;projMain.c: 14: if (BLINK_STATE_ON_OFF_COUNTER < BLINK_ON_TIME) {
 10249  001358  505C               	movf	_BLINK_ON_TIME,w,c
 10250  00135A  5C4F               	subwf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 10251  00135C  E217               	bc	i2l1107
 10252                           
 10253                           ; BSR set to: 0
 10254                           ;projMain.c: 15: for (UINT8 i =0; i<2; i++)
 10255  00135E  6A3F               	clrf	Timer0_10ms@i_2888,c
 10256  001360                     i2l3479:
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;projMain.c: 16: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 10260  001360  503F               	movf	Timer0_10ms@i_2888,w,c
 10261  001362  D8BE               	call	PL22	;call to abstracted procedure
 10262  001364  503F               	movf	Timer0_10ms@i_2888,w,c
 10263  001366  D8E2               	call	PL78	;call to abstracted procedure
 10264  001368  503F               	movf	Timer0_10ms@i_2888,w,c
 10265  00136A  D8E8               	call	PL86	;call to abstracted procedure
 10266                           
 10267                           ; BSR set to: 0
 10268  00136C  2A3F               	incf	Timer0_10ms@i_2888,f,c
 10269                           
 10270                           ; BSR set to: 0
 10271  00136E  0E01               	movlw	1
 10272  001370  643F               	cpfsgt	Timer0_10ms@i_2888,c
 10273  001372  D7F6               	goto	i2l3479
 10274  001374  D00B               	goto	i2l1107
 10275  001376                     i2l1103:
 10276                           
 10277                           ; BSR set to: 0
 10278                           ;projMain.c: 19: for (UINT8 i =0; i<2; i++)
 10279  001376  6A40               	clrf	Timer0_10ms@i_2889,c
 10280  001378                     i2l3489:
 10281                           
 10282                           ; BSR set to: 0
 10283                           ;projMain.c: 20: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 10284  001378  5040               	movf	Timer0_10ms@i_2889,w,c
 10285  00137A  D8B2               	call	PL22	;call to abstracted procedure
 10286  00137C  5040               	movf	Timer0_10ms@i_2889,w,c
 10287  00137E  D8D6               	call	PL78	;call to abstracted procedure
 10288  001380  5040               	movf	Timer0_10ms@i_2889,w,c
 10289  001382  D8DC               	call	PL86	;call to abstracted procedure
 10290                           
 10291                           ; BSR set to: 0
 10292  001384  2A40               	incf	Timer0_10ms@i_2889,f,c
 10293                           
 10294                           ; BSR set to: 0
 10295  001386  0E01               	movlw	1
 10296  001388  6440               	cpfsgt	Timer0_10ms@i_2889,c
 10297  00138A  D7F6               	goto	i2l3489
 10298  00138C                     i2l1107:
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;projMain.c: 21: }
 10302                           ;projMain.c: 22: for (UINT8 i =0; i<2; i++) {
 10303  00138C  6A3E               	clrf	Timer0_10ms@i_2890,c
 10304  00138E                     i2l3499:
 10305                           
 10306                           ; BSR set to: 0
 10307                           ;projMain.c: 23: *(LIGHTS[i]) = OutForThePorts[i];
 10308  00138E  503E               	movf	Timer0_10ms@i_2890,w,c
 10309  001390  0F3B               	addlw	low Timer0_10ms@OutForThePorts
 10310  001392  6ED9               	movwf	fsr2l,c
 10311  001394  6ADA               	clrf	fsr2h,c
 10312  001396  503E               	movf	Timer0_10ms@i_2890,w,c
 10313  001398  0D02               	mullw	2
 10314  00139A  50F3               	movf	prodl,w,c
 10315  00139C  0FF2               	addlw	low _LIGHTS
 10316  00139E  6EE1               	movwf	fsr1l,c
 10317  0013A0  6AE2               	clrf	fsr1h,c
 10318  0013A2  CFE6 F035          	movff	postinc1,??_Timer0_10ms
 10319  0013A6  CFE5 F036          	movff	postdec1,??_Timer0_10ms+1
 10320  0013AA  C035  FFE1         	movff	??_Timer0_10ms,fsr1l
 10321  0013AE  C036  FFE2         	movff	??_Timer0_10ms+1,fsr1h
 10322  0013B2  CFDF FFE7          	movff	indf2,indf1
 10323                           
 10324                           ; BSR set to: 0
 10325  0013B6  2A3E               	incf	Timer0_10ms@i_2890,f,c
 10326                           
 10327                           ; BSR set to: 0
 10328  0013B8  0E01               	movlw	1
 10329  0013BA  643E               	cpfsgt	Timer0_10ms@i_2890,c
 10330  0013BC  D7E8               	goto	i2l3499
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;projMain.c: 24: }
 10334                           ;projMain.c: 25: if ((STATES[PRESENT_STATE].AUDIO == AUDIO_NORMAL)
 10335                           ;projMain.c: 26: || ((STATES[PRESENT_STATE].AUDIO == AUDIO_SPECIAL)
 10336                           ;projMain.c: 27: && (STATE_SECONDS_REMAINING <= SPECIAL_AUDIO_LAST_X_SECONDS))) {
 10337  0013BE  D8A2               	call	PL28	;call to abstracted procedure
 10338  0013C0  04DE               	decf	postinc2,w,c
 10339  0013C2  E007               	bz	i2l3511
 10340                           
 10341                           ; BSR set to: 0
 10342  0013C4  D89F               	call	PL28	;call to abstracted procedure
 10343  0013C6  0E02               	movlw	2
 10344  0013C8  18DE               	xorwf	postinc2,w,c
 10345  0013CA  E106               	bnz	i2l3515
 10346                           
 10347                           ; BSR set to: 0
 10348  0013CC  5051               	movf	_STATE_SECONDS_REMAINING,w,c
 10349  0013CE  5C55               	subwf	_SPECIAL_AUDIO_LAST_X_SECONDS,w,c
 10350  0013D0  E303               	bnc	i2l3515
 10351  0013D2                     i2l3511:
 10352                           
 10353                           ; BSR set to: 0
 10354                           ;projMain.c: 28: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_NORMAL_ON_TIME)
 10355  0013D2  5059               	movf	_AUDIO_NORMAL_ON_TIME,w,c
 10356  0013D4  5C4E               	subwf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10357  0013D6  D006               	goto	L7
 10358  0013D8                     i2l3515:
 10359                           
 10360                           ; BSR set to: 0
 10361  0013D8  D895               	call	PL28	;call to abstracted procedure
 10362  0013DA  0E02               	movlw	2
 10363  0013DC  18DE               	xorwf	postinc2,w,c
 10364  0013DE  E105               	bnz	i2l1118
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;projMain.c: 33: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_SPECIAL_ON_TIME)
 10368  0013E0  5057               	movf	_AUDIO_SPECIAL_ON_TIME,w,c
 10369  0013E2  5C4D               	subwf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10370  0013E4                     L7:
 10371  0013E4  E202               	bc	i2l1118
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;projMain.c: 34: LATCbits.LC0 = ON;
 10375  0013E6  8085               	bsf	3973,0,c	;volatile
 10376  0013E8  D001               	goto	i2l3521
 10377  0013EA                     i2l1118:
 10378                           
 10379                           ; BSR set to: 0
 10380                           ;projMain.c: 38: LATCbits.LC0 = OFF;
 10381  0013EA  9085               	bcf	3973,0,c	;volatile
 10382  0013EC                     i2l3521:
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;projMain.c: 39: CENTI_SECOND_COUNT++;
 10386  0013EC  2A50               	incf	_CENTI_SECOND_COUNT,f,c
 10387                           
 10388                           ;projMain.c: 40: BLINK_STATE_ON_OFF_COUNTER++;
 10389  0013EE  2A4F               	incf	_BLINK_STATE_ON_OFF_COUNTER,f,c
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;projMain.c: 41: if (BLINK_STATE_ON_OFF_COUNTER >= (BLINK_ON_TIME + BLINK_OFF_TIME))
 10393  0013F0  505B               	movf	_BLINK_OFF_TIME,w,c
 10394  0013F2  C05C  F035         	movff	_BLINK_ON_TIME,??_Timer0_10ms
 10395  0013F6  D8A9               	call	PL88	;call to abstracted procedure
 10396  0013F8  504F               	movf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 10397  0013FA  D867               	call	PL20	;call to abstracted procedure
 10398  0013FC  E301               	bnc	i2l3527
 10399                           
 10400                           ; BSR set to: 0
 10401                           ;projMain.c: 42: BLINK_STATE_ON_OFF_COUNTER=0;
 10402  0013FE  6A4F               	clrf	_BLINK_STATE_ON_OFF_COUNTER,c
 10403  001400                     i2l3527:
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;projMain.c: 43: NORMAL_AUDIO_STATE_ON_OFF_COUNTER++;
 10407  001400  2A4E               	incf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;projMain.c: 44: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_NORMAL_ON_TIME + AUDIO_
      +                          NORMAL_OFF_TIME))
 10411  001402  5058               	movf	_AUDIO_NORMAL_OFF_TIME,w,c
 10412  001404  C059  F035         	movff	_AUDIO_NORMAL_ON_TIME,??_Timer0_10ms
 10413  001408  D8A0               	call	PL88	;call to abstracted procedure
 10414  00140A  504E               	movf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10415  00140C  D85E               	call	PL20	;call to abstracted procedure
 10416  00140E  E301               	bnc	i2l3533
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;projMain.c: 45: NORMAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 10420  001410  6A4E               	clrf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,c
 10421  001412                     i2l3533:
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;projMain.c: 46: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER++;
 10425  001412  2A4D               	incf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;projMain.c: 47: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_SPECIAL_ON_TIME + AUDI
      +                          O_SPECIAL_OFF_TIME))
 10429  001414  5056               	movf	_AUDIO_SPECIAL_OFF_TIME,w,c
 10430  001416  C057  F035         	movff	_AUDIO_SPECIAL_ON_TIME,??_Timer0_10ms
 10431  00141A  D897               	call	PL88	;call to abstracted procedure
 10432  00141C  504D               	movf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10433  00141E  D855               	call	PL20	;call to abstracted procedure
 10434  001420  E301               	bnc	i2l3539
 10435                           
 10436                           ; BSR set to: 0
 10437                           ;projMain.c: 48: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 10438  001422  6A4D               	clrf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,c
 10439  001424                     i2l3539:
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;projMain.c: 51: if (CENTI_SECOND_COUNT == 99) {
 10443  001424  0E63               	movlw	99
 10444  001426  1850               	xorwf	_CENTI_SECOND_COUNT,w,c
 10445  001428  E127               	bnz	i2l3553
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;projMain.c: 52: CENTI_SECOND_COUNT = 0;
 10449  00142A  6A50               	clrf	_CENTI_SECOND_COUNT,c
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;projMain.c: 53: DATE_TIME = IncreaseByASecond(DATE_TIME);
 10453  00142C  EE20  F0B9         	lfsr	2,_DATE_TIME
 10454  001430  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
 10455  001434  0E0A               	movlw	10
 10456  001436                     i2u327_41:
 10457  001436  CFDB FFEB          	movff	plusw2,plusw0
 10458  00143A  06E8               	decf	wreg,f,c
 10459  00143C  E2FC               	bc	i2u327_41
 10460  00143E  EC06  F015         	call	_IncreaseByASecond	;wreg free
 10461  001442  EE20  F0B9         	lfsr	2,_DATE_TIME
 10462  001446  0E0A               	movlw	10
 10463  001448                     i2u328_41:
 10464  001448  CFEB FFDB          	movff	plusw0,plusw2
 10465  00144C  06E8               	decf	wreg,f,c
 10466  00144E  E2FC               	bc	i2u328_41
 10467                           
 10468                           ;projMain.c: 54: STATE_SECONDS++;
 10469  001450  2A52               	incf	_STATE_SECONDS,f,c
 10470                           
 10471                           ;projMain.c: 55: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD - STATE_SECONDS-
      +                          1;
 10472  001452  5054               	movf	_PRESENT_STATE,w,c
 10473  001454  0D06               	mullw	6
 10474  001456  0EEF               	movlw	low _STATES
 10475  001458  24F3               	addwf	prodl,w,c
 10476  00145A  6ED9               	movwf	fsr2l,c
 10477  00145C  0E06               	movlw	high _STATES
 10478  00145E  20F4               	addwfc	prodh,w,c
 10479  001460  6EDA               	movwf	fsr2h,c
 10480  001462  50DF               	movf	indf2,w,c
 10481  001464  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10482  001466  5052               	movf	_STATE_SECONDS,w,c
 10483  001468  5C35               	subwf	??_Timer0_10ms,w,c
 10484  00146A  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 10485  00146C  0436               	decf	??_Timer0_10ms+1,w,c
 10486  00146E  6E51               	movwf	_STATE_SECONDS_REMAINING,c
 10487                           
 10488                           ;projMain.c: 56: if (STATE_SECONDS_REMAINING == 0)
 10489  001470  5051               	movf	_STATE_SECONDS_REMAINING,w,c
 10490  001472  E102               	bnz	i2l3553
 10491                           
 10492                           ;projMain.c: 57: FLAGS_1.bits.b0 = SET;
 10493  001474  0100               	movlb	0	; () banked
 10494  001476  81E0               	bsf	_FLAGS_1& (0+255),0,b
 10495  001478                     i2l3553:
 10496                           
 10497                           ;projMain.c: 58: }
 10498                           ;projMain.c: 59: if (CENTI_SECOND_COUNT == 90) {
 10499  001478  0E5A               	movlw	90
 10500  00147A  1850               	xorwf	_CENTI_SECOND_COUNT,w,c
 10501  00147C  A4D8               	btfss	status,2,c
 10502  00147E  0012               	return	
 10503                           
 10504                           ;projMain.c: 61: if (PRESENT_EVENT <0)
 10505  001480  AE5E               	btfss	_PRESENT_EVENT,7,c
 10506  001482  D002               	goto	i2l3561
 10507                           
 10508                           ;projMain.c: 62: ThisCycle = 0;
 10509  001484  6A3A               	clrf	Timer0_10ms@ThisCycle,c
 10510  001486  D001               	goto	i2l3563
 10511  001488                     i2l3561:
 10512                           
 10513                           ;projMain.c: 63: else
 10514                           ;projMain.c: 64: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 10515  001488  D846               	call	PL48	;call to abstracted procedure
 10516  00148A                     i2l3563:
 10517                           
 10518                           ;projMain.c: 65: NEXT_STATE = PRESENT_STATE+1;
 10519  00148A  2854               	incf	_PRESENT_STATE,w,c
 10520  00148C  6E53               	movwf	_NEXT_STATE,c
 10521                           
 10522                           ;projMain.c: 66: if (NEXT_STATE > CYCLES[ThisCycle].END_STATE) {
 10523  00148E  503A               	movf	Timer0_10ms@ThisCycle,w,c
 10524  001490  0D04               	mullw	4
 10525  001492  0E03               	movlw	low (_CYCLES+3)
 10526  001494  24F3               	addwf	prodl,w,c
 10527  001496  6ED9               	movwf	fsr2l,c
 10528  001498  0E01               	movlw	high (_CYCLES+3)
 10529  00149A  20F4               	addwfc	prodh,w,c
 10530  00149C  6EDA               	movwf	fsr2h,c
 10531  00149E  5053               	movf	_NEXT_STATE,w,c
 10532  0014A0  5CDE               	subwf	postinc2,w,c
 10533  0014A2  B0D8               	btfsc	status,0,c
 10534  0014A4  0012               	return	
 10535                           
 10536                           ;projMain.c: 67: PRESENT_EVENT = NEXT_EVENT;
 10537  0014A6  C05D  F05E         	movff	_NEXT_EVENT,_PRESENT_EVENT
 10538                           
 10539                           ;projMain.c: 68: if (PRESENT_EVENT <0)
 10540  0014AA  AE5E               	btfss	_PRESENT_EVENT,7,c
 10541  0014AC  D002               	goto	i2l3573
 10542                           
 10543                           ;projMain.c: 69: ThisCycle = 0;
 10544  0014AE  6A3A               	clrf	Timer0_10ms@ThisCycle,c
 10545  0014B0  D001               	goto	i2l1132
 10546  0014B2                     i2l3573:
 10547                           
 10548                           ;projMain.c: 70: else
 10549                           ;projMain.c: 71: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 10550  0014B2  D831               	call	PL48	;call to abstracted procedure
 10551  0014B4                     i2l1132:
 10552                           
 10553                           ;projMain.c: 72: NEXT_STATE = CYCLES[ThisCycle].START_STATE;
 10554  0014B4  503A               	movf	Timer0_10ms@ThisCycle,w,c
 10555  0014B6  0D04               	mullw	4
 10556  0014B8  0E02               	movlw	low (_CYCLES+2)
 10557  0014BA  24F3               	addwf	prodl,w,c
 10558  0014BC  6ED9               	movwf	fsr2l,c
 10559  0014BE  0E01               	movlw	high (_CYCLES+2)
 10560  0014C0  20F4               	addwfc	prodh,w,c
 10561  0014C2  6EDA               	movwf	fsr2h,c
 10562  0014C4  50DF               	movf	indf2,w,c
 10563  0014C6  6E53               	movwf	_NEXT_STATE,c
 10564  0014C8  0012               	return		;funcret
 10565  0014CA                     __end_of_Timer0_10ms:
 10566                           	opt stack 0
 10567  0014CA                     PL20:
 10568                           	opt stack 15
 10569  0014CA  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 10570  0014CC  6A38               	clrf	(??_Timer0_10ms+3)& (0+255),c
 10571  0014CE  5035               	movf	??_Timer0_10ms,w,c
 10572  0014D0  5C37               	subwf	??_Timer0_10ms+2,w,c
 10573  0014D2  5038               	movf	??_Timer0_10ms+3,w,c
 10574  0014D4  0A80               	xorlw	128
 10575  0014D6  6E39               	movwf	(??_Timer0_10ms+4)& (0+255),c
 10576  0014D8  5036               	movf	??_Timer0_10ms+1,w,c
 10577  0014DA  0A80               	xorlw	128
 10578  0014DC  5839               	subwfb	(??_Timer0_10ms+4)& (0+255),w,c
 10579  0014DE  0012               	return	
 10580  0014E0                     __end_ofPL20:
 10581                           	opt stack 0
 10582  0014E0                     PL22:
 10583                           	opt stack 15
 10584  0014E0  0F3B               	addlw	low Timer0_10ms@OutForThePorts
 10585  0014E2  6ED9               	movwf	fsr2l,c
 10586  0014E4  6ADA               	clrf	fsr2h,c
 10587  0014E6  5054               	movf	_PRESENT_STATE,w,c
 10588  0014E8  0D06               	mullw	6
 10589  0014EA  0EEF               	movlw	low _STATES
 10590  0014EC  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10591  0014EE  0E06               	movlw	high _STATES
 10592  0014F0  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 10593  0014F2  0E03               	movlw	3
 10594  0014F4  2635               	addwf	??_Timer0_10ms,f,c
 10595  0014F6  0E00               	movlw	0
 10596  0014F8  2236               	addwfc	??_Timer0_10ms+1,f,c
 10597  0014FA  50F3               	movf	prodl,w,c
 10598  0014FC  2635               	addwf	??_Timer0_10ms,f,c
 10599  0014FE  50F4               	movf	prodh,w,c
 10600  001500  2236               	addwfc	??_Timer0_10ms+1,f,c
 10601  001502  0012               	return	
 10602  001504                     __end_ofPL22:
 10603                           	opt stack 0
 10604  001504                     PL28:
 10605                           	opt stack 15
 10606  001504  5054               	movf	_PRESENT_STATE,w,c
 10607  001506  0D06               	mullw	6
 10608  001508  0EF4               	movlw	low (_STATES+5)
 10609  00150A  24F3               	addwf	prodl,w,c
 10610  00150C  6ED9               	movwf	fsr2l,c
 10611  00150E  0E06               	movlw	high (_STATES+5)
 10612  001510  20F4               	addwfc	prodh,w,c
 10613  001512  6EDA               	movwf	fsr2h,c
 10614  001514  0012               	return	
 10615  001516                     __end_ofPL28:
 10616                           	opt stack 0
 10617  001516                     PL48:
 10618                           	opt stack 15
 10619  001516  505E               	movf	_PRESENT_EVENT,w,c
 10620  001518  0D0A               	mullw	10
 10621  00151A  0E08               	movlw	low (_EVENTS+8)
 10622  00151C  24F3               	addwf	prodl,w,c
 10623  00151E  6ED9               	movwf	fsr2l,c
 10624  001520  0E02               	movlw	high (_EVENTS+8)
 10625  001522  20F4               	addwfc	prodh,w,c
 10626  001524  6EDA               	movwf	fsr2h,c
 10627  001526  50DF               	movf	indf2,w,c
 10628  001528  6E3A               	movwf	Timer0_10ms@ThisCycle,c
 10629  00152A  0012               	return	
 10630  00152C                     __end_ofPL48:
 10631                           	opt stack 0
 10632  00152C                     PL78:
 10633                           	opt stack 15
 10634  00152C  2435               	addwf	??_Timer0_10ms,w,c
 10635  00152E  6EE1               	movwf	fsr1l,c
 10636  001530  0E00               	movlw	0
 10637  001532  2036               	addwfc	??_Timer0_10ms+1,w,c
 10638  001534  6EE2               	movwf	fsr1h,c
 10639  001536  50E7               	movf	indf1,w,c
 10640  001538  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 10641  00153A  0012               	return	
 10642  00153C                     __end_ofPL78:
 10643                           	opt stack 0
 10644  00153C                     PL86:
 10645                           	opt stack 15
 10646  00153C  0F3B               	addlw	low Timer0_10ms@OutForThePorts
 10647  00153E  6EE1               	movwf	fsr1l,c
 10648  001540  6AE2               	clrf	fsr1h,c
 10649  001542  50E7               	movf	indf1,w,c
 10650  001544  1037               	iorwf	??_Timer0_10ms+2,w,c
 10651  001546  6EDF               	movwf	indf2,c
 10652  001548  0012               	return	
 10653  00154A                     __end_ofPL86:
 10654                           	opt stack 0
 10655  00154A                     PL88:
 10656                           	opt stack 15
 10657  00154A  6A36               	clrf	(??_Timer0_10ms+1)& (0+255),c
 10658  00154C  2635               	addwf	??_Timer0_10ms,f,c
 10659  00154E  0E00               	movlw	0
 10660  001550  2236               	addwfc	??_Timer0_10ms+1,f,c
 10661  001552  0C00               	retlw	0
 10662  001554                     __end_ofPL88:
 10663                           	opt stack 0
 10664                           tosu	equ	0xFFF
 10665                           tosh	equ	0xFFE
 10666                           tosl	equ	0xFFD
 10667                           pclatu	equ	0xFFB
 10668                           pclath	equ	0xFFA
 10669                           tblptru	equ	0xFF8
 10670                           tblptrh	equ	0xFF7
 10671                           tblptrl	equ	0xFF6
 10672                           tablat	equ	0xFF5
 10673                           prodh	equ	0xFF4
 10674                           prodl	equ	0xFF3
 10675                           intcon	equ	0xFF2
 10676                           postinc0	equ	0xFEE
 10677                           plusw0	equ	0xFEB
 10678                           fsr0h	equ	0xFEA
 10679                           fsr0l	equ	0xFE9
 10680                           wreg	equ	0xFE8
 10681                           indf1	equ	0xFE7
 10682                           postinc1	equ	0xFE6
 10683                           postdec1	equ	0xFE5
 10684                           plusw1	equ	0xFE3
 10685                           fsr1h	equ	0xFE2
 10686                           fsr1l	equ	0xFE1
 10687                           indf2	equ	0xFDF
 10688                           postinc2	equ	0xFDE
 10689                           postdec2	equ	0xFDD
 10690                           plusw2	equ	0xFDB
 10691                           fsr2h	equ	0xFDA
 10692                           fsr2l	equ	0xFD9
 10693                           status	equ	0xFD8
 10694                           
 10695 ;; *************** function _IncreaseByASecond *****************
 10696 ;; Defined at:
 10697 ;;		line 3 in file "libs/funcs.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;		None
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
 10704 ;; Registers used:
 10705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 3F/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10711 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10714 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10715 ;;Total ram usage:       11 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    4
 10718 ;; This function calls:
 10719 ;;		i2_IncreaseByADay
 10720 ;; This function is called by:
 10721 ;;		_Timer0_10ms
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           	psect	text49
 10726  002A0C                     __ptext49:
 10727                           	opt stack 0
 10728  002A0C                     _IncreaseByASecond:
 10729                           	opt stack 15
 10730                           
 10731                           ; BSR set to: 0
 10732                           ;funcs.c: 4: dt.SECOND++;
 10733                           
 10734                           ;incstack = 0
 10735  002A0C  2A2A               	incf	IncreaseByASecond@dt,f,c
 10736  002A0E  0E00               	movlw	0
 10737  002A10  222B               	addwfc	IncreaseByASecond@dt+1,f,c
 10738  002A12  222C               	addwfc	IncreaseByASecond@dt+2,f,c
 10739  002A14  222D               	addwfc	IncreaseByASecond@dt+3,f,c
 10740                           
 10741                           ;funcs.c: 5: if (dt.SECOND == 86400) {
 10742  002A16  0E80               	movlw	128
 10743  002A18  182A               	xorwf	IncreaseByASecond@dt,w,c
 10744  002A1A  E11C               	bnz	i2l3107
 10745  002A1C  0E51               	movlw	81
 10746  002A1E  182B               	xorwf	IncreaseByASecond@dt+1,w,c
 10747  002A20  E119               	bnz	i2l3107
 10748  002A22  042C               	decf	IncreaseByASecond@dt+2,w,c
 10749  002A24  102D               	iorwf	IncreaseByASecond@dt+3,w,c
 10750  002A26  E116               	bnz	i2l3107
 10751                           
 10752                           ; BSR set to: 0
 10753                           ;funcs.c: 6: dt.SECOND = 0;
 10754  002A28  6A2A               	clrf	IncreaseByASecond@dt,c
 10755  002A2A  6A2B               	clrf	IncreaseByASecond@dt+1,c
 10756  002A2C  6A2C               	clrf	IncreaseByASecond@dt+2,c
 10757  002A2E  6A2D               	clrf	IncreaseByASecond@dt+3,c
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;funcs.c: 7: dt = IncreaseByADay(dt);
 10761  002A30  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 10762  002A34  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
 10763  002A38  0E0A               	movlw	10
 10764  002A3A                     i2u234_41:
 10765  002A3A  CFDB FFEB          	movff	plusw2,plusw0
 10766  002A3E  06E8               	decf	wreg,f,c
 10767  002A40  E2FC               	bc	i2u234_41
 10768  002A42  EC79  F011         	call	i2_IncreaseByADay	;wreg free
 10769  002A46  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 10770  002A4A  0E0A               	movlw	10
 10771  002A4C                     i2u235_41:
 10772  002A4C  CFEB FFDB          	movff	plusw0,plusw2
 10773  002A50  06E8               	decf	wreg,f,c
 10774  002A52  E2FC               	bc	i2u235_41
 10775  002A54                     i2l3107:
 10776                           
 10777                           ;funcs.c: 8: }
 10778                           ;funcs.c: 9: return dt;
 10779  002A54  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 10780  002A58  EE00  F02A         	lfsr	0,?_IncreaseByASecond
 10781  002A5C  0E0A               	movlw	10
 10782  002A5E                     i2u236_41:
 10783  002A5E  CFDB FFEB          	movff	plusw2,plusw0
 10784  002A62  06E8               	decf	wreg,f,c
 10785  002A64  E2FC               	bc	i2u236_41
 10786  002A66  0012               	return		;funcret
 10787  002A68                     __end_of_IncreaseByASecond:
 10788                           	opt stack 0
 10789                           tosu	equ	0xFFF
 10790                           tosh	equ	0xFFE
 10791                           tosl	equ	0xFFD
 10792                           pclatu	equ	0xFFB
 10793                           pclath	equ	0xFFA
 10794                           tblptru	equ	0xFF8
 10795                           tblptrh	equ	0xFF7
 10796                           tblptrl	equ	0xFF6
 10797                           tablat	equ	0xFF5
 10798                           prodh	equ	0xFF4
 10799                           prodl	equ	0xFF3
 10800                           intcon	equ	0xFF2
 10801                           postinc0	equ	0xFEE
 10802                           plusw0	equ	0xFEB
 10803                           fsr0h	equ	0xFEA
 10804                           fsr0l	equ	0xFE9
 10805                           wreg	equ	0xFE8
 10806                           indf1	equ	0xFE7
 10807                           postinc1	equ	0xFE6
 10808                           postdec1	equ	0xFE5
 10809                           plusw1	equ	0xFE3
 10810                           fsr1h	equ	0xFE2
 10811                           fsr1l	equ	0xFE1
 10812                           indf2	equ	0xFDF
 10813                           postinc2	equ	0xFDE
 10814                           postdec2	equ	0xFDD
 10815                           plusw2	equ	0xFDB
 10816                           fsr2h	equ	0xFDA
 10817                           fsr2l	equ	0xFD9
 10818                           status	equ	0xFD8
 10819                           
 10820 ;; *************** function i2_IncreaseByADay *****************
 10821 ;; Defined at:
 10822 ;;		line 12 in file "libs/funcs.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  IncreaseByAD    1   40[COMRAM] char 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
 10829 ;; Registers used:
 10830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 3F/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10836 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10838 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10839 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10840 ;;Total ram usage:       14 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    3
 10843 ;; This function calls:
 10844 ;;		i2_IncreaseByAMonth
 10845 ;;		i2___lwmod
 10846 ;; This function is called by:
 10847 ;;		_IncreaseByASecond
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           	psect	text50
 10852  0022F2                     __ptext50:
 10853                           	opt stack 0
 10854  0022F2                     i2_IncreaseByADay:
 10855                           	opt stack 15
 10856                           
 10857                           ; BSR set to: 0
 10858                           ;funcs.c: 13: dt.DATE.Day++;
 10859                           
 10860                           ;incstack = 0
 10861  0022F2  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
 10862  0022F4  2A21               	incf	i2IncreaseByADay@dt+5,f,c
 10863                           
 10864                           ; BSR set to: 0
 10865                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
 10866  0022F6  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 10867  0022F8  0B7F               	andlw	127
 10868  0022FA  06E8               	decf	wreg,f,c
 10869  0022FC  E104               	bnz	i2l3061
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;funcs.c: 15: dt.DAY.Val = 0x40;
 10873  0022FE  5024               	movf	i2IncreaseByADay@dt+8,w,c
 10874  002300  0B01               	andlw	-255
 10875  002302  0980               	iorlw	128
 10876  002304  D00A               	goto	L6
 10877  002306                     i2l3061:
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;funcs.c: 16: else
 10881                           ;funcs.c: 17: dt.DAY.Val >>= 1;
 10882  002306  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 10883  002308  0B7F               	andlw	127
 10884  00230A  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
 10885  00230C  90D8               	bcf	status,0,c
 10886  00230E  3227               	rrcf	??i2_IncreaseByADay,f,c
 10887  002310  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
 10888  002312  5024               	movf	i2IncreaseByADay@dt+8,w,c
 10889  002314  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 10890  002316  0B01               	andlw	-255
 10891  002318  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 10892  00231A                     L6:
 10893  00231A  6E24               	movwf	i2IncreaseByADay@dt+8,c
 10894                           
 10895                           ; BSR set to: 0
 10896                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
 10897  00231C  90D8               	bcf	status,0,c
 10898  00231E  3422               	rlcf	i2IncreaseByADay@dt+6,w,c
 10899  002320  6ED9               	movwf	fsr2l,c
 10900  002322  3423               	rlcf	i2IncreaseByADay@dt+7,w,c
 10901  002324  ECF2  F010         	call	PL60	;call to abstracted procedure
 10902  002328  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
 10906  00232A  0E02               	movlw	2
 10907  00232C  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 10908  00232E  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 10909  002330  E107               	bnz	i2l3071
 10910                           
 10911                           ; BSR set to: 0
 10912  002332  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
 10913  002336  0E03               	movlw	3
 10914  002338  1627               	andwf	??i2_IncreaseByADay,f,c
 10915  00233A  E102               	bnz	i2l3071
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;funcs.c: 20: MonthDays = 29;
 10919  00233C  0E1D               	movlw	29
 10920  00233E  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10921  002340                     i2l3071:
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
 10925  002340  0E02               	movlw	2
 10926  002342  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 10927  002344  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 10928  002346  E10A               	bnz	i2l3077
 10929                           
 10930                           ; BSR set to: 0
 10931  002348  D842               	call	PL108	;call to abstracted procedure
 10932  00234A  EC80  F016         	call	PL114	;call to abstracted procedure
 10933  00234E  EC2D  F016         	call	i2___lwmod	;wreg free
 10934  002352  5001               	movf	?i2___lwmod,w,c
 10935  002354  1002               	iorwf	?i2___lwmod+1,w,c
 10936  002356  E102               	bnz	i2l3077
 10937                           
 10938                           ;funcs.c: 22: MonthDays = 28;
 10939  002358  0E1C               	movlw	28
 10940  00235A  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10941  00235C                     i2l3077:
 10942                           
 10943                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
 10944  00235C  0E02               	movlw	2
 10945  00235E  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 10946  002360  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 10947  002362  E10C               	bnz	i2l3083
 10948  002364  D834               	call	PL108	;call to abstracted procedure
 10949  002366  0E01               	movlw	1
 10950  002368  6E04               	movwf	i2___lwmod@divisor+1,c
 10951  00236A  0E90               	movlw	144
 10952  00236C  6E03               	movwf	i2___lwmod@divisor,c
 10953  00236E  EC2D  F016         	call	i2___lwmod	;wreg free
 10954  002372  5001               	movf	?i2___lwmod,w,c
 10955  002374  1002               	iorwf	?i2___lwmod+1,w,c
 10956  002376  E102               	bnz	i2l3083
 10957                           
 10958                           ;funcs.c: 24: MonthDays = 29;
 10959  002378  0E1D               	movlw	29
 10960  00237A  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10961  00237C                     i2l3083:
 10962                           
 10963                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
 10964  00237C  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
 10965  002380  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
 10966  002382  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
 10967  002384  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
 10968  002386  5020               	movf	i2IncreaseByADay@dt+4,w,c
 10969  002388  5C27               	subwf	??i2_IncreaseByADay,w,c
 10970  00238A  5021               	movf	i2IncreaseByADay@dt+5,w,c
 10971  00238C  5828               	subwfb	??i2_IncreaseByADay+1,w,c
 10972  00238E  E215               	bc	i2l3089
 10973                           
 10974                           ;funcs.c: 26: dt.DATE.Day = 1;
 10975  002390  6A21               	clrf	i2IncreaseByADay@dt+5,c
 10976  002392  0E01               	movlw	1
 10977  002394  6E20               	movwf	i2IncreaseByADay@dt+4,c
 10978                           
 10979                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
 10980  002396  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 10981  00239A  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
 10982  00239E  0E0A               	movlw	10
 10983  0023A0                     i2u228_41:
 10984  0023A0  CFDB FFEB          	movff	plusw2,plusw0
 10985  0023A4  06E8               	decf	wreg,f,c
 10986  0023A6  E2FC               	bc	i2u228_41
 10987  0023A8  ECA5  F015         	call	i2_IncreaseByAMonth	;wreg free
 10988  0023AC  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 10989  0023B0  0E0A               	movlw	10
 10990  0023B2                     i2u229_41:
 10991  0023B2  CFEB FFDB          	movff	plusw0,plusw2
 10992  0023B6  06E8               	decf	wreg,f,c
 10993  0023B8  E2FC               	bc	i2u229_41
 10994  0023BA                     i2l3089:
 10995                           
 10996                           ;funcs.c: 28: }
 10997                           ;funcs.c: 29: return dt;
 10998  0023BA  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 10999  0023BE  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
 11000  0023C2  0E0A               	movlw	10
 11001  0023C4                     i2u230_41:
 11002  0023C4  CFDB FFEB          	movff	plusw2,plusw0
 11003  0023C8  06E8               	decf	wreg,f,c
 11004  0023CA  E2FC               	bc	i2u230_41
 11005  0023CC  0012               	return		;funcret
 11006  0023CE                     __end_ofi2_IncreaseByADay:
 11007                           	opt stack 0
 11008  0023CE                     PL108:
 11009                           	opt stack 15
 11010  0023CE  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
 11011  0023D2  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
 11012  0023D6  0012               	return	
 11013  0023D8                     __end_ofPL108:
 11014                           	opt stack 0
 11015                           tosu	equ	0xFFF
 11016                           tosh	equ	0xFFE
 11017                           tosl	equ	0xFFD
 11018                           pclatu	equ	0xFFB
 11019                           pclath	equ	0xFFA
 11020                           tblptru	equ	0xFF8
 11021                           tblptrh	equ	0xFF7
 11022                           tblptrl	equ	0xFF6
 11023                           tablat	equ	0xFF5
 11024                           prodh	equ	0xFF4
 11025                           prodl	equ	0xFF3
 11026                           intcon	equ	0xFF2
 11027                           postinc0	equ	0xFEE
 11028                           plusw0	equ	0xFEB
 11029                           fsr0h	equ	0xFEA
 11030                           fsr0l	equ	0xFE9
 11031                           wreg	equ	0xFE8
 11032                           indf1	equ	0xFE7
 11033                           postinc1	equ	0xFE6
 11034                           postdec1	equ	0xFE5
 11035                           plusw1	equ	0xFE3
 11036                           fsr1h	equ	0xFE2
 11037                           fsr1l	equ	0xFE1
 11038                           indf2	equ	0xFDF
 11039                           postinc2	equ	0xFDE
 11040                           postdec2	equ	0xFDD
 11041                           plusw2	equ	0xFDB
 11042                           fsr2h	equ	0xFDA
 11043                           fsr2l	equ	0xFD9
 11044                           status	equ	0xFD8
 11045                           
 11046 ;; *************** function i2_IncreaseByAMonth *****************
 11047 ;; Defined at:
 11048 ;;		line 32 in file "libs/funcs.c"
 11049 ;; Parameters:    Size  Location     Type
 11050 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
 11051 ;; Auto vars:     Size  Location     Type
 11052 ;;		None
 11053 ;; Return value:  Size  Location     Type
 11054 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
 11055 ;; Registers used:
 11056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11057 ;; Tracked objects:
 11058 ;;		On entry : 0/0
 11059 ;;		On exit  : 0/0
 11060 ;;		Unchanged: 0/0
 11061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11062 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11065 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11066 ;;Total ram usage:       11 bytes
 11067 ;; Hardware stack levels used:    1
 11068 ;; Hardware stack levels required when called:    2
 11069 ;; This function calls:
 11070 ;;		i2_IncreaseByAYear
 11071 ;; This function is called by:
 11072 ;;		i2_IncreaseByADay
 11073 ;; This function uses a non-reentrant model
 11074 ;;
 11075                           
 11076                           	psect	text51
 11077  002B4A                     __ptext51:
 11078                           	opt stack 0
 11079  002B4A                     i2_IncreaseByAMonth:
 11080                           	opt stack 15
 11081                           
 11082                           ;funcs.c: 33: dt.DATE.Month++;
 11083                           
 11084                           ;incstack = 0
 11085  002B4A  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
 11086  002B4C  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
 11087                           
 11088                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
 11089  002B4E  0E0D               	movlw	13
 11090  002B50  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
 11091  002B52  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
 11092  002B54  E115               	bnz	i2l3027
 11093                           
 11094                           ;funcs.c: 35: dt.DATE.Month = 1;
 11095  002B56  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
 11096  002B58  0E01               	movlw	1
 11097  002B5A  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
 11098                           
 11099                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
 11100  002B5C  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 11101  002B60  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
 11102  002B64  0E0A               	movlw	10
 11103  002B66                     i2u209_41:
 11104  002B66  CFDB FFEB          	movff	plusw2,plusw0
 11105  002B6A  06E8               	decf	wreg,f,c
 11106  002B6C  E2FC               	bc	i2u209_41
 11107  002B6E  EC68  F016         	call	i2_IncreaseByAYear	;wreg free
 11108  002B72  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 11109  002B76  0E0A               	movlw	10
 11110  002B78                     i2u210_41:
 11111  002B78  CFEB FFDB          	movff	plusw0,plusw2
 11112  002B7C  06E8               	decf	wreg,f,c
 11113  002B7E  E2FC               	bc	i2u210_41
 11114  002B80                     i2l3027:
 11115                           
 11116                           ;funcs.c: 37: }
 11117                           ;funcs.c: 38: return dt;
 11118  002B80  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 11119  002B84  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
 11120  002B88  0E0A               	movlw	10
 11121  002B8A                     i2u211_41:
 11122  002B8A  CFDB FFEB          	movff	plusw2,plusw0
 11123  002B8E  06E8               	decf	wreg,f,c
 11124  002B90  E2FC               	bc	i2u211_41
 11125  002B92  0012               	return		;funcret
 11126  002B94                     __end_ofi2_IncreaseByAMonth:
 11127                           	opt stack 0
 11128                           tosu	equ	0xFFF
 11129                           tosh	equ	0xFFE
 11130                           tosl	equ	0xFFD
 11131                           pclatu	equ	0xFFB
 11132                           pclath	equ	0xFFA
 11133                           tblptru	equ	0xFF8
 11134                           tblptrh	equ	0xFF7
 11135                           tblptrl	equ	0xFF6
 11136                           tablat	equ	0xFF5
 11137                           prodh	equ	0xFF4
 11138                           prodl	equ	0xFF3
 11139                           intcon	equ	0xFF2
 11140                           postinc0	equ	0xFEE
 11141                           plusw0	equ	0xFEB
 11142                           fsr0h	equ	0xFEA
 11143                           fsr0l	equ	0xFE9
 11144                           wreg	equ	0xFE8
 11145                           indf1	equ	0xFE7
 11146                           postinc1	equ	0xFE6
 11147                           postdec1	equ	0xFE5
 11148                           plusw1	equ	0xFE3
 11149                           fsr1h	equ	0xFE2
 11150                           fsr1l	equ	0xFE1
 11151                           indf2	equ	0xFDF
 11152                           postinc2	equ	0xFDE
 11153                           postdec2	equ	0xFDD
 11154                           plusw2	equ	0xFDB
 11155                           fsr2h	equ	0xFDA
 11156                           fsr2l	equ	0xFD9
 11157                           status	equ	0xFD8
 11158                           
 11159 ;; *************** function i2_IncreaseByAYear *****************
 11160 ;; Defined at:
 11161 ;;		line 41 in file "libs/funcs.c"
 11162 ;; Parameters:    Size  Location     Type
 11163 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
 11164 ;; Auto vars:     Size  Location     Type
 11165 ;;		None
 11166 ;; Return value:  Size  Location     Type
 11167 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
 11168 ;; Registers used:
 11169 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11170 ;; Tracked objects:
 11171 ;;		On entry : 0/0
 11172 ;;		On exit  : 0/0
 11173 ;;		Unchanged: 0/0
 11174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11175 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11178 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11179 ;;Total ram usage:       11 bytes
 11180 ;; Hardware stack levels used:    1
 11181 ;; Hardware stack levels required when called:    1
 11182 ;; This function calls:
 11183 ;;		i2___lwmod
 11184 ;; This function is called by:
 11185 ;;		i2_IncreaseByAMonth
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text52
 11190  002CD0                     __ptext52:
 11191                           	opt stack 0
 11192  002CD0                     i2_IncreaseByAYear:
 11193                           	opt stack 15
 11194                           
 11195                           ;funcs.c: 42: dt.YEAR++;
 11196                           
 11197                           ;incstack = 0
 11198  002CD0  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
 11199  002CD2  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
 11200                           
 11201                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
 11202  002CD4  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
 11203  002CD8  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
 11204  002CDC  D811               	call	PL114	;call to abstracted procedure
 11205  002CDE  EC2D  F016         	call	i2___lwmod	;wreg free
 11206  002CE2  5001               	movf	?i2___lwmod,w,c
 11207  002CE4  1002               	iorwf	?i2___lwmod+1,w,c
 11208  002CE6  E102               	bnz	i2l2997
 11209                           
 11210                           ;funcs.c: 44: CENTURY++;
 11211  002CE8  0100               	movlb	0	; () banked
 11212  002CEA  2BF6               	incf	_CENTURY& (0+255),f,b
 11213  002CEC                     i2l2997:
 11214                           
 11215                           ;funcs.c: 45: return dt;
 11216  002CEC  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
 11217  002CF0  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
 11218  002CF4  0E0A               	movlw	10
 11219  002CF6                     i2u203_41:
 11220  002CF6  CFDB FFEB          	movff	plusw2,plusw0
 11221  002CFA  06E8               	decf	wreg,f,c
 11222  002CFC  E2FC               	bc	i2u203_41
 11223  002CFE  0012               	return		;funcret
 11224  002D00                     __end_ofi2_IncreaseByAYear:
 11225                           	opt stack 0
 11226  002D00                     PL114:
 11227                           	opt stack 15
 11228  002D00  6A04               	clrf	i2___lwmod@divisor+1,c
 11229  002D02  0E64               	movlw	100
 11230  002D04  6E03               	movwf	i2___lwmod@divisor,c
 11231  002D06  0C64               	retlw	100
 11232  002D08                     __end_ofPL114:
 11233                           	opt stack 0
 11234                           tosu	equ	0xFFF
 11235                           tosh	equ	0xFFE
 11236                           tosl	equ	0xFFD
 11237                           pclatu	equ	0xFFB
 11238                           pclath	equ	0xFFA
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           postinc0	equ	0xFEE
 11247                           plusw0	equ	0xFEB
 11248                           fsr0h	equ	0xFEA
 11249                           fsr0l	equ	0xFE9
 11250                           wreg	equ	0xFE8
 11251                           indf1	equ	0xFE7
 11252                           postinc1	equ	0xFE6
 11253                           postdec1	equ	0xFE5
 11254                           plusw1	equ	0xFE3
 11255                           fsr1h	equ	0xFE2
 11256                           fsr1l	equ	0xFE1
 11257                           indf2	equ	0xFDF
 11258                           postinc2	equ	0xFDE
 11259                           postdec2	equ	0xFDD
 11260                           plusw2	equ	0xFDB
 11261                           fsr2h	equ	0xFDA
 11262                           fsr2l	equ	0xFD9
 11263                           status	equ	0xFD8
 11264                           
 11265 ;; *************** function i2___lwmod *****************
 11266 ;; Defined at:
 11267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 11268 ;; Parameters:    Size  Location     Type
 11269 ;;  dividend        2    0[COMRAM] unsigned int 
 11270 ;;  divisor         2    2[COMRAM] unsigned int 
 11271 ;; Auto vars:     Size  Location     Type
 11272 ;;  __lwmod         1    4[COMRAM] unsigned char 
 11273 ;; Return value:  Size  Location     Type
 11274 ;;                  2    0[COMRAM] unsigned int 
 11275 ;; Registers used:
 11276 ;;		wreg, status,2, status,0
 11277 ;; Tracked objects:
 11278 ;;		On entry : 0/0
 11279 ;;		On exit  : 0/0
 11280 ;;		Unchanged: 0/0
 11281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11282 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11283 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11285 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11286 ;;Total ram usage:        5 bytes
 11287 ;; Hardware stack levels used:    1
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		i2_IncreaseByADay
 11292 ;;		i2_IncreaseByAYear
 11293 ;; This function uses a non-reentrant model
 11294 ;;
 11295                           
 11296                           	psect	text53
 11297  002C5A                     __ptext53:
 11298                           	opt stack 0
 11299  002C5A                     i2___lwmod:
 11300                           	opt stack 17
 11301                           
 11302                           ;incstack = 0
 11303  002C5A  5003               	movf	i2___lwmod@divisor,w,c
 11304  002C5C  1004               	iorwf	i2___lwmod@divisor+1,w,c
 11305  002C5E  E017               	bz	i2l1546
 11306  002C60  0E01               	movlw	1
 11307  002C62  6E05               	movwf	i2___lwmod@counter,c
 11308  002C64  D004               	goto	i2l2965
 11309  002C66                     i2l2963:
 11310  002C66  90D8               	bcf	status,0,c
 11311  002C68  3603               	rlcf	i2___lwmod@divisor,f,c
 11312  002C6A  3604               	rlcf	i2___lwmod@divisor+1,f,c
 11313  002C6C  2A05               	incf	i2___lwmod@counter,f,c
 11314  002C6E                     i2l2965:
 11315  002C6E  AE04               	btfss	i2___lwmod@divisor+1,7,c
 11316  002C70  D7FA               	goto	i2l2963
 11317  002C72                     i2l2967:
 11318  002C72  5003               	movf	i2___lwmod@divisor,w,c
 11319  002C74  5C01               	subwf	i2___lwmod@dividend,w,c
 11320  002C76  5004               	movf	i2___lwmod@divisor+1,w,c
 11321  002C78  5802               	subwfb	i2___lwmod@dividend+1,w,c
 11322  002C7A  E304               	bnc	i2l2971
 11323  002C7C  5003               	movf	i2___lwmod@divisor,w,c
 11324  002C7E  5E01               	subwf	i2___lwmod@dividend,f,c
 11325  002C80  5004               	movf	i2___lwmod@divisor+1,w,c
 11326  002C82  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 11327  002C84                     i2l2971:
 11328  002C84  90D8               	bcf	status,0,c
 11329  002C86  3204               	rrcf	i2___lwmod@divisor+1,f,c
 11330  002C88  3203               	rrcf	i2___lwmod@divisor,f,c
 11331  002C8A  2E05               	decfsz	i2___lwmod@counter,f,c
 11332  002C8C  D7F2               	goto	i2l2967
 11333  002C8E                     i2l1546:
 11334  002C8E  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 11335  002C92  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11336  002C96  0012               	return		;funcret
 11337  002C98                     __end_ofi2___lwmod:
 11338                           	opt stack 0
 11339                           tosu	equ	0xFFF
 11340                           tosh	equ	0xFFE
 11341                           tosl	equ	0xFFD
 11342                           pclatu	equ	0xFFB
 11343                           pclath	equ	0xFFA
 11344                           tblptru	equ	0xFF8
 11345                           tblptrh	equ	0xFF7
 11346                           tblptrl	equ	0xFF6
 11347                           tablat	equ	0xFF5
 11348                           prodh	equ	0xFF4
 11349                           prodl	equ	0xFF3
 11350                           intcon	equ	0xFF2
 11351                           postinc0	equ	0xFEE
 11352                           plusw0	equ	0xFEB
 11353                           fsr0h	equ	0xFEA
 11354                           fsr0l	equ	0xFE9
 11355                           wreg	equ	0xFE8
 11356                           indf1	equ	0xFE7
 11357                           postinc1	equ	0xFE6
 11358                           postdec1	equ	0xFE5
 11359                           plusw1	equ	0xFE3
 11360                           fsr1h	equ	0xFE2
 11361                           fsr1l	equ	0xFE1
 11362                           indf2	equ	0xFDF
 11363                           postinc2	equ	0xFDE
 11364                           postdec2	equ	0xFDD
 11365                           plusw2	equ	0xFDB
 11366                           fsr2h	equ	0xFDA
 11367                           fsr2l	equ	0xFD9
 11368                           status	equ	0xFD8
 11369                           tosu	equ	0xFFF
 11370                           tosh	equ	0xFFE
 11371                           tosl	equ	0xFFD
 11372                           pclatu	equ	0xFFB
 11373                           pclath	equ	0xFFA
 11374                           tblptru	equ	0xFF8
 11375                           tblptrh	equ	0xFF7
 11376                           tblptrl	equ	0xFF6
 11377                           tablat	equ	0xFF5
 11378                           prodh	equ	0xFF4
 11379                           prodl	equ	0xFF3
 11380                           intcon	equ	0xFF2
 11381                           postinc0	equ	0xFEE
 11382                           plusw0	equ	0xFEB
 11383                           fsr0h	equ	0xFEA
 11384                           fsr0l	equ	0xFE9
 11385                           wreg	equ	0xFE8
 11386                           indf1	equ	0xFE7
 11387                           postinc1	equ	0xFE6
 11388                           postdec1	equ	0xFE5
 11389                           plusw1	equ	0xFE3
 11390                           fsr1h	equ	0xFE2
 11391                           fsr1l	equ	0xFE1
 11392                           indf2	equ	0xFDF
 11393                           postinc2	equ	0xFDE
 11394                           postdec2	equ	0xFDD
 11395                           plusw2	equ	0xFDB
 11396                           fsr2h	equ	0xFDA
 11397                           fsr2l	equ	0xFD9
 11398                           status	equ	0xFD8
 11399                           
 11400                           	psect	text54
 11401  000000                     __ptext54:
 11402                           	opt stack 0
 11403                           tosu	equ	0xFFF
 11404                           tosh	equ	0xFFE
 11405                           tosl	equ	0xFFD
 11406                           pclatu	equ	0xFFB
 11407                           pclath	equ	0xFFA
 11408                           tblptru	equ	0xFF8
 11409                           tblptrh	equ	0xFF7
 11410                           tblptrl	equ	0xFF6
 11411                           tablat	equ	0xFF5
 11412                           prodh	equ	0xFF4
 11413                           prodl	equ	0xFF3
 11414                           intcon	equ	0xFF2
 11415                           postinc0	equ	0xFEE
 11416                           plusw0	equ	0xFEB
 11417                           fsr0h	equ	0xFEA
 11418                           fsr0l	equ	0xFE9
 11419                           wreg	equ	0xFE8
 11420                           indf1	equ	0xFE7
 11421                           postinc1	equ	0xFE6
 11422                           postdec1	equ	0xFE5
 11423                           plusw1	equ	0xFE3
 11424                           fsr1h	equ	0xFE2
 11425                           fsr1l	equ	0xFE1
 11426                           indf2	equ	0xFDF
 11427                           postinc2	equ	0xFDE
 11428                           postdec2	equ	0xFDD
 11429                           plusw2	equ	0xFDB
 11430                           fsr2h	equ	0xFDA
 11431                           fsr2l	equ	0xFD9
 11432                           status	equ	0xFD8
 11433                           
 11434                           	psect	rparam
 11435  0000                     tosu	equ	0xFFF
 11436                           tosh	equ	0xFFE
 11437                           tosl	equ	0xFFD
 11438                           pclatu	equ	0xFFB
 11439                           pclath	equ	0xFFA
 11440                           tblptru	equ	0xFF8
 11441                           tblptrh	equ	0xFF7
 11442                           tblptrl	equ	0xFF6
 11443                           tablat	equ	0xFF5
 11444                           prodh	equ	0xFF4
 11445                           prodl	equ	0xFF3
 11446                           intcon	equ	0xFF2
 11447                           postinc0	equ	0xFEE
 11448                           plusw0	equ	0xFEB
 11449                           fsr0h	equ	0xFEA
 11450                           fsr0l	equ	0xFE9
 11451                           wreg	equ	0xFE8
 11452                           indf1	equ	0xFE7
 11453                           postinc1	equ	0xFE6
 11454                           postdec1	equ	0xFE5
 11455                           plusw1	equ	0xFE3
 11456                           fsr1h	equ	0xFE2
 11457                           fsr1l	equ	0xFE1
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           postdec2	equ	0xFDD
 11461                           plusw2	equ	0xFDB
 11462                           fsr2h	equ	0xFDA
 11463                           fsr2l	equ	0xFD9
 11464                           status	equ	0xFD8
 11465                           
 11466                           	psect	temp
 11467  00005F                     btemp:
 11468                           	opt stack 0
 11469  00005F                     	ds	1
 11470  0000                     int$flags	set	btemp
 11471                           tosu	equ	0xFFF
 11472                           tosh	equ	0xFFE
 11473                           tosl	equ	0xFFD
 11474                           pclatu	equ	0xFFB
 11475                           pclath	equ	0xFFA
 11476                           tblptru	equ	0xFF8
 11477                           tblptrh	equ	0xFF7
 11478                           tblptrl	equ	0xFF6
 11479                           tablat	equ	0xFF5
 11480                           prodh	equ	0xFF4
 11481                           prodl	equ	0xFF3
 11482                           intcon	equ	0xFF2
 11483                           postinc0	equ	0xFEE
 11484                           plusw0	equ	0xFEB
 11485                           fsr0h	equ	0xFEA
 11486                           fsr0l	equ	0xFE9
 11487                           wreg	equ	0xFE8
 11488                           indf1	equ	0xFE7
 11489                           postinc1	equ	0xFE6
 11490                           postdec1	equ	0xFE5
 11491                           plusw1	equ	0xFE3
 11492                           fsr1h	equ	0xFE2
 11493                           fsr1l	equ	0xFE1
 11494                           indf2	equ	0xFDF
 11495                           postinc2	equ	0xFDE
 11496                           postdec2	equ	0xFDD
 11497                           plusw2	equ	0xFDB
 11498                           fsr2h	equ	0xFDA
 11499                           fsr2l	equ	0xFD9
 11500                           status	equ	0xFD8
 11501                           tosu	equ	0xFFF
 11502                           tosh	equ	0xFFE
 11503                           tosl	equ	0xFFD
 11504                           pclatu	equ	0xFFB
 11505                           pclath	equ	0xFFA
 11506                           tblptru	equ	0xFF8
 11507                           tblptrh	equ	0xFF7
 11508                           tblptrl	equ	0xFF6
 11509                           tablat	equ	0xFF5
 11510                           prodh	equ	0xFF4
 11511                           prodl	equ	0xFF3
 11512                           intcon	equ	0xFF2
 11513                           postinc0	equ	0xFEE
 11514                           plusw0	equ	0xFEB
 11515                           fsr0h	equ	0xFEA
 11516                           fsr0l	equ	0xFE9
 11517                           wreg	equ	0xFE8
 11518                           indf1	equ	0xFE7
 11519                           postinc1	equ	0xFE6
 11520                           postdec1	equ	0xFE5
 11521                           plusw1	equ	0xFE3
 11522                           fsr1h	equ	0xFE2
 11523                           fsr1l	equ	0xFE1
 11524                           indf2	equ	0xFDF
 11525                           postinc2	equ	0xFDE
 11526                           postdec2	equ	0xFDD
 11527                           plusw2	equ	0xFDB
 11528                           fsr2h	equ	0xFDA
 11529                           fsr2l	equ	0xFD9
 11530                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    7
    Data        1092
    BSS         1340
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     74      94
    BANK0           160     78     151
    BANK1           256      0     116
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    LIGHTS	PTR unsigned char [2] size(2) Largest target is 1
		 -> LATB(SFR_2[1]), LATA(SFR_2[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_Timer0_10ms
    _Timer0_10ms->_IncreaseByASecond
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS->_ReadGPS_DATE_TIME
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___wmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Init->_Lcd_Command
    _GetEventNumber->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   65353
                                             76 BANK0      2     2      0
                     _GetEventNumber
                        _Lcd_Command
                           _Lcd_Init
                  _LoadAllFromEeprom
                            _ReadGPS
                  _SYSTEM_Initialize
                            _StopGPS
                        _SwitchOnGPS
           _TMR0_SetInterruptHandler
              _TestGPSStartCondition
                 _VerifyForGPSOnTIme
                        _WriteEeprom
 ---------------------------------------------------------------------------------
 (1) _WriteEeprom                                          5     2      3     268
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _VerifyForGPSOnTIme                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _TestGPSStartCondition                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnGPS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StopGPS                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS                                              0     0      0   23591
                  _ReadGPS_DATE_TIME
 ---------------------------------------------------------------------------------
 (2) _ReadGPS_DATE_TIME                                   18    18      0   23591
                                             58 BANK0     18    18      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (3) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _TimeTextToSecond                                    24    20      4     996
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     752
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ReadGPSDateTime                                     18    16      2     566
                                              0 BANK0     18    16      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetDay                                              11    10      1    1865
                                             14 BANK0     11    10      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     474
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdjustDayLightSaving                                17     6     11   12257
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   35314
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    9646
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    8801
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                10    10      0    8460
                                              6 BANK0     10    10      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    8407
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              3 BANK0      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetEventNumber                                      11    11      0    5131
                                              6 BANK0     11    11      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4887
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          10    10      0    1994
                                             64 COMRAM    10    10      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    1994
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0    1994
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (11) _Timer0_10ms                                        12    12      0    1994
                                             52 COMRAM    12    12      0
                  _IncreaseByASecond
 ---------------------------------------------------------------------------------
 (12) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (15) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetEventNumber
     ___wmul
   _Lcd_Command
     _Lcd_Delay5us
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS
     _ReadGPS_DATE_TIME
       _AdjustDayLightSaving
         _DecreaseByADay
           _DecreaseByAMonth
             _DecreaseByAYear
               ___lwmod
           ___lwmod
         _IncreaseByADay
           _IncreaseByAMonth
             _IncreaseByAYear
               ___lwmod
           ___lwmod
         ___wmul
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _EUSART1_Initialize
       _GetDay
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       _ReadGPSDateTime
         _EUSART1_Read
       _TimeTextToSecond
         ___lmul
       _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _StopGPS
   _SwitchOnGPS
   _TMR0_SetInterruptHandler
   _TestGPSStartCondition
   _VerifyForGPSOnTIme
   _WriteEeprom

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     7BF      35       53.5%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      74       8       45.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      97       5       94.4%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4A      5E       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     259       6        0.0%
DATA                 0      0     A18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Tue Jul 18 15:56:46 2017

            __end_of_LoadStatesFromEeprom 1A36                   __end_of_ReadGPSDateTime 2674  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1B9E                                        PL4 1BB8  
                                      PL6 1BC0                                        PL8 1720  
                            ___awdiv@sign 0065                       ___wmul@multiplicand 0062  
                    __size_of_WriteEeprom 0032                                       PL10 22A8  
                                     PL20 14CA                                       PL12 1FD2  
                                     PL30 1CAE                                       PL22 14E0  
                                     PL14 1A36                                       PL40 20F8  
                                     PL32 22BC                                       PL24 1C9E  
                                     PL16 1F04                                       PL50 1CD2  
                                     PL42 1CBC                                       PL34 22C6  
                                     PL26 1FE2                                       PL18 1C74  
                                     PL60 21E4                                       PL52 22DC  
                                     PL44 22D0                                       PL36 2458  
                                     PL28 1504                                       PL70 18CC  
                                     PL62 200C                                       PL54 2492  
                                     PL46 2488                                       PL38 2470  
                             __CFG_LVP$ON 000000                                       PL80 24B2  
                                     PL72 210E                                       PL64 1CDC  
                                     PL56 1A46                                       PL48 1516  
                                     PL90 27CA                                       PL82 22E8  
                                     PL74 1F0E                                       PL66 24A0  
                                     PL58 2002                                       PL92 27D4  
                                     PL84 2014                                       PL76 1A66  
                                     PL68 1A54                                       PL94 21F2  
                                     PL86 153C                                       PL78 152C  
                                     PL96 2594                                       PL88 154A  
                                     PL98 1F1A                                       l123 2652  
                                     l129 2672                                       l266 2774  
                                     l445 2D64                                       l623 21BE  
                                     l720 2E94                                       l633 2D88  
                                     l641 1D6C                                       l824 2E3E  
                                     l665 2BC0                                       l683 2CCC  
                                     _GIE 007F97                              __CFG_CPD$OFF 000000  
                      DecreaseByAMonth@dt 0070                              ___awmod@sign 006D  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                       __end_of_Lcd_Command 2458  
           projMain@NO_OF_DAYS_IN_A_MONTH 0144                                      PL100 2D36  
                                    PL110 1E0C                                      PL102 1A72  
                                    PL112 1A7C                                      PL104 1E02  
                                    PL114 2D00                                      PL106 21FC  
                                    PL108 23CE                              __CFG_ZCD$OFF 000000  
                                    l1003 2836                                      l1004 2838  
                                    l1145 2A70                                      l3007 2D22  
                                    l3211 287E                                      l3051 2AEC  
                                    l3221 289A                                      l3205 286E  
                                    l3133 2526                                      l3117 24D0  
                                    l3301 25F6                                      l3039 2B36  
                                    l3127 250A                                      l3217 288E  
                                    l3233 28BE                                      l3049 2AE6  
                                    l3153 2126                                      l3145 2580  
                                    l3321 2656                                      l4041 290C  
                                    l4033 28FE                                      l4121 27F6  
                                    l1546 2C50                                      l3219 2896  
                                    l3171 21A4                                      l3139 2542  
                                    l3315 2622                                      l3307 260C  
                                    l3323 265E                                      l4035 2902  
                                    l4061 1F28                                      l3237 28CA  
                                    l3229 28B4                                      l3165 2188  
                                    l3421 1D66                                      l3261 2974  
                                    l3253 295C                                      l3317 2646  
                                    l4045 2938                                      l3431 1DA4  
                                    l3343 2222                                      l4047 293A  
                                    l4073 1FAE                                      l4081 1FC2  
                                    l3177 21CA                                      l3417 1D4C  
                                    l3273 299C                                      l3265 2986  
                                    l3257 2968                                      l3249 2950  
                                    l3097 2EA2                                      l3193 2A84  
                                    l3353 223C                                      l3179 21D0  
                                    l3419 1D56                                      l3259 2970  
                                    l3363 2256                                      l4069 1FAA  
                                    l3437 1DEE                                      l3269 2990  
                                    l3373 2272                                      l3287 25C2  
                                    l3383 228C                                      l3393 22A6  
                                    l3715 1BD4                                      l3299 25F2  
                                    l3823 1AE8                                      l3807 1A8E  
                                    l3751 18EE                                      l3833 1B6A  
                                    l3825 1B24                                      l3761 1910  
                                    l3819 1AD6                                      l3829 1B3C  
                                    l3773 1954                                      l2981 2C30  
                                    l3861 185A                                      l2983 2C34  
                                    l3793 1A14                                      l2987 2C46  
                                    l2979 2C28                                      l3867 18A4  
                                    l3875 18CA                                      l3789 19EC  
                                    u2051 2D2C                                      u2131 2B1C  
                                    u2141 2B2E                                      _LATA 000F83  
                                    _LATB 000F84                                      u2071 2D98  
                                    u2151 2B40                                      _LATC 000F85  
                                    u3041 1D8A                                      u2171 2ACA  
                                    u3051 1D9C                                      u3060 1DBA  
                                    u2181 2ADC                                      u2501 214C  
                                    u2191 2AF6                                      u2511 215E  
                                    u3071 1DD4                                      u3081 1DE6  
                                    u2451 2566                                      u3091 1DF8  
                                    u3404 19CA                                      u3405 19C8  
                                    u2461 2578                                      u3501 1746  
                                    u2471 258A                                      u3440 1A34  
                                    u3424 19F2                                      u3345 23E8  
                                    u3425 19F0                                      u3601 18C0  
                                    u3450 1AD2                                      u3370 1C72  
                                    u2730 25B0                                      u3610 2A08  
                                    u3355 23EE                                      u3380 1950  
                                    u3524 17AA                                      u3365 23FE  
                                    u2581 21DA                                      u3541 1840  
                                    u3525 17A4                                      u3390 1996  
                                    u3551 1852                                      u3711 28E6  
                                    u3480 1B9C                                      u2840 1E7A  
                                    u3560 1870                                      u2841 1E76  
                                    u2850 1E7C                                      u3571 188A  
                                    u3491 1734                                      u3820 1FD0  
                                    u3740 2CB0                                      u3581 189C  
                                    u3591 18AE                                      u3690 2BD6  
                                    u3917 2658                                      u3927 2EAE  
                                    u3937 2416                                      u3947 2446  
                                    _PLLR 0076D8                                      _WPUA 000F10  
                                    _WPUB 000F18                                      _WPUC 000F20  
                                    _WPUE 000F2D                            _IncreaseByADay 24BC  
                        _DecreaseByAMonth 2AB4                         ??_Lcd_Delay5500us 0060  
                           __CFG_FCMEN$ON 000000                                      _main 27DE  
                           ?_EUSART1_Read 0001                           _TMR0_StartTimer 2EEE  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                      __end_of_Lcd_Delay5us 2EE8  
                                    fsr2l 000FD9                                      btemp 005F  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0070                LoadEventsFromEeprom@Temp16 006E  
                           __CFG_CSWEN$ON 000000                  _GPS_SYNC_EVERY_x_SECONDS 00D0  
                            ___param_bank 000000                           __end_of_ReadGPS 293E  
                           __CFG_SCANE$ON 000000                    AdjustDayLightSaving@dt 0089  
                 __end_of_TMR0_Initialize 2C1C            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0016                   ?_LoadSettingsFromEeprom 0001  
           __end_of_OSCILLATOR_Initialize 2E44                LoadStatesFromEeprom@j_1396 0076  
                         __end_of_StopGPS 2EEE                                     ?_main 0001  
                         __end_of___awdiv 28D4                             __CFG_WDTE$OFF 000000  
                         __end_of___awmod 29A6                           ___awdiv@divisor 0062  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 2C5A  
                                   i2l748 003E                           ___awdiv@counter 0064  
                                   _OSCEN 000EDC                                     _TMR0H 000FD4  
                                   _TMR0L 000FD3                                     _TRISA 000F88  
                                   _TRISB 000F89                                     _TRISC 000F8A  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 0064                 ?_TMR0_SetInterruptHandler 0060  
                           __CFG_WRT3$OFF 000000                           _IncreaseByAYear 2D08  
                          __CFG_EBTR0$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       IncreaseByAYear@dt 0065                          __end_of_TMR0_ISR 2ED6  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                  __end_of_IncreaseByADay 2594                 __size_of_ValidateDateTime 00A2  
                      __CFG_MCLRE$EXTMCLR 000000                                     main@i 00AC  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0060                                     plusw0 000FEB  
                                   plusw1 000FE3                                     plusw2 000FDB  
                __end_ofi2_IncreaseByADay 23CE                                     status 000FD8  
                            __end_ofPL100 2D3E                              __end_ofPL110 1E14  
                            __end_ofPL102 1A7C                              __end_ofPL112 1A84  
                            __end_ofPL104 1E0C                              __end_ofPL114 2D08  
                            __end_ofPL106 2206                              __end_ofPL108 23D8  
           __size_of_LoadCyclesFromEeprom 011A                        _CENTI_SECOND_COUNT 0050  
                      __size_ofi2___lwmod 003E                  __size_of_DecreaseByAYear 0032  
                        __end_of_Lcd_Init 27CA                                _ReadEeprom 2E6C  
                         __initialization 2674                __end_of_EUSART1_Initialize 2E6C  
                            __end_of_main 285C                          ??_DecreaseByADay 0086  
                        ?_ReadGPSDateTime 0060            __end_of_LoadSettingsFromEeprom 1720  
                __end_of_TimeTextToSecond 20F8               ?_INTERRUPT_InterruptManager 0001  
           LoadStatesFromEeprom@AddStates 0078                               _Lcd_Command 23D8  
                 AdjustDayLightSaving@End 0096                   ReadGPS_DATE_TIME@F11470 00EB  
                 ReadGPS_DATE_TIME@F11472 00E4                                    ??_main 00AC  
                           __activetblptr 000003                            _GetEventNumber 1F24  
                   _AUDIO_NORMAL_OFF_TIME 0058                         Timer0_10ms@i_2890 003E  
                       Timer0_10ms@i_2888 003F                         Timer0_10ms@i_2889 0040  
           LoadStatesFromEeprom@AudAddInc 0073                   __end_of_TMR0_StartTimer 2EF2  
                         ?_IncreaseByADay 007B                          ___awdiv@dividend 0060  
                    _LoadStatesFromEeprom 18D8                                    _ANSELA 000F11  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                                  _T0CON0 000FD5                                    _T0CON1 000FD6  
                                  _RC1REG 000F99                                    _CYCLES 0100  
                                  _RC1STA 000F9D                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _RC6PPS 000EFD                                    _EVENTS 0200  
                                  i2l1100 1316                                    i2l1103 1376  
                                  i2l1107 138C                                    _LIGHTS 00F2  
                                  i2l1132 14B4                                    i2l1118 13EA  
                          __CFG_WDTCCS$SC 000000                                    i2l3027 2B80  
                                  i2l3107 2A54                                    i2l3061 2306  
                                  i2l3071 2340                                    i2l1546 2C8E  
                                  i2l3083 237C                                    i2l3077 235C  
                                  i2l3511 13D2                                    i2l3089 23BA  
                                  i2l3521 13EC                                    i2l3515 13D8  
                                  i2l3533 1412                                    i2l3527 1400  
                                  i2l3463 1318                                    i2l3561 1488  
                                  i2l3553 1478                                    i2l3563 148A  
                                  i2l3539 1424                                    i2l3573 14B2  
                                  i2l3479 1360                                    i2l3489 1378  
                                  i2l2971 2C84                                    i2l2963 2C66  
                                  i2l3499 138E                                    i2l2965 2C6E  
                                  i2l2967 2C72                                    i2l2997 2CEC  
                                  _OSCFRQ 000EDE                                    _NVMDAT 000F80  
                                  _TX1STA 000F9E                                    _STATES 06EF  
                           _GPS_DATE_TIME 00AE                             ??_Timer0_10ms 0035  
                               ??_ReadGPS 00AC                                    _GetDay 1E14  
                        _IncreaseByAMonth 2B00                            __CFG_PWRTE$OFF 000000  
                      IncreaseByAMonth@dt 0070                            __CFG_XINST$OFF 000000  
            _SPECIAL_AUDIO_LAST_X_SECONDS 0055                 AdjustDayLightSaving@Start 0094  
                               ??_StopGPS 0060                                    ___lmul 2A68  
              __end_of_VerifyForGPSOnTIme 2BDC                                    ___wmul 2DD2  
                               ??___awdiv 0064                            __CFG_STVREN$ON 000000  
                               ??___awmod 006C                                 ??___lwmod 0064  
                        ?_TMR0_Initialize 0001                                    clear_0 26F8  
                                  clear_1 270A                                    clear_2 2716  
                                  clear_3 2722                                    clear_4 272E  
                 __end_of_IncreaseByAYear 2D36                          ___awdiv@quotient 0066  
                         ___awmod@divisor 006A                           ___awmod@counter 006C  
                  __end_of_GetEventNumber 1FD2                            WriteEeprom@Add 0060  
                            __pdataBIGRAM 02F0                              __pdataCOMRAM 005D  
                            __mediumconst 0000                         __end_ofi2___lwmod 2C98  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                     __end_of_TMR0_CallBack 2E14  
                   ?_LoadStatesFromEeprom 0001  TMR0_SetInterruptHandler@InterruptHandler 0060  
                   __size_of_Lcd_Delay5us 0008             __size_of_INTERRUPT_Initialize 0004  
                      Lcd_Command@command 0062                     LoadEventsFromEeprom@i 006A  
                        DecreaseByADay@dt 007B                         _SYSTEM_Initialize 2E44  
                              __accesstop 0060                   __end_of__initialization 2734  
              __end_ofi2_IncreaseByAMonth 2B94                           __CFG_FEXTOSC$HS 000000  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
            LoadSettingsFromEeprom@Temp16 006A              LoadSettingsFromEeprom@Temp32 0066  
                             ?_ReadEeprom 0060                 i2IncreaseByADay@MonthDays 0029  
                      i2___lwmod@dividend 0001                            __pcstackCOMRAM 0001  
                            __pidataBANK0 2E80                              __pidataBANK1 2DA2  
                     __end_of_Timer0_10ms 14CA                       ??_SYSTEM_Initialize 0064  
                   _TIME_AT_LAST_GPS_SYNC 00C4                                 ?_TMR0_ISR 0001  
                       ??_DecreaseByAYear 0070                                __end_ofPL2 1BB8  
                              __end_ofPL4 1BC0                                __end_ofPL6 1BCA  
                              __end_ofPL8 172A                  __end_of_DecreaseByAMonth 2B00  
                         ?_GetEventNumber 0001                      __end_of_EUSART1_Read 2EA6  
                   _TestGPSStartCondition 2C98                              _Lcd_Delay5us 2EE0  
                         _Lcd_Delay5500us 2EA6                                 ?_Lcd_Init 0001  
            __end_of_AdjustDayLightSaving 1E02                          ?_TMR0_StartTimer 0001  
               __end_of_SYSTEM_Initialize 2E58                          _ValidateDateTime 2206  
           __size_of_LoadEventsFromEeprom 00AA                                __pbssBANK0 00AE  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                           ??_SwitchOnGPS 0060                                   ?_GetDay 006E  
                       ReadEeprom@Address 0060          __end_of_TMR0_SetInterruptHandler 2EE0  
                                 ?___lmul 0060                                   ?___wmul 0060  
                              ??_TMR0_ISR 0041                             ??_WriteEeprom 0063  
                         __CFG_PPS1WAY$ON 000000                            ___lmul@product 0068  
                    Timer0_10ms@ThisCycle 003A                          ?_IncreaseByAYear 0065  
                                 _CENTURY 00F6                                   _FLAGS_0 00E1  
                                 _FLAGS_1 00E0               LoadCyclesFromEeprom@Address 006D  
                                 GetDay@d 0075                                   GetDay@m 0076  
                                 GetDay@t 015C                                   GetDay@y 0077  
                                 _SP1BRGH 000F9C                                   _SP1BRGL 000F9B  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                  ??_LoadStatesFromEeprom 0068                                   _NVMADRH 000F7F  
                                 _NVMADRL 000F7E                                   _OSCTUNE 000EDD  
                                 _NVMCON2 000F82                                ??_Lcd_Init 0063  
                                 _PPSLOCK 000EA0                       __size_of_ReadEeprom 0014  
                     IncreaseByASecond@dt 002A                         _IncreaseByASecond 2A0C  
              LoadCyclesFromEeprom@i_1461 0073                         ?i2_IncreaseByADay 001C  
                    ValidateDateTime@Date 0060                               _Timer0_10ms 130A  
                                 _ReadGPS 28D4                      ValidateDateTime@Item 0063  
                    ValidateDateTime@Time 0061                           __size_of_GetDay 00F0  
                      ?_IncreaseByASecond 002A                                   __Hparam 0000  
                      ??i2_IncreaseByADay 0027                                   __Lparam 0000  
                               _DATE_TIME 00B9               AdjustDayLightSaving@Present 0098  
                                 _StopGPS 2EE8                       __end_of_SwitchOnGPS 2E2E  
                                 ___awdiv 285C                           __size_of___lmul 004C  
                                 ___awmod 293E                           __size_of___wmul 0026  
                 __end_of_Lcd_Delay5500us 2EB8                                   ___lwmod 2C1C  
                            __psmallconst 0F00                       ??_IncreaseByASecond 0035  
                                 __pcinit 2674                    ?_TestGPSStartCondition 0001  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 27DE  
                                 __ptext1 2D3E                                   __ptext2 2B94  
                                 __ptext3 2C98                                   __ptext4 2E14  
                                 __ptext5 2EE8                                   __ptext6 2E44  
                                 __ptext7 2BDC                                   __ptext8 2EEE  
                                 __ptext9 2ED6              __end_of_LoadCyclesFromEeprom 1B9E  
                      ??_TimeTextToSecond 0070                       __end_of_WriteEeprom 2D70  
                        ??_IncreaseByADay 0086                     _OSCILLATOR_Initialize 2E2E  
                __end_of_IncreaseByAMonth 2B4A                          ___awmod@dividend 0068  
                      _EUSART1_Initialize 2E58                  ??_PIN_MANAGER_Initialize 0060  
              __size_of_SYSTEM_Initialize 0014        LoadStatesFromEeprom@AddAudioNormal 006B  
                   _AUDIO_SPECIAL_ON_TIME 0057                      end_of_initialization 2734  
       _NORMAL_AUDIO_STATE_ON_OFF_COUNTER 004E                 __end_of_IncreaseByASecond 2A68  
                     ?_EUSART1_Initialize 0001                           WriteEeprom@Data 0062  
                         _DAY_LIGHT_START 00D8                                   postdec1 000FE5  
                                 postdec2 000FDD          _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME 00CC  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0012  
                    _AdjustDayLightSaving 1CF0                      ??_EUSART1_Initialize 0060  
                               _TIME_ZONE 00DE                     __CFG_WDTCPS$WDTCPS_31 000000  
                _TMR0_SetInterruptHandler 2ED6                             _BLINK_ON_TIME 005C  
                __size_of_ReadGPSDateTime 00D6                        _VerifyForGPSOnTIme 2B94  
                               _TRISAbits 000F88             LoadSettingsFromEeprom@Address 006C  
                   LoadCyclesFromEeprom@i 0071                     LoadCyclesFromEeprom@j 006F  
                               i2___lwmod 2C5A                       ?_VerifyForGPSOnTIme 0001  
                       DecreaseByAYear@dt 0065                         _LoadAllFromEeprom 2EB8  
                       _ReadGPS_DATE_TIME 172A                              _EUSART1_Read 2E94  
                             _SwitchOnGPS 2E14                           _DecreaseByAYear 2D70  
                      ?_LoadAllFromEeprom 0001                        ?_ReadGPS_DATE_TIME 0001  
                 DecreaseByADay@MonthDays 0087                            __end_of_GetDay 1F04  
                            ??_ReadEeprom 0062                      _timer0ReloadVal16bit 004B  
                        ??_GetEventNumber 0066                     ?_AdjustDayLightSaving 0089  
                        IncreaseByADay@dt 007B              __end_of_INTERRUPT_Initialize 2EF6  
                __end_of_ValidateDateTime 22A8                       ??_LoadAllFromEeprom 007C  
                             _WriteEeprom 2D3E                        i2_IncreaseByAMonth 2B4A  
                          __end_of___lmul 2AB4                       ??_ReadGPS_DATE_TIME 009A  
                        ?_Lcd_Delay5500us 0001                             __pidataBIGRAM 0F0A  
                          __end_of___wmul 2DF8                      ??_VerifyForGPSOnTIme 0060  
                           __pidataCOMRAM 2EF6                         __size_of_TMR0_ISR 000E  
                       ?_DecreaseByAMonth 0070                    ?_OSCILLATOR_Initialize 0001  
                     ?i2_IncreaseByAMonth 0011                        ??_DecreaseByAMonth 007B  
                             __end_ofPL10 22BC                               __end_ofPL20 14E0  
                             __end_ofPL12 1FE2                               __end_ofPL30 1CBC  
                             __end_ofPL22 1504                               __end_ofPL14 1A46  
                             __end_ofPL40 210E                               __end_ofPL32 22C6  
                             __end_ofPL24 1CAE                               __end_ofPL16 1F0E  
                             __end_ofPL50 1CDC                               __end_ofPL42 1CD2  
                             __end_ofPL34 22D0                               __end_ofPL26 2002  
                             __end_ofPL18 1C9E                               __end_ofPL60 21F2  
                             __end_ofPL52 22E8                               __end_ofPL44 22DC  
                             __end_ofPL36 2470                               __end_ofPL28 1516  
                             __end_ofPL70 18D8                               __end_ofPL62 2014  
                             __end_ofPL54 24A0                               __end_ofPL46 2492  
                             __end_ofPL38 2488                               __end_ofPL80 24BC  
                             __end_ofPL72 2116                               __end_ofPL64 1CF0  
                             __end_ofPL56 1A54                               __end_ofPL48 152C  
                             __end_ofPL90 27D4                               __end_ofPL82 22F2  
                             __end_ofPL74 1F1A                               __end_ofPL66 24B2  
                             __end_ofPL58 200C                               __end_ofPL92 27DE  
                             __end_ofPL84 2022                               __end_ofPL76 1A72  
                             __end_ofPL68 1A66                               __end_ofPL94 21FC  
                             __end_ofPL86 154A                               __end_ofPL78 153C  
                             __end_ofPL96 259E                               __end_ofPL88 1554  
                             __end_ofPL98 1F24                       start_initialization 2674  
                 __size_of_DecreaseByADay 00CE                             _PRESENT_EVENT 005E  
                __size_of_TMR0_Initialize 0040           __size_of_PIN_MANAGER_Initialize 0066  
                           _PRESENT_STATE 0054                      _BLINK_LAST_X_SECONDS 005A  
           __end_ofReadGPSDateTime@F11464 0F08                        __end_of_ReadEeprom 2E80  
                              ?i2___lwmod 0001                 __end_of_LoadAllFromEeprom 2EC8  
                       __size_of_Lcd_Init 008C                __size_of_IncreaseByASecond 005C  
               __end_of_ReadGPS_DATE_TIME 18CC                        WriteEeprom@Address 0063  
            _TIME_WHEN_GPS_IS_SWITCHED_ON 00C8                      _AUDIO_NORMAL_ON_TIME 0059  
                                ??_GetDay 006F                      _LoadCyclesFromEeprom 1A84  
                    ??i2_IncreaseByAMonth 001C        _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER 004D  
                ??_LoadSettingsFromEeprom 0066                      i2IncreaseByAMonth@dt 0011  
                        __CFG_LPBOREN$OFF 000000                                  ??___lmul 0068  
            __end_of_LoadEventsFromEeprom 1C74                                  ??___wmul 0064  
                  __size_of_TMR0_CallBack 001C                               __pdataBANK0 00E4  
                             __pdataBANK1 0144                             _DAY_LIGHT_END 00D4  
                             __pbssBIGRAM 06EF                      __size_of_Lcd_Command 0080  
                ReadGPSDateTime@StartCode 0066                               __pbssCOMRAM 004B  
                           __pcstackBANK0 0060                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                   __end_of_DecreaseByAYear 2DA2  
                       ??_ReadGPSDateTime 0062                VerifyForGPSOnTIme@TimeDiff 0060  
                            ?_Timer0_10ms 0001                     ?_LoadCyclesFromEeprom 0001  
                                ?_ReadGPS 0001                     _TMR0_InterruptHandler 00DC  
                __size_of_TMR0_StartTimer 0004         LoadStatesFromEeprom@TempNormalAdd 006F  
                  _PIN_MANAGER_Initialize 29A6                    ??_AdjustDayLightSaving 0094  
                               __pintcode 0008                   ??_TestGPSStartCondition 0060  
                                ?_StopGPS 0001                                  ?___awdiv 0060  
                                ?___awmod 0068                                  ?___lwmod 0060  
                       _GPS_SYNC_AT_START 00E3                    _NO_OF_TIMES_GPS_FAILED 00E2  
            ??_INTERRUPT_InterruptManager 0041                 __size_ofi2_IncreaseByADay 00DC  
                                _BAUD1CON 000F9F                               __smallconst 0F00  
                            Timer0_10ms@i 003D               LoadEventsFromEeprom@Address 006C  
                       ?_IncreaseByAMonth 0070                  __size_of_IncreaseByAYear 002E  
                      ??_IncreaseByAMonth 007B                             _TMR0_CallBack 2DF8  
           __size_of_LoadStatesFromEeprom 015E                               ??i2___lwmod 0005  
              __size_of_LoadAllFromEeprom 0010                      _INTERRUPT_Initialize 2EF2  
              __size_of_ReadGPS_DATE_TIME 01A2                 __size_of_TimeTextToSecond 00D6  
                       ??_TMR0_Initialize 0062                          ReadGPSDateTime@i 006D  
                          ___wmul@product 0064                                  _LATAbits 000F83  
                         GetEventNumber@i 006F                                  _LATCbits 000F85  
                                _PIE0bits 000EC2                       __CFG_BORV$VBOR_2P45 000000  
         __size_of_LoadSettingsFromEeprom 01CC                                  i2u210_41 2B78  
                                i2u203_41 2CF6                                  i2u211_41 2B8A  
                                i2u230_41 23C4       __size_of_INTERRUPT_InterruptManager 0062  
                                i2u209_41 2B66                                  i2u234_41 2A3A  
                                i2u235_41 2A4C                                  i2u228_41 23A0  
                                i2u236_41 2A5E                ??_TMR0_SetInterruptHandler 0062  
                                i2u229_41 23B2                                  i2u327_41 1436  
                                _PIR0bits 000ECA                                  i2u328_41 1448  
                                _PIR3bits 000ECD                       ReadGPSDateTime@Date 0060  
                     ReadGPSDateTime@Time 0061                                  _TMR0_ISR 2EC8  
                    TimeTextToSecond@Time 006C                              Lcd_Init@data 0063  
                       ___wmul@multiplier 0060                            _DecreaseByADay 2116  
                                _Lcd_Init 273E                            ?_TMR0_CallBack 0001  
                       i2_IncreaseByAYear 2CD0                               _EE_Settings 02F0  
                       ___lmul@multiplier 0060                                 copy_data0 2688  
                               copy_data1 26AC                                 copy_data2 26CC  
                   ?_INTERRUPT_Initialize 0001                          ?_DecreaseByAYear 0065  
                    _LoadEventsFromEeprom 1BCA                        ?i2_IncreaseByAYear 0006  
                  ??_LoadCyclesFromEeprom 0066                   _STATE_SECONDS_REMAINING 0051  
                            ?_SwitchOnGPS 0001                     ReadGPS_DATE_TIME@Date 00A5  
                        __size_of_ReadGPS 006A                             _STATE_SECONDS 0052  
                                __Hrparam 0000                       ??i2_IncreaseByAYear 0011  
                   ReadGPS_DATE_TIME@Time 009E                   __CFG_RSTOSC$EXTOSC_4PLL 000000  
                     i2IncreaseByAYear@dt 0006                                  __Lrparam 0000  
                 ReadGPSDateTime@TempChar 0070                        __CFG_BOREN$SBORDIS 000000  
                 ??_OSCILLATOR_Initialize 0060                              ?_WriteEeprom 0060  
                        __size_of_StopGPS 0006                         ??_TMR0_StartTimer 0060  
                       ?_ValidateDateTime 0060                          __size_of___awdiv 0078  
                        __size_of___awmod 0068               __size_of_EUSART1_Initialize 0014  
                        __size_of___lwmod 003E                        ??_ValidateDateTime 0062  
                  __end_of_DecreaseByADay 21E4                             ?_Lcd_Delay5us 0001  
                  _LoadSettingsFromEeprom 1554                                _T0CON0bits 000FD5  
               __end_ofi2_IncreaseByAYear 2D00                                  __ptext10 29A6  
                                __ptext11 2E2E                                  __ptext20 1E14  
                                __ptext12 2EF2                                  __ptext21 293E  
                                __ptext13 28D4                                  __ptext30 2C1C  
                                __ptext22 2E58                                  __ptext14 172A  
                                __ptext31 2EB8                                  __ptext23 1CF0  
                                __ptext15 2206                                  __ptext40 23D8  
                                __ptext32 18D8                                  __ptext24 24BC  
                                __ptext16 2022                                  __ptext41 2EE0  
                                __ptext33 285C                                  __ptext25 2B00  
                                __ptext17 2A68                                  __ptext50 22F2  
                                __ptext42 1F24                                  __ptext34 1554  
                                __ptext26 2D08                                  __ptext18 259E  
                                __ptext51 2B4A                                  __ptext43 2DD2  
                                __ptext35 1BCA                                  __ptext27 2116  
                                __ptext19 2E94                                  __ptext52 2CD0  
                                __ptext36 1A84                                  __ptext28 2AB4  
                                __ptext53 2C5A                                  __ptext45 2EC8  
                                __ptext37 2E6C                                  __ptext29 2D70  
                                __ptext54 0000                                  __ptext46 2DF8  
                                __ptext38 273E                                  __ptext47 2EF8  
                                __ptext39 2EA6                                  __ptext48 130A  
                                __ptext49 2A0C                     ?_LoadEventsFromEeprom 0001  
                   LoadStatesFromEeprom@i 007A                     LoadStatesFromEeprom@j 0074  
               __size_of_DecreaseByAMonth 004C                   __size_of_IncreaseByADay 00D8  
                           __size_of_main 007E                         ??_IncreaseByAYear 0070  
    __end_of_TMR0_DefaultInterruptHandler 2EFA     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 2EF8                      __CFG_WDTCWS$WDTCWS_7 000000  
                    __size_of_Timer0_10ms 01C0                                _RC1STAbits 000F9D  
                  _AUDIO_SPECIAL_OFF_TIME 0056                        ReadGPSDateTime@Pos 0071  
                                int$flags 005F        __end_of_INTERRUPT_InterruptManager 006A  
              _INTERRUPT_InterruptManager 0008               __size_of_VerifyForGPSOnTIme 0048  
     LoadStatesFromEeprom@AddAudioSpecial 006D                            ??_Lcd_Delay5us 0060  
                        i2_IncreaseByADay 22F2                 Timer0_10ms@OutForThePorts 003B  
             PIN_MANAGER_Initialize@state 0060                           ?_DecreaseByADay 007B  
                      i2IncreaseByADay@dt 001C                           _ReadGPSDateTime 259E  
                              _INTCONbits 000FF2                           ??_TMR0_CallBack 0041  
                             _NVMCON1bits 000F81                                GetDay@Date 006E  
                __size_of_Lcd_Delay5500us 0012                   IncreaseByADay@MonthDays 0088  
                  ??_INTERRUPT_Initialize 0060                                  intlevel2 0000  
                        _TimeTextToSecond 2022                     ReadGPSDateTime@F11464 0F01  
                        ___lwmod@dividend 0060                   ?_PIN_MANAGER_Initialize 0001  
                       __CFG_CLKOUTEN$OFF 000000                                _NEXT_EVENT 005D  
                             _PPSLOCKbits 000EA0               __size_ofi2_IncreaseByAMonth 004A  
                              _NEXT_STATE 0053        LoadStatesFromEeprom@TempSpecialAdd 0071  
           ?_TMR0_DefaultInterruptHandler 0001            __size_of_TestGPSStartCondition 0038  
                   ReadGPSDateTime@Commas 006F             __end_of_TestGPSStartCondition 2CD0  
                           ??_Lcd_Command 0060                _BLINK_STATE_ON_OFF_COUNTER 004F  
                              _RX1PPSbits 000EB5                           ___lwmod@divisor 0062  
                         _TMR0_Initialize 2BDC                           ___lwmod@counter 0064  
                 __size_of_GetEventNumber 00AE                __size_ofi2_IncreaseByAYear 0030  
                          _BLINK_OFF_TIME 005B                    ??_LoadEventsFromEeprom 0066  
          __end_of_PIN_MANAGER_Initialize 2A0C                    TimeTextToSecond@Second 0080  
               __size_of_IncreaseByAMonth 004A                      __size_of_SwitchOnGPS 001A  
