

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Fri Jul 14 16:55:13 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    60                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    61                           	psect	pa_nodes0,global,class=CODE,delta=1
    62  0000                     
    63                           ; Version 1.42
    64                           ; Generated 13/04/2017 GMT
    65                           ; 
    66                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    67                           ; All rights reserved.
    68                           ; 
    69                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    70                           ; 
    71                           ; Redistribution and use in source and binary forms, with or without modification, are
    72                           ; permitted provided that the following conditions are met:
    73                           ; 
    74                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    75                           ;        conditions and the following disclaimer.
    76                           ; 
    77                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    78                           ;        of conditions and the following disclaimer in the documentation and/or other
    79                           ;        materials provided with the distribution.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC18F26K40 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     tosu	equ	0xFFF
    98                           tosh	equ	0xFFE
    99                           tosl	equ	0xFFD
   100                           pclath	equ	0xFFA
   101                           tblptru	equ	0xFF8
   102                           tblptrh	equ	0xFF7
   103                           tblptrl	equ	0xFF6
   104                           tablat	equ	0xFF5
   105                           prodh	equ	0xFF4
   106                           prodl	equ	0xFF3
   107                           intcon	equ	0xFF2
   108                           wreg	equ	0xFE8
   109                           indf1	equ	0xFE7
   110                           postinc1	equ	0xFE6
   111                           plusw1	equ	0xFE3
   112                           fsr1h	equ	0xFE2
   113                           fsr1l	equ	0xFE1
   114                           indf2	equ	0xFDF
   115                           postinc2	equ	0xFDE
   116                           postdec2	equ	0xFDD
   117                           plusw2	equ	0xFDB
   118                           fsr2h	equ	0xFDA
   119                           fsr2l	equ	0xFD9
   120                           status	equ	0xFD8
   121                           
   122                           	psect	idataCOMRAM
   123  0021BC                     __pidataCOMRAM:
   124                           	opt stack 0
   125                           
   126                           ;initializer for main@F11394
   127  0021BC  2D                 	db	45
   128  0021BD  2D                 	db	45
   129  0021BE  2D                 	db	45
   130  0021BF  2D                 	db	45
   131  0021C0  2D                 	db	45
   132  0021C1  2D                 	db	45
   133  0021C2  00                 	db	0
   134                           
   135                           ;initializer for main@F11392
   136  0021C3  2D                 	db	45
   137  0021C4  2D                 	db	45
   138  0021C5  2D                 	db	45
   139  0021C6  2D                 	db	45
   140  0021C7  2D                 	db	45
   141  0021C8  2D                 	db	45
   142  0021C9  00                 	db	0
   143                           tosu	equ	0xFFF
   144                           tosh	equ	0xFFE
   145                           tosl	equ	0xFFD
   146                           pclath	equ	0xFFA
   147                           tblptru	equ	0xFF8
   148                           tblptrh	equ	0xFF7
   149                           tblptrl	equ	0xFF6
   150                           tablat	equ	0xFF5
   151                           prodh	equ	0xFF4
   152                           prodl	equ	0xFF3
   153                           intcon	equ	0xFF2
   154                           wreg	equ	0xFE8
   155                           indf1	equ	0xFE7
   156                           postinc1	equ	0xFE6
   157                           plusw1	equ	0xFE3
   158                           fsr1h	equ	0xFE2
   159                           fsr1l	equ	0xFE1
   160                           indf2	equ	0xFDF
   161                           postinc2	equ	0xFDE
   162                           postdec2	equ	0xFDD
   163                           plusw2	equ	0xFDB
   164                           fsr2h	equ	0xFDA
   165                           fsr2l	equ	0xFD9
   166                           status	equ	0xFD8
   167                           
   168                           	psect	idataBANK0
   169  00211E                     __pidataBANK0:
   170                           	opt stack 0
   171                           
   172                           ;initializer for GetDay@t
   173  00211E  0000               	dw	0
   174  002120  0003               	dw	3
   175  002122  0002               	dw	2
   176  002124  0005               	dw	5
   177  002126  0000               	dw	0
   178  002128  0003               	dw	3
   179  00212A  0005               	dw	5
   180  00212C  0001               	dw	1
   181  00212E  0004               	dw	4
   182  002130  0006               	dw	6
   183  002132  0002               	dw	2
   184  002134  0004               	dw	4
   185                           tosu	equ	0xFFF
   186                           tosh	equ	0xFFE
   187                           tosl	equ	0xFFD
   188                           pclath	equ	0xFFA
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           prodh	equ	0xFF4
   194                           prodl	equ	0xFF3
   195                           intcon	equ	0xFF2
   196                           wreg	equ	0xFE8
   197                           indf1	equ	0xFE7
   198                           postinc1	equ	0xFE6
   199                           plusw1	equ	0xFE3
   200                           fsr1h	equ	0xFE2
   201                           fsr1l	equ	0xFE1
   202                           indf2	equ	0xFDF
   203                           postinc2	equ	0xFDE
   204                           postdec2	equ	0xFDD
   205                           plusw2	equ	0xFDB
   206                           fsr2h	equ	0xFDA
   207                           fsr2l	equ	0xFD9
   208                           status	equ	0xFD8
   209                           
   210                           	psect	smallconst
   211  000F00                     __psmallconst:
   212                           	opt stack 0
   213  000F00  00                 	db	0
   214  000F01                     ReadGPSDateTime@F11401:
   215                           	opt stack 0
   216  000F01  24                 	db	36
   217  000F02  47                 	db	71
   218  000F03  50                 	db	80
   219  000F04  52                 	db	82
   220  000F05  4D                 	db	77
   221  000F06  43                 	db	67
   222  000F07  2C                 	db	44
   223  000F08                     __end_ofReadGPSDateTime@F11401:
   224                           	opt stack 0
   225  0000                     _OSCTUNE	set	3805
   226  0000                     _OSCFRQ	set	3806
   227  0000                     _OSCEN	set	3804
   228  0000                     _OSCCON3	set	3802
   229  0000                     _OSCCON1	set	3800
   230  0000                     _RC6PPS	set	3837
   231  0000                     _RX1PPSbits	set	3765
   232  0000                     _PPSLOCKbits	set	3744
   233  0000                     _PPSLOCK	set	3744
   234  0000                     _PIR0bits	set	3786
   235  0000                     _PIE0bits	set	3778
   236  0000                     _PIR3bits	set	3789
   237  0000                     _PLLR	set	30424
   238  0000                     _ODCONC	set	3871
   239  0000                     _ODCONB	set	3863
   240  0000                     _ODCONA	set	3855
   241  0000                     _WPUC	set	3872
   242  0000                     _WPUA	set	3856
   243  0000                     _WPUB	set	3864
   244  0000                     _WPUE	set	3885
   245  0000                     _ANSELA	set	3857
   246  0000                     _ANSELB	set	3865
   247  0000                     _ANSELC	set	3873
   248  0000                     _LATCbits	set	3973
   249  0000                     _T0CON0bits	set	4053
   250  0000                     _TMR0L	set	4051
   251  0000                     _TMR0H	set	4052
   252  0000                     _T0CON1	set	4054
   253  0000                     _T0CON0	set	4053
   254  0000                     _TRISC	set	3978
   255  0000                     _TRISB	set	3977
   256  0000                     _TRISA	set	3976
   257  0000                     _LATC	set	3973
   258  0000                     _LATB	set	3972
   259  0000                     _LATA	set	3971
   260  0000                     _INTCONbits	set	4082
   261  0000                     _RC1REG	set	3993
   262  0000                     _RC1STAbits	set	3997
   263  0000                     _SP1BRGH	set	3996
   264  0000                     _SP1BRGL	set	3995
   265  0000                     _TX1STA	set	3998
   266  0000                     _RC1STA	set	3997
   267  0000                     _BAUD1CON	set	3999
   268  0000                     _NVMDAT	set	3968
   269  0000                     _NVMADRH	set	3967
   270  0000                     _NVMADRL	set	3966
   271  0000                     _NVMCON1bits	set	3969
   272  0000                     _LATAbits	set	3971
   273  0000                     _TRISAbits	set	3976
   274  0000                     _GIE	set	32663
   275  000F08                     STR_4:
   276                           
   277                           ; BSR set to: 14
   278  000F08  3A                 	db	58	;':'
   279  000F09  28                 	db	40
   280  000F0A  00                 	db	0
   281  000F0B                     STR_3:
   282                           
   283                           ; BSR set to: 14
   284  000F0B  3A                 	db	58	;':'
   285  000F0C  29                 	db	41
   286  000F0D  00                 	db	0
   287  000F0E                     STR_2:
   288                           
   289                           ; BSR set to: 14
   290  000F0E  2D                 	db	45
   291  000F0F  2D                 	db	45
   292  000F10  00                 	db	0
   293  0000                     
   294                           ; #config settings
   295  000F11  00                 	db	0	; dummy byte at the end
   296  0000                     tosu	equ	0xFFF
   297                           tosh	equ	0xFFE
   298                           tosl	equ	0xFFD
   299                           pclath	equ	0xFFA
   300                           tblptru	equ	0xFF8
   301                           tblptrh	equ	0xFF7
   302                           tblptrl	equ	0xFF6
   303                           tablat	equ	0xFF5
   304                           prodh	equ	0xFF4
   305                           prodl	equ	0xFF3
   306                           intcon	equ	0xFF2
   307                           wreg	equ	0xFE8
   308                           indf1	equ	0xFE7
   309                           postinc1	equ	0xFE6
   310                           plusw1	equ	0xFE3
   311                           fsr1h	equ	0xFE2
   312                           fsr1l	equ	0xFE1
   313                           indf2	equ	0xFDF
   314                           postinc2	equ	0xFDE
   315                           postdec2	equ	0xFDD
   316                           plusw2	equ	0xFDB
   317                           fsr2h	equ	0xFDA
   318                           fsr2l	equ	0xFD9
   319                           status	equ	0xFD8
   320                           
   321                           	psect	cinit
   322  001C9E                     __pcinit:
   323                           	opt stack 0
   324  001C9E                     start_initialization:
   325                           	opt stack 0
   326  001C9E                     __initialization:
   327                           	opt stack 0
   328                           
   329                           ; Initialize objects allocated to BANK0 (24 bytes)
   330                           ; load TBLPTR registers with __pidataBANK0
   331  001C9E  0E1E               	movlw	low __pidataBANK0
   332  001CA0  6EF6               	movwf	tblptrl,c
   333  001CA2  0E21               	movlw	high __pidataBANK0
   334  001CA4  6EF7               	movwf	tblptrh,c
   335  001CA6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   336  001CA8  6EF8               	movwf	tblptru,c
   337  001CAA  EE00  F0A4         	lfsr	0,__pdataBANK0
   338  001CAE  EE10 F018          	lfsr	1,24
   339  001CB2                     copy_data0:
   340  001CB2  0009               	tblrd		*+
   341  001CB4  CFF5 FFEE          	movff	tablat,postinc0
   342  001CB8  50E5               	movf	postdec1,w,c
   343  001CBA  50E1               	movf	fsr1l,w,c
   344  001CBC  E1FA               	bnz	copy_data0
   345                           
   346                           ; Initialize objects allocated to COMRAM (14 bytes)
   347                           ; load TBLPTR registers with __pidataCOMRAM
   348  001CBE  0EBC               	movlw	low __pidataCOMRAM
   349  001CC0  6EF6               	movwf	tblptrl,c
   350  001CC2  0E21               	movlw	high __pidataCOMRAM
   351  001CC4  6EF7               	movwf	tblptrh,c
   352  001CC6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   353  001CC8  6EF8               	movwf	tblptru,c
   354  001CCA  EE00  F035         	lfsr	0,__pdataCOMRAM
   355  001CCE  EE10 F00E          	lfsr	1,14
   356  001CD2                     copy_data1:
   357  001CD2  0009               	tblrd		*+
   358  001CD4  CFF5 FFEE          	movff	tablat,postinc0
   359  001CD8  50E5               	movf	postdec1,w,c
   360  001CDA  50E1               	movf	fsr1l,w,c
   361  001CDC  E1FA               	bnz	copy_data1
   362                           
   363                           ; Clear objects allocated to BIGRAM (960 bytes)
   364  001CDE  EE01  F0F0         	lfsr	0,__pbssBIGRAM
   365  001CE2  EE13 F0C0          	lfsr	1,960
   366  001CE6                     clear_0:
   367  001CE6  6AEE               	clrf	postinc0,c
   368  001CE8  50E5               	movf	postdec1,w,c
   369  001CEA  50E1               	movf	fsr1l,w,c
   370  001CEC  E1FC               	bnz	clear_0
   371  001CEE  50E2               	movf	fsr1h,w,c
   372  001CF0  E1FA               	bnz	clear_0
   373                           
   374                           ; Clear objects allocated to BANK1 (240 bytes)
   375  001CF2  EE01  F000         	lfsr	0,__pbssBANK1
   376  001CF6  0EF0               	movlw	240
   377  001CF8                     clear_1:
   378  001CF8  6AEE               	clrf	postinc0,c
   379  001CFA  06E8               	decf	wreg,f,c
   380  001CFC  E1FD               	bnz	clear_1
   381                           
   382                           ; Clear objects allocated to BANK0 (68 bytes)
   383  001CFE  EE00  F060         	lfsr	0,__pbssBANK0
   384  001D02  0E44               	movlw	68
   385  001D04                     clear_2:
   386  001D04  6AEE               	clrf	postinc0,c
   387  001D06  06E8               	decf	wreg,f,c
   388  001D08  E1FD               	bnz	clear_2
   389                           
   390                           ; Clear objects allocated to COMRAM (12 bytes)
   391  001D0A  EE00  F043         	lfsr	0,__pbssCOMRAM
   392  001D0E  0E0C               	movlw	12
   393  001D10                     clear_3:
   394  001D10  6AEE               	clrf	postinc0,c
   395  001D12  06E8               	decf	wreg,f,c
   396  001D14  E1FD               	bnz	clear_3
   397  001D16                     end_of_initialization:
   398                           	opt stack 0
   399  001D16                     __end_of__initialization:
   400                           	opt stack 0
   401  001D16  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   402  001D18  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   403  001D1A  0100               	movlb	0
   404  001D1C  EF2F  F00A         	goto	_main	;jump to C main() function
   405                           tosu	equ	0xFFF
   406                           tosh	equ	0xFFE
   407                           tosl	equ	0xFFD
   408                           pclath	equ	0xFFA
   409                           tblptru	equ	0xFF8
   410                           tblptrh	equ	0xFF7
   411                           tblptrl	equ	0xFF6
   412                           tablat	equ	0xFF5
   413                           prodh	equ	0xFF4
   414                           prodl	equ	0xFF3
   415                           intcon	equ	0xFF2
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           indf1	equ	0xFE7
   419                           postinc1	equ	0xFE6
   420                           postdec1	equ	0xFE5
   421                           plusw1	equ	0xFE3
   422                           fsr1h	equ	0xFE2
   423                           fsr1l	equ	0xFE1
   424                           indf2	equ	0xFDF
   425                           postinc2	equ	0xFDE
   426                           postdec2	equ	0xFDD
   427                           plusw2	equ	0xFDB
   428                           fsr2h	equ	0xFDA
   429                           fsr2l	equ	0xFD9
   430                           status	equ	0xFD8
   431                           
   432                           	psect	bssCOMRAM
   433  000043                     __pbssCOMRAM:
   434                           	opt stack 0
   435  000043                     TMR0_ISR@CountCallBack:
   436                           	opt stack 0
   437  000043                     	ds	2
   438  000045                     _TMR0_InterruptHandler:
   439                           	opt stack 0
   440  000045                     	ds	2
   441  000047                     _timer0ReloadVal16bit:
   442                           	opt stack 0
   443  000047                     	ds	2
   444  000049                     _DAY_LIGHT_END:
   445                           	opt stack 0
   446  000049                     	ds	2
   447  00004B                     _DAY_LIGHT_START:
   448                           	opt stack 0
   449  00004B                     	ds	2
   450  00004D                     _GLOBAL_I:
   451                           	opt stack 0
   452  00004D                     	ds	2
   453                           tosu	equ	0xFFF
   454                           tosh	equ	0xFFE
   455                           tosl	equ	0xFFD
   456                           pclath	equ	0xFFA
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           prodh	equ	0xFF4
   462                           prodl	equ	0xFF3
   463                           intcon	equ	0xFF2
   464                           postinc0	equ	0xFEE
   465                           wreg	equ	0xFE8
   466                           indf1	equ	0xFE7
   467                           postinc1	equ	0xFE6
   468                           postdec1	equ	0xFE5
   469                           plusw1	equ	0xFE3
   470                           fsr1h	equ	0xFE2
   471                           fsr1l	equ	0xFE1
   472                           indf2	equ	0xFDF
   473                           postinc2	equ	0xFDE
   474                           postdec2	equ	0xFDD
   475                           plusw2	equ	0xFDB
   476                           fsr2h	equ	0xFDA
   477                           fsr2l	equ	0xFD9
   478                           status	equ	0xFD8
   479                           
   480                           	psect	dataCOMRAM
   481  000035                     __pdataCOMRAM:
   482                           	opt stack 0
   483  000035                     main@F11394:
   484                           	opt stack 0
   485  000035                     	ds	7
   486  00003C                     main@F11392:
   487                           	opt stack 0
   488  00003C                     	ds	7
   489                           tosu	equ	0xFFF
   490                           tosh	equ	0xFFE
   491                           tosl	equ	0xFFD
   492                           pclath	equ	0xFFA
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           prodh	equ	0xFF4
   498                           prodl	equ	0xFF3
   499                           intcon	equ	0xFF2
   500                           postinc0	equ	0xFEE
   501                           wreg	equ	0xFE8
   502                           indf1	equ	0xFE7
   503                           postinc1	equ	0xFE6
   504                           postdec1	equ	0xFE5
   505                           plusw1	equ	0xFE3
   506                           fsr1h	equ	0xFE2
   507                           fsr1l	equ	0xFE1
   508                           indf2	equ	0xFDF
   509                           postinc2	equ	0xFDE
   510                           postdec2	equ	0xFDD
   511                           plusw2	equ	0xFDB
   512                           fsr2h	equ	0xFDA
   513                           fsr2l	equ	0xFD9
   514                           status	equ	0xFD8
   515                           
   516                           	psect	bssBANK0
   517  000060                     __pbssBANK0:
   518                           	opt stack 0
   519  000060                     _CYCLES:
   520                           	opt stack 0
   521  000060                     	ds	68
   522                           tosu	equ	0xFFF
   523                           tosh	equ	0xFFE
   524                           tosl	equ	0xFFD
   525                           pclath	equ	0xFFA
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           prodh	equ	0xFF4
   531                           prodl	equ	0xFF3
   532                           intcon	equ	0xFF2
   533                           postinc0	equ	0xFEE
   534                           wreg	equ	0xFE8
   535                           indf1	equ	0xFE7
   536                           postinc1	equ	0xFE6
   537                           postdec1	equ	0xFE5
   538                           plusw1	equ	0xFE3
   539                           fsr1h	equ	0xFE2
   540                           fsr1l	equ	0xFE1
   541                           indf2	equ	0xFDF
   542                           postinc2	equ	0xFDE
   543                           postdec2	equ	0xFDD
   544                           plusw2	equ	0xFDB
   545                           fsr2h	equ	0xFDA
   546                           fsr2l	equ	0xFD9
   547                           status	equ	0xFD8
   548                           
   549                           	psect	dataBANK0
   550  0000A4                     __pdataBANK0:
   551                           	opt stack 0
   552  0000A4                     GetDay@t:
   553                           	opt stack 0
   554  0000A4                     	ds	24
   555                           tosu	equ	0xFFF
   556                           tosh	equ	0xFFE
   557                           tosl	equ	0xFFD
   558                           pclath	equ	0xFFA
   559                           tblptru	equ	0xFF8
   560                           tblptrh	equ	0xFF7
   561                           tblptrl	equ	0xFF6
   562                           tablat	equ	0xFF5
   563                           prodh	equ	0xFF4
   564                           prodl	equ	0xFF3
   565                           intcon	equ	0xFF2
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           indf1	equ	0xFE7
   569                           postinc1	equ	0xFE6
   570                           postdec1	equ	0xFE5
   571                           plusw1	equ	0xFE3
   572                           fsr1h	equ	0xFE2
   573                           fsr1l	equ	0xFE1
   574                           indf2	equ	0xFDF
   575                           postinc2	equ	0xFDE
   576                           postdec2	equ	0xFDD
   577                           plusw2	equ	0xFDB
   578                           fsr2h	equ	0xFDA
   579                           fsr2l	equ	0xFD9
   580                           status	equ	0xFD8
   581                           
   582                           	psect	bssBANK1
   583  000100                     __pbssBANK1:
   584                           	opt stack 0
   585  000100                     _EVENTS:
   586                           	opt stack 0
   587  000100                     	ds	240
   588                           tosu	equ	0xFFF
   589                           tosh	equ	0xFFE
   590                           tosl	equ	0xFFD
   591                           pclath	equ	0xFFA
   592                           tblptru	equ	0xFF8
   593                           tblptrh	equ	0xFF7
   594                           tblptrl	equ	0xFF6
   595                           tablat	equ	0xFF5
   596                           prodh	equ	0xFF4
   597                           prodl	equ	0xFF3
   598                           intcon	equ	0xFF2
   599                           postinc0	equ	0xFEE
   600                           wreg	equ	0xFE8
   601                           indf1	equ	0xFE7
   602                           postinc1	equ	0xFE6
   603                           postdec1	equ	0xFE5
   604                           plusw1	equ	0xFE3
   605                           fsr1h	equ	0xFE2
   606                           fsr1l	equ	0xFE1
   607                           indf2	equ	0xFDF
   608                           postinc2	equ	0xFDE
   609                           postdec2	equ	0xFDD
   610                           plusw2	equ	0xFDB
   611                           fsr2h	equ	0xFDA
   612                           fsr2l	equ	0xFD9
   613                           status	equ	0xFD8
   614                           
   615                           	psect	bssBIGRAM
   616  0001F0                     __pbssBIGRAM:
   617                           	opt stack 0
   618  0001F0                     _STATES:
   619                           	opt stack 0
   620  0001F0                     	ds	960
   621                           tosu	equ	0xFFF
   622                           tosh	equ	0xFFE
   623                           tosl	equ	0xFFD
   624                           pclath	equ	0xFFA
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           prodh	equ	0xFF4
   630                           prodl	equ	0xFF3
   631                           intcon	equ	0xFF2
   632                           postinc0	equ	0xFEE
   633                           wreg	equ	0xFE8
   634                           indf1	equ	0xFE7
   635                           postinc1	equ	0xFE6
   636                           postdec1	equ	0xFE5
   637                           plusw1	equ	0xFE3
   638                           fsr1h	equ	0xFE2
   639                           fsr1l	equ	0xFE1
   640                           indf2	equ	0xFDF
   641                           postinc2	equ	0xFDE
   642                           postdec2	equ	0xFDD
   643                           plusw2	equ	0xFDB
   644                           fsr2h	equ	0xFDA
   645                           fsr2l	equ	0xFD9
   646                           status	equ	0xFD8
   647                           
   648                           	psect	cstackCOMRAM
   649  000001                     __pcstackCOMRAM:
   650                           	opt stack 0
   651  000001                     ?i2___awmod:
   652                           	opt stack 0
   653  000001                     i2___awmod@dividend:
   654                           	opt stack 0
   655                           
   656                           ; 2 bytes @ 0x0
   657  000001                     	ds	2
   658  000003                     i2___awmod@divisor:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x2
   662  000003                     	ds	2
   663  000005                     i2___awmod@counter:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x4
   667  000005                     	ds	1
   668  000006                     i2___awmod@sign:
   669                           	opt stack 0
   670                           
   671                           ; 1 bytes @ 0x5
   672  000006                     	ds	1
   673  000007                     ??_INTERRUPT_InterruptManager:
   674                           
   675                           ; 1 bytes @ 0x6
   676  000007                     	ds	2
   677  000009                     ??_Lcd_CharCP:
   678  000009                     ??_Lcd_Delay5500us:
   679  000009                     ??_Lcd_Command:
   680  000009                     ?___wmul:
   681                           	opt stack 0
   682  000009                     ?___awdiv:
   683                           	opt stack 0
   684  000009                     ?___lmul:
   685                           	opt stack 0
   686  000009                     ?___aldiv:
   687                           	opt stack 0
   688  000009                     ReadGPSDateTime@Date:
   689                           	opt stack 0
   690  000009                     ValidateDateTime@Date:
   691                           	opt stack 0
   692  000009                     PIN_MANAGER_Initialize@state:
   693                           	opt stack 0
   694  000009                     ___lbdiv@divisor:
   695                           	opt stack 0
   696  000009                     ReadEeprom@Address:
   697                           	opt stack 0
   698  000009                     TMR0_SetInterruptHandler@InterruptHandler:
   699                           	opt stack 0
   700  000009                     ___wmul@multiplier:
   701                           	opt stack 0
   702  000009                     ___awdiv@dividend:
   703                           	opt stack 0
   704  000009                     ___lmul@multiplier:
   705                           	opt stack 0
   706  000009                     ___aldiv@dividend:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x8
   710  000009                     	ds	1
   711  00000A                     ReadGPSDateTime@Time:
   712                           	opt stack 0
   713  00000A                     ValidateDateTime@Time:
   714                           	opt stack 0
   715  00000A                     ___lbdiv@dividend:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x9
   719  00000A                     	ds	1
   720  00000B                     ??_TMR0_Initialize:
   721  00000B                     ??_ReadGPSDateTime:
   722  00000B                     ??_ValidateDateTime:
   723  00000B                     Lcd_CharCP@c:
   724                           	opt stack 0
   725  00000B                     Lcd_Command@command:
   726                           	opt stack 0
   727  00000B                     ___lbdiv@counter:
   728                           	opt stack 0
   729  00000B                     ___wmul@multiplicand:
   730                           	opt stack 0
   731  00000B                     ___awdiv@divisor:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0xA
   735  00000B                     	ds	1
   736  00000C                     ValidateDateTime@Item:
   737                           	opt stack 0
   738  00000C                     Lcd_Init@data:
   739                           	opt stack 0
   740  00000C                     Lcd_Text@x:
   741                           	opt stack 0
   742  00000C                     ___lbdiv@quotient:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0xB
   746  00000C                     	ds	1
   747  00000D                     ___awdiv@counter:
   748                           	opt stack 0
   749  00000D                     Lcd_Text@buffer:
   750                           	opt stack 0
   751  00000D                     ___wmul@product:
   752                           	opt stack 0
   753  00000D                     ___lmul@multiplicand:
   754                           	opt stack 0
   755  00000D                     ___aldiv@divisor:
   756                           	opt stack 0
   757                           
   758                           ; 4 bytes @ 0xC
   759  00000D                     	ds	1
   760  00000E                     ___awdiv@sign:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0xD
   764  00000E                     	ds	1
   765  00000F                     ??_LoadSettingsFromEeprom:
   766  00000F                     ??_LoadEventsFromEeprom:
   767  00000F                     ??_LoadCyclesFromEeprom:
   768  00000F                     ?___lwdiv:
   769                           	opt stack 0
   770  00000F                     Lcd_Text@y:
   771                           	opt stack 0
   772  00000F                     ___awdiv@quotient:
   773                           	opt stack 0
   774  00000F                     ___lwdiv@dividend:
   775                           	opt stack 0
   776  00000F                     ReadGPSDateTime@StartCode:
   777                           	opt stack 0
   778                           
   779                           ; 7 bytes @ 0xE
   780  00000F                     	ds	1
   781  000010                     Lcd_Text@data:
   782                           	opt stack 0
   783  000010                     LoadSettingsFromEeprom@Temp32:
   784                           	opt stack 0
   785                           
   786                           ; 4 bytes @ 0xF
   787  000010                     	ds	1
   788  000011                     ??_LoadStatesFromEeprom:
   789  000011                     ?___awmod:
   790                           	opt stack 0
   791  000011                     ___aldiv@counter:
   792                           	opt stack 0
   793  000011                     ___awmod@dividend:
   794                           	opt stack 0
   795  000011                     ___lwdiv@divisor:
   796                           	opt stack 0
   797  000011                     ___lmul@product:
   798                           	opt stack 0
   799                           
   800                           ; 4 bytes @ 0x10
   801  000011                     	ds	1
   802  000012                     ___aldiv@sign:
   803                           	opt stack 0
   804  000012                     LoadCyclesFromEeprom@Address:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x11
   808  000012                     	ds	1
   809  000013                     LoadEventsFromEeprom@i:
   810                           	opt stack 0
   811  000013                     ___awmod@divisor:
   812                           	opt stack 0
   813  000013                     ___lwdiv@quotient:
   814                           	opt stack 0
   815  000013                     ___aldiv@quotient:
   816                           	opt stack 0
   817                           
   818                           ; 4 bytes @ 0x12
   819  000013                     	ds	1
   820  000014                     LoadSettingsFromEeprom@Temp16:
   821                           	opt stack 0
   822  000014                     LoadStatesFromEeprom@AddAudioNormal:
   823                           	opt stack 0
   824  000014                     LoadCyclesFromEeprom@j:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x13
   828  000014                     	ds	1
   829  000015                     ___awmod@counter:
   830                           	opt stack 0
   831  000015                     ___lwdiv@counter:
   832                           	opt stack 0
   833  000015                     LoadEventsFromEeprom@Address:
   834                           	opt stack 0
   835                           
   836                           ; 2 bytes @ 0x14
   837  000015                     	ds	1
   838  000016                     ___awmod@sign:
   839                           	opt stack 0
   840  000016                     ReadGPSDateTime@i:
   841                           	opt stack 0
   842  000016                     LoadSettingsFromEeprom@Address:
   843                           	opt stack 0
   844  000016                     LoadStatesFromEeprom@AddAudioSpecial:
   845                           	opt stack 0
   846  000016                     LoadCyclesFromEeprom@i:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x15
   850  000016                     	ds	1
   851  000017                     GetDay@Date:
   852                           	opt stack 0
   853  000017                     Lcd_WriteChar@x:
   854                           	opt stack 0
   855  000017                     LoadEventsFromEeprom@Temp16:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x16
   859  000017                     	ds	1
   860  000018                     ??_GetDay:
   861  000018                     ReadGPSDateTime@Commas:
   862                           	opt stack 0
   863  000018                     Lcd_WriteChar@c:
   864                           	opt stack 0
   865  000018                     LoadStatesFromEeprom@TempNormalAdd:
   866                           	opt stack 0
   867  000018                     LoadCyclesFromEeprom@i_1220:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x17
   871  000018                     	ds	1
   872  000019                     ReadGPSDateTime@TempChar:
   873                           	opt stack 0
   874  000019                     Lcd_WriteChar@y:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x18
   878  000019                     	ds	1
   879  00001A                     ReadGPSDateTime@Pos:
   880                           	opt stack 0
   881  00001A                     Lcd_WriteChar@data:
   882                           	opt stack 0
   883  00001A                     LoadStatesFromEeprom@TempSpecialAdd:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x19
   887  00001A                     	ds	1
   888  00001B                     WriteLongInt@x:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x1A
   892  00001B                     	ds	1
   893  00001C                     GetDay@d:
   894                           	opt stack 0
   895  00001C                     LoadStatesFromEeprom@AudAddInc:
   896                           	opt stack 0
   897  00001C                     WriteLongInt@Val:
   898                           	opt stack 0
   899                           
   900                           ; 4 bytes @ 0x1B
   901  00001C                     	ds	1
   902  00001D                     GetDay@m:
   903                           	opt stack 0
   904  00001D                     LoadStatesFromEeprom@j:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x1C
   908  00001D                     	ds	1
   909  00001E                     GetDay@y:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x1D
   913  00001E                     	ds	1
   914  00001F                     LoadStatesFromEeprom@j_1155:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x1E
   918  00001F                     	ds	1
   919  000020                     Lcd_Int@x:
   920                           	opt stack 0
   921  000020                     WriteLongInt@size:
   922                           	opt stack 0
   923                           
   924                           ; 1 bytes @ 0x1F
   925  000020                     	ds	1
   926  000021                     Lcd_Int@val:
   927                           	opt stack 0
   928  000021                     WriteLongInt@Sign:
   929                           	opt stack 0
   930  000021                     LoadStatesFromEeprom@AddStates:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x20
   934  000021                     	ds	1
   935  000022                     Lcd_Int@size:
   936                           	opt stack 0
   937  000022                     WriteLongInt@POS:
   938                           	opt stack 0
   939                           
   940                           ; 1 bytes @ 0x21
   941  000022                     	ds	1
   942  000023                     Lcd_Int@y:
   943                           	opt stack 0
   944  000023                     WriteLongInt@y:
   945                           	opt stack 0
   946  000023                     LoadStatesFromEeprom@i:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x22
   950  000023                     	ds	1
   951  000024                     Lcd_Int@data:
   952                           	opt stack 0
   953                           
   954                           ; 1 bytes @ 0x23
   955  000024                     	ds	1
   956  000025                     Lcd_Int@tempVal:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x24
   960  000025                     	ds	2
   961  000027                     main@Time:
   962                           	opt stack 0
   963                           
   964                           ; 7 bytes @ 0x26
   965  000027                     	ds	7
   966  00002E                     main@Date:
   967                           	opt stack 0
   968                           
   969                           ; 7 bytes @ 0x2D
   970  00002E                     	ds	7
   971                           tosu	equ	0xFFF
   972                           tosh	equ	0xFFE
   973                           tosl	equ	0xFFD
   974                           pclath	equ	0xFFA
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           prodh	equ	0xFF4
   980                           prodl	equ	0xFF3
   981                           intcon	equ	0xFF2
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           indf1	equ	0xFE7
   985                           postinc1	equ	0xFE6
   986                           postdec1	equ	0xFE5
   987                           plusw1	equ	0xFE3
   988                           fsr1h	equ	0xFE2
   989                           fsr1l	equ	0xFE1
   990                           indf2	equ	0xFDF
   991                           postinc2	equ	0xFDE
   992                           postdec2	equ	0xFDD
   993                           plusw2	equ	0xFDB
   994                           fsr2h	equ	0xFDA
   995                           fsr2l	equ	0xFD9
   996                           status	equ	0xFD8
   997                           
   998 ;;
   999 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1000 ;;
  1001 ;; *************** function _main *****************
  1002 ;; Defined at:
  1003 ;;		line 53 in file "main.c"
  1004 ;; Parameters:    Size  Location     Type
  1005 ;;		None
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  Date            7   45[COMRAM] unsigned char [7]
  1008 ;;  Time            7   38[COMRAM] unsigned char [7]
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1019 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1021 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1022 ;;Total ram usage:       14 bytes
  1023 ;; Hardware stack levels required when called:    9
  1024 ;; This function calls:
  1025 ;;		_EUSART1_Initialize
  1026 ;;		_GetDay
  1027 ;;		_Lcd_Init
  1028 ;;		_Lcd_Int
  1029 ;;		_Lcd_Text
  1030 ;;		_LoadAllFromEeprom
  1031 ;;		_ReadGPSDateTime
  1032 ;;		_SYSTEM_Initialize
  1033 ;;		_TMR0_SetInterruptHandler
  1034 ;;		_ValidateDateTime
  1035 ;;		_WriteLongInt
  1036 ;; This function is called by:
  1037 ;;		Startup code after reset
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           	psect	text0
  1042  00145E                     __ptext0:
  1043                           	opt stack 0
  1044  00145E                     _main:
  1045                           	opt stack 22
  1046                           
  1047                           ;main.c: 56: SYSTEM_Initialize();
  1048                           
  1049                           ; BSR set to: 14
  1050                           ;incstack = 0
  1051  00145E  ECB1  F010         	call	_SYSTEM_Initialize	;wreg free
  1052                           
  1053                           ;main.c: 87: (INTCONbits.GIE = 1);
  1054  001462  8EF2               	bsf	intcon,7,c	;volatile
  1055                           
  1056                           ;main.c: 88: (INTCONbits.PEIE = 1);
  1057  001464  8CF2               	bsf	intcon,6,c	;volatile
  1058                           
  1059                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  1060  001466  0E88               	movlw	low _Timer0_10ms
  1061  001468  6E09               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  1062  00146A  0E20               	movlw	high _Timer0_10ms
  1063  00146C  6E0A               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  1064  00146E  ECE5  F010         	call	_TMR0_SetInterruptHandler	;wreg free
  1065                           
  1066                           ;main.c: 92: Lcd_Init();
  1067  001472  EC01  F00E         	call	_Lcd_Init	;wreg free
  1068                           
  1069                           ;main.c: 94: LATCbits.LC1=ON;
  1070  001476  8285               	bsf	3973,1,c	;volatile
  1071                           
  1072                           ;main.c: 95: char Date[] = "------";
  1073  001478  EE20  F03C         	lfsr	2,main@F11392
  1074  00147C  EE10  F02E         	lfsr	1,main@Date
  1075  001480  0E06               	movlw	6
  1076  001482                     u2021:
  1077  001482  CFDB FFE3          	movff	plusw2,plusw1
  1078  001486  06E8               	decf	wreg,f,c
  1079  001488  E2FC               	bc	u2021
  1080                           
  1081                           ;main.c: 96: char Time[] = "------";
  1082  00148A  EE20  F035         	lfsr	2,main@F11394
  1083  00148E  EE10  F027         	lfsr	1,main@Time
  1084  001492  0E06               	movlw	6
  1085  001494                     u2031:
  1086  001494  CFDB FFE3          	movff	plusw2,plusw1
  1087  001498  06E8               	decf	wreg,f,c
  1088  00149A  E2FC               	bc	u2031
  1089                           
  1090                           ;main.c: 97: LoadAllFromEeprom();
  1091  00149C  ECD6  F010         	call	_LoadAllFromEeprom	;wreg free
  1092  0014A0                     l3159:
  1093                           
  1094                           ;main.c: 100: {
  1095                           ;main.c: 103: Date[0] = 0x3A;
  1096  0014A0  0E3A               	movlw	58
  1097  0014A2  6E2E               	movwf	main@Date,c
  1098                           
  1099                           ;main.c: 104: Time[0] = 0x3A;
  1100  0014A4  6E27               	movwf	main@Time,c
  1101                           
  1102                           ;main.c: 105: EUSART1_Initialize();
  1103  0014A6  ECA6  F010         	call	_EUSART1_Initialize	;wreg free
  1104                           
  1105                           ;main.c: 106: ReadGPSDateTime(Date, Time);
  1106  0014AA  0E2E               	movlw	low main@Date
  1107  0014AC  6E09               	movwf	ReadGPSDateTime@Date,c
  1108  0014AE  0E27               	movlw	low main@Time
  1109  0014B0  6E0A               	movwf	ReadGPSDateTime@Time,c
  1110  0014B2  EC7F  F00C         	call	_ReadGPSDateTime	;wreg free
  1111                           
  1112                           ;main.c: 108: Lcd_Text(2,1, Time);
  1113  0014B6  0E01               	movlw	1
  1114  0014B8  6E0C               	movwf	Lcd_Text@x,c
  1115  0014BA  0E27               	movlw	low main@Time
  1116  0014BC  D857               	call	PL92	;call to abstracted procedure
  1117  0014BE  EC90  F00E         	call	_Lcd_Text
  1118                           
  1119                           ;main.c: 109: Lcd_Text(2,7, "-");
  1120  0014C2  0E07               	movlw	7
  1121  0014C4  6E0C               	movwf	Lcd_Text@x,c
  1122  0014C6  0E0F               	movlw	low (STR_2+1)
  1123  0014C8  D84B               	call	PL34	;call to abstracted procedure
  1124  0014CA  0E02               	movlw	2
  1125  0014CC  EC90  F00E         	call	_Lcd_Text
  1126                           
  1127                           ;main.c: 110: Lcd_Text(2,8, Date);
  1128  0014D0  0E08               	movlw	8
  1129  0014D2  6E0C               	movwf	Lcd_Text@x,c
  1130  0014D4  0E2E               	movlw	low main@Date
  1131  0014D6  D84A               	call	PL92	;call to abstracted procedure
  1132  0014D8  EC90  F00E         	call	_Lcd_Text
  1133                           
  1134                           ;main.c: 111: Lcd_Text(2,14, "--");
  1135  0014DC  0E0E               	movlw	14
  1136  0014DE  6E0C               	movwf	Lcd_Text@x,c
  1137  0014E0  0E0E               	movlw	low STR_2
  1138  0014E2  D83E               	call	PL34	;call to abstracted procedure
  1139  0014E4  0E02               	movlw	2
  1140  0014E6  EC90  F00E         	call	_Lcd_Text
  1141                           
  1142                           ;main.c: 112: Lcd_Int(1, 14, GLOBAL_I, 3);
  1143  0014EA  0E0E               	movlw	14
  1144  0014EC  6E20               	movwf	Lcd_Int@x,c
  1145  0014EE  C04D  F021         	movff	_GLOBAL_I,Lcd_Int@val
  1146  0014F2  0E03               	movlw	3
  1147  0014F4  6E22               	movwf	Lcd_Int@size,c
  1148  0014F6  0E01               	movlw	1
  1149  0014F8  ECE7  F00C         	call	_Lcd_Int
  1150                           
  1151                           ;main.c: 113: if (ValidateDateTime(Date, Time)) {
  1152  0014FC  0E2E               	movlw	low main@Date
  1153  0014FE  6E09               	movwf	ValidateDateTime@Date,c
  1154  001500  0E27               	movlw	low main@Time
  1155  001502  6E0A               	movwf	ValidateDateTime@Time,c
  1156  001504  EC30  F00B         	call	_ValidateDateTime	;wreg free
  1157  001508  0900               	iorlw	0
  1158  00150A  E014               	bz	l3183
  1159                           
  1160                           ;main.c: 114: Lcd_Text(1, 1, ":)");
  1161  00150C  0E01               	movlw	1
  1162  00150E  6E0C               	movwf	Lcd_Text@x,c
  1163  001510  0E0B               	movlw	low STR_3
  1164  001512  D826               	call	PL34	;call to abstracted procedure
  1165  001514  0E01               	movlw	1
  1166  001516  EC90  F00E         	call	_Lcd_Text
  1167                           
  1168                           ;main.c: 115: Lcd_Int(2, 16, GetDay(Date), 1);
  1169  00151A  0E10               	movlw	16
  1170  00151C  6E20               	movwf	Lcd_Int@x,c
  1171  00151E  0E2E               	movlw	low main@Date
  1172  001520  6E17               	movwf	GetDay@Date,c
  1173  001522  ECB9  F00A         	call	_GetDay	;wreg free
  1174  001526  6E21               	movwf	Lcd_Int@val,c
  1175  001528  0E01               	movlw	1
  1176  00152A  6E22               	movwf	Lcd_Int@size,c
  1177  00152C  0E02               	movlw	2
  1178  00152E  ECE7  F00C         	call	_Lcd_Int
  1179                           
  1180                           ;main.c: 116: } else {
  1181  001532  D007               	goto	l3185
  1182  001534                     l3183:
  1183                           
  1184                           ;main.c: 117: Lcd_Text(1, 1, ":(");
  1185  001534  0E01               	movlw	1
  1186  001536  6E0C               	movwf	Lcd_Text@x,c
  1187  001538  0E08               	movlw	low STR_4
  1188  00153A  D812               	call	PL34	;call to abstracted procedure
  1189  00153C  0E01               	movlw	1
  1190  00153E  EC90  F00E         	call	_Lcd_Text
  1191  001542                     l3185:
  1192                           
  1193                           ;main.c: 118: }
  1194                           ;main.c: 119: WriteLongInt(1, 4, CYCLES[1].PERIOD, 5,1);
  1195  001542  0E04               	movlw	4
  1196  001544  6E1B               	movwf	WriteLongInt@x,c
  1197  001546  C064  F01C         	movff	_CYCLES+4,WriteLongInt@Val
  1198  00154A  C065  F01D         	movff	_CYCLES+5,WriteLongInt@Val+1
  1199  00154E  6A1E               	clrf	WriteLongInt@Val+2,c
  1200  001550  6A1F               	clrf	WriteLongInt@Val+3,c
  1201  001552  0E05               	movlw	5
  1202  001554  6E20               	movwf	WriteLongInt@size,c
  1203  001556  0E01               	movlw	1
  1204  001558  6E21               	movwf	WriteLongInt@Sign,c
  1205  00155A  ECA7  F00D         	call	_WriteLongInt
  1206  00155E  D7A0               	goto	l3159
  1207  001560                     __end_of_main:
  1208                           	opt stack 0
  1209  001560                     PL34:
  1210                           	opt stack 22
  1211  001560  6E0D               	movwf	Lcd_Text@buffer,c
  1212  001562  500D               	movf	Lcd_Text@buffer,w,c
  1213  001564  A4D8               	btfss	status,2,c
  1214  001566  0E0F               	movlw	high __smallconst
  1215  001568  6E0E               	movwf	Lcd_Text@buffer+1,c
  1216  00156A  0012               	return	
  1217  00156C                     __end_ofPL34:
  1218                           	opt stack 0
  1219  00156C                     PL92:
  1220                           	opt stack 22
  1221  00156C  6E0D               	movwf	Lcd_Text@buffer,c
  1222  00156E  6A0E               	clrf	Lcd_Text@buffer+1,c
  1223  001570  0C02               	retlw	2
  1224  001572                     __end_ofPL92:
  1225                           	opt stack 0
  1226                           tosu	equ	0xFFF
  1227                           tosh	equ	0xFFE
  1228                           tosl	equ	0xFFD
  1229                           pclath	equ	0xFFA
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           prodh	equ	0xFF4
  1235                           prodl	equ	0xFF3
  1236                           intcon	equ	0xFF2
  1237                           postinc0	equ	0xFEE
  1238                           wreg	equ	0xFE8
  1239                           indf1	equ	0xFE7
  1240                           postinc1	equ	0xFE6
  1241                           postdec1	equ	0xFE5
  1242                           plusw1	equ	0xFE3
  1243                           fsr1h	equ	0xFE2
  1244                           fsr1l	equ	0xFE1
  1245                           indf2	equ	0xFDF
  1246                           postinc2	equ	0xFDE
  1247                           postdec2	equ	0xFDD
  1248                           plusw2	equ	0xFDB
  1249                           fsr2h	equ	0xFDA
  1250                           fsr2l	equ	0xFD9
  1251                           status	equ	0xFD8
  1252                           
  1253 ;; *************** function _WriteLongInt *****************
  1254 ;; Defined at:
  1255 ;;		line 183 in file "libs/HD44780.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  y               1    wreg     unsigned char 
  1258 ;;  x               1   26[COMRAM] unsigned char 
  1259 ;;  Val             4   27[COMRAM] long 
  1260 ;;  size            1   31[COMRAM] char 
  1261 ;;  Sign            1   32[COMRAM] unsigned char 
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;  y               1   34[COMRAM] unsigned char 
  1264 ;;  POS             1   33[COMRAM] char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1274 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1275 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1277 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1278 ;;Total ram usage:        9 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    8
  1281 ;; This function calls:
  1282 ;;		_Lcd_WriteChar
  1283 ;;		___aldiv
  1284 ;;		___lmul
  1285 ;; This function is called by:
  1286 ;;		_main
  1287 ;; This function uses a non-reentrant model
  1288 ;;
  1289                           
  1290                           	psect	text1
  1291  001B4E                     __ptext1:
  1292                           	opt stack 0
  1293  001B4E                     _WriteLongInt:
  1294                           	opt stack 22
  1295                           
  1296                           ;incstack = 0
  1297                           ;WriteLongInt@y stored from wreg
  1298  001B4E  6E23               	movwf	WriteLongInt@y,c
  1299                           
  1300                           ;HD44780.c: 184: int8_t POS = 0;
  1301  001B50  6A22               	clrf	WriteLongInt@POS,c
  1302                           
  1303                           ;HD44780.c: 185: if (Sign) {
  1304  001B52  5021               	movf	WriteLongInt@Sign,w,c
  1305  001B54  E045               	bz	l3111
  1306                           
  1307                           ;HD44780.c: 186: POS++;
  1308  001B56  2A22               	incf	WriteLongInt@POS,f,c
  1309                           
  1310                           ;HD44780.c: 187: if (Val<0) {
  1311  001B58  AE1F               	btfss	WriteLongInt@Val+3,7,c
  1312  001B5A  D01E               	goto	l3103
  1313                           
  1314                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  1315  001B5C  C01B  F017         	movff	WriteLongInt@x,Lcd_WriteChar@x
  1316  001B60  0E2D               	movlw	45
  1317  001B62  6E18               	movwf	Lcd_WriteChar@c,c
  1318  001B64  5023               	movf	WriteLongInt@y,w,c
  1319  001B66  ECEF  F00F         	call	_Lcd_WriteChar
  1320                           
  1321                           ;HD44780.c: 189: Val=-1*Val;
  1322  001B6A  C01C  F009         	movff	WriteLongInt@Val,___lmul@multiplier
  1323  001B6E  C01D  F00A         	movff	WriteLongInt@Val+1,___lmul@multiplier+1
  1324  001B72  C01E  F00B         	movff	WriteLongInt@Val+2,___lmul@multiplier+2
  1325  001B76  C01F  F00C         	movff	WriteLongInt@Val+3,___lmul@multiplier+3
  1326  001B7A  680D               	setf	___lmul@multiplicand,c
  1327  001B7C  680E               	setf	___lmul@multiplicand+1,c
  1328  001B7E  680F               	setf	___lmul@multiplicand+2,c
  1329  001B80  6810               	setf	___lmul@multiplicand+3,c
  1330  001B82  ECA4  F00F         	call	___lmul	;wreg free
  1331  001B86  C009  F01C         	movff	?___lmul,WriteLongInt@Val
  1332  001B8A  C00A  F01D         	movff	?___lmul+1,WriteLongInt@Val+1
  1333  001B8E  C00B  F01E         	movff	?___lmul+2,WriteLongInt@Val+2
  1334  001B92  C00C  F01F         	movff	?___lmul+3,WriteLongInt@Val+3
  1335                           
  1336                           ;HD44780.c: 190: } else
  1337  001B96  D024               	goto	l3111
  1338  001B98                     l3103:
  1339                           
  1340                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  1341  001B98  C01B  F017         	movff	WriteLongInt@x,Lcd_WriteChar@x
  1342  001B9C  0E2B               	movlw	43
  1343  001B9E  6E18               	movwf	Lcd_WriteChar@c,c
  1344  001BA0  5023               	movf	WriteLongInt@y,w,c
  1345  001BA2  ECEF  F00F         	call	_Lcd_WriteChar
  1346  001BA6  D01C               	goto	l3111
  1347  001BA8                     l3105:
  1348                           
  1349                           ;HD44780.c: 194: size--;
  1350  001BA8  0620               	decf	WriteLongInt@size,f,c
  1351                           
  1352                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  1353  001BAA  5020               	movf	WriteLongInt@size,w,c
  1354  001BAC  2422               	addwf	WriteLongInt@POS,w,c
  1355  001BAE  241B               	addwf	WriteLongInt@x,w,c
  1356  001BB0  6E17               	movwf	Lcd_WriteChar@x,c
  1357  001BB2  D819               	call	PL12	;call to abstracted procedure
  1358  001BB4  EC49  F00D         	call	___aldiv	;wreg free
  1359  001BB8  5009               	movf	?___aldiv,w,c
  1360  001BBA  0DF6               	mullw	246
  1361  001BBC  50F3               	movf	prodl,w,c
  1362  001BBE  241C               	addwf	WriteLongInt@Val,w,c
  1363  001BC0  0F30               	addlw	48
  1364  001BC2  6E18               	movwf	Lcd_WriteChar@c,c
  1365  001BC4  5023               	movf	WriteLongInt@y,w,c
  1366  001BC6  ECEF  F00F         	call	_Lcd_WriteChar
  1367                           
  1368                           ;HD44780.c: 196: Val = Val/10;
  1369  001BCA  D80D               	call	PL12	;call to abstracted procedure
  1370  001BCC  EC49  F00D         	call	___aldiv	;wreg free
  1371  001BD0  C009  F01C         	movff	?___aldiv,WriteLongInt@Val
  1372  001BD4  C00A  F01D         	movff	?___aldiv+1,WriteLongInt@Val+1
  1373  001BD8  C00B  F01E         	movff	?___aldiv+2,WriteLongInt@Val+2
  1374  001BDC  C00C  F01F         	movff	?___aldiv+3,WriteLongInt@Val+3
  1375  001BE0                     l3111:
  1376  001BE0  5020               	movf	WriteLongInt@size,w,c
  1377  001BE2  E1E2               	bnz	l3105
  1378  001BE4  0012               	return		;funcret
  1379  001BE6                     __end_of_WriteLongInt:
  1380                           	opt stack 0
  1381  001BE6                     PL12:
  1382                           	opt stack 22
  1383  001BE6  C01C  F009         	movff	WriteLongInt@Val,___aldiv@dividend
  1384  001BEA  C01D  F00A         	movff	WriteLongInt@Val+1,___aldiv@dividend+1
  1385  001BEE  C01E  F00B         	movff	WriteLongInt@Val+2,___aldiv@dividend+2
  1386  001BF2  C01F  F00C         	movff	WriteLongInt@Val+3,___aldiv@dividend+3
  1387  001BF6  0E0A               	movlw	10
  1388  001BF8  6E0D               	movwf	___aldiv@divisor,c
  1389  001BFA  6A0E               	clrf	___aldiv@divisor+1,c
  1390  001BFC  6A0F               	clrf	___aldiv@divisor+2,c
  1391  001BFE  6A10               	clrf	___aldiv@divisor+3,c
  1392  001C00  0C0A               	retlw	10
  1393  001C02                     __end_ofPL12:
  1394                           	opt stack 0
  1395                           tosu	equ	0xFFF
  1396                           tosh	equ	0xFFE
  1397                           tosl	equ	0xFFD
  1398                           pclath	equ	0xFFA
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           prodh	equ	0xFF4
  1404                           prodl	equ	0xFF3
  1405                           intcon	equ	0xFF2
  1406                           postinc0	equ	0xFEE
  1407                           wreg	equ	0xFE8
  1408                           indf1	equ	0xFE7
  1409                           postinc1	equ	0xFE6
  1410                           postdec1	equ	0xFE5
  1411                           plusw1	equ	0xFE3
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           indf2	equ	0xFDF
  1415                           postinc2	equ	0xFDE
  1416                           postdec2	equ	0xFDD
  1417                           plusw2	equ	0xFDB
  1418                           fsr2h	equ	0xFDA
  1419                           fsr2l	equ	0xFD9
  1420                           status	equ	0xFD8
  1421                           
  1422 ;; *************** function ___lmul *****************
  1423 ;; Defined at:
  1424 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  1425 ;; Parameters:    Size  Location     Type
  1426 ;;  multiplier      4    8[COMRAM] unsigned long 
  1427 ;;  multiplicand    4   12[COMRAM] unsigned long 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  product         4   16[COMRAM] unsigned long 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  4    8[COMRAM] unsigned long 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2, status,0
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1439 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1440 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1442 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1443 ;;Total ram usage:       12 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    5
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_WriteLongInt
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text2
  1454  001F48                     __ptext2:
  1455                           	opt stack 0
  1456  001F48                     ___lmul:
  1457                           	opt stack 24
  1458                           
  1459                           ;incstack = 0
  1460  001F48  6A11               	clrf	___lmul@product,c
  1461  001F4A  6A12               	clrf	___lmul@product+1,c
  1462  001F4C  6A13               	clrf	___lmul@product+2,c
  1463  001F4E  6A14               	clrf	___lmul@product+3,c
  1464  001F50                     l705:
  1465  001F50  A009               	btfss	___lmul@multiplier,0,c
  1466  001F52  D008               	goto	l2725
  1467  001F54  500D               	movf	___lmul@multiplicand,w,c
  1468  001F56  2611               	addwf	___lmul@product,f,c
  1469  001F58  500E               	movf	___lmul@multiplicand+1,w,c
  1470  001F5A  2212               	addwfc	___lmul@product+1,f,c
  1471  001F5C  500F               	movf	___lmul@multiplicand+2,w,c
  1472  001F5E  2213               	addwfc	___lmul@product+2,f,c
  1473  001F60  5010               	movf	___lmul@multiplicand+3,w,c
  1474  001F62  2214               	addwfc	___lmul@product+3,f,c
  1475  001F64                     l2725:
  1476  001F64  90D8               	bcf	status,0,c
  1477  001F66  360D               	rlcf	___lmul@multiplicand,f,c
  1478  001F68  360E               	rlcf	___lmul@multiplicand+1,f,c
  1479  001F6A  360F               	rlcf	___lmul@multiplicand+2,f,c
  1480  001F6C  3610               	rlcf	___lmul@multiplicand+3,f,c
  1481  001F6E  90D8               	bcf	status,0,c
  1482  001F70  320C               	rrcf	___lmul@multiplier+3,f,c
  1483  001F72  320B               	rrcf	___lmul@multiplier+2,f,c
  1484  001F74  320A               	rrcf	___lmul@multiplier+1,f,c
  1485  001F76  3209               	rrcf	___lmul@multiplier,f,c
  1486  001F78  5009               	movf	___lmul@multiplier,w,c
  1487  001F7A  100A               	iorwf	___lmul@multiplier+1,w,c
  1488  001F7C  100B               	iorwf	___lmul@multiplier+2,w,c
  1489  001F7E  100C               	iorwf	___lmul@multiplier+3,w,c
  1490  001F80  E1E7               	bnz	l705
  1491  001F82  C011  F009         	movff	___lmul@product,?___lmul
  1492  001F86  C012  F00A         	movff	___lmul@product+1,?___lmul+1
  1493  001F8A  C013  F00B         	movff	___lmul@product+2,?___lmul+2
  1494  001F8E  C014  F00C         	movff	___lmul@product+3,?___lmul+3
  1495  001F92  0012               	return		;funcret
  1496  001F94                     __end_of___lmul:
  1497                           	opt stack 0
  1498                           tosu	equ	0xFFF
  1499                           tosh	equ	0xFFE
  1500                           tosl	equ	0xFFD
  1501                           pclath	equ	0xFFA
  1502                           tblptru	equ	0xFF8
  1503                           tblptrh	equ	0xFF7
  1504                           tblptrl	equ	0xFF6
  1505                           tablat	equ	0xFF5
  1506                           prodh	equ	0xFF4
  1507                           prodl	equ	0xFF3
  1508                           intcon	equ	0xFF2
  1509                           postinc0	equ	0xFEE
  1510                           wreg	equ	0xFE8
  1511                           indf1	equ	0xFE7
  1512                           postinc1	equ	0xFE6
  1513                           postdec1	equ	0xFE5
  1514                           plusw1	equ	0xFE3
  1515                           fsr1h	equ	0xFE2
  1516                           fsr1l	equ	0xFE1
  1517                           indf2	equ	0xFDF
  1518                           postinc2	equ	0xFDE
  1519                           postdec2	equ	0xFDD
  1520                           plusw2	equ	0xFDB
  1521                           fsr2h	equ	0xFDA
  1522                           fsr2l	equ	0xFD9
  1523                           status	equ	0xFD8
  1524                           
  1525 ;; *************** function ___aldiv *****************
  1526 ;; Defined at:
  1527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  1528 ;; Parameters:    Size  Location     Type
  1529 ;;  dividend        4    8[COMRAM] long 
  1530 ;;  divisor         4   12[COMRAM] long 
  1531 ;; Auto vars:     Size  Location     Type
  1532 ;;  quotient        4   18[COMRAM] long 
  1533 ;;  sign            1   17[COMRAM] unsigned char 
  1534 ;;  counter         1   16[COMRAM] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  4    8[COMRAM] long 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1544 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1545 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1547 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1548 ;;Total ram usage:       14 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    5
  1551 ;; This function calls:
  1552 ;;		Nothing
  1553 ;; This function is called by:
  1554 ;;		_WriteLongInt
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text3
  1559  001A92                     __ptext3:
  1560                           	opt stack 0
  1561  001A92                     ___aldiv:
  1562                           	opt stack 24
  1563                           
  1564                           ;incstack = 0
  1565  001A92  6A12               	clrf	___aldiv@sign,c
  1566  001A94  AE10               	btfss	___aldiv@divisor+3,7,c
  1567  001A96  D00A               	goto	l2737
  1568  001A98  1E10               	comf	___aldiv@divisor+3,f,c
  1569  001A9A  1E0F               	comf	___aldiv@divisor+2,f,c
  1570  001A9C  1E0E               	comf	___aldiv@divisor+1,f,c
  1571  001A9E  6C0D               	negf	___aldiv@divisor,c
  1572  001AA0  0E00               	movlw	0
  1573  001AA2  220E               	addwfc	___aldiv@divisor+1,f,c
  1574  001AA4  220F               	addwfc	___aldiv@divisor+2,f,c
  1575  001AA6  2210               	addwfc	___aldiv@divisor+3,f,c
  1576  001AA8  0E01               	movlw	1
  1577  001AAA  6E12               	movwf	___aldiv@sign,c
  1578  001AAC                     l2737:
  1579  001AAC  AE0C               	btfss	___aldiv@dividend+3,7,c
  1580  001AAE  D00A               	goto	l2743
  1581  001AB0  1E0C               	comf	___aldiv@dividend+3,f,c
  1582  001AB2  1E0B               	comf	___aldiv@dividend+2,f,c
  1583  001AB4  1E0A               	comf	___aldiv@dividend+1,f,c
  1584  001AB6  6C09               	negf	___aldiv@dividend,c
  1585  001AB8  0E00               	movlw	0
  1586  001ABA  220A               	addwfc	___aldiv@dividend+1,f,c
  1587  001ABC  220B               	addwfc	___aldiv@dividend+2,f,c
  1588  001ABE  220C               	addwfc	___aldiv@dividend+3,f,c
  1589  001AC0  0E01               	movlw	1
  1590  001AC2  1A12               	xorwf	___aldiv@sign,f,c
  1591  001AC4                     l2743:
  1592  001AC4  6A13               	clrf	___aldiv@quotient,c
  1593  001AC6  6A14               	clrf	___aldiv@quotient+1,c
  1594  001AC8  6A15               	clrf	___aldiv@quotient+2,c
  1595  001ACA  6A16               	clrf	___aldiv@quotient+3,c
  1596  001ACC  500D               	movf	___aldiv@divisor,w,c
  1597  001ACE  100E               	iorwf	___aldiv@divisor+1,w,c
  1598  001AD0  100F               	iorwf	___aldiv@divisor+2,w,c
  1599  001AD2  1010               	iorwf	___aldiv@divisor+3,w,c
  1600  001AD4  E029               	bz	l2765
  1601  001AD6  0E01               	movlw	1
  1602  001AD8  6E11               	movwf	___aldiv@counter,c
  1603  001ADA  D006               	goto	l2751
  1604  001ADC                     l2749:
  1605  001ADC  90D8               	bcf	status,0,c
  1606  001ADE  360D               	rlcf	___aldiv@divisor,f,c
  1607  001AE0  360E               	rlcf	___aldiv@divisor+1,f,c
  1608  001AE2  360F               	rlcf	___aldiv@divisor+2,f,c
  1609  001AE4  3610               	rlcf	___aldiv@divisor+3,f,c
  1610  001AE6  2A11               	incf	___aldiv@counter,f,c
  1611  001AE8                     l2751:
  1612  001AE8  AE10               	btfss	___aldiv@divisor+3,7,c
  1613  001AEA  D7F8               	goto	l2749
  1614  001AEC                     l2753:
  1615  001AEC  90D8               	bcf	status,0,c
  1616  001AEE  3613               	rlcf	___aldiv@quotient,f,c
  1617  001AF0  3614               	rlcf	___aldiv@quotient+1,f,c
  1618  001AF2  3615               	rlcf	___aldiv@quotient+2,f,c
  1619  001AF4  3616               	rlcf	___aldiv@quotient+3,f,c
  1620  001AF6  500D               	movf	___aldiv@divisor,w,c
  1621  001AF8  5C09               	subwf	___aldiv@dividend,w,c
  1622  001AFA  500E               	movf	___aldiv@divisor+1,w,c
  1623  001AFC  580A               	subwfb	___aldiv@dividend+1,w,c
  1624  001AFE  500F               	movf	___aldiv@divisor+2,w,c
  1625  001B00  580B               	subwfb	___aldiv@dividend+2,w,c
  1626  001B02  5010               	movf	___aldiv@divisor+3,w,c
  1627  001B04  580C               	subwfb	___aldiv@dividend+3,w,c
  1628  001B06  E309               	bnc	l2761
  1629  001B08  500D               	movf	___aldiv@divisor,w,c
  1630  001B0A  5E09               	subwf	___aldiv@dividend,f,c
  1631  001B0C  500E               	movf	___aldiv@divisor+1,w,c
  1632  001B0E  5A0A               	subwfb	___aldiv@dividend+1,f,c
  1633  001B10  500F               	movf	___aldiv@divisor+2,w,c
  1634  001B12  5A0B               	subwfb	___aldiv@dividend+2,f,c
  1635  001B14  5010               	movf	___aldiv@divisor+3,w,c
  1636  001B16  5A0C               	subwfb	___aldiv@dividend+3,f,c
  1637  001B18  8013               	bsf	___aldiv@quotient,0,c
  1638  001B1A                     l2761:
  1639  001B1A  90D8               	bcf	status,0,c
  1640  001B1C  3210               	rrcf	___aldiv@divisor+3,f,c
  1641  001B1E  320F               	rrcf	___aldiv@divisor+2,f,c
  1642  001B20  320E               	rrcf	___aldiv@divisor+1,f,c
  1643  001B22  320D               	rrcf	___aldiv@divisor,f,c
  1644  001B24  2E11               	decfsz	___aldiv@counter,f,c
  1645  001B26  D7E2               	goto	l2753
  1646  001B28                     l2765:
  1647  001B28  5012               	movf	___aldiv@sign,w,c
  1648  001B2A  E008               	bz	l2769
  1649  001B2C  1E16               	comf	___aldiv@quotient+3,f,c
  1650  001B2E  1E15               	comf	___aldiv@quotient+2,f,c
  1651  001B30  1E14               	comf	___aldiv@quotient+1,f,c
  1652  001B32  6C13               	negf	___aldiv@quotient,c
  1653  001B34  0E00               	movlw	0
  1654  001B36  2214               	addwfc	___aldiv@quotient+1,f,c
  1655  001B38  2215               	addwfc	___aldiv@quotient+2,f,c
  1656  001B3A  2216               	addwfc	___aldiv@quotient+3,f,c
  1657  001B3C                     l2769:
  1658  001B3C  C013  F009         	movff	___aldiv@quotient,?___aldiv
  1659  001B40  C014  F00A         	movff	___aldiv@quotient+1,?___aldiv+1
  1660  001B44  C015  F00B         	movff	___aldiv@quotient+2,?___aldiv+2
  1661  001B48  C016  F00C         	movff	___aldiv@quotient+3,?___aldiv+3
  1662  001B4C  0012               	return		;funcret
  1663  001B4E                     __end_of___aldiv:
  1664                           	opt stack 0
  1665                           tosu	equ	0xFFF
  1666                           tosh	equ	0xFFE
  1667                           tosl	equ	0xFFD
  1668                           pclath	equ	0xFFA
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           prodh	equ	0xFF4
  1674                           prodl	equ	0xFF3
  1675                           intcon	equ	0xFF2
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           indf1	equ	0xFE7
  1679                           postinc1	equ	0xFE6
  1680                           postdec1	equ	0xFE5
  1681                           plusw1	equ	0xFE3
  1682                           fsr1h	equ	0xFE2
  1683                           fsr1l	equ	0xFE1
  1684                           indf2	equ	0xFDF
  1685                           postinc2	equ	0xFDE
  1686                           postdec2	equ	0xFDD
  1687                           plusw2	equ	0xFDB
  1688                           fsr2h	equ	0xFDA
  1689                           fsr2l	equ	0xFD9
  1690                           status	equ	0xFD8
  1691                           
  1692 ;; *************** function _Lcd_WriteChar *****************
  1693 ;; Defined at:
  1694 ;;		line 99 in file "libs/HD44780.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;  y               1    wreg     unsigned char 
  1697 ;;  x               1   22[COMRAM] unsigned char 
  1698 ;;  c               1   23[COMRAM] unsigned char 
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  y               1   24[COMRAM] unsigned char 
  1701 ;;  data            1   25[COMRAM] unsigned char 
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, status,2, status,0, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1711 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1714 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1715 ;;Total ram usage:        4 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    7
  1718 ;; This function calls:
  1719 ;;		_Lcd_CharCP
  1720 ;;		_Lcd_Command
  1721 ;; This function is called by:
  1722 ;;		_WriteLongInt
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           	psect	text4
  1727  001FDE                     __ptext4:
  1728                           	opt stack 0
  1729  001FDE                     _Lcd_WriteChar:
  1730                           	opt stack 22
  1731                           
  1732                           ;incstack = 0
  1733                           ;Lcd_WriteChar@y stored from wreg
  1734  001FDE  6E19               	movwf	Lcd_WriteChar@y,c
  1735                           
  1736                           ;HD44780.c: 100: unsigned char data;
  1737                           ;HD44780.c: 101: switch(y) {
  1738  001FE0  D00D               	goto	l2445
  1739  001FE2                     l2435:
  1740  001FE2  5017               	movf	Lcd_WriteChar@x,w,c
  1741  001FE4  0F7F               	addlw	127
  1742  001FE6  D008               	goto	L3
  1743  001FE8                     l2437:
  1744  001FE8  5017               	movf	Lcd_WriteChar@x,w,c
  1745  001FEA  0FBF               	addlw	191
  1746  001FEC  D005               	goto	L3
  1747  001FEE                     l2439:
  1748  001FEE  5017               	movf	Lcd_WriteChar@x,w,c
  1749  001FF0  0F93               	addlw	147
  1750  001FF2  D002               	goto	L3
  1751  001FF4                     l2441:
  1752  001FF4  5017               	movf	Lcd_WriteChar@x,w,c
  1753  001FF6  0FD3               	addlw	211
  1754  001FF8                     L3:
  1755  001FF8  6E1A               	movwf	Lcd_WriteChar@data,c
  1756  001FFA  D009               	goto	l2447
  1757  001FFC                     l2445:
  1758  001FFC  5019               	movf	Lcd_WriteChar@y,w,c
  1759                           
  1760                           ; Switch size 1, requested type "space"
  1761                           ; Number of cases is 4, Range of values is 1 to 4
  1762                           ; switch strategies available:
  1763                           ; Name         Instructions Cycles
  1764                           ; simple_byte           13     7 (average)
  1765                           ;	Chosen strategy is simple_byte
  1766  001FFE  0A01               	xorlw	1	; case 1
  1767  002000  E0F0               	bz	l2435
  1768  002002  0A03               	xorlw	3	; case 2
  1769  002004  E0F1               	bz	l2437
  1770  002006  0A01               	xorlw	1	; case 3
  1771  002008  E0F2               	bz	l2439
  1772  00200A  0A07               	xorlw	7	; case 4
  1773  00200C  E0F3               	bz	l2441
  1774  00200E                     l2447:
  1775                           
  1776                           ;HD44780.c: 108: Lcd_Command(data);
  1777  00200E  501A               	movf	Lcd_WriteChar@data,w,c
  1778  002010  EC12  F00C         	call	_Lcd_Command
  1779                           
  1780                           ;HD44780.c: 109: Lcd_CharCP(c);
  1781  002014  5018               	movf	Lcd_WriteChar@c,w,c
  1782  002016  EFA5  F00B         	goto	_Lcd_CharCP
  1783  00201A                     __end_of_Lcd_WriteChar:
  1784                           	opt stack 0
  1785                           tosu	equ	0xFFF
  1786                           tosh	equ	0xFFE
  1787                           tosl	equ	0xFFD
  1788                           pclath	equ	0xFFA
  1789                           tblptru	equ	0xFF8
  1790                           tblptrh	equ	0xFF7
  1791                           tblptrl	equ	0xFF6
  1792                           tablat	equ	0xFF5
  1793                           prodh	equ	0xFF4
  1794                           prodl	equ	0xFF3
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           indf1	equ	0xFE7
  1799                           postinc1	equ	0xFE6
  1800                           postdec1	equ	0xFE5
  1801                           plusw1	equ	0xFE3
  1802                           fsr1h	equ	0xFE2
  1803                           fsr1l	equ	0xFE1
  1804                           indf2	equ	0xFDF
  1805                           postinc2	equ	0xFDE
  1806                           postdec2	equ	0xFDD
  1807                           plusw2	equ	0xFDB
  1808                           fsr2h	equ	0xFDA
  1809                           fsr2l	equ	0xFD9
  1810                           status	equ	0xFD8
  1811                           
  1812 ;; *************** function _ValidateDateTime *****************
  1813 ;; Defined at:
  1814 ;;		line 137 in file "libs/gps.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;  Date            1    8[COMRAM] PTR unsigned char 
  1817 ;;		 -> main@Date(7), 
  1818 ;;  Time            1    9[COMRAM] PTR unsigned char 
  1819 ;;		 -> main@Time(7), 
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;  Item            1   11[COMRAM] char 
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      enum E11037
  1824 ;; Registers used:
  1825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1833 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1834 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1835 ;;Total ram usage:        4 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    5
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text5
  1846  001660                     __ptext5:
  1847                           	opt stack 0
  1848  001660                     _ValidateDateTime:
  1849                           	opt stack 25
  1850                           
  1851                           ;gps.c: 138: INT8 Item;
  1852                           ;gps.c: 145: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  1853                           
  1854                           ;incstack = 0
  1855  001660  5009               	movf	ValidateDateTime@Date,w,c
  1856  001662  D86F               	call	PL74	;call to abstracted procedure
  1857  001664  D86A               	call	PL60	;call to abstracted procedure
  1858  001666  6ED9               	movwf	fsr2l,c
  1859  001668  6ADA               	clrf	fsr2h,c
  1860                           
  1861                           ;gps.c: 146: if (Item<=0 || Item>31) return 0;
  1862  00166A  D845               	call	PL4	;call to abstracted procedure
  1863  00166C  A0D8               	btfss	status,0,c
  1864  00166E  0C00               	retlw	0
  1865  001670  500C               	movf	ValidateDateTime@Item,w,c
  1866  001672  0A80               	xorlw	128
  1867  001674  0F60               	addlw	-160
  1868  001676  E301               	bnc	l2923
  1869  001678  0C00               	retlw	0
  1870  00167A                     l2923:
  1871                           
  1872                           ;gps.c: 147: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  1873  00167A  5009               	movf	ValidateDateTime@Date,w,c
  1874  00167C  D854               	call	PL52	;call to abstracted procedure
  1875  00167E  D85D               	call	PL60	;call to abstracted procedure
  1876  001680  D844               	call	PL16	;call to abstracted procedure
  1877                           
  1878                           ;gps.c: 148: if (Item<=0 || Item>12) return 0;
  1879  001682  D839               	call	PL4	;call to abstracted procedure
  1880  001684  A0D8               	btfss	status,0,c
  1881  001686  0C00               	retlw	0
  1882  001688  500C               	movf	ValidateDateTime@Item,w,c
  1883  00168A  0A80               	xorlw	128
  1884  00168C  0F73               	addlw	-141
  1885  00168E  E301               	bnc	l2933
  1886  001690  0C00               	retlw	0
  1887  001692                     l2933:
  1888                           
  1889                           ;gps.c: 149: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  1890  001692  5009               	movf	ValidateDateTime@Date,w,c
  1891  001694  D84D               	call	PL56	;call to abstracted procedure
  1892  001696  D851               	call	PL60	;call to abstracted procedure
  1893  001698  D83D               	call	PL38	;call to abstracted procedure
  1894                           
  1895                           ;gps.c: 150: if (Item<=0 || Item>99) return 0;
  1896  00169A  D82D               	call	PL4	;call to abstracted procedure
  1897  00169C  A0D8               	btfss	status,0,c
  1898  00169E  0C00               	retlw	0
  1899  0016A0  500C               	movf	ValidateDateTime@Item,w,c
  1900  0016A2  0A80               	xorlw	128
  1901  0016A4  0F1C               	addlw	-228
  1902  0016A6  E301               	bnc	l2943
  1903  0016A8  0C00               	retlw	0
  1904  0016AA                     l2943:
  1905                           
  1906                           ;gps.c: 152: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  1907  0016AA  500A               	movf	ValidateDateTime@Time,w,c
  1908  0016AC  D84A               	call	PL74	;call to abstracted procedure
  1909  0016AE  D837               	call	PL50	;call to abstracted procedure
  1910  0016B0  6ED9               	movwf	fsr2l,c
  1911  0016B2  6ADA               	clrf	fsr2h,c
  1912                           
  1913                           ;gps.c: 153: if (Item<=0 || Item>23) return 0;
  1914  0016B4  D820               	call	PL4	;call to abstracted procedure
  1915  0016B6  A0D8               	btfss	status,0,c
  1916  0016B8  0C00               	retlw	0
  1917  0016BA  500C               	movf	ValidateDateTime@Item,w,c
  1918  0016BC  0A80               	xorlw	128
  1919  0016BE  0F68               	addlw	-152
  1920  0016C0  E301               	bnc	l2953
  1921  0016C2  0C00               	retlw	0
  1922  0016C4                     l2953:
  1923                           
  1924                           ;gps.c: 154: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  1925  0016C4  500A               	movf	ValidateDateTime@Time,w,c
  1926  0016C6  D82F               	call	PL52	;call to abstracted procedure
  1927  0016C8  D82A               	call	PL50	;call to abstracted procedure
  1928  0016CA  D81F               	call	PL16	;call to abstracted procedure
  1929                           
  1930                           ;gps.c: 155: if (Item<=0 || Item>59) return 0;
  1931  0016CC  D814               	call	PL4	;call to abstracted procedure
  1932  0016CE  A0D8               	btfss	status,0,c
  1933  0016D0  0C00               	retlw	0
  1934  0016D2  500C               	movf	ValidateDateTime@Item,w,c
  1935  0016D4  0A80               	xorlw	128
  1936  0016D6  0F44               	addlw	-188
  1937  0016D8  E301               	bnc	l2963
  1938  0016DA  0C00               	retlw	0
  1939  0016DC                     l2963:
  1940                           
  1941                           ;gps.c: 156: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  1942  0016DC  500A               	movf	ValidateDateTime@Time,w,c
  1943  0016DE  D828               	call	PL56	;call to abstracted procedure
  1944  0016E0  D81E               	call	PL50	;call to abstracted procedure
  1945  0016E2  D818               	call	PL38	;call to abstracted procedure
  1946                           
  1947                           ;gps.c: 157: if (Item<=0 || Item>59) return 0;
  1948  0016E4  D808               	call	PL4	;call to abstracted procedure
  1949  0016E6  A0D8               	btfss	status,0,c
  1950  0016E8  0C00               	retlw	0
  1951  0016EA  500C               	movf	ValidateDateTime@Item,w,c
  1952  0016EC  0A80               	xorlw	128
  1953  0016EE  0F44               	addlw	-188
  1954  0016F0  E301               	bnc	l2973
  1955  0016F2  0C00               	retlw	0
  1956  0016F4                     l2973:
  1957                           
  1958                           ;gps.c: 159: return 1;
  1959  0016F4  0C01               	retlw	1	;funcret
  1960  0016F6                     __end_of_ValidateDateTime:
  1961                           	opt stack 0
  1962  0016F6                     PL4:
  1963                           	opt stack 25
  1964  0016F6  50DF               	movf	indf2,w,c
  1965  0016F8  0D0A               	mullw	10
  1966  0016FA  50F3               	movf	prodl,w,c
  1967  0016FC  240B               	addwf	??_ValidateDateTime,w,c
  1968  0016FE  0FF0               	addlw	240
  1969  001700  6E0C               	movwf	ValidateDateTime@Item,c
  1970  001702  500C               	movf	ValidateDateTime@Item,w,c
  1971  001704  0A80               	xorlw	128
  1972  001706  0F7F               	addlw	-129
  1973  001708  0012               	return	
  1974  00170A                     __end_ofPL4:
  1975                           	opt stack 0
  1976  00170A                     PL16:
  1977                           	opt stack 25
  1978  00170A  6ED9               	movwf	fsr2l,c
  1979  00170C  6ADA               	clrf	fsr2h,c
  1980  00170E  0E02               	movlw	2
  1981  001710  26D9               	addwf	fsr2l,f,c
  1982  001712  0C02               	retlw	2
  1983  001714                     __end_ofPL16:
  1984                           	opt stack 0
  1985  001714                     PL38:
  1986                           	opt stack 25
  1987  001714  6ED9               	movwf	fsr2l,c
  1988  001716  6ADA               	clrf	fsr2h,c
  1989  001718  0E04               	movlw	4
  1990  00171A  26D9               	addwf	fsr2l,f,c
  1991  00171C  0C04               	retlw	4
  1992  00171E                     __end_ofPL38:
  1993                           	opt stack 0
  1994  00171E                     PL50:
  1995                           	opt stack 25
  1996  00171E  50DF               	movf	indf2,w,c
  1997  001720  6E0B               	movwf	??_ValidateDateTime& (0+255),c
  1998  001722  500A               	movf	ValidateDateTime@Time,w,c
  1999  001724  0012               	return	
  2000  001726                     __end_ofPL50:
  2001                           	opt stack 0
  2002  001726                     PL52:
  2003                           	opt stack 25
  2004  001726  6ED9               	movwf	fsr2l,c
  2005  001728  6ADA               	clrf	fsr2h,c
  2006  00172A  0E03               	movlw	3
  2007  00172C  26D9               	addwf	fsr2l,f,c
  2008  00172E  0C03               	retlw	3
  2009  001730                     __end_ofPL52:
  2010                           	opt stack 0
  2011  001730                     PL56:
  2012                           	opt stack 25
  2013  001730  6ED9               	movwf	fsr2l,c
  2014  001732  6ADA               	clrf	fsr2h,c
  2015  001734  0E05               	movlw	5
  2016  001736  26D9               	addwf	fsr2l,f,c
  2017  001738  0C05               	retlw	5
  2018  00173A                     __end_ofPL56:
  2019                           	opt stack 0
  2020  00173A                     PL60:
  2021                           	opt stack 25
  2022  00173A  50DF               	movf	indf2,w,c
  2023  00173C  6E0B               	movwf	??_ValidateDateTime& (0+255),c
  2024  00173E  5009               	movf	ValidateDateTime@Date,w,c
  2025  001740  0012               	return	
  2026  001742                     __end_ofPL60:
  2027                           	opt stack 0
  2028  001742                     PL74:
  2029                           	opt stack 25
  2030  001742  6ED9               	movwf	fsr2l,c
  2031  001744  6ADA               	clrf	fsr2h,c
  2032  001746  2AD9               	incf	fsr2l,f,c
  2033  001748  0012               	return	
  2034  00174A                     __end_ofPL74:
  2035                           	opt stack 0
  2036                           tosu	equ	0xFFF
  2037                           tosh	equ	0xFFE
  2038                           tosl	equ	0xFFD
  2039                           pclath	equ	0xFFA
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           prodh	equ	0xFF4
  2045                           prodl	equ	0xFF3
  2046                           intcon	equ	0xFF2
  2047                           postinc0	equ	0xFEE
  2048                           wreg	equ	0xFE8
  2049                           indf1	equ	0xFE7
  2050                           postinc1	equ	0xFE6
  2051                           postdec1	equ	0xFE5
  2052                           plusw1	equ	0xFE3
  2053                           fsr1h	equ	0xFE2
  2054                           fsr1l	equ	0xFE1
  2055                           indf2	equ	0xFDF
  2056                           postinc2	equ	0xFDE
  2057                           postdec2	equ	0xFDD
  2058                           plusw2	equ	0xFDB
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _SYSTEM_Initialize *****************
  2064 ;; Defined at:
  2065 ;;		line 107 in file "mcc_generated_files/mcc.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;		None
  2068 ;; Auto vars:     Size  Location     Type
  2069 ;;		None
  2070 ;; Return value:  Size  Location     Type
  2071 ;;                  1    wreg      void 
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2083 ;;Total ram usage:        0 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    7
  2086 ;; This function calls:
  2087 ;;		_EUSART1_Initialize
  2088 ;;		_INTERRUPT_Initialize
  2089 ;;		_OSCILLATOR_Initialize
  2090 ;;		_PIN_MANAGER_Initialize
  2091 ;;		_TMR0_Initialize
  2092 ;; This function is called by:
  2093 ;;		_main
  2094 ;; This function uses a non-reentrant model
  2095 ;;
  2096                           
  2097                           	psect	text6
  2098  002162                     __ptext6:
  2099                           	opt stack 0
  2100  002162                     _SYSTEM_Initialize:
  2101                           	opt stack 23
  2102                           
  2103                           ;mcc.c: 110: INTERRUPT_Initialize();
  2104                           
  2105                           ;incstack = 0
  2106  002162  ECF1  F010         	call	_INTERRUPT_Initialize	;wreg free
  2107                           
  2108                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  2109  002166  EC73  F00F         	call	_PIN_MANAGER_Initialize	;wreg free
  2110                           
  2111                           ;mcc.c: 112: OSCILLATOR_Initialize();
  2112  00216A  EC9B  F010         	call	_OSCILLATOR_Initialize	;wreg free
  2113                           
  2114                           ; BSR set to: 14
  2115                           ;mcc.c: 113: TMR0_Initialize();
  2116  00216E  EC0D  F010         	call	_TMR0_Initialize	;wreg free
  2117                           
  2118                           ;mcc.c: 114: EUSART1_Initialize();
  2119  002172  EFA6  F010         	goto	_EUSART1_Initialize	;wreg free
  2120  002176                     __end_of_SYSTEM_Initialize:
  2121                           	opt stack 0
  2122                           tosu	equ	0xFFF
  2123                           tosh	equ	0xFFE
  2124                           tosl	equ	0xFFD
  2125                           pclath	equ	0xFFA
  2126                           tblptru	equ	0xFF8
  2127                           tblptrh	equ	0xFF7
  2128                           tblptrl	equ	0xFF6
  2129                           tablat	equ	0xFF5
  2130                           prodh	equ	0xFF4
  2131                           prodl	equ	0xFF3
  2132                           intcon	equ	0xFF2
  2133                           postinc0	equ	0xFEE
  2134                           wreg	equ	0xFE8
  2135                           indf1	equ	0xFE7
  2136                           postinc1	equ	0xFE6
  2137                           postdec1	equ	0xFE5
  2138                           plusw1	equ	0xFE3
  2139                           fsr1h	equ	0xFE2
  2140                           fsr1l	equ	0xFE1
  2141                           indf2	equ	0xFDF
  2142                           postinc2	equ	0xFDE
  2143                           postdec2	equ	0xFDD
  2144                           plusw2	equ	0xFDB
  2145                           fsr2h	equ	0xFDA
  2146                           fsr2l	equ	0xFD9
  2147                           status	equ	0xFD8
  2148                           
  2149 ;; *************** function _TMR0_Initialize *****************
  2150 ;; Defined at:
  2151 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, status,2, status,0, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : 3F/E
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2168 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2169 ;;Total ram usage:        2 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    6
  2172 ;; This function calls:
  2173 ;;		_TMR0_SetInterruptHandler
  2174 ;;		_TMR0_StartTimer
  2175 ;; This function is called by:
  2176 ;;		_SYSTEM_Initialize
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text7
  2181  00201A                     __ptext7:
  2182                           	opt stack 0
  2183  00201A                     _TMR0_Initialize:
  2184                           	opt stack 23
  2185                           
  2186                           ; BSR set to: 14
  2187                           ;tmr0.c: 70: T0CON0 = 0x10;
  2188                           
  2189                           ;incstack = 0
  2190  00201A  0E10               	movlw	16
  2191  00201C  6ED5               	movwf	4053,c	;volatile
  2192                           
  2193                           ;tmr0.c: 73: T0CON1 = 0x50;
  2194  00201E  0E50               	movlw	80
  2195  002020  6ED6               	movwf	4054,c	;volatile
  2196                           
  2197                           ;tmr0.c: 76: TMR0H = 0xF0;
  2198  002022  0EF0               	movlw	240
  2199  002024  6ED4               	movwf	4052,c	;volatile
  2200                           
  2201                           ;tmr0.c: 79: TMR0L = 0x60;
  2202  002026  0E60               	movlw	96
  2203  002028  6ED3               	movwf	4051,c	;volatile
  2204                           
  2205                           ; BSR set to: 14
  2206                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  2207  00202A  50D3               	movf	4051,w,c	;volatile
  2208  00202C  CFD4 F00B          	movff	4052,??_TMR0_Initialize	;volatile
  2209  002030  6A0C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  2210  002032  C00B  F00C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  2211  002036  6A0B               	clrf	??_TMR0_Initialize,c
  2212  002038  100B               	iorwf	??_TMR0_Initialize,w,c
  2213  00203A  6E47               	movwf	_timer0ReloadVal16bit,c	;volatile
  2214  00203C  500C               	movf	??_TMR0_Initialize+1,w,c
  2215  00203E  6E48               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  2216                           
  2217                           ; BSR set to: 14
  2218                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
  2219  002040  9BCA               	bcf	202,5,b	;volatile
  2220                           
  2221                           ; BSR set to: 14
  2222                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
  2223  002042  8BC2               	bsf	194,5,b	;volatile
  2224                           
  2225                           ; BSR set to: 14
  2226                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2227  002044  0EE6               	movlw	low _TMR0_DefaultInterruptHandler
  2228  002046  6E09               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2229  002048  0E21               	movlw	high _TMR0_DefaultInterruptHandler
  2230  00204A  6E0A               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2231  00204C  ECE5  F010         	call	_TMR0_SetInterruptHandler	;wreg free
  2232                           
  2233                           ;tmr0.c: 94: TMR0_StartTimer();
  2234  002050  EFEF  F010         	goto	_TMR0_StartTimer	;wreg free
  2235  002054                     __end_of_TMR0_Initialize:
  2236                           	opt stack 0
  2237                           tosu	equ	0xFFF
  2238                           tosh	equ	0xFFE
  2239                           tosl	equ	0xFFD
  2240                           pclath	equ	0xFFA
  2241                           tblptru	equ	0xFF8
  2242                           tblptrh	equ	0xFF7
  2243                           tblptrl	equ	0xFF6
  2244                           tablat	equ	0xFF5
  2245                           prodh	equ	0xFF4
  2246                           prodl	equ	0xFF3
  2247                           intcon	equ	0xFF2
  2248                           postinc0	equ	0xFEE
  2249                           wreg	equ	0xFE8
  2250                           indf1	equ	0xFE7
  2251                           postinc1	equ	0xFE6
  2252                           postdec1	equ	0xFE5
  2253                           plusw1	equ	0xFE3
  2254                           fsr1h	equ	0xFE2
  2255                           fsr1l	equ	0xFE1
  2256                           indf2	equ	0xFDF
  2257                           postinc2	equ	0xFDE
  2258                           postdec2	equ	0xFDD
  2259                           plusw2	equ	0xFDB
  2260                           fsr2h	equ	0xFDA
  2261                           fsr2l	equ	0xFD9
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _TMR0_StartTimer *****************
  2265 ;; Defined at:
  2266 ;;		line 97 in file "mcc_generated_files/tmr0.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;                  1    wreg      void 
  2273 ;; Registers used:
  2274 ;;		None
  2275 ;; Tracked objects:
  2276 ;;		On entry : 0/E
  2277 ;;		On exit  : 0/0
  2278 ;;		Unchanged: 0/0
  2279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2284 ;;Total ram usage:        0 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    5
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_TMR0_Initialize
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           	psect	text8
  2295  0021DE                     __ptext8:
  2296                           	opt stack 0
  2297  0021DE                     _TMR0_StartTimer:
  2298                           	opt stack 23
  2299                           
  2300                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
  2301                           
  2302                           ;incstack = 0
  2303  0021DE  8ED5               	bsf	4053,7,c	;volatile
  2304  0021E0  0012               	return		;funcret
  2305  0021E2                     __end_of_TMR0_StartTimer:
  2306                           	opt stack 0
  2307                           tosu	equ	0xFFF
  2308                           tosh	equ	0xFFE
  2309                           tosl	equ	0xFFD
  2310                           pclath	equ	0xFFA
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           prodh	equ	0xFF4
  2316                           prodl	equ	0xFF3
  2317                           intcon	equ	0xFF2
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           indf1	equ	0xFE7
  2321                           postinc1	equ	0xFE6
  2322                           postdec1	equ	0xFE5
  2323                           plusw1	equ	0xFE3
  2324                           fsr1h	equ	0xFE2
  2325                           fsr1l	equ	0xFE1
  2326                           indf2	equ	0xFDF
  2327                           postinc2	equ	0xFDE
  2328                           postdec2	equ	0xFDD
  2329                           plusw2	equ	0xFDB
  2330                           fsr2h	equ	0xFDA
  2331                           fsr2l	equ	0xFD9
  2332                           status	equ	0xFD8
  2333                           
  2334 ;; *************** function _TMR0_SetInterruptHandler *****************
  2335 ;; Defined at:
  2336 ;;		line 169 in file "mcc_generated_files/tmr0.c"
  2337 ;; Parameters:    Size  Location     Type
  2338 ;;  InterruptHan    2    8[COMRAM] PTR FTN()void 
  2339 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2354 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2355 ;;Total ram usage:        2 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    5
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_TMR0_Initialize
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           	psect	text9
  2367  0021CA                     __ptext9:
  2368                           	opt stack 0
  2369  0021CA                     _TMR0_SetInterruptHandler:
  2370                           	opt stack 25
  2371                           
  2372                           ;tmr0.c: 170: TMR0_InterruptHandler = InterruptHandler;
  2373                           
  2374                           ;incstack = 0
  2375  0021CA  C009  F045         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2376  0021CE  C00A  F046         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2377  0021D2  0012               	return		;funcret
  2378  0021D4                     __end_of_TMR0_SetInterruptHandler:
  2379                           	opt stack 0
  2380                           tosu	equ	0xFFF
  2381                           tosh	equ	0xFFE
  2382                           tosl	equ	0xFFD
  2383                           pclath	equ	0xFFA
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           prodh	equ	0xFF4
  2389                           prodl	equ	0xFF3
  2390                           intcon	equ	0xFF2
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           indf1	equ	0xFE7
  2394                           postinc1	equ	0xFE6
  2395                           postdec1	equ	0xFE5
  2396                           plusw1	equ	0xFE3
  2397                           fsr1h	equ	0xFE2
  2398                           fsr1l	equ	0xFE1
  2399                           indf2	equ	0xFDF
  2400                           postinc2	equ	0xFDE
  2401                           postdec2	equ	0xFDD
  2402                           plusw2	equ	0xFDB
  2403                           fsr2h	equ	0xFDA
  2404                           fsr2l	equ	0xFD9
  2405                           status	equ	0xFD8
  2406                           
  2407 ;; *************** function _PIN_MANAGER_Initialize *****************
  2408 ;; Defined at:
  2409 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  2410 ;; Parameters:    Size  Location     Type
  2411 ;;		None
  2412 ;; Auto vars:     Size  Location     Type
  2413 ;;  state           1    8[COMRAM] unsigned char 
  2414 ;; Return value:  Size  Location     Type
  2415 ;;                  1    wreg      void 
  2416 ;; Registers used:
  2417 ;;		wreg, status,2
  2418 ;; Tracked objects:
  2419 ;;		On entry : 0/0
  2420 ;;		On exit  : 0/0
  2421 ;;		Unchanged: 0/0
  2422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2427 ;;Total ram usage:        1 bytes
  2428 ;; Hardware stack levels used:    1
  2429 ;; Hardware stack levels required when called:    5
  2430 ;; This function calls:
  2431 ;;		Nothing
  2432 ;; This function is called by:
  2433 ;;		_SYSTEM_Initialize
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text10
  2438  001EE6                     __ptext10:
  2439                           	opt stack 0
  2440  001EE6                     _PIN_MANAGER_Initialize:
  2441                           	opt stack 24
  2442                           
  2443                           ;pin_manager.c: 57: LATA = 0x00;
  2444                           
  2445                           ;incstack = 0
  2446  001EE6  6A83               	clrf	3971,c	;volatile
  2447                           
  2448                           ;pin_manager.c: 58: LATB = 0x00;
  2449  001EE8  6A84               	clrf	3972,c	;volatile
  2450                           
  2451                           ;pin_manager.c: 59: LATC = 0x00;
  2452  001EEA  6A85               	clrf	3973,c	;volatile
  2453                           
  2454                           ;pin_manager.c: 64: TRISA = 0xC0;
  2455  001EEC  0EC0               	movlw	192
  2456  001EEE  6E88               	movwf	3976,c	;volatile
  2457                           
  2458                           ;pin_manager.c: 65: TRISB = 0x00;
  2459  001EF0  6A89               	clrf	3977,c	;volatile
  2460                           
  2461                           ;pin_manager.c: 66: TRISC = 0x84;
  2462  001EF2  0E84               	movlw	132
  2463  001EF4  6E8A               	movwf	3978,c	;volatile
  2464                           
  2465                           ;pin_manager.c: 71: ANSELC = 0x44;
  2466  001EF6  0E44               	movlw	68
  2467  001EF8  010F               	movlb	15	; () banked
  2468  001EFA  6F21               	movwf	33,b	;volatile
  2469                           
  2470                           ; BSR set to: 15
  2471                           ;pin_manager.c: 72: ANSELB = 0x00;
  2472  001EFC  6B19               	clrf	25,b	;volatile
  2473                           
  2474                           ;pin_manager.c: 73: ANSELA = 0xC0;
  2475  001EFE  0EC0               	movlw	192
  2476  001F00  6F11               	movwf	17,b	;volatile
  2477                           
  2478                           ; BSR set to: 15
  2479                           ;pin_manager.c: 78: WPUE = 0x00;
  2480  001F02  6B2D               	clrf	45,b	;volatile
  2481                           
  2482                           ; BSR set to: 15
  2483                           ;pin_manager.c: 79: WPUB = 0x00;
  2484  001F04  6B18               	clrf	24,b	;volatile
  2485                           
  2486                           ; BSR set to: 15
  2487                           ;pin_manager.c: 80: WPUA = 0x00;
  2488  001F06  6B10               	clrf	16,b	;volatile
  2489                           
  2490                           ; BSR set to: 15
  2491                           ;pin_manager.c: 81: WPUC = 0x00;
  2492  001F08  6B20               	clrf	32,b	;volatile
  2493                           
  2494                           ; BSR set to: 15
  2495                           ;pin_manager.c: 86: ODCONA = 0x00;
  2496  001F0A  6B0F               	clrf	15,b	;volatile
  2497                           
  2498                           ; BSR set to: 15
  2499                           ;pin_manager.c: 87: ODCONB = 0x00;
  2500  001F0C  6B17               	clrf	23,b	;volatile
  2501                           
  2502                           ; BSR set to: 15
  2503                           ;pin_manager.c: 88: ODCONC = 0x00;
  2504  001F0E  6B1F               	clrf	31,b	;volatile
  2505                           
  2506                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  2507  001F10  0E00               	movlw	0
  2508  001F12  BEF2               	btfsc	intcon,7,c	;volatile
  2509  001F14  0E01               	movlw	1
  2510  001F16  6E09               	movwf	PIN_MANAGER_Initialize@state,c
  2511                           
  2512                           ; BSR set to: 15
  2513                           ;pin_manager.c: 96: GIE = 0;
  2514  001F18  9EF2               	bcf	intcon,7,c	;volatile
  2515                           
  2516                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  2517  001F1A  0E55               	movlw	85
  2518  001F1C  010E               	movlb	14	; () banked
  2519  001F1E  6FA0               	movwf	160,b	;volatile
  2520                           
  2521                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  2522  001F20  0EAA               	movlw	170
  2523  001F22  6FA0               	movwf	160,b	;volatile
  2524                           
  2525                           ; BSR set to: 14
  2526                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  2527  001F24  91A0               	bcf	160,0,b	;volatile
  2528                           
  2529                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  2530  001F26  51B5               	movf	181,w,b	;volatile
  2531  001F28  0BE0               	andlw	-32
  2532  001F2A  0917               	iorlw	23
  2533  001F2C  6FB5               	movwf	181,b	;volatile
  2534                           
  2535                           ;pin_manager.c: 102: RC6PPS = 0x09;
  2536  001F2E  0E09               	movlw	9
  2537  001F30  6FFD               	movwf	253,b	;volatile
  2538                           
  2539                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  2540  001F32  0E55               	movlw	85
  2541  001F34  6FA0               	movwf	160,b	;volatile
  2542                           
  2543                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  2544  001F36  0EAA               	movlw	170
  2545  001F38  6FA0               	movwf	160,b	;volatile
  2546                           
  2547                           ; BSR set to: 14
  2548                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  2549  001F3A  81A0               	bsf	160,0,b	;volatile
  2550                           
  2551                           ; BSR set to: 14
  2552                           ;pin_manager.c: 108: GIE = state;
  2553  001F3C  A009               	btfss	PIN_MANAGER_Initialize@state,0,c
  2554  001F3E  D002               	goto	u1370
  2555  001F40  8EF2               	bsf	intcon,7,c	;volatile
  2556  001F42  0CAA               	retlw	170
  2557  001F44                     u1370:
  2558  001F44  9EF2               	bcf	intcon,7,c	;volatile
  2559  001F46  0012               	return		;funcret
  2560  001F48                     __end_of_PIN_MANAGER_Initialize:
  2561                           	opt stack 0
  2562                           tosu	equ	0xFFF
  2563                           tosh	equ	0xFFE
  2564                           tosl	equ	0xFFD
  2565                           pclath	equ	0xFFA
  2566                           tblptru	equ	0xFF8
  2567                           tblptrh	equ	0xFF7
  2568                           tblptrl	equ	0xFF6
  2569                           tablat	equ	0xFF5
  2570                           prodh	equ	0xFF4
  2571                           prodl	equ	0xFF3
  2572                           intcon	equ	0xFF2
  2573                           postinc0	equ	0xFEE
  2574                           wreg	equ	0xFE8
  2575                           indf1	equ	0xFE7
  2576                           postinc1	equ	0xFE6
  2577                           postdec1	equ	0xFE5
  2578                           plusw1	equ	0xFE3
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           plusw2	equ	0xFDB
  2585                           fsr2h	equ	0xFDA
  2586                           fsr2l	equ	0xFD9
  2587                           status	equ	0xFD8
  2588                           
  2589 ;; *************** function _OSCILLATOR_Initialize *****************
  2590 ;; Defined at:
  2591 ;;		line 117 in file "mcc_generated_files/mcc.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;		None
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;		None
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  1    wreg      void 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 3F/E
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2609 ;;Total ram usage:        0 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    5
  2612 ;; This function calls:
  2613 ;;		Nothing
  2614 ;; This function is called by:
  2615 ;;		_SYSTEM_Initialize
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text11
  2620  002136                     __ptext11:
  2621                           	opt stack 0
  2622  002136                     _OSCILLATOR_Initialize:
  2623                           	opt stack 24
  2624                           
  2625                           ;mcc.c: 120: OSCCON1 = 0x20;
  2626                           
  2627                           ;incstack = 0
  2628  002136  0E20               	movlw	32
  2629  002138  010E               	movlb	14	; () banked
  2630  00213A  6FD8               	movwf	216,b	;volatile
  2631                           
  2632                           ; BSR set to: 14
  2633                           ;mcc.c: 122: OSCCON3 = 0x00;
  2634  00213C  6BDA               	clrf	218,b	;volatile
  2635                           
  2636                           ; BSR set to: 14
  2637                           ;mcc.c: 124: OSCEN = 0x00;
  2638  00213E  6BDC               	clrf	220,b	;volatile
  2639                           
  2640                           ;mcc.c: 126: OSCFRQ = 0x02;
  2641  002140  0E02               	movlw	2
  2642  002142  6FDE               	movwf	222,b	;volatile
  2643                           
  2644                           ; BSR set to: 14
  2645                           ;mcc.c: 128: OSCTUNE = 0x00;
  2646  002144  6BDD               	clrf	221,b	;volatile
  2647  002146                     l490:
  2648                           
  2649                           ; BSR set to: 14
  2650  002146  B1DB               	btfsc	219,0,b	;volatile
  2651                           
  2652                           ; BSR set to: 14
  2653  002148  0012               	return		;funcret
  2654  00214A  D7FD               	goto	l490
  2655  00214C                     __end_of_OSCILLATOR_Initialize:
  2656                           	opt stack 0
  2657                           tosu	equ	0xFFF
  2658                           tosh	equ	0xFFE
  2659                           tosl	equ	0xFFD
  2660                           pclath	equ	0xFFA
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           prodh	equ	0xFF4
  2666                           prodl	equ	0xFF3
  2667                           intcon	equ	0xFF2
  2668                           postinc0	equ	0xFEE
  2669                           wreg	equ	0xFE8
  2670                           indf1	equ	0xFE7
  2671                           postinc1	equ	0xFE6
  2672                           postdec1	equ	0xFE5
  2673                           plusw1	equ	0xFE3
  2674                           fsr1h	equ	0xFE2
  2675                           fsr1l	equ	0xFE1
  2676                           indf2	equ	0xFDF
  2677                           postinc2	equ	0xFDE
  2678                           postdec2	equ	0xFDD
  2679                           plusw2	equ	0xFDB
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _INTERRUPT_Initialize *****************
  2685 ;; Defined at:
  2686 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		None
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    5
  2707 ;; This function calls:
  2708 ;;		Nothing
  2709 ;; This function is called by:
  2710 ;;		_SYSTEM_Initialize
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text12
  2715  0021E2                     __ptext12:
  2716                           	opt stack 0
  2717  0021E2                     _INTERRUPT_Initialize:
  2718                           	opt stack 24
  2719                           
  2720                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  2721                           
  2722                           ; BSR set to: 14
  2723                           ;incstack = 0
  2724  0021E2  9AF2               	bcf	intcon,5,c	;volatile
  2725  0021E4  0012               	return		;funcret
  2726  0021E6                     __end_of_INTERRUPT_Initialize:
  2727                           	opt stack 0
  2728                           tosu	equ	0xFFF
  2729                           tosh	equ	0xFFE
  2730                           tosl	equ	0xFFD
  2731                           pclath	equ	0xFFA
  2732                           tblptru	equ	0xFF8
  2733                           tblptrh	equ	0xFF7
  2734                           tblptrl	equ	0xFF6
  2735                           tablat	equ	0xFF5
  2736                           prodh	equ	0xFF4
  2737                           prodl	equ	0xFF3
  2738                           intcon	equ	0xFF2
  2739                           postinc0	equ	0xFEE
  2740                           wreg	equ	0xFE8
  2741                           indf1	equ	0xFE7
  2742                           postinc1	equ	0xFE6
  2743                           postdec1	equ	0xFE5
  2744                           plusw1	equ	0xFE3
  2745                           fsr1h	equ	0xFE2
  2746                           fsr1l	equ	0xFE1
  2747                           indf2	equ	0xFDF
  2748                           postinc2	equ	0xFDE
  2749                           postdec2	equ	0xFDD
  2750                           plusw2	equ	0xFDB
  2751                           fsr2h	equ	0xFDA
  2752                           fsr2l	equ	0xFD9
  2753                           status	equ	0xFD8
  2754                           
  2755 ;; *************** function _EUSART1_Initialize *****************
  2756 ;; Defined at:
  2757 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  2758 ;; Parameters:    Size  Location     Type
  2759 ;;		None
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;		None
  2762 ;; Return value:  Size  Location     Type
  2763 ;;                  1    wreg      void 
  2764 ;; Registers used:
  2765 ;;		wreg, status,2
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2775 ;;Total ram usage:        0 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:    5
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_SYSTEM_Initialize
  2782 ;;		_main
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text13
  2787  00214C                     __ptext13:
  2788                           	opt stack 0
  2789  00214C                     _EUSART1_Initialize:
  2790                           	opt stack 24
  2791                           
  2792                           ;eusart1.c: 60: BAUD1CON = 0x08;
  2793                           
  2794                           ;incstack = 0
  2795  00214C  0E08               	movlw	8
  2796  00214E  6E9F               	movwf	3999,c	;volatile
  2797                           
  2798                           ;eusart1.c: 63: RC1STA = 0x90;
  2799  002150  0E90               	movlw	144
  2800  002152  6E9D               	movwf	3997,c	;volatile
  2801                           
  2802                           ;eusart1.c: 66: TX1STA = 0x84;
  2803  002154  0E84               	movlw	132
  2804  002156  6E9E               	movwf	3998,c	;volatile
  2805                           
  2806                           ;eusart1.c: 69: SP1BRGL = 0xA0;
  2807  002158  0EA0               	movlw	160
  2808  00215A  6E9B               	movwf	3995,c	;volatile
  2809                           
  2810                           ;eusart1.c: 72: SP1BRGH = 0x01;
  2811  00215C  0E01               	movlw	1
  2812  00215E  6E9C               	movwf	3996,c	;volatile
  2813  002160  0C01               	retlw	1	;funcret
  2814  002162                     __end_of_EUSART1_Initialize:
  2815                           	opt stack 0
  2816                           tosu	equ	0xFFF
  2817                           tosh	equ	0xFFE
  2818                           tosl	equ	0xFFD
  2819                           pclath	equ	0xFFA
  2820                           tblptru	equ	0xFF8
  2821                           tblptrh	equ	0xFF7
  2822                           tblptrl	equ	0xFF6
  2823                           tablat	equ	0xFF5
  2824                           prodh	equ	0xFF4
  2825                           prodl	equ	0xFF3
  2826                           intcon	equ	0xFF2
  2827                           postinc0	equ	0xFEE
  2828                           wreg	equ	0xFE8
  2829                           indf1	equ	0xFE7
  2830                           postinc1	equ	0xFE6
  2831                           postdec1	equ	0xFE5
  2832                           plusw1	equ	0xFE3
  2833                           fsr1h	equ	0xFE2
  2834                           fsr1l	equ	0xFE1
  2835                           indf2	equ	0xFDF
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           plusw2	equ	0xFDB
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _ReadGPSDateTime *****************
  2844 ;; Defined at:
  2845 ;;		line 39 in file "libs/gps.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  Date            1    8[COMRAM] PTR unsigned char 
  2848 ;;		 -> main@Date(7), 
  2849 ;;  Time            1    9[COMRAM] PTR unsigned char 
  2850 ;;		 -> main@Time(7), 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;  StartCode       7   14[COMRAM] const unsigned char [7]
  2853 ;;  i               2   21[COMRAM] int 
  2854 ;;  Pos             1   25[COMRAM] unsigned char 
  2855 ;;  TempChar        1   24[COMRAM] unsigned char 
  2856 ;;  Commas          1   23[COMRAM] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2868 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2869 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2870 ;;Total ram usage:       18 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    6
  2873 ;; This function calls:
  2874 ;;		_EUSART1_Read
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text14
  2881  0018FE                     __ptext14:
  2882                           	opt stack 0
  2883  0018FE                     _ReadGPSDateTime:
  2884                           	opt stack 24
  2885                           
  2886                           ;gps.c: 40: const char StartCode[7]="$GPRMC,";
  2887                           
  2888                           ;incstack = 0
  2889  0018FE  0E01               	movlw	low ReadGPSDateTime@F11401
  2890  001900  6EF6               	movwf	tblptrl,c
  2891  001902                     	if	1	;There is more than 1 active tblptr byte
  2892  001902  0E0F               	movlw	high ReadGPSDateTime@F11401
  2893  001904  6EF7               	movwf	tblptrh,c
  2894  001906                     	endif
  2895  001906                     	if	1	;There are 3 active tblptr bytes
  2896  001906  0E00               	movlw	low (ReadGPSDateTime@F11401 shr (0+16))
  2897  001908  6EF8               	movwf	tblptru,c
  2898  00190A                     	endif
  2899  00190A  EE20  F00F         	lfsr	2,ReadGPSDateTime@StartCode
  2900  00190E  0E06               	movlw	6
  2901  001910                     u1620:
  2902  001910  0009               	tblrd		*+
  2903  001912  CFF5 FFDE          	movff	tablat,postinc2
  2904  001916  06E8               	decf	wreg,f,c
  2905  001918  E2FB               	bc	u1620
  2906                           
  2907                           ;gps.c: 41: char Pos=0x00;
  2908  00191A  6A1A               	clrf	ReadGPSDateTime@Pos,c
  2909                           
  2910                           ;gps.c: 43: int i=0;
  2911  00191C  6A16               	clrf	ReadGPSDateTime@i,c
  2912  00191E  6A17               	clrf	ReadGPSDateTime@i+1,c
  2913                           
  2914                           ;gps.c: 44: UINT8 Commas=0;
  2915  001920  6A18               	clrf	ReadGPSDateTime@Commas,c
  2916  001922                     l2867:
  2917                           
  2918                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  2919  001922  010E               	movlb	14	; () banked
  2920  001924  ABCD               	btfss	205,5,b	;volatile
  2921  001926  D045               	goto	l2901
  2922                           
  2923                           ; BSR set to: 14
  2924                           ;gps.c: 47: i=0;
  2925  001928  6A16               	clrf	ReadGPSDateTime@i,c
  2926  00192A  6A17               	clrf	ReadGPSDateTime@i+1,c
  2927                           
  2928                           ; BSR set to: 14
  2929                           ;gps.c: 48: TempChar = EUSART1_Read();
  2930  00192C  ECCE  F010         	call	_EUSART1_Read	;wreg free
  2931  001930  6E19               	movwf	ReadGPSDateTime@TempChar,c
  2932                           
  2933                           ; BSR set to: 14
  2934                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  2935  001932  0E06               	movlw	6
  2936  001934  641A               	cpfsgt	ReadGPSDateTime@Pos,c
  2937  001936  D00D               	goto	l2881
  2938                           
  2939                           ; BSR set to: 14
  2940  001938  0E0D               	movlw	13
  2941  00193A  601A               	cpfslt	ReadGPSDateTime@Pos,c
  2942  00193C  D00A               	goto	l2881
  2943                           
  2944                           ; BSR set to: 14
  2945                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  2946  00193E  500A               	movf	ReadGPSDateTime@Time,w,c
  2947  001940  241A               	addwf	ReadGPSDateTime@Pos,w,c
  2948  001942  6ED9               	movwf	fsr2l,c
  2949  001944  6ADA               	clrf	fsr2h,c
  2950  001946  0EF9               	movlw	249
  2951  001948  26D9               	addwf	fsr2l,f,c
  2952  00194A  C019  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  2953  00194E                     l2879:
  2954                           
  2955                           ; BSR set to: 14
  2956                           ;gps.c: 51: Pos++;
  2957  00194E  2A1A               	incf	ReadGPSDateTime@Pos,f,c
  2958                           
  2959                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  2960  001950  D034               	goto	l2903
  2961  001952                     l2881:
  2962                           
  2963                           ; BSR set to: 14
  2964  001952  501A               	movf	ReadGPSDateTime@Pos,w,c
  2965  001954  0F0F               	addlw	low ReadGPSDateTime@StartCode
  2966  001956  6ED9               	movwf	fsr2l,c
  2967  001958  6ADA               	clrf	fsr2h,c
  2968  00195A  5019               	movf	ReadGPSDateTime@TempChar,w,c
  2969  00195C  18DE               	xorwf	postinc2,w,c
  2970  00195E  E104               	bnz	l2887
  2971                           
  2972                           ; BSR set to: 14
  2973  001960  0E07               	movlw	7
  2974  001962  601A               	cpfslt	ReadGPSDateTime@Pos,c
  2975  001964  D001               	goto	l2887
  2976  001966  D7F3               	goto	l2879
  2977  001968                     l2887:
  2978                           
  2979                           ; BSR set to: 14
  2980  001968  0E0C               	movlw	12
  2981  00196A  641A               	cpfsgt	ReadGPSDateTime@Pos,c
  2982  00196C  D020               	goto	l85
  2983                           
  2984                           ; BSR set to: 14
  2985                           ;gps.c: 55: if (Commas<8) {
  2986  00196E  0E08               	movlw	8
  2987  001970  6018               	cpfslt	ReadGPSDateTime@Commas,c
  2988  001972  D005               	goto	l2895
  2989                           
  2990                           ; BSR set to: 14
  2991                           ;gps.c: 56: if (TempChar == 0x2C)
  2992  001974  0E2C               	movlw	44
  2993  001976  1819               	xorwf	ReadGPSDateTime@TempChar,w,c
  2994  001978  E120               	bnz	l2903
  2995                           
  2996                           ; BSR set to: 14
  2997                           ;gps.c: 57: Commas++;
  2998  00197A  2A18               	incf	ReadGPSDateTime@Commas,f,c
  2999  00197C  D01E               	goto	l2903
  3000  00197E                     l2895:
  3001                           
  3002                           ; BSR set to: 14
  3003                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  3004  00197E  0EF3               	movlw	243
  3005  001980  6E0B               	movwf	??_ReadGPSDateTime& (0+255),c
  3006  001982  680C               	setf	(??_ReadGPSDateTime+1)& (0+255),c
  3007  001984  501A               	movf	ReadGPSDateTime@Pos,w,c
  3008  001986  6E0D               	movwf	(??_ReadGPSDateTime+2)& (0+255),c
  3009  001988  6A0E               	clrf	(??_ReadGPSDateTime+3)& (0+255),c
  3010  00198A  500B               	movf	??_ReadGPSDateTime,w,c
  3011  00198C  260D               	addwf	??_ReadGPSDateTime+2,f,c
  3012  00198E  500C               	movf	??_ReadGPSDateTime+1,w,c
  3013  001990  220E               	addwfc	??_ReadGPSDateTime+3,f,c
  3014  001992  BE0E               	btfsc	??_ReadGPSDateTime+3,7,c
  3015  001994  D006               	goto	l2897
  3016  001996  500E               	movf	??_ReadGPSDateTime+3,w,c
  3017  001998  E119               	bnz	l91
  3018  00199A  0E06               	movlw	6
  3019  00199C  5C0D               	subwf	??_ReadGPSDateTime+2,w,c
  3020  00199E  B0D8               	btfsc	status,0,c
  3021  0019A0  0012               	return	
  3022  0019A2                     l2897:
  3023                           
  3024                           ; BSR set to: 14
  3025                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  3026  0019A2  5009               	movf	ReadGPSDateTime@Date,w,c
  3027  0019A4  241A               	addwf	ReadGPSDateTime@Pos,w,c
  3028  0019A6  6ED9               	movwf	fsr2l,c
  3029  0019A8  6ADA               	clrf	fsr2h,c
  3030  0019AA  0EF3               	movlw	243
  3031  0019AC  D7CD               	goto	L4
  3032  0019AE                     l85:
  3033                           
  3034                           ; BSR set to: 14
  3035                           ;gps.c: 66: Pos=0;
  3036  0019AE  6A1A               	clrf	ReadGPSDateTime@Pos,c
  3037                           
  3038                           ; BSR set to: 14
  3039  0019B0  D004               	goto	l2903
  3040  0019B2                     l2901:
  3041                           
  3042                           ; BSR set to: 14
  3043                           ;gps.c: 68: _delay((unsigned long)((20)*(16000000/4000000.0)));
  3044  0019B2  0E1A               	movlw	26
  3045  0019B4                     u2057:
  3046  0019B4  2EE8               	decfsz	wreg,f,c
  3047  0019B6  D7FE               	bra	u2057
  3048  0019B8  D000               	nop2	
  3049  0019BA                     l2903:
  3050                           
  3051                           ;gps.c: 69: i++;
  3052  0019BA  4A16               	infsnz	ReadGPSDateTime@i,f,c
  3053  0019BC  2A17               	incf	ReadGPSDateTime@i+1,f,c
  3054                           
  3055                           ;gps.c: 70: } while(i<1000);
  3056  0019BE  BE17               	btfsc	ReadGPSDateTime@i+1,7,c
  3057  0019C0  D7B0               	goto	l2867
  3058  0019C2  0EE8               	movlw	232
  3059  0019C4  5C16               	subwf	ReadGPSDateTime@i,w,c
  3060  0019C6  0E03               	movlw	3
  3061  0019C8  5817               	subwfb	ReadGPSDateTime@i+1,w,c
  3062  0019CA  E3AB               	bnc	l2867
  3063  0019CC                     l91:
  3064  0019CC  0012               	return		;funcret
  3065  0019CE                     __end_of_ReadGPSDateTime:
  3066                           	opt stack 0
  3067                           tosu	equ	0xFFF
  3068                           tosh	equ	0xFFE
  3069                           tosl	equ	0xFFD
  3070                           pclath	equ	0xFFA
  3071                           tblptru	equ	0xFF8
  3072                           tblptrh	equ	0xFF7
  3073                           tblptrl	equ	0xFF6
  3074                           tablat	equ	0xFF5
  3075                           prodh	equ	0xFF4
  3076                           prodl	equ	0xFF3
  3077                           intcon	equ	0xFF2
  3078                           postinc0	equ	0xFEE
  3079                           wreg	equ	0xFE8
  3080                           indf1	equ	0xFE7
  3081                           postinc1	equ	0xFE6
  3082                           postdec1	equ	0xFE5
  3083                           plusw1	equ	0xFE3
  3084                           fsr1h	equ	0xFE2
  3085                           fsr1l	equ	0xFE1
  3086                           indf2	equ	0xFDF
  3087                           postinc2	equ	0xFDE
  3088                           postdec2	equ	0xFDD
  3089                           plusw2	equ	0xFDB
  3090                           fsr2h	equ	0xFDA
  3091                           fsr2l	equ	0xFD9
  3092                           status	equ	0xFD8
  3093                           
  3094 ;; *************** function _EUSART1_Read *****************
  3095 ;; Defined at:
  3096 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  3097 ;; Parameters:    Size  Location     Type
  3098 ;;		None
  3099 ;; Auto vars:     Size  Location     Type
  3100 ;;		None
  3101 ;; Return value:  Size  Location     Type
  3102 ;;                  1    wreg      unsigned char 
  3103 ;; Registers used:
  3104 ;;		wreg, status,2
  3105 ;; Tracked objects:
  3106 ;;		On entry : 3F/E
  3107 ;;		On exit  : 3F/E
  3108 ;;		Unchanged: 0/0
  3109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3114 ;;Total ram usage:        0 bytes
  3115 ;; Hardware stack levels used:    1
  3116 ;; Hardware stack levels required when called:    5
  3117 ;; This function calls:
  3118 ;;		Nothing
  3119 ;; This function is called by:
  3120 ;;		_ReadGPSDateTime
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text15
  3125  00219C                     __ptext15:
  3126                           	opt stack 0
  3127  00219C                     _EUSART1_Read:
  3128                           	opt stack 24
  3129  00219C                     l386:
  3130                           
  3131                           ; BSR set to: 14
  3132  00219C  ABCD               	btfss	205,5,b	;volatile
  3133  00219E  D7FE               	goto	l386
  3134                           
  3135                           ; BSR set to: 14
  3136                           ;eusart1.c: 82: }
  3137                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  3138  0021A0  A29D               	btfss	3997,1,c	;volatile
  3139  0021A2  D002               	goto	l2427
  3140                           
  3141                           ; BSR set to: 14
  3142                           ;eusart1.c: 86: {
  3143                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  3144  0021A4  9E9D               	bcf	3997,7,c	;volatile
  3145                           
  3146                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  3147  0021A6  8E9D               	bsf	3997,7,c	;volatile
  3148  0021A8                     l2427:
  3149                           
  3150                           ; BSR set to: 14
  3151                           ;eusart1.c: 91: }
  3152                           ;eusart1.c: 93: return RC1REG;
  3153  0021A8  5099               	movf	3993,w,c	;volatile
  3154                           
  3155                           ; BSR set to: 14
  3156  0021AA  0012               	return		;funcret
  3157  0021AC                     __end_of_EUSART1_Read:
  3158                           	opt stack 0
  3159                           tosu	equ	0xFFF
  3160                           tosh	equ	0xFFE
  3161                           tosl	equ	0xFFD
  3162                           pclath	equ	0xFFA
  3163                           tblptru	equ	0xFF8
  3164                           tblptrh	equ	0xFF7
  3165                           tblptrl	equ	0xFF6
  3166                           tablat	equ	0xFF5
  3167                           prodh	equ	0xFF4
  3168                           prodl	equ	0xFF3
  3169                           intcon	equ	0xFF2
  3170                           postinc0	equ	0xFEE
  3171                           wreg	equ	0xFE8
  3172                           indf1	equ	0xFE7
  3173                           postinc1	equ	0xFE6
  3174                           postdec1	equ	0xFE5
  3175                           plusw1	equ	0xFE3
  3176                           fsr1h	equ	0xFE2
  3177                           fsr1l	equ	0xFE1
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           plusw2	equ	0xFDB
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _LoadAllFromEeprom *****************
  3187 ;; Defined at:
  3188 ;;		line 159 in file "libs/eeprom.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;		None
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      void 
  3195 ;; Registers used:
  3196 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3206 ;;Total ram usage:        0 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    7
  3209 ;; This function calls:
  3210 ;;		_LoadCyclesFromEeprom
  3211 ;;		_LoadEventsFromEeprom
  3212 ;;		_LoadSettingsFromEeprom
  3213 ;;		_LoadStatesFromEeprom
  3214 ;; This function is called by:
  3215 ;;		_main
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text16
  3220  0021AC                     __ptext16:
  3221                           	opt stack 0
  3222  0021AC                     _LoadAllFromEeprom:
  3223                           	opt stack 23
  3224                           
  3225                           ;eeprom.c: 160: LoadSettingsFromEeprom ();
  3226                           
  3227                           ; BSR set to: 14
  3228                           ;incstack = 0
  3229  0021AC  EC5A  F008         	call	_LoadSettingsFromEeprom	;wreg free
  3230                           
  3231                           ;eeprom.c: 161: LoadEventsFromEeprom ();
  3232  0021B0  EC0B  F009         	call	_LoadEventsFromEeprom	;wreg free
  3233                           
  3234                           ; BSR set to: 1
  3235                           ;eeprom.c: 162: LoadStatesFromEeprom();
  3236  0021B4  EC89  F007         	call	_LoadStatesFromEeprom	;wreg free
  3237                           
  3238                           ;eeprom.c: 163: LoadCyclesFromEeprom();
  3239  0021B8  EFA0  F009         	goto	_LoadCyclesFromEeprom	;wreg free
  3240  0021BC                     __end_of_LoadAllFromEeprom:
  3241                           	opt stack 0
  3242                           tosu	equ	0xFFF
  3243                           tosh	equ	0xFFE
  3244                           tosl	equ	0xFFD
  3245                           pclath	equ	0xFFA
  3246                           tblptru	equ	0xFF8
  3247                           tblptrh	equ	0xFF7
  3248                           tblptrl	equ	0xFF6
  3249                           tablat	equ	0xFF5
  3250                           prodh	equ	0xFF4
  3251                           prodl	equ	0xFF3
  3252                           intcon	equ	0xFF2
  3253                           postinc0	equ	0xFEE
  3254                           wreg	equ	0xFE8
  3255                           indf1	equ	0xFE7
  3256                           postinc1	equ	0xFE6
  3257                           postdec1	equ	0xFE5
  3258                           plusw1	equ	0xFE3
  3259                           fsr1h	equ	0xFE2
  3260                           fsr1l	equ	0xFE1
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           plusw2	equ	0xFDB
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function _LoadStatesFromEeprom *****************
  3270 ;; Defined at:
  3271 ;;		line 108 in file "libs/eeprom.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;  j               2   30[COMRAM] int 
  3276 ;;  j               2   28[COMRAM] int 
  3277 ;;  i               2   34[COMRAM] int 
  3278 ;;  AddStates       2   32[COMRAM] struct _WORD_VAL
  3279 ;;  TempSpecialA    2   25[COMRAM] struct _WORD_VAL
  3280 ;;  TempNormalAd    2   23[COMRAM] struct _WORD_VAL
  3281 ;;  AddAudioSpec    2   21[COMRAM] struct _WORD_VAL
  3282 ;;  AddAudioNorm    2   19[COMRAM] struct _WORD_VAL
  3283 ;;  AudAddInc       1   27[COMRAM] unsigned char 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  1    wreg      void 
  3286 ;; Registers used:
  3287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3288 ;; Tracked objects:
  3289 ;;		On entry : 3F/1
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3294 ;;      Locals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3295 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3296 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3297 ;;Total ram usage:       20 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    6
  3300 ;; This function calls:
  3301 ;;		_ReadEeprom
  3302 ;;		___awdiv
  3303 ;;		___wmul
  3304 ;; This function is called by:
  3305 ;;		_LoadAllFromEeprom
  3306 ;; This function uses a non-reentrant model
  3307 ;;
  3308                           
  3309                           	psect	text17
  3310  000F12                     __ptext17:
  3311                           	opt stack 0
  3312  000F12                     _LoadStatesFromEeprom:
  3313                           	opt stack 23
  3314                           
  3315                           ; BSR set to: 1
  3316                           ;eeprom.c: 109: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  3317                           ;eeprom.c: 110: UINT8 AudAddInc;
  3318                           ;eeprom.c: 111: AddStates.Val = 224;
  3319                           
  3320                           ;incstack = 0
  3321  000F12  6A22               	clrf	LoadStatesFromEeprom@AddStates+1,c
  3322  000F14  0EE0               	movlw	224
  3323  000F16  6E21               	movwf	LoadStatesFromEeprom@AddStates,c
  3324                           
  3325                           ;eeprom.c: 112: AddAudioNormal.Val = 23;
  3326  000F18  6A15               	clrf	LoadStatesFromEeprom@AddAudioNormal+1,c
  3327  000F1A  0E17               	movlw	23
  3328  000F1C  6E14               	movwf	LoadStatesFromEeprom@AddAudioNormal,c
  3329                           
  3330                           ;eeprom.c: 113: AddAudioSpecial.Val = 43;
  3331  000F1E  6A17               	clrf	LoadStatesFromEeprom@AddAudioSpecial+1,c
  3332  000F20  0E2B               	movlw	43
  3333  000F22  6E16               	movwf	LoadStatesFromEeprom@AddAudioSpecial,c
  3334                           
  3335                           ; BSR set to: 1
  3336                           ;eeprom.c: 114: for (int i=0; i<160; i++) {
  3337  000F24  6A23               	clrf	LoadStatesFromEeprom@i,c
  3338  000F26  6A24               	clrf	LoadStatesFromEeprom@i+1,c
  3339  000F28                     l2571:
  3340                           
  3341                           ;eeprom.c: 115: STATES[i].PERIOD = ReadEeprom(AddStates);
  3342  000F28  D89E               	call	PL6	;call to abstracted procedure
  3343  000F2A  EC5D  F010         	call	___wmul	;wreg free
  3344  000F2E  0EF0               	movlw	low _STATES
  3345  000F30  2409               	addwf	?___wmul,w,c
  3346  000F32  6ED9               	movwf	fsr2l,c
  3347  000F34  0E01               	movlw	high _STATES
  3348  000F36  200A               	addwfc	?___wmul+1,w,c
  3349  000F38  D8AE               	call	PL54	;call to abstracted procedure
  3350  000F3A  ECBB  F010         	call	_ReadEeprom	;wreg free
  3351  000F3E  6EDF               	movwf	indf2,c
  3352                           
  3353                           ;eeprom.c: 116: AddStates.Val++;
  3354  000F40  4A21               	infsnz	LoadStatesFromEeprom@AddStates,f,c
  3355  000F42  2A22               	incf	LoadStatesFromEeprom@AddStates+1,f,c
  3356                           
  3357                           ;eeprom.c: 117: for (int j=0; j<2; j++) {
  3358  000F44  6A1D               	clrf	LoadStatesFromEeprom@j,c
  3359  000F46  6A1E               	clrf	LoadStatesFromEeprom@j+1,c
  3360  000F48                     l2581:
  3361                           
  3362                           ;eeprom.c: 118: STATES[i].ON[j] = ReadEeprom(AddStates);
  3363  000F48  D88E               	call	PL6	;call to abstracted procedure
  3364  000F4A  EC5D  F010         	call	___wmul	;wreg free
  3365  000F4E  D8A9               	call	PL86	;call to abstracted procedure
  3366  000F50  2A11               	incf	??_LoadStatesFromEeprom,f,c
  3367  000F52  0E00               	movlw	0
  3368  000F54  2212               	addwfc	??_LoadStatesFromEeprom+1,f,c
  3369  000F56  5009               	movf	?___wmul,w,c
  3370  000F58  2611               	addwf	??_LoadStatesFromEeprom,f,c
  3371  000F5A  500A               	movf	?___wmul+1,w,c
  3372  000F5C  2212               	addwfc	??_LoadStatesFromEeprom+1,f,c
  3373  000F5E  501D               	movf	LoadStatesFromEeprom@j,w,c
  3374  000F60  2411               	addwf	??_LoadStatesFromEeprom,w,c
  3375  000F62  6ED9               	movwf	fsr2l,c
  3376  000F64  501E               	movf	LoadStatesFromEeprom@j+1,w,c
  3377  000F66  2012               	addwfc	??_LoadStatesFromEeprom+1,w,c
  3378  000F68  D896               	call	PL54	;call to abstracted procedure
  3379  000F6A  ECBB  F010         	call	_ReadEeprom	;wreg free
  3380  000F6E  6EDF               	movwf	indf2,c
  3381                           
  3382                           ;eeprom.c: 119: AddStates.Val++;
  3383  000F70  4A21               	infsnz	LoadStatesFromEeprom@AddStates,f,c
  3384  000F72  2A22               	incf	LoadStatesFromEeprom@AddStates+1,f,c
  3385  000F74  4A1D               	infsnz	LoadStatesFromEeprom@j,f,c
  3386  000F76  2A1E               	incf	LoadStatesFromEeprom@j+1,f,c
  3387  000F78  BE1E               	btfsc	LoadStatesFromEeprom@j+1,7,c
  3388  000F7A  D7E6               	goto	l2581
  3389  000F7C  501E               	movf	LoadStatesFromEeprom@j+1,w,c
  3390  000F7E  E103               	bnz	u1250
  3391  000F80  0E02               	movlw	2
  3392  000F82  5C1D               	subwf	LoadStatesFromEeprom@j,w,c
  3393  000F84  E3E1               	bnc	l2581
  3394  000F86                     u1250:
  3395                           
  3396                           ;eeprom.c: 120: }
  3397                           ;eeprom.c: 121: for (int j=0; j<2; j++) {
  3398  000F86  6A1F               	clrf	LoadStatesFromEeprom@j_1155,c
  3399  000F88  6A20               	clrf	LoadStatesFromEeprom@j_1155+1,c
  3400  000F8A                     l2593:
  3401                           
  3402                           ;eeprom.c: 122: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  3403  000F8A  D86D               	call	PL6	;call to abstracted procedure
  3404  000F8C  EC5D  F010         	call	___wmul	;wreg free
  3405  000F90  D888               	call	PL86	;call to abstracted procedure
  3406  000F92  0E03               	movlw	3
  3407  000F94  2611               	addwf	??_LoadStatesFromEeprom,f,c
  3408  000F96  0E00               	movlw	0
  3409  000F98  2212               	addwfc	??_LoadStatesFromEeprom+1,f,c
  3410  000F9A  5009               	movf	?___wmul,w,c
  3411  000F9C  2611               	addwf	??_LoadStatesFromEeprom,f,c
  3412  000F9E  500A               	movf	?___wmul+1,w,c
  3413  000FA0  2212               	addwfc	??_LoadStatesFromEeprom+1,f,c
  3414  000FA2  501F               	movf	LoadStatesFromEeprom@j_1155,w,c
  3415  000FA4  2411               	addwf	??_LoadStatesFromEeprom,w,c
  3416  000FA6  6ED9               	movwf	fsr2l,c
  3417  000FA8  5020               	movf	LoadStatesFromEeprom@j_1155+1,w,c
  3418  000FAA  2012               	addwfc	??_LoadStatesFromEeprom+1,w,c
  3419  000FAC  D874               	call	PL54	;call to abstracted procedure
  3420  000FAE  ECBB  F010         	call	_ReadEeprom	;wreg free
  3421  000FB2  6EDF               	movwf	indf2,c
  3422                           
  3423                           ;eeprom.c: 123: AddStates.Val++;
  3424  000FB4  4A21               	infsnz	LoadStatesFromEeprom@AddStates,f,c
  3425  000FB6  2A22               	incf	LoadStatesFromEeprom@AddStates+1,f,c
  3426  000FB8  4A1F               	infsnz	LoadStatesFromEeprom@j_1155,f,c
  3427  000FBA  2A20               	incf	LoadStatesFromEeprom@j_1155+1,f,c
  3428  000FBC  BE20               	btfsc	LoadStatesFromEeprom@j_1155+1,7,c
  3429  000FBE  D7E5               	goto	l2593
  3430  000FC0  5020               	movf	LoadStatesFromEeprom@j_1155+1,w,c
  3431  000FC2  E103               	bnz	u1260
  3432  000FC4  0E02               	movlw	2
  3433  000FC6  5C1F               	subwf	LoadStatesFromEeprom@j_1155,w,c
  3434  000FC8  E3E0               	bnc	l2593
  3435  000FCA                     u1260:
  3436                           
  3437                           ;eeprom.c: 124: }
  3438                           ;eeprom.c: 125: AudAddInc = i/8;
  3439  000FCA  C023  F009         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  3440  000FCE  C024  F00A         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  3441  000FD2  6A0C               	clrf	___awdiv@divisor+1,c
  3442  000FD4  0E08               	movlw	8
  3443  000FD6  6E0B               	movwf	___awdiv@divisor,c
  3444  000FD8  ECCF  F00E         	call	___awdiv	;wreg free
  3445  000FDC  5009               	movf	?___awdiv,w,c
  3446  000FDE  6E1C               	movwf	LoadStatesFromEeprom@AudAddInc,c
  3447                           
  3448                           ;eeprom.c: 126: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  3449  000FE0  501C               	movf	LoadStatesFromEeprom@AudAddInc,w,c
  3450  000FE2  2414               	addwf	LoadStatesFromEeprom@AddAudioNormal,w,c
  3451  000FE4  6E18               	movwf	LoadStatesFromEeprom@TempNormalAdd,c
  3452  000FE6  0E00               	movlw	0
  3453  000FE8  2015               	addwfc	LoadStatesFromEeprom@AddAudioNormal+1,w,c
  3454  000FEA  6E19               	movwf	LoadStatesFromEeprom@TempNormalAdd+1,c
  3455                           
  3456                           ;eeprom.c: 127: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  3457  000FEC  501C               	movf	LoadStatesFromEeprom@AudAddInc,w,c
  3458  000FEE  2416               	addwf	LoadStatesFromEeprom@AddAudioSpecial,w,c
  3459  000FF0  6E1A               	movwf	LoadStatesFromEeprom@TempSpecialAdd,c
  3460  000FF2  0E00               	movlw	0
  3461  000FF4  2017               	addwfc	LoadStatesFromEeprom@AddAudioSpecial+1,w,c
  3462  000FF6  6E1B               	movwf	LoadStatesFromEeprom@TempSpecialAdd+1,c
  3463                           
  3464                           ;eeprom.c: 128: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  3465  000FF8  D845               	call	PL42	;call to abstracted procedure
  3466  000FFA  D001               	goto	u1274
  3467  000FFC                     u1275:
  3468  000FFC  D857               	call	PL90	;call to abstracted procedure
  3469  000FFE                     u1274:
  3470  000FFE  2E11               	decfsz	??_LoadStatesFromEeprom,f,c
  3471  001000  D7FD               	goto	u1275
  3472  001002  C018  F009         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  3473  001006  C019  F00A         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  3474  00100A  ECBB  F010         	call	_ReadEeprom	;wreg free
  3475  00100E  1412               	andwf	??_LoadStatesFromEeprom+1,w,c
  3476  001010  E006               	bz	l2609
  3477                           
  3478                           ;eeprom.c: 129: STATES[i].AUDIO = AUDIO_NORMAL;
  3479  001012  D829               	call	PL6	;call to abstracted procedure
  3480  001014  EC5D  F010         	call	___wmul	;wreg free
  3481  001018  D82E               	call	PL40	;call to abstracted procedure
  3482  00101A  0E01               	movlw	1
  3483  00101C  D018               	goto	L5
  3484  00101E                     l2609:
  3485                           
  3486                           ;eeprom.c: 130: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  3487  00101E  D832               	call	PL42	;call to abstracted procedure
  3488  001020  D001               	goto	u1294
  3489  001022                     u1295:
  3490  001022  D844               	call	PL90	;call to abstracted procedure
  3491  001024                     u1294:
  3492  001024  2E11               	decfsz	??_LoadStatesFromEeprom,f,c
  3493  001026  D7FD               	goto	u1295
  3494  001028  C01A  F009         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  3495  00102C  C01B  F00A         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  3496  001030  ECBB  F010         	call	_ReadEeprom	;wreg free
  3497  001034  1412               	andwf	??_LoadStatesFromEeprom+1,w,c
  3498  001036  E006               	bz	l2613
  3499                           
  3500                           ;eeprom.c: 131: STATES[i].AUDIO = AUDIO_SPECIAL;
  3501  001038  D816               	call	PL6	;call to abstracted procedure
  3502  00103A  EC5D  F010         	call	___wmul	;wreg free
  3503  00103E  D81B               	call	PL40	;call to abstracted procedure
  3504  001040  0E02               	movlw	2
  3505  001042  D005               	goto	L5
  3506  001044                     l2613:
  3507                           
  3508                           ;eeprom.c: 132: else
  3509                           ;eeprom.c: 133: STATES[i].AUDIO = AUDIO_OFF;
  3510  001044  D810               	call	PL6	;call to abstracted procedure
  3511  001046  EC5D  F010         	call	___wmul	;wreg free
  3512  00104A  D815               	call	PL40	;call to abstracted procedure
  3513  00104C  0E00               	movlw	0
  3514  00104E                     L5:
  3515  00104E  6EDF               	movwf	indf2,c
  3516  001050  4A23               	infsnz	LoadStatesFromEeprom@i,f,c
  3517  001052  2A24               	incf	LoadStatesFromEeprom@i+1,f,c
  3518  001054  BE24               	btfsc	LoadStatesFromEeprom@i+1,7,c
  3519  001056  D768               	goto	l2571
  3520  001058  5024               	movf	LoadStatesFromEeprom@i+1,w,c
  3521  00105A  E104               	bnz	u1310
  3522  00105C  0EA0               	movlw	160
  3523  00105E  5C23               	subwf	LoadStatesFromEeprom@i,w,c
  3524  001060  E201 D762          	bnc	l2571
  3525  001064                     u1310:
  3526  001064  0012               	return		;funcret
  3527  001066                     __end_of_LoadStatesFromEeprom:
  3528                           	opt stack 0
  3529  001066                     PL6:
  3530                           	opt stack 23
  3531  001066  C023  F009         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  3532  00106A  C024  F00A         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  3533  00106E  6A0C               	clrf	___wmul@multiplicand+1,c
  3534  001070  0E06               	movlw	6
  3535  001072  6E0B               	movwf	___wmul@multiplicand,c
  3536  001074  0C06               	retlw	6
  3537  001076                     __end_ofPL6:
  3538                           	opt stack 0
  3539  001076                     PL40:
  3540                           	opt stack 23
  3541  001076  0EF5               	movlw	low (_STATES+5)
  3542  001078  2409               	addwf	?___wmul,w,c
  3543  00107A  6ED9               	movwf	fsr2l,c
  3544  00107C  0E01               	movlw	high (_STATES+5)
  3545  00107E  200A               	addwfc	?___wmul+1,w,c
  3546  001080  6EDA               	movwf	fsr2h,c
  3547  001082  0012               	return	
  3548  001084                     __end_ofPL40:
  3549                           	opt stack 0
  3550  001084                     PL42:
  3551                           	opt stack 23
  3552  001084  C023  F011         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  3553  001088  0E07               	movlw	7
  3554  00108A  1611               	andwf	??_LoadStatesFromEeprom,f,c
  3555  00108C  0E80               	movlw	128
  3556  00108E  6E12               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),c
  3557  001090  6A13               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),c
  3558  001092  2A11               	incf	??_LoadStatesFromEeprom,f,c
  3559  001094  0C80               	retlw	128
  3560  001096                     __end_ofPL42:
  3561                           	opt stack 0
  3562  001096                     PL54:
  3563                           	opt stack 23
  3564  001096  6EDA               	movwf	fsr2h,c
  3565  001098  C021  F009         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  3566  00109C  C022  F00A         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  3567  0010A0  0012               	return	
  3568  0010A2                     __end_ofPL54:
  3569                           	opt stack 0
  3570  0010A2                     PL86:
  3571                           	opt stack 23
  3572  0010A2  0EF0               	movlw	low _STATES
  3573  0010A4  6E11               	movwf	??_LoadStatesFromEeprom& (0+255),c
  3574  0010A6  0E01               	movlw	high _STATES
  3575  0010A8  6E12               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),c
  3576  0010AA  0012               	return	
  3577  0010AC                     __end_ofPL86:
  3578                           	opt stack 0
  3579  0010AC                     PL90:
  3580                           	opt stack 23
  3581  0010AC  3413               	rlcf	??_LoadStatesFromEeprom+2,w,c
  3582  0010AE  3213               	rrcf	??_LoadStatesFromEeprom+2,f,c
  3583  0010B0  3212               	rrcf	??_LoadStatesFromEeprom+1,f,c
  3584  0010B2  0012               	return	
  3585  0010B4                     __end_ofPL90:
  3586                           	opt stack 0
  3587                           tosu	equ	0xFFF
  3588                           tosh	equ	0xFFE
  3589                           tosl	equ	0xFFD
  3590                           pclath	equ	0xFFA
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           prodh	equ	0xFF4
  3596                           prodl	equ	0xFF3
  3597                           intcon	equ	0xFF2
  3598                           postinc0	equ	0xFEE
  3599                           wreg	equ	0xFE8
  3600                           indf1	equ	0xFE7
  3601                           postinc1	equ	0xFE6
  3602                           postdec1	equ	0xFE5
  3603                           plusw1	equ	0xFE3
  3604                           fsr1h	equ	0xFE2
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           plusw2	equ	0xFDB
  3610                           fsr2h	equ	0xFDA
  3611                           fsr2l	equ	0xFD9
  3612                           status	equ	0xFD8
  3613                           
  3614 ;; *************** function _LoadSettingsFromEeprom *****************
  3615 ;; Defined at:
  3616 ;;		line 15 in file "libs/eeprom.c"
  3617 ;; Parameters:    Size  Location     Type
  3618 ;;		None
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  Temp32          4   15[COMRAM] struct _DWORD_VAL
  3621 ;;  Address         2   21[COMRAM] struct _WORD_VAL
  3622 ;;  Temp16          2   19[COMRAM] struct _WORD_VAL
  3623 ;; Return value:  Size  Location     Type
  3624 ;;                  1    wreg      void 
  3625 ;; Registers used:
  3626 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3627 ;; Tracked objects:
  3628 ;;		On entry : 0/0
  3629 ;;		On exit  : 0/0
  3630 ;;		Unchanged: 0/0
  3631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3633 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3634 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3635 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3636 ;;Total ram usage:        9 bytes
  3637 ;; Hardware stack levels used:    1
  3638 ;; Hardware stack levels required when called:    6
  3639 ;; This function calls:
  3640 ;;		_ReadEeprom
  3641 ;;		___wmul
  3642 ;; This function is called by:
  3643 ;;		_LoadAllFromEeprom
  3644 ;; This function uses a non-reentrant model
  3645 ;;
  3646                           
  3647                           	psect	text18
  3648  0010B4                     __ptext18:
  3649                           	opt stack 0
  3650  0010B4                     _LoadSettingsFromEeprom:
  3651                           	opt stack 23
  3652                           
  3653                           ;eeprom.c: 16: WORD_VAL Temp16, Address;
  3654                           ;eeprom.c: 17: DWORD_VAL Temp32;
  3655                           ;eeprom.c: 19: Address.Val = 0;
  3656                           
  3657                           ;incstack = 0
  3658  0010B4  6A16               	clrf	LoadSettingsFromEeprom@Address,c
  3659  0010B6  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3660                           
  3661                           ;eeprom.c: 20: Temp16.v[0] = ReadEeprom(Address);
  3662  0010B8  D8A9               	call	PL2	;call to abstracted procedure
  3663  0010BA  ECBB  F010         	call	_ReadEeprom	;wreg free
  3664  0010BE  6E14               	movwf	LoadSettingsFromEeprom@Temp16,c
  3665                           
  3666                           ;eeprom.c: 21: Address.Val++;
  3667  0010C0  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3668  0010C2  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3669                           
  3670                           ;eeprom.c: 23: TIME_ZONE = (INT16) Temp16.Val;
  3671  0010C4  D8A3               	call	PL2	;call to abstracted procedure
  3672  0010C6  ECBB  F010         	call	_ReadEeprom	;wreg free
  3673  0010CA  6E15               	movwf	LoadSettingsFromEeprom@Temp16+1,c
  3674                           
  3675                           ;eeprom.c: 25: Address.Val = 2;
  3676  0010CC  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3677  0010CE  0E02               	movlw	2
  3678  0010D0  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3679                           
  3680                           ;eeprom.c: 26: DAY_LIGHT_START.Day = ReadEeprom (Address);
  3681  0010D2  D89C               	call	PL2	;call to abstracted procedure
  3682  0010D4  ECBB  F010         	call	_ReadEeprom	;wreg free
  3683  0010D8  6E0F               	movwf	??_LoadSettingsFromEeprom& (0+255),c
  3684  0010DA  184B               	xorwf	_DAY_LIGHT_START,w,c
  3685  0010DC  0BE0               	andlw	-32
  3686  0010DE  180F               	xorwf	??_LoadSettingsFromEeprom,w,c
  3687  0010E0  6E4B               	movwf	_DAY_LIGHT_START,c
  3688                           
  3689                           ;eeprom.c: 27: Address.Val++;
  3690  0010E2  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3691  0010E4  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3692                           
  3693                           ;eeprom.c: 28: DAY_LIGHT_START.Month = ReadEeprom (Address);
  3694  0010E6  D892               	call	PL2	;call to abstracted procedure
  3695  0010E8  ECBB  F010         	call	_ReadEeprom	;wreg free
  3696  0010EC  6E0F               	movwf	??_LoadSettingsFromEeprom& (0+255),c
  3697  0010EE  184C               	xorwf	_DAY_LIGHT_START+1,w,c
  3698  0010F0  0BF0               	andlw	-16
  3699  0010F2  180F               	xorwf	??_LoadSettingsFromEeprom,w,c
  3700  0010F4  6E4C               	movwf	_DAY_LIGHT_START+1,c
  3701                           
  3702                           ;eeprom.c: 30: Address.Val = 4;
  3703  0010F6  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3704  0010F8  0E04               	movlw	4
  3705  0010FA  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3706                           
  3707                           ;eeprom.c: 31: DAY_LIGHT_END.Day = ReadEeprom (Address);
  3708  0010FC  D887               	call	PL2	;call to abstracted procedure
  3709  0010FE  ECBB  F010         	call	_ReadEeprom	;wreg free
  3710  001102  6E0F               	movwf	??_LoadSettingsFromEeprom& (0+255),c
  3711  001104  1849               	xorwf	_DAY_LIGHT_END,w,c
  3712  001106  0BE0               	andlw	-32
  3713  001108  180F               	xorwf	??_LoadSettingsFromEeprom,w,c
  3714  00110A  6E49               	movwf	_DAY_LIGHT_END,c
  3715                           
  3716                           ;eeprom.c: 32: Address.Val++;
  3717  00110C  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3718  00110E  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3719                           
  3720                           ;eeprom.c: 33: DAY_LIGHT_END.Month = ReadEeprom (Address);
  3721  001110  D87D               	call	PL2	;call to abstracted procedure
  3722  001112  ECBB  F010         	call	_ReadEeprom	;wreg free
  3723  001116  6E0F               	movwf	??_LoadSettingsFromEeprom& (0+255),c
  3724  001118  184A               	xorwf	_DAY_LIGHT_END+1,w,c
  3725  00111A  0BF0               	andlw	-16
  3726  00111C  180F               	xorwf	??_LoadSettingsFromEeprom,w,c
  3727  00111E  6E4A               	movwf	_DAY_LIGHT_END+1,c
  3728                           
  3729                           ;eeprom.c: 35: Address.Val = 6;
  3730  001120  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3731  001122  0E06               	movlw	6
  3732  001124  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3733                           
  3734                           ;eeprom.c: 36: CENTURY = ReadEeprom(Address);
  3735  001126  D872               	call	PL2	;call to abstracted procedure
  3736  001128  ECBB  F010         	call	_ReadEeprom	;wreg free
  3737                           
  3738                           ;eeprom.c: 38: Address.Val = 7;
  3739  00112C  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3740  00112E  0E07               	movlw	7
  3741  001130  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3742                           
  3743                           ;eeprom.c: 39: Temp16.v[0] = ReadEeprom(Address);
  3744  001132  D86C               	call	PL2	;call to abstracted procedure
  3745  001134  ECBB  F010         	call	_ReadEeprom	;wreg free
  3746  001138  6E14               	movwf	LoadSettingsFromEeprom@Temp16,c
  3747                           
  3748                           ;eeprom.c: 40: Address.Val++;
  3749  00113A  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3750  00113C  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3751                           
  3752                           ;eeprom.c: 42: CYCLE_DELAY = (INT16) Temp16.Val;
  3753  00113E  D866               	call	PL2	;call to abstracted procedure
  3754  001140  ECBB  F010         	call	_ReadEeprom	;wreg free
  3755  001144  6E15               	movwf	LoadSettingsFromEeprom@Temp16+1,c
  3756                           
  3757                           ;eeprom.c: 44: Address.Val = 9;
  3758  001146  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3759  001148  0E09               	movlw	9
  3760  00114A  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3761                           
  3762                           ;eeprom.c: 45: BLINK_ON_TIME = ReadEeprom(Address);
  3763  00114C  D85F               	call	PL2	;call to abstracted procedure
  3764  00114E  ECBB  F010         	call	_ReadEeprom	;wreg free
  3765                           
  3766                           ;eeprom.c: 47: Address.Val = 10;
  3767  001152  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3768  001154  0E0A               	movlw	10
  3769  001156  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3770                           
  3771                           ;eeprom.c: 48: BLINK_OFF_TIME = ReadEeprom(Address);
  3772  001158  D859               	call	PL2	;call to abstracted procedure
  3773  00115A  ECBB  F010         	call	_ReadEeprom	;wreg free
  3774                           
  3775                           ;eeprom.c: 50: Address.Val = 11;
  3776  00115E  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3777  001160  0E0B               	movlw	11
  3778  001162  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3779                           
  3780                           ;eeprom.c: 51: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  3781  001164  D853               	call	PL2	;call to abstracted procedure
  3782  001166  ECBB  F010         	call	_ReadEeprom	;wreg free
  3783                           
  3784                           ;eeprom.c: 53: Address.Val = 12;
  3785  00116A  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3786  00116C  0E0C               	movlw	12
  3787  00116E  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3788                           
  3789                           ;eeprom.c: 54: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  3790  001170  D84D               	call	PL2	;call to abstracted procedure
  3791  001172  ECBB  F010         	call	_ReadEeprom	;wreg free
  3792                           
  3793                           ;eeprom.c: 56: Address.Val = 13;
  3794  001176  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3795  001178  0E0D               	movlw	13
  3796  00117A  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3797                           
  3798                           ;eeprom.c: 57: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  3799  00117C  D847               	call	PL2	;call to abstracted procedure
  3800  00117E  ECBB  F010         	call	_ReadEeprom	;wreg free
  3801                           
  3802                           ;eeprom.c: 59: Address.Val = 14;
  3803  001182  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3804  001184  0E0E               	movlw	14
  3805  001186  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3806                           
  3807                           ;eeprom.c: 60: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  3808  001188  D841               	call	PL2	;call to abstracted procedure
  3809  00118A  ECBB  F010         	call	_ReadEeprom	;wreg free
  3810                           
  3811                           ;eeprom.c: 62: Address.Val = 15;
  3812  00118E  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3813  001190  0E0F               	movlw	15
  3814  001192  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3815                           
  3816                           ;eeprom.c: 63: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  3817  001194  D83B               	call	PL2	;call to abstracted procedure
  3818  001196  ECBB  F010         	call	_ReadEeprom	;wreg free
  3819                           
  3820                           ;eeprom.c: 65: Address.Val = 16;
  3821  00119A  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3822  00119C  0E10               	movlw	16
  3823  00119E  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3824                           
  3825                           ;eeprom.c: 66: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  3826  0011A0  D835               	call	PL2	;call to abstracted procedure
  3827  0011A2  ECBB  F010         	call	_ReadEeprom	;wreg free
  3828                           
  3829                           ;eeprom.c: 68: Address.Val = 17;
  3830  0011A6  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3831  0011A8  0E11               	movlw	17
  3832  0011AA  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3833                           
  3834                           ;eeprom.c: 69: GPS_SYNC_AT_START = ReadEeprom(Address);
  3835  0011AC  D82F               	call	PL2	;call to abstracted procedure
  3836  0011AE  ECBB  F010         	call	_ReadEeprom	;wreg free
  3837                           
  3838                           ;eeprom.c: 71: Address.Val = 18;
  3839  0011B2  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3840  0011B4  0E12               	movlw	18
  3841  0011B6  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3842                           
  3843                           ;eeprom.c: 72: Temp32.Val = 0;
  3844  0011B8  6A10               	clrf	LoadSettingsFromEeprom@Temp32,c
  3845  0011BA  6A11               	clrf	LoadSettingsFromEeprom@Temp32+1,c
  3846  0011BC  6A12               	clrf	LoadSettingsFromEeprom@Temp32+2,c
  3847  0011BE  6A13               	clrf	LoadSettingsFromEeprom@Temp32+3,c
  3848                           
  3849                           ;eeprom.c: 73: Temp32.v[0] = ReadEeprom(Address);
  3850  0011C0  D825               	call	PL2	;call to abstracted procedure
  3851  0011C2  ECBB  F010         	call	_ReadEeprom	;wreg free
  3852  0011C6  6E10               	movwf	LoadSettingsFromEeprom@Temp32,c
  3853                           
  3854                           ;eeprom.c: 74: Address.Val++;
  3855  0011C8  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3856  0011CA  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3857                           
  3858                           ;eeprom.c: 75: Temp32.v[1] = ReadEeprom(Address);
  3859  0011CC  D81F               	call	PL2	;call to abstracted procedure
  3860  0011CE  ECBB  F010         	call	_ReadEeprom	;wreg free
  3861  0011D2  6E11               	movwf	LoadSettingsFromEeprom@Temp32+1,c
  3862                           
  3863                           ;eeprom.c: 76: Address.Val++;
  3864  0011D4  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3865  0011D6  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3866                           
  3867                           ;eeprom.c: 78: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  3868  0011D8  D819               	call	PL2	;call to abstracted procedure
  3869  0011DA  ECBB  F010         	call	_ReadEeprom	;wreg free
  3870  0011DE  6E12               	movwf	LoadSettingsFromEeprom@Temp32+2,c
  3871                           
  3872                           ;eeprom.c: 80: Address.Val = 21;
  3873  0011E0  6A17               	clrf	LoadSettingsFromEeprom@Address+1,c
  3874  0011E2  0E15               	movlw	21
  3875  0011E4  6E16               	movwf	LoadSettingsFromEeprom@Address,c
  3876                           
  3877                           ;eeprom.c: 81: Temp16.v[0] = ReadEeprom(Address);
  3878  0011E6  D812               	call	PL2	;call to abstracted procedure
  3879  0011E8  ECBB  F010         	call	_ReadEeprom	;wreg free
  3880  0011EC  6E14               	movwf	LoadSettingsFromEeprom@Temp16,c
  3881                           
  3882                           ;eeprom.c: 82: Address.Val++;
  3883  0011EE  4A16               	infsnz	LoadSettingsFromEeprom@Address,f,c
  3884  0011F0  2A17               	incf	LoadSettingsFromEeprom@Address+1,f,c
  3885                           
  3886                           ;eeprom.c: 83: Temp16.v[1] = ReadEeprom(Address);
  3887  0011F2  D80C               	call	PL2	;call to abstracted procedure
  3888  0011F4  ECBB  F010         	call	_ReadEeprom	;wreg free
  3889  0011F8  6E15               	movwf	LoadSettingsFromEeprom@Temp16+1,c
  3890                           
  3891                           ;eeprom.c: 84: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  3892  0011FA  C015  F009         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  3893  0011FE  6A0A               	clrf	___wmul@multiplier+1,c
  3894  001200  0E0E               	movlw	14
  3895  001202  6E0C               	movwf	___wmul@multiplicand+1,c
  3896  001204  0E10               	movlw	16
  3897  001206  6E0B               	movwf	___wmul@multiplicand,c
  3898  001208  EF5D  F010         	goto	___wmul	;wreg free
  3899  00120C                     __end_of_LoadSettingsFromEeprom:
  3900                           	opt stack 0
  3901  00120C                     PL2:
  3902                           	opt stack 23
  3903  00120C  C016  F009         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  3904  001210  C017  F00A         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  3905  001214  0012               	return	
  3906  001216                     __end_ofPL2:
  3907                           	opt stack 0
  3908                           tosu	equ	0xFFF
  3909                           tosh	equ	0xFFE
  3910                           tosl	equ	0xFFD
  3911                           pclath	equ	0xFFA
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           postinc0	equ	0xFEE
  3920                           wreg	equ	0xFE8
  3921                           indf1	equ	0xFE7
  3922                           postinc1	equ	0xFE6
  3923                           postdec1	equ	0xFE5
  3924                           plusw1	equ	0xFE3
  3925                           fsr1h	equ	0xFE2
  3926                           fsr1l	equ	0xFE1
  3927                           indf2	equ	0xFDF
  3928                           postinc2	equ	0xFDE
  3929                           postdec2	equ	0xFDD
  3930                           plusw2	equ	0xFDB
  3931                           fsr2h	equ	0xFDA
  3932                           fsr2l	equ	0xFD9
  3933                           status	equ	0xFD8
  3934                           
  3935 ;; *************** function _LoadEventsFromEeprom *****************
  3936 ;; Defined at:
  3937 ;;		line 87 in file "libs/eeprom.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;		None
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  i               2   18[COMRAM] int 
  3942 ;;  Temp16          2   22[COMRAM] struct _WORD_VAL
  3943 ;;  Address         2   20[COMRAM] struct _WORD_VAL
  3944 ;; Return value:  Size  Location     Type
  3945 ;;                  1    wreg      void 
  3946 ;; Registers used:
  3947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3948 ;; Tracked objects:
  3949 ;;		On entry : 0/0
  3950 ;;		On exit  : 3F/1
  3951 ;;		Unchanged: 0/0
  3952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3954 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3955 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3956 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3957 ;;Total ram usage:       10 bytes
  3958 ;; Hardware stack levels used:    1
  3959 ;; Hardware stack levels required when called:    6
  3960 ;; This function calls:
  3961 ;;		_ReadEeprom
  3962 ;;		___wmul
  3963 ;; This function is called by:
  3964 ;;		_LoadAllFromEeprom
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text19
  3969  001216                     __ptext19:
  3970                           	opt stack 0
  3971  001216                     _LoadEventsFromEeprom:
  3972                           	opt stack 23
  3973                           
  3974                           ;eeprom.c: 88: WORD_VAL Temp16, Address;
  3975                           ;eeprom.c: 89: Address.Val = 80;
  3976                           
  3977                           ;incstack = 0
  3978  001216  6A16               	clrf	LoadEventsFromEeprom@Address+1,c
  3979  001218  0E50               	movlw	80
  3980  00121A  6E15               	movwf	LoadEventsFromEeprom@Address,c
  3981                           
  3982                           ;eeprom.c: 90: for (int i=0; i<24; i++) {
  3983  00121C  6A13               	clrf	LoadEventsFromEeprom@i,c
  3984  00121E  6A14               	clrf	LoadEventsFromEeprom@i+1,c
  3985  001220                     l2535:
  3986                           
  3987                           ;eeprom.c: 91: Temp16.v[0] = ReadEeprom(Address);
  3988  001220  D881               	call	PL30	;call to abstracted procedure
  3989  001222  ECBB  F010         	call	_ReadEeprom	;wreg free
  3990  001226  6E17               	movwf	LoadEventsFromEeprom@Temp16,c
  3991                           
  3992                           ;eeprom.c: 92: Address.Val++;
  3993                           
  3994                           ;eeprom.c: 93: Temp16.v[1] = ReadEeprom(Address);
  3995  001228  D86B               	call	PL14	;call to abstracted procedure
  3996  00122A  ECBB  F010         	call	_ReadEeprom	;wreg free
  3997                           
  3998                           ;eeprom.c: 94: EVENTS[i].START_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  3999  00122E  D87F               	call	PL48	;call to abstracted procedure
  4000  001230  EC5D  F010         	call	___wmul	;wreg free
  4001  001234  D848               	call	PL8	;call to abstracted procedure
  4002  001236  EC5D  F010         	call	___wmul	;wreg free
  4003  00123A  0E00               	movlw	low _EVENTS
  4004  00123C  2409               	addwf	?___wmul,w,c
  4005  00123E  6ED9               	movwf	fsr2l,c
  4006  001240  0E01               	movlw	high _EVENTS
  4007  001242  D865               	call	PL28	;call to abstracted procedure
  4008                           
  4009                           ;eeprom.c: 95: Address.Val++;
  4010                           
  4011                           ;eeprom.c: 96: Temp16.v[0] = ReadEeprom(Address);
  4012  001244  D85D               	call	PL14	;call to abstracted procedure
  4013  001246  ECBB  F010         	call	_ReadEeprom	;wreg free
  4014  00124A  6E17               	movwf	LoadEventsFromEeprom@Temp16,c
  4015                           
  4016                           ;eeprom.c: 97: Address.Val++;
  4017                           
  4018                           ;eeprom.c: 98: Temp16.v[1] = ReadEeprom(Address);
  4019  00124C  D859               	call	PL14	;call to abstracted procedure
  4020  00124E  ECBB  F010         	call	_ReadEeprom	;wreg free
  4021                           
  4022                           ;eeprom.c: 99: EVENTS[i].END_TIME = Temp16.v[1]*60*60+Temp16.v[0]*60;
  4023  001252  D86D               	call	PL48	;call to abstracted procedure
  4024  001254  EC5D  F010         	call	___wmul	;wreg free
  4025  001258  D836               	call	PL8	;call to abstracted procedure
  4026  00125A  EC5D  F010         	call	___wmul	;wreg free
  4027  00125E  0E04               	movlw	low (_EVENTS+4)
  4028  001260  2409               	addwf	?___wmul,w,c
  4029  001262  6ED9               	movwf	fsr2l,c
  4030  001264  0E01               	movlw	high (_EVENTS+4)
  4031  001266  D853               	call	PL28	;call to abstracted procedure
  4032                           
  4033                           ;eeprom.c: 100: Address.Val++;
  4034  001268  4A15               	infsnz	LoadEventsFromEeprom@Address,f,c
  4035  00126A  2A16               	incf	LoadEventsFromEeprom@Address+1,f,c
  4036                           
  4037                           ;eeprom.c: 101: EVENTS[i].CYCLE = ReadEeprom(Address);
  4038  00126C  D841               	call	PL10	;call to abstracted procedure
  4039  00126E  EC5D  F010         	call	___wmul	;wreg free
  4040  001272  0E08               	movlw	low (_EVENTS+8)
  4041  001274  2409               	addwf	?___wmul,w,c
  4042  001276  6ED9               	movwf	fsr2l,c
  4043  001278  0E01               	movlw	high (_EVENTS+8)
  4044  00127A  200A               	addwfc	?___wmul+1,w,c
  4045  00127C  6EDA               	movwf	fsr2h,c
  4046  00127E  D852               	call	PL30	;call to abstracted procedure
  4047  001280  ECBB  F010         	call	_ReadEeprom	;wreg free
  4048  001284  6EDF               	movwf	indf2,c
  4049                           
  4050                           ;eeprom.c: 102: Address.Val++;
  4051                           
  4052                           ;eeprom.c: 103: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  4053  001286  D83C               	call	PL14	;call to abstracted procedure
  4054  001288  ECBB  F010         	call	_ReadEeprom	;wreg free
  4055  00128C  6E0F               	movwf	??_LoadEventsFromEeprom& (0+255),c
  4056  00128E  D830               	call	PL10	;call to abstracted procedure
  4057  001290  EC5D  F010         	call	___wmul	;wreg free
  4058  001294  0E09               	movlw	low (_EVENTS+9)
  4059  001296  2409               	addwf	?___wmul,w,c
  4060  001298  6ED9               	movwf	fsr2l,c
  4061  00129A  0E01               	movlw	high (_EVENTS+9)
  4062  00129C  200A               	addwfc	?___wmul+1,w,c
  4063  00129E  6EDA               	movwf	fsr2h,c
  4064  0012A0  460F               	rlncf	??_LoadEventsFromEeprom,f,c
  4065  0012A2  0101               	movlb	1	; () banked
  4066  0012A4  50DF               	movf	223,w,c
  4067  0012A6  180F               	xorwf	??_LoadEventsFromEeprom,w,c
  4068  0012A8  0B01               	andlw	-255
  4069  0012AA  180F               	xorwf	??_LoadEventsFromEeprom,w,c
  4070  0012AC  6EDF               	movwf	223,c
  4071                           
  4072                           ; BSR set to: 1
  4073                           ;eeprom.c: 104: Address.Val++;
  4074  0012AE  4A15               	infsnz	LoadEventsFromEeprom@Address,f,c
  4075  0012B0  2A16               	incf	LoadEventsFromEeprom@Address+1,f,c
  4076                           
  4077                           ; BSR set to: 1
  4078  0012B2  4A13               	infsnz	LoadEventsFromEeprom@i,f,c
  4079  0012B4  2A14               	incf	LoadEventsFromEeprom@i+1,f,c
  4080                           
  4081                           ; BSR set to: 1
  4082  0012B6  BE14               	btfsc	LoadEventsFromEeprom@i+1,7,c
  4083  0012B8  D7B3               	goto	l2535
  4084  0012BA  5014               	movf	LoadEventsFromEeprom@i+1,w,c
  4085  0012BC  E103               	bnz	u1240
  4086  0012BE  0E18               	movlw	24
  4087  0012C0  5C13               	subwf	LoadEventsFromEeprom@i,w,c
  4088  0012C2  E3AE               	bnc	l2535
  4089  0012C4                     u1240:
  4090                           
  4091                           ; BSR set to: 1
  4092  0012C4  0012               	return		;funcret
  4093  0012C6                     __end_of_LoadEventsFromEeprom:
  4094                           	opt stack 0
  4095  0012C6                     PL8:
  4096                           	opt stack 23
  4097  0012C6  5017               	movf	LoadEventsFromEeprom@Temp16,w,c
  4098  0012C8  0D3C               	mullw	60
  4099  0012CA  5009               	movf	?___wmul,w,c
  4100  0012CC  24F3               	addwf	prodl,w,c
  4101  0012CE  6E0F               	movwf	??_LoadEventsFromEeprom& (0+255),c
  4102  0012D0  500A               	movf	?___wmul+1,w,c
  4103  0012D2  20F4               	addwfc	prodh,w,c
  4104  0012D4  6E10               	movwf	(??_LoadEventsFromEeprom+1)& (0+255),c
  4105  0012D6  6A11               	clrf	(??_LoadEventsFromEeprom+2)& (0+255),c
  4106  0012D8  BE10               	btfsc	(??_LoadEventsFromEeprom+1)& (0+255),7,c
  4107  0012DA  0611               	decf	(??_LoadEventsFromEeprom+2)& (0+255),f,c
  4108  0012DC  5011               	movf	(??_LoadEventsFromEeprom+2)& (0+255),w,c
  4109  0012DE  6E12               	movwf	(??_LoadEventsFromEeprom+3)& (0+255),c
  4110  0012E0  C013  F009         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  4111  0012E4  C014  F00A         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  4112  0012E8  6A0C               	clrf	___wmul@multiplicand+1,c
  4113  0012EA  0E0A               	movlw	10
  4114  0012EC  6E0B               	movwf	___wmul@multiplicand,c
  4115  0012EE  0C0A               	retlw	10
  4116  0012F0                     __end_ofPL8:
  4117                           	opt stack 0
  4118  0012F0                     PL10:
  4119                           	opt stack 23
  4120  0012F0  C013  F009         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  4121  0012F4  C014  F00A         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  4122  0012F8  6A0C               	clrf	___wmul@multiplicand+1,c
  4123  0012FA  0E0A               	movlw	10
  4124  0012FC  6E0B               	movwf	___wmul@multiplicand,c
  4125  0012FE  0C0A               	retlw	10
  4126  001300                     __end_ofPL10:
  4127                           	opt stack 0
  4128  001300                     PL14:
  4129                           	opt stack 23
  4130  001300  4A15               	infsnz	LoadEventsFromEeprom@Address,f,c
  4131  001302  2A16               	incf	LoadEventsFromEeprom@Address+1,f,c
  4132  001304  C015  F009         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  4133  001308  C016  F00A         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  4134  00130C  0012               	return	
  4135  00130E                     __end_ofPL14:
  4136                           	opt stack 0
  4137  00130E                     PL28:
  4138                           	opt stack 23
  4139  00130E  200A               	addwfc	?___wmul+1,w,c
  4140  001310  6EDA               	movwf	fsr2h,c
  4141  001312  C00F  FFDE         	movff	??_LoadEventsFromEeprom,postinc2
  4142  001316  C010  FFDE         	movff	??_LoadEventsFromEeprom+1,postinc2
  4143  00131A  C011  FFDE         	movff	??_LoadEventsFromEeprom+2,postinc2
  4144  00131E  C012  FFDE         	movff	??_LoadEventsFromEeprom+3,postinc2
  4145  001322  0012               	return	
  4146  001324                     __end_ofPL28:
  4147                           	opt stack 0
  4148  001324                     PL30:
  4149                           	opt stack 23
  4150  001324  C015  F009         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  4151  001328  C016  F00A         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  4152  00132C  0012               	return	
  4153  00132E                     __end_ofPL30:
  4154                           	opt stack 0
  4155  00132E                     PL48:
  4156                           	opt stack 23
  4157  00132E  6E18               	movwf	LoadEventsFromEeprom@Temp16+1,c
  4158  001330  C018  F009         	movff	LoadEventsFromEeprom@Temp16+1,___wmul@multiplier
  4159  001334  6A0A               	clrf	___wmul@multiplier+1,c
  4160  001336  0E0E               	movlw	14
  4161  001338  6E0C               	movwf	___wmul@multiplicand+1,c
  4162  00133A  0E10               	movlw	16
  4163  00133C  6E0B               	movwf	___wmul@multiplicand,c
  4164  00133E  0C10               	retlw	16
  4165  001340                     __end_ofPL48:
  4166                           	opt stack 0
  4167                           tosu	equ	0xFFF
  4168                           tosh	equ	0xFFE
  4169                           tosl	equ	0xFFD
  4170                           pclath	equ	0xFFA
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           intcon	equ	0xFF2
  4178                           postinc0	equ	0xFEE
  4179                           wreg	equ	0xFE8
  4180                           indf1	equ	0xFE7
  4181                           postinc1	equ	0xFE6
  4182                           postdec1	equ	0xFE5
  4183                           plusw1	equ	0xFE3
  4184                           fsr1h	equ	0xFE2
  4185                           fsr1l	equ	0xFE1
  4186                           indf2	equ	0xFDF
  4187                           postinc2	equ	0xFDE
  4188                           postdec2	equ	0xFDD
  4189                           plusw2	equ	0xFDB
  4190                           fsr2h	equ	0xFDA
  4191                           fsr2l	equ	0xFD9
  4192                           status	equ	0xFD8
  4193                           
  4194 ;; *************** function _LoadCyclesFromEeprom *****************
  4195 ;; Defined at:
  4196 ;;		line 137 in file "libs/eeprom.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;		None
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  j               2   19[COMRAM] int 
  4201 ;;  i               2   23[COMRAM] int 
  4202 ;;  i               2   21[COMRAM] int 
  4203 ;;  Address         2   17[COMRAM] struct _WORD_VAL
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/1
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4214 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4215 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4216 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4217 ;;Total ram usage:       11 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    6
  4220 ;; This function calls:
  4221 ;;		_ReadEeprom
  4222 ;;		___wmul
  4223 ;; This function is called by:
  4224 ;;		_LoadAllFromEeprom
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text20
  4229  001340                     __ptext20:
  4230                           	opt stack 0
  4231  001340                     _LoadCyclesFromEeprom:
  4232                           	opt stack 23
  4233                           
  4234                           ;eeprom.c: 138: WORD_VAL Address;
  4235                           ;eeprom.c: 139: Address.Val = 63;
  4236                           
  4237                           ; BSR set to: 1
  4238                           ;incstack = 0
  4239  001340  6A13               	clrf	LoadCyclesFromEeprom@Address+1,c
  4240  001342  0E3F               	movlw	63
  4241  001344  6E12               	movwf	LoadCyclesFromEeprom@Address,c
  4242                           
  4243                           ;eeprom.c: 141: for (int i=0; i<17; i++) {
  4244  001346  6A16               	clrf	LoadCyclesFromEeprom@i,c
  4245  001348  6A17               	clrf	LoadCyclesFromEeprom@i+1,c
  4246  00134A                     l2627:
  4247                           
  4248                           ;eeprom.c: 142: CYCLES[i].END_STATE = ReadEeprom(Address);
  4249  00134A  5016               	movf	LoadCyclesFromEeprom@i,w,c
  4250  00134C  D876               	call	PL58	;call to abstracted procedure
  4251  00134E  C012  F009         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  4252  001352  C013  F00A         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  4253  001356  ECBB  F010         	call	_ReadEeprom	;wreg free
  4254  00135A  6EDF               	movwf	indf2,c
  4255                           
  4256                           ;eeprom.c: 143: Address.Val++;
  4257  00135C  4A12               	infsnz	LoadCyclesFromEeprom@Address,f,c
  4258  00135E  2A13               	incf	LoadCyclesFromEeprom@Address+1,f,c
  4259  001360  4A16               	infsnz	LoadCyclesFromEeprom@i,f,c
  4260  001362  2A17               	incf	LoadCyclesFromEeprom@i+1,f,c
  4261  001364  BE17               	btfsc	LoadCyclesFromEeprom@i+1,7,c
  4262  001366  D7F1               	goto	l2627
  4263  001368  5017               	movf	LoadCyclesFromEeprom@i+1,w,c
  4264  00136A  E103               	bnz	u1320
  4265  00136C  0E11               	movlw	17
  4266  00136E  5C16               	subwf	LoadCyclesFromEeprom@i,w,c
  4267  001370  E3EC               	bnc	l2627
  4268  001372                     u1320:
  4269                           
  4270                           ;eeprom.c: 144: }
  4271                           ;eeprom.c: 146: for (int i=0; i<17; i++) {
  4272  001372  6A18               	clrf	LoadCyclesFromEeprom@i_1220,c
  4273  001374  6A19               	clrf	LoadCyclesFromEeprom@i_1220+1,c
  4274  001376                     l2639:
  4275                           
  4276                           ;eeprom.c: 147: if (i==0)
  4277  001376  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4278  001378  1019               	iorwf	LoadCyclesFromEeprom@i_1220+1,w,c
  4279  00137A  E103               	bnz	l2643
  4280                           
  4281                           ;eeprom.c: 148: CYCLES[i].START_STATE = 0;
  4282  00137C  D857               	call	PL36	;call to abstracted procedure
  4283  00137E  6ADF               	clrf	indf2,c
  4284  001380  D01F               	goto	l2649
  4285  001382                     l2643:
  4286                           
  4287                           ;eeprom.c: 149: else if (CYCLES[i].END_STATE == CYCLES[i-1].END_STATE)
  4288  001382  D868               	call	PL84	;call to abstracted procedure
  4289  001384  6ED9               	movwf	fsr2l,c
  4290  001386  6ADA               	clrf	fsr2h,c
  4291  001388  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4292  00138A  0D04               	mullw	4
  4293  00138C  50F3               	movf	prodl,w,c
  4294  00138E  0F63               	addlw	low (_CYCLES+3)
  4295  001390  6EE1               	movwf	fsr1l,c
  4296  001392  6AE2               	clrf	fsr1h,c
  4297  001394  50DE               	movf	postinc2,w,c
  4298  001396  18E6               	xorwf	postinc1,w,c
  4299  001398  E10B               	bnz	l2647
  4300                           
  4301                           ;eeprom.c: 150: CYCLES[i].START_STATE = CYCLES[i].END_STATE;
  4302  00139A  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4303  00139C  D84E               	call	PL58	;call to abstracted procedure
  4304  00139E  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4305  0013A0  0D04               	mullw	4
  4306  0013A2  50F3               	movf	prodl,w,c
  4307  0013A4  0F62               	addlw	low (_CYCLES+2)
  4308  0013A6  6EE1               	movwf	fsr1l,c
  4309  0013A8  6AE2               	clrf	fsr1h,c
  4310  0013AA  CFDF FFE7          	movff	indf2,indf1
  4311  0013AE  D008               	goto	l2649
  4312  0013B0                     l2647:
  4313                           
  4314                           ;eeprom.c: 151: else
  4315                           ;eeprom.c: 152: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  4316  0013B0  D83D               	call	PL36	;call to abstracted procedure
  4317  0013B2  D850               	call	PL84	;call to abstracted procedure
  4318  0013B4  6EE1               	movwf	fsr1l,c
  4319  0013B6  6AE2               	clrf	fsr1h,c
  4320  0013B8  50E7               	movf	indf1,w,c
  4321  0013BA  6E0F               	movwf	??_LoadCyclesFromEeprom& (0+255),c
  4322  0013BC  280F               	incf	??_LoadCyclesFromEeprom,w,c
  4323  0013BE  6EDF               	movwf	indf2,c
  4324  0013C0                     l2649:
  4325                           
  4326                           ;eeprom.c: 153: CYCLES[i].PERIOD = 0;
  4327  0013C0  D842               	call	PL70	;call to abstracted procedure
  4328  0013C2  6ADE               	clrf	postinc2,c
  4329  0013C4  6ADD               	clrf	postdec2,c
  4330                           
  4331                           ;eeprom.c: 154: for (int j=CYCLES[i].START_STATE; j<CYCLES[i].END_STATE; j++ )
  4332  0013C6  D832               	call	PL36	;call to abstracted procedure
  4333  0013C8  50DF               	movf	indf2,w,c
  4334  0013CA  6E14               	movwf	LoadCyclesFromEeprom@j,c
  4335  0013CC  6A15               	clrf	LoadCyclesFromEeprom@j+1,c
  4336  0013CE  D016               	goto	l2657
  4337  0013D0                     l2653:
  4338                           
  4339                           ;eeprom.c: 155: CYCLES[i].PERIOD += STATES[j].PERIOD;
  4340  0013D0  D83A               	call	PL70	;call to abstracted procedure
  4341  0013D2  C014  F009         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  4342  0013D6  C015  F00A         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  4343  0013DA  6A0C               	clrf	___wmul@multiplicand+1,c
  4344  0013DC  0E06               	movlw	6
  4345  0013DE  6E0B               	movwf	___wmul@multiplicand,c
  4346  0013E0  EC5D  F010         	call	___wmul	;wreg free
  4347  0013E4  0EF0               	movlw	low _STATES
  4348  0013E6  2409               	addwf	?___wmul,w,c
  4349  0013E8  6EE1               	movwf	fsr1l,c
  4350  0013EA  0E01               	movlw	high _STATES
  4351  0013EC  200A               	addwfc	?___wmul+1,w,c
  4352  0013EE  6EE2               	movwf	fsr1h,c
  4353  0013F0  50E7               	movf	indf1,w,c
  4354  0013F2  26DE               	addwf	postinc2,f,c
  4355  0013F4  0E00               	movlw	0
  4356  0013F6  22DD               	addwfc	postdec2,f,c
  4357  0013F8  4A14               	infsnz	LoadCyclesFromEeprom@j,f,c
  4358  0013FA  2A15               	incf	LoadCyclesFromEeprom@j+1,f,c
  4359  0013FC                     l2657:
  4360  0013FC  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4361  0013FE  D81D               	call	PL58	;call to abstracted procedure
  4362  001400  50DF               	movf	indf2,w,c
  4363  001402  6E0F               	movwf	??_LoadCyclesFromEeprom& (0+255),c
  4364  001404  6A10               	clrf	(??_LoadCyclesFromEeprom+1)& (0+255),c
  4365  001406  500F               	movf	??_LoadCyclesFromEeprom,w,c
  4366  001408  5C14               	subwf	LoadCyclesFromEeprom@j,w,c
  4367  00140A  5015               	movf	LoadCyclesFromEeprom@j+1,w,c
  4368  00140C  0A80               	xorlw	128
  4369  00140E  6E11               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),c
  4370  001410  5010               	movf	??_LoadCyclesFromEeprom+1,w,c
  4371  001412  0A80               	xorlw	128
  4372  001414  5811               	subwfb	(??_LoadCyclesFromEeprom+2)& (0+255),w,c
  4373  001416  E3DC               	bnc	l2653
  4374  001418  4A18               	infsnz	LoadCyclesFromEeprom@i_1220,f,c
  4375  00141A  2A19               	incf	LoadCyclesFromEeprom@i_1220+1,f,c
  4376  00141C  BE19               	btfsc	LoadCyclesFromEeprom@i_1220+1,7,c
  4377  00141E  D7AB               	goto	l2639
  4378  001420  5019               	movf	LoadCyclesFromEeprom@i_1220+1,w,c
  4379  001422  E103               	bnz	u1360
  4380  001424  0E11               	movlw	17
  4381  001426  5C18               	subwf	LoadCyclesFromEeprom@i_1220,w,c
  4382  001428  E3A6               	bnc	l2639
  4383  00142A                     u1360:
  4384  00142A  0012               	return		;funcret
  4385  00142C                     __end_of_LoadCyclesFromEeprom:
  4386                           	opt stack 0
  4387  00142C                     PL36:
  4388                           	opt stack 23
  4389  00142C  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4390  00142E  0D04               	mullw	4
  4391  001430  50F3               	movf	prodl,w,c
  4392  001432  0F62               	addlw	low (_CYCLES+2)
  4393  001434  6ED9               	movwf	fsr2l,c
  4394  001436  6ADA               	clrf	fsr2h,c
  4395  001438  0012               	return	
  4396  00143A                     __end_ofPL36:
  4397                           	opt stack 0
  4398  00143A                     PL58:
  4399                           	opt stack 23
  4400  00143A  0D04               	mullw	4
  4401  00143C  50F3               	movf	prodl,w,c
  4402  00143E  0F63               	addlw	low (_CYCLES+3)
  4403  001440  6ED9               	movwf	fsr2l,c
  4404  001442  6ADA               	clrf	fsr2h,c
  4405  001444  0012               	return	
  4406  001446                     __end_ofPL58:
  4407                           	opt stack 0
  4408  001446                     PL70:
  4409                           	opt stack 23
  4410  001446  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4411  001448  0D04               	mullw	4
  4412  00144A  50F3               	movf	prodl,w,c
  4413  00144C  0F60               	addlw	low _CYCLES
  4414  00144E  6ED9               	movwf	fsr2l,c
  4415  001450  6ADA               	clrf	fsr2h,c
  4416  001452  0012               	return	
  4417  001454                     __end_ofPL70:
  4418                           	opt stack 0
  4419  001454                     PL84:
  4420                           	opt stack 23
  4421  001454  5018               	movf	LoadCyclesFromEeprom@i_1220,w,c
  4422  001456  0D04               	mullw	4
  4423  001458  50F3               	movf	prodl,w,c
  4424  00145A  0F5F               	addlw	low (_CYCLES+255)
  4425  00145C  0012               	return	
  4426  00145E                     __end_ofPL84:
  4427                           	opt stack 0
  4428                           tosu	equ	0xFFF
  4429                           tosh	equ	0xFFE
  4430                           tosl	equ	0xFFD
  4431                           pclath	equ	0xFFA
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           postinc0	equ	0xFEE
  4440                           wreg	equ	0xFE8
  4441                           indf1	equ	0xFE7
  4442                           postinc1	equ	0xFE6
  4443                           postdec1	equ	0xFE5
  4444                           plusw1	equ	0xFE3
  4445                           fsr1h	equ	0xFE2
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           postinc2	equ	0xFDE
  4449                           postdec2	equ	0xFDD
  4450                           plusw2	equ	0xFDB
  4451                           fsr2h	equ	0xFDA
  4452                           fsr2l	equ	0xFD9
  4453                           status	equ	0xFD8
  4454                           
  4455 ;; *************** function _ReadEeprom *****************
  4456 ;; Defined at:
  4457 ;;		line 3 in file "libs/eeprom.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  Address         2    8[COMRAM] struct _WORD_VAL
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;		None
  4462 ;; Return value:  Size  Location     Type
  4463 ;;                  1    wreg      unsigned char 
  4464 ;; Registers used:
  4465 ;;		wreg, status,2
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/1
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4474 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    5
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_LoadSettingsFromEeprom
  4482 ;;		_LoadEventsFromEeprom
  4483 ;;		_LoadStatesFromEeprom
  4484 ;;		_LoadCyclesFromEeprom
  4485 ;; This function uses a non-reentrant model
  4486 ;;
  4487                           
  4488                           	psect	text21
  4489  002176                     __ptext21:
  4490                           	opt stack 0
  4491  002176                     _ReadEeprom:
  4492                           	opt stack 23
  4493                           
  4494                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  4495                           
  4496                           ;incstack = 0
  4497  002176  0E3F               	movlw	-193
  4498  002178  1681               	andwf	3969,f,c	;volatile
  4499                           
  4500                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  4501  00217A  C009  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  4502                           
  4503                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  4504  00217E  C00A  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  4505                           
  4506                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  4507  002182  8081               	bsf	3969,0,c	;volatile
  4508                           
  4509                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  4510  002184  8E81               	bsf	3969,7,c	;volatile
  4511                           
  4512                           ;eeprom.c: 12: return NVMDAT;
  4513  002186  5080               	movf	3968,w,c	;volatile
  4514  002188  0012               	return		;funcret
  4515  00218A                     __end_of_ReadEeprom:
  4516                           	opt stack 0
  4517                           tosu	equ	0xFFF
  4518                           tosh	equ	0xFFE
  4519                           tosl	equ	0xFFD
  4520                           pclath	equ	0xFFA
  4521                           tblptru	equ	0xFF8
  4522                           tblptrh	equ	0xFF7
  4523                           tblptrl	equ	0xFF6
  4524                           tablat	equ	0xFF5
  4525                           prodh	equ	0xFF4
  4526                           prodl	equ	0xFF3
  4527                           intcon	equ	0xFF2
  4528                           postinc0	equ	0xFEE
  4529                           wreg	equ	0xFE8
  4530                           indf1	equ	0xFE7
  4531                           postinc1	equ	0xFE6
  4532                           postdec1	equ	0xFE5
  4533                           plusw1	equ	0xFE3
  4534                           fsr1h	equ	0xFE2
  4535                           fsr1l	equ	0xFE1
  4536                           indf2	equ	0xFDF
  4537                           postinc2	equ	0xFDE
  4538                           postdec2	equ	0xFDD
  4539                           plusw2	equ	0xFDB
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _Lcd_Text *****************
  4545 ;; Defined at:
  4546 ;;		line 76 in file "libs/HD44780.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;  y               1    wreg     unsigned char 
  4549 ;;  x               1   11[COMRAM] unsigned char 
  4550 ;;  buffer          2   12[COMRAM] PTR unsigned char 
  4551 ;;		 -> STR_4(3), STR_3(3), STR_2(3), STR_1(2), 
  4552 ;;		 -> main@Time(7), main@Date(7), 
  4553 ;; Auto vars:     Size  Location     Type
  4554 ;;  y               1   14[COMRAM] unsigned char 
  4555 ;;  data            1   15[COMRAM] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  1    wreg      void 
  4558 ;; Registers used:
  4559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4565 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4566 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4568 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4569 ;;Total ram usage:        5 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    7
  4572 ;; This function calls:
  4573 ;;		_Lcd_CharCP
  4574 ;;		_Lcd_Command
  4575 ;; This function is called by:
  4576 ;;		_main
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text22
  4581  001D20                     __ptext22:
  4582                           	opt stack 0
  4583  001D20                     _Lcd_Text:
  4584                           	opt stack 23
  4585                           
  4586                           ;incstack = 0
  4587                           ;Lcd_Text@y stored from wreg
  4588  001D20  6E0F               	movwf	Lcd_Text@y,c
  4589                           
  4590                           ;HD44780.c: 77: unsigned char data;
  4591                           ;HD44780.c: 78: switch(y){
  4592  001D22  D00D               	goto	l3047
  4593  001D24                     l3037:
  4594  001D24  500C               	movf	Lcd_Text@x,w,c
  4595  001D26  0F7F               	addlw	127
  4596  001D28  D008               	goto	L8
  4597  001D2A                     l3039:
  4598  001D2A  500C               	movf	Lcd_Text@x,w,c
  4599  001D2C  0FBF               	addlw	191
  4600  001D2E  D005               	goto	L8
  4601  001D30                     l3041:
  4602  001D30  500C               	movf	Lcd_Text@x,w,c
  4603  001D32  0F93               	addlw	147
  4604  001D34  D002               	goto	L8
  4605  001D36                     l3043:
  4606  001D36  500C               	movf	Lcd_Text@x,w,c
  4607  001D38  0FD3               	addlw	211
  4608  001D3A                     L8:
  4609  001D3A  6E10               	movwf	Lcd_Text@data,c
  4610  001D3C  D009               	goto	l3049
  4611  001D3E                     l3047:
  4612  001D3E  500F               	movf	Lcd_Text@y,w,c
  4613                           
  4614                           ; Switch size 1, requested type "space"
  4615                           ; Number of cases is 4, Range of values is 1 to 4
  4616                           ; switch strategies available:
  4617                           ; Name         Instructions Cycles
  4618                           ; simple_byte           13     7 (average)
  4619                           ;	Chosen strategy is simple_byte
  4620  001D40  0A01               	xorlw	1	; case 1
  4621  001D42  E0F0               	bz	l3037
  4622  001D44  0A03               	xorlw	3	; case 2
  4623  001D46  E0F1               	bz	l3039
  4624  001D48  0A01               	xorlw	1	; case 3
  4625  001D4A  E0F2               	bz	l3041
  4626  001D4C  0A07               	xorlw	7	; case 4
  4627  001D4E  E0F3               	bz	l3043
  4628  001D50                     l3049:
  4629                           
  4630                           ;HD44780.c: 84: Lcd_Command(data);
  4631  001D50  5010               	movf	Lcd_Text@data,w,c
  4632  001D52  EC12  F00C         	call	_Lcd_Command
  4633                           
  4634                           ;HD44780.c: 85: while(*buffer)
  4635  001D56  D00B               	goto	l3055
  4636  001D58                     l3051:
  4637                           
  4638                           ;HD44780.c: 86: {
  4639                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  4640  001D58  D814               	call	PL68	;call to abstracted procedure
  4641  001D5A  64F7               	cpfsgt	tblptrh,c
  4642  001D5C  D003               	bra	u1887
  4643  001D5E  0008               	tblrd		*
  4644  001D60  50F5               	movf	tablat,w,c
  4645  001D62  D001               	bra	u1880
  4646  001D64                     u1887:
  4647  001D64  D816               	call	PL80	;call to abstracted procedure
  4648  001D66                     u1880:
  4649  001D66  ECA5  F00B         	call	_Lcd_CharCP
  4650                           
  4651                           ;HD44780.c: 88: buffer++;
  4652  001D6A  4A0D               	infsnz	Lcd_Text@buffer,f,c
  4653  001D6C  2A0E               	incf	Lcd_Text@buffer+1,f,c
  4654  001D6E                     l3055:
  4655  001D6E  D809               	call	PL68	;call to abstracted procedure
  4656  001D70  64F7               	cpfsgt	tblptrh,c
  4657  001D72  D003               	bra	u1897
  4658  001D74  0008               	tblrd		*
  4659  001D76  50F5               	movf	tablat,w,c
  4660  001D78  D001               	bra	u1890
  4661  001D7A                     u1897:
  4662  001D7A  D80B               	call	PL80	;call to abstracted procedure
  4663  001D7C                     u1890:
  4664  001D7C  0900               	iorlw	0
  4665  001D7E  E1EC               	bnz	l3051
  4666  001D80  0012               	return		;funcret
  4667  001D82                     __end_of_Lcd_Text:
  4668                           	opt stack 0
  4669  001D82                     PL68:
  4670                           	opt stack 23
  4671  001D82  C00D  FFF6         	movff	Lcd_Text@buffer,tblptrl
  4672  001D86  C00E  FFF7         	movff	Lcd_Text@buffer+1,tblptrh
  4673  001D8A  0E00               	movlw	low (__smallconst shr (0+16))
  4674  001D8C  6EF8               	movwf	tblptru,c
  4675  001D8E  0E0E               	movlw	(high __ramtop+-1)
  4676  001D90  0012               	return	
  4677  001D92                     __end_ofPL68:
  4678                           	opt stack 0
  4679  001D92                     PL80:
  4680                           	opt stack 23
  4681  001D92  CFF6 FFE1          	movff	tblptrl,fsr1l
  4682  001D96  CFF7 FFE2          	movff	tblptrh,fsr1h
  4683  001D9A  50E7               	movf	indf1,w,c
  4684  001D9C  0012               	return	
  4685  001D9E                     __end_ofPL80:
  4686                           	opt stack 0
  4687                           tosu	equ	0xFFF
  4688                           tosh	equ	0xFFE
  4689                           tosl	equ	0xFFD
  4690                           pclath	equ	0xFFA
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           indf1	equ	0xFE7
  4701                           postinc1	equ	0xFE6
  4702                           postdec1	equ	0xFE5
  4703                           plusw1	equ	0xFE3
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           postinc2	equ	0xFDE
  4708                           postdec2	equ	0xFDD
  4709                           plusw2	equ	0xFDB
  4710                           fsr2h	equ	0xFDA
  4711                           fsr2l	equ	0xFD9
  4712                           status	equ	0xFD8
  4713                           
  4714 ;; *************** function _Lcd_Int *****************
  4715 ;; Defined at:
  4716 ;;		line 157 in file "libs/HD44780.c"
  4717 ;; Parameters:    Size  Location     Type
  4718 ;;  y               1    wreg     unsigned char 
  4719 ;;  x               1   31[COMRAM] unsigned char 
  4720 ;;  val             1   32[COMRAM] unsigned char 
  4721 ;;  size            1   33[COMRAM] unsigned char 
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;  y               1   34[COMRAM] unsigned char 
  4724 ;;  tempVal         2   36[COMRAM] unsigned int 
  4725 ;;  data            1   35[COMRAM] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;                  1    wreg      void 
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4735 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4736 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4738 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4739 ;;Total ram usage:        7 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:    7
  4742 ;; This function calls:
  4743 ;;		_Lcd_CharCP
  4744 ;;		_Lcd_Command
  4745 ;;		___lbdiv
  4746 ;;		___lwdiv
  4747 ;;		___wmul
  4748 ;; This function is called by:
  4749 ;;		_main
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text23
  4754  0019CE                     __ptext23:
  4755                           	opt stack 0
  4756  0019CE                     _Lcd_Int:
  4757                           	opt stack 23
  4758                           
  4759                           ;incstack = 0
  4760                           ;Lcd_Int@y stored from wreg
  4761  0019CE  6E23               	movwf	Lcd_Int@y,c
  4762                           
  4763                           ;HD44780.c: 158: if ((size>0) && (size<=3)) {
  4764  0019D0  5022               	movf	Lcd_Int@size,w,c
  4765  0019D2  B4D8               	btfsc	status,2,c
  4766  0019D4  0012               	return	
  4767  0019D6  0E04               	movlw	4
  4768  0019D8  6022               	cpfslt	Lcd_Int@size,c
  4769  0019DA  0C04               	retlw	4
  4770                           
  4771                           ;HD44780.c: 159: unsigned int tempVal=val;
  4772  0019DC  C021  F025         	movff	Lcd_Int@val,Lcd_Int@tempVal
  4773  0019E0  6A26               	clrf	Lcd_Int@tempVal+1,c
  4774                           
  4775                           ;HD44780.c: 160: unsigned char data;
  4776                           ;HD44780.c: 161: switch(y){
  4777  0019E2  D00D               	goto	l3073
  4778  0019E4                     l3063:
  4779  0019E4  5020               	movf	Lcd_Int@x,w,c
  4780  0019E6  0F7F               	addlw	127
  4781  0019E8  D008               	goto	L11
  4782  0019EA                     l3065:
  4783  0019EA  5020               	movf	Lcd_Int@x,w,c
  4784  0019EC  0FBF               	addlw	191
  4785  0019EE  D005               	goto	L11
  4786  0019F0                     l3067:
  4787  0019F0  5020               	movf	Lcd_Int@x,w,c
  4788  0019F2  0F93               	addlw	147
  4789  0019F4  D002               	goto	L11
  4790  0019F6                     l3069:
  4791  0019F6  5020               	movf	Lcd_Int@x,w,c
  4792  0019F8  0FD3               	addlw	211
  4793  0019FA                     L11:
  4794  0019FA  6E24               	movwf	Lcd_Int@data,c
  4795  0019FC  D009               	goto	l3075
  4796  0019FE                     l3073:
  4797  0019FE  5023               	movf	Lcd_Int@y,w,c
  4798                           
  4799                           ; Switch size 1, requested type "space"
  4800                           ; Number of cases is 4, Range of values is 1 to 4
  4801                           ; switch strategies available:
  4802                           ; Name         Instructions Cycles
  4803                           ; simple_byte           13     7 (average)
  4804                           ;	Chosen strategy is simple_byte
  4805  001A00  0A01               	xorlw	1	; case 1
  4806  001A02  E0F0               	bz	l3063
  4807  001A04  0A03               	xorlw	3	; case 2
  4808  001A06  E0F1               	bz	l3065
  4809  001A08  0A01               	xorlw	1	; case 3
  4810  001A0A  E0F2               	bz	l3067
  4811  001A0C  0A07               	xorlw	7	; case 4
  4812  001A0E  E0F3               	bz	l3069
  4813  001A10                     l3075:
  4814                           
  4815                           ;HD44780.c: 167: Lcd_Command(data);
  4816  001A10  5024               	movf	Lcd_Int@data,w,c
  4817  001A12  EC12  F00C         	call	_Lcd_Command
  4818                           
  4819                           ;HD44780.c: 168: if (size>=3){
  4820  001A16  0E02               	movlw	2
  4821  001A18  6422               	cpfsgt	Lcd_Int@size,c
  4822  001A1A  D00B               	goto	l3081
  4823                           
  4824                           ;HD44780.c: 169: tempVal = val/100;
  4825  001A1C  0E64               	movlw	100
  4826  001A1E  6E09               	movwf	___lbdiv@divisor,c
  4827  001A20  5021               	movf	Lcd_Int@val,w,c
  4828  001A22  EC2A  F010         	call	___lbdiv
  4829  001A26  6E25               	movwf	Lcd_Int@tempVal,c
  4830  001A28  6A26               	clrf	Lcd_Int@tempVal+1,c
  4831                           
  4832                           ;HD44780.c: 170: Lcd_CharCP(0x30+(tempVal));
  4833  001A2A  5025               	movf	Lcd_Int@tempVal,w,c
  4834  001A2C  0F30               	addlw	48
  4835  001A2E  ECA5  F00B         	call	_Lcd_CharCP
  4836  001A32                     l3081:
  4837                           
  4838                           ;HD44780.c: 171: }
  4839                           ;HD44780.c: 172: if (size>=2){
  4840  001A32  0E01               	movlw	1
  4841  001A34  6422               	cpfsgt	Lcd_Int@size,c
  4842  001A36  D01C               	goto	l3087
  4843                           
  4844                           ;HD44780.c: 173: tempVal = (val-tempVal*100)/10;
  4845  001A38  C025  F009         	movff	Lcd_Int@tempVal,___wmul@multiplier
  4846  001A3C  C026  F00A         	movff	Lcd_Int@tempVal+1,___wmul@multiplier+1
  4847  001A40  680C               	setf	___wmul@multiplicand+1,c
  4848  001A42  0E9C               	movlw	156
  4849  001A44  6E0B               	movwf	___wmul@multiplicand,c
  4850  001A46  EC5D  F010         	call	___wmul	;wreg free
  4851  001A4A  5021               	movf	Lcd_Int@val,w,c
  4852  001A4C  2409               	addwf	?___wmul,w,c
  4853  001A4E  6E0F               	movwf	___lwdiv@dividend,c
  4854  001A50  0E00               	movlw	0
  4855  001A52  200A               	addwfc	?___wmul+1,w,c
  4856  001A54  6E10               	movwf	___lwdiv@dividend+1,c
  4857  001A56  6A12               	clrf	___lwdiv@divisor+1,c
  4858  001A58  0E0A               	movlw	10
  4859  001A5A  6E11               	movwf	___lwdiv@divisor,c
  4860  001A5C  ECCA  F00F         	call	___lwdiv	;wreg free
  4861  001A60  C00F  F025         	movff	?___lwdiv,Lcd_Int@tempVal
  4862  001A64  C010  F026         	movff	?___lwdiv+1,Lcd_Int@tempVal+1
  4863                           
  4864                           ;HD44780.c: 174: Lcd_CharCP(0x30+(tempVal));
  4865  001A68  5025               	movf	Lcd_Int@tempVal,w,c
  4866  001A6A  0F30               	addlw	48
  4867  001A6C  ECA5  F00B         	call	_Lcd_CharCP
  4868  001A70                     l3087:
  4869                           
  4870                           ;HD44780.c: 175: }
  4871                           ;HD44780.c: 176: if (size>=1){
  4872  001A70  5022               	movf	Lcd_Int@size,w,c
  4873  001A72  B4D8               	btfsc	status,2,c
  4874  001A74  0012               	return	
  4875                           
  4876                           ;HD44780.c: 177: tempVal = val/10;
  4877  001A76  0E0A               	movlw	10
  4878  001A78  6E09               	movwf	___lbdiv@divisor,c
  4879  001A7A  5021               	movf	Lcd_Int@val,w,c
  4880  001A7C  EC2A  F010         	call	___lbdiv
  4881  001A80  6E25               	movwf	Lcd_Int@tempVal,c
  4882  001A82  6A26               	clrf	Lcd_Int@tempVal+1,c
  4883                           
  4884                           ;HD44780.c: 178: Lcd_CharCP(0x30+(val - tempVal*10));
  4885  001A84  5025               	movf	Lcd_Int@tempVal,w,c
  4886  001A86  0DF6               	mullw	246
  4887  001A88  50F3               	movf	prodl,w,c
  4888  001A8A  2421               	addwf	Lcd_Int@val,w,c
  4889  001A8C  0F30               	addlw	48
  4890  001A8E  EFA5  F00B         	goto	_Lcd_CharCP
  4891  001A92                     __end_of_Lcd_Int:
  4892                           	opt stack 0
  4893                           tosu	equ	0xFFF
  4894                           tosh	equ	0xFFE
  4895                           tosl	equ	0xFFD
  4896                           pclath	equ	0xFFA
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodh	equ	0xFF4
  4902                           prodl	equ	0xFF3
  4903                           intcon	equ	0xFF2
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           indf1	equ	0xFE7
  4907                           postinc1	equ	0xFE6
  4908                           postdec1	equ	0xFE5
  4909                           plusw1	equ	0xFE3
  4910                           fsr1h	equ	0xFE2
  4911                           fsr1l	equ	0xFE1
  4912                           indf2	equ	0xFDF
  4913                           postinc2	equ	0xFDE
  4914                           postdec2	equ	0xFDD
  4915                           plusw2	equ	0xFDB
  4916                           fsr2h	equ	0xFDA
  4917                           fsr2l	equ	0xFD9
  4918                           status	equ	0xFD8
  4919                           
  4920 ;; *************** function ___wmul *****************
  4921 ;; Defined at:
  4922 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  4923 ;; Parameters:    Size  Location     Type
  4924 ;;  multiplier      2    8[COMRAM] unsigned int 
  4925 ;;  multiplicand    2   10[COMRAM] unsigned int 
  4926 ;; Auto vars:     Size  Location     Type
  4927 ;;  product         2   12[COMRAM] unsigned int 
  4928 ;; Return value:  Size  Location     Type
  4929 ;;                  2    8[COMRAM] unsigned int 
  4930 ;; Registers used:
  4931 ;;		wreg, status,2, status,0, prodl, prodh
  4932 ;; Tracked objects:
  4933 ;;		On entry : 0/1
  4934 ;;		On exit  : 0/0
  4935 ;;		Unchanged: 0/0
  4936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4937 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4938 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4940 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4941 ;;Total ram usage:        6 bytes
  4942 ;; Hardware stack levels used:    1
  4943 ;; Hardware stack levels required when called:    5
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_Lcd_Int
  4948 ;;		_LoadSettingsFromEeprom
  4949 ;;		_LoadEventsFromEeprom
  4950 ;;		_LoadStatesFromEeprom
  4951 ;;		_LoadCyclesFromEeprom
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text24
  4956  0020BA                     __ptext24:
  4957                           	opt stack 0
  4958  0020BA                     ___wmul:
  4959                           	opt stack 23
  4960                           
  4961                           ;incstack = 0
  4962  0020BA  5009               	movf	___wmul@multiplier,w,c
  4963  0020BC  020B               	mulwf	___wmul@multiplicand,c
  4964  0020BE  CFF3 F00D          	movff	prodl,___wmul@product
  4965  0020C2  CFF4 F00E          	movff	prodh,___wmul@product+1
  4966  0020C6  5009               	movf	___wmul@multiplier,w,c
  4967  0020C8  020C               	mulwf	___wmul@multiplicand+1,c
  4968  0020CA  50F3               	movf	prodl,w,c
  4969  0020CC  260E               	addwf	___wmul@product+1,f,c
  4970  0020CE  500A               	movf	___wmul@multiplier+1,w,c
  4971  0020D0  020B               	mulwf	___wmul@multiplicand,c
  4972  0020D2  50F3               	movf	prodl,w,c
  4973  0020D4  260E               	addwf	___wmul@product+1,f,c
  4974  0020D6  C00D  F009         	movff	___wmul@product,?___wmul
  4975  0020DA  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  4976  0020DE  0012               	return		;funcret
  4977  0020E0                     __end_of___wmul:
  4978                           	opt stack 0
  4979                           tosu	equ	0xFFF
  4980                           tosh	equ	0xFFE
  4981                           tosl	equ	0xFFD
  4982                           pclath	equ	0xFFA
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           postinc0	equ	0xFEE
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postinc1	equ	0xFE6
  4994                           postdec1	equ	0xFE5
  4995                           plusw1	equ	0xFE3
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           plusw2	equ	0xFDB
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function ___lwdiv *****************
  5007 ;; Defined at:
  5008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  dividend        2   14[COMRAM] unsigned int 
  5011 ;;  divisor         2   16[COMRAM] unsigned int 
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;  quotient        2   18[COMRAM] unsigned int 
  5014 ;;  counter         1   20[COMRAM] unsigned char 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  2   14[COMRAM] unsigned int 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5024 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5025 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5027 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5028 ;;Total ram usage:        7 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    5
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_Lcd_Int
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text25
  5039  001F94                     __ptext25:
  5040                           	opt stack 0
  5041  001F94                     ___lwdiv:
  5042                           	opt stack 24
  5043                           
  5044                           ;incstack = 0
  5045  001F94  6A13               	clrf	___lwdiv@quotient,c
  5046  001F96  6A14               	clrf	___lwdiv@quotient+1,c
  5047  001F98  5011               	movf	___lwdiv@divisor,w,c
  5048  001F9A  1012               	iorwf	___lwdiv@divisor+1,w,c
  5049  001F9C  E01B               	bz	l1096
  5050  001F9E  0E01               	movlw	1
  5051  001FA0  6E15               	movwf	___lwdiv@counter,c
  5052  001FA2  D004               	goto	l2843
  5053  001FA4                     l2841:
  5054  001FA4  90D8               	bcf	status,0,c
  5055  001FA6  3611               	rlcf	___lwdiv@divisor,f,c
  5056  001FA8  3612               	rlcf	___lwdiv@divisor+1,f,c
  5057  001FAA  2A15               	incf	___lwdiv@counter,f,c
  5058  001FAC                     l2843:
  5059  001FAC  AE12               	btfss	___lwdiv@divisor+1,7,c
  5060  001FAE  D7FA               	goto	l2841
  5061  001FB0                     l2845:
  5062  001FB0  90D8               	bcf	status,0,c
  5063  001FB2  3613               	rlcf	___lwdiv@quotient,f,c
  5064  001FB4  3614               	rlcf	___lwdiv@quotient+1,f,c
  5065  001FB6  5011               	movf	___lwdiv@divisor,w,c
  5066  001FB8  5C0F               	subwf	___lwdiv@dividend,w,c
  5067  001FBA  5012               	movf	___lwdiv@divisor+1,w,c
  5068  001FBC  5810               	subwfb	___lwdiv@dividend+1,w,c
  5069  001FBE  E305               	bnc	l2853
  5070  001FC0  5011               	movf	___lwdiv@divisor,w,c
  5071  001FC2  5E0F               	subwf	___lwdiv@dividend,f,c
  5072  001FC4  5012               	movf	___lwdiv@divisor+1,w,c
  5073  001FC6  5A10               	subwfb	___lwdiv@dividend+1,f,c
  5074  001FC8  8013               	bsf	___lwdiv@quotient,0,c
  5075  001FCA                     l2853:
  5076  001FCA  90D8               	bcf	status,0,c
  5077  001FCC  3212               	rrcf	___lwdiv@divisor+1,f,c
  5078  001FCE  3211               	rrcf	___lwdiv@divisor,f,c
  5079  001FD0  2E15               	decfsz	___lwdiv@counter,f,c
  5080  001FD2  D7EE               	goto	l2845
  5081  001FD4                     l1096:
  5082  001FD4  C013  F00F         	movff	___lwdiv@quotient,?___lwdiv
  5083  001FD8  C014  F010         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5084  001FDC  0012               	return		;funcret
  5085  001FDE                     __end_of___lwdiv:
  5086                           	opt stack 0
  5087                           tosu	equ	0xFFF
  5088                           tosh	equ	0xFFE
  5089                           tosl	equ	0xFFD
  5090                           pclath	equ	0xFFA
  5091                           tblptru	equ	0xFF8
  5092                           tblptrh	equ	0xFF7
  5093                           tblptrl	equ	0xFF6
  5094                           tablat	equ	0xFF5
  5095                           prodh	equ	0xFF4
  5096                           prodl	equ	0xFF3
  5097                           intcon	equ	0xFF2
  5098                           postinc0	equ	0xFEE
  5099                           wreg	equ	0xFE8
  5100                           indf1	equ	0xFE7
  5101                           postinc1	equ	0xFE6
  5102                           postdec1	equ	0xFE5
  5103                           plusw1	equ	0xFE3
  5104                           fsr1h	equ	0xFE2
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           plusw2	equ	0xFDB
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function ___lbdiv *****************
  5115 ;; Defined at:
  5116 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbdiv.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  dividend        1    wreg     unsigned char 
  5119 ;;  divisor         1    8[COMRAM] unsigned char 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  dividend        1    9[COMRAM] unsigned char 
  5122 ;;  quotient        1   11[COMRAM] unsigned char 
  5123 ;;  counter         1   10[COMRAM] unsigned char 
  5124 ;; Return value:  Size  Location     Type
  5125 ;;                  1    wreg      unsigned char 
  5126 ;; Registers used:
  5127 ;;		wreg, status,2, status,0
  5128 ;; Tracked objects:
  5129 ;;		On entry : 0/0
  5130 ;;		On exit  : 0/0
  5131 ;;		Unchanged: 0/0
  5132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5133 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5134 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5136 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5137 ;;Total ram usage:        4 bytes
  5138 ;; Hardware stack levels used:    1
  5139 ;; Hardware stack levels required when called:    5
  5140 ;; This function calls:
  5141 ;;		Nothing
  5142 ;; This function is called by:
  5143 ;;		_Lcd_Int
  5144 ;; This function uses a non-reentrant model
  5145 ;;
  5146                           
  5147                           	psect	text26
  5148  002054                     __ptext26:
  5149                           	opt stack 0
  5150  002054                     ___lbdiv:
  5151                           	opt stack 24
  5152                           
  5153                           ;incstack = 0
  5154                           ;___lbdiv@dividend stored from wreg
  5155  002054  6E0A               	movwf	___lbdiv@dividend,c
  5156  002056  6A0C               	clrf	___lbdiv@quotient,c
  5157  002058  5009               	movf	___lbdiv@divisor,w,c
  5158  00205A  E014               	bz	l2831
  5159  00205C  0E01               	movlw	1
  5160  00205E  6E0B               	movwf	___lbdiv@counter,c
  5161  002060  D003               	goto	l2819
  5162  002062                     l2815:
  5163  002062  90D8               	bcf	status,0,c
  5164  002064  3609               	rlcf	___lbdiv@divisor,f,c
  5165  002066  2A0B               	incf	___lbdiv@counter,f,c
  5166  002068                     l2819:
  5167  002068  AE09               	btfss	___lbdiv@divisor,7,c
  5168  00206A  D7FB               	goto	l2815
  5169  00206C                     l2821:
  5170  00206C  90D8               	bcf	status,0,c
  5171  00206E  360C               	rlcf	___lbdiv@quotient,f,c
  5172  002070  5009               	movf	___lbdiv@divisor,w,c
  5173  002072  5C0A               	subwf	___lbdiv@dividend,w,c
  5174  002074  E303               	bnc	l2827
  5175  002076  5009               	movf	___lbdiv@divisor,w,c
  5176  002078  5E0A               	subwf	___lbdiv@dividend,f,c
  5177  00207A  800C               	bsf	___lbdiv@quotient,0,c
  5178  00207C                     l2827:
  5179  00207C  90D8               	bcf	status,0,c
  5180  00207E  3209               	rrcf	___lbdiv@divisor,f,c
  5181  002080  2E0B               	decfsz	___lbdiv@counter,f,c
  5182  002082  D7F4               	goto	l2821
  5183  002084                     l2831:
  5184  002084  500C               	movf	___lbdiv@quotient,w,c
  5185  002086  0012               	return		;funcret
  5186  002088                     __end_of___lbdiv:
  5187                           	opt stack 0
  5188                           tosu	equ	0xFFF
  5189                           tosh	equ	0xFFE
  5190                           tosl	equ	0xFFD
  5191                           pclath	equ	0xFFA
  5192                           tblptru	equ	0xFF8
  5193                           tblptrh	equ	0xFF7
  5194                           tblptrl	equ	0xFF6
  5195                           tablat	equ	0xFF5
  5196                           prodh	equ	0xFF4
  5197                           prodl	equ	0xFF3
  5198                           intcon	equ	0xFF2
  5199                           postinc0	equ	0xFEE
  5200                           wreg	equ	0xFE8
  5201                           indf1	equ	0xFE7
  5202                           postinc1	equ	0xFE6
  5203                           postdec1	equ	0xFE5
  5204                           plusw1	equ	0xFE3
  5205                           fsr1h	equ	0xFE2
  5206                           fsr1l	equ	0xFE1
  5207                           indf2	equ	0xFDF
  5208                           postinc2	equ	0xFDE
  5209                           postdec2	equ	0xFDD
  5210                           plusw2	equ	0xFDB
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function _Lcd_CharCP *****************
  5216 ;; Defined at:
  5217 ;;		line 116 in file "libs/HD44780.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  c               1    wreg     unsigned char 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;  c               1   10[COMRAM] unsigned char 
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		wreg, status,2, status,0, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5233 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5234 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5235 ;;Total ram usage:        3 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    6
  5238 ;; This function calls:
  5239 ;;		_Lcd_Delay5us
  5240 ;; This function is called by:
  5241 ;;		_Lcd_Text
  5242 ;;		_Lcd_WriteChar
  5243 ;;		_Lcd_Int
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text27
  5248  00174A                     __ptext27:
  5249                           	opt stack 0
  5250  00174A                     _Lcd_CharCP:
  5251                           	opt stack 22
  5252                           
  5253                           ;incstack = 0
  5254                           ;Lcd_CharCP@c stored from wreg
  5255  00174A  6E0B               	movwf	Lcd_CharCP@c,c
  5256                           
  5257                           ;HD44780.c: 117: LATAbits.LA1 = 0; LATAbits.LA0 = 1;
  5258  00174C  9283               	bcf	3971,1,c	;volatile
  5259  00174E  8083               	bsf	3971,0,c	;volatile
  5260                           
  5261                           ;HD44780.c: 118: LATAbits.LA5 = (c & 0b10000000)>>7; LATAbits.LA4 = (c & 0b01000000)>>6;
  5262  001750  6A09               	clrf	??_Lcd_CharCP& (0+255),c
  5263  001752  AE0B               	btfss	Lcd_CharCP@c,7,c
  5264  001754  D001               	bra	u1095
  5265  001756  2A09               	incf	??_Lcd_CharCP& (0+255),f,c
  5266  001758                     u1095:
  5267  001758  D840               	call	PL22	;call to abstracted procedure
  5268  00175A  0E06               	movlw	6
  5269  00175C  6E0A               	movwf	(??_Lcd_CharCP+1)& (0+255),c
  5270  00175E                     u1105:
  5271  00175E  90D8               	bcf	status,0,c
  5272  001760  3209               	rrcf	??_Lcd_CharCP,f,c
  5273  001762  2E0A               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,c
  5274  001764  D7FC               	goto	u1105
  5275                           
  5276                           ;HD44780.c: 119: LATAbits.LA3 = (c & 0b00100000)>>5; LATAbits.LA2 = (c & 0b00010000)>>4;
  5277  001766  D845               	call	PL26	;call to abstracted procedure
  5278  001768  0E05               	movlw	5
  5279  00176A  6E0A               	movwf	(??_Lcd_CharCP+1)& (0+255),c
  5280  00176C                     u1115:
  5281  00176C  90D8               	bcf	status,0,c
  5282  00176E  3209               	rrcf	??_Lcd_CharCP,f,c
  5283  001770  2E0A               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,c
  5284  001772  D7FC               	goto	u1115
  5285  001774  0E01               	movlw	1
  5286  001776  D825               	call	PL18	;call to abstracted procedure
  5287  001778  3A09               	swapf	??_Lcd_CharCP,f,c
  5288  00177A  0E0F               	movlw	15
  5289  00177C  1609               	andwf	??_Lcd_CharCP,f,c
  5290  00177E  0E01               	movlw	1
  5291  001780  D843               	call	PL46	;call to abstracted procedure
  5292                           
  5293                           ;HD44780.c: 120: _delay(10);
  5294  001782  0E03               	movlw	3
  5295  001784                     u2067:
  5296  001784  2EE8               	decfsz	wreg,f,c
  5297  001786  D7FE               	bra	u2067
  5298  001788  F000               	nop	
  5299                           
  5300                           ;HD44780.c: 121: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  5301  00178A  8283               	bsf	3971,1,c	;volatile
  5302  00178C  ECEA  F010         	call	_Lcd_Delay5us	;wreg free
  5303  001790  9283               	bcf	3971,1,c	;volatile
  5304                           
  5305                           ;HD44780.c: 122: LATAbits.LA5 = (c & 0b00001000)>>3; LATAbits.LA4 = (c & 0b00000100)>>2;
  5306  001792  C00B  F009         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  5307  001796  90D8               	bcf	status,0,c
  5308  001798  3209               	rrcf	??_Lcd_CharCP,f,c
  5309  00179A  D83F               	call	PL66	;call to abstracted procedure
  5310  00179C  D81E               	call	PL22	;call to abstracted procedure
  5311  00179E  D83D               	call	PL66	;call to abstracted procedure
  5312                           
  5313                           ;HD44780.c: 123: LATAbits.LA3 = (c & 0b00000010)>>1; LATAbits.LA2 = (c & 0b00000001);
  5314  0017A0  D828               	call	PL26	;call to abstracted procedure
  5315  0017A2  90D8               	bcf	status,0,c
  5316  0017A4  3209               	rrcf	??_Lcd_CharCP,f,c
  5317  0017A6  0E01               	movlw	1
  5318  0017A8  D80C               	call	PL18	;call to abstracted procedure
  5319  0017AA  0E01               	movlw	1
  5320  0017AC  D82D               	call	PL46	;call to abstracted procedure
  5321                           
  5322                           ;HD44780.c: 124: _delay(10);
  5323  0017AE  0E03               	movlw	3
  5324  0017B0                     u2077:
  5325  0017B0  2EE8               	decfsz	wreg,f,c
  5326  0017B2  D7FE               	bra	u2077
  5327  0017B4  F000               	nop	
  5328                           
  5329                           ;HD44780.c: 125: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  5330  0017B6  8283               	bsf	3971,1,c	;volatile
  5331  0017B8  ECEA  F010         	call	_Lcd_Delay5us	;wreg free
  5332  0017BC  9283               	bcf	3971,1,c	;volatile
  5333                           
  5334                           ;HD44780.c: 126: Lcd_Delay5us();
  5335  0017BE  EFEA  F010         	goto	_Lcd_Delay5us	;wreg free
  5336  0017C2                     __end_of_Lcd_CharCP:
  5337                           	opt stack 0
  5338  0017C2                     PL18:
  5339                           	opt stack 22
  5340  0017C2  1609               	andwf	??_Lcd_CharCP,f,c
  5341  0017C4  4609               	rlncf	??_Lcd_CharCP,f,c
  5342  0017C6  4609               	rlncf	??_Lcd_CharCP,f,c
  5343  0017C8  4609               	rlncf	??_Lcd_CharCP,f,c
  5344  0017CA  5083               	movf	3971,w,c	;volatile
  5345  0017CC  1809               	xorwf	??_Lcd_CharCP,w,c
  5346  0017CE  0BF7               	andlw	-9
  5347  0017D0  1809               	xorwf	??_Lcd_CharCP,w,c
  5348  0017D2  6E83               	movwf	3971,c	;volatile
  5349  0017D4  C00B  F009         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  5350  0017D8  0012               	return	
  5351  0017DA                     __end_ofPL18:
  5352                           	opt stack 0
  5353  0017DA                     PL22:
  5354                           	opt stack 22
  5355  0017DA  0E01               	movlw	1
  5356  0017DC  1609               	andwf	??_Lcd_CharCP,f,c
  5357  0017DE  3A09               	swapf	??_Lcd_CharCP,f,c
  5358  0017E0  4609               	rlncf	??_Lcd_CharCP,f,c
  5359  0017E2  5083               	movf	3971,w,c	;volatile
  5360  0017E4  1809               	xorwf	??_Lcd_CharCP,w,c
  5361  0017E6  0BDF               	andlw	-33
  5362  0017E8  1809               	xorwf	??_Lcd_CharCP,w,c
  5363  0017EA  6E83               	movwf	3971,c	;volatile
  5364  0017EC  C00B  F009         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  5365  0017F0  0012               	return	
  5366  0017F2                     __end_ofPL22:
  5367                           	opt stack 0
  5368  0017F2                     PL26:
  5369                           	opt stack 22
  5370  0017F2  0E01               	movlw	1
  5371  0017F4  1609               	andwf	??_Lcd_CharCP,f,c
  5372  0017F6  3A09               	swapf	??_Lcd_CharCP,f,c
  5373  0017F8  5083               	movf	3971,w,c	;volatile
  5374  0017FA  1809               	xorwf	??_Lcd_CharCP,w,c
  5375  0017FC  0BEF               	andlw	-17
  5376  0017FE  1809               	xorwf	??_Lcd_CharCP,w,c
  5377  001800  6E83               	movwf	3971,c	;volatile
  5378  001802  C00B  F009         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  5379  001806  0012               	return	
  5380  001808                     __end_ofPL26:
  5381                           	opt stack 0
  5382  001808                     PL46:
  5383                           	opt stack 22
  5384  001808  1609               	andwf	??_Lcd_CharCP,f,c
  5385  00180A  4609               	rlncf	??_Lcd_CharCP,f,c
  5386  00180C  4609               	rlncf	??_Lcd_CharCP,f,c
  5387  00180E  5083               	movf	3971,w,c	;volatile
  5388  001810  1809               	xorwf	??_Lcd_CharCP,w,c
  5389  001812  0BFB               	andlw	-5
  5390  001814  1809               	xorwf	??_Lcd_CharCP,w,c
  5391  001816  6E83               	movwf	3971,c	;volatile
  5392  001818  0012               	return	
  5393  00181A                     __end_ofPL46:
  5394                           	opt stack 0
  5395  00181A                     PL66:
  5396                           	opt stack 22
  5397  00181A  90D8               	bcf	status,0,c
  5398  00181C  3209               	rrcf	??_Lcd_CharCP,f,c
  5399  00181E  90D8               	bcf	status,0,c
  5400  001820  3209               	rrcf	??_Lcd_CharCP,f,c
  5401  001822  0012               	return	
  5402  001824                     __end_ofPL66:
  5403                           	opt stack 0
  5404                           tosu	equ	0xFFF
  5405                           tosh	equ	0xFFE
  5406                           tosl	equ	0xFFD
  5407                           pclath	equ	0xFFA
  5408                           tblptru	equ	0xFF8
  5409                           tblptrh	equ	0xFF7
  5410                           tblptrl	equ	0xFF6
  5411                           tablat	equ	0xFF5
  5412                           prodh	equ	0xFF4
  5413                           prodl	equ	0xFF3
  5414                           intcon	equ	0xFF2
  5415                           postinc0	equ	0xFEE
  5416                           wreg	equ	0xFE8
  5417                           indf1	equ	0xFE7
  5418                           postinc1	equ	0xFE6
  5419                           postdec1	equ	0xFE5
  5420                           plusw1	equ	0xFE3
  5421                           fsr1h	equ	0xFE2
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           plusw2	equ	0xFDB
  5427                           fsr2h	equ	0xFDA
  5428                           fsr2l	equ	0xFD9
  5429                           status	equ	0xFD8
  5430                           
  5431 ;; *************** function _Lcd_Init *****************
  5432 ;; Defined at:
  5433 ;;		line 17 in file "libs/HD44780.c"
  5434 ;; Parameters:    Size  Location     Type
  5435 ;;		None
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  data            1   11[COMRAM] unsigned char 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  1    wreg      void 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0, cstack
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5450 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5451 ;;Total ram usage:        1 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; Hardware stack levels required when called:    7
  5454 ;; This function calls:
  5455 ;;		_Lcd_Command
  5456 ;;		_Lcd_Delay5500us
  5457 ;;		_Lcd_Delay5us
  5458 ;; This function is called by:
  5459 ;;		_main
  5460 ;; This function uses a non-reentrant model
  5461 ;;
  5462                           
  5463                           	psect	text28
  5464  001C02                     __ptext28:
  5465                           	opt stack 0
  5466  001C02                     _Lcd_Init:
  5467                           	opt stack 23
  5468                           
  5469                           ;HD44780.c: 23: unsigned char data;
  5470                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  5471                           
  5472                           ;incstack = 0
  5473  001C02  9A88               	bcf	3976,5,c	;volatile
  5474  001C04  9888               	bcf	3976,4,c	;volatile
  5475  001C06  9688               	bcf	3976,3,c	;volatile
  5476  001C08  9488               	bcf	3976,2,c	;volatile
  5477  001C0A  9288               	bcf	3976,1,c	;volatile
  5478  001C0C  9088               	bcf	3976,0,c	;volatile
  5479                           
  5480                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  5481  001C0E  9A83               	bcf	3971,5,c	;volatile
  5482  001C10  9883               	bcf	3971,4,c	;volatile
  5483  001C12  9683               	bcf	3971,3,c	;volatile
  5484  001C14  9483               	bcf	3971,2,c	;volatile
  5485  001C16  9283               	bcf	3971,1,c	;volatile
  5486  001C18  9083               	bcf	3971,0,c	;volatile
  5487                           
  5488                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  5489  001C1A  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5490  001C1E  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5491  001C22  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5492                           
  5493                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  5494  001C26  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5495  001C2A  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5496  001C2E  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5497                           
  5498                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  5499  001C32  0E01               	movlw	1
  5500  001C34  6E0C               	movwf	Lcd_Init@data,c
  5501  001C36                     l190:
  5502                           
  5503                           ;HD44780.c: 29: {
  5504                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  5505  001C36  D829               	call	PL72	;call to abstracted procedure
  5506  001C38  9283               	bcf	3971,1,c	;volatile
  5507  001C3A  9083               	bcf	3971,0,c	;volatile
  5508                           
  5509                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  5510  001C3C  D826               	call	PL72	;call to abstracted procedure
  5511  001C3E  8283               	bsf	3971,1,c	;volatile
  5512  001C40  9083               	bcf	3971,0,c	;volatile
  5513                           
  5514                           ;HD44780.c: 32: Lcd_Delay5us();
  5515  001C42  ECEA  F010         	call	_Lcd_Delay5us	;wreg free
  5516                           
  5517                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  5518  001C46  D821               	call	PL72	;call to abstracted procedure
  5519  001C48  9283               	bcf	3971,1,c	;volatile
  5520  001C4A  9083               	bcf	3971,0,c	;volatile
  5521                           
  5522                           ;HD44780.c: 34: Lcd_Delay5500us();
  5523  001C4C  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5524  001C50  2A0C               	incf	Lcd_Init@data,f,c
  5525  001C52  0E03               	movlw	3
  5526  001C54  640C               	cpfsgt	Lcd_Init@data,c
  5527  001C56  D7EF               	goto	l190
  5528                           
  5529                           ;HD44780.c: 35: }
  5530                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  5531  001C58  D81D               	call	PL76	;call to abstracted procedure
  5532  001C5A  9283               	bcf	3971,1,c	;volatile
  5533  001C5C  9083               	bcf	3971,0,c	;volatile
  5534                           
  5535                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  5536  001C5E  D81A               	call	PL76	;call to abstracted procedure
  5537  001C60  8283               	bsf	3971,1,c	;volatile
  5538  001C62  9083               	bcf	3971,0,c	;volatile
  5539                           
  5540                           ;HD44780.c: 38: Lcd_Delay5us();
  5541  001C64  ECEA  F010         	call	_Lcd_Delay5us	;wreg free
  5542                           
  5543                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  5544  001C68  D815               	call	PL76	;call to abstracted procedure
  5545  001C6A  9283               	bcf	3971,1,c	;volatile
  5546  001C6C  9083               	bcf	3971,0,c	;volatile
  5547                           
  5548                           ;HD44780.c: 40: Lcd_Delay5500us();
  5549  001C6E  ECC5  F010         	call	_Lcd_Delay5500us	;wreg free
  5550  001C72  0E28               	movlw	40
  5551  001C74  EC12  F00C         	call	_Lcd_Command
  5552  001C78  0E10               	movlw	16
  5553  001C7A  EC12  F00C         	call	_Lcd_Command
  5554  001C7E  0E01               	movlw	1
  5555  001C80  EC12  F00C         	call	_Lcd_Command
  5556  001C84  0E0F               	movlw	15
  5557  001C86  EF12  F00C         	goto	_Lcd_Command
  5558  001C8A                     __end_of_Lcd_Init:
  5559                           	opt stack 0
  5560  001C8A                     PL72:
  5561                           	opt stack 23
  5562  001C8A  9A83               	bcf	3971,5,c	;volatile
  5563  001C8C  9883               	bcf	3971,4,c	;volatile
  5564  001C8E  8683               	bsf	3971,3,c	;volatile
  5565  001C90  8483               	bsf	3971,2,c	;volatile
  5566  001C92  0012               	return	
  5567  001C94                     __end_ofPL72:
  5568                           	opt stack 0
  5569  001C94                     PL76:
  5570                           	opt stack 23
  5571  001C94  9A83               	bcf	3971,5,c	;volatile
  5572  001C96  9883               	bcf	3971,4,c	;volatile
  5573  001C98  8683               	bsf	3971,3,c	;volatile
  5574  001C9A  9483               	bcf	3971,2,c	;volatile
  5575  001C9C  0012               	return	
  5576  001C9E                     __end_ofPL76:
  5577                           	opt stack 0
  5578                           tosu	equ	0xFFF
  5579                           tosh	equ	0xFFE
  5580                           tosl	equ	0xFFD
  5581                           pclath	equ	0xFFA
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           prodh	equ	0xFF4
  5587                           prodl	equ	0xFF3
  5588                           intcon	equ	0xFF2
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           indf1	equ	0xFE7
  5592                           postinc1	equ	0xFE6
  5593                           postdec1	equ	0xFE5
  5594                           plusw1	equ	0xFE3
  5595                           fsr1h	equ	0xFE2
  5596                           fsr1l	equ	0xFE1
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           postdec2	equ	0xFDD
  5600                           plusw2	equ	0xFDB
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function _Lcd_Delay5500us *****************
  5606 ;; Defined at:
  5607 ;;		line 153 in file "libs/HD44780.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;                  1    wreg      void 
  5614 ;; Registers used:
  5615 ;;		wreg
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5624 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5625 ;;Total ram usage:        1 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    5
  5628 ;; This function calls:
  5629 ;;		Nothing
  5630 ;; This function is called by:
  5631 ;;		_Lcd_Init
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text29
  5636  00218A                     __ptext29:
  5637                           	opt stack 0
  5638  00218A                     _Lcd_Delay5500us:
  5639                           	opt stack 24
  5640                           
  5641                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(16000000/4000000.0)));
  5642                           
  5643                           ;incstack = 0
  5644  00218A  0E1D               	movlw	29
  5645  00218C  6E09               	movwf	??_Lcd_Delay5500us& (0+255),c
  5646  00218E  0E91               	movlw	145
  5647  002190                     u2087:
  5648  002190  2EE8               	decfsz	wreg,f,c
  5649  002192  D7FE               	bra	u2087
  5650  002194  2E09               	decfsz	??_Lcd_Delay5500us& (0+255),f,c
  5651  002196  D7FC               	bra	u2087
  5652  002198  F000               	nop	
  5653  00219A  0012               	return		;funcret
  5654  00219C                     __end_of_Lcd_Delay5500us:
  5655                           	opt stack 0
  5656                           tosu	equ	0xFFF
  5657                           tosh	equ	0xFFE
  5658                           tosl	equ	0xFFD
  5659                           pclath	equ	0xFFA
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodh	equ	0xFF4
  5665                           prodl	equ	0xFF3
  5666                           intcon	equ	0xFF2
  5667                           postinc0	equ	0xFEE
  5668                           wreg	equ	0xFE8
  5669                           indf1	equ	0xFE7
  5670                           postinc1	equ	0xFE6
  5671                           postdec1	equ	0xFE5
  5672                           plusw1	equ	0xFE3
  5673                           fsr1h	equ	0xFE2
  5674                           fsr1l	equ	0xFE1
  5675                           indf2	equ	0xFDF
  5676                           postinc2	equ	0xFDE
  5677                           postdec2	equ	0xFDD
  5678                           plusw2	equ	0xFDB
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _Lcd_Command *****************
  5684 ;; Defined at:
  5685 ;;		line 133 in file "libs/HD44780.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  command         1    wreg     unsigned char 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  command         1   10[COMRAM] unsigned char 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  1    wreg      void 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5700 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5701 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5702 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5703 ;;Total ram usage:        3 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:    6
  5706 ;; This function calls:
  5707 ;;		_Lcd_Delay5us
  5708 ;; This function is called by:
  5709 ;;		_Lcd_Init
  5710 ;;		_Lcd_Text
  5711 ;;		_Lcd_WriteChar
  5712 ;;		_Lcd_Int
  5713 ;; This function uses a non-reentrant model
  5714 ;;
  5715                           
  5716                           	psect	text30
  5717  001824                     __ptext30:
  5718                           	opt stack 0
  5719  001824                     _Lcd_Command:
  5720                           	opt stack 22
  5721                           
  5722                           ;incstack = 0
  5723                           ;Lcd_Command@command stored from wreg
  5724  001824  6E0B               	movwf	Lcd_Command@command,c
  5725                           
  5726                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  5727  001826  9283               	bcf	3971,1,c	;volatile
  5728  001828  9083               	bcf	3971,0,c	;volatile
  5729                           
  5730                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
  5731  00182A  6A09               	clrf	??_Lcd_Command& (0+255),c
  5732  00182C  AE0B               	btfss	Lcd_Command@command,7,c
  5733  00182E  D001               	bra	u1125
  5734  001830  2A09               	incf	??_Lcd_Command& (0+255),f,c
  5735  001832                     u1125:
  5736  001832  D840               	call	PL24	;call to abstracted procedure
  5737  001834  0E06               	movlw	6
  5738  001836  6E0A               	movwf	(??_Lcd_Command+1)& (0+255),c
  5739  001838                     u1135:
  5740  001838  90D8               	bcf	status,0,c
  5741  00183A  3209               	rrcf	??_Lcd_Command,f,c
  5742  00183C  2E0A               	decfsz	(??_Lcd_Command+1)& (0+255),f,c
  5743  00183E  D7FC               	goto	u1135
  5744                           
  5745                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
  5746  001840  D845               	call	PL32	;call to abstracted procedure
  5747  001842  0E05               	movlw	5
  5748  001844  6E0A               	movwf	(??_Lcd_Command+1)& (0+255),c
  5749  001846                     u1145:
  5750  001846  90D8               	bcf	status,0,c
  5751  001848  3209               	rrcf	??_Lcd_Command,f,c
  5752  00184A  2E0A               	decfsz	(??_Lcd_Command+1)& (0+255),f,c
  5753  00184C  D7FC               	goto	u1145
  5754  00184E  0E01               	movlw	1
  5755  001850  D825               	call	PL20	;call to abstracted procedure
  5756  001852  3A09               	swapf	??_Lcd_Command,f,c
  5757  001854  0E0F               	movlw	15
  5758  001856  1609               	andwf	??_Lcd_Command,f,c
  5759  001858  0E01               	movlw	1
  5760  00185A  D843               	call	PL44	;call to abstracted procedure
  5761                           
  5762                           ;HD44780.c: 137: _delay(10);
  5763  00185C  0E03               	movlw	3
  5764  00185E                     u2097:
  5765  00185E  2EE8               	decfsz	wreg,f,c
  5766  001860  D7FE               	bra	u2097
  5767  001862  F000               	nop	
  5768                           
  5769                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  5770  001864  8283               	bsf	3971,1,c	;volatile
  5771  001866  ECEA  F010         	call	_Lcd_Delay5us	;wreg free
  5772  00186A  9283               	bcf	3971,1,c	;volatile
  5773                           
  5774                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
  5775  00186C  C00B  F009         	movff	Lcd_Command@command,??_Lcd_Command
  5776  001870  90D8               	bcf	status,0,c
  5777  001872  3209               	rrcf	??_Lcd_Command,f,c
  5778  001874  D83F               	call	PL64	;call to abstracted procedure
  5779  001876  D81E               	call	PL24	;call to abstracted procedure
  5780  001878  D83D               	call	PL64	;call to abstracted procedure
  5781                           
  5782                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
  5783  00187A  D828               	call	PL32	;call to abstracted procedure
  5784  00187C  90D8               	bcf	status,0,c
  5785  00187E  3209               	rrcf	??_Lcd_Command,f,c
  5786  001880  0E01               	movlw	1
  5787  001882  D80C               	call	PL20	;call to abstracted procedure
  5788  001884  0E01               	movlw	1
  5789  001886  D82D               	call	PL44	;call to abstracted procedure
  5790                           
  5791                           ;HD44780.c: 141: _delay(10);
  5792  001888  0E03               	movlw	3
  5793  00188A                     u2107:
  5794  00188A  2EE8               	decfsz	wreg,f,c
  5795  00188C  D7FE               	bra	u2107
  5796  00188E  F000               	nop	
  5797                           
  5798                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  5799  001890  8283               	bsf	3971,1,c	;volatile
  5800  001892  ECEA  F010         	call	_Lcd_Delay5us	;wreg free
  5801  001896  9283               	bcf	3971,1,c	;volatile
  5802                           
  5803                           ;HD44780.c: 144: Lcd_Delay5us();
  5804  001898  EFEA  F010         	goto	_Lcd_Delay5us	;wreg free
  5805  00189C                     __end_of_Lcd_Command:
  5806                           	opt stack 0
  5807  00189C                     PL20:
  5808                           	opt stack 22
  5809  00189C  1609               	andwf	??_Lcd_Command,f,c
  5810  00189E  4609               	rlncf	??_Lcd_Command,f,c
  5811  0018A0  4609               	rlncf	??_Lcd_Command,f,c
  5812  0018A2  4609               	rlncf	??_Lcd_Command,f,c
  5813  0018A4  5083               	movf	3971,w,c	;volatile
  5814  0018A6  1809               	xorwf	??_Lcd_Command,w,c
  5815  0018A8  0BF7               	andlw	-9
  5816  0018AA  1809               	xorwf	??_Lcd_Command,w,c
  5817  0018AC  6E83               	movwf	3971,c	;volatile
  5818  0018AE  C00B  F009         	movff	Lcd_Command@command,??_Lcd_Command
  5819  0018B2  0012               	return	
  5820  0018B4                     __end_ofPL20:
  5821                           	opt stack 0
  5822  0018B4                     PL24:
  5823                           	opt stack 22
  5824  0018B4  0E01               	movlw	1
  5825  0018B6  1609               	andwf	??_Lcd_Command,f,c
  5826  0018B8  3A09               	swapf	??_Lcd_Command,f,c
  5827  0018BA  4609               	rlncf	??_Lcd_Command,f,c
  5828  0018BC  5083               	movf	3971,w,c	;volatile
  5829  0018BE  1809               	xorwf	??_Lcd_Command,w,c
  5830  0018C0  0BDF               	andlw	-33
  5831  0018C2  1809               	xorwf	??_Lcd_Command,w,c
  5832  0018C4  6E83               	movwf	3971,c	;volatile
  5833  0018C6  C00B  F009         	movff	Lcd_Command@command,??_Lcd_Command
  5834  0018CA  0012               	return	
  5835  0018CC                     __end_ofPL24:
  5836                           	opt stack 0
  5837  0018CC                     PL32:
  5838                           	opt stack 22
  5839  0018CC  0E01               	movlw	1
  5840  0018CE  1609               	andwf	??_Lcd_Command,f,c
  5841  0018D0  3A09               	swapf	??_Lcd_Command,f,c
  5842  0018D2  5083               	movf	3971,w,c	;volatile
  5843  0018D4  1809               	xorwf	??_Lcd_Command,w,c
  5844  0018D6  0BEF               	andlw	-17
  5845  0018D8  1809               	xorwf	??_Lcd_Command,w,c
  5846  0018DA  6E83               	movwf	3971,c	;volatile
  5847  0018DC  C00B  F009         	movff	Lcd_Command@command,??_Lcd_Command
  5848  0018E0  0012               	return	
  5849  0018E2                     __end_ofPL32:
  5850                           	opt stack 0
  5851  0018E2                     PL44:
  5852                           	opt stack 22
  5853  0018E2  1609               	andwf	??_Lcd_Command,f,c
  5854  0018E4  4609               	rlncf	??_Lcd_Command,f,c
  5855  0018E6  4609               	rlncf	??_Lcd_Command,f,c
  5856  0018E8  5083               	movf	3971,w,c	;volatile
  5857  0018EA  1809               	xorwf	??_Lcd_Command,w,c
  5858  0018EC  0BFB               	andlw	-5
  5859  0018EE  1809               	xorwf	??_Lcd_Command,w,c
  5860  0018F0  6E83               	movwf	3971,c	;volatile
  5861  0018F2  0012               	return	
  5862  0018F4                     __end_ofPL44:
  5863                           	opt stack 0
  5864  0018F4                     PL64:
  5865                           	opt stack 22
  5866  0018F4  90D8               	bcf	status,0,c
  5867  0018F6  3209               	rrcf	??_Lcd_Command,f,c
  5868  0018F8  90D8               	bcf	status,0,c
  5869  0018FA  3209               	rrcf	??_Lcd_Command,f,c
  5870  0018FC  0012               	return	
  5871  0018FE                     __end_ofPL64:
  5872                           	opt stack 0
  5873                           tosu	equ	0xFFF
  5874                           tosh	equ	0xFFE
  5875                           tosl	equ	0xFFD
  5876                           pclath	equ	0xFFA
  5877                           tblptru	equ	0xFF8
  5878                           tblptrh	equ	0xFF7
  5879                           tblptrl	equ	0xFF6
  5880                           tablat	equ	0xFF5
  5881                           prodh	equ	0xFF4
  5882                           prodl	equ	0xFF3
  5883                           intcon	equ	0xFF2
  5884                           postinc0	equ	0xFEE
  5885                           wreg	equ	0xFE8
  5886                           indf1	equ	0xFE7
  5887                           postinc1	equ	0xFE6
  5888                           postdec1	equ	0xFE5
  5889                           plusw1	equ	0xFE3
  5890                           fsr1h	equ	0xFE2
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           plusw2	equ	0xFDB
  5896                           fsr2h	equ	0xFDA
  5897                           fsr2l	equ	0xFD9
  5898                           status	equ	0xFD8
  5899                           
  5900 ;; *************** function _Lcd_Delay5us *****************
  5901 ;; Defined at:
  5902 ;;		line 150 in file "libs/HD44780.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;		None
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;		None
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  1    wreg      void 
  5909 ;; Registers used:
  5910 ;;		wreg
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5920 ;;Total ram usage:        0 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    5
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		_Lcd_Init
  5927 ;;		_Lcd_CharCP
  5928 ;;		_Lcd_Command
  5929 ;; This function uses a non-reentrant model
  5930 ;;
  5931                           
  5932                           	psect	text31
  5933  0021D4                     __ptext31:
  5934                           	opt stack 0
  5935  0021D4                     _Lcd_Delay5us:
  5936                           	opt stack 22
  5937                           
  5938                           ;HD44780.c: 151: _delay((unsigned long)((5)*(16000000/4000000.0)));
  5939                           
  5940                           ;incstack = 0
  5941  0021D4  0E06               	movlw	6
  5942  0021D6                     u2117:
  5943  0021D6  2EE8               	decfsz	wreg,f,c
  5944  0021D8  D7FE               	bra	u2117
  5945  0021DA  D000               	nop2	
  5946  0021DC  0012               	return		;funcret
  5947  0021DE                     __end_of_Lcd_Delay5us:
  5948                           	opt stack 0
  5949                           tosu	equ	0xFFF
  5950                           tosh	equ	0xFFE
  5951                           tosl	equ	0xFFD
  5952                           pclath	equ	0xFFA
  5953                           tblptru	equ	0xFF8
  5954                           tblptrh	equ	0xFF7
  5955                           tblptrl	equ	0xFF6
  5956                           tablat	equ	0xFF5
  5957                           prodh	equ	0xFF4
  5958                           prodl	equ	0xFF3
  5959                           intcon	equ	0xFF2
  5960                           postinc0	equ	0xFEE
  5961                           wreg	equ	0xFE8
  5962                           indf1	equ	0xFE7
  5963                           postinc1	equ	0xFE6
  5964                           postdec1	equ	0xFE5
  5965                           plusw1	equ	0xFE3
  5966                           fsr1h	equ	0xFE2
  5967                           fsr1l	equ	0xFE1
  5968                           indf2	equ	0xFDF
  5969                           postinc2	equ	0xFDE
  5970                           postdec2	equ	0xFDD
  5971                           plusw2	equ	0xFDB
  5972                           fsr2h	equ	0xFDA
  5973                           fsr2l	equ	0xFD9
  5974                           status	equ	0xFD8
  5975                           
  5976 ;; *************** function _GetDay *****************
  5977 ;; Defined at:
  5978 ;;		line 128 in file "libs/gps.c"
  5979 ;; Parameters:    Size  Location     Type
  5980 ;;  Date            1   22[COMRAM] PTR unsigned char 
  5981 ;;		 -> main@Date(7), 
  5982 ;; Auto vars:     Size  Location     Type
  5983 ;;  y               2   29[COMRAM] int 
  5984 ;;  m               1   28[COMRAM] unsigned char 
  5985 ;;  d               1   27[COMRAM] unsigned char 
  5986 ;; Return value:  Size  Location     Type
  5987 ;;                  1    wreg      char 
  5988 ;; Registers used:
  5989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5995 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5996 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5997 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5998 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5999 ;;Total ram usage:        9 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    6
  6002 ;; This function calls:
  6003 ;;		___awdiv
  6004 ;;		___awmod
  6005 ;; This function is called by:
  6006 ;;		_main
  6007 ;; This function uses a non-reentrant model
  6008 ;;
  6009                           
  6010                           	psect	text32
  6011  001572                     __ptext32:
  6012                           	opt stack 0
  6013  001572                     _GetDay:
  6014                           	opt stack 24
  6015                           
  6016                           ;gps.c: 129: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  6017                           
  6018                           ;incstack = 0
  6019  001572  5017               	movf	GetDay@Date,w,c
  6020  001574  ECA1  F00B         	call	PL74	;call to abstracted procedure
  6021  001578  D86F               	call	PL82	;call to abstracted procedure
  6022  00157A  6ED9               	movwf	fsr2l,c
  6023  00157C  6ADA               	clrf	fsr2h,c
  6024  00157E  D866               	call	PL78	;call to abstracted procedure
  6025  001580  6E1C               	movwf	GetDay@d,c
  6026                           
  6027                           ;gps.c: 130: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  6028  001582  5017               	movf	GetDay@Date,w,c
  6029  001584  EC93  F00B         	call	PL52	;call to abstracted procedure
  6030  001588  D867               	call	PL82	;call to abstracted procedure
  6031  00158A  EC85  F00B         	call	PL16	;call to abstracted procedure
  6032  00158E  D85E               	call	PL78	;call to abstracted procedure
  6033  001590  6E1D               	movwf	GetDay@m,c
  6034  001592  5017               	movf	GetDay@Date,w,c
  6035  001594  EC8A  F00B         	call	PL38	;call to abstracted procedure
  6036  001598  50DF               	movf	indf2,w,c
  6037  00159A  0D0A               	mullw	10
  6038  00159C  5017               	movf	GetDay@Date,w,c
  6039  00159E  EC98  F00B         	call	PL56	;call to abstracted procedure
  6040  0015A2  50DF               	movf	indf2,w,c
  6041  0015A4  26F3               	addwf	prodl,f,c
  6042  0015A6  0E00               	movlw	0
  6043  0015A8  22F4               	addwfc	prodh,f,c
  6044  0015AA  0EC0               	movlw	192
  6045  0015AC  24F3               	addwf	prodl,w,c
  6046  0015AE  6E1E               	movwf	GetDay@y,c
  6047  0015B0  0E05               	movlw	5
  6048  0015B2  20F4               	addwfc	prodh,w,c
  6049  0015B4  6E1F               	movwf	GetDay@y+1,c
  6050                           
  6051                           ;gps.c: 132: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  6052                           ;gps.c: 133: y -= m < 3;
  6053  0015B6  0E02               	movlw	2
  6054  0015B8  641D               	cpfsgt	GetDay@m,c
  6055  0015BA  D001               	goto	u1731
  6056  0015BC  D002               	goto	u1730
  6057  0015BE                     u1731:
  6058  0015BE  0E01               	movlw	1
  6059  0015C0  D001               	goto	u1740
  6060  0015C2                     u1730:
  6061  0015C2  0E00               	movlw	0
  6062  0015C4                     u1740:
  6063  0015C4  5E1E               	subwf	GetDay@y,f,c
  6064  0015C6  0E00               	movlw	0
  6065  0015C8  5A1F               	subwfb	GetDay@y+1,f,c
  6066                           
  6067                           ;gps.c: 134: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  6068  0015CA  501D               	movf	GetDay@m,w,c
  6069  0015CC  0D02               	mullw	2
  6070  0015CE  50F3               	movf	prodl,w,c
  6071  0015D0  0FA2               	addlw	low (GetDay@t+254)
  6072  0015D2  6ED9               	movwf	fsr2l,c
  6073  0015D4  6ADA               	clrf	fsr2h,c
  6074  0015D6  CFDE F018          	movff	postinc2,??_GetDay
  6075  0015DA  CFDD F019          	movff	postdec2,??_GetDay+1
  6076  0015DE  6A0C               	clrf	___awdiv@divisor+1,c
  6077  0015E0  0E04               	movlw	4
  6078  0015E2  D82E               	call	PL62	;call to abstracted procedure
  6079  0015E4  ECCF  F00E         	call	___awdiv	;wreg free
  6080  0015E8  C009  F01A         	movff	?___awdiv,??_GetDay+2
  6081  0015EC  C00A  F01B         	movff	?___awdiv+1,??_GetDay+3
  6082  0015F0  0E01               	movlw	1
  6083  0015F2  6E0C               	movwf	___awdiv@divisor+1,c
  6084  0015F4  0E90               	movlw	144
  6085  0015F6  D824               	call	PL62	;call to abstracted procedure
  6086  0015F8  ECCF  F00E         	call	___awdiv	;wreg free
  6087  0015FC  5009               	movf	?___awdiv,w,c
  6088  0015FE  261A               	addwf	??_GetDay+2,f,c
  6089  001600  500A               	movf	?___awdiv+1,w,c
  6090  001602  221B               	addwfc	??_GetDay+3,f,c
  6091  001604  501C               	movf	GetDay@d,w,c
  6092  001606  261A               	addwf	??_GetDay+2,f,c
  6093  001608  0E00               	movlw	0
  6094  00160A  221B               	addwfc	??_GetDay+3,f,c
  6095  00160C  6A0C               	clrf	___awdiv@divisor+1,c
  6096  00160E  0E64               	movlw	100
  6097  001610  D817               	call	PL62	;call to abstracted procedure
  6098  001612  ECCF  F00E         	call	___awdiv	;wreg free
  6099  001616  5009               	movf	?___awdiv,w,c
  6100  001618  5E1A               	subwf	??_GetDay+2,f,c
  6101  00161A  500A               	movf	?___awdiv+1,w,c
  6102  00161C  5A1B               	subwfb	??_GetDay+3,f,c
  6103  00161E  5018               	movf	??_GetDay,w,c
  6104  001620  261A               	addwf	??_GetDay+2,f,c
  6105  001622  5019               	movf	??_GetDay+1,w,c
  6106  001624  221B               	addwfc	??_GetDay+3,f,c
  6107  001626  501E               	movf	GetDay@y,w,c
  6108  001628  241A               	addwf	??_GetDay+2,w,c
  6109  00162A  6E11               	movwf	___awmod@dividend,c
  6110  00162C  501F               	movf	GetDay@y+1,w,c
  6111  00162E  201B               	addwfc	??_GetDay+3,w,c
  6112  001630  6E12               	movwf	___awmod@dividend+1,c
  6113  001632  6A14               	clrf	___awmod@divisor+1,c
  6114  001634  0E07               	movlw	7
  6115  001636  6E13               	movwf	___awmod@divisor,c
  6116  001638  EC0B  F00F         	call	___awmod	;wreg free
  6117  00163C  5011               	movf	?___awmod,w,c
  6118  00163E  0012               	return		;funcret
  6119  001640                     __end_of_GetDay:
  6120                           	opt stack 0
  6121  001640                     PL62:
  6122                           	opt stack 24
  6123  001640  6E0B               	movwf	___awdiv@divisor,c
  6124  001642  C01E  F009         	movff	GetDay@y,___awdiv@dividend
  6125  001646  C01F  F00A         	movff	GetDay@y+1,___awdiv@dividend+1
  6126  00164A  0012               	return	
  6127  00164C                     __end_ofPL62:
  6128                           	opt stack 0
  6129  00164C                     PL78:
  6130                           	opt stack 24
  6131  00164C  50DF               	movf	indf2,w,c
  6132  00164E  0D0A               	mullw	10
  6133  001650  50F3               	movf	prodl,w,c
  6134  001652  2418               	addwf	??_GetDay,w,c
  6135  001654  0FF0               	addlw	240
  6136  001656  0012               	return	
  6137  001658                     __end_ofPL78:
  6138                           	opt stack 0
  6139  001658                     PL82:
  6140                           	opt stack 24
  6141  001658  50DF               	movf	indf2,w,c
  6142  00165A  6E18               	movwf	??_GetDay& (0+255),c
  6143  00165C  5017               	movf	GetDay@Date,w,c
  6144  00165E  0012               	return	
  6145  001660                     __end_ofPL82:
  6146                           	opt stack 0
  6147                           tosu	equ	0xFFF
  6148                           tosh	equ	0xFFE
  6149                           tosl	equ	0xFFD
  6150                           pclath	equ	0xFFA
  6151                           tblptru	equ	0xFF8
  6152                           tblptrh	equ	0xFF7
  6153                           tblptrl	equ	0xFF6
  6154                           tablat	equ	0xFF5
  6155                           prodh	equ	0xFF4
  6156                           prodl	equ	0xFF3
  6157                           intcon	equ	0xFF2
  6158                           postinc0	equ	0xFEE
  6159                           wreg	equ	0xFE8
  6160                           indf1	equ	0xFE7
  6161                           postinc1	equ	0xFE6
  6162                           postdec1	equ	0xFE5
  6163                           plusw1	equ	0xFE3
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           indf2	equ	0xFDF
  6167                           postinc2	equ	0xFDE
  6168                           postdec2	equ	0xFDD
  6169                           plusw2	equ	0xFDB
  6170                           fsr2h	equ	0xFDA
  6171                           fsr2l	equ	0xFD9
  6172                           status	equ	0xFD8
  6173                           
  6174 ;; *************** function ___awmod *****************
  6175 ;; Defined at:
  6176 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  dividend        2   16[COMRAM] int 
  6179 ;;  divisor         2   18[COMRAM] int 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  sign            1   21[COMRAM] unsigned char 
  6182 ;;  counter         1   20[COMRAM] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  2   16[COMRAM] int 
  6185 ;; Registers used:
  6186 ;;		wreg, status,2, status,0
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6192 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6193 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6195 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6196 ;;Total ram usage:        6 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    5
  6199 ;; This function calls:
  6200 ;;		Nothing
  6201 ;; This function is called by:
  6202 ;;		_GetDay
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text33
  6207  001E16                     __ptext33:
  6208                           	opt stack 0
  6209  001E16                     ___awmod:
  6210                           	opt stack 24
  6211                           
  6212                           ;incstack = 0
  6213  001E16  6A16               	clrf	___awmod@sign,c
  6214  001E18  AE12               	btfss	___awmod@dividend+1,7,c
  6215  001E1A  D006               	goto	l2781
  6216  001E1C  6C11               	negf	___awmod@dividend,c
  6217  001E1E  1E12               	comf	___awmod@dividend+1,f,c
  6218  001E20  B0D8               	btfsc	status,0,c
  6219  001E22  2A12               	incf	___awmod@dividend+1,f,c
  6220  001E24  0E01               	movlw	1
  6221  001E26  6E16               	movwf	___awmod@sign,c
  6222  001E28                     l2781:
  6223  001E28  AE14               	btfss	___awmod@divisor+1,7,c
  6224  001E2A  D004               	goto	l2785
  6225  001E2C  6C13               	negf	___awmod@divisor,c
  6226  001E2E  1E14               	comf	___awmod@divisor+1,f,c
  6227  001E30  B0D8               	btfsc	status,0,c
  6228  001E32  2A14               	incf	___awmod@divisor+1,f,c
  6229  001E34                     l2785:
  6230  001E34  5013               	movf	___awmod@divisor,w,c
  6231  001E36  1014               	iorwf	___awmod@divisor+1,w,c
  6232  001E38  E017               	bz	l2801
  6233  001E3A  0E01               	movlw	1
  6234  001E3C  6E15               	movwf	___awmod@counter,c
  6235  001E3E  D004               	goto	l2791
  6236  001E40                     l2789:
  6237  001E40  90D8               	bcf	status,0,c
  6238  001E42  3613               	rlcf	___awmod@divisor,f,c
  6239  001E44  3614               	rlcf	___awmod@divisor+1,f,c
  6240  001E46  2A15               	incf	___awmod@counter,f,c
  6241  001E48                     l2791:
  6242  001E48  AE14               	btfss	___awmod@divisor+1,7,c
  6243  001E4A  D7FA               	goto	l2789
  6244  001E4C                     l2793:
  6245  001E4C  5013               	movf	___awmod@divisor,w,c
  6246  001E4E  5C11               	subwf	___awmod@dividend,w,c
  6247  001E50  5014               	movf	___awmod@divisor+1,w,c
  6248  001E52  5812               	subwfb	___awmod@dividend+1,w,c
  6249  001E54  E304               	bnc	l2797
  6250  001E56  5013               	movf	___awmod@divisor,w,c
  6251  001E58  5E11               	subwf	___awmod@dividend,f,c
  6252  001E5A  5014               	movf	___awmod@divisor+1,w,c
  6253  001E5C  5A12               	subwfb	___awmod@dividend+1,f,c
  6254  001E5E                     l2797:
  6255  001E5E  90D8               	bcf	status,0,c
  6256  001E60  3214               	rrcf	___awmod@divisor+1,f,c
  6257  001E62  3213               	rrcf	___awmod@divisor,f,c
  6258  001E64  2E15               	decfsz	___awmod@counter,f,c
  6259  001E66  D7F2               	goto	l2793
  6260  001E68                     l2801:
  6261  001E68  5016               	movf	___awmod@sign,w,c
  6262  001E6A  E004               	bz	l2805
  6263  001E6C  6C11               	negf	___awmod@dividend,c
  6264  001E6E  1E12               	comf	___awmod@dividend+1,f,c
  6265  001E70  B0D8               	btfsc	status,0,c
  6266  001E72  2A12               	incf	___awmod@dividend+1,f,c
  6267  001E74                     l2805:
  6268  001E74  C011  F011         	movff	___awmod@dividend,?___awmod
  6269  001E78  C012  F012         	movff	___awmod@dividend+1,?___awmod+1
  6270  001E7C  0012               	return		;funcret
  6271  001E7E                     __end_of___awmod:
  6272                           	opt stack 0
  6273                           tosu	equ	0xFFF
  6274                           tosh	equ	0xFFE
  6275                           tosl	equ	0xFFD
  6276                           pclath	equ	0xFFA
  6277                           tblptru	equ	0xFF8
  6278                           tblptrh	equ	0xFF7
  6279                           tblptrl	equ	0xFF6
  6280                           tablat	equ	0xFF5
  6281                           prodh	equ	0xFF4
  6282                           prodl	equ	0xFF3
  6283                           intcon	equ	0xFF2
  6284                           postinc0	equ	0xFEE
  6285                           wreg	equ	0xFE8
  6286                           indf1	equ	0xFE7
  6287                           postinc1	equ	0xFE6
  6288                           postdec1	equ	0xFE5
  6289                           plusw1	equ	0xFE3
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           plusw2	equ	0xFDB
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           
  6300 ;; *************** function ___awdiv *****************
  6301 ;; Defined at:
  6302 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  dividend        2    8[COMRAM] int 
  6305 ;;  divisor         2   10[COMRAM] int 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;  quotient        2   14[COMRAM] int 
  6308 ;;  sign            1   13[COMRAM] unsigned char 
  6309 ;;  counter         1   12[COMRAM] unsigned char 
  6310 ;; Return value:  Size  Location     Type
  6311 ;;                  2    8[COMRAM] int 
  6312 ;; Registers used:
  6313 ;;		wreg, status,2, status,0
  6314 ;; Tracked objects:
  6315 ;;		On entry : 0/1
  6316 ;;		On exit  : 0/0
  6317 ;;		Unchanged: 0/0
  6318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6319 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6320 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6322 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6323 ;;Total ram usage:        8 bytes
  6324 ;; Hardware stack levels used:    1
  6325 ;; Hardware stack levels required when called:    5
  6326 ;; This function calls:
  6327 ;;		Nothing
  6328 ;; This function is called by:
  6329 ;;		_GetDay
  6330 ;;		_LoadStatesFromEeprom
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           	psect	text34
  6335  001D9E                     __ptext34:
  6336                           	opt stack 0
  6337  001D9E                     ___awdiv:
  6338                           	opt stack 23
  6339                           
  6340                           ;incstack = 0
  6341  001D9E  6A0E               	clrf	___awdiv@sign,c
  6342  001DA0  AE0C               	btfss	___awdiv@divisor+1,7,c
  6343  001DA2  D006               	goto	l2387
  6344  001DA4  6C0B               	negf	___awdiv@divisor,c
  6345  001DA6  1E0C               	comf	___awdiv@divisor+1,f,c
  6346  001DA8  B0D8               	btfsc	status,0,c
  6347  001DAA  2A0C               	incf	___awdiv@divisor+1,f,c
  6348  001DAC  0E01               	movlw	1
  6349  001DAE  6E0E               	movwf	___awdiv@sign,c
  6350  001DB0                     l2387:
  6351  001DB0  AE0A               	btfss	___awdiv@dividend+1,7,c
  6352  001DB2  D006               	goto	l2393
  6353  001DB4  6C09               	negf	___awdiv@dividend,c
  6354  001DB6  1E0A               	comf	___awdiv@dividend+1,f,c
  6355  001DB8  B0D8               	btfsc	status,0,c
  6356  001DBA  2A0A               	incf	___awdiv@dividend+1,f,c
  6357  001DBC  0E01               	movlw	1
  6358  001DBE  1A0E               	xorwf	___awdiv@sign,f,c
  6359  001DC0                     l2393:
  6360  001DC0  6A0F               	clrf	___awdiv@quotient,c
  6361  001DC2  6A10               	clrf	___awdiv@quotient+1,c
  6362  001DC4  500B               	movf	___awdiv@divisor,w,c
  6363  001DC6  100C               	iorwf	___awdiv@divisor+1,w,c
  6364  001DC8  E01B               	bz	l2415
  6365  001DCA  0E01               	movlw	1
  6366  001DCC  6E0D               	movwf	___awdiv@counter,c
  6367  001DCE  D004               	goto	l2401
  6368  001DD0                     l2399:
  6369  001DD0  90D8               	bcf	status,0,c
  6370  001DD2  360B               	rlcf	___awdiv@divisor,f,c
  6371  001DD4  360C               	rlcf	___awdiv@divisor+1,f,c
  6372  001DD6  2A0D               	incf	___awdiv@counter,f,c
  6373  001DD8                     l2401:
  6374  001DD8  AE0C               	btfss	___awdiv@divisor+1,7,c
  6375  001DDA  D7FA               	goto	l2399
  6376  001DDC                     l2403:
  6377  001DDC  90D8               	bcf	status,0,c
  6378  001DDE  360F               	rlcf	___awdiv@quotient,f,c
  6379  001DE0  3610               	rlcf	___awdiv@quotient+1,f,c
  6380  001DE2  500B               	movf	___awdiv@divisor,w,c
  6381  001DE4  5C09               	subwf	___awdiv@dividend,w,c
  6382  001DE6  500C               	movf	___awdiv@divisor+1,w,c
  6383  001DE8  580A               	subwfb	___awdiv@dividend+1,w,c
  6384  001DEA  E305               	bnc	l2411
  6385  001DEC  500B               	movf	___awdiv@divisor,w,c
  6386  001DEE  5E09               	subwf	___awdiv@dividend,f,c
  6387  001DF0  500C               	movf	___awdiv@divisor+1,w,c
  6388  001DF2  5A0A               	subwfb	___awdiv@dividend+1,f,c
  6389  001DF4  800F               	bsf	___awdiv@quotient,0,c
  6390  001DF6                     l2411:
  6391  001DF6  90D8               	bcf	status,0,c
  6392  001DF8  320C               	rrcf	___awdiv@divisor+1,f,c
  6393  001DFA  320B               	rrcf	___awdiv@divisor,f,c
  6394  001DFC  2E0D               	decfsz	___awdiv@counter,f,c
  6395  001DFE  D7EE               	goto	l2403
  6396  001E00                     l2415:
  6397  001E00  500E               	movf	___awdiv@sign,w,c
  6398  001E02  E004               	bz	l2419
  6399  001E04  6C0F               	negf	___awdiv@quotient,c
  6400  001E06  1E10               	comf	___awdiv@quotient+1,f,c
  6401  001E08  B0D8               	btfsc	status,0,c
  6402  001E0A  2A10               	incf	___awdiv@quotient+1,f,c
  6403  001E0C                     l2419:
  6404  001E0C  C00F  F009         	movff	___awdiv@quotient,?___awdiv
  6405  001E10  C010  F00A         	movff	___awdiv@quotient+1,?___awdiv+1
  6406  001E14  0012               	return		;funcret
  6407  001E16                     __end_of___awdiv:
  6408                           	opt stack 0
  6409                           tosu	equ	0xFFF
  6410                           tosh	equ	0xFFE
  6411                           tosl	equ	0xFFD
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           postinc1	equ	0xFE6
  6424                           postdec1	equ	0xFE5
  6425                           plusw1	equ	0xFE3
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           indf2	equ	0xFDF
  6429                           postinc2	equ	0xFDE
  6430                           postdec2	equ	0xFDD
  6431                           plusw2	equ	0xFDB
  6432                           fsr2h	equ	0xFDA
  6433                           fsr2l	equ	0xFD9
  6434                           status	equ	0xFD8
  6435                           
  6436 ;; *************** function _INTERRUPT_InterruptManager *****************
  6437 ;; Defined at:
  6438 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  1    wreg      void 
  6445 ;; Registers used:
  6446 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6454 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6456 ;;Total ram usage:        2 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    4
  6459 ;; This function calls:
  6460 ;;		_TMR0_ISR
  6461 ;; This function is called by:
  6462 ;;		Interrupt level 2
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	intcode
  6467  000008                     __pintcode:
  6468                           	opt stack 0
  6469  000008                     _INTERRUPT_InterruptManager:
  6470                           	opt stack 22
  6471                           
  6472                           ;incstack = 0
  6473  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6474  00000A  CFFA F007          	movff	pclath,??_INTERRUPT_InterruptManager
  6475  00000E  CFFB F008          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6476                           
  6477                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  6478  000012  010E               	movlb	14	; () banked
  6479  000014  BBC2               	btfsc	194,5,b	;volatile
  6480                           
  6481                           ; BSR set to: 14
  6482  000016  ABCA               	btfss	202,5,b	;volatile
  6483  000018  D002               	goto	i2l414
  6484                           
  6485                           ; BSR set to: 14
  6486                           ;interrupt_manager.c: 61: {
  6487                           ;interrupt_manager.c: 62: TMR0_ISR();
  6488  00001A  EC70  F010         	call	_TMR0_ISR	;wreg free
  6489  00001E                     i2l414:
  6490  00001E  C008  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6491  000022  C007  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6492  000026  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6493  000028  0011               	retfie		f
  6494  00002A                     __end_of_INTERRUPT_InterruptManager:
  6495                           	opt stack 0
  6496                           tosu	equ	0xFFF
  6497                           tosh	equ	0xFFE
  6498                           tosl	equ	0xFFD
  6499                           pclatu	equ	0xFFB
  6500                           pclath	equ	0xFFA
  6501                           tblptru	equ	0xFF8
  6502                           tblptrh	equ	0xFF7
  6503                           tblptrl	equ	0xFF6
  6504                           tablat	equ	0xFF5
  6505                           prodh	equ	0xFF4
  6506                           prodl	equ	0xFF3
  6507                           intcon	equ	0xFF2
  6508                           postinc0	equ	0xFEE
  6509                           wreg	equ	0xFE8
  6510                           indf1	equ	0xFE7
  6511                           postinc1	equ	0xFE6
  6512                           postdec1	equ	0xFE5
  6513                           plusw1	equ	0xFE3
  6514                           fsr1h	equ	0xFE2
  6515                           fsr1l	equ	0xFE1
  6516                           indf2	equ	0xFDF
  6517                           postinc2	equ	0xFDE
  6518                           postdec2	equ	0xFDD
  6519                           plusw2	equ	0xFDB
  6520                           fsr2h	equ	0xFDA
  6521                           fsr2l	equ	0xFD9
  6522                           status	equ	0xFD8
  6523                           
  6524 ;; *************** function _TMR0_ISR *****************
  6525 ;; Defined at:
  6526 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;		None
  6529 ;; Auto vars:     Size  Location     Type
  6530 ;;		None
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 3F/E
  6537 ;;		On exit  : 0/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6544 ;;Total ram usage:        0 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:    3
  6547 ;; This function calls:
  6548 ;;		_TMR0_CallBack
  6549 ;; This function is called by:
  6550 ;;		_INTERRUPT_InterruptManager
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           	psect	text36
  6555  0020E0                     __ptext36:
  6556                           	opt stack 0
  6557  0020E0                     _TMR0_ISR:
  6558                           	opt stack 22
  6559                           
  6560                           ; BSR set to: 14
  6561                           ;tmr0.c: 138: static volatile uint16_t CountCallBack = 0;
  6562                           ;tmr0.c: 141: PIR0bits.TMR0IF = 0;
  6563                           
  6564                           ;incstack = 0
  6565  0020E0  9BCA               	bcf	202,5,b	;volatile
  6566                           
  6567                           ;tmr0.c: 143: TMR0H = timer0ReloadVal16bit >> 8;
  6568  0020E2  C048  FFD4         	movff	_timer0ReloadVal16bit+1,4052	;volatile
  6569                           
  6570                           ;tmr0.c: 144: TMR0L = (uint8_t) timer0ReloadVal16bit;
  6571  0020E6  C047  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
  6572                           
  6573                           ; BSR set to: 14
  6574                           ;tmr0.c: 147: if (++CountCallBack >= 10)
  6575  0020EA  4A43               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
  6576  0020EC  2A44               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
  6577  0020EE  5044               	movf	TMR0_ISR@CountCallBack+1,w,c	;volatile
  6578  0020F0  E104               	bnz	i2u199_40
  6579  0020F2  0E0A               	movlw	10
  6580  0020F4  5C43               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
  6581  0020F6  A0D8               	btfss	status,0,c
  6582  0020F8  0012               	return	
  6583  0020FA                     i2u199_40:
  6584                           
  6585                           ; BSR set to: 14
  6586                           ;tmr0.c: 148: {
  6587                           ;tmr0.c: 150: TMR0_CallBack();
  6588  0020FA  EC82  F010         	call	_TMR0_CallBack	;wreg free
  6589                           
  6590                           ;tmr0.c: 153: CountCallBack = 0;
  6591  0020FE  6A43               	clrf	TMR0_ISR@CountCallBack,c	;volatile
  6592  002100  6A44               	clrf	TMR0_ISR@CountCallBack+1,c	;volatile
  6593  002102  0012               	return		;funcret
  6594  002104                     __end_of_TMR0_ISR:
  6595                           	opt stack 0
  6596                           tosu	equ	0xFFF
  6597                           tosh	equ	0xFFE
  6598                           tosl	equ	0xFFD
  6599                           pclatu	equ	0xFFB
  6600                           pclath	equ	0xFFA
  6601                           tblptru	equ	0xFF8
  6602                           tblptrh	equ	0xFF7
  6603                           tblptrl	equ	0xFF6
  6604                           tablat	equ	0xFF5
  6605                           prodh	equ	0xFF4
  6606                           prodl	equ	0xFF3
  6607                           intcon	equ	0xFF2
  6608                           postinc0	equ	0xFEE
  6609                           wreg	equ	0xFE8
  6610                           indf1	equ	0xFE7
  6611                           postinc1	equ	0xFE6
  6612                           postdec1	equ	0xFE5
  6613                           plusw1	equ	0xFE3
  6614                           fsr1h	equ	0xFE2
  6615                           fsr1l	equ	0xFE1
  6616                           indf2	equ	0xFDF
  6617                           postinc2	equ	0xFDE
  6618                           postdec2	equ	0xFDD
  6619                           plusw2	equ	0xFDB
  6620                           fsr2h	equ	0xFDA
  6621                           fsr2l	equ	0xFD9
  6622                           status	equ	0xFD8
  6623                           
  6624 ;; *************** function _TMR0_CallBack *****************
  6625 ;; Defined at:
  6626 ;;		line 159 in file "mcc_generated_files/tmr0.c"
  6627 ;; Parameters:    Size  Location     Type
  6628 ;;		None
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  1    wreg      void 
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6635 ;; Tracked objects:
  6636 ;;		On entry : 3F/E
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6644 ;;Total ram usage:        0 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    2
  6647 ;; This function calls:
  6648 ;;		Absolute function
  6649 ;;		_TMR0_DefaultInterruptHandler
  6650 ;;		_Timer0_10ms
  6651 ;; This function is called by:
  6652 ;;		_TMR0_ISR
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text37
  6657  002104                     __ptext37:
  6658                           	opt stack 0
  6659  002104                     _TMR0_CallBack:
  6660                           	opt stack 22
  6661                           
  6662                           ; BSR set to: 14
  6663                           ;tmr0.c: 163: if(TMR0_InterruptHandler)
  6664                           
  6665                           ;incstack = 0
  6666  002104  5045               	movf	_TMR0_InterruptHandler,w,c
  6667  002106  1046               	iorwf	_TMR0_InterruptHandler+1,w,c
  6668  002108  B4D8               	btfsc	status,2,c
  6669  00210A  0012               	return	
  6670                           
  6671                           ; BSR set to: 14
  6672                           ;tmr0.c: 164: {
  6673                           ;tmr0.c: 165: TMR0_InterruptHandler();
  6674  00210C  0005               	push	
  6675  00210E  6EFA               	movwf	pclath,c
  6676  002110  5045               	movf	_TMR0_InterruptHandler,w,c
  6677  002112  6EFD               	movwf	tosl,c
  6678  002114  5046               	movf	_TMR0_InterruptHandler+1,w,c
  6679  002116  6EFE               	movwf	tosh,c
  6680  002118  6AFF               	clrf	tosu,c
  6681  00211A  50FA               	movf	pclath,w,c
  6682  00211C  0012               	return		;indir
  6683  00211E                     __end_of_TMR0_CallBack:
  6684                           	opt stack 0
  6685                           tosu	equ	0xFFF
  6686                           tosh	equ	0xFFE
  6687                           tosl	equ	0xFFD
  6688                           pclatu	equ	0xFFB
  6689                           pclath	equ	0xFFA
  6690                           tblptru	equ	0xFF8
  6691                           tblptrh	equ	0xFF7
  6692                           tblptrl	equ	0xFF6
  6693                           tablat	equ	0xFF5
  6694                           prodh	equ	0xFF4
  6695                           prodl	equ	0xFF3
  6696                           intcon	equ	0xFF2
  6697                           postinc0	equ	0xFEE
  6698                           wreg	equ	0xFE8
  6699                           indf1	equ	0xFE7
  6700                           postinc1	equ	0xFE6
  6701                           postdec1	equ	0xFE5
  6702                           plusw1	equ	0xFE3
  6703                           fsr1h	equ	0xFE2
  6704                           fsr1l	equ	0xFE1
  6705                           indf2	equ	0xFDF
  6706                           postinc2	equ	0xFDE
  6707                           postdec2	equ	0xFDD
  6708                           plusw2	equ	0xFDB
  6709                           fsr2h	equ	0xFDA
  6710                           fsr2l	equ	0xFD9
  6711                           status	equ	0xFD8
  6712                           
  6713 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6714 ;; Defined at:
  6715 ;;		line 173 in file "mcc_generated_files/tmr0.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;		None
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;		None
  6720 ;; Return value:  Size  Location     Type
  6721 ;;                  1    wreg      void 
  6722 ;; Registers used:
  6723 ;;		None
  6724 ;; Tracked objects:
  6725 ;;		On entry : 3F/E
  6726 ;;		On exit  : 3F/E
  6727 ;;		Unchanged: 3F/0
  6728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6733 ;;Total ram usage:        0 bytes
  6734 ;; Hardware stack levels used:    1
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_TMR0_Initialize
  6739 ;;		_TMR0_CallBack
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text38
  6744  0021E6                     __ptext38:
  6745                           	opt stack 0
  6746  0021E6                     _TMR0_DefaultInterruptHandler:
  6747                           	opt stack 23
  6748                           
  6749                           ; BSR set to: 14
  6750                           
  6751                           ;incstack = 0
  6752  0021E6  0012               	return		;funcret
  6753  0021E8                     __end_of_TMR0_DefaultInterruptHandler:
  6754                           	opt stack 0
  6755                           tosu	equ	0xFFF
  6756                           tosh	equ	0xFFE
  6757                           tosl	equ	0xFFD
  6758                           pclatu	equ	0xFFB
  6759                           pclath	equ	0xFFA
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           intcon	equ	0xFF2
  6767                           postinc0	equ	0xFEE
  6768                           wreg	equ	0xFE8
  6769                           indf1	equ	0xFE7
  6770                           postinc1	equ	0xFE6
  6771                           postdec1	equ	0xFE5
  6772                           plusw1	equ	0xFE3
  6773                           fsr1h	equ	0xFE2
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           plusw2	equ	0xFDB
  6779                           fsr2h	equ	0xFDA
  6780                           fsr2l	equ	0xFD9
  6781                           status	equ	0xFD8
  6782                           
  6783 ;; *************** function _Timer0_10ms *****************
  6784 ;; Defined at:
  6785 ;;		line 3 in file "libs/projMain.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, status,2, status,0, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 3F/E
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    1
  6806 ;; This function calls:
  6807 ;;		i2___awmod
  6808 ;; This function is called by:
  6809 ;;		_main
  6810 ;;		_TMR0_CallBack
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           	psect	text39
  6815  002088                     __ptext39:
  6816                           	opt stack 0
  6817  002088                     _Timer0_10ms:
  6818                           	opt stack 22
  6819                           
  6820                           ; BSR set to: 14
  6821                           ;projMain.c: 5: GLOBAL_I++;
  6822                           
  6823                           ; BSR set to: 14
  6824                           ;incstack = 0
  6825  002088  4A4D               	infsnz	_GLOBAL_I,f,c
  6826  00208A  2A4E               	incf	_GLOBAL_I+1,f,c
  6827                           
  6828                           ; BSR set to: 14
  6829                           ;projMain.c: 6: if (GLOBAL_I%10==0) {
  6830  00208C  D811               	call	PL88	;call to abstracted procedure
  6831  00208E  6A04               	clrf	i2___awmod@divisor+1,c
  6832  002090  0E0A               	movlw	10
  6833  002092  6E03               	movwf	i2___awmod@divisor,c
  6834  002094  EC3F  F00F         	call	i2___awmod	;wreg free
  6835  002098  5001               	movf	?i2___awmod,w,c
  6836  00209A  1002               	iorwf	?i2___awmod+1,w,c
  6837  00209C  E102               	bnz	i2l2371
  6838                           
  6839                           ;projMain.c: 7: LATB ^= 0xFF;
  6840  00209E  0EFF               	movlw	255
  6841  0020A0  1A84               	xorwf	3972,f,c	;volatile
  6842  0020A2                     i2l2371:
  6843                           
  6844                           ;projMain.c: 8: }
  6845                           ;projMain.c: 9: if (GLOBAL_I%5000==0) {
  6846  0020A2  D806               	call	PL88	;call to abstracted procedure
  6847  0020A4  0E13               	movlw	19
  6848  0020A6  6E04               	movwf	i2___awmod@divisor+1,c
  6849  0020A8  0E88               	movlw	136
  6850  0020AA  6E03               	movwf	i2___awmod@divisor,c
  6851  0020AC  EF3F  F00F         	goto	i2___awmod	;wreg free
  6852  0020B0                     __end_of_Timer0_10ms:
  6853                           	opt stack 0
  6854  0020B0                     PL88:
  6855                           	opt stack 22
  6856  0020B0  C04D  F001         	movff	_GLOBAL_I,i2___awmod@dividend
  6857  0020B4  C04E  F002         	movff	_GLOBAL_I+1,i2___awmod@dividend+1
  6858  0020B8  0012               	return	
  6859  0020BA                     __end_ofPL88:
  6860                           	opt stack 0
  6861                           tosu	equ	0xFFF
  6862                           tosh	equ	0xFFE
  6863                           tosl	equ	0xFFD
  6864                           pclatu	equ	0xFFB
  6865                           pclath	equ	0xFFA
  6866                           tblptru	equ	0xFF8
  6867                           tblptrh	equ	0xFF7
  6868                           tblptrl	equ	0xFF6
  6869                           tablat	equ	0xFF5
  6870                           prodh	equ	0xFF4
  6871                           prodl	equ	0xFF3
  6872                           intcon	equ	0xFF2
  6873                           postinc0	equ	0xFEE
  6874                           wreg	equ	0xFE8
  6875                           indf1	equ	0xFE7
  6876                           postinc1	equ	0xFE6
  6877                           postdec1	equ	0xFE5
  6878                           plusw1	equ	0xFE3
  6879                           fsr1h	equ	0xFE2
  6880                           fsr1l	equ	0xFE1
  6881                           indf2	equ	0xFDF
  6882                           postinc2	equ	0xFDE
  6883                           postdec2	equ	0xFDD
  6884                           plusw2	equ	0xFDB
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           
  6889 ;; *************** function i2___awmod *****************
  6890 ;; Defined at:
  6891 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  dividend        2    0[COMRAM] int 
  6894 ;;  divisor         2    2[COMRAM] int 
  6895 ;; Auto vars:     Size  Location     Type
  6896 ;;  __awmod         1    5[COMRAM] unsigned char 
  6897 ;;  __awmod         1    4[COMRAM] unsigned char 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  2    0[COMRAM] int 
  6900 ;; Registers used:
  6901 ;;		wreg, status,2, status,0
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/E
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6910 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6911 ;;Total ram usage:        6 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_Timer0_10ms
  6917 ;; This function uses a non-reentrant model
  6918 ;;
  6919                           
  6920                           	psect	text40
  6921  001E7E                     __ptext40:
  6922                           	opt stack 0
  6923  001E7E                     i2___awmod:
  6924                           	opt stack 22
  6925                           
  6926                           ;incstack = 0
  6927  001E7E  6A06               	clrf	i2___awmod@sign,c
  6928  001E80  AE02               	btfss	i2___awmod@dividend+1,7,c
  6929  001E82  D006               	goto	i2l2261
  6930  001E84  6C01               	negf	i2___awmod@dividend,c
  6931  001E86  1E02               	comf	i2___awmod@dividend+1,f,c
  6932  001E88  B0D8               	btfsc	status,0,c
  6933  001E8A  2A02               	incf	i2___awmod@dividend+1,f,c
  6934  001E8C  0E01               	movlw	1
  6935  001E8E  6E06               	movwf	i2___awmod@sign,c
  6936  001E90                     i2l2261:
  6937  001E90  AE04               	btfss	i2___awmod@divisor+1,7,c
  6938  001E92  D004               	goto	i2l2265
  6939  001E94  6C03               	negf	i2___awmod@divisor,c
  6940  001E96  1E04               	comf	i2___awmod@divisor+1,f,c
  6941  001E98  B0D8               	btfsc	status,0,c
  6942  001E9A  2A04               	incf	i2___awmod@divisor+1,f,c
  6943  001E9C                     i2l2265:
  6944  001E9C  5003               	movf	i2___awmod@divisor,w,c
  6945  001E9E  1004               	iorwf	i2___awmod@divisor+1,w,c
  6946  001EA0  E017               	bz	i2l2281
  6947  001EA2  0E01               	movlw	1
  6948  001EA4  6E05               	movwf	i2___awmod@counter,c
  6949  001EA6  D004               	goto	i2l2271
  6950  001EA8                     i2l2269:
  6951  001EA8  90D8               	bcf	status,0,c
  6952  001EAA  3603               	rlcf	i2___awmod@divisor,f,c
  6953  001EAC  3604               	rlcf	i2___awmod@divisor+1,f,c
  6954  001EAE  2A05               	incf	i2___awmod@counter,f,c
  6955  001EB0                     i2l2271:
  6956  001EB0  AE04               	btfss	i2___awmod@divisor+1,7,c
  6957  001EB2  D7FA               	goto	i2l2269
  6958  001EB4                     i2l2273:
  6959  001EB4  5003               	movf	i2___awmod@divisor,w,c
  6960  001EB6  5C01               	subwf	i2___awmod@dividend,w,c
  6961  001EB8  5004               	movf	i2___awmod@divisor+1,w,c
  6962  001EBA  5802               	subwfb	i2___awmod@dividend+1,w,c
  6963  001EBC  E304               	bnc	i2l2277
  6964  001EBE  5003               	movf	i2___awmod@divisor,w,c
  6965  001EC0  5E01               	subwf	i2___awmod@dividend,f,c
  6966  001EC2  5004               	movf	i2___awmod@divisor+1,w,c
  6967  001EC4  5A02               	subwfb	i2___awmod@dividend+1,f,c
  6968  001EC6                     i2l2277:
  6969  001EC6  90D8               	bcf	status,0,c
  6970  001EC8  3204               	rrcf	i2___awmod@divisor+1,f,c
  6971  001ECA  3203               	rrcf	i2___awmod@divisor,f,c
  6972  001ECC  2E05               	decfsz	i2___awmod@counter,f,c
  6973  001ECE  D7F2               	goto	i2l2273
  6974  001ED0                     i2l2281:
  6975  001ED0  5006               	movf	i2___awmod@sign,w,c
  6976  001ED2  E004               	bz	i2l2285
  6977  001ED4  6C01               	negf	i2___awmod@dividend,c
  6978  001ED6  1E02               	comf	i2___awmod@dividend+1,f,c
  6979  001ED8  B0D8               	btfsc	status,0,c
  6980  001EDA  2A02               	incf	i2___awmod@dividend+1,f,c
  6981  001EDC                     i2l2285:
  6982  001EDC  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
  6983  001EE0  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
  6984  001EE4  0012               	return		;funcret
  6985  001EE6                     __end_ofi2___awmod:
  6986                           	opt stack 0
  6987                           tosu	equ	0xFFF
  6988                           tosh	equ	0xFFE
  6989                           tosl	equ	0xFFD
  6990                           pclatu	equ	0xFFB
  6991                           pclath	equ	0xFFA
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           prodh	equ	0xFF4
  6997                           prodl	equ	0xFF3
  6998                           intcon	equ	0xFF2
  6999                           postinc0	equ	0xFEE
  7000                           wreg	equ	0xFE8
  7001                           indf1	equ	0xFE7
  7002                           postinc1	equ	0xFE6
  7003                           postdec1	equ	0xFE5
  7004                           plusw1	equ	0xFE3
  7005                           fsr1h	equ	0xFE2
  7006                           fsr1l	equ	0xFE1
  7007                           indf2	equ	0xFDF
  7008                           postinc2	equ	0xFDE
  7009                           postdec2	equ	0xFDD
  7010                           plusw2	equ	0xFDB
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           tosu	equ	0xFFF
  7015                           tosh	equ	0xFFE
  7016                           tosl	equ	0xFFD
  7017                           pclatu	equ	0xFFB
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           postinc0	equ	0xFEE
  7027                           wreg	equ	0xFE8
  7028                           indf1	equ	0xFE7
  7029                           postinc1	equ	0xFE6
  7030                           postdec1	equ	0xFE5
  7031                           plusw1	equ	0xFE3
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           plusw2	equ	0xFDB
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042                           	psect	text41
  7043  000000                     __ptext41:
  7044                           	opt stack 0
  7045                           tosu	equ	0xFFF
  7046                           tosh	equ	0xFFE
  7047                           tosl	equ	0xFFD
  7048                           pclatu	equ	0xFFB
  7049                           pclath	equ	0xFFA
  7050                           tblptru	equ	0xFF8
  7051                           tblptrh	equ	0xFF7
  7052                           tblptrl	equ	0xFF6
  7053                           tablat	equ	0xFF5
  7054                           prodh	equ	0xFF4
  7055                           prodl	equ	0xFF3
  7056                           intcon	equ	0xFF2
  7057                           postinc0	equ	0xFEE
  7058                           wreg	equ	0xFE8
  7059                           indf1	equ	0xFE7
  7060                           postinc1	equ	0xFE6
  7061                           postdec1	equ	0xFE5
  7062                           plusw1	equ	0xFE3
  7063                           fsr1h	equ	0xFE2
  7064                           fsr1l	equ	0xFE1
  7065                           indf2	equ	0xFDF
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           plusw2	equ	0xFDB
  7069                           fsr2h	equ	0xFDA
  7070                           fsr2l	equ	0xFD9
  7071                           status	equ	0xFD8
  7072                           
  7073                           	psect	rparam
  7074  0000                     tosu	equ	0xFFF
  7075                           tosh	equ	0xFFE
  7076                           tosl	equ	0xFFD
  7077                           pclatu	equ	0xFFB
  7078                           pclath	equ	0xFFA
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           postinc0	equ	0xFEE
  7087                           wreg	equ	0xFE8
  7088                           indf1	equ	0xFE7
  7089                           postinc1	equ	0xFE6
  7090                           postdec1	equ	0xFE5
  7091                           plusw1	equ	0xFE3
  7092                           fsr1h	equ	0xFE2
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           plusw2	equ	0xFDB
  7098                           fsr2h	equ	0xFDA
  7099                           fsr2l	equ	0xFD9
  7100                           status	equ	0xFD8
  7101                           
  7102                           	psect	temp
  7103  00004F                     btemp:
  7104                           	opt stack 0
  7105  00004F                     	ds	1
  7106  0000                     int$flags	set	btemp
  7107                           tosu	equ	0xFFF
  7108                           tosh	equ	0xFFE
  7109                           tosl	equ	0xFFD
  7110                           pclatu	equ	0xFFB
  7111                           pclath	equ	0xFFA
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           prodh	equ	0xFF4
  7117                           prodl	equ	0xFF3
  7118                           intcon	equ	0xFF2
  7119                           postinc0	equ	0xFEE
  7120                           wreg	equ	0xFE8
  7121                           indf1	equ	0xFE7
  7122                           postinc1	equ	0xFE6
  7123                           postdec1	equ	0xFE5
  7124                           plusw1	equ	0xFE3
  7125                           fsr1h	equ	0xFE2
  7126                           fsr1l	equ	0xFE1
  7127                           indf2	equ	0xFDF
  7128                           postinc2	equ	0xFDE
  7129                           postdec2	equ	0xFDD
  7130                           plusw2	equ	0xFDB
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           tosu	equ	0xFFF
  7135                           tosh	equ	0xFFE
  7136                           tosl	equ	0xFFD
  7137                           pclatu	equ	0xFFB
  7138                           pclath	equ	0xFFA
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           postinc0	equ	0xFEE
  7147                           wreg	equ	0xFE8
  7148                           indf1	equ	0xFE7
  7149                           postinc1	equ	0xFE6
  7150                           postdec1	equ	0xFE5
  7151                           plusw1	equ	0xFE3
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           plusw2	equ	0xFDB
  7158                           fsr2h	equ	0xFDA
  7159                           fsr2l	equ	0xFD9
  7160                           status	equ	0xFD8


Data Sizes:
    Strings     9
    Constant    7
    Data        38
    BSS         1280
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     52      78
    BANK0           160      0      92
    BANK1           256      0     240
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    Lcd_Text@buffer	PTR unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[3]), STR_3(CODE[3]), STR_2(CODE[3]), STR_1(CODE[2]), 
		 -> main@Time(COMRAM[7]), main@Date(COMRAM[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> main@Time(COMRAM[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> main@Date(COMRAM[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> main@Date(COMRAM[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> main@Date(COMRAM[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> main@Time(COMRAM[7]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Int
    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___aldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___wmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Int->_GetDay
    ___lwdiv->___wmul
    _Lcd_Init->_Lcd_Command
    _GetDay->___awmod
    ___awmod->___awdiv

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _Timer0_10ms->i2___awmod

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   36143
                                             38 COMRAM    14    14      0
                 _EUSART1_Initialize
                             _GetDay
                           _Lcd_Init
                            _Lcd_Int
                           _Lcd_Text
                  _LoadAllFromEeprom
                    _ReadGPSDateTime
                  _SYSTEM_Initialize
           _TMR0_SetInterruptHandler
                   _ValidateDateTime
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                         9     2      7    2705
                                             26 COMRAM     9     2      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     370
                                              8 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              8 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2    1092
                                             22 COMRAM     4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _ValidateDateTime                                     4     2      2     686
                                              8 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     197
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     174
                                             10 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     174
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPSDateTime                                     18    16      2     540
                                              8 COMRAM    18    16      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   23653
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    6639
                                             16 COMRAM    20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               9     9      0    5865
                                             14 COMRAM     9     9      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                10    10      0    5557
                                             14 COMRAM    10    10      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                11    11      0    5592
                                             14 COMRAM    11    11      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    2705
                                              8 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             5     2      3    1445
                                             11 COMRAM     5     2      3
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Int                                              7     4      3    4323
                                             31 COMRAM     7     4      3
                             _GetDay (ARG)
                         _Lcd_CharCP
                        _Lcd_Command
                            ___lbdiv
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2439
                                              8 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                             14 COMRAM     7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lbdiv                                              4     3      1     314
                                              8 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           3     3      0     176
                                              8 COMRAM     3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                             11 COMRAM     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              8 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          3     3      0     176
                                              8 COMRAM     3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetDay                                               9     8      1    1922
                                             22 COMRAM     9     8      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     648
                                             16 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     908
                                              8 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           2     2      0     400
                                              6 COMRAM     2     2      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0     400
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        0     0      0     400
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (8) _Timer0_10ms                                          0     0      0     400
                          i2___awmod
 ---------------------------------------------------------------------------------
 (9) i2___awmod                                            6     2      4     400
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Initialize
   _GetDay
     ___awdiv
     ___awmod
       ___awdiv (ARG)
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Int
     _GetDay (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
     _Lcd_CharCP (ARG)
       _Lcd_Delay5us
     _Lcd_Command (ARG)
       _Lcd_Delay5us
     ___lbdiv (ARG)
     ___lwdiv (ARG)
       ___wmul (ARG)
     ___wmul (ARG)
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5us
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPSDateTime
     _EUSART1_Read
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _TMR0_SetInterruptHandler
   _ValidateDateTime
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
     ___aldiv
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         i2___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     3C0      35       25.9%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      F0       8       93.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      5C       5       57.5%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     34      4E       1       83.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     19A       6        0.0%
DATA                 0      0     55A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Jul 14 16:55:13 2017

                          Lcd_Int@tempVal 0025              __end_of_LoadStatesFromEeprom 1066  
                 __end_of_ReadGPSDateTime 19CE                               __CFG_CP$OFF 000000  
                                      PL2 120C                                        PL4 16F6  
                                      PL6 1066                                        PL8 12C6  
                                      l91 19CC                                        l85 19AE  
                            ___awdiv@sign 000E                       ___wmul@multiplicand 000B  
                                     PL10 12F0                                       PL20 189C  
                                     PL12 1BE6                                       PL30 1324  
                                     PL22 17DA                                       PL14 1300  
                                     PL40 1076                                       PL32 18CC  
                                     PL24 18B4                                       PL16 170A  
                                     PL50 171E                                       PL42 1084  
                                     PL34 1560                                       PL26 17F2  
                                     PL18 17C2                                       PL60 173A  
                                     PL52 1726                                       PL44 18E2  
                                     PL36 142C                                       PL28 130E  
                                     PL70 1446                                       PL62 1640  
                                     PL54 1096                                       PL46 1808  
                                     PL38 1714                               __CFG_LVP$ON 000000  
                                     PL80 1D92                                       PL72 1C8A  
                                     PL64 18F4                                       PL56 1730  
                                     PL48 132E                                       PL90 10AC  
                                     PL82 1658                                       PL74 1742  
                                     PL66 181A                                       PL58 143A  
                                     PL92 156C                                       PL84 1454  
                                     PL76 1C94                                       PL68 1D82  
                                     PL86 10A2                                       PL78 164C  
                                     PL88 20B0                                       l190 1C36  
                                     l705 1F50                                       l386 219C  
                                     l490 2146                                       _GIE 007F97  
                            __CFG_CPD$OFF 000000                              ___awmod@sign 0016  
                                     tosl 000FFD                                       wreg 000FE8  
                     __end_of_Lcd_Command 189C                              __CFG_ZCD$OFF 000000  
                                    l3103 1B98                                      l3111 1BE0  
                                    l1096 1FD4                                      l2401 1DD8  
                                    l3041 1D30                                      l3105 1BA8  
                                    l2411 1DF6                                      l2403 1DDC  
                                    l3051 1D58                                      l3043 1D36  
                                    l3037 1D24                                      l2415 1E00  
                                    l3063 19E4                                      l3055 1D6E  
                                    l3039 1D2A                                      l3047 1D3E  
                                    l3081 1A32                                      l3065 19EA  
                                    l3073 19FE                                      l3049 1D50  
                                    l2441 1FF4                                      l2419 1E0C  
                                    l3067 19F0                                      l3075 1A10  
                                    l2427 21A8                                      l2435 1FE2  
                                    l3069 19F6                                      l2613 1044  
                                    l2437 1FE8                                      l2445 1FFC  
                                    l3087 1A70                                      l2535 1220  
                                    l2439 1FEE                                      l2447 200E  
                                    l3183 1534                                      l3159 14A0  
                                    l2393 1DC0                                      l2801 1E68  
                                    l2609 101E                                      l3185 1542  
                                    l2387 1DB0                                      l2643 1382  
                                    l2627 134A                                      l2571 0F28  
                                    l2805 1E74                                      l2821 206C  
                                    l2653 13D0                                      l2581 0F48  
                                    l2901 19B2                                      l2725 1F64  
                                    l2399 1DD0                                      l2815 2062  
                                    l2831 2084                                      l2647 13B0  
                                    l2639 1376                                      l2903 19BA  
                                    l2751 1AE8                                      l2743 1AC4  
                                    l2841 1FA4                                      l2657 13FC  
                                    l2649 13C0                                      l2593 0F8A  
                                    l2761 1B1A                                      l2753 1AEC  
                                    l2737 1AAC                                      l2827 207C  
                                    l2819 2068                                      l2843 1FAC  
                                    l2923 167A                                      l2781 1E28  
                                    l2853 1FCA                                      l2845 1FB0  
                                    l2933 1692                                      l2749 1ADC  
                                    l2765 1B28                                      l2791 1E48  
                                    l2943 16AA                                      l2793 1E4C  
                                    l2785 1E34                                      l2881 1952  
                                    l2953 16C4                                      l2769 1B3C  
                                    l2867 1922                                      l2963 16DC  
                                    l2797 1E5E                                      l2789 1E40  
                                    l2973 16F4                                      l2895 197E  
                                    l2887 1968                                      l2879 194E  
                                    l2897 19A2                                      STR_1 0F0F  
                                    STR_2 0F0E                                      STR_3 0F0B  
                                    STR_4 0F08                                      u1105 175E  
                                    u1115 176C                                      u1125 1832  
                                    u2021 1482                                      u1310 1064  
                                    u1135 1838                                      u2031 1494  
                                    u1320 1372                                      u1240 12C4  
                                    u1145 1846                                      u1250 0F86  
                                    u2107 188A                                      u1260 0FCA  
                                    u2117 21D6                                      _LATA 000F83  
                                    _LATB 000F84                                      u1095 1758  
                                    _LATC 000F85                                      u1360 142A  
                                    u2057 19B4                                      u1274 0FFE  
                                    u1370 1F44                                      u2067 1784  
                                    u1275 0FFC                                      u1620 1910  
                                    u2077 17B0                                      u1294 1024  
                                    u2087 2190                                      u1295 1022  
                                    u2097 185E                                      u1730 15C2  
                                    u1731 15BE                                      u1740 15C4  
                                    u1880 1D66                                      u1890 1D7C  
                   __size_of_WriteLongInt 0098                                      u1887 1D64  
                                    u1897 1D7A                                      _PLLR 0076D8  
                                    _WPUA 000F10                                      _WPUB 000F18  
                                    _WPUC 000F20                                      _WPUE 000F2D  
                       ??_Lcd_Delay5500us 0009                             __CFG_FCMEN$ON 000000  
                                    _main 145E                             ?_EUSART1_Read 0001  
                         _TMR0_StartTimer 21DE                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                    __end_of_Lcd_Delay5us 21DE                                      fsr2l 000FD9  
                                    btemp 004F                                      prodh 000FF4  
                                    prodl 000FF3                                      start 0030  
              LoadEventsFromEeprom@Temp16 0017                           __end_of_Lcd_Int 1A92  
                           __CFG_CSWEN$ON 000000                              ___param_bank 000000  
                              _Lcd_CharCP 174A                             __CFG_SCANE$ON 000000  
                 __end_of_TMR0_Initialize 2054            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0016                   ?_LoadSettingsFromEeprom 0001  
           __end_of_OSCILLATOR_Initialize 214C                LoadStatesFromEeprom@j_1155 001F  
                         __end_of___aldiv 1B4E                                     ?_main 0001  
                         __end_of___awdiv 1E16                           __end_of___lbdiv 2088  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 1E7E  
                         ___awdiv@divisor 000B                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwdiv 1FDE                                     i2l414 001E  
                         ___awdiv@counter 000D                                     _OSCEN 000EDC  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
                                   _TRISA 000F88                                     _TRISB 000F89  
                                   _TRISC 000F8A                              _WriteLongInt 1B4E  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 000D                 ?_TMR0_SetInterruptHandler 0009  
                           __CFG_WRT3$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 2104  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
               __size_of_ValidateDateTime 0096                        __CFG_MCLRE$EXTMCLR 000000  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0009                                     plusw1 000FE3  
                                   plusw2 000FDB                                     status 000FD8  
                         ___lbdiv@divisor 0009             __size_of_LoadCyclesFromEeprom 00EC  
                         ___lbdiv@counter 000B                        __size_ofi2___awmod 0068  
                        __end_of_Lcd_Init 1C8A                          __end_of_Lcd_Text 1D82  
                              _ReadEeprom 2176                           __initialization 1C9E  
              __end_of_EUSART1_Initialize 2162                              __end_of_main 1560  
                        ?_ReadGPSDateTime 0009            __end_of_LoadSettingsFromEeprom 120C  
             ?_INTERRUPT_InterruptManager 0001             LoadStatesFromEeprom@AddStates 0021  
                             _Lcd_Command 1824                                    ??_main 0027  
                           __activetblptr 000003             LoadStatesFromEeprom@AudAddInc 001C  
                 __end_of_TMR0_StartTimer 21E2                          ___awdiv@dividend 0009  
                    _LoadStatesFromEeprom 0F12                                    _ANSELA 000F11  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                                  _T0CON0 000FD5                                    _T0CON1 000FD6  
                                  _RC1REG 000F99                                    _CYCLES 0060  
                                  _RC1STA 000F9D                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _RC6PPS 000EFD                                    _EVENTS 0100  
                          __CFG_WDTCCS$SC 000000                                    i2l2261 1E90  
                                  i2l2271 1EB0                                    i2l2273 1EB4  
                                  i2l2281 1ED0                                    i2l2265 1E9C  
                                  i2l2371 20A2                                    i2l2285 1EDC  
                                  i2l2277 1EC6                                    i2l2269 1EA8  
                        WriteLongInt@Sign 0021                                    _OSCFRQ 000EDE  
                                  _NVMDAT 000F80                                 ??_Lcd_Int 0023  
                          Lcd_Text@buffer 000D                                    _TX1STA 000F9E  
                                  _STATES 01F0                             ??_Timer0_10ms 0007  
                        WriteLongInt@size 0020                                    _GetDay 1572  
                          __CFG_PWRTE$OFF 000000                            __CFG_XINST$OFF 000000  
                             ?_Lcd_CharCP 0001                                    ___lmul 1F48  
                               ??___aldiv 0011                                    ___wmul 20BA  
                               ??___awdiv 000D                                 ??___lbdiv 000A  
                          __CFG_STVREN$ON 000000                                 ??___awmod 0015  
                               ??___lwdiv 0013                          ?_TMR0_Initialize 0001  
                                  clear_0 1CE6                                    clear_1 1CF8  
                                  clear_2 1D04                                    clear_3 1D10  
                        ___awdiv@quotient 000F                           ___awmod@divisor 0013  
                         ___awmod@counter 0015                     __end_of_Lcd_WriteChar 201A  
                            __pdataCOMRAM 0035                         __end_ofi2___awmod 1EE6  
                            __mediumconst 0000                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                   __end_of_TMR0_CallBack 211E                            i2___awmod@sign 0006  
                   ?_LoadStatesFromEeprom 0001  TMR0_SetInterruptHandler@InterruptHandler 0009  
                   __size_of_Lcd_Delay5us 000A                          ___lbdiv@dividend 000A  
           __size_of_INTERRUPT_Initialize 0004                        Lcd_Command@command 000B  
                   LoadEventsFromEeprom@i 0013                         _SYSTEM_Initialize 2162  
                              __accesstop 0060                   __end_of__initialization 1D16  
                         __CFG_FEXTOSC$HS 000000                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001              LoadSettingsFromEeprom@Temp16 0014  
            LoadSettingsFromEeprom@Temp32 0010                               ?_ReadEeprom 0009  
                          __pcstackCOMRAM 0001                              __pidataBANK0 211E  
                     __end_of_Timer0_10ms 20B0                       ??_SYSTEM_Initialize 000D  
                               ?_TMR0_ISR 0001                                __end_ofPL2 1216  
                              __end_ofPL4 170A                                __end_ofPL6 1076  
                              __end_ofPL8 12F0                          ___lbdiv@quotient 000C  
                    __end_of_EUSART1_Read 21AC                              _Lcd_Delay5us 21D4  
                         _Lcd_Delay5500us 218A                     TMR0_ISR@CountCallBack 0043  
                          Lcd_WriteChar@c 0018                            Lcd_WriteChar@x 0017  
                          Lcd_WriteChar@y 0019                                 ?_Lcd_Init 0001  
                               ?_Lcd_Text 000C                          ?_TMR0_StartTimer 0001  
               __end_of_SYSTEM_Initialize 2176                          _ValidateDateTime 1660  
                     __size_of_Lcd_CharCP 0078             __size_of_LoadEventsFromEeprom 00B0  
                              __pbssBANK0 0060                                __pbssBANK1 0100  
                                 ?_GetDay 0017                         ReadEeprom@Address 0009  
        __end_of_TMR0_SetInterruptHandler 21D4                                   ?___lmul 0009  
                                 ?___wmul 0009                                ??_TMR0_ISR 0007  
                         __CFG_PPS1WAY$ON 000000                            ___lmul@product 0011  
             LoadCyclesFromEeprom@Address 0012                                   GetDay@d 001C  
                                 GetDay@m 001D                                   GetDay@t 00A4  
                                 GetDay@y 001E                                   _SP1BRGH 000F9C  
                                 _SP1BRGL 000F9B                                   _OSCCON1 000ED8  
                                 _OSCCON3 000EDA                    ??_LoadStatesFromEeprom 0011  
                                 _NVMADRH 000F7F                                   _NVMADRL 000F7E  
                                 _OSCTUNE 000EDD                                ??_Lcd_Init 000C  
                                 _PPSLOCK 000EA0                                ??_Lcd_Text 000F  
                     __size_of_ReadEeprom 0014                                   _Lcd_Int 19CE  
              LoadCyclesFromEeprom@i_1220 0018                      ValidateDateTime@Date 0009  
                             _Timer0_10ms 2088                      ValidateDateTime@Item 000C  
                    ValidateDateTime@Time 000A                           __size_of_GetDay 00CE  
                                 __Hparam 0000                                   __Lparam 0000  
                                 ___aldiv 1A92                         Lcd_WriteChar@data 001A  
                                 ___awdiv 1D9E                                   ___lbdiv 2054  
                         __size_of___lmul 004C                                   ___awmod 1E16  
                         __size_of___wmul 0026                                   ___lwdiv 1F94  
                 __end_of_Lcd_Delay5500us 219C                              __psmallconst 0F00  
                                 __pcinit 1C9E                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 145E  
                                 __ptext1 1B4E                                   __ptext2 1F48  
                                 __ptext3 1A92                                   __ptext4 1FDE  
                                 __ptext5 1660                                   __ptext6 2162  
                                 __ptext7 201A                                   __ptext8 21DE  
                                 __ptext9 21CA              __end_of_LoadCyclesFromEeprom 142C  
                   _OSCILLATOR_Initialize 2136                          ___awmod@dividend 0011  
                        ___aldiv@dividend 0009                        _EUSART1_Initialize 214C  
                ??_PIN_MANAGER_Initialize 0009                __size_of_SYSTEM_Initialize 0014  
      LoadStatesFromEeprom@AddAudioNormal 0014                      end_of_initialization 1D16  
                     ?_EUSART1_Initialize 0001                           _DAY_LIGHT_START 004B  
                            ??_Lcd_CharCP 0009                          ___aldiv@quotient 0013  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0010  
                               Lcd_Text@x 000C                                 Lcd_Text@y 000F  
                              main@F11392 003C                                main@F11394 0035  
                    ??_EUSART1_Initialize 0009                     __CFG_WDTCPS$WDTCPS_31 000000  
                _TMR0_SetInterruptHandler 21CA                  __size_of_ReadGPSDateTime 00D0  
                               _TRISAbits 000F88             LoadSettingsFromEeprom@Address 0016  
                   LoadCyclesFromEeprom@i 0016                     LoadCyclesFromEeprom@j 0014  
                               i2___awmod 1E7E                        __end_of_Lcd_CharCP 17C2  
                       _LoadAllFromEeprom 21AC                              _EUSART1_Read 219C  
                      ?_LoadAllFromEeprom 0001                            __end_of_GetDay 1640  
                            ??_ReadEeprom 000B                      _timer0ReloadVal16bit 0047  
            __end_of_INTERRUPT_Initialize 21E6                  __end_of_ValidateDateTime 16F6  
                     ??_LoadAllFromEeprom 0025                            __end_of___lmul 1F94  
                        ?_Lcd_Delay5500us 0001                            __end_of___wmul 20E0  
                           __pidataCOMRAM 21BC                         __size_of_TMR0_ISR 0024  
                  ?_OSCILLATOR_Initialize 0001                               __end_ofPL10 1300  
                             __end_ofPL20 18B4                               __end_ofPL12 1C02  
                             __end_ofPL30 132E                               __end_ofPL22 17F2  
                             __end_ofPL14 130E                               __end_ofPL40 1084  
                             __end_ofPL32 18E2                               __end_ofPL24 18CC  
                             __end_ofPL16 1714                               __end_ofPL50 1726  
                             __end_ofPL42 1096                               __end_ofPL34 156C  
                             __end_ofPL26 1808                               __end_ofPL18 17DA  
                             __end_ofPL60 1742                               __end_ofPL52 1730  
                             __end_ofPL44 18F4                               __end_ofPL36 143A  
                             __end_ofPL28 1324                               __end_ofPL70 1454  
                             __end_ofPL62 164C                               __end_ofPL54 10A2  
                             __end_ofPL46 181A                               __end_ofPL38 171E  
                             __end_ofPL80 1D9E                               __end_ofPL72 1C94  
                             __end_ofPL64 18FE                               __end_ofPL56 173A  
                             __end_ofPL48 1340                               __end_ofPL90 10B4  
                             __end_ofPL82 1660                               __end_ofPL74 174A  
                             __end_ofPL66 1824                               __end_ofPL58 1446  
                             __end_ofPL92 1572                               __end_ofPL84 145E  
                             __end_ofPL76 1C9E                               __end_ofPL68 1D92  
                             __end_ofPL86 10AC                               __end_ofPL78 1658  
                             __end_ofPL88 20BA                       start_initialization 1C9E  
                __size_of_TMR0_Initialize 003A           __size_of_PIN_MANAGER_Initialize 0062  
           __end_ofReadGPSDateTime@F11401 0F08                                ?i2___awmod 0001  
                      __end_of_ReadEeprom 218A                 __end_of_LoadAllFromEeprom 21BC  
                       __size_of_Lcd_Init 0088                         __size_of_Lcd_Text 0062  
                         WriteLongInt@POS 0022                                  ??_GetDay 0018  
                         WriteLongInt@Val 001C                    __size_of_Lcd_WriteChar 003C  
                    _LoadCyclesFromEeprom 1340                  ??_LoadSettingsFromEeprom 000F  
                        __CFG_LPBOREN$OFF 000000                                  ??___lmul 0011  
            __end_of_LoadEventsFromEeprom 12C6                                  ??___wmul 000D  
                  __size_of_TMR0_CallBack 001A                               __pdataBANK0 00A4  
                           _DAY_LIGHT_END 0049                               __pbssBIGRAM 01F0  
                           ?_WriteLongInt 001B                      __size_of_Lcd_Command 0078  
                ReadGPSDateTime@StartCode 000F                               __pbssCOMRAM 0043  
                       ??_ReadGPSDateTime 000B                             WriteLongInt@x 001B  
                           WriteLongInt@y 0023                                  ?_Lcd_Int 0020  
                            ?_Timer0_10ms 0001                     ?_LoadCyclesFromEeprom 0001  
                   _TMR0_InterruptHandler 0045                  __size_of_TMR0_StartTimer 0004  
       LoadStatesFromEeprom@TempNormalAdd 0018                          ___lwdiv@dividend 000F  
                  _PIN_MANAGER_Initialize 1EE6                                 __pintcode 0008  
                                ?___aldiv 0009                                  ?___awdiv 0009  
                                ?___lbdiv 0009                                  ?___awmod 0011  
                                ?___lwdiv 000F              ??_INTERRUPT_InterruptManager 0007  
                          ??_WriteLongInt 0022                                  _BAUD1CON 000F9F  
                           _Lcd_WriteChar 1FDE                               __smallconst 0F00  
             LoadEventsFromEeprom@Address 0015                          ___lwdiv@quotient 0013  
                             ??i2___awmod 0005                             _TMR0_CallBack 2104  
           __size_of_LoadStatesFromEeprom 0154                __size_of_LoadAllFromEeprom 0010  
                                _GLOBAL_I 004D                      _INTERRUPT_Initialize 21E2  
                         ___aldiv@divisor 000D                         ??_TMR0_Initialize 000B  
                        ReadGPSDateTime@i 0016                           ___aldiv@counter 0011  
                          ___wmul@product 000D                                  _LATAbits 000F83  
                                _LATCbits 000F85                                  _PIE0bits 000EC2  
                     __CFG_BORV$VBOR_2P45 000000           __size_of_LoadSettingsFromEeprom 0158  
     __size_of_INTERRUPT_InterruptManager 0022                ??_TMR0_SetInterruptHandler 000B  
                                _PIR0bits 000ECA                                  _PIR3bits 000ECD  
                                i2u199_40 20FA                                  Lcd_Int@x 0020  
                                Lcd_Int@y 0023                       ReadGPSDateTime@Date 0009  
                     ReadGPSDateTime@Time 000A                                  _TMR0_ISR 20E0  
                            Lcd_Init@data 000C                            ?_Lcd_WriteChar 0017  
                       ___wmul@multiplier 0009                                  _Lcd_Init 1C02  
                          ?_TMR0_CallBack 0001                                  _Lcd_Text 1D20  
                       ___lmul@multiplier 0009                                 copy_data0 1CB2  
                               copy_data1 1CD2                     ?_INTERRUPT_Initialize 0001  
                    _LoadEventsFromEeprom 1216                        i2___awmod@dividend 0001  
                  ??_LoadCyclesFromEeprom 000F                          __size_of_Lcd_Int 00C4  
                            Lcd_Text@data 0010                                  __Hrparam 0000  
                 __CFG_RSTOSC$EXTOSC_4PLL 000000                                  __Lrparam 0000  
                 ReadGPSDateTime@TempChar 0019                        __CFG_BOREN$SBORDIS 000000  
                 ??_OSCILLATOR_Initialize 0009                         ??_TMR0_StartTimer 0009  
                        __size_of___aldiv 00BC                         ?_ValidateDateTime 0009  
                        __size_of___awdiv 0078                          __size_of___lbdiv 0034  
                        __size_of___awmod 0068               __size_of_EUSART1_Initialize 0016  
                        __size_of___lwdiv 004A                        ??_ValidateDateTime 000B  
                           ?_Lcd_Delay5us 0001                    _LoadSettingsFromEeprom 10B4  
                              _T0CON0bits 000FD5                           ___lwdiv@divisor 0011  
                         ___lwdiv@counter 0015                                  __ptext10 1EE6  
                                __ptext11 2136                                  __ptext20 1340  
                                __ptext12 21E2                                  __ptext21 2176  
                                __ptext13 214C                                  __ptext30 1824  
                                __ptext22 1D20                                  __ptext14 18FE  
                                __ptext31 21D4                                  __ptext23 19CE  
                                __ptext15 219C                                  __ptext40 1E7E  
                                __ptext32 1572                                  __ptext24 20BA  
                                __ptext16 21AC                                  __ptext41 0000  
                                __ptext33 1E16                                  __ptext25 1F94  
                                __ptext17 0F12                                  __ptext34 1D9E  
                                __ptext26 2054                                  __ptext18 10B4  
                                __ptext27 174A                                  __ptext19 1216  
                                __ptext36 20E0                                  __ptext28 1C02  
                                __ptext37 2104                                  __ptext29 218A  
                                __ptext38 21E6                                  __ptext39 2088  
                   ?_LoadEventsFromEeprom 0001                     LoadStatesFromEeprom@i 0023  
                   LoadStatesFromEeprom@j 001D                               Lcd_CharCP@c 000B  
                           __size_of_main 0102      __end_of_TMR0_DefaultInterruptHandler 21E8  
   __size_of_TMR0_DefaultInterruptHandler 0002              _TMR0_DefaultInterruptHandler 21E6  
                    __end_of_WriteLongInt 1BE6                      __CFG_WDTCWS$WDTCWS_7 000000  
                    __size_of_Timer0_10ms 0028                                _RC1STAbits 000F9D  
                      ReadGPSDateTime@Pos 001A                               Lcd_Int@data 0024  
                                int$flags 004F                                  main@Date 002E  
                             Lcd_Int@size 0022                                  main@Time 0027  
      __end_of_INTERRUPT_InterruptManager 002A                _INTERRUPT_InterruptManager 0008  
                         ??_Lcd_WriteChar 0019       LoadStatesFromEeprom@AddAudioSpecial 0016  
                          ??_Lcd_Delay5us 0009               PIN_MANAGER_Initialize@state 0009  
                         _ReadGPSDateTime 18FE                         i2___awmod@divisor 0003  
                       i2___awmod@counter 0005                                _INTCONbits 000FF2  
                         ??_TMR0_CallBack 0007                               _NVMCON1bits 000F81  
                              GetDay@Date 0017                  __size_of_Lcd_Delay5500us 0012  
                  ??_INTERRUPT_Initialize 0009                                  intlevel2 0000  
                   ReadGPSDateTime@F11401 0F01                   ?_PIN_MANAGER_Initialize 0001  
                       __CFG_CLKOUTEN$OFF 000000                               _PPSLOCKbits 000EA0  
      LoadStatesFromEeprom@TempSpecialAdd 001A             ?_TMR0_DefaultInterruptHandler 0001  
                              Lcd_Int@val 0021                     ReadGPSDateTime@Commas 0018  
                           ??_Lcd_Command 0009                                _RX1PPSbits 000EB5  
                         _TMR0_Initialize 201A                              ___aldiv@sign 0012  
                  ??_LoadEventsFromEeprom 000F            __end_of_PIN_MANAGER_Initialize 1F48  
