

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Wed Aug 16 11:35:12 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    86                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    87                           	psect	pa_nodes0,global,class=CODE,delta=1
    88  0000                     
    89                           ; Version 1.42
    90                           ; Generated 13/04/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F26K40 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     tosu	equ	0xFFF
   124                           tosh	equ	0xFFE
   125                           tosl	equ	0xFFD
   126                           pclath	equ	0xFFA
   127                           tblptru	equ	0xFF8
   128                           tblptrh	equ	0xFF7
   129                           tblptrl	equ	0xFF6
   130                           tablat	equ	0xFF5
   131                           prodh	equ	0xFF4
   132                           prodl	equ	0xFF3
   133                           intcon	equ	0xFF2
   134                           plusw0	equ	0xFEB
   135                           wreg	equ	0xFE8
   136                           indf1	equ	0xFE7
   137                           postinc1	equ	0xFE6
   138                           plusw1	equ	0xFE3
   139                           fsr1h	equ	0xFE2
   140                           fsr1l	equ	0xFE1
   141                           indf2	equ	0xFDF
   142                           postinc2	equ	0xFDE
   143                           postdec2	equ	0xFDD
   144                           plusw2	equ	0xFDB
   145                           fsr2h	equ	0xFDA
   146                           fsr2l	equ	0xFD9
   147                           status	equ	0xFD8
   148                           
   149                           	psect	idataCOMRAM
   150  003238                     __pidataCOMRAM:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _PRESENT_EVENT
   154  003238  FF                 	db	255
   155                           tosu	equ	0xFFF
   156                           tosh	equ	0xFFE
   157                           tosl	equ	0xFFD
   158                           pclath	equ	0xFFA
   159                           tblptru	equ	0xFF8
   160                           tblptrh	equ	0xFF7
   161                           tblptrl	equ	0xFF6
   162                           tablat	equ	0xFF5
   163                           prodh	equ	0xFF4
   164                           prodl	equ	0xFF3
   165                           intcon	equ	0xFF2
   166                           plusw0	equ	0xFEB
   167                           wreg	equ	0xFE8
   168                           indf1	equ	0xFE7
   169                           postinc1	equ	0xFE6
   170                           plusw1	equ	0xFE3
   171                           fsr1h	equ	0xFE2
   172                           fsr1l	equ	0xFE1
   173                           indf2	equ	0xFDF
   174                           postinc2	equ	0xFDE
   175                           postdec2	equ	0xFDD
   176                           plusw2	equ	0xFDB
   177                           fsr2h	equ	0xFDA
   178                           fsr2l	equ	0xFD9
   179                           status	equ	0xFD8
   180                           
   181                           	psect	idataBANK0
   182  003192                     __pidataBANK0:
   183                           	opt stack 0
   184                           
   185                           ;initializer for ReadGPS_DATE_TIME@F11476
   186  003192  2D                 	db	45
   187  003193  2D                 	db	45
   188  003194  2D                 	db	45
   189  003195  2D                 	db	45
   190  003196  2D                 	db	45
   191  003197  2D                 	db	45
   192  003198  00                 	db	0
   193                           
   194                           ;initializer for ReadGPS_DATE_TIME@F11474
   195  003199  2D                 	db	45
   196  00319A  2D                 	db	45
   197  00319B  2D                 	db	45
   198  00319C  2D                 	db	45
   199  00319D  2D                 	db	45
   200  00319E  2D                 	db	45
   201  00319F  00                 	db	0
   202                           
   203                           ;initializer for _LIGHTS
   204  0031A0  83                 	db	131
   205  0031A1  0F                 	db	15
   206  0031A2  84                 	db	132
   207  0031A3  0F                 	db	15
   208                           
   209                           ;initializer for _NEXT_EVENT
   210  0031A4  FF                 	db	255
   211                           
   212                           ;initializer for _CENTURY
   213  0031A5  14                 	db	20
   214                           tosu	equ	0xFFF
   215                           tosh	equ	0xFFE
   216                           tosl	equ	0xFFD
   217                           pclath	equ	0xFFA
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           prodh	equ	0xFF4
   223                           prodl	equ	0xFF3
   224                           intcon	equ	0xFF2
   225                           plusw0	equ	0xFEB
   226                           wreg	equ	0xFE8
   227                           indf1	equ	0xFE7
   228                           postinc1	equ	0xFE6
   229                           plusw1	equ	0xFE3
   230                           fsr1h	equ	0xFE2
   231                           fsr1l	equ	0xFE1
   232                           indf2	equ	0xFDF
   233                           postinc2	equ	0xFDE
   234                           postdec2	equ	0xFDD
   235                           plusw2	equ	0xFDB
   236                           fsr2h	equ	0xFDA
   237                           fsr2l	equ	0xFD9
   238                           status	equ	0xFD8
   239                           
   240                           	psect	idataBANK1
   241  003072                     __pidataBANK1:
   242                           	opt stack 0
   243                           
   244                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
   245  003072  001F               	dw	31
   246  003074  001C               	dw	28
   247  003076  001F               	dw	31
   248  003078  001E               	dw	30
   249  00307A  001F               	dw	31
   250  00307C  001E               	dw	30
   251  00307E  001F               	dw	31
   252  003080  001F               	dw	31
   253  003082  001E               	dw	30
   254  003084  001F               	dw	31
   255  003086  001E               	dw	30
   256  003088  001F               	dw	31
   257                           
   258                           ;initializer for GetDay@t
   259  00308A  0000               	dw	0
   260  00308C  0003               	dw	3
   261  00308E  0002               	dw	2
   262  003090  0005               	dw	5
   263  003092  0000               	dw	0
   264  003094  0003               	dw	3
   265  003096  0005               	dw	5
   266  003098  0001               	dw	1
   267  00309A  0004               	dw	4
   268  00309C  0006               	dw	6
   269  00309E  0002               	dw	2
   270  0030A0  0004               	dw	4
   271                           tosu	equ	0xFFF
   272                           tosh	equ	0xFFE
   273                           tosl	equ	0xFFD
   274                           pclath	equ	0xFFA
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           prodh	equ	0xFF4
   280                           prodl	equ	0xFF3
   281                           intcon	equ	0xFF2
   282                           plusw0	equ	0xFEB
   283                           wreg	equ	0xFE8
   284                           indf1	equ	0xFE7
   285                           postinc1	equ	0xFE6
   286                           plusw1	equ	0xFE3
   287                           fsr1h	equ	0xFE2
   288                           fsr1l	equ	0xFE1
   289                           indf2	equ	0xFDF
   290                           postinc2	equ	0xFDE
   291                           postdec2	equ	0xFDD
   292                           plusw2	equ	0xFDB
   293                           fsr2h	equ	0xFDA
   294                           fsr2l	equ	0xFD9
   295                           status	equ	0xFD8
   296                           
   297                           	psect	smallconst
   298  000F00                     __psmallconst:
   299                           	opt stack 0
   300  000F00  00                 	db	0
   301  000F01                     ReadGPSDateTime@F11467:
   302                           	opt stack 0
   303  000F01  24                 	db	36
   304  000F02  47                 	db	71
   305  000F03  50                 	db	80
   306  000F04  52                 	db	82
   307  000F05  4D                 	db	77
   308  000F06  43                 	db	67
   309  000F07  2C                 	db	44
   310  000F08  00                 	db	0
   311  000F09                     __end_ofReadGPSDateTime@F11467:
   312                           	opt stack 0
   313  0000                     _OSCTUNE	set	3805
   314  0000                     _OSCFRQ	set	3806
   315  0000                     _OSCEN	set	3804
   316  0000                     _OSCCON3	set	3802
   317  0000                     _OSCCON1	set	3800
   318  0000                     _RC6PPS	set	3837
   319  0000                     _RX1PPSbits	set	3765
   320  0000                     _PPSLOCKbits	set	3744
   321  0000                     _PPSLOCK	set	3744
   322  0000                     _PIR0bits	set	3786
   323  0000                     _PIE0bits	set	3778
   324  0000                     _PIR3bits	set	3789
   325  0000                     _PLLR	set	30424
   326  0000                     _ODCONC	set	3871
   327  0000                     _ODCONB	set	3863
   328  0000                     _ODCONA	set	3855
   329  0000                     _WPUC	set	3872
   330  0000                     _WPUA	set	3856
   331  0000                     _WPUB	set	3864
   332  0000                     _WPUE	set	3885
   333  0000                     _ANSELA	set	3857
   334  0000                     _ANSELB	set	3865
   335  0000                     _ANSELC	set	3873
   336  0000                     _T0CON0bits	set	4053
   337  0000                     _TMR0L	set	4051
   338  0000                     _TMR0H	set	4052
   339  0000                     _T0CON1	set	4054
   340  0000                     _T0CON0	set	4053
   341  0000                     _TRISC	set	3978
   342  0000                     _TRISB	set	3977
   343  0000                     _TRISA	set	3976
   344  0000                     _LATC	set	3973
   345  0000                     _RC1REG	set	3993
   346  0000                     _RC1STAbits	set	3997
   347  0000                     _SP1BRGH	set	3996
   348  0000                     _SP1BRGL	set	3995
   349  0000                     _TX1STA	set	3998
   350  0000                     _RC1STA	set	3997
   351  0000                     _BAUD1CON	set	3999
   352  0000                     _LATCbits	set	3973
   353  0000                     _INTCONbits	set	4082
   354  0000                     _NVMDAT	set	3968
   355  0000                     _NVMADRH	set	3967
   356  0000                     _NVMADRL	set	3966
   357  0000                     _NVMCON1bits	set	3969
   358  0000                     _LATAbits	set	3971
   359  0000                     _TRISAbits	set	3976
   360  0000                     _LATB	set	3972
   361  0000                     _LATA	set	3971
   362  0000                     _GIE	set	32663
   363                           
   364                           ; #config settings
   365  000F09  00                 	db	0	; dummy byte at the end
   366  0000                     tosu	equ	0xFFF
   367                           tosh	equ	0xFFE
   368                           tosl	equ	0xFFD
   369                           pclath	equ	0xFFA
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           prodh	equ	0xFF4
   375                           prodl	equ	0xFF3
   376                           intcon	equ	0xFF2
   377                           plusw0	equ	0xFEB
   378                           wreg	equ	0xFE8
   379                           indf1	equ	0xFE7
   380                           postinc1	equ	0xFE6
   381                           plusw1	equ	0xFE3
   382                           fsr1h	equ	0xFE2
   383                           fsr1l	equ	0xFE1
   384                           indf2	equ	0xFDF
   385                           postinc2	equ	0xFDE
   386                           postdec2	equ	0xFDD
   387                           plusw2	equ	0xFDB
   388                           fsr2h	equ	0xFDA
   389                           fsr2l	equ	0xFD9
   390                           status	equ	0xFD8
   391                           
   392                           	psect	cinit
   393  002900                     __pcinit:
   394                           	opt stack 0
   395  002900                     start_initialization:
   396                           	opt stack 0
   397  002900                     __initialization:
   398                           	opt stack 0
   399                           
   400                           ; Initialize objects allocated to BANK1 (48 bytes)
   401                           ; load TBLPTR registers with __pidataBANK1
   402  002900  0E72               	movlw	low __pidataBANK1
   403  002902  6EF6               	movwf	tblptrl,c
   404  002904  0E30               	movlw	high __pidataBANK1
   405  002906  6EF7               	movwf	tblptrh,c
   406  002908  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   407  00290A  6EF8               	movwf	tblptru,c
   408  00290C  EE01  F044         	lfsr	0,__pdataBANK1
   409  002910  EE10 F030          	lfsr	1,48
   410  002914                     copy_data0:
   411  002914  0009               	tblrd		*+
   412  002916  CFF5 FFEE          	movff	tablat,postinc0
   413  00291A  50E5               	movf	postdec1,w,c
   414  00291C  50E1               	movf	fsr1l,w,c
   415  00291E  E1FA               	bnz	copy_data0
   416                           
   417                           ; Initialize objects allocated to BANK0 (20 bytes)
   418                           ; load TBLPTR registers with __pidataBANK0
   419  002920  0E92               	movlw	low __pidataBANK0
   420  002922  6EF6               	movwf	tblptrl,c
   421  002924  0E31               	movlw	high __pidataBANK0
   422  002926  6EF7               	movwf	tblptrh,c
   423  002928  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   424  00292A  6EF8               	movwf	tblptru,c
   425  00292C  EE00  F0E7         	lfsr	0,__pdataBANK0
   426  002930  EE10 F014          	lfsr	1,20
   427  002934                     copy_data1:
   428  002934  0009               	tblrd		*+
   429  002936  CFF5 FFEE          	movff	tablat,postinc0
   430  00293A  50E5               	movf	postdec1,w,c
   431  00293C  50E1               	movf	fsr1l,w,c
   432  00293E  E1FA               	bnz	copy_data1
   433                           
   434                           ; Initialize objects allocated to COMRAM (1 bytes)
   435                           ; load TBLPTR registers with __pidataCOMRAM
   436  002940  0E38               	movlw	low __pidataCOMRAM
   437  002942  6EF6               	movwf	tblptrl,c
   438  002944  0E32               	movlw	high __pidataCOMRAM
   439  002946  6EF7               	movwf	tblptrh,c
   440  002948  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   441  00294A  6EF8               	movwf	tblptru,c
   442  00294C  0009               	tblrd		*+	;fetch initializer
   443  00294E  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   444                           
   445                           ; Clear objects allocated to BIGRAM (960 bytes)
   446  002952  EE02  F0F0         	lfsr	0,__pbssBIGRAM
   447  002956  EE13 F0C0          	lfsr	1,960
   448  00295A                     clear_0:
   449  00295A  6AEE               	clrf	postinc0,c
   450  00295C  50E5               	movf	postdec1,w,c
   451  00295E  50E1               	movf	fsr1l,w,c
   452  002960  E1FC               	bnz	clear_0
   453  002962  50E2               	movf	fsr1h,w,c
   454  002964  E1FA               	bnz	clear_0
   455                           
   456                           ; Clear objects allocated to BANK2 (240 bytes)
   457  002966  EE02  F000         	lfsr	0,__pbssBANK2
   458  00296A  0EF0               	movlw	240
   459  00296C                     clear_1:
   460  00296C  6AEE               	clrf	postinc0,c
   461  00296E  06E8               	decf	wreg,f,c
   462  002970  E1FD               	bnz	clear_1
   463                           
   464                           ; Clear objects allocated to BANK1 (68 bytes)
   465  002972  EE01  F000         	lfsr	0,__pbssBANK1
   466  002976  0E44               	movlw	68
   467  002978                     clear_2:
   468  002978  6AEE               	clrf	postinc0,c
   469  00297A  06E8               	decf	wreg,f,c
   470  00297C  E1FD               	bnz	clear_2
   471                           
   472                           ; Clear objects allocated to BANK0 (57 bytes)
   473  00297E  EE00  F0AE         	lfsr	0,__pbssBANK0
   474  002982  0E39               	movlw	57
   475  002984                     clear_3:
   476  002984  6AEE               	clrf	postinc0,c
   477  002986  06E8               	decf	wreg,f,c
   478  002988  E1FD               	bnz	clear_3
   479                           
   480                           ; Clear objects allocated to COMRAM (18 bytes)
   481  00298A  EE00  F04C         	lfsr	0,__pbssCOMRAM
   482  00298E  0E12               	movlw	18
   483  002990                     clear_4:
   484  002990  6AEE               	clrf	postinc0,c
   485  002992  06E8               	decf	wreg,f,c
   486  002994  E1FD               	bnz	clear_4
   487  002996                     end_of_initialization:
   488                           	opt stack 0
   489  002996                     __end_of__initialization:
   490                           	opt stack 0
   491  002996  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   492  002998  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   493  00299A  0100               	movlb	0
   494  00299C  EFE9  F00E         	goto	_main	;jump to C main() function
   495                           tosu	equ	0xFFF
   496                           tosh	equ	0xFFE
   497                           tosl	equ	0xFFD
   498                           pclath	equ	0xFFA
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           prodh	equ	0xFF4
   504                           prodl	equ	0xFF3
   505                           intcon	equ	0xFF2
   506                           postinc0	equ	0xFEE
   507                           plusw0	equ	0xFEB
   508                           wreg	equ	0xFE8
   509                           indf1	equ	0xFE7
   510                           postinc1	equ	0xFE6
   511                           postdec1	equ	0xFE5
   512                           plusw1	equ	0xFE3
   513                           fsr1h	equ	0xFE2
   514                           fsr1l	equ	0xFE1
   515                           indf2	equ	0xFDF
   516                           postinc2	equ	0xFDE
   517                           postdec2	equ	0xFDD
   518                           plusw2	equ	0xFDB
   519                           fsr2h	equ	0xFDA
   520                           fsr2l	equ	0xFD9
   521                           status	equ	0xFD8
   522                           
   523                           	psect	bssCOMRAM
   524  00004C                     __pbssCOMRAM:
   525                           	opt stack 0
   526  00004C                     _SECONDS_TO_ADJUST:
   527                           	opt stack 0
   528  00004C                     	ds	2
   529  00004E                     _FLAGS_1:
   530                           	opt stack 0
   531  00004E                     	ds	1
   532  00004F                     _SECONDS_TO_ADJUST_PART:
   533                           	opt stack 0
   534  00004F                     	ds	1
   535  000050                     _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER:
   536                           	opt stack 0
   537  000050                     	ds	1
   538  000051                     _NORMAL_AUDIO_STATE_ON_OFF_COUNTER:
   539                           	opt stack 0
   540  000051                     	ds	1
   541  000052                     _BLINK_STATE_ON_OFF_COUNTER:
   542                           	opt stack 0
   543  000052                     	ds	1
   544  000053                     _CENTI_SECOND_COUNT:
   545                           	opt stack 0
   546  000053                     	ds	1
   547  000054                     _STATE_SECONDS_REMAINING:
   548                           	opt stack 0
   549  000054                     	ds	1
   550  000055                     _STATE_SECONDS:
   551                           	opt stack 0
   552  000055                     	ds	1
   553  000056                     _PRESENT_STATE:
   554                           	opt stack 0
   555  000056                     	ds	1
   556  000057                     _AUDIO_SPECIAL_OFF_TIME:
   557                           	opt stack 0
   558  000057                     	ds	1
   559  000058                     _AUDIO_SPECIAL_ON_TIME:
   560                           	opt stack 0
   561  000058                     	ds	1
   562  000059                     _AUDIO_NORMAL_OFF_TIME:
   563                           	opt stack 0
   564  000059                     	ds	1
   565  00005A                     _AUDIO_NORMAL_ON_TIME:
   566                           	opt stack 0
   567  00005A                     	ds	1
   568  00005B                     _BLINK_LAST_X_SECONDS:
   569                           	opt stack 0
   570  00005B                     	ds	1
   571  00005C                     _BLINK_OFF_TIME:
   572                           	opt stack 0
   573  00005C                     	ds	1
   574  00005D                     _BLINK_ON_TIME:
   575                           	opt stack 0
   576  00005D                     	ds	1
   577                           tosu	equ	0xFFF
   578                           tosh	equ	0xFFE
   579                           tosl	equ	0xFFD
   580                           pclath	equ	0xFFA
   581                           tblptru	equ	0xFF8
   582                           tblptrh	equ	0xFF7
   583                           tblptrl	equ	0xFF6
   584                           tablat	equ	0xFF5
   585                           prodh	equ	0xFF4
   586                           prodl	equ	0xFF3
   587                           intcon	equ	0xFF2
   588                           postinc0	equ	0xFEE
   589                           plusw0	equ	0xFEB
   590                           wreg	equ	0xFE8
   591                           indf1	equ	0xFE7
   592                           postinc1	equ	0xFE6
   593                           postdec1	equ	0xFE5
   594                           plusw1	equ	0xFE3
   595                           fsr1h	equ	0xFE2
   596                           fsr1l	equ	0xFE1
   597                           indf2	equ	0xFDF
   598                           postinc2	equ	0xFDE
   599                           postdec2	equ	0xFDD
   600                           plusw2	equ	0xFDB
   601                           fsr2h	equ	0xFDA
   602                           fsr2l	equ	0xFD9
   603                           status	equ	0xFD8
   604                           
   605                           	psect	dataCOMRAM
   606  00005E                     __pdataCOMRAM:
   607                           	opt stack 0
   608  00005E                     _PRESENT_EVENT:
   609                           	opt stack 0
   610  00005E                     	ds	1
   611                           tosu	equ	0xFFF
   612                           tosh	equ	0xFFE
   613                           tosl	equ	0xFFD
   614                           pclath	equ	0xFFA
   615                           tblptru	equ	0xFF8
   616                           tblptrh	equ	0xFF7
   617                           tblptrl	equ	0xFF6
   618                           tablat	equ	0xFF5
   619                           prodh	equ	0xFF4
   620                           prodl	equ	0xFF3
   621                           intcon	equ	0xFF2
   622                           postinc0	equ	0xFEE
   623                           plusw0	equ	0xFEB
   624                           wreg	equ	0xFE8
   625                           indf1	equ	0xFE7
   626                           postinc1	equ	0xFE6
   627                           postdec1	equ	0xFE5
   628                           plusw1	equ	0xFE3
   629                           fsr1h	equ	0xFE2
   630                           fsr1l	equ	0xFE1
   631                           indf2	equ	0xFDF
   632                           postinc2	equ	0xFDE
   633                           postdec2	equ	0xFDD
   634                           plusw2	equ	0xFDB
   635                           fsr2h	equ	0xFDA
   636                           fsr2l	equ	0xFD9
   637                           status	equ	0xFD8
   638                           
   639                           	psect	bssBANK0
   640  0000AE                     __pbssBANK0:
   641                           	opt stack 0
   642  0000AE                     _GPS_DATE_TIME:
   643                           	opt stack 0
   644  0000AE                     	ds	11
   645  0000B9                     _DATE_TIME:
   646                           	opt stack 0
   647  0000B9                     	ds	11
   648  0000C4                     _TIME_AT_LAST_GPS_SYNC:
   649                           	opt stack 0
   650  0000C4                     	ds	4
   651  0000C8                     _TIME_WHEN_GPS_IS_SWITCHED_ON:
   652                           	opt stack 0
   653  0000C8                     	ds	4
   654  0000CC                     _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME:
   655                           	opt stack 0
   656  0000CC                     	ds	4
   657  0000D0                     _GPS_SYNC_EVERY_x_SECONDS:
   658                           	opt stack 0
   659  0000D0                     	ds	4
   660  0000D4                     _DAY_LIGHT_END:
   661                           	opt stack 0
   662  0000D4                     	ds	4
   663  0000D8                     _DAY_LIGHT_START:
   664                           	opt stack 0
   665  0000D8                     	ds	4
   666  0000DC                     TMR0_ISR@CountCallBack:
   667                           	opt stack 0
   668  0000DC                     	ds	2
   669  0000DE                     _TMR0_InterruptHandler:
   670                           	opt stack 0
   671  0000DE                     	ds	2
   672  0000E0                     _TIME_ZONE:
   673                           	opt stack 0
   674  0000E0                     	ds	2
   675  0000E2                     _FLAGS_0:
   676                           	opt stack 0
   677  0000E2                     	ds	1
   678  0000E3                     _NO_OF_TIMES_GPS_FAILED:
   679                           	opt stack 0
   680  0000E3                     	ds	1
   681  0000E4                     _NEXT_STATE:
   682                           	opt stack 0
   683  0000E4                     	ds	1
   684  0000E5                     _GPS_SYNC_AT_START:
   685                           	opt stack 0
   686  0000E5                     	ds	1
   687  0000E6                     _SPECIAL_AUDIO_LAST_X_SECONDS:
   688                           	opt stack 0
   689  0000E6                     	ds	1
   690                           tosu	equ	0xFFF
   691                           tosh	equ	0xFFE
   692                           tosl	equ	0xFFD
   693                           pclath	equ	0xFFA
   694                           tblptru	equ	0xFF8
   695                           tblptrh	equ	0xFF7
   696                           tblptrl	equ	0xFF6
   697                           tablat	equ	0xFF5
   698                           prodh	equ	0xFF4
   699                           prodl	equ	0xFF3
   700                           intcon	equ	0xFF2
   701                           postinc0	equ	0xFEE
   702                           plusw0	equ	0xFEB
   703                           wreg	equ	0xFE8
   704                           indf1	equ	0xFE7
   705                           postinc1	equ	0xFE6
   706                           postdec1	equ	0xFE5
   707                           plusw1	equ	0xFE3
   708                           fsr1h	equ	0xFE2
   709                           fsr1l	equ	0xFE1
   710                           indf2	equ	0xFDF
   711                           postinc2	equ	0xFDE
   712                           postdec2	equ	0xFDD
   713                           plusw2	equ	0xFDB
   714                           fsr2h	equ	0xFDA
   715                           fsr2l	equ	0xFD9
   716                           status	equ	0xFD8
   717                           
   718                           	psect	dataBANK0
   719  0000E7                     __pdataBANK0:
   720                           	opt stack 0
   721  0000E7                     ReadGPS_DATE_TIME@F11476:
   722                           	opt stack 0
   723  0000E7                     	ds	7
   724  0000EE                     ReadGPS_DATE_TIME@F11474:
   725                           	opt stack 0
   726  0000EE                     	ds	7
   727  0000F5                     _LIGHTS:
   728                           	opt stack 0
   729  0000F5                     	ds	4
   730  0000F9                     _NEXT_EVENT:
   731                           	opt stack 0
   732  0000F9                     	ds	1
   733  0000FA                     _CENTURY:
   734                           	opt stack 0
   735  0000FA                     	ds	1
   736                           tosu	equ	0xFFF
   737                           tosh	equ	0xFFE
   738                           tosl	equ	0xFFD
   739                           pclath	equ	0xFFA
   740                           tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           prodh	equ	0xFF4
   745                           prodl	equ	0xFF3
   746                           intcon	equ	0xFF2
   747                           postinc0	equ	0xFEE
   748                           plusw0	equ	0xFEB
   749                           wreg	equ	0xFE8
   750                           indf1	equ	0xFE7
   751                           postinc1	equ	0xFE6
   752                           postdec1	equ	0xFE5
   753                           plusw1	equ	0xFE3
   754                           fsr1h	equ	0xFE2
   755                           fsr1l	equ	0xFE1
   756                           indf2	equ	0xFDF
   757                           postinc2	equ	0xFDE
   758                           postdec2	equ	0xFDD
   759                           plusw2	equ	0xFDB
   760                           fsr2h	equ	0xFDA
   761                           fsr2l	equ	0xFD9
   762                           status	equ	0xFD8
   763                           
   764                           	psect	bssBANK1
   765  000100                     __pbssBANK1:
   766                           	opt stack 0
   767  000100                     _CYCLES:
   768                           	opt stack 0
   769  000100                     	ds	68
   770                           tosu	equ	0xFFF
   771                           tosh	equ	0xFFE
   772                           tosl	equ	0xFFD
   773                           pclath	equ	0xFFA
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           prodh	equ	0xFF4
   779                           prodl	equ	0xFF3
   780                           intcon	equ	0xFF2
   781                           postinc0	equ	0xFEE
   782                           plusw0	equ	0xFEB
   783                           wreg	equ	0xFE8
   784                           indf1	equ	0xFE7
   785                           postinc1	equ	0xFE6
   786                           postdec1	equ	0xFE5
   787                           plusw1	equ	0xFE3
   788                           fsr1h	equ	0xFE2
   789                           fsr1l	equ	0xFE1
   790                           indf2	equ	0xFDF
   791                           postinc2	equ	0xFDE
   792                           postdec2	equ	0xFDD
   793                           plusw2	equ	0xFDB
   794                           fsr2h	equ	0xFDA
   795                           fsr2l	equ	0xFD9
   796                           status	equ	0xFD8
   797                           
   798                           	psect	dataBANK1
   799  000144                     __pdataBANK1:
   800                           	opt stack 0
   801  000144                     projMain@NO_OF_DAYS_IN_A_MONTH:
   802                           	opt stack 0
   803  000144                     	ds	24
   804  00015C                     GetDay@t:
   805                           	opt stack 0
   806  00015C                     	ds	24
   807                           tosu	equ	0xFFF
   808                           tosh	equ	0xFFE
   809                           tosl	equ	0xFFD
   810                           pclath	equ	0xFFA
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           prodh	equ	0xFF4
   816                           prodl	equ	0xFF3
   817                           intcon	equ	0xFF2
   818                           postinc0	equ	0xFEE
   819                           plusw0	equ	0xFEB
   820                           wreg	equ	0xFE8
   821                           indf1	equ	0xFE7
   822                           postinc1	equ	0xFE6
   823                           postdec1	equ	0xFE5
   824                           plusw1	equ	0xFE3
   825                           fsr1h	equ	0xFE2
   826                           fsr1l	equ	0xFE1
   827                           indf2	equ	0xFDF
   828                           postinc2	equ	0xFDE
   829                           postdec2	equ	0xFDD
   830                           plusw2	equ	0xFDB
   831                           fsr2h	equ	0xFDA
   832                           fsr2l	equ	0xFD9
   833                           status	equ	0xFD8
   834                           
   835                           	psect	bssBANK2
   836  000200                     __pbssBANK2:
   837                           	opt stack 0
   838  000200                     _EVENTS:
   839                           	opt stack 0
   840  000200                     	ds	240
   841                           tosu	equ	0xFFF
   842                           tosh	equ	0xFFE
   843                           tosl	equ	0xFFD
   844                           pclath	equ	0xFFA
   845                           tblptru	equ	0xFF8
   846                           tblptrh	equ	0xFF7
   847                           tblptrl	equ	0xFF6
   848                           tablat	equ	0xFF5
   849                           prodh	equ	0xFF4
   850                           prodl	equ	0xFF3
   851                           intcon	equ	0xFF2
   852                           postinc0	equ	0xFEE
   853                           plusw0	equ	0xFEB
   854                           wreg	equ	0xFE8
   855                           indf1	equ	0xFE7
   856                           postinc1	equ	0xFE6
   857                           postdec1	equ	0xFE5
   858                           plusw1	equ	0xFE3
   859                           fsr1h	equ	0xFE2
   860                           fsr1l	equ	0xFE1
   861                           indf2	equ	0xFDF
   862                           postinc2	equ	0xFDE
   863                           postdec2	equ	0xFDD
   864                           plusw2	equ	0xFDB
   865                           fsr2h	equ	0xFDA
   866                           fsr2l	equ	0xFD9
   867                           status	equ	0xFD8
   868                           
   869                           	psect	bssBIGRAM
   870  0002F0                     __pbssBIGRAM:
   871                           	opt stack 0
   872  0002F0                     _STATES:
   873                           	opt stack 0
   874  0002F0                     	ds	960
   875                           tosu	equ	0xFFF
   876                           tosh	equ	0xFFE
   877                           tosl	equ	0xFFD
   878                           pclath	equ	0xFFA
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           prodh	equ	0xFF4
   884                           prodl	equ	0xFF3
   885                           intcon	equ	0xFF2
   886                           postinc0	equ	0xFEE
   887                           plusw0	equ	0xFEB
   888                           wreg	equ	0xFE8
   889                           indf1	equ	0xFE7
   890                           postinc1	equ	0xFE6
   891                           postdec1	equ	0xFE5
   892                           plusw1	equ	0xFE3
   893                           fsr1h	equ	0xFE2
   894                           fsr1l	equ	0xFE1
   895                           indf2	equ	0xFDF
   896                           postinc2	equ	0xFDE
   897                           postdec2	equ	0xFDD
   898                           plusw2	equ	0xFDB
   899                           fsr2h	equ	0xFDA
   900                           fsr2l	equ	0xFD9
   901                           status	equ	0xFD8
   902                           
   903                           	psect	cstackBANK0
   904  000060                     __pcstackBANK0:
   905                           	opt stack 0
   906  000060                     ??_Lcd_CharCP:
   907  000060                     ??_Lcd_Delay5500us:
   908  000060                     ??_Lcd_Command:
   909  000060                     ??_TestGPSStartCondition:
   910  000060                     ?___wmul:
   911                           	opt stack 0
   912  000060                     ?___awdiv:
   913                           	opt stack 0
   914  000060                     ?___lwmod:
   915                           	opt stack 0
   916  000060                     ?___lmul:
   917                           	opt stack 0
   918  000060                     ?___aldiv:
   919                           	opt stack 0
   920  000060                     ReadGPSDateTime@Date:
   921                           	opt stack 0
   922  000060                     ValidateDateTime@Date:
   923                           	opt stack 0
   924  000060                     PIN_MANAGER_Initialize@state:
   925                           	opt stack 0
   926  000060                     ReadEeprom@Address:
   927                           	opt stack 0
   928  000060                     TMR0_SetInterruptHandler@InterruptHandler:
   929                           	opt stack 0
   930  000060                     ___wmul@multiplier:
   931                           	opt stack 0
   932  000060                     ___awdiv@dividend:
   933                           	opt stack 0
   934  000060                     ___lwmod@dividend:
   935                           	opt stack 0
   936  000060                     VerifyForGPSOnTIme@TimeDiff:
   937                           	opt stack 0
   938  000060                     ___lmul@multiplier:
   939                           	opt stack 0
   940  000060                     ___aldiv@dividend:
   941                           	opt stack 0
   942                           
   943                           ; 4 bytes @ 0x0
   944  000060                     	ds	1
   945  000061                     ReadGPSDateTime@Time:
   946                           	opt stack 0
   947  000061                     ValidateDateTime@Time:
   948                           	opt stack 0
   949                           
   950                           ; 1 bytes @ 0x1
   951  000061                     	ds	1
   952  000062                     ??_ReadGPSDateTime:
   953  000062                     ??_ValidateDateTime:
   954  000062                     Lcd_CharCP@c:
   955                           	opt stack 0
   956  000062                     Lcd_Command@command:
   957                           	opt stack 0
   958  000062                     ___wmul@multiplicand:
   959                           	opt stack 0
   960  000062                     ___awdiv@divisor:
   961                           	opt stack 0
   962  000062                     ___lwmod@divisor:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x2
   966  000062                     	ds	1
   967  000063                     ValidateDateTime@Item:
   968                           	opt stack 0
   969  000063                     Lcd_Init@data:
   970                           	opt stack 0
   971                           
   972                           ; 1 bytes @ 0x3
   973  000063                     	ds	1
   974  000064                     ___awdiv@counter:
   975                           	opt stack 0
   976  000064                     ___lwmod@counter:
   977                           	opt stack 0
   978  000064                     ___wmul@product:
   979                           	opt stack 0
   980  000064                     ___lmul@multiplicand:
   981                           	opt stack 0
   982  000064                     ___aldiv@divisor:
   983                           	opt stack 0
   984                           
   985                           ; 4 bytes @ 0x4
   986  000064                     	ds	1
   987  000065                     ?_IncreaseByAYear:
   988                           	opt stack 0
   989  000065                     ?_DecreaseByAYear:
   990                           	opt stack 0
   991  000065                     ___awdiv@sign:
   992                           	opt stack 0
   993  000065                     IncreaseByAYear@dt:
   994                           	opt stack 0
   995  000065                     DecreaseByAYear@dt:
   996                           	opt stack 0
   997                           
   998                           ; 11 bytes @ 0x5
   999  000065                     	ds	1
  1000  000066                     ??_LoadCyclesFromEeprom:
  1001  000066                     ??_GetEventNumber:
  1002  000066                     ___awdiv@quotient:
  1003                           	opt stack 0
  1004  000066                     LoadSettingsFromEeprom@Temp32:
  1005                           	opt stack 0
  1006  000066                     ReadGPSDateTime@StartCode:
  1007                           	opt stack 0
  1008                           
  1009                           ; 8 bytes @ 0x6
  1010  000066                     	ds	2
  1011  000068                     ??_LoadStatesFromEeprom:
  1012  000068                     ?___awmod:
  1013                           	opt stack 0
  1014  000068                     ___aldiv@counter:
  1015                           	opt stack 0
  1016  000068                     ___awmod@dividend:
  1017                           	opt stack 0
  1018  000068                     ___lmul@product:
  1019                           	opt stack 0
  1020                           
  1021                           ; 4 bytes @ 0x8
  1022  000068                     	ds	1
  1023  000069                     ___aldiv@sign:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0x9
  1027  000069                     	ds	1
  1028  00006A                     LoadSettingsFromEeprom@Temp16:
  1029                           	opt stack 0
  1030  00006A                     ___awmod@divisor:
  1031                           	opt stack 0
  1032  00006A                     ___aldiv@quotient:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0xA
  1036  00006A                     	ds	1
  1037  00006B                     LoadStatesFromEeprom@AddAudioNormal:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0xB
  1041  00006B                     	ds	1
  1042  00006C                     ??_LoadEventsFromEeprom:
  1043  00006C                     ?_TimeTextToSecond:
  1044                           	opt stack 0
  1045  00006C                     TimeTextToSecond@Time:
  1046                           	opt stack 0
  1047  00006C                     ___awmod@counter:
  1048                           	opt stack 0
  1049  00006C                     LoadSettingsFromEeprom@Address:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xC
  1053  00006C                     	ds	1
  1054  00006D                     ___awmod@sign:
  1055                           	opt stack 0
  1056  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
  1057                           	opt stack 0
  1058  00006D                     LoadCyclesFromEeprom@Address:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0xD
  1062  00006D                     	ds	1
  1063  00006E                     GetDay@Date:
  1064                           	opt stack 0
  1065  00006E                     Lcd_WriteChar@x:
  1066                           	opt stack 0
  1067  00006E                     ReadGPSDateTime@i:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0xE
  1071  00006E                     	ds	1
  1072  00006F                     ??_GetDay:
  1073  00006F                     Lcd_WriteChar@c:
  1074                           	opt stack 0
  1075  00006F                     LoadStatesFromEeprom@TempNormalAdd:
  1076                           	opt stack 0
  1077  00006F                     LoadCyclesFromEeprom@j:
  1078                           	opt stack 0
  1079  00006F                     GetEventNumber@i:
  1080                           	opt stack 0
  1081                           
  1082                           ; 2 bytes @ 0xF
  1083  00006F                     	ds	1
  1084  000070                     ??_TimeTextToSecond:
  1085  000070                     ?_IncreaseByAMonth:
  1086                           	opt stack 0
  1087  000070                     ?_DecreaseByAMonth:
  1088                           	opt stack 0
  1089  000070                     ReadGPSDateTime@Commas:
  1090                           	opt stack 0
  1091  000070                     Lcd_WriteChar@y:
  1092                           	opt stack 0
  1093  000070                     IncreaseByAMonth@dt:
  1094                           	opt stack 0
  1095  000070                     DecreaseByAMonth@dt:
  1096                           	opt stack 0
  1097                           
  1098                           ; 11 bytes @ 0x10
  1099  000070                     	ds	1
  1100  000071                     ReadGPSDateTime@TempChar:
  1101                           	opt stack 0
  1102  000071                     Lcd_WriteChar@data:
  1103                           	opt stack 0
  1104  000071                     LoadStatesFromEeprom@TempSpecialAdd:
  1105                           	opt stack 0
  1106  000071                     LoadCyclesFromEeprom@i:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x11
  1110  000071                     	ds	1
  1111  000072                     ReadGPSDateTime@Pos:
  1112                           	opt stack 0
  1113  000072                     WriteLongInt@x:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x12
  1117  000072                     	ds	1
  1118  000073                     LoadStatesFromEeprom@AudAddInc:
  1119                           	opt stack 0
  1120  000073                     LoadCyclesFromEeprom@i_1464:
  1121                           	opt stack 0
  1122  000073                     WriteLongInt@Val:
  1123                           	opt stack 0
  1124                           
  1125                           ; 4 bytes @ 0x13
  1126  000073                     	ds	1
  1127  000074                     LoadEventsFromEeprom@i:
  1128                           	opt stack 0
  1129  000074                     LoadStatesFromEeprom@j:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x14
  1133  000074                     	ds	1
  1134  000075                     GetDay@d:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x15
  1138  000075                     	ds	1
  1139  000076                     GetDay@m:
  1140                           	opt stack 0
  1141  000076                     LoadEventsFromEeprom@Address:
  1142                           	opt stack 0
  1143  000076                     LoadStatesFromEeprom@j_1399:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x16
  1147  000076                     	ds	1
  1148  000077                     WriteLongInt@size:
  1149                           	opt stack 0
  1150  000077                     GetDay@y:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x17
  1154  000077                     	ds	1
  1155  000078                     WriteLongInt@Sign:
  1156                           	opt stack 0
  1157  000078                     LoadEventsFromEeprom@Temp16:
  1158                           	opt stack 0
  1159  000078                     LoadStatesFromEeprom@AddStates:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x18
  1163  000078                     	ds	1
  1164  000079                     WriteLongInt@POS:
  1165                           	opt stack 0
  1166                           
  1167                           ; 1 bytes @ 0x19
  1168  000079                     	ds	1
  1169  00007A                     WriteLongInt@y:
  1170                           	opt stack 0
  1171  00007A                     LoadStatesFromEeprom@i:
  1172                           	opt stack 0
  1173                           
  1174                           ; 2 bytes @ 0x1A
  1175  00007A                     	ds	1
  1176  00007B                     ?_IncreaseByADay:
  1177                           	opt stack 0
  1178  00007B                     ?_DecreaseByADay:
  1179                           	opt stack 0
  1180  00007B                     IncreaseByADay@dt:
  1181                           	opt stack 0
  1182  00007B                     DecreaseByADay@dt:
  1183                           	opt stack 0
  1184                           
  1185                           ; 11 bytes @ 0x1B
  1186  00007B                     	ds	1
  1187  00007C                     
  1188                           ; 1 bytes @ 0x1C
  1189  00007C                     	ds	4
  1190  000080                     TimeTextToSecond@Second:
  1191                           	opt stack 0
  1192                           
  1193                           ; 4 bytes @ 0x20
  1194  000080                     	ds	6
  1195  000086                     ??_IncreaseByADay:
  1196  000086                     ??_DecreaseByADay:
  1197                           
  1198                           ; 1 bytes @ 0x26
  1199  000086                     	ds	1
  1200  000087                     DecreaseByADay@MonthDays:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0x27
  1204  000087                     	ds	1
  1205  000088                     IncreaseByADay@MonthDays:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x28
  1209  000088                     	ds	1
  1210  000089                     ?_AdjustDayLightSaving:
  1211                           	opt stack 0
  1212  000089                     AdjustDayLightSaving@dt:
  1213                           	opt stack 0
  1214                           
  1215                           ; 11 bytes @ 0x29
  1216  000089                     	ds	11
  1217  000094                     AdjustDayLightSaving@Start:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x34
  1221  000094                     	ds	2
  1222  000096                     AdjustDayLightSaving@End:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x36
  1226  000096                     	ds	2
  1227  000098                     AdjustDayLightSaving@Present:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x38
  1231  000098                     	ds	2
  1232  00009A                     ??_ReadGPS_DATE_TIME:
  1233                           
  1234                           ; 1 bytes @ 0x3A
  1235  00009A                     	ds	4
  1236  00009E                     ReadGPS_DATE_TIME@Time:
  1237                           	opt stack 0
  1238                           
  1239                           ; 7 bytes @ 0x3E
  1240  00009E                     	ds	7
  1241  0000A5                     ReadGPS_DATE_TIME@Date:
  1242                           	opt stack 0
  1243                           
  1244                           ; 7 bytes @ 0x45
  1245  0000A5                     	ds	7
  1246  0000AC                     ReadGPS_DATE_TIME@IsValidGPS:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x4C
  1250  0000AC                     	ds	1
  1251  0000AD                     ReadGPS_DATE_TIME@TempItr:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x4D
  1255  0000AD                     	ds	1
  1256  0000AE                     tosu	equ	0xFFF
  1257                           tosh	equ	0xFFE
  1258                           tosl	equ	0xFFD
  1259                           pclath	equ	0xFFA
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           prodh	equ	0xFF4
  1265                           prodl	equ	0xFF3
  1266                           intcon	equ	0xFF2
  1267                           postinc0	equ	0xFEE
  1268                           plusw0	equ	0xFEB
  1269                           wreg	equ	0xFE8
  1270                           indf1	equ	0xFE7
  1271                           postinc1	equ	0xFE6
  1272                           postdec1	equ	0xFE5
  1273                           plusw1	equ	0xFE3
  1274                           fsr1h	equ	0xFE2
  1275                           fsr1l	equ	0xFE1
  1276                           indf2	equ	0xFDF
  1277                           postinc2	equ	0xFDE
  1278                           postdec2	equ	0xFDD
  1279                           plusw2	equ	0xFDB
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284                           ; 1 bytes @ 0x4E
  1285                           
  1286                           	psect	cstackCOMRAM
  1287  000001                     __pcstackCOMRAM:
  1288                           	opt stack 0
  1289  000001                     ?i2___lwmod:
  1290                           	opt stack 0
  1291  000001                     ?___ftpack:
  1292                           	opt stack 0
  1293  000001                     ?___almod:
  1294                           	opt stack 0
  1295  000001                     i2___lwmod@dividend:
  1296                           	opt stack 0
  1297  000001                     ___ftpack@arg:
  1298                           	opt stack 0
  1299  000001                     ___almod@dividend:
  1300                           	opt stack 0
  1301                           
  1302                           ; 4 bytes @ 0x0
  1303  000001                     	ds	2
  1304  000003                     i2___lwmod@divisor:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x2
  1308  000003                     	ds	1
  1309  000004                     ___ftpack@exp:
  1310                           	opt stack 0
  1311                           
  1312                           ; 1 bytes @ 0x3
  1313  000004                     	ds	1
  1314  000005                     ___ftpack@sign:
  1315                           	opt stack 0
  1316  000005                     i2___lwmod@counter:
  1317                           	opt stack 0
  1318  000005                     ___almod@divisor:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x4
  1322  000005                     	ds	1
  1323  000006                     ??___ftpack:
  1324  000006                     ?i2_IncreaseByAYear:
  1325                           	opt stack 0
  1326  000006                     i2IncreaseByAYear@dt:
  1327                           	opt stack 0
  1328                           
  1329                           ; 11 bytes @ 0x5
  1330  000006                     	ds	3
  1331  000009                     ?___lbtoft:
  1332                           	opt stack 0
  1333  000009                     ___almod@counter:
  1334                           	opt stack 0
  1335                           
  1336                           ; 1 bytes @ 0x8
  1337  000009                     	ds	1
  1338  00000A                     ___almod@sign:
  1339                           	opt stack 0
  1340                           
  1341                           ; 1 bytes @ 0x9
  1342  00000A                     	ds	2
  1343  00000C                     ___lbtoft@c:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0xB
  1347  00000C                     	ds	1
  1348  00000D                     ?___ftmul:
  1349                           	opt stack 0
  1350  00000D                     ___ftmul@f1:
  1351                           	opt stack 0
  1352                           
  1353                           ; 3 bytes @ 0xC
  1354  00000D                     	ds	3
  1355  000010                     ___ftmul@f2:
  1356                           	opt stack 0
  1357                           
  1358                           ; 3 bytes @ 0xF
  1359  000010                     	ds	1
  1360  000011                     ?i2_IncreaseByAMonth:
  1361                           	opt stack 0
  1362  000011                     i2IncreaseByAMonth@dt:
  1363                           	opt stack 0
  1364                           
  1365                           ; 11 bytes @ 0x10
  1366  000011                     	ds	2
  1367  000013                     ??___ftmul:
  1368                           
  1369                           ; 1 bytes @ 0x12
  1370  000013                     	ds	3
  1371  000016                     ___ftmul@exp:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x15
  1375  000016                     	ds	1
  1376  000017                     ___ftmul@f3_as_product:
  1377                           	opt stack 0
  1378                           
  1379                           ; 3 bytes @ 0x16
  1380  000017                     	ds	3
  1381  00001A                     ___ftmul@cntr:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x19
  1385  00001A                     	ds	1
  1386  00001B                     ___ftmul@sign:
  1387                           	opt stack 0
  1388                           
  1389                           ; 1 bytes @ 0x1A
  1390  00001B                     	ds	1
  1391  00001C                     ?___fttol:
  1392                           	opt stack 0
  1393  00001C                     ?i2_IncreaseByADay:
  1394                           	opt stack 0
  1395  00001C                     ___fttol@f1:
  1396                           	opt stack 0
  1397  00001C                     i2IncreaseByADay@dt:
  1398                           	opt stack 0
  1399                           
  1400                           ; 11 bytes @ 0x1B
  1401  00001C                     	ds	4
  1402  000020                     ??___fttol:
  1403                           
  1404                           ; 1 bytes @ 0x1F
  1405  000020                     	ds	5
  1406  000025                     ___fttol@sign1:
  1407                           	opt stack 0
  1408                           
  1409                           ; 1 bytes @ 0x24
  1410  000025                     	ds	1
  1411  000026                     ___fttol@lval:
  1412                           	opt stack 0
  1413                           
  1414                           ; 4 bytes @ 0x25
  1415  000026                     	ds	1
  1416  000027                     ??i2_IncreaseByADay:
  1417                           
  1418                           ; 1 bytes @ 0x26
  1419  000027                     	ds	2
  1420  000029                     i2IncreaseByADay@MonthDays:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x28
  1424  000029                     	ds	1
  1425  00002A                     ?_IncreaseByASecond:
  1426                           	opt stack 0
  1427  00002A                     ___fttol@exp1:
  1428                           	opt stack 0
  1429  00002A                     IncreaseByASecond@dt:
  1430                           	opt stack 0
  1431                           
  1432                           ; 11 bytes @ 0x29
  1433  00002A                     	ds	11
  1434  000035                     ??_Timer0_10ms:
  1435  000035                     
  1436                           ; 1 bytes @ 0x34
  1437  000035                     	ds	5
  1438  00003A                     Timer0_10ms@ThisCycle_2906:
  1439                           	opt stack 0
  1440                           
  1441                           ; 1 bytes @ 0x39
  1442  00003A                     	ds	1
  1443  00003B                     Timer0_10ms@i:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x3A
  1447  00003B                     	ds	1
  1448  00003C                     Timer0_10ms@OutForThePorts:
  1449                           	opt stack 0
  1450                           
  1451                           ; 2 bytes @ 0x3B
  1452  00003C                     	ds	2
  1453  00003E                     Timer0_10ms@ThisCycle:
  1454                           	opt stack 0
  1455                           
  1456                           ; 1 bytes @ 0x3D
  1457  00003E                     	ds	1
  1458  00003F                     Timer0_10ms@i_2900:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x3E
  1462  00003F                     	ds	1
  1463  000040                     Timer0_10ms@i_2901:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x3F
  1467  000040                     	ds	1
  1468  000041                     Timer0_10ms@i_2902:
  1469                           	opt stack 0
  1470                           
  1471                           ; 1 bytes @ 0x40
  1472  000041                     	ds	1
  1473  000042                     ??_INTERRUPT_InterruptManager:
  1474                           
  1475                           ; 1 bytes @ 0x41
  1476  000042                     	ds	10
  1477                           tosu	equ	0xFFF
  1478                           tosh	equ	0xFFE
  1479                           tosl	equ	0xFFD
  1480                           pclath	equ	0xFFA
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           prodh	equ	0xFF4
  1486                           prodl	equ	0xFF3
  1487                           intcon	equ	0xFF2
  1488                           postinc0	equ	0xFEE
  1489                           plusw0	equ	0xFEB
  1490                           wreg	equ	0xFE8
  1491                           indf1	equ	0xFE7
  1492                           postinc1	equ	0xFE6
  1493                           postdec1	equ	0xFE5
  1494                           plusw1	equ	0xFE3
  1495                           fsr1h	equ	0xFE2
  1496                           fsr1l	equ	0xFE1
  1497                           indf2	equ	0xFDF
  1498                           postinc2	equ	0xFDE
  1499                           postdec2	equ	0xFDD
  1500                           plusw2	equ	0xFDB
  1501                           fsr2h	equ	0xFDA
  1502                           fsr2l	equ	0xFD9
  1503                           status	equ	0xFD8
  1504                           
  1505 ;;
  1506 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1507 ;;
  1508 ;; *************** function _main *****************
  1509 ;; Defined at:
  1510 ;;		line 53 in file "main.c"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;		None
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 3F/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1528 ;;Total ram usage:        0 bytes
  1529 ;; Hardware stack levels required when called:   16
  1530 ;; This function calls:
  1531 ;;		_GetEventNumber
  1532 ;;		_Lcd_Init
  1533 ;;		_Lcd_WriteChar
  1534 ;;		_LoadAllFromEeprom
  1535 ;;		_ReadGPS
  1536 ;;		_ReadGPS_DATE_TIME
  1537 ;;		_SYSTEM_Initialize
  1538 ;;		_StopGPS
  1539 ;;		_SwitchOnGPS
  1540 ;;		_TMR0_SetInterruptHandler
  1541 ;;		_TestGPSStartCondition
  1542 ;;		_VerifyForGPSOnTIme
  1543 ;;		_WriteLongInt
  1544 ;; This function is called by:
  1545 ;;		Startup code after reset
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text0
  1550  001DD2                     __ptext0:
  1551                           	opt stack 0
  1552  001DD2                     _main:
  1553                           	opt stack 15
  1554                           
  1555                           ;main.c: 56: SYSTEM_Initialize();
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;incstack = 0
  1559  001DD2  ECD3  F018         	call	_SYSTEM_Initialize	;wreg free
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;main.c: 87: (INTCONbits.GIE = 1);
  1563  001DD6  8EF2               	bsf	intcon,7,c	;volatile
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 88: (INTCONbits.PEIE = 1);
  1567  001DD8  8CF2               	bsf	intcon,6,c	;volatile
  1568                           
  1569                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  1570  001DDA  0E0A               	movlw	low _Timer0_10ms
  1571  001DDC  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1572  001DDE  0E0F               	movlw	high _Timer0_10ms
  1573  001DE0  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1574  001DE2  EC0B  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 94: LoadAllFromEeprom();
  1578  001DE6  EC03  F019         	call	_LoadAllFromEeprom	;wreg free
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;main.c: 96: Lcd_Init();
  1582  001DEA  ECD0  F014         	call	_Lcd_Init	;wreg free
  1583                           
  1584                           ;main.c: 106: if (GPS_SYNC_AT_START == 1)
  1585  001DEE  0100               	movlb	0	; () banked
  1586  001DF0  05E5               	decf	_GPS_SYNC_AT_START& (0+255),w,b
  1587  001DF2  E101               	bnz	l1022
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 107: FLAGS_0.bits.b0 = SET;
  1591  001DF4  81E2               	bsf	_FLAGS_0& (0+255),0,b
  1592  001DF6                     l1022:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 108: LATCbits.LC0 = OFF;
  1596  001DF6  9085               	bcf	3973,0,c	;volatile
  1597  001DF8                     l1023:
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;main.c: 112: {
  1601                           ;main.c: 114: if (FLAGS_0.bits.b0) SwitchOnGPS();
  1602  001DF8  B1E2               	btfsc	_FLAGS_0& (0+255),0,b
  1603                           
  1604                           ; BSR set to: 0
  1605  001DFA  EC97  F018         	call	_SwitchOnGPS	;wreg free
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 115: if (FLAGS_0.bits.b1) VerifyForGPSOnTIme();
  1609  001DFE  B3E2               	btfsc	_FLAGS_0& (0+255),1,b
  1610                           
  1611                           ; BSR set to: 0
  1612  001E00  EC4C  F017         	call	_VerifyForGPSOnTIme	;wreg free
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 116: if (FLAGS_0.bits.b2) ReadGPS();
  1616  001E04  B5E2               	btfsc	_FLAGS_0& (0+255),2,b
  1617                           
  1618                           ; BSR set to: 0
  1619  001E06  ECEC  F015         	call	_ReadGPS	;wreg free
  1620                           
  1621                           ; BSR set to: 0
  1622                           ;main.c: 117: if (FLAGS_0.bits.b3) StopGPS();
  1623  001E0A  B7E2               	btfsc	_FLAGS_0& (0+255),3,b
  1624                           
  1625                           ; BSR set to: 0
  1626  001E0C  EC14  F019         	call	_StopGPS	;wreg free
  1627                           
  1628                           ; BSR set to: 0
  1629                           ;main.c: 118: TestGPSStartCondition();
  1630  001E10  ECCD  F017         	call	_TestGPSStartCondition	;wreg free
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;main.c: 119: NEXT_EVENT = GetEventNumber();
  1634  001E14  EC39  F00D         	call	_GetEventNumber	;wreg free
  1635  001E18  6FF9               	movwf	_NEXT_EVENT& (0+255),b
  1636                           
  1637                           ; BSR set to: 0
  1638                           ;main.c: 159: ReadGPS_DATE_TIME();
  1639  001E1A  EC26  F00A         	call	_ReadGPS_DATE_TIME	;wreg free
  1640                           
  1641                           ; BSR set to: 0
  1642                           ;main.c: 160: Lcd_WriteChar(1,1,0x54);
  1643  001E1E  0E01               	movlw	1
  1644  001E20  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  1645  001E22  0E54               	movlw	84
  1646  001E24  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1647  001E26  0E01               	movlw	1
  1648  001E28  EC6F  F017         	call	_Lcd_WriteChar
  1649                           
  1650                           ;main.c: 161: WriteLongInt(1, 2, DATE_TIME.SECOND, 6, 0);
  1651  001E2C  0E02               	movlw	2
  1652  001E2E  0100               	movlb	0	; () banked
  1653  001E30  6F72               	movwf	WriteLongInt@x& (0+255),b
  1654  001E32  C0B9  F073         	movff	_DATE_TIME,WriteLongInt@Val
  1655  001E36  C0BA  F074         	movff	_DATE_TIME+1,WriteLongInt@Val+1
  1656  001E3A  C0BB  F075         	movff	_DATE_TIME+2,WriteLongInt@Val+2
  1657  001E3E  C0BC  F076         	movff	_DATE_TIME+3,WriteLongInt@Val+3
  1658  001E42  D846               	call	PL150	;call to abstracted procedure
  1659  001E44  EC66  F013         	call	_WriteLongInt
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;main.c: 162: Lcd_WriteChar(1,9,0x53);
  1663  001E48  0E09               	movlw	9
  1664  001E4A  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  1665  001E4C  0E53               	movlw	83
  1666  001E4E  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1667  001E50  0E01               	movlw	1
  1668  001E52  EC6F  F017         	call	_Lcd_WriteChar
  1669                           
  1670                           ;main.c: 163: WriteLongInt(1, 10, TIME_AT_LAST_GPS_SYNC, 6, 0);
  1671  001E56  0E0A               	movlw	10
  1672  001E58  0100               	movlb	0	; () banked
  1673  001E5A  6F72               	movwf	WriteLongInt@x& (0+255),b
  1674  001E5C  C0C4  F073         	movff	_TIME_AT_LAST_GPS_SYNC,WriteLongInt@Val
  1675  001E60  C0C5  F074         	movff	_TIME_AT_LAST_GPS_SYNC+1,WriteLongInt@Val+1
  1676  001E64  C0C6  F075         	movff	_TIME_AT_LAST_GPS_SYNC+2,WriteLongInt@Val+2
  1677  001E68  C0C7  F076         	movff	_TIME_AT_LAST_GPS_SYNC+3,WriteLongInt@Val+3
  1678  001E6C  D831               	call	PL150	;call to abstracted procedure
  1679  001E6E  EC66  F013         	call	_WriteLongInt
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;main.c: 164: Lcd_WriteChar(2,1,0x47);
  1683  001E72  0E01               	movlw	1
  1684  001E74  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  1685  001E76  0E47               	movlw	71
  1686  001E78  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1687  001E7A  0E02               	movlw	2
  1688  001E7C  EC6F  F017         	call	_Lcd_WriteChar
  1689                           
  1690                           ;main.c: 165: WriteLongInt(2, 2, GPS_DATE_TIME.SECOND, 6, 0);
  1691  001E80  0E02               	movlw	2
  1692  001E82  0100               	movlb	0	; () banked
  1693  001E84  6F72               	movwf	WriteLongInt@x& (0+255),b
  1694  001E86  C0AE  F073         	movff	_GPS_DATE_TIME,WriteLongInt@Val
  1695  001E8A  C0AF  F074         	movff	_GPS_DATE_TIME+1,WriteLongInt@Val+1
  1696  001E8E  C0B0  F075         	movff	_GPS_DATE_TIME+2,WriteLongInt@Val+2
  1697  001E92  C0B1  F076         	movff	_GPS_DATE_TIME+3,WriteLongInt@Val+3
  1698  001E96  D818               	call	PL142	;call to abstracted procedure
  1699  001E98  EC66  F013         	call	_WriteLongInt
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;main.c: 166: Lcd_WriteChar(2,9,'I');
  1703  001E9C  0E09               	movlw	9
  1704  001E9E  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  1705  001EA0  0E49               	movlw	73
  1706  001EA2  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1707  001EA4  0E02               	movlw	2
  1708  001EA6  EC6F  F017         	call	_Lcd_WriteChar
  1709                           
  1710                           ;main.c: 167: WriteLongInt(2, 10, TIME_WHEN_GPS_IS_SWITCHED_ON, 6, 0);
  1711  001EAA  0E0A               	movlw	10
  1712  001EAC  0100               	movlb	0	; () banked
  1713  001EAE  6F72               	movwf	WriteLongInt@x& (0+255),b
  1714  001EB0  C0C8  F073         	movff	_TIME_WHEN_GPS_IS_SWITCHED_ON,WriteLongInt@Val
  1715  001EB4  C0C9  F074         	movff	_TIME_WHEN_GPS_IS_SWITCHED_ON+1,WriteLongInt@Val+1
  1716  001EB8  C0CA  F075         	movff	_TIME_WHEN_GPS_IS_SWITCHED_ON+2,WriteLongInt@Val+2
  1717  001EBC  C0CB  F076         	movff	_TIME_WHEN_GPS_IS_SWITCHED_ON+3,WriteLongInt@Val+3
  1718  001EC0  D803               	call	PL142	;call to abstracted procedure
  1719  001EC2  EC66  F013         	call	_WriteLongInt
  1720  001EC6  D798               	goto	l1023
  1721  001EC8                     __end_of_main:
  1722                           	opt stack 0
  1723  001EC8                     PL142:
  1724                           	opt stack 15
  1725  001EC8  0E06               	movlw	6
  1726  001ECA  6F77               	movwf	WriteLongInt@size& (0+255),b
  1727  001ECC  6B78               	clrf	WriteLongInt@Sign& (0+255),b
  1728  001ECE  0C02               	retlw	2
  1729  001ED0                     __end_ofPL142:
  1730                           	opt stack 0
  1731  001ED0                     PL150:
  1732                           	opt stack 15
  1733  001ED0  0E06               	movlw	6
  1734  001ED2  6F77               	movwf	WriteLongInt@size& (0+255),b
  1735  001ED4  6B78               	clrf	WriteLongInt@Sign& (0+255),b
  1736  001ED6  0C01               	retlw	1
  1737  001ED8                     __end_ofPL150:
  1738                           	opt stack 0
  1739                           tosu	equ	0xFFF
  1740                           tosh	equ	0xFFE
  1741                           tosl	equ	0xFFD
  1742                           pclath	equ	0xFFA
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           prodh	equ	0xFF4
  1748                           prodl	equ	0xFF3
  1749                           intcon	equ	0xFF2
  1750                           postinc0	equ	0xFEE
  1751                           plusw0	equ	0xFEB
  1752                           wreg	equ	0xFE8
  1753                           indf1	equ	0xFE7
  1754                           postinc1	equ	0xFE6
  1755                           postdec1	equ	0xFE5
  1756                           plusw1	equ	0xFE3
  1757                           fsr1h	equ	0xFE2
  1758                           fsr1l	equ	0xFE1
  1759                           indf2	equ	0xFDF
  1760                           postinc2	equ	0xFDE
  1761                           postdec2	equ	0xFDD
  1762                           plusw2	equ	0xFDB
  1763                           fsr2h	equ	0xFDA
  1764                           fsr2l	equ	0xFD9
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _WriteLongInt *****************
  1768 ;; Defined at:
  1769 ;;		line 183 in file "libs/HD44780.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  y               1    wreg     unsigned char 
  1772 ;;  x               1   18[BANK0 ] unsigned char 
  1773 ;;  Val             4   19[BANK0 ] long 
  1774 ;;  size            1   23[BANK0 ] char 
  1775 ;;  Sign            1   24[BANK0 ] unsigned char 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  y               1   26[BANK0 ] unsigned char 
  1778 ;;  POS             1   25[BANK0 ] char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 3F/0
  1785 ;;		On exit  : 3F/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1788 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1789 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1791 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1792 ;;Total ram usage:        9 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:   12
  1795 ;; This function calls:
  1796 ;;		_Lcd_WriteChar
  1797 ;;		___aldiv
  1798 ;;		___lmul
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text1
  1805  0026CC                     __ptext1:
  1806                           	opt stack 0
  1807  0026CC                     _WriteLongInt:
  1808                           	opt stack 18
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;incstack = 0
  1812                           ;WriteLongInt@y stored from wreg
  1813  0026CC  6F7A               	movwf	WriteLongInt@y& (0+255),b
  1814                           
  1815                           ;HD44780.c: 184: int8_t POS = 0;
  1816  0026CE  0100               	movlb	0	; () banked
  1817  0026D0  6B79               	clrf	WriteLongInt@POS& (0+255),b
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;HD44780.c: 185: if (Sign) {
  1821  0026D2  5178               	movf	WriteLongInt@Sign& (0+255),w,b
  1822  0026D4  E049               	bz	l4697
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;HD44780.c: 186: POS++;
  1826  0026D6  2B79               	incf	WriteLongInt@POS& (0+255),f,b
  1827                           
  1828                           ; BSR set to: 0
  1829                           ;HD44780.c: 187: if (Val<0) {
  1830  0026D8  AF76               	btfss	(WriteLongInt@Val+3)& (0+255),7,b
  1831  0026DA  D01F               	goto	l4689
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  1835  0026DC  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  1836  0026E0  0E2D               	movlw	45
  1837  0026E2  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1838  0026E4  517A               	movf	WriteLongInt@y& (0+255),w,b
  1839  0026E6  EC6F  F017         	call	_Lcd_WriteChar
  1840                           
  1841                           ;HD44780.c: 189: Val=-1*Val;
  1842  0026EA  C073  F060         	movff	WriteLongInt@Val,___lmul@multiplier
  1843  0026EE  C074  F061         	movff	WriteLongInt@Val+1,___lmul@multiplier+1
  1844  0026F2  C075  F062         	movff	WriteLongInt@Val+2,___lmul@multiplier+2
  1845  0026F6  C076  F063         	movff	WriteLongInt@Val+3,___lmul@multiplier+3
  1846  0026FA  0100               	movlb	0	; () banked
  1847  0026FC  6964               	setf	___lmul@multiplicand& (0+255),b
  1848  0026FE  6965               	setf	(___lmul@multiplicand+1)& (0+255),b
  1849  002700  6966               	setf	(___lmul@multiplicand+2)& (0+255),b
  1850  002702  6967               	setf	(___lmul@multiplicand+3)& (0+255),b
  1851  002704  ECDC  F016         	call	___lmul	;wreg free
  1852  002708  C060  F073         	movff	?___lmul,WriteLongInt@Val
  1853  00270C  C061  F074         	movff	?___lmul+1,WriteLongInt@Val+1
  1854  002710  C062  F075         	movff	?___lmul+2,WriteLongInt@Val+2
  1855  002714  C063  F076         	movff	?___lmul+3,WriteLongInt@Val+3
  1856                           
  1857                           ;HD44780.c: 190: } else
  1858  002718  D027               	goto	l4697
  1859  00271A                     l4689:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  1863  00271A  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  1864  00271E  0E2B               	movlw	43
  1865  002720  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1866  002722  517A               	movf	WriteLongInt@y& (0+255),w,b
  1867  002724  EC6F  F017         	call	_Lcd_WriteChar
  1868  002728  D01F               	goto	l4697
  1869  00272A                     l4691:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;HD44780.c: 194: size--;
  1873  00272A  0777               	decf	WriteLongInt@size& (0+255),f,b
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  1877  00272C  5177               	movf	WriteLongInt@size& (0+255),w,b
  1878  00272E  2579               	addwf	WriteLongInt@POS& (0+255),w,b
  1879  002730  2572               	addwf	WriteLongInt@x& (0+255),w,b
  1880  002732  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  1881  002734  D81D               	call	PL78	;call to abstracted procedure
  1882  002736  D825               	call	PL132	;call to abstracted procedure
  1883  002738  ECC6  F013         	call	___aldiv	;wreg free
  1884  00273C  5160               	movf	?___aldiv& (0+255),w,b
  1885  00273E  0DF6               	mullw	246
  1886  002740  50F3               	movf	prodl,w,c
  1887  002742  2573               	addwf	WriteLongInt@Val& (0+255),w,b
  1888  002744  0F30               	addlw	48
  1889  002746  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  1890  002748  517A               	movf	WriteLongInt@y& (0+255),w,b
  1891  00274A  EC6F  F017         	call	_Lcd_WriteChar
  1892                           
  1893                           ;HD44780.c: 196: Val = Val/10;
  1894  00274E  D810               	call	PL78	;call to abstracted procedure
  1895  002750  0100               	movlb	0	; () banked
  1896  002752  D817               	call	PL132	;call to abstracted procedure
  1897  002754  ECC6  F013         	call	___aldiv	;wreg free
  1898  002758  C060  F073         	movff	?___aldiv,WriteLongInt@Val
  1899  00275C  C061  F074         	movff	?___aldiv+1,WriteLongInt@Val+1
  1900  002760  C062  F075         	movff	?___aldiv+2,WriteLongInt@Val+2
  1901  002764  C063  F076         	movff	?___aldiv+3,WriteLongInt@Val+3
  1902  002768                     l4697:
  1903  002768  0100               	movlb	0	; () banked
  1904  00276A  5177               	movf	WriteLongInt@size& (0+255),w,b
  1905  00276C  E1DE               	bnz	l4691
  1906                           
  1907                           ; BSR set to: 0
  1908  00276E  0012               	return		;funcret
  1909  002770                     __end_of_WriteLongInt:
  1910                           	opt stack 0
  1911  002770                     PL78:
  1912                           	opt stack 18
  1913  002770  C073  F060         	movff	WriteLongInt@Val,___aldiv@dividend
  1914  002774  C074  F061         	movff	WriteLongInt@Val+1,___aldiv@dividend+1
  1915  002778  C075  F062         	movff	WriteLongInt@Val+2,___aldiv@dividend+2
  1916  00277C  C076  F063         	movff	WriteLongInt@Val+3,___aldiv@dividend+3
  1917  002780  0C0A               	retlw	10
  1918  002782                     __end_ofPL78:
  1919                           	opt stack 0
  1920  002782                     PL132:
  1921                           	opt stack 18
  1922  002782  6F64               	movwf	___aldiv@divisor& (0+255),b
  1923  002784  6B65               	clrf	(___aldiv@divisor+1)& (0+255),b
  1924  002786  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  1925  002788  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  1926  00278A  0012               	return	
  1927  00278C                     __end_ofPL132:
  1928                           	opt stack 0
  1929                           tosu	equ	0xFFF
  1930                           tosh	equ	0xFFE
  1931                           tosl	equ	0xFFD
  1932                           pclath	equ	0xFFA
  1933                           tblptru	equ	0xFF8
  1934                           tblptrh	equ	0xFF7
  1935                           tblptrl	equ	0xFF6
  1936                           tablat	equ	0xFF5
  1937                           prodh	equ	0xFF4
  1938                           prodl	equ	0xFF3
  1939                           intcon	equ	0xFF2
  1940                           postinc0	equ	0xFEE
  1941                           plusw0	equ	0xFEB
  1942                           wreg	equ	0xFE8
  1943                           indf1	equ	0xFE7
  1944                           postinc1	equ	0xFE6
  1945                           postdec1	equ	0xFE5
  1946                           plusw1	equ	0xFE3
  1947                           fsr1h	equ	0xFE2
  1948                           fsr1l	equ	0xFE1
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           plusw2	equ	0xFDB
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function ___aldiv *****************
  1958 ;; Defined at:
  1959 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;  dividend        4    0[BANK0 ] long 
  1962 ;;  divisor         4    4[BANK0 ] long 
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;  quotient        4   10[BANK0 ] long 
  1965 ;;  sign            1    9[BANK0 ] unsigned char 
  1966 ;;  counter         1    8[BANK0 ] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  4    0[BANK0 ] long 
  1969 ;; Registers used:
  1970 ;;		wreg, status,2, status,0
  1971 ;; Tracked objects:
  1972 ;;		On entry : 3F/0
  1973 ;;		On exit  : 3F/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1976 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1977 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1979 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1980 ;;Total ram usage:       14 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    9
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_WriteLongInt
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text2
  1991  00278C                     __ptext2:
  1992                           	opt stack 0
  1993  00278C                     ___aldiv:
  1994                           	opt stack 20
  1995                           
  1996                           ; BSR set to: 0
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;incstack = 0
  2000  00278C  6B69               	clrf	___aldiv@sign& (0+255),b
  2001                           
  2002                           ; BSR set to: 0
  2003  00278E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2004  002790  D00A               	goto	l4583
  2005                           
  2006                           ; BSR set to: 0
  2007  002792  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  2008  002794  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  2009  002796  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  2010  002798  6D64               	negf	___aldiv@divisor& (0+255),b
  2011  00279A  0E00               	movlw	0
  2012  00279C  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  2013  00279E  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  2014  0027A0  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  2015                           
  2016                           ; BSR set to: 0
  2017  0027A2  0E01               	movlw	1
  2018  0027A4  6F69               	movwf	___aldiv@sign& (0+255),b
  2019  0027A6                     l4583:
  2020                           
  2021                           ; BSR set to: 0
  2022  0027A6  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  2023  0027A8  D00A               	goto	l4589
  2024                           
  2025                           ; BSR set to: 0
  2026  0027AA  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  2027  0027AC  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  2028  0027AE  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  2029  0027B0  6D60               	negf	___aldiv@dividend& (0+255),b
  2030  0027B2  0E00               	movlw	0
  2031  0027B4  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  2032  0027B6  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  2033  0027B8  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  2034                           
  2035                           ; BSR set to: 0
  2036  0027BA  0E01               	movlw	1
  2037  0027BC  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  2038  0027BE                     l4589:
  2039                           
  2040                           ; BSR set to: 0
  2041  0027BE  6B6A               	clrf	___aldiv@quotient& (0+255),b
  2042  0027C0  6B6B               	clrf	(___aldiv@quotient+1)& (0+255),b
  2043  0027C2  6B6C               	clrf	(___aldiv@quotient+2)& (0+255),b
  2044  0027C4  6B6D               	clrf	(___aldiv@quotient+3)& (0+255),b
  2045                           
  2046                           ; BSR set to: 0
  2047  0027C6  5164               	movf	___aldiv@divisor& (0+255),w,b
  2048  0027C8  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2049  0027CA  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2050  0027CC  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  2051  0027CE  E029               	bz	l4611
  2052                           
  2053                           ; BSR set to: 0
  2054  0027D0  0E01               	movlw	1
  2055  0027D2  6F68               	movwf	___aldiv@counter& (0+255),b
  2056  0027D4  D006               	goto	l4597
  2057  0027D6                     l4595:
  2058                           
  2059                           ; BSR set to: 0
  2060  0027D6  90D8               	bcf	status,0,c
  2061  0027D8  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  2062  0027DA  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2063  0027DC  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2064  0027DE  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2065  0027E0  2B68               	incf	___aldiv@counter& (0+255),f,b
  2066  0027E2                     l4597:
  2067                           
  2068                           ; BSR set to: 0
  2069  0027E2  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2070  0027E4  D7F8               	goto	l4595
  2071  0027E6                     l4599:
  2072                           
  2073                           ; BSR set to: 0
  2074  0027E6  90D8               	bcf	status,0,c
  2075  0027E8  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  2076  0027EA  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2077  0027EC  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2078  0027EE  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2079                           
  2080                           ; BSR set to: 0
  2081  0027F0  5164               	movf	___aldiv@divisor& (0+255),w,b
  2082  0027F2  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  2083  0027F4  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2084  0027F6  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2085  0027F8  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2086  0027FA  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2087  0027FC  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2088  0027FE  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2089  002800  E309               	bnc	l4607
  2090                           
  2091                           ; BSR set to: 0
  2092  002802  5164               	movf	___aldiv@divisor& (0+255),w,b
  2093  002804  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  2094  002806  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2095  002808  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2096  00280A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2097  00280C  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2098  00280E  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2099  002810  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2100                           
  2101                           ; BSR set to: 0
  2102  002812  816A               	bsf	___aldiv@quotient& (0+255),0,b
  2103  002814                     l4607:
  2104                           
  2105                           ; BSR set to: 0
  2106  002814  90D8               	bcf	status,0,c
  2107  002816  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2108  002818  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2109  00281A  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2110  00281C  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  2111                           
  2112                           ; BSR set to: 0
  2113  00281E  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  2114  002820  D7E2               	goto	l4599
  2115  002822                     l4611:
  2116                           
  2117                           ; BSR set to: 0
  2118  002822  5169               	movf	___aldiv@sign& (0+255),w,b
  2119  002824  E008               	bz	l4615
  2120                           
  2121                           ; BSR set to: 0
  2122  002826  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2123  002828  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2124  00282A  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2125  00282C  6D6A               	negf	___aldiv@quotient& (0+255),b
  2126  00282E  0E00               	movlw	0
  2127  002830  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2128  002832  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2129  002834  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2130  002836                     l4615:
  2131                           
  2132                           ; BSR set to: 0
  2133  002836  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  2134  00283A  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  2135  00283E  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  2136  002842  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  2137                           
  2138                           ; BSR set to: 0
  2139  002846  0012               	return		;funcret
  2140  002848                     __end_of___aldiv:
  2141                           	opt stack 0
  2142                           tosu	equ	0xFFF
  2143                           tosh	equ	0xFFE
  2144                           tosl	equ	0xFFD
  2145                           pclath	equ	0xFFA
  2146                           tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           prodh	equ	0xFF4
  2151                           prodl	equ	0xFF3
  2152                           intcon	equ	0xFF2
  2153                           postinc0	equ	0xFEE
  2154                           plusw0	equ	0xFEB
  2155                           wreg	equ	0xFE8
  2156                           indf1	equ	0xFE7
  2157                           postinc1	equ	0xFE6
  2158                           postdec1	equ	0xFE5
  2159                           plusw1	equ	0xFE3
  2160                           fsr1h	equ	0xFE2
  2161                           fsr1l	equ	0xFE1
  2162                           indf2	equ	0xFDF
  2163                           postinc2	equ	0xFDE
  2164                           postdec2	equ	0xFDD
  2165                           plusw2	equ	0xFDB
  2166                           fsr2h	equ	0xFDA
  2167                           fsr2l	equ	0xFD9
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _Lcd_WriteChar *****************
  2171 ;; Defined at:
  2172 ;;		line 99 in file "libs/HD44780.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  y               1    wreg     unsigned char 
  2175 ;;  x               1   14[BANK0 ] unsigned char 
  2176 ;;  c               1   15[BANK0 ] unsigned char 
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;  y               1   16[BANK0 ] unsigned char 
  2179 ;;  data            1   17[BANK0 ] unsigned char 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2, status,0, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 3F/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2189 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2190 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2192 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2193 ;;Total ram usage:        4 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:   11
  2196 ;; This function calls:
  2197 ;;		_Lcd_CharCP
  2198 ;;		_Lcd_Command
  2199 ;; This function is called by:
  2200 ;;		_WriteLongInt
  2201 ;;		_main
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205                           	psect	text3
  2206  002EDE                     __ptext3:
  2207                           	opt stack 0
  2208  002EDE                     _Lcd_WriteChar:
  2209                           	opt stack 18
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;incstack = 0
  2213                           ;Lcd_WriteChar@y stored from wreg
  2214  002EDE  6F70               	movwf	Lcd_WriteChar@y& (0+255),b
  2215                           
  2216                           ;HD44780.c: 100: unsigned char data;
  2217                           ;HD44780.c: 101: switch(y) {
  2218  002EE0  D00D               	goto	l4225
  2219  002EE2                     l4215:
  2220                           
  2221                           ; BSR set to: 0
  2222  002EE2  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  2223  002EE4  0F7F               	addlw	127
  2224  002EE6  D008               	goto	L3
  2225  002EE8                     l4217:
  2226                           
  2227                           ; BSR set to: 0
  2228  002EE8  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  2229  002EEA  0FBF               	addlw	191
  2230  002EEC  D005               	goto	L3
  2231  002EEE                     l4219:
  2232                           
  2233                           ; BSR set to: 0
  2234  002EEE  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  2235  002EF0  0F93               	addlw	147
  2236  002EF2  D002               	goto	L3
  2237  002EF4                     l4221:
  2238                           
  2239                           ; BSR set to: 0
  2240  002EF4  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  2241  002EF6  0FD3               	addlw	211
  2242  002EF8                     L3:
  2243  002EF8  6F71               	movwf	Lcd_WriteChar@data& (0+255),b
  2244  002EFA  D00A               	goto	l4227
  2245  002EFC                     l4225:
  2246  002EFC  0100               	movlb	0	; () banked
  2247  002EFE  5170               	movf	Lcd_WriteChar@y& (0+255),w,b
  2248                           
  2249                           ; Switch size 1, requested type "space"
  2250                           ; Number of cases is 4, Range of values is 1 to 4
  2251                           ; switch strategies available:
  2252                           ; Name         Instructions Cycles
  2253                           ; simple_byte           13     7 (average)
  2254                           ;	Chosen strategy is simple_byte
  2255  002F00  0A01               	xorlw	1	; case 1
  2256  002F02  E0EF               	bz	l4215
  2257  002F04  0A03               	xorlw	3	; case 2
  2258  002F06  E0F0               	bz	l4217
  2259  002F08  0A01               	xorlw	1	; case 3
  2260  002F0A  E0F1               	bz	l4219
  2261  002F0C  0A07               	xorlw	7	; case 4
  2262  002F0E  E0F2               	bz	l4221
  2263  002F10                     l4227:
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;HD44780.c: 108: Lcd_Command(data);
  2267  002F10  5171               	movf	Lcd_WriteChar@data& (0+255),w,b
  2268  002F12  EC47  F011         	call	_Lcd_Command
  2269                           
  2270                           ;HD44780.c: 109: Lcd_CharCP(c);
  2271  002F16  0100               	movlb	0	; () banked
  2272  002F18  516F               	movf	Lcd_WriteChar@c& (0+255),w,b
  2273  002F1A  EF2A  F012         	goto	_Lcd_CharCP
  2274  002F1E                     __end_of_Lcd_WriteChar:
  2275                           	opt stack 0
  2276                           tosu	equ	0xFFF
  2277                           tosh	equ	0xFFE
  2278                           tosl	equ	0xFFD
  2279                           pclath	equ	0xFFA
  2280                           tblptru	equ	0xFF8
  2281                           tblptrh	equ	0xFF7
  2282                           tblptrl	equ	0xFF6
  2283                           tablat	equ	0xFF5
  2284                           prodh	equ	0xFF4
  2285                           prodl	equ	0xFF3
  2286                           intcon	equ	0xFF2
  2287                           postinc0	equ	0xFEE
  2288                           plusw0	equ	0xFEB
  2289                           wreg	equ	0xFE8
  2290                           indf1	equ	0xFE7
  2291                           postinc1	equ	0xFE6
  2292                           postdec1	equ	0xFE5
  2293                           plusw1	equ	0xFE3
  2294                           fsr1h	equ	0xFE2
  2295                           fsr1l	equ	0xFE1
  2296                           indf2	equ	0xFDF
  2297                           postinc2	equ	0xFDE
  2298                           postdec2	equ	0xFDD
  2299                           plusw2	equ	0xFDB
  2300                           fsr2h	equ	0xFDA
  2301                           fsr2l	equ	0xFD9
  2302                           status	equ	0xFD8
  2303                           
  2304 ;; *************** function _Lcd_CharCP *****************
  2305 ;; Defined at:
  2306 ;;		line 116 in file "libs/HD44780.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  c               1    wreg     unsigned char 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  c               1    2[BANK0 ] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 3F/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2324 ;;Total ram usage:        3 bytes
  2325 ;; Hardware stack levels used:    1
  2326 ;; Hardware stack levels required when called:   10
  2327 ;; This function calls:
  2328 ;;		_Lcd_Delay5us
  2329 ;; This function is called by:
  2330 ;;		_Lcd_WriteChar
  2331 ;; This function uses a non-reentrant model
  2332 ;;
  2333                           
  2334                           	psect	text4
  2335  002454                     __ptext4:
  2336                           	opt stack 0
  2337  002454                     _Lcd_CharCP:
  2338                           	opt stack 18
  2339                           
  2340                           ;incstack = 0
  2341                           ;Lcd_CharCP@c stored from wreg
  2342  002454  6F62               	movwf	Lcd_CharCP@c& (0+255),b
  2343                           
  2344                           ;HD44780.c: 117: LATAbits.LA1 = 0; LATAbits.LA0 = 1;
  2345  002456  9283               	bcf	3971,1,c	;volatile
  2346  002458  8083               	bsf	3971,0,c	;volatile
  2347                           
  2348                           ;HD44780.c: 118: LATAbits.LA5 = (c & 0b10000000)>>7; LATAbits.LA4 = (c & 0b01000000)>>6;
  2349  00245A  0100               	movlb	0	; () banked
  2350  00245C  6B60               	clrf	??_Lcd_CharCP& (0+255),b
  2351  00245E  AF62               	btfss	Lcd_CharCP@c& (0+255),7,b
  2352  002460  D001               	bra	u3555
  2353  002462  2B60               	incf	??_Lcd_CharCP& (0+255),f,b
  2354  002464                     u3555:
  2355  002464  D835               	call	PL48	;call to abstracted procedure
  2356  002466  0E06               	movlw	6
  2357  002468  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  2358  00246A                     u3565:
  2359  00246A  90D8               	bcf	status,0,c
  2360  00246C  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  2361  00246E  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  2362  002470  D7FC               	goto	u3565
  2363                           
  2364                           ;HD44780.c: 119: LATAbits.LA3 = (c & 0b00100000)>>5; LATAbits.LA2 = (c & 0b00010000)>>4;
  2365  002472  D846               	call	PL56	;call to abstracted procedure
  2366  002474  0E05               	movlw	5
  2367  002476  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  2368  002478                     u3575:
  2369  002478  90D8               	bcf	status,0,c
  2370  00247A  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  2371  00247C  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  2372  00247E  D7FC               	goto	u3575
  2373  002480  0E01               	movlw	1
  2374  002482  D832               	call	PL50	;call to abstracted procedure
  2375  002484  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  2376  002486  0E0F               	movlw	15
  2377  002488  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  2378  00248A  0E01               	movlw	1
  2379  00248C  D844               	call	PL84	;call to abstracted procedure
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;HD44780.c: 120: _delay(10);
  2383  00248E  0E03               	movlw	3
  2384  002490                     u4977:
  2385  002490  2EE8               	decfsz	wreg,f,c
  2386  002492  D7FE               	bra	u4977
  2387  002494  F000               	nop	
  2388                           
  2389                           ;HD44780.c: 121: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  2390  002496  8283               	bsf	3971,1,c	;volatile
  2391  002498  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  2392  00249C  9283               	bcf	3971,1,c	;volatile
  2393                           
  2394                           ;HD44780.c: 122: LATAbits.LA5 = (c & 0b00001000)>>3; LATAbits.LA4 = (c & 0b00000100)>>2;
  2395  00249E  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  2396  0024A2  0100               	movlb	0	; () banked
  2397  0024A4  90D8               	bcf	status,0,c
  2398  0024A6  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  2399  0024A8  D83F               	call	PL102	;call to abstracted procedure
  2400                           
  2401                           ; BSR set to: 0
  2402  0024AA  D812               	call	PL48	;call to abstracted procedure
  2403  0024AC  D83D               	call	PL102	;call to abstracted procedure
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;HD44780.c: 123: LATAbits.LA3 = (c & 0b00000010)>>1; LATAbits.LA2 = (c & 0b00000001);
  2407  0024AE  D828               	call	PL56	;call to abstracted procedure
  2408  0024B0  90D8               	bcf	status,0,c
  2409  0024B2  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  2410  0024B4  0E01               	movlw	1
  2411                           
  2412                           ; BSR set to: 0
  2413  0024B6  D818               	call	PL50	;call to abstracted procedure
  2414  0024B8  0E01               	movlw	1
  2415  0024BA  D82D               	call	PL84	;call to abstracted procedure
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;HD44780.c: 124: _delay(10);
  2419  0024BC  0E03               	movlw	3
  2420  0024BE                     u4987:
  2421  0024BE  2EE8               	decfsz	wreg,f,c
  2422  0024C0  D7FE               	bra	u4987
  2423  0024C2  F000               	nop	
  2424                           
  2425                           ;HD44780.c: 125: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  2426  0024C4  8283               	bsf	3971,1,c	;volatile
  2427  0024C6  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  2428  0024CA  9283               	bcf	3971,1,c	;volatile
  2429                           
  2430                           ;HD44780.c: 126: Lcd_Delay5us();
  2431  0024CC  EF10  F019         	goto	_Lcd_Delay5us	;wreg free
  2432  0024D0                     __end_of_Lcd_CharCP:
  2433                           	opt stack 0
  2434  0024D0                     PL48:
  2435                           	opt stack 18
  2436  0024D0  0E01               	movlw	1
  2437  0024D2  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  2438  0024D4  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  2439  0024D6  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  2440  0024D8  5083               	movf	3971,w,c	;volatile
  2441  0024DA  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2442  0024DC  0BDF               	andlw	-33
  2443  0024DE  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2444  0024E0  6E83               	movwf	3971,c	;volatile
  2445  0024E2  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  2446  0024E6  0012               	return	
  2447  0024E8                     __end_ofPL48:
  2448                           	opt stack 0
  2449  0024E8                     PL50:
  2450                           	opt stack 18
  2451  0024E8  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  2452  0024EA  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  2453  0024EC  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  2454  0024EE  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  2455  0024F0  5083               	movf	3971,w,c	;volatile
  2456  0024F2  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2457  0024F4  0BF7               	andlw	-9
  2458  0024F6  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2459  0024F8  6E83               	movwf	3971,c	;volatile
  2460  0024FA  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  2461  0024FE  0012               	return	
  2462  002500                     __end_ofPL50:
  2463                           	opt stack 0
  2464  002500                     PL56:
  2465                           	opt stack 18
  2466  002500  0E01               	movlw	1
  2467  002502  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  2468  002504  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  2469  002506  5083               	movf	3971,w,c	;volatile
  2470  002508  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2471  00250A  0BEF               	andlw	-17
  2472  00250C  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2473  00250E  6E83               	movwf	3971,c	;volatile
  2474  002510  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  2475  002514  0012               	return	
  2476  002516                     __end_ofPL56:
  2477                           	opt stack 0
  2478  002516                     PL84:
  2479                           	opt stack 18
  2480  002516  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  2481  002518  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  2482  00251A  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  2483  00251C  5083               	movf	3971,w,c	;volatile
  2484  00251E  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2485  002520  0BFB               	andlw	-5
  2486  002522  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  2487  002524  6E83               	movwf	3971,c	;volatile
  2488  002526  0012               	return	
  2489  002528                     __end_ofPL84:
  2490                           	opt stack 0
  2491  002528                     PL102:
  2492                           	opt stack 18
  2493  002528  90D8               	bcf	status,0,c
  2494  00252A  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  2495  00252C  90D8               	bcf	status,0,c
  2496  00252E  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  2497  002530  0012               	return	
  2498  002532                     __end_ofPL102:
  2499                           	opt stack 0
  2500                           tosu	equ	0xFFF
  2501                           tosh	equ	0xFFE
  2502                           tosl	equ	0xFFD
  2503                           pclath	equ	0xFFA
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           prodh	equ	0xFF4
  2509                           prodl	equ	0xFF3
  2510                           intcon	equ	0xFF2
  2511                           postinc0	equ	0xFEE
  2512                           plusw0	equ	0xFEB
  2513                           wreg	equ	0xFE8
  2514                           indf1	equ	0xFE7
  2515                           postinc1	equ	0xFE6
  2516                           postdec1	equ	0xFE5
  2517                           plusw1	equ	0xFE3
  2518                           fsr1h	equ	0xFE2
  2519                           fsr1l	equ	0xFE1
  2520                           indf2	equ	0xFDF
  2521                           postinc2	equ	0xFDE
  2522                           postdec2	equ	0xFDD
  2523                           plusw2	equ	0xFDB
  2524                           fsr2h	equ	0xFDA
  2525                           fsr2l	equ	0xFD9
  2526                           status	equ	0xFD8
  2527                           
  2528 ;; *************** function _VerifyForGPSOnTIme *****************
  2529 ;; Defined at:
  2530 ;;		line 164 in file "libs/funcs.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;		None
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  TimeDiff        4    0[BANK0 ] long 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 3F/0
  2541 ;;		On exit  : 3F/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2545 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2548 ;;Total ram usage:        4 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    9
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_main
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text5
  2559  002E98                     __ptext5:
  2560                           	opt stack 0
  2561  002E98                     _VerifyForGPSOnTIme:
  2562                           	opt stack 21
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;funcs.c: 165: INT32 TimeDiff = DATE_TIME.SECOND - TIME_WHEN_GPS_IS_SWITCHED_ON;
  2566                           
  2567                           ;incstack = 0
  2568  002E98  51C8               	movf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),w,b
  2569  002E9A  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  2570  002E9C  6F60               	movwf	VerifyForGPSOnTIme@TimeDiff& (0+255),b
  2571  002E9E  51C9               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),w,b
  2572  002EA0  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  2573  002EA2  6F61               	movwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),b
  2574  002EA4  51CA               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),w,b
  2575  002EA6  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  2576  002EA8  6F62               	movwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),b
  2577  002EAA  51CB               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),w,b
  2578  002EAC  59BC               	subwfb	(_DATE_TIME+3)& (0+255),w,b
  2579  002EAE  6F63               	movwf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),b
  2580                           
  2581                           ;funcs.c: 166: if (TimeDiff<0)
  2582  002EB0  AF63               	btfss	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  2583  002EB2  D008               	goto	l676
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;funcs.c: 167: TimeDiff += 86400;
  2587  002EB4  0E80               	movlw	128
  2588  002EB6  2760               	addwf	VerifyForGPSOnTIme@TimeDiff& (0+255),f,b
  2589  002EB8  0E51               	movlw	81
  2590  002EBA  2361               	addwfc	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),f,b
  2591  002EBC  0E01               	movlw	1
  2592  002EBE  2362               	addwfc	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),f,b
  2593  002EC0  0E00               	movlw	0
  2594  002EC2  2363               	addwfc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),f,b
  2595  002EC4                     l676:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;funcs.c: 168: if (TimeDiff >= (1*60)) {
  2599  002EC4  BF63               	btfsc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  2600  002EC6  0012               	return	
  2601  002EC8  5163               	movf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),w,b
  2602  002ECA  1162               	iorwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),w,b
  2603  002ECC  1161               	iorwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),w,b
  2604  002ECE  E104               	bnz	u4740
  2605  002ED0  0E3C               	movlw	60
  2606  002ED2  5D60               	subwf	VerifyForGPSOnTIme@TimeDiff& (0+255),w,b
  2607  002ED4  A0D8               	btfss	status,0,c
  2608  002ED6  0012               	return	
  2609  002ED8                     u4740:
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;funcs.c: 169: FLAGS_0.bits.b2 = SET;
  2613  002ED8  85E2               	bsf	_FLAGS_0& (0+255),2,b
  2614                           
  2615                           ;funcs.c: 170: FLAGS_0.bits.b1 = RESET;
  2616  002EDA  93E2               	bcf	_FLAGS_0& (0+255),1,b
  2617                           
  2618                           ; BSR set to: 0
  2619  002EDC  0012               	return		;funcret
  2620  002EDE                     __end_of_VerifyForGPSOnTIme:
  2621                           	opt stack 0
  2622                           tosu	equ	0xFFF
  2623                           tosh	equ	0xFFE
  2624                           tosl	equ	0xFFD
  2625                           pclath	equ	0xFFA
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           intcon	equ	0xFF2
  2633                           postinc0	equ	0xFEE
  2634                           plusw0	equ	0xFEB
  2635                           wreg	equ	0xFE8
  2636                           indf1	equ	0xFE7
  2637                           postinc1	equ	0xFE6
  2638                           postdec1	equ	0xFE5
  2639                           plusw1	equ	0xFE3
  2640                           fsr1h	equ	0xFE2
  2641                           fsr1l	equ	0xFE1
  2642                           indf2	equ	0xFDF
  2643                           postinc2	equ	0xFDE
  2644                           postdec2	equ	0xFDD
  2645                           plusw2	equ	0xFDB
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _TestGPSStartCondition *****************
  2651 ;; Defined at:
  2652 ;;		line 204 in file "libs/funcs.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;		None
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;		None
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg, status,2, status,0
  2661 ;; Tracked objects:
  2662 ;;		On entry : 3F/0
  2663 ;;		On exit  : 3F/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2670 ;;Total ram usage:        1 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    9
  2673 ;; This function calls:
  2674 ;;		Nothing
  2675 ;; This function is called by:
  2676 ;;		_main
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text6
  2681  002F9A                     __ptext6:
  2682                           	opt stack 0
  2683  002F9A                     _TestGPSStartCondition:
  2684                           	opt stack 21
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;funcs.c: 205: if ((DATE_TIME.SECOND == GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME)
  2688                           ;funcs.c: 206: || (TIME_AT_LAST_GPS_SYNC >= GPS_SYNC_EVERY_x_SECONDS))
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;incstack = 0
  2692  002F9A  51CC               	movf	_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME& (0+255),w,b
  2693  002F9C  19B9               	xorwf	_DATE_TIME& (0+255),w,b
  2694  002F9E  E109               	bnz	u4790
  2695  002FA0  51CD               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),w,b
  2696  002FA2  19BA               	xorwf	(_DATE_TIME+1)& (0+255),w,b
  2697  002FA4  E106               	bnz	u4790
  2698  002FA6  51CE               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),w,b
  2699  002FA8  19BB               	xorwf	(_DATE_TIME+2)& (0+255),w,b
  2700  002FAA  E103               	bnz	u4790
  2701  002FAC  51CF               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),w,b
  2702  002FAE  19BC               	xorwf	(_DATE_TIME+3)& (0+255),w,b
  2703  002FB0  E00E               	bz	l694
  2704  002FB2                     u4790:
  2705                           
  2706                           ; BSR set to: 0
  2707  002FB2  51D0               	movf	_GPS_SYNC_EVERY_x_SECONDS& (0+255),w,b
  2708  002FB4  5DC4               	subwf	_TIME_AT_LAST_GPS_SYNC& (0+255),w,b
  2709  002FB6  51D1               	movf	(_GPS_SYNC_EVERY_x_SECONDS+1)& (0+255),w,b
  2710  002FB8  59C5               	subwfb	(_TIME_AT_LAST_GPS_SYNC+1)& (0+255),w,b
  2711  002FBA  51D2               	movf	(_GPS_SYNC_EVERY_x_SECONDS+2)& (0+255),w,b
  2712  002FBC  59C6               	subwfb	(_TIME_AT_LAST_GPS_SYNC+2)& (0+255),w,b
  2713  002FBE  51C7               	movf	(_TIME_AT_LAST_GPS_SYNC+3)& (0+255),w,b
  2714  002FC0  0A80               	xorlw	128
  2715  002FC2  6F60               	movwf	??_TestGPSStartCondition& (0+255),b
  2716  002FC4  51D3               	movf	(_GPS_SYNC_EVERY_x_SECONDS+3)& (0+255),w,b
  2717  002FC6  0A80               	xorlw	128
  2718  002FC8  5960               	subwfb	??_TestGPSStartCondition& (0+255),w,b
  2719  002FCA  A0D8               	btfss	status,0,c
  2720  002FCC  0012               	return	
  2721  002FCE                     l694:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;funcs.c: 207: FLAGS_0.bits.b0 = SET;
  2725  002FCE  81E2               	bsf	_FLAGS_0& (0+255),0,b
  2726                           
  2727                           ; BSR set to: 0
  2728  002FD0  0012               	return		;funcret
  2729  002FD2                     __end_of_TestGPSStartCondition:
  2730                           	opt stack 0
  2731                           tosu	equ	0xFFF
  2732                           tosh	equ	0xFFE
  2733                           tosl	equ	0xFFD
  2734                           pclath	equ	0xFFA
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           intcon	equ	0xFF2
  2742                           postinc0	equ	0xFEE
  2743                           plusw0	equ	0xFEB
  2744                           wreg	equ	0xFE8
  2745                           indf1	equ	0xFE7
  2746                           postinc1	equ	0xFE6
  2747                           postdec1	equ	0xFE5
  2748                           plusw1	equ	0xFE3
  2749                           fsr1h	equ	0xFE2
  2750                           fsr1l	equ	0xFE1
  2751                           indf2	equ	0xFDF
  2752                           postinc2	equ	0xFDE
  2753                           postdec2	equ	0xFDD
  2754                           plusw2	equ	0xFDB
  2755                           fsr2h	equ	0xFDA
  2756                           fsr2l	equ	0xFD9
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _SwitchOnGPS *****************
  2760 ;; Defined at:
  2761 ;;		line 156 in file "libs/funcs.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;		None
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  1    wreg      void 
  2768 ;; Registers used:
  2769 ;;		None
  2770 ;; Tracked objects:
  2771 ;;		On entry : 3F/0
  2772 ;;		On exit  : 3F/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2779 ;;Total ram usage:        0 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    9
  2782 ;; This function calls:
  2783 ;;		Nothing
  2784 ;; This function is called by:
  2785 ;;		_main
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text7
  2790  00312E                     __ptext7:
  2791                           	opt stack 0
  2792  00312E                     _SwitchOnGPS:
  2793                           	opt stack 21
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;funcs.c: 157: LATCbits.LC1 = ON;
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;incstack = 0
  2800  00312E  8285               	bsf	3973,1,c	;volatile
  2801                           
  2802                           ;funcs.c: 158: NO_OF_TIMES_GPS_FAILED = 0;
  2803  003130  6BE3               	clrf	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  2804                           
  2805                           ;funcs.c: 159: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND;
  2806  003132  C0B9  F0C8         	movff	_DATE_TIME,_TIME_WHEN_GPS_IS_SWITCHED_ON
  2807  003136  C0BA  F0C9         	movff	_DATE_TIME+1,_TIME_WHEN_GPS_IS_SWITCHED_ON+1
  2808  00313A  C0BB  F0CA         	movff	_DATE_TIME+2,_TIME_WHEN_GPS_IS_SWITCHED_ON+2
  2809  00313E  C0BC  F0CB         	movff	_DATE_TIME+3,_TIME_WHEN_GPS_IS_SWITCHED_ON+3
  2810                           
  2811                           ;funcs.c: 160: FLAGS_0.bits.b1 = SET;
  2812  003142  83E2               	bsf	_FLAGS_0& (0+255),1,b
  2813                           
  2814                           ;funcs.c: 161: FLAGS_0.bits.b0 = RESET;
  2815  003144  91E2               	bcf	_FLAGS_0& (0+255),0,b
  2816                           
  2817                           ; BSR set to: 0
  2818  003146  0012               	return		;funcret
  2819  003148                     __end_of_SwitchOnGPS:
  2820                           	opt stack 0
  2821                           tosu	equ	0xFFF
  2822                           tosh	equ	0xFFE
  2823                           tosl	equ	0xFFD
  2824                           pclath	equ	0xFFA
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           intcon	equ	0xFF2
  2832                           postinc0	equ	0xFEE
  2833                           plusw0	equ	0xFEB
  2834                           wreg	equ	0xFE8
  2835                           indf1	equ	0xFE7
  2836                           postinc1	equ	0xFE6
  2837                           postdec1	equ	0xFE5
  2838                           plusw1	equ	0xFE3
  2839                           fsr1h	equ	0xFE2
  2840                           fsr1l	equ	0xFE1
  2841                           indf2	equ	0xFDF
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           plusw2	equ	0xFDB
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _StopGPS *****************
  2850 ;; Defined at:
  2851 ;;		line 199 in file "libs/funcs.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;		None
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		None
  2860 ;; Tracked objects:
  2861 ;;		On entry : 3F/0
  2862 ;;		On exit  : 3F/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2869 ;;Total ram usage:        0 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    9
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_main
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text8
  2880  003228                     __ptext8:
  2881                           	opt stack 0
  2882  003228                     _StopGPS:
  2883                           	opt stack 21
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;funcs.c: 200: LATCbits.LC1 = OFF;
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;incstack = 0
  2890  003228  9285               	bcf	3973,1,c	;volatile
  2891                           
  2892                           ;funcs.c: 201: FLAGS_0.bits.b3 = RESET;
  2893  00322A  97E2               	bcf	_FLAGS_0& (0+255),3,b
  2894                           
  2895                           ; BSR set to: 0
  2896  00322C  0012               	return		;funcret
  2897  00322E                     __end_of_StopGPS:
  2898                           	opt stack 0
  2899                           tosu	equ	0xFFF
  2900                           tosh	equ	0xFFE
  2901                           tosl	equ	0xFFD
  2902                           pclath	equ	0xFFA
  2903                           tblptru	equ	0xFF8
  2904                           tblptrh	equ	0xFF7
  2905                           tblptrl	equ	0xFF6
  2906                           tablat	equ	0xFF5
  2907                           prodh	equ	0xFF4
  2908                           prodl	equ	0xFF3
  2909                           intcon	equ	0xFF2
  2910                           postinc0	equ	0xFEE
  2911                           plusw0	equ	0xFEB
  2912                           wreg	equ	0xFE8
  2913                           indf1	equ	0xFE7
  2914                           postinc1	equ	0xFE6
  2915                           postdec1	equ	0xFE5
  2916                           plusw1	equ	0xFE3
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           indf2	equ	0xFDF
  2920                           postinc2	equ	0xFDE
  2921                           postdec2	equ	0xFDD
  2922                           plusw2	equ	0xFDB
  2923                           fsr2h	equ	0xFDA
  2924                           fsr2l	equ	0xFD9
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _SYSTEM_Initialize *****************
  2928 ;; Defined at:
  2929 ;;		line 107 in file "mcc_generated_files/mcc.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 3F/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2947 ;;Total ram usage:        0 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:   11
  2950 ;; This function calls:
  2951 ;;		_EUSART1_Initialize
  2952 ;;		_INTERRUPT_Initialize
  2953 ;;		_OSCILLATOR_Initialize
  2954 ;;		_PIN_MANAGER_Initialize
  2955 ;;		_TMR0_Initialize
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text9
  2962  0031A6                     __ptext9:
  2963                           	opt stack 0
  2964  0031A6                     _SYSTEM_Initialize:
  2965                           	opt stack 19
  2966                           
  2967                           ;mcc.c: 110: INTERRUPT_Initialize();
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;incstack = 0
  2971  0031A6  EC19  F019         	call	_INTERRUPT_Initialize	;wreg free
  2972                           
  2973                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  2974  0031AA  EC55  F016         	call	_PIN_MANAGER_Initialize	;wreg free
  2975                           
  2976                           ;mcc.c: 112: OSCILLATOR_Initialize();
  2977  0031AE  ECBE  F018         	call	_OSCILLATOR_Initialize	;wreg free
  2978                           
  2979                           ; BSR set to: 14
  2980                           ;mcc.c: 113: TMR0_Initialize();
  2981  0031B2  EC76  F018         	call	_TMR0_Initialize	;wreg free
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;mcc.c: 114: EUSART1_Initialize();
  2985  0031B6  EFDD  F018         	goto	_EUSART1_Initialize	;wreg free
  2986  0031BA                     __end_of_SYSTEM_Initialize:
  2987                           	opt stack 0
  2988                           tosu	equ	0xFFF
  2989                           tosh	equ	0xFFE
  2990                           tosl	equ	0xFFD
  2991                           pclath	equ	0xFFA
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           postinc0	equ	0xFEE
  3000                           plusw0	equ	0xFEB
  3001                           wreg	equ	0xFE8
  3002                           indf1	equ	0xFE7
  3003                           postinc1	equ	0xFE6
  3004                           postdec1	equ	0xFE5
  3005                           plusw1	equ	0xFE3
  3006                           fsr1h	equ	0xFE2
  3007                           fsr1l	equ	0xFE1
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           plusw2	equ	0xFDB
  3012                           fsr2h	equ	0xFDA
  3013                           fsr2l	equ	0xFD9
  3014                           status	equ	0xFD8
  3015                           
  3016 ;; *************** function _TMR0_Initialize *****************
  3017 ;; Defined at:
  3018 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 3F/E
  3029 ;;		On exit  : 3F/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3036 ;;Total ram usage:        0 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:   10
  3039 ;; This function calls:
  3040 ;;		_TMR0_SetInterruptHandler
  3041 ;;		_TMR0_StartTimer
  3042 ;; This function is called by:
  3043 ;;		_SYSTEM_Initialize
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text10
  3048  0030EC                     __ptext10:
  3049                           	opt stack 0
  3050  0030EC                     _TMR0_Initialize:
  3051                           	opt stack 19
  3052                           
  3053                           ; BSR set to: 14
  3054                           ;tmr0.c: 65: T0CON0 = 0x00;
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;incstack = 0
  3058  0030EC  6AD5               	clrf	4053,c	;volatile
  3059                           
  3060                           ; BSR set to: 14
  3061                           ;tmr0.c: 68: T0CON1 = 0x53;
  3062  0030EE  0E53               	movlw	83
  3063  0030F0  6ED6               	movwf	4054,c	;volatile
  3064                           
  3065                           ;tmr0.c: 71: TMR0H = 0x7C;
  3066  0030F2  0E7C               	movlw	124
  3067  0030F4  6ED4               	movwf	4052,c	;volatile
  3068                           
  3069                           ; BSR set to: 14
  3070                           ;tmr0.c: 74: TMR0L = 0x00;
  3071  0030F6  6AD3               	clrf	4051,c	;volatile
  3072                           
  3073                           ; BSR set to: 14
  3074                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  3075  0030F8  9BCA               	bcf	202,5,b	;volatile
  3076                           
  3077                           ; BSR set to: 14
  3078                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  3079  0030FA  8BC2               	bsf	194,5,b	;volatile
  3080                           
  3081                           ; BSR set to: 14
  3082                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  3083  0030FC  0E36               	movlw	low _TMR0_DefaultInterruptHandler
  3084  0030FE  0100               	movlb	0	; () banked
  3085  003100  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  3086  003102  0E32               	movlw	high _TMR0_DefaultInterruptHandler
  3087  003104  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  3088  003106  EC0B  F019         	call	_TMR0_SetInterruptHandler	;wreg free
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;tmr0.c: 86: TMR0_StartTimer();
  3092  00310A  EF17  F019         	goto	_TMR0_StartTimer	;wreg free
  3093  00310E                     __end_of_TMR0_Initialize:
  3094                           	opt stack 0
  3095                           tosu	equ	0xFFF
  3096                           tosh	equ	0xFFE
  3097                           tosl	equ	0xFFD
  3098                           pclath	equ	0xFFA
  3099                           tblptru	equ	0xFF8
  3100                           tblptrh	equ	0xFF7
  3101                           tblptrl	equ	0xFF6
  3102                           tablat	equ	0xFF5
  3103                           prodh	equ	0xFF4
  3104                           prodl	equ	0xFF3
  3105                           intcon	equ	0xFF2
  3106                           postinc0	equ	0xFEE
  3107                           plusw0	equ	0xFEB
  3108                           wreg	equ	0xFE8
  3109                           indf1	equ	0xFE7
  3110                           postinc1	equ	0xFE6
  3111                           postdec1	equ	0xFE5
  3112                           plusw1	equ	0xFE3
  3113                           fsr1h	equ	0xFE2
  3114                           fsr1l	equ	0xFE1
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           postdec2	equ	0xFDD
  3118                           plusw2	equ	0xFDB
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _TMR0_StartTimer *****************
  3124 ;; Defined at:
  3125 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		None
  3134 ;; Tracked objects:
  3135 ;;		On entry : 3F/0
  3136 ;;		On exit  : 3F/0
  3137 ;;		Unchanged: 3F/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3143 ;;Total ram usage:        0 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    9
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_TMR0_Initialize
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text11
  3154  00322E                     __ptext11:
  3155                           	opt stack 0
  3156  00322E                     _TMR0_StartTimer:
  3157                           	opt stack 19
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  00322E  8ED5               	bsf	4053,7,c	;volatile
  3165                           
  3166                           ; BSR set to: 0
  3167  003230  0012               	return		;funcret
  3168  003232                     __end_of_TMR0_StartTimer:
  3169                           	opt stack 0
  3170                           tosu	equ	0xFFF
  3171                           tosh	equ	0xFFE
  3172                           tosl	equ	0xFFD
  3173                           pclath	equ	0xFFA
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           plusw0	equ	0xFEB
  3183                           wreg	equ	0xFE8
  3184                           indf1	equ	0xFE7
  3185                           postinc1	equ	0xFE6
  3186                           postdec1	equ	0xFE5
  3187                           plusw1	equ	0xFE3
  3188                           fsr1h	equ	0xFE2
  3189                           fsr1l	equ	0xFE1
  3190                           indf2	equ	0xFDF
  3191                           postinc2	equ	0xFDE
  3192                           postdec2	equ	0xFDD
  3193                           plusw2	equ	0xFDB
  3194                           fsr2h	equ	0xFDA
  3195                           fsr2l	equ	0xFD9
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _TMR0_SetInterruptHandler *****************
  3199 ;; Defined at:
  3200 ;;		line 152 in file "mcc_generated_files/tmr0.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3203 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;		None
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      void 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 3F/0
  3212 ;;		On exit  : 3F/0
  3213 ;;		Unchanged: 3F/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3215 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3219 ;;Total ram usage:        2 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    9
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_TMR0_Initialize
  3226 ;;		_main
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text12
  3231  003216                     __ptext12:
  3232                           	opt stack 0
  3233  003216                     _TMR0_SetInterruptHandler:
  3234                           	opt stack 21
  3235                           
  3236                           ; BSR set to: 0
  3237                           ;tmr0.c: 153: TMR0_InterruptHandler = InterruptHandler;
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;incstack = 0
  3241  003216  C060  F0DE         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  3242  00321A  C061  F0DF         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  3243                           
  3244                           ; BSR set to: 0
  3245  00321E  0012               	return		;funcret
  3246  003220                     __end_of_TMR0_SetInterruptHandler:
  3247                           	opt stack 0
  3248                           tosu	equ	0xFFF
  3249                           tosh	equ	0xFFE
  3250                           tosl	equ	0xFFD
  3251                           pclath	equ	0xFFA
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           postinc0	equ	0xFEE
  3260                           plusw0	equ	0xFEB
  3261                           wreg	equ	0xFE8
  3262                           indf1	equ	0xFE7
  3263                           postinc1	equ	0xFE6
  3264                           postdec1	equ	0xFE5
  3265                           plusw1	equ	0xFE3
  3266                           fsr1h	equ	0xFE2
  3267                           fsr1l	equ	0xFE1
  3268                           indf2	equ	0xFDF
  3269                           postinc2	equ	0xFDE
  3270                           postdec2	equ	0xFDD
  3271                           plusw2	equ	0xFDB
  3272                           fsr2h	equ	0xFDA
  3273                           fsr2l	equ	0xFD9
  3274                           status	equ	0xFD8
  3275                           
  3276 ;; *************** function _PIN_MANAGER_Initialize *****************
  3277 ;; Defined at:
  3278 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;  state           1    0[BANK0 ] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3295 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3296 ;;Total ram usage:        1 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    9
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_SYSTEM_Initialize
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text13
  3307  002CAA                     __ptext13:
  3308                           	opt stack 0
  3309  002CAA                     _PIN_MANAGER_Initialize:
  3310                           	opt stack 20
  3311                           
  3312                           ;pin_manager.c: 57: LATA = 0x00;
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;incstack = 0
  3316  002CAA  6A83               	clrf	3971,c	;volatile
  3317                           
  3318                           ;pin_manager.c: 58: LATB = 0x00;
  3319  002CAC  6A84               	clrf	3972,c	;volatile
  3320                           
  3321                           ;pin_manager.c: 59: LATC = 0x00;
  3322  002CAE  6A85               	clrf	3973,c	;volatile
  3323                           
  3324                           ;pin_manager.c: 64: TRISA = 0xC0;
  3325  002CB0  0EC0               	movlw	192
  3326  002CB2  6E88               	movwf	3976,c	;volatile
  3327                           
  3328                           ;pin_manager.c: 65: TRISB = 0x00;
  3329  002CB4  6A89               	clrf	3977,c	;volatile
  3330                           
  3331                           ;pin_manager.c: 66: TRISC = 0x84;
  3332  002CB6  0E84               	movlw	132
  3333  002CB8  6E8A               	movwf	3978,c	;volatile
  3334                           
  3335                           ;pin_manager.c: 71: ANSELC = 0x44;
  3336  002CBA  0E44               	movlw	68
  3337  002CBC  010F               	movlb	15	; () banked
  3338  002CBE  6F21               	movwf	33,b	;volatile
  3339                           
  3340                           ; BSR set to: 15
  3341                           ;pin_manager.c: 72: ANSELB = 0x00;
  3342  002CC0  6B19               	clrf	25,b	;volatile
  3343                           
  3344                           ;pin_manager.c: 73: ANSELA = 0xC0;
  3345  002CC2  0EC0               	movlw	192
  3346  002CC4  6F11               	movwf	17,b	;volatile
  3347                           
  3348                           ; BSR set to: 15
  3349                           ;pin_manager.c: 78: WPUE = 0x00;
  3350  002CC6  6B2D               	clrf	45,b	;volatile
  3351                           
  3352                           ; BSR set to: 15
  3353                           ;pin_manager.c: 79: WPUB = 0x00;
  3354  002CC8  6B18               	clrf	24,b	;volatile
  3355                           
  3356                           ; BSR set to: 15
  3357                           ;pin_manager.c: 80: WPUA = 0x00;
  3358  002CCA  6B10               	clrf	16,b	;volatile
  3359                           
  3360                           ; BSR set to: 15
  3361                           ;pin_manager.c: 81: WPUC = 0x00;
  3362  002CCC  6B20               	clrf	32,b	;volatile
  3363                           
  3364                           ; BSR set to: 15
  3365                           ;pin_manager.c: 86: ODCONA = 0x00;
  3366  002CCE  6B0F               	clrf	15,b	;volatile
  3367                           
  3368                           ; BSR set to: 15
  3369                           ;pin_manager.c: 87: ODCONB = 0x00;
  3370  002CD0  6B17               	clrf	23,b	;volatile
  3371                           
  3372                           ; BSR set to: 15
  3373                           ;pin_manager.c: 88: ODCONC = 0x00;
  3374  002CD2  6B1F               	clrf	31,b	;volatile
  3375                           
  3376                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  3377  002CD4  0E00               	movlw	0
  3378  002CD6  BEF2               	btfsc	intcon,7,c	;volatile
  3379  002CD8  0E01               	movlw	1
  3380  002CDA  0100               	movlb	0	; () banked
  3381  002CDC  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;pin_manager.c: 96: GIE = 0;
  3385  002CDE  9EF2               	bcf	intcon,7,c	;volatile
  3386                           
  3387                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  3388  002CE0  0E55               	movlw	85
  3389  002CE2  010E               	movlb	14	; () banked
  3390  002CE4  6FA0               	movwf	160,b	;volatile
  3391                           
  3392                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  3393  002CE6  0EAA               	movlw	170
  3394  002CE8  6FA0               	movwf	160,b	;volatile
  3395                           
  3396                           ; BSR set to: 14
  3397                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  3398  002CEA  91A0               	bcf	160,0,b	;volatile
  3399                           
  3400                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  3401  002CEC  51B5               	movf	181,w,b	;volatile
  3402  002CEE  0BE0               	andlw	-32
  3403  002CF0  0917               	iorlw	23
  3404  002CF2  6FB5               	movwf	181,b	;volatile
  3405                           
  3406                           ;pin_manager.c: 102: RC6PPS = 0x09;
  3407  002CF4  0E09               	movlw	9
  3408  002CF6  6FFD               	movwf	253,b	;volatile
  3409                           
  3410                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  3411  002CF8  0E55               	movlw	85
  3412  002CFA  6FA0               	movwf	160,b	;volatile
  3413                           
  3414                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  3415  002CFC  0EAA               	movlw	170
  3416  002CFE  6FA0               	movwf	160,b	;volatile
  3417                           
  3418                           ; BSR set to: 14
  3419                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  3420  002D00  81A0               	bsf	160,0,b	;volatile
  3421                           
  3422                           ; BSR set to: 14
  3423                           ;pin_manager.c: 108: GIE = state;
  3424  002D02  0100               	movlb	0	; () banked
  3425  002D04  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  3426  002D06  D002               	goto	u4580
  3427  002D08  8EF2               	bsf	intcon,7,c	;volatile
  3428  002D0A  0CAA               	retlw	170
  3429  002D0C                     u4580:
  3430  002D0C  9EF2               	bcf	intcon,7,c	;volatile
  3431  002D0E  0012               	return		;funcret
  3432  002D10                     __end_of_PIN_MANAGER_Initialize:
  3433                           	opt stack 0
  3434                           tosu	equ	0xFFF
  3435                           tosh	equ	0xFFE
  3436                           tosl	equ	0xFFD
  3437                           pclath	equ	0xFFA
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           intcon	equ	0xFF2
  3445                           postinc0	equ	0xFEE
  3446                           plusw0	equ	0xFEB
  3447                           wreg	equ	0xFE8
  3448                           indf1	equ	0xFE7
  3449                           postinc1	equ	0xFE6
  3450                           postdec1	equ	0xFE5
  3451                           plusw1	equ	0xFE3
  3452                           fsr1h	equ	0xFE2
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           postinc2	equ	0xFDE
  3456                           postdec2	equ	0xFDD
  3457                           plusw2	equ	0xFDB
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _OSCILLATOR_Initialize *****************
  3463 ;; Defined at:
  3464 ;;		line 117 in file "mcc_generated_files/mcc.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, status,2
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 3F/E
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3482 ;;Total ram usage:        0 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    9
  3485 ;; This function calls:
  3486 ;;		Nothing
  3487 ;; This function is called by:
  3488 ;;		_SYSTEM_Initialize
  3489 ;; This function uses a non-reentrant model
  3490 ;;
  3491                           
  3492                           	psect	text14
  3493  00317C                     __ptext14:
  3494                           	opt stack 0
  3495  00317C                     _OSCILLATOR_Initialize:
  3496                           	opt stack 20
  3497                           
  3498                           ;mcc.c: 120: OSCCON1 = 0x22;
  3499                           
  3500                           ;incstack = 0
  3501  00317C  0E22               	movlw	34
  3502  00317E  010E               	movlb	14	; () banked
  3503  003180  6FD8               	movwf	216,b	;volatile
  3504                           
  3505                           ; BSR set to: 14
  3506                           ;mcc.c: 122: OSCCON3 = 0x00;
  3507  003182  6BDA               	clrf	218,b	;volatile
  3508                           
  3509                           ; BSR set to: 14
  3510                           ;mcc.c: 124: OSCEN = 0x00;
  3511  003184  6BDC               	clrf	220,b	;volatile
  3512                           
  3513                           ;mcc.c: 126: OSCFRQ = 0x02;
  3514  003186  0E02               	movlw	2
  3515  003188  6FDE               	movwf	222,b	;volatile
  3516                           
  3517                           ; BSR set to: 14
  3518                           ;mcc.c: 128: OSCTUNE = 0x00;
  3519  00318A  6BDD               	clrf	221,b	;volatile
  3520  00318C                     l840:
  3521                           
  3522                           ; BSR set to: 14
  3523  00318C  B1DB               	btfsc	219,0,b	;volatile
  3524                           
  3525                           ; BSR set to: 14
  3526  00318E  0012               	return		;funcret
  3527  003190  D7FD               	goto	l840
  3528  003192                     __end_of_OSCILLATOR_Initialize:
  3529                           	opt stack 0
  3530                           tosu	equ	0xFFF
  3531                           tosh	equ	0xFFE
  3532                           tosl	equ	0xFFD
  3533                           pclath	equ	0xFFA
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           intcon	equ	0xFF2
  3541                           postinc0	equ	0xFEE
  3542                           plusw0	equ	0xFEB
  3543                           wreg	equ	0xFE8
  3544                           indf1	equ	0xFE7
  3545                           postinc1	equ	0xFE6
  3546                           postdec1	equ	0xFE5
  3547                           plusw1	equ	0xFE3
  3548                           fsr1h	equ	0xFE2
  3549                           fsr1l	equ	0xFE1
  3550                           indf2	equ	0xFDF
  3551                           postinc2	equ	0xFDE
  3552                           postdec2	equ	0xFDD
  3553                           plusw2	equ	0xFDB
  3554                           fsr2h	equ	0xFDA
  3555                           fsr2l	equ	0xFD9
  3556                           status	equ	0xFD8
  3557                           
  3558 ;; *************** function _INTERRUPT_Initialize *****************
  3559 ;; Defined at:
  3560 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;		None
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;		None
  3565 ;; Return value:  Size  Location     Type
  3566 ;;                  1    wreg      void 
  3567 ;; Registers used:
  3568 ;;		None
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3578 ;;Total ram usage:        0 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:    9
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_SYSTEM_Initialize
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           	psect	text15
  3589  003232                     __ptext15:
  3590                           	opt stack 0
  3591  003232                     _INTERRUPT_Initialize:
  3592                           	opt stack 20
  3593                           
  3594                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  3595                           
  3596                           ; BSR set to: 14
  3597                           ;incstack = 0
  3598  003232  9AF2               	bcf	intcon,5,c	;volatile
  3599  003234  0012               	return		;funcret
  3600  003236                     __end_of_INTERRUPT_Initialize:
  3601                           	opt stack 0
  3602                           tosu	equ	0xFFF
  3603                           tosh	equ	0xFFE
  3604                           tosl	equ	0xFFD
  3605                           pclath	equ	0xFFA
  3606                           tblptru	equ	0xFF8
  3607                           tblptrh	equ	0xFF7
  3608                           tblptrl	equ	0xFF6
  3609                           tablat	equ	0xFF5
  3610                           prodh	equ	0xFF4
  3611                           prodl	equ	0xFF3
  3612                           intcon	equ	0xFF2
  3613                           postinc0	equ	0xFEE
  3614                           plusw0	equ	0xFEB
  3615                           wreg	equ	0xFE8
  3616                           indf1	equ	0xFE7
  3617                           postinc1	equ	0xFE6
  3618                           postdec1	equ	0xFE5
  3619                           plusw1	equ	0xFE3
  3620                           fsr1h	equ	0xFE2
  3621                           fsr1l	equ	0xFE1
  3622                           indf2	equ	0xFDF
  3623                           postinc2	equ	0xFDE
  3624                           postdec2	equ	0xFDD
  3625                           plusw2	equ	0xFDB
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _ReadGPS *****************
  3631 ;; Defined at:
  3632 ;;		line 174 in file "libs/funcs.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;                  1    wreg      void 
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 3F/0
  3643 ;;		On exit  : 3F/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:   15
  3653 ;; This function calls:
  3654 ;;		_ReadGPS_DATE_TIME
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           	psect	text16
  3661  002BD8                     __ptext16:
  3662                           	opt stack 0
  3663  002BD8                     _ReadGPS:
  3664                           	opt stack 15
  3665                           
  3666                           ; BSR set to: 0
  3667                           ;funcs.c: 175: if (ReadGPS_DATE_TIME()) {
  3668                           
  3669                           ;incstack = 0
  3670  002BD8  EC26  F00A         	call	_ReadGPS_DATE_TIME	;wreg free
  3671  002BDC  0900               	iorlw	0
  3672  002BDE  E013               	bz	l4723
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;funcs.c: 181: DATE_TIME = GPS_DATE_TIME;
  3676  002BE0  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3677  002BE4  EE10  F0B9         	lfsr	1,_DATE_TIME
  3678  002BE8  0E0A               	movlw	10
  3679  002BEA                     u4761:
  3680  002BEA  CFDB FFE3          	movff	plusw2,plusw1
  3681  002BEE  06E8               	decf	wreg,f,c
  3682  002BF0  E2FC               	bc	u4761
  3683                           
  3684                           ; BSR set to: 0
  3685                           ;funcs.c: 182: TIME_AT_LAST_GPS_SYNC = DATE_TIME.SECOND;
  3686  002BF2  C0B9  F0C4         	movff	_DATE_TIME,_TIME_AT_LAST_GPS_SYNC
  3687  002BF6  C0BA  F0C5         	movff	_DATE_TIME+1,_TIME_AT_LAST_GPS_SYNC+1
  3688  002BFA  C0BB  F0C6         	movff	_DATE_TIME+2,_TIME_AT_LAST_GPS_SYNC+2
  3689  002BFE  C0BC  F0C7         	movff	_DATE_TIME+3,_TIME_AT_LAST_GPS_SYNC+3
  3690  002C02                     l4721:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;funcs.c: 183: FLAGS_0.bits.b3 = SET;
  3694  002C02  87E2               	bsf	_FLAGS_0& (0+255),3,b
  3695                           
  3696                           ;funcs.c: 184: } else {
  3697  002C04  D01C               	goto	l4735
  3698  002C06                     l4723:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;funcs.c: 185: NO_OF_TIMES_GPS_FAILED++;
  3702  002C06  2BE3               	incf	_NO_OF_TIMES_GPS_FAILED& (0+255),f,b
  3703                           
  3704                           ; BSR set to: 0
  3705                           ;funcs.c: 186: if (NO_OF_TIMES_GPS_FAILED > 4) {
  3706  002C08  0E04               	movlw	4
  3707  002C0A  65E3               	cpfsgt	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  3708  002C0C  D001               	goto	l4729
  3709  002C0E  D7F9               	goto	l4721
  3710  002C10                     l4729:
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;funcs.c: 189: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND -
  3714                           ;funcs.c: 190: ((1*60) - (5*60));
  3715  002C10  0EF0               	movlw	240
  3716  002C12  25B9               	addwf	_DATE_TIME& (0+255),w,b
  3717  002C14  6FC8               	movwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),b
  3718  002C16  0E00               	movlw	0
  3719  002C18  21BA               	addwfc	(_DATE_TIME+1)& (0+255),w,b
  3720  002C1A  6FC9               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),b
  3721  002C1C  0E00               	movlw	0
  3722  002C1E  21BB               	addwfc	(_DATE_TIME+2)& (0+255),w,b
  3723  002C20  6FCA               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),b
  3724  002C22  0E00               	movlw	0
  3725  002C24  21BC               	addwfc	(_DATE_TIME+3)& (0+255),w,b
  3726  002C26  6FCB               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),b
  3727                           
  3728                           ;funcs.c: 191: if (TIME_WHEN_GPS_IS_SWITCHED_ON<0)
  3729  002C28  AFCB               	btfss	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),7,b
  3730  002C2A  D008               	goto	l4733
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;funcs.c: 192: TIME_WHEN_GPS_IS_SWITCHED_ON += 86400;
  3734  002C2C  0E80               	movlw	128
  3735  002C2E  27C8               	addwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),f,b
  3736  002C30  0E51               	movlw	81
  3737  002C32  23C9               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),f,b
  3738  002C34  0E01               	movlw	1
  3739  002C36  23CA               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),f,b
  3740  002C38  0E00               	movlw	0
  3741  002C3A  23CB               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),f,b
  3742  002C3C                     l4733:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;funcs.c: 193: FLAGS_0.bits.b1 = SET;
  3746  002C3C  83E2               	bsf	_FLAGS_0& (0+255),1,b
  3747  002C3E                     l4735:
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;funcs.c: 194: }
  3751                           ;funcs.c: 195: }
  3752                           ;funcs.c: 196: FLAGS_0.bits.b2 = RESET;
  3753  002C3E  95E2               	bcf	_FLAGS_0& (0+255),2,b
  3754                           
  3755                           ; BSR set to: 0
  3756  002C40  0012               	return		;funcret
  3757  002C42                     __end_of_ReadGPS:
  3758                           	opt stack 0
  3759                           tosu	equ	0xFFF
  3760                           tosh	equ	0xFFE
  3761                           tosl	equ	0xFFD
  3762                           pclath	equ	0xFFA
  3763                           tblptru	equ	0xFF8
  3764                           tblptrh	equ	0xFF7
  3765                           tblptrl	equ	0xFF6
  3766                           tablat	equ	0xFF5
  3767                           prodh	equ	0xFF4
  3768                           prodl	equ	0xFF3
  3769                           intcon	equ	0xFF2
  3770                           postinc0	equ	0xFEE
  3771                           plusw0	equ	0xFEB
  3772                           wreg	equ	0xFE8
  3773                           indf1	equ	0xFE7
  3774                           postinc1	equ	0xFE6
  3775                           postdec1	equ	0xFE5
  3776                           plusw1	equ	0xFE3
  3777                           fsr1h	equ	0xFE2
  3778                           fsr1l	equ	0xFE1
  3779                           indf2	equ	0xFDF
  3780                           postinc2	equ	0xFDE
  3781                           postdec2	equ	0xFDD
  3782                           plusw2	equ	0xFDB
  3783                           fsr2h	equ	0xFDA
  3784                           fsr2l	equ	0xFD9
  3785                           status	equ	0xFD8
  3786                           
  3787 ;; *************** function _ReadGPS_DATE_TIME *****************
  3788 ;; Defined at:
  3789 ;;		line 115 in file "libs/funcs.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;		None
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  TempItr         1   77[BANK0 ] unsigned char 
  3794 ;;  Date            7   69[BANK0 ] unsigned char [7]
  3795 ;;  Time            7   62[BANK0 ] unsigned char [7]
  3796 ;;  IsValidGPS      1   76[BANK0 ] enum E11037
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  1    wreg      enum E11037
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 3F/0
  3803 ;;		On exit  : 3F/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3807 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3808 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3809 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3810 ;;Total ram usage:       20 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:   14
  3813 ;; This function calls:
  3814 ;;		_AdjustDayLightSaving
  3815 ;;		_DecreaseByADay
  3816 ;;		_EUSART1_Initialize
  3817 ;;		_GetDay
  3818 ;;		_IncreaseByADay
  3819 ;;		_ReadGPSDateTime
  3820 ;;		_TimeTextToSecond
  3821 ;;		_ValidateDateTime
  3822 ;; This function is called by:
  3823 ;;		_ReadGPS
  3824 ;;		_main
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text17
  3829  00144C                     __ptext17:
  3830                           	opt stack 0
  3831  00144C                     _ReadGPS_DATE_TIME:
  3832                           	opt stack 16
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;funcs.c: 116: BOOL IsValidGPS = 0;
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;incstack = 0
  3839  00144C  6BAC               	clrf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;funcs.c: 117: char Date[] = "------";
  3843  00144E  EE20  F0EE         	lfsr	2,ReadGPS_DATE_TIME@F11474
  3844  001452  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  3845  001456  0E06               	movlw	6
  3846  001458                     u4441:
  3847  001458  CFDB FFE3          	movff	plusw2,plusw1
  3848  00145C  06E8               	decf	wreg,f,c
  3849  00145E  E2FC               	bc	u4441
  3850                           
  3851                           ;funcs.c: 118: char Time[] = "------";
  3852  001460  EE20  F0E7         	lfsr	2,ReadGPS_DATE_TIME@F11476
  3853  001464  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  3854  001468  0E06               	movlw	6
  3855  00146A                     u4451:
  3856  00146A  CFDB FFE3          	movff	plusw2,plusw1
  3857  00146E  06E8               	decf	wreg,f,c
  3858  001470  E2FC               	bc	u4451
  3859                           
  3860                           ; BSR set to: 0
  3861                           ;funcs.c: 119: EUSART1_Initialize();
  3862  001472  ECDD  F018         	call	_EUSART1_Initialize	;wreg free
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;funcs.c: 120: for (UINT8 TempItr=0; TempItr<5; TempItr++ ) {
  3866  001476  6BAD               	clrf	ReadGPS_DATE_TIME@TempItr& (0+255),b
  3867  001478                     l4473:
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;funcs.c: 121: ReadGPSDateTime(Date, Time);
  3871  001478  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  3872  00147A  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  3873  00147C  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  3874  00147E  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  3875  001480  EC99  F012         	call	_ReadGPSDateTime	;wreg free
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;funcs.c: 122: if (ValidateDateTime(Date, Time)) {
  3879  001484  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  3880  001486  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  3881  001488  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  3882  00148A  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  3883  00148C  EC5E  F010         	call	_ValidateDateTime	;wreg free
  3884  001490  0900               	iorlw	0
  3885  001492  E003               	bz	l4479
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;funcs.c: 123: IsValidGPS = 1;
  3889  001494  0E01               	movlw	1
  3890  001496  6FAC               	movwf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  3891                           
  3892                           ;funcs.c: 124: break;
  3893  001498  D004               	goto	l4483
  3894  00149A                     l4479:
  3895                           
  3896                           ; BSR set to: 0
  3897  00149A  2BAD               	incf	ReadGPS_DATE_TIME@TempItr& (0+255),f,b
  3898                           
  3899                           ; BSR set to: 0
  3900  00149C  0E04               	movlw	4
  3901  00149E  65AD               	cpfsgt	ReadGPS_DATE_TIME@TempItr& (0+255),b
  3902  0014A0  D7EB               	goto	l4473
  3903  0014A2                     l4483:
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;funcs.c: 125: }
  3907                           ;funcs.c: 126: }
  3908                           ;funcs.c: 127: if (IsValidGPS) {
  3909  0014A2  51AC               	movf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),w,b
  3910  0014A4  E101 D0AD          	bz	l4513
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;funcs.c: 128: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  3914  0014A8  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  3915  0014AA  0D0A               	mullw	10
  3916  0014AC  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  3917  0014AE  D8AA               	call	PL90	;call to abstracted procedure
  3918  0014B0  6FB2               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  3919  0014B2  0EFD               	movlw	253
  3920  0014B4  20F4               	addwfc	prodh,w,c
  3921  0014B6  6FB3               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  3922                           
  3923                           ;funcs.c: 129: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  3924  0014B8  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  3925  0014BA  0D0A               	mullw	10
  3926  0014BC  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  3927  0014BE  D8A2               	call	PL90	;call to abstracted procedure
  3928  0014C0  6FB4               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  3929  0014C2  0EFD               	movlw	253
  3930  0014C4  20F4               	addwfc	prodh,w,c
  3931  0014C6  6FB5               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;funcs.c: 130: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  3935  0014C8  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  3936  0014CA  6F6E               	movwf	GetDay@Date& (0+255),b
  3937  0014CC  EC61  F00E         	call	_GetDay	;wreg free
  3938  0014D0  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  3939  0014D2  0E40               	movlw	64
  3940  0014D4  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  3941  0014D6  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  3942  0014D8  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  3943  0014DA  D003               	goto	u4494
  3944  0014DC                     u4495:
  3945  0014DC  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  3946  0014DE  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  3947  0014E0  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3948  0014E2                     u4494:
  3949  0014E2  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  3950  0014E4  D7FB               	goto	u4495
  3951  0014E6  0100               	movlb	0	; () banked
  3952  0014E8  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3953  0014EA  51B6               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  3954  0014EC  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3955  0014EE  0B01               	andlw	-255
  3956  0014F0  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3957  0014F2  6FB6               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;funcs.c: 131: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  3961  0014F4  51FA               	movf	_CENTURY& (0+255),w,b
  3962  0014F6  0D64               	mullw	100
  3963  0014F8  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  3964  0014FC  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  3965  001500  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  3966  001502  0D0A               	mullw	10
  3967  001504  50F3               	movf	prodl,w,c
  3968  001506  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  3969  001508  50F4               	movf	prodh,w,c
  3970  00150A  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3971  00150C  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  3972  00150E  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  3973  001510  0E00               	movlw	0
  3974  001512  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3975  001514  0EF0               	movlw	240
  3976  001516  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  3977  001518  6FB7               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  3978  00151A  0EFD               	movlw	253
  3979  00151C  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3980  00151E  6FB8               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  3981                           
  3982                           ;funcs.c: 132: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  3983  001520  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  3984  001522  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  3985  001524  EC6C  F00F         	call	_TimeTextToSecond	;wreg free
  3986  001528  C06C  F0AE         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  3987  00152C  C06D  F0AF         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  3988  001530  C06E  F0B0         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  3989  001534  C06F  F0B1         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;funcs.c: 133: GPS_DATE_TIME.SECOND += TIME_ZONE;
  3993  001538  C0E0  F09A         	movff	_TIME_ZONE,??_ReadGPS_DATE_TIME
  3994  00153C  C0E1  F09B         	movff	_TIME_ZONE+1,??_ReadGPS_DATE_TIME+1
  3995  001540  0E00               	movlw	0
  3996  001542  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  3997  001544  0EFF               	movlw	255
  3998  001546  6F9C               	movwf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  3999  001548  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  4000  00154A  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  4001  00154C  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  4002  00154E  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  4003  001550  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  4004  001552  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  4005  001554  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  4006  001556  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  4007  001558  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;funcs.c: 134: if (GPS_DATE_TIME.SECOND < 0) {
  4011  00155A  AFB1               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  4012  00155C  D01A               	goto	l4499
  4013                           
  4014                           ; BSR set to: 0
  4015                           ;funcs.c: 135: GPS_DATE_TIME.SECOND += 86400;
  4016  00155E  0E80               	movlw	128
  4017  001560  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  4018  001562  0E51               	movlw	81
  4019  001564  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  4020  001566  0E01               	movlw	1
  4021  001568  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  4022  00156A  0E00               	movlw	0
  4023  00156C  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;funcs.c: 136: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  4027  00156E  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4028  001572  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  4029  001576  0E0A               	movlw	10
  4030  001578                     u4511:
  4031  001578  CFDB FFEB          	movff	plusw2,plusw0
  4032  00157C  06E8               	decf	wreg,f,c
  4033  00157E  E2FC               	bc	u4511
  4034  001580  ECE6  F00F         	call	_DecreaseByADay	;wreg free
  4035  001584  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4036  001588  0E0A               	movlw	10
  4037  00158A                     u4521:
  4038  00158A  CFEB FFDB          	movff	plusw0,plusw2
  4039  00158E  06E8               	decf	wreg,f,c
  4040  001590  E2FC               	bc	u4521
  4041  001592                     l4499:
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;funcs.c: 137: }
  4045                           ;funcs.c: 138: if (GPS_DATE_TIME.SECOND > 86400) {
  4046  001592  BFB1               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  4047  001594  D023               	goto	l4505
  4048  001596  51B1               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  4049  001598  E107               	bnz	u4530
  4050  00159A  0E81               	movlw	129
  4051  00159C  5DAE               	subwf	_GPS_DATE_TIME& (0+255),w,b
  4052  00159E  0E51               	movlw	81
  4053  0015A0  59AF               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  4054  0015A2  0E01               	movlw	1
  4055  0015A4  59B0               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  4056  0015A6  E31A               	bnc	l4505
  4057  0015A8                     u4530:
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;funcs.c: 139: GPS_DATE_TIME.SECOND -= 86400;
  4061  0015A8  0E80               	movlw	128
  4062  0015AA  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  4063  0015AC  0EAE               	movlw	174
  4064  0015AE  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  4065  0015B0  0EFE               	movlw	254
  4066  0015B2  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  4067  0015B4  0EFF               	movlw	255
  4068  0015B6  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;funcs.c: 140: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  4072  0015B8  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4073  0015BC  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  4074  0015C0  0E0A               	movlw	10
  4075  0015C2                     u4541:
  4076  0015C2  CFDB FFEB          	movff	plusw2,plusw0
  4077  0015C6  06E8               	decf	wreg,f,c
  4078  0015C8  E2FC               	bc	u4541
  4079  0015CA  ECB9  F011         	call	_IncreaseByADay	;wreg free
  4080  0015CE  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4081  0015D2  0E0A               	movlw	10
  4082  0015D4                     u4551:
  4083  0015D4  CFEB FFDB          	movff	plusw0,plusw2
  4084  0015D8  06E8               	decf	wreg,f,c
  4085  0015DA  E2FC               	bc	u4551
  4086  0015DC                     l4505:
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;funcs.c: 141: }
  4090                           ;funcs.c: 142: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  4091  0015DC  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4092  0015E0  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  4093  0015E4  0E0A               	movlw	10
  4094  0015E6                     u4561:
  4095  0015E6  CFDB FFEB          	movff	plusw2,plusw0
  4096  0015EA  06E8               	decf	wreg,f,c
  4097  0015EC  E2FC               	bc	u4561
  4098  0015EE  ECCF  F00D         	call	_AdjustDayLightSaving	;wreg free
  4099  0015F2  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  4100  0015F6  0E0A               	movlw	10
  4101  0015F8                     u4571:
  4102  0015F8  CFEB FFDB          	movff	plusw0,plusw2
  4103  0015FC  06E8               	decf	wreg,f,c
  4104  0015FE  E2FC               	bc	u4571
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;funcs.c: 143: return 1;
  4108  001600  0C01               	retlw	1
  4109  001602                     l4513:
  4110                           
  4111                           ; BSR set to: 0
  4112                           
  4113                           ; BSR set to: 0
  4114                           ;funcs.c: 145: return 0;
  4115  001602  0C00               	retlw	0	;funcret
  4116  001604                     __end_of_ReadGPS_DATE_TIME:
  4117                           	opt stack 0
  4118  001604                     PL90:
  4119                           	opt stack 16
  4120  001604  26F3               	addwf	prodl,f,c
  4121  001606  0E00               	movlw	0
  4122  001608  22F4               	addwfc	prodh,f,c
  4123  00160A  0EF0               	movlw	240
  4124  00160C  24F3               	addwf	prodl,w,c
  4125  00160E  0012               	return	
  4126  001610                     __end_ofPL90:
  4127                           	opt stack 0
  4128                           tosu	equ	0xFFF
  4129                           tosh	equ	0xFFE
  4130                           tosl	equ	0xFFD
  4131                           pclath	equ	0xFFA
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           intcon	equ	0xFF2
  4139                           postinc0	equ	0xFEE
  4140                           plusw0	equ	0xFEB
  4141                           wreg	equ	0xFE8
  4142                           indf1	equ	0xFE7
  4143                           postinc1	equ	0xFE6
  4144                           postdec1	equ	0xFE5
  4145                           plusw1	equ	0xFE3
  4146                           fsr1h	equ	0xFE2
  4147                           fsr1l	equ	0xFE1
  4148                           indf2	equ	0xFDF
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           plusw2	equ	0xFDB
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _ValidateDateTime *****************
  4157 ;; Defined at:
  4158 ;;		line 138 in file "libs/gps.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  4161 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4162 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  4163 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  Item            1    3[BANK0 ] char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      enum E11037
  4168 ;; Registers used:
  4169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4170 ;; Tracked objects:
  4171 ;;		On entry : 3F/0
  4172 ;;		On exit  : 3F/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4175 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4178 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4179 ;;Total ram usage:        4 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    9
  4182 ;; This function calls:
  4183 ;;		Nothing
  4184 ;; This function is called by:
  4185 ;;		_ReadGPS_DATE_TIME
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text18
  4190  0020BC                     __ptext18:
  4191                           	opt stack 0
  4192  0020BC                     _ValidateDateTime:
  4193                           	opt stack 20
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;gps.c: 139: INT8 Item;
  4197                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;incstack = 0
  4201  0020BC  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4202  0020BE  D86F               	call	PL100	;call to abstracted procedure
  4203  0020C0  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4204  0020C2  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4205  0020C4  6ED9               	movwf	fsr2l,c
  4206  0020C6  6ADA               	clrf	fsr2h,c
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  4210  0020C8  D84A               	call	PL10	;call to abstracted procedure
  4211  0020CA  A0D8               	btfss	status,0,c
  4212  0020CC  0C00               	retlw	0
  4213                           
  4214                           ; BSR set to: 0
  4215  0020CE  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4216  0020D0  0A80               	xorlw	128
  4217  0020D2  0F60               	addlw	-160
  4218  0020D4  E301               	bnc	l3911
  4219                           
  4220                           ; BSR set to: 0
  4221  0020D6  0C00               	retlw	0
  4222  0020D8                     l3911:
  4223                           
  4224                           ; BSR set to: 0
  4225                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  4226  0020D8  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4227  0020DA  D855               	call	PL60	;call to abstracted procedure
  4228  0020DC  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4229  0020DE  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4230  0020E0  D848               	call	PL40	;call to abstracted procedure
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  4234  0020E2  D83D               	call	PL10	;call to abstracted procedure
  4235  0020E4  A0D8               	btfss	status,0,c
  4236  0020E6  0C00               	retlw	0
  4237                           
  4238                           ; BSR set to: 0
  4239  0020E8  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4240  0020EA  0A80               	xorlw	128
  4241  0020EC  0F73               	addlw	-141
  4242  0020EE  E301               	bnc	l3921
  4243  0020F0  0C00               	retlw	0
  4244  0020F2                     l3921:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  4248  0020F2  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4249  0020F4  D84E               	call	PL68	;call to abstracted procedure
  4250  0020F6  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4251  0020F8  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  4252  0020FA  D840               	call	PL44	;call to abstracted procedure
  4253                           
  4254                           ; BSR set to: 0
  4255                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  4256  0020FC  D830               	call	PL10	;call to abstracted procedure
  4257  0020FE  A0D8               	btfss	status,0,c
  4258  002100  0C00               	retlw	0
  4259                           
  4260                           ; BSR set to: 0
  4261  002102  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4262  002104  0A80               	xorlw	128
  4263  002106  0F1C               	addlw	-228
  4264  002108  E301               	bnc	l3931
  4265  00210A  0C00               	retlw	0
  4266  00210C                     l3931:
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  4270  00210C  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4271  00210E  D847               	call	PL100	;call to abstracted procedure
  4272  002110  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4273  002112  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4274  002114  6ED9               	movwf	fsr2l,c
  4275  002116  6ADA               	clrf	fsr2h,c
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  4279  002118  D822               	call	PL10	;call to abstracted procedure
  4280  00211A  A0D8               	btfss	status,0,c
  4281  00211C  0C00               	retlw	0
  4282                           
  4283                           ; BSR set to: 0
  4284  00211E  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4285  002120  0A80               	xorlw	128
  4286  002122  0F68               	addlw	-152
  4287  002124  E301               	bnc	l3941
  4288  002126  0C00               	retlw	0
  4289  002128                     l3941:
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  4293  002128  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4294  00212A  D82D               	call	PL60	;call to abstracted procedure
  4295  00212C  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4296  00212E  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4297  002130  D820               	call	PL40	;call to abstracted procedure
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  4301  002132  D815               	call	PL10	;call to abstracted procedure
  4302  002134  A0D8               	btfss	status,0,c
  4303  002136  0C00               	retlw	0
  4304                           
  4305                           ; BSR set to: 0
  4306  002138  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4307  00213A  0A80               	xorlw	128
  4308  00213C  0F44               	addlw	-188
  4309  00213E  E301               	bnc	l3951
  4310  002140  0C00               	retlw	0
  4311  002142                     l3951:
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  4315  002142  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4316  002144  D826               	call	PL68	;call to abstracted procedure
  4317  002146  6F62               	movwf	??_ValidateDateTime& (0+255),b
  4318  002148  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  4319  00214A  D818               	call	PL44	;call to abstracted procedure
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  4323  00214C  D808               	call	PL10	;call to abstracted procedure
  4324  00214E  A0D8               	btfss	status,0,c
  4325  002150  0C00               	retlw	0
  4326                           
  4327                           ; BSR set to: 0
  4328  002152  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4329  002154  0A80               	xorlw	128
  4330  002156  0F44               	addlw	-188
  4331  002158  E301               	bnc	l3961
  4332  00215A  0C00               	retlw	0
  4333  00215C                     l3961:
  4334                           
  4335                           ; BSR set to: 0
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;gps.c: 160: return 1;
  4339  00215C  0C01               	retlw	1	;funcret
  4340  00215E                     __end_of_ValidateDateTime:
  4341                           	opt stack 0
  4342  00215E                     PL10:
  4343                           	opt stack 20
  4344  00215E  50DF               	movf	indf2,w,c
  4345  002160  0D0A               	mullw	10
  4346  002162  50F3               	movf	prodl,w,c
  4347  002164  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  4348  002166  0FF0               	addlw	240
  4349  002168  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  4350  00216A  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  4351  00216C  0A80               	xorlw	128
  4352  00216E  0F7F               	addlw	-129
  4353  002170  0012               	return	
  4354  002172                     __end_ofPL10:
  4355                           	opt stack 0
  4356  002172                     PL40:
  4357                           	opt stack 20
  4358  002172  6ED9               	movwf	fsr2l,c
  4359  002174  6ADA               	clrf	fsr2h,c
  4360  002176  0E02               	movlw	2
  4361  002178  26D9               	addwf	fsr2l,f,c
  4362  00217A  0C02               	retlw	2
  4363  00217C                     __end_ofPL40:
  4364                           	opt stack 0
  4365  00217C                     PL44:
  4366                           	opt stack 20
  4367  00217C  6ED9               	movwf	fsr2l,c
  4368  00217E  6ADA               	clrf	fsr2h,c
  4369  002180  0E04               	movlw	4
  4370  002182  26D9               	addwf	fsr2l,f,c
  4371  002184  0C04               	retlw	4
  4372  002186                     __end_ofPL44:
  4373                           	opt stack 0
  4374  002186                     PL60:
  4375                           	opt stack 20
  4376  002186  6ED9               	movwf	fsr2l,c
  4377  002188  6ADA               	clrf	fsr2h,c
  4378  00218A  0E03               	movlw	3
  4379  00218C  26D9               	addwf	fsr2l,f,c
  4380  00218E  50DF               	movf	indf2,w,c
  4381  002190  0012               	return	
  4382  002192                     __end_ofPL60:
  4383                           	opt stack 0
  4384  002192                     PL68:
  4385                           	opt stack 20
  4386  002192  6ED9               	movwf	fsr2l,c
  4387  002194  6ADA               	clrf	fsr2h,c
  4388  002196  0E05               	movlw	5
  4389  002198  26D9               	addwf	fsr2l,f,c
  4390  00219A  50DF               	movf	indf2,w,c
  4391  00219C  0012               	return	
  4392  00219E                     __end_ofPL68:
  4393                           	opt stack 0
  4394  00219E                     PL100:
  4395                           	opt stack 20
  4396  00219E  6ED9               	movwf	fsr2l,c
  4397  0021A0  6ADA               	clrf	fsr2h,c
  4398  0021A2  2AD9               	incf	fsr2l,f,c
  4399  0021A4  50DF               	movf	indf2,w,c
  4400  0021A6  0012               	return	
  4401  0021A8                     __end_ofPL100:
  4402                           	opt stack 0
  4403                           tosu	equ	0xFFF
  4404                           tosh	equ	0xFFE
  4405                           tosl	equ	0xFFD
  4406                           pclath	equ	0xFFA
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           prodh	equ	0xFF4
  4412                           prodl	equ	0xFF3
  4413                           intcon	equ	0xFF2
  4414                           postinc0	equ	0xFEE
  4415                           plusw0	equ	0xFEB
  4416                           wreg	equ	0xFE8
  4417                           indf1	equ	0xFE7
  4418                           postinc1	equ	0xFE6
  4419                           postdec1	equ	0xFE5
  4420                           plusw1	equ	0xFE3
  4421                           fsr1h	equ	0xFE2
  4422                           fsr1l	equ	0xFE1
  4423                           indf2	equ	0xFDF
  4424                           postinc2	equ	0xFDE
  4425                           postdec2	equ	0xFDD
  4426                           plusw2	equ	0xFDB
  4427                           fsr2h	equ	0xFDA
  4428                           fsr2l	equ	0xFD9
  4429                           status	equ	0xFD8
  4430                           
  4431 ;; *************** function _TimeTextToSecond *****************
  4432 ;; Defined at:
  4433 ;;		line 148 in file "libs/funcs.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  4436 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;  Second          4   32[BANK0 ] long 
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  4   12[BANK0 ] long 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 3F/0
  4445 ;;		On exit  : 3F/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4449 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4450 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4451 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4452 ;;Total ram usage:       24 bytes
  4453 ;; Hardware stack levels used:    1
  4454 ;; Hardware stack levels required when called:   10
  4455 ;; This function calls:
  4456 ;;		___lmul
  4457 ;; This function is called by:
  4458 ;;		_ReadGPS_DATE_TIME
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text19
  4463  001ED8                     __ptext19:
  4464                           	opt stack 0
  4465  001ED8                     _TimeTextToSecond:
  4466                           	opt stack 19
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;funcs.c: 149: INT32 Second;
  4470                           ;funcs.c: 150: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  4471                           ;funcs.c: 151: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  4472                           ;funcs.c: 152: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;incstack = 0
  4476  001ED8  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4477  001EDA  ECBE  F010         	call	PL44	;call to abstracted procedure
  4478  001EDE  D872               	call	PL92	;call to abstracted procedure
  4479  001EE0  ECC9  F010         	call	PL68	;call to abstracted procedure
  4480  001EE4  EC02  F00B         	call	PL90	;call to abstracted procedure
  4481  001EE8  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  4482  001EEA  0EFD               	movlw	253
  4483  001EEC  20F4               	addwfc	prodh,w,c
  4484  001EEE  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  4485  001EF0  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  4486  001EF2  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  4487  001EF4  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  4488  001EF6  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  4489  001EF8  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  4490  001EFA  0EF0               	movlw	240
  4491  001EFC  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  4492  001EFE  0EFD               	movlw	253
  4493  001F00  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  4494  001F02  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4495  001F04  6ED9               	movwf	fsr2l,c
  4496  001F06  6ADA               	clrf	fsr2h,c
  4497  001F08  D85D               	call	PL92	;call to abstracted procedure
  4498  001F0A  ECCF  F010         	call	PL100	;call to abstracted procedure
  4499  001F0E  26F3               	addwf	prodl,f,c
  4500  001F10  0E00               	movlw	0
  4501  001F12  22F4               	addwfc	prodh,f,c
  4502  001F14  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  4503  001F16  26F3               	addwf	prodl,f,c
  4504  001F18  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  4505  001F1A  D849               	call	PL58	;call to abstracted procedure
  4506  001F1C  0E10               	movlw	16
  4507  001F1E  6F64               	movwf	___lmul@multiplicand& (0+255),b
  4508  001F20  0E0E               	movlw	14
  4509  001F22  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  4510  001F24  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  4511  001F26  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  4512  001F28  ECDC  F016         	call	___lmul	;wreg free
  4513  001F2C  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  4514  001F30  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  4515  001F34  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  4516  001F38  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  4517  001F3C  0EF0               	movlw	240
  4518  001F3E  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  4519  001F40  0EFD               	movlw	253
  4520  001F42  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  4521  001F44  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4522  001F46  ECB9  F010         	call	PL40	;call to abstracted procedure
  4523  001F4A  D83C               	call	PL92	;call to abstracted procedure
  4524  001F4C  ECC3  F010         	call	PL60	;call to abstracted procedure
  4525  001F50  26F3               	addwf	prodl,f,c
  4526  001F52  0E00               	movlw	0
  4527  001F54  22F4               	addwfc	prodh,f,c
  4528  001F56  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  4529  001F58  26F3               	addwf	prodl,f,c
  4530  001F5A  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  4531  001F5C  D828               	call	PL58	;call to abstracted procedure
  4532  001F5E  0E3C               	movlw	60
  4533  001F60  6F64               	movwf	___lmul@multiplicand& (0+255),b
  4534  001F62  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  4535  001F64  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  4536  001F66  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  4537  001F68  ECDC  F016         	call	___lmul	;wreg free
  4538  001F6C  5160               	movf	?___lmul& (0+255),w,b
  4539  001F6E  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  4540  001F70  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  4541  001F72  5161               	movf	(?___lmul+1)& (0+255),w,b
  4542  001F74  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  4543  001F76  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  4544  001F78  5162               	movf	(?___lmul+2)& (0+255),w,b
  4545  001F7A  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  4546  001F7C  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  4547  001F7E  5163               	movf	(?___lmul+3)& (0+255),w,b
  4548  001F80  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  4549  001F82  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  4550  001F84  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  4551  001F86  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  4552  001F88  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  4553  001F8A  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  4554  001F8C  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  4555  001F8E  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  4556  001F90  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  4557  001F92  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  4558  001F94  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  4559  001F96  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  4560  001F98  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  4561  001F9A  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  4562                           
  4563                           ; BSR set to: 0
  4564                           ;funcs.c: 153: return Second;
  4565  001F9C  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  4566  001FA0  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  4567  001FA4  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  4568  001FA8  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  4569                           
  4570                           ; BSR set to: 0
  4571  001FAC  0012               	return		;funcret
  4572  001FAE                     __end_of_TimeTextToSecond:
  4573                           	opt stack 0
  4574  001FAE                     PL58:
  4575                           	opt stack 19
  4576  001FAE  22F4               	addwfc	prodh,f,c
  4577  001FB0  CFF3 F060          	movff	prodl,___lmul@multiplier
  4578  001FB4  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  4579  001FB8  0E00               	movlw	0
  4580  001FBA  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  4581  001FBC  0EFF               	movlw	-1
  4582  001FBE  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  4583  001FC0  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  4584  001FC2  0012               	return	
  4585  001FC4                     __end_ofPL58:
  4586                           	opt stack 0
  4587  001FC4                     PL92:
  4588                           	opt stack 19
  4589  001FC4  50DF               	movf	indf2,w,c
  4590  001FC6  0D0A               	mullw	10
  4591  001FC8  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  4592  001FCA  0012               	return	
  4593  001FCC                     __end_ofPL92:
  4594                           	opt stack 0
  4595                           tosu	equ	0xFFF
  4596                           tosh	equ	0xFFE
  4597                           tosl	equ	0xFFD
  4598                           pclath	equ	0xFFA
  4599                           tblptru	equ	0xFF8
  4600                           tblptrh	equ	0xFF7
  4601                           tblptrl	equ	0xFF6
  4602                           tablat	equ	0xFF5
  4603                           prodh	equ	0xFF4
  4604                           prodl	equ	0xFF3
  4605                           intcon	equ	0xFF2
  4606                           postinc0	equ	0xFEE
  4607                           plusw0	equ	0xFEB
  4608                           wreg	equ	0xFE8
  4609                           indf1	equ	0xFE7
  4610                           postinc1	equ	0xFE6
  4611                           postdec1	equ	0xFE5
  4612                           plusw1	equ	0xFE3
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           plusw2	equ	0xFDB
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function _ReadGPSDateTime *****************
  4624 ;; Defined at:
  4625 ;;		line 39 in file "libs/gps.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  4628 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4629 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  4630 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  StartCode       8    6[BANK0 ] const unsigned char [8]
  4633 ;;  i               2   14[BANK0 ] unsigned short 
  4634 ;;  Pos             1   18[BANK0 ] unsigned char 
  4635 ;;  TempChar        1   17[BANK0 ] unsigned char 
  4636 ;;  Commas          1   16[BANK0 ] unsigned char 
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4641 ;; Tracked objects:
  4642 ;;		On entry : 3F/0
  4643 ;;		On exit  : 3F/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4647 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4648 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4649 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4650 ;;Total ram usage:       19 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; Hardware stack levels required when called:   10
  4653 ;; This function calls:
  4654 ;;		_EUSART1_Read
  4655 ;; This function is called by:
  4656 ;;		_ReadGPS_DATE_TIME
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text20
  4661  002532                     __ptext20:
  4662                           	opt stack 0
  4663  002532                     _ReadGPSDateTime:
  4664                           	opt stack 19
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;gps.c: 40: const char StartCode[]="$GPRMC,";
  4668                           
  4669                           ; BSR set to: 0
  4670                           ;incstack = 0
  4671  002532  0E01               	movlw	low ReadGPSDateTime@F11467
  4672  002534  6EF6               	movwf	tblptrl,c
  4673  002536                     	if	1	;There is more than 1 active tblptr byte
  4674  002536  0E0F               	movlw	high ReadGPSDateTime@F11467
  4675  002538  6EF7               	movwf	tblptrh,c
  4676  00253A                     	endif
  4677  00253A                     	if	1	;There are 3 active tblptr bytes
  4678  00253A  0E00               	movlw	low (ReadGPSDateTime@F11467 shr (0+16))
  4679  00253C  6EF8               	movwf	tblptru,c
  4680  00253E                     	endif
  4681  00253E  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  4682  002542  0E07               	movlw	7
  4683  002544                     u3580:
  4684  002544  0009               	tblrd		*+
  4685  002546  CFF5 FFDE          	movff	tablat,postinc2
  4686  00254A  06E8               	decf	wreg,f,c
  4687  00254C  E2FB               	bc	u3580
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;gps.c: 41: char Pos=0x00;
  4691  00254E  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;gps.c: 43: UINT16 i=0;
  4695                           
  4696                           ; BSR set to: 0
  4697  002550  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  4698  002552  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  4699                           
  4700                           ; BSR set to: 0
  4701                           ;gps.c: 44: UINT8 Commas=0;
  4702  002554  6B70               	clrf	ReadGPSDateTime@Commas& (0+255),b
  4703  002556                     l3855:
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  4707  002556  010E               	movlb	14	; () banked
  4708  002558  ABCD               	btfss	205,5,b	;volatile
  4709  00255A  D047               	goto	l3889
  4710                           
  4711                           ; BSR set to: 14
  4712                           ;gps.c: 47: i=0;
  4713  00255C  0100               	movlb	0	; () banked
  4714  00255E  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  4715  002560  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;gps.c: 48: TempChar = EUSART1_Read();
  4719  002562  ECF1  F018         	call	_EUSART1_Read	;wreg free
  4720  002566  0100               	movlb	0	; () banked
  4721  002568  6F71               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  4725  00256A  0E06               	movlw	6
  4726  00256C  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  4727  00256E  D00D               	goto	l3869
  4728                           
  4729                           ; BSR set to: 0
  4730  002570  0E0D               	movlw	13
  4731  002572  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  4732  002574  D00A               	goto	l3869
  4733                           
  4734                           ; BSR set to: 0
  4735                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  4736  002576  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  4737  002578  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  4738  00257A  6ED9               	movwf	fsr2l,c
  4739  00257C  6ADA               	clrf	fsr2h,c
  4740  00257E  0EF9               	movlw	249
  4741  002580  26D9               	addwf	fsr2l,f,c
  4742  002582  C071  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  4743  002586                     l3867:
  4744                           
  4745                           ; BSR set to: 0
  4746                           ;gps.c: 51: Pos++;
  4747  002586  2B72               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  4748                           
  4749                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  4750  002588  D034               	goto	l3891
  4751  00258A                     l3869:
  4752                           
  4753                           ; BSR set to: 0
  4754  00258A  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  4755  00258C  0F66               	addlw	low ReadGPSDateTime@StartCode
  4756  00258E  6ED9               	movwf	fsr2l,c
  4757  002590  6ADA               	clrf	fsr2h,c
  4758  002592  5171               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  4759  002594  18DE               	xorwf	postinc2,w,c
  4760  002596  E104               	bnz	l3875
  4761                           
  4762                           ; BSR set to: 0
  4763  002598  0E07               	movlw	7
  4764  00259A  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  4765  00259C  D001               	goto	l3875
  4766  00259E  D7F3               	goto	l3867
  4767  0025A0                     l3875:
  4768                           
  4769                           ; BSR set to: 0
  4770  0025A0  0E0C               	movlw	12
  4771  0025A2  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  4772  0025A4  D020               	goto	l125
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;gps.c: 55: if (Commas<8) {
  4776  0025A6  0E08               	movlw	8
  4777  0025A8  6170               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  4778  0025AA  D005               	goto	l3883
  4779                           
  4780                           ; BSR set to: 0
  4781                           ;gps.c: 56: if (TempChar == 0x2C)
  4782  0025AC  0E2C               	movlw	44
  4783  0025AE  1971               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  4784  0025B0  E120               	bnz	l3891
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;gps.c: 57: Commas++;
  4788  0025B2  2B70               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  4789  0025B4  D01E               	goto	l3891
  4790  0025B6                     l3883:
  4791                           
  4792                           ; BSR set to: 0
  4793                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  4794  0025B6  0EF3               	movlw	243
  4795  0025B8  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  4796  0025BA  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  4797  0025BC  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  4798  0025BE  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  4799  0025C0  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  4800  0025C2  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  4801  0025C4  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  4802  0025C6  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  4803  0025C8  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  4804  0025CA  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  4805  0025CC  D006               	goto	l3885
  4806  0025CE  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  4807  0025D0  E118               	bnz	l131
  4808  0025D2  0E06               	movlw	6
  4809  0025D4  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  4810  0025D6  B0D8               	btfsc	status,0,c
  4811  0025D8  0012               	return	
  4812  0025DA                     l3885:
  4813                           
  4814                           ; BSR set to: 0
  4815                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  4816  0025DA  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  4817  0025DC  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  4818  0025DE  6ED9               	movwf	fsr2l,c
  4819  0025E0  6ADA               	clrf	fsr2h,c
  4820  0025E2  0EF3               	movlw	243
  4821  0025E4  D7CD               	goto	L4
  4822  0025E6                     l125:
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;gps.c: 66: Pos=0;
  4826  0025E6  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  4827                           
  4828                           ; BSR set to: 0
  4829  0025E8  D004               	goto	l3891
  4830  0025EA                     l3889:
  4831                           
  4832                           ; BSR set to: 14
  4833                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  4834  0025EA  0E06               	movlw	6
  4835  0025EC                     u4997:
  4836  0025EC  2EE8               	decfsz	wreg,f,c
  4837  0025EE  D7FE               	bra	u4997
  4838  0025F0  D000               	nop2	
  4839  0025F2                     l3891:
  4840                           
  4841                           ;gps.c: 69: i++;
  4842  0025F2  0100               	movlb	0	; () banked
  4843  0025F4  4B6E               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  4844  0025F6  2B6F               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  4845                           
  4846                           ;gps.c: 70: } while(i<5000);
  4847  0025F8  0E88               	movlw	136
  4848  0025FA  5D6E               	subwf	ReadGPSDateTime@i& (0+255),w,b
  4849  0025FC  0E13               	movlw	19
  4850  0025FE  596F               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  4851  002600  E3AA               	bnc	l3855
  4852  002602                     l131:
  4853                           
  4854                           ; BSR set to: 0
  4855  002602  0012               	return		;funcret
  4856  002604                     __end_of_ReadGPSDateTime:
  4857                           	opt stack 0
  4858                           tosu	equ	0xFFF
  4859                           tosh	equ	0xFFE
  4860                           tosl	equ	0xFFD
  4861                           pclath	equ	0xFFA
  4862                           tblptru	equ	0xFF8
  4863                           tblptrh	equ	0xFF7
  4864                           tblptrl	equ	0xFF6
  4865                           tablat	equ	0xFF5
  4866                           prodh	equ	0xFF4
  4867                           prodl	equ	0xFF3
  4868                           intcon	equ	0xFF2
  4869                           postinc0	equ	0xFEE
  4870                           plusw0	equ	0xFEB
  4871                           wreg	equ	0xFE8
  4872                           indf1	equ	0xFE7
  4873                           postinc1	equ	0xFE6
  4874                           postdec1	equ	0xFE5
  4875                           plusw1	equ	0xFE3
  4876                           fsr1h	equ	0xFE2
  4877                           fsr1l	equ	0xFE1
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           plusw2	equ	0xFDB
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function _EUSART1_Read *****************
  4887 ;; Defined at:
  4888 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;		None
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;		None
  4893 ;; Return value:  Size  Location     Type
  4894 ;;                  1    wreg      unsigned char 
  4895 ;; Registers used:
  4896 ;;		wreg, status,2
  4897 ;; Tracked objects:
  4898 ;;		On entry : 3F/0
  4899 ;;		On exit  : 3F/E
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4906 ;;Total ram usage:        0 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; Hardware stack levels required when called:    9
  4909 ;; This function calls:
  4910 ;;		Nothing
  4911 ;; This function is called by:
  4912 ;;		_ReadGPSDateTime
  4913 ;; This function uses a non-reentrant model
  4914 ;;
  4915                           
  4916                           	psect	text21
  4917  0031E2                     __ptext21:
  4918                           	opt stack 0
  4919  0031E2                     _EUSART1_Read:
  4920                           	opt stack 19
  4921  0031E2                     l736:
  4922  0031E2  010E               	movlb	14	; () banked
  4923  0031E4  ABCD               	btfss	205,5,b	;volatile
  4924  0031E6  D7FD               	goto	l736
  4925                           
  4926                           ; BSR set to: 14
  4927                           ;eusart1.c: 82: }
  4928                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  4929  0031E8  A29D               	btfss	3997,1,c	;volatile
  4930  0031EA  D002               	goto	l3497
  4931                           
  4932                           ; BSR set to: 14
  4933                           ;eusart1.c: 86: {
  4934                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  4935  0031EC  9E9D               	bcf	3997,7,c	;volatile
  4936                           
  4937                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  4938  0031EE  8E9D               	bsf	3997,7,c	;volatile
  4939  0031F0                     l3497:
  4940                           
  4941                           ; BSR set to: 14
  4942                           ;eusart1.c: 91: }
  4943                           ;eusart1.c: 93: return RC1REG;
  4944  0031F0  5099               	movf	3993,w,c	;volatile
  4945                           
  4946                           ; BSR set to: 14
  4947  0031F2  0012               	return		;funcret
  4948  0031F4                     __end_of_EUSART1_Read:
  4949                           	opt stack 0
  4950                           tosu	equ	0xFFF
  4951                           tosh	equ	0xFFE
  4952                           tosl	equ	0xFFD
  4953                           pclath	equ	0xFFA
  4954                           tblptru	equ	0xFF8
  4955                           tblptrh	equ	0xFF7
  4956                           tblptrl	equ	0xFF6
  4957                           tablat	equ	0xFF5
  4958                           prodh	equ	0xFF4
  4959                           prodl	equ	0xFF3
  4960                           intcon	equ	0xFF2
  4961                           postinc0	equ	0xFEE
  4962                           plusw0	equ	0xFEB
  4963                           wreg	equ	0xFE8
  4964                           indf1	equ	0xFE7
  4965                           postinc1	equ	0xFE6
  4966                           postdec1	equ	0xFE5
  4967                           plusw1	equ	0xFE3
  4968                           fsr1h	equ	0xFE2
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           plusw2	equ	0xFDB
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _GetDay *****************
  4979 ;; Defined at:
  4980 ;;		line 129 in file "libs/gps.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  4983 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  y               2   23[BANK0 ] int 
  4986 ;;  m               1   22[BANK0 ] unsigned char 
  4987 ;;  d               1   21[BANK0 ] unsigned char 
  4988 ;; Return value:  Size  Location     Type
  4989 ;;                  1    wreg      char 
  4990 ;; Registers used:
  4991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4992 ;; Tracked objects:
  4993 ;;		On entry : 3F/0
  4994 ;;		On exit  : 3F/0
  4995 ;;		Unchanged: 0/0
  4996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4997 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4998 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4999 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5000 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5001 ;;Total ram usage:       11 bytes
  5002 ;; Hardware stack levels used:    1
  5003 ;; Hardware stack levels required when called:   10
  5004 ;; This function calls:
  5005 ;;		___awdiv
  5006 ;;		___awmod
  5007 ;; This function is called by:
  5008 ;;		_ReadGPS_DATE_TIME
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text22
  5013  001CC2                     __ptext22:
  5014                           	opt stack 0
  5015  001CC2                     _GetDay:
  5016                           	opt stack 19
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5020                           
  5021                           ; BSR set to: 14
  5022                           ;incstack = 0
  5023  001CC2  516E               	movf	GetDay@Date& (0+255),w,b
  5024  001CC4  ECCF  F010         	call	PL100	;call to abstracted procedure
  5025  001CC8  D87F               	call	PL130	;call to abstracted procedure
  5026  001CCA  50DF               	movf	indf2,w,c
  5027  001CCC  0D0A               	mullw	10
  5028  001CCE  50F3               	movf	prodl,w,c
  5029  001CD0  256F               	addwf	??_GetDay& (0+255),w,b
  5030  001CD2  0FF0               	addlw	240
  5031  001CD4  6F75               	movwf	GetDay@d& (0+255),b
  5032                           
  5033                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5034  001CD6  516E               	movf	GetDay@Date& (0+255),w,b
  5035  001CD8  ECC3  F010         	call	PL60	;call to abstracted procedure
  5036  001CDC  D875               	call	PL130	;call to abstracted procedure
  5037  001CDE  0E02               	movlw	2
  5038  001CE0  D868               	call	PL16	;call to abstracted procedure
  5039  001CE2  256F               	addwf	??_GetDay& (0+255),w,b
  5040  001CE4  0FF0               	addlw	240
  5041  001CE6  6F76               	movwf	GetDay@m& (0+255),b
  5042                           
  5043                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  5044  001CE8  51FA               	movf	_CENTURY& (0+255),w,b
  5045  001CEA  0D64               	mullw	100
  5046  001CEC  CFF3 F06F          	movff	prodl,??_GetDay
  5047  001CF0  CFF4 F070          	movff	prodh,??_GetDay+1
  5048  001CF4  516E               	movf	GetDay@Date& (0+255),w,b
  5049  001CF6  6ED9               	movwf	fsr2l,c
  5050  001CF8  6ADA               	clrf	fsr2h,c
  5051  001CFA  0E04               	movlw	4
  5052  001CFC  D85A               	call	PL16	;call to abstracted procedure
  5053  001CFE  276F               	addwf	??_GetDay& (0+255),f,b
  5054  001D00  50F4               	movf	prodh,w,c
  5055  001D02  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  5056  001D04  516E               	movf	GetDay@Date& (0+255),w,b
  5057  001D06  ECC9  F010         	call	PL68	;call to abstracted procedure
  5058  001D0A  276F               	addwf	??_GetDay& (0+255),f,b
  5059  001D0C  0E00               	movlw	0
  5060  001D0E  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  5061  001D10  0EF0               	movlw	240
  5062  001D12  256F               	addwf	??_GetDay& (0+255),w,b
  5063  001D14  6F77               	movwf	GetDay@y& (0+255),b
  5064  001D16  0EFD               	movlw	253
  5065  001D18  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  5066  001D1A  6F78               	movwf	(GetDay@y+1)& (0+255),b
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  5070                           ;gps.c: 134: y -= m < 3;
  5071  001D1C  0E02               	movlw	2
  5072  001D1E  6576               	cpfsgt	GetDay@m& (0+255),b
  5073  001D20  D001               	goto	u3691
  5074  001D22  D002               	goto	u3690
  5075  001D24                     u3691:
  5076  001D24  0E01               	movlw	1
  5077  001D26  D001               	goto	u3700
  5078  001D28                     u3690:
  5079  001D28  0E00               	movlw	0
  5080  001D2A                     u3700:
  5081  001D2A  5F77               	subwf	GetDay@y& (0+255),f,b
  5082  001D2C  0E00               	movlw	0
  5083  001D2E  5B78               	subwfb	(GetDay@y+1)& (0+255),f,b
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  5087  001D30  5176               	movf	GetDay@m& (0+255),w,b
  5088  001D32  6F6F               	movwf	??_GetDay& (0+255),b
  5089  001D34  6B70               	clrf	(??_GetDay+1)& (0+255),b
  5090  001D36  90D8               	bcf	status,0,c
  5091  001D38  376F               	rlcf	??_GetDay& (0+255),f,b
  5092  001D3A  3770               	rlcf	(??_GetDay+1)& (0+255),f,b
  5093  001D3C  0E5A               	movlw	low (GetDay@t+65534)
  5094  001D3E  256F               	addwf	??_GetDay& (0+255),w,b
  5095  001D40  6ED9               	movwf	fsr2l,c
  5096  001D42  0E01               	movlw	high (GetDay@t+65534)
  5097  001D44  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  5098  001D46  6EDA               	movwf	fsr2h,c
  5099  001D48  CFDE F071          	movff	postinc2,??_GetDay+2
  5100  001D4C  CFDD F072          	movff	postdec2,??_GetDay+3
  5101  001D50  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5102  001D52  0E04               	movlw	4
  5103  001D54  D833               	call	PL94	;call to abstracted procedure
  5104  001D56  ECB0  F015         	call	___awdiv	;wreg free
  5105  001D5A  C060  F073         	movff	?___awdiv,??_GetDay+4
  5106  001D5E  C061  F074         	movff	?___awdiv+1,??_GetDay+5
  5107  001D62  0E01               	movlw	1
  5108  001D64  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  5109  001D66  0E90               	movlw	144
  5110  001D68  D829               	call	PL94	;call to abstracted procedure
  5111  001D6A  ECB0  F015         	call	___awdiv	;wreg free
  5112  001D6E  5160               	movf	?___awdiv& (0+255),w,b
  5113  001D70  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  5114  001D72  5161               	movf	(?___awdiv+1)& (0+255),w,b
  5115  001D74  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  5116  001D76  5175               	movf	GetDay@d& (0+255),w,b
  5117  001D78  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  5118  001D7A  0E00               	movlw	0
  5119  001D7C  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  5120  001D7E  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  5121  001D80  0E64               	movlw	100
  5122  001D82  D81C               	call	PL94	;call to abstracted procedure
  5123  001D84  ECB0  F015         	call	___awdiv	;wreg free
  5124  001D88  5160               	movf	?___awdiv& (0+255),w,b
  5125  001D8A  5F73               	subwf	(??_GetDay+4)& (0+255),f,b
  5126  001D8C  5161               	movf	(?___awdiv+1)& (0+255),w,b
  5127  001D8E  5B74               	subwfb	(??_GetDay+5)& (0+255),f,b
  5128  001D90  5171               	movf	(??_GetDay+2)& (0+255),w,b
  5129  001D92  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  5130  001D94  5172               	movf	(??_GetDay+3)& (0+255),w,b
  5131  001D96  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  5132  001D98  5177               	movf	GetDay@y& (0+255),w,b
  5133  001D9A  2573               	addwf	(??_GetDay+4)& (0+255),w,b
  5134  001D9C  6F68               	movwf	___awmod@dividend& (0+255),b
  5135  001D9E  5178               	movf	(GetDay@y+1)& (0+255),w,b
  5136  001DA0  2174               	addwfc	(??_GetDay+5)& (0+255),w,b
  5137  001DA2  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  5138  001DA4  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  5139  001DA6  0E07               	movlw	7
  5140  001DA8  6F6A               	movwf	___awmod@divisor& (0+255),b
  5141  001DAA  EC21  F016         	call	___awmod	;wreg free
  5142  001DAE  5168               	movf	?___awmod& (0+255),w,b
  5143                           
  5144                           ; BSR set to: 0
  5145  001DB0  0012               	return		;funcret
  5146  001DB2                     __end_of_GetDay:
  5147                           	opt stack 0
  5148  001DB2                     PL16:
  5149                           	opt stack 19
  5150  001DB2  26D9               	addwf	fsr2l,f,c
  5151  001DB4  50DF               	movf	indf2,w,c
  5152  001DB6  0D0A               	mullw	10
  5153  001DB8  50F3               	movf	prodl,w,c
  5154  001DBA  0012               	return	
  5155  001DBC                     __end_ofPL16:
  5156                           	opt stack 0
  5157  001DBC                     PL94:
  5158                           	opt stack 19
  5159  001DBC  6F62               	movwf	___awdiv@divisor& (0+255),b
  5160  001DBE  C077  F060         	movff	GetDay@y,___awdiv@dividend
  5161  001DC2  C078  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  5162  001DC6  0012               	return	
  5163  001DC8                     __end_ofPL94:
  5164                           	opt stack 0
  5165  001DC8                     PL130:
  5166                           	opt stack 19
  5167  001DC8  6F6F               	movwf	??_GetDay& (0+255),b
  5168  001DCA  516E               	movf	GetDay@Date& (0+255),w,b
  5169  001DCC  6ED9               	movwf	fsr2l,c
  5170  001DCE  6ADA               	clrf	fsr2h,c
  5171  001DD0  0012               	return	
  5172  001DD2                     __end_ofPL130:
  5173                           	opt stack 0
  5174                           tosu	equ	0xFFF
  5175                           tosh	equ	0xFFE
  5176                           tosl	equ	0xFFD
  5177                           pclath	equ	0xFFA
  5178                           tblptru	equ	0xFF8
  5179                           tblptrh	equ	0xFF7
  5180                           tblptrl	equ	0xFF6
  5181                           tablat	equ	0xFF5
  5182                           prodh	equ	0xFF4
  5183                           prodl	equ	0xFF3
  5184                           intcon	equ	0xFF2
  5185                           postinc0	equ	0xFEE
  5186                           plusw0	equ	0xFEB
  5187                           wreg	equ	0xFE8
  5188                           indf1	equ	0xFE7
  5189                           postinc1	equ	0xFE6
  5190                           postdec1	equ	0xFE5
  5191                           plusw1	equ	0xFE3
  5192                           fsr1h	equ	0xFE2
  5193                           fsr1l	equ	0xFE1
  5194                           indf2	equ	0xFDF
  5195                           postinc2	equ	0xFDE
  5196                           postdec2	equ	0xFDD
  5197                           plusw2	equ	0xFDB
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202 ;; *************** function ___awmod *****************
  5203 ;; Defined at:
  5204 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;  dividend        2    8[BANK0 ] int 
  5207 ;;  divisor         2   10[BANK0 ] int 
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;  sign            1   13[BANK0 ] unsigned char 
  5210 ;;  counter         1   12[BANK0 ] unsigned char 
  5211 ;; Return value:  Size  Location     Type
  5212 ;;                  2    8[BANK0 ] int 
  5213 ;; Registers used:
  5214 ;;		wreg, status,2, status,0
  5215 ;; Tracked objects:
  5216 ;;		On entry : 3F/0
  5217 ;;		On exit  : 3F/0
  5218 ;;		Unchanged: 0/0
  5219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5220 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5221 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5224 ;;Total ram usage:        6 bytes
  5225 ;; Hardware stack levels used:    1
  5226 ;; Hardware stack levels required when called:    9
  5227 ;; This function calls:
  5228 ;;		Nothing
  5229 ;; This function is called by:
  5230 ;;		_GetDay
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text23
  5235  002C42                     __ptext23:
  5236                           	opt stack 0
  5237  002C42                     ___awmod:
  5238                           	opt stack 19
  5239                           
  5240                           ; BSR set to: 0
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;incstack = 0
  5244  002C42  6B6D               	clrf	___awmod@sign& (0+255),b
  5245                           
  5246                           ; BSR set to: 0
  5247  002C44  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5248  002C46  D006               	goto	l3743
  5249                           
  5250                           ; BSR set to: 0
  5251  002C48  6D68               	negf	___awmod@dividend& (0+255),b
  5252  002C4A  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  5253  002C4C  B0D8               	btfsc	status,0,c
  5254  002C4E  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  5255                           
  5256                           ; BSR set to: 0
  5257  002C50  0E01               	movlw	1
  5258  002C52  6F6D               	movwf	___awmod@sign& (0+255),b
  5259  002C54                     l3743:
  5260                           
  5261                           ; BSR set to: 0
  5262  002C54  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5263  002C56  D004               	goto	l3747
  5264                           
  5265                           ; BSR set to: 0
  5266  002C58  6D6A               	negf	___awmod@divisor& (0+255),b
  5267  002C5A  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  5268  002C5C  B0D8               	btfsc	status,0,c
  5269  002C5E  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  5270  002C60                     l3747:
  5271                           
  5272                           ; BSR set to: 0
  5273  002C60  516A               	movf	___awmod@divisor& (0+255),w,b
  5274  002C62  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5275  002C64  E017               	bz	l3763
  5276                           
  5277                           ; BSR set to: 0
  5278  002C66  0E01               	movlw	1
  5279  002C68  6F6C               	movwf	___awmod@counter& (0+255),b
  5280  002C6A  D004               	goto	l3753
  5281  002C6C                     l3751:
  5282                           
  5283                           ; BSR set to: 0
  5284  002C6C  90D8               	bcf	status,0,c
  5285  002C6E  376A               	rlcf	___awmod@divisor& (0+255),f,b
  5286  002C70  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5287  002C72  2B6C               	incf	___awmod@counter& (0+255),f,b
  5288  002C74                     l3753:
  5289                           
  5290                           ; BSR set to: 0
  5291  002C74  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5292  002C76  D7FA               	goto	l3751
  5293  002C78                     l3755:
  5294                           
  5295                           ; BSR set to: 0
  5296  002C78  516A               	movf	___awmod@divisor& (0+255),w,b
  5297  002C7A  5D68               	subwf	___awmod@dividend& (0+255),w,b
  5298  002C7C  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  5299  002C7E  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5300  002C80  E304               	bnc	l3759
  5301                           
  5302                           ; BSR set to: 0
  5303  002C82  516A               	movf	___awmod@divisor& (0+255),w,b
  5304  002C84  5F68               	subwf	___awmod@dividend& (0+255),f,b
  5305  002C86  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  5306  002C88  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5307  002C8A                     l3759:
  5308                           
  5309                           ; BSR set to: 0
  5310  002C8A  90D8               	bcf	status,0,c
  5311  002C8C  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5312  002C8E  336A               	rrcf	___awmod@divisor& (0+255),f,b
  5313                           
  5314                           ; BSR set to: 0
  5315  002C90  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  5316  002C92  D7F2               	goto	l3755
  5317  002C94                     l3763:
  5318                           
  5319                           ; BSR set to: 0
  5320  002C94  516D               	movf	___awmod@sign& (0+255),w,b
  5321  002C96  E004               	bz	l3767
  5322                           
  5323                           ; BSR set to: 0
  5324  002C98  6D68               	negf	___awmod@dividend& (0+255),b
  5325  002C9A  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  5326  002C9C  B0D8               	btfsc	status,0,c
  5327  002C9E  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  5328  002CA0                     l3767:
  5329                           
  5330                           ; BSR set to: 0
  5331  002CA0  C068  F068         	movff	___awmod@dividend,?___awmod
  5332  002CA4  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  5333                           
  5334                           ; BSR set to: 0
  5335  002CA8  0012               	return		;funcret
  5336  002CAA                     __end_of___awmod:
  5337                           	opt stack 0
  5338                           tosu	equ	0xFFF
  5339                           tosh	equ	0xFFE
  5340                           tosl	equ	0xFFD
  5341                           pclath	equ	0xFFA
  5342                           tblptru	equ	0xFF8
  5343                           tblptrh	equ	0xFF7
  5344                           tblptrl	equ	0xFF6
  5345                           tablat	equ	0xFF5
  5346                           prodh	equ	0xFF4
  5347                           prodl	equ	0xFF3
  5348                           intcon	equ	0xFF2
  5349                           postinc0	equ	0xFEE
  5350                           plusw0	equ	0xFEB
  5351                           wreg	equ	0xFE8
  5352                           indf1	equ	0xFE7
  5353                           postinc1	equ	0xFE6
  5354                           postdec1	equ	0xFE5
  5355                           plusw1	equ	0xFE3
  5356                           fsr1h	equ	0xFE2
  5357                           fsr1l	equ	0xFE1
  5358                           indf2	equ	0xFDF
  5359                           postinc2	equ	0xFDE
  5360                           postdec2	equ	0xFDD
  5361                           plusw2	equ	0xFDB
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _EUSART1_Initialize *****************
  5367 ;; Defined at:
  5368 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;		None
  5373 ;; Return value:  Size  Location     Type
  5374 ;;                  1    wreg      void 
  5375 ;; Registers used:
  5376 ;;		wreg, status,2
  5377 ;; Tracked objects:
  5378 ;;		On entry : 3F/0
  5379 ;;		On exit  : 3F/0
  5380 ;;		Unchanged: 3F/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5386 ;;Total ram usage:        0 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    9
  5389 ;; This function calls:
  5390 ;;		Nothing
  5391 ;; This function is called by:
  5392 ;;		_ReadGPS_DATE_TIME
  5393 ;;		_SYSTEM_Initialize
  5394 ;; This function uses a non-reentrant model
  5395 ;;
  5396                           
  5397                           	psect	text24
  5398  0031BA                     __ptext24:
  5399                           	opt stack 0
  5400  0031BA                     _EUSART1_Initialize:
  5401                           	opt stack 20
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;eusart1.c: 60: BAUD1CON = 0x08;
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;incstack = 0
  5408  0031BA  0E08               	movlw	8
  5409  0031BC  6E9F               	movwf	3999,c	;volatile
  5410                           
  5411                           ;eusart1.c: 63: RC1STA = 0x90;
  5412  0031BE  0E90               	movlw	144
  5413  0031C0  6E9D               	movwf	3997,c	;volatile
  5414                           
  5415                           ;eusart1.c: 66: TX1STA = 0x84;
  5416  0031C2  0E84               	movlw	132
  5417  0031C4  6E9E               	movwf	3998,c	;volatile
  5418                           
  5419                           ;eusart1.c: 69: SP1BRGL = 0x67;
  5420  0031C6  0E67               	movlw	103
  5421  0031C8  6E9B               	movwf	3995,c	;volatile
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;eusart1.c: 72: SP1BRGH = 0x00;
  5425  0031CA  6A9C               	clrf	3996,c	;volatile
  5426                           
  5427                           ; BSR set to: 0
  5428  0031CC  0012               	return		;funcret
  5429  0031CE                     __end_of_EUSART1_Initialize:
  5430                           	opt stack 0
  5431                           tosu	equ	0xFFF
  5432                           tosh	equ	0xFFE
  5433                           tosl	equ	0xFFD
  5434                           pclath	equ	0xFFA
  5435                           tblptru	equ	0xFF8
  5436                           tblptrh	equ	0xFF7
  5437                           tblptrl	equ	0xFF6
  5438                           tablat	equ	0xFF5
  5439                           prodh	equ	0xFF4
  5440                           prodl	equ	0xFF3
  5441                           intcon	equ	0xFF2
  5442                           postinc0	equ	0xFEE
  5443                           plusw0	equ	0xFEB
  5444                           wreg	equ	0xFE8
  5445                           indf1	equ	0xFE7
  5446                           postinc1	equ	0xFE6
  5447                           postdec1	equ	0xFE5
  5448                           plusw1	equ	0xFE3
  5449                           fsr1h	equ	0xFE2
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           plusw2	equ	0xFDB
  5455                           fsr2h	equ	0xFDA
  5456                           fsr2l	equ	0xFD9
  5457                           status	equ	0xFD8
  5458                           
  5459 ;; *************** function _AdjustDayLightSaving *****************
  5460 ;; Defined at:
  5461 ;;		line 93 in file "libs/funcs.c"
  5462 ;; Parameters:    Size  Location     Type
  5463 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  Present         2   56[BANK0 ] unsigned short 
  5466 ;;  End             2   54[BANK0 ] unsigned short 
  5467 ;;  Start           2   52[BANK0 ] unsigned short 
  5468 ;; Return value:  Size  Location     Type
  5469 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  5470 ;; Registers used:
  5471 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5472 ;; Tracked objects:
  5473 ;;		On entry : 3F/0
  5474 ;;		On exit  : 3F/0
  5475 ;;		Unchanged: 0/0
  5476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5477 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5478 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5480 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5481 ;;Total ram usage:       17 bytes
  5482 ;; Hardware stack levels used:    1
  5483 ;; Hardware stack levels required when called:   13
  5484 ;; This function calls:
  5485 ;;		_DecreaseByADay
  5486 ;;		_IncreaseByADay
  5487 ;;		___wmul
  5488 ;; This function is called by:
  5489 ;;		_ReadGPS_DATE_TIME
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text25
  5494  001B9E                     __ptext25:
  5495                           	opt stack 0
  5496  001B9E                     _AdjustDayLightSaving:
  5497                           	opt stack 16
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;funcs.c: 94: UINT16 Start, End, Present;
  5501                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;incstack = 0
  5505  001B9E  C0DA  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  5506  001BA2  C0DB  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  5507  001BA6  D889               	call	PL156	;call to abstracted procedure
  5508  001BA8  EC51  F018         	call	___wmul	;wreg free
  5509  001BAC  51D8               	movf	_DAY_LIGHT_START& (0+255),w,b
  5510  001BAE  2560               	addwf	?___wmul& (0+255),w,b
  5511  001BB0  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  5512  001BB2  51D9               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  5513  001BB4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5514  001BB6  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  5515                           
  5516                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  5517  001BB8  C0D6  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  5518  001BBC  C0D7  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  5519  001BC0  D87C               	call	PL156	;call to abstracted procedure
  5520  001BC2  EC51  F018         	call	___wmul	;wreg free
  5521  001BC6  51D4               	movf	_DAY_LIGHT_END& (0+255),w,b
  5522  001BC8  2560               	addwf	?___wmul& (0+255),w,b
  5523  001BCA  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  5524  001BCC  51D5               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  5525  001BCE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5526  001BD0  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  5527                           
  5528                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  5529  001BD2  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  5530  001BD6  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  5531  001BDA  D86F               	call	PL156	;call to abstracted procedure
  5532  001BDC  EC51  F018         	call	___wmul	;wreg free
  5533  001BE0  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  5534  001BE2  2560               	addwf	?___wmul& (0+255),w,b
  5535  001BE4  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  5536  001BE6  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  5537  001BE8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  5538  001BEA  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;funcs.c: 98: if (Start > End) {
  5542  001BEC  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  5543  001BEE  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  5544  001BF0  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  5545  001BF2  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  5546  001BF4  E20F               	bc	l4017
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  5550  001BF6  D85C               	call	PL140	;call to abstracted procedure
  5551  001BF8  E205               	bc	l4015
  5552  001BFA                     l4013:
  5553                           
  5554                           ; BSR set to: 0
  5555  001BFA  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  5556  001BFC  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  5557  001BFE  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  5558  001C00  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  5559  001C02  E30B               	bnc	l649
  5560  001C04                     l4015:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;funcs.c: 100: dt.SECOND += 3600;
  5564  001C04  0E10               	movlw	16
  5565  001C06  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  5566  001C08  0E0E               	movlw	14
  5567  001C0A  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  5568  001C0C  0E00               	movlw	0
  5569  001C0E  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  5570  001C10  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  5571  001C12  D003               	goto	l649
  5572  001C14                     l4017:
  5573                           
  5574                           ; BSR set to: 0
  5575                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  5576  001C14  D84D               	call	PL140	;call to abstracted procedure
  5577  001C16  E301               	bnc	l649
  5578  001C18  D7F0               	goto	l4013
  5579  001C1A                     l649:
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;funcs.c: 104: }
  5583                           ;funcs.c: 105: if (dt.SECOND < 0) {
  5584  001C1A  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  5585  001C1C  D01A               	goto	l4027
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;funcs.c: 106: dt.SECOND += 86400;
  5589  001C1E  0E80               	movlw	128
  5590  001C20  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  5591  001C22  0E51               	movlw	81
  5592  001C24  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  5593  001C26  0E01               	movlw	1
  5594  001C28  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  5595  001C2A  0E00               	movlw	0
  5596  001C2C  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  5600  001C2E  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5601  001C32  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  5602  001C36  0E0A               	movlw	10
  5603  001C38                     u3921:
  5604  001C38  CFDB FFEB          	movff	plusw2,plusw0
  5605  001C3C  06E8               	decf	wreg,f,c
  5606  001C3E  E2FC               	bc	u3921
  5607  001C40  ECE6  F00F         	call	_DecreaseByADay	;wreg free
  5608  001C44  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5609  001C48  0E0A               	movlw	10
  5610  001C4A                     u3931:
  5611  001C4A  CFEB FFDB          	movff	plusw0,plusw2
  5612  001C4E  06E8               	decf	wreg,f,c
  5613  001C50  E2FC               	bc	u3931
  5614  001C52                     l4027:
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;funcs.c: 108: }
  5618                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  5619  001C52  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  5620  001C54  D023               	goto	l4033
  5621  001C56  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  5622  001C58  E107               	bnz	u3940
  5623  001C5A  0E81               	movlw	129
  5624  001C5C  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  5625  001C5E  0E51               	movlw	81
  5626  001C60  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  5627  001C62  0E01               	movlw	1
  5628  001C64  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  5629  001C66  E31A               	bnc	l4033
  5630  001C68                     u3940:
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;funcs.c: 110: dt.SECOND -= 86400;
  5634  001C68  0E80               	movlw	128
  5635  001C6A  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  5636  001C6C  0EAE               	movlw	174
  5637  001C6E  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  5638  001C70  0EFE               	movlw	254
  5639  001C72  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  5640  001C74  0EFF               	movlw	255
  5641  001C76  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  5645  001C78  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5646  001C7C  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  5647  001C80  0E0A               	movlw	10
  5648  001C82                     u3951:
  5649  001C82  CFDB FFEB          	movff	plusw2,plusw0
  5650  001C86  06E8               	decf	wreg,f,c
  5651  001C88  E2FC               	bc	u3951
  5652  001C8A  ECB9  F011         	call	_IncreaseByADay	;wreg free
  5653  001C8E  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5654  001C92  0E0A               	movlw	10
  5655  001C94                     u3961:
  5656  001C94  CFEB FFDB          	movff	plusw0,plusw2
  5657  001C98  06E8               	decf	wreg,f,c
  5658  001C9A  E2FC               	bc	u3961
  5659  001C9C                     l4033:
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;funcs.c: 112: }
  5663                           ;funcs.c: 113: return dt;
  5664  001C9C  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  5665  001CA0  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  5666  001CA4  0E0A               	movlw	10
  5667  001CA6                     u3971:
  5668  001CA6  CFDB FFEB          	movff	plusw2,plusw0
  5669  001CAA  06E8               	decf	wreg,f,c
  5670  001CAC  E2FC               	bc	u3971
  5671                           
  5672                           ; BSR set to: 0
  5673  001CAE  0012               	return		;funcret
  5674  001CB0                     __end_of_AdjustDayLightSaving:
  5675                           	opt stack 0
  5676  001CB0                     PL140:
  5677                           	opt stack 16
  5678  001CB0  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  5679  001CB2  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  5680  001CB4  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  5681  001CB6  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  5682  001CB8  0012               	return	
  5683  001CBA                     __end_ofPL140:
  5684                           	opt stack 0
  5685  001CBA                     PL156:
  5686                           	opt stack 16
  5687  001CBA  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  5688  001CBC  0E64               	movlw	100
  5689  001CBE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  5690  001CC0  0C64               	retlw	100
  5691  001CC2                     __end_ofPL156:
  5692                           	opt stack 0
  5693                           tosu	equ	0xFFF
  5694                           tosh	equ	0xFFE
  5695                           tosl	equ	0xFFD
  5696                           pclath	equ	0xFFA
  5697                           tblptru	equ	0xFF8
  5698                           tblptrh	equ	0xFF7
  5699                           tblptrl	equ	0xFF6
  5700                           tablat	equ	0xFF5
  5701                           prodh	equ	0xFF4
  5702                           prodl	equ	0xFF3
  5703                           intcon	equ	0xFF2
  5704                           postinc0	equ	0xFEE
  5705                           plusw0	equ	0xFEB
  5706                           wreg	equ	0xFE8
  5707                           indf1	equ	0xFE7
  5708                           postinc1	equ	0xFE6
  5709                           postdec1	equ	0xFE5
  5710                           plusw1	equ	0xFE3
  5711                           fsr1h	equ	0xFE2
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           plusw2	equ	0xFDB
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _IncreaseByADay *****************
  5722 ;; Defined at:
  5723 ;;		line 12 in file "libs/funcs.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  MonthDays       1   40[BANK0 ] char 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  5730 ;; Registers used:
  5731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 3F/0
  5734 ;;		On exit  : 3F/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5737 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5738 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5739 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5740 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5741 ;;Total ram usage:       14 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:   12
  5744 ;; This function calls:
  5745 ;;		_IncreaseByAMonth
  5746 ;;		___lwmod
  5747 ;; This function is called by:
  5748 ;;		_AdjustDayLightSaving
  5749 ;;		_ReadGPS_DATE_TIME
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text26
  5754  002372                     __ptext26:
  5755                           	opt stack 0
  5756  002372                     _IncreaseByADay:
  5757                           	opt stack 17
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;funcs.c: 13: dt.DATE.Day++;
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;incstack = 0
  5764  002372  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  5765  002374  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  5769  002376  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  5770  002378  0B7F               	andlw	127
  5771  00237A  06E8               	decf	wreg,f,c
  5772  00237C  E104               	bnz	l3519
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  5776  00237E  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  5777  002380  0B01               	andlw	-255
  5778  002382  0980               	iorlw	128
  5779  002384  D00A               	goto	L5
  5780  002386                     l3519:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;funcs.c: 16: else
  5784                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  5785  002386  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  5786  002388  0B7F               	andlw	127
  5787  00238A  6F86               	movwf	??_IncreaseByADay& (0+255),b
  5788  00238C  90D8               	bcf	status,0,c
  5789  00238E  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  5790  002390  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  5791  002392  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  5792  002394  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  5793  002396  0B01               	andlw	-255
  5794  002398  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  5795  00239A                     L5:
  5796  00239A  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  5800  00239C  90D8               	bcf	status,0,c
  5801  00239E  3581               	rlcf	(IncreaseByADay@dt+6)& (0+255),w,b
  5802  0023A0  6ED9               	movwf	fsr2l,c
  5803  0023A2  3582               	rlcf	(IncreaseByADay@dt+7)& (0+255),w,b
  5804  0023A4  EC4D  F010         	call	PL76	;call to abstracted procedure
  5805  0023A8  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  5809  0023AA  0E02               	movlw	2
  5810  0023AC  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  5811  0023AE  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  5812  0023B0  E107               	bnz	l3529
  5813                           
  5814                           ; BSR set to: 0
  5815  0023B2  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  5816  0023B6  0E03               	movlw	3
  5817  0023B8  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  5818  0023BA  E102               	bnz	l3529
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;funcs.c: 20: MonthDays = 29;
  5822  0023BC  0E1D               	movlw	29
  5823  0023BE  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  5824  0023C0                     l3529:
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  5828  0023C0  0E02               	movlw	2
  5829  0023C2  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  5830  0023C4  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  5831  0023C6  E10A               	bnz	l3535
  5832                           
  5833                           ; BSR set to: 0
  5834  0023C8  D840               	call	PL128	;call to abstracted procedure
  5835  0023CA  EC1C  F018         	call	PL134	;call to abstracted procedure
  5836  0023CE  EC8F  F017         	call	___lwmod	;wreg free
  5837  0023D2  5160               	movf	?___lwmod& (0+255),w,b
  5838  0023D4  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5839  0023D6  E102               	bnz	l3535
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;funcs.c: 22: MonthDays = 28;
  5843  0023D8  0E1C               	movlw	28
  5844  0023DA  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  5845  0023DC                     l3535:
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  5849  0023DC  0E02               	movlw	2
  5850  0023DE  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  5851  0023E0  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  5852  0023E2  E10A               	bnz	l3541
  5853                           
  5854                           ; BSR set to: 0
  5855  0023E4  D832               	call	PL128	;call to abstracted procedure
  5856  0023E6  EC54  F010         	call	PL146	;call to abstracted procedure
  5857  0023EA  EC8F  F017         	call	___lwmod	;wreg free
  5858  0023EE  5160               	movf	?___lwmod& (0+255),w,b
  5859  0023F0  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5860  0023F2  E102               	bnz	l3541
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;funcs.c: 24: MonthDays = 29;
  5864  0023F4  0E1D               	movlw	29
  5865  0023F6  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  5866  0023F8                     l3541:
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  5870  0023F8  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  5871  0023FC  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  5872  0023FE  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  5873  002400  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  5874  002402  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  5875  002404  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  5876  002406  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  5877  002408  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  5878  00240A  E215               	bc	l3547
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;funcs.c: 26: dt.DATE.Day = 1;
  5882  00240C  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  5883  00240E  0E01               	movlw	1
  5884  002410  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  5885                           
  5886                           ; BSR set to: 0
  5887                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  5888  002412  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  5889  002416  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  5890  00241A  0E0A               	movlw	10
  5891  00241C                     u3061:
  5892  00241C  CFDB FFEB          	movff	plusw2,plusw0
  5893  002420  06E8               	decf	wreg,f,c
  5894  002422  E2FC               	bc	u3061
  5895  002424  EC02  F017         	call	_IncreaseByAMonth	;wreg free
  5896  002428  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  5897  00242C  0E0A               	movlw	10
  5898  00242E                     u3071:
  5899  00242E  CFEB FFDB          	movff	plusw0,plusw2
  5900  002432  06E8               	decf	wreg,f,c
  5901  002434  E2FC               	bc	u3071
  5902  002436                     l3547:
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;funcs.c: 28: }
  5906                           ;funcs.c: 29: return dt;
  5907  002436  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  5908  00243A  EE00  F07B         	lfsr	0,?_IncreaseByADay
  5909  00243E  0E0A               	movlw	10
  5910  002440                     u3081:
  5911  002440  CFDB FFEB          	movff	plusw2,plusw0
  5912  002444  06E8               	decf	wreg,f,c
  5913  002446  E2FC               	bc	u3081
  5914                           
  5915                           ; BSR set to: 0
  5916  002448  0012               	return		;funcret
  5917  00244A                     __end_of_IncreaseByADay:
  5918                           	opt stack 0
  5919  00244A                     PL128:
  5920                           	opt stack 17
  5921  00244A  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  5922  00244E  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  5923  002452  0012               	return	
  5924  002454                     __end_ofPL128:
  5925                           	opt stack 0
  5926                           tosu	equ	0xFFF
  5927                           tosh	equ	0xFFE
  5928                           tosl	equ	0xFFD
  5929                           pclath	equ	0xFFA
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           intcon	equ	0xFF2
  5937                           postinc0	equ	0xFEE
  5938                           plusw0	equ	0xFEB
  5939                           wreg	equ	0xFE8
  5940                           indf1	equ	0xFE7
  5941                           postinc1	equ	0xFE6
  5942                           postdec1	equ	0xFE5
  5943                           plusw1	equ	0xFE3
  5944                           fsr1h	equ	0xFE2
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           postinc2	equ	0xFDE
  5948                           postdec2	equ	0xFDD
  5949                           plusw2	equ	0xFDB
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954 ;; *************** function _IncreaseByAMonth *****************
  5955 ;; Defined at:
  5956 ;;		line 32 in file "libs/funcs.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;		None
  5961 ;; Return value:  Size  Location     Type
  5962 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  5963 ;; Registers used:
  5964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5965 ;; Tracked objects:
  5966 ;;		On entry : 3F/0
  5967 ;;		On exit  : 3F/0
  5968 ;;		Unchanged: 0/0
  5969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5970 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5973 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5974 ;;Total ram usage:       11 bytes
  5975 ;; Hardware stack levels used:    1
  5976 ;; Hardware stack levels required when called:   11
  5977 ;; This function calls:
  5978 ;;		_IncreaseByAYear
  5979 ;; This function is called by:
  5980 ;;		_IncreaseByADay
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text27
  5985  002E04                     __ptext27:
  5986                           	opt stack 0
  5987  002E04                     _IncreaseByAMonth:
  5988                           	opt stack 17
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;funcs.c: 33: dt.DATE.Month++;
  5992                           
  5993                           ; BSR set to: 0
  5994                           ;incstack = 0
  5995  002E04  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  5996  002E06  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  6000  002E08  0E0D               	movlw	13
  6001  002E0A  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  6002  002E0C  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  6003  002E0E  E115               	bnz	l3405
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;funcs.c: 35: dt.DATE.Month = 1;
  6007  002E10  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  6008  002E12  0E01               	movlw	1
  6009  002E14  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  6013  002E16  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  6014  002E1A  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  6015  002E1E  0E0A               	movlw	10
  6016  002E20                     u2661:
  6017  002E20  CFDB FFEB          	movff	plusw2,plusw0
  6018  002E24  06E8               	decf	wreg,f,c
  6019  002E26  E2FC               	bc	u2661
  6020  002E28  EC05  F018         	call	_IncreaseByAYear	;wreg free
  6021  002E2C  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  6022  002E30  0E0A               	movlw	10
  6023  002E32                     u2671:
  6024  002E32  CFEB FFDB          	movff	plusw0,plusw2
  6025  002E36  06E8               	decf	wreg,f,c
  6026  002E38  E2FC               	bc	u2671
  6027  002E3A                     l3405:
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;funcs.c: 37: }
  6031                           ;funcs.c: 38: return dt;
  6032  002E3A  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  6033  002E3E  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  6034  002E42  0E0A               	movlw	10
  6035  002E44                     u2681:
  6036  002E44  CFDB FFEB          	movff	plusw2,plusw0
  6037  002E48  06E8               	decf	wreg,f,c
  6038  002E4A  E2FC               	bc	u2681
  6039                           
  6040                           ; BSR set to: 0
  6041  002E4C  0012               	return		;funcret
  6042  002E4E                     __end_of_IncreaseByAMonth:
  6043                           	opt stack 0
  6044                           tosu	equ	0xFFF
  6045                           tosh	equ	0xFFE
  6046                           tosl	equ	0xFFD
  6047                           pclath	equ	0xFFA
  6048                           tblptru	equ	0xFF8
  6049                           tblptrh	equ	0xFF7
  6050                           tblptrl	equ	0xFF6
  6051                           tablat	equ	0xFF5
  6052                           prodh	equ	0xFF4
  6053                           prodl	equ	0xFF3
  6054                           intcon	equ	0xFF2
  6055                           postinc0	equ	0xFEE
  6056                           plusw0	equ	0xFEB
  6057                           wreg	equ	0xFE8
  6058                           indf1	equ	0xFE7
  6059                           postinc1	equ	0xFE6
  6060                           postdec1	equ	0xFE5
  6061                           plusw1	equ	0xFE3
  6062                           fsr1h	equ	0xFE2
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           plusw2	equ	0xFDB
  6068                           fsr2h	equ	0xFDA
  6069                           fsr2l	equ	0xFD9
  6070                           status	equ	0xFD8
  6071                           
  6072 ;; *************** function _IncreaseByAYear *****************
  6073 ;; Defined at:
  6074 ;;		line 41 in file "libs/funcs.c"
  6075 ;; Parameters:    Size  Location     Type
  6076 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  6077 ;; Auto vars:     Size  Location     Type
  6078 ;;		None
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  6081 ;; Registers used:
  6082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : 3F/0
  6085 ;;		On exit  : 3F/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6088 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6091 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6092 ;;Total ram usage:       11 bytes
  6093 ;; Hardware stack levels used:    1
  6094 ;; Hardware stack levels required when called:   10
  6095 ;; This function calls:
  6096 ;;		___lwmod
  6097 ;; This function is called by:
  6098 ;;		_IncreaseByAMonth
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	text28
  6103  00300A                     __ptext28:
  6104                           	opt stack 0
  6105  00300A                     _IncreaseByAYear:
  6106                           	opt stack 17
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;funcs.c: 42: dt.YEAR++;
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;incstack = 0
  6113  00300A  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  6114  00300C  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  6118  00300E  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  6119  003012  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  6120  003016  D810               	call	PL134	;call to abstracted procedure
  6121  003018  EC8F  F017         	call	___lwmod	;wreg free
  6122  00301C  5160               	movf	?___lwmod& (0+255),w,b
  6123  00301E  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6124  003020  E101               	bnz	l3373
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;funcs.c: 44: CENTURY++;
  6128  003022  2BFA               	incf	_CENTURY& (0+255),f,b
  6129  003024                     l3373:
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;funcs.c: 45: return dt;
  6133  003024  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  6134  003028  EE00  F065         	lfsr	0,?_IncreaseByAYear
  6135  00302C  0E0A               	movlw	10
  6136  00302E                     u2581:
  6137  00302E  CFDB FFEB          	movff	plusw2,plusw0
  6138  003032  06E8               	decf	wreg,f,c
  6139  003034  E2FC               	bc	u2581
  6140                           
  6141                           ; BSR set to: 0
  6142  003036  0012               	return		;funcret
  6143  003038                     __end_of_IncreaseByAYear:
  6144                           	opt stack 0
  6145  003038                     PL134:
  6146                           	opt stack 17
  6147  003038  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  6148  00303A  0E64               	movlw	100
  6149  00303C  6F62               	movwf	___lwmod@divisor& (0+255),b
  6150  00303E  0C64               	retlw	100
  6151  003040                     __end_ofPL134:
  6152                           	opt stack 0
  6153                           tosu	equ	0xFFF
  6154                           tosh	equ	0xFFE
  6155                           tosl	equ	0xFFD
  6156                           pclath	equ	0xFFA
  6157                           tblptru	equ	0xFF8
  6158                           tblptrh	equ	0xFF7
  6159                           tblptrl	equ	0xFF6
  6160                           tablat	equ	0xFF5
  6161                           prodh	equ	0xFF4
  6162                           prodl	equ	0xFF3
  6163                           intcon	equ	0xFF2
  6164                           postinc0	equ	0xFEE
  6165                           plusw0	equ	0xFEB
  6166                           wreg	equ	0xFE8
  6167                           indf1	equ	0xFE7
  6168                           postinc1	equ	0xFE6
  6169                           postdec1	equ	0xFE5
  6170                           plusw1	equ	0xFE3
  6171                           fsr1h	equ	0xFE2
  6172                           fsr1l	equ	0xFE1
  6173                           indf2	equ	0xFDF
  6174                           postinc2	equ	0xFDE
  6175                           postdec2	equ	0xFDD
  6176                           plusw2	equ	0xFDB
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function _DecreaseByADay *****************
  6182 ;; Defined at:
  6183 ;;		line 57 in file "libs/funcs.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  MonthDays       1   39[BANK0 ] char 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  6190 ;; Registers used:
  6191 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 3F/0
  6194 ;;		On exit  : 3F/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6197 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6200 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6201 ;;Total ram usage:       13 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:   12
  6204 ;; This function calls:
  6205 ;;		_DecreaseByAMonth
  6206 ;;		___lwmod
  6207 ;; This function is called by:
  6208 ;;		_AdjustDayLightSaving
  6209 ;;		_ReadGPS_DATE_TIME
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text29
  6214  001FCC                     __ptext29:
  6215                           	opt stack 0
  6216  001FCC                     _DecreaseByADay:
  6217                           	opt stack 17
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  6221                           
  6222                           ; BSR set to: 0
  6223                           ;incstack = 0
  6224  001FCC  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  6225  001FCE  0B7F               	andlw	127
  6226  001FD0  0A40               	xorlw	64
  6227  001FD2  E104               	bnz	l3555
  6228                           
  6229                           ; BSR set to: 0
  6230                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  6231  001FD4  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  6232  001FD6  0B01               	andlw	-255
  6233  001FD8  0902               	iorlw	2
  6234  001FDA  D00A               	goto	L6
  6235  001FDC                     l3555:
  6236                           
  6237                           ; BSR set to: 0
  6238                           ;funcs.c: 60: else
  6239                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  6240  001FDC  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  6241  001FDE  0B7F               	andlw	127
  6242  001FE0  6F86               	movwf	??_DecreaseByADay& (0+255),b
  6243  001FE2  90D8               	bcf	status,0,c
  6244  001FE4  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  6245  001FE6  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  6246  001FE8  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  6247  001FEA  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  6248  001FEC  0B01               	andlw	-255
  6249  001FEE  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  6250  001FF0                     L6:
  6251  001FF0  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  6252                           
  6253                           ; BSR set to: 0
  6254                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  6255  001FF2  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  6256  001FF4  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  6257  001FF6  E144               	bnz	l3579
  6258                           
  6259                           ; BSR set to: 0
  6260                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  6261  001FF8  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  6262  001FFC  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  6263  002000  0E0A               	movlw	10
  6264  002002                     u3111:
  6265  002002  CFDB FFEB          	movff	plusw2,plusw0
  6266  002006  06E8               	decf	wreg,f,c
  6267  002008  E2FC               	bc	u3111
  6268  00200A  ECB6  F016         	call	_DecreaseByAMonth	;wreg free
  6269  00200E  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  6270  002012  0E0A               	movlw	10
  6271  002014                     u3121:
  6272  002014  CFEB FFDB          	movff	plusw0,plusw2
  6273  002018  06E8               	decf	wreg,f,c
  6274  00201A  E2FC               	bc	u3121
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  6278  00201C  90D8               	bcf	status,0,c
  6279  00201E  3581               	rlcf	(DecreaseByADay@dt+6)& (0+255),w,b
  6280  002020  6ED9               	movwf	fsr2l,c
  6281  002022  3582               	rlcf	(DecreaseByADay@dt+7)& (0+255),w,b
  6282  002024  D83A               	call	PL76	;call to abstracted procedure
  6283  002026  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6284                           
  6285                           ; BSR set to: 0
  6286                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  6287  002028  0E02               	movlw	2
  6288  00202A  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  6289  00202C  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  6290  00202E  E107               	bnz	l3567
  6291                           
  6292                           ; BSR set to: 0
  6293  002030  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  6294  002034  0E03               	movlw	3
  6295  002036  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  6296  002038  E102               	bnz	l3567
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;funcs.c: 66: MonthDays = 29;
  6300  00203A  0E1D               	movlw	29
  6301  00203C  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6302  00203E                     l3567:
  6303                           
  6304                           ; BSR set to: 0
  6305                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  6306  00203E  0E02               	movlw	2
  6307  002040  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  6308  002042  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  6309  002044  E10A               	bnz	l3573
  6310                           
  6311                           ; BSR set to: 0
  6312  002046  D835               	call	PL154	;call to abstracted procedure
  6313  002048  EC1C  F018         	call	PL134	;call to abstracted procedure
  6314  00204C  EC8F  F017         	call	___lwmod	;wreg free
  6315  002050  5160               	movf	?___lwmod& (0+255),w,b
  6316  002052  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6317  002054  E102               	bnz	l3573
  6318                           
  6319                           ; BSR set to: 0
  6320                           ;funcs.c: 68: MonthDays = 28;
  6321  002056  0E1C               	movlw	28
  6322  002058  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6323  00205A                     l3573:
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  6327  00205A  0E02               	movlw	2
  6328  00205C  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  6329  00205E  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  6330  002060  E109               	bnz	l631
  6331                           
  6332                           ; BSR set to: 0
  6333  002062  D827               	call	PL154	;call to abstracted procedure
  6334  002064  D821               	call	PL146	;call to abstracted procedure
  6335  002066  EC8F  F017         	call	___lwmod	;wreg free
  6336  00206A  5160               	movf	?___lwmod& (0+255),w,b
  6337  00206C  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6338  00206E  E102               	bnz	l631
  6339                           
  6340                           ; BSR set to: 0
  6341                           ;funcs.c: 70: MonthDays = 29;
  6342  002070  0E1D               	movlw	29
  6343  002072  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  6344  002074                     l631:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  6348  002074  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  6349  002076  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  6350  002078  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  6351  00207A  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  6352  00207C  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  6353                           
  6354                           ;funcs.c: 72: } else
  6355  00207E  D003               	goto	l3581
  6356  002080                     l3579:
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;funcs.c: 73: dt.DATE.Day--;
  6360  002080  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  6361  002082  A0D8               	btfss	status,0,c
  6362  002084  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  6363  002086                     l3581:
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;funcs.c: 74: return dt;
  6367  002086  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  6368  00208A  EE00  F07B         	lfsr	0,?_DecreaseByADay
  6369  00208E  0E0A               	movlw	10
  6370  002090                     u3191:
  6371  002090  CFDB FFEB          	movff	plusw2,plusw0
  6372  002094  06E8               	decf	wreg,f,c
  6373  002096  E2FC               	bc	u3191
  6374                           
  6375                           ; BSR set to: 0
  6376  002098  0012               	return		;funcret
  6377  00209A                     __end_of_DecreaseByADay:
  6378                           	opt stack 0
  6379  00209A                     PL76:
  6380                           	opt stack 17
  6381  00209A  6EDA               	movwf	fsr2h,c
  6382  00209C  0E42               	movlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  6383  00209E  26D9               	addwf	fsr2l,f,c
  6384  0020A0  0E01               	movlw	high (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  6385  0020A2  22DA               	addwfc	fsr2h,f,c
  6386  0020A4  50DF               	movf	indf2,w,c
  6387  0020A6  0012               	return	
  6388  0020A8                     __end_ofPL76:
  6389                           	opt stack 0
  6390  0020A8                     PL146:
  6391                           	opt stack 17
  6392  0020A8  0E01               	movlw	1
  6393  0020AA  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  6394  0020AC  0E90               	movlw	144
  6395  0020AE  6F62               	movwf	___lwmod@divisor& (0+255),b
  6396  0020B0  0C90               	retlw	144
  6397  0020B2                     __end_ofPL146:
  6398                           	opt stack 0
  6399  0020B2                     PL154:
  6400                           	opt stack 17
  6401  0020B2  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  6402  0020B6  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  6403  0020BA  0012               	return	
  6404  0020BC                     __end_ofPL154:
  6405                           	opt stack 0
  6406                           tosu	equ	0xFFF
  6407                           tosh	equ	0xFFE
  6408                           tosl	equ	0xFFD
  6409                           pclath	equ	0xFFA
  6410                           tblptru	equ	0xFF8
  6411                           tblptrh	equ	0xFF7
  6412                           tblptrl	equ	0xFF6
  6413                           tablat	equ	0xFF5
  6414                           prodh	equ	0xFF4
  6415                           prodl	equ	0xFF3
  6416                           intcon	equ	0xFF2
  6417                           postinc0	equ	0xFEE
  6418                           plusw0	equ	0xFEB
  6419                           wreg	equ	0xFE8
  6420                           indf1	equ	0xFE7
  6421                           postinc1	equ	0xFE6
  6422                           postdec1	equ	0xFE5
  6423                           plusw1	equ	0xFE3
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           plusw2	equ	0xFDB
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _DecreaseByAMonth *****************
  6435 ;; Defined at:
  6436 ;;		line 77 in file "libs/funcs.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  6443 ;; Registers used:
  6444 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 3F/0
  6447 ;;		On exit  : 3F/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6450 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6453 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6454 ;;Total ram usage:       11 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:   11
  6457 ;; This function calls:
  6458 ;;		_DecreaseByAYear
  6459 ;; This function is called by:
  6460 ;;		_DecreaseByADay
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           	psect	text30
  6465  002D6C                     __ptext30:
  6466                           	opt stack 0
  6467  002D6C                     _DecreaseByAMonth:
  6468                           	opt stack 17
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  6472                           
  6473                           ; BSR set to: 0
  6474                           ;incstack = 0
  6475  002D6C  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  6476  002D6E  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  6477  002D70  E116               	bnz	l3415
  6478                           
  6479                           ; BSR set to: 0
  6480                           ;funcs.c: 79: dt.DATE.Month = 12;
  6481  002D72  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  6482  002D74  0E0C               	movlw	12
  6483  002D76  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  6487  002D78  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  6488  002D7C  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  6489  002D80  0E0A               	movlw	10
  6490  002D82                     u2701:
  6491  002D82  CFDB FFEB          	movff	plusw2,plusw0
  6492  002D86  06E8               	decf	wreg,f,c
  6493  002D88  E2FC               	bc	u2701
  6494  002D8A  EC20  F018         	call	_DecreaseByAYear	;wreg free
  6495  002D8E  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  6496  002D92  0E0A               	movlw	10
  6497  002D94                     u2711:
  6498  002D94  CFEB FFDB          	movff	plusw0,plusw2
  6499  002D98  06E8               	decf	wreg,f,c
  6500  002D9A  E2FC               	bc	u2711
  6501                           
  6502                           ;funcs.c: 81: } else
  6503  002D9C  D003               	goto	l3417
  6504  002D9E                     l3415:
  6505                           
  6506                           ; BSR set to: 0
  6507                           ;funcs.c: 82: dt.DATE.Month--;
  6508  002D9E  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  6509  002DA0  A0D8               	btfss	status,0,c
  6510  002DA2  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  6511  002DA4                     l3417:
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;funcs.c: 83: return dt;
  6515  002DA4  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  6516  002DA8  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  6517  002DAC  0E0A               	movlw	10
  6518  002DAE                     u2721:
  6519  002DAE  CFDB FFEB          	movff	plusw2,plusw0
  6520  002DB2  06E8               	decf	wreg,f,c
  6521  002DB4  E2FC               	bc	u2721
  6522                           
  6523                           ; BSR set to: 0
  6524  002DB6  0012               	return		;funcret
  6525  002DB8                     __end_of_DecreaseByAMonth:
  6526                           	opt stack 0
  6527                           tosu	equ	0xFFF
  6528                           tosh	equ	0xFFE
  6529                           tosl	equ	0xFFD
  6530                           pclath	equ	0xFFA
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           prodh	equ	0xFF4
  6536                           prodl	equ	0xFF3
  6537                           intcon	equ	0xFF2
  6538                           postinc0	equ	0xFEE
  6539                           plusw0	equ	0xFEB
  6540                           wreg	equ	0xFE8
  6541                           indf1	equ	0xFE7
  6542                           postinc1	equ	0xFE6
  6543                           postdec1	equ	0xFE5
  6544                           plusw1	equ	0xFE3
  6545                           fsr1h	equ	0xFE2
  6546                           fsr1l	equ	0xFE1
  6547                           indf2	equ	0xFDF
  6548                           postinc2	equ	0xFDE
  6549                           postdec2	equ	0xFDD
  6550                           plusw2	equ	0xFDB
  6551                           fsr2h	equ	0xFDA
  6552                           fsr2l	equ	0xFD9
  6553                           status	equ	0xFD8
  6554                           
  6555 ;; *************** function _DecreaseByAYear *****************
  6556 ;; Defined at:
  6557 ;;		line 86 in file "libs/funcs.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  6564 ;; Registers used:
  6565 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 3F/0
  6568 ;;		On exit  : 3F/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6571 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6574 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6575 ;;Total ram usage:       11 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:   10
  6578 ;; This function calls:
  6579 ;;		___lwmod
  6580 ;; This function is called by:
  6581 ;;		_DecreaseByAMonth
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text31
  6586  003040                     __ptext31:
  6587                           	opt stack 0
  6588  003040                     _DecreaseByAYear:
  6589                           	opt stack 17
  6590                           
  6591                           ; BSR set to: 0
  6592                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;incstack = 0
  6596  003040  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  6597  003044  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  6598  003048  EC1C  F018         	call	PL134	;call to abstracted procedure
  6599  00304C  EC8F  F017         	call	___lwmod	;wreg free
  6600  003050  5160               	movf	?___lwmod& (0+255),w,b
  6601  003052  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  6602  003054  E101               	bnz	l641
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;funcs.c: 88: CENTURY--;
  6606  003056  07FA               	decf	_CENTURY& (0+255),f,b
  6607  003058                     l641:
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;funcs.c: 89: dt.YEAR--;
  6611  003058  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  6612  00305A  A0D8               	btfss	status,0,c
  6613  00305C  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;funcs.c: 90: return dt;
  6617  00305E  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  6618  003062  EE00  F065         	lfsr	0,?_DecreaseByAYear
  6619  003066  0E0A               	movlw	10
  6620  003068                     u2601:
  6621  003068  CFDB FFEB          	movff	plusw2,plusw0
  6622  00306C  06E8               	decf	wreg,f,c
  6623  00306E  E2FC               	bc	u2601
  6624                           
  6625                           ; BSR set to: 0
  6626  003070  0012               	return		;funcret
  6627  003072                     __end_of_DecreaseByAYear:
  6628                           	opt stack 0
  6629                           tosu	equ	0xFFF
  6630                           tosh	equ	0xFFE
  6631                           tosl	equ	0xFFD
  6632                           pclath	equ	0xFFA
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           postinc0	equ	0xFEE
  6641                           plusw0	equ	0xFEB
  6642                           wreg	equ	0xFE8
  6643                           indf1	equ	0xFE7
  6644                           postinc1	equ	0xFE6
  6645                           postdec1	equ	0xFE5
  6646                           plusw1	equ	0xFE3
  6647                           fsr1h	equ	0xFE2
  6648                           fsr1l	equ	0xFE1
  6649                           indf2	equ	0xFDF
  6650                           postinc2	equ	0xFDE
  6651                           postdec2	equ	0xFDD
  6652                           plusw2	equ	0xFDB
  6653                           fsr2h	equ	0xFDA
  6654                           fsr2l	equ	0xFD9
  6655                           status	equ	0xFD8
  6656                           
  6657 ;; *************** function ___lwmod *****************
  6658 ;; Defined at:
  6659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  6660 ;; Parameters:    Size  Location     Type
  6661 ;;  dividend        2    0[BANK0 ] unsigned int 
  6662 ;;  divisor         2    2[BANK0 ] unsigned int 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  counter         1    4[BANK0 ] unsigned char 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  2    0[BANK0 ] unsigned int 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0
  6669 ;; Tracked objects:
  6670 ;;		On entry : 3F/0
  6671 ;;		On exit  : 3F/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6677 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6678 ;;Total ram usage:        5 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    9
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_IncreaseByADay
  6685 ;;		_IncreaseByAYear
  6686 ;;		_DecreaseByADay
  6687 ;;		_DecreaseByAYear
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text32
  6692  002F1E                     __ptext32:
  6693                           	opt stack 0
  6694  002F1E                     ___lwmod:
  6695                           	opt stack 19
  6696                           
  6697                           ; BSR set to: 0
  6698                           
  6699                           ; BSR set to: 0
  6700                           ;incstack = 0
  6701  002F1E  5162               	movf	___lwmod@divisor& (0+255),w,b
  6702  002F20  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6703  002F22  E017               	bz	l1580
  6704                           
  6705                           ; BSR set to: 0
  6706  002F24  0E01               	movlw	1
  6707  002F26  6F64               	movwf	___lwmod@counter& (0+255),b
  6708  002F28  D004               	goto	l3347
  6709  002F2A                     l3345:
  6710                           
  6711                           ; BSR set to: 0
  6712  002F2A  90D8               	bcf	status,0,c
  6713  002F2C  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  6714  002F2E  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6715  002F30  2B64               	incf	___lwmod@counter& (0+255),f,b
  6716  002F32                     l3347:
  6717                           
  6718                           ; BSR set to: 0
  6719  002F32  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6720  002F34  D7FA               	goto	l3345
  6721  002F36                     l3349:
  6722                           
  6723                           ; BSR set to: 0
  6724  002F36  5162               	movf	___lwmod@divisor& (0+255),w,b
  6725  002F38  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  6726  002F3A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6727  002F3C  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6728  002F3E  E304               	bnc	l3353
  6729                           
  6730                           ; BSR set to: 0
  6731  002F40  5162               	movf	___lwmod@divisor& (0+255),w,b
  6732  002F42  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  6733  002F44  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6734  002F46  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6735  002F48                     l3353:
  6736                           
  6737                           ; BSR set to: 0
  6738  002F48  90D8               	bcf	status,0,c
  6739  002F4A  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6740  002F4C  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  6741                           
  6742                           ; BSR set to: 0
  6743  002F4E  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  6744  002F50  D7F2               	goto	l3349
  6745  002F52                     l1580:
  6746                           
  6747                           ; BSR set to: 0
  6748  002F52  C060  F060         	movff	___lwmod@dividend,?___lwmod
  6749  002F56  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  6750                           
  6751                           ; BSR set to: 0
  6752  002F5A  0012               	return		;funcret
  6753  002F5C                     __end_of___lwmod:
  6754                           	opt stack 0
  6755                           tosu	equ	0xFFF
  6756                           tosh	equ	0xFFE
  6757                           tosl	equ	0xFFD
  6758                           pclath	equ	0xFFA
  6759                           tblptru	equ	0xFF8
  6760                           tblptrh	equ	0xFF7
  6761                           tblptrl	equ	0xFF6
  6762                           tablat	equ	0xFF5
  6763                           prodh	equ	0xFF4
  6764                           prodl	equ	0xFF3
  6765                           intcon	equ	0xFF2
  6766                           postinc0	equ	0xFEE
  6767                           plusw0	equ	0xFEB
  6768                           wreg	equ	0xFE8
  6769                           indf1	equ	0xFE7
  6770                           postinc1	equ	0xFE6
  6771                           postdec1	equ	0xFE5
  6772                           plusw1	equ	0xFE3
  6773                           fsr1h	equ	0xFE2
  6774                           fsr1l	equ	0xFE1
  6775                           indf2	equ	0xFDF
  6776                           postinc2	equ	0xFDE
  6777                           postdec2	equ	0xFDD
  6778                           plusw2	equ	0xFDB
  6779                           fsr2h	equ	0xFDA
  6780                           fsr2l	equ	0xFD9
  6781                           status	equ	0xFD8
  6782                           
  6783 ;; *************** function _LoadAllFromEeprom *****************
  6784 ;; Defined at:
  6785 ;;		line 179 in file "libs/eeprom.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;		None
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;		None
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  1    wreg      void 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 3F/0
  6796 ;;		On exit  : 3F/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6803 ;;Total ram usage:        0 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:   11
  6806 ;; This function calls:
  6807 ;;		_LoadCyclesFromEeprom
  6808 ;;		_LoadEventsFromEeprom
  6809 ;;		_LoadSettingsFromEeprom
  6810 ;;		_LoadStatesFromEeprom
  6811 ;; This function is called by:
  6812 ;;		_main
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text33
  6817  003206                     __ptext33:
  6818                           	opt stack 0
  6819  003206                     _LoadAllFromEeprom:
  6820                           	opt stack 19
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;eeprom.c: 180: LoadSettingsFromEeprom ();
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;incstack = 0
  6827  003206  EC3B  F009         	call	_LoadSettingsFromEeprom	;wreg free
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;eeprom.c: 181: LoadEventsFromEeprom ();
  6831  00320A  ECDE  F00B         	call	_LoadEventsFromEeprom	;wreg free
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;eeprom.c: 182: LoadStatesFromEeprom();
  6835  00320E  EC08  F00B         	call	_LoadStatesFromEeprom	;wreg free
  6836                           
  6837                           ; BSR set to: 0
  6838                           ;eeprom.c: 183: LoadCyclesFromEeprom();
  6839  003212  EF96  F00C         	goto	_LoadCyclesFromEeprom	;wreg free
  6840  003216                     __end_of_LoadAllFromEeprom:
  6841                           	opt stack 0
  6842                           tosu	equ	0xFFF
  6843                           tosh	equ	0xFFE
  6844                           tosl	equ	0xFFD
  6845                           pclath	equ	0xFFA
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           prodh	equ	0xFF4
  6851                           prodl	equ	0xFF3
  6852                           intcon	equ	0xFF2
  6853                           postinc0	equ	0xFEE
  6854                           plusw0	equ	0xFEB
  6855                           wreg	equ	0xFE8
  6856                           indf1	equ	0xFE7
  6857                           postinc1	equ	0xFE6
  6858                           postdec1	equ	0xFE5
  6859                           plusw1	equ	0xFE3
  6860                           fsr1h	equ	0xFE2
  6861                           fsr1l	equ	0xFE1
  6862                           indf2	equ	0xFDF
  6863                           postinc2	equ	0xFDE
  6864                           postdec2	equ	0xFDD
  6865                           plusw2	equ	0xFDB
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _LoadStatesFromEeprom *****************
  6871 ;; Defined at:
  6872 ;;		line 128 in file "libs/eeprom.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;		None
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  j               2   22[BANK0 ] int 
  6877 ;;  j               2   20[BANK0 ] int 
  6878 ;;  i               2   26[BANK0 ] int 
  6879 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  6880 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  6881 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  6882 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  6883 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  6884 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      void 
  6887 ;; Registers used:
  6888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6889 ;; Tracked objects:
  6890 ;;		On entry : 3F/0
  6891 ;;		On exit  : 3F/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6895 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6896 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6897 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6898 ;;Total ram usage:       20 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:   10
  6901 ;; This function calls:
  6902 ;;		_ReadEeprom
  6903 ;;		___awdiv
  6904 ;;		___wmul
  6905 ;; This function is called by:
  6906 ;;		_LoadAllFromEeprom
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           	psect	text34
  6911  001610                     __ptext34:
  6912                           	opt stack 0
  6913  001610                     _LoadStatesFromEeprom:
  6914                           	opt stack 19
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;eeprom.c: 129: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  6918                           ;eeprom.c: 130: UINT8 AudAddInc;
  6919                           ;eeprom.c: 131: AddStates.Val = 0xE0;
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;incstack = 0
  6923  001610  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  6924  001612  0EE0               	movlw	224
  6925  001614  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  6926                           
  6927                           ;eeprom.c: 132: AddAudioNormal.Val = 0x17;
  6928  001616  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  6929  001618  0E17               	movlw	23
  6930  00161A  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  6931                           
  6932                           ;eeprom.c: 133: AddAudioSpecial.Val = 0x2B;
  6933  00161C  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  6934  00161E  0E2B               	movlw	43
  6935  001620  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;eeprom.c: 134: for (int i=0; i<160; i++) {
  6939  001622  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  6940  001624  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  6941  001626                     l4373:
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;eeprom.c: 135: STATES[i].PERIOD = ReadEeprom(AddStates);
  6945  001626  D8A3               	call	PL14	;call to abstracted procedure
  6946  001628  EC51  F018         	call	___wmul	;wreg free
  6947  00162C  0EF0               	movlw	low _STATES
  6948  00162E  2560               	addwf	?___wmul& (0+255),w,b
  6949  001630  6ED9               	movwf	fsr2l,c
  6950  001632  0E02               	movlw	high _STATES
  6951  001634  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6952  001636  D8B3               	call	PL96	;call to abstracted procedure
  6953  001638  ECE7  F018         	call	_ReadEeprom	;wreg free
  6954  00163C  6EDF               	movwf	indf2,c
  6955                           
  6956                           ;eeprom.c: 136: AddStates.Val++;
  6957  00163E  0100               	movlb	0	; () banked
  6958  001640  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  6959  001642  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6960                           
  6961                           ; BSR set to: 0
  6962                           ;eeprom.c: 137: for (int j=0; j<2; j++) {
  6963  001644  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  6964  001646  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  6965  001648                     l4383:
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;eeprom.c: 138: STATES[i].ON[j] = ReadEeprom(AddStates);
  6969  001648  D892               	call	PL14	;call to abstracted procedure
  6970  00164A  EC51  F018         	call	___wmul	;wreg free
  6971  00164E  D8AD               	call	PL136	;call to abstracted procedure
  6972  001650  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  6973  001652  0E00               	movlw	0
  6974  001654  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6975  001656  5160               	movf	?___wmul& (0+255),w,b
  6976  001658  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  6977  00165A  5161               	movf	(?___wmul+1)& (0+255),w,b
  6978  00165C  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6979  00165E  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  6980  001660  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  6981  001662  6ED9               	movwf	fsr2l,c
  6982  001664  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  6983  001666  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6984  001668  D89A               	call	PL96	;call to abstracted procedure
  6985  00166A  ECE7  F018         	call	_ReadEeprom	;wreg free
  6986  00166E  6EDF               	movwf	indf2,c
  6987                           
  6988                           ;eeprom.c: 139: AddStates.Val++;
  6989  001670  0100               	movlb	0	; () banked
  6990  001672  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  6991  001674  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6992                           
  6993                           ; BSR set to: 0
  6994  001676  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  6995  001678  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  6996                           
  6997                           ; BSR set to: 0
  6998  00167A  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  6999  00167C  D7E5               	goto	l4383
  7000  00167E  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  7001  001680  E103               	bnz	u4330
  7002  001682  0E02               	movlw	2
  7003  001684  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  7004  001686  E3E0               	bnc	l4383
  7005  001688                     u4330:
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;eeprom.c: 140: }
  7009                           ;eeprom.c: 141: for (int j=0; j<2; j++) {
  7010  001688  6B76               	clrf	LoadStatesFromEeprom@j_1399& (0+255),b
  7011  00168A  6B77               	clrf	(LoadStatesFromEeprom@j_1399+1)& (0+255),b
  7012  00168C                     l4395:
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;eeprom.c: 142: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  7016  00168C  D870               	call	PL14	;call to abstracted procedure
  7017  00168E  EC51  F018         	call	___wmul	;wreg free
  7018  001692  D88B               	call	PL136	;call to abstracted procedure
  7019  001694  0E03               	movlw	3
  7020  001696  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  7021  001698  0E00               	movlw	0
  7022  00169A  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7023  00169C  5160               	movf	?___wmul& (0+255),w,b
  7024  00169E  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  7025  0016A0  5161               	movf	(?___wmul+1)& (0+255),w,b
  7026  0016A2  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7027  0016A4  5176               	movf	LoadStatesFromEeprom@j_1399& (0+255),w,b
  7028  0016A6  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  7029  0016A8  6ED9               	movwf	fsr2l,c
  7030  0016AA  5177               	movf	(LoadStatesFromEeprom@j_1399+1)& (0+255),w,b
  7031  0016AC  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7032  0016AE  D877               	call	PL96	;call to abstracted procedure
  7033  0016B0  ECE7  F018         	call	_ReadEeprom	;wreg free
  7034  0016B4  6EDF               	movwf	indf2,c
  7035                           
  7036                           ;eeprom.c: 143: AddStates.Val++;
  7037  0016B6  0100               	movlb	0	; () banked
  7038  0016B8  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  7039  0016BA  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  7040                           
  7041                           ; BSR set to: 0
  7042  0016BC  4B76               	infsnz	LoadStatesFromEeprom@j_1399& (0+255),f,b
  7043  0016BE  2B77               	incf	(LoadStatesFromEeprom@j_1399+1)& (0+255),f,b
  7044                           
  7045                           ; BSR set to: 0
  7046  0016C0  BF77               	btfsc	(LoadStatesFromEeprom@j_1399+1)& (0+255),7,b
  7047  0016C2  D7E4               	goto	l4395
  7048  0016C4  5177               	movf	(LoadStatesFromEeprom@j_1399+1)& (0+255),w,b
  7049  0016C6  E103               	bnz	u4340
  7050  0016C8  0E02               	movlw	2
  7051  0016CA  5D76               	subwf	LoadStatesFromEeprom@j_1399& (0+255),w,b
  7052  0016CC  E3DF               	bnc	l4395
  7053  0016CE                     u4340:
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;eeprom.c: 144: }
  7057                           ;eeprom.c: 145: AudAddInc = i/8;
  7058  0016CE  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  7059  0016D2  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  7060  0016D6  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  7061  0016D8  0E08               	movlw	8
  7062  0016DA  6F62               	movwf	___awdiv@divisor& (0+255),b
  7063  0016DC  ECB0  F015         	call	___awdiv	;wreg free
  7064  0016E0  5160               	movf	?___awdiv& (0+255),w,b
  7065  0016E2  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;eeprom.c: 146: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  7069  0016E4  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  7070  0016E6  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  7071  0016E8  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  7072  0016EA  0E00               	movlw	0
  7073  0016EC  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  7074  0016EE  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  7075                           
  7076                           ; BSR set to: 0
  7077                           ;eeprom.c: 147: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  7078  0016F0  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  7079  0016F2  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  7080  0016F4  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  7081  0016F6  0E00               	movlw	0
  7082  0016F8  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  7083  0016FA  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  7084                           
  7085                           ;eeprom.c: 148: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  7086  0016FC  D847               	call	PL86	;call to abstracted procedure
  7087  0016FE  D001               	goto	u4354
  7088  001700                     u4355:
  7089  001700  D859               	call	PL158	;call to abstracted procedure
  7090  001702                     u4354:
  7091  001702  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  7092  001704  D7FD               	goto	u4355
  7093  001706  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  7094  00170A  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  7095  00170E  ECE7  F018         	call	_ReadEeprom	;wreg free
  7096  001712  0100               	movlb	0	; () banked
  7097  001714  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7098  001716  E006               	bz	l4411
  7099                           
  7100                           ; BSR set to: 0
  7101                           ;eeprom.c: 149: STATES[i].AUDIO = AUDIO_NORMAL;
  7102  001718  D82A               	call	PL14	;call to abstracted procedure
  7103  00171A  EC51  F018         	call	___wmul	;wreg free
  7104  00171E  D82F               	call	PL72	;call to abstracted procedure
  7105  001720  0E01               	movlw	1
  7106  001722  D019               	goto	L7
  7107  001724                     l4411:
  7108                           
  7109                           ; BSR set to: 0
  7110                           ;eeprom.c: 150: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  7111  001724  D833               	call	PL86	;call to abstracted procedure
  7112  001726  D001               	goto	u4374
  7113  001728                     u4375:
  7114  001728  D845               	call	PL158	;call to abstracted procedure
  7115  00172A                     u4374:
  7116  00172A  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  7117  00172C  D7FD               	goto	u4375
  7118  00172E  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  7119  001732  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  7120  001736  ECE7  F018         	call	_ReadEeprom	;wreg free
  7121  00173A  0100               	movlb	0	; () banked
  7122  00173C  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  7123  00173E  E006               	bz	l4415
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;eeprom.c: 151: STATES[i].AUDIO = AUDIO_SPECIAL;
  7127  001740  D816               	call	PL14	;call to abstracted procedure
  7128  001742  EC51  F018         	call	___wmul	;wreg free
  7129  001746  D81B               	call	PL72	;call to abstracted procedure
  7130  001748  0E02               	movlw	2
  7131  00174A  D005               	goto	L7
  7132  00174C                     l4415:
  7133                           
  7134                           ; BSR set to: 0
  7135                           ;eeprom.c: 152: else
  7136                           ;eeprom.c: 153: STATES[i].AUDIO = AUDIO_OFF;
  7137  00174C  D810               	call	PL14	;call to abstracted procedure
  7138  00174E  EC51  F018         	call	___wmul	;wreg free
  7139  001752  D815               	call	PL72	;call to abstracted procedure
  7140  001754  0E00               	movlw	0
  7141  001756                     L7:
  7142  001756  6EDF               	movwf	indf2,c
  7143                           
  7144                           ; BSR set to: 0
  7145  001758  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  7146  00175A  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  7147                           
  7148                           ; BSR set to: 0
  7149  00175C  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  7150  00175E  D763               	goto	l4373
  7151  001760  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  7152  001762  E104               	bnz	u4390
  7153  001764  0EA0               	movlw	160
  7154  001766  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  7155  001768  E201 D75D          	bnc	l4373
  7156  00176C                     u4390:
  7157                           
  7158                           ; BSR set to: 0
  7159  00176C  0012               	return		;funcret
  7160  00176E                     __end_of_LoadStatesFromEeprom:
  7161                           	opt stack 0
  7162  00176E                     PL14:
  7163                           	opt stack 19
  7164  00176E  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  7165  001772  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  7166  001776  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7167  001778  0E06               	movlw	6
  7168  00177A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7169  00177C  0C06               	retlw	6
  7170  00177E                     __end_ofPL14:
  7171                           	opt stack 0
  7172  00177E                     PL72:
  7173                           	opt stack 19
  7174  00177E  0EF5               	movlw	low (_STATES+5)
  7175  001780  2560               	addwf	?___wmul& (0+255),w,b
  7176  001782  6ED9               	movwf	fsr2l,c
  7177  001784  0E02               	movlw	high (_STATES+5)
  7178  001786  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7179  001788  6EDA               	movwf	fsr2h,c
  7180  00178A  0012               	return	
  7181  00178C                     __end_ofPL72:
  7182                           	opt stack 0
  7183  00178C                     PL86:
  7184                           	opt stack 19
  7185  00178C  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  7186  001790  0E07               	movlw	7
  7187  001792  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  7188  001794  0E80               	movlw	128
  7189  001796  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  7190  001798  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  7191  00179A  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  7192  00179C  0C80               	retlw	128
  7193  00179E                     __end_ofPL86:
  7194                           	opt stack 0
  7195  00179E                     PL96:
  7196                           	opt stack 19
  7197  00179E  6EDA               	movwf	fsr2h,c
  7198  0017A0  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  7199  0017A4  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  7200  0017A8  0012               	return	
  7201  0017AA                     __end_ofPL96:
  7202                           	opt stack 0
  7203  0017AA                     PL136:
  7204                           	opt stack 19
  7205  0017AA  0EF0               	movlw	low _STATES
  7206  0017AC  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  7207  0017AE  0E02               	movlw	high _STATES
  7208  0017B0  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  7209  0017B2  0012               	return	
  7210  0017B4                     __end_ofPL136:
  7211                           	opt stack 0
  7212  0017B4                     PL158:
  7213                           	opt stack 19
  7214  0017B4  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  7215  0017B6  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  7216  0017B8  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  7217  0017BA  0012               	return	
  7218  0017BC                     __end_ofPL158:
  7219                           	opt stack 0
  7220                           tosu	equ	0xFFF
  7221                           tosh	equ	0xFFE
  7222                           tosl	equ	0xFFD
  7223                           pclath	equ	0xFFA
  7224                           tblptru	equ	0xFF8
  7225                           tblptrh	equ	0xFF7
  7226                           tblptrl	equ	0xFF6
  7227                           tablat	equ	0xFF5
  7228                           prodh	equ	0xFF4
  7229                           prodl	equ	0xFF3
  7230                           intcon	equ	0xFF2
  7231                           postinc0	equ	0xFEE
  7232                           plusw0	equ	0xFEB
  7233                           wreg	equ	0xFE8
  7234                           indf1	equ	0xFE7
  7235                           postinc1	equ	0xFE6
  7236                           postdec1	equ	0xFE5
  7237                           plusw1	equ	0xFE3
  7238                           fsr1h	equ	0xFE2
  7239                           fsr1l	equ	0xFE1
  7240                           indf2	equ	0xFDF
  7241                           postinc2	equ	0xFDE
  7242                           postdec2	equ	0xFDD
  7243                           plusw2	equ	0xFDB
  7244                           fsr2h	equ	0xFDA
  7245                           fsr2l	equ	0xFD9
  7246                           status	equ	0xFD8
  7247                           
  7248 ;; *************** function ___awdiv *****************
  7249 ;; Defined at:
  7250 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;  dividend        2    0[BANK0 ] int 
  7253 ;;  divisor         2    2[BANK0 ] int 
  7254 ;; Auto vars:     Size  Location     Type
  7255 ;;  quotient        2    6[BANK0 ] int 
  7256 ;;  sign            1    5[BANK0 ] unsigned char 
  7257 ;;  counter         1    4[BANK0 ] unsigned char 
  7258 ;; Return value:  Size  Location     Type
  7259 ;;                  2    0[BANK0 ] int 
  7260 ;; Registers used:
  7261 ;;		wreg, status,2, status,0
  7262 ;; Tracked objects:
  7263 ;;		On entry : 3F/0
  7264 ;;		On exit  : 3F/0
  7265 ;;		Unchanged: 0/0
  7266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7267 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7268 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7270 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7271 ;;Total ram usage:        8 bytes
  7272 ;; Hardware stack levels used:    1
  7273 ;; Hardware stack levels required when called:    9
  7274 ;; This function calls:
  7275 ;;		Nothing
  7276 ;; This function is called by:
  7277 ;;		_GetDay
  7278 ;;		_LoadStatesFromEeprom
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           	psect	text35
  7283  002B60                     __ptext35:
  7284                           	opt stack 0
  7285  002B60                     ___awdiv:
  7286                           	opt stack 19
  7287                           
  7288                           ; BSR set to: 0
  7289                           
  7290                           ; BSR set to: 0
  7291                           ;incstack = 0
  7292  002B60  6B65               	clrf	___awdiv@sign& (0+255),b
  7293                           
  7294                           ; BSR set to: 0
  7295  002B62  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7296  002B64  D006               	goto	l3699
  7297                           
  7298                           ; BSR set to: 0
  7299  002B66  6D62               	negf	___awdiv@divisor& (0+255),b
  7300  002B68  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7301  002B6A  B0D8               	btfsc	status,0,c
  7302  002B6C  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7303                           
  7304                           ; BSR set to: 0
  7305  002B6E  0E01               	movlw	1
  7306  002B70  6F65               	movwf	___awdiv@sign& (0+255),b
  7307  002B72                     l3699:
  7308                           
  7309                           ; BSR set to: 0
  7310  002B72  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7311  002B74  D006               	goto	l3705
  7312                           
  7313                           ; BSR set to: 0
  7314  002B76  6D60               	negf	___awdiv@dividend& (0+255),b
  7315  002B78  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7316  002B7A  B0D8               	btfsc	status,0,c
  7317  002B7C  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7318                           
  7319                           ; BSR set to: 0
  7320  002B7E  0E01               	movlw	1
  7321  002B80  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  7322  002B82                     l3705:
  7323                           
  7324                           ; BSR set to: 0
  7325  002B82  6B66               	clrf	___awdiv@quotient& (0+255),b
  7326  002B84  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  7327                           
  7328                           ; BSR set to: 0
  7329  002B86  5162               	movf	___awdiv@divisor& (0+255),w,b
  7330  002B88  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7331  002B8A  E01B               	bz	l3727
  7332                           
  7333                           ; BSR set to: 0
  7334  002B8C  0E01               	movlw	1
  7335  002B8E  6F64               	movwf	___awdiv@counter& (0+255),b
  7336  002B90  D004               	goto	l3713
  7337  002B92                     l3711:
  7338                           
  7339                           ; BSR set to: 0
  7340  002B92  90D8               	bcf	status,0,c
  7341  002B94  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  7342  002B96  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7343  002B98  2B64               	incf	___awdiv@counter& (0+255),f,b
  7344  002B9A                     l3713:
  7345                           
  7346                           ; BSR set to: 0
  7347  002B9A  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7348  002B9C  D7FA               	goto	l3711
  7349  002B9E                     l3715:
  7350                           
  7351                           ; BSR set to: 0
  7352  002B9E  90D8               	bcf	status,0,c
  7353  002BA0  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  7354  002BA2  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7355                           
  7356                           ; BSR set to: 0
  7357  002BA4  5162               	movf	___awdiv@divisor& (0+255),w,b
  7358  002BA6  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  7359  002BA8  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7360  002BAA  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7361  002BAC  E305               	bnc	l3723
  7362                           
  7363                           ; BSR set to: 0
  7364  002BAE  5162               	movf	___awdiv@divisor& (0+255),w,b
  7365  002BB0  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  7366  002BB2  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7367  002BB4  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7368                           
  7369                           ; BSR set to: 0
  7370  002BB6  8166               	bsf	___awdiv@quotient& (0+255),0,b
  7371  002BB8                     l3723:
  7372                           
  7373                           ; BSR set to: 0
  7374  002BB8  90D8               	bcf	status,0,c
  7375  002BBA  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7376  002BBC  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  7377                           
  7378                           ; BSR set to: 0
  7379  002BBE  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  7380  002BC0  D7EE               	goto	l3715
  7381  002BC2                     l3727:
  7382                           
  7383                           ; BSR set to: 0
  7384  002BC2  5165               	movf	___awdiv@sign& (0+255),w,b
  7385  002BC4  E004               	bz	l3731
  7386                           
  7387                           ; BSR set to: 0
  7388  002BC6  6D66               	negf	___awdiv@quotient& (0+255),b
  7389  002BC8  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7390  002BCA  B0D8               	btfsc	status,0,c
  7391  002BCC  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7392  002BCE                     l3731:
  7393                           
  7394                           ; BSR set to: 0
  7395  002BCE  C066  F060         	movff	___awdiv@quotient,?___awdiv
  7396  002BD2  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  7397                           
  7398                           ; BSR set to: 0
  7399  002BD6  0012               	return		;funcret
  7400  002BD8                     __end_of___awdiv:
  7401                           	opt stack 0
  7402                           tosu	equ	0xFFF
  7403                           tosh	equ	0xFFE
  7404                           tosl	equ	0xFFD
  7405                           pclath	equ	0xFFA
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           postinc0	equ	0xFEE
  7414                           plusw0	equ	0xFEB
  7415                           wreg	equ	0xFE8
  7416                           indf1	equ	0xFE7
  7417                           postinc1	equ	0xFE6
  7418                           postdec1	equ	0xFE5
  7419                           plusw1	equ	0xFE3
  7420                           fsr1h	equ	0xFE2
  7421                           fsr1l	equ	0xFE1
  7422                           indf2	equ	0xFDF
  7423                           postinc2	equ	0xFDE
  7424                           postdec2	equ	0xFDD
  7425                           plusw2	equ	0xFDB
  7426                           fsr2h	equ	0xFDA
  7427                           fsr2l	equ	0xFD9
  7428                           status	equ	0xFD8
  7429                           
  7430 ;; *************** function _LoadSettingsFromEeprom *****************
  7431 ;; Defined at:
  7432 ;;		line 33 in file "libs/eeprom.c"
  7433 ;; Parameters:    Size  Location     Type
  7434 ;;		None
  7435 ;; Auto vars:     Size  Location     Type
  7436 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  7437 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  7438 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      void 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 3F/0
  7445 ;;		On exit  : 3F/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7449 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7451 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7452 ;;Total ram usage:        8 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:   10
  7455 ;; This function calls:
  7456 ;;		_ReadEeprom
  7457 ;;		___wmul
  7458 ;; This function is called by:
  7459 ;;		_LoadAllFromEeprom
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text36
  7464  001276                     __ptext36:
  7465                           	opt stack 0
  7466  001276                     _LoadSettingsFromEeprom:
  7467                           	opt stack 19
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;eeprom.c: 34: WORD_VAL Temp16, Address;
  7471                           ;eeprom.c: 35: DWORD_VAL Temp32;
  7472                           ;eeprom.c: 37: Address.Val = 0x00;
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;incstack = 0
  7476  001276  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  7477  001278  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;eeprom.c: 38: Temp16.v[0] = ReadEeprom(Address);
  7481  00127A  D8E3               	call	PL8	;call to abstracted procedure
  7482  00127C  ECE7  F018         	call	_ReadEeprom	;wreg free
  7483  001280  0100               	movlb	0	; () banked
  7484  001282  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;eeprom.c: 39: Address.Val++;
  7488  001284  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7489  001286  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7490                           
  7491                           ; BSR set to: 0
  7492                           ;eeprom.c: 40: Temp16.v[1] = ReadEeprom(Address);
  7493  001288  D8DC               	call	PL8	;call to abstracted procedure
  7494  00128A  ECE7  F018         	call	_ReadEeprom	;wreg free
  7495  00128E  0100               	movlb	0	; () banked
  7496  001290  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;eeprom.c: 41: TIME_ZONE = (INT16) 60*Temp16.Val;
  7500  001292  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  7501  001296  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  7502  00129A  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7503  00129C  0E3C               	movlw	60
  7504  00129E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7505  0012A0  EC51  F018         	call	___wmul	;wreg free
  7506  0012A4  C060  F0E0         	movff	?___wmul,_TIME_ZONE
  7507  0012A8  C061  F0E1         	movff	?___wmul+1,_TIME_ZONE+1
  7508                           
  7509                           ; BSR set to: 0
  7510                           ;eeprom.c: 43: Address.Val = 0x02;
  7511  0012AC  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7512  0012AE  0E02               	movlw	2
  7513  0012B0  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7514                           
  7515                           ; BSR set to: 0
  7516                           ;eeprom.c: 44: DAY_LIGHT_START.Day = ReadEeprom (Address);
  7517  0012B2  D8C7               	call	PL8	;call to abstracted procedure
  7518  0012B4  ECE7  F018         	call	_ReadEeprom	;wreg free
  7519  0012B8  0100               	movlb	0	; () banked
  7520  0012BA  6FD8               	movwf	_DAY_LIGHT_START& (0+255),b
  7521  0012BC  6BD9               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  7522                           
  7523                           ; BSR set to: 0
  7524                           ;eeprom.c: 45: Address.Val++;
  7525  0012BE  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7526  0012C0  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;eeprom.c: 46: DAY_LIGHT_START.Month = ReadEeprom (Address);
  7530  0012C2  D8BF               	call	PL8	;call to abstracted procedure
  7531  0012C4  ECE7  F018         	call	_ReadEeprom	;wreg free
  7532  0012C8  0100               	movlb	0	; () banked
  7533  0012CA  6FDA               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  7534  0012CC  6BDB               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  7535                           
  7536                           ; BSR set to: 0
  7537                           ;eeprom.c: 48: Address.Val = 0x04;
  7538  0012CE  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7539  0012D0  0E04               	movlw	4
  7540  0012D2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;eeprom.c: 49: DAY_LIGHT_END.Day = ReadEeprom (Address);
  7544  0012D4  D8B6               	call	PL8	;call to abstracted procedure
  7545  0012D6  ECE7  F018         	call	_ReadEeprom	;wreg free
  7546  0012DA  0100               	movlb	0	; () banked
  7547  0012DC  6FD4               	movwf	_DAY_LIGHT_END& (0+255),b
  7548  0012DE  6BD5               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;eeprom.c: 50: Address.Val++;
  7552  0012E0  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7553  0012E2  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;eeprom.c: 51: DAY_LIGHT_END.Month = ReadEeprom (Address);
  7557  0012E4  D8AE               	call	PL8	;call to abstracted procedure
  7558  0012E6  ECE7  F018         	call	_ReadEeprom	;wreg free
  7559  0012EA  0100               	movlb	0	; () banked
  7560  0012EC  6FD6               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  7561  0012EE  6BD7               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  7562                           
  7563                           ; BSR set to: 0
  7564                           ;eeprom.c: 53: Address.Val = 0x06;
  7565  0012F0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7566  0012F2  0E06               	movlw	6
  7567  0012F4  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;eeprom.c: 54: CENTURY = ReadEeprom(Address);
  7571  0012F6  D8A5               	call	PL8	;call to abstracted procedure
  7572  0012F8  ECE7  F018         	call	_ReadEeprom	;wreg free
  7573  0012FC  0100               	movlb	0	; () banked
  7574  0012FE  6FFA               	movwf	_CENTURY& (0+255),b
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;eeprom.c: 56: Address.Val = 0x07;
  7578  001300  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7579  001302  0E07               	movlw	7
  7580  001304  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;eeprom.c: 57: Temp16.v[0] = ReadEeprom(Address);
  7584  001306  D89D               	call	PL8	;call to abstracted procedure
  7585  001308  ECE7  F018         	call	_ReadEeprom	;wreg free
  7586  00130C  0100               	movlb	0	; () banked
  7587  00130E  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;eeprom.c: 58: Address.Val++;
  7591  001310  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7592  001312  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;eeprom.c: 60: CYCLE_DELAY = (INT16) Temp16.Val;
  7596  001314  D896               	call	PL8	;call to abstracted procedure
  7597  001316  ECE7  F018         	call	_ReadEeprom	;wreg free
  7598  00131A  0100               	movlb	0	; () banked
  7599  00131C  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;eeprom.c: 62: Address.Val = 0x09;
  7603  00131E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7604  001320  0E09               	movlw	9
  7605  001322  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;eeprom.c: 63: BLINK_ON_TIME = ReadEeprom(Address);
  7609  001324  D88E               	call	PL8	;call to abstracted procedure
  7610  001326  ECE7  F018         	call	_ReadEeprom	;wreg free
  7611  00132A  6E5D               	movwf	_BLINK_ON_TIME,c
  7612                           
  7613                           ;eeprom.c: 65: Address.Val = 0x0A;
  7614  00132C  0100               	movlb	0	; () banked
  7615  00132E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7616  001330  0E0A               	movlw	10
  7617  001332  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;eeprom.c: 66: BLINK_OFF_TIME = ReadEeprom(Address);
  7621  001334  D886               	call	PL8	;call to abstracted procedure
  7622  001336  ECE7  F018         	call	_ReadEeprom	;wreg free
  7623  00133A  6E5C               	movwf	_BLINK_OFF_TIME,c
  7624                           
  7625                           ;eeprom.c: 68: Address.Val = 0x0B;
  7626  00133C  0100               	movlb	0	; () banked
  7627  00133E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7628  001340  0E0B               	movlw	11
  7629  001342  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7630                           
  7631                           ; BSR set to: 0
  7632                           ;eeprom.c: 69: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  7633  001344  D87E               	call	PL8	;call to abstracted procedure
  7634  001346  ECE7  F018         	call	_ReadEeprom	;wreg free
  7635  00134A  6E5B               	movwf	_BLINK_LAST_X_SECONDS,c
  7636                           
  7637                           ;eeprom.c: 71: Address.Val = 0x0C;
  7638  00134C  0100               	movlb	0	; () banked
  7639  00134E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7640  001350  0E0C               	movlw	12
  7641  001352  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;eeprom.c: 72: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  7645  001354  D876               	call	PL8	;call to abstracted procedure
  7646  001356  ECE7  F018         	call	_ReadEeprom	;wreg free
  7647  00135A  6E5A               	movwf	_AUDIO_NORMAL_ON_TIME,c
  7648                           
  7649                           ;eeprom.c: 74: Address.Val = 0x0D;
  7650  00135C  0100               	movlb	0	; () banked
  7651  00135E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7652  001360  0E0D               	movlw	13
  7653  001362  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;eeprom.c: 75: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  7657  001364  D86E               	call	PL8	;call to abstracted procedure
  7658  001366  ECE7  F018         	call	_ReadEeprom	;wreg free
  7659  00136A  6E59               	movwf	_AUDIO_NORMAL_OFF_TIME,c
  7660                           
  7661                           ;eeprom.c: 77: Address.Val = 0x0E;
  7662  00136C  0100               	movlb	0	; () banked
  7663  00136E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7664  001370  0E0E               	movlw	14
  7665  001372  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;eeprom.c: 78: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  7669  001374  D866               	call	PL8	;call to abstracted procedure
  7670  001376  ECE7  F018         	call	_ReadEeprom	;wreg free
  7671  00137A  6E58               	movwf	_AUDIO_SPECIAL_ON_TIME,c
  7672                           
  7673                           ;eeprom.c: 80: Address.Val = 0x0F;
  7674  00137C  0100               	movlb	0	; () banked
  7675  00137E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7676  001380  0E0F               	movlw	15
  7677  001382  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7678                           
  7679                           ; BSR set to: 0
  7680                           ;eeprom.c: 81: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  7681  001384  D85E               	call	PL8	;call to abstracted procedure
  7682  001386  ECE7  F018         	call	_ReadEeprom	;wreg free
  7683  00138A  6E57               	movwf	_AUDIO_SPECIAL_OFF_TIME,c
  7684                           
  7685                           ;eeprom.c: 83: Address.Val = 0x10;
  7686  00138C  0100               	movlb	0	; () banked
  7687  00138E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7688  001390  0E10               	movlw	16
  7689  001392  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7690                           
  7691                           ; BSR set to: 0
  7692                           ;eeprom.c: 84: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  7693  001394  D856               	call	PL8	;call to abstracted procedure
  7694  001396  ECE7  F018         	call	_ReadEeprom	;wreg free
  7695  00139A  0100               	movlb	0	; () banked
  7696  00139C  6FE6               	movwf	_SPECIAL_AUDIO_LAST_X_SECONDS& (0+255),b
  7697                           
  7698                           ; BSR set to: 0
  7699                           ;eeprom.c: 86: Address.Val = 0x11;
  7700  00139E  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7701  0013A0  0E11               	movlw	17
  7702  0013A2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;eeprom.c: 87: GPS_SYNC_AT_START = ReadEeprom(Address);
  7706  0013A4  D84E               	call	PL8	;call to abstracted procedure
  7707  0013A6  ECE7  F018         	call	_ReadEeprom	;wreg free
  7708  0013AA  0100               	movlb	0	; () banked
  7709  0013AC  6FE5               	movwf	_GPS_SYNC_AT_START& (0+255),b
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;eeprom.c: 89: Address.Val = 0x12;
  7713  0013AE  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7714  0013B0  0E12               	movlw	18
  7715  0013B2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;eeprom.c: 90: Temp32.Val = 0;
  7719  0013B4  6B66               	clrf	LoadSettingsFromEeprom@Temp32& (0+255),b
  7720  0013B6  6B67               	clrf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  7721  0013B8  6B68               	clrf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  7722  0013BA  6B69               	clrf	(LoadSettingsFromEeprom@Temp32+3)& (0+255),b
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;eeprom.c: 91: Temp32.v[0] = ReadEeprom(Address);
  7726  0013BC  D842               	call	PL8	;call to abstracted procedure
  7727  0013BE  ECE7  F018         	call	_ReadEeprom	;wreg free
  7728  0013C2  0100               	movlb	0	; () banked
  7729  0013C4  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;eeprom.c: 92: Address.Val++;
  7733  0013C6  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7734  0013C8  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;eeprom.c: 93: Temp32.v[1] = ReadEeprom(Address);
  7738  0013CA  D83B               	call	PL8	;call to abstracted procedure
  7739  0013CC  ECE7  F018         	call	_ReadEeprom	;wreg free
  7740  0013D0  0100               	movlb	0	; () banked
  7741  0013D2  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;eeprom.c: 94: Address.Val++;
  7745  0013D4  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7746  0013D6  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;eeprom.c: 95: Temp32.v[2] = ReadEeprom(Address);
  7750  0013D8  D834               	call	PL8	;call to abstracted procedure
  7751  0013DA  ECE7  F018         	call	_ReadEeprom	;wreg free
  7752  0013DE  0100               	movlb	0	; () banked
  7753  0013E0  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;eeprom.c: 96: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  7757  0013E2  C066  F0D0         	movff	LoadSettingsFromEeprom@Temp32,_GPS_SYNC_EVERY_x_SECONDS
  7758  0013E6  C067  F0D1         	movff	LoadSettingsFromEeprom@Temp32+1,_GPS_SYNC_EVERY_x_SECONDS+1
  7759  0013EA  C068  F0D2         	movff	LoadSettingsFromEeprom@Temp32+2,_GPS_SYNC_EVERY_x_SECONDS+2
  7760  0013EE  C069  F0D3         	movff	LoadSettingsFromEeprom@Temp32+3,_GPS_SYNC_EVERY_x_SECONDS+3
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;eeprom.c: 98: Address.Val = 0x15;
  7764  0013F2  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  7765  0013F4  0E15               	movlw	21
  7766  0013F6  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;eeprom.c: 99: Temp16.v[0] = ReadEeprom(Address);
  7770  0013F8  D824               	call	PL8	;call to abstracted procedure
  7771  0013FA  ECE7  F018         	call	_ReadEeprom	;wreg free
  7772  0013FE  0100               	movlb	0	; () banked
  7773  001400  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;eeprom.c: 100: Address.Val++;
  7777  001402  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  7778  001404  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;eeprom.c: 101: Temp16.v[1] = ReadEeprom(Address);
  7782  001406  D81D               	call	PL8	;call to abstracted procedure
  7783  001408  ECE7  F018         	call	_ReadEeprom	;wreg free
  7784  00140C  0100               	movlb	0	; () banked
  7785  00140E  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;eeprom.c: 102: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  7789  001410  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  7790  001414  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  7791  001416  0E0E               	movlw	14
  7792  001418  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7793  00141A  0E10               	movlw	16
  7794  00141C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7795  00141E  EC51  F018         	call	___wmul	;wreg free
  7796  001422  516A               	movf	LoadSettingsFromEeprom@Temp16& (0+255),w,b
  7797  001424  0D3C               	mullw	60
  7798  001426  5160               	movf	?___wmul& (0+255),w,b
  7799  001428  26F3               	addwf	prodl,f,c
  7800  00142A  5161               	movf	(?___wmul+1)& (0+255),w,b
  7801  00142C  22F4               	addwfc	prodh,f,c
  7802  00142E  CFF3 F0CC          	movff	prodl,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME
  7803  001432  CFF4 F0CD          	movff	prodh,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1
  7804  001436  0E00               	movlw	0
  7805  001438  BFCD               	btfsc	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),7,b
  7806  00143A  0EFF               	movlw	-1
  7807  00143C  6FCE               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),b
  7808  00143E  6FCF               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),b
  7809                           
  7810                           ; BSR set to: 0
  7811  001440  0012               	return		;funcret
  7812  001442                     __end_of_LoadSettingsFromEeprom:
  7813                           	opt stack 0
  7814  001442                     PL8:
  7815                           	opt stack 19
  7816  001442  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  7817  001446  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  7818  00144A  0012               	return	
  7819  00144C                     __end_ofPL8:
  7820                           	opt stack 0
  7821                           tosu	equ	0xFFF
  7822                           tosh	equ	0xFFE
  7823                           tosl	equ	0xFFD
  7824                           pclath	equ	0xFFA
  7825                           tblptru	equ	0xFF8
  7826                           tblptrh	equ	0xFF7
  7827                           tblptrl	equ	0xFF6
  7828                           tablat	equ	0xFF5
  7829                           prodh	equ	0xFF4
  7830                           prodl	equ	0xFF3
  7831                           intcon	equ	0xFF2
  7832                           postinc0	equ	0xFEE
  7833                           plusw0	equ	0xFEB
  7834                           wreg	equ	0xFE8
  7835                           indf1	equ	0xFE7
  7836                           postinc1	equ	0xFE6
  7837                           postdec1	equ	0xFE5
  7838                           plusw1	equ	0xFE3
  7839                           fsr1h	equ	0xFE2
  7840                           fsr1l	equ	0xFE1
  7841                           indf2	equ	0xFDF
  7842                           postinc2	equ	0xFDE
  7843                           postdec2	equ	0xFDD
  7844                           plusw2	equ	0xFDB
  7845                           fsr2h	equ	0xFDA
  7846                           fsr2l	equ	0xFD9
  7847                           status	equ	0xFD8
  7848                           
  7849 ;; *************** function _LoadEventsFromEeprom *****************
  7850 ;; Defined at:
  7851 ;;		line 105 in file "libs/eeprom.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;		None
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;  i               2   20[BANK0 ] int 
  7856 ;;  Temp16          2   24[BANK0 ] struct _WORD_VAL
  7857 ;;  Address         2   22[BANK0 ] struct _WORD_VAL
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 3F/0
  7864 ;;		On exit  : 3F/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7868 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7869 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7870 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7871 ;;Total ram usage:       14 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:   10
  7874 ;; This function calls:
  7875 ;;		_ReadEeprom
  7876 ;;		___lmul
  7877 ;;		___wmul
  7878 ;; This function is called by:
  7879 ;;		_LoadAllFromEeprom
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text37
  7884  0017BC                     __ptext37:
  7885                           	opt stack 0
  7886  0017BC                     _LoadEventsFromEeprom:
  7887                           	opt stack 19
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;eeprom.c: 106: WORD_VAL Temp16, Address;
  7891                           ;eeprom.c: 107: Address.Val = 0x50;
  7892                           
  7893                           ; BSR set to: 0
  7894                           ;incstack = 0
  7895  0017BC  6B77               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  7896  0017BE  0E50               	movlw	80
  7897  0017C0  6F76               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;eeprom.c: 108: for (int i=0; i<24; i++) {
  7901  0017C2  6B74               	clrf	LoadEventsFromEeprom@i& (0+255),b
  7902  0017C4  6B75               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  7903  0017C6                     l4337:
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;eeprom.c: 109: Temp16.v[0] = ReadEeprom(Address);
  7907  0017C6  D8AD               	call	PL66	;call to abstracted procedure
  7908  0017C8  ECE7  F018         	call	_ReadEeprom	;wreg free
  7909  0017CC  0100               	movlb	0	; () banked
  7910  0017CE  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  7911                           
  7912                           ; BSR set to: 0
  7913                           ;eeprom.c: 110: Address.Val++;
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;eeprom.c: 111: Temp16.v[1] = ReadEeprom(Address);
  7917  0017D0  D896               	call	PL46	;call to abstracted procedure
  7918  0017D2  ECE7  F018         	call	_ReadEeprom	;wreg free
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;eeprom.c: 112: EVENTS[i].START_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  7922                           ;eeprom.c: 113: + (INT32)((INT8)Temp16.v[0])*60;
  7923  0017D6  D88F               	call	PL32	;call to abstracted procedure
  7924  0017D8  D880               	call	PL30	;call to abstracted procedure
  7925  0017DA  ECDC  F016         	call	___lmul	;wreg free
  7926  0017DE  D84B               	call	PL20	;call to abstracted procedure
  7927  0017E0  ECDC  F016         	call	___lmul	;wreg free
  7928  0017E4  D85E               	call	PL22	;call to abstracted procedure
  7929  0017E6  EC51  F018         	call	___wmul	;wreg free
  7930  0017EA  ECBF  F00D         	call	PL42	;call to abstracted procedure
  7931  0017EE  0E02               	movlw	high _EVENTS
  7932  0017F0  D88D               	call	PL64	;call to abstracted procedure
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;eeprom.c: 114: Address.Val++;
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;eeprom.c: 115: Temp16.v[0] = ReadEeprom(Address);
  7939  0017F2  D885               	call	PL46	;call to abstracted procedure
  7940  0017F4  ECE7  F018         	call	_ReadEeprom	;wreg free
  7941  0017F8  0100               	movlb	0	; () banked
  7942  0017FA  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;eeprom.c: 116: Address.Val++;
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;eeprom.c: 117: Temp16.v[1] = ReadEeprom(Address);
  7949  0017FC  D880               	call	PL46	;call to abstracted procedure
  7950  0017FE  ECE7  F018         	call	_ReadEeprom	;wreg free
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;eeprom.c: 118: EVENTS[i].END_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  7954                           ;eeprom.c: 119: + (INT32)((INT8)Temp16.v[0])*60;
  7955  001802  D879               	call	PL32	;call to abstracted procedure
  7956  001804  D86A               	call	PL30	;call to abstracted procedure
  7957  001806  ECDC  F016         	call	___lmul	;wreg free
  7958  00180A  D835               	call	PL20	;call to abstracted procedure
  7959  00180C  ECDC  F016         	call	___lmul	;wreg free
  7960  001810  D848               	call	PL22	;call to abstracted procedure
  7961  001812  EC51  F018         	call	___wmul	;wreg free
  7962  001816  ECC3  F00D         	call	PL74	;call to abstracted procedure
  7963  00181A  D878               	call	PL64	;call to abstracted procedure
  7964                           
  7965                           ;eeprom.c: 120: Address.Val++;
  7966  00181C  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  7967  00181E  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;eeprom.c: 121: EVENTS[i].CYCLE = ReadEeprom(Address);
  7971  001820  D854               	call	PL28	;call to abstracted procedure
  7972  001822  EC51  F018         	call	___wmul	;wreg free
  7973  001826  0E08               	movlw	low (_EVENTS+8)
  7974  001828  2560               	addwf	?___wmul& (0+255),w,b
  7975  00182A  6ED9               	movwf	fsr2l,c
  7976  00182C  0E02               	movlw	high (_EVENTS+8)
  7977  00182E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7978  001830  6EDA               	movwf	fsr2h,c
  7979  001832  D877               	call	PL66	;call to abstracted procedure
  7980  001834  ECE7  F018         	call	_ReadEeprom	;wreg free
  7981  001838  6EDF               	movwf	indf2,c
  7982                           
  7983                           ;eeprom.c: 122: Address.Val++;
  7984  00183A  0100               	movlb	0	; () banked
  7985                           
  7986                           ;eeprom.c: 123: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  7987  00183C  D860               	call	PL46	;call to abstracted procedure
  7988  00183E  ECE7  F018         	call	_ReadEeprom	;wreg free
  7989  001842  0100               	movlb	0	; () banked
  7990  001844  6F6C               	movwf	??_LoadEventsFromEeprom& (0+255),b
  7991  001846  D841               	call	PL28	;call to abstracted procedure
  7992  001848  EC51  F018         	call	___wmul	;wreg free
  7993  00184C  ECC8  F00D         	call	PL108	;call to abstracted procedure
  7994  001850  476C               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  7995  001852  50DF               	movf	223,w,c
  7996  001854  0100               	movlb	0	; () banked
  7997  001856  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  7998  001858  0B01               	andlw	-255
  7999  00185A  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  8000  00185C  6EDF               	movwf	223,c
  8001                           
  8002                           ; BSR set to: 2
  8003                           ;eeprom.c: 124: Address.Val++;
  8004  00185E  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  8005  001860  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  8006                           
  8007                           ; BSR set to: 0
  8008  001862  4B74               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  8009  001864  2B75               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  8010                           
  8011                           ; BSR set to: 0
  8012  001866  BF75               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  8013  001868  D7AE               	goto	l4337
  8014  00186A  5175               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  8015  00186C  E103               	bnz	u4320
  8016  00186E  0E18               	movlw	24
  8017  001870  5D74               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  8018  001872  E3A9               	bnc	l4337
  8019  001874                     u4320:
  8020                           
  8021                           ; BSR set to: 0
  8022  001874  0012               	return		;funcret
  8023  001876                     __end_of_LoadEventsFromEeprom:
  8024                           	opt stack 0
  8025  001876                     PL20:
  8026                           	opt stack 19
  8027  001876  C060  F06C         	movff	?___lmul,??_LoadEventsFromEeprom
  8028  00187A  C061  F06D         	movff	?___lmul+1,??_LoadEventsFromEeprom+1
  8029  00187E  C062  F06E         	movff	?___lmul+2,??_LoadEventsFromEeprom+2
  8030  001882  C063  F06F         	movff	?___lmul+3,??_LoadEventsFromEeprom+3
  8031  001886  5178               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  8032  001888  6F60               	movwf	___lmul@multiplier& (0+255),b
  8033  00188A  0E00               	movlw	0
  8034  00188C  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  8035  00188E  0EFF               	movlw	-1
  8036  001890  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  8037  001892  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  8038  001894  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  8039  001896  0E3C               	movlw	60
  8040  001898  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8041  00189A  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  8042  00189C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  8043  00189E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  8044  0018A0  0C3C               	retlw	60
  8045  0018A2                     __end_ofPL20:
  8046                           	opt stack 0
  8047  0018A2                     PL22:
  8048                           	opt stack 19
  8049  0018A2  5160               	movf	?___lmul& (0+255),w,b
  8050  0018A4  256C               	addwf	??_LoadEventsFromEeprom& (0+255),w,b
  8051  0018A6  6F70               	movwf	(??_LoadEventsFromEeprom+4)& (0+255),b
  8052  0018A8  5161               	movf	(?___lmul+1)& (0+255),w,b
  8053  0018AA  216D               	addwfc	(??_LoadEventsFromEeprom+1)& (0+255),w,b
  8054  0018AC  6F71               	movwf	(??_LoadEventsFromEeprom+5)& (0+255),b
  8055  0018AE  5162               	movf	(?___lmul+2)& (0+255),w,b
  8056  0018B0  216E               	addwfc	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  8057  0018B2  6F72               	movwf	(??_LoadEventsFromEeprom+6)& (0+255),b
  8058  0018B4  5163               	movf	(?___lmul+3)& (0+255),w,b
  8059  0018B6  216F               	addwfc	(??_LoadEventsFromEeprom+3)& (0+255),w,b
  8060  0018B8  6F73               	movwf	(??_LoadEventsFromEeprom+7)& (0+255),b
  8061  0018BA  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  8062  0018BE  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  8063  0018C2  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8064  0018C4  0E0A               	movlw	10
  8065  0018C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8066  0018C8  0C0A               	retlw	10
  8067  0018CA                     __end_ofPL22:
  8068                           	opt stack 0
  8069  0018CA                     PL28:
  8070                           	opt stack 19
  8071  0018CA  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  8072  0018CE  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  8073  0018D2  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8074  0018D4  0E0A               	movlw	10
  8075  0018D6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8076  0018D8  0C0A               	retlw	10
  8077  0018DA                     __end_ofPL28:
  8078                           	opt stack 0
  8079  0018DA                     PL30:
  8080                           	opt stack 19
  8081  0018DA  6F60               	movwf	___lmul@multiplier& (0+255),b
  8082  0018DC  0E00               	movlw	0
  8083  0018DE  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  8084  0018E0  0EFF               	movlw	-1
  8085  0018E2  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  8086  0018E4  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  8087  0018E6  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  8088  0018E8  0E10               	movlw	16
  8089  0018EA  6F64               	movwf	___lmul@multiplicand& (0+255),b
  8090  0018EC  0E0E               	movlw	14
  8091  0018EE  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  8092  0018F0  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  8093  0018F2  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  8094  0018F4  0C0E               	retlw	14
  8095  0018F6                     __end_ofPL30:
  8096                           	opt stack 0
  8097  0018F6                     PL32:
  8098                           	opt stack 19
  8099  0018F6  0100               	movlb	0	; () banked
  8100  0018F8  6F79               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  8101  0018FA  5179               	movf	(LoadEventsFromEeprom@Temp16+1)& (0+255),w,b
  8102  0018FC  0012               	return	
  8103  0018FE                     __end_ofPL32:
  8104                           	opt stack 0
  8105  0018FE                     PL46:
  8106                           	opt stack 19
  8107  0018FE  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  8108  001900  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  8109  001902  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  8110  001906  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  8111  00190A  0012               	return	
  8112  00190C                     __end_ofPL46:
  8113                           	opt stack 0
  8114  00190C                     PL64:
  8115                           	opt stack 19
  8116  00190C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8117  00190E  6EDA               	movwf	fsr2h,c
  8118  001910  C070  FFDE         	movff	??_LoadEventsFromEeprom+4,postinc2
  8119  001914  C071  FFDE         	movff	??_LoadEventsFromEeprom+5,postinc2
  8120  001918  C072  FFDE         	movff	??_LoadEventsFromEeprom+6,postinc2
  8121  00191C  C073  FFDE         	movff	??_LoadEventsFromEeprom+7,postinc2
  8122  001920  0012               	return	
  8123  001922                     __end_ofPL64:
  8124                           	opt stack 0
  8125  001922                     PL66:
  8126                           	opt stack 19
  8127  001922  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  8128  001926  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  8129  00192A  0012               	return	
  8130  00192C                     __end_ofPL66:
  8131                           	opt stack 0
  8132                           tosu	equ	0xFFF
  8133                           tosh	equ	0xFFE
  8134                           tosl	equ	0xFFD
  8135                           pclath	equ	0xFFA
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           postinc0	equ	0xFEE
  8144                           plusw0	equ	0xFEB
  8145                           wreg	equ	0xFE8
  8146                           indf1	equ	0xFE7
  8147                           postinc1	equ	0xFE6
  8148                           postdec1	equ	0xFE5
  8149                           plusw1	equ	0xFE3
  8150                           fsr1h	equ	0xFE2
  8151                           fsr1l	equ	0xFE1
  8152                           indf2	equ	0xFDF
  8153                           postinc2	equ	0xFDE
  8154                           postdec2	equ	0xFDD
  8155                           plusw2	equ	0xFDB
  8156                           fsr2h	equ	0xFDA
  8157                           fsr2l	equ	0xFD9
  8158                           status	equ	0xFD8
  8159                           
  8160 ;; *************** function ___lmul *****************
  8161 ;; Defined at:
  8162 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;  multiplier      4    0[BANK0 ] unsigned long 
  8165 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  product         4    8[BANK0 ] unsigned long 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;                  4    0[BANK0 ] unsigned long 
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0
  8172 ;; Tracked objects:
  8173 ;;		On entry : 3F/0
  8174 ;;		On exit  : 3F/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8177 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8178 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8180 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8181 ;;Total ram usage:       12 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    9
  8184 ;; This function calls:
  8185 ;;		Nothing
  8186 ;; This function is called by:
  8187 ;;		_WriteLongInt
  8188 ;;		_LoadEventsFromEeprom
  8189 ;;		_TimeTextToSecond
  8190 ;; This function uses a non-reentrant model
  8191 ;;
  8192                           
  8193                           	psect	text38
  8194  002DB8                     __ptext38:
  8195                           	opt stack 0
  8196  002DB8                     ___lmul:
  8197                           	opt stack 20
  8198                           
  8199                           ; BSR set to: 0
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;incstack = 0
  8203  002DB8  6B68               	clrf	___lmul@product& (0+255),b
  8204  002DBA  6B69               	clrf	(___lmul@product+1)& (0+255),b
  8205  002DBC  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  8206  002DBE  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  8207  002DC0                     l1179:
  8208                           
  8209                           ; BSR set to: 0
  8210  002DC0  A160               	btfss	___lmul@multiplier& (0+255),0,b
  8211  002DC2  D008               	goto	l3607
  8212                           
  8213                           ; BSR set to: 0
  8214  002DC4  5164               	movf	___lmul@multiplicand& (0+255),w,b
  8215  002DC6  2768               	addwf	___lmul@product& (0+255),f,b
  8216  002DC8  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  8217  002DCA  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  8218  002DCC  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  8219  002DCE  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  8220  002DD0  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  8221  002DD2  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  8222  002DD4                     l3607:
  8223                           
  8224                           ; BSR set to: 0
  8225  002DD4  90D8               	bcf	status,0,c
  8226  002DD6  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  8227  002DD8  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  8228  002DDA  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  8229  002DDC  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  8230                           
  8231                           ; BSR set to: 0
  8232  002DDE  90D8               	bcf	status,0,c
  8233  002DE0  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  8234  002DE2  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  8235  002DE4  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  8236  002DE6  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  8237  002DE8  5160               	movf	___lmul@multiplier& (0+255),w,b
  8238  002DEA  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  8239  002DEC  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  8240  002DEE  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  8241  002DF0  E1E7               	bnz	l1179
  8242                           
  8243                           ; BSR set to: 0
  8244  002DF2  C068  F060         	movff	___lmul@product,?___lmul
  8245  002DF6  C069  F061         	movff	___lmul@product+1,?___lmul+1
  8246  002DFA  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  8247  002DFE  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  8248                           
  8249                           ; BSR set to: 0
  8250  002E02  0012               	return		;funcret
  8251  002E04                     __end_of___lmul:
  8252                           	opt stack 0
  8253                           tosu	equ	0xFFF
  8254                           tosh	equ	0xFFE
  8255                           tosl	equ	0xFFD
  8256                           pclath	equ	0xFFA
  8257                           tblptru	equ	0xFF8
  8258                           tblptrh	equ	0xFF7
  8259                           tblptrl	equ	0xFF6
  8260                           tablat	equ	0xFF5
  8261                           prodh	equ	0xFF4
  8262                           prodl	equ	0xFF3
  8263                           intcon	equ	0xFF2
  8264                           postinc0	equ	0xFEE
  8265                           plusw0	equ	0xFEB
  8266                           wreg	equ	0xFE8
  8267                           indf1	equ	0xFE7
  8268                           postinc1	equ	0xFE6
  8269                           postdec1	equ	0xFE5
  8270                           plusw1	equ	0xFE3
  8271                           fsr1h	equ	0xFE2
  8272                           fsr1l	equ	0xFE1
  8273                           indf2	equ	0xFDF
  8274                           postinc2	equ	0xFDE
  8275                           postdec2	equ	0xFDD
  8276                           plusw2	equ	0xFDB
  8277                           fsr2h	equ	0xFDA
  8278                           fsr2l	equ	0xFD9
  8279                           status	equ	0xFD8
  8280                           
  8281 ;; *************** function _LoadCyclesFromEeprom *****************
  8282 ;; Defined at:
  8283 ;;		line 157 in file "libs/eeprom.c"
  8284 ;; Parameters:    Size  Location     Type
  8285 ;;		None
  8286 ;; Auto vars:     Size  Location     Type
  8287 ;;  j               2   15[BANK0 ] int 
  8288 ;;  i               2   19[BANK0 ] int 
  8289 ;;  i               2   17[BANK0 ] int 
  8290 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      void 
  8293 ;; Registers used:
  8294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8295 ;; Tracked objects:
  8296 ;;		On entry : 3F/0
  8297 ;;		On exit  : 3F/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8301 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8302 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8303 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8304 ;;Total ram usage:       15 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:   10
  8307 ;; This function calls:
  8308 ;;		_ReadEeprom
  8309 ;;		___wmul
  8310 ;; This function is called by:
  8311 ;;		_LoadAllFromEeprom
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text39
  8316  00192C                     __ptext39:
  8317                           	opt stack 0
  8318  00192C                     _LoadCyclesFromEeprom:
  8319                           	opt stack 19
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;eeprom.c: 158: WORD_VAL Address;
  8323                           ;eeprom.c: 159: Address.Val = 0x3F;
  8324                           
  8325                           ; BSR set to: 0
  8326                           ;incstack = 0
  8327  00192C  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  8328  00192E  0E3F               	movlw	63
  8329  001930  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  8330                           
  8331                           ; BSR set to: 0
  8332                           ;eeprom.c: 161: for (int i=0; i<17; i++) {
  8333  001932  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  8334  001934  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  8335  001936                     l4429:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;eeprom.c: 162: CYCLES[i].END_STATE = ReadEeprom(Address);
  8339  001936  D898               	call	PL6	;call to abstracted procedure
  8340  001938  0E03               	movlw	3
  8341  00193A  D892               	call	PL4	;call to abstracted procedure
  8342  00193C  90D8               	bcf	status,0,c
  8343  00193E  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  8344  001940  6ED9               	movwf	fsr2l,c
  8345  001942  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  8346  001944  6EDA               	movwf	fsr2h,c
  8347  001946  90D8               	bcf	status,0,c
  8348  001948  36D9               	rlcf	fsr2l,f,c
  8349  00194A  36DA               	rlcf	fsr2h,f,c
  8350  00194C  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  8351  00194E  26D9               	addwf	fsr2l,f,c
  8352  001950  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  8353  001952  22DA               	addwfc	fsr2h,f,c
  8354  001954  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  8355  001958  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  8356  00195C  ECE7  F018         	call	_ReadEeprom	;wreg free
  8357  001960  6EDF               	movwf	indf2,c
  8358                           
  8359                           ;eeprom.c: 163: Address.Val++;
  8360  001962  0100               	movlb	0	; () banked
  8361  001964  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  8362  001966  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  8363                           
  8364                           ; BSR set to: 0
  8365  001968  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  8366  00196A  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  8367                           
  8368                           ; BSR set to: 0
  8369  00196C  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  8370  00196E  D7E3               	goto	l4429
  8371  001970  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  8372  001972  E103               	bnz	u4400
  8373  001974  0E11               	movlw	17
  8374  001976  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  8375  001978  E3DE               	bnc	l4429
  8376  00197A                     u4400:
  8377                           
  8378                           ; BSR set to: 0
  8379                           ;eeprom.c: 164: }
  8380                           ;eeprom.c: 166: for (int i=0; i<17; i++) {
  8381  00197A  6B73               	clrf	LoadCyclesFromEeprom@i_1464& (0+255),b
  8382  00197C  6B74               	clrf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),b
  8383  00197E                     l4441:
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;eeprom.c: 167: if (i==0)
  8387  00197E  5173               	movf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  8388  001980  1174               	iorwf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  8389  001982  E106               	bnz	l4445
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;eeprom.c: 168: CYCLES[i].START_STATE = 0;
  8393  001984  D871               	call	PL6	;call to abstracted procedure
  8394  001986  0E02               	movlw	2
  8395  001988  D86B               	call	PL4	;call to abstracted procedure
  8396  00198A  D85D               	call	PL2	;call to abstracted procedure
  8397  00198C  6ADF               	clrf	indf2,c
  8398  00198E  D01E               	goto	l4447
  8399  001990                     l4445:
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;eeprom.c: 169: else
  8403                           ;eeprom.c: 172: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  8404  001990  D86B               	call	PL6	;call to abstracted procedure
  8405  001992  0E02               	movlw	2
  8406  001994  D865               	call	PL4	;call to abstracted procedure
  8407  001996  D857               	call	PL2	;call to abstracted procedure
  8408  001998  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  8409  00199A  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  8410  00199C  0E00               	movlw	low _CYCLES
  8411  00199E  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  8412  0019A0  0E01               	movlw	high _CYCLES
  8413  0019A2  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  8414  0019A4  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  8415  0019A6  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  8416  0019A8  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  8417  0019AA  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  8418  0019AC  90D8               	bcf	status,0,c
  8419  0019AE  3573               	rlcf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  8420  0019B0  6EE1               	movwf	fsr1l,c
  8421  0019B2  3574               	rlcf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  8422  0019B4  6EE2               	movwf	fsr1h,c
  8423  0019B6  90D8               	bcf	status,0,c
  8424  0019B8  36E1               	rlcf	fsr1l,f,c
  8425  0019BA  36E2               	rlcf	fsr1h,f,c
  8426  0019BC  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  8427  0019BE  26E1               	addwf	fsr1l,f,c
  8428  0019C0  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  8429  0019C2  22E2               	addwfc	fsr1h,f,c
  8430  0019C4  50E7               	movf	indf1,w,c
  8431  0019C6  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  8432  0019C8  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  8433  0019CA  6EDF               	movwf	indf2,c
  8434  0019CC                     l4447:
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;eeprom.c: 173: CYCLES[i].PERIOD = 0;
  8438  0019CC  D84D               	call	PL6	;call to abstracted procedure
  8439  0019CE  D83B               	call	PL2	;call to abstracted procedure
  8440  0019D0  6ADE               	clrf	postinc2,c
  8441  0019D2  6ADD               	clrf	postdec2,c
  8442                           
  8443                           ; BSR set to: 0
  8444                           ;eeprom.c: 174: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  8445  0019D4  D849               	call	PL6	;call to abstracted procedure
  8446  0019D6  0E02               	movlw	2
  8447  0019D8  D843               	call	PL4	;call to abstracted procedure
  8448  0019DA  D835               	call	PL2	;call to abstracted procedure
  8449  0019DC  50DF               	movf	indf2,w,c
  8450  0019DE  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  8451  0019E0  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  8452  0019E2  D017               	goto	l4455
  8453  0019E4                     l4451:
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;eeprom.c: 175: CYCLES[i].PERIOD += STATES[j].PERIOD;
  8457  0019E4  D841               	call	PL6	;call to abstracted procedure
  8458  0019E6  D82F               	call	PL2	;call to abstracted procedure
  8459  0019E8  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  8460  0019EC  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  8461  0019F0  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8462  0019F2  0E06               	movlw	6
  8463  0019F4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8464  0019F6  EC51  F018         	call	___wmul	;wreg free
  8465  0019FA  0EF0               	movlw	low _STATES
  8466  0019FC  2560               	addwf	?___wmul& (0+255),w,b
  8467  0019FE  6EE1               	movwf	fsr1l,c
  8468  001A00  0E02               	movlw	high _STATES
  8469  001A02  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8470  001A04  6EE2               	movwf	fsr1h,c
  8471  001A06  50E7               	movf	indf1,w,c
  8472  001A08  26DE               	addwf	postinc2,f,c
  8473  001A0A  0E00               	movlw	0
  8474  001A0C  22DD               	addwfc	postdec2,f,c
  8475                           
  8476                           ; BSR set to: 0
  8477  001A0E  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  8478  001A10  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  8479  001A12                     l4455:
  8480                           
  8481                           ; BSR set to: 0
  8482  001A12  D82A               	call	PL6	;call to abstracted procedure
  8483  001A14  0E03               	movlw	3
  8484  001A16  D824               	call	PL4	;call to abstracted procedure
  8485  001A18  D816               	call	PL2	;call to abstracted procedure
  8486  001A1A  50DF               	movf	indf2,w,c
  8487  001A1C  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  8488  001A1E  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  8489  001A20  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  8490  001A22  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  8491  001A24  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  8492  001A26  0A80               	xorlw	128
  8493  001A28  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  8494  001A2A  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  8495  001A2C  0A80               	xorlw	128
  8496  001A2E  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  8497  001A30  E2D9               	bc	l4451
  8498                           
  8499                           ; BSR set to: 0
  8500  001A32  4B73               	infsnz	LoadCyclesFromEeprom@i_1464& (0+255),f,b
  8501  001A34  2B74               	incf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),f,b
  8502                           
  8503                           ; BSR set to: 0
  8504  001A36  BF74               	btfsc	(LoadCyclesFromEeprom@i_1464+1)& (0+255),7,b
  8505  001A38  D7A2               	goto	l4441
  8506  001A3A  5174               	movf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  8507  001A3C  E103               	bnz	u4430
  8508  001A3E  0E11               	movlw	17
  8509  001A40  5D73               	subwf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  8510  001A42  E39D               	bnc	l4441
  8511  001A44                     u4430:
  8512                           
  8513                           ; BSR set to: 0
  8514  001A44  0012               	return		;funcret
  8515  001A46                     __end_of_LoadCyclesFromEeprom:
  8516                           	opt stack 0
  8517  001A46                     PL2:
  8518                           	opt stack 19
  8519  001A46  90D8               	bcf	status,0,c
  8520  001A48  3573               	rlcf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  8521  001A4A  6ED9               	movwf	fsr2l,c
  8522  001A4C  3574               	rlcf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  8523  001A4E  6EDA               	movwf	fsr2h,c
  8524  001A50  90D8               	bcf	status,0,c
  8525  001A52  36D9               	rlcf	fsr2l,f,c
  8526  001A54  36DA               	rlcf	fsr2h,f,c
  8527  001A56  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  8528  001A58  26D9               	addwf	fsr2l,f,c
  8529  001A5A  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  8530  001A5C  22DA               	addwfc	fsr2h,f,c
  8531  001A5E  0012               	return	
  8532  001A60                     __end_ofPL2:
  8533                           	opt stack 0
  8534  001A60                     PL4:
  8535                           	opt stack 19
  8536  001A60  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  8537  001A62  0E00               	movlw	0
  8538  001A64  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  8539  001A66  0C00               	retlw	0
  8540  001A68                     __end_ofPL4:
  8541                           	opt stack 0
  8542  001A68                     PL6:
  8543                           	opt stack 19
  8544  001A68  0E00               	movlw	low _CYCLES
  8545  001A6A  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  8546  001A6C  0E01               	movlw	high _CYCLES
  8547  001A6E  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  8548  001A70  0012               	return	
  8549  001A72                     __end_ofPL6:
  8550                           	opt stack 0
  8551                           tosu	equ	0xFFF
  8552                           tosh	equ	0xFFE
  8553                           tosl	equ	0xFFD
  8554                           pclath	equ	0xFFA
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           prodh	equ	0xFF4
  8560                           prodl	equ	0xFF3
  8561                           intcon	equ	0xFF2
  8562                           postinc0	equ	0xFEE
  8563                           plusw0	equ	0xFEB
  8564                           wreg	equ	0xFE8
  8565                           indf1	equ	0xFE7
  8566                           postinc1	equ	0xFE6
  8567                           postdec1	equ	0xFE5
  8568                           plusw1	equ	0xFE3
  8569                           fsr1h	equ	0xFE2
  8570                           fsr1l	equ	0xFE1
  8571                           indf2	equ	0xFDF
  8572                           postinc2	equ	0xFDE
  8573                           postdec2	equ	0xFDD
  8574                           plusw2	equ	0xFDB
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _ReadEeprom *****************
  8580 ;; Defined at:
  8581 ;;		line 3 in file "libs/eeprom.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      unsigned char 
  8588 ;; Registers used:
  8589 ;;		wreg, status,2
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8599 ;;Total ram usage:        2 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    9
  8602 ;; This function calls:
  8603 ;;		Nothing
  8604 ;; This function is called by:
  8605 ;;		_LoadSettingsFromEeprom
  8606 ;;		_LoadEventsFromEeprom
  8607 ;;		_LoadStatesFromEeprom
  8608 ;;		_LoadCyclesFromEeprom
  8609 ;; This function uses a non-reentrant model
  8610 ;;
  8611                           
  8612                           	psect	text40
  8613  0031CE                     __ptext40:
  8614                           	opt stack 0
  8615  0031CE                     _ReadEeprom:
  8616                           	opt stack 19
  8617                           
  8618                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  8619                           
  8620                           ; BSR set to: 0
  8621                           ;incstack = 0
  8622  0031CE  0E3F               	movlw	-193
  8623  0031D0  1681               	andwf	3969,f,c	;volatile
  8624                           
  8625                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  8626  0031D2  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  8627                           
  8628                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  8629  0031D6  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  8630                           
  8631                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  8632  0031DA  8081               	bsf	3969,0,c	;volatile
  8633                           
  8634                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  8635  0031DC  8E81               	bsf	3969,7,c	;volatile
  8636                           
  8637                           ;eeprom.c: 12: return NVMDAT;
  8638  0031DE  5080               	movf	3968,w,c	;volatile
  8639  0031E0  0012               	return		;funcret
  8640  0031E2                     __end_of_ReadEeprom:
  8641                           	opt stack 0
  8642                           tosu	equ	0xFFF
  8643                           tosh	equ	0xFFE
  8644                           tosl	equ	0xFFD
  8645                           pclath	equ	0xFFA
  8646                           tblptru	equ	0xFF8
  8647                           tblptrh	equ	0xFF7
  8648                           tblptrl	equ	0xFF6
  8649                           tablat	equ	0xFF5
  8650                           prodh	equ	0xFF4
  8651                           prodl	equ	0xFF3
  8652                           intcon	equ	0xFF2
  8653                           postinc0	equ	0xFEE
  8654                           plusw0	equ	0xFEB
  8655                           wreg	equ	0xFE8
  8656                           indf1	equ	0xFE7
  8657                           postinc1	equ	0xFE6
  8658                           postdec1	equ	0xFE5
  8659                           plusw1	equ	0xFE3
  8660                           fsr1h	equ	0xFE2
  8661                           fsr1l	equ	0xFE1
  8662                           indf2	equ	0xFDF
  8663                           postinc2	equ	0xFDE
  8664                           postdec2	equ	0xFDD
  8665                           plusw2	equ	0xFDB
  8666                           fsr2h	equ	0xFDA
  8667                           fsr2l	equ	0xFD9
  8668                           status	equ	0xFD8
  8669                           
  8670 ;; *************** function _Lcd_Init *****************
  8671 ;; Defined at:
  8672 ;;		line 17 in file "libs/HD44780.c"
  8673 ;; Parameters:    Size  Location     Type
  8674 ;;		None
  8675 ;; Auto vars:     Size  Location     Type
  8676 ;;  data            1    3[BANK0 ] unsigned char 
  8677 ;; Return value:  Size  Location     Type
  8678 ;;                  1    wreg      void 
  8679 ;; Registers used:
  8680 ;;		wreg, status,2, status,0, cstack
  8681 ;; Tracked objects:
  8682 ;;		On entry : 3F/0
  8683 ;;		On exit  : 0/0
  8684 ;;		Unchanged: 0/0
  8685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8690 ;;Total ram usage:        1 bytes
  8691 ;; Hardware stack levels used:    1
  8692 ;; Hardware stack levels required when called:   11
  8693 ;; This function calls:
  8694 ;;		_Lcd_Command
  8695 ;;		_Lcd_Delay5500us
  8696 ;;		_Lcd_Delay5us
  8697 ;; This function is called by:
  8698 ;;		_main
  8699 ;; This function uses a non-reentrant model
  8700 ;;
  8701                           
  8702                           	psect	text41
  8703  0029A0                     __ptext41:
  8704                           	opt stack 0
  8705  0029A0                     _Lcd_Init:
  8706                           	opt stack 19
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;HD44780.c: 23: unsigned char data;
  8710                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  8711                           
  8712                           ;incstack = 0
  8713  0029A0  9A88               	bcf	3976,5,c	;volatile
  8714  0029A2  9888               	bcf	3976,4,c	;volatile
  8715  0029A4  9688               	bcf	3976,3,c	;volatile
  8716  0029A6  9488               	bcf	3976,2,c	;volatile
  8717  0029A8  9288               	bcf	3976,1,c	;volatile
  8718  0029AA  9088               	bcf	3976,0,c	;volatile
  8719                           
  8720                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8721  0029AC  9A83               	bcf	3971,5,c	;volatile
  8722  0029AE  9883               	bcf	3971,4,c	;volatile
  8723  0029B0  9683               	bcf	3971,3,c	;volatile
  8724  0029B2  9483               	bcf	3971,2,c	;volatile
  8725  0029B4  9283               	bcf	3971,1,c	;volatile
  8726  0029B6  9083               	bcf	3971,0,c	;volatile
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  8730  0029B8  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8731  0029BC  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8732  0029C0  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8733                           
  8734                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  8735  0029C4  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8736  0029C8  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8737  0029CC  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8738                           
  8739                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  8740  0029D0  0E01               	movlw	1
  8741  0029D2  0100               	movlb	0	; () banked
  8742  0029D4  6F63               	movwf	Lcd_Init@data& (0+255),b
  8743  0029D6                     l270:
  8744                           
  8745                           ; BSR set to: 0
  8746                           ;HD44780.c: 29: {
  8747                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8748  0029D6  D82F               	call	PL122	;call to abstracted procedure
  8749  0029D8  9283               	bcf	3971,1,c	;volatile
  8750  0029DA  9083               	bcf	3971,0,c	;volatile
  8751                           
  8752                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  8753  0029DC  D82C               	call	PL122	;call to abstracted procedure
  8754  0029DE  8283               	bsf	3971,1,c	;volatile
  8755  0029E0  9083               	bcf	3971,0,c	;volatile
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;HD44780.c: 32: Lcd_Delay5us();
  8759  0029E2  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  8760                           
  8761                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8762  0029E6  D827               	call	PL122	;call to abstracted procedure
  8763  0029E8  9283               	bcf	3971,1,c	;volatile
  8764  0029EA  9083               	bcf	3971,0,c	;volatile
  8765                           
  8766                           ;HD44780.c: 34: Lcd_Delay5500us();
  8767  0029EC  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8768  0029F0  0100               	movlb	0	; () banked
  8769  0029F2  2B63               	incf	Lcd_Init@data& (0+255),f,b
  8770  0029F4  0E03               	movlw	3
  8771  0029F6  6563               	cpfsgt	Lcd_Init@data& (0+255),b
  8772  0029F8  D7EE               	goto	l270
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;HD44780.c: 35: }
  8776                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8777  0029FA  D818               	call	PL120	;call to abstracted procedure
  8778  0029FC  9283               	bcf	3971,1,c	;volatile
  8779  0029FE  9083               	bcf	3971,0,c	;volatile
  8780                           
  8781                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
  8782  002A00  D815               	call	PL120	;call to abstracted procedure
  8783  002A02  8283               	bsf	3971,1,c	;volatile
  8784  002A04  9083               	bcf	3971,0,c	;volatile
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;HD44780.c: 38: Lcd_Delay5us();
  8788  002A06  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  8789                           
  8790                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8791  002A0A  D810               	call	PL120	;call to abstracted procedure
  8792  002A0C  9283               	bcf	3971,1,c	;volatile
  8793  002A0E  9083               	bcf	3971,0,c	;volatile
  8794                           
  8795                           ;HD44780.c: 40: Lcd_Delay5500us();
  8796  002A10  ECFA  F018         	call	_Lcd_Delay5500us	;wreg free
  8797  002A14  0E28               	movlw	40
  8798  002A16  EC47  F011         	call	_Lcd_Command
  8799  002A1A  0E10               	movlw	16
  8800  002A1C  EC47  F011         	call	_Lcd_Command
  8801  002A20  0E01               	movlw	1
  8802  002A22  EC47  F011         	call	_Lcd_Command
  8803  002A26  0E0F               	movlw	15
  8804  002A28  EF47  F011         	goto	_Lcd_Command
  8805  002A2C                     __end_of_Lcd_Init:
  8806                           	opt stack 0
  8807  002A2C                     PL120:
  8808                           	opt stack 19
  8809  002A2C  9A83               	bcf	3971,5,c	;volatile
  8810  002A2E  9883               	bcf	3971,4,c	;volatile
  8811  002A30  8683               	bsf	3971,3,c	;volatile
  8812  002A32  9483               	bcf	3971,2,c	;volatile
  8813  002A34  0012               	return	
  8814  002A36                     __end_ofPL120:
  8815                           	opt stack 0
  8816  002A36                     PL122:
  8817                           	opt stack 19
  8818  002A36  9A83               	bcf	3971,5,c	;volatile
  8819  002A38  9883               	bcf	3971,4,c	;volatile
  8820  002A3A  8683               	bsf	3971,3,c	;volatile
  8821  002A3C  8483               	bsf	3971,2,c	;volatile
  8822  002A3E  0012               	return	
  8823  002A40                     __end_ofPL122:
  8824                           	opt stack 0
  8825                           tosu	equ	0xFFF
  8826                           tosh	equ	0xFFE
  8827                           tosl	equ	0xFFD
  8828                           pclath	equ	0xFFA
  8829                           tblptru	equ	0xFF8
  8830                           tblptrh	equ	0xFF7
  8831                           tblptrl	equ	0xFF6
  8832                           tablat	equ	0xFF5
  8833                           prodh	equ	0xFF4
  8834                           prodl	equ	0xFF3
  8835                           intcon	equ	0xFF2
  8836                           postinc0	equ	0xFEE
  8837                           plusw0	equ	0xFEB
  8838                           wreg	equ	0xFE8
  8839                           indf1	equ	0xFE7
  8840                           postinc1	equ	0xFE6
  8841                           postdec1	equ	0xFE5
  8842                           plusw1	equ	0xFE3
  8843                           fsr1h	equ	0xFE2
  8844                           fsr1l	equ	0xFE1
  8845                           indf2	equ	0xFDF
  8846                           postinc2	equ	0xFDE
  8847                           postdec2	equ	0xFDD
  8848                           plusw2	equ	0xFDB
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8
  8852                           
  8853 ;; *************** function _Lcd_Delay5500us *****************
  8854 ;; Defined at:
  8855 ;;		line 153 in file "libs/HD44780.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;		None
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;		None
  8860 ;; Return value:  Size  Location     Type
  8861 ;;                  1    wreg      void 
  8862 ;; Registers used:
  8863 ;;		wreg
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8872 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8873 ;;Total ram usage:        1 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    9
  8876 ;; This function calls:
  8877 ;;		Nothing
  8878 ;; This function is called by:
  8879 ;;		_Lcd_Init
  8880 ;; This function uses a non-reentrant model
  8881 ;;
  8882                           
  8883                           	psect	text42
  8884  0031F4                     __ptext42:
  8885                           	opt stack 0
  8886  0031F4                     _Lcd_Delay5500us:
  8887                           	opt stack 20
  8888                           
  8889                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  8890                           
  8891                           ;incstack = 0
  8892  0031F4  0E08               	movlw	8
  8893  0031F6  0100               	movlb	0	; () banked
  8894  0031F8  6F60               	movwf	??_Lcd_Delay5500us& (0+255),b
  8895  0031FA  0E23               	movlw	35
  8896  0031FC                     u5007:
  8897  0031FC  2EE8               	decfsz	wreg,f,c
  8898  0031FE  D7FE               	bra	u5007
  8899  003200  2F60               	decfsz	??_Lcd_Delay5500us& (0+255),f,b
  8900  003202  D7FC               	bra	u5007
  8901  003204  0012               	return		;funcret
  8902  003206                     __end_of_Lcd_Delay5500us:
  8903                           	opt stack 0
  8904                           tosu	equ	0xFFF
  8905                           tosh	equ	0xFFE
  8906                           tosl	equ	0xFFD
  8907                           pclath	equ	0xFFA
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           postinc0	equ	0xFEE
  8916                           plusw0	equ	0xFEB
  8917                           wreg	equ	0xFE8
  8918                           indf1	equ	0xFE7
  8919                           postinc1	equ	0xFE6
  8920                           postdec1	equ	0xFE5
  8921                           plusw1	equ	0xFE3
  8922                           fsr1h	equ	0xFE2
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           plusw2	equ	0xFDB
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function _Lcd_Command *****************
  8933 ;; Defined at:
  8934 ;;		line 133 in file "libs/HD44780.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  command         1    wreg     unsigned char 
  8937 ;; Auto vars:     Size  Location     Type
  8938 ;;  command         1    2[BANK0 ] unsigned char 
  8939 ;; Return value:  Size  Location     Type
  8940 ;;                  1    wreg      void 
  8941 ;; Registers used:
  8942 ;;		wreg, status,2, status,0, cstack
  8943 ;; Tracked objects:
  8944 ;;		On entry : 0/0
  8945 ;;		On exit  : 0/0
  8946 ;;		Unchanged: 0/0
  8947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8950 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8951 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8952 ;;Total ram usage:        3 bytes
  8953 ;; Hardware stack levels used:    1
  8954 ;; Hardware stack levels required when called:   10
  8955 ;; This function calls:
  8956 ;;		_Lcd_Delay5us
  8957 ;; This function is called by:
  8958 ;;		_Lcd_Init
  8959 ;;		_Lcd_WriteChar
  8960 ;; This function uses a non-reentrant model
  8961 ;;
  8962                           
  8963                           	psect	text43
  8964  00228E                     __ptext43:
  8965                           	opt stack 0
  8966  00228E                     _Lcd_Command:
  8967                           	opt stack 18
  8968                           
  8969                           ;incstack = 0
  8970                           ;Lcd_Command@command stored from wreg
  8971  00228E  0100               	movlb	0	; () banked
  8972  002290  6F62               	movwf	Lcd_Command@command& (0+255),b
  8973                           
  8974                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
  8975  002292  9283               	bcf	3971,1,c	;volatile
  8976  002294  9083               	bcf	3971,0,c	;volatile
  8977                           
  8978                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
  8979  002296  6B60               	clrf	??_Lcd_Command& (0+255),b
  8980  002298  AF62               	btfss	Lcd_Command@command& (0+255),7,b
  8981  00229A  D001               	bra	u3835
  8982  00229C  2B60               	incf	??_Lcd_Command& (0+255),f,b
  8983  00229E                     u3835:
  8984  00229E  D843               	call	PL54	;call to abstracted procedure
  8985  0022A0  0E06               	movlw	6
  8986  0022A2  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
  8987  0022A4                     u3845:
  8988  0022A4  90D8               	bcf	status,0,c
  8989  0022A6  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  8990  0022A8  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
  8991  0022AA  D7FC               	goto	u3845
  8992  0022AC  D84D               	call	PL70	;call to abstracted procedure
  8993                           
  8994                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
  8995  0022AE  D847               	call	PL62	;call to abstracted procedure
  8996  0022B0  0E05               	movlw	5
  8997  0022B2  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
  8998  0022B4                     u3855:
  8999  0022B4  90D8               	bcf	status,0,c
  9000  0022B6  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9001  0022B8  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
  9002  0022BA  D7FC               	goto	u3855
  9003  0022BC  0E01               	movlw	1
  9004  0022BE  D827               	call	PL52	;call to abstracted procedure
  9005  0022C0  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  9006  0022C2  0E0F               	movlw	15
  9007  0022C4  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9008  0022C6  0E01               	movlw	1
  9009  0022C8  D846               	call	PL82	;call to abstracted procedure
  9010                           
  9011                           ; BSR set to: 0
  9012                           ;HD44780.c: 137: _delay(10);
  9013  0022CA  0E03               	movlw	3
  9014  0022CC                     u5017:
  9015  0022CC  2EE8               	decfsz	wreg,f,c
  9016  0022CE  D7FE               	bra	u5017
  9017  0022D0  F000               	nop	
  9018                           
  9019                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  9020  0022D2  8283               	bsf	3971,1,c	;volatile
  9021  0022D4  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  9022  0022D8  9283               	bcf	3971,1,c	;volatile
  9023                           
  9024                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
  9025  0022DA  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9026  0022DE  0100               	movlb	0	; () banked
  9027  0022E0  90D8               	bcf	status,0,c
  9028  0022E2  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9029  0022E4  D841               	call	PL98	;call to abstracted procedure
  9030                           
  9031                           ; BSR set to: 0
  9032  0022E6  D81F               	call	PL54	;call to abstracted procedure
  9033  0022E8  D83F               	call	PL98	;call to abstracted procedure
  9034  0022EA  D82E               	call	PL70	;call to abstracted procedure
  9035                           
  9036                           ; BSR set to: 0
  9037                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
  9038  0022EC  D828               	call	PL62	;call to abstracted procedure
  9039  0022EE  90D8               	bcf	status,0,c
  9040  0022F0  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9041  0022F2  0E01               	movlw	1
  9042                           
  9043                           ; BSR set to: 0
  9044  0022F4  D80C               	call	PL52	;call to abstracted procedure
  9045  0022F6  0E01               	movlw	1
  9046  0022F8  D82E               	call	PL82	;call to abstracted procedure
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;HD44780.c: 141: _delay(10);
  9050  0022FA  0E03               	movlw	3
  9051  0022FC                     u5027:
  9052  0022FC  2EE8               	decfsz	wreg,f,c
  9053  0022FE  D7FE               	bra	u5027
  9054  002300  F000               	nop	
  9055                           
  9056                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  9057  002302  8283               	bsf	3971,1,c	;volatile
  9058  002304  EC10  F019         	call	_Lcd_Delay5us	;wreg free
  9059  002308  9283               	bcf	3971,1,c	;volatile
  9060                           
  9061                           ;HD44780.c: 144: Lcd_Delay5us();
  9062  00230A  EF10  F019         	goto	_Lcd_Delay5us	;wreg free
  9063  00230E                     __end_of_Lcd_Command:
  9064                           	opt stack 0
  9065  00230E                     PL52:
  9066                           	opt stack 18
  9067  00230E  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9068  002310  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9069  002312  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9070  002314  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9071  002316  5083               	movf	3971,w,c	;volatile
  9072  002318  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9073  00231A  0BF7               	andlw	-9
  9074  00231C  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9075  00231E  6E83               	movwf	3971,c	;volatile
  9076  002320  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9077  002324  0012               	return	
  9078  002326                     __end_ofPL52:
  9079                           	opt stack 0
  9080  002326                     PL54:
  9081                           	opt stack 18
  9082  002326  0E01               	movlw	1
  9083  002328  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9084  00232A  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  9085  00232C  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9086  00232E  5083               	movf	3971,w,c	;volatile
  9087  002330  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9088  002332  0BDF               	andlw	-33
  9089  002334  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9090  002336  6E83               	movwf	3971,c	;volatile
  9091  002338  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9092  00233C  0012               	return	
  9093  00233E                     __end_ofPL54:
  9094                           	opt stack 0
  9095  00233E                     PL62:
  9096                           	opt stack 18
  9097  00233E  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9098  002340  6E83               	movwf	3971,c	;volatile
  9099  002342  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
  9100  002346  0012               	return	
  9101  002348                     __end_ofPL62:
  9102                           	opt stack 0
  9103  002348                     PL70:
  9104                           	opt stack 18
  9105  002348  0E01               	movlw	1
  9106  00234A  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9107  00234C  3B60               	swapf	??_Lcd_Command& (0+255),f,b
  9108  00234E  5083               	movf	3971,w,c	;volatile
  9109  002350  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9110  002352  0BEF               	andlw	-17
  9111  002354  0012               	return	
  9112  002356                     __end_ofPL70:
  9113                           	opt stack 0
  9114  002356                     PL82:
  9115                           	opt stack 18
  9116  002356  1760               	andwf	??_Lcd_Command& (0+255),f,b
  9117  002358  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9118  00235A  4760               	rlncf	??_Lcd_Command& (0+255),f,b
  9119  00235C  5083               	movf	3971,w,c	;volatile
  9120  00235E  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9121  002360  0BFB               	andlw	-5
  9122  002362  1960               	xorwf	??_Lcd_Command& (0+255),w,b
  9123  002364  6E83               	movwf	3971,c	;volatile
  9124  002366  0012               	return	
  9125  002368                     __end_ofPL82:
  9126                           	opt stack 0
  9127  002368                     PL98:
  9128                           	opt stack 18
  9129  002368  90D8               	bcf	status,0,c
  9130  00236A  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9131  00236C  90D8               	bcf	status,0,c
  9132  00236E  3360               	rrcf	??_Lcd_Command& (0+255),f,b
  9133  002370  0012               	return	
  9134  002372                     __end_ofPL98:
  9135                           	opt stack 0
  9136                           tosu	equ	0xFFF
  9137                           tosh	equ	0xFFE
  9138                           tosl	equ	0xFFD
  9139                           pclath	equ	0xFFA
  9140                           tblptru	equ	0xFF8
  9141                           tblptrh	equ	0xFF7
  9142                           tblptrl	equ	0xFF6
  9143                           tablat	equ	0xFF5
  9144                           prodh	equ	0xFF4
  9145                           prodl	equ	0xFF3
  9146                           intcon	equ	0xFF2
  9147                           postinc0	equ	0xFEE
  9148                           plusw0	equ	0xFEB
  9149                           wreg	equ	0xFE8
  9150                           indf1	equ	0xFE7
  9151                           postinc1	equ	0xFE6
  9152                           postdec1	equ	0xFE5
  9153                           plusw1	equ	0xFE3
  9154                           fsr1h	equ	0xFE2
  9155                           fsr1l	equ	0xFE1
  9156                           indf2	equ	0xFDF
  9157                           postinc2	equ	0xFDE
  9158                           postdec2	equ	0xFDD
  9159                           plusw2	equ	0xFDB
  9160                           fsr2h	equ	0xFDA
  9161                           fsr2l	equ	0xFD9
  9162                           status	equ	0xFD8
  9163                           
  9164 ;; *************** function _Lcd_Delay5us *****************
  9165 ;; Defined at:
  9166 ;;		line 150 in file "libs/HD44780.c"
  9167 ;; Parameters:    Size  Location     Type
  9168 ;;		None
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      void 
  9173 ;; Registers used:
  9174 ;;		None
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9184 ;;Total ram usage:        0 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:    9
  9187 ;; This function calls:
  9188 ;;		Nothing
  9189 ;; This function is called by:
  9190 ;;		_Lcd_Init
  9191 ;;		_Lcd_CharCP
  9192 ;;		_Lcd_Command
  9193 ;; This function uses a non-reentrant model
  9194 ;;
  9195                           
  9196                           	psect	text44
  9197  003220                     __ptext44:
  9198                           	opt stack 0
  9199  003220                     _Lcd_Delay5us:
  9200                           	opt stack 18
  9201                           
  9202                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
  9203                           
  9204                           ;incstack = 0
  9205  003220  D000               	nop2		;2 cycle nop
  9206  003222  D000               	nop2		;2 cycle nop
  9207  003224  F000               	nop	
  9208  003226  0012               	return		;funcret
  9209  003228                     __end_of_Lcd_Delay5us:
  9210                           	opt stack 0
  9211                           tosu	equ	0xFFF
  9212                           tosh	equ	0xFFE
  9213                           tosl	equ	0xFFD
  9214                           pclath	equ	0xFFA
  9215                           tblptru	equ	0xFF8
  9216                           tblptrh	equ	0xFF7
  9217                           tblptrl	equ	0xFF6
  9218                           tablat	equ	0xFF5
  9219                           prodh	equ	0xFF4
  9220                           prodl	equ	0xFF3
  9221                           intcon	equ	0xFF2
  9222                           postinc0	equ	0xFEE
  9223                           plusw0	equ	0xFEB
  9224                           wreg	equ	0xFE8
  9225                           indf1	equ	0xFE7
  9226                           postinc1	equ	0xFE6
  9227                           postdec1	equ	0xFE5
  9228                           plusw1	equ	0xFE3
  9229                           fsr1h	equ	0xFE2
  9230                           fsr1l	equ	0xFE1
  9231                           indf2	equ	0xFDF
  9232                           postinc2	equ	0xFDE
  9233                           postdec2	equ	0xFDD
  9234                           plusw2	equ	0xFDB
  9235                           fsr2h	equ	0xFDA
  9236                           fsr2l	equ	0xFD9
  9237                           status	equ	0xFD8
  9238                           
  9239 ;; *************** function _GetEventNumber *****************
  9240 ;; Defined at:
  9241 ;;		line 210 in file "libs/funcs.c"
  9242 ;; Parameters:    Size  Location     Type
  9243 ;;		None
  9244 ;; Auto vars:     Size  Location     Type
  9245 ;;  i               2   15[BANK0 ] unsigned int 
  9246 ;; Return value:  Size  Location     Type
  9247 ;;                  1    wreg      char 
  9248 ;; Registers used:
  9249 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9250 ;; Tracked objects:
  9251 ;;		On entry : 3F/0
  9252 ;;		On exit  : 3F/0
  9253 ;;		Unchanged: 0/0
  9254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9256 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9257 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9258 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9259 ;;Total ram usage:       11 bytes
  9260 ;; Hardware stack levels used:    1
  9261 ;; Hardware stack levels required when called:   10
  9262 ;; This function calls:
  9263 ;;		___wmul
  9264 ;; This function is called by:
  9265 ;;		_main
  9266 ;; This function uses a non-reentrant model
  9267 ;;
  9268                           
  9269                           	psect	text45
  9270  001A72                     __ptext45:
  9271                           	opt stack 0
  9272  001A72                     _GetEventNumber:
  9273                           	opt stack 20
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;funcs.c: 211: for (UINT i=0; i<24; i++) {
  9277                           
  9278                           ;incstack = 0
  9279  001A72  6B6F               	clrf	GetEventNumber@i& (0+255),b
  9280  001A74  6B70               	clrf	(GetEventNumber@i+1)& (0+255),b
  9281  001A76                     l4749:
  9282                           
  9283                           ; BSR set to: 0
  9284                           ;funcs.c: 212: if ((EVENTS[i].START_TIME>0) &&
  9285                           ;funcs.c: 213: (DATE_TIME.DAY.Val & EVENTS[i].SELECTED_WEEKS.Val & 0x7F)) {
  9286  001A76  D86B               	call	PL12	;call to abstracted procedure
  9287  001A78  EC51  F018         	call	___wmul	;wreg free
  9288  001A7C  D880               	call	PL42	;call to abstracted procedure
  9289  001A7E  0E02               	movlw	high _EVENTS
  9290  001A80  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9291  001A82  6EDA               	movwf	fsr2h,c
  9292  001A84  0E03               	movlw	3
  9293  001A86  BEDB               	btfsc	plusw2,7,c
  9294  001A88  D05A               	goto	l4771
  9295  001A8A  50DB               	movf	plusw2,w,c
  9296  001A8C  E108               	bnz	u4810
  9297  001A8E  0E02               	movlw	2
  9298  001A90  50DB               	movf	plusw2,w,c
  9299  001A92  E105               	bnz	u4810
  9300  001A94  0E01               	movlw	1
  9301  001A96  50DB               	movf	plusw2,w,c
  9302  001A98  E102               	bnz	u4810
  9303  001A9A  04DE               	decf	postinc2,w,c
  9304  001A9C  E350               	bnc	l4771
  9305  001A9E                     u4810:
  9306                           
  9307                           ; BSR set to: 0
  9308  001A9E  D857               	call	PL12	;call to abstracted procedure
  9309  001AA0  EC51  F018         	call	___wmul	;wreg free
  9310  001AA4  D875               	call	PL108	;call to abstracted procedure
  9311  001AA6  30DF               	rrcf	223,w,c
  9312  001AA8  0B7F               	andlw	127
  9313  001AAA  0100               	movlb	0	; () banked
  9314  001AAC  6F66               	movwf	??_GetEventNumber& (0+255),b
  9315  001AAE  31C1               	rrcf	(_DATE_TIME+8)& (0+255),w,b
  9316  001AB0  0B7F               	andlw	127
  9317  001AB2  1566               	andwf	??_GetEventNumber& (0+255),w,b
  9318  001AB4  6F67               	movwf	(??_GetEventNumber+1)& (0+255),b
  9319  001AB6  0E7F               	movlw	127
  9320  001AB8  1767               	andwf	(??_GetEventNumber+1)& (0+255),f,b
  9321  001ABA  E041               	bz	l4771
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;funcs.c: 214: if (EVENTS[i].START_TIME < EVENTS[i].END_TIME) {
  9325  001ABC  D848               	call	PL12	;call to abstracted procedure
  9326  001ABE  EC51  F018         	call	___wmul	;wreg free
  9327  001AC2  D861               	call	PL74	;call to abstracted procedure
  9328  001AC4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9329  001AC6  6EDA               	movwf	fsr2h,c
  9330  001AC8  D842               	call	PL12	;call to abstracted procedure
  9331  001ACA  EC51  F018         	call	___wmul	;wreg free
  9332  001ACE  0E00               	movlw	low _EVENTS
  9333  001AD0  2560               	addwf	?___wmul& (0+255),w,b
  9334  001AD2  6EE1               	movwf	fsr1l,c
  9335  001AD4  0E02               	movlw	high _EVENTS
  9336  001AD6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9337  001AD8  6EE2               	movwf	fsr1h,c
  9338  001ADA  50DE               	movf	postinc2,w,c
  9339  001ADC  5CE6               	subwf	postinc1,w,c
  9340  001ADE  50DE               	movf	postinc2,w,c
  9341  001AE0  58E6               	subwfb	postinc1,w,c
  9342  001AE2  50DE               	movf	postinc2,w,c
  9343  001AE4  58E6               	subwfb	postinc1,w,c
  9344  001AE6  50E6               	movf	postinc1,w,c
  9345  001AE8  0A80               	xorlw	128
  9346  001AEA  6F6E               	movwf	(??_GetEventNumber+8)& (0+255),b
  9347  001AEC  50DE               	movf	postinc2,w,c
  9348  001AEE  0A80               	xorlw	128
  9349  001AF0  596E               	subwfb	(??_GetEventNumber+8)& (0+255),w,b
  9350  001AF2  E21B               	bc	l4763
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;funcs.c: 215: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
  9354                           ;funcs.c: 216: && (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
  9355  001AF4  D82C               	call	PL12	;call to abstracted procedure
  9356  001AF6  EC51  F018         	call	___wmul	;wreg free
  9357  001AFA  D841               	call	PL42	;call to abstracted procedure
  9358  001AFC  D830               	call	PL34	;call to abstracted procedure
  9359  001AFE  E21F               	bc	l4771
  9360                           
  9361                           ; BSR set to: 0
  9362  001B00  D826               	call	PL12	;call to abstracted procedure
  9363  001B02  EC51  F018         	call	___wmul	;wreg free
  9364  001B06  D83F               	call	PL74	;call to abstracted procedure
  9365  001B08  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9366  001B0A  6EDA               	movwf	fsr2h,c
  9367  001B0C  50DE               	movf	postinc2,w,c
  9368  001B0E  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  9369  001B10  50DE               	movf	postinc2,w,c
  9370  001B12  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  9371  001B14  50DE               	movf	postinc2,w,c
  9372  001B16  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  9373  001B18  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
  9374  001B1A  0A80               	xorlw	128
  9375  001B1C  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
  9376  001B1E  50DE               	movf	postinc2,w,c
  9377  001B20  0A80               	xorlw	128
  9378  001B22  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
  9379  001B24  E20C               	bc	l4771
  9380  001B26                     l4759:
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;funcs.c: 217: return i;
  9384  001B26  516F               	movf	GetEventNumber@i& (0+255),w,b
  9385  001B28  0012               	return	
  9386  001B2A                     l4763:
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;funcs.c: 220: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
  9390                           ;funcs.c: 221: || (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
  9391  001B2A  D811               	call	PL12	;call to abstracted procedure
  9392  001B2C  EC51  F018         	call	___wmul	;wreg free
  9393  001B30  D826               	call	PL42	;call to abstracted procedure
  9394  001B32  D815               	call	PL34	;call to abstracted procedure
  9395  001B34  E3F8               	bnc	l4759
  9396                           
  9397                           ; BSR set to: 0
  9398  001B36  D80B               	call	PL12	;call to abstracted procedure
  9399  001B38  EC51  F018         	call	___wmul	;wreg free
  9400  001B3C  D7E4               	goto	L8
  9401  001B3E                     l4771:
  9402                           
  9403                           ; BSR set to: 0
  9404  001B3E  4B6F               	infsnz	GetEventNumber@i& (0+255),f,b
  9405  001B40  2B70               	incf	(GetEventNumber@i+1)& (0+255),f,b
  9406                           
  9407                           ; BSR set to: 0
  9408  001B42  5170               	movf	(GetEventNumber@i+1)& (0+255),w,b
  9409  001B44  E103               	bnz	u4880
  9410  001B46  0E18               	movlw	24
  9411  001B48  5D6F               	subwf	GetEventNumber@i& (0+255),w,b
  9412  001B4A  E395               	bnc	l4749
  9413  001B4C                     u4880:
  9414                           
  9415                           ; BSR set to: 0
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;funcs.c: 223: }
  9419                           ;funcs.c: 224: }
  9420                           ;funcs.c: 225: }
  9421                           ;funcs.c: 226: }
  9422                           ;funcs.c: 227: return -1;
  9423  001B4C  0CFF               	retlw	255	;funcret
  9424  001B4E                     __end_of_GetEventNumber:
  9425                           	opt stack 0
  9426  001B4E                     PL12:
  9427                           	opt stack 20
  9428  001B4E  C06F  F060         	movff	GetEventNumber@i,___wmul@multiplier
  9429  001B52  C070  F061         	movff	GetEventNumber@i+1,___wmul@multiplier+1
  9430  001B56  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9431  001B58  0E0A               	movlw	10
  9432  001B5A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9433  001B5C  0C0A               	retlw	10
  9434  001B5E                     __end_ofPL12:
  9435                           	opt stack 0
  9436  001B5E                     PL34:
  9437                           	opt stack 20
  9438  001B5E  0E02               	movlw	high _EVENTS
  9439  001B60  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9440  001B62  6EDA               	movwf	fsr2h,c
  9441  001B64  51B9               	movf	_DATE_TIME& (0+255),w,b
  9442  001B66  5CDE               	subwf	postinc2,w,c
  9443  001B68  51BA               	movf	(_DATE_TIME+1)& (0+255),w,b
  9444  001B6A  58DE               	subwfb	postinc2,w,c
  9445  001B6C  51BB               	movf	(_DATE_TIME+2)& (0+255),w,b
  9446  001B6E  58DE               	subwfb	postinc2,w,c
  9447  001B70  50DE               	movf	postinc2,w,c
  9448  001B72  0A80               	xorlw	128
  9449  001B74  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
  9450  001B76  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
  9451  001B78  0A80               	xorlw	128
  9452  001B7A  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
  9453  001B7C  0012               	return	
  9454  001B7E                     __end_ofPL34:
  9455                           	opt stack 0
  9456  001B7E                     PL42:
  9457                           	opt stack 19
  9458  001B7E  0E00               	movlw	low _EVENTS
  9459  001B80  2560               	addwf	?___wmul& (0+255),w,b
  9460  001B82  6ED9               	movwf	fsr2l,c
  9461  001B84  0012               	return	
  9462  001B86                     __end_ofPL42:
  9463                           	opt stack 0
  9464  001B86                     PL74:
  9465                           	opt stack 19
  9466  001B86  0E04               	movlw	low (_EVENTS+4)
  9467  001B88  2560               	addwf	?___wmul& (0+255),w,b
  9468  001B8A  6ED9               	movwf	fsr2l,c
  9469  001B8C  0E02               	movlw	high (_EVENTS+4)
  9470  001B8E  0012               	return	
  9471  001B90                     __end_ofPL74:
  9472                           	opt stack 0
  9473  001B90                     PL108:
  9474                           	opt stack 19
  9475  001B90  0E09               	movlw	low (_EVENTS+9)
  9476  001B92  2560               	addwf	?___wmul& (0+255),w,b
  9477  001B94  6ED9               	movwf	fsr2l,c
  9478  001B96  0E02               	movlw	high (_EVENTS+9)
  9479  001B98  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9480  001B9A  6EDA               	movwf	fsr2h,c
  9481  001B9C  0012               	return	
  9482  001B9E                     __end_ofPL108:
  9483                           	opt stack 0
  9484                           tosu	equ	0xFFF
  9485                           tosh	equ	0xFFE
  9486                           tosl	equ	0xFFD
  9487                           pclath	equ	0xFFA
  9488                           tblptru	equ	0xFF8
  9489                           tblptrh	equ	0xFF7
  9490                           tblptrl	equ	0xFF6
  9491                           tablat	equ	0xFF5
  9492                           prodh	equ	0xFF4
  9493                           prodl	equ	0xFF3
  9494                           intcon	equ	0xFF2
  9495                           postinc0	equ	0xFEE
  9496                           plusw0	equ	0xFEB
  9497                           wreg	equ	0xFE8
  9498                           indf1	equ	0xFE7
  9499                           postinc1	equ	0xFE6
  9500                           postdec1	equ	0xFE5
  9501                           plusw1	equ	0xFE3
  9502                           fsr1h	equ	0xFE2
  9503                           fsr1l	equ	0xFE1
  9504                           indf2	equ	0xFDF
  9505                           postinc2	equ	0xFDE
  9506                           postdec2	equ	0xFDD
  9507                           plusw2	equ	0xFDB
  9508                           fsr2h	equ	0xFDA
  9509                           fsr2l	equ	0xFD9
  9510                           status	equ	0xFD8
  9511                           
  9512 ;; *************** function ___wmul *****************
  9513 ;; Defined at:
  9514 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  9515 ;; Parameters:    Size  Location     Type
  9516 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9517 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;  product         2    4[BANK0 ] unsigned int 
  9520 ;; Return value:  Size  Location     Type
  9521 ;;                  2    0[BANK0 ] unsigned int 
  9522 ;; Registers used:
  9523 ;;		wreg, status,2, status,0, prodl, prodh
  9524 ;; Tracked objects:
  9525 ;;		On entry : 3F/0
  9526 ;;		On exit  : 3F/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9529 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9530 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9533 ;;Total ram usage:        6 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    9
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_LoadSettingsFromEeprom
  9540 ;;		_LoadEventsFromEeprom
  9541 ;;		_LoadStatesFromEeprom
  9542 ;;		_LoadCyclesFromEeprom
  9543 ;;		_AdjustDayLightSaving
  9544 ;;		_GetEventNumber
  9545 ;; This function uses a non-reentrant model
  9546 ;;
  9547                           
  9548                           	psect	text46
  9549  0030A2                     __ptext46:
  9550                           	opt stack 0
  9551  0030A2                     ___wmul:
  9552                           	opt stack 19
  9553                           
  9554                           ; BSR set to: 0
  9555                           
  9556                           ; BSR set to: 0
  9557                           ;incstack = 0
  9558  0030A2  5160               	movf	___wmul@multiplier& (0+255),w,b
  9559  0030A4  0362               	mulwf	___wmul@multiplicand& (0+255),b
  9560  0030A6  CFF3 F064          	movff	prodl,___wmul@product
  9561  0030AA  CFF4 F065          	movff	prodh,___wmul@product+1
  9562  0030AE  5160               	movf	___wmul@multiplier& (0+255),w,b
  9563  0030B0  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9564  0030B2  50F3               	movf	prodl,w,c
  9565  0030B4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  9566  0030B6  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9567  0030B8  0362               	mulwf	___wmul@multiplicand& (0+255),b
  9568  0030BA  50F3               	movf	prodl,w,c
  9569  0030BC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  9570                           
  9571                           ; BSR set to: 0
  9572  0030BE  C064  F060         	movff	___wmul@product,?___wmul
  9573  0030C2  C065  F061         	movff	___wmul@product+1,?___wmul+1
  9574                           
  9575                           ; BSR set to: 0
  9576  0030C6  0012               	return		;funcret
  9577  0030C8                     __end_of___wmul:
  9578                           	opt stack 0
  9579                           tosu	equ	0xFFF
  9580                           tosh	equ	0xFFE
  9581                           tosl	equ	0xFFD
  9582                           pclath	equ	0xFFA
  9583                           tblptru	equ	0xFF8
  9584                           tblptrh	equ	0xFF7
  9585                           tblptrl	equ	0xFF6
  9586                           tablat	equ	0xFF5
  9587                           prodh	equ	0xFF4
  9588                           prodl	equ	0xFF3
  9589                           intcon	equ	0xFF2
  9590                           postinc0	equ	0xFEE
  9591                           plusw0	equ	0xFEB
  9592                           wreg	equ	0xFE8
  9593                           indf1	equ	0xFE7
  9594                           postinc1	equ	0xFE6
  9595                           postdec1	equ	0xFE5
  9596                           plusw1	equ	0xFE3
  9597                           fsr1h	equ	0xFE2
  9598                           fsr1l	equ	0xFE1
  9599                           indf2	equ	0xFDF
  9600                           postinc2	equ	0xFDE
  9601                           postdec2	equ	0xFDD
  9602                           plusw2	equ	0xFDB
  9603                           fsr2h	equ	0xFDA
  9604                           fsr2l	equ	0xFD9
  9605                           status	equ	0xFD8
  9606                           
  9607 ;; *************** function _INTERRUPT_InterruptManager *****************
  9608 ;; Defined at:
  9609 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  9610 ;; Parameters:    Size  Location     Type
  9611 ;;		None
  9612 ;; Auto vars:     Size  Location     Type
  9613 ;;		None
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  1    wreg      void 
  9616 ;; Registers used:
  9617 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 31/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9625 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9626 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9627 ;;Total ram usage:       10 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; Hardware stack levels required when called:    8
  9630 ;; This function calls:
  9631 ;;		_TMR0_ISR
  9632 ;; This function is called by:
  9633 ;;		Interrupt level 2
  9634 ;; This function uses a non-reentrant model
  9635 ;;
  9636                           
  9637                           	psect	intcode
  9638  000008                     __pintcode:
  9639                           	opt stack 0
  9640  000008                     _INTERRUPT_InterruptManager:
  9641                           	opt stack 15
  9642                           
  9643                           ; BSR set to: 0
  9644                           ;incstack = 0
  9645  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9646  00000A  CFFA F042          	movff	pclath,??_INTERRUPT_InterruptManager
  9647  00000E  CFFB F043          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9648  000012  CFE9 F044          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9649  000016  CFEA F045          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9650  00001A  CFE1 F046          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9651  00001E  CFE2 F047          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9652  000022  CFD9 F048          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9653  000026  CFDA F049          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9654  00002A  CFF3 F04A          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9655  00002E  CFF4 F04B          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9656                           
  9657                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  9658  000032  010E               	movlb	14	; () banked
  9659  000034  BBC2               	btfsc	194,5,b	;volatile
  9660                           
  9661                           ; BSR set to: 14
  9662  000036  ABCA               	btfss	202,5,b	;volatile
  9663  000038  D002               	goto	i2l764
  9664                           
  9665                           ; BSR set to: 14
  9666                           ;interrupt_manager.c: 61: {
  9667                           ;interrupt_manager.c: 62: TMR0_ISR();
  9668  00003A  EC87  F018         	call	_TMR0_ISR	;wreg free
  9669  00003E                     i2l764:
  9670  00003E  C04B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9671  000042  C04A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9672  000046  C049  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9673  00004A  C048  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9674  00004E  C047  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9675  000052  C046  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9676  000056  C045  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9677  00005A  C044  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9678  00005E  C043  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9679  000062  C042  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9680  000066  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9681  000068  0011               	retfie		f
  9682  00006A                     __end_of_INTERRUPT_InterruptManager:
  9683                           	opt stack 0
  9684                           tosu	equ	0xFFF
  9685                           tosh	equ	0xFFE
  9686                           tosl	equ	0xFFD
  9687                           pclatu	equ	0xFFB
  9688                           pclath	equ	0xFFA
  9689                           tblptru	equ	0xFF8
  9690                           tblptrh	equ	0xFF7
  9691                           tblptrl	equ	0xFF6
  9692                           tablat	equ	0xFF5
  9693                           prodh	equ	0xFF4
  9694                           prodl	equ	0xFF3
  9695                           intcon	equ	0xFF2
  9696                           postinc0	equ	0xFEE
  9697                           plusw0	equ	0xFEB
  9698                           fsr0h	equ	0xFEA
  9699                           fsr0l	equ	0xFE9
  9700                           wreg	equ	0xFE8
  9701                           indf1	equ	0xFE7
  9702                           postinc1	equ	0xFE6
  9703                           postdec1	equ	0xFE5
  9704                           plusw1	equ	0xFE3
  9705                           fsr1h	equ	0xFE2
  9706                           fsr1l	equ	0xFE1
  9707                           indf2	equ	0xFDF
  9708                           postinc2	equ	0xFDE
  9709                           postdec2	equ	0xFDD
  9710                           plusw2	equ	0xFDB
  9711                           fsr2h	equ	0xFDA
  9712                           fsr2l	equ	0xFD9
  9713                           status	equ	0xFD8
  9714                           
  9715 ;; *************** function _TMR0_ISR *****************
  9716 ;; Defined at:
  9717 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  9718 ;; Parameters:    Size  Location     Type
  9719 ;;		None
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;		None
  9722 ;; Return value:  Size  Location     Type
  9723 ;;                  1    wreg      void 
  9724 ;; Registers used:
  9725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9726 ;; Tracked objects:
  9727 ;;		On entry : 3F/E
  9728 ;;		On exit  : 3F/0
  9729 ;;		Unchanged: 0/0
  9730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9735 ;;Total ram usage:        0 bytes
  9736 ;; Hardware stack levels used:    1
  9737 ;; Hardware stack levels required when called:    7
  9738 ;; This function calls:
  9739 ;;		_TMR0_CallBack
  9740 ;; This function is called by:
  9741 ;;		_INTERRUPT_InterruptManager
  9742 ;; This function uses a non-reentrant model
  9743 ;;
  9744                           
  9745                           	psect	text48
  9746  00310E                     __ptext48:
  9747                           	opt stack 0
  9748  00310E                     _TMR0_ISR:
  9749                           	opt stack 15
  9750                           
  9751                           ; BSR set to: 14
  9752                           ;tmr0.c: 125: static volatile uint16_t CountCallBack = 0;
  9753                           ;tmr0.c: 128: PIR0bits.TMR0IF = 0;
  9754                           
  9755                           ;incstack = 0
  9756  00310E  9BCA               	bcf	202,5,b	;volatile
  9757                           
  9758                           ; BSR set to: 14
  9759                           ;tmr0.c: 130: if (++CountCallBack >= 10)
  9760  003110  0100               	movlb	0	; () banked
  9761  003112  4BDC               	infsnz	TMR0_ISR@CountCallBack& (0+255),f,b	;volatile
  9762  003114  2BDD               	incf	(TMR0_ISR@CountCallBack+1)& (0+255),f,b	;volatile
  9763  003116  51DD               	movf	(TMR0_ISR@CountCallBack+1)& (0+255),w,b	;volatile
  9764  003118  E104               	bnz	i2u489_40
  9765  00311A  0E0A               	movlw	10
  9766  00311C  5DDC               	subwf	TMR0_ISR@CountCallBack& (0+255),w,b	;volatile
  9767  00311E  A0D8               	btfss	status,0,c
  9768  003120  0012               	return	
  9769  003122                     i2u489_40:
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;tmr0.c: 131: {
  9773                           ;tmr0.c: 133: TMR0_CallBack();
  9774  003122  ECA4  F018         	call	_TMR0_CallBack	;wreg free
  9775                           
  9776                           ;tmr0.c: 136: CountCallBack = 0;
  9777  003126  0100               	movlb	0	; () banked
  9778  003128  6BDC               	clrf	TMR0_ISR@CountCallBack& (0+255),b	;volatile
  9779  00312A  6BDD               	clrf	(TMR0_ISR@CountCallBack+1)& (0+255),b	;volatile
  9780                           
  9781                           ; BSR set to: 0
  9782  00312C  0012               	return		;funcret
  9783  00312E                     __end_of_TMR0_ISR:
  9784                           	opt stack 0
  9785                           tosu	equ	0xFFF
  9786                           tosh	equ	0xFFE
  9787                           tosl	equ	0xFFD
  9788                           pclatu	equ	0xFFB
  9789                           pclath	equ	0xFFA
  9790                           tblptru	equ	0xFF8
  9791                           tblptrh	equ	0xFF7
  9792                           tblptrl	equ	0xFF6
  9793                           tablat	equ	0xFF5
  9794                           prodh	equ	0xFF4
  9795                           prodl	equ	0xFF3
  9796                           intcon	equ	0xFF2
  9797                           postinc0	equ	0xFEE
  9798                           plusw0	equ	0xFEB
  9799                           fsr0h	equ	0xFEA
  9800                           fsr0l	equ	0xFE9
  9801                           wreg	equ	0xFE8
  9802                           indf1	equ	0xFE7
  9803                           postinc1	equ	0xFE6
  9804                           postdec1	equ	0xFE5
  9805                           plusw1	equ	0xFE3
  9806                           fsr1h	equ	0xFE2
  9807                           fsr1l	equ	0xFE1
  9808                           indf2	equ	0xFDF
  9809                           postinc2	equ	0xFDE
  9810                           postdec2	equ	0xFDD
  9811                           plusw2	equ	0xFDB
  9812                           fsr2h	equ	0xFDA
  9813                           fsr2l	equ	0xFD9
  9814                           status	equ	0xFD8
  9815                           
  9816 ;; *************** function _TMR0_CallBack *****************
  9817 ;; Defined at:
  9818 ;;		line 142 in file "mcc_generated_files/tmr0.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;                  1    wreg      void 
  9825 ;; Registers used:
  9826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  9827 ;; Tracked objects:
  9828 ;;		On entry : 3F/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    6
  9839 ;; This function calls:
  9840 ;;		Absolute function
  9841 ;;		_TMR0_DefaultInterruptHandler
  9842 ;;		_Timer0_10ms
  9843 ;; This function is called by:
  9844 ;;		_TMR0_ISR
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           	psect	text49
  9849  003148                     __ptext49:
  9850                           	opt stack 0
  9851  003148                     _TMR0_CallBack:
  9852                           	opt stack 15
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;tmr0.c: 146: if(TMR0_InterruptHandler)
  9856                           
  9857                           ; BSR set to: 0
  9858                           ;incstack = 0
  9859  003148  51DE               	movf	_TMR0_InterruptHandler& (0+255),w,b
  9860  00314A  11DF               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  9861  00314C  B4D8               	btfsc	status,2,c
  9862  00314E  0012               	return	
  9863                           
  9864                           ; BSR set to: 0
  9865                           ;tmr0.c: 147: {
  9866                           ;tmr0.c: 148: TMR0_InterruptHandler();
  9867  003150  0005               	push	
  9868  003152  6EFA               	movwf	pclath,c
  9869  003154  51DE               	movf	_TMR0_InterruptHandler& (0+255),w,b
  9870  003156  6EFD               	movwf	tosl,c
  9871  003158  51DF               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  9872  00315A  6EFE               	movwf	tosh,c
  9873  00315C  6AFF               	clrf	tosu,c
  9874  00315E  50FA               	movf	pclath,w,c
  9875  003160  0012               	return		;indir
  9876  003162                     __end_of_TMR0_CallBack:
  9877                           	opt stack 0
  9878                           tosu	equ	0xFFF
  9879                           tosh	equ	0xFFE
  9880                           tosl	equ	0xFFD
  9881                           pclatu	equ	0xFFB
  9882                           pclath	equ	0xFFA
  9883                           tblptru	equ	0xFF8
  9884                           tblptrh	equ	0xFF7
  9885                           tblptrl	equ	0xFF6
  9886                           tablat	equ	0xFF5
  9887                           prodh	equ	0xFF4
  9888                           prodl	equ	0xFF3
  9889                           intcon	equ	0xFF2
  9890                           postinc0	equ	0xFEE
  9891                           plusw0	equ	0xFEB
  9892                           fsr0h	equ	0xFEA
  9893                           fsr0l	equ	0xFE9
  9894                           wreg	equ	0xFE8
  9895                           indf1	equ	0xFE7
  9896                           postinc1	equ	0xFE6
  9897                           postdec1	equ	0xFE5
  9898                           plusw1	equ	0xFE3
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           plusw2	equ	0xFDB
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  9910 ;; Defined at:
  9911 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;		None
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		None
  9920 ;; Tracked objects:
  9921 ;;		On entry : 3F/0
  9922 ;;		On exit  : 3F/0
  9923 ;;		Unchanged: 3F/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9929 ;;Total ram usage:        0 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; This function calls:
  9932 ;;		Nothing
  9933 ;; This function is called by:
  9934 ;;		_TMR0_Initialize
  9935 ;;		_TMR0_CallBack
  9936 ;; This function uses a non-reentrant model
  9937 ;;
  9938                           
  9939                           	psect	text50
  9940  003236                     __ptext50:
  9941                           	opt stack 0
  9942  003236                     _TMR0_DefaultInterruptHandler:
  9943                           	opt stack 20
  9944                           
  9945                           ; BSR set to: 0
  9946                           
  9947                           ;incstack = 0
  9948  003236  0012               	return		;funcret
  9949  003238                     __end_of_TMR0_DefaultInterruptHandler:
  9950                           	opt stack 0
  9951                           tosu	equ	0xFFF
  9952                           tosh	equ	0xFFE
  9953                           tosl	equ	0xFFD
  9954                           pclatu	equ	0xFFB
  9955                           pclath	equ	0xFFA
  9956                           tblptru	equ	0xFF8
  9957                           tblptrh	equ	0xFF7
  9958                           tblptrl	equ	0xFF6
  9959                           tablat	equ	0xFF5
  9960                           prodh	equ	0xFF4
  9961                           prodl	equ	0xFF3
  9962                           intcon	equ	0xFF2
  9963                           postinc0	equ	0xFEE
  9964                           plusw0	equ	0xFEB
  9965                           fsr0h	equ	0xFEA
  9966                           fsr0l	equ	0xFE9
  9967                           wreg	equ	0xFE8
  9968                           indf1	equ	0xFE7
  9969                           postinc1	equ	0xFE6
  9970                           postdec1	equ	0xFE5
  9971                           plusw1	equ	0xFE3
  9972                           fsr1h	equ	0xFE2
  9973                           fsr1l	equ	0xFE1
  9974                           indf2	equ	0xFDF
  9975                           postinc2	equ	0xFDE
  9976                           postdec2	equ	0xFDD
  9977                           plusw2	equ	0xFDB
  9978                           fsr2h	equ	0xFDA
  9979                           fsr2l	equ	0xFD9
  9980                           status	equ	0xFD8
  9981                           
  9982 ;; *************** function _Timer0_10ms *****************
  9983 ;; Defined at:
  9984 ;;		line 3 in file "libs/projMain.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;		None
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;  i               1   63[COMRAM] unsigned char 
  9989 ;;  ThisCycle       1   57[COMRAM] unsigned char 
  9990 ;;  i               1   64[COMRAM] unsigned char 
  9991 ;;  ThisCycle       1   61[COMRAM] unsigned char 
  9992 ;;  i               1   62[COMRAM] unsigned char 
  9993 ;;  i               1   58[COMRAM] unsigned char 
  9994 ;;  OutForThePor    2   59[COMRAM] unsigned char [2]
  9995 ;; Return value:  Size  Location     Type
  9996 ;;                  1    wreg      void 
  9997 ;; Registers used:
  9998 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9999 ;; Tracked objects:
 10000 ;;		On entry : 3F/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10005 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10006 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10007 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10008 ;;Total ram usage:       13 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    5
 10011 ;; This function calls:
 10012 ;;		_GetThisCycle
 10013 ;;		_IncreaseByASecond
 10014 ;;		___almod
 10015 ;;		___ftmul
 10016 ;;		___fttol
 10017 ;;		___lbtoft
 10018 ;; This function is called by:
 10019 ;;		_main
 10020 ;;		_TMR0_CallBack
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           	psect	text51
 10025  000F0A                     __ptext51:
 10026                           	opt stack 0
 10027  000F0A                     _Timer0_10ms:
 10028                           	opt stack 15
 10029                           
 10030                           ; BSR set to: 0
 10031                           ;projMain.c: 4: if (FLAGS_1.bits.b0) {
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;incstack = 0
 10035  000F0A  A04E               	btfss	_FLAGS_1,0,c
 10036  000F0C  D007               	goto	i2l4057
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;projMain.c: 5: PRESENT_STATE = NEXT_STATE;
 10040  000F0E  C0E4  F056         	movff	_NEXT_STATE,_PRESENT_STATE
 10041                           
 10042                           ;projMain.c: 6: STATE_SECONDS = 0;
 10043  000F12  6A55               	clrf	_STATE_SECONDS,c
 10044                           
 10045                           ;projMain.c: 7: FLAGS_1.bits.b0 = RESET;
 10046  000F14  904E               	bcf	_FLAGS_1,0,c
 10047                           
 10048                           ;projMain.c: 8: FLAGS_1.bits.b1 = RESET;
 10049  000F16  924E               	bcf	_FLAGS_1,1,c
 10050                           
 10051                           ; BSR set to: 0
 10052                           ;projMain.c: 9: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD;
 10053  000F18  D941               	call	PL18	;call to abstracted procedure
 10054  000F1A  6E54               	movwf	_STATE_SECONDS_REMAINING,c
 10055  000F1C                     i2l4057:
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;projMain.c: 10: }
 10059                           ;projMain.c: 11: UINT8 OutForThePorts[2];
 10060                           ;projMain.c: 12: for (UINT8 i =0; i<2; i++) {
 10061  000F1C  6A3B               	clrf	Timer0_10ms@i,c
 10062  000F1E                     i2l4063:
 10063                           
 10064                           ; BSR set to: 0
 10065                           ;projMain.c: 13: OutForThePorts[i] = 0x00;
 10066  000F1E  503B               	movf	Timer0_10ms@i,w,c
 10067  000F20  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 10068  000F22  6ED9               	movwf	fsr2l,c
 10069  000F24  6ADA               	clrf	fsr2h,c
 10070  000F26  6ADF               	clrf	indf2,c
 10071                           
 10072                           ; BSR set to: 0
 10073  000F28  2A3B               	incf	Timer0_10ms@i,f,c
 10074                           
 10075                           ; BSR set to: 0
 10076  000F2A  0E01               	movlw	1
 10077  000F2C  643B               	cpfsgt	Timer0_10ms@i,c
 10078  000F2E  D7F7               	goto	i2l4063
 10079                           
 10080                           ; BSR set to: 0
 10081                           ;projMain.c: 14: }
 10082                           ;projMain.c: 15: for (UINT8 i =0; i<2; i++) {
 10083  000F30  6A3F               	clrf	Timer0_10ms@i_2900,c
 10084  000F32                     i2l4073:
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;projMain.c: 16: OutForThePorts[i] = STATES[PRESENT_STATE].ON[i];
 10088  000F32  5056               	movf	_PRESENT_STATE,w,c
 10089  000F34  0D06               	mullw	6
 10090  000F36  0EF0               	movlw	low _STATES
 10091  000F38  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10092  000F3A  0E02               	movlw	high _STATES
 10093  000F3C  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 10094  000F3E  2A35               	incf	??_Timer0_10ms,f,c
 10095  000F40  0E00               	movlw	0
 10096  000F42  2236               	addwfc	??_Timer0_10ms+1,f,c
 10097  000F44  50F3               	movf	prodl,w,c
 10098  000F46  2635               	addwf	??_Timer0_10ms,f,c
 10099  000F48  50F4               	movf	prodh,w,c
 10100  000F4A  2236               	addwfc	??_Timer0_10ms+1,f,c
 10101  000F4C  503F               	movf	Timer0_10ms@i_2900,w,c
 10102  000F4E  2435               	addwf	??_Timer0_10ms,w,c
 10103  000F50  6ED9               	movwf	fsr2l,c
 10104  000F52  0E00               	movlw	0
 10105  000F54  2036               	addwfc	??_Timer0_10ms+1,w,c
 10106  000F56  6EDA               	movwf	fsr2h,c
 10107  000F58  503F               	movf	Timer0_10ms@i_2900,w,c
 10108  000F5A  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 10109  000F5C  6EE1               	movwf	fsr1l,c
 10110  000F5E  6AE2               	clrf	fsr1h,c
 10111  000F60  CFDF FFE7          	movff	indf2,indf1
 10112                           
 10113                           ; BSR set to: 0
 10114  000F64  2A3F               	incf	Timer0_10ms@i_2900,f,c
 10115                           
 10116                           ; BSR set to: 0
 10117  000F66  0E01               	movlw	1
 10118  000F68  643F               	cpfsgt	Timer0_10ms@i_2900,c
 10119  000F6A  D7E3               	goto	i2l4073
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;projMain.c: 17: }
 10123                           ;projMain.c: 18: if (STATE_SECONDS_REMAINING <= BLINK_LAST_X_SECONDS) {
 10124  000F6C  5054               	movf	_STATE_SECONDS_REMAINING,w,c
 10125  000F6E  5C5B               	subwf	_BLINK_LAST_X_SECONDS,w,c
 10126  000F70  E30F               	bnc	i2l1128
 10127                           
 10128                           ; BSR set to: 0
 10129                           ;projMain.c: 19: if (BLINK_STATE_ON_OFF_COUNTER < BLINK_ON_TIME) {
 10130  000F72  505D               	movf	_BLINK_ON_TIME,w,c
 10131  000F74  5C52               	subwf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 10132  000F76  E217               	bc	i2l4105
 10133                           
 10134                           ; BSR set to: 0
 10135                           ;projMain.c: 20: for (UINT8 i =0; i<2; i++)
 10136  000F78  6A40               	clrf	Timer0_10ms@i_2901,c
 10137  000F7A                     i2l4089:
 10138                           
 10139                           ; BSR set to: 0
 10140                           ;projMain.c: 21: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 10141  000F7A  5040               	movf	Timer0_10ms@i_2901,w,c
 10142  000F7C  D924               	call	PL26	;call to abstracted procedure
 10143  000F7E  5040               	movf	Timer0_10ms@i_2901,w,c
 10144  000F80  D94E               	call	PL106	;call to abstracted procedure
 10145  000F82  5040               	movf	Timer0_10ms@i_2901,w,c
 10146  000F84  D954               	call	PL110	;call to abstracted procedure
 10147                           
 10148                           ; BSR set to: 0
 10149  000F86  2A40               	incf	Timer0_10ms@i_2901,f,c
 10150                           
 10151                           ; BSR set to: 0
 10152  000F88  0E01               	movlw	1
 10153  000F8A  6440               	cpfsgt	Timer0_10ms@i_2901,c
 10154  000F8C  D7F6               	goto	i2l4089
 10155  000F8E  D00B               	goto	i2l4105
 10156  000F90                     i2l1128:
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;projMain.c: 24: for (UINT8 i =0; i<2; i++)
 10160  000F90  6A41               	clrf	Timer0_10ms@i_2902,c
 10161  000F92                     i2l4099:
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;projMain.c: 25: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 10165  000F92  5041               	movf	Timer0_10ms@i_2902,w,c
 10166  000F94  D918               	call	PL26	;call to abstracted procedure
 10167  000F96  5041               	movf	Timer0_10ms@i_2902,w,c
 10168  000F98  D942               	call	PL106	;call to abstracted procedure
 10169  000F9A  5041               	movf	Timer0_10ms@i_2902,w,c
 10170  000F9C  D948               	call	PL110	;call to abstracted procedure
 10171                           
 10172                           ; BSR set to: 0
 10173  000F9E  2A41               	incf	Timer0_10ms@i_2902,f,c
 10174                           
 10175                           ; BSR set to: 0
 10176  000FA0  0E01               	movlw	1
 10177  000FA2  6441               	cpfsgt	Timer0_10ms@i_2902,c
 10178  000FA4  D7F6               	goto	i2l4099
 10179  000FA6                     i2l4105:
 10180                           
 10181                           ; BSR set to: 0
 10182                           ;projMain.c: 26: }
 10183                           ;projMain.c: 32: if ((STATES[PRESENT_STATE].AUDIO == AUDIO_NORMAL)
 10184                           ;projMain.c: 33: || ((STATES[PRESENT_STATE].AUDIO == AUDIO_SPECIAL)
 10185                           ;projMain.c: 34: && (STATE_SECONDS_REMAINING <= SPECIAL_AUDIO_LAST_X_SECONDS))) {
 10186  000FA6  D921               	call	PL36	;call to abstracted procedure
 10187  000FA8  04DE               	decf	postinc2,w,c
 10188  000FAA  E007               	bz	i2l4111
 10189                           
 10190                           ; BSR set to: 0
 10191  000FAC  D91E               	call	PL36	;call to abstracted procedure
 10192  000FAE  0E02               	movlw	2
 10193  000FB0  18DE               	xorwf	postinc2,w,c
 10194  000FB2  E106               	bnz	i2l4115
 10195                           
 10196                           ; BSR set to: 0
 10197  000FB4  5054               	movf	_STATE_SECONDS_REMAINING,w,c
 10198  000FB6  5DE6               	subwf	_SPECIAL_AUDIO_LAST_X_SECONDS& (0+255),w,b
 10199  000FB8  E303               	bnc	i2l4115
 10200  000FBA                     i2l4111:
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;projMain.c: 35: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_NORMAL_ON_TIME)
 10204  000FBA  505A               	movf	_AUDIO_NORMAL_ON_TIME,w,c
 10205  000FBC  5C51               	subwf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10206  000FBE  D006               	goto	L11
 10207  000FC0                     i2l4115:
 10208                           
 10209                           ; BSR set to: 0
 10210  000FC0  D914               	call	PL36	;call to abstracted procedure
 10211  000FC2  0E02               	movlw	2
 10212  000FC4  18DE               	xorwf	postinc2,w,c
 10213  000FC6  E105               	bnz	i2l1141
 10214                           
 10215                           ; BSR set to: 0
 10216                           ;projMain.c: 40: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_SPECIAL_ON_TIME)
 10217  000FC8  5058               	movf	_AUDIO_SPECIAL_ON_TIME,w,c
 10218  000FCA  5C50               	subwf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10219  000FCC                     L11:
 10220  000FCC  E202               	bc	i2l1141
 10221                           
 10222                           ; BSR set to: 0
 10223                           ;projMain.c: 41: LATCbits.LC0 = ON;
 10224  000FCE  8085               	bsf	3973,0,c	;volatile
 10225  000FD0  D001               	goto	i2l4121
 10226  000FD2                     i2l1141:
 10227                           
 10228                           ; BSR set to: 0
 10229                           ;projMain.c: 45: LATCbits.LC0 = OFF;
 10230  000FD2  9085               	bcf	3973,0,c	;volatile
 10231  000FD4                     i2l4121:
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;projMain.c: 47: CENTI_SECOND_COUNT++;
 10235  000FD4  2A53               	incf	_CENTI_SECOND_COUNT,f,c
 10236                           
 10237                           ;projMain.c: 48: BLINK_STATE_ON_OFF_COUNTER++;
 10238  000FD6  2A52               	incf	_BLINK_STATE_ON_OFF_COUNTER,f,c
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;projMain.c: 49: if (BLINK_STATE_ON_OFF_COUNTER >= (BLINK_ON_TIME + BLINK_OFF_TIME))
 10242  000FD8  505C               	movf	_BLINK_OFF_TIME,w,c
 10243  000FDA  C05D  F035         	movff	_BLINK_ON_TIME,??_Timer0_10ms
 10244  000FDE  D93C               	call	PL118	;call to abstracted procedure
 10245  000FE0  5052               	movf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 10246  000FE2  D8E6               	call	PL24	;call to abstracted procedure
 10247  000FE4  E301               	bnc	i2l4127
 10248                           
 10249                           ; BSR set to: 0
 10250                           ;projMain.c: 50: BLINK_STATE_ON_OFF_COUNTER=0;
 10251  000FE6  6A52               	clrf	_BLINK_STATE_ON_OFF_COUNTER,c
 10252  000FE8                     i2l4127:
 10253                           
 10254                           ; BSR set to: 0
 10255                           ;projMain.c: 51: NORMAL_AUDIO_STATE_ON_OFF_COUNTER++;
 10256  000FE8  2A51               	incf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 10257                           
 10258                           ; BSR set to: 0
 10259                           ;projMain.c: 52: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_NORMAL_ON_TIME + AUDIO_
      +                          NORMAL_OFF_TIME))
 10260  000FEA  5059               	movf	_AUDIO_NORMAL_OFF_TIME,w,c
 10261  000FEC  C05A  F035         	movff	_AUDIO_NORMAL_ON_TIME,??_Timer0_10ms
 10262  000FF0  D933               	call	PL118	;call to abstracted procedure
 10263  000FF2  5051               	movf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10264  000FF4  D8DD               	call	PL24	;call to abstracted procedure
 10265  000FF6  E301               	bnc	i2l4133
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;projMain.c: 53: NORMAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 10269  000FF8  6A51               	clrf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,c
 10270  000FFA                     i2l4133:
 10271                           
 10272                           ; BSR set to: 0
 10273                           ;projMain.c: 54: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER++;
 10274  000FFA  2A50               	incf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;projMain.c: 55: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_SPECIAL_ON_TIME + AUDI
      +                          O_SPECIAL_OFF_TIME))
 10278  000FFC  5057               	movf	_AUDIO_SPECIAL_OFF_TIME,w,c
 10279  000FFE  C058  F035         	movff	_AUDIO_SPECIAL_ON_TIME,??_Timer0_10ms
 10280  001002  D92A               	call	PL118	;call to abstracted procedure
 10281  001004  5050               	movf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 10282  001006  D8D4               	call	PL24	;call to abstracted procedure
 10283  001008  E301               	bnc	i2l4139
 10284                           
 10285                           ; BSR set to: 0
 10286                           ;projMain.c: 56: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 10287  00100A  6A50               	clrf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,c
 10288  00100C                     i2l4139:
 10289                           
 10290                           ; BSR set to: 0
 10291                           ;projMain.c: 59: if (CENTI_SECOND_COUNT == 100) {
 10292  00100C  0E64               	movlw	100
 10293  00100E  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 10294  001010  E11F               	bnz	i2l4153
 10295                           
 10296                           ; BSR set to: 0
 10297                           ;projMain.c: 60: CENTI_SECOND_COUNT = 0;
 10298  001012  6A53               	clrf	_CENTI_SECOND_COUNT,c
 10299                           
 10300                           ; BSR set to: 0
 10301                           ;projMain.c: 61: DATE_TIME = IncreaseByASecond(DATE_TIME);
 10302  001014  EE20  F0B9         	lfsr	2,_DATE_TIME
 10303  001018  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
 10304  00101C  0E0A               	movlw	10
 10305  00101E                     i2u415_41:
 10306  00101E  CFDB FFEB          	movff	plusw2,plusw0
 10307  001022  06E8               	decf	wreg,f,c
 10308  001024  E2FC               	bc	i2u415_41
 10309  001026  EC88  F016         	call	_IncreaseByASecond	;wreg free
 10310  00102A  EE20  F0B9         	lfsr	2,_DATE_TIME
 10311  00102E  0E0A               	movlw	10
 10312  001030                     i2u416_41:
 10313  001030  CFEB FFDB          	movff	plusw0,plusw2
 10314  001034  06E8               	decf	wreg,f,c
 10315  001036  E2FC               	bc	i2u416_41
 10316                           
 10317                           ;projMain.c: 62: STATE_SECONDS_REMAINING = (STATES[PRESENT_STATE].PERIOD + SECONDS_TO_AD
      +                          JUST_PART) - STATE_SECONDS-1;
 10318  001038  D8B1               	call	PL18	;call to abstracted procedure
 10319  00103A  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10320  00103C  5055               	movf	_STATE_SECONDS,w,c
 10321  00103E  5C35               	subwf	??_Timer0_10ms,w,c
 10322  001040  244F               	addwf	_SECONDS_TO_ADJUST_PART,w,c
 10323  001042  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 10324  001044  0436               	decf	??_Timer0_10ms+1,w,c
 10325  001046  6E54               	movwf	_STATE_SECONDS_REMAINING,c
 10326                           
 10327                           ;projMain.c: 63: if (STATE_SECONDS_REMAINING == 0)
 10328  001048  5054               	movf	_STATE_SECONDS_REMAINING,w,c
 10329  00104A  E101               	bnz	i2l4151
 10330                           
 10331                           ;projMain.c: 64: FLAGS_1.bits.b0 = SET;
 10332  00104C  804E               	bsf	_FLAGS_1,0,c
 10333  00104E                     i2l4151:
 10334                           
 10335                           ;projMain.c: 65: STATE_SECONDS++;
 10336  00104E  2A55               	incf	_STATE_SECONDS,f,c
 10337  001050                     i2l4153:
 10338                           
 10339                           ;projMain.c: 66: }
 10340                           ;projMain.c: 67: if (CENTI_SECOND_COUNT == 3) {
 10341  001050  0E03               	movlw	3
 10342  001052  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 10343  001054  E145               	bnz	i2l4175
 10344                           
 10345                           ;projMain.c: 68: if (STATE_SECONDS == 0) {
 10346  001056  5055               	movf	_STATE_SECONDS,w,c
 10347  001058  E143               	bnz	i2l4175
 10348                           
 10349                           ;projMain.c: 69: if (SECONDS_TO_ADJUST != 0) {
 10350  00105A  504C               	movf	_SECONDS_TO_ADJUST,w,c
 10351  00105C  104D               	iorwf	_SECONDS_TO_ADJUST+1,w,c
 10352  00105E  E03F               	bz	i2l1152
 10353                           
 10354                           ;projMain.c: 70: if (SECONDS_TO_ADJUST > 0) {
 10355  001060  BE4D               	btfsc	_SECONDS_TO_ADJUST+1,7,c
 10356  001062  D01F               	goto	i2l4167
 10357  001064  504D               	movf	_SECONDS_TO_ADJUST+1,w,c
 10358  001066  E102               	bnz	i2u421_40
 10359  001068  044C               	decf	_SECONDS_TO_ADJUST,w,c
 10360  00106A  E31B               	bnc	i2l4167
 10361  00106C                     i2u421_40:
 10362                           
 10363                           ;projMain.c: 71: SECONDS_TO_ADJUST_PART = 0.3*STATES[PRESENT_STATE].PERIOD;
 10364  00106C  D8FA               	call	PL126	;call to abstracted procedure
 10365  00106E  0E3E               	movlw	62
 10366  001070  6E12               	movwf	___ftmul@f2+2,c
 10367  001072  D894               	call	PL18	;call to abstracted procedure
 10368  001074  EC64  F018         	call	___lbtoft
 10369  001078  D8E1               	call	PL114	;call to abstracted procedure
 10370  00107A  EC02  F013         	call	___ftmul	;wreg free
 10371  00107E  D8E5               	call	PL116	;call to abstracted procedure
 10372  001080  EC24  F014         	call	___fttol	;wreg free
 10373  001084  501C               	movf	?___fttol,w,c
 10374  001086  6E4F               	movwf	_SECONDS_TO_ADJUST_PART,c
 10375                           
 10376                           ;projMain.c: 72: if (SECONDS_TO_ADJUST_PART > SECONDS_TO_ADJUST)
 10377  001088  504D               	movf	_SECONDS_TO_ADJUST+1,w,c
 10378  00108A  0A80               	xorlw	128
 10379  00108C  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10380  00108E  504F               	movf	_SECONDS_TO_ADJUST_PART,w,c
 10381  001090  5C4C               	subwf	_SECONDS_TO_ADJUST,w,c
 10382  001092  0E80               	movlw	128
 10383  001094  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 10384  001096  0E7F               	movlw	127
 10385  001098  5835               	subwfb	??_Timer0_10ms& (0+255),w,c
 10386  00109A  E21A               	bc	i2l4173
 10387                           
 10388                           ;projMain.c: 73: SECONDS_TO_ADJUST_PART = SECONDS_TO_ADJUST;
 10389  00109C  C04C  F04F         	movff	_SECONDS_TO_ADJUST,_SECONDS_TO_ADJUST_PART
 10390  0010A0  D017               	goto	i2l4173
 10391  0010A2                     i2l4167:
 10392                           
 10393                           ;projMain.c: 75: SECONDS_TO_ADJUST_PART = -0.3*STATES[PRESENT_STATE].PERIOD;
 10394  0010A2  D8DF               	call	PL126	;call to abstracted procedure
 10395  0010A4  0EBE               	movlw	190
 10396  0010A6  6E12               	movwf	___ftmul@f2+2,c
 10397  0010A8  D879               	call	PL18	;call to abstracted procedure
 10398  0010AA  EC64  F018         	call	___lbtoft
 10399  0010AE  D8C6               	call	PL114	;call to abstracted procedure
 10400  0010B0  EC02  F013         	call	___ftmul	;wreg free
 10401  0010B4  D8CA               	call	PL116	;call to abstracted procedure
 10402  0010B6  EC24  F014         	call	___fttol	;wreg free
 10403  0010BA  501C               	movf	?___fttol,w,c
 10404  0010BC  6E4F               	movwf	_SECONDS_TO_ADJUST_PART,c
 10405                           
 10406                           ;projMain.c: 76: if (SECONDS_TO_ADJUST_PART < SECONDS_TO_ADJUST)
 10407  0010BE  0E80               	movlw	128
 10408  0010C0  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 10409  0010C2  0E7F               	movlw	127
 10410  0010C4  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10411  0010C6  504C               	movf	_SECONDS_TO_ADJUST,w,c
 10412  0010C8  5C4F               	subwf	_SECONDS_TO_ADJUST_PART,w,c
 10413  0010CA  504D               	movf	_SECONDS_TO_ADJUST+1,w,c
 10414  0010CC  0A80               	xorlw	128
 10415  0010CE  D7E4               	goto	L9
 10416  0010D0                     i2l4173:
 10417                           
 10418                           ;projMain.c: 78: }
 10419                           ;projMain.c: 79: SECONDS_TO_ADJUST -= SECONDS_TO_ADJUST_PART;
 10420  0010D0  504F               	movf	_SECONDS_TO_ADJUST_PART,w,c
 10421  0010D2  5E4C               	subwf	_SECONDS_TO_ADJUST,f,c
 10422  0010D4  0E00               	movlw	0
 10423  0010D6  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 10424  0010D8  0EFF               	movlw	255
 10425  0010DA  5A4D               	subwfb	_SECONDS_TO_ADJUST+1,f,c
 10426                           
 10427                           ;projMain.c: 80: } else
 10428  0010DC  D001               	goto	i2l4175
 10429  0010DE                     i2l1152:
 10430                           
 10431                           ;projMain.c: 81: SECONDS_TO_ADJUST_PART = 0;
 10432  0010DE  6A4F               	clrf	_SECONDS_TO_ADJUST_PART,c
 10433  0010E0                     i2l4175:
 10434                           
 10435                           ;projMain.c: 82: }
 10436                           ;projMain.c: 83: }
 10437                           ;projMain.c: 84: if (CENTI_SECOND_COUNT == 2) {
 10438  0010E0  0E02               	movlw	2
 10439  0010E2  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 10440  0010E4  E135               	bnz	i2l4191
 10441                           
 10442                           ;projMain.c: 85: UINT8 ThisCycle = GetThisCycle();
 10443  0010E6  ECB1  F018         	call	_GetThisCycle	;wreg free
 10444  0010EA  6E3E               	movwf	Timer0_10ms@ThisCycle,c
 10445                           
 10446                           ;projMain.c: 86: if ((CYCLES[ThisCycle].START_STATE == PRESENT_STATE) && (STATE_SECONDS=
      +                          =0)) {
 10447  0010EC  503E               	movf	Timer0_10ms@ThisCycle,w,c
 10448  0010EE  D88F               	call	PL104	;call to abstracted procedure
 10449  0010F0  5056               	movf	_PRESENT_STATE,w,c
 10450  0010F2  18DE               	xorwf	postinc2,w,c
 10451  0010F4  E12D               	bnz	i2l4191
 10452  0010F6  5055               	movf	_STATE_SECONDS,w,c
 10453  0010F8  E12B               	bnz	i2l4191
 10454                           
 10455                           ;projMain.c: 87: SECONDS_TO_ADJUST = (DATE_TIME.SECOND) % (CYCLES[ThisCycle].PERIOD);
 10456  0010FA  C0B9  F001         	movff	_DATE_TIME,___almod@dividend
 10457  0010FE  C0BA  F002         	movff	_DATE_TIME+1,___almod@dividend+1
 10458  001102  C0BB  F003         	movff	_DATE_TIME+2,___almod@dividend+2
 10459  001106  C0BC  F004         	movff	_DATE_TIME+3,___almod@dividend+3
 10460  00110A  D878               	call	PL38	;call to abstracted procedure
 10461  00110C  D8AF               	call	PL138	;call to abstracted procedure
 10462  00110E  C035  F005         	movff	??_Timer0_10ms,___almod@divisor
 10463  001112  C036  F006         	movff	??_Timer0_10ms+1,___almod@divisor+1
 10464  001116  6A07               	clrf	___almod@divisor+2,c
 10465  001118  6A08               	clrf	___almod@divisor+3,c
 10466  00111A  EC20  F015         	call	___almod	;wreg free
 10467  00111E  C001  F04C         	movff	?___almod,_SECONDS_TO_ADJUST
 10468  001122  C002  F04D         	movff	?___almod+1,_SECONDS_TO_ADJUST+1
 10469                           
 10470                           ;projMain.c: 88: if (SECONDS_TO_ADJUST > (CYCLES[ThisCycle].PERIOD)/2)
 10471  001126  D86A               	call	PL38	;call to abstracted procedure
 10472  001128  D8A1               	call	PL138	;call to abstracted procedure
 10473  00112A  90D8               	bcf	status,0,c
 10474  00112C  3036               	rrcf	??_Timer0_10ms+1,w,c
 10475  00112E  6E38               	movwf	(??_Timer0_10ms+3)& (0+255),c
 10476  001130  3035               	rrcf	??_Timer0_10ms,w,c
 10477  001132  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 10478  001134  504C               	movf	_SECONDS_TO_ADJUST,w,c
 10479  001136  5C37               	subwf	??_Timer0_10ms+2,w,c
 10480  001138  504D               	movf	_SECONDS_TO_ADJUST+1,w,c
 10481  00113A  5838               	subwfb	??_Timer0_10ms+3,w,c
 10482  00113C  E205               	bc	i2l4189
 10483                           
 10484                           ;projMain.c: 89: SECONDS_TO_ADJUST -= CYCLES[ThisCycle].PERIOD;
 10485  00113E  D85E               	call	PL38	;call to abstracted procedure
 10486  001140  50DE               	movf	postinc2,w,c
 10487  001142  5E4C               	subwf	_SECONDS_TO_ADJUST,f,c
 10488  001144  50DD               	movf	postdec2,w,c
 10489  001146  5A4D               	subwfb	_SECONDS_TO_ADJUST+1,f,c
 10490  001148                     i2l4189:
 10491                           
 10492                           ;projMain.c: 90: SECONDS_TO_ADJUST = -SECONDS_TO_ADJUST;
 10493  001148  6C4C               	negf	_SECONDS_TO_ADJUST,c
 10494  00114A  1E4D               	comf	_SECONDS_TO_ADJUST+1,f,c
 10495  00114C  B0D8               	btfsc	status,0,c
 10496  00114E  2A4D               	incf	_SECONDS_TO_ADJUST+1,f,c
 10497  001150                     i2l4191:
 10498                           
 10499                           ;projMain.c: 91: }
 10500                           ;projMain.c: 92: }
 10501                           ;projMain.c: 93: if (CENTI_SECOND_COUNT == 1) {
 10502  001150  0453               	decf	_CENTI_SECOND_COUNT,w,c
 10503  001152  B4D8               	btfsc	status,2,c
 10504                           
 10505                           ;projMain.c: 94: if (!FLAGS_1.bits.b1) {
 10506  001154  B24E               	btfsc	_FLAGS_1,1,c
 10507  001156  0012               	return	
 10508                           
 10509                           ;projMain.c: 95: UINT8 ThisCycle = GetThisCycle();
 10510  001158  ECB1  F018         	call	_GetThisCycle	;wreg free
 10511  00115C  6E3A               	movwf	Timer0_10ms@ThisCycle_2906,c
 10512                           
 10513                           ;projMain.c: 96: if (PRESENT_STATE == CYCLES[ThisCycle].END_STATE) {
 10514  00115E  503A               	movf	Timer0_10ms@ThisCycle_2906,w,c
 10515  001160  0D04               	mullw	4
 10516  001162  0E03               	movlw	low (_CYCLES+3)
 10517  001164  24F3               	addwf	prodl,w,c
 10518  001166  6ED9               	movwf	fsr2l,c
 10519  001168  0E01               	movlw	high (_CYCLES+3)
 10520  00116A  20F4               	addwfc	prodh,w,c
 10521  00116C  6EDA               	movwf	fsr2h,c
 10522  00116E  5056               	movf	_PRESENT_STATE,w,c
 10523  001170  18DE               	xorwf	postinc2,w,c
 10524  001172  E110               	bnz	i2l4209
 10525                           
 10526                           ;projMain.c: 97: PRESENT_EVENT = NEXT_EVENT;
 10527  001174  C0F9  F05E         	movff	_NEXT_EVENT,_PRESENT_EVENT
 10528                           
 10529                           ;projMain.c: 98: if (PRESENT_EVENT < 0) {
 10530  001178  AE5E               	btfss	_PRESENT_EVENT,7,c
 10531  00117A  D002               	goto	i2l4205
 10532                           
 10533                           ;projMain.c: 99: ThisCycle = 0;
 10534  00117C  6A3A               	clrf	Timer0_10ms@ThisCycle_2906,c
 10535                           
 10536                           ;projMain.c: 100: } else {
 10537  00117E  D003               	goto	i2l1165
 10538  001180                     i2l4205:
 10539                           
 10540                           ;projMain.c: 101: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 10541  001180  ECB4  F018         	call	PL80	;call to abstracted procedure
 10542  001184  6E3A               	movwf	Timer0_10ms@ThisCycle_2906,c
 10543  001186                     i2l1165:
 10544                           
 10545                           ;projMain.c: 102: }
 10546                           ;projMain.c: 103: NEXT_STATE = CYCLES[ThisCycle].START_STATE;
 10547  001186  503A               	movf	Timer0_10ms@ThisCycle_2906,w,c
 10548  001188  D842               	call	PL104	;call to abstracted procedure
 10549  00118A  50DF               	movf	indf2,w,c
 10550  00118C  0100               	movlb	0	; () banked
 10551  00118E  6FE4               	movwf	_NEXT_STATE& (0+255),b
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;projMain.c: 104: FLAGS_1.bits.b1 = SET;
 10555  001190  824E               	bsf	_FLAGS_1,1,c
 10556                           
 10557                           ;projMain.c: 105: } else {
 10558  001192  0012               	return	
 10559  001194                     i2l4209:
 10560                           
 10561                           ;projMain.c: 106: NEXT_STATE = PRESENT_STATE+1;
 10562  001194  2856               	incf	_PRESENT_STATE,w,c
 10563  001196  0100               	movlb	0	; () banked
 10564  001198  6FE4               	movwf	_NEXT_STATE& (0+255),b
 10565  00119A  0012               	return		;funcret
 10566  00119C                     __end_of_Timer0_10ms:
 10567                           	opt stack 0
 10568  00119C                     PL18:
 10569                           	opt stack 15
 10570  00119C  5056               	movf	_PRESENT_STATE,w,c
 10571  00119E  0D06               	mullw	6
 10572  0011A0  0EF0               	movlw	low _STATES
 10573  0011A2  24F3               	addwf	prodl,w,c
 10574  0011A4  6ED9               	movwf	fsr2l,c
 10575  0011A6  0E02               	movlw	high _STATES
 10576  0011A8  20F4               	addwfc	prodh,w,c
 10577  0011AA  6EDA               	movwf	fsr2h,c
 10578  0011AC  50DF               	movf	indf2,w,c
 10579  0011AE  0012               	return	
 10580  0011B0                     __end_ofPL18:
 10581                           	opt stack 0
 10582  0011B0                     PL24:
 10583                           	opt stack 15
 10584  0011B0  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 10585  0011B2  6A38               	clrf	(??_Timer0_10ms+3)& (0+255),c
 10586  0011B4  5035               	movf	??_Timer0_10ms,w,c
 10587  0011B6  5C37               	subwf	??_Timer0_10ms+2,w,c
 10588  0011B8  5038               	movf	??_Timer0_10ms+3,w,c
 10589  0011BA  0A80               	xorlw	128
 10590  0011BC  6E39               	movwf	(??_Timer0_10ms+4)& (0+255),c
 10591  0011BE  5036               	movf	??_Timer0_10ms+1,w,c
 10592  0011C0  0A80               	xorlw	128
 10593  0011C2  5839               	subwfb	(??_Timer0_10ms+4)& (0+255),w,c
 10594  0011C4  0012               	return	
 10595  0011C6                     __end_ofPL24:
 10596                           	opt stack 0
 10597  0011C6                     PL26:
 10598                           	opt stack 15
 10599  0011C6  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 10600  0011C8  6ED9               	movwf	fsr2l,c
 10601  0011CA  6ADA               	clrf	fsr2h,c
 10602  0011CC  5056               	movf	_PRESENT_STATE,w,c
 10603  0011CE  0D06               	mullw	6
 10604  0011D0  0EF0               	movlw	low _STATES
 10605  0011D2  6E35               	movwf	??_Timer0_10ms& (0+255),c
 10606  0011D4  0E02               	movlw	high _STATES
 10607  0011D6  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 10608  0011D8  0E03               	movlw	3
 10609  0011DA  2635               	addwf	??_Timer0_10ms,f,c
 10610  0011DC  0E00               	movlw	0
 10611  0011DE  2236               	addwfc	??_Timer0_10ms+1,f,c
 10612  0011E0  50F3               	movf	prodl,w,c
 10613  0011E2  2635               	addwf	??_Timer0_10ms,f,c
 10614  0011E4  50F4               	movf	prodh,w,c
 10615  0011E6  2236               	addwfc	??_Timer0_10ms+1,f,c
 10616  0011E8  0012               	return	
 10617  0011EA                     __end_ofPL26:
 10618                           	opt stack 0
 10619  0011EA                     PL36:
 10620                           	opt stack 15
 10621  0011EA  5056               	movf	_PRESENT_STATE,w,c
 10622  0011EC  0D06               	mullw	6
 10623  0011EE  0EF5               	movlw	low (_STATES+5)
 10624  0011F0  24F3               	addwf	prodl,w,c
 10625  0011F2  6ED9               	movwf	fsr2l,c
 10626  0011F4  0E02               	movlw	high (_STATES+5)
 10627  0011F6  20F4               	addwfc	prodh,w,c
 10628  0011F8  6EDA               	movwf	fsr2h,c
 10629  0011FA  0012               	return	
 10630  0011FC                     __end_ofPL36:
 10631                           	opt stack 0
 10632  0011FC                     PL38:
 10633                           	opt stack 15
 10634  0011FC  503E               	movf	Timer0_10ms@ThisCycle,w,c
 10635  0011FE  0D04               	mullw	4
 10636  001200  0E00               	movlw	low _CYCLES
 10637  001202  24F3               	addwf	prodl,w,c
 10638  001204  6ED9               	movwf	fsr2l,c
 10639  001206  0E01               	movlw	high _CYCLES
 10640  001208  20F4               	addwfc	prodh,w,c
 10641  00120A  6EDA               	movwf	fsr2h,c
 10642  00120C  0012               	return	
 10643  00120E                     __end_ofPL38:
 10644                           	opt stack 0
 10645  00120E                     PL104:
 10646                           	opt stack 15
 10647  00120E  0D04               	mullw	4
 10648  001210  0E02               	movlw	low (_CYCLES+2)
 10649  001212  24F3               	addwf	prodl,w,c
 10650  001214  6ED9               	movwf	fsr2l,c
 10651  001216  0E01               	movlw	high (_CYCLES+2)
 10652  001218  20F4               	addwfc	prodh,w,c
 10653  00121A  6EDA               	movwf	fsr2h,c
 10654  00121C  0012               	return	
 10655  00121E                     __end_ofPL104:
 10656                           	opt stack 0
 10657  00121E                     PL106:
 10658                           	opt stack 15
 10659  00121E  2435               	addwf	??_Timer0_10ms,w,c
 10660  001220  6EE1               	movwf	fsr1l,c
 10661  001222  0E00               	movlw	0
 10662  001224  2036               	addwfc	??_Timer0_10ms+1,w,c
 10663  001226  6EE2               	movwf	fsr1h,c
 10664  001228  50E7               	movf	indf1,w,c
 10665  00122A  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 10666  00122C  0012               	return	
 10667  00122E                     __end_ofPL106:
 10668                           	opt stack 0
 10669  00122E                     PL110:
 10670                           	opt stack 15
 10671  00122E  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 10672  001230  6EE1               	movwf	fsr1l,c
 10673  001232  6AE2               	clrf	fsr1h,c
 10674  001234  50E7               	movf	indf1,w,c
 10675  001236  1037               	iorwf	??_Timer0_10ms+2,w,c
 10676  001238  6EDF               	movwf	indf2,c
 10677  00123A  0012               	return	
 10678  00123C                     __end_ofPL110:
 10679                           	opt stack 0
 10680  00123C                     PL114:
 10681                           	opt stack 15
 10682  00123C  C009  F00D         	movff	?___lbtoft,___ftmul@f1
 10683  001240  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
 10684  001244  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
 10685  001248  0012               	return	
 10686  00124A                     __end_ofPL114:
 10687                           	opt stack 0
 10688  00124A                     PL116:
 10689                           	opt stack 15
 10690  00124A  C00D  F01C         	movff	?___ftmul,___fttol@f1
 10691  00124E  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
 10692  001252  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
 10693  001256  0012               	return	
 10694  001258                     __end_ofPL116:
 10695                           	opt stack 0
 10696  001258                     PL118:
 10697                           	opt stack 15
 10698  001258  6A36               	clrf	(??_Timer0_10ms+1)& (0+255),c
 10699  00125A  2635               	addwf	??_Timer0_10ms,f,c
 10700  00125C  0E00               	movlw	0
 10701  00125E  2236               	addwfc	??_Timer0_10ms+1,f,c
 10702  001260  0C00               	retlw	0
 10703  001262                     __end_ofPL118:
 10704                           	opt stack 0
 10705  001262                     PL126:
 10706                           	opt stack 15
 10707  001262  0E9A               	movlw	154
 10708  001264  6E10               	movwf	___ftmul@f2,c
 10709  001266  0E99               	movlw	153
 10710  001268  6E11               	movwf	___ftmul@f2+1,c
 10711  00126A  0C99               	retlw	153
 10712  00126C                     __end_ofPL126:
 10713                           	opt stack 0
 10714  00126C                     PL138:
 10715                           	opt stack 15
 10716  00126C  CFDE F035          	movff	postinc2,??_Timer0_10ms
 10717  001270  CFDD F036          	movff	postdec2,??_Timer0_10ms+1
 10718  001274  0012               	return	
 10719  001276                     __end_ofPL138:
 10720                           	opt stack 0
 10721                           tosu	equ	0xFFF
 10722                           tosh	equ	0xFFE
 10723                           tosl	equ	0xFFD
 10724                           pclatu	equ	0xFFB
 10725                           pclath	equ	0xFFA
 10726                           tblptru	equ	0xFF8
 10727                           tblptrh	equ	0xFF7
 10728                           tblptrl	equ	0xFF6
 10729                           tablat	equ	0xFF5
 10730                           prodh	equ	0xFF4
 10731                           prodl	equ	0xFF3
 10732                           intcon	equ	0xFF2
 10733                           postinc0	equ	0xFEE
 10734                           plusw0	equ	0xFEB
 10735                           fsr0h	equ	0xFEA
 10736                           fsr0l	equ	0xFE9
 10737                           wreg	equ	0xFE8
 10738                           indf1	equ	0xFE7
 10739                           postinc1	equ	0xFE6
 10740                           postdec1	equ	0xFE5
 10741                           plusw1	equ	0xFE3
 10742                           fsr1h	equ	0xFE2
 10743                           fsr1l	equ	0xFE1
 10744                           indf2	equ	0xFDF
 10745                           postinc2	equ	0xFDE
 10746                           postdec2	equ	0xFDD
 10747                           plusw2	equ	0xFDB
 10748                           fsr2h	equ	0xFDA
 10749                           fsr2l	equ	0xFD9
 10750                           status	equ	0xFD8
 10751                           
 10752 ;; *************** function ___lbtoft *****************
 10753 ;; Defined at:
 10754 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbtoft.c"
 10755 ;; Parameters:    Size  Location     Type
 10756 ;;  c               1    wreg     unsigned char 
 10757 ;; Auto vars:     Size  Location     Type
 10758 ;;  c               1   11[COMRAM] unsigned char 
 10759 ;; Return value:  Size  Location     Type
 10760 ;;                  3    8[COMRAM] float 
 10761 ;; Registers used:
 10762 ;;		wreg, status,2, status,0, cstack
 10763 ;; Tracked objects:
 10764 ;;		On entry : 0/0
 10765 ;;		On exit  : 0/0
 10766 ;;		Unchanged: 0/0
 10767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10768 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10769 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10771 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10772 ;;Total ram usage:        4 bytes
 10773 ;; Hardware stack levels used:    1
 10774 ;; Hardware stack levels required when called:    1
 10775 ;; This function calls:
 10776 ;;		___ftpack
 10777 ;; This function is called by:
 10778 ;;		_Timer0_10ms
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text52
 10783  0030C8                     __ptext52:
 10784                           	opt stack 0
 10785  0030C8                     ___lbtoft:
 10786                           	opt stack 18
 10787                           
 10788                           ;incstack = 0
 10789                           ;___lbtoft@c stored from wreg
 10790  0030C8  6E0C               	movwf	___lbtoft@c,c
 10791  0030CA  500C               	movf	___lbtoft@c,w,c
 10792  0030CC  6E01               	movwf	___ftpack@arg,c
 10793  0030CE  6A02               	clrf	___ftpack@arg+1,c
 10794  0030D0  6A03               	clrf	___ftpack@arg+2,c
 10795  0030D2  0E8E               	movlw	142
 10796  0030D4  6E04               	movwf	___ftpack@exp,c
 10797  0030D6  0E00               	movlw	0
 10798  0030D8  6E05               	movwf	___ftpack@sign,c
 10799  0030DA  EC6D  F015         	call	___ftpack	;wreg free
 10800  0030DE  C001  F009         	movff	?___ftpack,?___lbtoft
 10801  0030E2  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
 10802  0030E6  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
 10803  0030EA  0012               	return		;funcret
 10804  0030EC                     __end_of___lbtoft:
 10805                           	opt stack 0
 10806                           tosu	equ	0xFFF
 10807                           tosh	equ	0xFFE
 10808                           tosl	equ	0xFFD
 10809                           pclatu	equ	0xFFB
 10810                           pclath	equ	0xFFA
 10811                           tblptru	equ	0xFF8
 10812                           tblptrh	equ	0xFF7
 10813                           tblptrl	equ	0xFF6
 10814                           tablat	equ	0xFF5
 10815                           prodh	equ	0xFF4
 10816                           prodl	equ	0xFF3
 10817                           intcon	equ	0xFF2
 10818                           postinc0	equ	0xFEE
 10819                           plusw0	equ	0xFEB
 10820                           fsr0h	equ	0xFEA
 10821                           fsr0l	equ	0xFE9
 10822                           wreg	equ	0xFE8
 10823                           indf1	equ	0xFE7
 10824                           postinc1	equ	0xFE6
 10825                           postdec1	equ	0xFE5
 10826                           plusw1	equ	0xFE3
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           plusw2	equ	0xFDB
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function ___fttol *****************
 10838 ;; Defined at:
 10839 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  f1              3   27[COMRAM] float 
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;  lval            4   37[COMRAM] unsigned long 
 10844 ;;  exp1            1   41[COMRAM] unsigned char 
 10845 ;;  sign1           1   36[COMRAM] unsigned char 
 10846 ;; Return value:  Size  Location     Type
 10847 ;;                  4   27[COMRAM] long 
 10848 ;; Registers used:
 10849 ;;		wreg, status,2, status,0
 10850 ;; Tracked objects:
 10851 ;;		On entry : 0/0
 10852 ;;		On exit  : 0/0
 10853 ;;		Unchanged: 0/0
 10854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10855 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10856 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10857 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10858 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10859 ;;Total ram usage:       15 bytes
 10860 ;; Hardware stack levels used:    1
 10861 ;; This function calls:
 10862 ;;		Nothing
 10863 ;; This function is called by:
 10864 ;;		_Timer0_10ms
 10865 ;; This function uses a non-reentrant model
 10866 ;;
 10867                           
 10868                           	psect	text53
 10869  002848                     __ptext53:
 10870                           	opt stack 0
 10871  002848                     ___fttol:
 10872                           	opt stack 19
 10873                           
 10874                           ;incstack = 0
 10875  002848  C01E  F020         	movff	___fttol@f1+2,??___fttol
 10876  00284C  6A21               	clrf	(??___fttol+1)& (0+255),c
 10877  00284E  6A22               	clrf	(??___fttol+2)& (0+255),c
 10878  002850  341D               	rlcf	___fttol@f1+1,w,c
 10879  002852  3620               	rlcf	??___fttol& (0+255),f,c
 10880  002854  E301               	bnc	u347_41
 10881  002856  8021               	bsf	(??___fttol+1)& (0+255),0,c
 10882  002858                     u347_41:
 10883  002858  5020               	movf	??___fttol,w,c
 10884  00285A  6E2A               	movwf	___fttol@exp1,c
 10885  00285C  502A               	movf	___fttol@exp1,w,c
 10886  00285E  E105               	bnz	i2l3775
 10887  002860                     i2l3773:
 10888  002860  6A1C               	clrf	?___fttol,c
 10889  002862  6A1D               	clrf	?___fttol+1,c
 10890  002864  6A1E               	clrf	?___fttol+2,c
 10891  002866  6A1F               	clrf	?___fttol+3,c
 10892  002868  0012               	return	
 10893  00286A                     i2l3775:
 10894  00286A  0E17               	movlw	23
 10895  00286C  6E20               	movwf	??___fttol& (0+255),c
 10896  00286E  C01C  F021         	movff	___fttol@f1,??___fttol+1
 10897  002872  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
 10898  002876  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
 10899  00287A  2820               	incf	??___fttol,w,c
 10900  00287C  6E24               	movwf	(??___fttol+4)& (0+255),c
 10901  00287E  D004               	goto	i2u349_40
 10902  002880                     i2u349_45:
 10903  002880  90D8               	bcf	status,0,c
 10904  002882  3223               	rrcf	??___fttol+3,f,c
 10905  002884  3222               	rrcf	??___fttol+2,f,c
 10906  002886  3221               	rrcf	??___fttol+1,f,c
 10907  002888                     i2u349_40:
 10908  002888  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
 10909  00288A  D7FA               	goto	i2u349_45
 10910  00288C  5021               	movf	??___fttol+1,w,c
 10911  00288E  6E25               	movwf	___fttol@sign1,c
 10912  002890  8E1D               	bsf	___fttol@f1+1,7,c
 10913  002892  6A1E               	clrf	___fttol@f1+2,c
 10914  002894  501C               	movf	___fttol@f1,w,c
 10915  002896  6E26               	movwf	___fttol@lval,c
 10916  002898  501D               	movf	___fttol@f1+1,w,c
 10917  00289A  6E27               	movwf	___fttol@lval+1,c
 10918  00289C  501E               	movf	___fttol@f1+2,w,c
 10919  00289E  6E28               	movwf	___fttol@lval+2,c
 10920  0028A0  6A29               	clrf	___fttol@lval+3,c
 10921  0028A2  0E8E               	movlw	142
 10922  0028A4  5E2A               	subwf	___fttol@exp1,f,c
 10923  0028A6  AE2A               	btfss	___fttol@exp1,7,c
 10924  0028A8  D00C               	goto	i2l3795
 10925  0028AA  502A               	movf	___fttol@exp1,w,c
 10926  0028AC  0A80               	xorlw	128
 10927  0028AE  0F8F               	addlw	143
 10928  0028B0  E3D7               	bnc	i2l3773
 10929  0028B2                     i2l3791:
 10930  0028B2  90D8               	bcf	status,0,c
 10931  0028B4  3229               	rrcf	___fttol@lval+3,f,c
 10932  0028B6  3228               	rrcf	___fttol@lval+2,f,c
 10933  0028B8  3227               	rrcf	___fttol@lval+1,f,c
 10934  0028BA  3226               	rrcf	___fttol@lval,f,c
 10935  0028BC  3E2A               	incfsz	___fttol@exp1,f,c
 10936  0028BE  D7F9               	goto	i2l3791
 10937  0028C0  D00C               	goto	i2l3803
 10938  0028C2                     i2l3795:
 10939  0028C2  0E17               	movlw	23
 10940  0028C4  642A               	cpfsgt	___fttol@exp1,c
 10941  0028C6  D007               	goto	i2l3801
 10942  0028C8  D7CB               	goto	i2l3773
 10943  0028CA                     i2l3799:
 10944  0028CA  90D8               	bcf	status,0,c
 10945  0028CC  3626               	rlcf	___fttol@lval,f,c
 10946  0028CE  3627               	rlcf	___fttol@lval+1,f,c
 10947  0028D0  3628               	rlcf	___fttol@lval+2,f,c
 10948  0028D2  3629               	rlcf	___fttol@lval+3,f,c
 10949  0028D4  062A               	decf	___fttol@exp1,f,c
 10950  0028D6                     i2l3801:
 10951  0028D6  502A               	movf	___fttol@exp1,w,c
 10952  0028D8  E1F8               	bnz	i2l3799
 10953  0028DA                     i2l3803:
 10954  0028DA  5025               	movf	___fttol@sign1,w,c
 10955  0028DC  E008               	bz	i2l3807
 10956  0028DE  1E29               	comf	___fttol@lval+3,f,c
 10957  0028E0  1E28               	comf	___fttol@lval+2,f,c
 10958  0028E2  1E27               	comf	___fttol@lval+1,f,c
 10959  0028E4  6C26               	negf	___fttol@lval,c
 10960  0028E6  0E00               	movlw	0
 10961  0028E8  2227               	addwfc	___fttol@lval+1,f,c
 10962  0028EA  2228               	addwfc	___fttol@lval+2,f,c
 10963  0028EC  2229               	addwfc	___fttol@lval+3,f,c
 10964  0028EE                     i2l3807:
 10965  0028EE  C026  F01C         	movff	___fttol@lval,?___fttol
 10966  0028F2  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
 10967  0028F6  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
 10968  0028FA  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
 10969  0028FE  0012               	return		;funcret
 10970  002900                     __end_of___fttol:
 10971                           	opt stack 0
 10972                           tosu	equ	0xFFF
 10973                           tosh	equ	0xFFE
 10974                           tosl	equ	0xFFD
 10975                           pclatu	equ	0xFFB
 10976                           pclath	equ	0xFFA
 10977                           tblptru	equ	0xFF8
 10978                           tblptrh	equ	0xFF7
 10979                           tblptrl	equ	0xFF6
 10980                           tablat	equ	0xFF5
 10981                           prodh	equ	0xFF4
 10982                           prodl	equ	0xFF3
 10983                           intcon	equ	0xFF2
 10984                           postinc0	equ	0xFEE
 10985                           plusw0	equ	0xFEB
 10986                           fsr0h	equ	0xFEA
 10987                           fsr0l	equ	0xFE9
 10988                           wreg	equ	0xFE8
 10989                           indf1	equ	0xFE7
 10990                           postinc1	equ	0xFE6
 10991                           postdec1	equ	0xFE5
 10992                           plusw1	equ	0xFE3
 10993                           fsr1h	equ	0xFE2
 10994                           fsr1l	equ	0xFE1
 10995                           indf2	equ	0xFDF
 10996                           postinc2	equ	0xFDE
 10997                           postdec2	equ	0xFDD
 10998                           plusw2	equ	0xFDB
 10999                           fsr2h	equ	0xFDA
 11000                           fsr2l	equ	0xFD9
 11001                           status	equ	0xFD8
 11002                           
 11003 ;; *************** function ___ftmul *****************
 11004 ;; Defined at:
 11005 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  f1              3   12[COMRAM] float 
 11008 ;;  f2              3   15[COMRAM] float 
 11009 ;; Auto vars:     Size  Location     Type
 11010 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 11011 ;;  sign            1   26[COMRAM] unsigned char 
 11012 ;;  cntr            1   25[COMRAM] unsigned char 
 11013 ;;  exp             1   21[COMRAM] unsigned char 
 11014 ;; Return value:  Size  Location     Type
 11015 ;;                  3   12[COMRAM] float 
 11016 ;; Registers used:
 11017 ;;		wreg, status,2, status,0, cstack
 11018 ;; Tracked objects:
 11019 ;;		On entry : 0/0
 11020 ;;		On exit  : 0/0
 11021 ;;		Unchanged: 0/0
 11022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11023 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11024 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11025 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11026 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11027 ;;Total ram usage:       15 bytes
 11028 ;; Hardware stack levels used:    1
 11029 ;; Hardware stack levels required when called:    1
 11030 ;; This function calls:
 11031 ;;		___ftpack
 11032 ;; This function is called by:
 11033 ;;		_Timer0_10ms
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text54
 11038  002604                     __ptext54:
 11039                           	opt stack 0
 11040  002604                     ___ftmul:
 11041                           	opt stack 18
 11042                           
 11043                           ;incstack = 0
 11044  002604  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 11045  002608  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11046  00260A  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11047  00260C  340E               	rlcf	___ftmul@f1+1,w,c
 11048  00260E  3613               	rlcf	??___ftmul& (0+255),f,c
 11049  002610  E301               	bnc	u329_41
 11050  002612  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11051  002614                     u329_41:
 11052  002614  5013               	movf	??___ftmul,w,c
 11053  002616  6E16               	movwf	___ftmul@exp,c
 11054  002618  5016               	movf	___ftmul@exp,w,c
 11055  00261A  E101               	bnz	i2l3651
 11056  00261C  D053               	goto	PL144	;call to abstracted procedure
 11057  00261E                     i2l3651:
 11058  00261E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 11059  002622  6A14               	clrf	(??___ftmul+1)& (0+255),c
 11060  002624  6A15               	clrf	(??___ftmul+2)& (0+255),c
 11061  002626  3411               	rlcf	___ftmul@f2+1,w,c
 11062  002628  3613               	rlcf	??___ftmul& (0+255),f,c
 11063  00262A  E301               	bnc	u331_41
 11064  00262C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 11065  00262E                     u331_41:
 11066  00262E  5013               	movf	??___ftmul,w,c
 11067  002630  6E1B               	movwf	___ftmul@sign,c
 11068  002632  501B               	movf	___ftmul@sign,w,c
 11069  002634  E101               	bnz	i2l3655
 11070  002636  D046               	goto	PL144	;call to abstracted procedure
 11071  002638                     i2l3655:
 11072  002638  501B               	movf	___ftmul@sign,w,c
 11073  00263A  0F7B               	addlw	123
 11074  00263C  2616               	addwf	___ftmul@exp,f,c
 11075  00263E  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 11076  002642  5012               	movf	___ftmul@f2+2,w,c
 11077  002644  1A1B               	xorwf	___ftmul@sign,f,c
 11078  002646  0E80               	movlw	128
 11079  002648  161B               	andwf	___ftmul@sign,f,c
 11080  00264A  8E0E               	bsf	___ftmul@f1+1,7,c
 11081  00264C  8E11               	bsf	___ftmul@f2+1,7,c
 11082  00264E  0E00               	movlw	0
 11083  002650  1612               	andwf	___ftmul@f2+2,f,c
 11084  002652  6A17               	clrf	___ftmul@f3_as_product,c
 11085  002654  6A18               	clrf	___ftmul@f3_as_product+1,c
 11086  002656  6A19               	clrf	___ftmul@f3_as_product+2,c
 11087  002658  0E07               	movlw	7
 11088  00265A  6E1A               	movwf	___ftmul@cntr,c
 11089  00265C                     i2l3669:
 11090  00265C  B00D               	btfsc	___ftmul@f1,0,c
 11091  00265E  D82B               	call	PL112	;call to abstracted procedure
 11092  002660                     i2l3673:
 11093  002660  90D8               	bcf	status,0,c
 11094  002662  320F               	rrcf	___ftmul@f1+2,f,c
 11095  002664  320E               	rrcf	___ftmul@f1+1,f,c
 11096  002666  320D               	rrcf	___ftmul@f1,f,c
 11097  002668  90D8               	bcf	status,0,c
 11098  00266A  3610               	rlcf	___ftmul@f2,f,c
 11099  00266C  3611               	rlcf	___ftmul@f2+1,f,c
 11100  00266E  3612               	rlcf	___ftmul@f2+2,f,c
 11101  002670  2E1A               	decfsz	___ftmul@cntr,f,c
 11102  002672  D7F4               	goto	i2l3669
 11103  002674  0E09               	movlw	9
 11104  002676  6E1A               	movwf	___ftmul@cntr,c
 11105  002678                     i2l3679:
 11106  002678  B00D               	btfsc	___ftmul@f1,0,c
 11107  00267A  D81D               	call	PL112	;call to abstracted procedure
 11108  00267C                     i2l3683:
 11109  00267C  90D8               	bcf	status,0,c
 11110  00267E  320F               	rrcf	___ftmul@f1+2,f,c
 11111  002680  320E               	rrcf	___ftmul@f1+1,f,c
 11112  002682  320D               	rrcf	___ftmul@f1,f,c
 11113  002684  90D8               	bcf	status,0,c
 11114  002686  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 11115  002688  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 11116  00268A  3217               	rrcf	___ftmul@f3_as_product,f,c
 11117  00268C  2E1A               	decfsz	___ftmul@cntr,f,c
 11118  00268E  D7F4               	goto	i2l3679
 11119  002690  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 11120  002694  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 11121  002698  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 11122  00269C  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 11123  0026A0  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 11124  0026A4  EC6D  F015         	call	___ftpack	;wreg free
 11125  0026A8  C001  F00D         	movff	?___ftpack,?___ftmul
 11126  0026AC  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 11127  0026B0  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 11128  0026B4  0012               	return		;funcret
 11129  0026B6                     __end_of___ftmul:
 11130                           	opt stack 0
 11131  0026B6                     PL112:
 11132                           	opt stack 18
 11133  0026B6  5010               	movf	___ftmul@f2,w,c
 11134  0026B8  2617               	addwf	___ftmul@f3_as_product,f,c
 11135  0026BA  5011               	movf	___ftmul@f2+1,w,c
 11136  0026BC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 11137  0026BE  5012               	movf	___ftmul@f2+2,w,c
 11138  0026C0  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 11139  0026C2  0012               	return	
 11140  0026C4                     __end_ofPL112:
 11141                           	opt stack 0
 11142  0026C4                     PL144:
 11143                           	opt stack 18
 11144  0026C4  6A0D               	clrf	?___ftmul,c
 11145  0026C6  6A0E               	clrf	?___ftmul+1,c
 11146  0026C8  6A0F               	clrf	?___ftmul+2,c
 11147  0026CA  0012               	return	
 11148  0026CC                     __end_ofPL144:
 11149                           	opt stack 0
 11150                           tosu	equ	0xFFF
 11151                           tosh	equ	0xFFE
 11152                           tosl	equ	0xFFD
 11153                           pclatu	equ	0xFFB
 11154                           pclath	equ	0xFFA
 11155                           tblptru	equ	0xFF8
 11156                           tblptrh	equ	0xFF7
 11157                           tblptrl	equ	0xFF6
 11158                           tablat	equ	0xFF5
 11159                           prodh	equ	0xFF4
 11160                           prodl	equ	0xFF3
 11161                           intcon	equ	0xFF2
 11162                           postinc0	equ	0xFEE
 11163                           plusw0	equ	0xFEB
 11164                           fsr0h	equ	0xFEA
 11165                           fsr0l	equ	0xFE9
 11166                           wreg	equ	0xFE8
 11167                           indf1	equ	0xFE7
 11168                           postinc1	equ	0xFE6
 11169                           postdec1	equ	0xFE5
 11170                           plusw1	equ	0xFE3
 11171                           fsr1h	equ	0xFE2
 11172                           fsr1l	equ	0xFE1
 11173                           indf2	equ	0xFDF
 11174                           postinc2	equ	0xFDE
 11175                           postdec2	equ	0xFDD
 11176                           plusw2	equ	0xFDB
 11177                           fsr2h	equ	0xFDA
 11178                           fsr2l	equ	0xFD9
 11179                           status	equ	0xFD8
 11180                           
 11181 ;; *************** function ___ftpack *****************
 11182 ;; Defined at:
 11183 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;  arg             3    0[COMRAM] unsigned um
 11186 ;;  exp             1    3[COMRAM] unsigned char 
 11187 ;;  sign            1    4[COMRAM] unsigned char 
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;		None
 11190 ;; Return value:  Size  Location     Type
 11191 ;;                  3    0[COMRAM] float 
 11192 ;; Registers used:
 11193 ;;		wreg, status,2, status,0
 11194 ;; Tracked objects:
 11195 ;;		On entry : 0/0
 11196 ;;		On exit  : 0/0
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11199 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11201 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11202 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11203 ;;Total ram usage:        8 bytes
 11204 ;; Hardware stack levels used:    1
 11205 ;; This function calls:
 11206 ;;		Nothing
 11207 ;; This function is called by:
 11208 ;;		___ftmul
 11209 ;;		___lbtoft
 11210 ;; This function uses a non-reentrant model
 11211 ;;
 11212                           
 11213                           	psect	text55
 11214  002ADA                     __ptext55:
 11215                           	opt stack 0
 11216  002ADA                     ___ftpack:
 11217                           	opt stack 18
 11218                           
 11219                           ;incstack = 0
 11220  002ADA  5004               	movf	___ftpack@exp,w,c
 11221  002ADC  E004               	bz	i2l1380
 11222  002ADE  5001               	movf	___ftpack@arg,w,c
 11223  002AE0  1002               	iorwf	___ftpack@arg+1,w,c
 11224  002AE2  1003               	iorwf	___ftpack@arg+2,w,c
 11225  002AE4  E106               	bnz	i2l3427
 11226  002AE6                     i2l1380:
 11227  002AE6  6A01               	clrf	?___ftpack,c
 11228  002AE8  6A02               	clrf	?___ftpack+1,c
 11229  002AEA  6A03               	clrf	?___ftpack+2,c
 11230  002AEC  0012               	return	
 11231  002AEE                     i2l3425:
 11232  002AEE  2A04               	incf	___ftpack@exp,f,c
 11233  002AF0  D832               	call	PL152	;call to abstracted procedure
 11234  002AF2                     i2l3427:
 11235  002AF2  6A06               	clrf	??___ftpack& (0+255),c
 11236  002AF4  6A07               	clrf	(??___ftpack+1)& (0+255),c
 11237  002AF6  0EFE               	movlw	254
 11238  002AF8  1403               	andwf	___ftpack@arg+2,w,c
 11239  002AFA  D828               	call	PL124	;call to abstracted procedure
 11240  002AFC  E007               	bz	i2l3433
 11241  002AFE  D7F7               	goto	i2l3425
 11242  002B00                     i2l3429:
 11243  002B00  2A04               	incf	___ftpack@exp,f,c
 11244  002B02  2A01               	incf	___ftpack@arg,f,c
 11245  002B04  0E00               	movlw	0
 11246  002B06  2202               	addwfc	___ftpack@arg+1,f,c
 11247  002B08  2203               	addwfc	___ftpack@arg+2,f,c
 11248  002B0A  D825               	call	PL152	;call to abstracted procedure
 11249  002B0C                     i2l3433:
 11250  002B0C  6A06               	clrf	??___ftpack& (0+255),c
 11251  002B0E  6A07               	clrf	(??___ftpack+1)& (0+255),c
 11252  002B10  5003               	movf	___ftpack@arg+2,w,c
 11253  002B12  D81C               	call	PL124	;call to abstracted procedure
 11254  002B14  E006               	bz	i2l3437
 11255  002B16  D7F4               	goto	i2l3429
 11256  002B18                     i2l3435:
 11257  002B18  0604               	decf	___ftpack@exp,f,c
 11258  002B1A  90D8               	bcf	status,0,c
 11259  002B1C  3601               	rlcf	___ftpack@arg,f,c
 11260  002B1E  3602               	rlcf	___ftpack@arg+1,f,c
 11261  002B20  3603               	rlcf	___ftpack@arg+2,f,c
 11262  002B22                     i2l3437:
 11263  002B22  BE02               	btfsc	___ftpack@arg+1,7,c
 11264  002B24  D003               	goto	i2l1392
 11265  002B26  0E02               	movlw	2
 11266  002B28  6004               	cpfslt	___ftpack@exp,c
 11267  002B2A  D7F6               	goto	i2l3435
 11268  002B2C                     i2l1392:
 11269  002B2C  A004               	btfss	___ftpack@exp,0,c
 11270  002B2E  9E02               	bcf	___ftpack@arg+1,7,c
 11271  002B30  90D8               	bcf	status,0,c
 11272  002B32  3204               	rrcf	___ftpack@exp,f,c
 11273  002B34  5004               	movf	___ftpack@exp,w,c
 11274  002B36  1203               	iorwf	___ftpack@arg+2,f,c
 11275  002B38  5005               	movf	___ftpack@sign,w,c
 11276  002B3A  E001               	bz	i2l3451
 11277  002B3C  8E03               	bsf	___ftpack@arg+2,7,c
 11278  002B3E                     i2l3451:
 11279  002B3E  C001  F001         	movff	___ftpack@arg,?___ftpack
 11280  002B42  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 11281  002B46  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 11282  002B4A  0012               	return		;funcret
 11283  002B4C                     __end_of___ftpack:
 11284                           	opt stack 0
 11285  002B4C                     PL124:
 11286                           	opt stack 18
 11287  002B4C  6E08               	movwf	(??___ftpack+2)& (0+255),c
 11288  002B4E  5006               	movf	??___ftpack,w,c
 11289  002B50  1007               	iorwf	??___ftpack+1,w,c
 11290  002B52  1008               	iorwf	??___ftpack+2,w,c
 11291  002B54  0012               	return	
 11292  002B56                     __end_ofPL124:
 11293                           	opt stack 0
 11294  002B56                     PL152:
 11295                           	opt stack 18
 11296  002B56  90D8               	bcf	status,0,c
 11297  002B58  3203               	rrcf	___ftpack@arg+2,f,c
 11298  002B5A  3202               	rrcf	___ftpack@arg+1,f,c
 11299  002B5C  3201               	rrcf	___ftpack@arg,f,c
 11300  002B5E  0012               	return	
 11301  002B60                     __end_ofPL152:
 11302                           	opt stack 0
 11303                           tosu	equ	0xFFF
 11304                           tosh	equ	0xFFE
 11305                           tosl	equ	0xFFD
 11306                           pclatu	equ	0xFFB
 11307                           pclath	equ	0xFFA
 11308                           tblptru	equ	0xFF8
 11309                           tblptrh	equ	0xFF7
 11310                           tblptrl	equ	0xFF6
 11311                           tablat	equ	0xFF5
 11312                           prodh	equ	0xFF4
 11313                           prodl	equ	0xFF3
 11314                           intcon	equ	0xFF2
 11315                           postinc0	equ	0xFEE
 11316                           plusw0	equ	0xFEB
 11317                           fsr0h	equ	0xFEA
 11318                           fsr0l	equ	0xFE9
 11319                           wreg	equ	0xFE8
 11320                           indf1	equ	0xFE7
 11321                           postinc1	equ	0xFE6
 11322                           postdec1	equ	0xFE5
 11323                           plusw1	equ	0xFE3
 11324                           fsr1h	equ	0xFE2
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           plusw2	equ	0xFDB
 11330                           fsr2h	equ	0xFDA
 11331                           fsr2l	equ	0xFD9
 11332                           status	equ	0xFD8
 11333                           
 11334 ;; *************** function ___almod *****************
 11335 ;; Defined at:
 11336 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
 11337 ;; Parameters:    Size  Location     Type
 11338 ;;  dividend        4    0[COMRAM] long 
 11339 ;;  divisor         4    4[COMRAM] long 
 11340 ;; Auto vars:     Size  Location     Type
 11341 ;;  sign            1    9[COMRAM] unsigned char 
 11342 ;;  counter         1    8[COMRAM] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;                  4    0[COMRAM] long 
 11345 ;; Registers used:
 11346 ;;		wreg, status,2, status,0
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11352 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11353 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11355 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11356 ;;Total ram usage:       10 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; This function calls:
 11359 ;;		Nothing
 11360 ;; This function is called by:
 11361 ;;		_Timer0_10ms
 11362 ;; This function uses a non-reentrant model
 11363 ;;
 11364                           
 11365                           	psect	text56
 11366  002A40                     __ptext56:
 11367                           	opt stack 0
 11368  002A40                     ___almod:
 11369                           	opt stack 19
 11370                           
 11371                           ;incstack = 0
 11372  002A40  6A0A               	clrf	___almod@sign,c
 11373  002A42  AE04               	btfss	___almod@dividend+3,7,c
 11374  002A44  D003               	goto	i2l3619
 11375  002A46  D840               	call	PL88	;call to abstracted procedure
 11376  002A48  0E01               	movlw	1
 11377  002A4A  6E0A               	movwf	___almod@sign,c
 11378  002A4C                     i2l3619:
 11379  002A4C  AE08               	btfss	___almod@divisor+3,7,c
 11380  002A4E  D008               	goto	i2l3623
 11381  002A50  1E08               	comf	___almod@divisor+3,f,c
 11382  002A52  1E07               	comf	___almod@divisor+2,f,c
 11383  002A54  1E06               	comf	___almod@divisor+1,f,c
 11384  002A56  6C05               	negf	___almod@divisor,c
 11385  002A58  0E00               	movlw	0
 11386  002A5A  2206               	addwfc	___almod@divisor+1,f,c
 11387  002A5C  2207               	addwfc	___almod@divisor+2,f,c
 11388  002A5E  2208               	addwfc	___almod@divisor+3,f,c
 11389  002A60                     i2l3623:
 11390  002A60  5005               	movf	___almod@divisor,w,c
 11391  002A62  1006               	iorwf	___almod@divisor+1,w,c
 11392  002A64  1007               	iorwf	___almod@divisor+2,w,c
 11393  002A66  1008               	iorwf	___almod@divisor+3,w,c
 11394  002A68  E023               	bz	i2l3639
 11395  002A6A  0E01               	movlw	1
 11396  002A6C  6E09               	movwf	___almod@counter,c
 11397  002A6E  D006               	goto	i2l3629
 11398  002A70                     i2l3627:
 11399  002A70  90D8               	bcf	status,0,c
 11400  002A72  3605               	rlcf	___almod@divisor,f,c
 11401  002A74  3606               	rlcf	___almod@divisor+1,f,c
 11402  002A76  3607               	rlcf	___almod@divisor+2,f,c
 11403  002A78  3608               	rlcf	___almod@divisor+3,f,c
 11404  002A7A  2A09               	incf	___almod@counter,f,c
 11405  002A7C                     i2l3629:
 11406  002A7C  AE08               	btfss	___almod@divisor+3,7,c
 11407  002A7E  D7F8               	goto	i2l3627
 11408  002A80                     i2l3631:
 11409  002A80  5005               	movf	___almod@divisor,w,c
 11410  002A82  5C01               	subwf	___almod@dividend,w,c
 11411  002A84  5006               	movf	___almod@divisor+1,w,c
 11412  002A86  5802               	subwfb	___almod@dividend+1,w,c
 11413  002A88  5007               	movf	___almod@divisor+2,w,c
 11414  002A8A  5803               	subwfb	___almod@dividend+2,w,c
 11415  002A8C  5008               	movf	___almod@divisor+3,w,c
 11416  002A8E  5804               	subwfb	___almod@dividend+3,w,c
 11417  002A90  E308               	bnc	i2l3635
 11418  002A92  5005               	movf	___almod@divisor,w,c
 11419  002A94  5E01               	subwf	___almod@dividend,f,c
 11420  002A96  5006               	movf	___almod@divisor+1,w,c
 11421  002A98  5A02               	subwfb	___almod@dividend+1,f,c
 11422  002A9A  5007               	movf	___almod@divisor+2,w,c
 11423  002A9C  5A03               	subwfb	___almod@dividend+2,f,c
 11424  002A9E  5008               	movf	___almod@divisor+3,w,c
 11425  002AA0  5A04               	subwfb	___almod@dividend+3,f,c
 11426  002AA2                     i2l3635:
 11427  002AA2  90D8               	bcf	status,0,c
 11428  002AA4  3208               	rrcf	___almod@divisor+3,f,c
 11429  002AA6  3207               	rrcf	___almod@divisor+2,f,c
 11430  002AA8  3206               	rrcf	___almod@divisor+1,f,c
 11431  002AAA  3205               	rrcf	___almod@divisor,f,c
 11432  002AAC  2E09               	decfsz	___almod@counter,f,c
 11433  002AAE  D7E8               	goto	i2l3631
 11434  002AB0                     i2l3639:
 11435  002AB0  500A               	movf	___almod@sign,w,c
 11436  002AB2  E001               	bz	i2l3643
 11437  002AB4  D809               	call	PL88	;call to abstracted procedure
 11438  002AB6                     i2l3643:
 11439  002AB6  C001  F001         	movff	___almod@dividend,?___almod
 11440  002ABA  C002  F002         	movff	___almod@dividend+1,?___almod+1
 11441  002ABE  C003  F003         	movff	___almod@dividend+2,?___almod+2
 11442  002AC2  C004  F004         	movff	___almod@dividend+3,?___almod+3
 11443  002AC6  0012               	return		;funcret
 11444  002AC8                     __end_of___almod:
 11445                           	opt stack 0
 11446  002AC8                     PL88:
 11447                           	opt stack 19
 11448  002AC8  1E04               	comf	___almod@dividend+3,f,c
 11449  002ACA  1E03               	comf	___almod@dividend+2,f,c
 11450  002ACC  1E02               	comf	___almod@dividend+1,f,c
 11451  002ACE  6C01               	negf	___almod@dividend,c
 11452  002AD0  0E00               	movlw	0
 11453  002AD2  2202               	addwfc	___almod@dividend+1,f,c
 11454  002AD4  2203               	addwfc	___almod@dividend+2,f,c
 11455  002AD6  2204               	addwfc	___almod@dividend+3,f,c
 11456  002AD8  0C00               	retlw	0
 11457  002ADA                     __end_ofPL88:
 11458                           	opt stack 0
 11459                           tosu	equ	0xFFF
 11460                           tosh	equ	0xFFE
 11461                           tosl	equ	0xFFD
 11462                           pclatu	equ	0xFFB
 11463                           pclath	equ	0xFFA
 11464                           tblptru	equ	0xFF8
 11465                           tblptrh	equ	0xFF7
 11466                           tblptrl	equ	0xFF6
 11467                           tablat	equ	0xFF5
 11468                           prodh	equ	0xFF4
 11469                           prodl	equ	0xFF3
 11470                           intcon	equ	0xFF2
 11471                           postinc0	equ	0xFEE
 11472                           plusw0	equ	0xFEB
 11473                           fsr0h	equ	0xFEA
 11474                           fsr0l	equ	0xFE9
 11475                           wreg	equ	0xFE8
 11476                           indf1	equ	0xFE7
 11477                           postinc1	equ	0xFE6
 11478                           postdec1	equ	0xFE5
 11479                           plusw1	equ	0xFE3
 11480                           fsr1h	equ	0xFE2
 11481                           fsr1l	equ	0xFE1
 11482                           indf2	equ	0xFDF
 11483                           postinc2	equ	0xFDE
 11484                           postdec2	equ	0xFDD
 11485                           plusw2	equ	0xFDB
 11486                           fsr2h	equ	0xFDA
 11487                           fsr2l	equ	0xFD9
 11488                           status	equ	0xFD8
 11489                           
 11490 ;; *************** function _IncreaseByASecond *****************
 11491 ;; Defined at:
 11492 ;;		line 3 in file "libs/funcs.c"
 11493 ;; Parameters:    Size  Location     Type
 11494 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
 11495 ;; Auto vars:     Size  Location     Type
 11496 ;;		None
 11497 ;; Return value:  Size  Location     Type
 11498 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
 11499 ;; Registers used:
 11500 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11501 ;; Tracked objects:
 11502 ;;		On entry : 3F/0
 11503 ;;		On exit  : 0/0
 11504 ;;		Unchanged: 0/0
 11505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11506 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11509 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11510 ;;Total ram usage:       11 bytes
 11511 ;; Hardware stack levels used:    1
 11512 ;; Hardware stack levels required when called:    4
 11513 ;; This function calls:
 11514 ;;		i2_IncreaseByADay
 11515 ;; This function is called by:
 11516 ;;		_Timer0_10ms
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           	psect	text57
 11521  002D10                     __ptext57:
 11522                           	opt stack 0
 11523  002D10                     _IncreaseByASecond:
 11524                           	opt stack 15
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;funcs.c: 4: dt.SECOND++;
 11528                           
 11529                           ;incstack = 0
 11530  002D10  2A2A               	incf	IncreaseByASecond@dt,f,c
 11531  002D12  0E00               	movlw	0
 11532  002D14  222B               	addwfc	IncreaseByASecond@dt+1,f,c
 11533  002D16  222C               	addwfc	IncreaseByASecond@dt+2,f,c
 11534  002D18  222D               	addwfc	IncreaseByASecond@dt+3,f,c
 11535                           
 11536                           ;funcs.c: 5: if (dt.SECOND == 86400) {
 11537  002D1A  0E80               	movlw	128
 11538  002D1C  182A               	xorwf	IncreaseByASecond@dt,w,c
 11539  002D1E  E11C               	bnz	i2l3509
 11540  002D20  0E51               	movlw	81
 11541  002D22  182B               	xorwf	IncreaseByASecond@dt+1,w,c
 11542  002D24  E119               	bnz	i2l3509
 11543  002D26  042C               	decf	IncreaseByASecond@dt+2,w,c
 11544  002D28  102D               	iorwf	IncreaseByASecond@dt+3,w,c
 11545  002D2A  E116               	bnz	i2l3509
 11546                           
 11547                           ; BSR set to: 0
 11548                           ;funcs.c: 6: dt.SECOND = 0;
 11549  002D2C  6A2A               	clrf	IncreaseByASecond@dt,c
 11550  002D2E  6A2B               	clrf	IncreaseByASecond@dt+1,c
 11551  002D30  6A2C               	clrf	IncreaseByASecond@dt+2,c
 11552  002D32  6A2D               	clrf	IncreaseByASecond@dt+3,c
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;funcs.c: 7: dt = IncreaseByADay(dt);
 11556  002D34  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 11557  002D38  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
 11558  002D3C  0E0A               	movlw	10
 11559  002D3E                     i2u295_41:
 11560  002D3E  CFDB FFEB          	movff	plusw2,plusw0
 11561  002D42  06E8               	decf	wreg,f,c
 11562  002D44  E2FC               	bc	i2u295_41
 11563  002D46  ECD4  F010         	call	i2_IncreaseByADay	;wreg free
 11564  002D4A  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 11565  002D4E  0E0A               	movlw	10
 11566  002D50                     i2u296_41:
 11567  002D50  CFEB FFDB          	movff	plusw0,plusw2
 11568  002D54  06E8               	decf	wreg,f,c
 11569  002D56  E2FC               	bc	i2u296_41
 11570  002D58                     i2l3509:
 11571                           
 11572                           ;funcs.c: 8: }
 11573                           ;funcs.c: 9: return dt;
 11574  002D58  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 11575  002D5C  EE00  F02A         	lfsr	0,?_IncreaseByASecond
 11576  002D60  0E0A               	movlw	10
 11577  002D62                     i2u297_41:
 11578  002D62  CFDB FFEB          	movff	plusw2,plusw0
 11579  002D66  06E8               	decf	wreg,f,c
 11580  002D68  E2FC               	bc	i2u297_41
 11581  002D6A  0012               	return		;funcret
 11582  002D6C                     __end_of_IncreaseByASecond:
 11583                           	opt stack 0
 11584                           tosu	equ	0xFFF
 11585                           tosh	equ	0xFFE
 11586                           tosl	equ	0xFFD
 11587                           pclatu	equ	0xFFB
 11588                           pclath	equ	0xFFA
 11589                           tblptru	equ	0xFF8
 11590                           tblptrh	equ	0xFF7
 11591                           tblptrl	equ	0xFF6
 11592                           tablat	equ	0xFF5
 11593                           prodh	equ	0xFF4
 11594                           prodl	equ	0xFF3
 11595                           intcon	equ	0xFF2
 11596                           postinc0	equ	0xFEE
 11597                           plusw0	equ	0xFEB
 11598                           fsr0h	equ	0xFEA
 11599                           fsr0l	equ	0xFE9
 11600                           wreg	equ	0xFE8
 11601                           indf1	equ	0xFE7
 11602                           postinc1	equ	0xFE6
 11603                           postdec1	equ	0xFE5
 11604                           plusw1	equ	0xFE3
 11605                           fsr1h	equ	0xFE2
 11606                           fsr1l	equ	0xFE1
 11607                           indf2	equ	0xFDF
 11608                           postinc2	equ	0xFDE
 11609                           postdec2	equ	0xFDD
 11610                           plusw2	equ	0xFDB
 11611                           fsr2h	equ	0xFDA
 11612                           fsr2l	equ	0xFD9
 11613                           status	equ	0xFD8
 11614                           
 11615 ;; *************** function i2_IncreaseByADay *****************
 11616 ;; Defined at:
 11617 ;;		line 12 in file "libs/funcs.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  IncreaseByAD    1   40[COMRAM] char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
 11624 ;; Registers used:
 11625 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 3F/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11631 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11634 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11635 ;;Total ram usage:       14 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    3
 11638 ;; This function calls:
 11639 ;;		i2_IncreaseByAMonth
 11640 ;;		i2___lwmod
 11641 ;; This function is called by:
 11642 ;;		_IncreaseByASecond
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           	psect	text58
 11647  0021A8                     __ptext58:
 11648                           	opt stack 0
 11649  0021A8                     i2_IncreaseByADay:
 11650                           	opt stack 15
 11651                           
 11652                           ; BSR set to: 0
 11653                           ;funcs.c: 13: dt.DATE.Day++;
 11654                           
 11655                           ;incstack = 0
 11656  0021A8  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
 11657  0021AA  2A21               	incf	i2IncreaseByADay@dt+5,f,c
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
 11661  0021AC  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 11662  0021AE  0B7F               	andlw	127
 11663  0021B0  06E8               	decf	wreg,f,c
 11664  0021B2  E104               	bnz	i2l3461
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;funcs.c: 15: dt.DAY.Val = 0x40;
 11668  0021B4  5024               	movf	i2IncreaseByADay@dt+8,w,c
 11669  0021B6  0B01               	andlw	-255
 11670  0021B8  0980               	iorlw	128
 11671  0021BA  D00A               	goto	L10
 11672  0021BC                     i2l3461:
 11673                           
 11674                           ; BSR set to: 0
 11675                           ;funcs.c: 16: else
 11676                           ;funcs.c: 17: dt.DAY.Val >>= 1;
 11677  0021BC  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 11678  0021BE  0B7F               	andlw	127
 11679  0021C0  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
 11680  0021C2  90D8               	bcf	status,0,c
 11681  0021C4  3227               	rrcf	??i2_IncreaseByADay,f,c
 11682  0021C6  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
 11683  0021C8  5024               	movf	i2IncreaseByADay@dt+8,w,c
 11684  0021CA  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 11685  0021CC  0B01               	andlw	-255
 11686  0021CE  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 11687  0021D0                     L10:
 11688  0021D0  6E24               	movwf	i2IncreaseByADay@dt+8,c
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
 11692  0021D2  90D8               	bcf	status,0,c
 11693  0021D4  3422               	rlcf	i2IncreaseByADay@dt+6,w,c
 11694  0021D6  6ED9               	movwf	fsr2l,c
 11695  0021D8  3423               	rlcf	i2IncreaseByADay@dt+7,w,c
 11696  0021DA  EC4D  F010         	call	PL76	;call to abstracted procedure
 11697  0021DE  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
 11701  0021E0  0E02               	movlw	2
 11702  0021E2  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 11703  0021E4  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 11704  0021E6  E107               	bnz	i2l3471
 11705                           
 11706                           ; BSR set to: 0
 11707  0021E8  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
 11708  0021EC  0E03               	movlw	3
 11709  0021EE  1627               	andwf	??i2_IncreaseByADay,f,c
 11710  0021F0  E102               	bnz	i2l3471
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;funcs.c: 20: MonthDays = 29;
 11714  0021F2  0E1D               	movlw	29
 11715  0021F4  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11716  0021F6                     i2l3471:
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
 11720  0021F6  0E02               	movlw	2
 11721  0021F8  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 11722  0021FA  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 11723  0021FC  E10A               	bnz	i2l3477
 11724                           
 11725                           ; BSR set to: 0
 11726  0021FE  D842               	call	PL148	;call to abstracted procedure
 11727  002200  EC01  F018         	call	PL160	;call to abstracted procedure
 11728  002204  ECAE  F017         	call	i2___lwmod	;wreg free
 11729  002208  5001               	movf	?i2___lwmod,w,c
 11730  00220A  1002               	iorwf	?i2___lwmod+1,w,c
 11731  00220C  E102               	bnz	i2l3477
 11732                           
 11733                           ;funcs.c: 22: MonthDays = 28;
 11734  00220E  0E1C               	movlw	28
 11735  002210  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11736  002212                     i2l3477:
 11737                           
 11738                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
 11739  002212  0E02               	movlw	2
 11740  002214  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 11741  002216  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 11742  002218  E10C               	bnz	i2l3483
 11743  00221A  D834               	call	PL148	;call to abstracted procedure
 11744  00221C  0E01               	movlw	1
 11745  00221E  6E04               	movwf	i2___lwmod@divisor+1,c
 11746  002220  0E90               	movlw	144
 11747  002222  6E03               	movwf	i2___lwmod@divisor,c
 11748  002224  ECAE  F017         	call	i2___lwmod	;wreg free
 11749  002228  5001               	movf	?i2___lwmod,w,c
 11750  00222A  1002               	iorwf	?i2___lwmod+1,w,c
 11751  00222C  E102               	bnz	i2l3483
 11752                           
 11753                           ;funcs.c: 24: MonthDays = 29;
 11754  00222E  0E1D               	movlw	29
 11755  002230  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 11756  002232                     i2l3483:
 11757                           
 11758                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
 11759  002232  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
 11760  002236  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
 11761  002238  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
 11762  00223A  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
 11763  00223C  5020               	movf	i2IncreaseByADay@dt+4,w,c
 11764  00223E  5C27               	subwf	??i2_IncreaseByADay,w,c
 11765  002240  5021               	movf	i2IncreaseByADay@dt+5,w,c
 11766  002242  5828               	subwfb	??i2_IncreaseByADay+1,w,c
 11767  002244  E215               	bc	i2l3489
 11768                           
 11769                           ;funcs.c: 26: dt.DATE.Day = 1;
 11770  002246  6A21               	clrf	i2IncreaseByADay@dt+5,c
 11771  002248  0E01               	movlw	1
 11772  00224A  6E20               	movwf	i2IncreaseByADay@dt+4,c
 11773                           
 11774                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
 11775  00224C  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 11776  002250  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
 11777  002254  0E0A               	movlw	10
 11778  002256                     i2u289_41:
 11779  002256  CFDB FFEB          	movff	plusw2,plusw0
 11780  00225A  06E8               	decf	wreg,f,c
 11781  00225C  E2FC               	bc	i2u289_41
 11782  00225E  EC27  F017         	call	i2_IncreaseByAMonth	;wreg free
 11783  002262  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 11784  002266  0E0A               	movlw	10
 11785  002268                     i2u290_41:
 11786  002268  CFEB FFDB          	movff	plusw0,plusw2
 11787  00226C  06E8               	decf	wreg,f,c
 11788  00226E  E2FC               	bc	i2u290_41
 11789  002270                     i2l3489:
 11790                           
 11791                           ;funcs.c: 28: }
 11792                           ;funcs.c: 29: return dt;
 11793  002270  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 11794  002274  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
 11795  002278  0E0A               	movlw	10
 11796  00227A                     i2u291_41:
 11797  00227A  CFDB FFEB          	movff	plusw2,plusw0
 11798  00227E  06E8               	decf	wreg,f,c
 11799  002280  E2FC               	bc	i2u291_41
 11800  002282  0012               	return		;funcret
 11801  002284                     __end_ofi2_IncreaseByADay:
 11802                           	opt stack 0
 11803  002284                     PL148:
 11804                           	opt stack 15
 11805  002284  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
 11806  002288  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
 11807  00228C  0012               	return	
 11808  00228E                     __end_ofPL148:
 11809                           	opt stack 0
 11810                           tosu	equ	0xFFF
 11811                           tosh	equ	0xFFE
 11812                           tosl	equ	0xFFD
 11813                           pclatu	equ	0xFFB
 11814                           pclath	equ	0xFFA
 11815                           tblptru	equ	0xFF8
 11816                           tblptrh	equ	0xFF7
 11817                           tblptrl	equ	0xFF6
 11818                           tablat	equ	0xFF5
 11819                           prodh	equ	0xFF4
 11820                           prodl	equ	0xFF3
 11821                           intcon	equ	0xFF2
 11822                           postinc0	equ	0xFEE
 11823                           plusw0	equ	0xFEB
 11824                           fsr0h	equ	0xFEA
 11825                           fsr0l	equ	0xFE9
 11826                           wreg	equ	0xFE8
 11827                           indf1	equ	0xFE7
 11828                           postinc1	equ	0xFE6
 11829                           postdec1	equ	0xFE5
 11830                           plusw1	equ	0xFE3
 11831                           fsr1h	equ	0xFE2
 11832                           fsr1l	equ	0xFE1
 11833                           indf2	equ	0xFDF
 11834                           postinc2	equ	0xFDE
 11835                           postdec2	equ	0xFDD
 11836                           plusw2	equ	0xFDB
 11837                           fsr2h	equ	0xFDA
 11838                           fsr2l	equ	0xFD9
 11839                           status	equ	0xFD8
 11840                           
 11841 ;; *************** function i2_IncreaseByAMonth *****************
 11842 ;; Defined at:
 11843 ;;		line 32 in file "libs/funcs.c"
 11844 ;; Parameters:    Size  Location     Type
 11845 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
 11846 ;; Auto vars:     Size  Location     Type
 11847 ;;		None
 11848 ;; Return value:  Size  Location     Type
 11849 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
 11850 ;; Registers used:
 11851 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11852 ;; Tracked objects:
 11853 ;;		On entry : 0/0
 11854 ;;		On exit  : 0/0
 11855 ;;		Unchanged: 0/0
 11856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11857 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11860 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11861 ;;Total ram usage:       11 bytes
 11862 ;; Hardware stack levels used:    1
 11863 ;; Hardware stack levels required when called:    2
 11864 ;; This function calls:
 11865 ;;		i2_IncreaseByAYear
 11866 ;; This function is called by:
 11867 ;;		i2_IncreaseByADay
 11868 ;; This function uses a non-reentrant model
 11869 ;;
 11870                           
 11871                           	psect	text59
 11872  002E4E                     __ptext59:
 11873                           	opt stack 0
 11874  002E4E                     i2_IncreaseByAMonth:
 11875                           	opt stack 15
 11876                           
 11877                           ;funcs.c: 33: dt.DATE.Month++;
 11878                           
 11879                           ;incstack = 0
 11880  002E4E  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
 11881  002E50  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
 11882                           
 11883                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
 11884  002E52  0E0D               	movlw	13
 11885  002E54  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
 11886  002E56  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
 11887  002E58  E115               	bnz	i2l3393
 11888                           
 11889                           ;funcs.c: 35: dt.DATE.Month = 1;
 11890  002E5A  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
 11891  002E5C  0E01               	movlw	1
 11892  002E5E  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
 11893                           
 11894                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
 11895  002E60  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 11896  002E64  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
 11897  002E68  0E0A               	movlw	10
 11898  002E6A                     i2u262_41:
 11899  002E6A  CFDB FFEB          	movff	plusw2,plusw0
 11900  002E6E  06E8               	decf	wreg,f,c
 11901  002E70  E2FC               	bc	i2u262_41
 11902  002E72  ECE9  F017         	call	i2_IncreaseByAYear	;wreg free
 11903  002E76  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 11904  002E7A  0E0A               	movlw	10
 11905  002E7C                     i2u263_41:
 11906  002E7C  CFEB FFDB          	movff	plusw0,plusw2
 11907  002E80  06E8               	decf	wreg,f,c
 11908  002E82  E2FC               	bc	i2u263_41
 11909  002E84                     i2l3393:
 11910                           
 11911                           ;funcs.c: 37: }
 11912                           ;funcs.c: 38: return dt;
 11913  002E84  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 11914  002E88  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
 11915  002E8C  0E0A               	movlw	10
 11916  002E8E                     i2u264_41:
 11917  002E8E  CFDB FFEB          	movff	plusw2,plusw0
 11918  002E92  06E8               	decf	wreg,f,c
 11919  002E94  E2FC               	bc	i2u264_41
 11920  002E96  0012               	return		;funcret
 11921  002E98                     __end_ofi2_IncreaseByAMonth:
 11922                           	opt stack 0
 11923                           tosu	equ	0xFFF
 11924                           tosh	equ	0xFFE
 11925                           tosl	equ	0xFFD
 11926                           pclatu	equ	0xFFB
 11927                           pclath	equ	0xFFA
 11928                           tblptru	equ	0xFF8
 11929                           tblptrh	equ	0xFF7
 11930                           tblptrl	equ	0xFF6
 11931                           tablat	equ	0xFF5
 11932                           prodh	equ	0xFF4
 11933                           prodl	equ	0xFF3
 11934                           intcon	equ	0xFF2
 11935                           postinc0	equ	0xFEE
 11936                           plusw0	equ	0xFEB
 11937                           fsr0h	equ	0xFEA
 11938                           fsr0l	equ	0xFE9
 11939                           wreg	equ	0xFE8
 11940                           indf1	equ	0xFE7
 11941                           postinc1	equ	0xFE6
 11942                           postdec1	equ	0xFE5
 11943                           plusw1	equ	0xFE3
 11944                           fsr1h	equ	0xFE2
 11945                           fsr1l	equ	0xFE1
 11946                           indf2	equ	0xFDF
 11947                           postinc2	equ	0xFDE
 11948                           postdec2	equ	0xFDD
 11949                           plusw2	equ	0xFDB
 11950                           fsr2h	equ	0xFDA
 11951                           fsr2l	equ	0xFD9
 11952                           status	equ	0xFD8
 11953                           
 11954 ;; *************** function i2_IncreaseByAYear *****************
 11955 ;; Defined at:
 11956 ;;		line 41 in file "libs/funcs.c"
 11957 ;; Parameters:    Size  Location     Type
 11958 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
 11959 ;; Auto vars:     Size  Location     Type
 11960 ;;		None
 11961 ;; Return value:  Size  Location     Type
 11962 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
 11963 ;; Registers used:
 11964 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11965 ;; Tracked objects:
 11966 ;;		On entry : 0/0
 11967 ;;		On exit  : 0/0
 11968 ;;		Unchanged: 0/0
 11969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11970 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11973 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11974 ;;Total ram usage:       11 bytes
 11975 ;; Hardware stack levels used:    1
 11976 ;; Hardware stack levels required when called:    1
 11977 ;; This function calls:
 11978 ;;		i2___lwmod
 11979 ;; This function is called by:
 11980 ;;		i2_IncreaseByAMonth
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           	psect	text60
 11985  002FD2                     __ptext60:
 11986                           	opt stack 0
 11987  002FD2                     i2_IncreaseByAYear:
 11988                           	opt stack 15
 11989                           
 11990                           ;funcs.c: 42: dt.YEAR++;
 11991                           
 11992                           ;incstack = 0
 11993  002FD2  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
 11994  002FD4  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
 11995                           
 11996                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
 11997  002FD6  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
 11998  002FDA  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
 11999  002FDE  D811               	call	PL160	;call to abstracted procedure
 12000  002FE0  ECAE  F017         	call	i2___lwmod	;wreg free
 12001  002FE4  5001               	movf	?i2___lwmod,w,c
 12002  002FE6  1002               	iorwf	?i2___lwmod+1,w,c
 12003  002FE8  E102               	bnz	i2l3363
 12004                           
 12005                           ;funcs.c: 44: CENTURY++;
 12006  002FEA  0100               	movlb	0	; () banked
 12007  002FEC  2BFA               	incf	_CENTURY& (0+255),f,b
 12008  002FEE                     i2l3363:
 12009                           
 12010                           ;funcs.c: 45: return dt;
 12011  002FEE  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
 12012  002FF2  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
 12013  002FF6  0E0A               	movlw	10
 12014  002FF8                     i2u256_41:
 12015  002FF8  CFDB FFEB          	movff	plusw2,plusw0
 12016  002FFC  06E8               	decf	wreg,f,c
 12017  002FFE  E2FC               	bc	i2u256_41
 12018  003000  0012               	return		;funcret
 12019  003002                     __end_ofi2_IncreaseByAYear:
 12020                           	opt stack 0
 12021  003002                     PL160:
 12022                           	opt stack 15
 12023  003002  6A04               	clrf	i2___lwmod@divisor+1,c
 12024  003004  0E64               	movlw	100
 12025  003006  6E03               	movwf	i2___lwmod@divisor,c
 12026  003008  0C64               	retlw	100
 12027  00300A                     __end_ofPL160:
 12028                           	opt stack 0
 12029                           tosu	equ	0xFFF
 12030                           tosh	equ	0xFFE
 12031                           tosl	equ	0xFFD
 12032                           pclatu	equ	0xFFB
 12033                           pclath	equ	0xFFA
 12034                           tblptru	equ	0xFF8
 12035                           tblptrh	equ	0xFF7
 12036                           tblptrl	equ	0xFF6
 12037                           tablat	equ	0xFF5
 12038                           prodh	equ	0xFF4
 12039                           prodl	equ	0xFF3
 12040                           intcon	equ	0xFF2
 12041                           postinc0	equ	0xFEE
 12042                           plusw0	equ	0xFEB
 12043                           fsr0h	equ	0xFEA
 12044                           fsr0l	equ	0xFE9
 12045                           wreg	equ	0xFE8
 12046                           indf1	equ	0xFE7
 12047                           postinc1	equ	0xFE6
 12048                           postdec1	equ	0xFE5
 12049                           plusw1	equ	0xFE3
 12050                           fsr1h	equ	0xFE2
 12051                           fsr1l	equ	0xFE1
 12052                           indf2	equ	0xFDF
 12053                           postinc2	equ	0xFDE
 12054                           postdec2	equ	0xFDD
 12055                           plusw2	equ	0xFDB
 12056                           fsr2h	equ	0xFDA
 12057                           fsr2l	equ	0xFD9
 12058                           status	equ	0xFD8
 12059                           
 12060 ;; *************** function i2___lwmod *****************
 12061 ;; Defined at:
 12062 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 12063 ;; Parameters:    Size  Location     Type
 12064 ;;  dividend        2    0[COMRAM] unsigned int 
 12065 ;;  divisor         2    2[COMRAM] unsigned int 
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;  __lwmod         1    4[COMRAM] unsigned char 
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  2    0[COMRAM] unsigned int 
 12070 ;; Registers used:
 12071 ;;		wreg, status,2, status,0
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12077 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12080 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12081 ;;Total ram usage:        5 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; This function calls:
 12084 ;;		Nothing
 12085 ;; This function is called by:
 12086 ;;		i2_IncreaseByADay
 12087 ;;		i2_IncreaseByAYear
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           	psect	text61
 12092  002F5C                     __ptext61:
 12093                           	opt stack 0
 12094  002F5C                     i2___lwmod:
 12095                           	opt stack 17
 12096                           
 12097                           ;incstack = 0
 12098  002F5C  5003               	movf	i2___lwmod@divisor,w,c
 12099  002F5E  1004               	iorwf	i2___lwmod@divisor+1,w,c
 12100  002F60  E017               	bz	i2l1580
 12101  002F62  0E01               	movlw	1
 12102  002F64  6E05               	movwf	i2___lwmod@counter,c
 12103  002F66  D004               	goto	i2l3331
 12104  002F68                     i2l3329:
 12105  002F68  90D8               	bcf	status,0,c
 12106  002F6A  3603               	rlcf	i2___lwmod@divisor,f,c
 12107  002F6C  3604               	rlcf	i2___lwmod@divisor+1,f,c
 12108  002F6E  2A05               	incf	i2___lwmod@counter,f,c
 12109  002F70                     i2l3331:
 12110  002F70  AE04               	btfss	i2___lwmod@divisor+1,7,c
 12111  002F72  D7FA               	goto	i2l3329
 12112  002F74                     i2l3333:
 12113  002F74  5003               	movf	i2___lwmod@divisor,w,c
 12114  002F76  5C01               	subwf	i2___lwmod@dividend,w,c
 12115  002F78  5004               	movf	i2___lwmod@divisor+1,w,c
 12116  002F7A  5802               	subwfb	i2___lwmod@dividend+1,w,c
 12117  002F7C  E304               	bnc	i2l3337
 12118  002F7E  5003               	movf	i2___lwmod@divisor,w,c
 12119  002F80  5E01               	subwf	i2___lwmod@dividend,f,c
 12120  002F82  5004               	movf	i2___lwmod@divisor+1,w,c
 12121  002F84  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 12122  002F86                     i2l3337:
 12123  002F86  90D8               	bcf	status,0,c
 12124  002F88  3204               	rrcf	i2___lwmod@divisor+1,f,c
 12125  002F8A  3203               	rrcf	i2___lwmod@divisor,f,c
 12126  002F8C  2E05               	decfsz	i2___lwmod@counter,f,c
 12127  002F8E  D7F2               	goto	i2l3333
 12128  002F90                     i2l1580:
 12129  002F90  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 12130  002F94  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12131  002F98  0012               	return		;funcret
 12132  002F9A                     __end_ofi2___lwmod:
 12133                           	opt stack 0
 12134                           tosu	equ	0xFFF
 12135                           tosh	equ	0xFFE
 12136                           tosl	equ	0xFFD
 12137                           pclatu	equ	0xFFB
 12138                           pclath	equ	0xFFA
 12139                           tblptru	equ	0xFF8
 12140                           tblptrh	equ	0xFF7
 12141                           tblptrl	equ	0xFF6
 12142                           tablat	equ	0xFF5
 12143                           prodh	equ	0xFF4
 12144                           prodl	equ	0xFF3
 12145                           intcon	equ	0xFF2
 12146                           postinc0	equ	0xFEE
 12147                           plusw0	equ	0xFEB
 12148                           fsr0h	equ	0xFEA
 12149                           fsr0l	equ	0xFE9
 12150                           wreg	equ	0xFE8
 12151                           indf1	equ	0xFE7
 12152                           postinc1	equ	0xFE6
 12153                           postdec1	equ	0xFE5
 12154                           plusw1	equ	0xFE3
 12155                           fsr1h	equ	0xFE2
 12156                           fsr1l	equ	0xFE1
 12157                           indf2	equ	0xFDF
 12158                           postinc2	equ	0xFDE
 12159                           postdec2	equ	0xFDD
 12160                           plusw2	equ	0xFDB
 12161                           fsr2h	equ	0xFDA
 12162                           fsr2l	equ	0xFD9
 12163                           status	equ	0xFD8
 12164                           
 12165 ;; *************** function _GetThisCycle *****************
 12166 ;; Defined at:
 12167 ;;		line 230 in file "libs/funcs.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;		None
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;		None
 12172 ;; Return value:  Size  Location     Type
 12173 ;;                  1    wreg      unsigned char 
 12174 ;; Registers used:
 12175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12176 ;; Tracked objects:
 12177 ;;		On entry : 0/0
 12178 ;;		On exit  : 0/0
 12179 ;;		Unchanged: 0/0
 12180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12185 ;;Total ram usage:        0 bytes
 12186 ;; Hardware stack levels used:    1
 12187 ;; This function calls:
 12188 ;;		Nothing
 12189 ;; This function is called by:
 12190 ;;		_Timer0_10ms
 12191 ;; This function uses a non-reentrant model
 12192 ;;
 12193                           
 12194                           	psect	text62
 12195  003162                     __ptext62:
 12196                           	opt stack 0
 12197  003162                     _GetThisCycle:
 12198                           	opt stack 19
 12199                           
 12200                           ;funcs.c: 231: if (PRESENT_EVENT <0)
 12201                           
 12202                           ;incstack = 0
 12203  003162  BE5E               	btfsc	_PRESENT_EVENT,7,c
 12204                           
 12205                           ;funcs.c: 232: return 0;
 12206  003164  0C00               	retlw	0
 12207                           
 12208                           ;funcs.c: 233: else
 12209                           ;funcs.c: 234: return EVENTS[PRESENT_EVENT].CYCLE;
 12210  003166  D000               	goto	PL80	;call to abstracted procedure
 12211  003168                     __end_of_GetThisCycle:
 12212                           	opt stack 0
 12213  003168                     PL80:
 12214                           	opt stack 15
 12215  003168  505E               	movf	_PRESENT_EVENT,w,c
 12216  00316A  0D0A               	mullw	10
 12217  00316C  0E08               	movlw	low (_EVENTS+8)
 12218  00316E  24F3               	addwf	prodl,w,c
 12219  003170  6ED9               	movwf	fsr2l,c
 12220  003172  0E02               	movlw	high (_EVENTS+8)
 12221  003174  20F4               	addwfc	prodh,w,c
 12222  003176  6EDA               	movwf	fsr2h,c
 12223  003178  50DF               	movf	indf2,w,c
 12224  00317A  0012               	return	
 12225  00317C                     __end_ofPL80:
 12226                           	opt stack 0
 12227                           tosu	equ	0xFFF
 12228                           tosh	equ	0xFFE
 12229                           tosl	equ	0xFFD
 12230                           pclatu	equ	0xFFB
 12231                           pclath	equ	0xFFA
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           postinc0	equ	0xFEE
 12240                           plusw0	equ	0xFEB
 12241                           fsr0h	equ	0xFEA
 12242                           fsr0l	equ	0xFE9
 12243                           wreg	equ	0xFE8
 12244                           indf1	equ	0xFE7
 12245                           postinc1	equ	0xFE6
 12246                           postdec1	equ	0xFE5
 12247                           plusw1	equ	0xFE3
 12248                           fsr1h	equ	0xFE2
 12249                           fsr1l	equ	0xFE1
 12250                           indf2	equ	0xFDF
 12251                           postinc2	equ	0xFDE
 12252                           postdec2	equ	0xFDD
 12253                           plusw2	equ	0xFDB
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           tosu	equ	0xFFF
 12258                           tosh	equ	0xFFE
 12259                           tosl	equ	0xFFD
 12260                           pclatu	equ	0xFFB
 12261                           pclath	equ	0xFFA
 12262                           tblptru	equ	0xFF8
 12263                           tblptrh	equ	0xFF7
 12264                           tblptrl	equ	0xFF6
 12265                           tablat	equ	0xFF5
 12266                           prodh	equ	0xFF4
 12267                           prodl	equ	0xFF3
 12268                           intcon	equ	0xFF2
 12269                           postinc0	equ	0xFEE
 12270                           plusw0	equ	0xFEB
 12271                           fsr0h	equ	0xFEA
 12272                           fsr0l	equ	0xFE9
 12273                           wreg	equ	0xFE8
 12274                           indf1	equ	0xFE7
 12275                           postinc1	equ	0xFE6
 12276                           postdec1	equ	0xFE5
 12277                           plusw1	equ	0xFE3
 12278                           fsr1h	equ	0xFE2
 12279                           fsr1l	equ	0xFE1
 12280                           indf2	equ	0xFDF
 12281                           postinc2	equ	0xFDE
 12282                           postdec2	equ	0xFDD
 12283                           plusw2	equ	0xFDB
 12284                           fsr2h	equ	0xFDA
 12285                           fsr2l	equ	0xFD9
 12286                           status	equ	0xFD8
 12287                           
 12288                           	psect	text63
 12289  000000                     __ptext63:
 12290                           	opt stack 0
 12291                           tosu	equ	0xFFF
 12292                           tosh	equ	0xFFE
 12293                           tosl	equ	0xFFD
 12294                           pclatu	equ	0xFFB
 12295                           pclath	equ	0xFFA
 12296                           tblptru	equ	0xFF8
 12297                           tblptrh	equ	0xFF7
 12298                           tblptrl	equ	0xFF6
 12299                           tablat	equ	0xFF5
 12300                           prodh	equ	0xFF4
 12301                           prodl	equ	0xFF3
 12302                           intcon	equ	0xFF2
 12303                           postinc0	equ	0xFEE
 12304                           plusw0	equ	0xFEB
 12305                           fsr0h	equ	0xFEA
 12306                           fsr0l	equ	0xFE9
 12307                           wreg	equ	0xFE8
 12308                           indf1	equ	0xFE7
 12309                           postinc1	equ	0xFE6
 12310                           postdec1	equ	0xFE5
 12311                           plusw1	equ	0xFE3
 12312                           fsr1h	equ	0xFE2
 12313                           fsr1l	equ	0xFE1
 12314                           indf2	equ	0xFDF
 12315                           postinc2	equ	0xFDE
 12316                           postdec2	equ	0xFDD
 12317                           plusw2	equ	0xFDB
 12318                           fsr2h	equ	0xFDA
 12319                           fsr2l	equ	0xFD9
 12320                           status	equ	0xFD8
 12321                           
 12322                           	psect	rparam
 12323  0000                     tosu	equ	0xFFF
 12324                           tosh	equ	0xFFE
 12325                           tosl	equ	0xFFD
 12326                           pclatu	equ	0xFFB
 12327                           pclath	equ	0xFFA
 12328                           tblptru	equ	0xFF8
 12329                           tblptrh	equ	0xFF7
 12330                           tblptrl	equ	0xFF6
 12331                           tablat	equ	0xFF5
 12332                           prodh	equ	0xFF4
 12333                           prodl	equ	0xFF3
 12334                           intcon	equ	0xFF2
 12335                           postinc0	equ	0xFEE
 12336                           plusw0	equ	0xFEB
 12337                           fsr0h	equ	0xFEA
 12338                           fsr0l	equ	0xFE9
 12339                           wreg	equ	0xFE8
 12340                           indf1	equ	0xFE7
 12341                           postinc1	equ	0xFE6
 12342                           postdec1	equ	0xFE5
 12343                           plusw1	equ	0xFE3
 12344                           fsr1h	equ	0xFE2
 12345                           fsr1l	equ	0xFE1
 12346                           indf2	equ	0xFDF
 12347                           postinc2	equ	0xFDE
 12348                           postdec2	equ	0xFDD
 12349                           plusw2	equ	0xFDB
 12350                           fsr2h	equ	0xFDA
 12351                           fsr2l	equ	0xFD9
 12352                           status	equ	0xFD8
 12353                           
 12354                           	psect	temp
 12355  00005F                     btemp:
 12356                           	opt stack 0
 12357  00005F                     	ds	1
 12358  0000                     int$flags	set	btemp
 12359                           tosu	equ	0xFFF
 12360                           tosh	equ	0xFFE
 12361                           tosl	equ	0xFFD
 12362                           pclatu	equ	0xFFB
 12363                           pclath	equ	0xFFA
 12364                           tblptru	equ	0xFF8
 12365                           tblptrh	equ	0xFF7
 12366                           tblptrl	equ	0xFF6
 12367                           tablat	equ	0xFF5
 12368                           prodh	equ	0xFF4
 12369                           prodl	equ	0xFF3
 12370                           intcon	equ	0xFF2
 12371                           postinc0	equ	0xFEE
 12372                           plusw0	equ	0xFEB
 12373                           fsr0h	equ	0xFEA
 12374                           fsr0l	equ	0xFE9
 12375                           wreg	equ	0xFE8
 12376                           indf1	equ	0xFE7
 12377                           postinc1	equ	0xFE6
 12378                           postdec1	equ	0xFE5
 12379                           plusw1	equ	0xFE3
 12380                           fsr1h	equ	0xFE2
 12381                           fsr1l	equ	0xFE1
 12382                           indf2	equ	0xFDF
 12383                           postinc2	equ	0xFDE
 12384                           postdec2	equ	0xFDD
 12385                           plusw2	equ	0xFDB
 12386                           fsr2h	equ	0xFDA
 12387                           fsr2l	equ	0xFD9
 12388                           status	equ	0xFD8
 12389                           tosu	equ	0xFFF
 12390                           tosh	equ	0xFFE
 12391                           tosl	equ	0xFFD
 12392                           pclatu	equ	0xFFB
 12393                           pclath	equ	0xFFA
 12394                           tblptru	equ	0xFF8
 12395                           tblptrh	equ	0xFF7
 12396                           tblptrl	equ	0xFF6
 12397                           tablat	equ	0xFF5
 12398                           prodh	equ	0xFF4
 12399                           prodl	equ	0xFF3
 12400                           intcon	equ	0xFF2
 12401                           postinc0	equ	0xFEE
 12402                           plusw0	equ	0xFEB
 12403                           fsr0h	equ	0xFEA
 12404                           fsr0l	equ	0xFE9
 12405                           wreg	equ	0xFE8
 12406                           indf1	equ	0xFE7
 12407                           postinc1	equ	0xFE6
 12408                           postdec1	equ	0xFE5
 12409                           plusw1	equ	0xFE3
 12410                           fsr1h	equ	0xFE2
 12411                           fsr1l	equ	0xFE1
 12412                           indf2	equ	0xFDF
 12413                           postinc2	equ	0xFDE
 12414                           postdec2	equ	0xFDD
 12415                           plusw2	equ	0xFDB
 12416                           fsr2h	equ	0xFDA
 12417                           fsr2l	equ	0xFD9
 12418                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        69
    BSS         1343
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      94
    BANK0           160     78     155
    BANK1           256      0     116
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    LIGHTS	PTR unsigned char [2] size(2) Largest target is 1
		 -> LATB(SFR_2[1]), LATA(SFR_2[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_Timer0_10ms
    _Timer0_10ms->_IncreaseByASecond
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _main->_ReadGPS_DATE_TIME
    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___aldiv
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS->_ReadGPS_DATE_TIME
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___lmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Init->_Lcd_Command
    _GetEventNumber->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   97131
                     _GetEventNumber
                           _Lcd_Init
                      _Lcd_WriteChar
                  _LoadAllFromEeprom
                            _ReadGPS
                  _ReadGPS_DATE_TIME
                  _SYSTEM_Initialize
                            _StopGPS
                        _SwitchOnGPS
           _TMR0_SetInterruptHandler
              _TestGPSStartCondition
                 _VerifyForGPSOnTIme
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                         9     2      7    5813
                                             18 BANK0      9     2      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     656
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2    1908
                                             14 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _VerifyForGPSOnTIme                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _TestGPSStartCondition                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnGPS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StopGPS                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     200
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS                                              0     0      0   24095
                  _ReadGPS_DATE_TIME
 ---------------------------------------------------------------------------------
 (1) _ReadGPS_DATE_TIME                                   20    20      0   24095
                                             58 BANK0     20    20      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (2) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _TimeTextToSecond                                    24    20      4    1734
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _ReadGPSDateTime                                     19    17      2     566
                                              0 BANK0     19    17      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetDay                                              11    10      1    1865
                                             14 BANK0     11    10      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     474
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _AdjustDayLightSaving                                17     6     11   11953
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   35588
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    9342
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    8497
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                14    14      0    9646
                                             12 BANK0     14    14      0
                         _ReadEeprom
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1490
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    8103
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              3 BANK0      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetEventNumber                                      11    11      0    4849
                                              6 BANK0     11    11      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4583
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          10    10      0    9456
                                             65 COMRAM    10    10      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    9456
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0    9456
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (11) _Timer0_10ms                                        13    13      0    9456
                                             52 COMRAM    13    13      0
                       _GetThisCycle
                  _IncreaseByASecond
                            ___almod
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (12) ___lbtoft                                            4     1      3    2839
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___fttol                                            15    11      4     430
                                             27 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (12) ___ftmul                                            15     9      6    3653
                                             12 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftpack                                            8     3      5    2817
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (12) ___almod                                            10     2      8     474
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (12) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (15) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _GetThisCycle                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetEventNumber
     ___wmul
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_WriteChar
     _Lcd_CharCP
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5us
     ___aldiv (ARG)
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___lmul
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS
     _ReadGPS_DATE_TIME
       _AdjustDayLightSaving
         _DecreaseByADay
           _DecreaseByAMonth
             _DecreaseByAYear
               ___lwmod
           ___lwmod
         _IncreaseByADay
           _IncreaseByAMonth
             _IncreaseByAYear
               ___lwmod
           ___lwmod
         ___wmul
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _EUSART1_Initialize
       _GetDay
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       _ReadGPSDateTime
         _EUSART1_Read
       _TimeTextToSecond
         ___lmul
       _ValidateDateTime
   _ReadGPS_DATE_TIME
     _AdjustDayLightSaving
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       ___wmul
     _DecreaseByADay
       _DecreaseByAMonth
         _DecreaseByAYear
           ___lwmod
       ___lwmod
     _EUSART1_Initialize
     _GetDay
       ___awdiv
       ___awmod
         ___awdiv (ARG)
     _IncreaseByADay
       _IncreaseByAMonth
         _IncreaseByAYear
           ___lwmod
       ___lwmod
     _ReadGPSDateTime
       _EUSART1_Read
     _TimeTextToSecond
       ___lmul
     _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _StopGPS
   _SwitchOnGPS
   _TMR0_SetInterruptHandler
   _TestGPSStartCondition
   _VerifyForGPSOnTIme
   _WriteLongInt
     _Lcd_WriteChar
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
     ___aldiv
     ___lmul

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _GetThisCycle
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod
         ___almod
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     3C0      35       25.9%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      74       8       45.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      9B       5       96.9%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4B      5E       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     25D       6        0.0%
DATA                 0      0     61D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Aug 16 11:35:12 2017

            __end_of_LoadStatesFromEeprom 176E                   __end_of_ReadGPSDateTime 2604  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1A46                                        PL4 1A60  
                                      PL6 1A68                                        PL8 1442  
                            ___awdiv@sign 0065                       ___wmul@multiplicand 0062  
                                     PL10 215E                                       PL20 1876  
                                     PL12 1B4E                                       PL30 18DA  
                                     PL22 18A2                                       PL14 176E  
                                     PL40 2172                                       PL32 18F6  
                                     PL24 11B0                                       PL16 1DB2  
                                     PL50 24E8                                       PL42 1B7E  
                                     PL34 1B5E                                       PL26 11C6  
                                     PL18 119C                                       PL60 2186  
                                     PL52 230E                                       PL44 217C  
                                     PL36 11EA                                       PL28 18CA  
                                     PL70 2348                                       PL62 233E  
                                     PL54 2326                                       PL46 18FE  
                                     PL38 11FC                               __CFG_LVP$ON 000000  
                                     PL80 3168                                       PL72 177E  
                                     PL64 190C                                       PL56 2500  
                                     PL48 24D0                                       PL90 1604  
                                     PL82 2356                                       PL74 1B86  
                                     PL66 1922                                       PL58 1FAE  
                                     PL92 1FC4                                       PL84 2516  
                                     PL76 209A                                       PL68 2192  
                                     PL94 1DBC                                       PL86 178C  
                                     PL78 2770                                       PL96 179E  
                                     PL88 2AC8                                       PL98 2368  
                                     l131 2602                                       l125 25E6  
                                     l270 29D6                                       l631 2074  
                                     l641 3058                                       l736 31E2  
                                     l840 318C                                       l649 1C1A  
                                     l676 2EC4                                       l694 2FCE  
                                     _GIE 007F97                              __CFG_CPD$OFF 000000  
                      DecreaseByAMonth@dt 0070                              ___awmod@sign 006D  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                       __end_of_Lcd_Command 230E  
           projMain@NO_OF_DAYS_IN_A_MONTH 0144                                      PL100 219E  
                                    PL110 122E                                      PL102 2528  
                                    PL120 2A2C                                      PL112 26B6  
                                    PL104 120E                                      PL130 1DC8  
                                    PL122 2A36                                      PL114 123C  
                                    PL106 121E                                      PL140 1CB0  
                                    PL132 2782                                      PL124 2B4C  
                                    PL116 124A                                      PL108 1B90  
                                    PL150 1ED0                                      PL142 1EC8  
                                    PL134 3038                                      PL126 1262  
                                    PL118 1258                                      PL160 3002  
                                    PL152 2B56                                      PL144 26C4  
                                    PL136 17AA                                      PL128 244A  
                                    PL154 20B2                                      PL146 20A8  
                                    PL138 126C                                      PL156 1CBA  
                                    PL148 2284                                      PL158 17B4  
                            __CFG_ZCD$OFF 000000                                      l1022 1DF6  
                                    l1023 1DF8                                      l1179 2DC0  
                                    l4013 1BFA                                      l4015 1C04  
                                    l4033 1C9C                                      l4017 1C14  
                                    l4027 1C52                                      l1580 2F52  
                                    l3405 2E3A                                      l4221 2EF4  
                                    l3415 2D9E                                      l4215 2EE2  
                                    l3353 2F48                                      l3345 2F2A  
                                    l3417 2DA4                                      l4217 2EE8  
                                    l4225 2EFC                                      l4411 1724  
                                    l3347 2F32                                      l4219 2EEE  
                                    l4227 2F10                                      l3349 2F36  
                                    l3373 3024                                      l3541 23F8  
                                    l3607 2DD4                                      l3711 2B92  
                                    l4415 174C                                      l3535 23DC  
                                    l3519 2386                                      l4441 197E  
                                    l4337 17C6                                      l3713 2B9A  
                                    l3705 2B82                                      l3529 23C0  
                                    l4505 15DC                                      l4513 1602  
                                    l4451 19E4                                      l3731 2BCE  
                                    l3723 2BB8                                      l3715 2B9E  
                                    l3555 1FDC                                      l3547 2436  
                                    l4611 2822                                      l4445 1990  
                                    l4429 1936                                      l4373 1626  
                                    l3581 2086                                      l3573 205A  
                                    l4455 1A12                                      l4447 19CC  
                                    l3727 2BC2                                      l4383 1648  
                                    l3567 203E                                      l3751 2C6C  
                                    l3743 2C54                                      l3911 20D8  
                                    l4615 2836                                      l4607 2814  
                                    l3753 2C74                                      l3497 31F0  
                                    l3921 20F2                                      l4473 1478  
                                    l4721 2C02                                      l4395 168C  
                                    l3579 2080                                      l3755 2C78  
                                    l3763 2C94                                      l3747 2C60  
                                    l3931 210C                                      l4483 14A2  
                                    l4723 2C06                                      l3941 2128  
                                    l4733 2C3C                                      l3767 2CA0  
                                    l3759 2C8A                                      l3855 2556  
                                    l3951 2142                                      l4479 149A  
                                    l4735 2C3E                                      l4583 27A6  
                                    l3961 215C                                      l4729 2C10  
                                    l4763 1B2A                                      l4771 1B3E  
                                    l3699 2B72                                      l3883 25B6  
                                    l3875 25A0                                      l3891 25F2  
                                    l3867 2586                                      l4499 1592  
                                    l4595 27D6                                      l4691 272A  
                                    l4749 1A76                                      l3885 25DA  
                                    l3869 258A                                      l4597 27E2  
                                    l4589 27BE                                      l4759 1B26  
                                    l4599 27E6                                      l3889 25EA  
                                    l4689 271A                                      l4697 2768  
                                    _LATA 000F83                                      _LATB 000F84  
                                    u3111 2002                                      _LATC 000F85  
                                    u3121 2014                                      u3061 241C  
                                    u3071 242E                                      u2601 3068  
                                    u3081 2440                                      u2701 2D82  
                                    u5007 31FC                                      u2711 2D94  
                                    u3191 2090                                      u4400 197A  
                                    u4320 1874                                      u5017 22CC  
                                    u2721 2DAE                                      u4330 1688  
                                    u5027 22FC                                      u4340 16CE  
                                    u3700 1D2A                                      u2581 302E  
                                    u2661 2E20                                      u4430 1A44  
                                    u2671 2E32                                      u4511 1578  
                                    u2681 2E44                                      u4521 158A  
                                    u4441 1458                                      u4354 1702  
                                    u4530 15A8                     __size_of_WriteLongInt 00A4  
                                    u4355 1700                                      u4451 146A  
                                    u3555 2464                                      u3580 2544  
                                    u4541 15C2                                      u3565 246A  
                                    u4390 176C                                      u4374 172A  
                                    u4375 1728                                      u4551 15D4  
                                    u3575 2478                                      u3921 1C38  
                                    u4561 15E6                                      u4810 1A9E  
                                    u3690 1D28                                      u3835 229E  
                                    u3931 1C4A                                      u3691 1D24  
                                    u4571 15F8                                      u3940 1C68  
                                    u4580 2D0C                                      u4740 2ED8  
                                    u3845 22A4                                      u4494 14E2  
                                    u3855 22B4                                      u3951 1C82  
                                    u4495 14DC                                      u3961 1C94  
                                    u4761 2BEA                                      u3971 1CA6  
                                    u4790 2FB2                                      u4880 1B4C  
                                    u4977 2490                                      u4987 24BE  
                                    u4997 25EC                                      _PLLR 0076D8  
                                    _WPUA 000F10                                      _WPUB 000F18  
                                    _WPUC 000F20                                      _WPUE 000F2D  
                          _IncreaseByADay 2372                          _DecreaseByAMonth 2D6C  
                       ??_Lcd_Delay5500us 0060                             __CFG_FCMEN$ON 000000  
                                    _main 1DD2                              ___ftpack@arg 0001  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 0004  
                         _TMR0_StartTimer 322E                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                    __end_of_Lcd_Delay5us 3228                                      fsr2l 000FD9  
                                    btemp 005F                                      prodh 000FF4  
                                    prodl 000FF3                                      start 0070  
              LoadEventsFromEeprom@Temp16 0078                             __CFG_CSWEN$ON 000000  
                _GPS_SYNC_EVERY_x_SECONDS 00D0                              ___ftmul@cntr 001A  
                            ___param_bank 000000                              ___ftmul@sign 001B  
                         __end_of_ReadGPS 2C42                                _Lcd_CharCP 2454  
                           __CFG_SCANE$ON 000000                              ___fttol@exp1 002A  
                            ___fttol@lval 0026                    AdjustDayLightSaving@dt 0089  
                 __end_of_TMR0_Initialize 310E            ??_TMR0_DefaultInterruptHandler 0001  
          __size_of_OSCILLATOR_Initialize 0016                   ?_LoadSettingsFromEeprom 0001  
           __end_of_OSCILLATOR_Initialize 3192                LoadStatesFromEeprom@j_1399 0076  
                         __end_of_StopGPS 322E                           __end_of___aldiv 2848  
                         __end_of___almod 2AC8                                     ?_main 0001  
                    __end_of_GetThisCycle 3168                           __end_of___awdiv 2BD8  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 2CAA  
                         __end_of___ftmul 26B6                           ___awdiv@divisor 0062  
                         __end_of___fttol 2900                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 2F5C                                     i2l764 003E  
                         ___awdiv@counter 0064                                     _OSCEN 000EDC  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
                                   _TRISA 000F88                                     _TRISB 000F89  
                                   _TRISC 000F8A                              _WriteLongInt 26CC  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 0064                 ?_TMR0_SetInterruptHandler 0060  
                           __CFG_WRT3$OFF 000000                           _IncreaseByAYear 300A  
                          __CFG_EBTR0$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       IncreaseByAYear@dt 0065                          __end_of_TMR0_ISR 312E  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                  __end_of_IncreaseByADay 244A                 __size_of_ValidateDateTime 00A2  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 0005  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0060                                     plusw0 000FEB  
                                   plusw1 000FE3                                     plusw2 000FDB  
                __end_ofi2_IncreaseByADay 2284                                     status 000FD8  
                            __end_ofPL100 21A8                              __end_ofPL110 123C  
                            __end_ofPL102 2532                              __end_ofPL120 2A36  
                            __end_ofPL112 26C4                              __end_ofPL104 121E  
                            __end_ofPL130 1DD2                              __end_ofPL122 2A40  
                            __end_ofPL114 124A                              __end_ofPL106 122E  
                            __end_ofPL140 1CBA                              __end_ofPL132 278C  
                            __end_ofPL124 2B56                              __end_ofPL116 1258  
                            __end_ofPL108 1B9E                              __end_ofPL150 1ED8  
                            __end_ofPL142 1ED0                              __end_ofPL134 3040  
                            __end_ofPL126 126C                              __end_ofPL118 1262  
                            __end_ofPL160 300A                              __end_ofPL152 2B60  
                            __end_ofPL144 26CC                              __end_ofPL136 17B4  
                            __end_ofPL128 2454                              __end_ofPL154 20BC  
                            __end_ofPL146 20B2                              __end_ofPL138 1276  
                            __end_ofPL156 1CC2                              __end_ofPL148 228E  
                            __end_ofPL158 17BC             __size_of_LoadCyclesFromEeprom 011A  
                      _CENTI_SECOND_COUNT 0053                        __size_ofi2___lwmod 003E  
                __size_of_DecreaseByAYear 0032                          __end_of_Lcd_Init 2A2C  
                              _ReadEeprom 31CE                           __initialization 2900  
              __end_of_EUSART1_Initialize 31CE                              __end_of_main 1EC8  
                        ??_DecreaseByADay 0086                          ?_ReadGPSDateTime 0060  
          __end_of_LoadSettingsFromEeprom 1442                  __end_of_TimeTextToSecond 1FAE  
             ?_INTERRUPT_InterruptManager 0001             LoadStatesFromEeprom@AddStates 0078  
                             _Lcd_Command 228E                   AdjustDayLightSaving@End 0096  
                 ReadGPS_DATE_TIME@F11474 00EE                   ReadGPS_DATE_TIME@F11476 00E7  
                                  ??_main 00AE                             ___fttol@sign1 0025  
                           __activetblptr 000003                            _GetEventNumber 1A72  
                   _AUDIO_NORMAL_OFF_TIME 0059                         Timer0_10ms@i_2900 003F  
                       Timer0_10ms@i_2901 0040                         Timer0_10ms@i_2902 0041  
           LoadStatesFromEeprom@AudAddInc 0073                   __end_of_TMR0_StartTimer 3232  
                         ?_IncreaseByADay 007B                          ___awdiv@dividend 0060  
                    _LoadStatesFromEeprom 1610                                    _ANSELA 000F11  
                                  _ANSELB 000F19                                    _ANSELC 000F21  
                        __end_of___ftpack 2B4C                          __end_of___lbtoft 30EC  
                                  _T0CON0 000FD5                                    _T0CON1 000FD6  
                                  _RC1REG 000F99                                    _CYCLES 0100  
                                  _RC1STA 000F9D                                    _ODCONA 000F0F  
                                  _ODCONB 000F17                                    _ODCONC 000F1F  
                                  _RC6PPS 000EFD                                    _EVENTS 0200  
                                  _LIGHTS 00F5                                    i2l1141 0FD2  
                                  i2l1152 10DE                                    i2l1128 0F90  
                                  i2l1165 1186                            __CFG_WDTCCS$SC 000000  
                                  i2l1380 2AE6                                    i2l4111 0FBA  
                                  i2l1392 2B2C                                    i2l4121 0FD4  
                                  i2l4105 0FA6                                    i2l3331 2F70  
                                  i2l4115 0FC0                                    i2l1580 2F90  
                                  i2l3333 2F74                                    i2l4205 1180  
                                  i2l4133 0FFA                                    i2l4151 104E  
                                  i2l4127 0FE8                                    i2l4063 0F1E  
                                  i2l3337 2F86                                    i2l3329 2F68  
                                  i2l3433 2B0C                                    i2l3425 2AEE  
                                  i2l4209 1194                                    i2l4153 1050  
                                  i2l4073 0F32                                    i2l4057 0F1C  
                                  i2l3363 2FEE                                    i2l3451 2B3E  
                                  i2l3435 2B18                                    i2l3427 2AF2  
                                  i2l4139 100C                                    i2l3461 21BC  
                                  i2l3509 2D58                                    i2l3437 2B22  
                                  i2l3429 2B00                                    i2l4173 10D0  
                                  i2l3471 21F6                                    i2l3631 2A80  
                                  i2l3623 2A60                                    i2l4191 1150  
                                  i2l4167 10A2                                    i2l4175 10E0  
                                  i2l3393 2E84                                    i2l3801 28D6  
                                  i2l4089 0F7A                                    i2l3483 2232  
                                  i2l3643 2AB6                                    i2l3635 2AA2  
                                  i2l3627 2A70                                    i2l3619 2A4C  
                                  i2l3651 261E                                    i2l3803 28DA  
                                  i2l4099 0F92                                    i2l3477 2212  
                                  i2l3629 2A7C                                    i2l4189 1148  
                                  i2l3639 2AB0                                    i2l3655 2638  
                                  i2l3807 28EE                                    i2l3489 2270  
                                  i2l3673 2660                                    i2l3683 267C  
                                  i2l3669 265C                                    i2l3773 2860  
                                  i2l3679 2678                                    i2l3791 28B2  
                                  i2l3775 286A                                    i2l3795 28C2  
                                  i2l3799 28CA                                    u331_41 262E  
                                  u329_41 2614                                    u347_41 2858  
                        WriteLongInt@Sign 0078                                    _OSCFRQ 000EDE  
                                  _NVMDAT 000F80                                    _TX1STA 000F9E  
                                  _STATES 02F0                             _GPS_DATE_TIME 00AE  
                           ??_Timer0_10ms 0035                          WriteLongInt@size 0077  
                               ??_ReadGPS 00AE                                    _GetDay 1CC2  
                        _IncreaseByAMonth 2E04                            __CFG_PWRTE$OFF 000000  
                      IncreaseByAMonth@dt 0070                            __CFG_XINST$OFF 000000  
            _SPECIAL_AUDIO_LAST_X_SECONDS 00E6                               ?_Lcd_CharCP 0001  
               AdjustDayLightSaving@Start 0094                                 ??_StopGPS 0060  
                                  ___lmul 2DB8                                 ??___aldiv 0068  
              __end_of_VerifyForGPSOnTIme 2EDE                                 ??___almod 0009  
                                  ___wmul 30A2                                 ??___awdiv 0064  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___ftmul 0013                                 ??___fttol 0020  
                               ??___lwmod 0064                          ?_TMR0_Initialize 0001  
                                  clear_0 295A                                    clear_1 296C  
                                  clear_2 2978                                    clear_3 2984  
                                  clear_4 2990                   __end_of_IncreaseByAYear 3038  
                        ___awdiv@quotient 0066                           ___awmod@divisor 006A  
                         ___awmod@counter 006C                    __end_of_GetEventNumber 1B4E  
                   __end_of_Lcd_WriteChar 2F1E                     ___ftmul@f3_as_product 0017  
                            __pdataCOMRAM 005E                              __mediumconst 0000  
                       __end_ofi2___lwmod 2F9A                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                   __end_of_TMR0_CallBack 3162                     ?_LoadStatesFromEeprom 0001  
TMR0_SetInterruptHandler@InterruptHandler 0060                     __size_of_Lcd_Delay5us 0008  
           __size_of_INTERRUPT_Initialize 0004                        Lcd_Command@command 0062  
                   LoadEventsFromEeprom@i 0074                          DecreaseByADay@dt 007B  
                       _SYSTEM_Initialize 31A6                                __accesstop 0060  
                 __end_of__initialization 2996                __end_ofi2_IncreaseByAMonth 2E98  
                         __CFG_FEXTOSC$HS 000000                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001              LoadSettingsFromEeprom@Temp16 006A  
            LoadSettingsFromEeprom@Temp32 0066                                ___lbtoft@c 000C  
                              ___ftmul@f1 000D                                ___ftmul@f2 0010  
                             ?_ReadEeprom 0060                 i2IncreaseByADay@MonthDays 0029  
                              ___fttol@f1 001C                        i2___lwmod@dividend 0001  
                          __pcstackCOMRAM 0001                              __pidataBANK0 3192  
                            __pidataBANK1 3072                       __end_of_Timer0_10ms 119C  
                     ??_SYSTEM_Initialize 0062                     __size_of_GetThisCycle 0006  
                   _TIME_AT_LAST_GPS_SYNC 00C4                                 ?_TMR0_ISR 0001  
                       ??_DecreaseByAYear 0070                                __end_ofPL2 1A60  
                              __end_ofPL4 1A68                                __end_ofPL6 1A72  
                              __end_ofPL8 144C                  __end_of_DecreaseByAMonth 2DB8  
                         ?_GetEventNumber 0001                      __end_of_EUSART1_Read 31F4  
                   _TestGPSStartCondition 2F9A                              _Lcd_Delay5us 3220  
                         _Lcd_Delay5500us 31F4                     TMR0_ISR@CountCallBack 00DC  
                          Lcd_WriteChar@c 006F                            Lcd_WriteChar@x 006E  
                          Lcd_WriteChar@y 0070                                 ?_Lcd_Init 0001  
            __end_of_AdjustDayLightSaving 1CB0                          ?_TMR0_StartTimer 0001  
               __end_of_SYSTEM_Initialize 31BA                          _ValidateDateTime 20BC  
                     __size_of_Lcd_CharCP 007C             __size_of_LoadEventsFromEeprom 00BA  
                              __pbssBANK0 00AE                                __pbssBANK1 0100  
                              __pbssBANK2 0200                             ??_SwitchOnGPS 0060  
                            _GetThisCycle 3162                                   ?_GetDay 006E  
                       ReadEeprom@Address 0060          __end_of_TMR0_SetInterruptHandler 3220  
                                 ?___lmul 0060                                   ?___wmul 0060  
                              ??_TMR0_ISR 0042                           __CFG_PPS1WAY$ON 000000  
                          ___lmul@product 0068                      Timer0_10ms@ThisCycle 003E  
                               ?___ftpack 0001                                 ?___lbtoft 0009  
                        ?_IncreaseByAYear 0065                                   _CENTURY 00FA  
                                 _FLAGS_0 00E2                                   _FLAGS_1 004E  
             LoadCyclesFromEeprom@Address 006D                                   GetDay@d 0075  
                                 GetDay@m 0076                                   GetDay@t 015C  
                                 GetDay@y 0077                                   _SP1BRGH 000F9C  
                                 _SP1BRGL 000F9B                                   _OSCCON1 000ED8  
                                 _OSCCON3 000EDA                    ??_LoadStatesFromEeprom 0068  
                                 _NVMADRH 000F7F                                   _NVMADRL 000F7E  
                                 _OSCTUNE 000EDD                                ??_Lcd_Init 0063  
                                 _PPSLOCK 000EA0                       __size_of_ReadEeprom 0014  
                ReadGPS_DATE_TIME@TempItr 00AD                       IncreaseByASecond@dt 002A  
                       _IncreaseByASecond 2D10                LoadCyclesFromEeprom@i_1464 0073  
                       ?i2_IncreaseByADay 001C                      ValidateDateTime@Date 0060  
                             _Timer0_10ms 0F0A                                   _ReadGPS 2BD8  
                    ValidateDateTime@Item 0063                      ValidateDateTime@Time 0061  
                         __size_of_GetDay 00F0                        ?_IncreaseByASecond 002A  
                                 __Hparam 0000                        ??i2_IncreaseByADay 0027  
                                 __Lparam 0000                                 _DATE_TIME 00B9  
             AdjustDayLightSaving@Present 0098                                   _StopGPS 3228  
                                 ___aldiv 278C                                   ___almod 2A40  
                     __end_of_SwitchOnGPS 3148                         Lcd_WriteChar@data 0071  
                                 ___awdiv 2B60                           __size_of___lmul 004C  
                                 ___awmod 2C42                           __size_of___wmul 0026  
                                 ___ftmul 2604                                   ___fttol 2848  
                 __end_of_Lcd_Delay5500us 3206                                   ___lwmod 2F1E  
                            __psmallconst 0F00                       ??_IncreaseByASecond 0035  
                                 __pcinit 2900                    ?_TestGPSStartCondition 0001  
                              ??___ftpack 0006                                ??___lbtoft 000C  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 1DD2  
                                 __ptext1 26CC                                   __ptext2 278C  
                                 __ptext3 2EDE                                   __ptext4 2454  
                                 __ptext5 2E98                                   __ptext6 2F9A  
                                 __ptext7 312E                                   __ptext8 3228  
                                 __ptext9 31A6              __end_of_LoadCyclesFromEeprom 1A46  
                      ??_TimeTextToSecond 0070                          ??_IncreaseByADay 0086  
                   _OSCILLATOR_Initialize 317C                  __end_of_IncreaseByAMonth 2E4E  
                        ___awmod@dividend 0068                          ___aldiv@dividend 0060  
                      _EUSART1_Initialize 31BA                  ??_PIN_MANAGER_Initialize 0060  
              __size_of_SYSTEM_Initialize 0014        LoadStatesFromEeprom@AddAudioNormal 006B  
                   _AUDIO_SPECIAL_ON_TIME 0058                      end_of_initialization 2996  
       _NORMAL_AUDIO_STATE_ON_OFF_COUNTER 0051                 __end_of_IncreaseByASecond 2D6C  
                     ?_EUSART1_Initialize 0001                           _DAY_LIGHT_START 00D8  
                       _SECONDS_TO_ADJUST 004C                              ??_Lcd_CharCP 0060  
                        ___aldiv@quotient 006A                                   postdec1 000FE5  
                                 postdec2 000FDD          _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME 00CC  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0012  
                    _AdjustDayLightSaving 1B9E                      ??_EUSART1_Initialize 0060  
                               _TIME_ZONE 00E0                     __CFG_WDTCPS$WDTCPS_31 000000  
                _TMR0_SetInterruptHandler 3216                             _BLINK_ON_TIME 005D  
                __size_of_ReadGPSDateTime 00D2                        _VerifyForGPSOnTIme 2E98  
                               _TRISAbits 000F88             LoadSettingsFromEeprom@Address 006C  
                   LoadCyclesFromEeprom@i 0071                     LoadCyclesFromEeprom@j 006F  
                               i2___lwmod 2F5C                        __end_of_Lcd_CharCP 24D0  
                     ?_VerifyForGPSOnTIme 0001                         DecreaseByAYear@dt 0065  
                       _LoadAllFromEeprom 3206                         _ReadGPS_DATE_TIME 144C  
                            _EUSART1_Read 31E2                               _SwitchOnGPS 312E  
                         _DecreaseByAYear 3040                        ?_LoadAllFromEeprom 0001  
                      ?_ReadGPS_DATE_TIME 0001                   DecreaseByADay@MonthDays 0087  
                          __end_of_GetDay 1DB2                              ??_ReadEeprom 0062  
                             ___ftmul@exp 0016                          ??_GetEventNumber 0066  
                   ?_AdjustDayLightSaving 0089                          IncreaseByADay@dt 007B  
            __end_of_INTERRUPT_Initialize 3236                  __end_of_ValidateDateTime 215E  
                     ??_LoadAllFromEeprom 007C                        i2_IncreaseByAMonth 2E4E  
                          __end_of___lmul 2E04                       ??_ReadGPS_DATE_TIME 009A  
                        ?_Lcd_Delay5500us 0001                            __end_of___wmul 30C8  
                    ??_VerifyForGPSOnTIme 0060                             __pidataCOMRAM 3238  
                       __size_of_TMR0_ISR 0020                         ?_DecreaseByAMonth 0070  
                  ?_OSCILLATOR_Initialize 0001                       ?i2_IncreaseByAMonth 0011  
                      ??_DecreaseByAMonth 007B                               __end_ofPL10 2172  
                             __end_ofPL20 18A2                               __end_ofPL12 1B5E  
                             __end_ofPL30 18F6                               __end_ofPL22 18CA  
                             __end_ofPL14 177E                               __end_ofPL40 217C  
                             __end_ofPL32 18FE                               __end_ofPL24 11C6  
                             __end_ofPL16 1DBC                               __end_ofPL50 2500  
                             __end_ofPL42 1B86                               __end_ofPL34 1B7E  
                             __end_ofPL26 11EA                               __end_ofPL18 11B0  
                             __end_ofPL60 2192                               __end_ofPL52 2326  
                             __end_ofPL44 2186                               __end_ofPL36 11FC  
                             __end_ofPL28 18DA                               __end_ofPL70 2356  
                             __end_ofPL62 2348                               __end_ofPL54 233E  
                             __end_ofPL46 190C                               __end_ofPL38 120E  
                             __end_ofPL80 317C                               __end_ofPL72 178C  
                             __end_ofPL64 1922                               __end_ofPL56 2516  
                             __end_ofPL48 24E8                               __end_ofPL90 1610  
                             __end_ofPL82 2368                               __end_ofPL74 1B90  
                             __end_ofPL66 192C                               __end_ofPL58 1FC4  
                             __end_ofPL92 1FCC                               __end_ofPL84 2528  
                             __end_ofPL76 20A8                               __end_ofPL68 219E  
                             __end_ofPL94 1DC8                               __end_ofPL86 179E  
                             __end_ofPL78 2782                               __end_ofPL96 17AA  
                             __end_ofPL88 2ADA                               __end_ofPL98 2372  
                     start_initialization 2900                   __size_of_DecreaseByADay 00CE  
                           _PRESENT_EVENT 005E                  __size_of_TMR0_Initialize 0022  
         __size_of_PIN_MANAGER_Initialize 0066                             _PRESENT_STATE 0056  
                    _BLINK_LAST_X_SECONDS 005B             __end_ofReadGPSDateTime@F11467 0F09  
                      __end_of_ReadEeprom 31E2                                ?i2___lwmod 0001  
               __end_of_LoadAllFromEeprom 3216                         __size_of_Lcd_Init 008C  
              __size_of_IncreaseByASecond 005C                 __end_of_ReadGPS_DATE_TIME 1604  
            _TIME_WHEN_GPS_IS_SWITCHED_ON 00C8                           WriteLongInt@POS 0079  
                    _AUDIO_NORMAL_ON_TIME 005A                                  ??_GetDay 006F  
                         WriteLongInt@Val 0073                    __size_of_Lcd_WriteChar 0040  
                    _LoadCyclesFromEeprom 192C                      ??i2_IncreaseByAMonth 001C  
      _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER 0050                  ??_LoadSettingsFromEeprom 0066  
                    i2IncreaseByAMonth@dt 0011                          __CFG_LPBOREN$OFF 000000  
                                ??___lmul 0068              __end_of_LoadEventsFromEeprom 1876  
                                ??___wmul 0064                    __size_of_TMR0_CallBack 001A  
                             __pdataBANK0 00E7                               __pdataBANK1 0144  
                           _DAY_LIGHT_END 00D4                         __size_of___ftpack 0072  
                       __size_of___lbtoft 0024                               __pbssBIGRAM 02F0  
                           ?_WriteLongInt 0072                      __size_of_Lcd_Command 0080  
                ReadGPSDateTime@StartCode 0066                               __pbssCOMRAM 004C  
                           __pcstackBANK0 0060                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                   __end_of_DecreaseByAYear 3072  
                       ??_ReadGPSDateTime 0062                             WriteLongInt@x 0072  
                           WriteLongInt@y 007A                VerifyForGPSOnTIme@TimeDiff 0060  
                            ?_Timer0_10ms 0001                     ?_LoadCyclesFromEeprom 0001  
                                ?_ReadGPS 0001                     _TMR0_InterruptHandler 00DE  
                __size_of_TMR0_StartTimer 0004         LoadStatesFromEeprom@TempNormalAdd 006F  
                  _PIN_MANAGER_Initialize 2CAA                    ??_AdjustDayLightSaving 0094  
                               __pintcode 0008                   ??_TestGPSStartCondition 0060  
                                ?_StopGPS 0001                                  ?___aldiv 0060  
                                ?___almod 0001                                  ?___awdiv 0060  
                                ?___awmod 0068                                  ?___ftmul 000D  
                                ?___fttol 001C                                  ?___lwmod 0060  
                       _GPS_SYNC_AT_START 00E5                    _NO_OF_TIMES_GPS_FAILED 00E3  
            ??_INTERRUPT_InterruptManager 0042                          ___almod@dividend 0001  
               __size_ofi2_IncreaseByADay 00DC                            ??_WriteLongInt 0079  
                                _BAUD1CON 000F9F                             _Lcd_WriteChar 2EDE  
                             __smallconst 0F00                              Timer0_10ms@i 003B  
             LoadEventsFromEeprom@Address 0076                         ?_IncreaseByAMonth 0070  
                __size_of_IncreaseByAYear 002E                        ??_IncreaseByAMonth 007B  
                           _TMR0_CallBack 3148             __size_of_LoadStatesFromEeprom 015E  
                             ??i2___lwmod 0005                __size_of_LoadAllFromEeprom 0010  
                    _INTERRUPT_Initialize 3232                __size_of_ReadGPS_DATE_TIME 01B8  
               __size_of_TimeTextToSecond 00D6                           ___aldiv@divisor 0064  
                       ??_TMR0_Initialize 0062                          ReadGPSDateTime@i 006E  
                         ___aldiv@counter 0068                            ___wmul@product 0064  
                                _LATAbits 000F83                           GetEventNumber@i 006F  
                                _LATCbits 000F85                                  _PIE0bits 000EC2  
                     __CFG_BORV$VBOR_2P45 000000           __size_of_LoadSettingsFromEeprom 01CC  
     __size_of_INTERRUPT_InterruptManager 0062                                  i2u421_40 106C  
              ??_TMR0_SetInterruptHandler 0062                                  i2u262_41 2E6A  
                                i2u263_41 2E7C                                  i2u415_41 101E  
                                _PIR0bits 000ECA                                  i2u256_41 2FF8  
                                i2u264_41 2E8E                                  i2u416_41 1030  
                                i2u290_41 2268                                  i2u291_41 227A  
                                i2u349_40 2888                                  _PIR3bits 000ECD  
                                i2u349_45 2880                                  i2u295_41 2D3E  
                                i2u296_41 2D50                                  i2u289_41 2256  
                                i2u297_41 2D62                                  i2u489_40 3122  
                     ReadGPSDateTime@Date 0060                       ReadGPSDateTime@Time 0061  
                                _TMR0_ISR 310E                      TimeTextToSecond@Time 006C  
                            Lcd_Init@data 0063                 Timer0_10ms@ThisCycle_2906 003A  
                          ?_Lcd_WriteChar 006E                         ___wmul@multiplier 0060  
                          _DecreaseByADay 1FCC                                  _Lcd_Init 29A0  
                          ?_TMR0_CallBack 0001                         i2_IncreaseByAYear 2FD2  
                       ___lmul@multiplier 0060                                 copy_data0 2914  
                               copy_data1 2934                     ?_INTERRUPT_Initialize 0001  
                        ?_DecreaseByAYear 0065                      _LoadEventsFromEeprom 17BC  
                      ?i2_IncreaseByAYear 0006                    ??_LoadCyclesFromEeprom 0066  
                 _STATE_SECONDS_REMAINING 0054                              ?_SwitchOnGPS 0001  
                   ReadGPS_DATE_TIME@Date 00A5                          __size_of_ReadGPS 006A  
                           _STATE_SECONDS 0055                                  __Hrparam 0000  
                     ??i2_IncreaseByAYear 0011                     ReadGPS_DATE_TIME@Time 009E  
                 __CFG_RSTOSC$EXTOSC_4PLL 000000                       i2IncreaseByAYear@dt 0006  
                                __Lrparam 0000                   ReadGPSDateTime@TempChar 0071  
                      __CFG_BOREN$SBORDIS 000000                   ??_OSCILLATOR_Initialize 0060  
                        __size_of_StopGPS 0006                         ??_TMR0_StartTimer 0060  
                        __size_of___aldiv 00BC                          __size_of___almod 0088  
                       ?_ValidateDateTime 0060                          __size_of___awdiv 0078  
                        __size_of___awmod 0068                          __size_of___ftmul 00B2  
                        __size_of___fttol 00B8               __size_of_EUSART1_Initialize 0014  
                        __size_of___lwmod 003E                                  ___ftpack 2ADA  
                                ___lbtoft 30C8                        ??_ValidateDateTime 0062  
                  __end_of_DecreaseByADay 209A                             ?_Lcd_Delay5us 0001  
                  _LoadSettingsFromEeprom 1276                                _T0CON0bits 000FD5  
               __end_ofi2_IncreaseByAYear 3002                                  __ptext10 30EC  
                                __ptext11 322E                                  __ptext20 2532  
                                __ptext12 3216                                  __ptext21 31E2  
                                __ptext13 2CAA                                  __ptext30 2D6C  
                                __ptext22 1CC2                                  __ptext14 317C  
                                __ptext31 3040                                  __ptext23 2C42  
                                __ptext15 3232                                  __ptext40 31CE  
                                __ptext32 2F1E                                  __ptext24 31BA  
                                __ptext16 2BD8                                  __ptext41 29A0  
                                __ptext33 3206                                  __ptext25 1B9E  
                                __ptext17 144C                                  __ptext50 3236  
                                __ptext42 31F4                                  __ptext34 1610  
                                __ptext26 2372                                  __ptext18 20BC  
                                __ptext51 0F0A                                  __ptext43 228E  
                                __ptext35 2B60                                  __ptext27 2E04  
                                __ptext19 1ED8                                  __ptext60 2FD2  
                                __ptext52 30C8                                  __ptext44 3220  
                                __ptext36 1276                                  __ptext28 300A  
                                __ptext61 2F5C                                  __ptext53 2848  
                                __ptext45 1A72                                  __ptext37 17BC  
                                __ptext29 1FCC                                  __ptext62 3162  
                                __ptext54 2604                                  __ptext46 30A2  
                                __ptext38 2DB8                                  __ptext63 0000  
                                __ptext55 2ADA                                  __ptext39 192C  
                                __ptext56 2A40                                  __ptext48 310E  
                                __ptext57 2D10                                  __ptext49 3148  
                                __ptext58 21A8                                  __ptext59 2E4E  
                   ?_LoadEventsFromEeprom 0001                     LoadStatesFromEeprom@i 007A  
                   LoadStatesFromEeprom@j 0074                           ___almod@divisor 0005  
                         ___almod@counter 0009                 __size_of_DecreaseByAMonth 004C  
                             Lcd_CharCP@c 0062                   __size_of_IncreaseByADay 00D8  
                           __size_of_main 00F6                         ??_IncreaseByAYear 0070  
                           ?_GetThisCycle 0001      __end_of_TMR0_DefaultInterruptHandler 3238  
   __size_of_TMR0_DefaultInterruptHandler 0002              _TMR0_DefaultInterruptHandler 3236  
             ReadGPS_DATE_TIME@IsValidGPS 00AC                      __end_of_WriteLongInt 2770  
                    __CFG_WDTCWS$WDTCWS_7 000000                      __size_of_Timer0_10ms 0292  
                              _RC1STAbits 000F9D                    _AUDIO_SPECIAL_OFF_TIME 0057  
                      ReadGPSDateTime@Pos 0072                                  int$flags 005F  
      __end_of_INTERRUPT_InterruptManager 006A                _INTERRUPT_InterruptManager 0008  
                         ??_Lcd_WriteChar 0070               __size_of_VerifyForGPSOnTIme 0046  
     LoadStatesFromEeprom@AddAudioSpecial 006D                            ??_Lcd_Delay5us 0060  
                        i2_IncreaseByADay 21A8                 Timer0_10ms@OutForThePorts 003C  
             PIN_MANAGER_Initialize@state 0060                           ?_DecreaseByADay 007B  
                      i2IncreaseByADay@dt 001C                           _ReadGPSDateTime 2532  
                              _INTCONbits 000FF2                           ??_TMR0_CallBack 0042  
                             _NVMCON1bits 000F81                                GetDay@Date 006E  
                __size_of_Lcd_Delay5500us 0012                   IncreaseByADay@MonthDays 0088  
                  ??_INTERRUPT_Initialize 0060                                  intlevel2 0000  
                        _TimeTextToSecond 1ED8                     ReadGPSDateTime@F11467 0F01  
                          ??_GetThisCycle 0001                          ___lwmod@dividend 0060  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
                              _NEXT_EVENT 00F9                               _PPSLOCKbits 000EA0  
             __size_ofi2_IncreaseByAMonth 004A                                _NEXT_STATE 00E4  
      LoadStatesFromEeprom@TempSpecialAdd 0071             ?_TMR0_DefaultInterruptHandler 0001  
          __size_of_TestGPSStartCondition 0038                     ReadGPSDateTime@Commas 0070  
           __end_of_TestGPSStartCondition 2FD2                             ??_Lcd_Command 0060  
              _BLINK_STATE_ON_OFF_COUNTER 0052                                _RX1PPSbits 000EB5  
                         ___lwmod@divisor 0062                           _TMR0_Initialize 30EC  
                         ___lwmod@counter 0064                   __size_of_GetEventNumber 00DC  
              __size_ofi2_IncreaseByAYear 0030                              ___aldiv@sign 0069  
                          _BLINK_OFF_TIME 005C                    ??_LoadEventsFromEeprom 006C  
          __end_of_PIN_MANAGER_Initialize 2D10                              ___almod@sign 000A  
                  _SECONDS_TO_ADJUST_PART 004F                    TimeTextToSecond@Second 0080  
               __size_of_IncreaseByAMonth 004A                      __size_of_SwitchOnGPS 001A  
