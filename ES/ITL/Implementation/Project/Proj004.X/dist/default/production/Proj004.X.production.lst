

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Fri Aug 25 13:22:22 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79                           	psect	pa_nodes0,global,class=CODE,delta=1
    80  0000                     
    81                           ; Version 1.42
    82                           ; Generated 13/04/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F26K40 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     tosu	equ	0xFFF
   116                           tosh	equ	0xFFE
   117                           tosl	equ	0xFFD
   118                           pclath	equ	0xFFA
   119                           tblptru	equ	0xFF8
   120                           tblptrh	equ	0xFF7
   121                           tblptrl	equ	0xFF6
   122                           tablat	equ	0xFF5
   123                           prodh	equ	0xFF4
   124                           prodl	equ	0xFF3
   125                           intcon	equ	0xFF2
   126                           plusw0	equ	0xFEB
   127                           wreg	equ	0xFE8
   128                           indf1	equ	0xFE7
   129                           postinc1	equ	0xFE6
   130                           postdec1	equ	0xFE5
   131                           plusw1	equ	0xFE3
   132                           fsr1h	equ	0xFE2
   133                           fsr1l	equ	0xFE1
   134                           indf2	equ	0xFDF
   135                           postinc2	equ	0xFDE
   136                           postdec2	equ	0xFDD
   137                           plusw2	equ	0xFDB
   138                           fsr2h	equ	0xFDA
   139                           fsr2l	equ	0xFD9
   140                           status	equ	0xFD8
   141                           
   142                           	psect	idataCOMRAM
   143  002D7E                     __pidataCOMRAM:
   144                           	opt stack 0
   145                           
   146                           ;initializer for _PRESENT_EVENT
   147  002D7E  FF                 	db	255
   148                           tosu	equ	0xFFF
   149                           tosh	equ	0xFFE
   150                           tosl	equ	0xFFD
   151                           pclath	equ	0xFFA
   152                           tblptru	equ	0xFF8
   153                           tblptrh	equ	0xFF7
   154                           tblptrl	equ	0xFF6
   155                           tablat	equ	0xFF5
   156                           prodh	equ	0xFF4
   157                           prodl	equ	0xFF3
   158                           intcon	equ	0xFF2
   159                           plusw0	equ	0xFEB
   160                           wreg	equ	0xFE8
   161                           indf1	equ	0xFE7
   162                           postinc1	equ	0xFE6
   163                           postdec1	equ	0xFE5
   164                           plusw1	equ	0xFE3
   165                           fsr1h	equ	0xFE2
   166                           fsr1l	equ	0xFE1
   167                           indf2	equ	0xFDF
   168                           postinc2	equ	0xFDE
   169                           postdec2	equ	0xFDD
   170                           plusw2	equ	0xFDB
   171                           fsr2h	equ	0xFDA
   172                           fsr2l	equ	0xFD9
   173                           status	equ	0xFD8
   174                           
   175                           	psect	idataBANK0
   176  002CF2                     __pidataBANK0:
   177                           	opt stack 0
   178                           
   179                           ;initializer for ReadGPS_DATE_TIME@F11476
   180  002CF2  2D                 	db	45
   181  002CF3  2D                 	db	45
   182  002CF4  2D                 	db	45
   183  002CF5  2D                 	db	45
   184  002CF6  2D                 	db	45
   185  002CF7  2D                 	db	45
   186  002CF8  00                 	db	0
   187                           
   188                           ;initializer for ReadGPS_DATE_TIME@F11474
   189  002CF9  2D                 	db	45
   190  002CFA  2D                 	db	45
   191  002CFB  2D                 	db	45
   192  002CFC  2D                 	db	45
   193  002CFD  2D                 	db	45
   194  002CFE  2D                 	db	45
   195  002CFF  00                 	db	0
   196                           
   197                           ;initializer for _LIGHTS
   198  002D00  83                 	db	131
   199  002D01  0F                 	db	15
   200  002D02  84                 	db	132
   201  002D03  0F                 	db	15
   202                           
   203                           ;initializer for _NEXT_EVENT
   204  002D04  FF                 	db	255
   205                           
   206                           ;initializer for _CENTURY
   207  002D05  14                 	db	20
   208                           tosu	equ	0xFFF
   209                           tosh	equ	0xFFE
   210                           tosl	equ	0xFFD
   211                           pclath	equ	0xFFA
   212                           tblptru	equ	0xFF8
   213                           tblptrh	equ	0xFF7
   214                           tblptrl	equ	0xFF6
   215                           tablat	equ	0xFF5
   216                           prodh	equ	0xFF4
   217                           prodl	equ	0xFF3
   218                           intcon	equ	0xFF2
   219                           plusw0	equ	0xFEB
   220                           wreg	equ	0xFE8
   221                           indf1	equ	0xFE7
   222                           postinc1	equ	0xFE6
   223                           postdec1	equ	0xFE5
   224                           plusw1	equ	0xFE3
   225                           fsr1h	equ	0xFE2
   226                           fsr1l	equ	0xFE1
   227                           indf2	equ	0xFDF
   228                           postinc2	equ	0xFDE
   229                           postdec2	equ	0xFDD
   230                           plusw2	equ	0xFDB
   231                           fsr2h	equ	0xFDA
   232                           fsr2l	equ	0xFD9
   233                           status	equ	0xFD8
   234                           
   235                           	psect	idataBANK1
   236  002BD2                     __pidataBANK1:
   237                           	opt stack 0
   238                           
   239                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
   240  002BD2  001F               	dw	31
   241  002BD4  001C               	dw	28
   242  002BD6  001F               	dw	31
   243  002BD8  001E               	dw	30
   244  002BDA  001F               	dw	31
   245  002BDC  001E               	dw	30
   246  002BDE  001F               	dw	31
   247  002BE0  001F               	dw	31
   248  002BE2  001E               	dw	30
   249  002BE4  001F               	dw	31
   250  002BE6  001E               	dw	30
   251  002BE8  001F               	dw	31
   252                           
   253                           ;initializer for GetDay@t
   254  002BEA  0000               	dw	0
   255  002BEC  0003               	dw	3
   256  002BEE  0002               	dw	2
   257  002BF0  0005               	dw	5
   258  002BF2  0000               	dw	0
   259  002BF4  0003               	dw	3
   260  002BF6  0005               	dw	5
   261  002BF8  0001               	dw	1
   262  002BFA  0004               	dw	4
   263  002BFC  0006               	dw	6
   264  002BFE  0002               	dw	2
   265  002C00  0004               	dw	4
   266                           tosu	equ	0xFFF
   267                           tosh	equ	0xFFE
   268                           tosl	equ	0xFFD
   269                           pclath	equ	0xFFA
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           prodh	equ	0xFF4
   275                           prodl	equ	0xFF3
   276                           intcon	equ	0xFF2
   277                           plusw0	equ	0xFEB
   278                           wreg	equ	0xFE8
   279                           indf1	equ	0xFE7
   280                           postinc1	equ	0xFE6
   281                           postdec1	equ	0xFE5
   282                           plusw1	equ	0xFE3
   283                           fsr1h	equ	0xFE2
   284                           fsr1l	equ	0xFE1
   285                           indf2	equ	0xFDF
   286                           postinc2	equ	0xFDE
   287                           postdec2	equ	0xFDD
   288                           plusw2	equ	0xFDB
   289                           fsr2h	equ	0xFDA
   290                           fsr2l	equ	0xFD9
   291                           status	equ	0xFD8
   292                           
   293                           	psect	smallconst
   294  000F00                     __psmallconst:
   295                           	opt stack 0
   296  000F00  00                 	db	0
   297  000F01                     ReadGPSDateTime@F11467:
   298                           	opt stack 0
   299  000F01  24                 	db	36
   300  000F02  47                 	db	71
   301  000F03  50                 	db	80
   302  000F04  52                 	db	82
   303  000F05  4D                 	db	77
   304  000F06  43                 	db	67
   305  000F07  2C                 	db	44
   306  000F08  00                 	db	0
   307  000F09                     __end_ofReadGPSDateTime@F11467:
   308                           	opt stack 0
   309  0000                     _OSCTUNE	set	3805
   310  0000                     _OSCFRQ	set	3806
   311  0000                     _OSCEN	set	3804
   312  0000                     _OSCCON3	set	3802
   313  0000                     _OSCCON1	set	3800
   314  0000                     _RC6PPS	set	3837
   315  0000                     _RX1PPSbits	set	3765
   316  0000                     _PPSLOCKbits	set	3744
   317  0000                     _PPSLOCK	set	3744
   318  0000                     _PIR0bits	set	3786
   319  0000                     _PIE0bits	set	3778
   320  0000                     _PIR3bits	set	3789
   321  0000                     _PLLR	set	30424
   322  0000                     _ODCONC	set	3871
   323  0000                     _ODCONB	set	3863
   324  0000                     _ODCONA	set	3855
   325  0000                     _WPUC	set	3872
   326  0000                     _WPUA	set	3856
   327  0000                     _WPUB	set	3864
   328  0000                     _WPUE	set	3885
   329  0000                     _ANSELA	set	3857
   330  0000                     _ANSELB	set	3865
   331  0000                     _ANSELC	set	3873
   332  0000                     _T0CON0bits	set	4053
   333  0000                     _TMR0L	set	4051
   334  0000                     _TMR0H	set	4052
   335  0000                     _T0CON1	set	4054
   336  0000                     _T0CON0	set	4053
   337  0000                     _TRISC	set	3978
   338  0000                     _TRISB	set	3977
   339  0000                     _TRISA	set	3976
   340  0000                     _LATC	set	3973
   341  0000                     _RC1REG	set	3993
   342  0000                     _RC1STAbits	set	3997
   343  0000                     _SP1BRGH	set	3996
   344  0000                     _SP1BRGL	set	3995
   345  0000                     _TX1STA	set	3998
   346  0000                     _RC1STA	set	3997
   347  0000                     _BAUD1CON	set	3999
   348  0000                     _LATCbits	set	3973
   349  0000                     _INTCONbits	set	4082
   350  0000                     _NVMDAT	set	3968
   351  0000                     _NVMADRH	set	3967
   352  0000                     _NVMADRL	set	3966
   353  0000                     _NVMCON1bits	set	3969
   354  0000                     _LATB	set	3972
   355  0000                     _LATA	set	3971
   356  0000                     _GIE	set	32663
   357                           
   358                           ; #config settings
   359  000F09  00                 	db	0	; dummy byte at the end
   360  0000                     tosu	equ	0xFFF
   361                           tosh	equ	0xFFE
   362                           tosl	equ	0xFFD
   363                           pclath	equ	0xFFA
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           prodh	equ	0xFF4
   369                           prodl	equ	0xFF3
   370                           intcon	equ	0xFF2
   371                           plusw0	equ	0xFEB
   372                           wreg	equ	0xFE8
   373                           indf1	equ	0xFE7
   374                           postinc1	equ	0xFE6
   375                           postdec1	equ	0xFE5
   376                           plusw1	equ	0xFE3
   377                           fsr1h	equ	0xFE2
   378                           fsr1l	equ	0xFE1
   379                           indf2	equ	0xFDF
   380                           postinc2	equ	0xFDE
   381                           postdec2	equ	0xFDD
   382                           plusw2	equ	0xFDB
   383                           fsr2h	equ	0xFDA
   384                           fsr2l	equ	0xFD9
   385                           status	equ	0xFD8
   386                           
   387                           	psect	cinit
   388  0024FA                     __pcinit:
   389                           	opt stack 0
   390  0024FA                     start_initialization:
   391                           	opt stack 0
   392  0024FA                     __initialization:
   393                           	opt stack 0
   394                           
   395                           ; Initialize objects allocated to BANK1 (48 bytes)
   396                           ; load TBLPTR registers with __pidataBANK1
   397  0024FA  0ED2               	movlw	low __pidataBANK1
   398  0024FC  6EF6               	movwf	tblptrl,c
   399  0024FE  0E2B               	movlw	high __pidataBANK1
   400  002500  6EF7               	movwf	tblptrh,c
   401  002502  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   402  002504  6EF8               	movwf	tblptru,c
   403  002506  EE01  F044         	lfsr	0,__pdataBANK1
   404  00250A  EE10 F030          	lfsr	1,48
   405  00250E                     copy_data0:
   406  00250E  0009               	tblrd		*+
   407  002510  CFF5 FFEE          	movff	tablat,postinc0
   408  002514  50E5               	movf	postdec1,w,c
   409  002516  50E1               	movf	fsr1l,w,c
   410  002518  E1FA               	bnz	copy_data0
   411                           
   412                           ; Initialize objects allocated to BANK0 (20 bytes)
   413                           ; load TBLPTR registers with __pidataBANK0
   414  00251A  0EF2               	movlw	low __pidataBANK0
   415  00251C  6EF6               	movwf	tblptrl,c
   416  00251E  0E2C               	movlw	high __pidataBANK0
   417  002520  6EF7               	movwf	tblptrh,c
   418  002522  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   419  002524  6EF8               	movwf	tblptru,c
   420  002526  EE00  F0EA         	lfsr	0,__pdataBANK0
   421  00252A  EE10 F014          	lfsr	1,20
   422  00252E                     copy_data1:
   423  00252E  0009               	tblrd		*+
   424  002530  CFF5 FFEE          	movff	tablat,postinc0
   425  002534  50E5               	movf	postdec1,w,c
   426  002536  50E1               	movf	fsr1l,w,c
   427  002538  E1FA               	bnz	copy_data1
   428                           
   429                           ; Initialize objects allocated to COMRAM (1 bytes)
   430                           ; load TBLPTR registers with __pidataCOMRAM
   431  00253A  0E7E               	movlw	low __pidataCOMRAM
   432  00253C  6EF6               	movwf	tblptrl,c
   433  00253E  0E2D               	movlw	high __pidataCOMRAM
   434  002540  6EF7               	movwf	tblptrh,c
   435  002542  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   436  002544  6EF8               	movwf	tblptru,c
   437  002546  0009               	tblrd		*+	;fetch initializer
   438  002548  CFF5 F05E          	movff	tablat,__pdataCOMRAM
   439                           
   440                           ; Clear objects allocated to BIGRAM (960 bytes)
   441  00254C  EE02  F0F0         	lfsr	0,__pbssBIGRAM
   442  002550  EE13 F0C0          	lfsr	1,960
   443  002554                     clear_0:
   444  002554  6AEE               	clrf	postinc0,c
   445  002556  50E5               	movf	postdec1,w,c
   446  002558  50E1               	movf	fsr1l,w,c
   447  00255A  E1FC               	bnz	clear_0
   448  00255C  50E2               	movf	fsr1h,w,c
   449  00255E  E1FA               	bnz	clear_0
   450                           
   451                           ; Clear objects allocated to BANK2 (240 bytes)
   452  002560  EE02  F000         	lfsr	0,__pbssBANK2
   453  002564  0EF0               	movlw	240
   454  002566                     clear_1:
   455  002566  6AEE               	clrf	postinc0,c
   456  002568  06E8               	decf	wreg,f,c
   457  00256A  E1FD               	bnz	clear_1
   458                           
   459                           ; Clear objects allocated to BANK1 (68 bytes)
   460  00256C  EE01  F000         	lfsr	0,__pbssBANK1
   461  002570  0E44               	movlw	68
   462  002572                     clear_2:
   463  002572  6AEE               	clrf	postinc0,c
   464  002574  06E8               	decf	wreg,f,c
   465  002576  E1FD               	bnz	clear_2
   466                           
   467                           ; Clear objects allocated to BANK0 (60 bytes)
   468  002578  EE00  F0AE         	lfsr	0,__pbssBANK0
   469  00257C  0E3C               	movlw	60
   470  00257E                     clear_3:
   471  00257E  6AEE               	clrf	postinc0,c
   472  002580  06E8               	decf	wreg,f,c
   473  002582  E1FD               	bnz	clear_3
   474                           
   475                           ; Clear objects allocated to COMRAM (17 bytes)
   476  002584  EE00  F04D         	lfsr	0,__pbssCOMRAM
   477  002588  0E11               	movlw	17
   478  00258A                     clear_4:
   479  00258A  6AEE               	clrf	postinc0,c
   480  00258C  06E8               	decf	wreg,f,c
   481  00258E  E1FD               	bnz	clear_4
   482  002590                     end_of_initialization:
   483                           	opt stack 0
   484  002590                     __end_of__initialization:
   485                           	opt stack 0
   486  002590  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   487  002592  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   488  002594  0100               	movlb	0
   489  002596  EF1D  F015         	goto	_main	;jump to C main() function
   490                           tosu	equ	0xFFF
   491                           tosh	equ	0xFFE
   492                           tosl	equ	0xFFD
   493                           pclath	equ	0xFFA
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           prodh	equ	0xFF4
   499                           prodl	equ	0xFF3
   500                           intcon	equ	0xFF2
   501                           postinc0	equ	0xFEE
   502                           plusw0	equ	0xFEB
   503                           wreg	equ	0xFE8
   504                           indf1	equ	0xFE7
   505                           postinc1	equ	0xFE6
   506                           postdec1	equ	0xFE5
   507                           plusw1	equ	0xFE3
   508                           fsr1h	equ	0xFE2
   509                           fsr1l	equ	0xFE1
   510                           indf2	equ	0xFDF
   511                           postinc2	equ	0xFDE
   512                           postdec2	equ	0xFDD
   513                           plusw2	equ	0xFDB
   514                           fsr2h	equ	0xFDA
   515                           fsr2l	equ	0xFD9
   516                           status	equ	0xFD8
   517                           
   518                           	psect	bssCOMRAM
   519  00004D                     __pbssCOMRAM:
   520                           	opt stack 0
   521  00004D                     _SECONDS_TO_ADJUST:
   522                           	opt stack 0
   523  00004D                     	ds	2
   524  00004F                     _FLAGS_1:
   525                           	opt stack 0
   526  00004F                     	ds	1
   527  000050                     _SECONDS_TO_ADJUST_PART:
   528                           	opt stack 0
   529  000050                     	ds	1
   530  000051                     _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER:
   531                           	opt stack 0
   532  000051                     	ds	1
   533  000052                     _NORMAL_AUDIO_STATE_ON_OFF_COUNTER:
   534                           	opt stack 0
   535  000052                     	ds	1
   536  000053                     _BLINK_STATE_ON_OFF_COUNTER:
   537                           	opt stack 0
   538  000053                     	ds	1
   539  000054                     _CENTI_SECOND_COUNT:
   540                           	opt stack 0
   541  000054                     	ds	1
   542  000055                     _STATE_SECONDS_REMAINING:
   543                           	opt stack 0
   544  000055                     	ds	1
   545  000056                     _STATE_SECONDS:
   546                           	opt stack 0
   547  000056                     	ds	1
   548  000057                     _PRESENT_STATE:
   549                           	opt stack 0
   550  000057                     	ds	1
   551  000058                     _AUDIO_SPECIAL_ON_TIME:
   552                           	opt stack 0
   553  000058                     	ds	1
   554  000059                     _AUDIO_NORMAL_OFF_TIME:
   555                           	opt stack 0
   556  000059                     	ds	1
   557  00005A                     _AUDIO_NORMAL_ON_TIME:
   558                           	opt stack 0
   559  00005A                     	ds	1
   560  00005B                     _BLINK_LAST_X_SECONDS:
   561                           	opt stack 0
   562  00005B                     	ds	1
   563  00005C                     _BLINK_OFF_TIME:
   564                           	opt stack 0
   565  00005C                     	ds	1
   566  00005D                     _BLINK_ON_TIME:
   567                           	opt stack 0
   568  00005D                     	ds	1
   569                           tosu	equ	0xFFF
   570                           tosh	equ	0xFFE
   571                           tosl	equ	0xFFD
   572                           pclath	equ	0xFFA
   573                           tblptru	equ	0xFF8
   574                           tblptrh	equ	0xFF7
   575                           tblptrl	equ	0xFF6
   576                           tablat	equ	0xFF5
   577                           prodh	equ	0xFF4
   578                           prodl	equ	0xFF3
   579                           intcon	equ	0xFF2
   580                           postinc0	equ	0xFEE
   581                           plusw0	equ	0xFEB
   582                           wreg	equ	0xFE8
   583                           indf1	equ	0xFE7
   584                           postinc1	equ	0xFE6
   585                           postdec1	equ	0xFE5
   586                           plusw1	equ	0xFE3
   587                           fsr1h	equ	0xFE2
   588                           fsr1l	equ	0xFE1
   589                           indf2	equ	0xFDF
   590                           postinc2	equ	0xFDE
   591                           postdec2	equ	0xFDD
   592                           plusw2	equ	0xFDB
   593                           fsr2h	equ	0xFDA
   594                           fsr2l	equ	0xFD9
   595                           status	equ	0xFD8
   596                           
   597                           	psect	dataCOMRAM
   598  00005E                     __pdataCOMRAM:
   599                           	opt stack 0
   600  00005E                     _PRESENT_EVENT:
   601                           	opt stack 0
   602  00005E                     	ds	1
   603                           tosu	equ	0xFFF
   604                           tosh	equ	0xFFE
   605                           tosl	equ	0xFFD
   606                           pclath	equ	0xFFA
   607                           tblptru	equ	0xFF8
   608                           tblptrh	equ	0xFF7
   609                           tblptrl	equ	0xFF6
   610                           tablat	equ	0xFF5
   611                           prodh	equ	0xFF4
   612                           prodl	equ	0xFF3
   613                           intcon	equ	0xFF2
   614                           postinc0	equ	0xFEE
   615                           plusw0	equ	0xFEB
   616                           wreg	equ	0xFE8
   617                           indf1	equ	0xFE7
   618                           postinc1	equ	0xFE6
   619                           postdec1	equ	0xFE5
   620                           plusw1	equ	0xFE3
   621                           fsr1h	equ	0xFE2
   622                           fsr1l	equ	0xFE1
   623                           indf2	equ	0xFDF
   624                           postinc2	equ	0xFDE
   625                           postdec2	equ	0xFDD
   626                           plusw2	equ	0xFDB
   627                           fsr2h	equ	0xFDA
   628                           fsr2l	equ	0xFD9
   629                           status	equ	0xFD8
   630                           
   631                           	psect	bssBANK0
   632  0000AE                     __pbssBANK0:
   633                           	opt stack 0
   634  0000AE                     _GPS_DATE_TIME:
   635                           	opt stack 0
   636  0000AE                     	ds	11
   637  0000B9                     _DATE_TIME:
   638                           	opt stack 0
   639  0000B9                     	ds	11
   640  0000C4                     _TIME_AT_LAST_GPS_SYNC:
   641                           	opt stack 0
   642  0000C4                     	ds	4
   643  0000C8                     _TIME_WHEN_GPS_IS_SWITCHED_ON:
   644                           	opt stack 0
   645  0000C8                     	ds	4
   646  0000CC                     _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME:
   647                           	opt stack 0
   648  0000CC                     	ds	4
   649  0000D0                     _GPS_SYNC_EVERY_x_SECONDS:
   650                           	opt stack 0
   651  0000D0                     	ds	4
   652  0000D4                     _DAY_LIGHT_END:
   653                           	opt stack 0
   654  0000D4                     	ds	4
   655  0000D8                     _DAY_LIGHT_START:
   656                           	opt stack 0
   657  0000D8                     	ds	4
   658  0000DC                     TMR0_ISR@CountCallBack:
   659                           	opt stack 0
   660  0000DC                     	ds	2
   661  0000DE                     _TMR0_InterruptHandler:
   662                           	opt stack 0
   663  0000DE                     	ds	2
   664  0000E0                     _CYCLE_DELAY:
   665                           	opt stack 0
   666  0000E0                     	ds	2
   667  0000E2                     _TIME_ZONE:
   668                           	opt stack 0
   669  0000E2                     	ds	2
   670  0000E4                     _FLAGS_0:
   671                           	opt stack 0
   672  0000E4                     	ds	1
   673  0000E5                     _NO_OF_TIMES_GPS_FAILED:
   674                           	opt stack 0
   675  0000E5                     	ds	1
   676  0000E6                     _NEXT_STATE:
   677                           	opt stack 0
   678  0000E6                     	ds	1
   679  0000E7                     _GPS_SYNC_AT_START:
   680                           	opt stack 0
   681  0000E7                     	ds	1
   682  0000E8                     _SPECIAL_AUDIO_LAST_X_SECONDS:
   683                           	opt stack 0
   684  0000E8                     	ds	1
   685  0000E9                     _AUDIO_SPECIAL_OFF_TIME:
   686                           	opt stack 0
   687  0000E9                     	ds	1
   688                           tosu	equ	0xFFF
   689                           tosh	equ	0xFFE
   690                           tosl	equ	0xFFD
   691                           pclath	equ	0xFFA
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           prodh	equ	0xFF4
   697                           prodl	equ	0xFF3
   698                           intcon	equ	0xFF2
   699                           postinc0	equ	0xFEE
   700                           plusw0	equ	0xFEB
   701                           wreg	equ	0xFE8
   702                           indf1	equ	0xFE7
   703                           postinc1	equ	0xFE6
   704                           postdec1	equ	0xFE5
   705                           plusw1	equ	0xFE3
   706                           fsr1h	equ	0xFE2
   707                           fsr1l	equ	0xFE1
   708                           indf2	equ	0xFDF
   709                           postinc2	equ	0xFDE
   710                           postdec2	equ	0xFDD
   711                           plusw2	equ	0xFDB
   712                           fsr2h	equ	0xFDA
   713                           fsr2l	equ	0xFD9
   714                           status	equ	0xFD8
   715                           
   716                           	psect	dataBANK0
   717  0000EA                     __pdataBANK0:
   718                           	opt stack 0
   719  0000EA                     ReadGPS_DATE_TIME@F11476:
   720                           	opt stack 0
   721  0000EA                     	ds	7
   722  0000F1                     ReadGPS_DATE_TIME@F11474:
   723                           	opt stack 0
   724  0000F1                     	ds	7
   725  0000F8                     _LIGHTS:
   726                           	opt stack 0
   727  0000F8                     	ds	4
   728  0000FC                     _NEXT_EVENT:
   729                           	opt stack 0
   730  0000FC                     	ds	1
   731  0000FD                     _CENTURY:
   732                           	opt stack 0
   733  0000FD                     	ds	1
   734                           tosu	equ	0xFFF
   735                           tosh	equ	0xFFE
   736                           tosl	equ	0xFFD
   737                           pclath	equ	0xFFA
   738                           tblptru	equ	0xFF8
   739                           tblptrh	equ	0xFF7
   740                           tblptrl	equ	0xFF6
   741                           tablat	equ	0xFF5
   742                           prodh	equ	0xFF4
   743                           prodl	equ	0xFF3
   744                           intcon	equ	0xFF2
   745                           postinc0	equ	0xFEE
   746                           plusw0	equ	0xFEB
   747                           wreg	equ	0xFE8
   748                           indf1	equ	0xFE7
   749                           postinc1	equ	0xFE6
   750                           postdec1	equ	0xFE5
   751                           plusw1	equ	0xFE3
   752                           fsr1h	equ	0xFE2
   753                           fsr1l	equ	0xFE1
   754                           indf2	equ	0xFDF
   755                           postinc2	equ	0xFDE
   756                           postdec2	equ	0xFDD
   757                           plusw2	equ	0xFDB
   758                           fsr2h	equ	0xFDA
   759                           fsr2l	equ	0xFD9
   760                           status	equ	0xFD8
   761                           
   762                           	psect	bssBANK1
   763  000100                     __pbssBANK1:
   764                           	opt stack 0
   765  000100                     _CYCLES:
   766                           	opt stack 0
   767  000100                     	ds	68
   768                           tosu	equ	0xFFF
   769                           tosh	equ	0xFFE
   770                           tosl	equ	0xFFD
   771                           pclath	equ	0xFFA
   772                           tblptru	equ	0xFF8
   773                           tblptrh	equ	0xFF7
   774                           tblptrl	equ	0xFF6
   775                           tablat	equ	0xFF5
   776                           prodh	equ	0xFF4
   777                           prodl	equ	0xFF3
   778                           intcon	equ	0xFF2
   779                           postinc0	equ	0xFEE
   780                           plusw0	equ	0xFEB
   781                           wreg	equ	0xFE8
   782                           indf1	equ	0xFE7
   783                           postinc1	equ	0xFE6
   784                           postdec1	equ	0xFE5
   785                           plusw1	equ	0xFE3
   786                           fsr1h	equ	0xFE2
   787                           fsr1l	equ	0xFE1
   788                           indf2	equ	0xFDF
   789                           postinc2	equ	0xFDE
   790                           postdec2	equ	0xFDD
   791                           plusw2	equ	0xFDB
   792                           fsr2h	equ	0xFDA
   793                           fsr2l	equ	0xFD9
   794                           status	equ	0xFD8
   795                           
   796                           	psect	dataBANK1
   797  000144                     __pdataBANK1:
   798                           	opt stack 0
   799  000144                     projMain@NO_OF_DAYS_IN_A_MONTH:
   800                           	opt stack 0
   801  000144                     	ds	24
   802  00015C                     GetDay@t:
   803                           	opt stack 0
   804  00015C                     	ds	24
   805                           tosu	equ	0xFFF
   806                           tosh	equ	0xFFE
   807                           tosl	equ	0xFFD
   808                           pclath	equ	0xFFA
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           prodh	equ	0xFF4
   814                           prodl	equ	0xFF3
   815                           intcon	equ	0xFF2
   816                           postinc0	equ	0xFEE
   817                           plusw0	equ	0xFEB
   818                           wreg	equ	0xFE8
   819                           indf1	equ	0xFE7
   820                           postinc1	equ	0xFE6
   821                           postdec1	equ	0xFE5
   822                           plusw1	equ	0xFE3
   823                           fsr1h	equ	0xFE2
   824                           fsr1l	equ	0xFE1
   825                           indf2	equ	0xFDF
   826                           postinc2	equ	0xFDE
   827                           postdec2	equ	0xFDD
   828                           plusw2	equ	0xFDB
   829                           fsr2h	equ	0xFDA
   830                           fsr2l	equ	0xFD9
   831                           status	equ	0xFD8
   832                           
   833                           	psect	bssBANK2
   834  000200                     __pbssBANK2:
   835                           	opt stack 0
   836  000200                     _EVENTS:
   837                           	opt stack 0
   838  000200                     	ds	240
   839                           tosu	equ	0xFFF
   840                           tosh	equ	0xFFE
   841                           tosl	equ	0xFFD
   842                           pclath	equ	0xFFA
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           prodh	equ	0xFF4
   848                           prodl	equ	0xFF3
   849                           intcon	equ	0xFF2
   850                           postinc0	equ	0xFEE
   851                           plusw0	equ	0xFEB
   852                           wreg	equ	0xFE8
   853                           indf1	equ	0xFE7
   854                           postinc1	equ	0xFE6
   855                           postdec1	equ	0xFE5
   856                           plusw1	equ	0xFE3
   857                           fsr1h	equ	0xFE2
   858                           fsr1l	equ	0xFE1
   859                           indf2	equ	0xFDF
   860                           postinc2	equ	0xFDE
   861                           postdec2	equ	0xFDD
   862                           plusw2	equ	0xFDB
   863                           fsr2h	equ	0xFDA
   864                           fsr2l	equ	0xFD9
   865                           status	equ	0xFD8
   866                           
   867                           	psect	bssBIGRAM
   868  0002F0                     __pbssBIGRAM:
   869                           	opt stack 0
   870  0002F0                     _STATES:
   871                           	opt stack 0
   872  0002F0                     	ds	960
   873                           tosu	equ	0xFFF
   874                           tosh	equ	0xFFE
   875                           tosl	equ	0xFFD
   876                           pclath	equ	0xFFA
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           prodh	equ	0xFF4
   882                           prodl	equ	0xFF3
   883                           intcon	equ	0xFF2
   884                           postinc0	equ	0xFEE
   885                           plusw0	equ	0xFEB
   886                           wreg	equ	0xFE8
   887                           indf1	equ	0xFE7
   888                           postinc1	equ	0xFE6
   889                           postdec1	equ	0xFE5
   890                           plusw1	equ	0xFE3
   891                           fsr1h	equ	0xFE2
   892                           fsr1l	equ	0xFE1
   893                           indf2	equ	0xFDF
   894                           postinc2	equ	0xFDE
   895                           postdec2	equ	0xFDD
   896                           plusw2	equ	0xFDB
   897                           fsr2h	equ	0xFDA
   898                           fsr2l	equ	0xFD9
   899                           status	equ	0xFD8
   900                           
   901                           	psect	cstackBANK0
   902  000060                     __pcstackBANK0:
   903                           	opt stack 0
   904  000060                     ??_TestGPSStartCondition:
   905  000060                     ?___wmul:
   906                           	opt stack 0
   907  000060                     ?___awdiv:
   908                           	opt stack 0
   909  000060                     ?___lwmod:
   910                           	opt stack 0
   911  000060                     ?___lmul:
   912                           	opt stack 0
   913  000060                     ReadGPSDateTime@Date:
   914                           	opt stack 0
   915  000060                     ValidateDateTime@Date:
   916                           	opt stack 0
   917  000060                     PIN_MANAGER_Initialize@state:
   918                           	opt stack 0
   919  000060                     ReadEeprom@Address:
   920                           	opt stack 0
   921  000060                     TMR0_SetInterruptHandler@InterruptHandler:
   922                           	opt stack 0
   923  000060                     ___wmul@multiplier:
   924                           	opt stack 0
   925  000060                     ___awdiv@dividend:
   926                           	opt stack 0
   927  000060                     ___lwmod@dividend:
   928                           	opt stack 0
   929  000060                     VerifyForGPSOnTIme@TimeDiff:
   930                           	opt stack 0
   931  000060                     ___lmul@multiplier:
   932                           	opt stack 0
   933                           
   934                           ; 4 bytes @ 0x0
   935  000060                     	ds	1
   936  000061                     ReadGPSDateTime@Time:
   937                           	opt stack 0
   938  000061                     ValidateDateTime@Time:
   939                           	opt stack 0
   940                           
   941                           ; 1 bytes @ 0x1
   942  000061                     	ds	1
   943  000062                     ??_ReadGPSDateTime:
   944  000062                     ??_ValidateDateTime:
   945  000062                     ___wmul@multiplicand:
   946                           	opt stack 0
   947  000062                     ___awdiv@divisor:
   948                           	opt stack 0
   949  000062                     ___lwmod@divisor:
   950                           	opt stack 0
   951                           
   952                           ; 2 bytes @ 0x2
   953  000062                     	ds	1
   954  000063                     ValidateDateTime@Item:
   955                           	opt stack 0
   956                           
   957                           ; 1 bytes @ 0x3
   958  000063                     	ds	1
   959  000064                     ___awdiv@counter:
   960                           	opt stack 0
   961  000064                     ___lwmod@counter:
   962                           	opt stack 0
   963  000064                     ___wmul@product:
   964                           	opt stack 0
   965  000064                     ___lmul@multiplicand:
   966                           	opt stack 0
   967                           
   968                           ; 4 bytes @ 0x4
   969  000064                     	ds	1
   970  000065                     ?_IncreaseByAYear:
   971                           	opt stack 0
   972  000065                     ?_DecreaseByAYear:
   973                           	opt stack 0
   974  000065                     ___awdiv@sign:
   975                           	opt stack 0
   976  000065                     IncreaseByAYear@dt:
   977                           	opt stack 0
   978  000065                     DecreaseByAYear@dt:
   979                           	opt stack 0
   980                           
   981                           ; 11 bytes @ 0x5
   982  000065                     	ds	1
   983  000066                     ??_LoadCyclesFromEeprom:
   984  000066                     ??_GetEventNumber:
   985  000066                     ___awdiv@quotient:
   986                           	opt stack 0
   987  000066                     LoadSettingsFromEeprom@Temp32:
   988                           	opt stack 0
   989  000066                     ReadGPSDateTime@StartCode:
   990                           	opt stack 0
   991                           
   992                           ; 8 bytes @ 0x6
   993  000066                     	ds	2
   994  000068                     ??_LoadStatesFromEeprom:
   995  000068                     ?___awmod:
   996                           	opt stack 0
   997  000068                     ___awmod@dividend:
   998                           	opt stack 0
   999  000068                     ___lmul@product:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x8
  1003  000068                     	ds	2
  1004  00006A                     LoadSettingsFromEeprom@Temp16:
  1005                           	opt stack 0
  1006  00006A                     ___awmod@divisor:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0xA
  1010  00006A                     	ds	1
  1011  00006B                     LoadStatesFromEeprom@AddAudioNormal:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0xB
  1015  00006B                     	ds	1
  1016  00006C                     ??_LoadEventsFromEeprom:
  1017  00006C                     ?_TimeTextToSecond:
  1018                           	opt stack 0
  1019  00006C                     TimeTextToSecond@Time:
  1020                           	opt stack 0
  1021  00006C                     ___awmod@counter:
  1022                           	opt stack 0
  1023  00006C                     LoadSettingsFromEeprom@Address:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0xC
  1027  00006C                     	ds	1
  1028  00006D                     ___awmod@sign:
  1029                           	opt stack 0
  1030  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
  1031                           	opt stack 0
  1032  00006D                     LoadCyclesFromEeprom@Address:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0xD
  1036  00006D                     	ds	1
  1037  00006E                     GetDay@Date:
  1038                           	opt stack 0
  1039  00006E                     ReadGPSDateTime@i:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0xE
  1043  00006E                     	ds	1
  1044  00006F                     ??_GetDay:
  1045  00006F                     LoadStatesFromEeprom@TempNormalAdd:
  1046                           	opt stack 0
  1047  00006F                     LoadCyclesFromEeprom@j:
  1048                           	opt stack 0
  1049  00006F                     GetEventNumber@i:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0xF
  1053  00006F                     	ds	1
  1054  000070                     ??_TimeTextToSecond:
  1055  000070                     ?_IncreaseByAMonth:
  1056                           	opt stack 0
  1057  000070                     ?_DecreaseByAMonth:
  1058                           	opt stack 0
  1059  000070                     ReadGPSDateTime@Commas:
  1060                           	opt stack 0
  1061  000070                     IncreaseByAMonth@dt:
  1062                           	opt stack 0
  1063  000070                     DecreaseByAMonth@dt:
  1064                           	opt stack 0
  1065                           
  1066                           ; 11 bytes @ 0x10
  1067  000070                     	ds	1
  1068  000071                     ReadGPSDateTime@TempChar:
  1069                           	opt stack 0
  1070  000071                     LoadStatesFromEeprom@TempSpecialAdd:
  1071                           	opt stack 0
  1072  000071                     LoadCyclesFromEeprom@i:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x11
  1076  000071                     	ds	1
  1077  000072                     ReadGPSDateTime@Pos:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x12
  1081  000072                     	ds	1
  1082  000073                     LoadStatesFromEeprom@AudAddInc:
  1083                           	opt stack 0
  1084  000073                     LoadCyclesFromEeprom@i_1464:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x13
  1088  000073                     	ds	1
  1089  000074                     LoadEventsFromEeprom@i:
  1090                           	opt stack 0
  1091  000074                     LoadStatesFromEeprom@j:
  1092                           	opt stack 0
  1093                           
  1094                           ; 2 bytes @ 0x14
  1095  000074                     	ds	1
  1096  000075                     GetDay@d:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x15
  1100  000075                     	ds	1
  1101  000076                     GetDay@m:
  1102                           	opt stack 0
  1103  000076                     LoadEventsFromEeprom@Address:
  1104                           	opt stack 0
  1105  000076                     LoadStatesFromEeprom@j_1399:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x16
  1109  000076                     	ds	1
  1110  000077                     GetDay@y:
  1111                           	opt stack 0
  1112                           
  1113                           ; 2 bytes @ 0x17
  1114  000077                     	ds	1
  1115  000078                     LoadEventsFromEeprom@Temp16:
  1116                           	opt stack 0
  1117  000078                     LoadStatesFromEeprom@AddStates:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x18
  1121  000078                     	ds	2
  1122  00007A                     LoadStatesFromEeprom@i:
  1123                           	opt stack 0
  1124                           
  1125                           ; 2 bytes @ 0x1A
  1126  00007A                     	ds	1
  1127  00007B                     ?_IncreaseByADay:
  1128                           	opt stack 0
  1129  00007B                     ?_DecreaseByADay:
  1130                           	opt stack 0
  1131  00007B                     IncreaseByADay@dt:
  1132                           	opt stack 0
  1133  00007B                     DecreaseByADay@dt:
  1134                           	opt stack 0
  1135                           
  1136                           ; 11 bytes @ 0x1B
  1137  00007B                     	ds	1
  1138  00007C                     
  1139                           ; 1 bytes @ 0x1C
  1140  00007C                     	ds	4
  1141  000080                     TimeTextToSecond@Second:
  1142                           	opt stack 0
  1143                           
  1144                           ; 4 bytes @ 0x20
  1145  000080                     	ds	6
  1146  000086                     ??_IncreaseByADay:
  1147  000086                     ??_DecreaseByADay:
  1148                           
  1149                           ; 1 bytes @ 0x26
  1150  000086                     	ds	1
  1151  000087                     DecreaseByADay@MonthDays:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x27
  1155  000087                     	ds	1
  1156  000088                     IncreaseByADay@MonthDays:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x28
  1160  000088                     	ds	1
  1161  000089                     ?_AdjustDayLightSaving:
  1162                           	opt stack 0
  1163  000089                     AdjustDayLightSaving@dt:
  1164                           	opt stack 0
  1165                           
  1166                           ; 11 bytes @ 0x29
  1167  000089                     	ds	11
  1168  000094                     AdjustDayLightSaving@Start:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x34
  1172  000094                     	ds	2
  1173  000096                     AdjustDayLightSaving@End:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x36
  1177  000096                     	ds	2
  1178  000098                     AdjustDayLightSaving@Present:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x38
  1182  000098                     	ds	2
  1183  00009A                     ??_ReadGPS_DATE_TIME:
  1184                           
  1185                           ; 1 bytes @ 0x3A
  1186  00009A                     	ds	4
  1187  00009E                     ReadGPS_DATE_TIME@Time:
  1188                           	opt stack 0
  1189                           
  1190                           ; 7 bytes @ 0x3E
  1191  00009E                     	ds	7
  1192  0000A5                     ReadGPS_DATE_TIME@Date:
  1193                           	opt stack 0
  1194                           
  1195                           ; 7 bytes @ 0x45
  1196  0000A5                     	ds	7
  1197  0000AC                     ReadGPS_DATE_TIME@IsValidGPS:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x4C
  1201  0000AC                     	ds	1
  1202  0000AD                     ReadGPS_DATE_TIME@TempItr:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0x4D
  1206  0000AD                     	ds	1
  1207  0000AE                     tosu	equ	0xFFF
  1208                           tosh	equ	0xFFE
  1209                           tosl	equ	0xFFD
  1210                           pclath	equ	0xFFA
  1211                           tblptru	equ	0xFF8
  1212                           tblptrh	equ	0xFF7
  1213                           tblptrl	equ	0xFF6
  1214                           tablat	equ	0xFF5
  1215                           prodh	equ	0xFF4
  1216                           prodl	equ	0xFF3
  1217                           intcon	equ	0xFF2
  1218                           postinc0	equ	0xFEE
  1219                           plusw0	equ	0xFEB
  1220                           wreg	equ	0xFE8
  1221                           indf1	equ	0xFE7
  1222                           postinc1	equ	0xFE6
  1223                           postdec1	equ	0xFE5
  1224                           plusw1	equ	0xFE3
  1225                           fsr1h	equ	0xFE2
  1226                           fsr1l	equ	0xFE1
  1227                           indf2	equ	0xFDF
  1228                           postinc2	equ	0xFDE
  1229                           postdec2	equ	0xFDD
  1230                           plusw2	equ	0xFDB
  1231                           fsr2h	equ	0xFDA
  1232                           fsr2l	equ	0xFD9
  1233                           status	equ	0xFD8
  1234                           
  1235                           ; 1 bytes @ 0x4E
  1236                           
  1237                           	psect	cstackCOMRAM
  1238  000001                     __pcstackCOMRAM:
  1239                           	opt stack 0
  1240  000001                     ?i2___lwmod:
  1241                           	opt stack 0
  1242  000001                     ?___ftpack:
  1243                           	opt stack 0
  1244  000001                     ?___almod:
  1245                           	opt stack 0
  1246  000001                     i2___lwmod@dividend:
  1247                           	opt stack 0
  1248  000001                     ___ftpack@arg:
  1249                           	opt stack 0
  1250  000001                     ___almod@dividend:
  1251                           	opt stack 0
  1252                           
  1253                           ; 4 bytes @ 0x0
  1254  000001                     	ds	2
  1255  000003                     i2___lwmod@divisor:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x2
  1259  000003                     	ds	1
  1260  000004                     ___ftpack@exp:
  1261                           	opt stack 0
  1262                           
  1263                           ; 1 bytes @ 0x3
  1264  000004                     	ds	1
  1265  000005                     ___ftpack@sign:
  1266                           	opt stack 0
  1267  000005                     i2___lwmod@counter:
  1268                           	opt stack 0
  1269  000005                     ___almod@divisor:
  1270                           	opt stack 0
  1271                           
  1272                           ; 4 bytes @ 0x4
  1273  000005                     	ds	1
  1274  000006                     ??___ftpack:
  1275  000006                     ?i2_IncreaseByAYear:
  1276                           	opt stack 0
  1277  000006                     i2IncreaseByAYear@dt:
  1278                           	opt stack 0
  1279                           
  1280                           ; 11 bytes @ 0x5
  1281  000006                     	ds	3
  1282  000009                     ?___lbtoft:
  1283                           	opt stack 0
  1284  000009                     ___almod@counter:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x8
  1288  000009                     	ds	1
  1289  00000A                     ___almod@sign:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x9
  1293  00000A                     	ds	2
  1294  00000C                     ___lbtoft@c:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0xB
  1298  00000C                     	ds	1
  1299  00000D                     ?___ftmul:
  1300                           	opt stack 0
  1301  00000D                     ___ftmul@f1:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0xC
  1305  00000D                     	ds	3
  1306  000010                     ___ftmul@f2:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0xF
  1310  000010                     	ds	1
  1311  000011                     ?i2_IncreaseByAMonth:
  1312                           	opt stack 0
  1313  000011                     i2IncreaseByAMonth@dt:
  1314                           	opt stack 0
  1315                           
  1316                           ; 11 bytes @ 0x10
  1317  000011                     	ds	2
  1318  000013                     ??___ftmul:
  1319                           
  1320                           ; 1 bytes @ 0x12
  1321  000013                     	ds	3
  1322  000016                     ___ftmul@exp:
  1323                           	opt stack 0
  1324                           
  1325                           ; 1 bytes @ 0x15
  1326  000016                     	ds	1
  1327  000017                     ___ftmul@f3_as_product:
  1328                           	opt stack 0
  1329                           
  1330                           ; 3 bytes @ 0x16
  1331  000017                     	ds	3
  1332  00001A                     ___ftmul@cntr:
  1333                           	opt stack 0
  1334                           
  1335                           ; 1 bytes @ 0x19
  1336  00001A                     	ds	1
  1337  00001B                     ___ftmul@sign:
  1338                           	opt stack 0
  1339                           
  1340                           ; 1 bytes @ 0x1A
  1341  00001B                     	ds	1
  1342  00001C                     ?___fttol:
  1343                           	opt stack 0
  1344  00001C                     ?i2_IncreaseByADay:
  1345                           	opt stack 0
  1346  00001C                     ___fttol@f1:
  1347                           	opt stack 0
  1348  00001C                     i2IncreaseByADay@dt:
  1349                           	opt stack 0
  1350                           
  1351                           ; 11 bytes @ 0x1B
  1352  00001C                     	ds	4
  1353  000020                     ??___fttol:
  1354                           
  1355                           ; 1 bytes @ 0x1F
  1356  000020                     	ds	5
  1357  000025                     ___fttol@sign1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 1 bytes @ 0x24
  1361  000025                     	ds	1
  1362  000026                     ___fttol@lval:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x25
  1366  000026                     	ds	1
  1367  000027                     ??i2_IncreaseByADay:
  1368                           
  1369                           ; 1 bytes @ 0x26
  1370  000027                     	ds	2
  1371  000029                     i2IncreaseByADay@MonthDays:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x28
  1375  000029                     	ds	1
  1376  00002A                     ?_IncreaseByASecond:
  1377                           	opt stack 0
  1378  00002A                     ___fttol@exp1:
  1379                           	opt stack 0
  1380  00002A                     IncreaseByASecond@dt:
  1381                           	opt stack 0
  1382                           
  1383                           ; 11 bytes @ 0x29
  1384  00002A                     	ds	11
  1385  000035                     ??_Timer0_10ms:
  1386  000035                     
  1387                           ; 1 bytes @ 0x34
  1388  000035                     	ds	5
  1389  00003A                     Timer0_10ms@ThisCycle_2898:
  1390                           	opt stack 0
  1391                           
  1392                           ; 1 bytes @ 0x39
  1393  00003A                     	ds	1
  1394  00003B                     Timer0_10ms@i:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0x3A
  1398  00003B                     	ds	1
  1399  00003C                     Timer0_10ms@ThisCycle:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x3B
  1403  00003C                     	ds	1
  1404  00003D                     Timer0_10ms@i_2891:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x3C
  1408  00003D                     	ds	1
  1409  00003E                     Timer0_10ms@i_2894:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x3D
  1413  00003E                     	ds	1
  1414  00003F                     Timer0_10ms@OutForThePorts:
  1415                           	opt stack 0
  1416                           
  1417                           ; 2 bytes @ 0x3E
  1418  00003F                     	ds	2
  1419  000041                     Timer0_10ms@i_2892:
  1420                           	opt stack 0
  1421                           
  1422                           ; 1 bytes @ 0x40
  1423  000041                     	ds	1
  1424  000042                     Timer0_10ms@i_2893:
  1425                           	opt stack 0
  1426                           
  1427                           ; 1 bytes @ 0x41
  1428  000042                     	ds	1
  1429  000043                     ??_INTERRUPT_InterruptManager:
  1430                           
  1431                           ; 1 bytes @ 0x42
  1432  000043                     	ds	10
  1433                           tosu	equ	0xFFF
  1434                           tosh	equ	0xFFE
  1435                           tosl	equ	0xFFD
  1436                           pclath	equ	0xFFA
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           prodh	equ	0xFF4
  1442                           prodl	equ	0xFF3
  1443                           intcon	equ	0xFF2
  1444                           postinc0	equ	0xFEE
  1445                           plusw0	equ	0xFEB
  1446                           wreg	equ	0xFE8
  1447                           indf1	equ	0xFE7
  1448                           postinc1	equ	0xFE6
  1449                           postdec1	equ	0xFE5
  1450                           plusw1	equ	0xFE3
  1451                           fsr1h	equ	0xFE2
  1452                           fsr1l	equ	0xFE1
  1453                           indf2	equ	0xFDF
  1454                           postinc2	equ	0xFDE
  1455                           postdec2	equ	0xFDD
  1456                           plusw2	equ	0xFDB
  1457                           fsr2h	equ	0xFDA
  1458                           fsr2l	equ	0xFD9
  1459                           status	equ	0xFD8
  1460                           
  1461 ;;
  1462 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1463 ;;
  1464 ;; *************** function _main *****************
  1465 ;; Defined at:
  1466 ;;		line 53 in file "main.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;		None
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;		None
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 3F/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1484 ;;Total ram usage:        0 bytes
  1485 ;; Hardware stack levels required when called:   16
  1486 ;; This function calls:
  1487 ;;		_GetEventNumber
  1488 ;;		_LoadAllFromEeprom
  1489 ;;		_ReadGPS
  1490 ;;		_SYSTEM_Initialize
  1491 ;;		_StopGPS
  1492 ;;		_SwitchOnGPS
  1493 ;;		_TMR0_SetInterruptHandler
  1494 ;;		_TestGPSStartCondition
  1495 ;;		_VerifyForGPSOnTIme
  1496 ;; This function is called by:
  1497 ;;		Startup code after reset
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           	psect	text0
  1502  002A3A                     __ptext0:
  1503                           	opt stack 0
  1504  002A3A                     _main:
  1505                           	opt stack 15
  1506                           
  1507                           ;main.c: 56: SYSTEM_Initialize();
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;incstack = 0
  1511  002A3A  EC83  F016         	call	_SYSTEM_Initialize	;wreg free
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 87: (INTCONbits.GIE = 1);
  1515  002A3E  8EF2               	bsf	intcon,7,c	;volatile
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 88: (INTCONbits.PEIE = 1);
  1519  002A40  8CF2               	bsf	intcon,6,c	;volatile
  1520                           
  1521                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  1522  002A42  0E0A               	movlw	low _Timer0_10ms
  1523  002A44  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  1524  002A46  0E0F               	movlw	high _Timer0_10ms
  1525  002A48  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  1526  002A4A  ECB2  F016         	call	_TMR0_SetInterruptHandler	;wreg free
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 94: LoadAllFromEeprom();
  1530  002A4E  ECAA  F016         	call	_LoadAllFromEeprom	;wreg free
  1531                           
  1532                           ; BSR set to: 0
  1533                           ;main.c: 106: if (GPS_SYNC_AT_START == 1)
  1534  002A52  05E7               	decf	_GPS_SYNC_AT_START& (0+255),w,b
  1535  002A54  E101               	bnz	l1014
  1536                           
  1537                           ; BSR set to: 0
  1538                           ;main.c: 107: FLAGS_0.bits.b0 = SET;
  1539  002A56  81E4               	bsf	_FLAGS_0& (0+255),0,b
  1540  002A58                     l1014:
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;main.c: 108: LATCbits.LC0 = OFF;
  1544  002A58  9085               	bcf	3973,0,c	;volatile
  1545  002A5A                     l1015:
  1546                           
  1547                           ; BSR set to: 0
  1548                           ;main.c: 112: {
  1549                           ;main.c: 114: if (FLAGS_0.bits.b0) SwitchOnGPS();
  1550  002A5A  B1E4               	btfsc	_FLAGS_0& (0+255),0,b
  1551                           
  1552                           ; BSR set to: 0
  1553  002A5C  EC47  F016         	call	_SwitchOnGPS	;wreg free
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 115: if (FLAGS_0.bits.b1) VerifyForGPSOnTIme();
  1557  002A60  B3E4               	btfsc	_FLAGS_0& (0+255),1,b
  1558                           
  1559                           ; BSR set to: 0
  1560  002A62  ECF9  F014         	call	_VerifyForGPSOnTIme	;wreg free
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 116: if (FLAGS_0.bits.b2) ReadGPS();
  1564  002A66  B5E4               	btfsc	_FLAGS_0& (0+255),2,b
  1565                           
  1566                           ; BSR set to: 0
  1567  002A68  EC99  F013         	call	_ReadGPS	;wreg free
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 117: if (FLAGS_0.bits.b3) StopGPS();
  1571  002A6C  B7E4               	btfsc	_FLAGS_0& (0+255),3,b
  1572                           
  1573                           ; BSR set to: 0
  1574  002A6E  ECB7  F016         	call	_StopGPS	;wreg free
  1575                           
  1576                           ; BSR set to: 0
  1577                           ;main.c: 118: TestGPSStartCondition();
  1578  002A72  EC7D  F015         	call	_TestGPSStartCondition	;wreg free
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;main.c: 119: NEXT_EVENT = GetEventNumber();
  1582  002A76  EC58  F00D         	call	_GetEventNumber	;wreg free
  1583  002A7A  6FFC               	movwf	_NEXT_EVENT& (0+255),b
  1584  002A7C  D7EE               	goto	l1015
  1585  002A7E                     __end_of_main:
  1586                           	opt stack 0
  1587                           tosu	equ	0xFFF
  1588                           tosh	equ	0xFFE
  1589                           tosl	equ	0xFFD
  1590                           pclath	equ	0xFFA
  1591                           tblptru	equ	0xFF8
  1592                           tblptrh	equ	0xFF7
  1593                           tblptrl	equ	0xFF6
  1594                           tablat	equ	0xFF5
  1595                           prodh	equ	0xFF4
  1596                           prodl	equ	0xFF3
  1597                           intcon	equ	0xFF2
  1598                           postinc0	equ	0xFEE
  1599                           plusw0	equ	0xFEB
  1600                           wreg	equ	0xFE8
  1601                           indf1	equ	0xFE7
  1602                           postinc1	equ	0xFE6
  1603                           postdec1	equ	0xFE5
  1604                           plusw1	equ	0xFE3
  1605                           fsr1h	equ	0xFE2
  1606                           fsr1l	equ	0xFE1
  1607                           indf2	equ	0xFDF
  1608                           postinc2	equ	0xFDE
  1609                           postdec2	equ	0xFDD
  1610                           plusw2	equ	0xFDB
  1611                           fsr2h	equ	0xFDA
  1612                           fsr2l	equ	0xFD9
  1613                           status	equ	0xFD8
  1614                           
  1615 ;; *************** function _VerifyForGPSOnTIme *****************
  1616 ;; Defined at:
  1617 ;;		line 164 in file "libs/funcs.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;		None
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  TimeDiff        4    0[BANK0 ] long 
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2, status,0
  1626 ;; Tracked objects:
  1627 ;;		On entry : 3F/0
  1628 ;;		On exit  : 3F/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1632 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1634 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1635 ;;Total ram usage:        4 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    9
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text1
  1646  0029F2                     __ptext1:
  1647                           	opt stack 0
  1648  0029F2                     _VerifyForGPSOnTIme:
  1649                           	opt stack 21
  1650                           
  1651                           ; BSR set to: 0
  1652                           ;funcs.c: 165: INT32 TimeDiff = DATE_TIME.SECOND - TIME_WHEN_GPS_IS_SWITCHED_ON;
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;incstack = 0
  1656  0029F2  51C8               	movf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),w,b
  1657  0029F4  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  1658  0029F6  6F60               	movwf	VerifyForGPSOnTIme@TimeDiff& (0+255),b
  1659  0029F8  51C9               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),w,b
  1660  0029FA  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  1661  0029FC  6F61               	movwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),b
  1662  0029FE  51CA               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),w,b
  1663  002A00  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  1664  002A02  6F62               	movwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),b
  1665  002A04  51CB               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),w,b
  1666  002A06  59BC               	subwfb	(_DATE_TIME+3)& (0+255),w,b
  1667  002A08  6F63               	movwf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),b
  1668                           
  1669                           ;funcs.c: 166: if (TimeDiff<0)
  1670  002A0A  AF63               	btfss	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  1671  002A0C  D008               	goto	l676
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;funcs.c: 167: TimeDiff += 86400;
  1675  002A0E  0E80               	movlw	128
  1676  002A10  2760               	addwf	VerifyForGPSOnTIme@TimeDiff& (0+255),f,b
  1677  002A12  0E51               	movlw	81
  1678  002A14  2361               	addwfc	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),f,b
  1679  002A16  0E01               	movlw	1
  1680  002A18  2362               	addwfc	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),f,b
  1681  002A1A  0E00               	movlw	0
  1682  002A1C  2363               	addwfc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),f,b
  1683  002A1E                     l676:
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;funcs.c: 168: if (TimeDiff >= (20*60)) {
  1687  002A1E  BF63               	btfsc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  1688  002A20  0012               	return	
  1689  002A22  5163               	movf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),w,b
  1690  002A24  1162               	iorwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),w,b
  1691  002A26  E106               	bnz	u4440
  1692  002A28  0EB0               	movlw	176
  1693  002A2A  5D60               	subwf	VerifyForGPSOnTIme@TimeDiff& (0+255),w,b
  1694  002A2C  0E04               	movlw	4
  1695  002A2E  5961               	subwfb	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),w,b
  1696  002A30  A0D8               	btfss	status,0,c
  1697  002A32  0012               	return	
  1698  002A34                     u4440:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;funcs.c: 169: FLAGS_0.bits.b2 = SET;
  1702  002A34  85E4               	bsf	_FLAGS_0& (0+255),2,b
  1703                           
  1704                           ;funcs.c: 170: FLAGS_0.bits.b1 = RESET;
  1705  002A36  93E4               	bcf	_FLAGS_0& (0+255),1,b
  1706                           
  1707                           ; BSR set to: 0
  1708  002A38  0012               	return		;funcret
  1709  002A3A                     __end_of_VerifyForGPSOnTIme:
  1710                           	opt stack 0
  1711                           tosu	equ	0xFFF
  1712                           tosh	equ	0xFFE
  1713                           tosl	equ	0xFFD
  1714                           pclath	equ	0xFFA
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           prodh	equ	0xFF4
  1720                           prodl	equ	0xFF3
  1721                           intcon	equ	0xFF2
  1722                           postinc0	equ	0xFEE
  1723                           plusw0	equ	0xFEB
  1724                           wreg	equ	0xFE8
  1725                           indf1	equ	0xFE7
  1726                           postinc1	equ	0xFE6
  1727                           postdec1	equ	0xFE5
  1728                           plusw1	equ	0xFE3
  1729                           fsr1h	equ	0xFE2
  1730                           fsr1l	equ	0xFE1
  1731                           indf2	equ	0xFDF
  1732                           postinc2	equ	0xFDE
  1733                           postdec2	equ	0xFDD
  1734                           plusw2	equ	0xFDB
  1735                           fsr2h	equ	0xFDA
  1736                           fsr2l	equ	0xFD9
  1737                           status	equ	0xFD8
  1738                           
  1739 ;; *************** function _TestGPSStartCondition *****************
  1740 ;; Defined at:
  1741 ;;		line 204 in file "libs/funcs.c"
  1742 ;; Parameters:    Size  Location     Type
  1743 ;;		None
  1744 ;; Auto vars:     Size  Location     Type
  1745 ;;		None
  1746 ;; Return value:  Size  Location     Type
  1747 ;;                  1    wreg      void 
  1748 ;; Registers used:
  1749 ;;		wreg, status,2, status,0
  1750 ;; Tracked objects:
  1751 ;;		On entry : 3F/0
  1752 ;;		On exit  : 3F/0
  1753 ;;		Unchanged: 0/0
  1754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1757 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1758 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1759 ;;Total ram usage:        1 bytes
  1760 ;; Hardware stack levels used:    1
  1761 ;; Hardware stack levels required when called:    9
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           	psect	text2
  1770  002AFA                     __ptext2:
  1771                           	opt stack 0
  1772  002AFA                     _TestGPSStartCondition:
  1773                           	opt stack 21
  1774                           
  1775                           ; BSR set to: 0
  1776                           ;funcs.c: 205: if ((DATE_TIME.SECOND == GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME)
  1777                           ;funcs.c: 206: || (TIME_AT_LAST_GPS_SYNC >= GPS_SYNC_EVERY_x_SECONDS))
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;incstack = 0
  1781  002AFA  51CC               	movf	_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME& (0+255),w,b
  1782  002AFC  19B9               	xorwf	_DATE_TIME& (0+255),w,b
  1783  002AFE  E109               	bnz	u4490
  1784  002B00  51CD               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),w,b
  1785  002B02  19BA               	xorwf	(_DATE_TIME+1)& (0+255),w,b
  1786  002B04  E106               	bnz	u4490
  1787  002B06  51CE               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),w,b
  1788  002B08  19BB               	xorwf	(_DATE_TIME+2)& (0+255),w,b
  1789  002B0A  E103               	bnz	u4490
  1790  002B0C  51CF               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),w,b
  1791  002B0E  19BC               	xorwf	(_DATE_TIME+3)& (0+255),w,b
  1792  002B10  E00E               	bz	l694
  1793  002B12                     u4490:
  1794                           
  1795                           ; BSR set to: 0
  1796  002B12  51D0               	movf	_GPS_SYNC_EVERY_x_SECONDS& (0+255),w,b
  1797  002B14  5DC4               	subwf	_TIME_AT_LAST_GPS_SYNC& (0+255),w,b
  1798  002B16  51D1               	movf	(_GPS_SYNC_EVERY_x_SECONDS+1)& (0+255),w,b
  1799  002B18  59C5               	subwfb	(_TIME_AT_LAST_GPS_SYNC+1)& (0+255),w,b
  1800  002B1A  51D2               	movf	(_GPS_SYNC_EVERY_x_SECONDS+2)& (0+255),w,b
  1801  002B1C  59C6               	subwfb	(_TIME_AT_LAST_GPS_SYNC+2)& (0+255),w,b
  1802  002B1E  51C7               	movf	(_TIME_AT_LAST_GPS_SYNC+3)& (0+255),w,b
  1803  002B20  0A80               	xorlw	128
  1804  002B22  6F60               	movwf	??_TestGPSStartCondition& (0+255),b
  1805  002B24  51D3               	movf	(_GPS_SYNC_EVERY_x_SECONDS+3)& (0+255),w,b
  1806  002B26  0A80               	xorlw	128
  1807  002B28  5960               	subwfb	??_TestGPSStartCondition& (0+255),w,b
  1808  002B2A  A0D8               	btfss	status,0,c
  1809  002B2C  0012               	return	
  1810  002B2E                     l694:
  1811                           
  1812                           ; BSR set to: 0
  1813                           ;funcs.c: 207: FLAGS_0.bits.b0 = SET;
  1814  002B2E  81E4               	bsf	_FLAGS_0& (0+255),0,b
  1815                           
  1816                           ; BSR set to: 0
  1817  002B30  0012               	return		;funcret
  1818  002B32                     __end_of_TestGPSStartCondition:
  1819                           	opt stack 0
  1820                           tosu	equ	0xFFF
  1821                           tosh	equ	0xFFE
  1822                           tosl	equ	0xFFD
  1823                           pclath	equ	0xFFA
  1824                           tblptru	equ	0xFF8
  1825                           tblptrh	equ	0xFF7
  1826                           tblptrl	equ	0xFF6
  1827                           tablat	equ	0xFF5
  1828                           prodh	equ	0xFF4
  1829                           prodl	equ	0xFF3
  1830                           intcon	equ	0xFF2
  1831                           postinc0	equ	0xFEE
  1832                           plusw0	equ	0xFEB
  1833                           wreg	equ	0xFE8
  1834                           indf1	equ	0xFE7
  1835                           postinc1	equ	0xFE6
  1836                           postdec1	equ	0xFE5
  1837                           plusw1	equ	0xFE3
  1838                           fsr1h	equ	0xFE2
  1839                           fsr1l	equ	0xFE1
  1840                           indf2	equ	0xFDF
  1841                           postinc2	equ	0xFDE
  1842                           postdec2	equ	0xFDD
  1843                           plusw2	equ	0xFDB
  1844                           fsr2h	equ	0xFDA
  1845                           fsr2l	equ	0xFD9
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _SwitchOnGPS *****************
  1849 ;; Defined at:
  1850 ;;		line 156 in file "libs/funcs.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;		None
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		None
  1859 ;; Tracked objects:
  1860 ;;		On entry : 3F/0
  1861 ;;		On exit  : 3F/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1868 ;;Total ram usage:        0 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    9
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text3
  1879  002C8E                     __ptext3:
  1880                           	opt stack 0
  1881  002C8E                     _SwitchOnGPS:
  1882                           	opt stack 21
  1883                           
  1884                           ; BSR set to: 0
  1885                           ;funcs.c: 157: LATCbits.LC1 = ON;
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;incstack = 0
  1889  002C8E  8285               	bsf	3973,1,c	;volatile
  1890                           
  1891                           ;funcs.c: 158: NO_OF_TIMES_GPS_FAILED = 0;
  1892  002C90  6BE5               	clrf	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  1893                           
  1894                           ;funcs.c: 159: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND;
  1895  002C92  C0B9  F0C8         	movff	_DATE_TIME,_TIME_WHEN_GPS_IS_SWITCHED_ON
  1896  002C96  C0BA  F0C9         	movff	_DATE_TIME+1,_TIME_WHEN_GPS_IS_SWITCHED_ON+1
  1897  002C9A  C0BB  F0CA         	movff	_DATE_TIME+2,_TIME_WHEN_GPS_IS_SWITCHED_ON+2
  1898  002C9E  C0BC  F0CB         	movff	_DATE_TIME+3,_TIME_WHEN_GPS_IS_SWITCHED_ON+3
  1899                           
  1900                           ;funcs.c: 160: FLAGS_0.bits.b1 = SET;
  1901  002CA2  83E4               	bsf	_FLAGS_0& (0+255),1,b
  1902                           
  1903                           ;funcs.c: 161: FLAGS_0.bits.b0 = RESET;
  1904  002CA4  91E4               	bcf	_FLAGS_0& (0+255),0,b
  1905                           
  1906                           ; BSR set to: 0
  1907  002CA6  0012               	return		;funcret
  1908  002CA8                     __end_of_SwitchOnGPS:
  1909                           	opt stack 0
  1910                           tosu	equ	0xFFF
  1911                           tosh	equ	0xFFE
  1912                           tosl	equ	0xFFD
  1913                           pclath	equ	0xFFA
  1914                           tblptru	equ	0xFF8
  1915                           tblptrh	equ	0xFF7
  1916                           tblptrl	equ	0xFF6
  1917                           tablat	equ	0xFF5
  1918                           prodh	equ	0xFF4
  1919                           prodl	equ	0xFF3
  1920                           intcon	equ	0xFF2
  1921                           postinc0	equ	0xFEE
  1922                           plusw0	equ	0xFEB
  1923                           wreg	equ	0xFE8
  1924                           indf1	equ	0xFE7
  1925                           postinc1	equ	0xFE6
  1926                           postdec1	equ	0xFE5
  1927                           plusw1	equ	0xFE3
  1928                           fsr1h	equ	0xFE2
  1929                           fsr1l	equ	0xFE1
  1930                           indf2	equ	0xFDF
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           plusw2	equ	0xFDB
  1934                           fsr2h	equ	0xFDA
  1935                           fsr2l	equ	0xFD9
  1936                           status	equ	0xFD8
  1937                           
  1938 ;; *************** function _StopGPS *****************
  1939 ;; Defined at:
  1940 ;;		line 199 in file "libs/funcs.c"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		None
  1949 ;; Tracked objects:
  1950 ;;		On entry : 3F/0
  1951 ;;		On exit  : 3F/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1958 ;;Total ram usage:        0 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    9
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_main
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           	psect	text4
  1969  002D6E                     __ptext4:
  1970                           	opt stack 0
  1971  002D6E                     _StopGPS:
  1972                           	opt stack 21
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;funcs.c: 200: LATCbits.LC1 = OFF;
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;incstack = 0
  1979  002D6E  9285               	bcf	3973,1,c	;volatile
  1980                           
  1981                           ;funcs.c: 201: FLAGS_0.bits.b3 = RESET;
  1982  002D70  97E4               	bcf	_FLAGS_0& (0+255),3,b
  1983                           
  1984                           ; BSR set to: 0
  1985  002D72  0012               	return		;funcret
  1986  002D74                     __end_of_StopGPS:
  1987                           	opt stack 0
  1988                           tosu	equ	0xFFF
  1989                           tosh	equ	0xFFE
  1990                           tosl	equ	0xFFD
  1991                           pclath	equ	0xFFA
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           postinc0	equ	0xFEE
  2000                           plusw0	equ	0xFEB
  2001                           wreg	equ	0xFE8
  2002                           indf1	equ	0xFE7
  2003                           postinc1	equ	0xFE6
  2004                           postdec1	equ	0xFE5
  2005                           plusw1	equ	0xFE3
  2006                           fsr1h	equ	0xFE2
  2007                           fsr1l	equ	0xFE1
  2008                           indf2	equ	0xFDF
  2009                           postinc2	equ	0xFDE
  2010                           postdec2	equ	0xFDD
  2011                           plusw2	equ	0xFDB
  2012                           fsr2h	equ	0xFDA
  2013                           fsr2l	equ	0xFD9
  2014                           status	equ	0xFD8
  2015                           
  2016 ;; *************** function _SYSTEM_Initialize *****************
  2017 ;; Defined at:
  2018 ;;		line 107 in file "mcc_generated_files/mcc.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;		None
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  1    wreg      void 
  2025 ;; Registers used:
  2026 ;;		wreg, status,2, status,0, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 3F/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2036 ;;Total ram usage:        0 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:   11
  2039 ;; This function calls:
  2040 ;;		_EUSART1_Initialize
  2041 ;;		_INTERRUPT_Initialize
  2042 ;;		_OSCILLATOR_Initialize
  2043 ;;		_PIN_MANAGER_Initialize
  2044 ;;		_TMR0_Initialize
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text5
  2051  002D06                     __ptext5:
  2052                           	opt stack 0
  2053  002D06                     _SYSTEM_Initialize:
  2054                           	opt stack 19
  2055                           
  2056                           ;mcc.c: 110: INTERRUPT_Initialize();
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;incstack = 0
  2060  002D06  ECBC  F016         	call	_INTERRUPT_Initialize	;wreg free
  2061                           
  2062                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  2063  002D0A  EC02  F014         	call	_PIN_MANAGER_Initialize	;wreg free
  2064                           
  2065                           ;mcc.c: 112: OSCILLATOR_Initialize();
  2066  002D0E  EC6E  F016         	call	_OSCILLATOR_Initialize	;wreg free
  2067                           
  2068                           ; BSR set to: 14
  2069                           ;mcc.c: 113: TMR0_Initialize();
  2070  002D12  EC26  F016         	call	_TMR0_Initialize	;wreg free
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;mcc.c: 114: EUSART1_Initialize();
  2074  002D16  EF8D  F016         	goto	_EUSART1_Initialize	;wreg free
  2075  002D1A                     __end_of_SYSTEM_Initialize:
  2076                           	opt stack 0
  2077                           tosu	equ	0xFFF
  2078                           tosh	equ	0xFFE
  2079                           tosl	equ	0xFFD
  2080                           pclath	equ	0xFFA
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           intcon	equ	0xFF2
  2088                           postinc0	equ	0xFEE
  2089                           plusw0	equ	0xFEB
  2090                           wreg	equ	0xFE8
  2091                           indf1	equ	0xFE7
  2092                           postinc1	equ	0xFE6
  2093                           postdec1	equ	0xFE5
  2094                           plusw1	equ	0xFE3
  2095                           fsr1h	equ	0xFE2
  2096                           fsr1l	equ	0xFE1
  2097                           indf2	equ	0xFDF
  2098                           postinc2	equ	0xFDE
  2099                           postdec2	equ	0xFDD
  2100                           plusw2	equ	0xFDB
  2101                           fsr2h	equ	0xFDA
  2102                           fsr2l	equ	0xFD9
  2103                           status	equ	0xFD8
  2104                           
  2105 ;; *************** function _TMR0_Initialize *****************
  2106 ;; Defined at:
  2107 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;		None
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;                  1    wreg      void 
  2114 ;; Registers used:
  2115 ;;		wreg, status,2, status,0, cstack
  2116 ;; Tracked objects:
  2117 ;;		On entry : 3F/E
  2118 ;;		On exit  : 3F/0
  2119 ;;		Unchanged: 0/0
  2120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2125 ;;Total ram usage:        0 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:   10
  2128 ;; This function calls:
  2129 ;;		_TMR0_SetInterruptHandler
  2130 ;;		_TMR0_StartTimer
  2131 ;; This function is called by:
  2132 ;;		_SYSTEM_Initialize
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text6
  2137  002C4C                     __ptext6:
  2138                           	opt stack 0
  2139  002C4C                     _TMR0_Initialize:
  2140                           	opt stack 19
  2141                           
  2142                           ; BSR set to: 14
  2143                           ;tmr0.c: 65: T0CON0 = 0x00;
  2144                           
  2145                           ; BSR set to: 0
  2146                           ;incstack = 0
  2147  002C4C  6AD5               	clrf	4053,c	;volatile
  2148                           
  2149                           ; BSR set to: 14
  2150                           ;tmr0.c: 68: T0CON1 = 0x53;
  2151  002C4E  0E53               	movlw	83
  2152  002C50  6ED6               	movwf	4054,c	;volatile
  2153                           
  2154                           ;tmr0.c: 71: TMR0H = 0x7C;
  2155  002C52  0E7C               	movlw	124
  2156  002C54  6ED4               	movwf	4052,c	;volatile
  2157                           
  2158                           ; BSR set to: 14
  2159                           ;tmr0.c: 74: TMR0L = 0x00;
  2160  002C56  6AD3               	clrf	4051,c	;volatile
  2161                           
  2162                           ; BSR set to: 14
  2163                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  2164  002C58  9BCA               	bcf	202,5,b	;volatile
  2165                           
  2166                           ; BSR set to: 14
  2167                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  2168  002C5A  8BC2               	bsf	194,5,b	;volatile
  2169                           
  2170                           ; BSR set to: 14
  2171                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2172  002C5C  0E7C               	movlw	low _TMR0_DefaultInterruptHandler
  2173  002C5E  0100               	movlb	0	; () banked
  2174  002C60  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  2175  002C62  0E2D               	movlw	high _TMR0_DefaultInterruptHandler
  2176  002C64  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2177  002C66  ECB2  F016         	call	_TMR0_SetInterruptHandler	;wreg free
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;tmr0.c: 86: TMR0_StartTimer();
  2181  002C6A  EFBA  F016         	goto	_TMR0_StartTimer	;wreg free
  2182  002C6E                     __end_of_TMR0_Initialize:
  2183                           	opt stack 0
  2184                           tosu	equ	0xFFF
  2185                           tosh	equ	0xFFE
  2186                           tosl	equ	0xFFD
  2187                           pclath	equ	0xFFA
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           prodh	equ	0xFF4
  2193                           prodl	equ	0xFF3
  2194                           intcon	equ	0xFF2
  2195                           postinc0	equ	0xFEE
  2196                           plusw0	equ	0xFEB
  2197                           wreg	equ	0xFE8
  2198                           indf1	equ	0xFE7
  2199                           postinc1	equ	0xFE6
  2200                           postdec1	equ	0xFE5
  2201                           plusw1	equ	0xFE3
  2202                           fsr1h	equ	0xFE2
  2203                           fsr1l	equ	0xFE1
  2204                           indf2	equ	0xFDF
  2205                           postinc2	equ	0xFDE
  2206                           postdec2	equ	0xFDD
  2207                           plusw2	equ	0xFDB
  2208                           fsr2h	equ	0xFDA
  2209                           fsr2l	equ	0xFD9
  2210                           status	equ	0xFD8
  2211                           
  2212 ;; *************** function _TMR0_StartTimer *****************
  2213 ;; Defined at:
  2214 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;		None
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;		None
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  1    wreg      void 
  2221 ;; Registers used:
  2222 ;;		None
  2223 ;; Tracked objects:
  2224 ;;		On entry : 3F/0
  2225 ;;		On exit  : 3F/0
  2226 ;;		Unchanged: 3F/0
  2227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2232 ;;Total ram usage:        0 bytes
  2233 ;; Hardware stack levels used:    1
  2234 ;; Hardware stack levels required when called:    9
  2235 ;; This function calls:
  2236 ;;		Nothing
  2237 ;; This function is called by:
  2238 ;;		_TMR0_Initialize
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242                           	psect	text7
  2243  002D74                     __ptext7:
  2244                           	opt stack 0
  2245  002D74                     _TMR0_StartTimer:
  2246                           	opt stack 19
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  2250                           
  2251                           ; BSR set to: 0
  2252                           ;incstack = 0
  2253  002D74  8ED5               	bsf	4053,7,c	;volatile
  2254                           
  2255                           ; BSR set to: 0
  2256  002D76  0012               	return		;funcret
  2257  002D78                     __end_of_TMR0_StartTimer:
  2258                           	opt stack 0
  2259                           tosu	equ	0xFFF
  2260                           tosh	equ	0xFFE
  2261                           tosl	equ	0xFFD
  2262                           pclath	equ	0xFFA
  2263                           tblptru	equ	0xFF8
  2264                           tblptrh	equ	0xFF7
  2265                           tblptrl	equ	0xFF6
  2266                           tablat	equ	0xFF5
  2267                           prodh	equ	0xFF4
  2268                           prodl	equ	0xFF3
  2269                           intcon	equ	0xFF2
  2270                           postinc0	equ	0xFEE
  2271                           plusw0	equ	0xFEB
  2272                           wreg	equ	0xFE8
  2273                           indf1	equ	0xFE7
  2274                           postinc1	equ	0xFE6
  2275                           postdec1	equ	0xFE5
  2276                           plusw1	equ	0xFE3
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           postinc2	equ	0xFDE
  2281                           postdec2	equ	0xFDD
  2282                           plusw2	equ	0xFDB
  2283                           fsr2h	equ	0xFDA
  2284                           fsr2l	equ	0xFD9
  2285                           status	equ	0xFD8
  2286                           
  2287 ;; *************** function _TMR0_SetInterruptHandler *****************
  2288 ;; Defined at:
  2289 ;;		line 152 in file "mcc_generated_files/tmr0.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  2292 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;		None
  2295 ;; Return value:  Size  Location     Type
  2296 ;;                  1    wreg      void 
  2297 ;; Registers used:
  2298 ;;		wreg, status,2, status,0
  2299 ;; Tracked objects:
  2300 ;;		On entry : 3F/0
  2301 ;;		On exit  : 3F/0
  2302 ;;		Unchanged: 3F/0
  2303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2304 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2308 ;;Total ram usage:        2 bytes
  2309 ;; Hardware stack levels used:    1
  2310 ;; Hardware stack levels required when called:    9
  2311 ;; This function calls:
  2312 ;;		Nothing
  2313 ;; This function is called by:
  2314 ;;		_TMR0_Initialize
  2315 ;;		_main
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text8
  2320  002D64                     __ptext8:
  2321                           	opt stack 0
  2322  002D64                     _TMR0_SetInterruptHandler:
  2323                           	opt stack 21
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;tmr0.c: 153: TMR0_InterruptHandler = InterruptHandler;
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;incstack = 0
  2330  002D64  C060  F0DE         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2331  002D68  C061  F0DF         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2332                           
  2333                           ; BSR set to: 0
  2334  002D6C  0012               	return		;funcret
  2335  002D6E                     __end_of_TMR0_SetInterruptHandler:
  2336                           	opt stack 0
  2337                           tosu	equ	0xFFF
  2338                           tosh	equ	0xFFE
  2339                           tosl	equ	0xFFD
  2340                           pclath	equ	0xFFA
  2341                           tblptru	equ	0xFF8
  2342                           tblptrh	equ	0xFF7
  2343                           tblptrl	equ	0xFF6
  2344                           tablat	equ	0xFF5
  2345                           prodh	equ	0xFF4
  2346                           prodl	equ	0xFF3
  2347                           intcon	equ	0xFF2
  2348                           postinc0	equ	0xFEE
  2349                           plusw0	equ	0xFEB
  2350                           wreg	equ	0xFE8
  2351                           indf1	equ	0xFE7
  2352                           postinc1	equ	0xFE6
  2353                           postdec1	equ	0xFE5
  2354                           plusw1	equ	0xFE3
  2355                           fsr1h	equ	0xFE2
  2356                           fsr1l	equ	0xFE1
  2357                           indf2	equ	0xFDF
  2358                           postinc2	equ	0xFDE
  2359                           postdec2	equ	0xFDD
  2360                           plusw2	equ	0xFDB
  2361                           fsr2h	equ	0xFDA
  2362                           fsr2l	equ	0xFD9
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _PIN_MANAGER_Initialize *****************
  2366 ;; Defined at:
  2367 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;		None
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  state           1    0[BANK0 ] unsigned char 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2385 ;;Total ram usage:        1 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; Hardware stack levels required when called:    9
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_SYSTEM_Initialize
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text9
  2396  002804                     __ptext9:
  2397                           	opt stack 0
  2398  002804                     _PIN_MANAGER_Initialize:
  2399                           	opt stack 20
  2400                           
  2401                           ;pin_manager.c: 57: LATA = 0x00;
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;incstack = 0
  2405  002804  6A83               	clrf	3971,c	;volatile
  2406                           
  2407                           ;pin_manager.c: 58: LATB = 0x00;
  2408  002806  6A84               	clrf	3972,c	;volatile
  2409                           
  2410                           ;pin_manager.c: 59: LATC = 0x00;
  2411  002808  6A85               	clrf	3973,c	;volatile
  2412                           
  2413                           ;pin_manager.c: 64: TRISA = 0xC0;
  2414  00280A  0EC0               	movlw	192
  2415  00280C  6E88               	movwf	3976,c	;volatile
  2416                           
  2417                           ;pin_manager.c: 65: TRISB = 0x00;
  2418  00280E  6A89               	clrf	3977,c	;volatile
  2419                           
  2420                           ;pin_manager.c: 66: TRISC = 0x84;
  2421  002810  0E84               	movlw	132
  2422  002812  6E8A               	movwf	3978,c	;volatile
  2423                           
  2424                           ;pin_manager.c: 71: ANSELC = 0x44;
  2425  002814  0E44               	movlw	68
  2426  002816  010F               	movlb	15	; () banked
  2427  002818  6F21               	movwf	33,b	;volatile
  2428                           
  2429                           ; BSR set to: 15
  2430                           ;pin_manager.c: 72: ANSELB = 0x00;
  2431  00281A  6B19               	clrf	25,b	;volatile
  2432                           
  2433                           ;pin_manager.c: 73: ANSELA = 0xC0;
  2434  00281C  0EC0               	movlw	192
  2435  00281E  6F11               	movwf	17,b	;volatile
  2436                           
  2437                           ; BSR set to: 15
  2438                           ;pin_manager.c: 78: WPUE = 0x00;
  2439  002820  6B2D               	clrf	45,b	;volatile
  2440                           
  2441                           ; BSR set to: 15
  2442                           ;pin_manager.c: 79: WPUB = 0x00;
  2443  002822  6B18               	clrf	24,b	;volatile
  2444                           
  2445                           ; BSR set to: 15
  2446                           ;pin_manager.c: 80: WPUA = 0x00;
  2447  002824  6B10               	clrf	16,b	;volatile
  2448                           
  2449                           ; BSR set to: 15
  2450                           ;pin_manager.c: 81: WPUC = 0x00;
  2451  002826  6B20               	clrf	32,b	;volatile
  2452                           
  2453                           ; BSR set to: 15
  2454                           ;pin_manager.c: 86: ODCONA = 0x00;
  2455  002828  6B0F               	clrf	15,b	;volatile
  2456                           
  2457                           ; BSR set to: 15
  2458                           ;pin_manager.c: 87: ODCONB = 0x00;
  2459  00282A  6B17               	clrf	23,b	;volatile
  2460                           
  2461                           ; BSR set to: 15
  2462                           ;pin_manager.c: 88: ODCONC = 0x00;
  2463  00282C  6B1F               	clrf	31,b	;volatile
  2464                           
  2465                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  2466  00282E  0E00               	movlw	0
  2467  002830  BEF2               	btfsc	intcon,7,c	;volatile
  2468  002832  0E01               	movlw	1
  2469  002834  0100               	movlb	0	; () banked
  2470  002836  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;pin_manager.c: 96: GIE = 0;
  2474  002838  9EF2               	bcf	intcon,7,c	;volatile
  2475                           
  2476                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  2477  00283A  0E55               	movlw	85
  2478  00283C  010E               	movlb	14	; () banked
  2479  00283E  6FA0               	movwf	160,b	;volatile
  2480                           
  2481                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  2482  002840  0EAA               	movlw	170
  2483  002842  6FA0               	movwf	160,b	;volatile
  2484                           
  2485                           ; BSR set to: 14
  2486                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  2487  002844  91A0               	bcf	160,0,b	;volatile
  2488                           
  2489                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  2490  002846  51B5               	movf	181,w,b	;volatile
  2491  002848  0BE0               	andlw	-32
  2492  00284A  0917               	iorlw	23
  2493  00284C  6FB5               	movwf	181,b	;volatile
  2494                           
  2495                           ;pin_manager.c: 102: RC6PPS = 0x09;
  2496  00284E  0E09               	movlw	9
  2497  002850  6FFD               	movwf	253,b	;volatile
  2498                           
  2499                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  2500  002852  0E55               	movlw	85
  2501  002854  6FA0               	movwf	160,b	;volatile
  2502                           
  2503                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  2504  002856  0EAA               	movlw	170
  2505  002858  6FA0               	movwf	160,b	;volatile
  2506                           
  2507                           ; BSR set to: 14
  2508                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  2509  00285A  81A0               	bsf	160,0,b	;volatile
  2510                           
  2511                           ; BSR set to: 14
  2512                           ;pin_manager.c: 108: GIE = state;
  2513  00285C  0100               	movlb	0	; () banked
  2514  00285E  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  2515  002860  D002               	goto	u4380
  2516  002862  8EF2               	bsf	intcon,7,c	;volatile
  2517  002864  0CAA               	retlw	170
  2518  002866                     u4380:
  2519  002866  9EF2               	bcf	intcon,7,c	;volatile
  2520  002868  0012               	return		;funcret
  2521  00286A                     __end_of_PIN_MANAGER_Initialize:
  2522                           	opt stack 0
  2523                           tosu	equ	0xFFF
  2524                           tosh	equ	0xFFE
  2525                           tosl	equ	0xFFD
  2526                           pclath	equ	0xFFA
  2527                           tblptru	equ	0xFF8
  2528                           tblptrh	equ	0xFF7
  2529                           tblptrl	equ	0xFF6
  2530                           tablat	equ	0xFF5
  2531                           prodh	equ	0xFF4
  2532                           prodl	equ	0xFF3
  2533                           intcon	equ	0xFF2
  2534                           postinc0	equ	0xFEE
  2535                           plusw0	equ	0xFEB
  2536                           wreg	equ	0xFE8
  2537                           indf1	equ	0xFE7
  2538                           postinc1	equ	0xFE6
  2539                           postdec1	equ	0xFE5
  2540                           plusw1	equ	0xFE3
  2541                           fsr1h	equ	0xFE2
  2542                           fsr1l	equ	0xFE1
  2543                           indf2	equ	0xFDF
  2544                           postinc2	equ	0xFDE
  2545                           postdec2	equ	0xFDD
  2546                           plusw2	equ	0xFDB
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _OSCILLATOR_Initialize *****************
  2552 ;; Defined at:
  2553 ;;		line 117 in file "mcc_generated_files/mcc.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 3F/E
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    9
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_SYSTEM_Initialize
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text10
  2582  002CDC                     __ptext10:
  2583                           	opt stack 0
  2584  002CDC                     _OSCILLATOR_Initialize:
  2585                           	opt stack 20
  2586                           
  2587                           ;mcc.c: 120: OSCCON1 = 0x22;
  2588                           
  2589                           ;incstack = 0
  2590  002CDC  0E22               	movlw	34
  2591  002CDE  010E               	movlb	14	; () banked
  2592  002CE0  6FD8               	movwf	216,b	;volatile
  2593                           
  2594                           ; BSR set to: 14
  2595                           ;mcc.c: 122: OSCCON3 = 0x00;
  2596  002CE2  6BDA               	clrf	218,b	;volatile
  2597                           
  2598                           ; BSR set to: 14
  2599                           ;mcc.c: 124: OSCEN = 0x00;
  2600  002CE4  6BDC               	clrf	220,b	;volatile
  2601                           
  2602                           ;mcc.c: 126: OSCFRQ = 0x02;
  2603  002CE6  0E02               	movlw	2
  2604  002CE8  6FDE               	movwf	222,b	;volatile
  2605                           
  2606                           ; BSR set to: 14
  2607                           ;mcc.c: 128: OSCTUNE = 0x00;
  2608  002CEA  6BDD               	clrf	221,b	;volatile
  2609  002CEC                     l840:
  2610                           
  2611                           ; BSR set to: 14
  2612  002CEC  B1DB               	btfsc	219,0,b	;volatile
  2613                           
  2614                           ; BSR set to: 14
  2615  002CEE  0012               	return		;funcret
  2616  002CF0  D7FD               	goto	l840
  2617  002CF2                     __end_of_OSCILLATOR_Initialize:
  2618                           	opt stack 0
  2619                           tosu	equ	0xFFF
  2620                           tosh	equ	0xFFE
  2621                           tosl	equ	0xFFD
  2622                           pclath	equ	0xFFA
  2623                           tblptru	equ	0xFF8
  2624                           tblptrh	equ	0xFF7
  2625                           tblptrl	equ	0xFF6
  2626                           tablat	equ	0xFF5
  2627                           prodh	equ	0xFF4
  2628                           prodl	equ	0xFF3
  2629                           intcon	equ	0xFF2
  2630                           postinc0	equ	0xFEE
  2631                           plusw0	equ	0xFEB
  2632                           wreg	equ	0xFE8
  2633                           indf1	equ	0xFE7
  2634                           postinc1	equ	0xFE6
  2635                           postdec1	equ	0xFE5
  2636                           plusw1	equ	0xFE3
  2637                           fsr1h	equ	0xFE2
  2638                           fsr1l	equ	0xFE1
  2639                           indf2	equ	0xFDF
  2640                           postinc2	equ	0xFDE
  2641                           postdec2	equ	0xFDD
  2642                           plusw2	equ	0xFDB
  2643                           fsr2h	equ	0xFDA
  2644                           fsr2l	equ	0xFD9
  2645                           status	equ	0xFD8
  2646                           
  2647 ;; *************** function _INTERRUPT_Initialize *****************
  2648 ;; Defined at:
  2649 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;		None
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  1    wreg      void 
  2656 ;; Registers used:
  2657 ;;		None
  2658 ;; Tracked objects:
  2659 ;;		On entry : 0/0
  2660 ;;		On exit  : 0/0
  2661 ;;		Unchanged: 0/0
  2662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2667 ;;Total ram usage:        0 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; Hardware stack levels required when called:    9
  2670 ;; This function calls:
  2671 ;;		Nothing
  2672 ;; This function is called by:
  2673 ;;		_SYSTEM_Initialize
  2674 ;; This function uses a non-reentrant model
  2675 ;;
  2676                           
  2677                           	psect	text11
  2678  002D78                     __ptext11:
  2679                           	opt stack 0
  2680  002D78                     _INTERRUPT_Initialize:
  2681                           	opt stack 20
  2682                           
  2683                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  2684                           
  2685                           ; BSR set to: 14
  2686                           ;incstack = 0
  2687  002D78  9AF2               	bcf	intcon,5,c	;volatile
  2688  002D7A  0012               	return		;funcret
  2689  002D7C                     __end_of_INTERRUPT_Initialize:
  2690                           	opt stack 0
  2691                           tosu	equ	0xFFF
  2692                           tosh	equ	0xFFE
  2693                           tosl	equ	0xFFD
  2694                           pclath	equ	0xFFA
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           postinc0	equ	0xFEE
  2703                           plusw0	equ	0xFEB
  2704                           wreg	equ	0xFE8
  2705                           indf1	equ	0xFE7
  2706                           postinc1	equ	0xFE6
  2707                           postdec1	equ	0xFE5
  2708                           plusw1	equ	0xFE3
  2709                           fsr1h	equ	0xFE2
  2710                           fsr1l	equ	0xFE1
  2711                           indf2	equ	0xFDF
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           plusw2	equ	0xFDB
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8
  2718                           
  2719 ;; *************** function _ReadGPS *****************
  2720 ;; Defined at:
  2721 ;;		line 174 in file "libs/funcs.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 3F/0
  2732 ;;		On exit  : 3F/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:   15
  2742 ;; This function calls:
  2743 ;;		_ReadGPS_DATE_TIME
  2744 ;; This function is called by:
  2745 ;;		_main
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text12
  2750  002732                     __ptext12:
  2751                           	opt stack 0
  2752  002732                     _ReadGPS:
  2753                           	opt stack 15
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;funcs.c: 175: if (ReadGPS_DATE_TIME()) {
  2757                           
  2758                           ;incstack = 0
  2759  002732  EC43  F00A         	call	_ReadGPS_DATE_TIME	;wreg free
  2760  002736  0900               	iorlw	0
  2761  002738  E013               	bz	l4313
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;funcs.c: 181: DATE_TIME = GPS_DATE_TIME;
  2765  00273A  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  2766  00273E  EE10  F0B9         	lfsr	1,_DATE_TIME
  2767  002742  0E0A               	movlw	10
  2768  002744                     u4461:
  2769  002744  CFDB FFE3          	movff	plusw2,plusw1
  2770  002748  06E8               	decf	wreg,f,c
  2771  00274A  E2FC               	bc	u4461
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;funcs.c: 182: TIME_AT_LAST_GPS_SYNC = DATE_TIME.SECOND;
  2775  00274C  C0B9  F0C4         	movff	_DATE_TIME,_TIME_AT_LAST_GPS_SYNC
  2776  002750  C0BA  F0C5         	movff	_DATE_TIME+1,_TIME_AT_LAST_GPS_SYNC+1
  2777  002754  C0BB  F0C6         	movff	_DATE_TIME+2,_TIME_AT_LAST_GPS_SYNC+2
  2778  002758  C0BC  F0C7         	movff	_DATE_TIME+3,_TIME_AT_LAST_GPS_SYNC+3
  2779  00275C                     l4311:
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;funcs.c: 183: FLAGS_0.bits.b3 = SET;
  2783  00275C  87E4               	bsf	_FLAGS_0& (0+255),3,b
  2784                           
  2785                           ;funcs.c: 184: } else {
  2786  00275E  D01C               	goto	l4325
  2787  002760                     l4313:
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;funcs.c: 185: NO_OF_TIMES_GPS_FAILED++;
  2791  002760  2BE5               	incf	_NO_OF_TIMES_GPS_FAILED& (0+255),f,b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;funcs.c: 186: if (NO_OF_TIMES_GPS_FAILED > 4) {
  2795  002762  0E04               	movlw	4
  2796  002764  65E5               	cpfsgt	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  2797  002766  D001               	goto	l4319
  2798  002768  D7F9               	goto	l4311
  2799  00276A                     l4319:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;funcs.c: 189: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND -
  2803                           ;funcs.c: 190: ((20*60) - (5*60));
  2804  00276A  0E7C               	movlw	124
  2805  00276C  25B9               	addwf	_DATE_TIME& (0+255),w,b
  2806  00276E  6FC8               	movwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),b
  2807  002770  0EFC               	movlw	252
  2808  002772  21BA               	addwfc	(_DATE_TIME+1)& (0+255),w,b
  2809  002774  6FC9               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),b
  2810  002776  0EFF               	movlw	255
  2811  002778  21BB               	addwfc	(_DATE_TIME+2)& (0+255),w,b
  2812  00277A  6FCA               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),b
  2813  00277C  0EFF               	movlw	255
  2814  00277E  21BC               	addwfc	(_DATE_TIME+3)& (0+255),w,b
  2815  002780  6FCB               	movwf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),b
  2816                           
  2817                           ;funcs.c: 191: if (TIME_WHEN_GPS_IS_SWITCHED_ON<0)
  2818  002782  AFCB               	btfss	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),7,b
  2819  002784  D008               	goto	l4323
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;funcs.c: 192: TIME_WHEN_GPS_IS_SWITCHED_ON += 86400;
  2823  002786  0E80               	movlw	128
  2824  002788  27C8               	addwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),f,b
  2825  00278A  0E51               	movlw	81
  2826  00278C  23C9               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),f,b
  2827  00278E  0E01               	movlw	1
  2828  002790  23CA               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),f,b
  2829  002792  0E00               	movlw	0
  2830  002794  23CB               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),f,b
  2831  002796                     l4323:
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;funcs.c: 193: FLAGS_0.bits.b1 = SET;
  2835  002796  83E4               	bsf	_FLAGS_0& (0+255),1,b
  2836  002798                     l4325:
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;funcs.c: 194: }
  2840                           ;funcs.c: 195: }
  2841                           ;funcs.c: 196: FLAGS_0.bits.b2 = RESET;
  2842  002798  95E4               	bcf	_FLAGS_0& (0+255),2,b
  2843                           
  2844                           ; BSR set to: 0
  2845  00279A  0012               	return		;funcret
  2846  00279C                     __end_of_ReadGPS:
  2847                           	opt stack 0
  2848                           tosu	equ	0xFFF
  2849                           tosh	equ	0xFFE
  2850                           tosl	equ	0xFFD
  2851                           pclath	equ	0xFFA
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           postinc0	equ	0xFEE
  2860                           plusw0	equ	0xFEB
  2861                           wreg	equ	0xFE8
  2862                           indf1	equ	0xFE7
  2863                           postinc1	equ	0xFE6
  2864                           postdec1	equ	0xFE5
  2865                           plusw1	equ	0xFE3
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           plusw2	equ	0xFDB
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _ReadGPS_DATE_TIME *****************
  2877 ;; Defined at:
  2878 ;;		line 115 in file "libs/funcs.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  TempItr         1   77[BANK0 ] unsigned char 
  2883 ;;  Date            7   69[BANK0 ] unsigned char [7]
  2884 ;;  Time            7   62[BANK0 ] unsigned char [7]
  2885 ;;  IsValidGPS      1   76[BANK0 ] enum E11037
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      enum E11037
  2888 ;; Registers used:
  2889 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2890 ;; Tracked objects:
  2891 ;;		On entry : 3F/0
  2892 ;;		On exit  : 3F/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2896 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2897 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2898 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2899 ;;Total ram usage:       20 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:   14
  2902 ;; This function calls:
  2903 ;;		_AdjustDayLightSaving
  2904 ;;		_DecreaseByADay
  2905 ;;		_EUSART1_Initialize
  2906 ;;		_GetDay
  2907 ;;		_IncreaseByADay
  2908 ;;		_ReadGPSDateTime
  2909 ;;		_TimeTextToSecond
  2910 ;;		_ValidateDateTime
  2911 ;; This function is called by:
  2912 ;;		_ReadGPS
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           	psect	text13
  2917  001486                     __ptext13:
  2918                           	opt stack 0
  2919  001486                     _ReadGPS_DATE_TIME:
  2920                           	opt stack 15
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;funcs.c: 116: BOOL IsValidGPS = 0;
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;incstack = 0
  2927  001486  6BAC               	clrf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;funcs.c: 117: char Date[] = "------";
  2931  001488  EE20  F0F1         	lfsr	2,ReadGPS_DATE_TIME@F11474
  2932  00148C  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  2933  001490  0E06               	movlw	6
  2934  001492                     u4241:
  2935  001492  CFDB FFE3          	movff	plusw2,plusw1
  2936  001496  06E8               	decf	wreg,f,c
  2937  001498  E2FC               	bc	u4241
  2938                           
  2939                           ;funcs.c: 118: char Time[] = "------";
  2940  00149A  EE20  F0EA         	lfsr	2,ReadGPS_DATE_TIME@F11476
  2941  00149E  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  2942  0014A2  0E06               	movlw	6
  2943  0014A4                     u4251:
  2944  0014A4  CFDB FFE3          	movff	plusw2,plusw1
  2945  0014A8  06E8               	decf	wreg,f,c
  2946  0014AA  E2FC               	bc	u4251
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;funcs.c: 119: EUSART1_Initialize();
  2950  0014AC  EC8D  F016         	call	_EUSART1_Initialize	;wreg free
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;funcs.c: 120: for (UINT8 TempItr=0; TempItr<5; TempItr++ ) {
  2954  0014B0  6BAD               	clrf	ReadGPS_DATE_TIME@TempItr& (0+255),b
  2955  0014B2                     l4187:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;funcs.c: 121: ReadGPSDateTime(Date, Time);
  2959  0014B2  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  2960  0014B4  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  2961  0014B6  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  2962  0014B8  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  2963  0014BA  EC54  F011         	call	_ReadGPSDateTime	;wreg free
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;funcs.c: 122: if (ValidateDateTime(Date, Time)) {
  2967  0014BE  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  2968  0014C0  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  2969  0014C2  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  2970  0014C4  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  2971  0014C6  ECFA  F00F         	call	_ValidateDateTime	;wreg free
  2972  0014CA  0900               	iorlw	0
  2973  0014CC  E003               	bz	l4193
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;funcs.c: 123: IsValidGPS = 1;
  2977  0014CE  0E01               	movlw	1
  2978  0014D0  6FAC               	movwf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  2979                           
  2980                           ;funcs.c: 124: break;
  2981  0014D2  D004               	goto	l4197
  2982  0014D4                     l4193:
  2983                           
  2984                           ; BSR set to: 0
  2985  0014D4  2BAD               	incf	ReadGPS_DATE_TIME@TempItr& (0+255),f,b
  2986                           
  2987                           ; BSR set to: 0
  2988  0014D6  0E04               	movlw	4
  2989  0014D8  65AD               	cpfsgt	ReadGPS_DATE_TIME@TempItr& (0+255),b
  2990  0014DA  D7EB               	goto	l4187
  2991  0014DC                     l4197:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;funcs.c: 125: }
  2995                           ;funcs.c: 126: }
  2996                           ;funcs.c: 127: if (IsValidGPS) {
  2997  0014DC  51AC               	movf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),w,b
  2998  0014DE  E101 D0AF          	bz	l4227
  2999                           
  3000                           ; BSR set to: 0
  3001                           ;funcs.c: 128: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  3002  0014E2  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  3003  0014E4  0D0A               	mullw	10
  3004  0014E6  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  3005  0014E8  D8AC               	call	PL70	;call to abstracted procedure
  3006  0014EA  6FB2               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  3007  0014EC  0EFD               	movlw	253
  3008  0014EE  20F4               	addwfc	prodh,w,c
  3009  0014F0  6FB3               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  3010                           
  3011                           ;funcs.c: 129: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  3012  0014F2  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  3013  0014F4  0D0A               	mullw	10
  3014  0014F6  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  3015  0014F8  D8A4               	call	PL70	;call to abstracted procedure
  3016  0014FA  6FB4               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  3017  0014FC  0EFD               	movlw	253
  3018  0014FE  20F4               	addwfc	prodh,w,c
  3019  001500  6FB5               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;funcs.c: 130: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  3023  001502  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  3024  001504  6F6E               	movwf	GetDay@Date& (0+255),b
  3025  001506  EC80  F00E         	call	_GetDay	;wreg free
  3026  00150A  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  3027  00150C  0E40               	movlw	64
  3028  00150E  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  3029  001510  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  3030  001512  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  3031  001514  D003               	goto	u4294
  3032  001516                     u4295:
  3033  001516  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  3034  001518  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  3035  00151A  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3036  00151C                     u4294:
  3037  00151C  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  3038  00151E  D7FB               	goto	u4295
  3039  001520  0100               	movlb	0	; () banked
  3040  001522  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3041  001524  51B6               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  3042  001526  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3043  001528  0B01               	andlw	-255
  3044  00152A  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3045  00152C  6FB6               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;funcs.c: 131: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  3049  00152E  51FD               	movf	_CENTURY& (0+255),w,b
  3050  001530  0D64               	mullw	100
  3051  001532  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  3052  001536  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  3053  00153A  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  3054  00153C  0D0A               	mullw	10
  3055  00153E  50F3               	movf	prodl,w,c
  3056  001540  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  3057  001542  50F4               	movf	prodh,w,c
  3058  001544  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3059  001546  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  3060  001548  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  3061  00154A  0E00               	movlw	0
  3062  00154C  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  3063  00154E  0EF0               	movlw	240
  3064  001550  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  3065  001552  6FB7               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  3066  001554  0EFD               	movlw	253
  3067  001556  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3068  001558  6FB8               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  3069                           
  3070                           ;funcs.c: 132: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  3071  00155A  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  3072  00155C  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  3073  00155E  EC08  F00F         	call	_TimeTextToSecond	;wreg free
  3074  001562  C06C  F0AE         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  3075  001566  C06D  F0AF         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  3076  00156A  C06E  F0B0         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  3077  00156E  C06F  F0B1         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;funcs.c: 133: GPS_DATE_TIME.SECOND += (TIME_ZONE - CYCLE_DELAY);
  3081  001572  51E0               	movf	_CYCLE_DELAY& (0+255),w,b
  3082  001574  5DE2               	subwf	_TIME_ZONE& (0+255),w,b
  3083  001576  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  3084  001578  51E1               	movf	(_CYCLE_DELAY+1)& (0+255),w,b
  3085  00157A  59E3               	subwfb	(_TIME_ZONE+1)& (0+255),w,b
  3086  00157C  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  3087  00157E  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  3088  001580  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  3089  001582  079C               	decf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  3090  001584  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  3091  001586  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  3092  001588  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  3093  00158A  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  3094  00158C  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  3095  00158E  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  3096  001590  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  3097  001592  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  3098  001594  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  3099  001596  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;funcs.c: 134: if (GPS_DATE_TIME.SECOND < 0) {
  3103  001598  AFB1               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  3104  00159A  D01A               	goto	l4213
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;funcs.c: 135: GPS_DATE_TIME.SECOND += 86400;
  3108  00159C  0E80               	movlw	128
  3109  00159E  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  3110  0015A0  0E51               	movlw	81
  3111  0015A2  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  3112  0015A4  0E01               	movlw	1
  3113  0015A6  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  3114  0015A8  0E00               	movlw	0
  3115  0015AA  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;funcs.c: 136: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  3119  0015AC  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3120  0015B0  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  3121  0015B4  0E0A               	movlw	10
  3122  0015B6                     u4311:
  3123  0015B6  CFDB FFEB          	movff	plusw2,plusw0
  3124  0015BA  06E8               	decf	wreg,f,c
  3125  0015BC  E2FC               	bc	u4311
  3126  0015BE  EC82  F00F         	call	_DecreaseByADay	;wreg free
  3127  0015C2  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3128  0015C6  0E0A               	movlw	10
  3129  0015C8                     u4321:
  3130  0015C8  CFEB FFDB          	movff	plusw0,plusw2
  3131  0015CC  06E8               	decf	wreg,f,c
  3132  0015CE  E2FC               	bc	u4321
  3133  0015D0                     l4213:
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;funcs.c: 137: }
  3137                           ;funcs.c: 138: if (GPS_DATE_TIME.SECOND > 86400) {
  3138  0015D0  BFB1               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  3139  0015D2  D023               	goto	l4219
  3140  0015D4  51B1               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  3141  0015D6  E107               	bnz	u4330
  3142  0015D8  0E81               	movlw	129
  3143  0015DA  5DAE               	subwf	_GPS_DATE_TIME& (0+255),w,b
  3144  0015DC  0E51               	movlw	81
  3145  0015DE  59AF               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  3146  0015E0  0E01               	movlw	1
  3147  0015E2  59B0               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  3148  0015E4  E31A               	bnc	l4219
  3149  0015E6                     u4330:
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;funcs.c: 139: GPS_DATE_TIME.SECOND -= 86400;
  3153  0015E6  0E80               	movlw	128
  3154  0015E8  27AE               	addwf	_GPS_DATE_TIME& (0+255),f,b
  3155  0015EA  0EAE               	movlw	174
  3156  0015EC  23AF               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  3157  0015EE  0EFE               	movlw	254
  3158  0015F0  23B0               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  3159  0015F2  0EFF               	movlw	255
  3160  0015F4  23B1               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;funcs.c: 140: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  3164  0015F6  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3165  0015FA  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  3166  0015FE  0E0A               	movlw	10
  3167  001600                     u4341:
  3168  001600  CFDB FFEB          	movff	plusw2,plusw0
  3169  001604  06E8               	decf	wreg,f,c
  3170  001606  E2FC               	bc	u4341
  3171  001608  ECE3  F010         	call	_IncreaseByADay	;wreg free
  3172  00160C  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3173  001610  0E0A               	movlw	10
  3174  001612                     u4351:
  3175  001612  CFEB FFDB          	movff	plusw0,plusw2
  3176  001616  06E8               	decf	wreg,f,c
  3177  001618  E2FC               	bc	u4351
  3178  00161A                     l4219:
  3179                           
  3180                           ; BSR set to: 0
  3181                           ;funcs.c: 141: }
  3182                           ;funcs.c: 142: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  3183  00161A  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3184  00161E  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  3185  001622  0E0A               	movlw	10
  3186  001624                     u4361:
  3187  001624  CFDB FFEB          	movff	plusw2,plusw0
  3188  001628  06E8               	decf	wreg,f,c
  3189  00162A  E2FC               	bc	u4361
  3190  00162C  ECEE  F00D         	call	_AdjustDayLightSaving	;wreg free
  3191  001630  EE20  F0AE         	lfsr	2,_GPS_DATE_TIME
  3192  001634  0E0A               	movlw	10
  3193  001636                     u4371:
  3194  001636  CFEB FFDB          	movff	plusw0,plusw2
  3195  00163A  06E8               	decf	wreg,f,c
  3196  00163C  E2FC               	bc	u4371
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;funcs.c: 143: return 1;
  3200  00163E  0C01               	retlw	1
  3201  001640                     l4227:
  3202                           
  3203                           ; BSR set to: 0
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;funcs.c: 145: return 0;
  3207  001640  0C00               	retlw	0	;funcret
  3208  001642                     __end_of_ReadGPS_DATE_TIME:
  3209                           	opt stack 0
  3210  001642                     PL70:
  3211                           	opt stack 15
  3212  001642  26F3               	addwf	prodl,f,c
  3213  001644  0E00               	movlw	0
  3214  001646  22F4               	addwfc	prodh,f,c
  3215  001648  0EF0               	movlw	240
  3216  00164A  24F3               	addwf	prodl,w,c
  3217  00164C  0012               	return	
  3218  00164E                     __end_ofPL70:
  3219                           	opt stack 0
  3220                           tosu	equ	0xFFF
  3221                           tosh	equ	0xFFE
  3222                           tosl	equ	0xFFD
  3223                           pclath	equ	0xFFA
  3224                           tblptru	equ	0xFF8
  3225                           tblptrh	equ	0xFF7
  3226                           tblptrl	equ	0xFF6
  3227                           tablat	equ	0xFF5
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           intcon	equ	0xFF2
  3231                           postinc0	equ	0xFEE
  3232                           plusw0	equ	0xFEB
  3233                           wreg	equ	0xFE8
  3234                           indf1	equ	0xFE7
  3235                           postinc1	equ	0xFE6
  3236                           postdec1	equ	0xFE5
  3237                           plusw1	equ	0xFE3
  3238                           fsr1h	equ	0xFE2
  3239                           fsr1l	equ	0xFE1
  3240                           indf2	equ	0xFDF
  3241                           postinc2	equ	0xFDE
  3242                           postdec2	equ	0xFDD
  3243                           plusw2	equ	0xFDB
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function _ValidateDateTime *****************
  3249 ;; Defined at:
  3250 ;;		line 138 in file "libs/gps.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  3253 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  3254 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  3255 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  Item            1    3[BANK0 ] char 
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      enum E11037
  3260 ;; Registers used:
  3261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3262 ;; Tracked objects:
  3263 ;;		On entry : 3F/0
  3264 ;;		On exit  : 3F/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3270 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3271 ;;Total ram usage:        4 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    9
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_ReadGPS_DATE_TIME
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           	psect	text14
  3282  001FF4                     __ptext14:
  3283                           	opt stack 0
  3284  001FF4                     _ValidateDateTime:
  3285                           	opt stack 19
  3286                           
  3287                           ; BSR set to: 0
  3288                           ;gps.c: 139: INT8 Item;
  3289                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;incstack = 0
  3293  001FF4  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3294  001FF6  D86F               	call	PL82	;call to abstracted procedure
  3295  001FF8  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3296  001FFA  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3297  001FFC  6ED9               	movwf	fsr2l,c
  3298  001FFE  6ADA               	clrf	fsr2h,c
  3299                           
  3300                           ; BSR set to: 0
  3301                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  3302  002000  D84A               	call	PL10	;call to abstracted procedure
  3303  002002  A0D8               	btfss	status,0,c
  3304  002004  0C00               	retlw	0
  3305                           
  3306                           ; BSR set to: 0
  3307  002006  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3308  002008  0A80               	xorlw	128
  3309  00200A  0F60               	addlw	-160
  3310  00200C  E301               	bnc	l3661
  3311                           
  3312                           ; BSR set to: 0
  3313  00200E  0C00               	retlw	0
  3314  002010                     l3661:
  3315                           
  3316                           ; BSR set to: 0
  3317                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  3318  002010  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3319  002012  D855               	call	PL50	;call to abstracted procedure
  3320  002014  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3321  002016  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3322  002018  D84D               	call	PL46	;call to abstracted procedure
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  3326  00201A  D83D               	call	PL10	;call to abstracted procedure
  3327  00201C  A0D8               	btfss	status,0,c
  3328  00201E  0C00               	retlw	0
  3329                           
  3330                           ; BSR set to: 0
  3331  002020  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3332  002022  0A80               	xorlw	128
  3333  002024  0F73               	addlw	-141
  3334  002026  E301               	bnc	l3671
  3335  002028  0C00               	retlw	0
  3336  00202A                     l3671:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  3340  00202A  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3341  00202C  D84E               	call	PL56	;call to abstracted procedure
  3342  00202E  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3343  002030  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  3344  002032  D83B               	call	PL42	;call to abstracted procedure
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  3348  002034  D830               	call	PL10	;call to abstracted procedure
  3349  002036  A0D8               	btfss	status,0,c
  3350  002038  0C00               	retlw	0
  3351                           
  3352                           ; BSR set to: 0
  3353  00203A  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3354  00203C  0A80               	xorlw	128
  3355  00203E  0F1C               	addlw	-228
  3356  002040  E301               	bnc	l3681
  3357  002042  0C00               	retlw	0
  3358  002044                     l3681:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  3362  002044  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3363  002046  D847               	call	PL82	;call to abstracted procedure
  3364  002048  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3365  00204A  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3366  00204C  6ED9               	movwf	fsr2l,c
  3367  00204E  6ADA               	clrf	fsr2h,c
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  3371  002050  D822               	call	PL10	;call to abstracted procedure
  3372  002052  A0D8               	btfss	status,0,c
  3373  002054  0C00               	retlw	0
  3374                           
  3375                           ; BSR set to: 0
  3376  002056  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3377  002058  0A80               	xorlw	128
  3378  00205A  0F68               	addlw	-152
  3379  00205C  E301               	bnc	l3691
  3380  00205E  0C00               	retlw	0
  3381  002060                     l3691:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  3385  002060  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3386  002062  D82D               	call	PL50	;call to abstracted procedure
  3387  002064  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3388  002066  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3389  002068  D825               	call	PL46	;call to abstracted procedure
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  3393  00206A  D815               	call	PL10	;call to abstracted procedure
  3394  00206C  A0D8               	btfss	status,0,c
  3395  00206E  0C00               	retlw	0
  3396                           
  3397                           ; BSR set to: 0
  3398  002070  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3399  002072  0A80               	xorlw	128
  3400  002074  0F44               	addlw	-188
  3401  002076  E301               	bnc	l3701
  3402  002078  0C00               	retlw	0
  3403  00207A                     l3701:
  3404                           
  3405                           ; BSR set to: 0
  3406                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  3407  00207A  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3408  00207C  D826               	call	PL56	;call to abstracted procedure
  3409  00207E  6F62               	movwf	??_ValidateDateTime& (0+255),b
  3410  002080  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  3411  002082  D813               	call	PL42	;call to abstracted procedure
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  3415  002084  D808               	call	PL10	;call to abstracted procedure
  3416  002086  A0D8               	btfss	status,0,c
  3417  002088  0C00               	retlw	0
  3418                           
  3419                           ; BSR set to: 0
  3420  00208A  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3421  00208C  0A80               	xorlw	128
  3422  00208E  0F44               	addlw	-188
  3423  002090  E301               	bnc	l3711
  3424  002092  0C00               	retlw	0
  3425  002094                     l3711:
  3426                           
  3427                           ; BSR set to: 0
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;gps.c: 160: return 1;
  3431  002094  0C01               	retlw	1	;funcret
  3432  002096                     __end_of_ValidateDateTime:
  3433                           	opt stack 0
  3434  002096                     PL10:
  3435                           	opt stack 19
  3436  002096  50DF               	movf	indf2,w,c
  3437  002098  0D0A               	mullw	10
  3438  00209A  50F3               	movf	prodl,w,c
  3439  00209C  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  3440  00209E  0FF0               	addlw	240
  3441  0020A0  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  3442  0020A2  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  3443  0020A4  0A80               	xorlw	128
  3444  0020A6  0F7F               	addlw	-129
  3445  0020A8  0012               	return	
  3446  0020AA                     __end_ofPL10:
  3447                           	opt stack 0
  3448  0020AA                     PL42:
  3449                           	opt stack 19
  3450  0020AA  6ED9               	movwf	fsr2l,c
  3451  0020AC  6ADA               	clrf	fsr2h,c
  3452  0020AE  0E04               	movlw	4
  3453  0020B0  26D9               	addwf	fsr2l,f,c
  3454  0020B2  0C04               	retlw	4
  3455  0020B4                     __end_ofPL42:
  3456                           	opt stack 0
  3457  0020B4                     PL46:
  3458                           	opt stack 19
  3459  0020B4  6ED9               	movwf	fsr2l,c
  3460  0020B6  6ADA               	clrf	fsr2h,c
  3461  0020B8  0E02               	movlw	2
  3462  0020BA  26D9               	addwf	fsr2l,f,c
  3463  0020BC  0C02               	retlw	2
  3464  0020BE                     __end_ofPL46:
  3465                           	opt stack 0
  3466  0020BE                     PL50:
  3467                           	opt stack 19
  3468  0020BE  6ED9               	movwf	fsr2l,c
  3469  0020C0  6ADA               	clrf	fsr2h,c
  3470  0020C2  0E03               	movlw	3
  3471  0020C4  26D9               	addwf	fsr2l,f,c
  3472  0020C6  50DF               	movf	indf2,w,c
  3473  0020C8  0012               	return	
  3474  0020CA                     __end_ofPL50:
  3475                           	opt stack 0
  3476  0020CA                     PL56:
  3477                           	opt stack 19
  3478  0020CA  6ED9               	movwf	fsr2l,c
  3479  0020CC  6ADA               	clrf	fsr2h,c
  3480  0020CE  0E05               	movlw	5
  3481  0020D0  26D9               	addwf	fsr2l,f,c
  3482  0020D2  50DF               	movf	indf2,w,c
  3483  0020D4  0012               	return	
  3484  0020D6                     __end_ofPL56:
  3485                           	opt stack 0
  3486  0020D6                     PL82:
  3487                           	opt stack 19
  3488  0020D6  6ED9               	movwf	fsr2l,c
  3489  0020D8  6ADA               	clrf	fsr2h,c
  3490  0020DA  2AD9               	incf	fsr2l,f,c
  3491  0020DC  50DF               	movf	indf2,w,c
  3492  0020DE  0012               	return	
  3493  0020E0                     __end_ofPL82:
  3494                           	opt stack 0
  3495                           tosu	equ	0xFFF
  3496                           tosh	equ	0xFFE
  3497                           tosl	equ	0xFFD
  3498                           pclath	equ	0xFFA
  3499                           tblptru	equ	0xFF8
  3500                           tblptrh	equ	0xFF7
  3501                           tblptrl	equ	0xFF6
  3502                           tablat	equ	0xFF5
  3503                           prodh	equ	0xFF4
  3504                           prodl	equ	0xFF3
  3505                           intcon	equ	0xFF2
  3506                           postinc0	equ	0xFEE
  3507                           plusw0	equ	0xFEB
  3508                           wreg	equ	0xFE8
  3509                           indf1	equ	0xFE7
  3510                           postinc1	equ	0xFE6
  3511                           postdec1	equ	0xFE5
  3512                           plusw1	equ	0xFE3
  3513                           fsr1h	equ	0xFE2
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           plusw2	equ	0xFDB
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _TimeTextToSecond *****************
  3524 ;; Defined at:
  3525 ;;		line 148 in file "libs/funcs.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  3528 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  Second          4   32[BANK0 ] long 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  4   12[BANK0 ] long 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 3F/0
  3537 ;;		On exit  : 3F/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3541 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3542 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3543 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3544 ;;Total ram usage:       24 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:   10
  3547 ;; This function calls:
  3548 ;;		___lmul
  3549 ;; This function is called by:
  3550 ;;		_ReadGPS_DATE_TIME
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text15
  3555  001E10                     __ptext15:
  3556                           	opt stack 0
  3557  001E10                     _TimeTextToSecond:
  3558                           	opt stack 18
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;funcs.c: 149: INT32 Second;
  3562                           ;funcs.c: 150: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  3563                           ;funcs.c: 151: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  3564                           ;funcs.c: 152: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;incstack = 0
  3568  001E10  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3569  001E12  EC55  F010         	call	PL42	;call to abstracted procedure
  3570  001E16  D872               	call	PL72	;call to abstracted procedure
  3571  001E18  EC65  F010         	call	PL56	;call to abstracted procedure
  3572  001E1C  EC21  F00B         	call	PL70	;call to abstracted procedure
  3573  001E20  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  3574  001E22  0EFD               	movlw	253
  3575  001E24  20F4               	addwfc	prodh,w,c
  3576  001E26  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  3577  001E28  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  3578  001E2A  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  3579  001E2C  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  3580  001E2E  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  3581  001E30  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  3582  001E32  0EF0               	movlw	240
  3583  001E34  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  3584  001E36  0EFD               	movlw	253
  3585  001E38  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  3586  001E3A  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3587  001E3C  6ED9               	movwf	fsr2l,c
  3588  001E3E  6ADA               	clrf	fsr2h,c
  3589  001E40  D85D               	call	PL72	;call to abstracted procedure
  3590  001E42  EC6B  F010         	call	PL82	;call to abstracted procedure
  3591  001E46  26F3               	addwf	prodl,f,c
  3592  001E48  0E00               	movlw	0
  3593  001E4A  22F4               	addwfc	prodh,f,c
  3594  001E4C  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  3595  001E4E  26F3               	addwf	prodl,f,c
  3596  001E50  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  3597  001E52  D849               	call	PL48	;call to abstracted procedure
  3598  001E54  0E10               	movlw	16
  3599  001E56  6F64               	movwf	___lmul@multiplicand& (0+255),b
  3600  001E58  0E0E               	movlw	14
  3601  001E5A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  3602  001E5C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  3603  001E5E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  3604  001E60  EC89  F014         	call	___lmul	;wreg free
  3605  001E64  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  3606  001E68  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  3607  001E6C  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  3608  001E70  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  3609  001E74  0EF0               	movlw	240
  3610  001E76  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  3611  001E78  0EFD               	movlw	253
  3612  001E7A  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  3613  001E7C  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3614  001E7E  EC5A  F010         	call	PL46	;call to abstracted procedure
  3615  001E82  D83C               	call	PL72	;call to abstracted procedure
  3616  001E84  EC5F  F010         	call	PL50	;call to abstracted procedure
  3617  001E88  26F3               	addwf	prodl,f,c
  3618  001E8A  0E00               	movlw	0
  3619  001E8C  22F4               	addwfc	prodh,f,c
  3620  001E8E  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  3621  001E90  26F3               	addwf	prodl,f,c
  3622  001E92  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  3623  001E94  D828               	call	PL48	;call to abstracted procedure
  3624  001E96  0E3C               	movlw	60
  3625  001E98  6F64               	movwf	___lmul@multiplicand& (0+255),b
  3626  001E9A  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  3627  001E9C  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  3628  001E9E  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  3629  001EA0  EC89  F014         	call	___lmul	;wreg free
  3630  001EA4  5160               	movf	?___lmul& (0+255),w,b
  3631  001EA6  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  3632  001EA8  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  3633  001EAA  5161               	movf	(?___lmul+1)& (0+255),w,b
  3634  001EAC  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  3635  001EAE  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  3636  001EB0  5162               	movf	(?___lmul+2)& (0+255),w,b
  3637  001EB2  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  3638  001EB4  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  3639  001EB6  5163               	movf	(?___lmul+3)& (0+255),w,b
  3640  001EB8  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  3641  001EBA  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  3642  001EBC  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  3643  001EBE  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  3644  001EC0  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  3645  001EC2  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  3646  001EC4  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  3647  001EC6  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  3648  001EC8  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  3649  001ECA  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  3650  001ECC  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  3651  001ECE  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  3652  001ED0  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  3653  001ED2  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;funcs.c: 153: return Second;
  3657  001ED4  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  3658  001ED8  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  3659  001EDC  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  3660  001EE0  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  3661                           
  3662                           ; BSR set to: 0
  3663  001EE4  0012               	return		;funcret
  3664  001EE6                     __end_of_TimeTextToSecond:
  3665                           	opt stack 0
  3666  001EE6                     PL48:
  3667                           	opt stack 18
  3668  001EE6  22F4               	addwfc	prodh,f,c
  3669  001EE8  CFF3 F060          	movff	prodl,___lmul@multiplier
  3670  001EEC  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  3671  001EF0  0E00               	movlw	0
  3672  001EF2  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  3673  001EF4  0EFF               	movlw	-1
  3674  001EF6  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  3675  001EF8  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  3676  001EFA  0012               	return	
  3677  001EFC                     __end_ofPL48:
  3678                           	opt stack 0
  3679  001EFC                     PL72:
  3680                           	opt stack 18
  3681  001EFC  50DF               	movf	indf2,w,c
  3682  001EFE  0D0A               	mullw	10
  3683  001F00  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  3684  001F02  0012               	return	
  3685  001F04                     __end_ofPL72:
  3686                           	opt stack 0
  3687                           tosu	equ	0xFFF
  3688                           tosh	equ	0xFFE
  3689                           tosl	equ	0xFFD
  3690                           pclath	equ	0xFFA
  3691                           tblptru	equ	0xFF8
  3692                           tblptrh	equ	0xFF7
  3693                           tblptrl	equ	0xFF6
  3694                           tablat	equ	0xFF5
  3695                           prodh	equ	0xFF4
  3696                           prodl	equ	0xFF3
  3697                           intcon	equ	0xFF2
  3698                           postinc0	equ	0xFEE
  3699                           plusw0	equ	0xFEB
  3700                           wreg	equ	0xFE8
  3701                           indf1	equ	0xFE7
  3702                           postinc1	equ	0xFE6
  3703                           postdec1	equ	0xFE5
  3704                           plusw1	equ	0xFE3
  3705                           fsr1h	equ	0xFE2
  3706                           fsr1l	equ	0xFE1
  3707                           indf2	equ	0xFDF
  3708                           postinc2	equ	0xFDE
  3709                           postdec2	equ	0xFDD
  3710                           plusw2	equ	0xFDB
  3711                           fsr2h	equ	0xFDA
  3712                           fsr2l	equ	0xFD9
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function _ReadGPSDateTime *****************
  3716 ;; Defined at:
  3717 ;;		line 39 in file "libs/gps.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  3720 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  3721 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  3722 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;  StartCode       8    6[BANK0 ] const unsigned char [8]
  3725 ;;  i               2   14[BANK0 ] unsigned short 
  3726 ;;  Pos             1   18[BANK0 ] unsigned char 
  3727 ;;  TempChar        1   17[BANK0 ] unsigned char 
  3728 ;;  Commas          1   16[BANK0 ] unsigned char 
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  1    wreg      void 
  3731 ;; Registers used:
  3732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3733 ;; Tracked objects:
  3734 ;;		On entry : 3F/0
  3735 ;;		On exit  : 3F/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3739 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3740 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3741 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3742 ;;Total ram usage:       19 bytes
  3743 ;; Hardware stack levels used:    1
  3744 ;; Hardware stack levels required when called:   10
  3745 ;; This function calls:
  3746 ;;		_EUSART1_Read
  3747 ;; This function is called by:
  3748 ;;		_ReadGPS_DATE_TIME
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text16
  3753  0022A8                     __ptext16:
  3754                           	opt stack 0
  3755  0022A8                     _ReadGPSDateTime:
  3756                           	opt stack 18
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;gps.c: 40: const char StartCode[]="$GPRMC,";
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;incstack = 0
  3763  0022A8  0E01               	movlw	low ReadGPSDateTime@F11467
  3764  0022AA  6EF6               	movwf	tblptrl,c
  3765  0022AC                     	if	1	;There is more than 1 active tblptr byte
  3766  0022AC  0E0F               	movlw	high ReadGPSDateTime@F11467
  3767  0022AE  6EF7               	movwf	tblptrh,c
  3768  0022B0                     	endif
  3769  0022B0                     	if	1	;There are 3 active tblptr bytes
  3770  0022B0  0E00               	movlw	low (ReadGPSDateTime@F11467 shr (0+16))
  3771  0022B2  6EF8               	movwf	tblptru,c
  3772  0022B4                     	endif
  3773  0022B4  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  3774  0022B8  0E07               	movlw	7
  3775  0022BA                     u3400:
  3776  0022BA  0009               	tblrd		*+
  3777  0022BC  CFF5 FFDE          	movff	tablat,postinc2
  3778  0022C0  06E8               	decf	wreg,f,c
  3779  0022C2  E2FB               	bc	u3400
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;gps.c: 41: char Pos=0x00;
  3783  0022C4  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;gps.c: 43: UINT16 i=0;
  3787                           
  3788                           ; BSR set to: 0
  3789  0022C6  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  3790  0022C8  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;gps.c: 44: UINT8 Commas=0;
  3794  0022CA  6B70               	clrf	ReadGPSDateTime@Commas& (0+255),b
  3795  0022CC                     l3605:
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  3799  0022CC  010E               	movlb	14	; () banked
  3800  0022CE  ABCD               	btfss	205,5,b	;volatile
  3801  0022D0  D047               	goto	l3639
  3802                           
  3803                           ; BSR set to: 14
  3804                           ;gps.c: 47: i=0;
  3805  0022D2  0100               	movlb	0	; () banked
  3806  0022D4  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  3807  0022D6  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  3808                           
  3809                           ; BSR set to: 0
  3810                           ;gps.c: 48: TempChar = EUSART1_Read();
  3811  0022D8  ECA1  F016         	call	_EUSART1_Read	;wreg free
  3812  0022DC  0100               	movlb	0	; () banked
  3813  0022DE  6F71               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  3814                           
  3815                           ; BSR set to: 0
  3816                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  3817  0022E0  0E06               	movlw	6
  3818  0022E2  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  3819  0022E4  D00D               	goto	l3619
  3820                           
  3821                           ; BSR set to: 0
  3822  0022E6  0E0D               	movlw	13
  3823  0022E8  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  3824  0022EA  D00A               	goto	l3619
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  3828  0022EC  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  3829  0022EE  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  3830  0022F0  6ED9               	movwf	fsr2l,c
  3831  0022F2  6ADA               	clrf	fsr2h,c
  3832  0022F4  0EF9               	movlw	249
  3833  0022F6  26D9               	addwf	fsr2l,f,c
  3834  0022F8  C071  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  3835  0022FC                     l3617:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;gps.c: 51: Pos++;
  3839  0022FC  2B72               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  3840                           
  3841                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  3842  0022FE  D034               	goto	l3641
  3843  002300                     l3619:
  3844                           
  3845                           ; BSR set to: 0
  3846  002300  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  3847  002302  0F66               	addlw	low ReadGPSDateTime@StartCode
  3848  002304  6ED9               	movwf	fsr2l,c
  3849  002306  6ADA               	clrf	fsr2h,c
  3850  002308  5171               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  3851  00230A  18DE               	xorwf	postinc2,w,c
  3852  00230C  E104               	bnz	l3625
  3853                           
  3854                           ; BSR set to: 0
  3855  00230E  0E07               	movlw	7
  3856  002310  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  3857  002312  D001               	goto	l3625
  3858  002314  D7F3               	goto	l3617
  3859  002316                     l3625:
  3860                           
  3861                           ; BSR set to: 0
  3862  002316  0E0C               	movlw	12
  3863  002318  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  3864  00231A  D020               	goto	l125
  3865                           
  3866                           ; BSR set to: 0
  3867                           ;gps.c: 55: if (Commas<8) {
  3868  00231C  0E08               	movlw	8
  3869  00231E  6170               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  3870  002320  D005               	goto	l3633
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;gps.c: 56: if (TempChar == 0x2C)
  3874  002322  0E2C               	movlw	44
  3875  002324  1971               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  3876  002326  E120               	bnz	l3641
  3877                           
  3878                           ; BSR set to: 0
  3879                           ;gps.c: 57: Commas++;
  3880  002328  2B70               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  3881  00232A  D01E               	goto	l3641
  3882  00232C                     l3633:
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  3886  00232C  0EF3               	movlw	243
  3887  00232E  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  3888  002330  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  3889  002332  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  3890  002334  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  3891  002336  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  3892  002338  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  3893  00233A  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  3894  00233C  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  3895  00233E  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  3896  002340  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  3897  002342  D006               	goto	l3635
  3898  002344  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  3899  002346  E118               	bnz	l131
  3900  002348  0E06               	movlw	6
  3901  00234A  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  3902  00234C  B0D8               	btfsc	status,0,c
  3903  00234E  0012               	return	
  3904  002350                     l3635:
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  3908  002350  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  3909  002352  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  3910  002354  6ED9               	movwf	fsr2l,c
  3911  002356  6ADA               	clrf	fsr2h,c
  3912  002358  0EF3               	movlw	243
  3913  00235A  D7CD               	goto	L1
  3914  00235C                     l125:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;gps.c: 66: Pos=0;
  3918  00235C  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  3919                           
  3920                           ; BSR set to: 0
  3921  00235E  D004               	goto	l3641
  3922  002360                     l3639:
  3923                           
  3924                           ; BSR set to: 14
  3925                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  3926  002360  0E06               	movlw	6
  3927  002362                     u4677:
  3928  002362  2EE8               	decfsz	wreg,f,c
  3929  002364  D7FE               	bra	u4677
  3930  002366  D000               	nop2	
  3931  002368                     l3641:
  3932                           
  3933                           ;gps.c: 69: i++;
  3934  002368  0100               	movlb	0	; () banked
  3935  00236A  4B6E               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  3936  00236C  2B6F               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  3937                           
  3938                           ;gps.c: 70: } while(i<5000);
  3939  00236E  0E88               	movlw	136
  3940  002370  5D6E               	subwf	ReadGPSDateTime@i& (0+255),w,b
  3941  002372  0E13               	movlw	19
  3942  002374  596F               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  3943  002376  E3AA               	bnc	l3605
  3944  002378                     l131:
  3945                           
  3946                           ; BSR set to: 0
  3947  002378  0012               	return		;funcret
  3948  00237A                     __end_of_ReadGPSDateTime:
  3949                           	opt stack 0
  3950                           tosu	equ	0xFFF
  3951                           tosh	equ	0xFFE
  3952                           tosl	equ	0xFFD
  3953                           pclath	equ	0xFFA
  3954                           tblptru	equ	0xFF8
  3955                           tblptrh	equ	0xFF7
  3956                           tblptrl	equ	0xFF6
  3957                           tablat	equ	0xFF5
  3958                           prodh	equ	0xFF4
  3959                           prodl	equ	0xFF3
  3960                           intcon	equ	0xFF2
  3961                           postinc0	equ	0xFEE
  3962                           plusw0	equ	0xFEB
  3963                           wreg	equ	0xFE8
  3964                           indf1	equ	0xFE7
  3965                           postinc1	equ	0xFE6
  3966                           postdec1	equ	0xFE5
  3967                           plusw1	equ	0xFE3
  3968                           fsr1h	equ	0xFE2
  3969                           fsr1l	equ	0xFE1
  3970                           indf2	equ	0xFDF
  3971                           postinc2	equ	0xFDE
  3972                           postdec2	equ	0xFDD
  3973                           plusw2	equ	0xFDB
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _EUSART1_Read *****************
  3979 ;; Defined at:
  3980 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      unsigned char 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2
  3989 ;; Tracked objects:
  3990 ;;		On entry : 3F/0
  3991 ;;		On exit  : 3F/E
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    9
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_ReadGPSDateTime
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text17
  4009  002D42                     __ptext17:
  4010                           	opt stack 0
  4011  002D42                     _EUSART1_Read:
  4012                           	opt stack 18
  4013  002D42                     l736:
  4014  002D42  010E               	movlb	14	; () banked
  4015  002D44  ABCD               	btfss	205,5,b	;volatile
  4016  002D46  D7FD               	goto	l736
  4017                           
  4018                           ; BSR set to: 14
  4019                           ;eusart1.c: 82: }
  4020                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  4021  002D48  A29D               	btfss	3997,1,c	;volatile
  4022  002D4A  D002               	goto	l3279
  4023                           
  4024                           ; BSR set to: 14
  4025                           ;eusart1.c: 86: {
  4026                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  4027  002D4C  9E9D               	bcf	3997,7,c	;volatile
  4028                           
  4029                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  4030  002D4E  8E9D               	bsf	3997,7,c	;volatile
  4031  002D50                     l3279:
  4032                           
  4033                           ; BSR set to: 14
  4034                           ;eusart1.c: 91: }
  4035                           ;eusart1.c: 93: return RC1REG;
  4036  002D50  5099               	movf	3993,w,c	;volatile
  4037                           
  4038                           ; BSR set to: 14
  4039  002D52  0012               	return		;funcret
  4040  002D54                     __end_of_EUSART1_Read:
  4041                           	opt stack 0
  4042                           tosu	equ	0xFFF
  4043                           tosh	equ	0xFFE
  4044                           tosl	equ	0xFFD
  4045                           pclath	equ	0xFFA
  4046                           tblptru	equ	0xFF8
  4047                           tblptrh	equ	0xFF7
  4048                           tblptrl	equ	0xFF6
  4049                           tablat	equ	0xFF5
  4050                           prodh	equ	0xFF4
  4051                           prodl	equ	0xFF3
  4052                           intcon	equ	0xFF2
  4053                           postinc0	equ	0xFEE
  4054                           plusw0	equ	0xFEB
  4055                           wreg	equ	0xFE8
  4056                           indf1	equ	0xFE7
  4057                           postinc1	equ	0xFE6
  4058                           postdec1	equ	0xFE5
  4059                           plusw1	equ	0xFE3
  4060                           fsr1h	equ	0xFE2
  4061                           fsr1l	equ	0xFE1
  4062                           indf2	equ	0xFDF
  4063                           postinc2	equ	0xFDE
  4064                           postdec2	equ	0xFDD
  4065                           plusw2	equ	0xFDB
  4066                           fsr2h	equ	0xFDA
  4067                           fsr2l	equ	0xFD9
  4068                           status	equ	0xFD8
  4069                           
  4070 ;; *************** function _GetDay *****************
  4071 ;; Defined at:
  4072 ;;		line 129 in file "libs/gps.c"
  4073 ;; Parameters:    Size  Location     Type
  4074 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  4075 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;  y               2   23[BANK0 ] int 
  4078 ;;  m               1   22[BANK0 ] unsigned char 
  4079 ;;  d               1   21[BANK0 ] unsigned char 
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      char 
  4082 ;; Registers used:
  4083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 3F/0
  4086 ;;		On exit  : 3F/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4089 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4090 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4091 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4092 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4093 ;;Total ram usage:       11 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:   10
  4096 ;; This function calls:
  4097 ;;		___awdiv
  4098 ;;		___awmod
  4099 ;; This function is called by:
  4100 ;;		_ReadGPS_DATE_TIME
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text18
  4105  001D00                     __ptext18:
  4106                           	opt stack 0
  4107  001D00                     _GetDay:
  4108                           	opt stack 18
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  4112                           
  4113                           ; BSR set to: 14
  4114                           ;incstack = 0
  4115  001D00  516E               	movf	GetDay@Date& (0+255),w,b
  4116  001D02  EC6B  F010         	call	PL82	;call to abstracted procedure
  4117  001D06  D87F               	call	PL114	;call to abstracted procedure
  4118  001D08  50DF               	movf	indf2,w,c
  4119  001D0A  0D0A               	mullw	10
  4120  001D0C  50F3               	movf	prodl,w,c
  4121  001D0E  256F               	addwf	??_GetDay& (0+255),w,b
  4122  001D10  0FF0               	addlw	240
  4123  001D12  6F75               	movwf	GetDay@d& (0+255),b
  4124                           
  4125                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  4126  001D14  516E               	movf	GetDay@Date& (0+255),w,b
  4127  001D16  EC5F  F010         	call	PL50	;call to abstracted procedure
  4128  001D1A  D875               	call	PL114	;call to abstracted procedure
  4129  001D1C  0E02               	movlw	2
  4130  001D1E  D868               	call	PL14	;call to abstracted procedure
  4131  001D20  256F               	addwf	??_GetDay& (0+255),w,b
  4132  001D22  0FF0               	addlw	240
  4133  001D24  6F76               	movwf	GetDay@m& (0+255),b
  4134                           
  4135                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  4136  001D26  51FD               	movf	_CENTURY& (0+255),w,b
  4137  001D28  0D64               	mullw	100
  4138  001D2A  CFF3 F06F          	movff	prodl,??_GetDay
  4139  001D2E  CFF4 F070          	movff	prodh,??_GetDay+1
  4140  001D32  516E               	movf	GetDay@Date& (0+255),w,b
  4141  001D34  6ED9               	movwf	fsr2l,c
  4142  001D36  6ADA               	clrf	fsr2h,c
  4143  001D38  0E04               	movlw	4
  4144  001D3A  D85A               	call	PL14	;call to abstracted procedure
  4145  001D3C  276F               	addwf	??_GetDay& (0+255),f,b
  4146  001D3E  50F4               	movf	prodh,w,c
  4147  001D40  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  4148  001D42  516E               	movf	GetDay@Date& (0+255),w,b
  4149  001D44  EC65  F010         	call	PL56	;call to abstracted procedure
  4150  001D48  276F               	addwf	??_GetDay& (0+255),f,b
  4151  001D4A  0E00               	movlw	0
  4152  001D4C  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  4153  001D4E  0EF0               	movlw	240
  4154  001D50  256F               	addwf	??_GetDay& (0+255),w,b
  4155  001D52  6F77               	movwf	GetDay@y& (0+255),b
  4156  001D54  0EFD               	movlw	253
  4157  001D56  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  4158  001D58  6F78               	movwf	(GetDay@y+1)& (0+255),b
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  4162                           ;gps.c: 134: y -= m < 3;
  4163  001D5A  0E02               	movlw	2
  4164  001D5C  6576               	cpfsgt	GetDay@m& (0+255),b
  4165  001D5E  D001               	goto	u3511
  4166  001D60  D002               	goto	u3510
  4167  001D62                     u3511:
  4168  001D62  0E01               	movlw	1
  4169  001D64  D001               	goto	u3520
  4170  001D66                     u3510:
  4171  001D66  0E00               	movlw	0
  4172  001D68                     u3520:
  4173  001D68  5F77               	subwf	GetDay@y& (0+255),f,b
  4174  001D6A  0E00               	movlw	0
  4175  001D6C  5B78               	subwfb	(GetDay@y+1)& (0+255),f,b
  4176                           
  4177                           ; BSR set to: 0
  4178                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  4179  001D6E  5176               	movf	GetDay@m& (0+255),w,b
  4180  001D70  6F6F               	movwf	??_GetDay& (0+255),b
  4181  001D72  6B70               	clrf	(??_GetDay+1)& (0+255),b
  4182  001D74  90D8               	bcf	status,0,c
  4183  001D76  376F               	rlcf	??_GetDay& (0+255),f,b
  4184  001D78  3770               	rlcf	(??_GetDay+1)& (0+255),f,b
  4185  001D7A  0E5A               	movlw	low (GetDay@t+65534)
  4186  001D7C  256F               	addwf	??_GetDay& (0+255),w,b
  4187  001D7E  6ED9               	movwf	fsr2l,c
  4188  001D80  0E01               	movlw	high (GetDay@t+65534)
  4189  001D82  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  4190  001D84  6EDA               	movwf	fsr2h,c
  4191  001D86  CFDE F071          	movff	postinc2,??_GetDay+2
  4192  001D8A  CFDD F072          	movff	postdec2,??_GetDay+3
  4193  001D8E  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4194  001D90  0E04               	movlw	4
  4195  001D92  D833               	call	PL74	;call to abstracted procedure
  4196  001D94  EC5D  F013         	call	___awdiv	;wreg free
  4197  001D98  C060  F073         	movff	?___awdiv,??_GetDay+4
  4198  001D9C  C061  F074         	movff	?___awdiv+1,??_GetDay+5
  4199  001DA0  0E01               	movlw	1
  4200  001DA2  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4201  001DA4  0E90               	movlw	144
  4202  001DA6  D829               	call	PL74	;call to abstracted procedure
  4203  001DA8  EC5D  F013         	call	___awdiv	;wreg free
  4204  001DAC  5160               	movf	?___awdiv& (0+255),w,b
  4205  001DAE  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  4206  001DB0  5161               	movf	(?___awdiv+1)& (0+255),w,b
  4207  001DB2  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  4208  001DB4  5175               	movf	GetDay@d& (0+255),w,b
  4209  001DB6  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  4210  001DB8  0E00               	movlw	0
  4211  001DBA  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  4212  001DBC  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  4213  001DBE  0E64               	movlw	100
  4214  001DC0  D81C               	call	PL74	;call to abstracted procedure
  4215  001DC2  EC5D  F013         	call	___awdiv	;wreg free
  4216  001DC6  5160               	movf	?___awdiv& (0+255),w,b
  4217  001DC8  5F73               	subwf	(??_GetDay+4)& (0+255),f,b
  4218  001DCA  5161               	movf	(?___awdiv+1)& (0+255),w,b
  4219  001DCC  5B74               	subwfb	(??_GetDay+5)& (0+255),f,b
  4220  001DCE  5171               	movf	(??_GetDay+2)& (0+255),w,b
  4221  001DD0  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  4222  001DD2  5172               	movf	(??_GetDay+3)& (0+255),w,b
  4223  001DD4  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  4224  001DD6  5177               	movf	GetDay@y& (0+255),w,b
  4225  001DD8  2573               	addwf	(??_GetDay+4)& (0+255),w,b
  4226  001DDA  6F68               	movwf	___awmod@dividend& (0+255),b
  4227  001DDC  5178               	movf	(GetDay@y+1)& (0+255),w,b
  4228  001DDE  2174               	addwfc	(??_GetDay+5)& (0+255),w,b
  4229  001DE0  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  4230  001DE2  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  4231  001DE4  0E07               	movlw	7
  4232  001DE6  6F6A               	movwf	___awmod@divisor& (0+255),b
  4233  001DE8  ECCE  F013         	call	___awmod	;wreg free
  4234  001DEC  5168               	movf	?___awmod& (0+255),w,b
  4235                           
  4236                           ; BSR set to: 0
  4237  001DEE  0012               	return		;funcret
  4238  001DF0                     __end_of_GetDay:
  4239                           	opt stack 0
  4240  001DF0                     PL14:
  4241                           	opt stack 18
  4242  001DF0  26D9               	addwf	fsr2l,f,c
  4243  001DF2  50DF               	movf	indf2,w,c
  4244  001DF4  0D0A               	mullw	10
  4245  001DF6  50F3               	movf	prodl,w,c
  4246  001DF8  0012               	return	
  4247  001DFA                     __end_ofPL14:
  4248                           	opt stack 0
  4249  001DFA                     PL74:
  4250                           	opt stack 18
  4251  001DFA  6F62               	movwf	___awdiv@divisor& (0+255),b
  4252  001DFC  C077  F060         	movff	GetDay@y,___awdiv@dividend
  4253  001E00  C078  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  4254  001E04  0012               	return	
  4255  001E06                     __end_ofPL74:
  4256                           	opt stack 0
  4257  001E06                     PL114:
  4258                           	opt stack 18
  4259  001E06  6F6F               	movwf	??_GetDay& (0+255),b
  4260  001E08  516E               	movf	GetDay@Date& (0+255),w,b
  4261  001E0A  6ED9               	movwf	fsr2l,c
  4262  001E0C  6ADA               	clrf	fsr2h,c
  4263  001E0E  0012               	return	
  4264  001E10                     __end_ofPL114:
  4265                           	opt stack 0
  4266                           tosu	equ	0xFFF
  4267                           tosh	equ	0xFFE
  4268                           tosl	equ	0xFFD
  4269                           pclath	equ	0xFFA
  4270                           tblptru	equ	0xFF8
  4271                           tblptrh	equ	0xFF7
  4272                           tblptrl	equ	0xFF6
  4273                           tablat	equ	0xFF5
  4274                           prodh	equ	0xFF4
  4275                           prodl	equ	0xFF3
  4276                           intcon	equ	0xFF2
  4277                           postinc0	equ	0xFEE
  4278                           plusw0	equ	0xFEB
  4279                           wreg	equ	0xFE8
  4280                           indf1	equ	0xFE7
  4281                           postinc1	equ	0xFE6
  4282                           postdec1	equ	0xFE5
  4283                           plusw1	equ	0xFE3
  4284                           fsr1h	equ	0xFE2
  4285                           fsr1l	equ	0xFE1
  4286                           indf2	equ	0xFDF
  4287                           postinc2	equ	0xFDE
  4288                           postdec2	equ	0xFDD
  4289                           plusw2	equ	0xFDB
  4290                           fsr2h	equ	0xFDA
  4291                           fsr2l	equ	0xFD9
  4292                           status	equ	0xFD8
  4293                           
  4294 ;; *************** function ___awmod *****************
  4295 ;; Defined at:
  4296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  4297 ;; Parameters:    Size  Location     Type
  4298 ;;  dividend        2    8[BANK0 ] int 
  4299 ;;  divisor         2   10[BANK0 ] int 
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  sign            1   13[BANK0 ] unsigned char 
  4302 ;;  counter         1   12[BANK0 ] unsigned char 
  4303 ;; Return value:  Size  Location     Type
  4304 ;;                  2    8[BANK0 ] int 
  4305 ;; Registers used:
  4306 ;;		wreg, status,2, status,0
  4307 ;; Tracked objects:
  4308 ;;		On entry : 3F/0
  4309 ;;		On exit  : 3F/0
  4310 ;;		Unchanged: 0/0
  4311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4312 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4313 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4315 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4316 ;;Total ram usage:        6 bytes
  4317 ;; Hardware stack levels used:    1
  4318 ;; Hardware stack levels required when called:    9
  4319 ;; This function calls:
  4320 ;;		Nothing
  4321 ;; This function is called by:
  4322 ;;		_GetDay
  4323 ;; This function uses a non-reentrant model
  4324 ;;
  4325                           
  4326                           	psect	text19
  4327  00279C                     __ptext19:
  4328                           	opt stack 0
  4329  00279C                     ___awmod:
  4330                           	opt stack 18
  4331                           
  4332                           ; BSR set to: 0
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;incstack = 0
  4336  00279C  6B6D               	clrf	___awmod@sign& (0+255),b
  4337                           
  4338                           ; BSR set to: 0
  4339  00279E  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  4340  0027A0  D006               	goto	l3523
  4341                           
  4342                           ; BSR set to: 0
  4343  0027A2  6D68               	negf	___awmod@dividend& (0+255),b
  4344  0027A4  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  4345  0027A6  B0D8               	btfsc	status,0,c
  4346  0027A8  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  4347                           
  4348                           ; BSR set to: 0
  4349  0027AA  0E01               	movlw	1
  4350  0027AC  6F6D               	movwf	___awmod@sign& (0+255),b
  4351  0027AE                     l3523:
  4352                           
  4353                           ; BSR set to: 0
  4354  0027AE  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4355  0027B0  D004               	goto	l3527
  4356                           
  4357                           ; BSR set to: 0
  4358  0027B2  6D6A               	negf	___awmod@divisor& (0+255),b
  4359  0027B4  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  4360  0027B6  B0D8               	btfsc	status,0,c
  4361  0027B8  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  4362  0027BA                     l3527:
  4363                           
  4364                           ; BSR set to: 0
  4365  0027BA  516A               	movf	___awmod@divisor& (0+255),w,b
  4366  0027BC  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  4367  0027BE  E017               	bz	l3543
  4368                           
  4369                           ; BSR set to: 0
  4370  0027C0  0E01               	movlw	1
  4371  0027C2  6F6C               	movwf	___awmod@counter& (0+255),b
  4372  0027C4  D004               	goto	l3533
  4373  0027C6                     l3531:
  4374                           
  4375                           ; BSR set to: 0
  4376  0027C6  90D8               	bcf	status,0,c
  4377  0027C8  376A               	rlcf	___awmod@divisor& (0+255),f,b
  4378  0027CA  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4379  0027CC  2B6C               	incf	___awmod@counter& (0+255),f,b
  4380  0027CE                     l3533:
  4381                           
  4382                           ; BSR set to: 0
  4383  0027CE  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4384  0027D0  D7FA               	goto	l3531
  4385  0027D2                     l3535:
  4386                           
  4387                           ; BSR set to: 0
  4388  0027D2  516A               	movf	___awmod@divisor& (0+255),w,b
  4389  0027D4  5D68               	subwf	___awmod@dividend& (0+255),w,b
  4390  0027D6  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  4391  0027D8  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4392  0027DA  E304               	bnc	l3539
  4393                           
  4394                           ; BSR set to: 0
  4395  0027DC  516A               	movf	___awmod@divisor& (0+255),w,b
  4396  0027DE  5F68               	subwf	___awmod@dividend& (0+255),f,b
  4397  0027E0  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  4398  0027E2  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4399  0027E4                     l3539:
  4400                           
  4401                           ; BSR set to: 0
  4402  0027E4  90D8               	bcf	status,0,c
  4403  0027E6  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4404  0027E8  336A               	rrcf	___awmod@divisor& (0+255),f,b
  4405                           
  4406                           ; BSR set to: 0
  4407  0027EA  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  4408  0027EC  D7F2               	goto	l3535
  4409  0027EE                     l3543:
  4410                           
  4411                           ; BSR set to: 0
  4412  0027EE  516D               	movf	___awmod@sign& (0+255),w,b
  4413  0027F0  E004               	bz	l3547
  4414                           
  4415                           ; BSR set to: 0
  4416  0027F2  6D68               	negf	___awmod@dividend& (0+255),b
  4417  0027F4  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  4418  0027F6  B0D8               	btfsc	status,0,c
  4419  0027F8  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  4420  0027FA                     l3547:
  4421                           
  4422                           ; BSR set to: 0
  4423  0027FA  C068  F068         	movff	___awmod@dividend,?___awmod
  4424  0027FE  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  4425                           
  4426                           ; BSR set to: 0
  4427  002802  0012               	return		;funcret
  4428  002804                     __end_of___awmod:
  4429                           	opt stack 0
  4430                           tosu	equ	0xFFF
  4431                           tosh	equ	0xFFE
  4432                           tosl	equ	0xFFD
  4433                           pclath	equ	0xFFA
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           intcon	equ	0xFF2
  4441                           postinc0	equ	0xFEE
  4442                           plusw0	equ	0xFEB
  4443                           wreg	equ	0xFE8
  4444                           indf1	equ	0xFE7
  4445                           postinc1	equ	0xFE6
  4446                           postdec1	equ	0xFE5
  4447                           plusw1	equ	0xFE3
  4448                           fsr1h	equ	0xFE2
  4449                           fsr1l	equ	0xFE1
  4450                           indf2	equ	0xFDF
  4451                           postinc2	equ	0xFDE
  4452                           postdec2	equ	0xFDD
  4453                           plusw2	equ	0xFDB
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _EUSART1_Initialize *****************
  4459 ;; Defined at:
  4460 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;		None
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  1    wreg      void 
  4467 ;; Registers used:
  4468 ;;		wreg, status,2
  4469 ;; Tracked objects:
  4470 ;;		On entry : 3F/0
  4471 ;;		On exit  : 3F/0
  4472 ;;		Unchanged: 3F/0
  4473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4478 ;;Total ram usage:        0 bytes
  4479 ;; Hardware stack levels used:    1
  4480 ;; Hardware stack levels required when called:    9
  4481 ;; This function calls:
  4482 ;;		Nothing
  4483 ;; This function is called by:
  4484 ;;		_ReadGPS_DATE_TIME
  4485 ;;		_SYSTEM_Initialize
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text20
  4490  002D1A                     __ptext20:
  4491                           	opt stack 0
  4492  002D1A                     _EUSART1_Initialize:
  4493                           	opt stack 20
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;eusart1.c: 60: BAUD1CON = 0x08;
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;incstack = 0
  4500  002D1A  0E08               	movlw	8
  4501  002D1C  6E9F               	movwf	3999,c	;volatile
  4502                           
  4503                           ;eusart1.c: 63: RC1STA = 0x90;
  4504  002D1E  0E90               	movlw	144
  4505  002D20  6E9D               	movwf	3997,c	;volatile
  4506                           
  4507                           ;eusart1.c: 66: TX1STA = 0x84;
  4508  002D22  0E84               	movlw	132
  4509  002D24  6E9E               	movwf	3998,c	;volatile
  4510                           
  4511                           ;eusart1.c: 69: SP1BRGL = 0x67;
  4512  002D26  0E67               	movlw	103
  4513  002D28  6E9B               	movwf	3995,c	;volatile
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;eusart1.c: 72: SP1BRGH = 0x00;
  4517  002D2A  6A9C               	clrf	3996,c	;volatile
  4518                           
  4519                           ; BSR set to: 0
  4520  002D2C  0012               	return		;funcret
  4521  002D2E                     __end_of_EUSART1_Initialize:
  4522                           	opt stack 0
  4523                           tosu	equ	0xFFF
  4524                           tosh	equ	0xFFE
  4525                           tosl	equ	0xFFD
  4526                           pclath	equ	0xFFA
  4527                           tblptru	equ	0xFF8
  4528                           tblptrh	equ	0xFF7
  4529                           tblptrl	equ	0xFF6
  4530                           tablat	equ	0xFF5
  4531                           prodh	equ	0xFF4
  4532                           prodl	equ	0xFF3
  4533                           intcon	equ	0xFF2
  4534                           postinc0	equ	0xFEE
  4535                           plusw0	equ	0xFEB
  4536                           wreg	equ	0xFE8
  4537                           indf1	equ	0xFE7
  4538                           postinc1	equ	0xFE6
  4539                           postdec1	equ	0xFE5
  4540                           plusw1	equ	0xFE3
  4541                           fsr1h	equ	0xFE2
  4542                           fsr1l	equ	0xFE1
  4543                           indf2	equ	0xFDF
  4544                           postinc2	equ	0xFDE
  4545                           postdec2	equ	0xFDD
  4546                           plusw2	equ	0xFDB
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function _AdjustDayLightSaving *****************
  4552 ;; Defined at:
  4553 ;;		line 93 in file "libs/funcs.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;  Present         2   56[BANK0 ] unsigned short 
  4558 ;;  End             2   54[BANK0 ] unsigned short 
  4559 ;;  Start           2   52[BANK0 ] unsigned short 
  4560 ;; Return value:  Size  Location     Type
  4561 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  4562 ;; Registers used:
  4563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4564 ;; Tracked objects:
  4565 ;;		On entry : 3F/0
  4566 ;;		On exit  : 3F/0
  4567 ;;		Unchanged: 0/0
  4568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4569 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4570 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4572 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4573 ;;Total ram usage:       17 bytes
  4574 ;; Hardware stack levels used:    1
  4575 ;; Hardware stack levels required when called:   13
  4576 ;; This function calls:
  4577 ;;		_DecreaseByADay
  4578 ;;		_IncreaseByADay
  4579 ;;		___wmul
  4580 ;; This function is called by:
  4581 ;;		_ReadGPS_DATE_TIME
  4582 ;; This function uses a non-reentrant model
  4583 ;;
  4584                           
  4585                           	psect	text21
  4586  001BDC                     __ptext21:
  4587                           	opt stack 0
  4588  001BDC                     _AdjustDayLightSaving:
  4589                           	opt stack 15
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;funcs.c: 94: UINT16 Start, End, Present;
  4593                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;incstack = 0
  4597  001BDC  C0DA  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  4598  001BE0  C0DB  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  4599  001BE4  D889               	call	PL122	;call to abstracted procedure
  4600  001BE6  EC01  F016         	call	___wmul	;wreg free
  4601  001BEA  51D8               	movf	_DAY_LIGHT_START& (0+255),w,b
  4602  001BEC  2560               	addwf	?___wmul& (0+255),w,b
  4603  001BEE  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  4604  001BF0  51D9               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  4605  001BF2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4606  001BF4  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  4607                           
  4608                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  4609  001BF6  C0D6  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  4610  001BFA  C0D7  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  4611  001BFE  D87C               	call	PL122	;call to abstracted procedure
  4612  001C00  EC01  F016         	call	___wmul	;wreg free
  4613  001C04  51D4               	movf	_DAY_LIGHT_END& (0+255),w,b
  4614  001C06  2560               	addwf	?___wmul& (0+255),w,b
  4615  001C08  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  4616  001C0A  51D5               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  4617  001C0C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4618  001C0E  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  4619                           
  4620                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  4621  001C10  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  4622  001C14  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  4623  001C18  D86F               	call	PL122	;call to abstracted procedure
  4624  001C1A  EC01  F016         	call	___wmul	;wreg free
  4625  001C1E  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  4626  001C20  2560               	addwf	?___wmul& (0+255),w,b
  4627  001C22  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  4628  001C24  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  4629  001C26  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  4630  001C28  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;funcs.c: 98: if (Start > End) {
  4634  001C2A  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  4635  001C2C  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  4636  001C2E  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  4637  001C30  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  4638  001C32  E20F               	bc	l3737
  4639                           
  4640                           ; BSR set to: 0
  4641                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  4642  001C34  D85C               	call	PL96	;call to abstracted procedure
  4643  001C36  E205               	bc	l3735
  4644  001C38                     l3733:
  4645                           
  4646                           ; BSR set to: 0
  4647  001C38  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  4648  001C3A  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  4649  001C3C  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  4650  001C3E  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  4651  001C40  E30B               	bnc	l649
  4652  001C42                     l3735:
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;funcs.c: 100: dt.SECOND += 3600;
  4656  001C42  0E10               	movlw	16
  4657  001C44  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  4658  001C46  0E0E               	movlw	14
  4659  001C48  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  4660  001C4A  0E00               	movlw	0
  4661  001C4C  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  4662  001C4E  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  4663  001C50  D003               	goto	l649
  4664  001C52                     l3737:
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  4668  001C52  D84D               	call	PL96	;call to abstracted procedure
  4669  001C54  E301               	bnc	l649
  4670  001C56  D7F0               	goto	l3733
  4671  001C58                     l649:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;funcs.c: 104: }
  4675                           ;funcs.c: 105: if (dt.SECOND < 0) {
  4676  001C58  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  4677  001C5A  D01A               	goto	l3747
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;funcs.c: 106: dt.SECOND += 86400;
  4681  001C5C  0E80               	movlw	128
  4682  001C5E  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  4683  001C60  0E51               	movlw	81
  4684  001C62  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  4685  001C64  0E01               	movlw	1
  4686  001C66  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  4687  001C68  0E00               	movlw	0
  4688  001C6A  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  4692  001C6C  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4693  001C70  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  4694  001C74  0E0A               	movlw	10
  4695  001C76                     u3711:
  4696  001C76  CFDB FFEB          	movff	plusw2,plusw0
  4697  001C7A  06E8               	decf	wreg,f,c
  4698  001C7C  E2FC               	bc	u3711
  4699  001C7E  EC82  F00F         	call	_DecreaseByADay	;wreg free
  4700  001C82  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4701  001C86  0E0A               	movlw	10
  4702  001C88                     u3721:
  4703  001C88  CFEB FFDB          	movff	plusw0,plusw2
  4704  001C8C  06E8               	decf	wreg,f,c
  4705  001C8E  E2FC               	bc	u3721
  4706  001C90                     l3747:
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;funcs.c: 108: }
  4710                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  4711  001C90  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  4712  001C92  D023               	goto	l3753
  4713  001C94  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  4714  001C96  E107               	bnz	u3730
  4715  001C98  0E81               	movlw	129
  4716  001C9A  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  4717  001C9C  0E51               	movlw	81
  4718  001C9E  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  4719  001CA0  0E01               	movlw	1
  4720  001CA2  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  4721  001CA4  E31A               	bnc	l3753
  4722  001CA6                     u3730:
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;funcs.c: 110: dt.SECOND -= 86400;
  4726  001CA6  0E80               	movlw	128
  4727  001CA8  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  4728  001CAA  0EAE               	movlw	174
  4729  001CAC  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  4730  001CAE  0EFE               	movlw	254
  4731  001CB0  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  4732  001CB2  0EFF               	movlw	255
  4733  001CB4  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  4737  001CB6  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4738  001CBA  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  4739  001CBE  0E0A               	movlw	10
  4740  001CC0                     u3741:
  4741  001CC0  CFDB FFEB          	movff	plusw2,plusw0
  4742  001CC4  06E8               	decf	wreg,f,c
  4743  001CC6  E2FC               	bc	u3741
  4744  001CC8  ECE3  F010         	call	_IncreaseByADay	;wreg free
  4745  001CCC  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4746  001CD0  0E0A               	movlw	10
  4747  001CD2                     u3751:
  4748  001CD2  CFEB FFDB          	movff	plusw0,plusw2
  4749  001CD6  06E8               	decf	wreg,f,c
  4750  001CD8  E2FC               	bc	u3751
  4751  001CDA                     l3753:
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;funcs.c: 112: }
  4755                           ;funcs.c: 113: return dt;
  4756  001CDA  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  4757  001CDE  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  4758  001CE2  0E0A               	movlw	10
  4759  001CE4                     u3761:
  4760  001CE4  CFDB FFEB          	movff	plusw2,plusw0
  4761  001CE8  06E8               	decf	wreg,f,c
  4762  001CEA  E2FC               	bc	u3761
  4763                           
  4764                           ; BSR set to: 0
  4765  001CEC  0012               	return		;funcret
  4766  001CEE                     __end_of_AdjustDayLightSaving:
  4767                           	opt stack 0
  4768  001CEE                     PL96:
  4769                           	opt stack 15
  4770  001CEE  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  4771  001CF0  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  4772  001CF2  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  4773  001CF4  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  4774  001CF6  0012               	return	
  4775  001CF8                     __end_ofPL96:
  4776                           	opt stack 0
  4777  001CF8                     PL122:
  4778                           	opt stack 15
  4779  001CF8  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  4780  001CFA  0E64               	movlw	100
  4781  001CFC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  4782  001CFE  0C64               	retlw	100
  4783  001D00                     __end_ofPL122:
  4784                           	opt stack 0
  4785                           tosu	equ	0xFFF
  4786                           tosh	equ	0xFFE
  4787                           tosl	equ	0xFFD
  4788                           pclath	equ	0xFFA
  4789                           tblptru	equ	0xFF8
  4790                           tblptrh	equ	0xFF7
  4791                           tblptrl	equ	0xFF6
  4792                           tablat	equ	0xFF5
  4793                           prodh	equ	0xFF4
  4794                           prodl	equ	0xFF3
  4795                           intcon	equ	0xFF2
  4796                           postinc0	equ	0xFEE
  4797                           plusw0	equ	0xFEB
  4798                           wreg	equ	0xFE8
  4799                           indf1	equ	0xFE7
  4800                           postinc1	equ	0xFE6
  4801                           postdec1	equ	0xFE5
  4802                           plusw1	equ	0xFE3
  4803                           fsr1h	equ	0xFE2
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           plusw2	equ	0xFDB
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _IncreaseByADay *****************
  4814 ;; Defined at:
  4815 ;;		line 12 in file "libs/funcs.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  MonthDays       1   40[BANK0 ] char 
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  4822 ;; Registers used:
  4823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 3F/0
  4826 ;;		On exit  : 3F/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4829 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4831 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4832 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4833 ;;Total ram usage:       14 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:   12
  4836 ;; This function calls:
  4837 ;;		_IncreaseByAMonth
  4838 ;;		___lwmod
  4839 ;; This function is called by:
  4840 ;;		_AdjustDayLightSaving
  4841 ;;		_ReadGPS_DATE_TIME
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           	psect	text22
  4846  0021C6                     __ptext22:
  4847                           	opt stack 0
  4848  0021C6                     _IncreaseByADay:
  4849                           	opt stack 16
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;funcs.c: 13: dt.DATE.Day++;
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;incstack = 0
  4856  0021C6  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  4857  0021C8  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  4861  0021CA  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  4862  0021CC  0B7F               	andlw	127
  4863  0021CE  06E8               	decf	wreg,f,c
  4864  0021D0  E104               	bnz	l3299
  4865                           
  4866                           ; BSR set to: 0
  4867                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  4868  0021D2  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  4869  0021D4  0B01               	andlw	-255
  4870  0021D6  0980               	iorlw	128
  4871  0021D8  D00A               	goto	L2
  4872  0021DA                     l3299:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;funcs.c: 16: else
  4876                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  4877  0021DA  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  4878  0021DC  0B7F               	andlw	127
  4879  0021DE  6F86               	movwf	??_IncreaseByADay& (0+255),b
  4880  0021E0  90D8               	bcf	status,0,c
  4881  0021E2  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  4882  0021E4  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  4883  0021E6  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  4884  0021E8  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  4885  0021EA  0B01               	andlw	-255
  4886  0021EC  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  4887  0021EE                     L2:
  4888  0021EE  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  4892  0021F0  90D8               	bcf	status,0,c
  4893  0021F2  3581               	rlcf	(IncreaseByADay@dt+6)& (0+255),w,b
  4894  0021F4  6ED9               	movwf	fsr2l,c
  4895  0021F6  3582               	rlcf	(IncreaseByADay@dt+7)& (0+255),w,b
  4896  0021F8  ECE9  F00F         	call	PL62	;call to abstracted procedure
  4897  0021FC  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  4901  0021FE  0E02               	movlw	2
  4902  002200  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  4903  002202  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  4904  002204  E107               	bnz	l3309
  4905                           
  4906                           ; BSR set to: 0
  4907  002206  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  4908  00220A  0E03               	movlw	3
  4909  00220C  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  4910  00220E  E102               	bnz	l3309
  4911                           
  4912                           ; BSR set to: 0
  4913                           ;funcs.c: 20: MonthDays = 29;
  4914  002210  0E1D               	movlw	29
  4915  002212  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4916  002214                     l3309:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  4920  002214  0E02               	movlw	2
  4921  002216  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  4922  002218  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  4923  00221A  E10A               	bnz	l3315
  4924                           
  4925                           ; BSR set to: 0
  4926  00221C  D840               	call	PL112	;call to abstracted procedure
  4927  00221E  ECCC  F015         	call	PL116	;call to abstracted procedure
  4928  002222  EC3F  F015         	call	___lwmod	;wreg free
  4929  002226  5160               	movf	?___lwmod& (0+255),w,b
  4930  002228  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  4931  00222A  E102               	bnz	l3315
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;funcs.c: 22: MonthDays = 28;
  4935  00222C  0E1C               	movlw	28
  4936  00222E  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4937  002230                     l3315:
  4938                           
  4939                           ; BSR set to: 0
  4940                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  4941  002230  0E02               	movlw	2
  4942  002232  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  4943  002234  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  4944  002236  E10A               	bnz	l3321
  4945                           
  4946                           ; BSR set to: 0
  4947  002238  D832               	call	PL112	;call to abstracted procedure
  4948  00223A  ECF0  F00F         	call	PL100	;call to abstracted procedure
  4949  00223E  EC3F  F015         	call	___lwmod	;wreg free
  4950  002242  5160               	movf	?___lwmod& (0+255),w,b
  4951  002244  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  4952  002246  E102               	bnz	l3321
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;funcs.c: 24: MonthDays = 29;
  4956  002248  0E1D               	movlw	29
  4957  00224A  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  4958  00224C                     l3321:
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  4962  00224C  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  4963  002250  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  4964  002252  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  4965  002254  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  4966  002256  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  4967  002258  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  4968  00225A  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  4969  00225C  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  4970  00225E  E215               	bc	l3327
  4971                           
  4972                           ; BSR set to: 0
  4973                           ;funcs.c: 26: dt.DATE.Day = 1;
  4974  002260  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  4975  002262  0E01               	movlw	1
  4976  002264  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  4977                           
  4978                           ; BSR set to: 0
  4979                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  4980  002266  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  4981  00226A  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  4982  00226E  0E0A               	movlw	10
  4983  002270                     u2911:
  4984  002270  CFDB FFEB          	movff	plusw2,plusw0
  4985  002274  06E8               	decf	wreg,f,c
  4986  002276  E2FC               	bc	u2911
  4987  002278  ECAF  F014         	call	_IncreaseByAMonth	;wreg free
  4988  00227C  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  4989  002280  0E0A               	movlw	10
  4990  002282                     u2921:
  4991  002282  CFEB FFDB          	movff	plusw0,plusw2
  4992  002286  06E8               	decf	wreg,f,c
  4993  002288  E2FC               	bc	u2921
  4994  00228A                     l3327:
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;funcs.c: 28: }
  4998                           ;funcs.c: 29: return dt;
  4999  00228A  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  5000  00228E  EE00  F07B         	lfsr	0,?_IncreaseByADay
  5001  002292  0E0A               	movlw	10
  5002  002294                     u2931:
  5003  002294  CFDB FFEB          	movff	plusw2,plusw0
  5004  002298  06E8               	decf	wreg,f,c
  5005  00229A  E2FC               	bc	u2931
  5006                           
  5007                           ; BSR set to: 0
  5008  00229C  0012               	return		;funcret
  5009  00229E                     __end_of_IncreaseByADay:
  5010                           	opt stack 0
  5011  00229E                     PL112:
  5012                           	opt stack 16
  5013  00229E  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  5014  0022A2  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  5015  0022A6  0012               	return	
  5016  0022A8                     __end_ofPL112:
  5017                           	opt stack 0
  5018                           tosu	equ	0xFFF
  5019                           tosh	equ	0xFFE
  5020                           tosl	equ	0xFFD
  5021                           pclath	equ	0xFFA
  5022                           tblptru	equ	0xFF8
  5023                           tblptrh	equ	0xFF7
  5024                           tblptrl	equ	0xFF6
  5025                           tablat	equ	0xFF5
  5026                           prodh	equ	0xFF4
  5027                           prodl	equ	0xFF3
  5028                           intcon	equ	0xFF2
  5029                           postinc0	equ	0xFEE
  5030                           plusw0	equ	0xFEB
  5031                           wreg	equ	0xFE8
  5032                           indf1	equ	0xFE7
  5033                           postinc1	equ	0xFE6
  5034                           postdec1	equ	0xFE5
  5035                           plusw1	equ	0xFE3
  5036                           fsr1h	equ	0xFE2
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           plusw2	equ	0xFDB
  5042                           fsr2h	equ	0xFDA
  5043                           fsr2l	equ	0xFD9
  5044                           status	equ	0xFD8
  5045                           
  5046 ;; *************** function _IncreaseByAMonth *****************
  5047 ;; Defined at:
  5048 ;;		line 32 in file "libs/funcs.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;		None
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  5055 ;; Registers used:
  5056 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 3F/0
  5059 ;;		On exit  : 3F/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5062 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5065 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5066 ;;Total ram usage:       11 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:   11
  5069 ;; This function calls:
  5070 ;;		_IncreaseByAYear
  5071 ;; This function is called by:
  5072 ;;		_IncreaseByADay
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           	psect	text23
  5077  00295E                     __ptext23:
  5078                           	opt stack 0
  5079  00295E                     _IncreaseByAMonth:
  5080                           	opt stack 16
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;funcs.c: 33: dt.DATE.Month++;
  5084                           
  5085                           ; BSR set to: 0
  5086                           ;incstack = 0
  5087  00295E  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  5088  002960  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  5092  002962  0E0D               	movlw	13
  5093  002964  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  5094  002966  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  5095  002968  E115               	bnz	l3187
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;funcs.c: 35: dt.DATE.Month = 1;
  5099  00296A  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  5100  00296C  0E01               	movlw	1
  5101  00296E  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  5105  002970  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  5106  002974  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  5107  002978  0E0A               	movlw	10
  5108  00297A                     u2511:
  5109  00297A  CFDB FFEB          	movff	plusw2,plusw0
  5110  00297E  06E8               	decf	wreg,f,c
  5111  002980  E2FC               	bc	u2511
  5112  002982  ECB5  F015         	call	_IncreaseByAYear	;wreg free
  5113  002986  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  5114  00298A  0E0A               	movlw	10
  5115  00298C                     u2521:
  5116  00298C  CFEB FFDB          	movff	plusw0,plusw2
  5117  002990  06E8               	decf	wreg,f,c
  5118  002992  E2FC               	bc	u2521
  5119  002994                     l3187:
  5120                           
  5121                           ; BSR set to: 0
  5122                           ;funcs.c: 37: }
  5123                           ;funcs.c: 38: return dt;
  5124  002994  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  5125  002998  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  5126  00299C  0E0A               	movlw	10
  5127  00299E                     u2531:
  5128  00299E  CFDB FFEB          	movff	plusw2,plusw0
  5129  0029A2  06E8               	decf	wreg,f,c
  5130  0029A4  E2FC               	bc	u2531
  5131                           
  5132                           ; BSR set to: 0
  5133  0029A6  0012               	return		;funcret
  5134  0029A8                     __end_of_IncreaseByAMonth:
  5135                           	opt stack 0
  5136                           tosu	equ	0xFFF
  5137                           tosh	equ	0xFFE
  5138                           tosl	equ	0xFFD
  5139                           pclath	equ	0xFFA
  5140                           tblptru	equ	0xFF8
  5141                           tblptrh	equ	0xFF7
  5142                           tblptrl	equ	0xFF6
  5143                           tablat	equ	0xFF5
  5144                           prodh	equ	0xFF4
  5145                           prodl	equ	0xFF3
  5146                           intcon	equ	0xFF2
  5147                           postinc0	equ	0xFEE
  5148                           plusw0	equ	0xFEB
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           postinc1	equ	0xFE6
  5152                           postdec1	equ	0xFE5
  5153                           plusw1	equ	0xFE3
  5154                           fsr1h	equ	0xFE2
  5155                           fsr1l	equ	0xFE1
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           plusw2	equ	0xFDB
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _IncreaseByAYear *****************
  5165 ;; Defined at:
  5166 ;;		line 41 in file "libs/funcs.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  5173 ;; Registers used:
  5174 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5175 ;; Tracked objects:
  5176 ;;		On entry : 3F/0
  5177 ;;		On exit  : 3F/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5180 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5183 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5184 ;;Total ram usage:       11 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:   10
  5187 ;; This function calls:
  5188 ;;		___lwmod
  5189 ;; This function is called by:
  5190 ;;		_IncreaseByAMonth
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text24
  5195  002B6A                     __ptext24:
  5196                           	opt stack 0
  5197  002B6A                     _IncreaseByAYear:
  5198                           	opt stack 16
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;funcs.c: 42: dt.YEAR++;
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;incstack = 0
  5205  002B6A  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  5206  002B6C  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  5210  002B6E  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  5211  002B72  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  5212  002B76  D810               	call	PL116	;call to abstracted procedure
  5213  002B78  EC3F  F015         	call	___lwmod	;wreg free
  5214  002B7C  5160               	movf	?___lwmod& (0+255),w,b
  5215  002B7E  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5216  002B80  E101               	bnz	l3155
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;funcs.c: 44: CENTURY++;
  5220  002B82  2BFD               	incf	_CENTURY& (0+255),f,b
  5221  002B84                     l3155:
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;funcs.c: 45: return dt;
  5225  002B84  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  5226  002B88  EE00  F065         	lfsr	0,?_IncreaseByAYear
  5227  002B8C  0E0A               	movlw	10
  5228  002B8E                     u2431:
  5229  002B8E  CFDB FFEB          	movff	plusw2,plusw0
  5230  002B92  06E8               	decf	wreg,f,c
  5231  002B94  E2FC               	bc	u2431
  5232                           
  5233                           ; BSR set to: 0
  5234  002B96  0012               	return		;funcret
  5235  002B98                     __end_of_IncreaseByAYear:
  5236                           	opt stack 0
  5237  002B98                     PL116:
  5238                           	opt stack 16
  5239  002B98  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  5240  002B9A  0E64               	movlw	100
  5241  002B9C  6F62               	movwf	___lwmod@divisor& (0+255),b
  5242  002B9E  0C64               	retlw	100
  5243  002BA0                     __end_ofPL116:
  5244                           	opt stack 0
  5245                           tosu	equ	0xFFF
  5246                           tosh	equ	0xFFE
  5247                           tosl	equ	0xFFD
  5248                           pclath	equ	0xFFA
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           intcon	equ	0xFF2
  5256                           postinc0	equ	0xFEE
  5257                           plusw0	equ	0xFEB
  5258                           wreg	equ	0xFE8
  5259                           indf1	equ	0xFE7
  5260                           postinc1	equ	0xFE6
  5261                           postdec1	equ	0xFE5
  5262                           plusw1	equ	0xFE3
  5263                           fsr1h	equ	0xFE2
  5264                           fsr1l	equ	0xFE1
  5265                           indf2	equ	0xFDF
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           plusw2	equ	0xFDB
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function _DecreaseByADay *****************
  5274 ;; Defined at:
  5275 ;;		line 57 in file "libs/funcs.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  MonthDays       1   39[BANK0 ] char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 3F/0
  5286 ;;		On exit  : 3F/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5289 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5292 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5293 ;;Total ram usage:       13 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:   12
  5296 ;; This function calls:
  5297 ;;		_DecreaseByAMonth
  5298 ;;		___lwmod
  5299 ;; This function is called by:
  5300 ;;		_AdjustDayLightSaving
  5301 ;;		_ReadGPS_DATE_TIME
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text25
  5306  001F04                     __ptext25:
  5307                           	opt stack 0
  5308  001F04                     _DecreaseByADay:
  5309                           	opt stack 16
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;incstack = 0
  5316  001F04  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  5317  001F06  0B7F               	andlw	127
  5318  001F08  0A40               	xorlw	64
  5319  001F0A  E104               	bnz	l3335
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  5323  001F0C  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  5324  001F0E  0B01               	andlw	-255
  5325  001F10  0902               	iorlw	2
  5326  001F12  D00A               	goto	L3
  5327  001F14                     l3335:
  5328                           
  5329                           ; BSR set to: 0
  5330                           ;funcs.c: 60: else
  5331                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  5332  001F14  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  5333  001F16  0B7F               	andlw	127
  5334  001F18  6F86               	movwf	??_DecreaseByADay& (0+255),b
  5335  001F1A  90D8               	bcf	status,0,c
  5336  001F1C  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  5337  001F1E  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  5338  001F20  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  5339  001F22  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  5340  001F24  0B01               	andlw	-255
  5341  001F26  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  5342  001F28                     L3:
  5343  001F28  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  5347  001F2A  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  5348  001F2C  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  5349  001F2E  E144               	bnz	l3359
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  5353  001F30  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  5354  001F34  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  5355  001F38  0E0A               	movlw	10
  5356  001F3A                     u2961:
  5357  001F3A  CFDB FFEB          	movff	plusw2,plusw0
  5358  001F3E  06E8               	decf	wreg,f,c
  5359  001F40  E2FC               	bc	u2961
  5360  001F42  EC63  F014         	call	_DecreaseByAMonth	;wreg free
  5361  001F46  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  5362  001F4A  0E0A               	movlw	10
  5363  001F4C                     u2971:
  5364  001F4C  CFEB FFDB          	movff	plusw0,plusw2
  5365  001F50  06E8               	decf	wreg,f,c
  5366  001F52  E2FC               	bc	u2971
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  5370  001F54  90D8               	bcf	status,0,c
  5371  001F56  3581               	rlcf	(DecreaseByADay@dt+6)& (0+255),w,b
  5372  001F58  6ED9               	movwf	fsr2l,c
  5373  001F5A  3582               	rlcf	(DecreaseByADay@dt+7)& (0+255),w,b
  5374  001F5C  D83A               	call	PL62	;call to abstracted procedure
  5375  001F5E  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  5379  001F60  0E02               	movlw	2
  5380  001F62  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  5381  001F64  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  5382  001F66  E107               	bnz	l3347
  5383                           
  5384                           ; BSR set to: 0
  5385  001F68  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  5386  001F6C  0E03               	movlw	3
  5387  001F6E  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  5388  001F70  E102               	bnz	l3347
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;funcs.c: 66: MonthDays = 29;
  5392  001F72  0E1D               	movlw	29
  5393  001F74  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5394  001F76                     l3347:
  5395                           
  5396                           ; BSR set to: 0
  5397                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  5398  001F76  0E02               	movlw	2
  5399  001F78  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  5400  001F7A  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  5401  001F7C  E10A               	bnz	l3353
  5402                           
  5403                           ; BSR set to: 0
  5404  001F7E  D835               	call	PL106	;call to abstracted procedure
  5405  001F80  ECCC  F015         	call	PL116	;call to abstracted procedure
  5406  001F84  EC3F  F015         	call	___lwmod	;wreg free
  5407  001F88  5160               	movf	?___lwmod& (0+255),w,b
  5408  001F8A  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5409  001F8C  E102               	bnz	l3353
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;funcs.c: 68: MonthDays = 28;
  5413  001F8E  0E1C               	movlw	28
  5414  001F90  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5415  001F92                     l3353:
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  5419  001F92  0E02               	movlw	2
  5420  001F94  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  5421  001F96  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  5422  001F98  E109               	bnz	l631
  5423                           
  5424                           ; BSR set to: 0
  5425  001F9A  D827               	call	PL106	;call to abstracted procedure
  5426  001F9C  D821               	call	PL100	;call to abstracted procedure
  5427  001F9E  EC3F  F015         	call	___lwmod	;wreg free
  5428  001FA2  5160               	movf	?___lwmod& (0+255),w,b
  5429  001FA4  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5430  001FA6  E102               	bnz	l631
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;funcs.c: 70: MonthDays = 29;
  5434  001FA8  0E1D               	movlw	29
  5435  001FAA  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  5436  001FAC                     l631:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  5440  001FAC  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  5441  001FAE  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  5442  001FB0  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  5443  001FB2  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  5444  001FB4  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  5445                           
  5446                           ;funcs.c: 72: } else
  5447  001FB6  D003               	goto	l3361
  5448  001FB8                     l3359:
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;funcs.c: 73: dt.DATE.Day--;
  5452  001FB8  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  5453  001FBA  A0D8               	btfss	status,0,c
  5454  001FBC  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  5455  001FBE                     l3361:
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;funcs.c: 74: return dt;
  5459  001FBE  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  5460  001FC2  EE00  F07B         	lfsr	0,?_DecreaseByADay
  5461  001FC6  0E0A               	movlw	10
  5462  001FC8                     u3041:
  5463  001FC8  CFDB FFEB          	movff	plusw2,plusw0
  5464  001FCC  06E8               	decf	wreg,f,c
  5465  001FCE  E2FC               	bc	u3041
  5466                           
  5467                           ; BSR set to: 0
  5468  001FD0  0012               	return		;funcret
  5469  001FD2                     __end_of_DecreaseByADay:
  5470                           	opt stack 0
  5471  001FD2                     PL62:
  5472                           	opt stack 16
  5473  001FD2  6EDA               	movwf	fsr2h,c
  5474  001FD4  0E42               	movlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  5475  001FD6  26D9               	addwf	fsr2l,f,c
  5476  001FD8  0E01               	movlw	high (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  5477  001FDA  22DA               	addwfc	fsr2h,f,c
  5478  001FDC  50DF               	movf	indf2,w,c
  5479  001FDE  0012               	return	
  5480  001FE0                     __end_ofPL62:
  5481                           	opt stack 0
  5482  001FE0                     PL100:
  5483                           	opt stack 16
  5484  001FE0  0E01               	movlw	1
  5485  001FE2  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  5486  001FE4  0E90               	movlw	144
  5487  001FE6  6F62               	movwf	___lwmod@divisor& (0+255),b
  5488  001FE8  0C90               	retlw	144
  5489  001FEA                     __end_ofPL100:
  5490                           	opt stack 0
  5491  001FEA                     PL106:
  5492                           	opt stack 16
  5493  001FEA  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  5494  001FEE  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  5495  001FF2  0012               	return	
  5496  001FF4                     __end_ofPL106:
  5497                           	opt stack 0
  5498                           tosu	equ	0xFFF
  5499                           tosh	equ	0xFFE
  5500                           tosl	equ	0xFFD
  5501                           pclath	equ	0xFFA
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           intcon	equ	0xFF2
  5509                           postinc0	equ	0xFEE
  5510                           plusw0	equ	0xFEB
  5511                           wreg	equ	0xFE8
  5512                           indf1	equ	0xFE7
  5513                           postinc1	equ	0xFE6
  5514                           postdec1	equ	0xFE5
  5515                           plusw1	equ	0xFE3
  5516                           fsr1h	equ	0xFE2
  5517                           fsr1l	equ	0xFE1
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           plusw2	equ	0xFDB
  5522                           fsr2h	equ	0xFDA
  5523                           fsr2l	equ	0xFD9
  5524                           status	equ	0xFD8
  5525                           
  5526 ;; *************** function _DecreaseByAMonth *****************
  5527 ;; Defined at:
  5528 ;;		line 77 in file "libs/funcs.c"
  5529 ;; Parameters:    Size  Location     Type
  5530 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  5531 ;; Auto vars:     Size  Location     Type
  5532 ;;		None
  5533 ;; Return value:  Size  Location     Type
  5534 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  5535 ;; Registers used:
  5536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5537 ;; Tracked objects:
  5538 ;;		On entry : 3F/0
  5539 ;;		On exit  : 3F/0
  5540 ;;		Unchanged: 0/0
  5541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5542 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5545 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5546 ;;Total ram usage:       11 bytes
  5547 ;; Hardware stack levels used:    1
  5548 ;; Hardware stack levels required when called:   11
  5549 ;; This function calls:
  5550 ;;		_DecreaseByAYear
  5551 ;; This function is called by:
  5552 ;;		_DecreaseByADay
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text26
  5557  0028C6                     __ptext26:
  5558                           	opt stack 0
  5559  0028C6                     _DecreaseByAMonth:
  5560                           	opt stack 16
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  5564                           
  5565                           ; BSR set to: 0
  5566                           ;incstack = 0
  5567  0028C6  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  5568  0028C8  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  5569  0028CA  E116               	bnz	l3197
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;funcs.c: 79: dt.DATE.Month = 12;
  5573  0028CC  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  5574  0028CE  0E0C               	movlw	12
  5575  0028D0  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  5579  0028D2  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  5580  0028D6  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  5581  0028DA  0E0A               	movlw	10
  5582  0028DC                     u2551:
  5583  0028DC  CFDB FFEB          	movff	plusw2,plusw0
  5584  0028E0  06E8               	decf	wreg,f,c
  5585  0028E2  E2FC               	bc	u2551
  5586  0028E4  ECD0  F015         	call	_DecreaseByAYear	;wreg free
  5587  0028E8  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  5588  0028EC  0E0A               	movlw	10
  5589  0028EE                     u2561:
  5590  0028EE  CFEB FFDB          	movff	plusw0,plusw2
  5591  0028F2  06E8               	decf	wreg,f,c
  5592  0028F4  E2FC               	bc	u2561
  5593                           
  5594                           ;funcs.c: 81: } else
  5595  0028F6  D003               	goto	l3199
  5596  0028F8                     l3197:
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;funcs.c: 82: dt.DATE.Month--;
  5600  0028F8  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  5601  0028FA  A0D8               	btfss	status,0,c
  5602  0028FC  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  5603  0028FE                     l3199:
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;funcs.c: 83: return dt;
  5607  0028FE  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  5608  002902  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  5609  002906  0E0A               	movlw	10
  5610  002908                     u2571:
  5611  002908  CFDB FFEB          	movff	plusw2,plusw0
  5612  00290C  06E8               	decf	wreg,f,c
  5613  00290E  E2FC               	bc	u2571
  5614                           
  5615                           ; BSR set to: 0
  5616  002910  0012               	return		;funcret
  5617  002912                     __end_of_DecreaseByAMonth:
  5618                           	opt stack 0
  5619                           tosu	equ	0xFFF
  5620                           tosh	equ	0xFFE
  5621                           tosl	equ	0xFFD
  5622                           pclath	equ	0xFFA
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           postinc0	equ	0xFEE
  5631                           plusw0	equ	0xFEB
  5632                           wreg	equ	0xFE8
  5633                           indf1	equ	0xFE7
  5634                           postinc1	equ	0xFE6
  5635                           postdec1	equ	0xFE5
  5636                           plusw1	equ	0xFE3
  5637                           fsr1h	equ	0xFE2
  5638                           fsr1l	equ	0xFE1
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           plusw2	equ	0xFDB
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _DecreaseByAYear *****************
  5648 ;; Defined at:
  5649 ;;		line 86 in file "libs/funcs.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;		None
  5654 ;; Return value:  Size  Location     Type
  5655 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  5656 ;; Registers used:
  5657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5658 ;; Tracked objects:
  5659 ;;		On entry : 3F/0
  5660 ;;		On exit  : 3F/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5663 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5666 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5667 ;;Total ram usage:       11 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:   10
  5670 ;; This function calls:
  5671 ;;		___lwmod
  5672 ;; This function is called by:
  5673 ;;		_DecreaseByAMonth
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text27
  5678  002BA0                     __ptext27:
  5679                           	opt stack 0
  5680  002BA0                     _DecreaseByAYear:
  5681                           	opt stack 16
  5682                           
  5683                           ; BSR set to: 0
  5684                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  5685                           
  5686                           ; BSR set to: 0
  5687                           ;incstack = 0
  5688  002BA0  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  5689  002BA4  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  5690  002BA8  ECCC  F015         	call	PL116	;call to abstracted procedure
  5691  002BAC  EC3F  F015         	call	___lwmod	;wreg free
  5692  002BB0  5160               	movf	?___lwmod& (0+255),w,b
  5693  002BB2  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  5694  002BB4  E101               	bnz	l641
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;funcs.c: 88: CENTURY--;
  5698  002BB6  07FD               	decf	_CENTURY& (0+255),f,b
  5699  002BB8                     l641:
  5700                           
  5701                           ; BSR set to: 0
  5702                           ;funcs.c: 89: dt.YEAR--;
  5703  002BB8  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  5704  002BBA  A0D8               	btfss	status,0,c
  5705  002BBC  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;funcs.c: 90: return dt;
  5709  002BBE  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  5710  002BC2  EE00  F065         	lfsr	0,?_DecreaseByAYear
  5711  002BC6  0E0A               	movlw	10
  5712  002BC8                     u2451:
  5713  002BC8  CFDB FFEB          	movff	plusw2,plusw0
  5714  002BCC  06E8               	decf	wreg,f,c
  5715  002BCE  E2FC               	bc	u2451
  5716                           
  5717                           ; BSR set to: 0
  5718  002BD0  0012               	return		;funcret
  5719  002BD2                     __end_of_DecreaseByAYear:
  5720                           	opt stack 0
  5721                           tosu	equ	0xFFF
  5722                           tosh	equ	0xFFE
  5723                           tosl	equ	0xFFD
  5724                           pclath	equ	0xFFA
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodh	equ	0xFF4
  5730                           prodl	equ	0xFF3
  5731                           intcon	equ	0xFF2
  5732                           postinc0	equ	0xFEE
  5733                           plusw0	equ	0xFEB
  5734                           wreg	equ	0xFE8
  5735                           indf1	equ	0xFE7
  5736                           postinc1	equ	0xFE6
  5737                           postdec1	equ	0xFE5
  5738                           plusw1	equ	0xFE3
  5739                           fsr1h	equ	0xFE2
  5740                           fsr1l	equ	0xFE1
  5741                           indf2	equ	0xFDF
  5742                           postinc2	equ	0xFDE
  5743                           postdec2	equ	0xFDD
  5744                           plusw2	equ	0xFDB
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8
  5748                           
  5749 ;; *************** function ___lwmod *****************
  5750 ;; Defined at:
  5751 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  dividend        2    0[BANK0 ] unsigned int 
  5754 ;;  divisor         2    2[BANK0 ] unsigned int 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  counter         1    4[BANK0 ] unsigned char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  2    0[BANK0 ] unsigned int 
  5759 ;; Registers used:
  5760 ;;		wreg, status,2, status,0
  5761 ;; Tracked objects:
  5762 ;;		On entry : 3F/0
  5763 ;;		On exit  : 3F/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5766 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5767 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5769 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5770 ;;Total ram usage:        5 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    9
  5773 ;; This function calls:
  5774 ;;		Nothing
  5775 ;; This function is called by:
  5776 ;;		_IncreaseByADay
  5777 ;;		_IncreaseByAYear
  5778 ;;		_DecreaseByADay
  5779 ;;		_DecreaseByAYear
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text28
  5784  002A7E                     __ptext28:
  5785                           	opt stack 0
  5786  002A7E                     ___lwmod:
  5787                           	opt stack 18
  5788                           
  5789                           ; BSR set to: 0
  5790                           
  5791                           ; BSR set to: 0
  5792                           ;incstack = 0
  5793  002A7E  5162               	movf	___lwmod@divisor& (0+255),w,b
  5794  002A80  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5795  002A82  E017               	bz	l1574
  5796                           
  5797                           ; BSR set to: 0
  5798  002A84  0E01               	movlw	1
  5799  002A86  6F64               	movwf	___lwmod@counter& (0+255),b
  5800  002A88  D004               	goto	l3129
  5801  002A8A                     l3127:
  5802                           
  5803                           ; BSR set to: 0
  5804  002A8A  90D8               	bcf	status,0,c
  5805  002A8C  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  5806  002A8E  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5807  002A90  2B64               	incf	___lwmod@counter& (0+255),f,b
  5808  002A92                     l3129:
  5809                           
  5810                           ; BSR set to: 0
  5811  002A92  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5812  002A94  D7FA               	goto	l3127
  5813  002A96                     l3131:
  5814                           
  5815                           ; BSR set to: 0
  5816  002A96  5162               	movf	___lwmod@divisor& (0+255),w,b
  5817  002A98  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  5818  002A9A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5819  002A9C  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5820  002A9E  E304               	bnc	l3135
  5821                           
  5822                           ; BSR set to: 0
  5823  002AA0  5162               	movf	___lwmod@divisor& (0+255),w,b
  5824  002AA2  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  5825  002AA4  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5826  002AA6  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5827  002AA8                     l3135:
  5828                           
  5829                           ; BSR set to: 0
  5830  002AA8  90D8               	bcf	status,0,c
  5831  002AAA  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5832  002AAC  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  5833                           
  5834                           ; BSR set to: 0
  5835  002AAE  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  5836  002AB0  D7F2               	goto	l3131
  5837  002AB2                     l1574:
  5838                           
  5839                           ; BSR set to: 0
  5840  002AB2  C060  F060         	movff	___lwmod@dividend,?___lwmod
  5841  002AB6  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  5842                           
  5843                           ; BSR set to: 0
  5844  002ABA  0012               	return		;funcret
  5845  002ABC                     __end_of___lwmod:
  5846                           	opt stack 0
  5847                           tosu	equ	0xFFF
  5848                           tosh	equ	0xFFE
  5849                           tosl	equ	0xFFD
  5850                           pclath	equ	0xFFA
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           postinc0	equ	0xFEE
  5859                           plusw0	equ	0xFEB
  5860                           wreg	equ	0xFE8
  5861                           indf1	equ	0xFE7
  5862                           postinc1	equ	0xFE6
  5863                           postdec1	equ	0xFE5
  5864                           plusw1	equ	0xFE3
  5865                           fsr1h	equ	0xFE2
  5866                           fsr1l	equ	0xFE1
  5867                           indf2	equ	0xFDF
  5868                           postinc2	equ	0xFDE
  5869                           postdec2	equ	0xFDD
  5870                           plusw2	equ	0xFDB
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875 ;; *************** function _LoadAllFromEeprom *****************
  5876 ;; Defined at:
  5877 ;;		line 179 in file "libs/eeprom.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;		None
  5880 ;; Auto vars:     Size  Location     Type
  5881 ;;		None
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      void 
  5884 ;; Registers used:
  5885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 3F/0
  5888 ;;		On exit  : 3F/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5895 ;;Total ram usage:        0 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:   11
  5898 ;; This function calls:
  5899 ;;		_LoadCyclesFromEeprom
  5900 ;;		_LoadEventsFromEeprom
  5901 ;;		_LoadSettingsFromEeprom
  5902 ;;		_LoadStatesFromEeprom
  5903 ;; This function is called by:
  5904 ;;		_main
  5905 ;; This function uses a non-reentrant model
  5906 ;;
  5907                           
  5908                           	psect	text29
  5909  002D54                     __ptext29:
  5910                           	opt stack 0
  5911  002D54                     _LoadAllFromEeprom:
  5912                           	opt stack 19
  5913                           
  5914                           ; BSR set to: 0
  5915                           ;eeprom.c: 180: LoadSettingsFromEeprom ();
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;incstack = 0
  5919  002D54  EC54  F009         	call	_LoadSettingsFromEeprom	;wreg free
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;eeprom.c: 181: LoadEventsFromEeprom ();
  5923  002D58  ECFD  F00B         	call	_LoadEventsFromEeprom	;wreg free
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;eeprom.c: 182: LoadStatesFromEeprom();
  5927  002D5C  EC27  F00B         	call	_LoadStatesFromEeprom	;wreg free
  5928                           
  5929                           ; BSR set to: 0
  5930                           ;eeprom.c: 183: LoadCyclesFromEeprom();
  5931  002D60  EFB5  F00C         	goto	_LoadCyclesFromEeprom	;wreg free
  5932  002D64                     __end_of_LoadAllFromEeprom:
  5933                           	opt stack 0
  5934                           tosu	equ	0xFFF
  5935                           tosh	equ	0xFFE
  5936                           tosl	equ	0xFFD
  5937                           pclath	equ	0xFFA
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           intcon	equ	0xFF2
  5945                           postinc0	equ	0xFEE
  5946                           plusw0	equ	0xFEB
  5947                           wreg	equ	0xFE8
  5948                           indf1	equ	0xFE7
  5949                           postinc1	equ	0xFE6
  5950                           postdec1	equ	0xFE5
  5951                           plusw1	equ	0xFE3
  5952                           fsr1h	equ	0xFE2
  5953                           fsr1l	equ	0xFE1
  5954                           indf2	equ	0xFDF
  5955                           postinc2	equ	0xFDE
  5956                           postdec2	equ	0xFDD
  5957                           plusw2	equ	0xFDB
  5958                           fsr2h	equ	0xFDA
  5959                           fsr2l	equ	0xFD9
  5960                           status	equ	0xFD8
  5961                           
  5962 ;; *************** function _LoadStatesFromEeprom *****************
  5963 ;; Defined at:
  5964 ;;		line 128 in file "libs/eeprom.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;  j               2   22[BANK0 ] int 
  5969 ;;  j               2   20[BANK0 ] int 
  5970 ;;  i               2   26[BANK0 ] int 
  5971 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  5972 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  5973 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  5974 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  5975 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  5976 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  5977 ;; Return value:  Size  Location     Type
  5978 ;;                  1    wreg      void 
  5979 ;; Registers used:
  5980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5981 ;; Tracked objects:
  5982 ;;		On entry : 3F/0
  5983 ;;		On exit  : 3F/0
  5984 ;;		Unchanged: 0/0
  5985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5987 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5988 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5989 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5990 ;;Total ram usage:       20 bytes
  5991 ;; Hardware stack levels used:    1
  5992 ;; Hardware stack levels required when called:   10
  5993 ;; This function calls:
  5994 ;;		_ReadEeprom
  5995 ;;		___awdiv
  5996 ;;		___wmul
  5997 ;; This function is called by:
  5998 ;;		_LoadAllFromEeprom
  5999 ;; This function uses a non-reentrant model
  6000 ;;
  6001                           
  6002                           	psect	text30
  6003  00164E                     __ptext30:
  6004                           	opt stack 0
  6005  00164E                     _LoadStatesFromEeprom:
  6006                           	opt stack 19
  6007                           
  6008                           ; BSR set to: 0
  6009                           ;eeprom.c: 129: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  6010                           ;eeprom.c: 130: UINT8 AudAddInc;
  6011                           ;eeprom.c: 131: AddStates.Val = 0xE0;
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;incstack = 0
  6015  00164E  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  6016  001650  0EE0               	movlw	224
  6017  001652  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  6018                           
  6019                           ;eeprom.c: 132: AddAudioNormal.Val = 0x17;
  6020  001654  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  6021  001656  0E17               	movlw	23
  6022  001658  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  6023                           
  6024                           ;eeprom.c: 133: AddAudioSpecial.Val = 0x2B;
  6025  00165A  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  6026  00165C  0E2B               	movlw	43
  6027  00165E  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;eeprom.c: 134: for (int i=0; i<160; i++) {
  6031  001660  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  6032  001662  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  6033  001664                     l4087:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;eeprom.c: 135: STATES[i].PERIOD = ReadEeprom(AddStates);
  6037  001664  D8A3               	call	PL16	;call to abstracted procedure
  6038  001666  EC01  F016         	call	___wmul	;wreg free
  6039  00166A  0EF0               	movlw	low _STATES
  6040  00166C  2560               	addwf	?___wmul& (0+255),w,b
  6041  00166E  6ED9               	movwf	fsr2l,c
  6042  001670  0E02               	movlw	high _STATES
  6043  001672  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6044  001674  D8B3               	call	PL76	;call to abstracted procedure
  6045  001676  EC97  F016         	call	_ReadEeprom	;wreg free
  6046  00167A  6EDF               	movwf	indf2,c
  6047                           
  6048                           ;eeprom.c: 136: AddStates.Val++;
  6049  00167C  0100               	movlb	0	; () banked
  6050  00167E  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  6051  001680  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;eeprom.c: 137: for (int j=0; j<2; j++) {
  6055  001682  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  6056  001684  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  6057  001686                     l4097:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;eeprom.c: 138: STATES[i].ON[j] = ReadEeprom(AddStates);
  6061  001686  D892               	call	PL16	;call to abstracted procedure
  6062  001688  EC01  F016         	call	___wmul	;wreg free
  6063  00168C  D8AD               	call	PL118	;call to abstracted procedure
  6064  00168E  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  6065  001690  0E00               	movlw	0
  6066  001692  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6067  001694  5160               	movf	?___wmul& (0+255),w,b
  6068  001696  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  6069  001698  5161               	movf	(?___wmul+1)& (0+255),w,b
  6070  00169A  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6071  00169C  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  6072  00169E  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  6073  0016A0  6ED9               	movwf	fsr2l,c
  6074  0016A2  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  6075  0016A4  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6076  0016A6  D89A               	call	PL76	;call to abstracted procedure
  6077  0016A8  EC97  F016         	call	_ReadEeprom	;wreg free
  6078  0016AC  6EDF               	movwf	indf2,c
  6079                           
  6080                           ;eeprom.c: 139: AddStates.Val++;
  6081  0016AE  0100               	movlb	0	; () banked
  6082  0016B0  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  6083  0016B2  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6084                           
  6085                           ; BSR set to: 0
  6086  0016B4  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  6087  0016B6  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  6088                           
  6089                           ; BSR set to: 0
  6090  0016B8  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  6091  0016BA  D7E5               	goto	l4097
  6092  0016BC  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  6093  0016BE  E103               	bnz	u4130
  6094  0016C0  0E02               	movlw	2
  6095  0016C2  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  6096  0016C4  E3E0               	bnc	l4097
  6097  0016C6                     u4130:
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;eeprom.c: 140: }
  6101                           ;eeprom.c: 141: for (int j=0; j<2; j++) {
  6102  0016C6  6B76               	clrf	LoadStatesFromEeprom@j_1399& (0+255),b
  6103  0016C8  6B77               	clrf	(LoadStatesFromEeprom@j_1399+1)& (0+255),b
  6104  0016CA                     l4109:
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;eeprom.c: 142: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  6108  0016CA  D870               	call	PL16	;call to abstracted procedure
  6109  0016CC  EC01  F016         	call	___wmul	;wreg free
  6110  0016D0  D88B               	call	PL118	;call to abstracted procedure
  6111  0016D2  0E03               	movlw	3
  6112  0016D4  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  6113  0016D6  0E00               	movlw	0
  6114  0016D8  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6115  0016DA  5160               	movf	?___wmul& (0+255),w,b
  6116  0016DC  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  6117  0016DE  5161               	movf	(?___wmul+1)& (0+255),w,b
  6118  0016E0  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6119  0016E2  5176               	movf	LoadStatesFromEeprom@j_1399& (0+255),w,b
  6120  0016E4  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  6121  0016E6  6ED9               	movwf	fsr2l,c
  6122  0016E8  5177               	movf	(LoadStatesFromEeprom@j_1399+1)& (0+255),w,b
  6123  0016EA  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6124  0016EC  D877               	call	PL76	;call to abstracted procedure
  6125  0016EE  EC97  F016         	call	_ReadEeprom	;wreg free
  6126  0016F2  6EDF               	movwf	indf2,c
  6127                           
  6128                           ;eeprom.c: 143: AddStates.Val++;
  6129  0016F4  0100               	movlb	0	; () banked
  6130  0016F6  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  6131  0016F8  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  6132                           
  6133                           ; BSR set to: 0
  6134  0016FA  4B76               	infsnz	LoadStatesFromEeprom@j_1399& (0+255),f,b
  6135  0016FC  2B77               	incf	(LoadStatesFromEeprom@j_1399+1)& (0+255),f,b
  6136                           
  6137                           ; BSR set to: 0
  6138  0016FE  BF77               	btfsc	(LoadStatesFromEeprom@j_1399+1)& (0+255),7,b
  6139  001700  D7E4               	goto	l4109
  6140  001702  5177               	movf	(LoadStatesFromEeprom@j_1399+1)& (0+255),w,b
  6141  001704  E103               	bnz	u4140
  6142  001706  0E02               	movlw	2
  6143  001708  5D76               	subwf	LoadStatesFromEeprom@j_1399& (0+255),w,b
  6144  00170A  E3DF               	bnc	l4109
  6145  00170C                     u4140:
  6146                           
  6147                           ; BSR set to: 0
  6148                           ;eeprom.c: 144: }
  6149                           ;eeprom.c: 145: AudAddInc = i/8;
  6150  00170C  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  6151  001710  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  6152  001714  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6153  001716  0E08               	movlw	8
  6154  001718  6F62               	movwf	___awdiv@divisor& (0+255),b
  6155  00171A  EC5D  F013         	call	___awdiv	;wreg free
  6156  00171E  5160               	movf	?___awdiv& (0+255),w,b
  6157  001720  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;eeprom.c: 146: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  6161  001722  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  6162  001724  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  6163  001726  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  6164  001728  0E00               	movlw	0
  6165  00172A  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  6166  00172C  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;eeprom.c: 147: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  6170  00172E  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  6171  001730  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  6172  001732  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  6173  001734  0E00               	movlw	0
  6174  001736  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  6175  001738  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  6176                           
  6177                           ;eeprom.c: 148: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  6178  00173A  D847               	call	PL66	;call to abstracted procedure
  6179  00173C  D001               	goto	u4154
  6180  00173E                     u4155:
  6181  00173E  D859               	call	PL126	;call to abstracted procedure
  6182  001740                     u4154:
  6183  001740  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  6184  001742  D7FD               	goto	u4155
  6185  001744  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  6186  001748  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  6187  00174C  EC97  F016         	call	_ReadEeprom	;wreg free
  6188  001750  0100               	movlb	0	; () banked
  6189  001752  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6190  001754  E006               	bz	l4125
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;eeprom.c: 149: STATES[i].AUDIO = AUDIO_NORMAL;
  6194  001756  D82A               	call	PL16	;call to abstracted procedure
  6195  001758  EC01  F016         	call	___wmul	;wreg free
  6196  00175C  D82F               	call	PL58	;call to abstracted procedure
  6197  00175E  0E01               	movlw	1
  6198  001760  D019               	goto	L4
  6199  001762                     l4125:
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;eeprom.c: 150: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  6203  001762  D833               	call	PL66	;call to abstracted procedure
  6204  001764  D001               	goto	u4174
  6205  001766                     u4175:
  6206  001766  D845               	call	PL126	;call to abstracted procedure
  6207  001768                     u4174:
  6208  001768  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  6209  00176A  D7FD               	goto	u4175
  6210  00176C  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  6211  001770  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  6212  001774  EC97  F016         	call	_ReadEeprom	;wreg free
  6213  001778  0100               	movlb	0	; () banked
  6214  00177A  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  6215  00177C  E006               	bz	l4129
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;eeprom.c: 151: STATES[i].AUDIO = AUDIO_SPECIAL;
  6219  00177E  D816               	call	PL16	;call to abstracted procedure
  6220  001780  EC01  F016         	call	___wmul	;wreg free
  6221  001784  D81B               	call	PL58	;call to abstracted procedure
  6222  001786  0E02               	movlw	2
  6223  001788  D005               	goto	L4
  6224  00178A                     l4129:
  6225                           
  6226                           ; BSR set to: 0
  6227                           ;eeprom.c: 152: else
  6228                           ;eeprom.c: 153: STATES[i].AUDIO = AUDIO_OFF;
  6229  00178A  D810               	call	PL16	;call to abstracted procedure
  6230  00178C  EC01  F016         	call	___wmul	;wreg free
  6231  001790  D815               	call	PL58	;call to abstracted procedure
  6232  001792  0E00               	movlw	0
  6233  001794                     L4:
  6234  001794  6EDF               	movwf	indf2,c
  6235                           
  6236                           ; BSR set to: 0
  6237  001796  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  6238  001798  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  6239                           
  6240                           ; BSR set to: 0
  6241  00179A  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  6242  00179C  D763               	goto	l4087
  6243  00179E  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  6244  0017A0  E104               	bnz	u4190
  6245  0017A2  0EA0               	movlw	160
  6246  0017A4  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  6247  0017A6  E201 D75D          	bnc	l4087
  6248  0017AA                     u4190:
  6249                           
  6250                           ; BSR set to: 0
  6251  0017AA  0012               	return		;funcret
  6252  0017AC                     __end_of_LoadStatesFromEeprom:
  6253                           	opt stack 0
  6254  0017AC                     PL16:
  6255                           	opt stack 19
  6256  0017AC  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  6257  0017B0  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  6258  0017B4  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  6259  0017B6  0E06               	movlw	6
  6260  0017B8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6261  0017BA  0C06               	retlw	6
  6262  0017BC                     __end_ofPL16:
  6263                           	opt stack 0
  6264  0017BC                     PL58:
  6265                           	opt stack 19
  6266  0017BC  0EF5               	movlw	low (_STATES+5)
  6267  0017BE  2560               	addwf	?___wmul& (0+255),w,b
  6268  0017C0  6ED9               	movwf	fsr2l,c
  6269  0017C2  0E02               	movlw	high (_STATES+5)
  6270  0017C4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6271  0017C6  6EDA               	movwf	fsr2h,c
  6272  0017C8  0012               	return	
  6273  0017CA                     __end_ofPL58:
  6274                           	opt stack 0
  6275  0017CA                     PL66:
  6276                           	opt stack 19
  6277  0017CA  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  6278  0017CE  0E07               	movlw	7
  6279  0017D0  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  6280  0017D2  0E80               	movlw	128
  6281  0017D4  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  6282  0017D6  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  6283  0017D8  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  6284  0017DA  0C80               	retlw	128
  6285  0017DC                     __end_ofPL66:
  6286                           	opt stack 0
  6287  0017DC                     PL76:
  6288                           	opt stack 19
  6289  0017DC  6EDA               	movwf	fsr2h,c
  6290  0017DE  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  6291  0017E2  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  6292  0017E6  0012               	return	
  6293  0017E8                     __end_ofPL76:
  6294                           	opt stack 0
  6295  0017E8                     PL118:
  6296                           	opt stack 19
  6297  0017E8  0EF0               	movlw	low _STATES
  6298  0017EA  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  6299  0017EC  0E02               	movlw	high _STATES
  6300  0017EE  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  6301  0017F0  0012               	return	
  6302  0017F2                     __end_ofPL118:
  6303                           	opt stack 0
  6304  0017F2                     PL126:
  6305                           	opt stack 19
  6306  0017F2  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  6307  0017F4  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  6308  0017F6  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  6309  0017F8  0012               	return	
  6310  0017FA                     __end_ofPL126:
  6311                           	opt stack 0
  6312                           tosu	equ	0xFFF
  6313                           tosh	equ	0xFFE
  6314                           tosl	equ	0xFFD
  6315                           pclath	equ	0xFFA
  6316                           tblptru	equ	0xFF8
  6317                           tblptrh	equ	0xFF7
  6318                           tblptrl	equ	0xFF6
  6319                           tablat	equ	0xFF5
  6320                           prodh	equ	0xFF4
  6321                           prodl	equ	0xFF3
  6322                           intcon	equ	0xFF2
  6323                           postinc0	equ	0xFEE
  6324                           plusw0	equ	0xFEB
  6325                           wreg	equ	0xFE8
  6326                           indf1	equ	0xFE7
  6327                           postinc1	equ	0xFE6
  6328                           postdec1	equ	0xFE5
  6329                           plusw1	equ	0xFE3
  6330                           fsr1h	equ	0xFE2
  6331                           fsr1l	equ	0xFE1
  6332                           indf2	equ	0xFDF
  6333                           postinc2	equ	0xFDE
  6334                           postdec2	equ	0xFDD
  6335                           plusw2	equ	0xFDB
  6336                           fsr2h	equ	0xFDA
  6337                           fsr2l	equ	0xFD9
  6338                           status	equ	0xFD8
  6339                           
  6340 ;; *************** function ___awdiv *****************
  6341 ;; Defined at:
  6342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;  dividend        2    0[BANK0 ] int 
  6345 ;;  divisor         2    2[BANK0 ] int 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  quotient        2    6[BANK0 ] int 
  6348 ;;  sign            1    5[BANK0 ] unsigned char 
  6349 ;;  counter         1    4[BANK0 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  2    0[BANK0 ] int 
  6352 ;; Registers used:
  6353 ;;		wreg, status,2, status,0
  6354 ;; Tracked objects:
  6355 ;;		On entry : 3F/0
  6356 ;;		On exit  : 3F/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6359 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6360 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6362 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6363 ;;Total ram usage:        8 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    9
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_GetDay
  6370 ;;		_LoadStatesFromEeprom
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text31
  6375  0026BA                     __ptext31:
  6376                           	opt stack 0
  6377  0026BA                     ___awdiv:
  6378                           	opt stack 18
  6379                           
  6380                           ; BSR set to: 0
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;incstack = 0
  6384  0026BA  6B65               	clrf	___awdiv@sign& (0+255),b
  6385                           
  6386                           ; BSR set to: 0
  6387  0026BC  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6388  0026BE  D006               	goto	l3479
  6389                           
  6390                           ; BSR set to: 0
  6391  0026C0  6D62               	negf	___awdiv@divisor& (0+255),b
  6392  0026C2  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6393  0026C4  B0D8               	btfsc	status,0,c
  6394  0026C6  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6395                           
  6396                           ; BSR set to: 0
  6397  0026C8  0E01               	movlw	1
  6398  0026CA  6F65               	movwf	___awdiv@sign& (0+255),b
  6399  0026CC                     l3479:
  6400                           
  6401                           ; BSR set to: 0
  6402  0026CC  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6403  0026CE  D006               	goto	l3485
  6404                           
  6405                           ; BSR set to: 0
  6406  0026D0  6D60               	negf	___awdiv@dividend& (0+255),b
  6407  0026D2  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6408  0026D4  B0D8               	btfsc	status,0,c
  6409  0026D6  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6410                           
  6411                           ; BSR set to: 0
  6412  0026D8  0E01               	movlw	1
  6413  0026DA  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  6414  0026DC                     l3485:
  6415                           
  6416                           ; BSR set to: 0
  6417  0026DC  6B66               	clrf	___awdiv@quotient& (0+255),b
  6418  0026DE  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  6419                           
  6420                           ; BSR set to: 0
  6421  0026E0  5162               	movf	___awdiv@divisor& (0+255),w,b
  6422  0026E2  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6423  0026E4  E01B               	bz	l3507
  6424                           
  6425                           ; BSR set to: 0
  6426  0026E6  0E01               	movlw	1
  6427  0026E8  6F64               	movwf	___awdiv@counter& (0+255),b
  6428  0026EA  D004               	goto	l3493
  6429  0026EC                     l3491:
  6430                           
  6431                           ; BSR set to: 0
  6432  0026EC  90D8               	bcf	status,0,c
  6433  0026EE  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  6434  0026F0  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6435  0026F2  2B64               	incf	___awdiv@counter& (0+255),f,b
  6436  0026F4                     l3493:
  6437                           
  6438                           ; BSR set to: 0
  6439  0026F4  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6440  0026F6  D7FA               	goto	l3491
  6441  0026F8                     l3495:
  6442                           
  6443                           ; BSR set to: 0
  6444  0026F8  90D8               	bcf	status,0,c
  6445  0026FA  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  6446  0026FC  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6447                           
  6448                           ; BSR set to: 0
  6449  0026FE  5162               	movf	___awdiv@divisor& (0+255),w,b
  6450  002700  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  6451  002702  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6452  002704  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6453  002706  E305               	bnc	l3503
  6454                           
  6455                           ; BSR set to: 0
  6456  002708  5162               	movf	___awdiv@divisor& (0+255),w,b
  6457  00270A  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  6458  00270C  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6459  00270E  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6460                           
  6461                           ; BSR set to: 0
  6462  002710  8166               	bsf	___awdiv@quotient& (0+255),0,b
  6463  002712                     l3503:
  6464                           
  6465                           ; BSR set to: 0
  6466  002712  90D8               	bcf	status,0,c
  6467  002714  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6468  002716  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  6469                           
  6470                           ; BSR set to: 0
  6471  002718  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  6472  00271A  D7EE               	goto	l3495
  6473  00271C                     l3507:
  6474                           
  6475                           ; BSR set to: 0
  6476  00271C  5165               	movf	___awdiv@sign& (0+255),w,b
  6477  00271E  E004               	bz	l3511
  6478                           
  6479                           ; BSR set to: 0
  6480  002720  6D66               	negf	___awdiv@quotient& (0+255),b
  6481  002722  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6482  002724  B0D8               	btfsc	status,0,c
  6483  002726  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6484  002728                     l3511:
  6485                           
  6486                           ; BSR set to: 0
  6487  002728  C066  F060         	movff	___awdiv@quotient,?___awdiv
  6488  00272C  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  6489                           
  6490                           ; BSR set to: 0
  6491  002730  0012               	return		;funcret
  6492  002732                     __end_of___awdiv:
  6493                           	opt stack 0
  6494                           tosu	equ	0xFFF
  6495                           tosh	equ	0xFFE
  6496                           tosl	equ	0xFFD
  6497                           pclath	equ	0xFFA
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           postinc0	equ	0xFEE
  6506                           plusw0	equ	0xFEB
  6507                           wreg	equ	0xFE8
  6508                           indf1	equ	0xFE7
  6509                           postinc1	equ	0xFE6
  6510                           postdec1	equ	0xFE5
  6511                           plusw1	equ	0xFE3
  6512                           fsr1h	equ	0xFE2
  6513                           fsr1l	equ	0xFE1
  6514                           indf2	equ	0xFDF
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           plusw2	equ	0xFDB
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function _LoadSettingsFromEeprom *****************
  6523 ;; Defined at:
  6524 ;;		line 33 in file "libs/eeprom.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;		None
  6527 ;; Auto vars:     Size  Location     Type
  6528 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  6529 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  6530 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  6531 ;; Return value:  Size  Location     Type
  6532 ;;                  1    wreg      void 
  6533 ;; Registers used:
  6534 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6535 ;; Tracked objects:
  6536 ;;		On entry : 3F/0
  6537 ;;		On exit  : 3F/0
  6538 ;;		Unchanged: 0/0
  6539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6541 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6543 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6544 ;;Total ram usage:        8 bytes
  6545 ;; Hardware stack levels used:    1
  6546 ;; Hardware stack levels required when called:   10
  6547 ;; This function calls:
  6548 ;;		_ReadEeprom
  6549 ;;		___wmul
  6550 ;; This function is called by:
  6551 ;;		_LoadAllFromEeprom
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text32
  6556  0012A8                     __ptext32:
  6557                           	opt stack 0
  6558  0012A8                     _LoadSettingsFromEeprom:
  6559                           	opt stack 19
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;eeprom.c: 34: WORD_VAL Temp16, Address;
  6563                           ;eeprom.c: 35: DWORD_VAL Temp32;
  6564                           ;eeprom.c: 37: Address.Val = 0x00;
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;incstack = 0
  6568  0012A8  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  6569  0012AA  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;eeprom.c: 38: Temp16.v[0] = ReadEeprom(Address);
  6573  0012AC  D8E7               	call	PL8	;call to abstracted procedure
  6574  0012AE  EC97  F016         	call	_ReadEeprom	;wreg free
  6575  0012B2  0100               	movlb	0	; () banked
  6576  0012B4  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;eeprom.c: 39: Address.Val++;
  6580  0012B6  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6581  0012B8  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6582                           
  6583                           ; BSR set to: 0
  6584                           ;eeprom.c: 40: Temp16.v[1] = ReadEeprom(Address);
  6585  0012BA  D8E0               	call	PL8	;call to abstracted procedure
  6586  0012BC  EC97  F016         	call	_ReadEeprom	;wreg free
  6587  0012C0  0100               	movlb	0	; () banked
  6588  0012C2  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  6589                           
  6590                           ; BSR set to: 0
  6591                           ;eeprom.c: 41: TIME_ZONE = (INT16) 60*Temp16.Val;
  6592  0012C4  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  6593  0012C8  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  6594  0012CC  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  6595  0012CE  0E3C               	movlw	60
  6596  0012D0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6597  0012D2  EC01  F016         	call	___wmul	;wreg free
  6598  0012D6  C060  F0E2         	movff	?___wmul,_TIME_ZONE
  6599  0012DA  C061  F0E3         	movff	?___wmul+1,_TIME_ZONE+1
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;eeprom.c: 43: Address.Val = 0x02;
  6603  0012DE  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6604  0012E0  0E02               	movlw	2
  6605  0012E2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;eeprom.c: 44: DAY_LIGHT_START.Day = ReadEeprom (Address);
  6609  0012E4  D8CB               	call	PL8	;call to abstracted procedure
  6610  0012E6  EC97  F016         	call	_ReadEeprom	;wreg free
  6611  0012EA  0100               	movlb	0	; () banked
  6612  0012EC  6FD8               	movwf	_DAY_LIGHT_START& (0+255),b
  6613  0012EE  6BD9               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;eeprom.c: 45: Address.Val++;
  6617  0012F0  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6618  0012F2  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;eeprom.c: 46: DAY_LIGHT_START.Month = ReadEeprom (Address);
  6622  0012F4  D8C3               	call	PL8	;call to abstracted procedure
  6623  0012F6  EC97  F016         	call	_ReadEeprom	;wreg free
  6624  0012FA  0100               	movlb	0	; () banked
  6625  0012FC  6FDA               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  6626  0012FE  6BDB               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  6627                           
  6628                           ; BSR set to: 0
  6629                           ;eeprom.c: 48: Address.Val = 0x04;
  6630  001300  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6631  001302  0E04               	movlw	4
  6632  001304  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6633                           
  6634                           ; BSR set to: 0
  6635                           ;eeprom.c: 49: DAY_LIGHT_END.Day = ReadEeprom (Address);
  6636  001306  D8BA               	call	PL8	;call to abstracted procedure
  6637  001308  EC97  F016         	call	_ReadEeprom	;wreg free
  6638  00130C  0100               	movlb	0	; () banked
  6639  00130E  6FD4               	movwf	_DAY_LIGHT_END& (0+255),b
  6640  001310  6BD5               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  6641                           
  6642                           ; BSR set to: 0
  6643                           ;eeprom.c: 50: Address.Val++;
  6644  001312  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6645  001314  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6646                           
  6647                           ; BSR set to: 0
  6648                           ;eeprom.c: 51: DAY_LIGHT_END.Month = ReadEeprom (Address);
  6649  001316  D8B2               	call	PL8	;call to abstracted procedure
  6650  001318  EC97  F016         	call	_ReadEeprom	;wreg free
  6651  00131C  0100               	movlb	0	; () banked
  6652  00131E  6FD6               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  6653  001320  6BD7               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  6654                           
  6655                           ; BSR set to: 0
  6656                           ;eeprom.c: 53: Address.Val = 0x06;
  6657  001322  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6658  001324  0E06               	movlw	6
  6659  001326  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6660                           
  6661                           ; BSR set to: 0
  6662                           ;eeprom.c: 54: CENTURY = ReadEeprom(Address);
  6663  001328  D8A9               	call	PL8	;call to abstracted procedure
  6664  00132A  EC97  F016         	call	_ReadEeprom	;wreg free
  6665  00132E  0100               	movlb	0	; () banked
  6666  001330  6FFD               	movwf	_CENTURY& (0+255),b
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;eeprom.c: 56: Address.Val = 0x07;
  6670  001332  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6671  001334  0E07               	movlw	7
  6672  001336  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;eeprom.c: 57: Temp16.v[0] = ReadEeprom(Address);
  6676  001338  D8A1               	call	PL8	;call to abstracted procedure
  6677  00133A  EC97  F016         	call	_ReadEeprom	;wreg free
  6678  00133E  0100               	movlb	0	; () banked
  6679  001340  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;eeprom.c: 58: Address.Val++;
  6683  001342  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6684  001344  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6685                           
  6686                           ; BSR set to: 0
  6687                           ;eeprom.c: 59: Temp16.v[1] = ReadEeprom(Address);
  6688  001346  D89A               	call	PL8	;call to abstracted procedure
  6689  001348  EC97  F016         	call	_ReadEeprom	;wreg free
  6690  00134C  0100               	movlb	0	; () banked
  6691  00134E  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;eeprom.c: 60: CYCLE_DELAY = (INT16) Temp16.Val;
  6695  001350  C06A  F0E0         	movff	LoadSettingsFromEeprom@Temp16,_CYCLE_DELAY
  6696  001354  C06B  F0E1         	movff	LoadSettingsFromEeprom@Temp16+1,_CYCLE_DELAY+1
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;eeprom.c: 62: Address.Val = 0x09;
  6700  001358  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6701  00135A  0E09               	movlw	9
  6702  00135C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6703                           
  6704                           ; BSR set to: 0
  6705                           ;eeprom.c: 63: BLINK_ON_TIME = ReadEeprom(Address);
  6706  00135E  D88E               	call	PL8	;call to abstracted procedure
  6707  001360  EC97  F016         	call	_ReadEeprom	;wreg free
  6708  001364  6E5D               	movwf	_BLINK_ON_TIME,c
  6709                           
  6710                           ;eeprom.c: 65: Address.Val = 0x0A;
  6711  001366  0100               	movlb	0	; () banked
  6712  001368  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6713  00136A  0E0A               	movlw	10
  6714  00136C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;eeprom.c: 66: BLINK_OFF_TIME = ReadEeprom(Address);
  6718  00136E  D886               	call	PL8	;call to abstracted procedure
  6719  001370  EC97  F016         	call	_ReadEeprom	;wreg free
  6720  001374  6E5C               	movwf	_BLINK_OFF_TIME,c
  6721                           
  6722                           ;eeprom.c: 68: Address.Val = 0x0B;
  6723  001376  0100               	movlb	0	; () banked
  6724  001378  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6725  00137A  0E0B               	movlw	11
  6726  00137C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;eeprom.c: 69: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  6730  00137E  D87E               	call	PL8	;call to abstracted procedure
  6731  001380  EC97  F016         	call	_ReadEeprom	;wreg free
  6732  001384  6E5B               	movwf	_BLINK_LAST_X_SECONDS,c
  6733                           
  6734                           ;eeprom.c: 71: Address.Val = 0x0C;
  6735  001386  0100               	movlb	0	; () banked
  6736  001388  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6737  00138A  0E0C               	movlw	12
  6738  00138C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;eeprom.c: 72: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  6742  00138E  D876               	call	PL8	;call to abstracted procedure
  6743  001390  EC97  F016         	call	_ReadEeprom	;wreg free
  6744  001394  6E5A               	movwf	_AUDIO_NORMAL_ON_TIME,c
  6745                           
  6746                           ;eeprom.c: 74: Address.Val = 0x0D;
  6747  001396  0100               	movlb	0	; () banked
  6748  001398  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6749  00139A  0E0D               	movlw	13
  6750  00139C  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;eeprom.c: 75: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  6754  00139E  D86E               	call	PL8	;call to abstracted procedure
  6755  0013A0  EC97  F016         	call	_ReadEeprom	;wreg free
  6756  0013A4  6E59               	movwf	_AUDIO_NORMAL_OFF_TIME,c
  6757                           
  6758                           ;eeprom.c: 77: Address.Val = 0x0E;
  6759  0013A6  0100               	movlb	0	; () banked
  6760  0013A8  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6761  0013AA  0E0E               	movlw	14
  6762  0013AC  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;eeprom.c: 78: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  6766  0013AE  D866               	call	PL8	;call to abstracted procedure
  6767  0013B0  EC97  F016         	call	_ReadEeprom	;wreg free
  6768  0013B4  6E58               	movwf	_AUDIO_SPECIAL_ON_TIME,c
  6769                           
  6770                           ;eeprom.c: 80: Address.Val = 0x0F;
  6771  0013B6  0100               	movlb	0	; () banked
  6772  0013B8  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6773  0013BA  0E0F               	movlw	15
  6774  0013BC  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;eeprom.c: 81: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  6778  0013BE  D85E               	call	PL8	;call to abstracted procedure
  6779  0013C0  EC97  F016         	call	_ReadEeprom	;wreg free
  6780  0013C4  0100               	movlb	0	; () banked
  6781  0013C6  6FE9               	movwf	_AUDIO_SPECIAL_OFF_TIME& (0+255),b
  6782                           
  6783                           ; BSR set to: 0
  6784                           ;eeprom.c: 83: Address.Val = 0x10;
  6785  0013C8  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6786  0013CA  0E10               	movlw	16
  6787  0013CC  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;eeprom.c: 84: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  6791  0013CE  D856               	call	PL8	;call to abstracted procedure
  6792  0013D0  EC97  F016         	call	_ReadEeprom	;wreg free
  6793  0013D4  0100               	movlb	0	; () banked
  6794  0013D6  6FE8               	movwf	_SPECIAL_AUDIO_LAST_X_SECONDS& (0+255),b
  6795                           
  6796                           ; BSR set to: 0
  6797                           ;eeprom.c: 86: Address.Val = 0x11;
  6798  0013D8  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6799  0013DA  0E11               	movlw	17
  6800  0013DC  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;eeprom.c: 87: GPS_SYNC_AT_START = ReadEeprom(Address);
  6804  0013DE  D84E               	call	PL8	;call to abstracted procedure
  6805  0013E0  EC97  F016         	call	_ReadEeprom	;wreg free
  6806  0013E4  0100               	movlb	0	; () banked
  6807  0013E6  6FE7               	movwf	_GPS_SYNC_AT_START& (0+255),b
  6808                           
  6809                           ; BSR set to: 0
  6810                           ;eeprom.c: 89: Address.Val = 0x12;
  6811  0013E8  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6812  0013EA  0E12               	movlw	18
  6813  0013EC  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;eeprom.c: 90: Temp32.Val = 0;
  6817  0013EE  6B66               	clrf	LoadSettingsFromEeprom@Temp32& (0+255),b
  6818  0013F0  6B67               	clrf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  6819  0013F2  6B68               	clrf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  6820  0013F4  6B69               	clrf	(LoadSettingsFromEeprom@Temp32+3)& (0+255),b
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;eeprom.c: 91: Temp32.v[0] = ReadEeprom(Address);
  6824  0013F6  D842               	call	PL8	;call to abstracted procedure
  6825  0013F8  EC97  F016         	call	_ReadEeprom	;wreg free
  6826  0013FC  0100               	movlb	0	; () banked
  6827  0013FE  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;eeprom.c: 92: Address.Val++;
  6831  001400  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6832  001402  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;eeprom.c: 93: Temp32.v[1] = ReadEeprom(Address);
  6836  001404  D83B               	call	PL8	;call to abstracted procedure
  6837  001406  EC97  F016         	call	_ReadEeprom	;wreg free
  6838  00140A  0100               	movlb	0	; () banked
  6839  00140C  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  6840                           
  6841                           ; BSR set to: 0
  6842                           ;eeprom.c: 94: Address.Val++;
  6843  00140E  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6844  001410  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;eeprom.c: 95: Temp32.v[2] = ReadEeprom(Address);
  6848  001412  D834               	call	PL8	;call to abstracted procedure
  6849  001414  EC97  F016         	call	_ReadEeprom	;wreg free
  6850  001418  0100               	movlb	0	; () banked
  6851  00141A  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;eeprom.c: 96: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  6855  00141C  C066  F0D0         	movff	LoadSettingsFromEeprom@Temp32,_GPS_SYNC_EVERY_x_SECONDS
  6856  001420  C067  F0D1         	movff	LoadSettingsFromEeprom@Temp32+1,_GPS_SYNC_EVERY_x_SECONDS+1
  6857  001424  C068  F0D2         	movff	LoadSettingsFromEeprom@Temp32+2,_GPS_SYNC_EVERY_x_SECONDS+2
  6858  001428  C069  F0D3         	movff	LoadSettingsFromEeprom@Temp32+3,_GPS_SYNC_EVERY_x_SECONDS+3
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;eeprom.c: 98: Address.Val = 0x15;
  6862  00142C  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  6863  00142E  0E15               	movlw	21
  6864  001430  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;eeprom.c: 99: Temp16.v[0] = ReadEeprom(Address);
  6868  001432  D824               	call	PL8	;call to abstracted procedure
  6869  001434  EC97  F016         	call	_ReadEeprom	;wreg free
  6870  001438  0100               	movlb	0	; () banked
  6871  00143A  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;eeprom.c: 100: Address.Val++;
  6875  00143C  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  6876  00143E  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;eeprom.c: 101: Temp16.v[1] = ReadEeprom(Address);
  6880  001440  D81D               	call	PL8	;call to abstracted procedure
  6881  001442  EC97  F016         	call	_ReadEeprom	;wreg free
  6882  001446  0100               	movlb	0	; () banked
  6883  001448  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;eeprom.c: 102: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  6887  00144A  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  6888  00144E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  6889  001450  0E0E               	movlw	14
  6890  001452  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6891  001454  0E10               	movlw	16
  6892  001456  6F62               	movwf	___wmul@multiplicand& (0+255),b
  6893  001458  EC01  F016         	call	___wmul	;wreg free
  6894  00145C  516A               	movf	LoadSettingsFromEeprom@Temp16& (0+255),w,b
  6895  00145E  0D3C               	mullw	60
  6896  001460  5160               	movf	?___wmul& (0+255),w,b
  6897  001462  26F3               	addwf	prodl,f,c
  6898  001464  5161               	movf	(?___wmul+1)& (0+255),w,b
  6899  001466  22F4               	addwfc	prodh,f,c
  6900  001468  CFF3 F0CC          	movff	prodl,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME
  6901  00146C  CFF4 F0CD          	movff	prodh,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1
  6902  001470  0E00               	movlw	0
  6903  001472  BFCD               	btfsc	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),7,b
  6904  001474  0EFF               	movlw	-1
  6905  001476  6FCE               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),b
  6906  001478  6FCF               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),b
  6907                           
  6908                           ; BSR set to: 0
  6909  00147A  0012               	return		;funcret
  6910  00147C                     __end_of_LoadSettingsFromEeprom:
  6911                           	opt stack 0
  6912  00147C                     PL8:
  6913                           	opt stack 19
  6914  00147C  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  6915  001480  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  6916  001484  0012               	return	
  6917  001486                     __end_ofPL8:
  6918                           	opt stack 0
  6919                           tosu	equ	0xFFF
  6920                           tosh	equ	0xFFE
  6921                           tosl	equ	0xFFD
  6922                           pclath	equ	0xFFA
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           postinc0	equ	0xFEE
  6931                           plusw0	equ	0xFEB
  6932                           wreg	equ	0xFE8
  6933                           indf1	equ	0xFE7
  6934                           postinc1	equ	0xFE6
  6935                           postdec1	equ	0xFE5
  6936                           plusw1	equ	0xFE3
  6937                           fsr1h	equ	0xFE2
  6938                           fsr1l	equ	0xFE1
  6939                           indf2	equ	0xFDF
  6940                           postinc2	equ	0xFDE
  6941                           postdec2	equ	0xFDD
  6942                           plusw2	equ	0xFDB
  6943                           fsr2h	equ	0xFDA
  6944                           fsr2l	equ	0xFD9
  6945                           status	equ	0xFD8
  6946                           
  6947 ;; *************** function _LoadEventsFromEeprom *****************
  6948 ;; Defined at:
  6949 ;;		line 105 in file "libs/eeprom.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;  i               2   20[BANK0 ] int 
  6954 ;;  Temp16          2   24[BANK0 ] struct _WORD_VAL
  6955 ;;  Address         2   22[BANK0 ] struct _WORD_VAL
  6956 ;; Return value:  Size  Location     Type
  6957 ;;                  1    wreg      void 
  6958 ;; Registers used:
  6959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 3F/0
  6962 ;;		On exit  : 3F/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6966 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6967 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6968 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6969 ;;Total ram usage:       14 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:   10
  6972 ;; This function calls:
  6973 ;;		_ReadEeprom
  6974 ;;		___lmul
  6975 ;;		___wmul
  6976 ;; This function is called by:
  6977 ;;		_LoadAllFromEeprom
  6978 ;; This function uses a non-reentrant model
  6979 ;;
  6980                           
  6981                           	psect	text33
  6982  0017FA                     __ptext33:
  6983                           	opt stack 0
  6984  0017FA                     _LoadEventsFromEeprom:
  6985                           	opt stack 19
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;eeprom.c: 106: WORD_VAL Temp16, Address;
  6989                           ;eeprom.c: 107: Address.Val = 0x50;
  6990                           
  6991                           ; BSR set to: 0
  6992                           ;incstack = 0
  6993  0017FA  6B77               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  6994  0017FC  0E50               	movlw	80
  6995  0017FE  6F76               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;eeprom.c: 108: for (int i=0; i<24; i++) {
  6999  001800  6B74               	clrf	LoadEventsFromEeprom@i& (0+255),b
  7000  001802  6B75               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  7001  001804                     l4051:
  7002                           
  7003                           ; BSR set to: 0
  7004                           ;eeprom.c: 109: Temp16.v[0] = ReadEeprom(Address);
  7005  001804  D8AD               	call	PL54	;call to abstracted procedure
  7006  001806  EC97  F016         	call	_ReadEeprom	;wreg free
  7007  00180A  0100               	movlb	0	; () banked
  7008  00180C  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;eeprom.c: 110: Address.Val++;
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;eeprom.c: 111: Temp16.v[1] = ReadEeprom(Address);
  7015  00180E  D896               	call	PL44	;call to abstracted procedure
  7016  001810  EC97  F016         	call	_ReadEeprom	;wreg free
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;eeprom.c: 112: EVENTS[i].START_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  7020                           ;eeprom.c: 113: + (INT32)((INT8)Temp16.v[0])*60;
  7021  001814  D887               	call	PL30	;call to abstracted procedure
  7022  001816  D878               	call	PL28	;call to abstracted procedure
  7023  001818  EC89  F014         	call	___lmul	;wreg free
  7024  00181C  D84B               	call	PL20	;call to abstracted procedure
  7025  00181E  EC89  F014         	call	___lmul	;wreg free
  7026  001822  D85E               	call	PL22	;call to abstracted procedure
  7027  001824  EC01  F016         	call	___wmul	;wreg free
  7028  001828  ECDE  F00D         	call	PL40	;call to abstracted procedure
  7029  00182C  0E02               	movlw	high _EVENTS
  7030  00182E  D88D               	call	PL52	;call to abstracted procedure
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;eeprom.c: 114: Address.Val++;
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;eeprom.c: 115: Temp16.v[0] = ReadEeprom(Address);
  7037  001830  D885               	call	PL44	;call to abstracted procedure
  7038  001832  EC97  F016         	call	_ReadEeprom	;wreg free
  7039  001836  0100               	movlb	0	; () banked
  7040  001838  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;eeprom.c: 116: Address.Val++;
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;eeprom.c: 117: Temp16.v[1] = ReadEeprom(Address);
  7047  00183A  D880               	call	PL44	;call to abstracted procedure
  7048  00183C  EC97  F016         	call	_ReadEeprom	;wreg free
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;eeprom.c: 118: EVENTS[i].END_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  7052                           ;eeprom.c: 119: + (INT32)((INT8)Temp16.v[0])*60;
  7053  001840  D871               	call	PL30	;call to abstracted procedure
  7054  001842  D862               	call	PL28	;call to abstracted procedure
  7055  001844  EC89  F014         	call	___lmul	;wreg free
  7056  001848  D835               	call	PL20	;call to abstracted procedure
  7057  00184A  EC89  F014         	call	___lmul	;wreg free
  7058  00184E  D848               	call	PL22	;call to abstracted procedure
  7059  001850  EC01  F016         	call	___wmul	;wreg free
  7060  001854  ECE2  F00D         	call	PL60	;call to abstracted procedure
  7061  001858  D878               	call	PL52	;call to abstracted procedure
  7062                           
  7063                           ;eeprom.c: 120: Address.Val++;
  7064  00185A  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  7065  00185C  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;eeprom.c: 121: EVENTS[i].CYCLE = ReadEeprom(Address);
  7069  00185E  D866               	call	PL32	;call to abstracted procedure
  7070  001860  EC01  F016         	call	___wmul	;wreg free
  7071  001864  0E08               	movlw	low (_EVENTS+8)
  7072  001866  2560               	addwf	?___wmul& (0+255),w,b
  7073  001868  6ED9               	movwf	fsr2l,c
  7074  00186A  0E02               	movlw	high (_EVENTS+8)
  7075  00186C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7076  00186E  6EDA               	movwf	fsr2h,c
  7077  001870  D877               	call	PL54	;call to abstracted procedure
  7078  001872  EC97  F016         	call	_ReadEeprom	;wreg free
  7079  001876  6EDF               	movwf	indf2,c
  7080                           
  7081                           ;eeprom.c: 122: Address.Val++;
  7082  001878  0100               	movlb	0	; () banked
  7083                           
  7084                           ;eeprom.c: 123: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  7085  00187A  D860               	call	PL44	;call to abstracted procedure
  7086  00187C  EC97  F016         	call	_ReadEeprom	;wreg free
  7087  001880  0100               	movlb	0	; () banked
  7088  001882  6F6C               	movwf	??_LoadEventsFromEeprom& (0+255),b
  7089  001884  D853               	call	PL32	;call to abstracted procedure
  7090  001886  EC01  F016         	call	___wmul	;wreg free
  7091  00188A  ECE7  F00D         	call	PL86	;call to abstracted procedure
  7092  00188E  476C               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  7093  001890  50DF               	movf	223,w,c
  7094  001892  0100               	movlb	0	; () banked
  7095  001894  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  7096  001896  0B01               	andlw	-255
  7097  001898  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  7098  00189A  6EDF               	movwf	223,c
  7099                           
  7100                           ; BSR set to: 2
  7101                           ;eeprom.c: 124: Address.Val++;
  7102  00189C  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  7103  00189E  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  7104                           
  7105                           ; BSR set to: 0
  7106  0018A0  4B74               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  7107  0018A2  2B75               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  7108                           
  7109                           ; BSR set to: 0
  7110  0018A4  BF75               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  7111  0018A6  D7AE               	goto	l4051
  7112  0018A8  5175               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  7113  0018AA  E103               	bnz	u4120
  7114  0018AC  0E18               	movlw	24
  7115  0018AE  5D74               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  7116  0018B0  E3A9               	bnc	l4051
  7117  0018B2                     u4120:
  7118                           
  7119                           ; BSR set to: 0
  7120  0018B2  0012               	return		;funcret
  7121  0018B4                     __end_of_LoadEventsFromEeprom:
  7122                           	opt stack 0
  7123  0018B4                     PL20:
  7124                           	opt stack 19
  7125  0018B4  C060  F06C         	movff	?___lmul,??_LoadEventsFromEeprom
  7126  0018B8  C061  F06D         	movff	?___lmul+1,??_LoadEventsFromEeprom+1
  7127  0018BC  C062  F06E         	movff	?___lmul+2,??_LoadEventsFromEeprom+2
  7128  0018C0  C063  F06F         	movff	?___lmul+3,??_LoadEventsFromEeprom+3
  7129  0018C4  5178               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  7130  0018C6  6F60               	movwf	___lmul@multiplier& (0+255),b
  7131  0018C8  0E00               	movlw	0
  7132  0018CA  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  7133  0018CC  0EFF               	movlw	-1
  7134  0018CE  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  7135  0018D0  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  7136  0018D2  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  7137  0018D4  0E3C               	movlw	60
  7138  0018D6  6F64               	movwf	___lmul@multiplicand& (0+255),b
  7139  0018D8  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  7140  0018DA  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  7141  0018DC  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  7142  0018DE  0C3C               	retlw	60
  7143  0018E0                     __end_ofPL20:
  7144                           	opt stack 0
  7145  0018E0                     PL22:
  7146                           	opt stack 19
  7147  0018E0  5160               	movf	?___lmul& (0+255),w,b
  7148  0018E2  256C               	addwf	??_LoadEventsFromEeprom& (0+255),w,b
  7149  0018E4  6F70               	movwf	(??_LoadEventsFromEeprom+4)& (0+255),b
  7150  0018E6  5161               	movf	(?___lmul+1)& (0+255),w,b
  7151  0018E8  216D               	addwfc	(??_LoadEventsFromEeprom+1)& (0+255),w,b
  7152  0018EA  6F71               	movwf	(??_LoadEventsFromEeprom+5)& (0+255),b
  7153  0018EC  5162               	movf	(?___lmul+2)& (0+255),w,b
  7154  0018EE  216E               	addwfc	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  7155  0018F0  6F72               	movwf	(??_LoadEventsFromEeprom+6)& (0+255),b
  7156  0018F2  5163               	movf	(?___lmul+3)& (0+255),w,b
  7157  0018F4  216F               	addwfc	(??_LoadEventsFromEeprom+3)& (0+255),w,b
  7158  0018F6  6F73               	movwf	(??_LoadEventsFromEeprom+7)& (0+255),b
  7159  0018F8  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  7160  0018FC  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  7161  001900  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7162  001902  0E0A               	movlw	10
  7163  001904  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7164  001906  0C0A               	retlw	10
  7165  001908                     __end_ofPL22:
  7166                           	opt stack 0
  7167  001908                     PL28:
  7168                           	opt stack 19
  7169  001908  6F60               	movwf	___lmul@multiplier& (0+255),b
  7170  00190A  0E00               	movlw	0
  7171  00190C  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  7172  00190E  0EFF               	movlw	-1
  7173  001910  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  7174  001912  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  7175  001914  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  7176  001916  0E10               	movlw	16
  7177  001918  6F64               	movwf	___lmul@multiplicand& (0+255),b
  7178  00191A  0E0E               	movlw	14
  7179  00191C  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  7180  00191E  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  7181  001920  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  7182  001922  0C0E               	retlw	14
  7183  001924                     __end_ofPL28:
  7184                           	opt stack 0
  7185  001924                     PL30:
  7186                           	opt stack 19
  7187  001924  0100               	movlb	0	; () banked
  7188  001926  6F79               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  7189  001928  5179               	movf	(LoadEventsFromEeprom@Temp16+1)& (0+255),w,b
  7190  00192A  0012               	return	
  7191  00192C                     __end_ofPL30:
  7192                           	opt stack 0
  7193  00192C                     PL32:
  7194                           	opt stack 19
  7195  00192C  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  7196  001930  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  7197  001934  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7198  001936  0E0A               	movlw	10
  7199  001938  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7200  00193A  0C0A               	retlw	10
  7201  00193C                     __end_ofPL32:
  7202                           	opt stack 0
  7203  00193C                     PL44:
  7204                           	opt stack 19
  7205  00193C  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  7206  00193E  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  7207  001940  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  7208  001944  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  7209  001948  0012               	return	
  7210  00194A                     __end_ofPL44:
  7211                           	opt stack 0
  7212  00194A                     PL52:
  7213                           	opt stack 19
  7214  00194A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7215  00194C  6EDA               	movwf	fsr2h,c
  7216  00194E  C070  FFDE         	movff	??_LoadEventsFromEeprom+4,postinc2
  7217  001952  C071  FFDE         	movff	??_LoadEventsFromEeprom+5,postinc2
  7218  001956  C072  FFDE         	movff	??_LoadEventsFromEeprom+6,postinc2
  7219  00195A  C073  FFDE         	movff	??_LoadEventsFromEeprom+7,postinc2
  7220  00195E  0012               	return	
  7221  001960                     __end_ofPL52:
  7222                           	opt stack 0
  7223  001960                     PL54:
  7224                           	opt stack 19
  7225  001960  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  7226  001964  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  7227  001968  0012               	return	
  7228  00196A                     __end_ofPL54:
  7229                           	opt stack 0
  7230                           tosu	equ	0xFFF
  7231                           tosh	equ	0xFFE
  7232                           tosl	equ	0xFFD
  7233                           pclath	equ	0xFFA
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon	equ	0xFF2
  7241                           postinc0	equ	0xFEE
  7242                           plusw0	equ	0xFEB
  7243                           wreg	equ	0xFE8
  7244                           indf1	equ	0xFE7
  7245                           postinc1	equ	0xFE6
  7246                           postdec1	equ	0xFE5
  7247                           plusw1	equ	0xFE3
  7248                           fsr1h	equ	0xFE2
  7249                           fsr1l	equ	0xFE1
  7250                           indf2	equ	0xFDF
  7251                           postinc2	equ	0xFDE
  7252                           postdec2	equ	0xFDD
  7253                           plusw2	equ	0xFDB
  7254                           fsr2h	equ	0xFDA
  7255                           fsr2l	equ	0xFD9
  7256                           status	equ	0xFD8
  7257                           
  7258 ;; *************** function ___lmul *****************
  7259 ;; Defined at:
  7260 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  multiplier      4    0[BANK0 ] unsigned long 
  7263 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;  product         4    8[BANK0 ] unsigned long 
  7266 ;; Return value:  Size  Location     Type
  7267 ;;                  4    0[BANK0 ] unsigned long 
  7268 ;; Registers used:
  7269 ;;		wreg, status,2, status,0
  7270 ;; Tracked objects:
  7271 ;;		On entry : 3F/0
  7272 ;;		On exit  : 3F/0
  7273 ;;		Unchanged: 0/0
  7274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7275 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7276 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7278 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7279 ;;Total ram usage:       12 bytes
  7280 ;; Hardware stack levels used:    1
  7281 ;; Hardware stack levels required when called:    9
  7282 ;; This function calls:
  7283 ;;		Nothing
  7284 ;; This function is called by:
  7285 ;;		_LoadEventsFromEeprom
  7286 ;;		_TimeTextToSecond
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text34
  7291  002912                     __ptext34:
  7292                           	opt stack 0
  7293  002912                     ___lmul:
  7294                           	opt stack 18
  7295                           
  7296                           ; BSR set to: 0
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;incstack = 0
  7300  002912  6B68               	clrf	___lmul@product& (0+255),b
  7301  002914  6B69               	clrf	(___lmul@product+1)& (0+255),b
  7302  002916  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  7303  002918  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  7304  00291A                     l1173:
  7305                           
  7306                           ; BSR set to: 0
  7307  00291A  A160               	btfss	___lmul@multiplier& (0+255),0,b
  7308  00291C  D008               	goto	l3387
  7309                           
  7310                           ; BSR set to: 0
  7311  00291E  5164               	movf	___lmul@multiplicand& (0+255),w,b
  7312  002920  2768               	addwf	___lmul@product& (0+255),f,b
  7313  002922  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  7314  002924  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  7315  002926  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  7316  002928  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  7317  00292A  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  7318  00292C  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  7319  00292E                     l3387:
  7320                           
  7321                           ; BSR set to: 0
  7322  00292E  90D8               	bcf	status,0,c
  7323  002930  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  7324  002932  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  7325  002934  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  7326  002936  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  7327                           
  7328                           ; BSR set to: 0
  7329  002938  90D8               	bcf	status,0,c
  7330  00293A  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  7331  00293C  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  7332  00293E  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  7333  002940  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  7334  002942  5160               	movf	___lmul@multiplier& (0+255),w,b
  7335  002944  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  7336  002946  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  7337  002948  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  7338  00294A  E1E7               	bnz	l1173
  7339                           
  7340                           ; BSR set to: 0
  7341  00294C  C068  F060         	movff	___lmul@product,?___lmul
  7342  002950  C069  F061         	movff	___lmul@product+1,?___lmul+1
  7343  002954  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  7344  002958  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  7345                           
  7346                           ; BSR set to: 0
  7347  00295C  0012               	return		;funcret
  7348  00295E                     __end_of___lmul:
  7349                           	opt stack 0
  7350                           tosu	equ	0xFFF
  7351                           tosh	equ	0xFFE
  7352                           tosl	equ	0xFFD
  7353                           pclath	equ	0xFFA
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           intcon	equ	0xFF2
  7361                           postinc0	equ	0xFEE
  7362                           plusw0	equ	0xFEB
  7363                           wreg	equ	0xFE8
  7364                           indf1	equ	0xFE7
  7365                           postinc1	equ	0xFE6
  7366                           postdec1	equ	0xFE5
  7367                           plusw1	equ	0xFE3
  7368                           fsr1h	equ	0xFE2
  7369                           fsr1l	equ	0xFE1
  7370                           indf2	equ	0xFDF
  7371                           postinc2	equ	0xFDE
  7372                           postdec2	equ	0xFDD
  7373                           plusw2	equ	0xFDB
  7374                           fsr2h	equ	0xFDA
  7375                           fsr2l	equ	0xFD9
  7376                           status	equ	0xFD8
  7377                           
  7378 ;; *************** function _LoadCyclesFromEeprom *****************
  7379 ;; Defined at:
  7380 ;;		line 157 in file "libs/eeprom.c"
  7381 ;; Parameters:    Size  Location     Type
  7382 ;;		None
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;  j               2   15[BANK0 ] int 
  7385 ;;  i               2   19[BANK0 ] int 
  7386 ;;  i               2   17[BANK0 ] int 
  7387 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      void 
  7390 ;; Registers used:
  7391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7392 ;; Tracked objects:
  7393 ;;		On entry : 3F/0
  7394 ;;		On exit  : 3F/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7398 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7399 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7400 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7401 ;;Total ram usage:       15 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:   10
  7404 ;; This function calls:
  7405 ;;		_ReadEeprom
  7406 ;;		___wmul
  7407 ;; This function is called by:
  7408 ;;		_LoadAllFromEeprom
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text35
  7413  00196A                     __ptext35:
  7414                           	opt stack 0
  7415  00196A                     _LoadCyclesFromEeprom:
  7416                           	opt stack 19
  7417                           
  7418                           ; BSR set to: 0
  7419                           ;eeprom.c: 158: WORD_VAL Address;
  7420                           ;eeprom.c: 159: Address.Val = 0x3F;
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;incstack = 0
  7424  00196A  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  7425  00196C  0E3F               	movlw	63
  7426  00196E  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;eeprom.c: 161: for (int i=0; i<17; i++) {
  7430  001970  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  7431  001972  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  7432  001974                     l4143:
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;eeprom.c: 162: CYCLES[i].END_STATE = ReadEeprom(Address);
  7436  001974  D898               	call	PL6	;call to abstracted procedure
  7437  001976  0E03               	movlw	3
  7438  001978  D892               	call	PL4	;call to abstracted procedure
  7439  00197A  90D8               	bcf	status,0,c
  7440  00197C  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  7441  00197E  6ED9               	movwf	fsr2l,c
  7442  001980  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  7443  001982  6EDA               	movwf	fsr2h,c
  7444  001984  90D8               	bcf	status,0,c
  7445  001986  36D9               	rlcf	fsr2l,f,c
  7446  001988  36DA               	rlcf	fsr2h,f,c
  7447  00198A  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  7448  00198C  26D9               	addwf	fsr2l,f,c
  7449  00198E  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  7450  001990  22DA               	addwfc	fsr2h,f,c
  7451  001992  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  7452  001996  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  7453  00199A  EC97  F016         	call	_ReadEeprom	;wreg free
  7454  00199E  6EDF               	movwf	indf2,c
  7455                           
  7456                           ;eeprom.c: 163: Address.Val++;
  7457  0019A0  0100               	movlb	0	; () banked
  7458  0019A2  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  7459  0019A4  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  7460                           
  7461                           ; BSR set to: 0
  7462  0019A6  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  7463  0019A8  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  7464                           
  7465                           ; BSR set to: 0
  7466  0019AA  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  7467  0019AC  D7E3               	goto	l4143
  7468  0019AE  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  7469  0019B0  E103               	bnz	u4200
  7470  0019B2  0E11               	movlw	17
  7471  0019B4  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  7472  0019B6  E3DE               	bnc	l4143
  7473  0019B8                     u4200:
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;eeprom.c: 164: }
  7477                           ;eeprom.c: 166: for (int i=0; i<17; i++) {
  7478  0019B8  6B73               	clrf	LoadCyclesFromEeprom@i_1464& (0+255),b
  7479  0019BA  6B74               	clrf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),b
  7480  0019BC                     l4155:
  7481                           
  7482                           ; BSR set to: 0
  7483                           ;eeprom.c: 167: if (i==0)
  7484  0019BC  5173               	movf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  7485  0019BE  1174               	iorwf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  7486  0019C0  E106               	bnz	l4159
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;eeprom.c: 168: CYCLES[i].START_STATE = 0;
  7490  0019C2  D871               	call	PL6	;call to abstracted procedure
  7491  0019C4  0E02               	movlw	2
  7492  0019C6  D86B               	call	PL4	;call to abstracted procedure
  7493  0019C8  D85D               	call	PL2	;call to abstracted procedure
  7494  0019CA  6ADF               	clrf	indf2,c
  7495  0019CC  D01E               	goto	l4161
  7496  0019CE                     l4159:
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;eeprom.c: 169: else
  7500                           ;eeprom.c: 172: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  7501  0019CE  D86B               	call	PL6	;call to abstracted procedure
  7502  0019D0  0E02               	movlw	2
  7503  0019D2  D865               	call	PL4	;call to abstracted procedure
  7504  0019D4  D857               	call	PL2	;call to abstracted procedure
  7505  0019D6  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  7506  0019D8  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  7507  0019DA  0E00               	movlw	low _CYCLES
  7508  0019DC  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  7509  0019DE  0E01               	movlw	high _CYCLES
  7510  0019E0  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  7511  0019E2  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  7512  0019E4  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  7513  0019E6  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  7514  0019E8  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  7515  0019EA  90D8               	bcf	status,0,c
  7516  0019EC  3573               	rlcf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  7517  0019EE  6EE1               	movwf	fsr1l,c
  7518  0019F0  3574               	rlcf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  7519  0019F2  6EE2               	movwf	fsr1h,c
  7520  0019F4  90D8               	bcf	status,0,c
  7521  0019F6  36E1               	rlcf	fsr1l,f,c
  7522  0019F8  36E2               	rlcf	fsr1h,f,c
  7523  0019FA  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  7524  0019FC  26E1               	addwf	fsr1l,f,c
  7525  0019FE  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  7526  001A00  22E2               	addwfc	fsr1h,f,c
  7527  001A02  50E7               	movf	indf1,w,c
  7528  001A04  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  7529  001A06  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  7530  001A08  6EDF               	movwf	indf2,c
  7531  001A0A                     l4161:
  7532                           
  7533                           ; BSR set to: 0
  7534                           ;eeprom.c: 173: CYCLES[i].PERIOD = 0;
  7535  001A0A  D84D               	call	PL6	;call to abstracted procedure
  7536  001A0C  D83B               	call	PL2	;call to abstracted procedure
  7537  001A0E  6ADE               	clrf	postinc2,c
  7538  001A10  6ADD               	clrf	postdec2,c
  7539                           
  7540                           ; BSR set to: 0
  7541                           ;eeprom.c: 174: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  7542  001A12  D849               	call	PL6	;call to abstracted procedure
  7543  001A14  0E02               	movlw	2
  7544  001A16  D843               	call	PL4	;call to abstracted procedure
  7545  001A18  D835               	call	PL2	;call to abstracted procedure
  7546  001A1A  50DF               	movf	indf2,w,c
  7547  001A1C  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  7548  001A1E  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  7549  001A20  D017               	goto	l4169
  7550  001A22                     l4165:
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;eeprom.c: 175: CYCLES[i].PERIOD += STATES[j].PERIOD;
  7554  001A22  D841               	call	PL6	;call to abstracted procedure
  7555  001A24  D82F               	call	PL2	;call to abstracted procedure
  7556  001A26  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  7557  001A2A  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  7558  001A2E  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7559  001A30  0E06               	movlw	6
  7560  001A32  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7561  001A34  EC01  F016         	call	___wmul	;wreg free
  7562  001A38  0EF0               	movlw	low _STATES
  7563  001A3A  2560               	addwf	?___wmul& (0+255),w,b
  7564  001A3C  6EE1               	movwf	fsr1l,c
  7565  001A3E  0E02               	movlw	high _STATES
  7566  001A40  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7567  001A42  6EE2               	movwf	fsr1h,c
  7568  001A44  50E7               	movf	indf1,w,c
  7569  001A46  26DE               	addwf	postinc2,f,c
  7570  001A48  0E00               	movlw	0
  7571  001A4A  22DD               	addwfc	postdec2,f,c
  7572                           
  7573                           ; BSR set to: 0
  7574  001A4C  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  7575  001A4E  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  7576  001A50                     l4169:
  7577                           
  7578                           ; BSR set to: 0
  7579  001A50  D82A               	call	PL6	;call to abstracted procedure
  7580  001A52  0E03               	movlw	3
  7581  001A54  D824               	call	PL4	;call to abstracted procedure
  7582  001A56  D816               	call	PL2	;call to abstracted procedure
  7583  001A58  50DF               	movf	indf2,w,c
  7584  001A5A  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  7585  001A5C  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  7586  001A5E  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  7587  001A60  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  7588  001A62  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  7589  001A64  0A80               	xorlw	128
  7590  001A66  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  7591  001A68  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  7592  001A6A  0A80               	xorlw	128
  7593  001A6C  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  7594  001A6E  E2D9               	bc	l4165
  7595                           
  7596                           ; BSR set to: 0
  7597  001A70  4B73               	infsnz	LoadCyclesFromEeprom@i_1464& (0+255),f,b
  7598  001A72  2B74               	incf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),f,b
  7599                           
  7600                           ; BSR set to: 0
  7601  001A74  BF74               	btfsc	(LoadCyclesFromEeprom@i_1464+1)& (0+255),7,b
  7602  001A76  D7A2               	goto	l4155
  7603  001A78  5174               	movf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  7604  001A7A  E103               	bnz	u4230
  7605  001A7C  0E11               	movlw	17
  7606  001A7E  5D73               	subwf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  7607  001A80  E39D               	bnc	l4155
  7608  001A82                     u4230:
  7609                           
  7610                           ; BSR set to: 0
  7611  001A82  0012               	return		;funcret
  7612  001A84                     __end_of_LoadCyclesFromEeprom:
  7613                           	opt stack 0
  7614  001A84                     PL2:
  7615                           	opt stack 19
  7616  001A84  90D8               	bcf	status,0,c
  7617  001A86  3573               	rlcf	LoadCyclesFromEeprom@i_1464& (0+255),w,b
  7618  001A88  6ED9               	movwf	fsr2l,c
  7619  001A8A  3574               	rlcf	(LoadCyclesFromEeprom@i_1464+1)& (0+255),w,b
  7620  001A8C  6EDA               	movwf	fsr2h,c
  7621  001A8E  90D8               	bcf	status,0,c
  7622  001A90  36D9               	rlcf	fsr2l,f,c
  7623  001A92  36DA               	rlcf	fsr2h,f,c
  7624  001A94  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  7625  001A96  26D9               	addwf	fsr2l,f,c
  7626  001A98  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  7627  001A9A  22DA               	addwfc	fsr2h,f,c
  7628  001A9C  0012               	return	
  7629  001A9E                     __end_ofPL2:
  7630                           	opt stack 0
  7631  001A9E                     PL4:
  7632                           	opt stack 19
  7633  001A9E  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  7634  001AA0  0E00               	movlw	0
  7635  001AA2  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  7636  001AA4  0C00               	retlw	0
  7637  001AA6                     __end_ofPL4:
  7638                           	opt stack 0
  7639  001AA6                     PL6:
  7640                           	opt stack 19
  7641  001AA6  0E00               	movlw	low _CYCLES
  7642  001AA8  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  7643  001AAA  0E01               	movlw	high _CYCLES
  7644  001AAC  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  7645  001AAE  0012               	return	
  7646  001AB0                     __end_ofPL6:
  7647                           	opt stack 0
  7648                           tosu	equ	0xFFF
  7649                           tosh	equ	0xFFE
  7650                           tosl	equ	0xFFD
  7651                           pclath	equ	0xFFA
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           prodh	equ	0xFF4
  7657                           prodl	equ	0xFF3
  7658                           intcon	equ	0xFF2
  7659                           postinc0	equ	0xFEE
  7660                           plusw0	equ	0xFEB
  7661                           wreg	equ	0xFE8
  7662                           indf1	equ	0xFE7
  7663                           postinc1	equ	0xFE6
  7664                           postdec1	equ	0xFE5
  7665                           plusw1	equ	0xFE3
  7666                           fsr1h	equ	0xFE2
  7667                           fsr1l	equ	0xFE1
  7668                           indf2	equ	0xFDF
  7669                           postinc2	equ	0xFDE
  7670                           postdec2	equ	0xFDD
  7671                           plusw2	equ	0xFDB
  7672                           fsr2h	equ	0xFDA
  7673                           fsr2l	equ	0xFD9
  7674                           status	equ	0xFD8
  7675                           
  7676 ;; *************** function _ReadEeprom *****************
  7677 ;; Defined at:
  7678 ;;		line 3 in file "libs/eeprom.c"
  7679 ;; Parameters:    Size  Location     Type
  7680 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  7681 ;; Auto vars:     Size  Location     Type
  7682 ;;		None
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      unsigned char 
  7685 ;; Registers used:
  7686 ;;		wreg, status,2
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7692 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7696 ;;Total ram usage:        2 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    9
  7699 ;; This function calls:
  7700 ;;		Nothing
  7701 ;; This function is called by:
  7702 ;;		_LoadSettingsFromEeprom
  7703 ;;		_LoadEventsFromEeprom
  7704 ;;		_LoadStatesFromEeprom
  7705 ;;		_LoadCyclesFromEeprom
  7706 ;; This function uses a non-reentrant model
  7707 ;;
  7708                           
  7709                           	psect	text36
  7710  002D2E                     __ptext36:
  7711                           	opt stack 0
  7712  002D2E                     _ReadEeprom:
  7713                           	opt stack 19
  7714                           
  7715                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;incstack = 0
  7719  002D2E  0E3F               	movlw	-193
  7720  002D30  1681               	andwf	3969,f,c	;volatile
  7721                           
  7722                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  7723  002D32  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  7724                           
  7725                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  7726  002D36  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  7727                           
  7728                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  7729  002D3A  8081               	bsf	3969,0,c	;volatile
  7730                           
  7731                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  7732  002D3C  8E81               	bsf	3969,7,c	;volatile
  7733                           
  7734                           ;eeprom.c: 12: return NVMDAT;
  7735  002D3E  5080               	movf	3968,w,c	;volatile
  7736  002D40  0012               	return		;funcret
  7737  002D42                     __end_of_ReadEeprom:
  7738                           	opt stack 0
  7739                           tosu	equ	0xFFF
  7740                           tosh	equ	0xFFE
  7741                           tosl	equ	0xFFD
  7742                           pclath	equ	0xFFA
  7743                           tblptru	equ	0xFF8
  7744                           tblptrh	equ	0xFF7
  7745                           tblptrl	equ	0xFF6
  7746                           tablat	equ	0xFF5
  7747                           prodh	equ	0xFF4
  7748                           prodl	equ	0xFF3
  7749                           intcon	equ	0xFF2
  7750                           postinc0	equ	0xFEE
  7751                           plusw0	equ	0xFEB
  7752                           wreg	equ	0xFE8
  7753                           indf1	equ	0xFE7
  7754                           postinc1	equ	0xFE6
  7755                           postdec1	equ	0xFE5
  7756                           plusw1	equ	0xFE3
  7757                           fsr1h	equ	0xFE2
  7758                           fsr1l	equ	0xFE1
  7759                           indf2	equ	0xFDF
  7760                           postinc2	equ	0xFDE
  7761                           postdec2	equ	0xFDD
  7762                           plusw2	equ	0xFDB
  7763                           fsr2h	equ	0xFDA
  7764                           fsr2l	equ	0xFD9
  7765                           status	equ	0xFD8
  7766                           
  7767 ;; *************** function _GetEventNumber *****************
  7768 ;; Defined at:
  7769 ;;		line 210 in file "libs/funcs.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;  i               2   15[BANK0 ] unsigned int 
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  1    wreg      char 
  7776 ;; Registers used:
  7777 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7778 ;; Tracked objects:
  7779 ;;		On entry : 3F/0
  7780 ;;		On exit  : 3F/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7784 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7785 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7786 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7787 ;;Total ram usage:       11 bytes
  7788 ;; Hardware stack levels used:    1
  7789 ;; Hardware stack levels required when called:   10
  7790 ;; This function calls:
  7791 ;;		___wmul
  7792 ;; This function is called by:
  7793 ;;		_main
  7794 ;; This function uses a non-reentrant model
  7795 ;;
  7796                           
  7797                           	psect	text37
  7798  001AB0                     __ptext37:
  7799                           	opt stack 0
  7800  001AB0                     _GetEventNumber:
  7801                           	opt stack 20
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;funcs.c: 211: for (UINT i=0; i<24; i++) {
  7805                           
  7806                           ;incstack = 0
  7807  001AB0  6B6F               	clrf	GetEventNumber@i& (0+255),b
  7808  001AB2  6B70               	clrf	(GetEventNumber@i+1)& (0+255),b
  7809  001AB4                     l4339:
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;funcs.c: 212: if ((EVENTS[i].START_TIME>0) &&
  7813                           ;funcs.c: 213: (DATE_TIME.DAY.Val & EVENTS[i].SELECTED_WEEKS.Val & 0x7F)) {
  7814  001AB4  D86B               	call	PL12	;call to abstracted procedure
  7815  001AB6  EC01  F016         	call	___wmul	;wreg free
  7816  001ABA  D880               	call	PL40	;call to abstracted procedure
  7817  001ABC  0E02               	movlw	high _EVENTS
  7818  001ABE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7819  001AC0  6EDA               	movwf	fsr2h,c
  7820  001AC2  0E03               	movlw	3
  7821  001AC4  BEDB               	btfsc	plusw2,7,c
  7822  001AC6  D05A               	goto	l4361
  7823  001AC8  50DB               	movf	plusw2,w,c
  7824  001ACA  E108               	bnz	u4510
  7825  001ACC  0E02               	movlw	2
  7826  001ACE  50DB               	movf	plusw2,w,c
  7827  001AD0  E105               	bnz	u4510
  7828  001AD2  0E01               	movlw	1
  7829  001AD4  50DB               	movf	plusw2,w,c
  7830  001AD6  E102               	bnz	u4510
  7831  001AD8  04DE               	decf	postinc2,w,c
  7832  001ADA  E350               	bnc	l4361
  7833  001ADC                     u4510:
  7834                           
  7835                           ; BSR set to: 0
  7836  001ADC  D857               	call	PL12	;call to abstracted procedure
  7837  001ADE  EC01  F016         	call	___wmul	;wreg free
  7838  001AE2  D875               	call	PL86	;call to abstracted procedure
  7839  001AE4  30DF               	rrcf	223,w,c
  7840  001AE6  0B7F               	andlw	127
  7841  001AE8  0100               	movlb	0	; () banked
  7842  001AEA  6F66               	movwf	??_GetEventNumber& (0+255),b
  7843  001AEC  31C1               	rrcf	(_DATE_TIME+8)& (0+255),w,b
  7844  001AEE  0B7F               	andlw	127
  7845  001AF0  1566               	andwf	??_GetEventNumber& (0+255),w,b
  7846  001AF2  6F67               	movwf	(??_GetEventNumber+1)& (0+255),b
  7847  001AF4  0E7F               	movlw	127
  7848  001AF6  1767               	andwf	(??_GetEventNumber+1)& (0+255),f,b
  7849  001AF8  E041               	bz	l4361
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;funcs.c: 214: if (EVENTS[i].START_TIME < EVENTS[i].END_TIME) {
  7853  001AFA  D848               	call	PL12	;call to abstracted procedure
  7854  001AFC  EC01  F016         	call	___wmul	;wreg free
  7855  001B00  D861               	call	PL60	;call to abstracted procedure
  7856  001B02  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7857  001B04  6EDA               	movwf	fsr2h,c
  7858  001B06  D842               	call	PL12	;call to abstracted procedure
  7859  001B08  EC01  F016         	call	___wmul	;wreg free
  7860  001B0C  0E00               	movlw	low _EVENTS
  7861  001B0E  2560               	addwf	?___wmul& (0+255),w,b
  7862  001B10  6EE1               	movwf	fsr1l,c
  7863  001B12  0E02               	movlw	high _EVENTS
  7864  001B14  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7865  001B16  6EE2               	movwf	fsr1h,c
  7866  001B18  50DE               	movf	postinc2,w,c
  7867  001B1A  5CE6               	subwf	postinc1,w,c
  7868  001B1C  50DE               	movf	postinc2,w,c
  7869  001B1E  58E6               	subwfb	postinc1,w,c
  7870  001B20  50DE               	movf	postinc2,w,c
  7871  001B22  58E6               	subwfb	postinc1,w,c
  7872  001B24  50E6               	movf	postinc1,w,c
  7873  001B26  0A80               	xorlw	128
  7874  001B28  6F6E               	movwf	(??_GetEventNumber+8)& (0+255),b
  7875  001B2A  50DE               	movf	postinc2,w,c
  7876  001B2C  0A80               	xorlw	128
  7877  001B2E  596E               	subwfb	(??_GetEventNumber+8)& (0+255),w,b
  7878  001B30  E21B               	bc	l4353
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;funcs.c: 215: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
  7882                           ;funcs.c: 216: && (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
  7883  001B32  D82C               	call	PL12	;call to abstracted procedure
  7884  001B34  EC01  F016         	call	___wmul	;wreg free
  7885  001B38  D841               	call	PL40	;call to abstracted procedure
  7886  001B3A  D830               	call	PL34	;call to abstracted procedure
  7887  001B3C  E21F               	bc	l4361
  7888                           
  7889                           ; BSR set to: 0
  7890  001B3E  D826               	call	PL12	;call to abstracted procedure
  7891  001B40  EC01  F016         	call	___wmul	;wreg free
  7892  001B44  D83F               	call	PL60	;call to abstracted procedure
  7893  001B46  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7894  001B48  6EDA               	movwf	fsr2h,c
  7895  001B4A  50DE               	movf	postinc2,w,c
  7896  001B4C  5DB9               	subwf	_DATE_TIME& (0+255),w,b
  7897  001B4E  50DE               	movf	postinc2,w,c
  7898  001B50  59BA               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  7899  001B52  50DE               	movf	postinc2,w,c
  7900  001B54  59BB               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  7901  001B56  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
  7902  001B58  0A80               	xorlw	128
  7903  001B5A  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
  7904  001B5C  50DE               	movf	postinc2,w,c
  7905  001B5E  0A80               	xorlw	128
  7906  001B60  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
  7907  001B62  E20C               	bc	l4361
  7908  001B64                     l4349:
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;funcs.c: 217: return i;
  7912  001B64  516F               	movf	GetEventNumber@i& (0+255),w,b
  7913  001B66  0012               	return	
  7914  001B68                     l4353:
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;funcs.c: 220: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
  7918                           ;funcs.c: 221: || (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
  7919  001B68  D811               	call	PL12	;call to abstracted procedure
  7920  001B6A  EC01  F016         	call	___wmul	;wreg free
  7921  001B6E  D826               	call	PL40	;call to abstracted procedure
  7922  001B70  D815               	call	PL34	;call to abstracted procedure
  7923  001B72  E3F8               	bnc	l4349
  7924                           
  7925                           ; BSR set to: 0
  7926  001B74  D80B               	call	PL12	;call to abstracted procedure
  7927  001B76  EC01  F016         	call	___wmul	;wreg free
  7928  001B7A  D7E4               	goto	L5
  7929  001B7C                     l4361:
  7930                           
  7931                           ; BSR set to: 0
  7932  001B7C  4B6F               	infsnz	GetEventNumber@i& (0+255),f,b
  7933  001B7E  2B70               	incf	(GetEventNumber@i+1)& (0+255),f,b
  7934                           
  7935                           ; BSR set to: 0
  7936  001B80  5170               	movf	(GetEventNumber@i+1)& (0+255),w,b
  7937  001B82  E103               	bnz	u4580
  7938  001B84  0E18               	movlw	24
  7939  001B86  5D6F               	subwf	GetEventNumber@i& (0+255),w,b
  7940  001B88  E395               	bnc	l4339
  7941  001B8A                     u4580:
  7942                           
  7943                           ; BSR set to: 0
  7944                           
  7945                           ; BSR set to: 0
  7946                           ;funcs.c: 223: }
  7947                           ;funcs.c: 224: }
  7948                           ;funcs.c: 225: }
  7949                           ;funcs.c: 226: }
  7950                           ;funcs.c: 227: return -1;
  7951  001B8A  0CFF               	retlw	255	;funcret
  7952  001B8C                     __end_of_GetEventNumber:
  7953                           	opt stack 0
  7954  001B8C                     PL12:
  7955                           	opt stack 20
  7956  001B8C  C06F  F060         	movff	GetEventNumber@i,___wmul@multiplier
  7957  001B90  C070  F061         	movff	GetEventNumber@i+1,___wmul@multiplier+1
  7958  001B94  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7959  001B96  0E0A               	movlw	10
  7960  001B98  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7961  001B9A  0C0A               	retlw	10
  7962  001B9C                     __end_ofPL12:
  7963                           	opt stack 0
  7964  001B9C                     PL34:
  7965                           	opt stack 20
  7966  001B9C  0E02               	movlw	high _EVENTS
  7967  001B9E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7968  001BA0  6EDA               	movwf	fsr2h,c
  7969  001BA2  51B9               	movf	_DATE_TIME& (0+255),w,b
  7970  001BA4  5CDE               	subwf	postinc2,w,c
  7971  001BA6  51BA               	movf	(_DATE_TIME+1)& (0+255),w,b
  7972  001BA8  58DE               	subwfb	postinc2,w,c
  7973  001BAA  51BB               	movf	(_DATE_TIME+2)& (0+255),w,b
  7974  001BAC  58DE               	subwfb	postinc2,w,c
  7975  001BAE  50DE               	movf	postinc2,w,c
  7976  001BB0  0A80               	xorlw	128
  7977  001BB2  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
  7978  001BB4  51BC               	movf	(_DATE_TIME+3)& (0+255),w,b
  7979  001BB6  0A80               	xorlw	128
  7980  001BB8  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
  7981  001BBA  0012               	return	
  7982  001BBC                     __end_ofPL34:
  7983                           	opt stack 0
  7984  001BBC                     PL40:
  7985                           	opt stack 19
  7986  001BBC  0E00               	movlw	low _EVENTS
  7987  001BBE  2560               	addwf	?___wmul& (0+255),w,b
  7988  001BC0  6ED9               	movwf	fsr2l,c
  7989  001BC2  0012               	return	
  7990  001BC4                     __end_ofPL40:
  7991                           	opt stack 0
  7992  001BC4                     PL60:
  7993                           	opt stack 19
  7994  001BC4  0E04               	movlw	low (_EVENTS+4)
  7995  001BC6  2560               	addwf	?___wmul& (0+255),w,b
  7996  001BC8  6ED9               	movwf	fsr2l,c
  7997  001BCA  0E02               	movlw	high (_EVENTS+4)
  7998  001BCC  0012               	return	
  7999  001BCE                     __end_ofPL60:
  8000                           	opt stack 0
  8001  001BCE                     PL86:
  8002                           	opt stack 19
  8003  001BCE  0E09               	movlw	low (_EVENTS+9)
  8004  001BD0  2560               	addwf	?___wmul& (0+255),w,b
  8005  001BD2  6ED9               	movwf	fsr2l,c
  8006  001BD4  0E02               	movlw	high (_EVENTS+9)
  8007  001BD6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8008  001BD8  6EDA               	movwf	fsr2h,c
  8009  001BDA  0012               	return	
  8010  001BDC                     __end_ofPL86:
  8011                           	opt stack 0
  8012                           tosu	equ	0xFFF
  8013                           tosh	equ	0xFFE
  8014                           tosl	equ	0xFFD
  8015                           pclath	equ	0xFFA
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           postinc0	equ	0xFEE
  8024                           plusw0	equ	0xFEB
  8025                           wreg	equ	0xFE8
  8026                           indf1	equ	0xFE7
  8027                           postinc1	equ	0xFE6
  8028                           postdec1	equ	0xFE5
  8029                           plusw1	equ	0xFE3
  8030                           fsr1h	equ	0xFE2
  8031                           fsr1l	equ	0xFE1
  8032                           indf2	equ	0xFDF
  8033                           postinc2	equ	0xFDE
  8034                           postdec2	equ	0xFDD
  8035                           plusw2	equ	0xFDB
  8036                           fsr2h	equ	0xFDA
  8037                           fsr2l	equ	0xFD9
  8038                           status	equ	0xFD8
  8039                           
  8040 ;; *************** function ___wmul *****************
  8041 ;; Defined at:
  8042 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
  8043 ;; Parameters:    Size  Location     Type
  8044 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8045 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8046 ;; Auto vars:     Size  Location     Type
  8047 ;;  product         2    4[BANK0 ] unsigned int 
  8048 ;; Return value:  Size  Location     Type
  8049 ;;                  2    0[BANK0 ] unsigned int 
  8050 ;; Registers used:
  8051 ;;		wreg, status,2, status,0, prodl, prodh
  8052 ;; Tracked objects:
  8053 ;;		On entry : 3F/0
  8054 ;;		On exit  : 3F/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8057 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8060 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8061 ;;Total ram usage:        6 bytes
  8062 ;; Hardware stack levels used:    1
  8063 ;; Hardware stack levels required when called:    9
  8064 ;; This function calls:
  8065 ;;		Nothing
  8066 ;; This function is called by:
  8067 ;;		_LoadSettingsFromEeprom
  8068 ;;		_LoadEventsFromEeprom
  8069 ;;		_LoadStatesFromEeprom
  8070 ;;		_LoadCyclesFromEeprom
  8071 ;;		_AdjustDayLightSaving
  8072 ;;		_GetEventNumber
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text38
  8077  002C02                     __ptext38:
  8078                           	opt stack 0
  8079  002C02                     ___wmul:
  8080                           	opt stack 18
  8081                           
  8082                           ; BSR set to: 0
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;incstack = 0
  8086  002C02  5160               	movf	___wmul@multiplier& (0+255),w,b
  8087  002C04  0362               	mulwf	___wmul@multiplicand& (0+255),b
  8088  002C06  CFF3 F064          	movff	prodl,___wmul@product
  8089  002C0A  CFF4 F065          	movff	prodh,___wmul@product+1
  8090  002C0E  5160               	movf	___wmul@multiplier& (0+255),w,b
  8091  002C10  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8092  002C12  50F3               	movf	prodl,w,c
  8093  002C14  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  8094  002C16  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8095  002C18  0362               	mulwf	___wmul@multiplicand& (0+255),b
  8096  002C1A  50F3               	movf	prodl,w,c
  8097  002C1C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  8098                           
  8099                           ; BSR set to: 0
  8100  002C1E  C064  F060         	movff	___wmul@product,?___wmul
  8101  002C22  C065  F061         	movff	___wmul@product+1,?___wmul+1
  8102                           
  8103                           ; BSR set to: 0
  8104  002C26  0012               	return		;funcret
  8105  002C28                     __end_of___wmul:
  8106                           	opt stack 0
  8107                           tosu	equ	0xFFF
  8108                           tosh	equ	0xFFE
  8109                           tosl	equ	0xFFD
  8110                           pclath	equ	0xFFA
  8111                           tblptru	equ	0xFF8
  8112                           tblptrh	equ	0xFF7
  8113                           tblptrl	equ	0xFF6
  8114                           tablat	equ	0xFF5
  8115                           prodh	equ	0xFF4
  8116                           prodl	equ	0xFF3
  8117                           intcon	equ	0xFF2
  8118                           postinc0	equ	0xFEE
  8119                           plusw0	equ	0xFEB
  8120                           wreg	equ	0xFE8
  8121                           indf1	equ	0xFE7
  8122                           postinc1	equ	0xFE6
  8123                           postdec1	equ	0xFE5
  8124                           plusw1	equ	0xFE3
  8125                           fsr1h	equ	0xFE2
  8126                           fsr1l	equ	0xFE1
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           plusw2	equ	0xFDB
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function _INTERRUPT_InterruptManager *****************
  8136 ;; Defined at:
  8137 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;		None
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;		None
  8142 ;; Return value:  Size  Location     Type
  8143 ;;                  1    wreg      void 
  8144 ;; Registers used:
  8145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8146 ;; Tracked objects:
  8147 ;;		On entry : 0/0
  8148 ;;		On exit  : 31/0
  8149 ;;		Unchanged: 0/0
  8150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8153 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8154 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8155 ;;Total ram usage:       10 bytes
  8156 ;; Hardware stack levels used:    1
  8157 ;; Hardware stack levels required when called:    8
  8158 ;; This function calls:
  8159 ;;		_TMR0_ISR
  8160 ;; This function is called by:
  8161 ;;		Interrupt level 2
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           	psect	intcode
  8166  000008                     __pintcode:
  8167                           	opt stack 0
  8168  000008                     _INTERRUPT_InterruptManager:
  8169                           	opt stack 15
  8170                           
  8171                           ; BSR set to: 0
  8172                           ;incstack = 0
  8173  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8174  00000A  CFFA F043          	movff	pclath,??_INTERRUPT_InterruptManager
  8175  00000E  CFFB F044          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8176  000012  CFE9 F045          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8177  000016  CFEA F046          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8178  00001A  CFE1 F047          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8179  00001E  CFE2 F048          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8180  000022  CFD9 F049          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8181  000026  CFDA F04A          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8182  00002A  CFF3 F04B          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8183  00002E  CFF4 F04C          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8184                           
  8185                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
  8186  000032  010E               	movlb	14	; () banked
  8187  000034  BBC2               	btfsc	194,5,b	;volatile
  8188                           
  8189                           ; BSR set to: 14
  8190  000036  ABCA               	btfss	202,5,b	;volatile
  8191  000038  D002               	goto	i2l764
  8192                           
  8193                           ; BSR set to: 14
  8194                           ;interrupt_manager.c: 61: {
  8195                           ;interrupt_manager.c: 62: TMR0_ISR();
  8196  00003A  EC37  F016         	call	_TMR0_ISR	;wreg free
  8197  00003E                     i2l764:
  8198  00003E  C04C  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8199  000042  C04B  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8200  000046  C04A  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8201  00004A  C049  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8202  00004E  C048  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8203  000052  C047  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8204  000056  C046  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8205  00005A  C045  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8206  00005E  C044  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8207  000062  C043  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8208  000066  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8209  000068  0011               	retfie		f
  8210  00006A                     __end_of_INTERRUPT_InterruptManager:
  8211                           	opt stack 0
  8212                           tosu	equ	0xFFF
  8213                           tosh	equ	0xFFE
  8214                           tosl	equ	0xFFD
  8215                           pclatu	equ	0xFFB
  8216                           pclath	equ	0xFFA
  8217                           tblptru	equ	0xFF8
  8218                           tblptrh	equ	0xFF7
  8219                           tblptrl	equ	0xFF6
  8220                           tablat	equ	0xFF5
  8221                           prodh	equ	0xFF4
  8222                           prodl	equ	0xFF3
  8223                           intcon	equ	0xFF2
  8224                           postinc0	equ	0xFEE
  8225                           plusw0	equ	0xFEB
  8226                           fsr0h	equ	0xFEA
  8227                           fsr0l	equ	0xFE9
  8228                           wreg	equ	0xFE8
  8229                           indf1	equ	0xFE7
  8230                           postinc1	equ	0xFE6
  8231                           postdec1	equ	0xFE5
  8232                           plusw1	equ	0xFE3
  8233                           fsr1h	equ	0xFE2
  8234                           fsr1l	equ	0xFE1
  8235                           indf2	equ	0xFDF
  8236                           postinc2	equ	0xFDE
  8237                           postdec2	equ	0xFDD
  8238                           plusw2	equ	0xFDB
  8239                           fsr2h	equ	0xFDA
  8240                           fsr2l	equ	0xFD9
  8241                           status	equ	0xFD8
  8242                           
  8243 ;; *************** function _TMR0_ISR *****************
  8244 ;; Defined at:
  8245 ;;		line 123 in file "mcc_generated_files/tmr0.c"
  8246 ;; Parameters:    Size  Location     Type
  8247 ;;		None
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;		None
  8250 ;; Return value:  Size  Location     Type
  8251 ;;                  1    wreg      void 
  8252 ;; Registers used:
  8253 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8254 ;; Tracked objects:
  8255 ;;		On entry : 3F/E
  8256 ;;		On exit  : 3F/0
  8257 ;;		Unchanged: 0/0
  8258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8263 ;;Total ram usage:        0 bytes
  8264 ;; Hardware stack levels used:    1
  8265 ;; Hardware stack levels required when called:    7
  8266 ;; This function calls:
  8267 ;;		_TMR0_CallBack
  8268 ;; This function is called by:
  8269 ;;		_INTERRUPT_InterruptManager
  8270 ;; This function uses a non-reentrant model
  8271 ;;
  8272                           
  8273                           	psect	text40
  8274  002C6E                     __ptext40:
  8275                           	opt stack 0
  8276  002C6E                     _TMR0_ISR:
  8277                           	opt stack 15
  8278                           
  8279                           ; BSR set to: 14
  8280                           ;tmr0.c: 125: static volatile uint16_t CountCallBack = 0;
  8281                           ;tmr0.c: 128: PIR0bits.TMR0IF = 0;
  8282                           
  8283                           ;incstack = 0
  8284  002C6E  9BCA               	bcf	202,5,b	;volatile
  8285                           
  8286                           ; BSR set to: 14
  8287                           ;tmr0.c: 130: if (++CountCallBack >= 10)
  8288  002C70  0100               	movlb	0	; () banked
  8289  002C72  4BDC               	infsnz	TMR0_ISR@CountCallBack& (0+255),f,b	;volatile
  8290  002C74  2BDD               	incf	(TMR0_ISR@CountCallBack+1)& (0+255),f,b	;volatile
  8291  002C76  51DD               	movf	(TMR0_ISR@CountCallBack+1)& (0+255),w,b	;volatile
  8292  002C78  E104               	bnz	i2u459_40
  8293  002C7A  0E0A               	movlw	10
  8294  002C7C  5DDC               	subwf	TMR0_ISR@CountCallBack& (0+255),w,b	;volatile
  8295  002C7E  A0D8               	btfss	status,0,c
  8296  002C80  0012               	return	
  8297  002C82                     i2u459_40:
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;tmr0.c: 131: {
  8301                           ;tmr0.c: 133: TMR0_CallBack();
  8302  002C82  EC54  F016         	call	_TMR0_CallBack	;wreg free
  8303                           
  8304                           ;tmr0.c: 136: CountCallBack = 0;
  8305  002C86  0100               	movlb	0	; () banked
  8306  002C88  6BDC               	clrf	TMR0_ISR@CountCallBack& (0+255),b	;volatile
  8307  002C8A  6BDD               	clrf	(TMR0_ISR@CountCallBack+1)& (0+255),b	;volatile
  8308                           
  8309                           ; BSR set to: 0
  8310  002C8C  0012               	return		;funcret
  8311  002C8E                     __end_of_TMR0_ISR:
  8312                           	opt stack 0
  8313                           tosu	equ	0xFFF
  8314                           tosh	equ	0xFFE
  8315                           tosl	equ	0xFFD
  8316                           pclatu	equ	0xFFB
  8317                           pclath	equ	0xFFA
  8318                           tblptru	equ	0xFF8
  8319                           tblptrh	equ	0xFF7
  8320                           tblptrl	equ	0xFF6
  8321                           tablat	equ	0xFF5
  8322                           prodh	equ	0xFF4
  8323                           prodl	equ	0xFF3
  8324                           intcon	equ	0xFF2
  8325                           postinc0	equ	0xFEE
  8326                           plusw0	equ	0xFEB
  8327                           fsr0h	equ	0xFEA
  8328                           fsr0l	equ	0xFE9
  8329                           wreg	equ	0xFE8
  8330                           indf1	equ	0xFE7
  8331                           postinc1	equ	0xFE6
  8332                           postdec1	equ	0xFE5
  8333                           plusw1	equ	0xFE3
  8334                           fsr1h	equ	0xFE2
  8335                           fsr1l	equ	0xFE1
  8336                           indf2	equ	0xFDF
  8337                           postinc2	equ	0xFDE
  8338                           postdec2	equ	0xFDD
  8339                           plusw2	equ	0xFDB
  8340                           fsr2h	equ	0xFDA
  8341                           fsr2l	equ	0xFD9
  8342                           status	equ	0xFD8
  8343                           
  8344 ;; *************** function _TMR0_CallBack *****************
  8345 ;; Defined at:
  8346 ;;		line 142 in file "mcc_generated_files/tmr0.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;		None
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;		None
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  1    wreg      void 
  8353 ;; Registers used:
  8354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 3F/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8364 ;;Total ram usage:        0 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    6
  8367 ;; This function calls:
  8368 ;;		Absolute function
  8369 ;;		_TMR0_DefaultInterruptHandler
  8370 ;;		_Timer0_10ms
  8371 ;; This function is called by:
  8372 ;;		_TMR0_ISR
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376                           	psect	text41
  8377  002CA8                     __ptext41:
  8378                           	opt stack 0
  8379  002CA8                     _TMR0_CallBack:
  8380                           	opt stack 15
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;tmr0.c: 146: if(TMR0_InterruptHandler)
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;incstack = 0
  8387  002CA8  51DE               	movf	_TMR0_InterruptHandler& (0+255),w,b
  8388  002CAA  11DF               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  8389  002CAC  B4D8               	btfsc	status,2,c
  8390  002CAE  0012               	return	
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;tmr0.c: 147: {
  8394                           ;tmr0.c: 148: TMR0_InterruptHandler();
  8395  002CB0  0005               	push	
  8396  002CB2  6EFA               	movwf	pclath,c
  8397  002CB4  51DE               	movf	_TMR0_InterruptHandler& (0+255),w,b
  8398  002CB6  6EFD               	movwf	tosl,c
  8399  002CB8  51DF               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
  8400  002CBA  6EFE               	movwf	tosh,c
  8401  002CBC  6AFF               	clrf	tosu,c
  8402  002CBE  50FA               	movf	pclath,w,c
  8403  002CC0  0012               	return		;indir
  8404  002CC2                     __end_of_TMR0_CallBack:
  8405                           	opt stack 0
  8406                           tosu	equ	0xFFF
  8407                           tosh	equ	0xFFE
  8408                           tosl	equ	0xFFD
  8409                           pclatu	equ	0xFFB
  8410                           pclath	equ	0xFFA
  8411                           tblptru	equ	0xFF8
  8412                           tblptrh	equ	0xFF7
  8413                           tblptrl	equ	0xFF6
  8414                           tablat	equ	0xFF5
  8415                           prodh	equ	0xFF4
  8416                           prodl	equ	0xFF3
  8417                           intcon	equ	0xFF2
  8418                           postinc0	equ	0xFEE
  8419                           plusw0	equ	0xFEB
  8420                           fsr0h	equ	0xFEA
  8421                           fsr0l	equ	0xFE9
  8422                           wreg	equ	0xFE8
  8423                           indf1	equ	0xFE7
  8424                           postinc1	equ	0xFE6
  8425                           postdec1	equ	0xFE5
  8426                           plusw1	equ	0xFE3
  8427                           fsr1h	equ	0xFE2
  8428                           fsr1l	equ	0xFE1
  8429                           indf2	equ	0xFDF
  8430                           postinc2	equ	0xFDE
  8431                           postdec2	equ	0xFDD
  8432                           plusw2	equ	0xFDB
  8433                           fsr2h	equ	0xFDA
  8434                           fsr2l	equ	0xFD9
  8435                           status	equ	0xFD8
  8436                           
  8437 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  8438 ;; Defined at:
  8439 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;		None
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;		None
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  1    wreg      void 
  8446 ;; Registers used:
  8447 ;;		None
  8448 ;; Tracked objects:
  8449 ;;		On entry : 3F/0
  8450 ;;		On exit  : 3F/0
  8451 ;;		Unchanged: 3F/0
  8452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8457 ;;Total ram usage:        0 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; This function calls:
  8460 ;;		Nothing
  8461 ;; This function is called by:
  8462 ;;		_TMR0_Initialize
  8463 ;;		_TMR0_CallBack
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           	psect	text42
  8468  002D7C                     __ptext42:
  8469                           	opt stack 0
  8470  002D7C                     _TMR0_DefaultInterruptHandler:
  8471                           	opt stack 20
  8472                           
  8473                           ; BSR set to: 0
  8474                           
  8475                           ;incstack = 0
  8476  002D7C  0012               	return		;funcret
  8477  002D7E                     __end_of_TMR0_DefaultInterruptHandler:
  8478                           	opt stack 0
  8479                           tosu	equ	0xFFF
  8480                           tosh	equ	0xFFE
  8481                           tosl	equ	0xFFD
  8482                           pclatu	equ	0xFFB
  8483                           pclath	equ	0xFFA
  8484                           tblptru	equ	0xFF8
  8485                           tblptrh	equ	0xFF7
  8486                           tblptrl	equ	0xFF6
  8487                           tablat	equ	0xFF5
  8488                           prodh	equ	0xFF4
  8489                           prodl	equ	0xFF3
  8490                           intcon	equ	0xFF2
  8491                           postinc0	equ	0xFEE
  8492                           plusw0	equ	0xFEB
  8493                           fsr0h	equ	0xFEA
  8494                           fsr0l	equ	0xFE9
  8495                           wreg	equ	0xFE8
  8496                           indf1	equ	0xFE7
  8497                           postinc1	equ	0xFE6
  8498                           postdec1	equ	0xFE5
  8499                           plusw1	equ	0xFE3
  8500                           fsr1h	equ	0xFE2
  8501                           fsr1l	equ	0xFE1
  8502                           indf2	equ	0xFDF
  8503                           postinc2	equ	0xFDE
  8504                           postdec2	equ	0xFDD
  8505                           plusw2	equ	0xFDB
  8506                           fsr2h	equ	0xFDA
  8507                           fsr2l	equ	0xFD9
  8508                           status	equ	0xFD8
  8509                           
  8510 ;; *************** function _Timer0_10ms *****************
  8511 ;; Defined at:
  8512 ;;		line 3 in file "libs/projMain.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  i               1   64[COMRAM] unsigned char 
  8517 ;;  ThisCycle       1   57[COMRAM] unsigned char 
  8518 ;;  i               1   65[COMRAM] unsigned char 
  8519 ;;  ThisCycle       1   59[COMRAM] unsigned char 
  8520 ;;  i               1   61[COMRAM] unsigned char 
  8521 ;;  i               1   60[COMRAM] unsigned char 
  8522 ;;  i               1   58[COMRAM] unsigned char 
  8523 ;;  OutForThePor    2   62[COMRAM] unsigned char [2]
  8524 ;; Return value:  Size  Location     Type
  8525 ;;                  1    wreg      void 
  8526 ;; Registers used:
  8527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8528 ;; Tracked objects:
  8529 ;;		On entry : 3F/0
  8530 ;;		On exit  : 0/0
  8531 ;;		Unchanged: 0/0
  8532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8534 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8535 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8536 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8537 ;;Total ram usage:       14 bytes
  8538 ;; Hardware stack levels used:    1
  8539 ;; Hardware stack levels required when called:    5
  8540 ;; This function calls:
  8541 ;;		_GetThisCycle
  8542 ;;		_IncreaseByASecond
  8543 ;;		___almod
  8544 ;;		___ftmul
  8545 ;;		___fttol
  8546 ;;		___lbtoft
  8547 ;; This function is called by:
  8548 ;;		_main
  8549 ;;		_TMR0_CallBack
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           	psect	text43
  8554  000F0A                     __ptext43:
  8555                           	opt stack 0
  8556  000F0A                     _Timer0_10ms:
  8557                           	opt stack 15
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;projMain.c: 4: if (FLAGS_1.bits.b0) {
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;incstack = 0
  8564  000F0A  A04F               	btfss	_FLAGS_1,0,c
  8565  000F0C  D007               	goto	i2l3777
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;projMain.c: 5: PRESENT_STATE = NEXT_STATE;
  8569  000F0E  C0E6  F057         	movff	_NEXT_STATE,_PRESENT_STATE
  8570                           
  8571                           ;projMain.c: 6: STATE_SECONDS = 0;
  8572  000F12  6A56               	clrf	_STATE_SECONDS,c
  8573                           
  8574                           ;projMain.c: 7: FLAGS_1.bits.b0 = RESET;
  8575  000F14  904F               	bcf	_FLAGS_1,0,c
  8576                           
  8577                           ;projMain.c: 8: FLAGS_1.bits.b1 = RESET;
  8578  000F16  924F               	bcf	_FLAGS_1,1,c
  8579                           
  8580                           ; BSR set to: 0
  8581                           ;projMain.c: 9: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD;
  8582  000F18  D95A               	call	PL18	;call to abstracted procedure
  8583  000F1A  6E55               	movwf	_STATE_SECONDS_REMAINING,c
  8584  000F1C                     i2l3777:
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;projMain.c: 10: }
  8588                           ;projMain.c: 11: UINT8 OutForThePorts[2];
  8589                           ;projMain.c: 12: for (UINT8 i =0; i<2; i++) {
  8590  000F1C  6A3B               	clrf	Timer0_10ms@i,c
  8591  000F1E                     i2l3783:
  8592                           
  8593                           ; BSR set to: 0
  8594                           ;projMain.c: 13: OutForThePorts[i] = 0x00;
  8595  000F1E  503B               	movf	Timer0_10ms@i,w,c
  8596  000F20  0F3F               	addlw	low Timer0_10ms@OutForThePorts
  8597  000F22  6ED9               	movwf	fsr2l,c
  8598  000F24  6ADA               	clrf	fsr2h,c
  8599  000F26  6ADF               	clrf	indf2,c
  8600                           
  8601                           ; BSR set to: 0
  8602  000F28  2A3B               	incf	Timer0_10ms@i,f,c
  8603                           
  8604                           ; BSR set to: 0
  8605  000F2A  0E01               	movlw	1
  8606  000F2C  643B               	cpfsgt	Timer0_10ms@i,c
  8607  000F2E  D7F7               	goto	i2l3783
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;projMain.c: 14: }
  8611                           ;projMain.c: 15: for (UINT8 i =0; i<2; i++) {
  8612  000F30  6A3D               	clrf	Timer0_10ms@i_2891,c
  8613  000F32                     i2l3793:
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;projMain.c: 16: OutForThePorts[i] = STATES[PRESENT_STATE].ON[i];
  8617  000F32  5057               	movf	_PRESENT_STATE,w,c
  8618  000F34  0D06               	mullw	6
  8619  000F36  0EF0               	movlw	low _STATES
  8620  000F38  6E35               	movwf	??_Timer0_10ms& (0+255),c
  8621  000F3A  0E02               	movlw	high _STATES
  8622  000F3C  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
  8623  000F3E  2A35               	incf	??_Timer0_10ms,f,c
  8624  000F40  0E00               	movlw	0
  8625  000F42  2236               	addwfc	??_Timer0_10ms+1,f,c
  8626  000F44  50F3               	movf	prodl,w,c
  8627  000F46  2635               	addwf	??_Timer0_10ms,f,c
  8628  000F48  50F4               	movf	prodh,w,c
  8629  000F4A  2236               	addwfc	??_Timer0_10ms+1,f,c
  8630  000F4C  503D               	movf	Timer0_10ms@i_2891,w,c
  8631  000F4E  2435               	addwf	??_Timer0_10ms,w,c
  8632  000F50  6ED9               	movwf	fsr2l,c
  8633  000F52  0E00               	movlw	0
  8634  000F54  2036               	addwfc	??_Timer0_10ms+1,w,c
  8635  000F56  6EDA               	movwf	fsr2h,c
  8636  000F58  503D               	movf	Timer0_10ms@i_2891,w,c
  8637  000F5A  0F3F               	addlw	low Timer0_10ms@OutForThePorts
  8638  000F5C  6EE1               	movwf	fsr1l,c
  8639  000F5E  6AE2               	clrf	fsr1h,c
  8640  000F60  CFDF FFE7          	movff	indf2,indf1
  8641                           
  8642                           ; BSR set to: 0
  8643  000F64  2A3D               	incf	Timer0_10ms@i_2891,f,c
  8644                           
  8645                           ; BSR set to: 0
  8646  000F66  0E01               	movlw	1
  8647  000F68  643D               	cpfsgt	Timer0_10ms@i_2891,c
  8648  000F6A  D7E3               	goto	i2l3793
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;projMain.c: 17: }
  8652                           ;projMain.c: 18: if (STATE_SECONDS_REMAINING <= BLINK_LAST_X_SECONDS) {
  8653  000F6C  5055               	movf	_STATE_SECONDS_REMAINING,w,c
  8654  000F6E  5C5B               	subwf	_BLINK_LAST_X_SECONDS,w,c
  8655  000F70  E30F               	bnc	i2l1120
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;projMain.c: 19: if (BLINK_STATE_ON_OFF_COUNTER < BLINK_ON_TIME) {
  8659  000F72  505D               	movf	_BLINK_ON_TIME,w,c
  8660  000F74  5C53               	subwf	_BLINK_STATE_ON_OFF_COUNTER,w,c
  8661  000F76  E217               	bc	i2l1124
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;projMain.c: 20: for (UINT8 i =0; i<2; i++)
  8665  000F78  6A41               	clrf	Timer0_10ms@i_2892,c
  8666  000F7A                     i2l3809:
  8667                           
  8668                           ; BSR set to: 0
  8669                           ;projMain.c: 21: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
  8670  000F7A  5041               	movf	Timer0_10ms@i_2892,w,c
  8671  000F7C  D93D               	call	PL26	;call to abstracted procedure
  8672  000F7E  5041               	movf	Timer0_10ms@i_2892,w,c
  8673  000F80  D967               	call	PL80	;call to abstracted procedure
  8674  000F82  5041               	movf	Timer0_10ms@i_2892,w,c
  8675  000F84  D974               	call	PL88	;call to abstracted procedure
  8676                           
  8677                           ; BSR set to: 0
  8678  000F86  2A41               	incf	Timer0_10ms@i_2892,f,c
  8679                           
  8680                           ; BSR set to: 0
  8681  000F88  0E01               	movlw	1
  8682  000F8A  6441               	cpfsgt	Timer0_10ms@i_2892,c
  8683  000F8C  D7F6               	goto	i2l3809
  8684  000F8E  D00B               	goto	i2l1124
  8685  000F90                     i2l1120:
  8686                           
  8687                           ; BSR set to: 0
  8688                           ;projMain.c: 24: for (UINT8 i =0; i<2; i++)
  8689  000F90  6A42               	clrf	Timer0_10ms@i_2893,c
  8690  000F92                     i2l3819:
  8691                           
  8692                           ; BSR set to: 0
  8693                           ;projMain.c: 25: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
  8694  000F92  5042               	movf	Timer0_10ms@i_2893,w,c
  8695  000F94  D931               	call	PL26	;call to abstracted procedure
  8696  000F96  5042               	movf	Timer0_10ms@i_2893,w,c
  8697  000F98  D95B               	call	PL80	;call to abstracted procedure
  8698  000F9A  5042               	movf	Timer0_10ms@i_2893,w,c
  8699  000F9C  D968               	call	PL88	;call to abstracted procedure
  8700                           
  8701                           ; BSR set to: 0
  8702  000F9E  2A42               	incf	Timer0_10ms@i_2893,f,c
  8703                           
  8704                           ; BSR set to: 0
  8705  000FA0  0E01               	movlw	1
  8706  000FA2  6442               	cpfsgt	Timer0_10ms@i_2893,c
  8707  000FA4  D7F6               	goto	i2l3819
  8708  000FA6                     i2l1124:
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;projMain.c: 26: }
  8712                           ;projMain.c: 28: for (UINT8 i =0; i<2; i++) {
  8713  000FA6  6A3E               	clrf	Timer0_10ms@i_2894,c
  8714  000FA8                     i2l3829:
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;projMain.c: 29: *(LIGHTS[i]) = OutForThePorts[i];
  8718  000FA8  503E               	movf	Timer0_10ms@i_2894,w,c
  8719  000FAA  0F3F               	addlw	low Timer0_10ms@OutForThePorts
  8720  000FAC  6ED9               	movwf	fsr2l,c
  8721  000FAE  6ADA               	clrf	fsr2h,c
  8722  000FB0  503E               	movf	Timer0_10ms@i_2894,w,c
  8723  000FB2  0D02               	mullw	2
  8724  000FB4  50F3               	movf	prodl,w,c
  8725  000FB6  0FF8               	addlw	low _LIGHTS
  8726  000FB8  6EE1               	movwf	fsr1l,c
  8727  000FBA  6AE2               	clrf	fsr1h,c
  8728  000FBC  CFE6 F035          	movff	postinc1,??_Timer0_10ms
  8729  000FC0  CFE5 F036          	movff	postdec1,??_Timer0_10ms+1
  8730  000FC4  C035  FFE1         	movff	??_Timer0_10ms,fsr1l
  8731  000FC8  C036  FFE2         	movff	??_Timer0_10ms+1,fsr1h
  8732  000FCC  CFDF FFE7          	movff	indf2,indf1
  8733                           
  8734                           ; BSR set to: 0
  8735  000FD0  2A3E               	incf	Timer0_10ms@i_2894,f,c
  8736                           
  8737                           ; BSR set to: 0
  8738  000FD2  0E01               	movlw	1
  8739  000FD4  643E               	cpfsgt	Timer0_10ms@i_2894,c
  8740  000FD6  D7E8               	goto	i2l3829
  8741                           
  8742                           ; BSR set to: 0
  8743                           ;projMain.c: 30: }
  8744                           ;projMain.c: 32: if ((STATES[PRESENT_STATE].AUDIO == AUDIO_NORMAL)
  8745                           ;projMain.c: 33: || ((STATES[PRESENT_STATE].AUDIO == AUDIO_SPECIAL)
  8746                           ;projMain.c: 34: && (STATE_SECONDS_REMAINING <= SPECIAL_AUDIO_LAST_X_SECONDS))) {
  8747  000FD8  D921               	call	PL36	;call to abstracted procedure
  8748  000FDA  04DE               	decf	postinc2,w,c
  8749  000FDC  E007               	bz	i2l3841
  8750                           
  8751                           ; BSR set to: 0
  8752  000FDE  D91E               	call	PL36	;call to abstracted procedure
  8753  000FE0  0E02               	movlw	2
  8754  000FE2  18DE               	xorwf	postinc2,w,c
  8755  000FE4  E106               	bnz	i2l3845
  8756                           
  8757                           ; BSR set to: 0
  8758  000FE6  5055               	movf	_STATE_SECONDS_REMAINING,w,c
  8759  000FE8  5DE8               	subwf	_SPECIAL_AUDIO_LAST_X_SECONDS& (0+255),w,b
  8760  000FEA  E303               	bnc	i2l3845
  8761  000FEC                     i2l3841:
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;projMain.c: 35: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_NORMAL_ON_TIME)
  8765  000FEC  505A               	movf	_AUDIO_NORMAL_ON_TIME,w,c
  8766  000FEE  5C52               	subwf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
  8767  000FF0  D006               	goto	L8
  8768  000FF2                     i2l3845:
  8769                           
  8770                           ; BSR set to: 0
  8771  000FF2  D914               	call	PL36	;call to abstracted procedure
  8772  000FF4  0E02               	movlw	2
  8773  000FF6  18DE               	xorwf	postinc2,w,c
  8774  000FF8  E105               	bnz	i2l1135
  8775                           
  8776                           ; BSR set to: 0
  8777                           ;projMain.c: 40: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_SPECIAL_ON_TIME)
  8778  000FFA  5058               	movf	_AUDIO_SPECIAL_ON_TIME,w,c
  8779  000FFC  5C51               	subwf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
  8780  000FFE                     L8:
  8781  000FFE  E202               	bc	i2l1135
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;projMain.c: 41: LATCbits.LC0 = ON;
  8785  001000  8085               	bsf	3973,0,c	;volatile
  8786  001002  D001               	goto	i2l3851
  8787  001004                     i2l1135:
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;projMain.c: 45: LATCbits.LC0 = OFF;
  8791  001004  9085               	bcf	3973,0,c	;volatile
  8792  001006                     i2l3851:
  8793                           
  8794                           ; BSR set to: 0
  8795                           ;projMain.c: 47: CENTI_SECOND_COUNT++;
  8796  001006  2A54               	incf	_CENTI_SECOND_COUNT,f,c
  8797                           
  8798                           ;projMain.c: 48: BLINK_STATE_ON_OFF_COUNTER++;
  8799  001008  2A53               	incf	_BLINK_STATE_ON_OFF_COUNTER,f,c
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;projMain.c: 49: if (BLINK_STATE_ON_OFF_COUNTER >= (BLINK_ON_TIME + BLINK_OFF_TIME))
  8803  00100A  505C               	movf	_BLINK_OFF_TIME,w,c
  8804  00100C  C05D  F035         	movff	_BLINK_ON_TIME,??_Timer0_10ms
  8805  001010  D93C               	call	PL94	;call to abstracted procedure
  8806  001012  5053               	movf	_BLINK_STATE_ON_OFF_COUNTER,w,c
  8807  001014  D8E6               	call	PL24	;call to abstracted procedure
  8808  001016  E301               	bnc	i2l3857
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;projMain.c: 50: BLINK_STATE_ON_OFF_COUNTER=0;
  8812  001018  6A53               	clrf	_BLINK_STATE_ON_OFF_COUNTER,c
  8813  00101A                     i2l3857:
  8814                           
  8815                           ; BSR set to: 0
  8816                           ;projMain.c: 51: NORMAL_AUDIO_STATE_ON_OFF_COUNTER++;
  8817  00101A  2A52               	incf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;projMain.c: 52: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_NORMAL_ON_TIME + AUDIO_
      +                          NORMAL_OFF_TIME))
  8821  00101C  5059               	movf	_AUDIO_NORMAL_OFF_TIME,w,c
  8822  00101E  C05A  F035         	movff	_AUDIO_NORMAL_ON_TIME,??_Timer0_10ms
  8823  001022  D933               	call	PL94	;call to abstracted procedure
  8824  001024  5052               	movf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
  8825  001026  D8DD               	call	PL24	;call to abstracted procedure
  8826  001028  E301               	bnc	i2l3863
  8827                           
  8828                           ; BSR set to: 0
  8829                           ;projMain.c: 53: NORMAL_AUDIO_STATE_ON_OFF_COUNTER=0;
  8830  00102A  6A52               	clrf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,c
  8831  00102C                     i2l3863:
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;projMain.c: 54: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER++;
  8835  00102C  2A51               	incf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;projMain.c: 55: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_SPECIAL_ON_TIME + AUDI
      +                          O_SPECIAL_OFF_TIME))
  8839  00102E  51E9               	movf	_AUDIO_SPECIAL_OFF_TIME& (0+255),w,b
  8840  001030  C058  F035         	movff	_AUDIO_SPECIAL_ON_TIME,??_Timer0_10ms
  8841  001034  D92A               	call	PL94	;call to abstracted procedure
  8842  001036  5051               	movf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
  8843  001038  D8D4               	call	PL24	;call to abstracted procedure
  8844  00103A  E301               	bnc	i2l3869
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;projMain.c: 56: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER=0;
  8848  00103C  6A51               	clrf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,c
  8849  00103E                     i2l3869:
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;projMain.c: 59: if (CENTI_SECOND_COUNT == 100) {
  8853  00103E  0E64               	movlw	100
  8854  001040  1854               	xorwf	_CENTI_SECOND_COUNT,w,c
  8855  001042  E11F               	bnz	i2l3883
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;projMain.c: 60: CENTI_SECOND_COUNT = 0;
  8859  001044  6A54               	clrf	_CENTI_SECOND_COUNT,c
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;projMain.c: 61: DATE_TIME = IncreaseByASecond(DATE_TIME);
  8863  001046  EE20  F0B9         	lfsr	2,_DATE_TIME
  8864  00104A  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
  8865  00104E  0E0A               	movlw	10
  8866  001050                     i2u395_41:
  8867  001050  CFDB FFEB          	movff	plusw2,plusw0
  8868  001054  06E8               	decf	wreg,f,c
  8869  001056  E2FC               	bc	i2u395_41
  8870  001058  EC35  F014         	call	_IncreaseByASecond	;wreg free
  8871  00105C  EE20  F0B9         	lfsr	2,_DATE_TIME
  8872  001060  0E0A               	movlw	10
  8873  001062                     i2u396_41:
  8874  001062  CFEB FFDB          	movff	plusw0,plusw2
  8875  001066  06E8               	decf	wreg,f,c
  8876  001068  E2FC               	bc	i2u396_41
  8877                           
  8878                           ;projMain.c: 62: STATE_SECONDS_REMAINING = (STATES[PRESENT_STATE].PERIOD + SECONDS_TO_AD
      +                          JUST_PART) - STATE_SECONDS-1;
  8879  00106A  D8B1               	call	PL18	;call to abstracted procedure
  8880  00106C  6E35               	movwf	??_Timer0_10ms& (0+255),c
  8881  00106E  5056               	movf	_STATE_SECONDS,w,c
  8882  001070  5C35               	subwf	??_Timer0_10ms,w,c
  8883  001072  2450               	addwf	_SECONDS_TO_ADJUST_PART,w,c
  8884  001074  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
  8885  001076  0436               	decf	??_Timer0_10ms+1,w,c
  8886  001078  6E55               	movwf	_STATE_SECONDS_REMAINING,c
  8887                           
  8888                           ;projMain.c: 63: if (STATE_SECONDS_REMAINING == 0)
  8889  00107A  5055               	movf	_STATE_SECONDS_REMAINING,w,c
  8890  00107C  E101               	bnz	i2l3881
  8891                           
  8892                           ;projMain.c: 64: FLAGS_1.bits.b0 = SET;
  8893  00107E  804F               	bsf	_FLAGS_1,0,c
  8894  001080                     i2l3881:
  8895                           
  8896                           ;projMain.c: 65: STATE_SECONDS++;
  8897  001080  2A56               	incf	_STATE_SECONDS,f,c
  8898  001082                     i2l3883:
  8899                           
  8900                           ;projMain.c: 66: }
  8901                           ;projMain.c: 67: if (CENTI_SECOND_COUNT == 3) {
  8902  001082  0E03               	movlw	3
  8903  001084  1854               	xorwf	_CENTI_SECOND_COUNT,w,c
  8904  001086  E145               	bnz	i2l3905
  8905                           
  8906                           ;projMain.c: 68: if (STATE_SECONDS == 0) {
  8907  001088  5056               	movf	_STATE_SECONDS,w,c
  8908  00108A  E143               	bnz	i2l3905
  8909                           
  8910                           ;projMain.c: 69: if (SECONDS_TO_ADJUST != 0) {
  8911  00108C  504D               	movf	_SECONDS_TO_ADJUST,w,c
  8912  00108E  104E               	iorwf	_SECONDS_TO_ADJUST+1,w,c
  8913  001090  E03F               	bz	i2l1146
  8914                           
  8915                           ;projMain.c: 70: if (SECONDS_TO_ADJUST > 0) {
  8916  001092  BE4E               	btfsc	_SECONDS_TO_ADJUST+1,7,c
  8917  001094  D01F               	goto	i2l3897
  8918  001096  504E               	movf	_SECONDS_TO_ADJUST+1,w,c
  8919  001098  E102               	bnz	i2u401_40
  8920  00109A  044D               	decf	_SECONDS_TO_ADJUST,w,c
  8921  00109C  E31B               	bnc	i2l3897
  8922  00109E                     i2u401_40:
  8923                           
  8924                           ;projMain.c: 71: SECONDS_TO_ADJUST_PART = 0.3*STATES[PRESENT_STATE].PERIOD;
  8925  00109E  D8FA               	call	PL110	;call to abstracted procedure
  8926  0010A0  0E3E               	movlw	62
  8927  0010A2  6E12               	movwf	___ftmul@f2+2,c
  8928  0010A4  D894               	call	PL18	;call to abstracted procedure
  8929  0010A6  EC14  F016         	call	___lbtoft
  8930  0010AA  D8E8               	call	PL92	;call to abstracted procedure
  8931  0010AC  ECBD  F011         	call	___ftmul	;wreg free
  8932  0010B0  D8D7               	call	PL84	;call to abstracted procedure
  8933  0010B2  EC21  F012         	call	___fttol	;wreg free
  8934  0010B6  501C               	movf	?___fttol,w,c
  8935  0010B8  6E50               	movwf	_SECONDS_TO_ADJUST_PART,c
  8936                           
  8937                           ;projMain.c: 72: if (SECONDS_TO_ADJUST_PART > SECONDS_TO_ADJUST)
  8938  0010BA  504E               	movf	_SECONDS_TO_ADJUST+1,w,c
  8939  0010BC  0A80               	xorlw	128
  8940  0010BE  6E35               	movwf	??_Timer0_10ms& (0+255),c
  8941  0010C0  5050               	movf	_SECONDS_TO_ADJUST_PART,w,c
  8942  0010C2  5C4D               	subwf	_SECONDS_TO_ADJUST,w,c
  8943  0010C4  0E80               	movlw	128
  8944  0010C6  BE50               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
  8945  0010C8  0E7F               	movlw	127
  8946  0010CA  5835               	subwfb	??_Timer0_10ms& (0+255),w,c
  8947  0010CC  E21A               	bc	i2l3903
  8948                           
  8949                           ;projMain.c: 73: SECONDS_TO_ADJUST_PART = SECONDS_TO_ADJUST;
  8950  0010CE  C04D  F050         	movff	_SECONDS_TO_ADJUST,_SECONDS_TO_ADJUST_PART
  8951  0010D2  D017               	goto	i2l3903
  8952  0010D4                     i2l3897:
  8953                           
  8954                           ;projMain.c: 75: SECONDS_TO_ADJUST_PART = -0.3*STATES[PRESENT_STATE].PERIOD;
  8955  0010D4  D8DF               	call	PL110	;call to abstracted procedure
  8956  0010D6  0EBE               	movlw	190
  8957  0010D8  6E12               	movwf	___ftmul@f2+2,c
  8958  0010DA  D879               	call	PL18	;call to abstracted procedure
  8959  0010DC  EC14  F016         	call	___lbtoft
  8960  0010E0  D8CD               	call	PL92	;call to abstracted procedure
  8961  0010E2  ECBD  F011         	call	___ftmul	;wreg free
  8962  0010E6  D8BC               	call	PL84	;call to abstracted procedure
  8963  0010E8  EC21  F012         	call	___fttol	;wreg free
  8964  0010EC  501C               	movf	?___fttol,w,c
  8965  0010EE  6E50               	movwf	_SECONDS_TO_ADJUST_PART,c
  8966                           
  8967                           ;projMain.c: 76: if (SECONDS_TO_ADJUST_PART < SECONDS_TO_ADJUST)
  8968  0010F0  0E80               	movlw	128
  8969  0010F2  BE50               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
  8970  0010F4  0E7F               	movlw	127
  8971  0010F6  6E35               	movwf	??_Timer0_10ms& (0+255),c
  8972  0010F8  504D               	movf	_SECONDS_TO_ADJUST,w,c
  8973  0010FA  5C50               	subwf	_SECONDS_TO_ADJUST_PART,w,c
  8974  0010FC  504E               	movf	_SECONDS_TO_ADJUST+1,w,c
  8975  0010FE  0A80               	xorlw	128
  8976  001100  D7E4               	goto	L6
  8977  001102                     i2l3903:
  8978                           
  8979                           ;projMain.c: 78: }
  8980                           ;projMain.c: 79: SECONDS_TO_ADJUST -= SECONDS_TO_ADJUST_PART;
  8981  001102  5050               	movf	_SECONDS_TO_ADJUST_PART,w,c
  8982  001104  5E4D               	subwf	_SECONDS_TO_ADJUST,f,c
  8983  001106  0E00               	movlw	0
  8984  001108  BE50               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
  8985  00110A  0EFF               	movlw	255
  8986  00110C  5A4E               	subwfb	_SECONDS_TO_ADJUST+1,f,c
  8987                           
  8988                           ;projMain.c: 80: } else
  8989  00110E  D001               	goto	i2l3905
  8990  001110                     i2l1146:
  8991                           
  8992                           ;projMain.c: 81: SECONDS_TO_ADJUST_PART = 0;
  8993  001110  6A50               	clrf	_SECONDS_TO_ADJUST_PART,c
  8994  001112                     i2l3905:
  8995                           
  8996                           ;projMain.c: 82: }
  8997                           ;projMain.c: 83: }
  8998                           ;projMain.c: 84: if (CENTI_SECOND_COUNT == 2) {
  8999  001112  0E02               	movlw	2
  9000  001114  1854               	xorwf	_CENTI_SECOND_COUNT,w,c
  9001  001116  E135               	bnz	i2l3921
  9002                           
  9003                           ;projMain.c: 85: UINT8 ThisCycle = GetThisCycle();
  9004  001118  EC61  F016         	call	_GetThisCycle	;wreg free
  9005  00111C  6E3C               	movwf	Timer0_10ms@ThisCycle,c
  9006                           
  9007                           ;projMain.c: 86: if ((CYCLES[ThisCycle].START_STATE == PRESENT_STATE) && (STATE_SECONDS=
      +                          =0)) {
  9008  00111E  503C               	movf	Timer0_10ms@ThisCycle,w,c
  9009  001120  D88F               	call	PL78	;call to abstracted procedure
  9010  001122  5057               	movf	_PRESENT_STATE,w,c
  9011  001124  18DE               	xorwf	postinc2,w,c
  9012  001126  E12D               	bnz	i2l3921
  9013  001128  5056               	movf	_STATE_SECONDS,w,c
  9014  00112A  E12B               	bnz	i2l3921
  9015                           
  9016                           ;projMain.c: 87: SECONDS_TO_ADJUST = (DATE_TIME.SECOND) % (CYCLES[ThisCycle].PERIOD);
  9017  00112C  C0B9  F001         	movff	_DATE_TIME,___almod@dividend
  9018  001130  C0BA  F002         	movff	_DATE_TIME+1,___almod@dividend+1
  9019  001134  C0BB  F003         	movff	_DATE_TIME+2,___almod@dividend+2
  9020  001138  C0BC  F004         	movff	_DATE_TIME+3,___almod@dividend+3
  9021  00113C  D878               	call	PL38	;call to abstracted procedure
  9022  00113E  D8AF               	call	PL120	;call to abstracted procedure
  9023  001140  C035  F005         	movff	??_Timer0_10ms,___almod@divisor
  9024  001144  C036  F006         	movff	??_Timer0_10ms+1,___almod@divisor+1
  9025  001148  6A07               	clrf	___almod@divisor+2,c
  9026  00114A  6A08               	clrf	___almod@divisor+3,c
  9027  00114C  ECCD  F012         	call	___almod	;wreg free
  9028  001150  C001  F04D         	movff	?___almod,_SECONDS_TO_ADJUST
  9029  001154  C002  F04E         	movff	?___almod+1,_SECONDS_TO_ADJUST+1
  9030                           
  9031                           ;projMain.c: 88: if (SECONDS_TO_ADJUST > (CYCLES[ThisCycle].PERIOD)/2)
  9032  001158  D86A               	call	PL38	;call to abstracted procedure
  9033  00115A  D8A1               	call	PL120	;call to abstracted procedure
  9034  00115C  90D8               	bcf	status,0,c
  9035  00115E  3036               	rrcf	??_Timer0_10ms+1,w,c
  9036  001160  6E38               	movwf	(??_Timer0_10ms+3)& (0+255),c
  9037  001162  3035               	rrcf	??_Timer0_10ms,w,c
  9038  001164  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
  9039  001166  504D               	movf	_SECONDS_TO_ADJUST,w,c
  9040  001168  5C37               	subwf	??_Timer0_10ms+2,w,c
  9041  00116A  504E               	movf	_SECONDS_TO_ADJUST+1,w,c
  9042  00116C  5838               	subwfb	??_Timer0_10ms+3,w,c
  9043  00116E  E205               	bc	i2l3919
  9044                           
  9045                           ;projMain.c: 89: SECONDS_TO_ADJUST -= CYCLES[ThisCycle].PERIOD;
  9046  001170  D85E               	call	PL38	;call to abstracted procedure
  9047  001172  50DE               	movf	postinc2,w,c
  9048  001174  5E4D               	subwf	_SECONDS_TO_ADJUST,f,c
  9049  001176  50DD               	movf	postdec2,w,c
  9050  001178  5A4E               	subwfb	_SECONDS_TO_ADJUST+1,f,c
  9051  00117A                     i2l3919:
  9052                           
  9053                           ;projMain.c: 90: SECONDS_TO_ADJUST = -SECONDS_TO_ADJUST;
  9054  00117A  6C4D               	negf	_SECONDS_TO_ADJUST,c
  9055  00117C  1E4E               	comf	_SECONDS_TO_ADJUST+1,f,c
  9056  00117E  B0D8               	btfsc	status,0,c
  9057  001180  2A4E               	incf	_SECONDS_TO_ADJUST+1,f,c
  9058  001182                     i2l3921:
  9059                           
  9060                           ;projMain.c: 91: }
  9061                           ;projMain.c: 92: }
  9062                           ;projMain.c: 93: if (CENTI_SECOND_COUNT == 1) {
  9063  001182  0454               	decf	_CENTI_SECOND_COUNT,w,c
  9064  001184  B4D8               	btfsc	status,2,c
  9065                           
  9066                           ;projMain.c: 94: if (!FLAGS_1.bits.b1) {
  9067  001186  B24F               	btfsc	_FLAGS_1,1,c
  9068  001188  0012               	return	
  9069                           
  9070                           ;projMain.c: 95: UINT8 ThisCycle = GetThisCycle();
  9071  00118A  EC61  F016         	call	_GetThisCycle	;wreg free
  9072  00118E  6E3A               	movwf	Timer0_10ms@ThisCycle_2898,c
  9073                           
  9074                           ;projMain.c: 96: if (PRESENT_STATE == CYCLES[ThisCycle].END_STATE) {
  9075  001190  503A               	movf	Timer0_10ms@ThisCycle_2898,w,c
  9076  001192  0D04               	mullw	4
  9077  001194  0E03               	movlw	low (_CYCLES+3)
  9078  001196  24F3               	addwf	prodl,w,c
  9079  001198  6ED9               	movwf	fsr2l,c
  9080  00119A  0E01               	movlw	high (_CYCLES+3)
  9081  00119C  20F4               	addwfc	prodh,w,c
  9082  00119E  6EDA               	movwf	fsr2h,c
  9083  0011A0  5057               	movf	_PRESENT_STATE,w,c
  9084  0011A2  18DE               	xorwf	postinc2,w,c
  9085  0011A4  E110               	bnz	i2l3939
  9086                           
  9087                           ;projMain.c: 97: PRESENT_EVENT = NEXT_EVENT;
  9088  0011A6  C0FC  F05E         	movff	_NEXT_EVENT,_PRESENT_EVENT
  9089                           
  9090                           ;projMain.c: 98: if (PRESENT_EVENT < 0) {
  9091  0011AA  AE5E               	btfss	_PRESENT_EVENT,7,c
  9092  0011AC  D002               	goto	i2l3935
  9093                           
  9094                           ;projMain.c: 99: ThisCycle = 0;
  9095  0011AE  6A3A               	clrf	Timer0_10ms@ThisCycle_2898,c
  9096                           
  9097                           ;projMain.c: 100: } else {
  9098  0011B0  D003               	goto	i2l1159
  9099  0011B2                     i2l3935:
  9100                           
  9101                           ;projMain.c: 101: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
  9102  0011B2  EC64  F016         	call	PL64	;call to abstracted procedure
  9103  0011B6  6E3A               	movwf	Timer0_10ms@ThisCycle_2898,c
  9104  0011B8                     i2l1159:
  9105                           
  9106                           ;projMain.c: 102: }
  9107                           ;projMain.c: 103: NEXT_STATE = CYCLES[ThisCycle].START_STATE;
  9108  0011B8  503A               	movf	Timer0_10ms@ThisCycle_2898,w,c
  9109  0011BA  D842               	call	PL78	;call to abstracted procedure
  9110  0011BC  50DF               	movf	indf2,w,c
  9111  0011BE  0100               	movlb	0	; () banked
  9112  0011C0  6FE6               	movwf	_NEXT_STATE& (0+255),b
  9113                           
  9114                           ; BSR set to: 0
  9115                           ;projMain.c: 104: FLAGS_1.bits.b1 = SET;
  9116  0011C2  824F               	bsf	_FLAGS_1,1,c
  9117                           
  9118                           ;projMain.c: 105: } else {
  9119  0011C4  0012               	return	
  9120  0011C6                     i2l3939:
  9121                           
  9122                           ;projMain.c: 106: NEXT_STATE = PRESENT_STATE+1;
  9123  0011C6  2857               	incf	_PRESENT_STATE,w,c
  9124  0011C8  0100               	movlb	0	; () banked
  9125  0011CA  6FE6               	movwf	_NEXT_STATE& (0+255),b
  9126  0011CC  0012               	return		;funcret
  9127  0011CE                     __end_of_Timer0_10ms:
  9128                           	opt stack 0
  9129  0011CE                     PL18:
  9130                           	opt stack 15
  9131  0011CE  5057               	movf	_PRESENT_STATE,w,c
  9132  0011D0  0D06               	mullw	6
  9133  0011D2  0EF0               	movlw	low _STATES
  9134  0011D4  24F3               	addwf	prodl,w,c
  9135  0011D6  6ED9               	movwf	fsr2l,c
  9136  0011D8  0E02               	movlw	high _STATES
  9137  0011DA  20F4               	addwfc	prodh,w,c
  9138  0011DC  6EDA               	movwf	fsr2h,c
  9139  0011DE  50DF               	movf	indf2,w,c
  9140  0011E0  0012               	return	
  9141  0011E2                     __end_ofPL18:
  9142                           	opt stack 0
  9143  0011E2                     PL24:
  9144                           	opt stack 15
  9145  0011E2  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
  9146  0011E4  6A38               	clrf	(??_Timer0_10ms+3)& (0+255),c
  9147  0011E6  5035               	movf	??_Timer0_10ms,w,c
  9148  0011E8  5C37               	subwf	??_Timer0_10ms+2,w,c
  9149  0011EA  5038               	movf	??_Timer0_10ms+3,w,c
  9150  0011EC  0A80               	xorlw	128
  9151  0011EE  6E39               	movwf	(??_Timer0_10ms+4)& (0+255),c
  9152  0011F0  5036               	movf	??_Timer0_10ms+1,w,c
  9153  0011F2  0A80               	xorlw	128
  9154  0011F4  5839               	subwfb	(??_Timer0_10ms+4)& (0+255),w,c
  9155  0011F6  0012               	return	
  9156  0011F8                     __end_ofPL24:
  9157                           	opt stack 0
  9158  0011F8                     PL26:
  9159                           	opt stack 15
  9160  0011F8  0F3F               	addlw	low Timer0_10ms@OutForThePorts
  9161  0011FA  6ED9               	movwf	fsr2l,c
  9162  0011FC  6ADA               	clrf	fsr2h,c
  9163  0011FE  5057               	movf	_PRESENT_STATE,w,c
  9164  001200  0D06               	mullw	6
  9165  001202  0EF0               	movlw	low _STATES
  9166  001204  6E35               	movwf	??_Timer0_10ms& (0+255),c
  9167  001206  0E02               	movlw	high _STATES
  9168  001208  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
  9169  00120A  0E03               	movlw	3
  9170  00120C  2635               	addwf	??_Timer0_10ms,f,c
  9171  00120E  0E00               	movlw	0
  9172  001210  2236               	addwfc	??_Timer0_10ms+1,f,c
  9173  001212  50F3               	movf	prodl,w,c
  9174  001214  2635               	addwf	??_Timer0_10ms,f,c
  9175  001216  50F4               	movf	prodh,w,c
  9176  001218  2236               	addwfc	??_Timer0_10ms+1,f,c
  9177  00121A  0012               	return	
  9178  00121C                     __end_ofPL26:
  9179                           	opt stack 0
  9180  00121C                     PL36:
  9181                           	opt stack 15
  9182  00121C  5057               	movf	_PRESENT_STATE,w,c
  9183  00121E  0D06               	mullw	6
  9184  001220  0EF5               	movlw	low (_STATES+5)
  9185  001222  24F3               	addwf	prodl,w,c
  9186  001224  6ED9               	movwf	fsr2l,c
  9187  001226  0E02               	movlw	high (_STATES+5)
  9188  001228  20F4               	addwfc	prodh,w,c
  9189  00122A  6EDA               	movwf	fsr2h,c
  9190  00122C  0012               	return	
  9191  00122E                     __end_ofPL36:
  9192                           	opt stack 0
  9193  00122E                     PL38:
  9194                           	opt stack 15
  9195  00122E  503C               	movf	Timer0_10ms@ThisCycle,w,c
  9196  001230  0D04               	mullw	4
  9197  001232  0E00               	movlw	low _CYCLES
  9198  001234  24F3               	addwf	prodl,w,c
  9199  001236  6ED9               	movwf	fsr2l,c
  9200  001238  0E01               	movlw	high _CYCLES
  9201  00123A  20F4               	addwfc	prodh,w,c
  9202  00123C  6EDA               	movwf	fsr2h,c
  9203  00123E  0012               	return	
  9204  001240                     __end_ofPL38:
  9205                           	opt stack 0
  9206  001240                     PL78:
  9207                           	opt stack 15
  9208  001240  0D04               	mullw	4
  9209  001242  0E02               	movlw	low (_CYCLES+2)
  9210  001244  24F3               	addwf	prodl,w,c
  9211  001246  6ED9               	movwf	fsr2l,c
  9212  001248  0E01               	movlw	high (_CYCLES+2)
  9213  00124A  20F4               	addwfc	prodh,w,c
  9214  00124C  6EDA               	movwf	fsr2h,c
  9215  00124E  0012               	return	
  9216  001250                     __end_ofPL78:
  9217                           	opt stack 0
  9218  001250                     PL80:
  9219                           	opt stack 15
  9220  001250  2435               	addwf	??_Timer0_10ms,w,c
  9221  001252  6EE1               	movwf	fsr1l,c
  9222  001254  0E00               	movlw	0
  9223  001256  2036               	addwfc	??_Timer0_10ms+1,w,c
  9224  001258  6EE2               	movwf	fsr1h,c
  9225  00125A  50E7               	movf	indf1,w,c
  9226  00125C  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
  9227  00125E  0012               	return	
  9228  001260                     __end_ofPL80:
  9229                           	opt stack 0
  9230  001260                     PL84:
  9231                           	opt stack 15
  9232  001260  C00D  F01C         	movff	?___ftmul,___fttol@f1
  9233  001264  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
  9234  001268  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
  9235  00126C  0012               	return	
  9236  00126E                     __end_ofPL84:
  9237                           	opt stack 0
  9238  00126E                     PL88:
  9239                           	opt stack 15
  9240  00126E  0F3F               	addlw	low Timer0_10ms@OutForThePorts
  9241  001270  6EE1               	movwf	fsr1l,c
  9242  001272  6AE2               	clrf	fsr1h,c
  9243  001274  50E7               	movf	indf1,w,c
  9244  001276  1037               	iorwf	??_Timer0_10ms+2,w,c
  9245  001278  6EDF               	movwf	indf2,c
  9246  00127A  0012               	return	
  9247  00127C                     __end_ofPL88:
  9248                           	opt stack 0
  9249  00127C                     PL92:
  9250                           	opt stack 15
  9251  00127C  C009  F00D         	movff	?___lbtoft,___ftmul@f1
  9252  001280  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
  9253  001284  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
  9254  001288  0012               	return	
  9255  00128A                     __end_ofPL92:
  9256                           	opt stack 0
  9257  00128A                     PL94:
  9258                           	opt stack 15
  9259  00128A  6A36               	clrf	(??_Timer0_10ms+1)& (0+255),c
  9260  00128C  2635               	addwf	??_Timer0_10ms,f,c
  9261  00128E  0E00               	movlw	0
  9262  001290  2236               	addwfc	??_Timer0_10ms+1,f,c
  9263  001292  0C00               	retlw	0
  9264  001294                     __end_ofPL94:
  9265                           	opt stack 0
  9266  001294                     PL110:
  9267                           	opt stack 15
  9268  001294  0E9A               	movlw	154
  9269  001296  6E10               	movwf	___ftmul@f2,c
  9270  001298  0E99               	movlw	153
  9271  00129A  6E11               	movwf	___ftmul@f2+1,c
  9272  00129C  0C99               	retlw	153
  9273  00129E                     __end_ofPL110:
  9274                           	opt stack 0
  9275  00129E                     PL120:
  9276                           	opt stack 15
  9277  00129E  CFDE F035          	movff	postinc2,??_Timer0_10ms
  9278  0012A2  CFDD F036          	movff	postdec2,??_Timer0_10ms+1
  9279  0012A6  0012               	return	
  9280  0012A8                     __end_ofPL120:
  9281                           	opt stack 0
  9282                           tosu	equ	0xFFF
  9283                           tosh	equ	0xFFE
  9284                           tosl	equ	0xFFD
  9285                           pclatu	equ	0xFFB
  9286                           pclath	equ	0xFFA
  9287                           tblptru	equ	0xFF8
  9288                           tblptrh	equ	0xFF7
  9289                           tblptrl	equ	0xFF6
  9290                           tablat	equ	0xFF5
  9291                           prodh	equ	0xFF4
  9292                           prodl	equ	0xFF3
  9293                           intcon	equ	0xFF2
  9294                           postinc0	equ	0xFEE
  9295                           plusw0	equ	0xFEB
  9296                           fsr0h	equ	0xFEA
  9297                           fsr0l	equ	0xFE9
  9298                           wreg	equ	0xFE8
  9299                           indf1	equ	0xFE7
  9300                           postinc1	equ	0xFE6
  9301                           postdec1	equ	0xFE5
  9302                           plusw1	equ	0xFE3
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           plusw2	equ	0xFDB
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8
  9312                           
  9313 ;; *************** function ___lbtoft *****************
  9314 ;; Defined at:
  9315 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbtoft.c"
  9316 ;; Parameters:    Size  Location     Type
  9317 ;;  c               1    wreg     unsigned char 
  9318 ;; Auto vars:     Size  Location     Type
  9319 ;;  c               1   11[COMRAM] unsigned char 
  9320 ;; Return value:  Size  Location     Type
  9321 ;;                  3    8[COMRAM] float 
  9322 ;; Registers used:
  9323 ;;		wreg, status,2, status,0, cstack
  9324 ;; Tracked objects:
  9325 ;;		On entry : 0/0
  9326 ;;		On exit  : 0/0
  9327 ;;		Unchanged: 0/0
  9328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9329 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9332 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9333 ;;Total ram usage:        4 bytes
  9334 ;; Hardware stack levels used:    1
  9335 ;; Hardware stack levels required when called:    1
  9336 ;; This function calls:
  9337 ;;		___ftpack
  9338 ;; This function is called by:
  9339 ;;		_Timer0_10ms
  9340 ;; This function uses a non-reentrant model
  9341 ;;
  9342                           
  9343                           	psect	text44
  9344  002C28                     __ptext44:
  9345                           	opt stack 0
  9346  002C28                     ___lbtoft:
  9347                           	opt stack 18
  9348                           
  9349                           ;incstack = 0
  9350                           ;___lbtoft@c stored from wreg
  9351  002C28  6E0C               	movwf	___lbtoft@c,c
  9352  002C2A  500C               	movf	___lbtoft@c,w,c
  9353  002C2C  6E01               	movwf	___ftpack@arg,c
  9354  002C2E  6A02               	clrf	___ftpack@arg+1,c
  9355  002C30  6A03               	clrf	___ftpack@arg+2,c
  9356  002C32  0E8E               	movlw	142
  9357  002C34  6E04               	movwf	___ftpack@exp,c
  9358  002C36  0E00               	movlw	0
  9359  002C38  6E05               	movwf	___ftpack@sign,c
  9360  002C3A  EC1A  F013         	call	___ftpack	;wreg free
  9361  002C3E  C001  F009         	movff	?___ftpack,?___lbtoft
  9362  002C42  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
  9363  002C46  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
  9364  002C4A  0012               	return		;funcret
  9365  002C4C                     __end_of___lbtoft:
  9366                           	opt stack 0
  9367                           tosu	equ	0xFFF
  9368                           tosh	equ	0xFFE
  9369                           tosl	equ	0xFFD
  9370                           pclatu	equ	0xFFB
  9371                           pclath	equ	0xFFA
  9372                           tblptru	equ	0xFF8
  9373                           tblptrh	equ	0xFF7
  9374                           tblptrl	equ	0xFF6
  9375                           tablat	equ	0xFF5
  9376                           prodh	equ	0xFF4
  9377                           prodl	equ	0xFF3
  9378                           intcon	equ	0xFF2
  9379                           postinc0	equ	0xFEE
  9380                           plusw0	equ	0xFEB
  9381                           fsr0h	equ	0xFEA
  9382                           fsr0l	equ	0xFE9
  9383                           wreg	equ	0xFE8
  9384                           indf1	equ	0xFE7
  9385                           postinc1	equ	0xFE6
  9386                           postdec1	equ	0xFE5
  9387                           plusw1	equ	0xFE3
  9388                           fsr1h	equ	0xFE2
  9389                           fsr1l	equ	0xFE1
  9390                           indf2	equ	0xFDF
  9391                           postinc2	equ	0xFDE
  9392                           postdec2	equ	0xFDD
  9393                           plusw2	equ	0xFDB
  9394                           fsr2h	equ	0xFDA
  9395                           fsr2l	equ	0xFD9
  9396                           status	equ	0xFD8
  9397                           
  9398 ;; *************** function ___fttol *****************
  9399 ;; Defined at:
  9400 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  9401 ;; Parameters:    Size  Location     Type
  9402 ;;  f1              3   27[COMRAM] float 
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  lval            4   37[COMRAM] unsigned long 
  9405 ;;  exp1            1   41[COMRAM] unsigned char 
  9406 ;;  sign1           1   36[COMRAM] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  4   27[COMRAM] long 
  9409 ;; Registers used:
  9410 ;;		wreg, status,2, status,0
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9417 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9418 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9419 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9420 ;;Total ram usage:       15 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; This function calls:
  9423 ;;		Nothing
  9424 ;; This function is called by:
  9425 ;;		_Timer0_10ms
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           	psect	text45
  9430  002442                     __ptext45:
  9431                           	opt stack 0
  9432  002442                     ___fttol:
  9433                           	opt stack 19
  9434                           
  9435                           ;incstack = 0
  9436  002442  C01E  F020         	movff	___fttol@f1+2,??___fttol
  9437  002446  6A21               	clrf	(??___fttol+1)& (0+255),c
  9438  002448  6A22               	clrf	(??___fttol+2)& (0+255),c
  9439  00244A  341D               	rlcf	___fttol@f1+1,w,c
  9440  00244C  3620               	rlcf	??___fttol& (0+255),f,c
  9441  00244E  E301               	bnc	u332_41
  9442  002450  8021               	bsf	(??___fttol+1)& (0+255),0,c
  9443  002452                     u332_41:
  9444  002452  5020               	movf	??___fttol,w,c
  9445  002454  6E2A               	movwf	___fttol@exp1,c
  9446  002456  502A               	movf	___fttol@exp1,w,c
  9447  002458  E105               	bnz	i2l3555
  9448  00245A                     i2l3553:
  9449  00245A  6A1C               	clrf	?___fttol,c
  9450  00245C  6A1D               	clrf	?___fttol+1,c
  9451  00245E  6A1E               	clrf	?___fttol+2,c
  9452  002460  6A1F               	clrf	?___fttol+3,c
  9453  002462  0012               	return	
  9454  002464                     i2l3555:
  9455  002464  0E17               	movlw	23
  9456  002466  6E20               	movwf	??___fttol& (0+255),c
  9457  002468  C01C  F021         	movff	___fttol@f1,??___fttol+1
  9458  00246C  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
  9459  002470  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
  9460  002474  2820               	incf	??___fttol,w,c
  9461  002476  6E24               	movwf	(??___fttol+4)& (0+255),c
  9462  002478  D004               	goto	i2u334_40
  9463  00247A                     i2u334_45:
  9464  00247A  90D8               	bcf	status,0,c
  9465  00247C  3223               	rrcf	??___fttol+3,f,c
  9466  00247E  3222               	rrcf	??___fttol+2,f,c
  9467  002480  3221               	rrcf	??___fttol+1,f,c
  9468  002482                     i2u334_40:
  9469  002482  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
  9470  002484  D7FA               	goto	i2u334_45
  9471  002486  5021               	movf	??___fttol+1,w,c
  9472  002488  6E25               	movwf	___fttol@sign1,c
  9473  00248A  8E1D               	bsf	___fttol@f1+1,7,c
  9474  00248C  6A1E               	clrf	___fttol@f1+2,c
  9475  00248E  501C               	movf	___fttol@f1,w,c
  9476  002490  6E26               	movwf	___fttol@lval,c
  9477  002492  501D               	movf	___fttol@f1+1,w,c
  9478  002494  6E27               	movwf	___fttol@lval+1,c
  9479  002496  501E               	movf	___fttol@f1+2,w,c
  9480  002498  6E28               	movwf	___fttol@lval+2,c
  9481  00249A  6A29               	clrf	___fttol@lval+3,c
  9482  00249C  0E8E               	movlw	142
  9483  00249E  5E2A               	subwf	___fttol@exp1,f,c
  9484  0024A0  AE2A               	btfss	___fttol@exp1,7,c
  9485  0024A2  D00C               	goto	i2l3575
  9486  0024A4  502A               	movf	___fttol@exp1,w,c
  9487  0024A6  0A80               	xorlw	128
  9488  0024A8  0F8F               	addlw	143
  9489  0024AA  E3D7               	bnc	i2l3553
  9490  0024AC                     i2l3571:
  9491  0024AC  90D8               	bcf	status,0,c
  9492  0024AE  3229               	rrcf	___fttol@lval+3,f,c
  9493  0024B0  3228               	rrcf	___fttol@lval+2,f,c
  9494  0024B2  3227               	rrcf	___fttol@lval+1,f,c
  9495  0024B4  3226               	rrcf	___fttol@lval,f,c
  9496  0024B6  3E2A               	incfsz	___fttol@exp1,f,c
  9497  0024B8  D7F9               	goto	i2l3571
  9498  0024BA  D00C               	goto	i2l3583
  9499  0024BC                     i2l3575:
  9500  0024BC  0E17               	movlw	23
  9501  0024BE  642A               	cpfsgt	___fttol@exp1,c
  9502  0024C0  D007               	goto	i2l3581
  9503  0024C2  D7CB               	goto	i2l3553
  9504  0024C4                     i2l3579:
  9505  0024C4  90D8               	bcf	status,0,c
  9506  0024C6  3626               	rlcf	___fttol@lval,f,c
  9507  0024C8  3627               	rlcf	___fttol@lval+1,f,c
  9508  0024CA  3628               	rlcf	___fttol@lval+2,f,c
  9509  0024CC  3629               	rlcf	___fttol@lval+3,f,c
  9510  0024CE  062A               	decf	___fttol@exp1,f,c
  9511  0024D0                     i2l3581:
  9512  0024D0  502A               	movf	___fttol@exp1,w,c
  9513  0024D2  E1F8               	bnz	i2l3579
  9514  0024D4                     i2l3583:
  9515  0024D4  5025               	movf	___fttol@sign1,w,c
  9516  0024D6  E008               	bz	i2l3587
  9517  0024D8  1E29               	comf	___fttol@lval+3,f,c
  9518  0024DA  1E28               	comf	___fttol@lval+2,f,c
  9519  0024DC  1E27               	comf	___fttol@lval+1,f,c
  9520  0024DE  6C26               	negf	___fttol@lval,c
  9521  0024E0  0E00               	movlw	0
  9522  0024E2  2227               	addwfc	___fttol@lval+1,f,c
  9523  0024E4  2228               	addwfc	___fttol@lval+2,f,c
  9524  0024E6  2229               	addwfc	___fttol@lval+3,f,c
  9525  0024E8                     i2l3587:
  9526  0024E8  C026  F01C         	movff	___fttol@lval,?___fttol
  9527  0024EC  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
  9528  0024F0  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
  9529  0024F4  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
  9530  0024F8  0012               	return		;funcret
  9531  0024FA                     __end_of___fttol:
  9532                           	opt stack 0
  9533                           tosu	equ	0xFFF
  9534                           tosh	equ	0xFFE
  9535                           tosl	equ	0xFFD
  9536                           pclatu	equ	0xFFB
  9537                           pclath	equ	0xFFA
  9538                           tblptru	equ	0xFF8
  9539                           tblptrh	equ	0xFF7
  9540                           tblptrl	equ	0xFF6
  9541                           tablat	equ	0xFF5
  9542                           prodh	equ	0xFF4
  9543                           prodl	equ	0xFF3
  9544                           intcon	equ	0xFF2
  9545                           postinc0	equ	0xFEE
  9546                           plusw0	equ	0xFEB
  9547                           fsr0h	equ	0xFEA
  9548                           fsr0l	equ	0xFE9
  9549                           wreg	equ	0xFE8
  9550                           indf1	equ	0xFE7
  9551                           postinc1	equ	0xFE6
  9552                           postdec1	equ	0xFE5
  9553                           plusw1	equ	0xFE3
  9554                           fsr1h	equ	0xFE2
  9555                           fsr1l	equ	0xFE1
  9556                           indf2	equ	0xFDF
  9557                           postinc2	equ	0xFDE
  9558                           postdec2	equ	0xFDD
  9559                           plusw2	equ	0xFDB
  9560                           fsr2h	equ	0xFDA
  9561                           fsr2l	equ	0xFD9
  9562                           status	equ	0xFD8
  9563                           
  9564 ;; *************** function ___ftmul *****************
  9565 ;; Defined at:
  9566 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;  f1              3   12[COMRAM] float 
  9569 ;;  f2              3   15[COMRAM] float 
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  9572 ;;  sign            1   26[COMRAM] unsigned char 
  9573 ;;  cntr            1   25[COMRAM] unsigned char 
  9574 ;;  exp             1   21[COMRAM] unsigned char 
  9575 ;; Return value:  Size  Location     Type
  9576 ;;                  3   12[COMRAM] float 
  9577 ;; Registers used:
  9578 ;;		wreg, status,2, status,0, cstack
  9579 ;; Tracked objects:
  9580 ;;		On entry : 0/0
  9581 ;;		On exit  : 0/0
  9582 ;;		Unchanged: 0/0
  9583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9584 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9585 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9586 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9587 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9588 ;;Total ram usage:       15 bytes
  9589 ;; Hardware stack levels used:    1
  9590 ;; Hardware stack levels required when called:    1
  9591 ;; This function calls:
  9592 ;;		___ftpack
  9593 ;; This function is called by:
  9594 ;;		_Timer0_10ms
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text46
  9599  00237A                     __ptext46:
  9600                           	opt stack 0
  9601  00237A                     ___ftmul:
  9602                           	opt stack 18
  9603                           
  9604                           ;incstack = 0
  9605  00237A  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  9606  00237E  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9607  002380  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9608  002382  340E               	rlcf	___ftmul@f1+1,w,c
  9609  002384  3613               	rlcf	??___ftmul& (0+255),f,c
  9610  002386  E301               	bnc	u314_41
  9611  002388  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9612  00238A                     u314_41:
  9613  00238A  5013               	movf	??___ftmul,w,c
  9614  00238C  6E16               	movwf	___ftmul@exp,c
  9615  00238E  5016               	movf	___ftmul@exp,w,c
  9616  002390  E101               	bnz	i2l3431
  9617  002392  D053               	goto	PL98	;call to abstracted procedure
  9618  002394                     i2l3431:
  9619  002394  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  9620  002398  6A14               	clrf	(??___ftmul+1)& (0+255),c
  9621  00239A  6A15               	clrf	(??___ftmul+2)& (0+255),c
  9622  00239C  3411               	rlcf	___ftmul@f2+1,w,c
  9623  00239E  3613               	rlcf	??___ftmul& (0+255),f,c
  9624  0023A0  E301               	bnc	u316_41
  9625  0023A2  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  9626  0023A4                     u316_41:
  9627  0023A4  5013               	movf	??___ftmul,w,c
  9628  0023A6  6E1B               	movwf	___ftmul@sign,c
  9629  0023A8  501B               	movf	___ftmul@sign,w,c
  9630  0023AA  E101               	bnz	i2l3435
  9631  0023AC  D046               	goto	PL98	;call to abstracted procedure
  9632  0023AE                     i2l3435:
  9633  0023AE  501B               	movf	___ftmul@sign,w,c
  9634  0023B0  0F7B               	addlw	123
  9635  0023B2  2616               	addwf	___ftmul@exp,f,c
  9636  0023B4  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  9637  0023B8  5012               	movf	___ftmul@f2+2,w,c
  9638  0023BA  1A1B               	xorwf	___ftmul@sign,f,c
  9639  0023BC  0E80               	movlw	128
  9640  0023BE  161B               	andwf	___ftmul@sign,f,c
  9641  0023C0  8E0E               	bsf	___ftmul@f1+1,7,c
  9642  0023C2  8E11               	bsf	___ftmul@f2+1,7,c
  9643  0023C4  0E00               	movlw	0
  9644  0023C6  1612               	andwf	___ftmul@f2+2,f,c
  9645  0023C8  6A17               	clrf	___ftmul@f3_as_product,c
  9646  0023CA  6A18               	clrf	___ftmul@f3_as_product+1,c
  9647  0023CC  6A19               	clrf	___ftmul@f3_as_product+2,c
  9648  0023CE  0E07               	movlw	7
  9649  0023D0  6E1A               	movwf	___ftmul@cntr,c
  9650  0023D2                     i2l3449:
  9651  0023D2  B00D               	btfsc	___ftmul@f1,0,c
  9652  0023D4  D82B               	call	PL90	;call to abstracted procedure
  9653  0023D6                     i2l3453:
  9654  0023D6  90D8               	bcf	status,0,c
  9655  0023D8  320F               	rrcf	___ftmul@f1+2,f,c
  9656  0023DA  320E               	rrcf	___ftmul@f1+1,f,c
  9657  0023DC  320D               	rrcf	___ftmul@f1,f,c
  9658  0023DE  90D8               	bcf	status,0,c
  9659  0023E0  3610               	rlcf	___ftmul@f2,f,c
  9660  0023E2  3611               	rlcf	___ftmul@f2+1,f,c
  9661  0023E4  3612               	rlcf	___ftmul@f2+2,f,c
  9662  0023E6  2E1A               	decfsz	___ftmul@cntr,f,c
  9663  0023E8  D7F4               	goto	i2l3449
  9664  0023EA  0E09               	movlw	9
  9665  0023EC  6E1A               	movwf	___ftmul@cntr,c
  9666  0023EE                     i2l3459:
  9667  0023EE  B00D               	btfsc	___ftmul@f1,0,c
  9668  0023F0  D81D               	call	PL90	;call to abstracted procedure
  9669  0023F2                     i2l3463:
  9670  0023F2  90D8               	bcf	status,0,c
  9671  0023F4  320F               	rrcf	___ftmul@f1+2,f,c
  9672  0023F6  320E               	rrcf	___ftmul@f1+1,f,c
  9673  0023F8  320D               	rrcf	___ftmul@f1,f,c
  9674  0023FA  90D8               	bcf	status,0,c
  9675  0023FC  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  9676  0023FE  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  9677  002400  3217               	rrcf	___ftmul@f3_as_product,f,c
  9678  002402  2E1A               	decfsz	___ftmul@cntr,f,c
  9679  002404  D7F4               	goto	i2l3459
  9680  002406  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9681  00240A  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9682  00240E  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9683  002412  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  9684  002416  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  9685  00241A  EC1A  F013         	call	___ftpack	;wreg free
  9686  00241E  C001  F00D         	movff	?___ftpack,?___ftmul
  9687  002422  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  9688  002426  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  9689  00242A  0012               	return		;funcret
  9690  00242C                     __end_of___ftmul:
  9691                           	opt stack 0
  9692  00242C                     PL90:
  9693                           	opt stack 18
  9694  00242C  5010               	movf	___ftmul@f2,w,c
  9695  00242E  2617               	addwf	___ftmul@f3_as_product,f,c
  9696  002430  5011               	movf	___ftmul@f2+1,w,c
  9697  002432  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  9698  002434  5012               	movf	___ftmul@f2+2,w,c
  9699  002436  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  9700  002438  0012               	return	
  9701  00243A                     __end_ofPL90:
  9702                           	opt stack 0
  9703  00243A                     PL98:
  9704                           	opt stack 18
  9705  00243A  6A0D               	clrf	?___ftmul,c
  9706  00243C  6A0E               	clrf	?___ftmul+1,c
  9707  00243E  6A0F               	clrf	?___ftmul+2,c
  9708  002440  0012               	return	
  9709  002442                     __end_ofPL98:
  9710                           	opt stack 0
  9711                           tosu	equ	0xFFF
  9712                           tosh	equ	0xFFE
  9713                           tosl	equ	0xFFD
  9714                           pclatu	equ	0xFFB
  9715                           pclath	equ	0xFFA
  9716                           tblptru	equ	0xFF8
  9717                           tblptrh	equ	0xFF7
  9718                           tblptrl	equ	0xFF6
  9719                           tablat	equ	0xFF5
  9720                           prodh	equ	0xFF4
  9721                           prodl	equ	0xFF3
  9722                           intcon	equ	0xFF2
  9723                           postinc0	equ	0xFEE
  9724                           plusw0	equ	0xFEB
  9725                           fsr0h	equ	0xFEA
  9726                           fsr0l	equ	0xFE9
  9727                           wreg	equ	0xFE8
  9728                           indf1	equ	0xFE7
  9729                           postinc1	equ	0xFE6
  9730                           postdec1	equ	0xFE5
  9731                           plusw1	equ	0xFE3
  9732                           fsr1h	equ	0xFE2
  9733                           fsr1l	equ	0xFE1
  9734                           indf2	equ	0xFDF
  9735                           postinc2	equ	0xFDE
  9736                           postdec2	equ	0xFDD
  9737                           plusw2	equ	0xFDB
  9738                           fsr2h	equ	0xFDA
  9739                           fsr2l	equ	0xFD9
  9740                           status	equ	0xFD8
  9741                           
  9742 ;; *************** function ___ftpack *****************
  9743 ;; Defined at:
  9744 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  9745 ;; Parameters:    Size  Location     Type
  9746 ;;  arg             3    0[COMRAM] unsigned um
  9747 ;;  exp             1    3[COMRAM] unsigned char 
  9748 ;;  sign            1    4[COMRAM] unsigned char 
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;                  3    0[COMRAM] float 
  9753 ;; Registers used:
  9754 ;;		wreg, status,2, status,0
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9760 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9762 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9763 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9764 ;;Total ram usage:        8 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		___ftmul
  9770 ;;		___lbtoft
  9771 ;; This function uses a non-reentrant model
  9772 ;;
  9773                           
  9774                           	psect	text47
  9775  002634                     __ptext47:
  9776                           	opt stack 0
  9777  002634                     ___ftpack:
  9778                           	opt stack 18
  9779                           
  9780                           ;incstack = 0
  9781  002634  5004               	movf	___ftpack@exp,w,c
  9782  002636  E004               	bz	i2l1374
  9783  002638  5001               	movf	___ftpack@arg,w,c
  9784  00263A  1002               	iorwf	___ftpack@arg+1,w,c
  9785  00263C  1003               	iorwf	___ftpack@arg+2,w,c
  9786  00263E  E106               	bnz	i2l3209
  9787  002640                     i2l1374:
  9788  002640  6A01               	clrf	?___ftpack,c
  9789  002642  6A02               	clrf	?___ftpack+1,c
  9790  002644  6A03               	clrf	?___ftpack+2,c
  9791  002646  0012               	return	
  9792  002648                     i2l3207:
  9793  002648  2A04               	incf	___ftpack@exp,f,c
  9794  00264A  D82D               	call	PL104	;call to abstracted procedure
  9795  00264C                     i2l3209:
  9796  00264C  6A06               	clrf	??___ftpack& (0+255),c
  9797  00264E  6A07               	clrf	(??___ftpack+1)& (0+255),c
  9798  002650  0EFE               	movlw	254
  9799  002652  1403               	andwf	___ftpack@arg+2,w,c
  9800  002654  D82D               	call	PL108	;call to abstracted procedure
  9801  002656  E007               	bz	i2l3215
  9802  002658  D7F7               	goto	i2l3207
  9803  00265A                     i2l3211:
  9804  00265A  2A04               	incf	___ftpack@exp,f,c
  9805  00265C  2A01               	incf	___ftpack@arg,f,c
  9806  00265E  0E00               	movlw	0
  9807  002660  2202               	addwfc	___ftpack@arg+1,f,c
  9808  002662  2203               	addwfc	___ftpack@arg+2,f,c
  9809  002664  D820               	call	PL104	;call to abstracted procedure
  9810  002666                     i2l3215:
  9811  002666  6A06               	clrf	??___ftpack& (0+255),c
  9812  002668  6A07               	clrf	(??___ftpack+1)& (0+255),c
  9813  00266A  5003               	movf	___ftpack@arg+2,w,c
  9814  00266C  D821               	call	PL108	;call to abstracted procedure
  9815  00266E  E006               	bz	i2l3219
  9816  002670  D7F4               	goto	i2l3211
  9817  002672                     i2l3217:
  9818  002672  0604               	decf	___ftpack@exp,f,c
  9819  002674  90D8               	bcf	status,0,c
  9820  002676  3601               	rlcf	___ftpack@arg,f,c
  9821  002678  3602               	rlcf	___ftpack@arg+1,f,c
  9822  00267A  3603               	rlcf	___ftpack@arg+2,f,c
  9823  00267C                     i2l3219:
  9824  00267C  BE02               	btfsc	___ftpack@arg+1,7,c
  9825  00267E  D003               	goto	i2l1386
  9826  002680  0E02               	movlw	2
  9827  002682  6004               	cpfslt	___ftpack@exp,c
  9828  002684  D7F6               	goto	i2l3217
  9829  002686                     i2l1386:
  9830  002686  A004               	btfss	___ftpack@exp,0,c
  9831  002688  9E02               	bcf	___ftpack@arg+1,7,c
  9832  00268A  90D8               	bcf	status,0,c
  9833  00268C  3204               	rrcf	___ftpack@exp,f,c
  9834  00268E  5004               	movf	___ftpack@exp,w,c
  9835  002690  1203               	iorwf	___ftpack@arg+2,f,c
  9836  002692  5005               	movf	___ftpack@sign,w,c
  9837  002694  E001               	bz	i2l3233
  9838  002696  8E03               	bsf	___ftpack@arg+2,7,c
  9839  002698                     i2l3233:
  9840  002698  C001  F001         	movff	___ftpack@arg,?___ftpack
  9841  00269C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  9842  0026A0  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  9843  0026A4  0012               	return		;funcret
  9844  0026A6                     __end_of___ftpack:
  9845                           	opt stack 0
  9846  0026A6                     PL104:
  9847                           	opt stack 18
  9848  0026A6  90D8               	bcf	status,0,c
  9849  0026A8  3203               	rrcf	___ftpack@arg+2,f,c
  9850  0026AA  3202               	rrcf	___ftpack@arg+1,f,c
  9851  0026AC  3201               	rrcf	___ftpack@arg,f,c
  9852  0026AE  0012               	return	
  9853  0026B0                     __end_ofPL104:
  9854                           	opt stack 0
  9855  0026B0                     PL108:
  9856                           	opt stack 18
  9857  0026B0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  9858  0026B2  5006               	movf	??___ftpack,w,c
  9859  0026B4  1007               	iorwf	??___ftpack+1,w,c
  9860  0026B6  1008               	iorwf	??___ftpack+2,w,c
  9861  0026B8  0012               	return	
  9862  0026BA                     __end_ofPL108:
  9863                           	opt stack 0
  9864                           tosu	equ	0xFFF
  9865                           tosh	equ	0xFFE
  9866                           tosl	equ	0xFFD
  9867                           pclatu	equ	0xFFB
  9868                           pclath	equ	0xFFA
  9869                           tblptru	equ	0xFF8
  9870                           tblptrh	equ	0xFF7
  9871                           tblptrl	equ	0xFF6
  9872                           tablat	equ	0xFF5
  9873                           prodh	equ	0xFF4
  9874                           prodl	equ	0xFF3
  9875                           intcon	equ	0xFF2
  9876                           postinc0	equ	0xFEE
  9877                           plusw0	equ	0xFEB
  9878                           fsr0h	equ	0xFEA
  9879                           fsr0l	equ	0xFE9
  9880                           wreg	equ	0xFE8
  9881                           indf1	equ	0xFE7
  9882                           postinc1	equ	0xFE6
  9883                           postdec1	equ	0xFE5
  9884                           plusw1	equ	0xFE3
  9885                           fsr1h	equ	0xFE2
  9886                           fsr1l	equ	0xFE1
  9887                           indf2	equ	0xFDF
  9888                           postinc2	equ	0xFDE
  9889                           postdec2	equ	0xFDD
  9890                           plusw2	equ	0xFDB
  9891                           fsr2h	equ	0xFDA
  9892                           fsr2l	equ	0xFD9
  9893                           status	equ	0xFD8
  9894                           
  9895 ;; *************** function ___almod *****************
  9896 ;; Defined at:
  9897 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
  9898 ;; Parameters:    Size  Location     Type
  9899 ;;  dividend        4    0[COMRAM] long 
  9900 ;;  divisor         4    4[COMRAM] long 
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;  sign            1    9[COMRAM] unsigned char 
  9903 ;;  counter         1    8[COMRAM] unsigned char 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;                  4    0[COMRAM] long 
  9906 ;; Registers used:
  9907 ;;		wreg, status,2, status,0
  9908 ;; Tracked objects:
  9909 ;;		On entry : 0/0
  9910 ;;		On exit  : 0/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9913 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9914 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9916 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9917 ;;Total ram usage:       10 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; This function calls:
  9920 ;;		Nothing
  9921 ;; This function is called by:
  9922 ;;		_Timer0_10ms
  9923 ;; This function uses a non-reentrant model
  9924 ;;
  9925                           
  9926                           	psect	text48
  9927  00259A                     __ptext48:
  9928                           	opt stack 0
  9929  00259A                     ___almod:
  9930                           	opt stack 19
  9931                           
  9932                           ;incstack = 0
  9933  00259A  6A0A               	clrf	___almod@sign,c
  9934  00259C  AE04               	btfss	___almod@dividend+3,7,c
  9935  00259E  D003               	goto	i2l3399
  9936  0025A0  D840               	call	PL68	;call to abstracted procedure
  9937  0025A2  0E01               	movlw	1
  9938  0025A4  6E0A               	movwf	___almod@sign,c
  9939  0025A6                     i2l3399:
  9940  0025A6  AE08               	btfss	___almod@divisor+3,7,c
  9941  0025A8  D008               	goto	i2l3403
  9942  0025AA  1E08               	comf	___almod@divisor+3,f,c
  9943  0025AC  1E07               	comf	___almod@divisor+2,f,c
  9944  0025AE  1E06               	comf	___almod@divisor+1,f,c
  9945  0025B0  6C05               	negf	___almod@divisor,c
  9946  0025B2  0E00               	movlw	0
  9947  0025B4  2206               	addwfc	___almod@divisor+1,f,c
  9948  0025B6  2207               	addwfc	___almod@divisor+2,f,c
  9949  0025B8  2208               	addwfc	___almod@divisor+3,f,c
  9950  0025BA                     i2l3403:
  9951  0025BA  5005               	movf	___almod@divisor,w,c
  9952  0025BC  1006               	iorwf	___almod@divisor+1,w,c
  9953  0025BE  1007               	iorwf	___almod@divisor+2,w,c
  9954  0025C0  1008               	iorwf	___almod@divisor+3,w,c
  9955  0025C2  E023               	bz	i2l3419
  9956  0025C4  0E01               	movlw	1
  9957  0025C6  6E09               	movwf	___almod@counter,c
  9958  0025C8  D006               	goto	i2l3409
  9959  0025CA                     i2l3407:
  9960  0025CA  90D8               	bcf	status,0,c
  9961  0025CC  3605               	rlcf	___almod@divisor,f,c
  9962  0025CE  3606               	rlcf	___almod@divisor+1,f,c
  9963  0025D0  3607               	rlcf	___almod@divisor+2,f,c
  9964  0025D2  3608               	rlcf	___almod@divisor+3,f,c
  9965  0025D4  2A09               	incf	___almod@counter,f,c
  9966  0025D6                     i2l3409:
  9967  0025D6  AE08               	btfss	___almod@divisor+3,7,c
  9968  0025D8  D7F8               	goto	i2l3407
  9969  0025DA                     i2l3411:
  9970  0025DA  5005               	movf	___almod@divisor,w,c
  9971  0025DC  5C01               	subwf	___almod@dividend,w,c
  9972  0025DE  5006               	movf	___almod@divisor+1,w,c
  9973  0025E0  5802               	subwfb	___almod@dividend+1,w,c
  9974  0025E2  5007               	movf	___almod@divisor+2,w,c
  9975  0025E4  5803               	subwfb	___almod@dividend+2,w,c
  9976  0025E6  5008               	movf	___almod@divisor+3,w,c
  9977  0025E8  5804               	subwfb	___almod@dividend+3,w,c
  9978  0025EA  E308               	bnc	i2l3415
  9979  0025EC  5005               	movf	___almod@divisor,w,c
  9980  0025EE  5E01               	subwf	___almod@dividend,f,c
  9981  0025F0  5006               	movf	___almod@divisor+1,w,c
  9982  0025F2  5A02               	subwfb	___almod@dividend+1,f,c
  9983  0025F4  5007               	movf	___almod@divisor+2,w,c
  9984  0025F6  5A03               	subwfb	___almod@dividend+2,f,c
  9985  0025F8  5008               	movf	___almod@divisor+3,w,c
  9986  0025FA  5A04               	subwfb	___almod@dividend+3,f,c
  9987  0025FC                     i2l3415:
  9988  0025FC  90D8               	bcf	status,0,c
  9989  0025FE  3208               	rrcf	___almod@divisor+3,f,c
  9990  002600  3207               	rrcf	___almod@divisor+2,f,c
  9991  002602  3206               	rrcf	___almod@divisor+1,f,c
  9992  002604  3205               	rrcf	___almod@divisor,f,c
  9993  002606  2E09               	decfsz	___almod@counter,f,c
  9994  002608  D7E8               	goto	i2l3411
  9995  00260A                     i2l3419:
  9996  00260A  500A               	movf	___almod@sign,w,c
  9997  00260C  E001               	bz	i2l3423
  9998  00260E  D809               	call	PL68	;call to abstracted procedure
  9999  002610                     i2l3423:
 10000  002610  C001  F001         	movff	___almod@dividend,?___almod
 10001  002614  C002  F002         	movff	___almod@dividend+1,?___almod+1
 10002  002618  C003  F003         	movff	___almod@dividend+2,?___almod+2
 10003  00261C  C004  F004         	movff	___almod@dividend+3,?___almod+3
 10004  002620  0012               	return		;funcret
 10005  002622                     __end_of___almod:
 10006                           	opt stack 0
 10007  002622                     PL68:
 10008                           	opt stack 19
 10009  002622  1E04               	comf	___almod@dividend+3,f,c
 10010  002624  1E03               	comf	___almod@dividend+2,f,c
 10011  002626  1E02               	comf	___almod@dividend+1,f,c
 10012  002628  6C01               	negf	___almod@dividend,c
 10013  00262A  0E00               	movlw	0
 10014  00262C  2202               	addwfc	___almod@dividend+1,f,c
 10015  00262E  2203               	addwfc	___almod@dividend+2,f,c
 10016  002630  2204               	addwfc	___almod@dividend+3,f,c
 10017  002632  0C00               	retlw	0
 10018  002634                     __end_ofPL68:
 10019                           	opt stack 0
 10020                           tosu	equ	0xFFF
 10021                           tosh	equ	0xFFE
 10022                           tosl	equ	0xFFD
 10023                           pclatu	equ	0xFFB
 10024                           pclath	equ	0xFFA
 10025                           tblptru	equ	0xFF8
 10026                           tblptrh	equ	0xFF7
 10027                           tblptrl	equ	0xFF6
 10028                           tablat	equ	0xFF5
 10029                           prodh	equ	0xFF4
 10030                           prodl	equ	0xFF3
 10031                           intcon	equ	0xFF2
 10032                           postinc0	equ	0xFEE
 10033                           plusw0	equ	0xFEB
 10034                           fsr0h	equ	0xFEA
 10035                           fsr0l	equ	0xFE9
 10036                           wreg	equ	0xFE8
 10037                           indf1	equ	0xFE7
 10038                           postinc1	equ	0xFE6
 10039                           postdec1	equ	0xFE5
 10040                           plusw1	equ	0xFE3
 10041                           fsr1h	equ	0xFE2
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           postdec2	equ	0xFDD
 10046                           plusw2	equ	0xFDB
 10047                           fsr2h	equ	0xFDA
 10048                           fsr2l	equ	0xFD9
 10049                           status	equ	0xFD8
 10050                           
 10051 ;; *************** function _IncreaseByASecond *****************
 10052 ;; Defined at:
 10053 ;;		line 3 in file "libs/funcs.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;		None
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
 10060 ;; Registers used:
 10061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 3F/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10067 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10070 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10071 ;;Total ram usage:       11 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    4
 10074 ;; This function calls:
 10075 ;;		i2_IncreaseByADay
 10076 ;; This function is called by:
 10077 ;;		_Timer0_10ms
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           	psect	text49
 10082  00286A                     __ptext49:
 10083                           	opt stack 0
 10084  00286A                     _IncreaseByASecond:
 10085                           	opt stack 15
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;funcs.c: 4: dt.SECOND++;
 10089                           
 10090                           ;incstack = 0
 10091  00286A  2A2A               	incf	IncreaseByASecond@dt,f,c
 10092  00286C  0E00               	movlw	0
 10093  00286E  222B               	addwfc	IncreaseByASecond@dt+1,f,c
 10094  002870  222C               	addwfc	IncreaseByASecond@dt+2,f,c
 10095  002872  222D               	addwfc	IncreaseByASecond@dt+3,f,c
 10096                           
 10097                           ;funcs.c: 5: if (dt.SECOND == 86400) {
 10098  002874  0E80               	movlw	128
 10099  002876  182A               	xorwf	IncreaseByASecond@dt,w,c
 10100  002878  E11C               	bnz	i2l3289
 10101  00287A  0E51               	movlw	81
 10102  00287C  182B               	xorwf	IncreaseByASecond@dt+1,w,c
 10103  00287E  E119               	bnz	i2l3289
 10104  002880  042C               	decf	IncreaseByASecond@dt+2,w,c
 10105  002882  102D               	iorwf	IncreaseByASecond@dt+3,w,c
 10106  002884  E116               	bnz	i2l3289
 10107                           
 10108                           ; BSR set to: 0
 10109                           ;funcs.c: 6: dt.SECOND = 0;
 10110  002886  6A2A               	clrf	IncreaseByASecond@dt,c
 10111  002888  6A2B               	clrf	IncreaseByASecond@dt+1,c
 10112  00288A  6A2C               	clrf	IncreaseByASecond@dt+2,c
 10113  00288C  6A2D               	clrf	IncreaseByASecond@dt+3,c
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;funcs.c: 7: dt = IncreaseByADay(dt);
 10117  00288E  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 10118  002892  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
 10119  002896  0E0A               	movlw	10
 10120  002898                     i2u280_41:
 10121  002898  CFDB FFEB          	movff	plusw2,plusw0
 10122  00289C  06E8               	decf	wreg,f,c
 10123  00289E  E2FC               	bc	i2u280_41
 10124  0028A0  EC70  F010         	call	i2_IncreaseByADay	;wreg free
 10125  0028A4  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 10126  0028A8  0E0A               	movlw	10
 10127  0028AA                     i2u281_41:
 10128  0028AA  CFEB FFDB          	movff	plusw0,plusw2
 10129  0028AE  06E8               	decf	wreg,f,c
 10130  0028B0  E2FC               	bc	i2u281_41
 10131  0028B2                     i2l3289:
 10132                           
 10133                           ;funcs.c: 8: }
 10134                           ;funcs.c: 9: return dt;
 10135  0028B2  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 10136  0028B6  EE00  F02A         	lfsr	0,?_IncreaseByASecond
 10137  0028BA  0E0A               	movlw	10
 10138  0028BC                     i2u282_41:
 10139  0028BC  CFDB FFEB          	movff	plusw2,plusw0
 10140  0028C0  06E8               	decf	wreg,f,c
 10141  0028C2  E2FC               	bc	i2u282_41
 10142  0028C4  0012               	return		;funcret
 10143  0028C6                     __end_of_IncreaseByASecond:
 10144                           	opt stack 0
 10145                           tosu	equ	0xFFF
 10146                           tosh	equ	0xFFE
 10147                           tosl	equ	0xFFD
 10148                           pclatu	equ	0xFFB
 10149                           pclath	equ	0xFFA
 10150                           tblptru	equ	0xFF8
 10151                           tblptrh	equ	0xFF7
 10152                           tblptrl	equ	0xFF6
 10153                           tablat	equ	0xFF5
 10154                           prodh	equ	0xFF4
 10155                           prodl	equ	0xFF3
 10156                           intcon	equ	0xFF2
 10157                           postinc0	equ	0xFEE
 10158                           plusw0	equ	0xFEB
 10159                           fsr0h	equ	0xFEA
 10160                           fsr0l	equ	0xFE9
 10161                           wreg	equ	0xFE8
 10162                           indf1	equ	0xFE7
 10163                           postinc1	equ	0xFE6
 10164                           postdec1	equ	0xFE5
 10165                           plusw1	equ	0xFE3
 10166                           fsr1h	equ	0xFE2
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           postdec2	equ	0xFDD
 10171                           plusw2	equ	0xFDB
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function i2_IncreaseByADay *****************
 10177 ;; Defined at:
 10178 ;;		line 12 in file "libs/funcs.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  IncreaseByAD    1   40[COMRAM] char 
 10183 ;; Return value:  Size  Location     Type
 10184 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
 10185 ;; Registers used:
 10186 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10187 ;; Tracked objects:
 10188 ;;		On entry : 3F/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10192 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10193 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10194 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10195 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10196 ;;Total ram usage:       14 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; Hardware stack levels required when called:    3
 10199 ;; This function calls:
 10200 ;;		i2_IncreaseByAMonth
 10201 ;;		i2___lwmod
 10202 ;; This function is called by:
 10203 ;;		_IncreaseByASecond
 10204 ;; This function uses a non-reentrant model
 10205 ;;
 10206                           
 10207                           	psect	text50
 10208  0020E0                     __ptext50:
 10209                           	opt stack 0
 10210  0020E0                     i2_IncreaseByADay:
 10211                           	opt stack 15
 10212                           
 10213                           ; BSR set to: 0
 10214                           ;funcs.c: 13: dt.DATE.Day++;
 10215                           
 10216                           ;incstack = 0
 10217  0020E0  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
 10218  0020E2  2A21               	incf	i2IncreaseByADay@dt+5,f,c
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
 10222  0020E4  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 10223  0020E6  0B7F               	andlw	127
 10224  0020E8  06E8               	decf	wreg,f,c
 10225  0020EA  E104               	bnz	i2l3243
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;funcs.c: 15: dt.DAY.Val = 0x40;
 10229  0020EC  5024               	movf	i2IncreaseByADay@dt+8,w,c
 10230  0020EE  0B01               	andlw	-255
 10231  0020F0  0980               	iorlw	128
 10232  0020F2  D00A               	goto	L7
 10233  0020F4                     i2l3243:
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;funcs.c: 16: else
 10237                           ;funcs.c: 17: dt.DAY.Val >>= 1;
 10238  0020F4  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 10239  0020F6  0B7F               	andlw	127
 10240  0020F8  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
 10241  0020FA  90D8               	bcf	status,0,c
 10242  0020FC  3227               	rrcf	??i2_IncreaseByADay,f,c
 10243  0020FE  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
 10244  002100  5024               	movf	i2IncreaseByADay@dt+8,w,c
 10245  002102  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 10246  002104  0B01               	andlw	-255
 10247  002106  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 10248  002108                     L7:
 10249  002108  6E24               	movwf	i2IncreaseByADay@dt+8,c
 10250                           
 10251                           ; BSR set to: 0
 10252                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
 10253  00210A  90D8               	bcf	status,0,c
 10254  00210C  3422               	rlcf	i2IncreaseByADay@dt+6,w,c
 10255  00210E  6ED9               	movwf	fsr2l,c
 10256  002110  3423               	rlcf	i2IncreaseByADay@dt+7,w,c
 10257  002112  ECE9  F00F         	call	PL62	;call to abstracted procedure
 10258  002116  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
 10262  002118  0E02               	movlw	2
 10263  00211A  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 10264  00211C  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 10265  00211E  E107               	bnz	i2l3253
 10266                           
 10267                           ; BSR set to: 0
 10268  002120  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
 10269  002124  0E03               	movlw	3
 10270  002126  1627               	andwf	??i2_IncreaseByADay,f,c
 10271  002128  E102               	bnz	i2l3253
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;funcs.c: 20: MonthDays = 29;
 10275  00212A  0E1D               	movlw	29
 10276  00212C  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10277  00212E                     i2l3253:
 10278                           
 10279                           ; BSR set to: 0
 10280                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
 10281  00212E  0E02               	movlw	2
 10282  002130  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 10283  002132  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 10284  002134  E10A               	bnz	i2l3259
 10285                           
 10286                           ; BSR set to: 0
 10287  002136  D842               	call	PL102	;call to abstracted procedure
 10288  002138  ECB1  F015         	call	PL124	;call to abstracted procedure
 10289  00213C  EC5E  F015         	call	i2___lwmod	;wreg free
 10290  002140  5001               	movf	?i2___lwmod,w,c
 10291  002142  1002               	iorwf	?i2___lwmod+1,w,c
 10292  002144  E102               	bnz	i2l3259
 10293                           
 10294                           ;funcs.c: 22: MonthDays = 28;
 10295  002146  0E1C               	movlw	28
 10296  002148  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10297  00214A                     i2l3259:
 10298                           
 10299                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
 10300  00214A  0E02               	movlw	2
 10301  00214C  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 10302  00214E  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 10303  002150  E10C               	bnz	i2l3265
 10304  002152  D834               	call	PL102	;call to abstracted procedure
 10305  002154  0E01               	movlw	1
 10306  002156  6E04               	movwf	i2___lwmod@divisor+1,c
 10307  002158  0E90               	movlw	144
 10308  00215A  6E03               	movwf	i2___lwmod@divisor,c
 10309  00215C  EC5E  F015         	call	i2___lwmod	;wreg free
 10310  002160  5001               	movf	?i2___lwmod,w,c
 10311  002162  1002               	iorwf	?i2___lwmod+1,w,c
 10312  002164  E102               	bnz	i2l3265
 10313                           
 10314                           ;funcs.c: 24: MonthDays = 29;
 10315  002166  0E1D               	movlw	29
 10316  002168  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 10317  00216A                     i2l3265:
 10318                           
 10319                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
 10320  00216A  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
 10321  00216E  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
 10322  002170  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
 10323  002172  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
 10324  002174  5020               	movf	i2IncreaseByADay@dt+4,w,c
 10325  002176  5C27               	subwf	??i2_IncreaseByADay,w,c
 10326  002178  5021               	movf	i2IncreaseByADay@dt+5,w,c
 10327  00217A  5828               	subwfb	??i2_IncreaseByADay+1,w,c
 10328  00217C  E215               	bc	i2l3271
 10329                           
 10330                           ;funcs.c: 26: dt.DATE.Day = 1;
 10331  00217E  6A21               	clrf	i2IncreaseByADay@dt+5,c
 10332  002180  0E01               	movlw	1
 10333  002182  6E20               	movwf	i2IncreaseByADay@dt+4,c
 10334                           
 10335                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
 10336  002184  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 10337  002188  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
 10338  00218C  0E0A               	movlw	10
 10339  00218E                     i2u274_41:
 10340  00218E  CFDB FFEB          	movff	plusw2,plusw0
 10341  002192  06E8               	decf	wreg,f,c
 10342  002194  E2FC               	bc	i2u274_41
 10343  002196  ECD4  F014         	call	i2_IncreaseByAMonth	;wreg free
 10344  00219A  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 10345  00219E  0E0A               	movlw	10
 10346  0021A0                     i2u275_41:
 10347  0021A0  CFEB FFDB          	movff	plusw0,plusw2
 10348  0021A4  06E8               	decf	wreg,f,c
 10349  0021A6  E2FC               	bc	i2u275_41
 10350  0021A8                     i2l3271:
 10351                           
 10352                           ;funcs.c: 28: }
 10353                           ;funcs.c: 29: return dt;
 10354  0021A8  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 10355  0021AC  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
 10356  0021B0  0E0A               	movlw	10
 10357  0021B2                     i2u276_41:
 10358  0021B2  CFDB FFEB          	movff	plusw2,plusw0
 10359  0021B6  06E8               	decf	wreg,f,c
 10360  0021B8  E2FC               	bc	i2u276_41
 10361  0021BA  0012               	return		;funcret
 10362  0021BC                     __end_ofi2_IncreaseByADay:
 10363                           	opt stack 0
 10364  0021BC                     PL102:
 10365                           	opt stack 15
 10366  0021BC  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
 10367  0021C0  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
 10368  0021C4  0012               	return	
 10369  0021C6                     __end_ofPL102:
 10370                           	opt stack 0
 10371                           tosu	equ	0xFFF
 10372                           tosh	equ	0xFFE
 10373                           tosl	equ	0xFFD
 10374                           pclatu	equ	0xFFB
 10375                           pclath	equ	0xFFA
 10376                           tblptru	equ	0xFF8
 10377                           tblptrh	equ	0xFF7
 10378                           tblptrl	equ	0xFF6
 10379                           tablat	equ	0xFF5
 10380                           prodh	equ	0xFF4
 10381                           prodl	equ	0xFF3
 10382                           intcon	equ	0xFF2
 10383                           postinc0	equ	0xFEE
 10384                           plusw0	equ	0xFEB
 10385                           fsr0h	equ	0xFEA
 10386                           fsr0l	equ	0xFE9
 10387                           wreg	equ	0xFE8
 10388                           indf1	equ	0xFE7
 10389                           postinc1	equ	0xFE6
 10390                           postdec1	equ	0xFE5
 10391                           plusw1	equ	0xFE3
 10392                           fsr1h	equ	0xFE2
 10393                           fsr1l	equ	0xFE1
 10394                           indf2	equ	0xFDF
 10395                           postinc2	equ	0xFDE
 10396                           postdec2	equ	0xFDD
 10397                           plusw2	equ	0xFDB
 10398                           fsr2h	equ	0xFDA
 10399                           fsr2l	equ	0xFD9
 10400                           status	equ	0xFD8
 10401                           
 10402 ;; *************** function i2_IncreaseByAMonth *****************
 10403 ;; Defined at:
 10404 ;;		line 32 in file "libs/funcs.c"
 10405 ;; Parameters:    Size  Location     Type
 10406 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
 10407 ;; Auto vars:     Size  Location     Type
 10408 ;;		None
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
 10411 ;; Registers used:
 10412 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10418 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10421 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10422 ;;Total ram usage:       11 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:    2
 10425 ;; This function calls:
 10426 ;;		i2_IncreaseByAYear
 10427 ;; This function is called by:
 10428 ;;		i2_IncreaseByADay
 10429 ;; This function uses a non-reentrant model
 10430 ;;
 10431                           
 10432                           	psect	text51
 10433  0029A8                     __ptext51:
 10434                           	opt stack 0
 10435  0029A8                     i2_IncreaseByAMonth:
 10436                           	opt stack 15
 10437                           
 10438                           ;funcs.c: 33: dt.DATE.Month++;
 10439                           
 10440                           ;incstack = 0
 10441  0029A8  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
 10442  0029AA  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
 10443                           
 10444                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
 10445  0029AC  0E0D               	movlw	13
 10446  0029AE  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
 10447  0029B0  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
 10448  0029B2  E115               	bnz	i2l3175
 10449                           
 10450                           ;funcs.c: 35: dt.DATE.Month = 1;
 10451  0029B4  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
 10452  0029B6  0E01               	movlw	1
 10453  0029B8  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
 10454                           
 10455                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
 10456  0029BA  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 10457  0029BE  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
 10458  0029C2  0E0A               	movlw	10
 10459  0029C4                     i2u247_41:
 10460  0029C4  CFDB FFEB          	movff	plusw2,plusw0
 10461  0029C8  06E8               	decf	wreg,f,c
 10462  0029CA  E2FC               	bc	i2u247_41
 10463  0029CC  EC99  F015         	call	i2_IncreaseByAYear	;wreg free
 10464  0029D0  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 10465  0029D4  0E0A               	movlw	10
 10466  0029D6                     i2u248_41:
 10467  0029D6  CFEB FFDB          	movff	plusw0,plusw2
 10468  0029DA  06E8               	decf	wreg,f,c
 10469  0029DC  E2FC               	bc	i2u248_41
 10470  0029DE                     i2l3175:
 10471                           
 10472                           ;funcs.c: 37: }
 10473                           ;funcs.c: 38: return dt;
 10474  0029DE  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 10475  0029E2  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
 10476  0029E6  0E0A               	movlw	10
 10477  0029E8                     i2u249_41:
 10478  0029E8  CFDB FFEB          	movff	plusw2,plusw0
 10479  0029EC  06E8               	decf	wreg,f,c
 10480  0029EE  E2FC               	bc	i2u249_41
 10481  0029F0  0012               	return		;funcret
 10482  0029F2                     __end_ofi2_IncreaseByAMonth:
 10483                           	opt stack 0
 10484                           tosu	equ	0xFFF
 10485                           tosh	equ	0xFFE
 10486                           tosl	equ	0xFFD
 10487                           pclatu	equ	0xFFB
 10488                           pclath	equ	0xFFA
 10489                           tblptru	equ	0xFF8
 10490                           tblptrh	equ	0xFF7
 10491                           tblptrl	equ	0xFF6
 10492                           tablat	equ	0xFF5
 10493                           prodh	equ	0xFF4
 10494                           prodl	equ	0xFF3
 10495                           intcon	equ	0xFF2
 10496                           postinc0	equ	0xFEE
 10497                           plusw0	equ	0xFEB
 10498                           fsr0h	equ	0xFEA
 10499                           fsr0l	equ	0xFE9
 10500                           wreg	equ	0xFE8
 10501                           indf1	equ	0xFE7
 10502                           postinc1	equ	0xFE6
 10503                           postdec1	equ	0xFE5
 10504                           plusw1	equ	0xFE3
 10505                           fsr1h	equ	0xFE2
 10506                           fsr1l	equ	0xFE1
 10507                           indf2	equ	0xFDF
 10508                           postinc2	equ	0xFDE
 10509                           postdec2	equ	0xFDD
 10510                           plusw2	equ	0xFDB
 10511                           fsr2h	equ	0xFDA
 10512                           fsr2l	equ	0xFD9
 10513                           status	equ	0xFD8
 10514                           
 10515 ;; *************** function i2_IncreaseByAYear *****************
 10516 ;; Defined at:
 10517 ;;		line 41 in file "libs/funcs.c"
 10518 ;; Parameters:    Size  Location     Type
 10519 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;		None
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
 10524 ;; Registers used:
 10525 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10531 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10534 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10535 ;;Total ram usage:       11 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:    1
 10538 ;; This function calls:
 10539 ;;		i2___lwmod
 10540 ;; This function is called by:
 10541 ;;		i2_IncreaseByAMonth
 10542 ;; This function uses a non-reentrant model
 10543 ;;
 10544                           
 10545                           	psect	text52
 10546  002B32                     __ptext52:
 10547                           	opt stack 0
 10548  002B32                     i2_IncreaseByAYear:
 10549                           	opt stack 15
 10550                           
 10551                           ;funcs.c: 42: dt.YEAR++;
 10552                           
 10553                           ;incstack = 0
 10554  002B32  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
 10555  002B34  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
 10556                           
 10557                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
 10558  002B36  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
 10559  002B3A  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
 10560  002B3E  D811               	call	PL124	;call to abstracted procedure
 10561  002B40  EC5E  F015         	call	i2___lwmod	;wreg free
 10562  002B44  5001               	movf	?i2___lwmod,w,c
 10563  002B46  1002               	iorwf	?i2___lwmod+1,w,c
 10564  002B48  E102               	bnz	i2l3145
 10565                           
 10566                           ;funcs.c: 44: CENTURY++;
 10567  002B4A  0100               	movlb	0	; () banked
 10568  002B4C  2BFD               	incf	_CENTURY& (0+255),f,b
 10569  002B4E                     i2l3145:
 10570                           
 10571                           ;funcs.c: 45: return dt;
 10572  002B4E  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
 10573  002B52  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
 10574  002B56  0E0A               	movlw	10
 10575  002B58                     i2u241_41:
 10576  002B58  CFDB FFEB          	movff	plusw2,plusw0
 10577  002B5C  06E8               	decf	wreg,f,c
 10578  002B5E  E2FC               	bc	i2u241_41
 10579  002B60  0012               	return		;funcret
 10580  002B62                     __end_ofi2_IncreaseByAYear:
 10581                           	opt stack 0
 10582  002B62                     PL124:
 10583                           	opt stack 15
 10584  002B62  6A04               	clrf	i2___lwmod@divisor+1,c
 10585  002B64  0E64               	movlw	100
 10586  002B66  6E03               	movwf	i2___lwmod@divisor,c
 10587  002B68  0C64               	retlw	100
 10588  002B6A                     __end_ofPL124:
 10589                           	opt stack 0
 10590                           tosu	equ	0xFFF
 10591                           tosh	equ	0xFFE
 10592                           tosl	equ	0xFFD
 10593                           pclatu	equ	0xFFB
 10594                           pclath	equ	0xFFA
 10595                           tblptru	equ	0xFF8
 10596                           tblptrh	equ	0xFF7
 10597                           tblptrl	equ	0xFF6
 10598                           tablat	equ	0xFF5
 10599                           prodh	equ	0xFF4
 10600                           prodl	equ	0xFF3
 10601                           intcon	equ	0xFF2
 10602                           postinc0	equ	0xFEE
 10603                           plusw0	equ	0xFEB
 10604                           fsr0h	equ	0xFEA
 10605                           fsr0l	equ	0xFE9
 10606                           wreg	equ	0xFE8
 10607                           indf1	equ	0xFE7
 10608                           postinc1	equ	0xFE6
 10609                           postdec1	equ	0xFE5
 10610                           plusw1	equ	0xFE3
 10611                           fsr1h	equ	0xFE2
 10612                           fsr1l	equ	0xFE1
 10613                           indf2	equ	0xFDF
 10614                           postinc2	equ	0xFDE
 10615                           postdec2	equ	0xFDD
 10616                           plusw2	equ	0xFDB
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function i2___lwmod *****************
 10622 ;; Defined at:
 10623 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;  dividend        2    0[COMRAM] unsigned int 
 10626 ;;  divisor         2    2[COMRAM] unsigned int 
 10627 ;; Auto vars:     Size  Location     Type
 10628 ;;  __lwmod         1    4[COMRAM] unsigned char 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  2    0[COMRAM] unsigned int 
 10631 ;; Registers used:
 10632 ;;		wreg, status,2, status,0
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10638 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10641 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10642 ;;Total ram usage:        5 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; This function calls:
 10645 ;;		Nothing
 10646 ;; This function is called by:
 10647 ;;		i2_IncreaseByADay
 10648 ;;		i2_IncreaseByAYear
 10649 ;; This function uses a non-reentrant model
 10650 ;;
 10651                           
 10652                           	psect	text53
 10653  002ABC                     __ptext53:
 10654                           	opt stack 0
 10655  002ABC                     i2___lwmod:
 10656                           	opt stack 17
 10657                           
 10658                           ;incstack = 0
 10659  002ABC  5003               	movf	i2___lwmod@divisor,w,c
 10660  002ABE  1004               	iorwf	i2___lwmod@divisor+1,w,c
 10661  002AC0  E017               	bz	i2l1574
 10662  002AC2  0E01               	movlw	1
 10663  002AC4  6E05               	movwf	i2___lwmod@counter,c
 10664  002AC6  D004               	goto	i2l3113
 10665  002AC8                     i2l3111:
 10666  002AC8  90D8               	bcf	status,0,c
 10667  002ACA  3603               	rlcf	i2___lwmod@divisor,f,c
 10668  002ACC  3604               	rlcf	i2___lwmod@divisor+1,f,c
 10669  002ACE  2A05               	incf	i2___lwmod@counter,f,c
 10670  002AD0                     i2l3113:
 10671  002AD0  AE04               	btfss	i2___lwmod@divisor+1,7,c
 10672  002AD2  D7FA               	goto	i2l3111
 10673  002AD4                     i2l3115:
 10674  002AD4  5003               	movf	i2___lwmod@divisor,w,c
 10675  002AD6  5C01               	subwf	i2___lwmod@dividend,w,c
 10676  002AD8  5004               	movf	i2___lwmod@divisor+1,w,c
 10677  002ADA  5802               	subwfb	i2___lwmod@dividend+1,w,c
 10678  002ADC  E304               	bnc	i2l3119
 10679  002ADE  5003               	movf	i2___lwmod@divisor,w,c
 10680  002AE0  5E01               	subwf	i2___lwmod@dividend,f,c
 10681  002AE2  5004               	movf	i2___lwmod@divisor+1,w,c
 10682  002AE4  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 10683  002AE6                     i2l3119:
 10684  002AE6  90D8               	bcf	status,0,c
 10685  002AE8  3204               	rrcf	i2___lwmod@divisor+1,f,c
 10686  002AEA  3203               	rrcf	i2___lwmod@divisor,f,c
 10687  002AEC  2E05               	decfsz	i2___lwmod@counter,f,c
 10688  002AEE  D7F2               	goto	i2l3115
 10689  002AF0                     i2l1574:
 10690  002AF0  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 10691  002AF4  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10692  002AF8  0012               	return		;funcret
 10693  002AFA                     __end_ofi2___lwmod:
 10694                           	opt stack 0
 10695                           tosu	equ	0xFFF
 10696                           tosh	equ	0xFFE
 10697                           tosl	equ	0xFFD
 10698                           pclatu	equ	0xFFB
 10699                           pclath	equ	0xFFA
 10700                           tblptru	equ	0xFF8
 10701                           tblptrh	equ	0xFF7
 10702                           tblptrl	equ	0xFF6
 10703                           tablat	equ	0xFF5
 10704                           prodh	equ	0xFF4
 10705                           prodl	equ	0xFF3
 10706                           intcon	equ	0xFF2
 10707                           postinc0	equ	0xFEE
 10708                           plusw0	equ	0xFEB
 10709                           fsr0h	equ	0xFEA
 10710                           fsr0l	equ	0xFE9
 10711                           wreg	equ	0xFE8
 10712                           indf1	equ	0xFE7
 10713                           postinc1	equ	0xFE6
 10714                           postdec1	equ	0xFE5
 10715                           plusw1	equ	0xFE3
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           plusw2	equ	0xFDB
 10722                           fsr2h	equ	0xFDA
 10723                           fsr2l	equ	0xFD9
 10724                           status	equ	0xFD8
 10725                           
 10726 ;; *************** function _GetThisCycle *****************
 10727 ;; Defined at:
 10728 ;;		line 230 in file "libs/funcs.c"
 10729 ;; Parameters:    Size  Location     Type
 10730 ;;		None
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;		None
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  1    wreg      unsigned char 
 10735 ;; Registers used:
 10736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10746 ;;Total ram usage:        0 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_Timer0_10ms
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text54
 10756  002CC2                     __ptext54:
 10757                           	opt stack 0
 10758  002CC2                     _GetThisCycle:
 10759                           	opt stack 19
 10760                           
 10761                           ;funcs.c: 231: if (PRESENT_EVENT <0)
 10762                           
 10763                           ;incstack = 0
 10764  002CC2  BE5E               	btfsc	_PRESENT_EVENT,7,c
 10765                           
 10766                           ;funcs.c: 232: return 0;
 10767  002CC4  0C00               	retlw	0
 10768                           
 10769                           ;funcs.c: 233: else
 10770                           ;funcs.c: 234: return EVENTS[PRESENT_EVENT].CYCLE;
 10771  002CC6  D000               	goto	PL64	;call to abstracted procedure
 10772  002CC8                     __end_of_GetThisCycle:
 10773                           	opt stack 0
 10774  002CC8                     PL64:
 10775                           	opt stack 15
 10776  002CC8  505E               	movf	_PRESENT_EVENT,w,c
 10777  002CCA  0D0A               	mullw	10
 10778  002CCC  0E08               	movlw	low (_EVENTS+8)
 10779  002CCE  24F3               	addwf	prodl,w,c
 10780  002CD0  6ED9               	movwf	fsr2l,c
 10781  002CD2  0E02               	movlw	high (_EVENTS+8)
 10782  002CD4  20F4               	addwfc	prodh,w,c
 10783  002CD6  6EDA               	movwf	fsr2h,c
 10784  002CD8  50DF               	movf	indf2,w,c
 10785  002CDA  0012               	return	
 10786  002CDC                     __end_ofPL64:
 10787                           	opt stack 0
 10788                           tosu	equ	0xFFF
 10789                           tosh	equ	0xFFE
 10790                           tosl	equ	0xFFD
 10791                           pclatu	equ	0xFFB
 10792                           pclath	equ	0xFFA
 10793                           tblptru	equ	0xFF8
 10794                           tblptrh	equ	0xFF7
 10795                           tblptrl	equ	0xFF6
 10796                           tablat	equ	0xFF5
 10797                           prodh	equ	0xFF4
 10798                           prodl	equ	0xFF3
 10799                           intcon	equ	0xFF2
 10800                           postinc0	equ	0xFEE
 10801                           plusw0	equ	0xFEB
 10802                           fsr0h	equ	0xFEA
 10803                           fsr0l	equ	0xFE9
 10804                           wreg	equ	0xFE8
 10805                           indf1	equ	0xFE7
 10806                           postinc1	equ	0xFE6
 10807                           postdec1	equ	0xFE5
 10808                           plusw1	equ	0xFE3
 10809                           fsr1h	equ	0xFE2
 10810                           fsr1l	equ	0xFE1
 10811                           indf2	equ	0xFDF
 10812                           postinc2	equ	0xFDE
 10813                           postdec2	equ	0xFDD
 10814                           plusw2	equ	0xFDB
 10815                           fsr2h	equ	0xFDA
 10816                           fsr2l	equ	0xFD9
 10817                           status	equ	0xFD8
 10818                           tosu	equ	0xFFF
 10819                           tosh	equ	0xFFE
 10820                           tosl	equ	0xFFD
 10821                           pclatu	equ	0xFFB
 10822                           pclath	equ	0xFFA
 10823                           tblptru	equ	0xFF8
 10824                           tblptrh	equ	0xFF7
 10825                           tblptrl	equ	0xFF6
 10826                           tablat	equ	0xFF5
 10827                           prodh	equ	0xFF4
 10828                           prodl	equ	0xFF3
 10829                           intcon	equ	0xFF2
 10830                           postinc0	equ	0xFEE
 10831                           plusw0	equ	0xFEB
 10832                           fsr0h	equ	0xFEA
 10833                           fsr0l	equ	0xFE9
 10834                           wreg	equ	0xFE8
 10835                           indf1	equ	0xFE7
 10836                           postinc1	equ	0xFE6
 10837                           postdec1	equ	0xFE5
 10838                           plusw1	equ	0xFE3
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           plusw2	equ	0xFDB
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849                           	psect	text55
 10850  000000                     __ptext55:
 10851                           	opt stack 0
 10852                           tosu	equ	0xFFF
 10853                           tosh	equ	0xFFE
 10854                           tosl	equ	0xFFD
 10855                           pclatu	equ	0xFFB
 10856                           pclath	equ	0xFFA
 10857                           tblptru	equ	0xFF8
 10858                           tblptrh	equ	0xFF7
 10859                           tblptrl	equ	0xFF6
 10860                           tablat	equ	0xFF5
 10861                           prodh	equ	0xFF4
 10862                           prodl	equ	0xFF3
 10863                           intcon	equ	0xFF2
 10864                           postinc0	equ	0xFEE
 10865                           plusw0	equ	0xFEB
 10866                           fsr0h	equ	0xFEA
 10867                           fsr0l	equ	0xFE9
 10868                           wreg	equ	0xFE8
 10869                           indf1	equ	0xFE7
 10870                           postinc1	equ	0xFE6
 10871                           postdec1	equ	0xFE5
 10872                           plusw1	equ	0xFE3
 10873                           fsr1h	equ	0xFE2
 10874                           fsr1l	equ	0xFE1
 10875                           indf2	equ	0xFDF
 10876                           postinc2	equ	0xFDE
 10877                           postdec2	equ	0xFDD
 10878                           plusw2	equ	0xFDB
 10879                           fsr2h	equ	0xFDA
 10880                           fsr2l	equ	0xFD9
 10881                           status	equ	0xFD8
 10882                           
 10883                           	psect	rparam
 10884  0000                     tosu	equ	0xFFF
 10885                           tosh	equ	0xFFE
 10886                           tosl	equ	0xFFD
 10887                           pclatu	equ	0xFFB
 10888                           pclath	equ	0xFFA
 10889                           tblptru	equ	0xFF8
 10890                           tblptrh	equ	0xFF7
 10891                           tblptrl	equ	0xFF6
 10892                           tablat	equ	0xFF5
 10893                           prodh	equ	0xFF4
 10894                           prodl	equ	0xFF3
 10895                           intcon	equ	0xFF2
 10896                           postinc0	equ	0xFEE
 10897                           plusw0	equ	0xFEB
 10898                           fsr0h	equ	0xFEA
 10899                           fsr0l	equ	0xFE9
 10900                           wreg	equ	0xFE8
 10901                           indf1	equ	0xFE7
 10902                           postinc1	equ	0xFE6
 10903                           postdec1	equ	0xFE5
 10904                           plusw1	equ	0xFE3
 10905                           fsr1h	equ	0xFE2
 10906                           fsr1l	equ	0xFE1
 10907                           indf2	equ	0xFDF
 10908                           postinc2	equ	0xFDE
 10909                           postdec2	equ	0xFDD
 10910                           plusw2	equ	0xFDB
 10911                           fsr2h	equ	0xFDA
 10912                           fsr2l	equ	0xFD9
 10913                           status	equ	0xFD8
 10914                           
 10915                           	psect	temp
 10916  00005F                     btemp:
 10917                           	opt stack 0
 10918  00005F                     	ds	1
 10919  0000                     int$flags	set	btemp
 10920                           tosu	equ	0xFFF
 10921                           tosh	equ	0xFFE
 10922                           tosl	equ	0xFFD
 10923                           pclatu	equ	0xFFB
 10924                           pclath	equ	0xFFA
 10925                           tblptru	equ	0xFF8
 10926                           tblptrh	equ	0xFF7
 10927                           tblptrl	equ	0xFF6
 10928                           tablat	equ	0xFF5
 10929                           prodh	equ	0xFF4
 10930                           prodl	equ	0xFF3
 10931                           intcon	equ	0xFF2
 10932                           postinc0	equ	0xFEE
 10933                           plusw0	equ	0xFEB
 10934                           fsr0h	equ	0xFEA
 10935                           fsr0l	equ	0xFE9
 10936                           wreg	equ	0xFE8
 10937                           indf1	equ	0xFE7
 10938                           postinc1	equ	0xFE6
 10939                           postdec1	equ	0xFE5
 10940                           plusw1	equ	0xFE3
 10941                           fsr1h	equ	0xFE2
 10942                           fsr1l	equ	0xFE1
 10943                           indf2	equ	0xFDF
 10944                           postinc2	equ	0xFDE
 10945                           postdec2	equ	0xFDD
 10946                           plusw2	equ	0xFDB
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           tosu	equ	0xFFF
 10951                           tosh	equ	0xFFE
 10952                           tosl	equ	0xFFD
 10953                           pclatu	equ	0xFFB
 10954                           pclath	equ	0xFFA
 10955                           tblptru	equ	0xFF8
 10956                           tblptrh	equ	0xFF7
 10957                           tblptrl	equ	0xFF6
 10958                           tablat	equ	0xFF5
 10959                           prodh	equ	0xFF4
 10960                           prodl	equ	0xFF3
 10961                           intcon	equ	0xFF2
 10962                           postinc0	equ	0xFEE
 10963                           plusw0	equ	0xFEB
 10964                           fsr0h	equ	0xFEA
 10965                           fsr0l	equ	0xFE9
 10966                           wreg	equ	0xFE8
 10967                           indf1	equ	0xFE7
 10968                           postinc1	equ	0xFE6
 10969                           postdec1	equ	0xFE5
 10970                           plusw1	equ	0xFE3
 10971                           fsr1h	equ	0xFE2
 10972                           fsr1l	equ	0xFE1
 10973                           indf2	equ	0xFDF
 10974                           postinc2	equ	0xFDE
 10975                           postdec2	equ	0xFDD
 10976                           plusw2	equ	0xFDB
 10977                           fsr2h	equ	0xFDA
 10978                           fsr2l	equ	0xFD9
 10979                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        69
    BSS         1345
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     76      94
    BANK0           160     78     158
    BANK1           256      0     116
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    LIGHTS	PTR unsigned char [2] size(2) Largest target is 1
		 -> LATB(SFR_2[1]), LATA(SFR_2[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_Timer0_10ms
    _Timer0_10ms->_IncreaseByASecond
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS->_ReadGPS_DATE_TIME
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___lmul
    _LoadCyclesFromEeprom->___wmul
    _GetEventNumber->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   65716
                     _GetEventNumber
                  _LoadAllFromEeprom
                            _ReadGPS
                  _SYSTEM_Initialize
                            _StopGPS
                        _SwitchOnGPS
           _TMR0_SetInterruptHandler
              _TestGPSStartCondition
                 _VerifyForGPSOnTIme
 ---------------------------------------------------------------------------------
 (1) _VerifyForGPSOnTIme                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _TestGPSStartCondition                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnGPS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StopGPS                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     200
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS                                              0     0      0   24195
                  _ReadGPS_DATE_TIME
 ---------------------------------------------------------------------------------
 (2) _ReadGPS_DATE_TIME                                   20    20      0   24195
                                             58 BANK0     20    20      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (3) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _TimeTextToSecond                                    24    20      4    1708
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _ReadGPSDateTime                                     19    17      2     566
                                              0 BANK0     19    17      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetDay                                              11    10      1    1865
                                             14 BANK0     11    10      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     474
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdjustDayLightSaving                                17     6     11   12079
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   36077
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    9468
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    8634
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                14    14      0    9746
                                             12 BANK0     14    14      0
                         _ReadEeprom
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8    1464
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    8229
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetEventNumber                                      11    11      0    4975
                                              6 BANK0     11    11      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4709
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          10    10      0    9569
                                             66 COMRAM    10    10      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    9569
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0    9569
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (11) _Timer0_10ms                                        14    14      0    9569
                                             52 COMRAM    14    14      0
                       _GetThisCycle
                  _IncreaseByASecond
                            ___almod
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (12) ___lbtoft                                            4     1      3    2839
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___fttol                                            15    11      4     430
                                             27 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (12) ___ftmul                                            15     9      6    3653
                                             12 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftpack                                            8     3      5    2817
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (12) ___almod                                            10     2      8     474
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (12) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (15) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _GetThisCycle                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetEventNumber
     ___wmul
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___lmul
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS
     _ReadGPS_DATE_TIME
       _AdjustDayLightSaving
         _DecreaseByADay
           _DecreaseByAMonth
             _DecreaseByAYear
               ___lwmod
           ___lwmod
         _IncreaseByADay
           _IncreaseByAMonth
             _IncreaseByAYear
               ___lwmod
           ___lwmod
         ___wmul
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _EUSART1_Initialize
       _GetDay
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       _ReadGPSDateTime
         _EUSART1_Read
       _TimeTextToSecond
         ___lmul
       _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _StopGPS
   _SwitchOnGPS
   _TMR0_SetInterruptHandler
   _TestGPSStartCondition
   _VerifyForGPSOnTIme

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _GetThisCycle
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod
         ___almod
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     3C0      35       25.9%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      74       8       45.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4E      9E       5       98.8%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4C      5E       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     260       6        0.0%
DATA                 0      0     620       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Fri Aug 25 13:22:22 2017

            __end_of_LoadStatesFromEeprom 17AC                   __end_of_ReadGPSDateTime 237A  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1A84                                        PL4 1A9E  
                                      PL6 1AA6                                        PL8 147C  
                            ___awdiv@sign 0065                       ___wmul@multiplicand 0062  
                                     PL10 2096                                       PL20 18B4  
                                     PL12 1B8C                                       PL30 1924  
                                     PL22 18E0                                       PL14 1DF0  
                                     PL40 1BBC                                       PL32 192C  
                                     PL24 11E2                                       PL16 17AC  
                                     PL50 20BE                                       PL42 20AA  
                                     PL34 1B9C                                       PL26 11F8  
                                     PL18 11CE                                       PL60 1BC4  
                                     PL52 194A                                       PL44 193C  
                                     PL36 121C                                       PL28 1908  
                                     PL70 1642                                       PL62 1FD2  
                                     PL54 1960                                       PL46 20B4  
                                     PL38 122E                               __CFG_LVP$ON 000000  
                                     PL80 1250                                       PL72 1EFC  
                                     PL64 2CC8                                       PL56 20CA  
                                     PL48 1EE6                                       PL90 242C  
                                     PL82 20D6                                       PL74 1DFA  
                                     PL66 17CA                                       PL58 17BC  
                                     PL92 127C                                       PL84 1260  
                                     PL76 17DC                                       PL68 2622  
                                     PL94 128A                                       PL86 1BCE  
                                     PL78 1240                                       PL96 1CEE  
                                     PL88 126E                                       PL98 243A  
                                     l131 2378                                       l125 235C  
                                     l631 1FAC                                       l641 2BB8  
                                     l736 2D42                                       l840 2CEC  
                                     l649 1C58                                       l676 2A1E  
                                     l694 2B2E                                       _GIE 007F97  
                            __CFG_CPD$OFF 000000                        DecreaseByAMonth@dt 0070  
                            ___awmod@sign 006D                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
           projMain@NO_OF_DAYS_IN_A_MONTH 0144                                      PL100 1FE0  
                                    PL110 1294                                      PL102 21BC  
                                    PL120 129E                                      PL112 229E  
                                    PL104 26A6                                      PL122 1CF8  
                                    PL114 1E06                                      PL106 1FEA  
                                    PL124 2B62                                      PL116 2B98  
                                    PL108 26B0                                      PL126 17F2  
                                    PL118 17E8                              __CFG_ZCD$OFF 000000  
                                    l1014 2A58                                      l1015 2A5A  
                                    l1173 291A                                      l3131 2A96  
                                    l3135 2AA8                                      l3127 2A8A  
                                    l3129 2A92                                      l3321 224C  
                                    l4051 1804                                      l3155 2B84  
                                    l3315 2230                                      l4125 1762  
                                    l4109 16CA                                      l3309 2214  
                                    l4213 15D0                                      l1574 2AB2  
                                    l4143 1974                                      l3511 2728  
                                    l3503 2712                                      l3335 1F14  
                                    l3327 228A                                      l4311 275C  
                                    l4161 1A0A                                      l4129 178A  
                                    l3361 1FBE                                      l3353 1F92  
                                    l4313 2760                                      l4155 19BC  
                                    l3507 271C                                      l3347 1F76  
                                    l3187 2994                                      l3531 27C6  
                                    l3523 27AE                                      l4219 161A  
                                    l4227 1640                                      l4323 2796  
                                    l4165 1A22                                      l3197 28F8  
                                    l3533 27CE                                      l3605 22CC  
                                    l3701 207A                                      l4325 2798  
                                    l4159 19CE                                      l4087 1664  
                                    l3199 28FE                                      l3359 1FB8  
                                    l3535 27D2                                      l3543 27EE  
                                    l3527 27BA                                      l3279 2D50  
                                    l3711 2094                                      l4319 276A  
                                    l4353 1B68                                      l4361 1B7C  
                                    l4169 1A50                                      l4097 1686  
                                    l3633 232C                                      l3625 2316  
                                    l3641 2368                                      l3617 22FC  
                                    l4193 14D4                                      l4339 1AB4  
                                    l3387 292E                                      l3491 26EC  
                                    l3299 21DA                                      l3547 27FA  
                                    l3539 27E4                                      l3635 2350  
                                    l3619 2300                                      l4187 14B2  
                                    l4349 1B64                                      l3493 26F4  
                                    l3485 26DC                                      l3733 1C38  
                                    l3661 2010                                      l4197 14DC  
                                    l3495 26F8                                      l3479 26CC  
                                    l3735 1C42                                      l3639 2360  
                                    l3671 202A                                      l3753 1CDA  
                                    l3737 1C52                                      l3681 2044  
                                    l3747 1C90                                      l3691 2060  
                                    _LATA 000F83                                      _LATB 000F84  
                                    _LATC 000F85                                      u3041 1FC8  
                                    u2431 2B8E                                      u2511 297A  
                                    u4200 19B8                                      u4120 18B2  
                                    u3400 22BA                                      u2521 298C  
                                    u4130 16C6                                      u2451 2BC8  
                                    u2531 299E                                      u4140 170C  
                                    u4230 1A82                                      u3510 1D66  
                                    u2551 28DC                                      u3511 1D62  
                                    u4311 15B6                                      u3520 1D68  
                                    u2561 28EE                                      u4321 15C8  
                                    u4241 1492                                      u4154 1740  
                                    u4330 15E6                                      u4155 173E  
                                    u2571 2908                                      u4251 14A4  
                                    u4341 1600                                      u4510 1ADC  
                                    u4190 17AA                                      u4174 1768  
                                    u4175 1766                                      u2911 2270  
                                    u3711 1C76                                      u4351 1612  
                                    u4440 2A34                                      u2921 2282  
                                    u3721 1C88                                      u4361 1624  
                                    u3730 1CA6                                      u2931 2294  
                                    u4371 1636                                      u4380 2866  
                                    u3741 1CC0                                      u4461 2744  
                                    u4294 151C                                      u3751 1CD2  
                                    u4295 1516                                      u2961 1F3A  
                                    u3761 1CE4                                      u4490 2B12  
                                    u2971 1F4C                                      u4580 1B8A  
                                    u4677 2362                                      _PLLR 0076D8  
                                    _WPUA 000F10                                      _WPUB 000F18  
                                    _WPUC 000F20                                      _WPUE 000F2D  
                          _IncreaseByADay 21C6                          _DecreaseByAMonth 28C6  
                           __CFG_FCMEN$ON 000000                                      _main 2A3A  
                            ___ftpack@arg 0001                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 0004                           _TMR0_StartTimer 2D74  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 005F                                      prodh 000FF4  
                                    prodl 000FF3                                      start 0070  
              LoadEventsFromEeprom@Temp16 0078                             __CFG_CSWEN$ON 000000  
                _GPS_SYNC_EVERY_x_SECONDS 00D0                              ___ftmul@cntr 001A  
                            ___param_bank 000000                              ___ftmul@sign 001B  
                         __end_of_ReadGPS 279C                             __CFG_SCANE$ON 000000  
                            ___fttol@exp1 002A                              ___fttol@lval 0026  
                  AdjustDayLightSaving@dt 0089                   __end_of_TMR0_Initialize 2C6E  
          ??_TMR0_DefaultInterruptHandler 0001            __size_of_OSCILLATOR_Initialize 0016  
                 ?_LoadSettingsFromEeprom 0001             __end_of_OSCILLATOR_Initialize 2CF2  
              LoadStatesFromEeprom@j_1399 0076                           __end_of_StopGPS 2D74  
                         __end_of___almod 2622                                     ?_main 0001  
                    __end_of_GetThisCycle 2CC8                           __end_of___awdiv 2732  
                           __CFG_WDTE$OFF 000000                           __end_of___awmod 2804  
                         __end_of___ftmul 242C                           ___awdiv@divisor 0062  
                         __end_of___fttol 24FA                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 2ABC                                     i2l764 003E  
                         ___awdiv@counter 0064                                     _OSCEN 000EDC  
                                   _TMR0H 000FD4                                     _TMR0L 000FD3  
                                   _TRISA 000F88                                     _TRISB 000F89  
                                   _TRISC 000F8A         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 0064  
               ?_TMR0_SetInterruptHandler 0060                             __CFG_WRT3$OFF 000000  
                         _IncreaseByAYear 2B6A                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         IncreaseByAYear@dt 0065  
                        __end_of_TMR0_ISR 2C8E                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                    __end_of_IncreaseByADay 229E  
               __size_of_ValidateDateTime 00A2                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 0005                                     pclath 000FFA  
                                   tablat 000FF5                            ??_EUSART1_Read 0060  
                                   plusw0 000FEB                                     plusw1 000FE3  
                                   plusw2 000FDB                  __end_ofi2_IncreaseByADay 21BC  
                                   status 000FD8                              __end_ofPL100 1FEA  
                            __end_ofPL110 129E                              __end_ofPL102 21C6  
                            __end_ofPL120 12A8                              __end_ofPL112 22A8  
                            __end_ofPL104 26B0                              __end_ofPL122 1D00  
                            __end_ofPL114 1E10                              __end_ofPL106 1FF4  
                            __end_ofPL124 2B6A                              __end_ofPL116 2BA0  
                            __end_ofPL108 26BA                              __end_ofPL126 17FA  
                            __end_ofPL118 17F2             __size_of_LoadCyclesFromEeprom 011A  
                      _CENTI_SECOND_COUNT 0054                        __size_ofi2___lwmod 003E  
                __size_of_DecreaseByAYear 0032                                _ReadEeprom 2D2E  
                         __initialization 24FA                __end_of_EUSART1_Initialize 2D2E  
                            __end_of_main 2A7E                          ??_DecreaseByADay 0086  
                        ?_ReadGPSDateTime 0060            __end_of_LoadSettingsFromEeprom 147C  
                __end_of_TimeTextToSecond 1EE6               ?_INTERRUPT_InterruptManager 0001  
           LoadStatesFromEeprom@AddStates 0078                   AdjustDayLightSaving@End 0096  
                 ReadGPS_DATE_TIME@F11474 00F1                   ReadGPS_DATE_TIME@F11476 00EA  
                                  ??_main 00AE                             ___fttol@sign1 0025  
                           __activetblptr 000003                            _GetEventNumber 1AB0  
                   _AUDIO_NORMAL_OFF_TIME 0059                         Timer0_10ms@i_2891 003D  
                       Timer0_10ms@i_2892 0041                         Timer0_10ms@i_2893 0042  
                       Timer0_10ms@i_2894 003E             LoadStatesFromEeprom@AudAddInc 0073  
                 __end_of_TMR0_StartTimer 2D78                           ?_IncreaseByADay 007B  
                        ___awdiv@dividend 0060                      _LoadStatesFromEeprom 164E  
                                  _ANSELA 000F11                                    _ANSELB 000F19  
                                  _ANSELC 000F21                          __end_of___ftpack 26A6  
                        __end_of___lbtoft 2C4C                                    _T0CON0 000FD5  
                                  _T0CON1 000FD6                                    _RC1REG 000F99  
                                  _CYCLES 0100                                    _RC1STA 000F9D  
                                  _ODCONA 000F0F                                    _ODCONB 000F17  
                                  _ODCONC 000F1F                                    _RC6PPS 000EFD  
                                  _EVENTS 0200                                    i2l1120 0F90  
                                  _LIGHTS 00F8                                    i2l1124 0FA6  
                                  i2l1135 1004                                    i2l1146 1110  
                                  i2l3111 2AC8                                    i2l1159 11B8  
                                  i2l3113 2AD0                            __CFG_WDTCCS$SC 000000  
                                  i2l3115 2AD4                                    i2l3211 265A  
                                  i2l1374 2640                                    i2l3119 2AE6  
                                  i2l3215 2666                                    i2l3207 2648  
                                  i2l3145 2B4E                                    i2l3233 2698  
                                  i2l3217 2672                                    i2l3209 264C  
                                  i2l1386 2686                                    i2l3243 20F4  
                                  i2l3411 25DA                                    i2l3403 25BA  
                                  i2l3219 267C                                    i2l3253 212E  
                                  i2l1574 2AF0                                    i2l3175 29DE  
                                  i2l3271 21A8                                    i2l3423 2610  
                                  i2l3415 25FC                                    i2l3407 25CA  
                                  i2l3431 2394                                    i2l3265 216A  
                                  i2l3409 25D6                                    i2l3259 214A  
                                  i2l3419 260A                                    i2l3435 23AE  
                                  i2l3453 23D6                                    i2l3463 23F2  
                                  i2l3289 28B2                                    i2l3449 23D2  
                                  i2l3553 245A                                    i2l3459 23EE  
                                  i2l3571 24AC                                    i2l3555 2464  
                                  i2l3581 24D0                                    i2l3399 25A6  
                                  i2l3583 24D4                                    i2l3575 24BC  
                                  i2l3903 1102                                    i2l3921 1182  
                                  i2l3905 1112                                    i2l3841 0FEC  
                                  i2l3809 0F7A                                    i2l3587 24E8  
                                  i2l3579 24C4                                    i2l3851 1006  
                                  i2l3819 0F92                                    i2l3845 0FF2  
                                  i2l3829 0FA8                                    i2l3935 11B2  
                                  i2l3919 117A                                    i2l3863 102C  
                                  i2l3783 0F1E                                    i2l3881 1080  
                                  i2l3857 101A                                    i2l3793 0F32  
                                  i2l3777 0F1C                                    i2l3939 11C6  
                                  i2l3883 1082                                    i2l3869 103E  
                                  i2l3897 10D4                                    u314_41 238A  
                                  u316_41 23A4                                    u332_41 2452  
                                  _OSCFRQ 000EDE                                    _NVMDAT 000F80  
                                  _TX1STA 000F9E                                    _STATES 02F0  
                           _GPS_DATE_TIME 00AE                             ??_Timer0_10ms 0035  
                               ??_ReadGPS 00AE                                    _GetDay 1D00  
                        _IncreaseByAMonth 295E                            __CFG_PWRTE$OFF 000000  
                      IncreaseByAMonth@dt 0070                            __CFG_XINST$OFF 000000  
            _SPECIAL_AUDIO_LAST_X_SECONDS 00E8                 AdjustDayLightSaving@Start 0094  
                               ??_StopGPS 0060                                    ___lmul 2912  
              __end_of_VerifyForGPSOnTIme 2A3A                                 ??___almod 0009  
                                  ___wmul 2C02                                 ??___awdiv 0064  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___ftmul 0013                                 ??___fttol 0020  
                               ??___lwmod 0064                          ?_TMR0_Initialize 0001  
                                  clear_0 2554                                    clear_1 2566  
                                  clear_2 2572                                    clear_3 257E  
                                  clear_4 258A                   __end_of_IncreaseByAYear 2B98  
                        ___awdiv@quotient 0066                           ___awmod@divisor 006A  
                         ___awmod@counter 006C                    __end_of_GetEventNumber 1B8C  
                   ___ftmul@f3_as_product 0017                              __pdataCOMRAM 005E  
                            __mediumconst 0000                         __end_ofi2___lwmod 2AFA  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                     __end_of_TMR0_CallBack 2CC2  
                   ?_LoadStatesFromEeprom 0001  TMR0_SetInterruptHandler@InterruptHandler 0060  
           __size_of_INTERRUPT_Initialize 0004                     LoadEventsFromEeprom@i 0074  
                        DecreaseByADay@dt 007B                         _SYSTEM_Initialize 2D06  
                              __accesstop 0060                   __end_of__initialization 2590  
              __end_ofi2_IncreaseByAMonth 29F2                           __CFG_FEXTOSC$HS 000000  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
            LoadSettingsFromEeprom@Temp16 006A              LoadSettingsFromEeprom@Temp32 0066  
                              ___lbtoft@c 000C                                ___ftmul@f1 000D  
                              ___ftmul@f2 0010                               ?_ReadEeprom 0060  
               i2IncreaseByADay@MonthDays 0029                                ___fttol@f1 001C  
                      i2___lwmod@dividend 0001                            __pcstackCOMRAM 0001  
                            __pidataBANK0 2CF2                              __pidataBANK1 2BD2  
                     __end_of_Timer0_10ms 11CE                       ??_SYSTEM_Initialize 0062  
                   __size_of_GetThisCycle 0006                     _TIME_AT_LAST_GPS_SYNC 00C4  
                               ?_TMR0_ISR 0001                         ??_DecreaseByAYear 0070  
                              __end_ofPL2 1A9E                                __end_ofPL4 1AA6  
                              __end_ofPL6 1AB0                                __end_ofPL8 1486  
                __end_of_DecreaseByAMonth 2912                           ?_GetEventNumber 0001  
                    __end_of_EUSART1_Read 2D54                     _TestGPSStartCondition 2AFA  
                   TMR0_ISR@CountCallBack 00DC              __end_of_AdjustDayLightSaving 1CEE  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 2D1A  
                        _ValidateDateTime 1FF4             __size_of_LoadEventsFromEeprom 00BA  
                              __pbssBANK0 00AE                                __pbssBANK1 0100  
                              __pbssBANK2 0200                             ??_SwitchOnGPS 0060  
                            _GetThisCycle 2CC2                                   ?_GetDay 006E  
                       ReadEeprom@Address 0060          __end_of_TMR0_SetInterruptHandler 2D6E  
                                 ?___lmul 0060                                   ?___wmul 0060  
                              ??_TMR0_ISR 0043                           __CFG_PPS1WAY$ON 000000  
                          ___lmul@product 0068                      Timer0_10ms@ThisCycle 003C  
                               ?___ftpack 0001                                 ?___lbtoft 0009  
                        ?_IncreaseByAYear 0065                                   _CENTURY 00FD  
                                 _FLAGS_0 00E4                                   _FLAGS_1 004F  
             LoadCyclesFromEeprom@Address 006D                                   GetDay@d 0075  
                                 GetDay@m 0076                                   GetDay@t 015C  
                                 GetDay@y 0077                                   _SP1BRGH 000F9C  
                                 _SP1BRGL 000F9B                                   _OSCCON1 000ED8  
                                 _OSCCON3 000EDA                    ??_LoadStatesFromEeprom 0068  
                                 _NVMADRH 000F7F                                   _NVMADRL 000F7E  
                                 _OSCTUNE 000EDD                                   _PPSLOCK 000EA0  
                     __size_of_ReadEeprom 0014                  ReadGPS_DATE_TIME@TempItr 00AD  
                     IncreaseByASecond@dt 002A                         _IncreaseByASecond 286A  
              LoadCyclesFromEeprom@i_1464 0073                         ?i2_IncreaseByADay 001C  
                    ValidateDateTime@Date 0060                               _Timer0_10ms 0F0A  
                                 _ReadGPS 2732                      ValidateDateTime@Item 0063  
                    ValidateDateTime@Time 0061                           __size_of_GetDay 00F0  
                      ?_IncreaseByASecond 002A                                   __Hparam 0000  
                      ??i2_IncreaseByADay 0027                                   __Lparam 0000  
                               _DATE_TIME 00B9               AdjustDayLightSaving@Present 0098  
                                 _StopGPS 2D6E                                   ___almod 259A  
                     __end_of_SwitchOnGPS 2CA8                                   ___awdiv 26BA  
                         __size_of___lmul 004C                                   ___awmod 279C  
                         __size_of___wmul 0026                                   ___ftmul 237A  
                                 ___fttol 2442                                   ___lwmod 2A7E  
                            __psmallconst 0F00                       ??_IncreaseByASecond 0035  
                                 __pcinit 24FA                    ?_TestGPSStartCondition 0001  
                              ??___ftpack 0006                                ??___lbtoft 000C  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                                 __ptext0 2A3A                                   __ptext1 29F2  
                                 __ptext2 2AFA                                   __ptext3 2C8E  
                                 __ptext4 2D6E                                   __ptext5 2D06  
                                 __ptext6 2C4C                                   __ptext7 2D74  
                                 __ptext8 2D64                                   __ptext9 2804  
            __end_of_LoadCyclesFromEeprom 1A84                        ??_TimeTextToSecond 0070  
                        ??_IncreaseByADay 0086                     _OSCILLATOR_Initialize 2CDC  
                __end_of_IncreaseByAMonth 29A8                          ___awmod@dividend 0068  
                      _EUSART1_Initialize 2D1A                  ??_PIN_MANAGER_Initialize 0060  
              __size_of_SYSTEM_Initialize 0014        LoadStatesFromEeprom@AddAudioNormal 006B  
                   _AUDIO_SPECIAL_ON_TIME 0058                      end_of_initialization 2590  
       _NORMAL_AUDIO_STATE_ON_OFF_COUNTER 0052                 __end_of_IncreaseByASecond 28C6  
                     ?_EUSART1_Initialize 0001                           _DAY_LIGHT_START 00D8  
                       _SECONDS_TO_ADJUST 004D                                   postdec1 000FE5  
                                 postdec2 000FDD          _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME 00CC  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0012  
                    _AdjustDayLightSaving 1BDC                      ??_EUSART1_Initialize 0060  
                               _TIME_ZONE 00E2                     __CFG_WDTCPS$WDTCPS_31 000000  
                _TMR0_SetInterruptHandler 2D64                             _BLINK_ON_TIME 005D  
                __size_of_ReadGPSDateTime 00D2                        _VerifyForGPSOnTIme 29F2  
           LoadSettingsFromEeprom@Address 006C                     LoadCyclesFromEeprom@i 0071  
                   LoadCyclesFromEeprom@j 006F                                 i2___lwmod 2ABC  
                     ?_VerifyForGPSOnTIme 0001                         DecreaseByAYear@dt 0065  
                       _LoadAllFromEeprom 2D54                         _ReadGPS_DATE_TIME 1486  
                            _EUSART1_Read 2D42                               _SwitchOnGPS 2C8E  
                         _DecreaseByAYear 2BA0                        ?_LoadAllFromEeprom 0001  
                      ?_ReadGPS_DATE_TIME 0001                   DecreaseByADay@MonthDays 0087  
                          __end_of_GetDay 1DF0                              ??_ReadEeprom 0062  
                             ___ftmul@exp 0016                          ??_GetEventNumber 0066  
                   ?_AdjustDayLightSaving 0089                          IncreaseByADay@dt 007B  
            __end_of_INTERRUPT_Initialize 2D7C                  __end_of_ValidateDateTime 2096  
                     ??_LoadAllFromEeprom 007C                        i2_IncreaseByAMonth 29A8  
                          __end_of___lmul 295E                       ??_ReadGPS_DATE_TIME 009A  
                          __end_of___wmul 2C28                      ??_VerifyForGPSOnTIme 0060  
                           __pidataCOMRAM 2D7E                         __size_of_TMR0_ISR 0020  
                       ?_DecreaseByAMonth 0070                    ?_OSCILLATOR_Initialize 0001  
                     ?i2_IncreaseByAMonth 0011                        ??_DecreaseByAMonth 007B  
                             __end_ofPL10 20AA                               __end_ofPL20 18E0  
                             __end_ofPL12 1B9C                               __end_ofPL30 192C  
                             __end_ofPL22 1908                               __end_ofPL14 1DFA  
                             __end_ofPL40 1BC4                               __end_ofPL32 193C  
                             __end_ofPL24 11F8                               __end_ofPL16 17BC  
                             __end_ofPL50 20CA                               __end_ofPL42 20B4  
                             __end_ofPL34 1BBC                               __end_ofPL26 121C  
                             __end_ofPL18 11E2                               __end_ofPL60 1BCE  
                             __end_ofPL52 1960                               __end_ofPL44 194A  
                             __end_ofPL36 122E                               __end_ofPL28 1924  
                             __end_ofPL70 164E                               __end_ofPL62 1FE0  
                             __end_ofPL54 196A                               __end_ofPL46 20BE  
                             __end_ofPL38 1240                               __end_ofPL80 1260  
                             __end_ofPL72 1F04                               __end_ofPL64 2CDC  
                             __end_ofPL56 20D6                               __end_ofPL48 1EFC  
                             __end_ofPL90 243A                               __end_ofPL82 20E0  
                             __end_ofPL74 1E06                               __end_ofPL66 17DC  
                             __end_ofPL58 17CA                               __end_ofPL92 128A  
                             __end_ofPL84 126E                               __end_ofPL76 17E8  
                             __end_ofPL68 2634                               __end_ofPL94 1294  
                             __end_ofPL86 1BDC                               __end_ofPL78 1250  
                             __end_ofPL96 1CF8                               __end_ofPL88 127C  
                             __end_ofPL98 2442                       start_initialization 24FA  
                 __size_of_DecreaseByADay 00CE                             _PRESENT_EVENT 005E  
                __size_of_TMR0_Initialize 0022           __size_of_PIN_MANAGER_Initialize 0066  
                           _PRESENT_STATE 0057                      _BLINK_LAST_X_SECONDS 005B  
           __end_ofReadGPSDateTime@F11467 0F09                        __end_of_ReadEeprom 2D42  
                              ?i2___lwmod 0001                 __end_of_LoadAllFromEeprom 2D64  
              __size_of_IncreaseByASecond 005C                 __end_of_ReadGPS_DATE_TIME 1642  
            _TIME_WHEN_GPS_IS_SWITCHED_ON 00C8                      _AUDIO_NORMAL_ON_TIME 005A  
                                ??_GetDay 006F                      _LoadCyclesFromEeprom 196A  
                    ??i2_IncreaseByAMonth 001C        _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER 0051  
                ??_LoadSettingsFromEeprom 0066                      i2IncreaseByAMonth@dt 0011  
                        __CFG_LPBOREN$OFF 000000                                  ??___lmul 0068  
            __end_of_LoadEventsFromEeprom 18B4                                  ??___wmul 0064  
                  __size_of_TMR0_CallBack 001A                               __pdataBANK0 00EA  
                             __pdataBANK1 0144                             _DAY_LIGHT_END 00D4  
                       __size_of___ftpack 0072                         __size_of___lbtoft 0024  
                             __pbssBIGRAM 02F0                  ReadGPSDateTime@StartCode 0066  
                             __pbssCOMRAM 004D                             __pcstackBANK0 0060  
                       i2___lwmod@divisor 0003                         i2___lwmod@counter 0005  
                 __end_of_DecreaseByAYear 2BD2                         ??_ReadGPSDateTime 0062  
              VerifyForGPSOnTIme@TimeDiff 0060                              ?_Timer0_10ms 0001  
                   ?_LoadCyclesFromEeprom 0001                                  ?_ReadGPS 0001  
                   _TMR0_InterruptHandler 00DE                  __size_of_TMR0_StartTimer 0004  
       LoadStatesFromEeprom@TempNormalAdd 006F                    _PIN_MANAGER_Initialize 2804  
                  ??_AdjustDayLightSaving 0094                                 __pintcode 0008  
                 ??_TestGPSStartCondition 0060                                  ?_StopGPS 0001  
                                ?___almod 0001                                  ?___awdiv 0060  
                                ?___awmod 0068                                  ?___ftmul 000D  
                                ?___fttol 001C                                  ?___lwmod 0060  
                       _GPS_SYNC_AT_START 00E7                    _NO_OF_TIMES_GPS_FAILED 00E5  
            ??_INTERRUPT_InterruptManager 0043                          ___almod@dividend 0001  
               __size_ofi2_IncreaseByADay 00DC                                  _BAUD1CON 000F9F  
                             __smallconst 0F00                              Timer0_10ms@i 003B  
             LoadEventsFromEeprom@Address 0076                         ?_IncreaseByAMonth 0070  
                __size_of_IncreaseByAYear 002E                        ??_IncreaseByAMonth 007B  
                           _TMR0_CallBack 2CA8             __size_of_LoadStatesFromEeprom 015E  
                             _CYCLE_DELAY 00E0                               ??i2___lwmod 0005  
              __size_of_LoadAllFromEeprom 0010                      _INTERRUPT_Initialize 2D78  
              __size_of_ReadGPS_DATE_TIME 01BC                 __size_of_TimeTextToSecond 00D6  
                       ??_TMR0_Initialize 0062                          ReadGPSDateTime@i 006E  
                          ___wmul@product 0064                           GetEventNumber@i 006F  
                                _LATCbits 000F85                                  _PIE0bits 000EC2  
                     __CFG_BORV$VBOR_2P45 000000           __size_of_LoadSettingsFromEeprom 01D4  
     __size_of_INTERRUPT_InterruptManager 0062                                  i2u401_40 109E  
                                i2u241_41 2B58                ??_TMR0_SetInterruptHandler 0062  
                                i2u334_40 2482                                  i2u334_45 247A  
                                i2u247_41 29C4                                  _PIR0bits 000ECA  
                                i2u248_41 29D6                                  i2u280_41 2898  
                                i2u249_41 29E8                                  i2u281_41 28AA  
                                i2u274_41 218E                                  i2u282_41 28BC  
                                i2u275_41 21A0                                  i2u276_41 21B2  
                                _PIR3bits 000ECD                                  i2u459_40 2C82  
                                i2u395_41 1050                                  i2u396_41 1062  
                     ReadGPSDateTime@Date 0060                       ReadGPSDateTime@Time 0061  
                                _TMR0_ISR 2C6E                      TimeTextToSecond@Time 006C  
               Timer0_10ms@ThisCycle_2898 003A                         ___wmul@multiplier 0060  
                          _DecreaseByADay 1F04                            ?_TMR0_CallBack 0001  
                       i2_IncreaseByAYear 2B32                         ___lmul@multiplier 0060  
                               copy_data0 250E                                 copy_data1 252E  
                   ?_INTERRUPT_Initialize 0001                          ?_DecreaseByAYear 0065  
                    _LoadEventsFromEeprom 17FA                        ?i2_IncreaseByAYear 0006  
                  ??_LoadCyclesFromEeprom 0066                   _STATE_SECONDS_REMAINING 0055  
                            ?_SwitchOnGPS 0001                     ReadGPS_DATE_TIME@Date 00A5  
                        __size_of_ReadGPS 006A                             _STATE_SECONDS 0056  
                                __Hrparam 0000                       ??i2_IncreaseByAYear 0011  
                   ReadGPS_DATE_TIME@Time 009E                   __CFG_RSTOSC$EXTOSC_4PLL 000000  
                     i2IncreaseByAYear@dt 0006                                  __Lrparam 0000  
                 ReadGPSDateTime@TempChar 0071                        __CFG_BOREN$SBORDIS 000000  
                 ??_OSCILLATOR_Initialize 0060                          __size_of_StopGPS 0006  
                       ??_TMR0_StartTimer 0060                          __size_of___almod 0088  
                       ?_ValidateDateTime 0060                          __size_of___awdiv 0078  
                        __size_of___awmod 0068                          __size_of___ftmul 00B2  
                        __size_of___fttol 00B8               __size_of_EUSART1_Initialize 0014  
                        __size_of___lwmod 003E                                  ___ftpack 2634  
                                ___lbtoft 2C28                        ??_ValidateDateTime 0062  
                  __end_of_DecreaseByADay 1FD2                    _LoadSettingsFromEeprom 12A8  
                              _T0CON0bits 000FD5                 __end_ofi2_IncreaseByAYear 2B62  
                                __ptext10 2CDC                                  __ptext11 2D78  
                                __ptext20 2D1A                                  __ptext12 2732  
                                __ptext21 1BDC                                  __ptext13 1486  
                                __ptext30 164E                                  __ptext22 21C6  
                                __ptext14 1FF4                                  __ptext31 26BA  
                                __ptext23 295E                                  __ptext15 1E10  
                                __ptext40 2C6E                                  __ptext32 12A8  
                                __ptext24 2B6A                                  __ptext16 22A8  
                                __ptext41 2CA8                                  __ptext33 17FA  
                                __ptext25 1F04                                  __ptext17 2D42  
                                __ptext50 20E0                                  __ptext42 2D7C  
                                __ptext34 2912                                  __ptext26 28C6  
                                __ptext18 1D00                                  __ptext51 29A8  
                                __ptext43 0F0A                                  __ptext35 196A  
                                __ptext27 2BA0                                  __ptext19 279C  
                                __ptext52 2B32                                  __ptext44 2C28  
                                __ptext36 2D2E                                  __ptext28 2A7E  
                                __ptext53 2ABC                                  __ptext45 2442  
                                __ptext37 1AB0                                  __ptext29 2D54  
                                __ptext54 2CC2                                  __ptext46 237A  
                                __ptext38 2C02                                  __ptext55 0000  
                                __ptext47 2634                                  __ptext48 259A  
                                __ptext49 286A                     ?_LoadEventsFromEeprom 0001  
                   LoadStatesFromEeprom@i 007A                     LoadStatesFromEeprom@j 0074  
                         ___almod@divisor 0005                           ___almod@counter 0009  
               __size_of_DecreaseByAMonth 004C                   __size_of_IncreaseByADay 00D8  
                           __size_of_main 0044                         ??_IncreaseByAYear 0070  
                           ?_GetThisCycle 0001      __end_of_TMR0_DefaultInterruptHandler 2D7E  
   __size_of_TMR0_DefaultInterruptHandler 0002              _TMR0_DefaultInterruptHandler 2D7C  
             ReadGPS_DATE_TIME@IsValidGPS 00AC                      __CFG_WDTCWS$WDTCWS_7 000000  
                    __size_of_Timer0_10ms 02C4                                _RC1STAbits 000F9D  
                  _AUDIO_SPECIAL_OFF_TIME 00E9                        ReadGPSDateTime@Pos 0072  
                                int$flags 005F        __end_of_INTERRUPT_InterruptManager 006A  
              _INTERRUPT_InterruptManager 0008               __size_of_VerifyForGPSOnTIme 0048  
     LoadStatesFromEeprom@AddAudioSpecial 006D                          i2_IncreaseByADay 20E0  
               Timer0_10ms@OutForThePorts 003F               PIN_MANAGER_Initialize@state 0060  
                         ?_DecreaseByADay 007B                        i2IncreaseByADay@dt 001C  
                         _ReadGPSDateTime 22A8                                _INTCONbits 000FF2  
                         ??_TMR0_CallBack 0043                               _NVMCON1bits 000F81  
                              GetDay@Date 006E                   IncreaseByADay@MonthDays 0088  
                  ??_INTERRUPT_Initialize 0060                                  intlevel2 0000  
                        _TimeTextToSecond 1E10                     ReadGPSDateTime@F11467 0F01  
                          ??_GetThisCycle 0001                          ___lwmod@dividend 0060  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
                              _NEXT_EVENT 00FC                               _PPSLOCKbits 000EA0  
             __size_ofi2_IncreaseByAMonth 004A                                _NEXT_STATE 00E6  
      LoadStatesFromEeprom@TempSpecialAdd 0071             ?_TMR0_DefaultInterruptHandler 0001  
          __size_of_TestGPSStartCondition 0038                     ReadGPSDateTime@Commas 0070  
           __end_of_TestGPSStartCondition 2B32                _BLINK_STATE_ON_OFF_COUNTER 0053  
                              _RX1PPSbits 000EB5                           ___lwmod@divisor 0062  
                         _TMR0_Initialize 2C4C                           ___lwmod@counter 0064  
                 __size_of_GetEventNumber 00DC                __size_ofi2_IncreaseByAYear 0030  
                          _BLINK_OFF_TIME 005C                    ??_LoadEventsFromEeprom 006C  
          __end_of_PIN_MANAGER_Initialize 286A                              ___almod@sign 000A  
                  _SECONDS_TO_ADJUST_PART 0050                    TimeTextToSecond@Second 0080  
               __size_of_IncreaseByAMonth 004A                      __size_of_SwitchOnGPS 001A  
