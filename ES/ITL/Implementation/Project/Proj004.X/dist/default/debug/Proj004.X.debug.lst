

Microchip Technology PIC18 PRO Macro Assembler V1.42 build -159332390 
                                                                                               Mon Aug 07 11:34:27 2017

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	18F26K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91                           	psect	pa_nodes0,global,class=CODE,delta=1
    92  0000                     
    93                           ; Version 1.42
    94                           ; Generated 13/04/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC18F26K40 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     tosu	equ	0xFFF
   128                           tosh	equ	0xFFE
   129                           tosl	equ	0xFFD
   130                           pclath	equ	0xFFA
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           prodh	equ	0xFF4
   136                           prodl	equ	0xFF3
   137                           intcon	equ	0xFF2
   138                           plusw0	equ	0xFEB
   139                           wreg	equ	0xFE8
   140                           indf1	equ	0xFE7
   141                           postinc1	equ	0xFE6
   142                           plusw1	equ	0xFE3
   143                           fsr1h	equ	0xFE2
   144                           fsr1l	equ	0xFE1
   145                           indf2	equ	0xFDF
   146                           postinc2	equ	0xFDE
   147                           postdec2	equ	0xFDD
   148                           plusw2	equ	0xFDB
   149                           fsr2h	equ	0xFDA
   150                           fsr2l	equ	0xFD9
   151                           status	equ	0xFD8
   152                           
   153                           	psect	idataCOMRAM
   154  0036BC                     __pidataCOMRAM:
   155                           	opt stack 0
   156                           
   157                           ;initializer for _NEXT_EVENT
   158  0036BC  FF                 	db	255
   159                           
   160                           ;initializer for _PRESENT_EVENT
   161  0036BD  FF                 	db	255
   162                           tosu	equ	0xFFF
   163                           tosh	equ	0xFFE
   164                           tosl	equ	0xFFD
   165                           pclath	equ	0xFFA
   166                           tblptru	equ	0xFF8
   167                           tblptrh	equ	0xFF7
   168                           tblptrl	equ	0xFF6
   169                           tablat	equ	0xFF5
   170                           prodh	equ	0xFF4
   171                           prodl	equ	0xFF3
   172                           intcon	equ	0xFF2
   173                           plusw0	equ	0xFEB
   174                           wreg	equ	0xFE8
   175                           indf1	equ	0xFE7
   176                           postinc1	equ	0xFE6
   177                           plusw1	equ	0xFE3
   178                           fsr1h	equ	0xFE2
   179                           fsr1l	equ	0xFE1
   180                           indf2	equ	0xFDF
   181                           postinc2	equ	0xFDE
   182                           postdec2	equ	0xFDD
   183                           plusw2	equ	0xFDB
   184                           fsr2h	equ	0xFDA
   185                           fsr2l	equ	0xFD9
   186                           status	equ	0xFD8
   187                           
   188                           	psect	idataBIGRAM
   189  000F0A                     __pidataBIGRAM:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _EE_Settings
   193  000F0A  98                 	db	152
   194  000F0B  FE                 	db	254
   195  000F0C  01                 	db	1
   196  000F0D  04                 	db	4
   197  000F0E  01                 	db	1
   198  000F0F  0A                 	db	10
   199  000F10  14                 	db	20
   200  000F11  F6                 	db	246
   201  000F12  FF                 	db	255
   202  000F13  3C                 	db	60
   203  000F14  28                 	db	40
   204  000F15  04                 	db	4
   205  000F16  08                 	db	8
   206  000F17  C0                 	db	192
   207  000F18  08                 	db	8
   208  000F19  2A                 	db	42
   209  000F1A  05                 	db	5
   210  000F1B  01                 	db	1
   211  000F1C  80                 	db	128
   212  000F1D  51                 	db	81
   213  000F1E  01                 	db	1
   214  000F1F  00                 	db	0
   215  000F20  05                 	db	5
   216  000F21  C5                 	db	197
   217  000F22  D5                 	db	213
   218  000F23  55                 	db	85
   219  000F24  55                 	db	85
   220  000F25  55                 	db	85
   221  000F26  00                 	db	0
   222  000F27  00                 	db	0
   223  000F28  00                 	db	0
   224  000F29  00                 	db	0
   225  000F2A  00                 	db	0
   226  000F2B  00                 	db	0
   227  000F2C  00                 	db	0
   228  000F2D  00                 	db	0
   229  000F2E  00                 	db	0
   230  000F2F  00                 	db	0
   231  000F30  00                 	db	0
   232  000F31  00                 	db	0
   233  000F32  00                 	db	0
   234  000F33  00                 	db	0
   235  000F34  00                 	db	0
   236  000F35  20                 	db	32
   237  000F36  2A                 	db	42
   238  000F37  AA                 	db	170
   239  000F38  AA                 	db	170
   240  000F39  AA                 	db	170
   241  000F3A  80                 	db	128
   242  000F3B  00                 	db	0
   243  000F3C  00                 	db	0
   244  000F3D  00                 	db	0
   245  000F3E  00                 	db	0
   246  000F3F  00                 	db	0
   247  000F40  00                 	db	0
   248  000F41  00                 	db	0
   249  000F42  00                 	db	0
   250  000F43  00                 	db	0
   251  000F44  00                 	db	0
   252  000F45  00                 	db	0
   253  000F46  00                 	db	0
   254  000F47  00                 	db	0
   255  000F48  00                 	db	0
   256  000F49  02                 	db	2
   257  000F4A  08                 	db	8
   258  000F4B  0A                 	db	10
   259  000F4C  0C                 	db	12
   260  000F4D  0E                 	db	14
   261  000F4E  10                 	db	16
   262  000F4F  12                 	db	18
   263  000F50  14                 	db	20
   264  000F51  16                 	db	22
   265  000F52  18                 	db	24
   266  000F53  1A                 	db	26
   267  000F54  1C                 	db	28
   268  000F55  1E                 	db	30
   269  000F56  20                 	db	32
   270  000F57  22                 	db	34
   271  000F58  24                 	db	36
   272  000F59  A0                 	db	160
   273  000F5A  20                 	db	32
   274  000F5B  0C                 	db	12
   275  000F5C  36                 	db	54
   276  000F5D  0E                 	db	14
   277  000F5E  10                 	db	16
   278  000F5F  7F                 	db	127
   279  000F60  FF                 	db	255
   280  000F61  FF                 	db	255
   281  000F62  FF                 	db	255
   282  000F63  FF                 	db	255
   283  000F64  0F                 	db	15
   284  000F65  7F                 	db	127
   285  000F66  FF                 	db	255
   286  000F67  FF                 	db	255
   287  000F68  FF                 	db	255
   288  000F69  FF                 	db	255
   289  000F6A  0E                 	db	14
   290  000F6B  7F                 	db	127
   291  000F6C  FF                 	db	255
   292  000F6D  FF                 	db	255
   293  000F6E  FF                 	db	255
   294  000F6F  FF                 	db	255
   295  000F70  0D                 	db	13
   296  000F71  7F                 	db	127
   297  000F72  FF                 	db	255
   298  000F73  FF                 	db	255
   299  000F74  FF                 	db	255
   300  000F75  FF                 	db	255
   301  000F76  0C                 	db	12
   302  000F77  7F                 	db	127
   303  000F78  FF                 	db	255
   304  000F79  FF                 	db	255
   305  000F7A  FF                 	db	255
   306  000F7B  FF                 	db	255
   307  000F7C  0B                 	db	11
   308  000F7D  7F                 	db	127
   309  000F7E  FF                 	db	255
   310  000F7F  FF                 	db	255
   311  000F80  FF                 	db	255
   312  000F81  FF                 	db	255
   313  000F82  0A                 	db	10
   314  000F83  7F                 	db	127
   315  000F84  FF                 	db	255
   316  000F85  FF                 	db	255
   317  000F86  FF                 	db	255
   318  000F87  FF                 	db	255
   319  000F88  09                 	db	9
   320  000F89  7F                 	db	127
   321  000F8A  FF                 	db	255
   322  000F8B  FF                 	db	255
   323  000F8C  FF                 	db	255
   324  000F8D  FF                 	db	255
   325  000F8E  08                 	db	8
   326  000F8F  7F                 	db	127
   327  000F90  FF                 	db	255
   328  000F91  FF                 	db	255
   329  000F92  FF                 	db	255
   330  000F93  FF                 	db	255
   331  000F94  07                 	db	7
   332  000F95  7F                 	db	127
   333  000F96  FF                 	db	255
   334  000F97  FF                 	db	255
   335  000F98  FF                 	db	255
   336  000F99  FF                 	db	255
   337  000F9A  06                 	db	6
   338  000F9B  7F                 	db	127
   339  000F9C  FF                 	db	255
   340  000F9D  FF                 	db	255
   341  000F9E  FF                 	db	255
   342  000F9F  FF                 	db	255
   343  000FA0  05                 	db	5
   344  000FA1  7F                 	db	127
   345  000FA2  FF                 	db	255
   346  000FA3  FF                 	db	255
   347  000FA4  FF                 	db	255
   348  000FA5  FF                 	db	255
   349  000FA6  04                 	db	4
   350  000FA7  7F                 	db	127
   351  000FA8  FF                 	db	255
   352  000FA9  FF                 	db	255
   353  000FAA  FF                 	db	255
   354  000FAB  FF                 	db	255
   355  000FAC  03                 	db	3
   356  000FAD  7F                 	db	127
   357  000FAE  FF                 	db	255
   358  000FAF  FF                 	db	255
   359  000FB0  FF                 	db	255
   360  000FB1  FF                 	db	255
   361  000FB2  02                 	db	2
   362  000FB3  7F                 	db	127
   363  000FB4  FF                 	db	255
   364  000FB5  FF                 	db	255
   365  000FB6  FF                 	db	255
   366  000FB7  FF                 	db	255
   367  000FB8  01                 	db	1
   368  000FB9  7F                 	db	127
   369  000FBA  FF                 	db	255
   370  000FBB  FF                 	db	255
   371  000FBC  FF                 	db	255
   372  000FBD  FF                 	db	255
   373  000FBE  00                 	db	0
   374  000FBF  7F                 	db	127
   375  000FC0  FF                 	db	255
   376  000FC1  FF                 	db	255
   377  000FC2  FF                 	db	255
   378  000FC3  FF                 	db	255
   379  000FC4  10                 	db	16
   380  000FC5  7F                 	db	127
   381  000FC6  FF                 	db	255
   382  000FC7  FF                 	db	255
   383  000FC8  FF                 	db	255
   384  000FC9  FF                 	db	255
   385  000FCA  0F                 	db	15
   386  000FCB  7F                 	db	127
   387  000FCC  FF                 	db	255
   388  000FCD  FF                 	db	255
   389  000FCE  FF                 	db	255
   390  000FCF  FF                 	db	255
   391  000FD0  0E                 	db	14
   392  000FD1  7F                 	db	127
   393  000FD2  FF                 	db	255
   394  000FD3  FF                 	db	255
   395  000FD4  FF                 	db	255
   396  000FD5  FF                 	db	255
   397  000FD6  0D                 	db	13
   398  000FD7  7F                 	db	127
   399  000FD8  FF                 	db	255
   400  000FD9  FF                 	db	255
   401  000FDA  FF                 	db	255
   402  000FDB  FF                 	db	255
   403  000FDC  0C                 	db	12
   404  000FDD  7F                 	db	127
   405  000FDE  FF                 	db	255
   406  000FDF  FF                 	db	255
   407  000FE0  FF                 	db	255
   408  000FE1  FF                 	db	255
   409  000FE2  0B                 	db	11
   410  000FE3  7F                 	db	127
   411  000FE4  FF                 	db	255
   412  000FE5  FF                 	db	255
   413  000FE6  FF                 	db	255
   414  000FE7  FF                 	db	255
   415  000FE8  0A                 	db	10
   416  000FE9  7F                 	db	127
   417  000FEA  0A                 	db	10
   418  000FEB  24                 	db	36
   419  000FEC  90                 	db	144
   420  000FED  12                 	db	18
   421  000FEE  48                 	db	72
   422  000FEF  0A                 	db	10
   423  000FF0  12                 	db	18
   424  000FF1  48                 	db	72
   425  000FF2  09                 	db	9
   426  000FF3  24                 	db	36
   427  000FF4  0A                 	db	10
   428  000FF5  09                 	db	9
   429  000FF6  24                 	db	36
   430  000FF7  24                 	db	36
   431  000FF8  90                 	db	144
   432  000FF9  03                 	db	3
   433  000FFA  04                 	db	4
   434  000FFB  90                 	db	144
   435  000FFC  08                 	db	8
   436  000FFD  00                 	db	0
   437  000FFE  02                 	db	2
   438  000FFF  14                 	db	20
   439  001000  90                 	db	144
   440  001001  00                 	db	0
   441  001002  00                 	db	0
   442  001003  15                 	db	21
   443  001004  24                 	db	36
   444  001005  24                 	db	36
   445  001006  00                 	db	0
   446  001007  00                 	db	0
   447  001008  02                 	db	2
   448  001009  24                 	db	36
   449  00100A  10                 	db	16
   450  00100B  00                 	db	0
   451  00100C  20                 	db	32
   452  00100D  02                 	db	2
   453  00100E  24                 	db	36
   454  00100F  50                 	db	80
   455  001010  00                 	db	0
   456  001011  00                 	db	0
   457  001012  01                 	db	1
   458  001013  00                 	db	0
   459  001014  00                 	db	0
   460  001015  14                 	db	20
   461  001016  20                 	db	32
   462  001017  0A                 	db	10
   463  001018  12                 	db	18
   464  001019  48                 	db	72
   465  00101A  00                 	db	0
   466  00101B  00                 	db	0
   467  00101C  04                 	db	4
   468  00101D  12                 	db	18
   469  00101E  48                 	db	72
   470  00101F  00                 	db	0
   471  001020  00                 	db	0
   472  001021  07                 	db	7
   473  001022  12                 	db	18
   474  001023  48                 	db	72
   475  001024  00                 	db	0
   476  001025  00                 	db	0
   477  001026  03                 	db	3
   478  001027  12                 	db	18
   479  001028  48                 	db	72
   480  001029  00                 	db	0
   481  00102A  00                 	db	0
   482  00102B  07                 	db	7
   483  00102C  12                 	db	18
   484  00102D  48                 	db	72
   485  00102E  00                 	db	0
   486  00102F  00                 	db	0
   487  001030  03                 	db	3
   488  001031  12                 	db	18
   489  001032  48                 	db	72
   490  001033  00                 	db	0
   491  001034  00                 	db	0
   492  001035  02                 	db	2
   493  001036  12                 	db	18
   494  001037  48                 	db	72
   495  001038  00                 	db	0
   496  001039  00                 	db	0
   497  00103A  02                 	db	2
   498  00103B  12                 	db	18
   499  00103C  48                 	db	72
   500  00103D  00                 	db	0
   501  00103E  00                 	db	0
   502  00103F  06                 	db	6
   503  001040  12                 	db	18
   504  001041  48                 	db	72
   505  001042  00                 	db	0
   506  001043  00                 	db	0
   507  001044  08                 	db	8
   508  001045  12                 	db	18
   509  001046  48                 	db	72
   510  001047  00                 	db	0
   511  001048  00                 	db	0
   512  001049  04                 	db	4
   513  00104A  12                 	db	18
   514  00104B  48                 	db	72
   515  00104C  00                 	db	0
   516  00104D  00                 	db	0
   517  00104E  08                 	db	8
   518  00104F  12                 	db	18
   519  001050  48                 	db	72
   520  001051  00                 	db	0
   521  001052  00                 	db	0
   522  001053  07                 	db	7
   523  001054  12                 	db	18
   524  001055  48                 	db	72
   525  001056  00                 	db	0
   526  001057  00                 	db	0
   527  001058  05                 	db	5
   528  001059  12                 	db	18
   529  00105A  48                 	db	72
   530  00105B  00                 	db	0
   531  00105C  00                 	db	0
   532  00105D  02                 	db	2
   533  00105E  12                 	db	18
   534  00105F  48                 	db	72
   535  001060  00                 	db	0
   536  001061  00                 	db	0
   537  001062  06                 	db	6
   538  001063  12                 	db	18
   539  001064  48                 	db	72
   540  001065  00                 	db	0
   541  001066  00                 	db	0
   542  001067  07                 	db	7
   543  001068  12                 	db	18
   544  001069  48                 	db	72
   545  00106A  00                 	db	0
   546  00106B  00                 	db	0
   547  00106C  03                 	db	3
   548  00106D  12                 	db	18
   549  00106E  48                 	db	72
   550  00106F  00                 	db	0
   551  001070  00                 	db	0
   552  001071  06                 	db	6
   553  001072  12                 	db	18
   554  001073  48                 	db	72
   555  001074  00                 	db	0
   556  001075  00                 	db	0
   557  001076  0A                 	db	10
   558  001077  12                 	db	18
   559  001078  48                 	db	72
   560  001079  00                 	db	0
   561  00107A  00                 	db	0
   562  00107B  09                 	db	9
   563  00107C  12                 	db	18
   564  00107D  48                 	db	72
   565  00107E  00                 	db	0
   566  00107F  00                 	db	0
   567  001080  06                 	db	6
   568  001081  12                 	db	18
   569  001082  48                 	db	72
   570  001083  00                 	db	0
   571  001084  00                 	db	0
   572  001085  08                 	db	8
   573  001086  12                 	db	18
   574  001087  48                 	db	72
   575  001088  00                 	db	0
   576  001089  00                 	db	0
   577  00108A  0A                 	db	10
   578  00108B  12                 	db	18
   579  00108C  48                 	db	72
   580  00108D  00                 	db	0
   581  00108E  00                 	db	0
   582  00108F  06                 	db	6
   583  001090  12                 	db	18
   584  001091  48                 	db	72
   585  001092  00                 	db	0
   586  001093  00                 	db	0
   587  001094  05                 	db	5
   588  001095  12                 	db	18
   589  001096  48                 	db	72
   590  001097  00                 	db	0
   591  001098  00                 	db	0
   592  001099  02                 	db	2
   593  00109A  12                 	db	18
   594  00109B  48                 	db	72
   595  00109C  00                 	db	0
   596  00109D  00                 	db	0
   597  00109E  04                 	db	4
   598  00109F  12                 	db	18
   599  0010A0  48                 	db	72
   600  0010A1  00                 	db	0
   601  0010A2  00                 	db	0
   602  0010A3  08                 	db	8
   603  0010A4  12                 	db	18
   604  0010A5  48                 	db	72
   605  0010A6  00                 	db	0
   606  0010A7  00                 	db	0
   607  0010A8  07                 	db	7
   608  0010A9  12                 	db	18
   609  0010AA  48                 	db	72
   610  0010AB  00                 	db	0
   611  0010AC  00                 	db	0
   612  0010AD  00                 	db	0
   613  0010AE  12                 	db	18
   614  0010AF  48                 	db	72
   615  0010B0  00                 	db	0
   616  0010B1  00                 	db	0
   617  0010B2  00                 	db	0
   618  0010B3  12                 	db	18
   619  0010B4  48                 	db	72
   620  0010B5  00                 	db	0
   621  0010B6  00                 	db	0
   622  0010B7  00                 	db	0
   623  0010B8  00                 	db	0
   624  0010B9  00                 	db	0
   625  0010BA  00                 	db	0
   626  0010BB  00                 	db	0
   627  0010BC  00                 	db	0
   628  0010BD  00                 	db	0
   629  0010BE  00                 	db	0
   630  0010BF  00                 	db	0
   631  0010C0  00                 	db	0
   632  0010C1  00                 	db	0
   633  0010C2  00                 	db	0
   634  0010C3  00                 	db	0
   635  0010C4  00                 	db	0
   636  0010C5  00                 	db	0
   637  0010C6  00                 	db	0
   638  0010C7  00                 	db	0
   639  0010C8  00                 	db	0
   640  0010C9  00                 	db	0
   641  0010CA  00                 	db	0
   642  0010CB  00                 	db	0
   643  0010CC  00                 	db	0
   644  0010CD  00                 	db	0
   645  0010CE  00                 	db	0
   646  0010CF  00                 	db	0
   647  0010D0  00                 	db	0
   648  0010D1  00                 	db	0
   649  0010D2  00                 	db	0
   650  0010D3  00                 	db	0
   651  0010D4  00                 	db	0
   652  0010D5  00                 	db	0
   653  0010D6  00                 	db	0
   654  0010D7  00                 	db	0
   655  0010D8  00                 	db	0
   656  0010D9  00                 	db	0
   657  0010DA  00                 	db	0
   658  0010DB  00                 	db	0
   659  0010DC  00                 	db	0
   660  0010DD  00                 	db	0
   661  0010DE  00                 	db	0
   662  0010DF  00                 	db	0
   663  0010E0  00                 	db	0
   664  0010E1  00                 	db	0
   665  0010E2  00                 	db	0
   666  0010E3  00                 	db	0
   667  0010E4  00                 	db	0
   668  0010E5  00                 	db	0
   669  0010E6  00                 	db	0
   670  0010E7  00                 	db	0
   671  0010E8  00                 	db	0
   672  0010E9  00                 	db	0
   673  0010EA  00                 	db	0
   674  0010EB  00                 	db	0
   675  0010EC  00                 	db	0
   676  0010ED  00                 	db	0
   677  0010EE  00                 	db	0
   678  0010EF  00                 	db	0
   679  0010F0  00                 	db	0
   680  0010F1  00                 	db	0
   681  0010F2  00                 	db	0
   682  0010F3  00                 	db	0
   683  0010F4  00                 	db	0
   684  0010F5  00                 	db	0
   685  0010F6  00                 	db	0
   686  0010F7  00                 	db	0
   687  0010F8  00                 	db	0
   688  0010F9  00                 	db	0
   689  0010FA  00                 	db	0
   690  0010FB  00                 	db	0
   691  0010FC  00                 	db	0
   692  0010FD  00                 	db	0
   693  0010FE  00                 	db	0
   694  0010FF  00                 	db	0
   695  001100  00                 	db	0
   696  001101  00                 	db	0
   697  001102  00                 	db	0
   698  001103  00                 	db	0
   699  001104  00                 	db	0
   700  001105  00                 	db	0
   701  001106  00                 	db	0
   702  001107  00                 	db	0
   703  001108  00                 	db	0
   704  001109  00                 	db	0
   705  00110A  00                 	db	0
   706  00110B  00                 	db	0
   707  00110C  00                 	db	0
   708  00110D  00                 	db	0
   709  00110E  00                 	db	0
   710  00110F  00                 	db	0
   711  001110  00                 	db	0
   712  001111  00                 	db	0
   713  001112  00                 	db	0
   714  001113  00                 	db	0
   715  001114  00                 	db	0
   716  001115  00                 	db	0
   717  001116  00                 	db	0
   718  001117  00                 	db	0
   719  001118  00                 	db	0
   720  001119  00                 	db	0
   721  00111A  00                 	db	0
   722  00111B  00                 	db	0
   723  00111C  00                 	db	0
   724  00111D  00                 	db	0
   725  00111E  00                 	db	0
   726  00111F  00                 	db	0
   727  001120  00                 	db	0
   728  001121  00                 	db	0
   729  001122  00                 	db	0
   730  001123  00                 	db	0
   731  001124  00                 	db	0
   732  001125  00                 	db	0
   733  001126  00                 	db	0
   734  001127  00                 	db	0
   735  001128  00                 	db	0
   736  001129  00                 	db	0
   737  00112A  00                 	db	0
   738  00112B  00                 	db	0
   739  00112C  00                 	db	0
   740  00112D  00                 	db	0
   741  00112E  00                 	db	0
   742  00112F  00                 	db	0
   743  001130  00                 	db	0
   744  001131  00                 	db	0
   745  001132  00                 	db	0
   746  001133  00                 	db	0
   747  001134  00                 	db	0
   748  001135  00                 	db	0
   749  001136  00                 	db	0
   750  001137  00                 	db	0
   751  001138  00                 	db	0
   752  001139  00                 	db	0
   753  00113A  00                 	db	0
   754  00113B  00                 	db	0
   755  00113C  00                 	db	0
   756  00113D  00                 	db	0
   757  00113E  00                 	db	0
   758  00113F  00                 	db	0
   759  001140  00                 	db	0
   760  001141  00                 	db	0
   761  001142  00                 	db	0
   762  001143  00                 	db	0
   763  001144  00                 	db	0
   764  001145  00                 	db	0
   765  001146  00                 	db	0
   766  001147  00                 	db	0
   767  001148  00                 	db	0
   768  001149  00                 	db	0
   769  00114A  00                 	db	0
   770  00114B  00                 	db	0
   771  00114C  00                 	db	0
   772  00114D  00                 	db	0
   773  00114E  00                 	db	0
   774  00114F  00                 	db	0
   775  001150  00                 	db	0
   776  001151  00                 	db	0
   777  001152  00                 	db	0
   778  001153  00                 	db	0
   779  001154  00                 	db	0
   780  001155  00                 	db	0
   781  001156  00                 	db	0
   782  001157  00                 	db	0
   783  001158  00                 	db	0
   784  001159  00                 	db	0
   785  00115A  00                 	db	0
   786  00115B  00                 	db	0
   787  00115C  00                 	db	0
   788  00115D  00                 	db	0
   789  00115E  00                 	db	0
   790  00115F  00                 	db	0
   791  001160  00                 	db	0
   792  001161  00                 	db	0
   793  001162  00                 	db	0
   794  001163  00                 	db	0
   795  001164  00                 	db	0
   796  001165  00                 	db	0
   797  001166  00                 	db	0
   798  001167  00                 	db	0
   799  001168  00                 	db	0
   800  001169  00                 	db	0
   801  00116A  00                 	db	0
   802  00116B  00                 	db	0
   803  00116C  00                 	db	0
   804  00116D  00                 	db	0
   805  00116E  00                 	db	0
   806  00116F  00                 	db	0
   807  001170  00                 	db	0
   808  001171  00                 	db	0
   809  001172  00                 	db	0
   810  001173  00                 	db	0
   811  001174  00                 	db	0
   812  001175  00                 	db	0
   813  001176  00                 	db	0
   814  001177  00                 	db	0
   815  001178  00                 	db	0
   816  001179  00                 	db	0
   817  00117A  00                 	db	0
   818  00117B  00                 	db	0
   819  00117C  00                 	db	0
   820  00117D  00                 	db	0
   821  00117E  00                 	db	0
   822  00117F  00                 	db	0
   823  001180  00                 	db	0
   824  001181  00                 	db	0
   825  001182  00                 	db	0
   826  001183  00                 	db	0
   827  001184  00                 	db	0
   828  001185  00                 	db	0
   829  001186  00                 	db	0
   830  001187  00                 	db	0
   831  001188  00                 	db	0
   832  001189  00                 	db	0
   833  00118A  00                 	db	0
   834  00118B  00                 	db	0
   835  00118C  00                 	db	0
   836  00118D  00                 	db	0
   837  00118E  00                 	db	0
   838  00118F  00                 	db	0
   839  001190  00                 	db	0
   840  001191  00                 	db	0
   841  001192  00                 	db	0
   842  001193  00                 	db	0
   843  001194  00                 	db	0
   844  001195  00                 	db	0
   845  001196  00                 	db	0
   846  001197  00                 	db	0
   847  001198  00                 	db	0
   848  001199  00                 	db	0
   849  00119A  00                 	db	0
   850  00119B  00                 	db	0
   851  00119C  00                 	db	0
   852  00119D  00                 	db	0
   853  00119E  00                 	db	0
   854  00119F  00                 	db	0
   855  0011A0  00                 	db	0
   856  0011A1  00                 	db	0
   857  0011A2  00                 	db	0
   858  0011A3  00                 	db	0
   859  0011A4  00                 	db	0
   860  0011A5  00                 	db	0
   861  0011A6  00                 	db	0
   862  0011A7  00                 	db	0
   863  0011A8  00                 	db	0
   864  0011A9  00                 	db	0
   865  0011AA  00                 	db	0
   866  0011AB  00                 	db	0
   867  0011AC  00                 	db	0
   868  0011AD  00                 	db	0
   869  0011AE  00                 	db	0
   870  0011AF  00                 	db	0
   871  0011B0  00                 	db	0
   872  0011B1  00                 	db	0
   873  0011B2  00                 	db	0
   874  0011B3  00                 	db	0
   875  0011B4  00                 	db	0
   876  0011B5  00                 	db	0
   877  0011B6  00                 	db	0
   878  0011B7  00                 	db	0
   879  0011B8  00                 	db	0
   880  0011B9  00                 	db	0
   881  0011BA  00                 	db	0
   882  0011BB  00                 	db	0
   883  0011BC  00                 	db	0
   884  0011BD  00                 	db	0
   885  0011BE  00                 	db	0
   886  0011BF  00                 	db	0
   887  0011C0  00                 	db	0
   888  0011C1  00                 	db	0
   889  0011C2  00                 	db	0
   890  0011C3  00                 	db	0
   891  0011C4  00                 	db	0
   892  0011C5  00                 	db	0
   893  0011C6  00                 	db	0
   894  0011C7  00                 	db	0
   895  0011C8  00                 	db	0
   896  0011C9  00                 	db	0
   897  0011CA  00                 	db	0
   898  0011CB  00                 	db	0
   899  0011CC  00                 	db	0
   900  0011CD  00                 	db	0
   901  0011CE  00                 	db	0
   902  0011CF  00                 	db	0
   903  0011D0  00                 	db	0
   904  0011D1  00                 	db	0
   905  0011D2  00                 	db	0
   906  0011D3  00                 	db	0
   907  0011D4  00                 	db	0
   908  0011D5  00                 	db	0
   909  0011D6  00                 	db	0
   910  0011D7  00                 	db	0
   911  0011D8  00                 	db	0
   912  0011D9  00                 	db	0
   913  0011DA  00                 	db	0
   914  0011DB  00                 	db	0
   915  0011DC  00                 	db	0
   916  0011DD  00                 	db	0
   917  0011DE  00                 	db	0
   918  0011DF  00                 	db	0
   919  0011E0  00                 	db	0
   920  0011E1  00                 	db	0
   921  0011E2  00                 	db	0
   922  0011E3  00                 	db	0
   923  0011E4  00                 	db	0
   924  0011E5  00                 	db	0
   925  0011E6  00                 	db	0
   926  0011E7  00                 	db	0
   927  0011E8  00                 	db	0
   928  0011E9  00                 	db	0
   929  0011EA  00                 	db	0
   930  0011EB  00                 	db	0
   931  0011EC  00                 	db	0
   932  0011ED  00                 	db	0
   933  0011EE  00                 	db	0
   934  0011EF  00                 	db	0
   935  0011F0  00                 	db	0
   936  0011F1  00                 	db	0
   937  0011F2  00                 	db	0
   938  0011F3  00                 	db	0
   939  0011F4  00                 	db	0
   940  0011F5  00                 	db	0
   941  0011F6  00                 	db	0
   942  0011F7  00                 	db	0
   943  0011F8  00                 	db	0
   944  0011F9  00                 	db	0
   945  0011FA  00                 	db	0
   946  0011FB  00                 	db	0
   947  0011FC  00                 	db	0
   948  0011FD  00                 	db	0
   949  0011FE  00                 	db	0
   950  0011FF  00                 	db	0
   951  001200  00                 	db	0
   952  001201  00                 	db	0
   953  001202  00                 	db	0
   954  001203  00                 	db	0
   955  001204  00                 	db	0
   956  001205  00                 	db	0
   957  001206  00                 	db	0
   958  001207  00                 	db	0
   959  001208  00                 	db	0
   960  001209  00                 	db	0
   961  00120A  00                 	db	0
   962  00120B  00                 	db	0
   963  00120C  00                 	db	0
   964  00120D  00                 	db	0
   965  00120E  00                 	db	0
   966  00120F  00                 	db	0
   967  001210  00                 	db	0
   968  001211  00                 	db	0
   969  001212  00                 	db	0
   970  001213  00                 	db	0
   971  001214  00                 	db	0
   972  001215  00                 	db	0
   973  001216  00                 	db	0
   974  001217  00                 	db	0
   975  001218  00                 	db	0
   976  001219  00                 	db	0
   977  00121A  00                 	db	0
   978  00121B  00                 	db	0
   979  00121C  00                 	db	0
   980  00121D  00                 	db	0
   981  00121E  00                 	db	0
   982  00121F  00                 	db	0
   983  001220  00                 	db	0
   984  001221  00                 	db	0
   985  001222  00                 	db	0
   986  001223  00                 	db	0
   987  001224  00                 	db	0
   988  001225  00                 	db	0
   989  001226  00                 	db	0
   990  001227  00                 	db	0
   991  001228  00                 	db	0
   992  001229  00                 	db	0
   993  00122A  00                 	db	0
   994  00122B  00                 	db	0
   995  00122C  00                 	db	0
   996  00122D  00                 	db	0
   997  00122E  00                 	db	0
   998  00122F  00                 	db	0
   999  001230  00                 	db	0
  1000  001231  00                 	db	0
  1001  001232  00                 	db	0
  1002  001233  00                 	db	0
  1003  001234  00                 	db	0
  1004  001235  00                 	db	0
  1005  001236  00                 	db	0
  1006  001237  00                 	db	0
  1007  001238  00                 	db	0
  1008  001239  00                 	db	0
  1009  00123A  00                 	db	0
  1010  00123B  00                 	db	0
  1011  00123C  00                 	db	0
  1012  00123D  00                 	db	0
  1013  00123E  00                 	db	0
  1014  00123F  00                 	db	0
  1015  001240  00                 	db	0
  1016  001241  00                 	db	0
  1017  001242  00                 	db	0
  1018  001243  00                 	db	0
  1019  001244  00                 	db	0
  1020  001245  00                 	db	0
  1021  001246  00                 	db	0
  1022  001247  00                 	db	0
  1023  001248  00                 	db	0
  1024  001249  00                 	db	0
  1025  00124A  00                 	db	0
  1026  00124B  00                 	db	0
  1027  00124C  00                 	db	0
  1028  00124D  00                 	db	0
  1029  00124E  00                 	db	0
  1030  00124F  00                 	db	0
  1031  001250  00                 	db	0
  1032  001251  00                 	db	0
  1033  001252  00                 	db	0
  1034  001253  00                 	db	0
  1035  001254  00                 	db	0
  1036  001255  00                 	db	0
  1037  001256  00                 	db	0
  1038  001257  00                 	db	0
  1039  001258  00                 	db	0
  1040  001259  00                 	db	0
  1041  00125A  00                 	db	0
  1042  00125B  00                 	db	0
  1043  00125C  00                 	db	0
  1044  00125D  00                 	db	0
  1045  00125E  00                 	db	0
  1046  00125F  00                 	db	0
  1047  001260  00                 	db	0
  1048  001261  00                 	db	0
  1049  001262  00                 	db	0
  1050  001263  00                 	db	0
  1051  001264  00                 	db	0
  1052  001265  00                 	db	0
  1053  001266  00                 	db	0
  1054  001267  00                 	db	0
  1055  001268  00                 	db	0
  1056  001269  00                 	db	0
  1057  00126A  00                 	db	0
  1058  00126B  00                 	db	0
  1059  00126C  00                 	db	0
  1060  00126D  00                 	db	0
  1061  00126E  00                 	db	0
  1062  00126F  00                 	db	0
  1063  001270  00                 	db	0
  1064  001271  00                 	db	0
  1065  001272  00                 	db	0
  1066  001273  00                 	db	0
  1067  001274  00                 	db	0
  1068  001275  00                 	db	0
  1069  001276  00                 	db	0
  1070  001277  00                 	db	0
  1071  001278  00                 	db	0
  1072  001279  00                 	db	0
  1073  00127A  00                 	db	0
  1074  00127B  00                 	db	0
  1075  00127C  00                 	db	0
  1076  00127D  00                 	db	0
  1077  00127E  00                 	db	0
  1078  00127F  00                 	db	0
  1079  001280  00                 	db	0
  1080  001281  00                 	db	0
  1081  001282  00                 	db	0
  1082  001283  00                 	db	0
  1083  001284  00                 	db	0
  1084  001285  00                 	db	0
  1085  001286  00                 	db	0
  1086  001287  00                 	db	0
  1087  001288  00                 	db	0
  1088  001289  00                 	db	0
  1089  00128A  00                 	db	0
  1090  00128B  00                 	db	0
  1091  00128C  00                 	db	0
  1092  00128D  00                 	db	0
  1093  00128E  00                 	db	0
  1094  00128F  00                 	db	0
  1095  001290  00                 	db	0
  1096  001291  00                 	db	0
  1097  001292  00                 	db	0
  1098  001293  00                 	db	0
  1099  001294  00                 	db	0
  1100  001295  00                 	db	0
  1101  001296  00                 	db	0
  1102  001297  00                 	db	0
  1103  001298  00                 	db	0
  1104  001299  00                 	db	0
  1105  00129A  00                 	db	0
  1106  00129B  00                 	db	0
  1107  00129C  00                 	db	0
  1108  00129D  00                 	db	0
  1109  00129E  00                 	db	0
  1110  00129F  00                 	db	0
  1111  0012A0  00                 	db	0
  1112  0012A1  00                 	db	0
  1113  0012A2  00                 	db	0
  1114  0012A3  00                 	db	0
  1115  0012A4  00                 	db	0
  1116  0012A5  00                 	db	0
  1117  0012A6  00                 	db	0
  1118  0012A7  00                 	db	0
  1119  0012A8  00                 	db	0
  1120  0012A9  00                 	db	0
  1121  0012AA  00                 	db	0
  1122  0012AB  00                 	db	0
  1123  0012AC  00                 	db	0
  1124  0012AD  00                 	db	0
  1125  0012AE  00                 	db	0
  1126  0012AF  00                 	db	0
  1127  0012B0  00                 	db	0
  1128  0012B1  00                 	db	0
  1129  0012B2  00                 	db	0
  1130  0012B3  00                 	db	0
  1131  0012B4  00                 	db	0
  1132  0012B5  00                 	db	0
  1133  0012B6  00                 	db	0
  1134  0012B7  00                 	db	0
  1135  0012B8  00                 	db	0
  1136  0012B9  00                 	db	0
  1137  0012BA  00                 	db	0
  1138  0012BB  00                 	db	0
  1139  0012BC  00                 	db	0
  1140  0012BD  00                 	db	0
  1141  0012BE  00                 	db	0
  1142  0012BF  00                 	db	0
  1143  0012C0  00                 	db	0
  1144  0012C1  00                 	db	0
  1145  0012C2  00                 	db	0
  1146  0012C3  00                 	db	0
  1147  0012C4  00                 	db	0
  1148  0012C5  00                 	db	0
  1149  0012C6  00                 	db	0
  1150  0012C7  00                 	db	0
  1151  0012C8  00                 	db	0
  1152  0012C9  00                 	db	0
  1153  0012CA  00                 	db	0
  1154  0012CB  00                 	db	0
  1155  0012CC  00                 	db	0
  1156  0012CD  00                 	db	0
  1157  0012CE  00                 	db	0
  1158  0012CF  00                 	db	0
  1159  0012D0  00                 	db	0
  1160  0012D1  00                 	db	0
  1161  0012D2  00                 	db	0
  1162  0012D3  00                 	db	0
  1163  0012D4  00                 	db	0
  1164  0012D5  00                 	db	0
  1165  0012D6  00                 	db	0
  1166  0012D7  00                 	db	0
  1167  0012D8  00                 	db	0
  1168  0012D9  00                 	db	0
  1169  0012DA  00                 	db	0
  1170  0012DB  00                 	db	0
  1171  0012DC  00                 	db	0
  1172  0012DD  00                 	db	0
  1173  0012DE  00                 	db	0
  1174  0012DF  00                 	db	0
  1175  0012E0  00                 	db	0
  1176  0012E1  00                 	db	0
  1177  0012E2  00                 	db	0
  1178  0012E3  00                 	db	0
  1179  0012E4  00                 	db	0
  1180  0012E5  00                 	db	0
  1181  0012E6  00                 	db	0
  1182  0012E7  00                 	db	0
  1183  0012E8  00                 	db	0
  1184  0012E9  00                 	db	0
  1185  0012EA  00                 	db	0
  1186  0012EB  00                 	db	0
  1187  0012EC  00                 	db	0
  1188  0012ED  00                 	db	0
  1189  0012EE  00                 	db	0
  1190  0012EF  00                 	db	0
  1191  0012F0  00                 	db	0
  1192  0012F1  00                 	db	0
  1193  0012F2  00                 	db	0
  1194  0012F3  00                 	db	0
  1195  0012F4  00                 	db	0
  1196  0012F5  00                 	db	0
  1197  0012F6  00                 	db	0
  1198  0012F7  00                 	db	0
  1199  0012F8  00                 	db	0
  1200  0012F9  00                 	db	0
  1201  0012FA  00                 	db	0
  1202  0012FB  00                 	db	0
  1203  0012FC  00                 	db	0
  1204  0012FD  00                 	db	0
  1205  0012FE  00                 	db	0
  1206  0012FF  00                 	db	0
  1207  001300  00                 	db	0
  1208  001301  00                 	db	0
  1209  001302  00                 	db	0
  1210  001303  00                 	db	0
  1211  001304  00                 	db	0
  1212  001305  00                 	db	0
  1213  001306  00                 	db	0
  1214  001307  00                 	db	0
  1215  001308  00                 	db	0
  1216  001309  00                 	db	0
  1217                           tosu	equ	0xFFF
  1218                           tosh	equ	0xFFE
  1219                           tosl	equ	0xFFD
  1220                           pclath	equ	0xFFA
  1221                           tblptru	equ	0xFF8
  1222                           tblptrh	equ	0xFF7
  1223                           tblptrl	equ	0xFF6
  1224                           tablat	equ	0xFF5
  1225                           prodh	equ	0xFF4
  1226                           prodl	equ	0xFF3
  1227                           intcon	equ	0xFF2
  1228                           plusw0	equ	0xFEB
  1229                           wreg	equ	0xFE8
  1230                           indf1	equ	0xFE7
  1231                           postinc1	equ	0xFE6
  1232                           plusw1	equ	0xFE3
  1233                           fsr1h	equ	0xFE2
  1234                           fsr1l	equ	0xFE1
  1235                           indf2	equ	0xFDF
  1236                           postinc2	equ	0xFDE
  1237                           postdec2	equ	0xFDD
  1238                           plusw2	equ	0xFDB
  1239                           fsr2h	equ	0xFDA
  1240                           fsr2l	equ	0xFD9
  1241                           status	equ	0xFD8
  1242                           
  1243                           	psect	idataBANK0
  1244  003628                     __pidataBANK0:
  1245                           	opt stack 0
  1246                           
  1247                           ;initializer for ReadGPS_DATE_TIME@F11477
  1248  003628  2D                 	db	45
  1249  003629  2D                 	db	45
  1250  00362A  2D                 	db	45
  1251  00362B  2D                 	db	45
  1252  00362C  2D                 	db	45
  1253  00362D  2D                 	db	45
  1254  00362E  00                 	db	0
  1255                           
  1256                           ;initializer for ReadGPS_DATE_TIME@F11475
  1257  00362F  2D                 	db	45
  1258  003630  2D                 	db	45
  1259  003631  2D                 	db	45
  1260  003632  2D                 	db	45
  1261  003633  2D                 	db	45
  1262  003634  2D                 	db	45
  1263  003635  00                 	db	0
  1264                           
  1265                           ;initializer for _LIGHTS
  1266  003636  83                 	db	131
  1267  003637  0F                 	db	15
  1268  003638  84                 	db	132
  1269  003639  0F                 	db	15
  1270                           
  1271                           ;initializer for _CENTURY
  1272  00363A  14                 	db	20
  1273                           tosu	equ	0xFFF
  1274                           tosh	equ	0xFFE
  1275                           tosl	equ	0xFFD
  1276                           pclath	equ	0xFFA
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           prodh	equ	0xFF4
  1282                           prodl	equ	0xFF3
  1283                           intcon	equ	0xFF2
  1284                           plusw0	equ	0xFEB
  1285                           wreg	equ	0xFE8
  1286                           indf1	equ	0xFE7
  1287                           postinc1	equ	0xFE6
  1288                           plusw1	equ	0xFE3
  1289                           fsr1h	equ	0xFE2
  1290                           fsr1l	equ	0xFE1
  1291                           indf2	equ	0xFDF
  1292                           postinc2	equ	0xFDE
  1293                           postdec2	equ	0xFDD
  1294                           plusw2	equ	0xFDB
  1295                           fsr2h	equ	0xFDA
  1296                           fsr2l	equ	0xFD9
  1297                           status	equ	0xFD8
  1298                           
  1299                           	psect	idataBANK1
  1300  003540                     __pidataBANK1:
  1301                           	opt stack 0
  1302                           
  1303                           ;initializer for projMain@NO_OF_DAYS_IN_A_MONTH
  1304  003540  001F               	dw	31
  1305  003542  001C               	dw	28
  1306  003544  001F               	dw	31
  1307  003546  001E               	dw	30
  1308  003548  001F               	dw	31
  1309  00354A  001E               	dw	30
  1310  00354C  001F               	dw	31
  1311  00354E  001F               	dw	31
  1312  003550  001E               	dw	30
  1313  003552  001F               	dw	31
  1314  003554  001E               	dw	30
  1315  003556  001F               	dw	31
  1316                           
  1317                           ;initializer for GetDay@t
  1318  003558  0000               	dw	0
  1319  00355A  0003               	dw	3
  1320  00355C  0002               	dw	2
  1321  00355E  0005               	dw	5
  1322  003560  0000               	dw	0
  1323  003562  0003               	dw	3
  1324  003564  0005               	dw	5
  1325  003566  0001               	dw	1
  1326  003568  0004               	dw	4
  1327  00356A  0006               	dw	6
  1328  00356C  0002               	dw	2
  1329  00356E  0004               	dw	4
  1330                           tosu	equ	0xFFF
  1331                           tosh	equ	0xFFE
  1332                           tosl	equ	0xFFD
  1333                           pclath	equ	0xFFA
  1334                           tblptru	equ	0xFF8
  1335                           tblptrh	equ	0xFF7
  1336                           tblptrl	equ	0xFF6
  1337                           tablat	equ	0xFF5
  1338                           prodh	equ	0xFF4
  1339                           prodl	equ	0xFF3
  1340                           intcon	equ	0xFF2
  1341                           plusw0	equ	0xFEB
  1342                           wreg	equ	0xFE8
  1343                           indf1	equ	0xFE7
  1344                           postinc1	equ	0xFE6
  1345                           plusw1	equ	0xFE3
  1346                           fsr1h	equ	0xFE2
  1347                           fsr1l	equ	0xFE1
  1348                           indf2	equ	0xFDF
  1349                           postinc2	equ	0xFDE
  1350                           postdec2	equ	0xFDD
  1351                           plusw2	equ	0xFDB
  1352                           fsr2h	equ	0xFDA
  1353                           fsr2l	equ	0xFD9
  1354                           status	equ	0xFD8
  1355                           
  1356                           	psect	smallconst
  1357  000F00                     __psmallconst:
  1358                           	opt stack 0
  1359  000F00  00                 	db	0
  1360  000F01                     ReadGPSDateTime@F11468:
  1361                           	opt stack 0
  1362  000F01  24                 	db	36
  1363  000F02  47                 	db	71
  1364  000F03  50                 	db	80
  1365  000F04  52                 	db	82
  1366  000F05  4D                 	db	77
  1367  000F06  43                 	db	67
  1368  000F07  2C                 	db	44
  1369  000F08  00                 	db	0
  1370  000F09                     __end_ofReadGPSDateTime@F11468:
  1371                           	opt stack 0
  1372  0000                     _OSCTUNE	set	3805
  1373  0000                     _OSCFRQ	set	3806
  1374  0000                     _OSCEN	set	3804
  1375  0000                     _OSCCON3	set	3802
  1376  0000                     _OSCCON1	set	3800
  1377  0000                     _RC6PPS	set	3837
  1378  0000                     _RX1PPSbits	set	3765
  1379  0000                     _PPSLOCKbits	set	3744
  1380  0000                     _PPSLOCK	set	3744
  1381  0000                     _PIR0bits	set	3786
  1382  0000                     _PIE0bits	set	3778
  1383  0000                     _PIR3bits	set	3789
  1384  0000                     _PLLR	set	30424
  1385  0000                     _ODCONC	set	3871
  1386  0000                     _ODCONB	set	3863
  1387  0000                     _ODCONA	set	3855
  1388  0000                     _WPUC	set	3872
  1389  0000                     _WPUA	set	3856
  1390  0000                     _WPUB	set	3864
  1391  0000                     _WPUE	set	3885
  1392  0000                     _ANSELA	set	3857
  1393  0000                     _ANSELB	set	3865
  1394  0000                     _ANSELC	set	3873
  1395  0000                     _T0CON0bits	set	4053
  1396  0000                     _TMR0L	set	4051
  1397  0000                     _TMR0H	set	4052
  1398  0000                     _T0CON1	set	4054
  1399  0000                     _T0CON0	set	4053
  1400  0000                     _TRISC	set	3978
  1401  0000                     _TRISB	set	3977
  1402  0000                     _TRISA	set	3976
  1403  0000                     _LATC	set	3973
  1404  0000                     _RC1REG	set	3993
  1405  0000                     _RC1STAbits	set	3997
  1406  0000                     _SP1BRGH	set	3996
  1407  0000                     _SP1BRGL	set	3995
  1408  0000                     _TX1STA	set	3998
  1409  0000                     _RC1STA	set	3997
  1410  0000                     _BAUD1CON	set	3999
  1411  0000                     _LATCbits	set	3973
  1412  0000                     _NVMCON2	set	3970
  1413  0000                     _INTCONbits	set	4082
  1414  0000                     _NVMDAT	set	3968
  1415  0000                     _NVMADRH	set	3967
  1416  0000                     _NVMADRL	set	3966
  1417  0000                     _NVMCON1bits	set	3969
  1418  0000                     _LATAbits	set	3971
  1419  0000                     _TRISAbits	set	3976
  1420  0000                     _LATB	set	3972
  1421  0000                     _LATA	set	3971
  1422  0000                     _GIE	set	32663
  1423                           
  1424                           ; #config settings
  1425  000F09  00                 	db	0	; dummy byte at the end
  1426  0000                     tosu	equ	0xFFF
  1427                           tosh	equ	0xFFE
  1428                           tosl	equ	0xFFD
  1429                           pclath	equ	0xFFA
  1430                           tblptru	equ	0xFF8
  1431                           tblptrh	equ	0xFF7
  1432                           tblptrl	equ	0xFF6
  1433                           tablat	equ	0xFF5
  1434                           prodh	equ	0xFF4
  1435                           prodl	equ	0xFF3
  1436                           intcon	equ	0xFF2
  1437                           plusw0	equ	0xFEB
  1438                           wreg	equ	0xFE8
  1439                           indf1	equ	0xFE7
  1440                           postinc1	equ	0xFE6
  1441                           plusw1	equ	0xFE3
  1442                           fsr1h	equ	0xFE2
  1443                           fsr1l	equ	0xFE1
  1444                           indf2	equ	0xFDF
  1445                           postinc2	equ	0xFDE
  1446                           postdec2	equ	0xFDD
  1447                           plusw2	equ	0xFDB
  1448                           fsr2h	equ	0xFDA
  1449                           fsr2l	equ	0xFD9
  1450                           status	equ	0xFD8
  1451                           
  1452                           	psect	cinit
  1453  002A3A                     __pcinit:
  1454                           	opt stack 0
  1455  002A3A                     start_initialization:
  1456                           	opt stack 0
  1457  002A3A                     __initialization:
  1458                           	opt stack 0
  1459                           
  1460                           ; Initialize objects allocated to BIGRAM (1024 bytes)
  1461                           ; load TBLPTR registers with __pidataBIGRAM
  1462  002A3A  0E0A               	movlw	low __pidataBIGRAM
  1463  002A3C  6EF6               	movwf	tblptrl,c
  1464  002A3E  0E0F               	movlw	high __pidataBIGRAM
  1465  002A40  6EF7               	movwf	tblptrh,c
  1466  002A42  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1467  002A44  6EF8               	movwf	tblptru,c
  1468  002A46  EE02  F0F0         	lfsr	0,__pdataBIGRAM
  1469  002A4A  EE14 F000          	lfsr	1,1024
  1470  002A4E                     copy_data0:
  1471  002A4E  0009               	tblrd		*+
  1472  002A50  CFF5 FFEE          	movff	tablat,postinc0
  1473  002A54  50E5               	movf	postdec1,w,c
  1474  002A56  50E1               	movf	fsr1l,w,c
  1475  002A58  E1FA               	bnz	copy_data0
  1476  002A5A  50E2               	movf	fsr1h,w,c
  1477  002A5C  E1F8               	bnz	copy_data0
  1478                           
  1479                           ; Initialize objects allocated to BANK1 (48 bytes)
  1480                           ; load TBLPTR registers with __pidataBANK1
  1481  002A5E  0E40               	movlw	low __pidataBANK1
  1482  002A60  6EF6               	movwf	tblptrl,c
  1483  002A62  0E35               	movlw	high __pidataBANK1
  1484  002A64  6EF7               	movwf	tblptrh,c
  1485  002A66  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1486  002A68  6EF8               	movwf	tblptru,c
  1487  002A6A  EE01  F044         	lfsr	0,__pdataBANK1
  1488  002A6E  EE10 F030          	lfsr	1,48
  1489  002A72                     copy_data1:
  1490  002A72  0009               	tblrd		*+
  1491  002A74  CFF5 FFEE          	movff	tablat,postinc0
  1492  002A78  50E5               	movf	postdec1,w,c
  1493  002A7A  50E1               	movf	fsr1l,w,c
  1494  002A7C  E1FA               	bnz	copy_data1
  1495                           
  1496                           ; Initialize objects allocated to BANK0 (19 bytes)
  1497                           ; load TBLPTR registers with __pidataBANK0
  1498  002A7E  0E28               	movlw	low __pidataBANK0
  1499  002A80  6EF6               	movwf	tblptrl,c
  1500  002A82  0E36               	movlw	high __pidataBANK0
  1501  002A84  6EF7               	movwf	tblptrh,c
  1502  002A86  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1503  002A88  6EF8               	movwf	tblptru,c
  1504  002A8A  EE00  F0EC         	lfsr	0,__pdataBANK0
  1505  002A8E  EE10 F013          	lfsr	1,19
  1506  002A92                     copy_data2:
  1507  002A92  0009               	tblrd		*+
  1508  002A94  CFF5 FFEE          	movff	tablat,postinc0
  1509  002A98  50E5               	movf	postdec1,w,c
  1510  002A9A  50E1               	movf	fsr1l,w,c
  1511  002A9C  E1FA               	bnz	copy_data2
  1512                           
  1513                           ; Initialize objects allocated to COMRAM (2 bytes)
  1514                           ; load TBLPTR registers with __pidataCOMRAM
  1515  002A9E  0EBC               	movlw	low __pidataCOMRAM
  1516  002AA0  6EF6               	movwf	tblptrl,c
  1517  002AA2  0E36               	movlw	high __pidataCOMRAM
  1518  002AA4  6EF7               	movwf	tblptrh,c
  1519  002AA6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1520  002AA8  6EF8               	movwf	tblptru,c
  1521  002AAA  0009               	tblrd		*+	;fetch initializer
  1522  002AAC  CFF5 F05D          	movff	tablat,__pdataCOMRAM
  1523  002AB0  0009               	tblrd		*+	;fetch initializer
  1524  002AB2  CFF5 F05E          	movff	tablat,__pdataCOMRAM+1
  1525                           
  1526                           ; Clear objects allocated to BIGRAM (960 bytes)
  1527  002AB6  EE06  F0F0         	lfsr	0,__pbssBIGRAM
  1528  002ABA  EE13 F0C0          	lfsr	1,960
  1529  002ABE                     clear_0:
  1530  002ABE  6AEE               	clrf	postinc0,c
  1531  002AC0  50E5               	movf	postdec1,w,c
  1532  002AC2  50E1               	movf	fsr1l,w,c
  1533  002AC4  E1FC               	bnz	clear_0
  1534  002AC6  50E2               	movf	fsr1h,w,c
  1535  002AC8  E1FA               	bnz	clear_0
  1536                           
  1537                           ; Clear objects allocated to BANK2 (240 bytes)
  1538  002ACA  EE02  F000         	lfsr	0,__pbssBANK2
  1539  002ACE  0EF0               	movlw	240
  1540  002AD0                     clear_1:
  1541  002AD0  6AEE               	clrf	postinc0,c
  1542  002AD2  06E8               	decf	wreg,f,c
  1543  002AD4  E1FD               	bnz	clear_1
  1544                           
  1545                           ; Clear objects allocated to BANK1 (68 bytes)
  1546  002AD6  EE01  F000         	lfsr	0,__pbssBANK1
  1547  002ADA  0E44               	movlw	68
  1548  002ADC                     clear_2:
  1549  002ADC  6AEE               	clrf	postinc0,c
  1550  002ADE  06E8               	decf	wreg,f,c
  1551  002AE0  E1FD               	bnz	clear_2
  1552                           
  1553                           ; Clear objects allocated to BANK0 (58 bytes)
  1554  002AE2  EE00  F0B2         	lfsr	0,__pbssBANK0
  1555  002AE6  0E3A               	movlw	58
  1556  002AE8                     clear_3:
  1557  002AE8  6AEE               	clrf	postinc0,c
  1558  002AEA  06E8               	decf	wreg,f,c
  1559  002AEC  E1FD               	bnz	clear_3
  1560                           
  1561                           ; Clear objects allocated to COMRAM (17 bytes)
  1562  002AEE  EE00  F04C         	lfsr	0,__pbssCOMRAM
  1563  002AF2  0E11               	movlw	17
  1564  002AF4                     clear_4:
  1565  002AF4  6AEE               	clrf	postinc0,c
  1566  002AF6  06E8               	decf	wreg,f,c
  1567  002AF8  E1FD               	bnz	clear_4
  1568  002AFA                     end_of_initialization:
  1569                           	opt stack 0
  1570  002AFA                     __end_of__initialization:
  1571                           	opt stack 0
  1572  002AFA  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1573  002AFC  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1574  002AFE  0100               	movlb	0
  1575  002B00  EF9F  F00E         	goto	_main	;jump to C main() function
  1576                           tosu	equ	0xFFF
  1577                           tosh	equ	0xFFE
  1578                           tosl	equ	0xFFD
  1579                           pclath	equ	0xFFA
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           prodh	equ	0xFF4
  1585                           prodl	equ	0xFF3
  1586                           intcon	equ	0xFF2
  1587                           postinc0	equ	0xFEE
  1588                           plusw0	equ	0xFEB
  1589                           wreg	equ	0xFE8
  1590                           indf1	equ	0xFE7
  1591                           postinc1	equ	0xFE6
  1592                           postdec1	equ	0xFE5
  1593                           plusw1	equ	0xFE3
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           indf2	equ	0xFDF
  1597                           postinc2	equ	0xFDE
  1598                           postdec2	equ	0xFDD
  1599                           plusw2	equ	0xFDB
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604                           	psect	bssCOMRAM
  1605  00004C                     __pbssCOMRAM:
  1606                           	opt stack 0
  1607  00004C                     _timer0ReloadVal16bit:
  1608                           	opt stack 0
  1609  00004C                     	ds	2
  1610  00004E                     _FLAGS_1:
  1611                           	opt stack 0
  1612  00004E                     	ds	1
  1613  00004F                     _SECONDS_TO_ADJUST_PART:
  1614                           	opt stack 0
  1615  00004F                     	ds	1
  1616  000050                     _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER:
  1617                           	opt stack 0
  1618  000050                     	ds	1
  1619  000051                     _NORMAL_AUDIO_STATE_ON_OFF_COUNTER:
  1620                           	opt stack 0
  1621  000051                     	ds	1
  1622  000052                     _BLINK_STATE_ON_OFF_COUNTER:
  1623                           	opt stack 0
  1624  000052                     	ds	1
  1625  000053                     _CENTI_SECOND_COUNT:
  1626                           	opt stack 0
  1627  000053                     	ds	1
  1628  000054                     _STATE_SECONDS:
  1629                           	opt stack 0
  1630  000054                     	ds	1
  1631  000055                     _SPECIAL_AUDIO_LAST_X_SECONDS:
  1632                           	opt stack 0
  1633  000055                     	ds	1
  1634  000056                     _AUDIO_SPECIAL_OFF_TIME:
  1635                           	opt stack 0
  1636  000056                     	ds	1
  1637  000057                     _AUDIO_SPECIAL_ON_TIME:
  1638                           	opt stack 0
  1639  000057                     	ds	1
  1640  000058                     _AUDIO_NORMAL_OFF_TIME:
  1641                           	opt stack 0
  1642  000058                     	ds	1
  1643  000059                     _AUDIO_NORMAL_ON_TIME:
  1644                           	opt stack 0
  1645  000059                     	ds	1
  1646  00005A                     _BLINK_LAST_X_SECONDS:
  1647                           	opt stack 0
  1648  00005A                     	ds	1
  1649  00005B                     _BLINK_OFF_TIME:
  1650                           	opt stack 0
  1651  00005B                     	ds	1
  1652  00005C                     _BLINK_ON_TIME:
  1653                           	opt stack 0
  1654  00005C                     	ds	1
  1655                           tosu	equ	0xFFF
  1656                           tosh	equ	0xFFE
  1657                           tosl	equ	0xFFD
  1658                           pclath	equ	0xFFA
  1659                           tblptru	equ	0xFF8
  1660                           tblptrh	equ	0xFF7
  1661                           tblptrl	equ	0xFF6
  1662                           tablat	equ	0xFF5
  1663                           prodh	equ	0xFF4
  1664                           prodl	equ	0xFF3
  1665                           intcon	equ	0xFF2
  1666                           postinc0	equ	0xFEE
  1667                           plusw0	equ	0xFEB
  1668                           wreg	equ	0xFE8
  1669                           indf1	equ	0xFE7
  1670                           postinc1	equ	0xFE6
  1671                           postdec1	equ	0xFE5
  1672                           plusw1	equ	0xFE3
  1673                           fsr1h	equ	0xFE2
  1674                           fsr1l	equ	0xFE1
  1675                           indf2	equ	0xFDF
  1676                           postinc2	equ	0xFDE
  1677                           postdec2	equ	0xFDD
  1678                           plusw2	equ	0xFDB
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683                           	psect	dataCOMRAM
  1684  00005D                     __pdataCOMRAM:
  1685                           	opt stack 0
  1686  00005D                     _NEXT_EVENT:
  1687                           	opt stack 0
  1688  00005D                     	ds	1
  1689  00005E                     _PRESENT_EVENT:
  1690                           	opt stack 0
  1691  00005E                     	ds	1
  1692                           tosu	equ	0xFFF
  1693                           tosh	equ	0xFFE
  1694                           tosl	equ	0xFFD
  1695                           pclath	equ	0xFFA
  1696                           tblptru	equ	0xFF8
  1697                           tblptrh	equ	0xFF7
  1698                           tblptrl	equ	0xFF6
  1699                           tablat	equ	0xFF5
  1700                           prodh	equ	0xFF4
  1701                           prodl	equ	0xFF3
  1702                           intcon	equ	0xFF2
  1703                           postinc0	equ	0xFEE
  1704                           plusw0	equ	0xFEB
  1705                           wreg	equ	0xFE8
  1706                           indf1	equ	0xFE7
  1707                           postinc1	equ	0xFE6
  1708                           postdec1	equ	0xFE5
  1709                           plusw1	equ	0xFE3
  1710                           fsr1h	equ	0xFE2
  1711                           fsr1l	equ	0xFE1
  1712                           indf2	equ	0xFDF
  1713                           postinc2	equ	0xFDE
  1714                           postdec2	equ	0xFDD
  1715                           plusw2	equ	0xFDB
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720                           	psect	bssBANK0
  1721  0000B2                     __pbssBANK0:
  1722                           	opt stack 0
  1723  0000B2                     _GPS_DATE_TIME:
  1724                           	opt stack 0
  1725  0000B2                     	ds	11
  1726  0000BD                     _DATE_TIME:
  1727                           	opt stack 0
  1728  0000BD                     	ds	11
  1729  0000C8                     _TIME_AT_LAST_GPS_SYNC:
  1730                           	opt stack 0
  1731  0000C8                     	ds	4
  1732  0000CC                     _TIME_WHEN_GPS_IS_SWITCHED_ON:
  1733                           	opt stack 0
  1734  0000CC                     	ds	4
  1735  0000D0                     _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME:
  1736                           	opt stack 0
  1737  0000D0                     	ds	4
  1738  0000D4                     _GPS_SYNC_EVERY_x_SECONDS:
  1739                           	opt stack 0
  1740  0000D4                     	ds	4
  1741  0000D8                     _DAY_LIGHT_END:
  1742                           	opt stack 0
  1743  0000D8                     	ds	4
  1744  0000DC                     _DAY_LIGHT_START:
  1745                           	opt stack 0
  1746  0000DC                     	ds	4
  1747  0000E0                     _TMR0_InterruptHandler:
  1748                           	opt stack 0
  1749  0000E0                     	ds	2
  1750  0000E2                     _SECONDS_TO_ADJUST:
  1751                           	opt stack 0
  1752  0000E2                     	ds	2
  1753  0000E4                     _TIME_ZONE:
  1754                           	opt stack 0
  1755  0000E4                     	ds	2
  1756  0000E6                     _FLAGS_0:
  1757                           	opt stack 0
  1758  0000E6                     	ds	1
  1759  0000E7                     _NO_OF_TIMES_GPS_FAILED:
  1760                           	opt stack 0
  1761  0000E7                     	ds	1
  1762  0000E8                     _STATE_SECONDS_REMAINING:
  1763                           	opt stack 0
  1764  0000E8                     	ds	1
  1765  0000E9                     _NEXT_STATE:
  1766                           	opt stack 0
  1767  0000E9                     	ds	1
  1768  0000EA                     _PRESENT_STATE:
  1769                           	opt stack 0
  1770  0000EA                     	ds	1
  1771  0000EB                     _GPS_SYNC_AT_START:
  1772                           	opt stack 0
  1773  0000EB                     	ds	1
  1774                           tosu	equ	0xFFF
  1775                           tosh	equ	0xFFE
  1776                           tosl	equ	0xFFD
  1777                           pclath	equ	0xFFA
  1778                           tblptru	equ	0xFF8
  1779                           tblptrh	equ	0xFF7
  1780                           tblptrl	equ	0xFF6
  1781                           tablat	equ	0xFF5
  1782                           prodh	equ	0xFF4
  1783                           prodl	equ	0xFF3
  1784                           intcon	equ	0xFF2
  1785                           postinc0	equ	0xFEE
  1786                           plusw0	equ	0xFEB
  1787                           wreg	equ	0xFE8
  1788                           indf1	equ	0xFE7
  1789                           postinc1	equ	0xFE6
  1790                           postdec1	equ	0xFE5
  1791                           plusw1	equ	0xFE3
  1792                           fsr1h	equ	0xFE2
  1793                           fsr1l	equ	0xFE1
  1794                           indf2	equ	0xFDF
  1795                           postinc2	equ	0xFDE
  1796                           postdec2	equ	0xFDD
  1797                           plusw2	equ	0xFDB
  1798                           fsr2h	equ	0xFDA
  1799                           fsr2l	equ	0xFD9
  1800                           status	equ	0xFD8
  1801                           
  1802                           	psect	dataBANK0
  1803  0000EC                     __pdataBANK0:
  1804                           	opt stack 0
  1805  0000EC                     ReadGPS_DATE_TIME@F11477:
  1806                           	opt stack 0
  1807  0000EC                     	ds	7
  1808  0000F3                     ReadGPS_DATE_TIME@F11475:
  1809                           	opt stack 0
  1810  0000F3                     	ds	7
  1811  0000FA                     _LIGHTS:
  1812                           	opt stack 0
  1813  0000FA                     	ds	4
  1814  0000FE                     _CENTURY:
  1815                           	opt stack 0
  1816  0000FE                     	ds	1
  1817                           tosu	equ	0xFFF
  1818                           tosh	equ	0xFFE
  1819                           tosl	equ	0xFFD
  1820                           pclath	equ	0xFFA
  1821                           tblptru	equ	0xFF8
  1822                           tblptrh	equ	0xFF7
  1823                           tblptrl	equ	0xFF6
  1824                           tablat	equ	0xFF5
  1825                           prodh	equ	0xFF4
  1826                           prodl	equ	0xFF3
  1827                           intcon	equ	0xFF2
  1828                           postinc0	equ	0xFEE
  1829                           plusw0	equ	0xFEB
  1830                           wreg	equ	0xFE8
  1831                           indf1	equ	0xFE7
  1832                           postinc1	equ	0xFE6
  1833                           postdec1	equ	0xFE5
  1834                           plusw1	equ	0xFE3
  1835                           fsr1h	equ	0xFE2
  1836                           fsr1l	equ	0xFE1
  1837                           indf2	equ	0xFDF
  1838                           postinc2	equ	0xFDE
  1839                           postdec2	equ	0xFDD
  1840                           plusw2	equ	0xFDB
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845                           	psect	bssBANK1
  1846  000100                     __pbssBANK1:
  1847                           	opt stack 0
  1848  000100                     _CYCLES:
  1849                           	opt stack 0
  1850  000100                     	ds	68
  1851                           tosu	equ	0xFFF
  1852                           tosh	equ	0xFFE
  1853                           tosl	equ	0xFFD
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           prodh	equ	0xFF4
  1860                           prodl	equ	0xFF3
  1861                           intcon	equ	0xFF2
  1862                           postinc0	equ	0xFEE
  1863                           plusw0	equ	0xFEB
  1864                           wreg	equ	0xFE8
  1865                           indf1	equ	0xFE7
  1866                           postinc1	equ	0xFE6
  1867                           postdec1	equ	0xFE5
  1868                           plusw1	equ	0xFE3
  1869                           fsr1h	equ	0xFE2
  1870                           fsr1l	equ	0xFE1
  1871                           indf2	equ	0xFDF
  1872                           postinc2	equ	0xFDE
  1873                           postdec2	equ	0xFDD
  1874                           plusw2	equ	0xFDB
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879                           	psect	dataBANK1
  1880  000144                     __pdataBANK1:
  1881                           	opt stack 0
  1882  000144                     projMain@NO_OF_DAYS_IN_A_MONTH:
  1883                           	opt stack 0
  1884  000144                     	ds	24
  1885  00015C                     GetDay@t:
  1886                           	opt stack 0
  1887  00015C                     	ds	24
  1888                           tosu	equ	0xFFF
  1889                           tosh	equ	0xFFE
  1890                           tosl	equ	0xFFD
  1891                           pclath	equ	0xFFA
  1892                           tblptru	equ	0xFF8
  1893                           tblptrh	equ	0xFF7
  1894                           tblptrl	equ	0xFF6
  1895                           tablat	equ	0xFF5
  1896                           prodh	equ	0xFF4
  1897                           prodl	equ	0xFF3
  1898                           intcon	equ	0xFF2
  1899                           postinc0	equ	0xFEE
  1900                           plusw0	equ	0xFEB
  1901                           wreg	equ	0xFE8
  1902                           indf1	equ	0xFE7
  1903                           postinc1	equ	0xFE6
  1904                           postdec1	equ	0xFE5
  1905                           plusw1	equ	0xFE3
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           postdec2	equ	0xFDD
  1911                           plusw2	equ	0xFDB
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916                           	psect	bssBANK2
  1917  000200                     __pbssBANK2:
  1918                           	opt stack 0
  1919  000200                     _EVENTS:
  1920                           	opt stack 0
  1921  000200                     	ds	240
  1922                           tosu	equ	0xFFF
  1923                           tosh	equ	0xFFE
  1924                           tosl	equ	0xFFD
  1925                           pclath	equ	0xFFA
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           prodh	equ	0xFF4
  1931                           prodl	equ	0xFF3
  1932                           intcon	equ	0xFF2
  1933                           postinc0	equ	0xFEE
  1934                           plusw0	equ	0xFEB
  1935                           wreg	equ	0xFE8
  1936                           indf1	equ	0xFE7
  1937                           postinc1	equ	0xFE6
  1938                           postdec1	equ	0xFE5
  1939                           plusw1	equ	0xFE3
  1940                           fsr1h	equ	0xFE2
  1941                           fsr1l	equ	0xFE1
  1942                           indf2	equ	0xFDF
  1943                           postinc2	equ	0xFDE
  1944                           postdec2	equ	0xFDD
  1945                           plusw2	equ	0xFDB
  1946                           fsr2h	equ	0xFDA
  1947                           fsr2l	equ	0xFD9
  1948                           status	equ	0xFD8
  1949                           
  1950                           	psect	bssBIGRAM
  1951  0006F0                     __pbssBIGRAM:
  1952                           	opt stack 0
  1953  0006F0                     _STATES:
  1954                           	opt stack 0
  1955  0006F0                     	ds	960
  1956                           tosu	equ	0xFFF
  1957                           tosh	equ	0xFFE
  1958                           tosl	equ	0xFFD
  1959                           pclath	equ	0xFFA
  1960                           tblptru	equ	0xFF8
  1961                           tblptrh	equ	0xFF7
  1962                           tblptrl	equ	0xFF6
  1963                           tablat	equ	0xFF5
  1964                           prodh	equ	0xFF4
  1965                           prodl	equ	0xFF3
  1966                           intcon	equ	0xFF2
  1967                           postinc0	equ	0xFEE
  1968                           plusw0	equ	0xFEB
  1969                           wreg	equ	0xFE8
  1970                           indf1	equ	0xFE7
  1971                           postinc1	equ	0xFE6
  1972                           postdec1	equ	0xFE5
  1973                           plusw1	equ	0xFE3
  1974                           fsr1h	equ	0xFE2
  1975                           fsr1l	equ	0xFE1
  1976                           indf2	equ	0xFDF
  1977                           postinc2	equ	0xFDE
  1978                           postdec2	equ	0xFDD
  1979                           plusw2	equ	0xFDB
  1980                           fsr2h	equ	0xFDA
  1981                           fsr2l	equ	0xFD9
  1982                           status	equ	0xFD8
  1983                           
  1984                           	psect	dataBIGRAM
  1985  0002F0                     __pdataBIGRAM:
  1986                           	opt stack 0
  1987  0002F0                     _EE_Settings:
  1988                           	opt stack 0
  1989  0002F0                     	ds	1024
  1990                           tosu	equ	0xFFF
  1991                           tosh	equ	0xFFE
  1992                           tosl	equ	0xFFD
  1993                           pclath	equ	0xFFA
  1994                           tblptru	equ	0xFF8
  1995                           tblptrh	equ	0xFF7
  1996                           tblptrl	equ	0xFF6
  1997                           tablat	equ	0xFF5
  1998                           prodh	equ	0xFF4
  1999                           prodl	equ	0xFF3
  2000                           intcon	equ	0xFF2
  2001                           postinc0	equ	0xFEE
  2002                           plusw0	equ	0xFEB
  2003                           wreg	equ	0xFE8
  2004                           indf1	equ	0xFE7
  2005                           postinc1	equ	0xFE6
  2006                           postdec1	equ	0xFE5
  2007                           plusw1	equ	0xFE3
  2008                           fsr1h	equ	0xFE2
  2009                           fsr1l	equ	0xFE1
  2010                           indf2	equ	0xFDF
  2011                           postinc2	equ	0xFDE
  2012                           postdec2	equ	0xFDD
  2013                           plusw2	equ	0xFDB
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018                           	psect	cstackBANK0
  2019  000060                     __pcstackBANK0:
  2020                           	opt stack 0
  2021  000060                     ??_Lcd_CharCP:
  2022  000060                     ??_Lcd_Delay5500us:
  2023  000060                     ??_Lcd_Command:
  2024  000060                     ??_TestGPSStartCondition:
  2025  000060                     ?___wmul:
  2026                           	opt stack 0
  2027  000060                     ?___awdiv:
  2028                           	opt stack 0
  2029  000060                     ?___lwmod:
  2030                           	opt stack 0
  2031  000060                     ?___lmul:
  2032                           	opt stack 0
  2033  000060                     ?___aldiv:
  2034                           	opt stack 0
  2035  000060                     ReadGPSDateTime@Date:
  2036                           	opt stack 0
  2037  000060                     ValidateDateTime@Date:
  2038                           	opt stack 0
  2039  000060                     PIN_MANAGER_Initialize@state:
  2040                           	opt stack 0
  2041  000060                     ReadEeprom@Address:
  2042                           	opt stack 0
  2043  000060                     WriteEeprom@Add:
  2044                           	opt stack 0
  2045  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  2046                           	opt stack 0
  2047  000060                     ___wmul@multiplier:
  2048                           	opt stack 0
  2049  000060                     ___awdiv@dividend:
  2050                           	opt stack 0
  2051  000060                     ___lwmod@dividend:
  2052                           	opt stack 0
  2053  000060                     VerifyForGPSOnTIme@TimeDiff:
  2054                           	opt stack 0
  2055  000060                     ___lmul@multiplier:
  2056                           	opt stack 0
  2057  000060                     ___aldiv@dividend:
  2058                           	opt stack 0
  2059                           
  2060                           ; 4 bytes @ 0x0
  2061  000060                     	ds	1
  2062  000061                     ReadGPSDateTime@Time:
  2063                           	opt stack 0
  2064  000061                     ValidateDateTime@Time:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x1
  2068  000061                     	ds	1
  2069  000062                     ??_TMR0_Initialize:
  2070  000062                     ??_ReadGPSDateTime:
  2071  000062                     ??_ValidateDateTime:
  2072  000062                     Lcd_CharCP@c:
  2073                           	opt stack 0
  2074  000062                     Lcd_Command@command:
  2075                           	opt stack 0
  2076  000062                     WriteEeprom@Data:
  2077                           	opt stack 0
  2078  000062                     ___wmul@multiplicand:
  2079                           	opt stack 0
  2080  000062                     ___awdiv@divisor:
  2081                           	opt stack 0
  2082  000062                     ___lwmod@divisor:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x2
  2086  000062                     	ds	1
  2087  000063                     ValidateDateTime@Item:
  2088                           	opt stack 0
  2089  000063                     Lcd_Init@data:
  2090                           	opt stack 0
  2091  000063                     WriteEeprom@Address:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x3
  2095  000063                     	ds	1
  2096  000064                     ___awdiv@counter:
  2097                           	opt stack 0
  2098  000064                     ___lwmod@counter:
  2099                           	opt stack 0
  2100  000064                     ___wmul@product:
  2101                           	opt stack 0
  2102  000064                     ___lmul@multiplicand:
  2103                           	opt stack 0
  2104  000064                     ___aldiv@divisor:
  2105                           	opt stack 0
  2106                           
  2107                           ; 4 bytes @ 0x4
  2108  000064                     	ds	1
  2109  000065                     ?_IncreaseByAYear:
  2110                           	opt stack 0
  2111  000065                     ?_DecreaseByAYear:
  2112                           	opt stack 0
  2113  000065                     ___awdiv@sign:
  2114                           	opt stack 0
  2115  000065                     IncreaseByAYear@dt:
  2116                           	opt stack 0
  2117  000065                     DecreaseByAYear@dt:
  2118                           	opt stack 0
  2119                           
  2120                           ; 11 bytes @ 0x5
  2121  000065                     	ds	1
  2122  000066                     ??_LoadCyclesFromEeprom:
  2123  000066                     ??_GetEventNumber:
  2124  000066                     ___awdiv@quotient:
  2125                           	opt stack 0
  2126  000066                     LoadSettingsFromEeprom@Temp32:
  2127                           	opt stack 0
  2128  000066                     ReadGPSDateTime@StartCode:
  2129                           	opt stack 0
  2130                           
  2131                           ; 8 bytes @ 0x6
  2132  000066                     	ds	2
  2133  000068                     ??_LoadStatesFromEeprom:
  2134  000068                     ?___awmod:
  2135                           	opt stack 0
  2136  000068                     ___aldiv@counter:
  2137                           	opt stack 0
  2138  000068                     ___awmod@dividend:
  2139                           	opt stack 0
  2140  000068                     ___lmul@product:
  2141                           	opt stack 0
  2142                           
  2143                           ; 4 bytes @ 0x8
  2144  000068                     	ds	1
  2145  000069                     ___aldiv@sign:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x9
  2149  000069                     	ds	1
  2150  00006A                     LoadSettingsFromEeprom@Temp16:
  2151                           	opt stack 0
  2152  00006A                     ___awmod@divisor:
  2153                           	opt stack 0
  2154  00006A                     ___aldiv@quotient:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0xA
  2158  00006A                     	ds	1
  2159  00006B                     LoadStatesFromEeprom@AddAudioNormal:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0xB
  2163  00006B                     	ds	1
  2164  00006C                     ??_LoadEventsFromEeprom:
  2165  00006C                     ?_TimeTextToSecond:
  2166                           	opt stack 0
  2167  00006C                     TimeTextToSecond@Time:
  2168                           	opt stack 0
  2169  00006C                     ___awmod@counter:
  2170                           	opt stack 0
  2171  00006C                     LoadSettingsFromEeprom@Address:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0xC
  2175  00006C                     	ds	1
  2176  00006D                     ___awmod@sign:
  2177                           	opt stack 0
  2178  00006D                     LoadStatesFromEeprom@AddAudioSpecial:
  2179                           	opt stack 0
  2180  00006D                     LoadCyclesFromEeprom@Address:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0xD
  2184  00006D                     	ds	1
  2185  00006E                     GetDay@Date:
  2186                           	opt stack 0
  2187  00006E                     Lcd_WriteChar@x:
  2188                           	opt stack 0
  2189  00006E                     ReadGPSDateTime@i:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0xE
  2193  00006E                     	ds	1
  2194  00006F                     ??_GetDay:
  2195  00006F                     Lcd_WriteChar@c:
  2196                           	opt stack 0
  2197  00006F                     LoadStatesFromEeprom@TempNormalAdd:
  2198                           	opt stack 0
  2199  00006F                     LoadCyclesFromEeprom@j:
  2200                           	opt stack 0
  2201  00006F                     GetEventNumber@i:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0xF
  2205  00006F                     	ds	1
  2206  000070                     ??_TimeTextToSecond:
  2207  000070                     ?_IncreaseByAMonth:
  2208                           	opt stack 0
  2209  000070                     ?_DecreaseByAMonth:
  2210                           	opt stack 0
  2211  000070                     ReadGPSDateTime@Commas:
  2212                           	opt stack 0
  2213  000070                     Lcd_WriteChar@y:
  2214                           	opt stack 0
  2215  000070                     IncreaseByAMonth@dt:
  2216                           	opt stack 0
  2217  000070                     DecreaseByAMonth@dt:
  2218                           	opt stack 0
  2219                           
  2220                           ; 11 bytes @ 0x10
  2221  000070                     	ds	1
  2222  000071                     ReadGPSDateTime@TempChar:
  2223                           	opt stack 0
  2224  000071                     Lcd_WriteChar@data:
  2225                           	opt stack 0
  2226  000071                     LoadStatesFromEeprom@TempSpecialAdd:
  2227                           	opt stack 0
  2228  000071                     LoadCyclesFromEeprom@i:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x11
  2232  000071                     	ds	1
  2233  000072                     ReadGPSDateTime@Pos:
  2234                           	opt stack 0
  2235  000072                     WriteLongInt@x:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x12
  2239  000072                     	ds	1
  2240  000073                     LoadStatesFromEeprom@AudAddInc:
  2241                           	opt stack 0
  2242  000073                     LoadCyclesFromEeprom@i_1467:
  2243                           	opt stack 0
  2244  000073                     WriteLongInt@Val:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0x13
  2248  000073                     	ds	1
  2249  000074                     LoadEventsFromEeprom@i:
  2250                           	opt stack 0
  2251  000074                     LoadStatesFromEeprom@j:
  2252                           	opt stack 0
  2253                           
  2254                           ; 2 bytes @ 0x14
  2255  000074                     	ds	1
  2256  000075                     GetDay@d:
  2257                           	opt stack 0
  2258                           
  2259                           ; 1 bytes @ 0x15
  2260  000075                     	ds	1
  2261  000076                     GetDay@m:
  2262                           	opt stack 0
  2263  000076                     LoadEventsFromEeprom@Address:
  2264                           	opt stack 0
  2265  000076                     LoadStatesFromEeprom@j_1402:
  2266                           	opt stack 0
  2267                           
  2268                           ; 2 bytes @ 0x16
  2269  000076                     	ds	1
  2270  000077                     WriteLongInt@size:
  2271                           	opt stack 0
  2272  000077                     GetDay@y:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x17
  2276  000077                     	ds	1
  2277  000078                     WriteLongInt@Sign:
  2278                           	opt stack 0
  2279  000078                     LoadEventsFromEeprom@Temp16:
  2280                           	opt stack 0
  2281  000078                     LoadStatesFromEeprom@AddStates:
  2282                           	opt stack 0
  2283                           
  2284                           ; 2 bytes @ 0x18
  2285  000078                     	ds	1
  2286  000079                     WriteLongInt@POS:
  2287                           	opt stack 0
  2288                           
  2289                           ; 1 bytes @ 0x19
  2290  000079                     	ds	1
  2291  00007A                     WriteLongInt@y:
  2292                           	opt stack 0
  2293  00007A                     LoadStatesFromEeprom@i:
  2294                           	opt stack 0
  2295                           
  2296                           ; 2 bytes @ 0x1A
  2297  00007A                     	ds	1
  2298  00007B                     ?_IncreaseByADay:
  2299                           	opt stack 0
  2300  00007B                     ?_DecreaseByADay:
  2301                           	opt stack 0
  2302  00007B                     IncreaseByADay@dt:
  2303                           	opt stack 0
  2304  00007B                     DecreaseByADay@dt:
  2305                           	opt stack 0
  2306                           
  2307                           ; 11 bytes @ 0x1B
  2308  00007B                     	ds	1
  2309  00007C                     
  2310                           ; 1 bytes @ 0x1C
  2311  00007C                     	ds	4
  2312  000080                     TimeTextToSecond@Second:
  2313                           	opt stack 0
  2314                           
  2315                           ; 4 bytes @ 0x20
  2316  000080                     	ds	6
  2317  000086                     ??_IncreaseByADay:
  2318  000086                     ??_DecreaseByADay:
  2319                           
  2320                           ; 1 bytes @ 0x26
  2321  000086                     	ds	1
  2322  000087                     DecreaseByADay@MonthDays:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x27
  2326  000087                     	ds	1
  2327  000088                     IncreaseByADay@MonthDays:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x28
  2331  000088                     	ds	1
  2332  000089                     ?_AdjustDayLightSaving:
  2333                           	opt stack 0
  2334  000089                     AdjustDayLightSaving@dt:
  2335                           	opt stack 0
  2336                           
  2337                           ; 11 bytes @ 0x29
  2338  000089                     	ds	11
  2339  000094                     AdjustDayLightSaving@Start:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x34
  2343  000094                     	ds	2
  2344  000096                     AdjustDayLightSaving@End:
  2345                           	opt stack 0
  2346                           
  2347                           ; 2 bytes @ 0x36
  2348  000096                     	ds	2
  2349  000098                     AdjustDayLightSaving@Present:
  2350                           	opt stack 0
  2351                           
  2352                           ; 2 bytes @ 0x38
  2353  000098                     	ds	2
  2354  00009A                     ??_ReadGPS_DATE_TIME:
  2355                           
  2356                           ; 1 bytes @ 0x3A
  2357  00009A                     	ds	4
  2358  00009E                     ReadGPS_DATE_TIME@Time:
  2359                           	opt stack 0
  2360                           
  2361                           ; 7 bytes @ 0x3E
  2362  00009E                     	ds	7
  2363  0000A5                     ReadGPS_DATE_TIME@Date:
  2364                           	opt stack 0
  2365                           
  2366                           ; 7 bytes @ 0x45
  2367  0000A5                     	ds	7
  2368  0000AC                     ReadGPS_DATE_TIME@IsValidGPS:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x4C
  2372  0000AC                     	ds	1
  2373  0000AD                     ReadGPS_DATE_TIME@TempItr:
  2374                           	opt stack 0
  2375                           
  2376                           ; 1 bytes @ 0x4D
  2377  0000AD                     	ds	1
  2378  0000AE                     ??_main:
  2379                           
  2380                           ; 1 bytes @ 0x4E
  2381  0000AE                     	ds	2
  2382  0000B0                     main@i:
  2383                           	opt stack 0
  2384                           
  2385                           ; 2 bytes @ 0x50
  2386  0000B0                     	ds	2
  2387                           tosu	equ	0xFFF
  2388                           tosh	equ	0xFFE
  2389                           tosl	equ	0xFFD
  2390                           pclath	equ	0xFFA
  2391                           tblptru	equ	0xFF8
  2392                           tblptrh	equ	0xFF7
  2393                           tblptrl	equ	0xFF6
  2394                           tablat	equ	0xFF5
  2395                           prodh	equ	0xFF4
  2396                           prodl	equ	0xFF3
  2397                           intcon	equ	0xFF2
  2398                           postinc0	equ	0xFEE
  2399                           plusw0	equ	0xFEB
  2400                           wreg	equ	0xFE8
  2401                           indf1	equ	0xFE7
  2402                           postinc1	equ	0xFE6
  2403                           postdec1	equ	0xFE5
  2404                           plusw1	equ	0xFE3
  2405                           fsr1h	equ	0xFE2
  2406                           fsr1l	equ	0xFE1
  2407                           indf2	equ	0xFDF
  2408                           postinc2	equ	0xFDE
  2409                           postdec2	equ	0xFDD
  2410                           plusw2	equ	0xFDB
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415                           	psect	cstackCOMRAM
  2416  000001                     __pcstackCOMRAM:
  2417                           	opt stack 0
  2418  000001                     ?i2___lwmod:
  2419                           	opt stack 0
  2420  000001                     ?___ftpack:
  2421                           	opt stack 0
  2422  000001                     ?___almod:
  2423                           	opt stack 0
  2424  000001                     i2___lwmod@dividend:
  2425                           	opt stack 0
  2426  000001                     ___ftpack@arg:
  2427                           	opt stack 0
  2428  000001                     ___almod@dividend:
  2429                           	opt stack 0
  2430                           
  2431                           ; 4 bytes @ 0x0
  2432  000001                     	ds	2
  2433  000003                     i2___lwmod@divisor:
  2434                           	opt stack 0
  2435                           
  2436                           ; 2 bytes @ 0x2
  2437  000003                     	ds	1
  2438  000004                     ___ftpack@exp:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x3
  2442  000004                     	ds	1
  2443  000005                     ___ftpack@sign:
  2444                           	opt stack 0
  2445  000005                     i2___lwmod@counter:
  2446                           	opt stack 0
  2447  000005                     ___almod@divisor:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x4
  2451  000005                     	ds	1
  2452  000006                     ??___ftpack:
  2453  000006                     ?i2_IncreaseByAYear:
  2454                           	opt stack 0
  2455  000006                     i2IncreaseByAYear@dt:
  2456                           	opt stack 0
  2457                           
  2458                           ; 11 bytes @ 0x5
  2459  000006                     	ds	3
  2460  000009                     ?___lbtoft:
  2461                           	opt stack 0
  2462  000009                     ___almod@counter:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x8
  2466  000009                     	ds	1
  2467  00000A                     ___almod@sign:
  2468                           	opt stack 0
  2469                           
  2470                           ; 1 bytes @ 0x9
  2471  00000A                     	ds	2
  2472  00000C                     ___lbtoft@c:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0xB
  2476  00000C                     	ds	1
  2477  00000D                     ?___ftmul:
  2478                           	opt stack 0
  2479  00000D                     ___ftmul@f1:
  2480                           	opt stack 0
  2481                           
  2482                           ; 3 bytes @ 0xC
  2483  00000D                     	ds	3
  2484  000010                     ___ftmul@f2:
  2485                           	opt stack 0
  2486                           
  2487                           ; 3 bytes @ 0xF
  2488  000010                     	ds	1
  2489  000011                     ?i2_IncreaseByAMonth:
  2490                           	opt stack 0
  2491  000011                     i2IncreaseByAMonth@dt:
  2492                           	opt stack 0
  2493                           
  2494                           ; 11 bytes @ 0x10
  2495  000011                     	ds	2
  2496  000013                     ??___ftmul:
  2497                           
  2498                           ; 1 bytes @ 0x12
  2499  000013                     	ds	3
  2500  000016                     ___ftmul@exp:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x15
  2504  000016                     	ds	1
  2505  000017                     ___ftmul@f3_as_product:
  2506                           	opt stack 0
  2507                           
  2508                           ; 3 bytes @ 0x16
  2509  000017                     	ds	3
  2510  00001A                     ___ftmul@cntr:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x19
  2514  00001A                     	ds	1
  2515  00001B                     ___ftmul@sign:
  2516                           	opt stack 0
  2517                           
  2518                           ; 1 bytes @ 0x1A
  2519  00001B                     	ds	1
  2520  00001C                     ?___fttol:
  2521                           	opt stack 0
  2522  00001C                     ?i2_IncreaseByADay:
  2523                           	opt stack 0
  2524  00001C                     ___fttol@f1:
  2525                           	opt stack 0
  2526  00001C                     i2IncreaseByADay@dt:
  2527                           	opt stack 0
  2528                           
  2529                           ; 11 bytes @ 0x1B
  2530  00001C                     	ds	4
  2531  000020                     ??___fttol:
  2532                           
  2533                           ; 1 bytes @ 0x1F
  2534  000020                     	ds	5
  2535  000025                     ___fttol@sign1:
  2536                           	opt stack 0
  2537                           
  2538                           ; 1 bytes @ 0x24
  2539  000025                     	ds	1
  2540  000026                     ___fttol@lval:
  2541                           	opt stack 0
  2542                           
  2543                           ; 4 bytes @ 0x25
  2544  000026                     	ds	1
  2545  000027                     ??i2_IncreaseByADay:
  2546                           
  2547                           ; 1 bytes @ 0x26
  2548  000027                     	ds	2
  2549  000029                     i2IncreaseByADay@MonthDays:
  2550                           	opt stack 0
  2551                           
  2552                           ; 1 bytes @ 0x28
  2553  000029                     	ds	1
  2554  00002A                     ?_IncreaseByASecond:
  2555                           	opt stack 0
  2556  00002A                     ___fttol@exp1:
  2557                           	opt stack 0
  2558  00002A                     IncreaseByASecond@dt:
  2559                           	opt stack 0
  2560                           
  2561                           ; 11 bytes @ 0x29
  2562  00002A                     	ds	11
  2563  000035                     ??_Timer0_10ms:
  2564  000035                     
  2565                           ; 1 bytes @ 0x34
  2566  000035                     	ds	5
  2567  00003A                     Timer0_10ms@ThisCycle_2914:
  2568                           	opt stack 0
  2569                           
  2570                           ; 1 bytes @ 0x39
  2571  00003A                     	ds	1
  2572  00003B                     Timer0_10ms@i:
  2573                           	opt stack 0
  2574                           
  2575                           ; 1 bytes @ 0x3A
  2576  00003B                     	ds	1
  2577  00003C                     Timer0_10ms@OutForThePorts:
  2578                           	opt stack 0
  2579                           
  2580                           ; 2 bytes @ 0x3B
  2581  00003C                     	ds	2
  2582  00003E                     Timer0_10ms@ThisCycle:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x3D
  2586  00003E                     	ds	1
  2587  00003F                     Timer0_10ms@i_2909:
  2588                           	opt stack 0
  2589                           
  2590                           ; 1 bytes @ 0x3E
  2591  00003F                     	ds	1
  2592  000040                     Timer0_10ms@i_2910:
  2593                           	opt stack 0
  2594                           
  2595                           ; 1 bytes @ 0x3F
  2596  000040                     	ds	1
  2597  000041                     Timer0_10ms@i_2911:
  2598                           	opt stack 0
  2599                           
  2600                           ; 1 bytes @ 0x40
  2601  000041                     	ds	1
  2602  000042                     ??_INTERRUPT_InterruptManager:
  2603                           
  2604                           ; 1 bytes @ 0x41
  2605  000042                     	ds	10
  2606                           tosu	equ	0xFFF
  2607                           tosh	equ	0xFFE
  2608                           tosl	equ	0xFFD
  2609                           pclath	equ	0xFFA
  2610                           tblptru	equ	0xFF8
  2611                           tblptrh	equ	0xFF7
  2612                           tblptrl	equ	0xFF6
  2613                           tablat	equ	0xFF5
  2614                           prodh	equ	0xFF4
  2615                           prodl	equ	0xFF3
  2616                           intcon	equ	0xFF2
  2617                           postinc0	equ	0xFEE
  2618                           plusw0	equ	0xFEB
  2619                           wreg	equ	0xFE8
  2620                           indf1	equ	0xFE7
  2621                           postinc1	equ	0xFE6
  2622                           postdec1	equ	0xFE5
  2623                           plusw1	equ	0xFE3
  2624                           fsr1h	equ	0xFE2
  2625                           fsr1l	equ	0xFE1
  2626                           indf2	equ	0xFDF
  2627                           postinc2	equ	0xFDE
  2628                           postdec2	equ	0xFDD
  2629                           plusw2	equ	0xFDB
  2630                           fsr2h	equ	0xFDA
  2631                           fsr2l	equ	0xFD9
  2632                           status	equ	0xFD8
  2633                           
  2634 ;;
  2635 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2636 ;;
  2637 ;; *************** function _main *****************
  2638 ;; Defined at:
  2639 ;;		line 53 in file "main.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;  i               2   80[BANK0 ] short 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 3F/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2657 ;;Total ram usage:        4 bytes
  2658 ;; Hardware stack levels required when called:   16
  2659 ;; This function calls:
  2660 ;;		_GetEventNumber
  2661 ;;		_GetThisCycle
  2662 ;;		_Lcd_Init
  2663 ;;		_LoadAllFromEeprom
  2664 ;;		_ReadGPS
  2665 ;;		_SYSTEM_Initialize
  2666 ;;		_StopGPS
  2667 ;;		_SwitchOnGPS
  2668 ;;		_TMR0_SetInterruptHandler
  2669 ;;		_TestGPSStartCondition
  2670 ;;		_VerifyForGPSOnTIme
  2671 ;;		_WriteEeprom
  2672 ;;		_WriteLongInt
  2673 ;; This function is called by:
  2674 ;;		Startup code after reset
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           	psect	text0
  2679  001D3E                     __ptext0:
  2680                           	opt stack 0
  2681  001D3E                     _main:
  2682                           	opt stack 15
  2683                           
  2684                           ;main.c: 56: SYSTEM_Initialize();
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;incstack = 0
  2688  001D3E  ECF6  F01A         	call	_SYSTEM_Initialize	;wreg free
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 87: (INTCONbits.GIE = 1);
  2692  001D42  8EF2               	bsf	intcon,7,c	;volatile
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;main.c: 88: (INTCONbits.PEIE = 1);
  2696  001D44  8CF2               	bsf	intcon,6,c	;volatile
  2697                           
  2698                           ;main.c: 89: TMR0_SetInterruptHandler(Timer0_10ms);
  2699  001D46  0E0A               	movlw	low _Timer0_10ms
  2700  001D48  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  2701  001D4A  0E13               	movlw	high _Timer0_10ms
  2702  001D4C  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  2703  001D4E  EC46  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;main.c: 91: for (INT16 i=0; i<1024; i++)
  2707  001D52  6BB0               	clrf	main@i& (0+255),b
  2708  001D54  6BB1               	clrf	(main@i+1)& (0+255),b
  2709  001D56                     l4876:
  2710                           
  2711                           ; BSR set to: 0
  2712                           ;main.c: 92: WriteEeprom(i,EE_Settings[i]);
  2713  001D56  C0B0  F060         	movff	main@i,WriteEeprom@Add
  2714  001D5A  C0B1  F061         	movff	main@i+1,WriteEeprom@Add+1
  2715  001D5E  0EF0               	movlw	low _EE_Settings
  2716  001D60  25B0               	addwf	main@i& (0+255),w,b
  2717  001D62  6ED9               	movwf	fsr2l,c
  2718  001D64  0E02               	movlw	high _EE_Settings
  2719  001D66  21B1               	addwfc	(main@i+1)& (0+255),w,b
  2720  001D68  6EDA               	movwf	fsr2h,c
  2721  001D6A  50DF               	movf	indf2,w,c
  2722  001D6C  6F62               	movwf	WriteEeprom@Data& (0+255),b
  2723  001D6E  EC6E  F01A         	call	_WriteEeprom	;wreg free
  2724                           
  2725                           ; BSR set to: 0
  2726  001D72  4BB0               	infsnz	main@i& (0+255),f,b
  2727  001D74  2BB1               	incf	(main@i+1)& (0+255),f,b
  2728                           
  2729                           ; BSR set to: 0
  2730  001D76  BFB1               	btfsc	(main@i+1)& (0+255),7,b
  2731  001D78  D7EE               	goto	l4876
  2732  001D7A  0E04               	movlw	4
  2733  001D7C  5DB1               	subwf	(main@i+1)& (0+255),w,b
  2734  001D7E  E3EB               	bnc	l4876
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;main.c: 94: LoadAllFromEeprom();
  2738  001D80  EC30  F01B         	call	_LoadAllFromEeprom	;wreg free
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;main.c: 96: Lcd_Init();
  2742  001D84  EC00  F017         	call	_Lcd_Init	;wreg free
  2743                           
  2744                           ;main.c: 100: DATE_TIME.SECOND = 42013;
  2745  001D88  0E1D               	movlw	29
  2746  001D8A  0100               	movlb	0	; () banked
  2747  001D8C  6FBD               	movwf	_DATE_TIME& (0+255),b
  2748  001D8E  0EA4               	movlw	164
  2749  001D90  6FBE               	movwf	(_DATE_TIME+1)& (0+255),b
  2750  001D92  6BBF               	clrf	(_DATE_TIME+2)& (0+255),b
  2751  001D94  6BC0               	clrf	(_DATE_TIME+3)& (0+255),b
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;main.c: 101: DATE_TIME.YEAR = 2017;
  2755  001D96  0E07               	movlw	7
  2756  001D98  6FC7               	movwf	(_DATE_TIME+10)& (0+255),b
  2757  001D9A  0EE1               	movlw	225
  2758  001D9C  6FC6               	movwf	(_DATE_TIME+9)& (0+255),b
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;main.c: 102: DATE_TIME.DATE.Day = 1;
  2762  001D9E  6BC2               	clrf	(_DATE_TIME+5)& (0+255),b
  2763  001DA0  0E01               	movlw	1
  2764  001DA2  6FC1               	movwf	(_DATE_TIME+4)& (0+255),b
  2765                           
  2766                           ; BSR set to: 0
  2767                           ;main.c: 103: DATE_TIME.DATE.Month = 1;
  2768  001DA4  6BC4               	clrf	(_DATE_TIME+7)& (0+255),b
  2769  001DA6  6FC3               	movwf	(_DATE_TIME+6)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;main.c: 104: DATE_TIME.DAY.Val = 0x40;
  2773  001DA8  51C5               	movf	(_DATE_TIME+8)& (0+255),w,b
  2774  001DAA  0B01               	andlw	-255
  2775  001DAC  0980               	iorlw	128
  2776  001DAE  6FC5               	movwf	(_DATE_TIME+8)& (0+255),b
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;main.c: 106: if (GPS_SYNC_AT_START == 1)
  2780  001DB0  05EB               	decf	_GPS_SYNC_AT_START& (0+255),w,b
  2781  001DB2  E101               	bnz	l1033
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 107: FLAGS_0.bits.b0 = SET;
  2785  001DB4  81E6               	bsf	_FLAGS_0& (0+255),0,b
  2786  001DB6                     l1033:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;main.c: 108: LATCbits.LC0 = OFF;
  2790  001DB6  9085               	bcf	3973,0,c	;volatile
  2791  001DB8                     l1034:
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 112: {
  2795                           ;main.c: 114: if (FLAGS_0.bits.b0) SwitchOnGPS();
  2796  001DB8  B1E6               	btfsc	_FLAGS_0& (0+255),0,b
  2797                           
  2798                           ; BSR set to: 0
  2799  001DBA  EC38  F01B         	call	_SwitchOnGPS	;wreg free
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;main.c: 115: if (FLAGS_0.bits.b1) VerifyForGPSOnTIme();
  2803  001DBE  B3E6               	btfsc	_FLAGS_0& (0+255),1,b
  2804                           
  2805                           ; BSR set to: 0
  2806  001DC0  EC7A  F019         	call	_VerifyForGPSOnTIme	;wreg free
  2807                           
  2808                           ; BSR set to: 0
  2809                           ;main.c: 116: if (FLAGS_0.bits.b2) ReadGPS();
  2810  001DC4  B5E6               	btfsc	_FLAGS_0& (0+255),2,b
  2811                           
  2812                           ; BSR set to: 0
  2813  001DC6  EC83  F018         	call	_ReadGPS	;wreg free
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;main.c: 117: if (FLAGS_0.bits.b3) StopGPS();
  2817  001DCA  B7E6               	btfsc	_FLAGS_0& (0+255),3,b
  2818                           
  2819                           ; BSR set to: 0
  2820  001DCC  EC57  F01B         	call	_StopGPS	;wreg free
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 118: TestGPSStartCondition();
  2824  001DD0  EC1B  F01A         	call	_TestGPSStartCondition	;wreg free
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;main.c: 119: NEXT_EVENT = GetEventNumber();
  2828  001DD4  EC05  F011         	call	_GetEventNumber	;wreg free
  2829  001DD8  6E5D               	movwf	_NEXT_EVENT,c
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;main.c: 136: WriteLongInt(1, 1, DATE_TIME.SECOND, 6, 1);
  2833  001DDA  0E01               	movlw	1
  2834  001DDC  6F72               	movwf	WriteLongInt@x& (0+255),b
  2835  001DDE  C0BD  F073         	movff	_DATE_TIME,WriteLongInt@Val
  2836  001DE2  C0BE  F074         	movff	_DATE_TIME+1,WriteLongInt@Val+1
  2837  001DE6  C0BF  F075         	movff	_DATE_TIME+2,WriteLongInt@Val+2
  2838  001DEA  C0C0  F076         	movff	_DATE_TIME+3,WriteLongInt@Val+3
  2839  001DEE  0E06               	movlw	6
  2840  001DF0  6F77               	movwf	WriteLongInt@size& (0+255),b
  2841  001DF2  0E01               	movlw	1
  2842  001DF4  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2843  001DF6  ECE6  F015         	call	_WriteLongInt
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 137: WriteLongInt(1, 9, PRESENT_STATE, 3, 1);
  2847  001DFA  0E09               	movlw	9
  2848  001DFC  6F72               	movwf	WriteLongInt@x& (0+255),b
  2849  001DFE  51EA               	movf	_PRESENT_STATE& (0+255),w,b
  2850  001E00  D839               	call	PL22	;call to abstracted procedure
  2851  001E02  ECE6  F015         	call	_WriteLongInt
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;main.c: 138: WriteLongInt(1, 13, NEXT_STATE, 3, 1);
  2855  001E06  0E0D               	movlw	13
  2856  001E08  6F72               	movwf	WriteLongInt@x& (0+255),b
  2857  001E0A  51E9               	movf	_NEXT_STATE& (0+255),w,b
  2858  001E0C  D833               	call	PL22	;call to abstracted procedure
  2859  001E0E  ECE6  F015         	call	_WriteLongInt
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;main.c: 139: WriteLongInt(2, 1, GetThisCycle(), 3, 1);
  2863  001E12  0E01               	movlw	1
  2864  001E14  6F72               	movwf	WriteLongInt@x& (0+255),b
  2865  001E16  EC4F  F01B         	call	_GetThisCycle	;wreg free
  2866  001E1A  D82C               	call	PL22	;call to abstracted procedure
  2867  001E1C  0E02               	movlw	2
  2868  001E1E  ECE6  F015         	call	_WriteLongInt
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;main.c: 140: WriteLongInt(2, 5, CYCLES[GetThisCycle()].PERIOD, 3, 1);
  2872  001E22  0E05               	movlw	5
  2873  001E24  6F72               	movwf	WriteLongInt@x& (0+255),b
  2874  001E26  EC4F  F01B         	call	_GetThisCycle	;wreg free
  2875  001E2A  ECF5  F00A         	call	PL36	;call to abstracted procedure
  2876  001E2E  CFDE F0AE          	movff	postinc2,??_main
  2877  001E32  CFDD F0AF          	movff	postdec2,??_main+1
  2878  001E36  C0AE  F073         	movff	??_main,WriteLongInt@Val
  2879  001E3A  C0AF  F074         	movff	??_main+1,WriteLongInt@Val+1
  2880  001E3E  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  2881  001E40  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  2882  001E42  D821               	call	PL60	;call to abstracted procedure
  2883  001E44  ECE6  F015         	call	_WriteLongInt
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;main.c: 141: WriteLongInt(2, 9, STATE_SECONDS_REMAINING, 3, 1);
  2887  001E48  0E09               	movlw	9
  2888  001E4A  6F72               	movwf	WriteLongInt@x& (0+255),b
  2889  001E4C  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
  2890  001E4E  D812               	call	PL22	;call to abstracted procedure
  2891  001E50  0E02               	movlw	2
  2892  001E52  ECE6  F015         	call	_WriteLongInt
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;main.c: 142: WriteLongInt(2, 13, SECONDS_TO_ADJUST, 3, 1);
  2896  001E56  0E0D               	movlw	13
  2897  001E58  6F72               	movwf	WriteLongInt@x& (0+255),b
  2898  001E5A  C0E2  F073         	movff	_SECONDS_TO_ADJUST,WriteLongInt@Val
  2899  001E5E  C0E3  F074         	movff	_SECONDS_TO_ADJUST+1,WriteLongInt@Val+1
  2900  001E62  0E00               	movlw	0
  2901  001E64  BF74               	btfsc	(WriteLongInt@Val+1)& (0+255),7,b
  2902  001E66  0EFF               	movlw	-1
  2903  001E68  6F75               	movwf	(WriteLongInt@Val+2)& (0+255),b
  2904  001E6A  6F76               	movwf	(WriteLongInt@Val+3)& (0+255),b
  2905  001E6C  D80C               	call	PL60	;call to abstracted procedure
  2906  001E6E  ECE6  F015         	call	_WriteLongInt
  2907  001E72  D7A2               	goto	l1034
  2908  001E74                     __end_of_main:
  2909                           	opt stack 0
  2910  001E74                     PL22:
  2911                           	opt stack 15
  2912  001E74  6F73               	movwf	WriteLongInt@Val& (0+255),b
  2913  001E76  6B74               	clrf	(WriteLongInt@Val+1)& (0+255),b
  2914  001E78  6B75               	clrf	(WriteLongInt@Val+2)& (0+255),b
  2915  001E7A  6B76               	clrf	(WriteLongInt@Val+3)& (0+255),b
  2916  001E7C  0E03               	movlw	3
  2917  001E7E  6F77               	movwf	WriteLongInt@size& (0+255),b
  2918  001E80  0E01               	movlw	1
  2919  001E82  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2920  001E84  0C01               	retlw	1
  2921  001E86                     __end_ofPL22:
  2922                           	opt stack 0
  2923  001E86                     PL60:
  2924                           	opt stack 15
  2925  001E86  0E03               	movlw	3
  2926  001E88  6F77               	movwf	WriteLongInt@size& (0+255),b
  2927  001E8A  0E01               	movlw	1
  2928  001E8C  6F78               	movwf	WriteLongInt@Sign& (0+255),b
  2929  001E8E  0C02               	retlw	2
  2930  001E90                     __end_ofPL60:
  2931                           	opt stack 0
  2932                           tosu	equ	0xFFF
  2933                           tosh	equ	0xFFE
  2934                           tosl	equ	0xFFD
  2935                           pclath	equ	0xFFA
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           intcon	equ	0xFF2
  2943                           postinc0	equ	0xFEE
  2944                           plusw0	equ	0xFEB
  2945                           wreg	equ	0xFE8
  2946                           indf1	equ	0xFE7
  2947                           postinc1	equ	0xFE6
  2948                           postdec1	equ	0xFE5
  2949                           plusw1	equ	0xFE3
  2950                           fsr1h	equ	0xFE2
  2951                           fsr1l	equ	0xFE1
  2952                           indf2	equ	0xFDF
  2953                           postinc2	equ	0xFDE
  2954                           postdec2	equ	0xFDD
  2955                           plusw2	equ	0xFDB
  2956                           fsr2h	equ	0xFDA
  2957                           fsr2l	equ	0xFD9
  2958                           status	equ	0xFD8
  2959                           
  2960 ;; *************** function _WriteLongInt *****************
  2961 ;; Defined at:
  2962 ;;		line 183 in file "libs/HD44780.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  y               1    wreg     unsigned char 
  2965 ;;  x               1   18[BANK0 ] unsigned char 
  2966 ;;  Val             4   19[BANK0 ] long 
  2967 ;;  size            1   23[BANK0 ] char 
  2968 ;;  Sign            1   24[BANK0 ] unsigned char 
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;  y               1   26[BANK0 ] unsigned char 
  2971 ;;  POS             1   25[BANK0 ] char 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      void 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 3F/0
  2978 ;;		On exit  : 3F/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2981 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2984 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2985 ;;Total ram usage:        9 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:   12
  2988 ;; This function calls:
  2989 ;;		_Lcd_WriteChar
  2990 ;;		___aldiv
  2991 ;;		___lmul
  2992 ;; This function is called by:
  2993 ;;		_main
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text1
  2998  002BCC                     __ptext1:
  2999                           	opt stack 0
  3000  002BCC                     _WriteLongInt:
  3001                           	opt stack 18
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;incstack = 0
  3005                           ;WriteLongInt@y stored from wreg
  3006  002BCC  6F7A               	movwf	WriteLongInt@y& (0+255),b
  3007                           
  3008                           ;HD44780.c: 184: int8_t POS = 0;
  3009  002BCE  0100               	movlb	0	; () banked
  3010  002BD0  6B79               	clrf	WriteLongInt@POS& (0+255),b
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;HD44780.c: 185: if (Sign) {
  3014  002BD2  5178               	movf	WriteLongInt@Sign& (0+255),w,b
  3015  002BD4  E049               	bz	l4736
  3016                           
  3017                           ; BSR set to: 0
  3018                           ;HD44780.c: 186: POS++;
  3019  002BD6  2B79               	incf	WriteLongInt@POS& (0+255),f,b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;HD44780.c: 187: if (Val<0) {
  3023  002BD8  AF76               	btfss	(WriteLongInt@Val+3)& (0+255),7,b
  3024  002BDA  D01F               	goto	l4728
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;HD44780.c: 188: Lcd_WriteChar (y, x, 0x2D);
  3028  002BDC  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  3029  002BE0  0E2D               	movlw	45
  3030  002BE2  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  3031  002BE4  517A               	movf	WriteLongInt@y& (0+255),w,b
  3032  002BE6  EC9D  F019         	call	_Lcd_WriteChar
  3033                           
  3034                           ;HD44780.c: 189: Val=-1*Val;
  3035  002BEA  C073  F060         	movff	WriteLongInt@Val,___lmul@multiplier
  3036  002BEE  C074  F061         	movff	WriteLongInt@Val+1,___lmul@multiplier+1
  3037  002BF2  C075  F062         	movff	WriteLongInt@Val+2,___lmul@multiplier+2
  3038  002BF6  C076  F063         	movff	WriteLongInt@Val+3,___lmul@multiplier+3
  3039  002BFA  0100               	movlb	0	; () banked
  3040  002BFC  6964               	setf	___lmul@multiplicand& (0+255),b
  3041  002BFE  6965               	setf	(___lmul@multiplicand+1)& (0+255),b
  3042  002C00  6966               	setf	(___lmul@multiplicand+2)& (0+255),b
  3043  002C02  6967               	setf	(___lmul@multiplicand+3)& (0+255),b
  3044  002C04  EC0A  F019         	call	___lmul	;wreg free
  3045  002C08  C060  F073         	movff	?___lmul,WriteLongInt@Val
  3046  002C0C  C061  F074         	movff	?___lmul+1,WriteLongInt@Val+1
  3047  002C10  C062  F075         	movff	?___lmul+2,WriteLongInt@Val+2
  3048  002C14  C063  F076         	movff	?___lmul+3,WriteLongInt@Val+3
  3049                           
  3050                           ;HD44780.c: 190: } else
  3051  002C18  D027               	goto	l4736
  3052  002C1A                     l4728:
  3053                           
  3054                           ; BSR set to: 0
  3055                           ;HD44780.c: 191: Lcd_WriteChar (y, x, 0x2B);
  3056  002C1A  C072  F06E         	movff	WriteLongInt@x,Lcd_WriteChar@x
  3057  002C1E  0E2B               	movlw	43
  3058  002C20  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  3059  002C22  517A               	movf	WriteLongInt@y& (0+255),w,b
  3060  002C24  EC9D  F019         	call	_Lcd_WriteChar
  3061  002C28  D01F               	goto	l4736
  3062  002C2A                     l4730:
  3063                           
  3064                           ; BSR set to: 0
  3065                           ;HD44780.c: 194: size--;
  3066  002C2A  0777               	decf	WriteLongInt@size& (0+255),f,b
  3067                           
  3068                           ; BSR set to: 0
  3069                           ;HD44780.c: 195: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  3070  002C2C  5177               	movf	WriteLongInt@size& (0+255),w,b
  3071  002C2E  2579               	addwf	WriteLongInt@POS& (0+255),w,b
  3072  002C30  2572               	addwf	WriteLongInt@x& (0+255),w,b
  3073  002C32  6F6E               	movwf	Lcd_WriteChar@x& (0+255),b
  3074  002C34  D81D               	call	PL84	;call to abstracted procedure
  3075  002C36  D825               	call	PL132	;call to abstracted procedure
  3076  002C38  EC46  F016         	call	___aldiv	;wreg free
  3077  002C3C  5160               	movf	?___aldiv& (0+255),w,b
  3078  002C3E  0DF6               	mullw	246
  3079  002C40  50F3               	movf	prodl,w,c
  3080  002C42  2573               	addwf	WriteLongInt@Val& (0+255),w,b
  3081  002C44  0F30               	addlw	48
  3082  002C46  6F6F               	movwf	Lcd_WriteChar@c& (0+255),b
  3083  002C48  517A               	movf	WriteLongInt@y& (0+255),w,b
  3084  002C4A  EC9D  F019         	call	_Lcd_WriteChar
  3085                           
  3086                           ;HD44780.c: 196: Val = Val/10;
  3087  002C4E  D810               	call	PL84	;call to abstracted procedure
  3088  002C50  0100               	movlb	0	; () banked
  3089  002C52  D817               	call	PL132	;call to abstracted procedure
  3090  002C54  EC46  F016         	call	___aldiv	;wreg free
  3091  002C58  C060  F073         	movff	?___aldiv,WriteLongInt@Val
  3092  002C5C  C061  F074         	movff	?___aldiv+1,WriteLongInt@Val+1
  3093  002C60  C062  F075         	movff	?___aldiv+2,WriteLongInt@Val+2
  3094  002C64  C063  F076         	movff	?___aldiv+3,WriteLongInt@Val+3
  3095  002C68                     l4736:
  3096  002C68  0100               	movlb	0	; () banked
  3097  002C6A  5177               	movf	WriteLongInt@size& (0+255),w,b
  3098  002C6C  E1DE               	bnz	l4730
  3099                           
  3100                           ; BSR set to: 0
  3101  002C6E  0012               	return		;funcret
  3102  002C70                     __end_of_WriteLongInt:
  3103                           	opt stack 0
  3104  002C70                     PL84:
  3105                           	opt stack 18
  3106  002C70  C073  F060         	movff	WriteLongInt@Val,___aldiv@dividend
  3107  002C74  C074  F061         	movff	WriteLongInt@Val+1,___aldiv@dividend+1
  3108  002C78  C075  F062         	movff	WriteLongInt@Val+2,___aldiv@dividend+2
  3109  002C7C  C076  F063         	movff	WriteLongInt@Val+3,___aldiv@dividend+3
  3110  002C80  0C0A               	retlw	10
  3111  002C82                     __end_ofPL84:
  3112                           	opt stack 0
  3113  002C82                     PL132:
  3114                           	opt stack 18
  3115  002C82  6F64               	movwf	___aldiv@divisor& (0+255),b
  3116  002C84  6B65               	clrf	(___aldiv@divisor+1)& (0+255),b
  3117  002C86  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  3118  002C88  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  3119  002C8A  0012               	return	
  3120  002C8C                     __end_ofPL132:
  3121                           	opt stack 0
  3122                           tosu	equ	0xFFF
  3123                           tosh	equ	0xFFE
  3124                           tosl	equ	0xFFD
  3125                           pclath	equ	0xFFA
  3126                           tblptru	equ	0xFF8
  3127                           tblptrh	equ	0xFF7
  3128                           tblptrl	equ	0xFF6
  3129                           tablat	equ	0xFF5
  3130                           prodh	equ	0xFF4
  3131                           prodl	equ	0xFF3
  3132                           intcon	equ	0xFF2
  3133                           postinc0	equ	0xFEE
  3134                           plusw0	equ	0xFEB
  3135                           wreg	equ	0xFE8
  3136                           indf1	equ	0xFE7
  3137                           postinc1	equ	0xFE6
  3138                           postdec1	equ	0xFE5
  3139                           plusw1	equ	0xFE3
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           indf2	equ	0xFDF
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           plusw2	equ	0xFDB
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function ___aldiv *****************
  3151 ;; Defined at:
  3152 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  dividend        4    0[BANK0 ] long 
  3155 ;;  divisor         4    4[BANK0 ] long 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  quotient        4   10[BANK0 ] long 
  3158 ;;  sign            1    9[BANK0 ] unsigned char 
  3159 ;;  counter         1    8[BANK0 ] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  4    0[BANK0 ] long 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2, status,0
  3164 ;; Tracked objects:
  3165 ;;		On entry : 3F/0
  3166 ;;		On exit  : 3F/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3169 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3170 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3172 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3173 ;;Total ram usage:       14 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; Hardware stack levels required when called:    9
  3176 ;; This function calls:
  3177 ;;		Nothing
  3178 ;; This function is called by:
  3179 ;;		_WriteLongInt
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text2
  3184  002C8C                     __ptext2:
  3185                           	opt stack 0
  3186  002C8C                     ___aldiv:
  3187                           	opt stack 20
  3188                           
  3189                           ; BSR set to: 0
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;incstack = 0
  3193  002C8C  6B69               	clrf	___aldiv@sign& (0+255),b
  3194                           
  3195                           ; BSR set to: 0
  3196  002C8E  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3197  002C90  D00A               	goto	l4622
  3198                           
  3199                           ; BSR set to: 0
  3200  002C92  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  3201  002C94  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  3202  002C96  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  3203  002C98  6D64               	negf	___aldiv@divisor& (0+255),b
  3204  002C9A  0E00               	movlw	0
  3205  002C9C  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  3206  002C9E  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  3207  002CA0  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  3208                           
  3209                           ; BSR set to: 0
  3210  002CA2  0E01               	movlw	1
  3211  002CA4  6F69               	movwf	___aldiv@sign& (0+255),b
  3212  002CA6                     l4622:
  3213                           
  3214                           ; BSR set to: 0
  3215  002CA6  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  3216  002CA8  D00A               	goto	l4628
  3217                           
  3218                           ; BSR set to: 0
  3219  002CAA  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  3220  002CAC  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  3221  002CAE  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  3222  002CB0  6D60               	negf	___aldiv@dividend& (0+255),b
  3223  002CB2  0E00               	movlw	0
  3224  002CB4  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  3225  002CB6  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  3226  002CB8  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  3227                           
  3228                           ; BSR set to: 0
  3229  002CBA  0E01               	movlw	1
  3230  002CBC  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  3231  002CBE                     l4628:
  3232                           
  3233                           ; BSR set to: 0
  3234  002CBE  6B6A               	clrf	___aldiv@quotient& (0+255),b
  3235  002CC0  6B6B               	clrf	(___aldiv@quotient+1)& (0+255),b
  3236  002CC2  6B6C               	clrf	(___aldiv@quotient+2)& (0+255),b
  3237  002CC4  6B6D               	clrf	(___aldiv@quotient+3)& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240  002CC6  5164               	movf	___aldiv@divisor& (0+255),w,b
  3241  002CC8  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  3242  002CCA  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  3243  002CCC  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  3244  002CCE  E029               	bz	l4650
  3245                           
  3246                           ; BSR set to: 0
  3247  002CD0  0E01               	movlw	1
  3248  002CD2  6F68               	movwf	___aldiv@counter& (0+255),b
  3249  002CD4  D006               	goto	l4636
  3250  002CD6                     l4634:
  3251                           
  3252                           ; BSR set to: 0
  3253  002CD6  90D8               	bcf	status,0,c
  3254  002CD8  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  3255  002CDA  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  3256  002CDC  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  3257  002CDE  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  3258  002CE0  2B68               	incf	___aldiv@counter& (0+255),f,b
  3259  002CE2                     l4636:
  3260                           
  3261                           ; BSR set to: 0
  3262  002CE2  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  3263  002CE4  D7F8               	goto	l4634
  3264  002CE6                     l4638:
  3265                           
  3266                           ; BSR set to: 0
  3267  002CE6  90D8               	bcf	status,0,c
  3268  002CE8  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  3269  002CEA  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  3270  002CEC  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  3271  002CEE  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  3272                           
  3273                           ; BSR set to: 0
  3274  002CF0  5164               	movf	___aldiv@divisor& (0+255),w,b
  3275  002CF2  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  3276  002CF4  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3277  002CF6  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  3278  002CF8  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3279  002CFA  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  3280  002CFC  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3281  002CFE  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  3282  002D00  E309               	bnc	l4646
  3283                           
  3284                           ; BSR set to: 0
  3285  002D02  5164               	movf	___aldiv@divisor& (0+255),w,b
  3286  002D04  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  3287  002D06  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  3288  002D08  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  3289  002D0A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  3290  002D0C  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  3291  002D0E  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  3292  002D10  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  3293                           
  3294                           ; BSR set to: 0
  3295  002D12  816A               	bsf	___aldiv@quotient& (0+255),0,b
  3296  002D14                     l4646:
  3297                           
  3298                           ; BSR set to: 0
  3299  002D14  90D8               	bcf	status,0,c
  3300  002D16  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  3301  002D18  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  3302  002D1A  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  3303  002D1C  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  3304                           
  3305                           ; BSR set to: 0
  3306  002D1E  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  3307  002D20  D7E2               	goto	l4638
  3308  002D22                     l4650:
  3309                           
  3310                           ; BSR set to: 0
  3311  002D22  5169               	movf	___aldiv@sign& (0+255),w,b
  3312  002D24  E008               	bz	l4654
  3313                           
  3314                           ; BSR set to: 0
  3315  002D26  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  3316  002D28  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  3317  002D2A  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  3318  002D2C  6D6A               	negf	___aldiv@quotient& (0+255),b
  3319  002D2E  0E00               	movlw	0
  3320  002D30  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  3321  002D32  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  3322  002D34  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  3323  002D36                     l4654:
  3324                           
  3325                           ; BSR set to: 0
  3326  002D36  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  3327  002D3A  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  3328  002D3E  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  3329  002D42  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  3330                           
  3331                           ; BSR set to: 0
  3332  002D46  0012               	return		;funcret
  3333  002D48                     __end_of___aldiv:
  3334                           	opt stack 0
  3335                           tosu	equ	0xFFF
  3336                           tosh	equ	0xFFE
  3337                           tosl	equ	0xFFD
  3338                           pclath	equ	0xFFA
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           prodh	equ	0xFF4
  3344                           prodl	equ	0xFF3
  3345                           intcon	equ	0xFF2
  3346                           postinc0	equ	0xFEE
  3347                           plusw0	equ	0xFEB
  3348                           wreg	equ	0xFE8
  3349                           indf1	equ	0xFE7
  3350                           postinc1	equ	0xFE6
  3351                           postdec1	equ	0xFE5
  3352                           plusw1	equ	0xFE3
  3353                           fsr1h	equ	0xFE2
  3354                           fsr1l	equ	0xFE1
  3355                           indf2	equ	0xFDF
  3356                           postinc2	equ	0xFDE
  3357                           postdec2	equ	0xFDD
  3358                           plusw2	equ	0xFDB
  3359                           fsr2h	equ	0xFDA
  3360                           fsr2l	equ	0xFD9
  3361                           status	equ	0xFD8
  3362                           
  3363 ;; *************** function _Lcd_WriteChar *****************
  3364 ;; Defined at:
  3365 ;;		line 99 in file "libs/HD44780.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;  y               1    wreg     unsigned char 
  3368 ;;  x               1   14[BANK0 ] unsigned char 
  3369 ;;  c               1   15[BANK0 ] unsigned char 
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;  y               1   16[BANK0 ] unsigned char 
  3372 ;;  data            1   17[BANK0 ] unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, status,2, status,0, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 3F/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3382 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3385 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3386 ;;Total ram usage:        4 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:   11
  3389 ;; This function calls:
  3390 ;;		_Lcd_CharCP
  3391 ;;		_Lcd_Command
  3392 ;; This function is called by:
  3393 ;;		_WriteLongInt
  3394 ;; This function uses a non-reentrant model
  3395 ;;
  3396                           
  3397                           	psect	text3
  3398  00333A                     __ptext3:
  3399                           	opt stack 0
  3400  00333A                     _Lcd_WriteChar:
  3401                           	opt stack 18
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;incstack = 0
  3405                           ;Lcd_WriteChar@y stored from wreg
  3406  00333A  6F70               	movwf	Lcd_WriteChar@y& (0+255),b
  3407                           
  3408                           ;HD44780.c: 100: unsigned char data;
  3409                           ;HD44780.c: 101: switch(y) {
  3410  00333C  D00D               	goto	l4266
  3411  00333E                     l4256:
  3412                           
  3413                           ; BSR set to: 0
  3414  00333E  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3415  003340  0F7F               	addlw	127
  3416  003342  D008               	goto	L3
  3417  003344                     l4258:
  3418                           
  3419                           ; BSR set to: 0
  3420  003344  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3421  003346  0FBF               	addlw	191
  3422  003348  D005               	goto	L3
  3423  00334A                     l4260:
  3424                           
  3425                           ; BSR set to: 0
  3426  00334A  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3427  00334C  0F93               	addlw	147
  3428  00334E  D002               	goto	L3
  3429  003350                     l4262:
  3430                           
  3431                           ; BSR set to: 0
  3432  003350  516E               	movf	Lcd_WriteChar@x& (0+255),w,b
  3433  003352  0FD3               	addlw	211
  3434  003354                     L3:
  3435  003354  6F71               	movwf	Lcd_WriteChar@data& (0+255),b
  3436  003356  D00A               	goto	l4268
  3437  003358                     l4266:
  3438  003358  0100               	movlb	0	; () banked
  3439  00335A  5170               	movf	Lcd_WriteChar@y& (0+255),w,b
  3440                           
  3441                           ; Switch size 1, requested type "space"
  3442                           ; Number of cases is 4, Range of values is 1 to 4
  3443                           ; switch strategies available:
  3444                           ; Name         Instructions Cycles
  3445                           ; simple_byte           13     7 (average)
  3446                           ;	Chosen strategy is simple_byte
  3447  00335C  0A01               	xorlw	1	; case 1
  3448  00335E  E0EF               	bz	l4256
  3449  003360  0A03               	xorlw	3	; case 2
  3450  003362  E0F0               	bz	l4258
  3451  003364  0A01               	xorlw	1	; case 3
  3452  003366  E0F1               	bz	l4260
  3453  003368  0A07               	xorlw	7	; case 4
  3454  00336A  E0F2               	bz	l4262
  3455  00336C                     l4268:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;HD44780.c: 108: Lcd_Command(data);
  3459  00336C  5171               	movf	Lcd_WriteChar@data& (0+255),w,b
  3460  00336E  EC62  F013         	call	_Lcd_Command
  3461                           
  3462                           ;HD44780.c: 109: Lcd_CharCP(c);
  3463  003372  0100               	movlb	0	; () banked
  3464  003374  516F               	movf	Lcd_WriteChar@c& (0+255),w,b
  3465  003376  EF45  F014         	goto	_Lcd_CharCP
  3466  00337A                     __end_of_Lcd_WriteChar:
  3467                           	opt stack 0
  3468                           tosu	equ	0xFFF
  3469                           tosh	equ	0xFFE
  3470                           tosl	equ	0xFFD
  3471                           pclath	equ	0xFFA
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           postinc0	equ	0xFEE
  3480                           plusw0	equ	0xFEB
  3481                           wreg	equ	0xFE8
  3482                           indf1	equ	0xFE7
  3483                           postinc1	equ	0xFE6
  3484                           postdec1	equ	0xFE5
  3485                           plusw1	equ	0xFE3
  3486                           fsr1h	equ	0xFE2
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           plusw2	equ	0xFDB
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _Lcd_CharCP *****************
  3497 ;; Defined at:
  3498 ;;		line 116 in file "libs/HD44780.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;  c               1    wreg     unsigned char 
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;  c               1    2[BANK0 ] unsigned char 
  3503 ;; Return value:  Size  Location     Type
  3504 ;;                  1    wreg      void 
  3505 ;; Registers used:
  3506 ;;		wreg, status,2, status,0, cstack
  3507 ;; Tracked objects:
  3508 ;;		On entry : 3F/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3513 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3514 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3515 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3516 ;;Total ram usage:        3 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:   10
  3519 ;; This function calls:
  3520 ;;		_Lcd_Delay5us
  3521 ;; This function is called by:
  3522 ;;		_Lcd_WriteChar
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text4
  3527  00288A                     __ptext4:
  3528                           	opt stack 0
  3529  00288A                     _Lcd_CharCP:
  3530                           	opt stack 18
  3531                           
  3532                           ;incstack = 0
  3533                           ;Lcd_CharCP@c stored from wreg
  3534  00288A  6F62               	movwf	Lcd_CharCP@c& (0+255),b
  3535                           
  3536                           ;HD44780.c: 117: LATAbits.LA1 = 0; LATAbits.LA0 = 1;
  3537  00288C  9283               	bcf	3971,1,c	;volatile
  3538  00288E  8083               	bsf	3971,0,c	;volatile
  3539                           
  3540                           ;HD44780.c: 118: LATAbits.LA5 = (c & 0b10000000)>>7; LATAbits.LA4 = (c & 0b01000000)>>6;
  3541  002890  0100               	movlb	0	; () banked
  3542  002892  6B60               	clrf	??_Lcd_CharCP& (0+255),b
  3543  002894  AF62               	btfss	Lcd_CharCP@c& (0+255),7,b
  3544  002896  D001               	bra	u3555
  3545  002898  2B60               	incf	??_Lcd_CharCP& (0+255),f,b
  3546  00289A                     u3555:
  3547  00289A  D835               	call	PL50	;call to abstracted procedure
  3548  00289C  0E06               	movlw	6
  3549  00289E  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  3550  0028A0                     u3565:
  3551  0028A0  90D8               	bcf	status,0,c
  3552  0028A2  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3553  0028A4  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  3554  0028A6  D7FC               	goto	u3565
  3555                           
  3556                           ;HD44780.c: 119: LATAbits.LA3 = (c & 0b00100000)>>5; LATAbits.LA2 = (c & 0b00010000)>>4;
  3557  0028A8  D846               	call	PL58	;call to abstracted procedure
  3558  0028AA  0E05               	movlw	5
  3559  0028AC  6F61               	movwf	(??_Lcd_CharCP+1)& (0+255),b
  3560  0028AE                     u3575:
  3561  0028AE  90D8               	bcf	status,0,c
  3562  0028B0  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3563  0028B2  2F61               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,b
  3564  0028B4  D7FC               	goto	u3575
  3565  0028B6  0E01               	movlw	1
  3566  0028B8  D832               	call	PL52	;call to abstracted procedure
  3567  0028BA  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3568  0028BC  0E0F               	movlw	15
  3569  0028BE  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3570  0028C0  0E01               	movlw	1
  3571  0028C2  D844               	call	PL90	;call to abstracted procedure
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;HD44780.c: 120: _delay(10);
  3575  0028C4  0E03               	movlw	3
  3576  0028C6                     u4977:
  3577  0028C6  2EE8               	decfsz	wreg,f,c
  3578  0028C8  D7FE               	bra	u4977
  3579  0028CA  F000               	nop	
  3580                           
  3581                           ;HD44780.c: 121: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  3582  0028CC  8283               	bsf	3971,1,c	;volatile
  3583  0028CE  EC4B  F01B         	call	_Lcd_Delay5us	;wreg free
  3584  0028D2  9283               	bcf	3971,1,c	;volatile
  3585                           
  3586                           ;HD44780.c: 122: LATAbits.LA5 = (c & 0b00001000)>>3; LATAbits.LA4 = (c & 0b00000100)>>2;
  3587  0028D4  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3588  0028D8  0100               	movlb	0	; () banked
  3589  0028DA  90D8               	bcf	status,0,c
  3590  0028DC  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3591  0028DE  D83F               	call	PL108	;call to abstracted procedure
  3592                           
  3593                           ; BSR set to: 0
  3594  0028E0  D812               	call	PL50	;call to abstracted procedure
  3595  0028E2  D83D               	call	PL108	;call to abstracted procedure
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;HD44780.c: 123: LATAbits.LA3 = (c & 0b00000010)>>1; LATAbits.LA2 = (c & 0b00000001);
  3599  0028E4  D828               	call	PL58	;call to abstracted procedure
  3600  0028E6  90D8               	bcf	status,0,c
  3601  0028E8  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3602  0028EA  0E01               	movlw	1
  3603                           
  3604                           ; BSR set to: 0
  3605  0028EC  D818               	call	PL52	;call to abstracted procedure
  3606  0028EE  0E01               	movlw	1
  3607  0028F0  D82D               	call	PL90	;call to abstracted procedure
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;HD44780.c: 124: _delay(10);
  3611  0028F2  0E03               	movlw	3
  3612  0028F4                     u4987:
  3613  0028F4  2EE8               	decfsz	wreg,f,c
  3614  0028F6  D7FE               	bra	u4987
  3615  0028F8  F000               	nop	
  3616                           
  3617                           ;HD44780.c: 125: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
  3618  0028FA  8283               	bsf	3971,1,c	;volatile
  3619  0028FC  EC4B  F01B         	call	_Lcd_Delay5us	;wreg free
  3620  002900  9283               	bcf	3971,1,c	;volatile
  3621                           
  3622                           ;HD44780.c: 126: Lcd_Delay5us();
  3623  002902  EF4B  F01B         	goto	_Lcd_Delay5us	;wreg free
  3624  002906                     __end_of_Lcd_CharCP:
  3625                           	opt stack 0
  3626  002906                     PL50:
  3627                           	opt stack 18
  3628  002906  0E01               	movlw	1
  3629  002908  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3630  00290A  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3631  00290C  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3632  00290E  5083               	movf	3971,w,c	;volatile
  3633  002910  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3634  002912  0BDF               	andlw	-33
  3635  002914  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3636  002916  6E83               	movwf	3971,c	;volatile
  3637  002918  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3638  00291C  0012               	return	
  3639  00291E                     __end_ofPL50:
  3640                           	opt stack 0
  3641  00291E                     PL52:
  3642                           	opt stack 18
  3643  00291E  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3644  002920  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3645  002922  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3646  002924  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3647  002926  5083               	movf	3971,w,c	;volatile
  3648  002928  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3649  00292A  0BF7               	andlw	-9
  3650  00292C  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3651  00292E  6E83               	movwf	3971,c	;volatile
  3652  002930  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3653  002934  0012               	return	
  3654  002936                     __end_ofPL52:
  3655                           	opt stack 0
  3656  002936                     PL58:
  3657                           	opt stack 18
  3658  002936  0E01               	movlw	1
  3659  002938  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3660  00293A  3B60               	swapf	??_Lcd_CharCP& (0+255),f,b
  3661  00293C  5083               	movf	3971,w,c	;volatile
  3662  00293E  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3663  002940  0BEF               	andlw	-17
  3664  002942  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3665  002944  6E83               	movwf	3971,c	;volatile
  3666  002946  C062  F060         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  3667  00294A  0012               	return	
  3668  00294C                     __end_ofPL58:
  3669                           	opt stack 0
  3670  00294C                     PL90:
  3671                           	opt stack 18
  3672  00294C  1760               	andwf	??_Lcd_CharCP& (0+255),f,b
  3673  00294E  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3674  002950  4760               	rlncf	??_Lcd_CharCP& (0+255),f,b
  3675  002952  5083               	movf	3971,w,c	;volatile
  3676  002954  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3677  002956  0BFB               	andlw	-5
  3678  002958  1960               	xorwf	??_Lcd_CharCP& (0+255),w,b
  3679  00295A  6E83               	movwf	3971,c	;volatile
  3680  00295C  0012               	return	
  3681  00295E                     __end_ofPL90:
  3682                           	opt stack 0
  3683  00295E                     PL108:
  3684                           	opt stack 18
  3685  00295E  90D8               	bcf	status,0,c
  3686  002960  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3687  002962  90D8               	bcf	status,0,c
  3688  002964  3360               	rrcf	??_Lcd_CharCP& (0+255),f,b
  3689  002966  0012               	return	
  3690  002968                     __end_ofPL108:
  3691                           	opt stack 0
  3692                           tosu	equ	0xFFF
  3693                           tosh	equ	0xFFE
  3694                           tosl	equ	0xFFD
  3695                           pclath	equ	0xFFA
  3696                           tblptru	equ	0xFF8
  3697                           tblptrh	equ	0xFF7
  3698                           tblptrl	equ	0xFF6
  3699                           tablat	equ	0xFF5
  3700                           prodh	equ	0xFF4
  3701                           prodl	equ	0xFF3
  3702                           intcon	equ	0xFF2
  3703                           postinc0	equ	0xFEE
  3704                           plusw0	equ	0xFEB
  3705                           wreg	equ	0xFE8
  3706                           indf1	equ	0xFE7
  3707                           postinc1	equ	0xFE6
  3708                           postdec1	equ	0xFE5
  3709                           plusw1	equ	0xFE3
  3710                           fsr1h	equ	0xFE2
  3711                           fsr1l	equ	0xFE1
  3712                           indf2	equ	0xFDF
  3713                           postinc2	equ	0xFDE
  3714                           postdec2	equ	0xFDD
  3715                           plusw2	equ	0xFDB
  3716                           fsr2h	equ	0xFDA
  3717                           fsr2l	equ	0xFD9
  3718                           status	equ	0xFD8
  3719                           
  3720 ;; *************** function _WriteEeprom *****************
  3721 ;; Defined at:
  3722 ;;		line 15 in file "libs/eeprom.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;  Add             2    0[BANK0 ] unsigned short 
  3725 ;;  Data            1    2[BANK0 ] unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  Address         2    3[BANK0 ] struct _WORD_VAL
  3728 ;; Return value:  Size  Location     Type
  3729 ;;                  1    wreg      void 
  3730 ;; Registers used:
  3731 ;;		wreg, status,2
  3732 ;; Tracked objects:
  3733 ;;		On entry : 3F/0
  3734 ;;		On exit  : 3F/0
  3735 ;;		Unchanged: 3F/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3737 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3738 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3740 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3741 ;;Total ram usage:        5 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:    9
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text5
  3752  0034DC                     __ptext5:
  3753                           	opt stack 0
  3754  0034DC                     _WriteEeprom:
  3755                           	opt stack 21
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;eeprom.c: 16: WORD_VAL Address;
  3759                           ;eeprom.c: 17: Address.Val = Add;
  3760                           
  3761                           ;incstack = 0
  3762  0034DC  C060  F063         	movff	WriteEeprom@Add,WriteEeprom@Address
  3763  0034E0  C061  F064         	movff	WriteEeprom@Add+1,WriteEeprom@Address+1
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;eeprom.c: 18: NVMCON1bits.NVMREG = 00;
  3767  0034E4  0E3F               	movlw	-193
  3768  0034E6  1681               	andwf	3969,f,c	;volatile
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;eeprom.c: 19: NVMADRL = Address.v[0];
  3772  0034E8  C063  FF7E         	movff	WriteEeprom@Address,3966	;volatile
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;eeprom.c: 20: NVMADRH = Address.v[1];
  3776  0034EC  C064  FF7F         	movff	WriteEeprom@Address+1,3967	;volatile
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;eeprom.c: 21: NVMDAT = Data;
  3780  0034F0  C062  FF80         	movff	WriteEeprom@Data,3968	;volatile
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;eeprom.c: 22: NVMCON1bits.WREN = 1;
  3784  0034F4  8481               	bsf	3969,2,c	;volatile
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;eeprom.c: 23: INTCONbits.GIE = 0;
  3788  0034F6  9EF2               	bcf	intcon,7,c	;volatile
  3789                           
  3790                           ;eeprom.c: 24: NVMCON2 = 0x55;
  3791  0034F8  0E55               	movlw	85
  3792  0034FA  6E82               	movwf	3970,c	;volatile
  3793                           
  3794                           ;eeprom.c: 25: NVMCON2 = 0xAA;
  3795  0034FC  0EAA               	movlw	170
  3796  0034FE  6E82               	movwf	3970,c	;volatile
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;eeprom.c: 26: NVMCON1bits.WR = 1;
  3800  003500  8281               	bsf	3969,1,c	;volatile
  3801  003502                     l457:
  3802                           
  3803                           ; BSR set to: 0
  3804  003502  B281               	btfsc	3969,1,c	;volatile
  3805  003504  D7FE               	goto	l457
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;eeprom.c: 28: INTCONbits.GIE = 1;
  3809  003506  8EF2               	bsf	intcon,7,c	;volatile
  3810                           
  3811                           ;eeprom.c: 29: NVMCON1bits.WREN = 0;
  3812  003508  9481               	bcf	3969,2,c	;volatile
  3813                           
  3814                           ;eeprom.c: 30: NVMCON1bits.NVMREG1 = 1;
  3815  00350A  8E81               	bsf	3969,7,c	;volatile
  3816                           
  3817                           ; BSR set to: 0
  3818  00350C  0012               	return		;funcret
  3819  00350E                     __end_of_WriteEeprom:
  3820                           	opt stack 0
  3821                           tosu	equ	0xFFF
  3822                           tosh	equ	0xFFE
  3823                           tosl	equ	0xFFD
  3824                           pclath	equ	0xFFA
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           plusw0	equ	0xFEB
  3834                           wreg	equ	0xFE8
  3835                           indf1	equ	0xFE7
  3836                           postinc1	equ	0xFE6
  3837                           postdec1	equ	0xFE5
  3838                           plusw1	equ	0xFE3
  3839                           fsr1h	equ	0xFE2
  3840                           fsr1l	equ	0xFE1
  3841                           indf2	equ	0xFDF
  3842                           postinc2	equ	0xFDE
  3843                           postdec2	equ	0xFDD
  3844                           plusw2	equ	0xFDB
  3845                           fsr2h	equ	0xFDA
  3846                           fsr2l	equ	0xFD9
  3847                           status	equ	0xFD8
  3848                           
  3849 ;; *************** function _VerifyForGPSOnTIme *****************
  3850 ;; Defined at:
  3851 ;;		line 164 in file "libs/funcs.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;		None
  3854 ;; Auto vars:     Size  Location     Type
  3855 ;;  TimeDiff        4    0[BANK0 ] long 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      void 
  3858 ;; Registers used:
  3859 ;;		wreg, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 3F/0
  3862 ;;		On exit  : 3F/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3866 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;Total ram usage:        4 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    9
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_main
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           	psect	text6
  3880  0032F4                     __ptext6:
  3881                           	opt stack 0
  3882  0032F4                     _VerifyForGPSOnTIme:
  3883                           	opt stack 21
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;funcs.c: 165: INT32 TimeDiff = DATE_TIME.SECOND - TIME_WHEN_GPS_IS_SWITCHED_ON;
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;incstack = 0
  3890  0032F4  51CC               	movf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),w,b
  3891  0032F6  5DBD               	subwf	_DATE_TIME& (0+255),w,b
  3892  0032F8  6F60               	movwf	VerifyForGPSOnTIme@TimeDiff& (0+255),b
  3893  0032FA  51CD               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),w,b
  3894  0032FC  59BE               	subwfb	(_DATE_TIME+1)& (0+255),w,b
  3895  0032FE  6F61               	movwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),b
  3896  003300  51CE               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),w,b
  3897  003302  59BF               	subwfb	(_DATE_TIME+2)& (0+255),w,b
  3898  003304  6F62               	movwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),b
  3899  003306  51CF               	movf	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),w,b
  3900  003308  59C0               	subwfb	(_DATE_TIME+3)& (0+255),w,b
  3901  00330A  6F63               	movwf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),b
  3902                           
  3903                           ;funcs.c: 166: if (TimeDiff<0)
  3904  00330C  AF63               	btfss	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  3905  00330E  D008               	goto	l684
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;funcs.c: 167: TimeDiff += 86400;
  3909  003310  0E80               	movlw	128
  3910  003312  2760               	addwf	VerifyForGPSOnTIme@TimeDiff& (0+255),f,b
  3911  003314  0E51               	movlw	81
  3912  003316  2361               	addwfc	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),f,b
  3913  003318  0E01               	movlw	1
  3914  00331A  2362               	addwfc	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),f,b
  3915  00331C  0E00               	movlw	0
  3916  00331E  2363               	addwfc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),f,b
  3917  003320                     l684:
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;funcs.c: 168: if (TimeDiff >= (1*60)) {
  3921  003320  BF63               	btfsc	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),7,b
  3922  003322  0012               	return	
  3923  003324  5163               	movf	(VerifyForGPSOnTIme@TimeDiff+3)& (0+255),w,b
  3924  003326  1162               	iorwf	(VerifyForGPSOnTIme@TimeDiff+2)& (0+255),w,b
  3925  003328  1161               	iorwf	(VerifyForGPSOnTIme@TimeDiff+1)& (0+255),w,b
  3926  00332A  E104               	bnz	u4740
  3927  00332C  0E3C               	movlw	60
  3928  00332E  5D60               	subwf	VerifyForGPSOnTIme@TimeDiff& (0+255),w,b
  3929  003330  A0D8               	btfss	status,0,c
  3930  003332  0012               	return	
  3931  003334                     u4740:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;funcs.c: 169: FLAGS_0.bits.b2 = SET;
  3935  003334  85E6               	bsf	_FLAGS_0& (0+255),2,b
  3936                           
  3937                           ;funcs.c: 170: FLAGS_0.bits.b1 = RESET;
  3938  003336  93E6               	bcf	_FLAGS_0& (0+255),1,b
  3939                           
  3940                           ; BSR set to: 0
  3941  003338  0012               	return		;funcret
  3942  00333A                     __end_of_VerifyForGPSOnTIme:
  3943                           	opt stack 0
  3944                           tosu	equ	0xFFF
  3945                           tosh	equ	0xFFE
  3946                           tosl	equ	0xFFD
  3947                           pclath	equ	0xFFA
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           intcon	equ	0xFF2
  3955                           postinc0	equ	0xFEE
  3956                           plusw0	equ	0xFEB
  3957                           wreg	equ	0xFE8
  3958                           indf1	equ	0xFE7
  3959                           postinc1	equ	0xFE6
  3960                           postdec1	equ	0xFE5
  3961                           plusw1	equ	0xFE3
  3962                           fsr1h	equ	0xFE2
  3963                           fsr1l	equ	0xFE1
  3964                           indf2	equ	0xFDF
  3965                           postinc2	equ	0xFDE
  3966                           postdec2	equ	0xFDD
  3967                           plusw2	equ	0xFDB
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function _TestGPSStartCondition *****************
  3973 ;; Defined at:
  3974 ;;		line 204 in file "libs/funcs.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;		None
  3979 ;; Return value:  Size  Location     Type
  3980 ;;                  1    wreg      void 
  3981 ;; Registers used:
  3982 ;;		wreg, status,2, status,0
  3983 ;; Tracked objects:
  3984 ;;		On entry : 3F/0
  3985 ;;		On exit  : 3F/0
  3986 ;;		Unchanged: 0/0
  3987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3990 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3991 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3992 ;;Total ram usage:        1 bytes
  3993 ;; Hardware stack levels used:    1
  3994 ;; Hardware stack levels required when called:    9
  3995 ;; This function calls:
  3996 ;;		Nothing
  3997 ;; This function is called by:
  3998 ;;		_main
  3999 ;; This function uses a non-reentrant model
  4000 ;;
  4001                           
  4002                           	psect	text7
  4003  003436                     __ptext7:
  4004                           	opt stack 0
  4005  003436                     _TestGPSStartCondition:
  4006                           	opt stack 21
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;funcs.c: 205: if ((DATE_TIME.SECOND == GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME)
  4010                           ;funcs.c: 206: || (TIME_AT_LAST_GPS_SYNC >= GPS_SYNC_EVERY_x_SECONDS))
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;incstack = 0
  4014  003436  51D0               	movf	_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME& (0+255),w,b
  4015  003438  19BD               	xorwf	_DATE_TIME& (0+255),w,b
  4016  00343A  E109               	bnz	u4790
  4017  00343C  51D1               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),w,b
  4018  00343E  19BE               	xorwf	(_DATE_TIME+1)& (0+255),w,b
  4019  003440  E106               	bnz	u4790
  4020  003442  51D2               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),w,b
  4021  003444  19BF               	xorwf	(_DATE_TIME+2)& (0+255),w,b
  4022  003446  E103               	bnz	u4790
  4023  003448  51D3               	movf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),w,b
  4024  00344A  19C0               	xorwf	(_DATE_TIME+3)& (0+255),w,b
  4025  00344C  E00E               	bz	l702
  4026  00344E                     u4790:
  4027                           
  4028                           ; BSR set to: 0
  4029  00344E  51D4               	movf	_GPS_SYNC_EVERY_x_SECONDS& (0+255),w,b
  4030  003450  5DC8               	subwf	_TIME_AT_LAST_GPS_SYNC& (0+255),w,b
  4031  003452  51D5               	movf	(_GPS_SYNC_EVERY_x_SECONDS+1)& (0+255),w,b
  4032  003454  59C9               	subwfb	(_TIME_AT_LAST_GPS_SYNC+1)& (0+255),w,b
  4033  003456  51D6               	movf	(_GPS_SYNC_EVERY_x_SECONDS+2)& (0+255),w,b
  4034  003458  59CA               	subwfb	(_TIME_AT_LAST_GPS_SYNC+2)& (0+255),w,b
  4035  00345A  51CB               	movf	(_TIME_AT_LAST_GPS_SYNC+3)& (0+255),w,b
  4036  00345C  0A80               	xorlw	128
  4037  00345E  6F60               	movwf	??_TestGPSStartCondition& (0+255),b
  4038  003460  51D7               	movf	(_GPS_SYNC_EVERY_x_SECONDS+3)& (0+255),w,b
  4039  003462  0A80               	xorlw	128
  4040  003464  5960               	subwfb	??_TestGPSStartCondition& (0+255),w,b
  4041  003466  A0D8               	btfss	status,0,c
  4042  003468  0012               	return	
  4043  00346A                     l702:
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;funcs.c: 207: FLAGS_0.bits.b0 = SET;
  4047  00346A  81E6               	bsf	_FLAGS_0& (0+255),0,b
  4048                           
  4049                           ; BSR set to: 0
  4050  00346C  0012               	return		;funcret
  4051  00346E                     __end_of_TestGPSStartCondition:
  4052                           	opt stack 0
  4053                           tosu	equ	0xFFF
  4054                           tosh	equ	0xFFE
  4055                           tosl	equ	0xFFD
  4056                           pclath	equ	0xFFA
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           postinc0	equ	0xFEE
  4065                           plusw0	equ	0xFEB
  4066                           wreg	equ	0xFE8
  4067                           indf1	equ	0xFE7
  4068                           postinc1	equ	0xFE6
  4069                           postdec1	equ	0xFE5
  4070                           plusw1	equ	0xFE3
  4071                           fsr1h	equ	0xFE2
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           postinc2	equ	0xFDE
  4075                           postdec2	equ	0xFDD
  4076                           plusw2	equ	0xFDB
  4077                           fsr2h	equ	0xFDA
  4078                           fsr2l	equ	0xFD9
  4079                           status	equ	0xFD8
  4080                           
  4081 ;; *************** function _SwitchOnGPS *****************
  4082 ;; Defined at:
  4083 ;;		line 156 in file "libs/funcs.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;		None
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;		None
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		None
  4092 ;; Tracked objects:
  4093 ;;		On entry : 3F/0
  4094 ;;		On exit  : 3F/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4100 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4101 ;;Total ram usage:        0 bytes
  4102 ;; Hardware stack levels used:    1
  4103 ;; Hardware stack levels required when called:    9
  4104 ;; This function calls:
  4105 ;;		Nothing
  4106 ;; This function is called by:
  4107 ;;		_main
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text8
  4112  003670                     __ptext8:
  4113                           	opt stack 0
  4114  003670                     _SwitchOnGPS:
  4115                           	opt stack 21
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;funcs.c: 157: LATCbits.LC1 = ON;
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;incstack = 0
  4122  003670  8285               	bsf	3973,1,c	;volatile
  4123                           
  4124                           ;funcs.c: 158: NO_OF_TIMES_GPS_FAILED = 0;
  4125  003672  6BE7               	clrf	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  4126                           
  4127                           ;funcs.c: 159: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND;
  4128  003674  ECAD  F018         	call	PL88	;call to abstracted procedure
  4129                           
  4130                           ;funcs.c: 160: FLAGS_0.bits.b1 = SET;
  4131  003678  83E6               	bsf	_FLAGS_0& (0+255),1,b
  4132                           
  4133                           ;funcs.c: 161: FLAGS_0.bits.b0 = RESET;
  4134  00367A  91E6               	bcf	_FLAGS_0& (0+255),0,b
  4135                           
  4136                           ; BSR set to: 0
  4137  00367C  0012               	return		;funcret
  4138  00367E                     __end_of_SwitchOnGPS:
  4139                           	opt stack 0
  4140                           tosu	equ	0xFFF
  4141                           tosh	equ	0xFFE
  4142                           tosl	equ	0xFFD
  4143                           pclath	equ	0xFFA
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           postinc0	equ	0xFEE
  4152                           plusw0	equ	0xFEB
  4153                           wreg	equ	0xFE8
  4154                           indf1	equ	0xFE7
  4155                           postinc1	equ	0xFE6
  4156                           postdec1	equ	0xFE5
  4157                           plusw1	equ	0xFE3
  4158                           fsr1h	equ	0xFE2
  4159                           fsr1l	equ	0xFE1
  4160                           indf2	equ	0xFDF
  4161                           postinc2	equ	0xFDE
  4162                           postdec2	equ	0xFDD
  4163                           plusw2	equ	0xFDB
  4164                           fsr2h	equ	0xFDA
  4165                           fsr2l	equ	0xFD9
  4166                           status	equ	0xFD8
  4167                           
  4168 ;; *************** function _StopGPS *****************
  4169 ;; Defined at:
  4170 ;;		line 199 in file "libs/funcs.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  1    wreg      void 
  4177 ;; Registers used:
  4178 ;;		None
  4179 ;; Tracked objects:
  4180 ;;		On entry : 3F/0
  4181 ;;		On exit  : 3F/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    9
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_main
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           	psect	text9
  4199  0036AE                     __ptext9:
  4200                           	opt stack 0
  4201  0036AE                     _StopGPS:
  4202                           	opt stack 21
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;funcs.c: 200: LATCbits.LC1 = OFF;
  4206                           
  4207                           ; BSR set to: 0
  4208                           ;incstack = 0
  4209  0036AE  9285               	bcf	3973,1,c	;volatile
  4210                           
  4211                           ;funcs.c: 201: FLAGS_0.bits.b3 = RESET;
  4212  0036B0  97E6               	bcf	_FLAGS_0& (0+255),3,b
  4213                           
  4214                           ; BSR set to: 0
  4215  0036B2  0012               	return		;funcret
  4216  0036B4                     __end_of_StopGPS:
  4217                           	opt stack 0
  4218                           tosu	equ	0xFFF
  4219                           tosh	equ	0xFFE
  4220                           tosl	equ	0xFFD
  4221                           pclath	equ	0xFFA
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodh	equ	0xFF4
  4227                           prodl	equ	0xFF3
  4228                           intcon	equ	0xFF2
  4229                           postinc0	equ	0xFEE
  4230                           plusw0	equ	0xFEB
  4231                           wreg	equ	0xFE8
  4232                           indf1	equ	0xFE7
  4233                           postinc1	equ	0xFE6
  4234                           postdec1	equ	0xFE5
  4235                           plusw1	equ	0xFE3
  4236                           fsr1h	equ	0xFE2
  4237                           fsr1l	equ	0xFE1
  4238                           indf2	equ	0xFDF
  4239                           postinc2	equ	0xFDE
  4240                           postdec2	equ	0xFDD
  4241                           plusw2	equ	0xFDB
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _SYSTEM_Initialize *****************
  4247 ;; Defined at:
  4248 ;;		line 107 in file "mcc_generated_files/mcc.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 3F/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4266 ;;Total ram usage:        0 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:   11
  4269 ;; This function calls:
  4270 ;;		_EUSART1_Initialize
  4271 ;;		_INTERRUPT_Initialize
  4272 ;;		_OSCILLATOR_Initialize
  4273 ;;		_PIN_MANAGER_Initialize
  4274 ;;		_TMR0_Initialize
  4275 ;; This function is called by:
  4276 ;;		_main
  4277 ;; This function uses a non-reentrant model
  4278 ;;
  4279                           
  4280                           	psect	text10
  4281  0035EC                     __ptext10:
  4282                           	opt stack 0
  4283  0035EC                     _SYSTEM_Initialize:
  4284                           	opt stack 19
  4285                           
  4286                           ;mcc.c: 110: INTERRUPT_Initialize();
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;incstack = 0
  4290  0035EC  EC5C  F01B         	call	_INTERRUPT_Initialize	;wreg free
  4291                           
  4292                           ;mcc.c: 111: PIN_MANAGER_Initialize();
  4293  0035F0  EC50  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  4294                           
  4295                           ;mcc.c: 112: OSCILLATOR_Initialize();
  4296  0035F4  ECEB  F01A         	call	_OSCILLATOR_Initialize	;wreg free
  4297                           
  4298                           ; BSR set to: 14
  4299                           ;mcc.c: 113: TMR0_Initialize();
  4300  0035F8  ECBD  F019         	call	_TMR0_Initialize	;wreg free
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;mcc.c: 114: EUSART1_Initialize();
  4304  0035FC  EF00  F01B         	goto	_EUSART1_Initialize	;wreg free
  4305  003600                     __end_of_SYSTEM_Initialize:
  4306                           	opt stack 0
  4307                           tosu	equ	0xFFF
  4308                           tosh	equ	0xFFE
  4309                           tosl	equ	0xFFD
  4310                           pclath	equ	0xFFA
  4311                           tblptru	equ	0xFF8
  4312                           tblptrh	equ	0xFF7
  4313                           tblptrl	equ	0xFF6
  4314                           tablat	equ	0xFF5
  4315                           prodh	equ	0xFF4
  4316                           prodl	equ	0xFF3
  4317                           intcon	equ	0xFF2
  4318                           postinc0	equ	0xFEE
  4319                           plusw0	equ	0xFEB
  4320                           wreg	equ	0xFE8
  4321                           indf1	equ	0xFE7
  4322                           postinc1	equ	0xFE6
  4323                           postdec1	equ	0xFE5
  4324                           plusw1	equ	0xFE3
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           postdec2	equ	0xFDD
  4330                           plusw2	equ	0xFDB
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _TMR0_Initialize *****************
  4336 ;; Defined at:
  4337 ;;		line 65 in file "mcc_generated_files/tmr0.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2, status,0, cstack
  4346 ;; Tracked objects:
  4347 ;;		On entry : 3F/E
  4348 ;;		On exit  : 3F/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4354 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4355 ;;Total ram usage:        2 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; Hardware stack levels required when called:   10
  4358 ;; This function calls:
  4359 ;;		_TMR0_SetInterruptHandler
  4360 ;;		_TMR0_StartTimer
  4361 ;; This function is called by:
  4362 ;;		_SYSTEM_Initialize
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           	psect	text11
  4367  00337A                     __ptext11:
  4368                           	opt stack 0
  4369  00337A                     _TMR0_Initialize:
  4370                           	opt stack 19
  4371                           
  4372                           ; BSR set to: 14
  4373                           ;tmr0.c: 70: T0CON0 = 0x10;
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;incstack = 0
  4377  00337A  0E10               	movlw	16
  4378  00337C  6ED5               	movwf	4053,c	;volatile
  4379                           
  4380                           ;tmr0.c: 73: T0CON1 = 0x50;
  4381  00337E  0E50               	movlw	80
  4382  003380  6ED6               	movwf	4054,c	;volatile
  4383                           
  4384                           ;tmr0.c: 76: TMR0H = 0xD8;
  4385  003382  0ED8               	movlw	216
  4386  003384  6ED4               	movwf	4052,c	;volatile
  4387                           
  4388                           ;tmr0.c: 79: TMR0L = 0xF0;
  4389  003386  0EF0               	movlw	240
  4390  003388  6ED3               	movwf	4051,c	;volatile
  4391                           
  4392                           ; BSR set to: 14
  4393                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  4394  00338A  50D3               	movf	4051,w,c	;volatile
  4395  00338C  CFD4 F062          	movff	4052,??_TMR0_Initialize	;volatile
  4396  003390  0100               	movlb	0	; () banked
  4397  003392  6B63               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4398  003394  C062  F063         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4399  003398  6B62               	clrf	??_TMR0_Initialize& (0+255),b
  4400  00339A  1162               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4401  00339C  6E4C               	movwf	_timer0ReloadVal16bit,c	;volatile
  4402  00339E  5163               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4403  0033A0  6E4D               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
  4407  0033A2  010E               	movlb	14	; () banked
  4408  0033A4  9BCA               	bcf	202,5,b	;volatile
  4409                           
  4410                           ; BSR set to: 14
  4411                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
  4412  0033A6  8BC2               	bsf	194,5,b	;volatile
  4413                           
  4414                           ; BSR set to: 14
  4415                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4416  0033A8  0EBE               	movlw	low _TMR0_DefaultInterruptHandler
  4417  0033AA  0100               	movlb	0	; () banked
  4418  0033AC  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4419  0033AE  0E36               	movlw	high _TMR0_DefaultInterruptHandler
  4420  0033B0  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4421  0033B2  EC46  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;tmr0.c: 94: TMR0_StartTimer();
  4425  0033B6  EF5A  F01B         	goto	_TMR0_StartTimer	;wreg free
  4426  0033BA                     __end_of_TMR0_Initialize:
  4427                           	opt stack 0
  4428                           tosu	equ	0xFFF
  4429                           tosh	equ	0xFFE
  4430                           tosl	equ	0xFFD
  4431                           pclath	equ	0xFFA
  4432                           tblptru	equ	0xFF8
  4433                           tblptrh	equ	0xFF7
  4434                           tblptrl	equ	0xFF6
  4435                           tablat	equ	0xFF5
  4436                           prodh	equ	0xFF4
  4437                           prodl	equ	0xFF3
  4438                           intcon	equ	0xFF2
  4439                           postinc0	equ	0xFEE
  4440                           plusw0	equ	0xFEB
  4441                           wreg	equ	0xFE8
  4442                           indf1	equ	0xFE7
  4443                           postinc1	equ	0xFE6
  4444                           postdec1	equ	0xFE5
  4445                           plusw1	equ	0xFE3
  4446                           fsr1h	equ	0xFE2
  4447                           fsr1l	equ	0xFE1
  4448                           indf2	equ	0xFDF
  4449                           postinc2	equ	0xFDE
  4450                           postdec2	equ	0xFDD
  4451                           plusw2	equ	0xFDB
  4452                           fsr2h	equ	0xFDA
  4453                           fsr2l	equ	0xFD9
  4454                           status	equ	0xFD8
  4455                           
  4456 ;; *************** function _TMR0_StartTimer *****************
  4457 ;; Defined at:
  4458 ;;		line 97 in file "mcc_generated_files/tmr0.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;		None
  4461 ;; Auto vars:     Size  Location     Type
  4462 ;;		None
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  1    wreg      void 
  4465 ;; Registers used:
  4466 ;;		None
  4467 ;; Tracked objects:
  4468 ;;		On entry : 3F/0
  4469 ;;		On exit  : 3F/0
  4470 ;;		Unchanged: 3F/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4476 ;;Total ram usage:        0 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    9
  4479 ;; This function calls:
  4480 ;;		Nothing
  4481 ;; This function is called by:
  4482 ;;		_TMR0_Initialize
  4483 ;; This function uses a non-reentrant model
  4484 ;;
  4485                           
  4486                           	psect	text12
  4487  0036B4                     __ptext12:
  4488                           	opt stack 0
  4489  0036B4                     _TMR0_StartTimer:
  4490                           	opt stack 19
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;tmr0.c: 100: T0CON0bits.T0EN = 1;
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;incstack = 0
  4497  0036B4  8ED5               	bsf	4053,7,c	;volatile
  4498                           
  4499                           ; BSR set to: 0
  4500  0036B6  0012               	return		;funcret
  4501  0036B8                     __end_of_TMR0_StartTimer:
  4502                           	opt stack 0
  4503                           tosu	equ	0xFFF
  4504                           tosh	equ	0xFFE
  4505                           tosl	equ	0xFFD
  4506                           pclath	equ	0xFFA
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           postinc0	equ	0xFEE
  4515                           plusw0	equ	0xFEB
  4516                           wreg	equ	0xFE8
  4517                           indf1	equ	0xFE7
  4518                           postinc1	equ	0xFE6
  4519                           postdec1	equ	0xFE5
  4520                           plusw1	equ	0xFE3
  4521                           fsr1h	equ	0xFE2
  4522                           fsr1l	equ	0xFE1
  4523                           indf2	equ	0xFDF
  4524                           postinc2	equ	0xFDE
  4525                           postdec2	equ	0xFDD
  4526                           plusw2	equ	0xFDB
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function _TMR0_SetInterruptHandler *****************
  4532 ;; Defined at:
  4533 ;;		line 161 in file "mcc_generated_files/tmr0.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4536 ;;		 -> Timer0_10ms(1), TMR0_DefaultInterruptHandler(1), 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0
  4543 ;; Tracked objects:
  4544 ;;		On entry : 3F/0
  4545 ;;		On exit  : 3F/0
  4546 ;;		Unchanged: 3F/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4548 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4552 ;;Total ram usage:        2 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    9
  4555 ;; This function calls:
  4556 ;;		Nothing
  4557 ;; This function is called by:
  4558 ;;		_TMR0_Initialize
  4559 ;;		_main
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           	psect	text13
  4564  00368C                     __ptext13:
  4565                           	opt stack 0
  4566  00368C                     _TMR0_SetInterruptHandler:
  4567                           	opt stack 21
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;tmr0.c: 162: TMR0_InterruptHandler = InterruptHandler;
  4571                           
  4572                           ; BSR set to: 0
  4573                           ;incstack = 0
  4574  00368C  C060  F0E0         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4575  003690  C061  F0E1         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4576                           
  4577                           ; BSR set to: 0
  4578  003694  0012               	return		;funcret
  4579  003696                     __end_of_TMR0_SetInterruptHandler:
  4580                           	opt stack 0
  4581                           tosu	equ	0xFFF
  4582                           tosh	equ	0xFFE
  4583                           tosl	equ	0xFFD
  4584                           pclath	equ	0xFFA
  4585                           tblptru	equ	0xFF8
  4586                           tblptrh	equ	0xFF7
  4587                           tblptrl	equ	0xFF6
  4588                           tablat	equ	0xFF5
  4589                           prodh	equ	0xFF4
  4590                           prodl	equ	0xFF3
  4591                           intcon	equ	0xFF2
  4592                           postinc0	equ	0xFEE
  4593                           plusw0	equ	0xFEB
  4594                           wreg	equ	0xFE8
  4595                           indf1	equ	0xFE7
  4596                           postinc1	equ	0xFE6
  4597                           postdec1	equ	0xFE5
  4598                           plusw1	equ	0xFE3
  4599                           fsr1h	equ	0xFE2
  4600                           fsr1l	equ	0xFE1
  4601                           indf2	equ	0xFDF
  4602                           postinc2	equ	0xFDE
  4603                           postdec2	equ	0xFDD
  4604                           plusw2	equ	0xFDB
  4605                           fsr2h	equ	0xFDA
  4606                           fsr2l	equ	0xFD9
  4607                           status	equ	0xFD8
  4608                           
  4609 ;; *************** function _PIN_MANAGER_Initialize *****************
  4610 ;; Defined at:
  4611 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  4612 ;; Parameters:    Size  Location     Type
  4613 ;;		None
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  state           1    0[BANK0 ] unsigned char 
  4616 ;; Return value:  Size  Location     Type
  4617 ;;                  1    wreg      void 
  4618 ;; Registers used:
  4619 ;;		wreg, status,2
  4620 ;; Tracked objects:
  4621 ;;		On entry : 0/0
  4622 ;;		On exit  : 0/0
  4623 ;;		Unchanged: 0/0
  4624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4628 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4629 ;;Total ram usage:        1 bytes
  4630 ;; Hardware stack levels used:    1
  4631 ;; Hardware stack levels required when called:    9
  4632 ;; This function calls:
  4633 ;;		Nothing
  4634 ;; This function is called by:
  4635 ;;		_SYSTEM_Initialize
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text14
  4640  0030A0                     __ptext14:
  4641                           	opt stack 0
  4642  0030A0                     _PIN_MANAGER_Initialize:
  4643                           	opt stack 20
  4644                           
  4645                           ;pin_manager.c: 57: LATA = 0x00;
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;incstack = 0
  4649  0030A0  6A83               	clrf	3971,c	;volatile
  4650                           
  4651                           ;pin_manager.c: 58: LATB = 0x00;
  4652  0030A2  6A84               	clrf	3972,c	;volatile
  4653                           
  4654                           ;pin_manager.c: 59: LATC = 0x00;
  4655  0030A4  6A85               	clrf	3973,c	;volatile
  4656                           
  4657                           ;pin_manager.c: 64: TRISA = 0xC0;
  4658  0030A6  0EC0               	movlw	192
  4659  0030A8  6E88               	movwf	3976,c	;volatile
  4660                           
  4661                           ;pin_manager.c: 65: TRISB = 0x00;
  4662  0030AA  6A89               	clrf	3977,c	;volatile
  4663                           
  4664                           ;pin_manager.c: 66: TRISC = 0x84;
  4665  0030AC  0E84               	movlw	132
  4666  0030AE  6E8A               	movwf	3978,c	;volatile
  4667                           
  4668                           ;pin_manager.c: 71: ANSELC = 0x44;
  4669  0030B0  0E44               	movlw	68
  4670  0030B2  010F               	movlb	15	; () banked
  4671  0030B4  6F21               	movwf	33,b	;volatile
  4672                           
  4673                           ; BSR set to: 15
  4674                           ;pin_manager.c: 72: ANSELB = 0x00;
  4675  0030B6  6B19               	clrf	25,b	;volatile
  4676                           
  4677                           ;pin_manager.c: 73: ANSELA = 0xC0;
  4678  0030B8  0EC0               	movlw	192
  4679  0030BA  6F11               	movwf	17,b	;volatile
  4680                           
  4681                           ; BSR set to: 15
  4682                           ;pin_manager.c: 78: WPUE = 0x00;
  4683  0030BC  6B2D               	clrf	45,b	;volatile
  4684                           
  4685                           ; BSR set to: 15
  4686                           ;pin_manager.c: 79: WPUB = 0x00;
  4687  0030BE  6B18               	clrf	24,b	;volatile
  4688                           
  4689                           ; BSR set to: 15
  4690                           ;pin_manager.c: 80: WPUA = 0x00;
  4691  0030C0  6B10               	clrf	16,b	;volatile
  4692                           
  4693                           ; BSR set to: 15
  4694                           ;pin_manager.c: 81: WPUC = 0x00;
  4695  0030C2  6B20               	clrf	32,b	;volatile
  4696                           
  4697                           ; BSR set to: 15
  4698                           ;pin_manager.c: 86: ODCONA = 0x00;
  4699  0030C4  6B0F               	clrf	15,b	;volatile
  4700                           
  4701                           ; BSR set to: 15
  4702                           ;pin_manager.c: 87: ODCONB = 0x00;
  4703  0030C6  6B17               	clrf	23,b	;volatile
  4704                           
  4705                           ; BSR set to: 15
  4706                           ;pin_manager.c: 88: ODCONC = 0x00;
  4707  0030C8  6B1F               	clrf	31,b	;volatile
  4708                           
  4709                           ;pin_manager.c: 95: bool state = (unsigned char)GIE;
  4710  0030CA  0E00               	movlw	0
  4711  0030CC  BEF2               	btfsc	intcon,7,c	;volatile
  4712  0030CE  0E01               	movlw	1
  4713  0030D0  0100               	movlb	0	; () banked
  4714  0030D2  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;pin_manager.c: 96: GIE = 0;
  4718  0030D4  9EF2               	bcf	intcon,7,c	;volatile
  4719                           
  4720                           ;pin_manager.c: 97: PPSLOCK = 0x55;
  4721  0030D6  0E55               	movlw	85
  4722  0030D8  010E               	movlb	14	; () banked
  4723  0030DA  6FA0               	movwf	160,b	;volatile
  4724                           
  4725                           ;pin_manager.c: 98: PPSLOCK = 0xAA;
  4726  0030DC  0EAA               	movlw	170
  4727  0030DE  6FA0               	movwf	160,b	;volatile
  4728                           
  4729                           ; BSR set to: 14
  4730                           ;pin_manager.c: 99: PPSLOCKbits.PPSLOCKED = 0x00;
  4731  0030E0  91A0               	bcf	160,0,b	;volatile
  4732                           
  4733                           ;pin_manager.c: 101: RX1PPSbits.RXPPS = 0x17;
  4734  0030E2  51B5               	movf	181,w,b	;volatile
  4735  0030E4  0BE0               	andlw	-32
  4736  0030E6  0917               	iorlw	23
  4737  0030E8  6FB5               	movwf	181,b	;volatile
  4738                           
  4739                           ;pin_manager.c: 102: RC6PPS = 0x09;
  4740  0030EA  0E09               	movlw	9
  4741  0030EC  6FFD               	movwf	253,b	;volatile
  4742                           
  4743                           ;pin_manager.c: 104: PPSLOCK = 0x55;
  4744  0030EE  0E55               	movlw	85
  4745  0030F0  6FA0               	movwf	160,b	;volatile
  4746                           
  4747                           ;pin_manager.c: 105: PPSLOCK = 0xAA;
  4748  0030F2  0EAA               	movlw	170
  4749  0030F4  6FA0               	movwf	160,b	;volatile
  4750                           
  4751                           ; BSR set to: 14
  4752                           ;pin_manager.c: 106: PPSLOCKbits.PPSLOCKED = 0x01;
  4753  0030F6  81A0               	bsf	160,0,b	;volatile
  4754                           
  4755                           ; BSR set to: 14
  4756                           ;pin_manager.c: 108: GIE = state;
  4757  0030F8  0100               	movlb	0	; () banked
  4758  0030FA  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
  4759  0030FC  D002               	goto	u4570
  4760  0030FE  8EF2               	bsf	intcon,7,c	;volatile
  4761  003100  0CAA               	retlw	170
  4762  003102                     u4570:
  4763  003102  9EF2               	bcf	intcon,7,c	;volatile
  4764  003104  0012               	return		;funcret
  4765  003106                     __end_of_PIN_MANAGER_Initialize:
  4766                           	opt stack 0
  4767                           tosu	equ	0xFFF
  4768                           tosh	equ	0xFFE
  4769                           tosl	equ	0xFFD
  4770                           pclath	equ	0xFFA
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           postinc0	equ	0xFEE
  4779                           plusw0	equ	0xFEB
  4780                           wreg	equ	0xFE8
  4781                           indf1	equ	0xFE7
  4782                           postinc1	equ	0xFE6
  4783                           postdec1	equ	0xFE5
  4784                           plusw1	equ	0xFE3
  4785                           fsr1h	equ	0xFE2
  4786                           fsr1l	equ	0xFE1
  4787                           indf2	equ	0xFDF
  4788                           postinc2	equ	0xFDE
  4789                           postdec2	equ	0xFDD
  4790                           plusw2	equ	0xFDB
  4791                           fsr2h	equ	0xFDA
  4792                           fsr2l	equ	0xFD9
  4793                           status	equ	0xFD8
  4794                           
  4795 ;; *************** function _OSCILLATOR_Initialize *****************
  4796 ;; Defined at:
  4797 ;;		line 117 in file "mcc_generated_files/mcc.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;                  1    wreg      void 
  4804 ;; Registers used:
  4805 ;;		wreg, status,2
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 3F/E
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4815 ;;Total ram usage:        0 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    9
  4818 ;; This function calls:
  4819 ;;		Nothing
  4820 ;; This function is called by:
  4821 ;;		_SYSTEM_Initialize
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text15
  4826  0035D6                     __ptext15:
  4827                           	opt stack 0
  4828  0035D6                     _OSCILLATOR_Initialize:
  4829                           	opt stack 20
  4830                           
  4831                           ;mcc.c: 120: OSCCON1 = 0x22;
  4832                           
  4833                           ;incstack = 0
  4834  0035D6  0E22               	movlw	34
  4835  0035D8  010E               	movlb	14	; () banked
  4836  0035DA  6FD8               	movwf	216,b	;volatile
  4837                           
  4838                           ; BSR set to: 14
  4839                           ;mcc.c: 122: OSCCON3 = 0x00;
  4840  0035DC  6BDA               	clrf	218,b	;volatile
  4841                           
  4842                           ; BSR set to: 14
  4843                           ;mcc.c: 124: OSCEN = 0x00;
  4844  0035DE  6BDC               	clrf	220,b	;volatile
  4845                           
  4846                           ;mcc.c: 126: OSCFRQ = 0x02;
  4847  0035E0  0E02               	movlw	2
  4848  0035E2  6FDE               	movwf	222,b	;volatile
  4849                           
  4850                           ; BSR set to: 14
  4851                           ;mcc.c: 128: OSCTUNE = 0x00;
  4852  0035E4  6BDD               	clrf	221,b	;volatile
  4853  0035E6                     l848:
  4854                           
  4855                           ; BSR set to: 14
  4856  0035E6  B1DB               	btfsc	219,0,b	;volatile
  4857                           
  4858                           ; BSR set to: 14
  4859  0035E8  0012               	return		;funcret
  4860  0035EA  D7FD               	goto	l848
  4861  0035EC                     __end_of_OSCILLATOR_Initialize:
  4862                           	opt stack 0
  4863                           tosu	equ	0xFFF
  4864                           tosh	equ	0xFFE
  4865                           tosl	equ	0xFFD
  4866                           pclath	equ	0xFFA
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           postinc0	equ	0xFEE
  4875                           plusw0	equ	0xFEB
  4876                           wreg	equ	0xFE8
  4877                           indf1	equ	0xFE7
  4878                           postinc1	equ	0xFE6
  4879                           postdec1	equ	0xFE5
  4880                           plusw1	equ	0xFE3
  4881                           fsr1h	equ	0xFE2
  4882                           fsr1l	equ	0xFE1
  4883                           indf2	equ	0xFDF
  4884                           postinc2	equ	0xFDE
  4885                           postdec2	equ	0xFDD
  4886                           plusw2	equ	0xFDB
  4887                           fsr2h	equ	0xFDA
  4888                           fsr2l	equ	0xFD9
  4889                           status	equ	0xFD8
  4890                           
  4891 ;; *************** function _INTERRUPT_Initialize *****************
  4892 ;; Defined at:
  4893 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;		None
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      void 
  4900 ;; Registers used:
  4901 ;;		None
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4911 ;;Total ram usage:        0 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    9
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_SYSTEM_Initialize
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text16
  4922  0036B8                     __ptext16:
  4923                           	opt stack 0
  4924  0036B8                     _INTERRUPT_Initialize:
  4925                           	opt stack 20
  4926                           
  4927                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
  4928                           
  4929                           ; BSR set to: 14
  4930                           ;incstack = 0
  4931  0036B8  9AF2               	bcf	intcon,5,c	;volatile
  4932  0036BA  0012               	return		;funcret
  4933  0036BC                     __end_of_INTERRUPT_Initialize:
  4934                           	opt stack 0
  4935                           tosu	equ	0xFFF
  4936                           tosh	equ	0xFFE
  4937                           tosl	equ	0xFFD
  4938                           pclath	equ	0xFFA
  4939                           tblptru	equ	0xFF8
  4940                           tblptrh	equ	0xFF7
  4941                           tblptrl	equ	0xFF6
  4942                           tablat	equ	0xFF5
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon	equ	0xFF2
  4946                           postinc0	equ	0xFEE
  4947                           plusw0	equ	0xFEB
  4948                           wreg	equ	0xFE8
  4949                           indf1	equ	0xFE7
  4950                           postinc1	equ	0xFE6
  4951                           postdec1	equ	0xFE5
  4952                           plusw1	equ	0xFE3
  4953                           fsr1h	equ	0xFE2
  4954                           fsr1l	equ	0xFE1
  4955                           indf2	equ	0xFDF
  4956                           postinc2	equ	0xFDE
  4957                           postdec2	equ	0xFDD
  4958                           plusw2	equ	0xFDB
  4959                           fsr2h	equ	0xFDA
  4960                           fsr2l	equ	0xFD9
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _ReadGPS *****************
  4964 ;; Defined at:
  4965 ;;		line 174 in file "libs/funcs.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;                  1    wreg      void 
  4972 ;; Registers used:
  4973 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 3F/0
  4976 ;;		On exit  : 3F/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4983 ;;Total ram usage:        0 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:   15
  4986 ;; This function calls:
  4987 ;;		_ReadGPS_DATE_TIME
  4988 ;; This function is called by:
  4989 ;;		_main
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text17
  4994  003106                     __ptext17:
  4995                           	opt stack 0
  4996  003106                     _ReadGPS:
  4997                           	opt stack 15
  4998                           
  4999                           ; BSR set to: 0
  5000                           ;funcs.c: 175: if (ReadGPS_DATE_TIME()) {
  5001                           
  5002                           ;incstack = 0
  5003  003106  EC2F  F00C         	call	_ReadGPS_DATE_TIME	;wreg free
  5004  00310A  0900               	iorlw	0
  5005  00310C  E013               	bz	l4778
  5006                           
  5007                           ; BSR set to: 0
  5008                           ;funcs.c: 181: DATE_TIME = GPS_DATE_TIME;
  5009  00310E  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5010  003112  EE10  F0BD         	lfsr	1,_DATE_TIME
  5011  003116  0E0A               	movlw	10
  5012  003118                     u4761:
  5013  003118  CFDB FFE3          	movff	plusw2,plusw1
  5014  00311C  06E8               	decf	wreg,f,c
  5015  00311E  E2FC               	bc	u4761
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;funcs.c: 182: TIME_AT_LAST_GPS_SYNC = DATE_TIME.SECOND;
  5019  003120  C0BD  F0C8         	movff	_DATE_TIME,_TIME_AT_LAST_GPS_SYNC
  5020  003124  C0BE  F0C9         	movff	_DATE_TIME+1,_TIME_AT_LAST_GPS_SYNC+1
  5021  003128  C0BF  F0CA         	movff	_DATE_TIME+2,_TIME_AT_LAST_GPS_SYNC+2
  5022  00312C  C0C0  F0CB         	movff	_DATE_TIME+3,_TIME_AT_LAST_GPS_SYNC+3
  5023  003130                     l4776:
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;funcs.c: 183: FLAGS_0.bits.b3 = SET;
  5027  003130  87E6               	bsf	_FLAGS_0& (0+255),3,b
  5028                           
  5029                           ;funcs.c: 184: } else {
  5030  003132  D011               	goto	l4790
  5031  003134                     l4778:
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;funcs.c: 185: NO_OF_TIMES_GPS_FAILED++;
  5035  003134  2BE7               	incf	_NO_OF_TIMES_GPS_FAILED& (0+255),f,b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;funcs.c: 186: if (NO_OF_TIMES_GPS_FAILED > 4) {
  5039  003136  0E04               	movlw	4
  5040  003138  65E7               	cpfsgt	_NO_OF_TIMES_GPS_FAILED& (0+255),b
  5041  00313A  D001               	goto	l691
  5042  00313C  D7F9               	goto	l4776
  5043  00313E                     l691:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;funcs.c: 189: TIME_WHEN_GPS_IS_SWITCHED_ON = DATE_TIME.SECOND -
  5047                           ;funcs.c: 190: ((1*60) - (1*60));
  5048  00313E  D80D               	call	PL88	;call to abstracted procedure
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;funcs.c: 191: if (TIME_WHEN_GPS_IS_SWITCHED_ON<0)
  5052  003140  AFCF               	btfss	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),7,b
  5053  003142  D008               	goto	l4788
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;funcs.c: 192: TIME_WHEN_GPS_IS_SWITCHED_ON += 86400;
  5057  003144  0E80               	movlw	128
  5058  003146  27CC               	addwf	_TIME_WHEN_GPS_IS_SWITCHED_ON& (0+255),f,b
  5059  003148  0E51               	movlw	81
  5060  00314A  23CD               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+1)& (0+255),f,b
  5061  00314C  0E01               	movlw	1
  5062  00314E  23CE               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+2)& (0+255),f,b
  5063  003150  0E00               	movlw	0
  5064  003152  23CF               	addwfc	(_TIME_WHEN_GPS_IS_SWITCHED_ON+3)& (0+255),f,b
  5065  003154                     l4788:
  5066                           
  5067                           ; BSR set to: 0
  5068                           ;funcs.c: 193: FLAGS_0.bits.b1 = SET;
  5069  003154  83E6               	bsf	_FLAGS_0& (0+255),1,b
  5070  003156                     l4790:
  5071                           
  5072                           ; BSR set to: 0
  5073                           ;funcs.c: 194: }
  5074                           ;funcs.c: 195: }
  5075                           ;funcs.c: 196: FLAGS_0.bits.b2 = RESET;
  5076  003156  95E6               	bcf	_FLAGS_0& (0+255),2,b
  5077                           
  5078                           ; BSR set to: 0
  5079  003158  0012               	return		;funcret
  5080  00315A                     __end_of_ReadGPS:
  5081                           	opt stack 0
  5082  00315A                     PL88:
  5083                           	opt stack 21
  5084  00315A  C0BD  F0CC         	movff	_DATE_TIME,_TIME_WHEN_GPS_IS_SWITCHED_ON
  5085  00315E  C0BE  F0CD         	movff	_DATE_TIME+1,_TIME_WHEN_GPS_IS_SWITCHED_ON+1
  5086  003162  C0BF  F0CE         	movff	_DATE_TIME+2,_TIME_WHEN_GPS_IS_SWITCHED_ON+2
  5087  003166  C0C0  F0CF         	movff	_DATE_TIME+3,_TIME_WHEN_GPS_IS_SWITCHED_ON+3
  5088  00316A  0012               	return	
  5089  00316C                     __end_ofPL88:
  5090                           	opt stack 0
  5091                           tosu	equ	0xFFF
  5092                           tosh	equ	0xFFE
  5093                           tosl	equ	0xFFD
  5094                           pclath	equ	0xFFA
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           intcon	equ	0xFF2
  5102                           postinc0	equ	0xFEE
  5103                           plusw0	equ	0xFEB
  5104                           wreg	equ	0xFE8
  5105                           indf1	equ	0xFE7
  5106                           postinc1	equ	0xFE6
  5107                           postdec1	equ	0xFE5
  5108                           plusw1	equ	0xFE3
  5109                           fsr1h	equ	0xFE2
  5110                           fsr1l	equ	0xFE1
  5111                           indf2	equ	0xFDF
  5112                           postinc2	equ	0xFDE
  5113                           postdec2	equ	0xFDD
  5114                           plusw2	equ	0xFDB
  5115                           fsr2h	equ	0xFDA
  5116                           fsr2l	equ	0xFD9
  5117                           status	equ	0xFD8
  5118                           
  5119 ;; *************** function _ReadGPS_DATE_TIME *****************
  5120 ;; Defined at:
  5121 ;;		line 115 in file "libs/funcs.c"
  5122 ;; Parameters:    Size  Location     Type
  5123 ;;		None
  5124 ;; Auto vars:     Size  Location     Type
  5125 ;;  TempItr         1   77[BANK0 ] unsigned char 
  5126 ;;  Date            7   69[BANK0 ] unsigned char [7]
  5127 ;;  Time            7   62[BANK0 ] unsigned char [7]
  5128 ;;  IsValidGPS      1   76[BANK0 ] enum E11037
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      enum E11037
  5131 ;; Registers used:
  5132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 3F/0
  5135 ;;		On exit  : 3F/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5139 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5140 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5141 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5142 ;;Total ram usage:       20 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:   14
  5145 ;; This function calls:
  5146 ;;		_AdjustDayLightSaving
  5147 ;;		_DecreaseByADay
  5148 ;;		_EUSART1_Initialize
  5149 ;;		_GetDay
  5150 ;;		_IncreaseByADay
  5151 ;;		_ReadGPSDateTime
  5152 ;;		_TimeTextToSecond
  5153 ;;		_ValidateDateTime
  5154 ;; This function is called by:
  5155 ;;		_ReadGPS
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text18
  5160  00185E                     __ptext18:
  5161                           	opt stack 0
  5162  00185E                     _ReadGPS_DATE_TIME:
  5163                           	opt stack 15
  5164                           
  5165                           ; BSR set to: 0
  5166                           ;funcs.c: 116: BOOL IsValidGPS = 0;
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;incstack = 0
  5170  00185E  6BAC               	clrf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;funcs.c: 117: char Date[] = "------";
  5174  001860  EE20  F0F3         	lfsr	2,ReadGPS_DATE_TIME@F11475
  5175  001864  EE10  F0A5         	lfsr	1,ReadGPS_DATE_TIME@Date
  5176  001868  0E06               	movlw	6
  5177  00186A                     u4431:
  5178  00186A  CFDB FFE3          	movff	plusw2,plusw1
  5179  00186E  06E8               	decf	wreg,f,c
  5180  001870  E2FC               	bc	u4431
  5181                           
  5182                           ;funcs.c: 118: char Time[] = "------";
  5183  001872  EE20  F0EC         	lfsr	2,ReadGPS_DATE_TIME@F11477
  5184  001876  EE10  F09E         	lfsr	1,ReadGPS_DATE_TIME@Time
  5185  00187A  0E06               	movlw	6
  5186  00187C                     u4441:
  5187  00187C  CFDB FFE3          	movff	plusw2,plusw1
  5188  001880  06E8               	decf	wreg,f,c
  5189  001882  E2FC               	bc	u4441
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;funcs.c: 119: EUSART1_Initialize();
  5193  001884  EC00  F01B         	call	_EUSART1_Initialize	;wreg free
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;funcs.c: 120: for (UINT8 TempItr=0; TempItr<5; TempItr++ ) {
  5197  001888  6BAD               	clrf	ReadGPS_DATE_TIME@TempItr& (0+255),b
  5198  00188A                     l4514:
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;funcs.c: 121: ReadGPSDateTime(Date, Time);
  5202  00188A  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5203  00188C  6F60               	movwf	ReadGPSDateTime@Date& (0+255),b
  5204  00188E  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5205  001890  6F61               	movwf	ReadGPSDateTime@Time& (0+255),b
  5206  001892  ECB4  F014         	call	_ReadGPSDateTime	;wreg free
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;funcs.c: 122: if (ValidateDateTime(Date, Time)) {
  5210  001896  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5211  001898  6F60               	movwf	ValidateDateTime@Date& (0+255),b
  5212  00189A  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5213  00189C  6F61               	movwf	ValidateDateTime@Time& (0+255),b
  5214  00189E  EC79  F012         	call	_ValidateDateTime	;wreg free
  5215  0018A2  0900               	iorlw	0
  5216  0018A4  E003               	bz	l4520
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;funcs.c: 123: IsValidGPS = 1;
  5220  0018A6  0E01               	movlw	1
  5221  0018A8  6FAC               	movwf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),b
  5222                           
  5223                           ;funcs.c: 124: break;
  5224  0018AA  D004               	goto	l4524
  5225  0018AC                     l4520:
  5226                           
  5227                           ; BSR set to: 0
  5228  0018AC  2BAD               	incf	ReadGPS_DATE_TIME@TempItr& (0+255),f,b
  5229                           
  5230                           ; BSR set to: 0
  5231  0018AE  0E04               	movlw	4
  5232  0018B0  65AD               	cpfsgt	ReadGPS_DATE_TIME@TempItr& (0+255),b
  5233  0018B2  D7EB               	goto	l4514
  5234  0018B4                     l4524:
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;funcs.c: 125: }
  5238                           ;funcs.c: 126: }
  5239                           ;funcs.c: 127: if (IsValidGPS) {
  5240  0018B4  51AC               	movf	ReadGPS_DATE_TIME@IsValidGPS& (0+255),w,b
  5241  0018B6  E101 D0AD          	bz	l4554
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;funcs.c: 128: GPS_DATE_TIME.DATE.Day = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5245  0018BA  51A5               	movf	ReadGPS_DATE_TIME@Date& (0+255),w,b
  5246  0018BC  0D0A               	mullw	10
  5247  0018BE  51A6               	movf	(ReadGPS_DATE_TIME@Date+1)& (0+255),w,b
  5248  0018C0  D8AA               	call	PL102	;call to abstracted procedure
  5249  0018C2  6FB6               	movwf	(_GPS_DATE_TIME+4)& (0+255),b
  5250  0018C4  0EFD               	movlw	253
  5251  0018C6  20F4               	addwfc	prodh,w,c
  5252  0018C8  6FB7               	movwf	(_GPS_DATE_TIME+5)& (0+255),b
  5253                           
  5254                           ;funcs.c: 129: GPS_DATE_TIME.DATE.Month = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5255  0018CA  51A7               	movf	(ReadGPS_DATE_TIME@Date+2)& (0+255),w,b
  5256  0018CC  0D0A               	mullw	10
  5257  0018CE  51A8               	movf	(ReadGPS_DATE_TIME@Date+3)& (0+255),w,b
  5258  0018D0  D8A2               	call	PL102	;call to abstracted procedure
  5259  0018D2  6FB8               	movwf	(_GPS_DATE_TIME+6)& (0+255),b
  5260  0018D4  0EFD               	movlw	253
  5261  0018D6  20F4               	addwfc	prodh,w,c
  5262  0018D8  6FB9               	movwf	(_GPS_DATE_TIME+7)& (0+255),b
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;funcs.c: 130: GPS_DATE_TIME.DAY.Val = (0x40 >> GetDay(Date));
  5266  0018DA  0EA5               	movlw	low ReadGPS_DATE_TIME@Date
  5267  0018DC  6F6E               	movwf	GetDay@Date& (0+255),b
  5268  0018DE  EC7D  F010         	call	_GetDay	;wreg free
  5269  0018E2  6F9A               	movwf	??_ReadGPS_DATE_TIME& (0+255),b
  5270  0018E4  0E40               	movlw	64
  5271  0018E6  6F9B               	movwf	(??_ReadGPS_DATE_TIME+1)& (0+255),b
  5272  0018E8  6B9C               	clrf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  5273  0018EA  2B9A               	incf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5274  0018EC  D003               	goto	u4484
  5275  0018EE                     u4485:
  5276  0018EE  359C               	rlcf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  5277  0018F0  339C               	rrcf	(??_ReadGPS_DATE_TIME+2)& (0+255),f,b
  5278  0018F2  339B               	rrcf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5279  0018F4                     u4484:
  5280  0018F4  2F9A               	decfsz	??_ReadGPS_DATE_TIME& (0+255),f,b
  5281  0018F6  D7FB               	goto	u4485
  5282  0018F8  0100               	movlb	0	; () banked
  5283  0018FA  479B               	rlncf	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5284  0018FC  51BA               	movf	(_GPS_DATE_TIME+8)& (0+255),w,b
  5285  0018FE  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5286  001900  0B01               	andlw	-255
  5287  001902  199B               	xorwf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5288  001904  6FBA               	movwf	(_GPS_DATE_TIME+8)& (0+255),b
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;funcs.c: 131: GPS_DATE_TIME.YEAR = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  5292  001906  51FE               	movf	_CENTURY& (0+255),w,b
  5293  001908  0D64               	mullw	100
  5294  00190A  CFF3 F09A          	movff	prodl,??_ReadGPS_DATE_TIME
  5295  00190E  CFF4 F09B          	movff	prodh,??_ReadGPS_DATE_TIME+1
  5296  001912  51A9               	movf	(ReadGPS_DATE_TIME@Date+4)& (0+255),w,b
  5297  001914  0D0A               	mullw	10
  5298  001916  50F3               	movf	prodl,w,c
  5299  001918  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5300  00191A  50F4               	movf	prodh,w,c
  5301  00191C  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5302  00191E  51AA               	movf	(ReadGPS_DATE_TIME@Date+5)& (0+255),w,b
  5303  001920  279A               	addwf	??_ReadGPS_DATE_TIME& (0+255),f,b
  5304  001922  0E00               	movlw	0
  5305  001924  239B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),f,b
  5306  001926  0EF0               	movlw	240
  5307  001928  259A               	addwf	??_ReadGPS_DATE_TIME& (0+255),w,b
  5308  00192A  6FBB               	movwf	(_GPS_DATE_TIME+9)& (0+255),b
  5309  00192C  0EFD               	movlw	253
  5310  00192E  219B               	addwfc	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5311  001930  6FBC               	movwf	(_GPS_DATE_TIME+10)& (0+255),b
  5312                           
  5313                           ;funcs.c: 132: GPS_DATE_TIME.SECOND = TimeTextToSecond (Time);
  5314  001932  0E9E               	movlw	low ReadGPS_DATE_TIME@Time
  5315  001934  6F6C               	movwf	TimeTextToSecond@Time& (0+255),b
  5316  001936  EC87  F011         	call	_TimeTextToSecond	;wreg free
  5317  00193A  C06C  F0B2         	movff	?_TimeTextToSecond,_GPS_DATE_TIME
  5318  00193E  C06D  F0B3         	movff	?_TimeTextToSecond+1,_GPS_DATE_TIME+1
  5319  001942  C06E  F0B4         	movff	?_TimeTextToSecond+2,_GPS_DATE_TIME+2
  5320  001946  C06F  F0B5         	movff	?_TimeTextToSecond+3,_GPS_DATE_TIME+3
  5321                           
  5322                           ; BSR set to: 0
  5323                           ;funcs.c: 133: GPS_DATE_TIME.SECOND += TIME_ZONE;
  5324  00194A  C0E4  F09A         	movff	_TIME_ZONE,??_ReadGPS_DATE_TIME
  5325  00194E  C0E5  F09B         	movff	_TIME_ZONE+1,??_ReadGPS_DATE_TIME+1
  5326  001952  0E00               	movlw	0
  5327  001954  BF9B               	btfsc	(??_ReadGPS_DATE_TIME+1)& (0+255),7,b
  5328  001956  0EFF               	movlw	255
  5329  001958  6F9C               	movwf	(??_ReadGPS_DATE_TIME+2)& (0+255),b
  5330  00195A  6F9D               	movwf	(??_ReadGPS_DATE_TIME+3)& (0+255),b
  5331  00195C  519A               	movf	??_ReadGPS_DATE_TIME& (0+255),w,b
  5332  00195E  27B2               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5333  001960  519B               	movf	(??_ReadGPS_DATE_TIME+1)& (0+255),w,b
  5334  001962  23B3               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5335  001964  519C               	movf	(??_ReadGPS_DATE_TIME+2)& (0+255),w,b
  5336  001966  23B4               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5337  001968  519D               	movf	(??_ReadGPS_DATE_TIME+3)& (0+255),w,b
  5338  00196A  23B5               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;funcs.c: 134: if (GPS_DATE_TIME.SECOND < 0) {
  5342  00196C  AFB5               	btfss	(_GPS_DATE_TIME+3)& (0+255),7,b
  5343  00196E  D01A               	goto	l4540
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;funcs.c: 135: GPS_DATE_TIME.SECOND += 86400;
  5347  001970  0E80               	movlw	128
  5348  001972  27B2               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5349  001974  0E51               	movlw	81
  5350  001976  23B3               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5351  001978  0E01               	movlw	1
  5352  00197A  23B4               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5353  00197C  0E00               	movlw	0
  5354  00197E  23B5               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;funcs.c: 136: GPS_DATE_TIME = DecreaseByADay(GPS_DATE_TIME);
  5358  001980  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5359  001984  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  5360  001988  0E0A               	movlw	10
  5361  00198A                     u4501:
  5362  00198A  CFDB FFEB          	movff	plusw2,plusw0
  5363  00198E  06E8               	decf	wreg,f,c
  5364  001990  E2FC               	bc	u4501
  5365  001992  EC01  F012         	call	_DecreaseByADay	;wreg free
  5366  001996  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5367  00199A  0E0A               	movlw	10
  5368  00199C                     u4511:
  5369  00199C  CFEB FFDB          	movff	plusw0,plusw2
  5370  0019A0  06E8               	decf	wreg,f,c
  5371  0019A2  E2FC               	bc	u4511
  5372  0019A4                     l4540:
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;funcs.c: 137: }
  5376                           ;funcs.c: 138: if (GPS_DATE_TIME.SECOND > 86400) {
  5377  0019A4  BFB5               	btfsc	(_GPS_DATE_TIME+3)& (0+255),7,b
  5378  0019A6  D023               	goto	l4546
  5379  0019A8  51B5               	movf	(_GPS_DATE_TIME+3)& (0+255),w,b
  5380  0019AA  E107               	bnz	u4520
  5381  0019AC  0E81               	movlw	129
  5382  0019AE  5DB2               	subwf	_GPS_DATE_TIME& (0+255),w,b
  5383  0019B0  0E51               	movlw	81
  5384  0019B2  59B3               	subwfb	(_GPS_DATE_TIME+1)& (0+255),w,b
  5385  0019B4  0E01               	movlw	1
  5386  0019B6  59B4               	subwfb	(_GPS_DATE_TIME+2)& (0+255),w,b
  5387  0019B8  E31A               	bnc	l4546
  5388  0019BA                     u4520:
  5389                           
  5390                           ; BSR set to: 0
  5391                           ;funcs.c: 139: GPS_DATE_TIME.SECOND -= 86400;
  5392  0019BA  0E80               	movlw	128
  5393  0019BC  27B2               	addwf	_GPS_DATE_TIME& (0+255),f,b
  5394  0019BE  0EAE               	movlw	174
  5395  0019C0  23B3               	addwfc	(_GPS_DATE_TIME+1)& (0+255),f,b
  5396  0019C2  0EFE               	movlw	254
  5397  0019C4  23B4               	addwfc	(_GPS_DATE_TIME+2)& (0+255),f,b
  5398  0019C6  0EFF               	movlw	255
  5399  0019C8  23B5               	addwfc	(_GPS_DATE_TIME+3)& (0+255),f,b
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;funcs.c: 140: GPS_DATE_TIME = IncreaseByADay(GPS_DATE_TIME);
  5403  0019CA  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5404  0019CE  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  5405  0019D2  0E0A               	movlw	10
  5406  0019D4                     u4531:
  5407  0019D4  CFDB FFEB          	movff	plusw2,plusw0
  5408  0019D8  06E8               	decf	wreg,f,c
  5409  0019DA  E2FC               	bc	u4531
  5410  0019DC  ECD4  F013         	call	_IncreaseByADay	;wreg free
  5411  0019E0  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5412  0019E4  0E0A               	movlw	10
  5413  0019E6                     u4541:
  5414  0019E6  CFEB FFDB          	movff	plusw0,plusw2
  5415  0019EA  06E8               	decf	wreg,f,c
  5416  0019EC  E2FC               	bc	u4541
  5417  0019EE                     l4546:
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;funcs.c: 141: }
  5421                           ;funcs.c: 142: GPS_DATE_TIME = AdjustDayLightSaving(GPS_DATE_TIME);
  5422  0019EE  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5423  0019F2  EE00  F089         	lfsr	0,AdjustDayLightSaving@dt
  5424  0019F6  0E0A               	movlw	10
  5425  0019F8                     u4551:
  5426  0019F8  CFDB FFEB          	movff	plusw2,plusw0
  5427  0019FC  06E8               	decf	wreg,f,c
  5428  0019FE  E2FC               	bc	u4551
  5429  001A00  ECEB  F00F         	call	_AdjustDayLightSaving	;wreg free
  5430  001A04  EE20  F0B2         	lfsr	2,_GPS_DATE_TIME
  5431  001A08  0E0A               	movlw	10
  5432  001A0A                     u4561:
  5433  001A0A  CFEB FFDB          	movff	plusw0,plusw2
  5434  001A0E  06E8               	decf	wreg,f,c
  5435  001A10  E2FC               	bc	u4561
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;funcs.c: 143: return 1;
  5439  001A12  0C01               	retlw	1
  5440  001A14                     l4554:
  5441                           
  5442                           ; BSR set to: 0
  5443                           
  5444                           ; BSR set to: 0
  5445                           ;funcs.c: 145: return 0;
  5446  001A14  0C00               	retlw	0	;funcret
  5447  001A16                     __end_of_ReadGPS_DATE_TIME:
  5448                           	opt stack 0
  5449  001A16                     PL102:
  5450                           	opt stack 15
  5451  001A16  26F3               	addwf	prodl,f,c
  5452  001A18  0E00               	movlw	0
  5453  001A1A  22F4               	addwfc	prodh,f,c
  5454  001A1C  0EF0               	movlw	240
  5455  001A1E  24F3               	addwf	prodl,w,c
  5456  001A20  0012               	return	
  5457  001A22                     __end_ofPL102:
  5458                           	opt stack 0
  5459                           tosu	equ	0xFFF
  5460                           tosh	equ	0xFFE
  5461                           tosl	equ	0xFFD
  5462                           pclath	equ	0xFFA
  5463                           tblptru	equ	0xFF8
  5464                           tblptrh	equ	0xFF7
  5465                           tblptrl	equ	0xFF6
  5466                           tablat	equ	0xFF5
  5467                           prodh	equ	0xFF4
  5468                           prodl	equ	0xFF3
  5469                           intcon	equ	0xFF2
  5470                           postinc0	equ	0xFEE
  5471                           plusw0	equ	0xFEB
  5472                           wreg	equ	0xFE8
  5473                           indf1	equ	0xFE7
  5474                           postinc1	equ	0xFE6
  5475                           postdec1	equ	0xFE5
  5476                           plusw1	equ	0xFE3
  5477                           fsr1h	equ	0xFE2
  5478                           fsr1l	equ	0xFE1
  5479                           indf2	equ	0xFDF
  5480                           postinc2	equ	0xFDE
  5481                           postdec2	equ	0xFDD
  5482                           plusw2	equ	0xFDB
  5483                           fsr2h	equ	0xFDA
  5484                           fsr2l	equ	0xFD9
  5485                           status	equ	0xFD8
  5486                           
  5487 ;; *************** function _ValidateDateTime *****************
  5488 ;; Defined at:
  5489 ;;		line 138 in file "libs/gps.c"
  5490 ;; Parameters:    Size  Location     Type
  5491 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  5492 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5493 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  5494 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  Item            1    3[BANK0 ] char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      enum E11037
  5499 ;; Registers used:
  5500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5501 ;; Tracked objects:
  5502 ;;		On entry : 3F/0
  5503 ;;		On exit  : 3F/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5506 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5507 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5509 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5510 ;;Total ram usage:        4 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    9
  5513 ;; This function calls:
  5514 ;;		Nothing
  5515 ;; This function is called by:
  5516 ;;		_ReadGPS_DATE_TIME
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text19
  5521  0024F2                     __ptext19:
  5522                           	opt stack 0
  5523  0024F2                     _ValidateDateTime:
  5524                           	opt stack 19
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;gps.c: 139: INT8 Item;
  5528                           ;gps.c: 146: Item = (Date[0]-0x30)*10 + (Date[1]-0x30);
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;incstack = 0
  5532  0024F2  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5533  0024F4  D86F               	call	PL106	;call to abstracted procedure
  5534  0024F6  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5535  0024F8  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5536  0024FA  6ED9               	movwf	fsr2l,c
  5537  0024FC  6ADA               	clrf	fsr2h,c
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;gps.c: 147: if (Item<=0 || Item>31) return 0;
  5541  0024FE  D84A               	call	PL10	;call to abstracted procedure
  5542  002500  A0D8               	btfss	status,0,c
  5543  002502  0C00               	retlw	0
  5544                           
  5545                           ; BSR set to: 0
  5546  002504  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5547  002506  0A80               	xorlw	128
  5548  002508  0F60               	addlw	-160
  5549  00250A  E301               	bnc	l3956
  5550                           
  5551                           ; BSR set to: 0
  5552  00250C  0C00               	retlw	0
  5553  00250E                     l3956:
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;gps.c: 148: Item = (Date[2]-0x30)*10 + (Date[3]-0x30);
  5557  00250E  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5558  002510  D855               	call	PL64	;call to abstracted procedure
  5559  002512  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5560  002514  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5561  002516  D848               	call	PL44	;call to abstracted procedure
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;gps.c: 149: if (Item<=0 || Item>12) return 0;
  5565  002518  D83D               	call	PL10	;call to abstracted procedure
  5566  00251A  A0D8               	btfss	status,0,c
  5567  00251C  0C00               	retlw	0
  5568                           
  5569                           ; BSR set to: 0
  5570  00251E  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5571  002520  0A80               	xorlw	128
  5572  002522  0F73               	addlw	-141
  5573  002524  E301               	bnc	l3966
  5574  002526  0C00               	retlw	0
  5575  002528                     l3966:
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;gps.c: 150: Item = (Date[4]-0x30)*10 + (Date[5]-0x30);
  5579  002528  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5580  00252A  D84E               	call	PL72	;call to abstracted procedure
  5581  00252C  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5582  00252E  5160               	movf	ValidateDateTime@Date& (0+255),w,b
  5583  002530  D840               	call	PL46	;call to abstracted procedure
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;gps.c: 151: if (Item<=0 || Item>99) return 0;
  5587  002532  D830               	call	PL10	;call to abstracted procedure
  5588  002534  A0D8               	btfss	status,0,c
  5589  002536  0C00               	retlw	0
  5590                           
  5591                           ; BSR set to: 0
  5592  002538  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5593  00253A  0A80               	xorlw	128
  5594  00253C  0F1C               	addlw	-228
  5595  00253E  E301               	bnc	l3976
  5596  002540  0C00               	retlw	0
  5597  002542                     l3976:
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;gps.c: 153: Item = (Time[0]-0x30)*10 + (Time[1]-0x30);
  5601  002542  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5602  002544  D847               	call	PL106	;call to abstracted procedure
  5603  002546  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5604  002548  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5605  00254A  6ED9               	movwf	fsr2l,c
  5606  00254C  6ADA               	clrf	fsr2h,c
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;gps.c: 154: if (Item<=0 || Item>23) return 0;
  5610  00254E  D822               	call	PL10	;call to abstracted procedure
  5611  002550  A0D8               	btfss	status,0,c
  5612  002552  0C00               	retlw	0
  5613                           
  5614                           ; BSR set to: 0
  5615  002554  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5616  002556  0A80               	xorlw	128
  5617  002558  0F68               	addlw	-152
  5618  00255A  E301               	bnc	l3986
  5619  00255C  0C00               	retlw	0
  5620  00255E                     l3986:
  5621                           
  5622                           ; BSR set to: 0
  5623                           ;gps.c: 155: Item = (Time[2]-0x30)*10 + (Time[3]-0x30);
  5624  00255E  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5625  002560  D82D               	call	PL64	;call to abstracted procedure
  5626  002562  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5627  002564  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5628  002566  D820               	call	PL44	;call to abstracted procedure
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;gps.c: 156: if (Item<=0 || Item>59) return 0;
  5632  002568  D815               	call	PL10	;call to abstracted procedure
  5633  00256A  A0D8               	btfss	status,0,c
  5634  00256C  0C00               	retlw	0
  5635                           
  5636                           ; BSR set to: 0
  5637  00256E  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5638  002570  0A80               	xorlw	128
  5639  002572  0F44               	addlw	-188
  5640  002574  E301               	bnc	l3996
  5641  002576  0C00               	retlw	0
  5642  002578                     l3996:
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;gps.c: 157: Item = (Time[4]-0x30)*10 + (Time[5]-0x30);
  5646  002578  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5647  00257A  D826               	call	PL72	;call to abstracted procedure
  5648  00257C  6F62               	movwf	??_ValidateDateTime& (0+255),b
  5649  00257E  5161               	movf	ValidateDateTime@Time& (0+255),w,b
  5650  002580  D818               	call	PL46	;call to abstracted procedure
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;gps.c: 158: if (Item<=0 || Item>59) return 0;
  5654  002582  D808               	call	PL10	;call to abstracted procedure
  5655  002584  A0D8               	btfss	status,0,c
  5656  002586  0C00               	retlw	0
  5657                           
  5658                           ; BSR set to: 0
  5659  002588  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5660  00258A  0A80               	xorlw	128
  5661  00258C  0F44               	addlw	-188
  5662  00258E  E301               	bnc	l4006
  5663  002590  0C00               	retlw	0
  5664  002592                     l4006:
  5665                           
  5666                           ; BSR set to: 0
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;gps.c: 160: return 1;
  5670  002592  0C01               	retlw	1	;funcret
  5671  002594                     __end_of_ValidateDateTime:
  5672                           	opt stack 0
  5673  002594                     PL10:
  5674                           	opt stack 19
  5675  002594  50DF               	movf	indf2,w,c
  5676  002596  0D0A               	mullw	10
  5677  002598  50F3               	movf	prodl,w,c
  5678  00259A  2562               	addwf	??_ValidateDateTime& (0+255),w,b
  5679  00259C  0FF0               	addlw	240
  5680  00259E  6F63               	movwf	ValidateDateTime@Item& (0+255),b
  5681  0025A0  5163               	movf	ValidateDateTime@Item& (0+255),w,b
  5682  0025A2  0A80               	xorlw	128
  5683  0025A4  0F7F               	addlw	-129
  5684  0025A6  0012               	return	
  5685  0025A8                     __end_ofPL10:
  5686                           	opt stack 0
  5687  0025A8                     PL44:
  5688                           	opt stack 19
  5689  0025A8  6ED9               	movwf	fsr2l,c
  5690  0025AA  6ADA               	clrf	fsr2h,c
  5691  0025AC  0E02               	movlw	2
  5692  0025AE  26D9               	addwf	fsr2l,f,c
  5693  0025B0  0C02               	retlw	2
  5694  0025B2                     __end_ofPL44:
  5695                           	opt stack 0
  5696  0025B2                     PL46:
  5697                           	opt stack 19
  5698  0025B2  6ED9               	movwf	fsr2l,c
  5699  0025B4  6ADA               	clrf	fsr2h,c
  5700  0025B6  0E04               	movlw	4
  5701  0025B8  26D9               	addwf	fsr2l,f,c
  5702  0025BA  0C04               	retlw	4
  5703  0025BC                     __end_ofPL46:
  5704                           	opt stack 0
  5705  0025BC                     PL64:
  5706                           	opt stack 19
  5707  0025BC  6ED9               	movwf	fsr2l,c
  5708  0025BE  6ADA               	clrf	fsr2h,c
  5709  0025C0  0E03               	movlw	3
  5710  0025C2  26D9               	addwf	fsr2l,f,c
  5711  0025C4  50DF               	movf	indf2,w,c
  5712  0025C6  0012               	return	
  5713  0025C8                     __end_ofPL64:
  5714                           	opt stack 0
  5715  0025C8                     PL72:
  5716                           	opt stack 19
  5717  0025C8  6ED9               	movwf	fsr2l,c
  5718  0025CA  6ADA               	clrf	fsr2h,c
  5719  0025CC  0E05               	movlw	5
  5720  0025CE  26D9               	addwf	fsr2l,f,c
  5721  0025D0  50DF               	movf	indf2,w,c
  5722  0025D2  0012               	return	
  5723  0025D4                     __end_ofPL72:
  5724                           	opt stack 0
  5725  0025D4                     PL106:
  5726                           	opt stack 19
  5727  0025D4  6ED9               	movwf	fsr2l,c
  5728  0025D6  6ADA               	clrf	fsr2h,c
  5729  0025D8  2AD9               	incf	fsr2l,f,c
  5730  0025DA  50DF               	movf	indf2,w,c
  5731  0025DC  0012               	return	
  5732  0025DE                     __end_ofPL106:
  5733                           	opt stack 0
  5734                           tosu	equ	0xFFF
  5735                           tosh	equ	0xFFE
  5736                           tosl	equ	0xFFD
  5737                           pclath	equ	0xFFA
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           postinc0	equ	0xFEE
  5746                           plusw0	equ	0xFEB
  5747                           wreg	equ	0xFE8
  5748                           indf1	equ	0xFE7
  5749                           postinc1	equ	0xFE6
  5750                           postdec1	equ	0xFE5
  5751                           plusw1	equ	0xFE3
  5752                           fsr1h	equ	0xFE2
  5753                           fsr1l	equ	0xFE1
  5754                           indf2	equ	0xFDF
  5755                           postinc2	equ	0xFDE
  5756                           postdec2	equ	0xFDD
  5757                           plusw2	equ	0xFDB
  5758                           fsr2h	equ	0xFDA
  5759                           fsr2l	equ	0xFD9
  5760                           status	equ	0xFD8
  5761                           
  5762 ;; *************** function _TimeTextToSecond *****************
  5763 ;; Defined at:
  5764 ;;		line 148 in file "libs/funcs.c"
  5765 ;; Parameters:    Size  Location     Type
  5766 ;;  Time            1   12[BANK0 ] PTR unsigned char 
  5767 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  Second          4   32[BANK0 ] long 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  4   12[BANK0 ] long 
  5772 ;; Registers used:
  5773 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 3F/0
  5776 ;;		On exit  : 3F/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5779 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5780 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5781 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5782 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5783 ;;Total ram usage:       24 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:   10
  5786 ;; This function calls:
  5787 ;;		___lmul
  5788 ;; This function is called by:
  5789 ;;		_ReadGPS_DATE_TIME
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           	psect	text20
  5794  00230E                     __ptext20:
  5795                           	opt stack 0
  5796  00230E                     _TimeTextToSecond:
  5797                           	opt stack 18
  5798                           
  5799                           ; BSR set to: 0
  5800                           ;funcs.c: 149: INT32 Second;
  5801                           ;funcs.c: 150: Second = (INT32) 3600*((Time[0]-0x30)*10 + (Time[1]-0x30))
  5802                           ;funcs.c: 151: + (INT32) 60*((Time[2]-0x30)*10 + (Time[3]-0x30))
  5803                           ;funcs.c: 152: + (INT32) ((Time[4]-0x30)*10 + (Time[5]-0x30));
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;incstack = 0
  5807  00230E  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5808  002310  ECD9  F012         	call	PL46	;call to abstracted procedure
  5809  002314  D872               	call	PL96	;call to abstracted procedure
  5810  002316  ECE4  F012         	call	PL72	;call to abstracted procedure
  5811  00231A  EC0B  F00D         	call	PL102	;call to abstracted procedure
  5812  00231E  6F70               	movwf	??_TimeTextToSecond& (0+255),b
  5813  002320  0EFD               	movlw	253
  5814  002322  20F4               	addwfc	prodh,w,c
  5815  002324  6F71               	movwf	(??_TimeTextToSecond+1)& (0+255),b
  5816  002326  6B72               	clrf	(??_TimeTextToSecond+2)& (0+255),b
  5817  002328  BF71               	btfsc	(??_TimeTextToSecond+1)& (0+255),7,b
  5818  00232A  0772               	decf	(??_TimeTextToSecond+2)& (0+255),f,b
  5819  00232C  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  5820  00232E  6F73               	movwf	(??_TimeTextToSecond+3)& (0+255),b
  5821  002330  0EF0               	movlw	240
  5822  002332  6F74               	movwf	(??_TimeTextToSecond+4)& (0+255),b
  5823  002334  0EFD               	movlw	253
  5824  002336  6F75               	movwf	(??_TimeTextToSecond+5)& (0+255),b
  5825  002338  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5826  00233A  6ED9               	movwf	fsr2l,c
  5827  00233C  6ADA               	clrf	fsr2h,c
  5828  00233E  D85D               	call	PL96	;call to abstracted procedure
  5829  002340  ECEA  F012         	call	PL106	;call to abstracted procedure
  5830  002344  26F3               	addwf	prodl,f,c
  5831  002346  0E00               	movlw	0
  5832  002348  22F4               	addwfc	prodh,f,c
  5833  00234A  5174               	movf	(??_TimeTextToSecond+4)& (0+255),w,b
  5834  00234C  26F3               	addwf	prodl,f,c
  5835  00234E  5175               	movf	(??_TimeTextToSecond+5)& (0+255),w,b
  5836  002350  D849               	call	PL62	;call to abstracted procedure
  5837  002352  0E10               	movlw	16
  5838  002354  6F64               	movwf	___lmul@multiplicand& (0+255),b
  5839  002356  0E0E               	movlw	14
  5840  002358  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  5841  00235A  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  5842  00235C  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  5843  00235E  EC0A  F019         	call	___lmul	;wreg free
  5844  002362  C060  F076         	movff	?___lmul,??_TimeTextToSecond+6
  5845  002366  C061  F077         	movff	?___lmul+1,??_TimeTextToSecond+7
  5846  00236A  C062  F078         	movff	?___lmul+2,??_TimeTextToSecond+8
  5847  00236E  C063  F079         	movff	?___lmul+3,??_TimeTextToSecond+9
  5848  002372  0EF0               	movlw	240
  5849  002374  6F7A               	movwf	(??_TimeTextToSecond+10)& (0+255),b
  5850  002376  0EFD               	movlw	253
  5851  002378  6F7B               	movwf	(??_TimeTextToSecond+11)& (0+255),b
  5852  00237A  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5853  00237C  ECD4  F012         	call	PL44	;call to abstracted procedure
  5854  002380  D83C               	call	PL96	;call to abstracted procedure
  5855  002382  ECDE  F012         	call	PL64	;call to abstracted procedure
  5856  002386  26F3               	addwf	prodl,f,c
  5857  002388  0E00               	movlw	0
  5858  00238A  22F4               	addwfc	prodh,f,c
  5859  00238C  517A               	movf	(??_TimeTextToSecond+10)& (0+255),w,b
  5860  00238E  26F3               	addwf	prodl,f,c
  5861  002390  517B               	movf	(??_TimeTextToSecond+11)& (0+255),w,b
  5862  002392  D828               	call	PL62	;call to abstracted procedure
  5863  002394  0E3C               	movlw	60
  5864  002396  6F64               	movwf	___lmul@multiplicand& (0+255),b
  5865  002398  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  5866  00239A  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  5867  00239C  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  5868  00239E  EC0A  F019         	call	___lmul	;wreg free
  5869  0023A2  5160               	movf	?___lmul& (0+255),w,b
  5870  0023A4  2576               	addwf	(??_TimeTextToSecond+6)& (0+255),w,b
  5871  0023A6  6F7C               	movwf	(??_TimeTextToSecond+12)& (0+255),b
  5872  0023A8  5161               	movf	(?___lmul+1)& (0+255),w,b
  5873  0023AA  2177               	addwfc	(??_TimeTextToSecond+7)& (0+255),w,b
  5874  0023AC  6F7D               	movwf	(??_TimeTextToSecond+13)& (0+255),b
  5875  0023AE  5162               	movf	(?___lmul+2)& (0+255),w,b
  5876  0023B0  2178               	addwfc	(??_TimeTextToSecond+8)& (0+255),w,b
  5877  0023B2  6F7E               	movwf	(??_TimeTextToSecond+14)& (0+255),b
  5878  0023B4  5163               	movf	(?___lmul+3)& (0+255),w,b
  5879  0023B6  2179               	addwfc	(??_TimeTextToSecond+9)& (0+255),w,b
  5880  0023B8  6F7F               	movwf	(??_TimeTextToSecond+15)& (0+255),b
  5881  0023BA  5170               	movf	??_TimeTextToSecond& (0+255),w,b
  5882  0023BC  257C               	addwf	(??_TimeTextToSecond+12)& (0+255),w,b
  5883  0023BE  6F80               	movwf	TimeTextToSecond@Second& (0+255),b
  5884  0023C0  5171               	movf	(??_TimeTextToSecond+1)& (0+255),w,b
  5885  0023C2  217D               	addwfc	(??_TimeTextToSecond+13)& (0+255),w,b
  5886  0023C4  6F81               	movwf	(TimeTextToSecond@Second+1)& (0+255),b
  5887  0023C6  5172               	movf	(??_TimeTextToSecond+2)& (0+255),w,b
  5888  0023C8  217E               	addwfc	(??_TimeTextToSecond+14)& (0+255),w,b
  5889  0023CA  6F82               	movwf	(TimeTextToSecond@Second+2)& (0+255),b
  5890  0023CC  5173               	movf	(??_TimeTextToSecond+3)& (0+255),w,b
  5891  0023CE  217F               	addwfc	(??_TimeTextToSecond+15)& (0+255),w,b
  5892  0023D0  6F83               	movwf	(TimeTextToSecond@Second+3)& (0+255),b
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;funcs.c: 153: return Second;
  5896  0023D2  C080  F06C         	movff	TimeTextToSecond@Second,?_TimeTextToSecond
  5897  0023D6  C081  F06D         	movff	TimeTextToSecond@Second+1,?_TimeTextToSecond+1
  5898  0023DA  C082  F06E         	movff	TimeTextToSecond@Second+2,?_TimeTextToSecond+2
  5899  0023DE  C083  F06F         	movff	TimeTextToSecond@Second+3,?_TimeTextToSecond+3
  5900                           
  5901                           ; BSR set to: 0
  5902  0023E2  0012               	return		;funcret
  5903  0023E4                     __end_of_TimeTextToSecond:
  5904                           	opt stack 0
  5905  0023E4                     PL62:
  5906                           	opt stack 18
  5907  0023E4  22F4               	addwfc	prodh,f,c
  5908  0023E6  CFF3 F060          	movff	prodl,___lmul@multiplier
  5909  0023EA  CFF4 F061          	movff	prodh,___lmul@multiplier+1
  5910  0023EE  0E00               	movlw	0
  5911  0023F0  BF61               	btfsc	(___lmul@multiplier+1)& (0+255),7,b
  5912  0023F2  0EFF               	movlw	-1
  5913  0023F4  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  5914  0023F6  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  5915  0023F8  0012               	return	
  5916  0023FA                     __end_ofPL62:
  5917                           	opt stack 0
  5918  0023FA                     PL96:
  5919                           	opt stack 18
  5920  0023FA  50DF               	movf	indf2,w,c
  5921  0023FC  0D0A               	mullw	10
  5922  0023FE  516C               	movf	TimeTextToSecond@Time& (0+255),w,b
  5923  002400  0012               	return	
  5924  002402                     __end_ofPL96:
  5925                           	opt stack 0
  5926                           tosu	equ	0xFFF
  5927                           tosh	equ	0xFFE
  5928                           tosl	equ	0xFFD
  5929                           pclath	equ	0xFFA
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           intcon	equ	0xFF2
  5937                           postinc0	equ	0xFEE
  5938                           plusw0	equ	0xFEB
  5939                           wreg	equ	0xFE8
  5940                           indf1	equ	0xFE7
  5941                           postinc1	equ	0xFE6
  5942                           postdec1	equ	0xFE5
  5943                           plusw1	equ	0xFE3
  5944                           fsr1h	equ	0xFE2
  5945                           fsr1l	equ	0xFE1
  5946                           indf2	equ	0xFDF
  5947                           postinc2	equ	0xFDE
  5948                           postdec2	equ	0xFDD
  5949                           plusw2	equ	0xFDB
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954 ;; *************** function _ReadGPSDateTime *****************
  5955 ;; Defined at:
  5956 ;;		line 39 in file "libs/gps.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;  Date            1    0[BANK0 ] PTR unsigned char 
  5959 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  5960 ;;  Time            1    1[BANK0 ] PTR unsigned char 
  5961 ;;		 -> ReadGPS_DATE_TIME@Time(7), 
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  StartCode       8    6[BANK0 ] const unsigned char [8]
  5964 ;;  i               2   14[BANK0 ] unsigned short 
  5965 ;;  Pos             1   18[BANK0 ] unsigned char 
  5966 ;;  TempChar        1   17[BANK0 ] unsigned char 
  5967 ;;  Commas          1   16[BANK0 ] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      void 
  5970 ;; Registers used:
  5971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5972 ;; Tracked objects:
  5973 ;;		On entry : 3F/0
  5974 ;;		On exit  : 3F/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5978 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5979 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5980 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5981 ;;Total ram usage:       19 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:   10
  5984 ;; This function calls:
  5985 ;;		_EUSART1_Read
  5986 ;; This function is called by:
  5987 ;;		_ReadGPS_DATE_TIME
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text21
  5992  002968                     __ptext21:
  5993                           	opt stack 0
  5994  002968                     _ReadGPSDateTime:
  5995                           	opt stack 18
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;gps.c: 40: const char StartCode[]="$GPRMC,";
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;incstack = 0
  6002  002968  0E01               	movlw	low ReadGPSDateTime@F11468
  6003  00296A  6EF6               	movwf	tblptrl,c
  6004  00296C                     	if	1	;There is more than 1 active tblptr byte
  6005  00296C  0E0F               	movlw	high ReadGPSDateTime@F11468
  6006  00296E  6EF7               	movwf	tblptrh,c
  6007  002970                     	endif
  6008  002970                     	if	1	;There are 3 active tblptr bytes
  6009  002970  0E00               	movlw	low (ReadGPSDateTime@F11468 shr (0+16))
  6010  002972  6EF8               	movwf	tblptru,c
  6011  002974                     	endif
  6012  002974  EE20  F066         	lfsr	2,ReadGPSDateTime@StartCode
  6013  002978  0E07               	movlw	7
  6014  00297A                     u3580:
  6015  00297A  0009               	tblrd		*+
  6016  00297C  CFF5 FFDE          	movff	tablat,postinc2
  6017  002980  06E8               	decf	wreg,f,c
  6018  002982  E2FB               	bc	u3580
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;gps.c: 41: char Pos=0x00;
  6022  002984  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;gps.c: 43: UINT16 i=0;
  6026                           
  6027                           ; BSR set to: 0
  6028  002986  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  6029  002988  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  6030                           
  6031                           ; BSR set to: 0
  6032                           ;gps.c: 44: UINT8 Commas=0;
  6033  00298A  6B70               	clrf	ReadGPSDateTime@Commas& (0+255),b
  6034  00298C                     l3900:
  6035                           
  6036                           ; BSR set to: 0
  6037                           ;gps.c: 46: if ((PIR3bits.RC1IF)){
  6038  00298C  010E               	movlb	14	; () banked
  6039  00298E  ABCD               	btfss	205,5,b	;volatile
  6040  002990  D047               	goto	l3934
  6041                           
  6042                           ; BSR set to: 14
  6043                           ;gps.c: 47: i=0;
  6044  002992  0100               	movlb	0	; () banked
  6045  002994  6B6E               	clrf	ReadGPSDateTime@i& (0+255),b
  6046  002996  6B6F               	clrf	(ReadGPSDateTime@i+1)& (0+255),b
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;gps.c: 48: TempChar = EUSART1_Read();
  6050  002998  EC1E  F01B         	call	_EUSART1_Read	;wreg free
  6051  00299C  0100               	movlb	0	; () banked
  6052  00299E  6F71               	movwf	ReadGPSDateTime@TempChar& (0+255),b
  6053                           
  6054                           ; BSR set to: 0
  6055                           ;gps.c: 49: if ((Pos>=0x07) & (Pos<=0x0c)) {
  6056  0029A0  0E06               	movlw	6
  6057  0029A2  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  6058  0029A4  D00D               	goto	l3914
  6059                           
  6060                           ; BSR set to: 0
  6061  0029A6  0E0D               	movlw	13
  6062  0029A8  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  6063  0029AA  D00A               	goto	l3914
  6064                           
  6065                           ; BSR set to: 0
  6066                           ;gps.c: 50: Time[Pos-0x07]= TempChar;
  6067  0029AC  5161               	movf	ReadGPSDateTime@Time& (0+255),w,b
  6068  0029AE  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  6069  0029B0  6ED9               	movwf	fsr2l,c
  6070  0029B2  6ADA               	clrf	fsr2h,c
  6071  0029B4  0EF9               	movlw	249
  6072  0029B6  26D9               	addwf	fsr2l,f,c
  6073  0029B8  C071  FFDF         	movff	ReadGPSDateTime@TempChar,indf2
  6074  0029BC                     l3912:
  6075                           
  6076                           ; BSR set to: 0
  6077                           ;gps.c: 51: Pos++;
  6078  0029BC  2B72               	incf	ReadGPSDateTime@Pos& (0+255),f,b
  6079                           
  6080                           ;gps.c: 52: } else if ((StartCode[Pos] == TempChar) && (Pos<0x07)) {
  6081  0029BE  D034               	goto	l3936
  6082  0029C0                     l3914:
  6083                           
  6084                           ; BSR set to: 0
  6085  0029C0  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  6086  0029C2  0F66               	addlw	low ReadGPSDateTime@StartCode
  6087  0029C4  6ED9               	movwf	fsr2l,c
  6088  0029C6  6ADA               	clrf	fsr2h,c
  6089  0029C8  5171               	movf	ReadGPSDateTime@TempChar& (0+255),w,b
  6090  0029CA  18DE               	xorwf	postinc2,w,c
  6091  0029CC  E104               	bnz	l3920
  6092                           
  6093                           ; BSR set to: 0
  6094  0029CE  0E07               	movlw	7
  6095  0029D0  6172               	cpfslt	ReadGPSDateTime@Pos& (0+255),b
  6096  0029D2  D001               	goto	l3920
  6097  0029D4  D7F3               	goto	l3912
  6098  0029D6                     l3920:
  6099                           
  6100                           ; BSR set to: 0
  6101  0029D6  0E0C               	movlw	12
  6102  0029D8  6572               	cpfsgt	ReadGPSDateTime@Pos& (0+255),b
  6103  0029DA  D020               	goto	l127
  6104                           
  6105                           ; BSR set to: 0
  6106                           ;gps.c: 55: if (Commas<8) {
  6107  0029DC  0E08               	movlw	8
  6108  0029DE  6170               	cpfslt	ReadGPSDateTime@Commas& (0+255),b
  6109  0029E0  D005               	goto	l3928
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;gps.c: 56: if (TempChar == 0x2C)
  6113  0029E2  0E2C               	movlw	44
  6114  0029E4  1971               	xorwf	ReadGPSDateTime@TempChar& (0+255),w,b
  6115  0029E6  E120               	bnz	l3936
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;gps.c: 57: Commas++;
  6119  0029E8  2B70               	incf	ReadGPSDateTime@Commas& (0+255),f,b
  6120  0029EA  D01E               	goto	l3936
  6121  0029EC                     l3928:
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;gps.c: 59: if ((Pos-0x0d)<6) {
  6125  0029EC  0EF3               	movlw	243
  6126  0029EE  6F62               	movwf	??_ReadGPSDateTime& (0+255),b
  6127  0029F0  6963               	setf	(??_ReadGPSDateTime+1)& (0+255),b
  6128  0029F2  5172               	movf	ReadGPSDateTime@Pos& (0+255),w,b
  6129  0029F4  6F64               	movwf	(??_ReadGPSDateTime+2)& (0+255),b
  6130  0029F6  6B65               	clrf	(??_ReadGPSDateTime+3)& (0+255),b
  6131  0029F8  5162               	movf	??_ReadGPSDateTime& (0+255),w,b
  6132  0029FA  2764               	addwf	(??_ReadGPSDateTime+2)& (0+255),f,b
  6133  0029FC  5163               	movf	(??_ReadGPSDateTime+1)& (0+255),w,b
  6134  0029FE  2365               	addwfc	(??_ReadGPSDateTime+3)& (0+255),f,b
  6135  002A00  BF65               	btfsc	(??_ReadGPSDateTime+3)& (0+255),7,b
  6136  002A02  D006               	goto	l3930
  6137  002A04  5165               	movf	(??_ReadGPSDateTime+3)& (0+255),w,b
  6138  002A06  E118               	bnz	l133
  6139  002A08  0E06               	movlw	6
  6140  002A0A  5D64               	subwf	(??_ReadGPSDateTime+2)& (0+255),w,b
  6141  002A0C  B0D8               	btfsc	status,0,c
  6142  002A0E  0012               	return	
  6143  002A10                     l3930:
  6144                           
  6145                           ; BSR set to: 0
  6146                           ;gps.c: 60: Date[Pos-0x0d] = TempChar;
  6147  002A10  5160               	movf	ReadGPSDateTime@Date& (0+255),w,b
  6148  002A12  2572               	addwf	ReadGPSDateTime@Pos& (0+255),w,b
  6149  002A14  6ED9               	movwf	fsr2l,c
  6150  002A16  6ADA               	clrf	fsr2h,c
  6151  002A18  0EF3               	movlw	243
  6152  002A1A  D7CD               	goto	L4
  6153  002A1C                     l127:
  6154                           
  6155                           ; BSR set to: 0
  6156                           ;gps.c: 66: Pos=0;
  6157  002A1C  6B72               	clrf	ReadGPSDateTime@Pos& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160  002A1E  D004               	goto	l3936
  6161  002A20                     l3934:
  6162                           
  6163                           ; BSR set to: 14
  6164                           ;gps.c: 68: _delay((unsigned long)((20)*(4000000/4000000.0)));
  6165  002A20  0E06               	movlw	6
  6166  002A22                     u4997:
  6167  002A22  2EE8               	decfsz	wreg,f,c
  6168  002A24  D7FE               	bra	u4997
  6169  002A26  D000               	nop2	
  6170  002A28                     l3936:
  6171                           
  6172                           ;gps.c: 69: i++;
  6173  002A28  0100               	movlb	0	; () banked
  6174  002A2A  4B6E               	infsnz	ReadGPSDateTime@i& (0+255),f,b
  6175  002A2C  2B6F               	incf	(ReadGPSDateTime@i+1)& (0+255),f,b
  6176                           
  6177                           ;gps.c: 70: } while(i<5000);
  6178  002A2E  0E88               	movlw	136
  6179  002A30  5D6E               	subwf	ReadGPSDateTime@i& (0+255),w,b
  6180  002A32  0E13               	movlw	19
  6181  002A34  596F               	subwfb	(ReadGPSDateTime@i+1)& (0+255),w,b
  6182  002A36  E3AA               	bnc	l3900
  6183  002A38                     l133:
  6184                           
  6185                           ; BSR set to: 0
  6186  002A38  0012               	return		;funcret
  6187  002A3A                     __end_of_ReadGPSDateTime:
  6188                           	opt stack 0
  6189                           tosu	equ	0xFFF
  6190                           tosh	equ	0xFFE
  6191                           tosl	equ	0xFFD
  6192                           pclath	equ	0xFFA
  6193                           tblptru	equ	0xFF8
  6194                           tblptrh	equ	0xFF7
  6195                           tblptrl	equ	0xFF6
  6196                           tablat	equ	0xFF5
  6197                           prodh	equ	0xFF4
  6198                           prodl	equ	0xFF3
  6199                           intcon	equ	0xFF2
  6200                           postinc0	equ	0xFEE
  6201                           plusw0	equ	0xFEB
  6202                           wreg	equ	0xFE8
  6203                           indf1	equ	0xFE7
  6204                           postinc1	equ	0xFE6
  6205                           postdec1	equ	0xFE5
  6206                           plusw1	equ	0xFE3
  6207                           fsr1h	equ	0xFE2
  6208                           fsr1l	equ	0xFE1
  6209                           indf2	equ	0xFDF
  6210                           postinc2	equ	0xFDE
  6211                           postdec2	equ	0xFDD
  6212                           plusw2	equ	0xFDB
  6213                           fsr2h	equ	0xFDA
  6214                           fsr2l	equ	0xFD9
  6215                           status	equ	0xFD8
  6216                           
  6217 ;; *************** function _EUSART1_Read *****************
  6218 ;; Defined at:
  6219 ;;		line 77 in file "mcc_generated_files/eusart1.c"
  6220 ;; Parameters:    Size  Location     Type
  6221 ;;		None
  6222 ;; Auto vars:     Size  Location     Type
  6223 ;;		None
  6224 ;; Return value:  Size  Location     Type
  6225 ;;                  1    wreg      unsigned char 
  6226 ;; Registers used:
  6227 ;;		wreg, status,2
  6228 ;; Tracked objects:
  6229 ;;		On entry : 3F/0
  6230 ;;		On exit  : 3F/E
  6231 ;;		Unchanged: 0/0
  6232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6237 ;;Total ram usage:        0 bytes
  6238 ;; Hardware stack levels used:    1
  6239 ;; Hardware stack levels required when called:    9
  6240 ;; This function calls:
  6241 ;;		Nothing
  6242 ;; This function is called by:
  6243 ;;		_ReadGPSDateTime
  6244 ;; This function uses a non-reentrant model
  6245 ;;
  6246                           
  6247                           	psect	text22
  6248  00363C                     __ptext22:
  6249                           	opt stack 0
  6250  00363C                     _EUSART1_Read:
  6251                           	opt stack 18
  6252  00363C                     l744:
  6253  00363C  010E               	movlb	14	; () banked
  6254  00363E  ABCD               	btfss	205,5,b	;volatile
  6255  003640  D7FD               	goto	l744
  6256                           
  6257                           ; BSR set to: 14
  6258                           ;eusart1.c: 82: }
  6259                           ;eusart1.c: 85: if(1 == RC1STAbits.OERR)
  6260  003642  A29D               	btfss	3997,1,c	;volatile
  6261  003644  D002               	goto	l3542
  6262                           
  6263                           ; BSR set to: 14
  6264                           ;eusart1.c: 86: {
  6265                           ;eusart1.c: 89: RC1STAbits.SPEN = 0;
  6266  003646  9E9D               	bcf	3997,7,c	;volatile
  6267                           
  6268                           ;eusart1.c: 90: RC1STAbits.SPEN = 1;
  6269  003648  8E9D               	bsf	3997,7,c	;volatile
  6270  00364A                     l3542:
  6271                           
  6272                           ; BSR set to: 14
  6273                           ;eusart1.c: 91: }
  6274                           ;eusart1.c: 93: return RC1REG;
  6275  00364A  5099               	movf	3993,w,c	;volatile
  6276                           
  6277                           ; BSR set to: 14
  6278  00364C  0012               	return		;funcret
  6279  00364E                     __end_of_EUSART1_Read:
  6280                           	opt stack 0
  6281                           tosu	equ	0xFFF
  6282                           tosh	equ	0xFFE
  6283                           tosl	equ	0xFFD
  6284                           pclath	equ	0xFFA
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           intcon	equ	0xFF2
  6292                           postinc0	equ	0xFEE
  6293                           plusw0	equ	0xFEB
  6294                           wreg	equ	0xFE8
  6295                           indf1	equ	0xFE7
  6296                           postinc1	equ	0xFE6
  6297                           postdec1	equ	0xFE5
  6298                           plusw1	equ	0xFE3
  6299                           fsr1h	equ	0xFE2
  6300                           fsr1l	equ	0xFE1
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           postdec2	equ	0xFDD
  6304                           plusw2	equ	0xFDB
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function _GetDay *****************
  6310 ;; Defined at:
  6311 ;;		line 129 in file "libs/gps.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  Date            1   14[BANK0 ] PTR unsigned char 
  6314 ;;		 -> ReadGPS_DATE_TIME@Date(7), 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;  y               2   23[BANK0 ] int 
  6317 ;;  m               1   22[BANK0 ] unsigned char 
  6318 ;;  d               1   21[BANK0 ] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      char 
  6321 ;; Registers used:
  6322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 3F/0
  6325 ;;		On exit  : 3F/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6328 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6329 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6330 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6331 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6332 ;;Total ram usage:       11 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:   10
  6335 ;; This function calls:
  6336 ;;		___awdiv
  6337 ;;		___awmod
  6338 ;; This function is called by:
  6339 ;;		_ReadGPS_DATE_TIME
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           	psect	text23
  6344  0020FA                     __ptext23:
  6345                           	opt stack 0
  6346  0020FA                     _GetDay:
  6347                           	opt stack 18
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;gps.c: 130: UINT8 d = (Date[0]-0x30)*10 + (Date[1]-0x30);
  6351                           
  6352                           ; BSR set to: 14
  6353                           ;incstack = 0
  6354  0020FA  516E               	movf	GetDay@Date& (0+255),w,b
  6355  0020FC  ECEA  F012         	call	PL106	;call to abstracted procedure
  6356  002100  D87F               	call	PL130	;call to abstracted procedure
  6357  002102  50DF               	movf	indf2,w,c
  6358  002104  0D0A               	mullw	10
  6359  002106  50F3               	movf	prodl,w,c
  6360  002108  256F               	addwf	??_GetDay& (0+255),w,b
  6361  00210A  0FF0               	addlw	240
  6362  00210C  6F75               	movwf	GetDay@d& (0+255),b
  6363                           
  6364                           ;gps.c: 131: UINT8 m = (Date[2]-0x30)*10 + (Date[3]-0x30);
  6365  00210E  516E               	movf	GetDay@Date& (0+255),w,b
  6366  002110  ECDE  F012         	call	PL64	;call to abstracted procedure
  6367  002114  D875               	call	PL130	;call to abstracted procedure
  6368  002116  0E02               	movlw	2
  6369  002118  D868               	call	PL16	;call to abstracted procedure
  6370  00211A  256F               	addwf	??_GetDay& (0+255),w,b
  6371  00211C  0FF0               	addlw	240
  6372  00211E  6F76               	movwf	GetDay@m& (0+255),b
  6373                           
  6374                           ;gps.c: 132: INT y = (Date[4]-0x30)*10 + (Date[5]-0x30) + CENTURY*100;
  6375  002120  51FE               	movf	_CENTURY& (0+255),w,b
  6376  002122  0D64               	mullw	100
  6377  002124  CFF3 F06F          	movff	prodl,??_GetDay
  6378  002128  CFF4 F070          	movff	prodh,??_GetDay+1
  6379  00212C  516E               	movf	GetDay@Date& (0+255),w,b
  6380  00212E  6ED9               	movwf	fsr2l,c
  6381  002130  6ADA               	clrf	fsr2h,c
  6382  002132  0E04               	movlw	4
  6383  002134  D85A               	call	PL16	;call to abstracted procedure
  6384  002136  276F               	addwf	??_GetDay& (0+255),f,b
  6385  002138  50F4               	movf	prodh,w,c
  6386  00213A  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  6387  00213C  516E               	movf	GetDay@Date& (0+255),w,b
  6388  00213E  ECE4  F012         	call	PL72	;call to abstracted procedure
  6389  002142  276F               	addwf	??_GetDay& (0+255),f,b
  6390  002144  0E00               	movlw	0
  6391  002146  2370               	addwfc	(??_GetDay+1)& (0+255),f,b
  6392  002148  0EF0               	movlw	240
  6393  00214A  256F               	addwf	??_GetDay& (0+255),w,b
  6394  00214C  6F77               	movwf	GetDay@y& (0+255),b
  6395  00214E  0EFD               	movlw	253
  6396  002150  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  6397  002152  6F78               	movwf	(GetDay@y+1)& (0+255),b
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;gps.c: 133: static int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
  6401                           ;gps.c: 134: y -= m < 3;
  6402  002154  0E02               	movlw	2
  6403  002156  6576               	cpfsgt	GetDay@m& (0+255),b
  6404  002158  D001               	goto	u3691
  6405  00215A  D002               	goto	u3690
  6406  00215C                     u3691:
  6407  00215C  0E01               	movlw	1
  6408  00215E  D001               	goto	u3700
  6409  002160                     u3690:
  6410  002160  0E00               	movlw	0
  6411  002162                     u3700:
  6412  002162  5F77               	subwf	GetDay@y& (0+255),f,b
  6413  002164  0E00               	movlw	0
  6414  002166  5B78               	subwfb	(GetDay@y+1)& (0+255),f,b
  6415                           
  6416                           ; BSR set to: 0
  6417                           ;gps.c: 135: return ( y + y/4 - y/100 + y/400 + t[m-1] + d) % 7;
  6418  002168  5176               	movf	GetDay@m& (0+255),w,b
  6419  00216A  6F6F               	movwf	??_GetDay& (0+255),b
  6420  00216C  6B70               	clrf	(??_GetDay+1)& (0+255),b
  6421  00216E  90D8               	bcf	status,0,c
  6422  002170  376F               	rlcf	??_GetDay& (0+255),f,b
  6423  002172  3770               	rlcf	(??_GetDay+1)& (0+255),f,b
  6424  002174  0E5A               	movlw	low (GetDay@t+65534)
  6425  002176  256F               	addwf	??_GetDay& (0+255),w,b
  6426  002178  6ED9               	movwf	fsr2l,c
  6427  00217A  0E01               	movlw	high (GetDay@t+65534)
  6428  00217C  2170               	addwfc	(??_GetDay+1)& (0+255),w,b
  6429  00217E  6EDA               	movwf	fsr2h,c
  6430  002180  CFDE F071          	movff	postinc2,??_GetDay+2
  6431  002184  CFDD F072          	movff	postdec2,??_GetDay+3
  6432  002188  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6433  00218A  0E04               	movlw	4
  6434  00218C  D833               	call	PL98	;call to abstracted procedure
  6435  00218E  ECE0  F017         	call	___awdiv	;wreg free
  6436  002192  C060  F073         	movff	?___awdiv,??_GetDay+4
  6437  002196  C061  F074         	movff	?___awdiv+1,??_GetDay+5
  6438  00219A  0E01               	movlw	1
  6439  00219C  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  6440  00219E  0E90               	movlw	144
  6441  0021A0  D829               	call	PL98	;call to abstracted procedure
  6442  0021A2  ECE0  F017         	call	___awdiv	;wreg free
  6443  0021A6  5160               	movf	?___awdiv& (0+255),w,b
  6444  0021A8  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6445  0021AA  5161               	movf	(?___awdiv+1)& (0+255),w,b
  6446  0021AC  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6447  0021AE  5175               	movf	GetDay@d& (0+255),w,b
  6448  0021B0  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6449  0021B2  0E00               	movlw	0
  6450  0021B4  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6451  0021B6  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  6452  0021B8  0E64               	movlw	100
  6453  0021BA  D81C               	call	PL98	;call to abstracted procedure
  6454  0021BC  ECE0  F017         	call	___awdiv	;wreg free
  6455  0021C0  5160               	movf	?___awdiv& (0+255),w,b
  6456  0021C2  5F73               	subwf	(??_GetDay+4)& (0+255),f,b
  6457  0021C4  5161               	movf	(?___awdiv+1)& (0+255),w,b
  6458  0021C6  5B74               	subwfb	(??_GetDay+5)& (0+255),f,b
  6459  0021C8  5171               	movf	(??_GetDay+2)& (0+255),w,b
  6460  0021CA  2773               	addwf	(??_GetDay+4)& (0+255),f,b
  6461  0021CC  5172               	movf	(??_GetDay+3)& (0+255),w,b
  6462  0021CE  2374               	addwfc	(??_GetDay+5)& (0+255),f,b
  6463  0021D0  5177               	movf	GetDay@y& (0+255),w,b
  6464  0021D2  2573               	addwf	(??_GetDay+4)& (0+255),w,b
  6465  0021D4  6F68               	movwf	___awmod@dividend& (0+255),b
  6466  0021D6  5178               	movf	(GetDay@y+1)& (0+255),w,b
  6467  0021D8  2174               	addwfc	(??_GetDay+5)& (0+255),w,b
  6468  0021DA  6F69               	movwf	(___awmod@dividend+1)& (0+255),b
  6469  0021DC  6B6B               	clrf	(___awmod@divisor+1)& (0+255),b
  6470  0021DE  0E07               	movlw	7
  6471  0021E0  6F6A               	movwf	___awmod@divisor& (0+255),b
  6472  0021E2  EC1C  F018         	call	___awmod	;wreg free
  6473  0021E6  5168               	movf	?___awmod& (0+255),w,b
  6474                           
  6475                           ; BSR set to: 0
  6476  0021E8  0012               	return		;funcret
  6477  0021EA                     __end_of_GetDay:
  6478                           	opt stack 0
  6479  0021EA                     PL16:
  6480                           	opt stack 18
  6481  0021EA  26D9               	addwf	fsr2l,f,c
  6482  0021EC  50DF               	movf	indf2,w,c
  6483  0021EE  0D0A               	mullw	10
  6484  0021F0  50F3               	movf	prodl,w,c
  6485  0021F2  0012               	return	
  6486  0021F4                     __end_ofPL16:
  6487                           	opt stack 0
  6488  0021F4                     PL98:
  6489                           	opt stack 18
  6490  0021F4  6F62               	movwf	___awdiv@divisor& (0+255),b
  6491  0021F6  C077  F060         	movff	GetDay@y,___awdiv@dividend
  6492  0021FA  C078  F061         	movff	GetDay@y+1,___awdiv@dividend+1
  6493  0021FE  0012               	return	
  6494  002200                     __end_ofPL98:
  6495                           	opt stack 0
  6496  002200                     PL130:
  6497                           	opt stack 18
  6498  002200  6F6F               	movwf	??_GetDay& (0+255),b
  6499  002202  516E               	movf	GetDay@Date& (0+255),w,b
  6500  002204  6ED9               	movwf	fsr2l,c
  6501  002206  6ADA               	clrf	fsr2h,c
  6502  002208  0012               	return	
  6503  00220A                     __end_ofPL130:
  6504                           	opt stack 0
  6505                           tosu	equ	0xFFF
  6506                           tosh	equ	0xFFE
  6507                           tosl	equ	0xFFD
  6508                           pclath	equ	0xFFA
  6509                           tblptru	equ	0xFF8
  6510                           tblptrh	equ	0xFF7
  6511                           tblptrl	equ	0xFF6
  6512                           tablat	equ	0xFF5
  6513                           prodh	equ	0xFF4
  6514                           prodl	equ	0xFF3
  6515                           intcon	equ	0xFF2
  6516                           postinc0	equ	0xFEE
  6517                           plusw0	equ	0xFEB
  6518                           wreg	equ	0xFE8
  6519                           indf1	equ	0xFE7
  6520                           postinc1	equ	0xFE6
  6521                           postdec1	equ	0xFE5
  6522                           plusw1	equ	0xFE3
  6523                           fsr1h	equ	0xFE2
  6524                           fsr1l	equ	0xFE1
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           plusw2	equ	0xFDB
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function ___awmod *****************
  6534 ;; Defined at:
  6535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  dividend        2    8[BANK0 ] int 
  6538 ;;  divisor         2   10[BANK0 ] int 
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;  sign            1   13[BANK0 ] unsigned char 
  6541 ;;  counter         1   12[BANK0 ] unsigned char 
  6542 ;; Return value:  Size  Location     Type
  6543 ;;                  2    8[BANK0 ] int 
  6544 ;; Registers used:
  6545 ;;		wreg, status,2, status,0
  6546 ;; Tracked objects:
  6547 ;;		On entry : 3F/0
  6548 ;;		On exit  : 3F/0
  6549 ;;		Unchanged: 0/0
  6550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6551 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6554 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6555 ;;Total ram usage:        6 bytes
  6556 ;; Hardware stack levels used:    1
  6557 ;; Hardware stack levels required when called:    9
  6558 ;; This function calls:
  6559 ;;		Nothing
  6560 ;; This function is called by:
  6561 ;;		_GetDay
  6562 ;; This function uses a non-reentrant model
  6563 ;;
  6564                           
  6565                           	psect	text24
  6566  003038                     __ptext24:
  6567                           	opt stack 0
  6568  003038                     ___awmod:
  6569                           	opt stack 18
  6570                           
  6571                           ; BSR set to: 0
  6572                           
  6573                           ; BSR set to: 0
  6574                           ;incstack = 0
  6575  003038  6B6D               	clrf	___awmod@sign& (0+255),b
  6576                           
  6577                           ; BSR set to: 0
  6578  00303A  AF69               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6579  00303C  D006               	goto	l3776
  6580                           
  6581                           ; BSR set to: 0
  6582  00303E  6D68               	negf	___awmod@dividend& (0+255),b
  6583  003040  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  6584  003042  B0D8               	btfsc	status,0,c
  6585  003044  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  6586                           
  6587                           ; BSR set to: 0
  6588  003046  0E01               	movlw	1
  6589  003048  6F6D               	movwf	___awmod@sign& (0+255),b
  6590  00304A                     l3776:
  6591                           
  6592                           ; BSR set to: 0
  6593  00304A  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6594  00304C  D004               	goto	l3780
  6595                           
  6596                           ; BSR set to: 0
  6597  00304E  6D6A               	negf	___awmod@divisor& (0+255),b
  6598  003050  1F6B               	comf	(___awmod@divisor+1)& (0+255),f,b
  6599  003052  B0D8               	btfsc	status,0,c
  6600  003054  2B6B               	incf	(___awmod@divisor+1)& (0+255),f,b
  6601  003056                     l3780:
  6602                           
  6603                           ; BSR set to: 0
  6604  003056  516A               	movf	___awmod@divisor& (0+255),w,b
  6605  003058  116B               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6606  00305A  E017               	bz	l3796
  6607                           
  6608                           ; BSR set to: 0
  6609  00305C  0E01               	movlw	1
  6610  00305E  6F6C               	movwf	___awmod@counter& (0+255),b
  6611  003060  D004               	goto	l3786
  6612  003062                     l3784:
  6613                           
  6614                           ; BSR set to: 0
  6615  003062  90D8               	bcf	status,0,c
  6616  003064  376A               	rlcf	___awmod@divisor& (0+255),f,b
  6617  003066  376B               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6618  003068  2B6C               	incf	___awmod@counter& (0+255),f,b
  6619  00306A                     l3786:
  6620                           
  6621                           ; BSR set to: 0
  6622  00306A  AF6B               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6623  00306C  D7FA               	goto	l3784
  6624  00306E                     l3788:
  6625                           
  6626                           ; BSR set to: 0
  6627  00306E  516A               	movf	___awmod@divisor& (0+255),w,b
  6628  003070  5D68               	subwf	___awmod@dividend& (0+255),w,b
  6629  003072  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  6630  003074  5969               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6631  003076  E304               	bnc	l3792
  6632                           
  6633                           ; BSR set to: 0
  6634  003078  516A               	movf	___awmod@divisor& (0+255),w,b
  6635  00307A  5F68               	subwf	___awmod@dividend& (0+255),f,b
  6636  00307C  516B               	movf	(___awmod@divisor+1)& (0+255),w,b
  6637  00307E  5B69               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6638  003080                     l3792:
  6639                           
  6640                           ; BSR set to: 0
  6641  003080  90D8               	bcf	status,0,c
  6642  003082  336B               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6643  003084  336A               	rrcf	___awmod@divisor& (0+255),f,b
  6644                           
  6645                           ; BSR set to: 0
  6646  003086  2F6C               	decfsz	___awmod@counter& (0+255),f,b
  6647  003088  D7F2               	goto	l3788
  6648  00308A                     l3796:
  6649                           
  6650                           ; BSR set to: 0
  6651  00308A  516D               	movf	___awmod@sign& (0+255),w,b
  6652  00308C  E004               	bz	l3800
  6653                           
  6654                           ; BSR set to: 0
  6655  00308E  6D68               	negf	___awmod@dividend& (0+255),b
  6656  003090  1F69               	comf	(___awmod@dividend+1)& (0+255),f,b
  6657  003092  B0D8               	btfsc	status,0,c
  6658  003094  2B69               	incf	(___awmod@dividend+1)& (0+255),f,b
  6659  003096                     l3800:
  6660                           
  6661                           ; BSR set to: 0
  6662  003096  C068  F068         	movff	___awmod@dividend,?___awmod
  6663  00309A  C069  F069         	movff	___awmod@dividend+1,?___awmod+1
  6664                           
  6665                           ; BSR set to: 0
  6666  00309E  0012               	return		;funcret
  6667  0030A0                     __end_of___awmod:
  6668                           	opt stack 0
  6669                           tosu	equ	0xFFF
  6670                           tosh	equ	0xFFE
  6671                           tosl	equ	0xFFD
  6672                           pclath	equ	0xFFA
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodh	equ	0xFF4
  6678                           prodl	equ	0xFF3
  6679                           intcon	equ	0xFF2
  6680                           postinc0	equ	0xFEE
  6681                           plusw0	equ	0xFEB
  6682                           wreg	equ	0xFE8
  6683                           indf1	equ	0xFE7
  6684                           postinc1	equ	0xFE6
  6685                           postdec1	equ	0xFE5
  6686                           plusw1	equ	0xFE3
  6687                           fsr1h	equ	0xFE2
  6688                           fsr1l	equ	0xFE1
  6689                           indf2	equ	0xFDF
  6690                           postinc2	equ	0xFDE
  6691                           postdec2	equ	0xFDD
  6692                           plusw2	equ	0xFDB
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697 ;; *************** function _EUSART1_Initialize *****************
  6698 ;; Defined at:
  6699 ;;		line 55 in file "mcc_generated_files/eusart1.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;		None
  6702 ;; Auto vars:     Size  Location     Type
  6703 ;;		None
  6704 ;; Return value:  Size  Location     Type
  6705 ;;                  1    wreg      void 
  6706 ;; Registers used:
  6707 ;;		wreg, status,2
  6708 ;; Tracked objects:
  6709 ;;		On entry : 3F/0
  6710 ;;		On exit  : 3F/0
  6711 ;;		Unchanged: 3F/0
  6712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6717 ;;Total ram usage:        0 bytes
  6718 ;; Hardware stack levels used:    1
  6719 ;; Hardware stack levels required when called:    9
  6720 ;; This function calls:
  6721 ;;		Nothing
  6722 ;; This function is called by:
  6723 ;;		_ReadGPS_DATE_TIME
  6724 ;;		_SYSTEM_Initialize
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text25
  6729  003600                     __ptext25:
  6730                           	opt stack 0
  6731  003600                     _EUSART1_Initialize:
  6732                           	opt stack 20
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;eusart1.c: 60: BAUD1CON = 0x08;
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;incstack = 0
  6739  003600  0E08               	movlw	8
  6740  003602  6E9F               	movwf	3999,c	;volatile
  6741                           
  6742                           ;eusart1.c: 63: RC1STA = 0x90;
  6743  003604  0E90               	movlw	144
  6744  003606  6E9D               	movwf	3997,c	;volatile
  6745                           
  6746                           ;eusart1.c: 66: TX1STA = 0x84;
  6747  003608  0E84               	movlw	132
  6748  00360A  6E9E               	movwf	3998,c	;volatile
  6749                           
  6750                           ;eusart1.c: 69: SP1BRGL = 0x67;
  6751  00360C  0E67               	movlw	103
  6752  00360E  6E9B               	movwf	3995,c	;volatile
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;eusart1.c: 72: SP1BRGH = 0x00;
  6756  003610  6A9C               	clrf	3996,c	;volatile
  6757                           
  6758                           ; BSR set to: 0
  6759  003612  0012               	return		;funcret
  6760  003614                     __end_of_EUSART1_Initialize:
  6761                           	opt stack 0
  6762                           tosu	equ	0xFFF
  6763                           tosh	equ	0xFFE
  6764                           tosl	equ	0xFFD
  6765                           pclath	equ	0xFFA
  6766                           tblptru	equ	0xFF8
  6767                           tblptrh	equ	0xFF7
  6768                           tblptrl	equ	0xFF6
  6769                           tablat	equ	0xFF5
  6770                           prodh	equ	0xFF4
  6771                           prodl	equ	0xFF3
  6772                           intcon	equ	0xFF2
  6773                           postinc0	equ	0xFEE
  6774                           plusw0	equ	0xFEB
  6775                           wreg	equ	0xFE8
  6776                           indf1	equ	0xFE7
  6777                           postinc1	equ	0xFE6
  6778                           postdec1	equ	0xFE5
  6779                           plusw1	equ	0xFE3
  6780                           fsr1h	equ	0xFE2
  6781                           fsr1l	equ	0xFE1
  6782                           indf2	equ	0xFDF
  6783                           postinc2	equ	0xFDE
  6784                           postdec2	equ	0xFDD
  6785                           plusw2	equ	0xFDB
  6786                           fsr2h	equ	0xFDA
  6787                           fsr2l	equ	0xFD9
  6788                           status	equ	0xFD8
  6789                           
  6790 ;; *************** function _AdjustDayLightSaving *****************
  6791 ;; Defined at:
  6792 ;;		line 93 in file "libs/funcs.c"
  6793 ;; Parameters:    Size  Location     Type
  6794 ;;  dt             11   41[BANK0 ] struct _GSK_DATE_TIME
  6795 ;; Auto vars:     Size  Location     Type
  6796 ;;  Present         2   56[BANK0 ] unsigned short 
  6797 ;;  End             2   54[BANK0 ] unsigned short 
  6798 ;;  Start           2   52[BANK0 ] unsigned short 
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  11   41[BANK0 ] struct _GSK_DATE_TIME
  6801 ;; Registers used:
  6802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6803 ;; Tracked objects:
  6804 ;;		On entry : 3F/0
  6805 ;;		On exit  : 3F/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6808 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6809 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6811 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6812 ;;Total ram usage:       17 bytes
  6813 ;; Hardware stack levels used:    1
  6814 ;; Hardware stack levels required when called:   13
  6815 ;; This function calls:
  6816 ;;		_DecreaseByADay
  6817 ;;		_IncreaseByADay
  6818 ;;		___wmul
  6819 ;; This function is called by:
  6820 ;;		_ReadGPS_DATE_TIME
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           	psect	text26
  6825  001FD6                     __ptext26:
  6826                           	opt stack 0
  6827  001FD6                     _AdjustDayLightSaving:
  6828                           	opt stack 15
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;funcs.c: 94: UINT16 Start, End, Present;
  6832                           ;funcs.c: 95: Start = (UINT16) DAY_LIGHT_START.Month*100 + DAY_LIGHT_START.Day;
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;incstack = 0
  6836  001FD6  C0DE  F060         	movff	_DAY_LIGHT_START+2,___wmul@multiplier
  6837  001FDA  C0DF  F061         	movff	_DAY_LIGHT_START+3,___wmul@multiplier+1
  6838  001FDE  D889               	call	PL158	;call to abstracted procedure
  6839  001FE0  ECB8  F01A         	call	___wmul	;wreg free
  6840  001FE4  51DC               	movf	_DAY_LIGHT_START& (0+255),w,b
  6841  001FE6  2560               	addwf	?___wmul& (0+255),w,b
  6842  001FE8  6F94               	movwf	AdjustDayLightSaving@Start& (0+255),b
  6843  001FEA  51DD               	movf	(_DAY_LIGHT_START+1)& (0+255),w,b
  6844  001FEC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6845  001FEE  6F95               	movwf	(AdjustDayLightSaving@Start+1)& (0+255),b
  6846                           
  6847                           ;funcs.c: 96: End = (UINT16) DAY_LIGHT_END.Month*100 + DAY_LIGHT_END.Day;
  6848  001FF0  C0DA  F060         	movff	_DAY_LIGHT_END+2,___wmul@multiplier
  6849  001FF4  C0DB  F061         	movff	_DAY_LIGHT_END+3,___wmul@multiplier+1
  6850  001FF8  D87C               	call	PL158	;call to abstracted procedure
  6851  001FFA  ECB8  F01A         	call	___wmul	;wreg free
  6852  001FFE  51D8               	movf	_DAY_LIGHT_END& (0+255),w,b
  6853  002000  2560               	addwf	?___wmul& (0+255),w,b
  6854  002002  6F96               	movwf	AdjustDayLightSaving@End& (0+255),b
  6855  002004  51D9               	movf	(_DAY_LIGHT_END+1)& (0+255),w,b
  6856  002006  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6857  002008  6F97               	movwf	(AdjustDayLightSaving@End+1)& (0+255),b
  6858                           
  6859                           ;funcs.c: 97: Present = (UINT16) dt.DATE.Month*100 + dt.DATE.Day;
  6860  00200A  C08F  F060         	movff	AdjustDayLightSaving@dt+6,___wmul@multiplier
  6861  00200E  C090  F061         	movff	AdjustDayLightSaving@dt+7,___wmul@multiplier+1
  6862  002012  D86F               	call	PL158	;call to abstracted procedure
  6863  002014  ECB8  F01A         	call	___wmul	;wreg free
  6864  002018  518D               	movf	(AdjustDayLightSaving@dt+4)& (0+255),w,b
  6865  00201A  2560               	addwf	?___wmul& (0+255),w,b
  6866  00201C  6F98               	movwf	AdjustDayLightSaving@Present& (0+255),b
  6867  00201E  518E               	movf	(AdjustDayLightSaving@dt+5)& (0+255),w,b
  6868  002020  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  6869  002022  6F99               	movwf	(AdjustDayLightSaving@Present+1)& (0+255),b
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;funcs.c: 98: if (Start > End) {
  6873  002024  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  6874  002026  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  6875  002028  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  6876  00202A  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  6877  00202C  E20F               	bc	l4062
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;funcs.c: 99: if ((Present >= Start) || (Present <= End))
  6881  00202E  D85C               	call	PL140	;call to abstracted procedure
  6882  002030  E205               	bc	l4060
  6883  002032                     l4058:
  6884                           
  6885                           ; BSR set to: 0
  6886  002032  5198               	movf	AdjustDayLightSaving@Present& (0+255),w,b
  6887  002034  5D96               	subwf	AdjustDayLightSaving@End& (0+255),w,b
  6888  002036  5199               	movf	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  6889  002038  5997               	subwfb	(AdjustDayLightSaving@End+1)& (0+255),w,b
  6890  00203A  E30B               	bnc	l657
  6891  00203C                     l4060:
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;funcs.c: 100: dt.SECOND += 3600;
  6895  00203C  0E10               	movlw	16
  6896  00203E  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6897  002040  0E0E               	movlw	14
  6898  002042  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6899  002044  0E00               	movlw	0
  6900  002046  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6901  002048  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6902  00204A  D003               	goto	l657
  6903  00204C                     l4062:
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;funcs.c: 102: if ((Present >= Start) && (Present <= End))
  6907  00204C  D84D               	call	PL140	;call to abstracted procedure
  6908  00204E  E301               	bnc	l657
  6909  002050  D7F0               	goto	l4058
  6910  002052                     l657:
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;funcs.c: 104: }
  6914                           ;funcs.c: 105: if (dt.SECOND < 0) {
  6915  002052  AF8C               	btfss	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  6916  002054  D01A               	goto	l4072
  6917                           
  6918                           ; BSR set to: 0
  6919                           ;funcs.c: 106: dt.SECOND += 86400;
  6920  002056  0E80               	movlw	128
  6921  002058  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6922  00205A  0E51               	movlw	81
  6923  00205C  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6924  00205E  0E01               	movlw	1
  6925  002060  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6926  002062  0E00               	movlw	0
  6927  002064  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;funcs.c: 107: dt = DecreaseByADay(dt);
  6931  002066  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6932  00206A  EE00  F07B         	lfsr	0,DecreaseByADay@dt
  6933  00206E  0E0A               	movlw	10
  6934  002070                     u3921:
  6935  002070  CFDB FFEB          	movff	plusw2,plusw0
  6936  002074  06E8               	decf	wreg,f,c
  6937  002076  E2FC               	bc	u3921
  6938  002078  EC01  F012         	call	_DecreaseByADay	;wreg free
  6939  00207C  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6940  002080  0E0A               	movlw	10
  6941  002082                     u3931:
  6942  002082  CFEB FFDB          	movff	plusw0,plusw2
  6943  002086  06E8               	decf	wreg,f,c
  6944  002088  E2FC               	bc	u3931
  6945  00208A                     l4072:
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;funcs.c: 108: }
  6949                           ;funcs.c: 109: if (dt.SECOND > 86400) {
  6950  00208A  BF8C               	btfsc	(AdjustDayLightSaving@dt+3)& (0+255),7,b
  6951  00208C  D023               	goto	l4078
  6952  00208E  518C               	movf	(AdjustDayLightSaving@dt+3)& (0+255),w,b
  6953  002090  E107               	bnz	u3940
  6954  002092  0E81               	movlw	129
  6955  002094  5D89               	subwf	AdjustDayLightSaving@dt& (0+255),w,b
  6956  002096  0E51               	movlw	81
  6957  002098  598A               	subwfb	(AdjustDayLightSaving@dt+1)& (0+255),w,b
  6958  00209A  0E01               	movlw	1
  6959  00209C  598B               	subwfb	(AdjustDayLightSaving@dt+2)& (0+255),w,b
  6960  00209E  E31A               	bnc	l4078
  6961  0020A0                     u3940:
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;funcs.c: 110: dt.SECOND -= 86400;
  6965  0020A0  0E80               	movlw	128
  6966  0020A2  2789               	addwf	AdjustDayLightSaving@dt& (0+255),f,b
  6967  0020A4  0EAE               	movlw	174
  6968  0020A6  238A               	addwfc	(AdjustDayLightSaving@dt+1)& (0+255),f,b
  6969  0020A8  0EFE               	movlw	254
  6970  0020AA  238B               	addwfc	(AdjustDayLightSaving@dt+2)& (0+255),f,b
  6971  0020AC  0EFF               	movlw	255
  6972  0020AE  238C               	addwfc	(AdjustDayLightSaving@dt+3)& (0+255),f,b
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;funcs.c: 111: dt = IncreaseByADay(dt);
  6976  0020B0  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6977  0020B4  EE00  F07B         	lfsr	0,IncreaseByADay@dt
  6978  0020B8  0E0A               	movlw	10
  6979  0020BA                     u3951:
  6980  0020BA  CFDB FFEB          	movff	plusw2,plusw0
  6981  0020BE  06E8               	decf	wreg,f,c
  6982  0020C0  E2FC               	bc	u3951
  6983  0020C2  ECD4  F013         	call	_IncreaseByADay	;wreg free
  6984  0020C6  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6985  0020CA  0E0A               	movlw	10
  6986  0020CC                     u3961:
  6987  0020CC  CFEB FFDB          	movff	plusw0,plusw2
  6988  0020D0  06E8               	decf	wreg,f,c
  6989  0020D2  E2FC               	bc	u3961
  6990  0020D4                     l4078:
  6991                           
  6992                           ; BSR set to: 0
  6993                           ;funcs.c: 112: }
  6994                           ;funcs.c: 113: return dt;
  6995  0020D4  EE20  F089         	lfsr	2,AdjustDayLightSaving@dt
  6996  0020D8  EE00  F089         	lfsr	0,?_AdjustDayLightSaving
  6997  0020DC  0E0A               	movlw	10
  6998  0020DE                     u3971:
  6999  0020DE  CFDB FFEB          	movff	plusw2,plusw0
  7000  0020E2  06E8               	decf	wreg,f,c
  7001  0020E4  E2FC               	bc	u3971
  7002                           
  7003                           ; BSR set to: 0
  7004  0020E6  0012               	return		;funcret
  7005  0020E8                     __end_of_AdjustDayLightSaving:
  7006                           	opt stack 0
  7007  0020E8                     PL140:
  7008                           	opt stack 15
  7009  0020E8  5194               	movf	AdjustDayLightSaving@Start& (0+255),w,b
  7010  0020EA  5D98               	subwf	AdjustDayLightSaving@Present& (0+255),w,b
  7011  0020EC  5195               	movf	(AdjustDayLightSaving@Start+1)& (0+255),w,b
  7012  0020EE  5999               	subwfb	(AdjustDayLightSaving@Present+1)& (0+255),w,b
  7013  0020F0  0012               	return	
  7014  0020F2                     __end_ofPL140:
  7015                           	opt stack 0
  7016  0020F2                     PL158:
  7017                           	opt stack 15
  7018  0020F2  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7019  0020F4  0E64               	movlw	100
  7020  0020F6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7021  0020F8  0C64               	retlw	100
  7022  0020FA                     __end_ofPL158:
  7023                           	opt stack 0
  7024                           tosu	equ	0xFFF
  7025                           tosh	equ	0xFFE
  7026                           tosl	equ	0xFFD
  7027                           pclath	equ	0xFFA
  7028                           tblptru	equ	0xFF8
  7029                           tblptrh	equ	0xFF7
  7030                           tblptrl	equ	0xFF6
  7031                           tablat	equ	0xFF5
  7032                           prodh	equ	0xFF4
  7033                           prodl	equ	0xFF3
  7034                           intcon	equ	0xFF2
  7035                           postinc0	equ	0xFEE
  7036                           plusw0	equ	0xFEB
  7037                           wreg	equ	0xFE8
  7038                           indf1	equ	0xFE7
  7039                           postinc1	equ	0xFE6
  7040                           postdec1	equ	0xFE5
  7041                           plusw1	equ	0xFE3
  7042                           fsr1h	equ	0xFE2
  7043                           fsr1l	equ	0xFE1
  7044                           indf2	equ	0xFDF
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           plusw2	equ	0xFDB
  7048                           fsr2h	equ	0xFDA
  7049                           fsr2l	equ	0xFD9
  7050                           status	equ	0xFD8
  7051                           
  7052 ;; *************** function _IncreaseByADay *****************
  7053 ;; Defined at:
  7054 ;;		line 12 in file "libs/funcs.c"
  7055 ;; Parameters:    Size  Location     Type
  7056 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  MonthDays       1   40[BANK0 ] char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  7061 ;; Registers used:
  7062 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 3F/0
  7065 ;;		On exit  : 3F/0
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7068 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7071 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7072 ;;Total ram usage:       14 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:   12
  7075 ;; This function calls:
  7076 ;;		_IncreaseByAMonth
  7077 ;;		___lwmod
  7078 ;; This function is called by:
  7079 ;;		_AdjustDayLightSaving
  7080 ;;		_ReadGPS_DATE_TIME
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text27
  7085  0027A8                     __ptext27:
  7086                           	opt stack 0
  7087  0027A8                     _IncreaseByADay:
  7088                           	opt stack 16
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;funcs.c: 13: dt.DATE.Day++;
  7092                           
  7093                           ; BSR set to: 0
  7094                           ;incstack = 0
  7095  0027A8  4B7F               	infsnz	(IncreaseByADay@dt+4)& (0+255),f,b
  7096  0027AA  2B80               	incf	(IncreaseByADay@dt+5)& (0+255),f,b
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
  7100  0027AC  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  7101  0027AE  0B7F               	andlw	127
  7102  0027B0  06E8               	decf	wreg,f,c
  7103  0027B2  E104               	bnz	l3564
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;funcs.c: 15: dt.DAY.Val = 0x40;
  7107  0027B4  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  7108  0027B6  0B01               	andlw	-255
  7109  0027B8  0980               	iorlw	128
  7110  0027BA  D00A               	goto	L5
  7111  0027BC                     l3564:
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;funcs.c: 16: else
  7115                           ;funcs.c: 17: dt.DAY.Val >>= 1;
  7116  0027BC  3183               	rrcf	(IncreaseByADay@dt+8)& (0+255),w,b
  7117  0027BE  0B7F               	andlw	127
  7118  0027C0  6F86               	movwf	??_IncreaseByADay& (0+255),b
  7119  0027C2  90D8               	bcf	status,0,c
  7120  0027C4  3386               	rrcf	??_IncreaseByADay& (0+255),f,b
  7121  0027C6  3786               	rlcf	??_IncreaseByADay& (0+255),f,b
  7122  0027C8  5183               	movf	(IncreaseByADay@dt+8)& (0+255),w,b
  7123  0027CA  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  7124  0027CC  0B01               	andlw	-255
  7125  0027CE  1986               	xorwf	??_IncreaseByADay& (0+255),w,b
  7126  0027D0                     L5:
  7127  0027D0  6F83               	movwf	(IncreaseByADay@dt+8)& (0+255),b
  7128                           
  7129                           ; BSR set to: 0
  7130                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  7131  0027D2  90D8               	bcf	status,0,c
  7132  0027D4  3581               	rlcf	(IncreaseByADay@dt+6)& (0+255),w,b
  7133  0027D6  6ED9               	movwf	fsr2l,c
  7134  0027D8  3582               	rlcf	(IncreaseByADay@dt+7)& (0+255),w,b
  7135  0027DA  EC68  F012         	call	PL76	;call to abstracted procedure
  7136  0027DE  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  7140  0027E0  0E02               	movlw	2
  7141  0027E2  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7142  0027E4  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7143  0027E6  E107               	bnz	l3574
  7144                           
  7145                           ; BSR set to: 0
  7146  0027E8  C084  F086         	movff	IncreaseByADay@dt+9,??_IncreaseByADay
  7147  0027EC  0E03               	movlw	3
  7148  0027EE  1786               	andwf	??_IncreaseByADay& (0+255),f,b
  7149  0027F0  E102               	bnz	l3574
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;funcs.c: 20: MonthDays = 29;
  7153  0027F2  0E1D               	movlw	29
  7154  0027F4  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7155  0027F6                     l3574:
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  7159  0027F6  0E02               	movlw	2
  7160  0027F8  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7161  0027FA  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7162  0027FC  E10A               	bnz	l3580
  7163                           
  7164                           ; BSR set to: 0
  7165  0027FE  D840               	call	PL156	;call to abstracted procedure
  7166  002800  EC6A  F01A         	call	PL134	;call to abstracted procedure
  7167  002804  ECDD  F019         	call	___lwmod	;wreg free
  7168  002808  5160               	movf	?___lwmod& (0+255),w,b
  7169  00280A  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7170  00280C  E102               	bnz	l3580
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;funcs.c: 22: MonthDays = 28;
  7174  00280E  0E1C               	movlw	28
  7175  002810  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7176  002812                     l3580:
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  7180  002812  0E02               	movlw	2
  7181  002814  1981               	xorwf	(IncreaseByADay@dt+6)& (0+255),w,b
  7182  002816  1182               	iorwf	(IncreaseByADay@dt+7)& (0+255),w,b
  7183  002818  E10A               	bnz	l3586
  7184                           
  7185                           ; BSR set to: 0
  7186  00281A  D832               	call	PL156	;call to abstracted procedure
  7187  00281C  EC6F  F012         	call	PL144	;call to abstracted procedure
  7188  002820  ECDD  F019         	call	___lwmod	;wreg free
  7189  002824  5160               	movf	?___lwmod& (0+255),w,b
  7190  002826  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7191  002828  E102               	bnz	l3586
  7192                           
  7193                           ; BSR set to: 0
  7194                           ;funcs.c: 24: MonthDays = 29;
  7195  00282A  0E1D               	movlw	29
  7196  00282C  6F88               	movwf	IncreaseByADay@MonthDays& (0+255),b
  7197  00282E                     l3586:
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
  7201  00282E  C088  F086         	movff	IncreaseByADay@MonthDays,??_IncreaseByADay
  7202  002832  6B87               	clrf	(??_IncreaseByADay+1)& (0+255),b
  7203  002834  BF86               	btfsc	??_IncreaseByADay& (0+255),7,b
  7204  002836  0787               	decf	(??_IncreaseByADay+1)& (0+255),f,b
  7205  002838  517F               	movf	(IncreaseByADay@dt+4)& (0+255),w,b
  7206  00283A  5D86               	subwf	??_IncreaseByADay& (0+255),w,b
  7207  00283C  5180               	movf	(IncreaseByADay@dt+5)& (0+255),w,b
  7208  00283E  5987               	subwfb	(??_IncreaseByADay+1)& (0+255),w,b
  7209  002840  E215               	bc	l3592
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;funcs.c: 26: dt.DATE.Day = 1;
  7213  002842  6B80               	clrf	(IncreaseByADay@dt+5)& (0+255),b
  7214  002844  0E01               	movlw	1
  7215  002846  6F7F               	movwf	(IncreaseByADay@dt+4)& (0+255),b
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
  7219  002848  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7220  00284C  EE00  F070         	lfsr	0,IncreaseByAMonth@dt
  7221  002850  0E0A               	movlw	10
  7222  002852                     u3061:
  7223  002852  CFDB FFEB          	movff	plusw2,plusw0
  7224  002856  06E8               	decf	wreg,f,c
  7225  002858  E2FC               	bc	u3061
  7226  00285A  EC30  F019         	call	_IncreaseByAMonth	;wreg free
  7227  00285E  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7228  002862  0E0A               	movlw	10
  7229  002864                     u3071:
  7230  002864  CFEB FFDB          	movff	plusw0,plusw2
  7231  002868  06E8               	decf	wreg,f,c
  7232  00286A  E2FC               	bc	u3071
  7233  00286C                     l3592:
  7234                           
  7235                           ; BSR set to: 0
  7236                           ;funcs.c: 28: }
  7237                           ;funcs.c: 29: return dt;
  7238  00286C  EE20  F07B         	lfsr	2,IncreaseByADay@dt
  7239  002870  EE00  F07B         	lfsr	0,?_IncreaseByADay
  7240  002874  0E0A               	movlw	10
  7241  002876                     u3081:
  7242  002876  CFDB FFEB          	movff	plusw2,plusw0
  7243  00287A  06E8               	decf	wreg,f,c
  7244  00287C  E2FC               	bc	u3081
  7245                           
  7246                           ; BSR set to: 0
  7247  00287E  0012               	return		;funcret
  7248  002880                     __end_of_IncreaseByADay:
  7249                           	opt stack 0
  7250  002880                     PL156:
  7251                           	opt stack 16
  7252  002880  C084  F060         	movff	IncreaseByADay@dt+9,___lwmod@dividend
  7253  002884  C085  F061         	movff	IncreaseByADay@dt+10,___lwmod@dividend+1
  7254  002888  0012               	return	
  7255  00288A                     __end_ofPL156:
  7256                           	opt stack 0
  7257                           tosu	equ	0xFFF
  7258                           tosh	equ	0xFFE
  7259                           tosl	equ	0xFFD
  7260                           pclath	equ	0xFFA
  7261                           tblptru	equ	0xFF8
  7262                           tblptrh	equ	0xFF7
  7263                           tblptrl	equ	0xFF6
  7264                           tablat	equ	0xFF5
  7265                           prodh	equ	0xFF4
  7266                           prodl	equ	0xFF3
  7267                           intcon	equ	0xFF2
  7268                           postinc0	equ	0xFEE
  7269                           plusw0	equ	0xFEB
  7270                           wreg	equ	0xFE8
  7271                           indf1	equ	0xFE7
  7272                           postinc1	equ	0xFE6
  7273                           postdec1	equ	0xFE5
  7274                           plusw1	equ	0xFE3
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _IncreaseByAMonth *****************
  7286 ;; Defined at:
  7287 ;;		line 32 in file "libs/funcs.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  7290 ;; Auto vars:     Size  Location     Type
  7291 ;;		None
  7292 ;; Return value:  Size  Location     Type
  7293 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  7294 ;; Registers used:
  7295 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7296 ;; Tracked objects:
  7297 ;;		On entry : 3F/0
  7298 ;;		On exit  : 3F/0
  7299 ;;		Unchanged: 0/0
  7300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7301 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7304 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7305 ;;Total ram usage:       11 bytes
  7306 ;; Hardware stack levels used:    1
  7307 ;; Hardware stack levels required when called:   11
  7308 ;; This function calls:
  7309 ;;		_IncreaseByAYear
  7310 ;; This function is called by:
  7311 ;;		_IncreaseByADay
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           	psect	text28
  7316  003260                     __ptext28:
  7317                           	opt stack 0
  7318  003260                     _IncreaseByAMonth:
  7319                           	opt stack 16
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;funcs.c: 33: dt.DATE.Month++;
  7323                           
  7324                           ; BSR set to: 0
  7325                           ;incstack = 0
  7326  003260  4B76               	infsnz	(IncreaseByAMonth@dt+6)& (0+255),f,b
  7327  003262  2B77               	incf	(IncreaseByAMonth@dt+7)& (0+255),f,b
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
  7331  003264  0E0D               	movlw	13
  7332  003266  1976               	xorwf	(IncreaseByAMonth@dt+6)& (0+255),w,b
  7333  003268  1177               	iorwf	(IncreaseByAMonth@dt+7)& (0+255),w,b
  7334  00326A  E115               	bnz	l3450
  7335                           
  7336                           ; BSR set to: 0
  7337                           ;funcs.c: 35: dt.DATE.Month = 1;
  7338  00326C  6B77               	clrf	(IncreaseByAMonth@dt+7)& (0+255),b
  7339  00326E  0E01               	movlw	1
  7340  003270  6F76               	movwf	(IncreaseByAMonth@dt+6)& (0+255),b
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
  7344  003272  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7345  003276  EE00  F065         	lfsr	0,IncreaseByAYear@dt
  7346  00327A  0E0A               	movlw	10
  7347  00327C                     u2661:
  7348  00327C  CFDB FFEB          	movff	plusw2,plusw0
  7349  003280  06E8               	decf	wreg,f,c
  7350  003282  E2FC               	bc	u2661
  7351  003284  EC53  F01A         	call	_IncreaseByAYear	;wreg free
  7352  003288  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7353  00328C  0E0A               	movlw	10
  7354  00328E                     u2671:
  7355  00328E  CFEB FFDB          	movff	plusw0,plusw2
  7356  003292  06E8               	decf	wreg,f,c
  7357  003294  E2FC               	bc	u2671
  7358  003296                     l3450:
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;funcs.c: 37: }
  7362                           ;funcs.c: 38: return dt;
  7363  003296  EE20  F070         	lfsr	2,IncreaseByAMonth@dt
  7364  00329A  EE00  F070         	lfsr	0,?_IncreaseByAMonth
  7365  00329E  0E0A               	movlw	10
  7366  0032A0                     u2681:
  7367  0032A0  CFDB FFEB          	movff	plusw2,plusw0
  7368  0032A4  06E8               	decf	wreg,f,c
  7369  0032A6  E2FC               	bc	u2681
  7370                           
  7371                           ; BSR set to: 0
  7372  0032A8  0012               	return		;funcret
  7373  0032AA                     __end_of_IncreaseByAMonth:
  7374                           	opt stack 0
  7375                           tosu	equ	0xFFF
  7376                           tosh	equ	0xFFE
  7377                           tosl	equ	0xFFD
  7378                           pclath	equ	0xFFA
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           postinc0	equ	0xFEE
  7387                           plusw0	equ	0xFEB
  7388                           wreg	equ	0xFE8
  7389                           indf1	equ	0xFE7
  7390                           postinc1	equ	0xFE6
  7391                           postdec1	equ	0xFE5
  7392                           plusw1	equ	0xFE3
  7393                           fsr1h	equ	0xFE2
  7394                           fsr1l	equ	0xFE1
  7395                           indf2	equ	0xFDF
  7396                           postinc2	equ	0xFDE
  7397                           postdec2	equ	0xFDD
  7398                           plusw2	equ	0xFDB
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           
  7403 ;; *************** function _IncreaseByAYear *****************
  7404 ;; Defined at:
  7405 ;;		line 41 in file "libs/funcs.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  7412 ;; Registers used:
  7413 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7414 ;; Tracked objects:
  7415 ;;		On entry : 3F/0
  7416 ;;		On exit  : 3F/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7419 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7422 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7423 ;;Total ram usage:       11 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:   10
  7426 ;; This function calls:
  7427 ;;		___lwmod
  7428 ;; This function is called by:
  7429 ;;		_IncreaseByAMonth
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text29
  7434  0034A6                     __ptext29:
  7435                           	opt stack 0
  7436  0034A6                     _IncreaseByAYear:
  7437                           	opt stack 16
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;funcs.c: 42: dt.YEAR++;
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;incstack = 0
  7444  0034A6  4B6E               	infsnz	(IncreaseByAYear@dt+9)& (0+255),f,b
  7445  0034A8  2B6F               	incf	(IncreaseByAYear@dt+10)& (0+255),f,b
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
  7449  0034AA  C06E  F060         	movff	IncreaseByAYear@dt+9,___lwmod@dividend
  7450  0034AE  C06F  F061         	movff	IncreaseByAYear@dt+10,___lwmod@dividend+1
  7451  0034B2  D810               	call	PL134	;call to abstracted procedure
  7452  0034B4  ECDD  F019         	call	___lwmod	;wreg free
  7453  0034B8  5160               	movf	?___lwmod& (0+255),w,b
  7454  0034BA  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7455  0034BC  E101               	bnz	l3418
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;funcs.c: 44: CENTURY++;
  7459  0034BE  2BFE               	incf	_CENTURY& (0+255),f,b
  7460  0034C0                     l3418:
  7461                           
  7462                           ; BSR set to: 0
  7463                           ;funcs.c: 45: return dt;
  7464  0034C0  EE20  F065         	lfsr	2,IncreaseByAYear@dt
  7465  0034C4  EE00  F065         	lfsr	0,?_IncreaseByAYear
  7466  0034C8  0E0A               	movlw	10
  7467  0034CA                     u2581:
  7468  0034CA  CFDB FFEB          	movff	plusw2,plusw0
  7469  0034CE  06E8               	decf	wreg,f,c
  7470  0034D0  E2FC               	bc	u2581
  7471                           
  7472                           ; BSR set to: 0
  7473  0034D2  0012               	return		;funcret
  7474  0034D4                     __end_of_IncreaseByAYear:
  7475                           	opt stack 0
  7476  0034D4                     PL134:
  7477                           	opt stack 16
  7478  0034D4  6B63               	clrf	(___lwmod@divisor+1)& (0+255),b
  7479  0034D6  0E64               	movlw	100
  7480  0034D8  6F62               	movwf	___lwmod@divisor& (0+255),b
  7481  0034DA  0C64               	retlw	100
  7482  0034DC                     __end_ofPL134:
  7483                           	opt stack 0
  7484                           tosu	equ	0xFFF
  7485                           tosh	equ	0xFFE
  7486                           tosl	equ	0xFFD
  7487                           pclath	equ	0xFFA
  7488                           tblptru	equ	0xFF8
  7489                           tblptrh	equ	0xFF7
  7490                           tblptrl	equ	0xFF6
  7491                           tablat	equ	0xFF5
  7492                           prodh	equ	0xFF4
  7493                           prodl	equ	0xFF3
  7494                           intcon	equ	0xFF2
  7495                           postinc0	equ	0xFEE
  7496                           plusw0	equ	0xFEB
  7497                           wreg	equ	0xFE8
  7498                           indf1	equ	0xFE7
  7499                           postinc1	equ	0xFE6
  7500                           postdec1	equ	0xFE5
  7501                           plusw1	equ	0xFE3
  7502                           fsr1h	equ	0xFE2
  7503                           fsr1l	equ	0xFE1
  7504                           indf2	equ	0xFDF
  7505                           postinc2	equ	0xFDE
  7506                           postdec2	equ	0xFDD
  7507                           plusw2	equ	0xFDB
  7508                           fsr2h	equ	0xFDA
  7509                           fsr2l	equ	0xFD9
  7510                           status	equ	0xFD8
  7511                           
  7512 ;; *************** function _DecreaseByADay *****************
  7513 ;; Defined at:
  7514 ;;		line 57 in file "libs/funcs.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  dt             11   27[BANK0 ] struct _GSK_DATE_TIME
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  MonthDays       1   39[BANK0 ] char 
  7519 ;; Return value:  Size  Location     Type
  7520 ;;                  11   27[BANK0 ] struct _GSK_DATE_TIME
  7521 ;; Registers used:
  7522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7523 ;; Tracked objects:
  7524 ;;		On entry : 3F/0
  7525 ;;		On exit  : 3F/0
  7526 ;;		Unchanged: 0/0
  7527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7528 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7530 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7531 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7532 ;;Total ram usage:       13 bytes
  7533 ;; Hardware stack levels used:    1
  7534 ;; Hardware stack levels required when called:   12
  7535 ;; This function calls:
  7536 ;;		_DecreaseByAMonth
  7537 ;;		___lwmod
  7538 ;; This function is called by:
  7539 ;;		_AdjustDayLightSaving
  7540 ;;		_ReadGPS_DATE_TIME
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           	psect	text30
  7545  002402                     __ptext30:
  7546                           	opt stack 0
  7547  002402                     _DecreaseByADay:
  7548                           	opt stack 16
  7549                           
  7550                           ; BSR set to: 0
  7551                           ;funcs.c: 58: if (dt.DAY.Val == 0x40)
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;incstack = 0
  7555  002402  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  7556  002404  0B7F               	andlw	127
  7557  002406  0A40               	xorlw	64
  7558  002408  E104               	bnz	l3600
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;funcs.c: 59: dt.DAY.Val = 0x01;
  7562  00240A  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  7563  00240C  0B01               	andlw	-255
  7564  00240E  0902               	iorlw	2
  7565  002410  D00A               	goto	L6
  7566  002412                     l3600:
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;funcs.c: 60: else
  7570                           ;funcs.c: 61: dt.DAY.Val <<= 1;
  7571  002412  3183               	rrcf	(DecreaseByADay@dt+8)& (0+255),w,b
  7572  002414  0B7F               	andlw	127
  7573  002416  6F86               	movwf	??_DecreaseByADay& (0+255),b
  7574  002418  90D8               	bcf	status,0,c
  7575  00241A  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  7576  00241C  3786               	rlcf	??_DecreaseByADay& (0+255),f,b
  7577  00241E  5183               	movf	(DecreaseByADay@dt+8)& (0+255),w,b
  7578  002420  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  7579  002422  0B01               	andlw	-255
  7580  002424  1986               	xorwf	??_DecreaseByADay& (0+255),w,b
  7581  002426                     L6:
  7582  002426  6F83               	movwf	(DecreaseByADay@dt+8)& (0+255),b
  7583                           
  7584                           ; BSR set to: 0
  7585                           ;funcs.c: 62: if (dt.DATE.Day == 1) {
  7586  002428  057F               	decf	(DecreaseByADay@dt+4)& (0+255),w,b
  7587  00242A  1180               	iorwf	(DecreaseByADay@dt+5)& (0+255),w,b
  7588  00242C  E144               	bnz	l3624
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;funcs.c: 63: dt = DecreaseByAMonth(dt);
  7592  00242E  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7593  002432  EE00  F070         	lfsr	0,DecreaseByAMonth@dt
  7594  002436  0E0A               	movlw	10
  7595  002438                     u3111:
  7596  002438  CFDB FFEB          	movff	plusw2,plusw0
  7597  00243C  06E8               	decf	wreg,f,c
  7598  00243E  E2FC               	bc	u3111
  7599  002440  ECE4  F018         	call	_DecreaseByAMonth	;wreg free
  7600  002444  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7601  002448  0E0A               	movlw	10
  7602  00244A                     u3121:
  7603  00244A  CFEB FFDB          	movff	plusw0,plusw2
  7604  00244E  06E8               	decf	wreg,f,c
  7605  002450  E2FC               	bc	u3121
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;funcs.c: 64: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
  7609  002452  90D8               	bcf	status,0,c
  7610  002454  3581               	rlcf	(DecreaseByADay@dt+6)& (0+255),w,b
  7611  002456  6ED9               	movwf	fsr2l,c
  7612  002458  3582               	rlcf	(DecreaseByADay@dt+7)& (0+255),w,b
  7613  00245A  D83A               	call	PL76	;call to abstracted procedure
  7614  00245C  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;funcs.c: 65: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
  7618  00245E  0E02               	movlw	2
  7619  002460  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7620  002462  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7621  002464  E107               	bnz	l3612
  7622                           
  7623                           ; BSR set to: 0
  7624  002466  C084  F086         	movff	DecreaseByADay@dt+9,??_DecreaseByADay
  7625  00246A  0E03               	movlw	3
  7626  00246C  1786               	andwf	??_DecreaseByADay& (0+255),f,b
  7627  00246E  E102               	bnz	l3612
  7628                           
  7629                           ; BSR set to: 0
  7630                           ;funcs.c: 66: MonthDays = 29;
  7631  002470  0E1D               	movlw	29
  7632  002472  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7633  002474                     l3612:
  7634                           
  7635                           ; BSR set to: 0
  7636                           ;funcs.c: 67: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
  7637  002474  0E02               	movlw	2
  7638  002476  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7639  002478  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7640  00247A  E10A               	bnz	l3618
  7641                           
  7642                           ; BSR set to: 0
  7643  00247C  D835               	call	PL150	;call to abstracted procedure
  7644  00247E  EC6A  F01A         	call	PL134	;call to abstracted procedure
  7645  002482  ECDD  F019         	call	___lwmod	;wreg free
  7646  002486  5160               	movf	?___lwmod& (0+255),w,b
  7647  002488  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7648  00248A  E102               	bnz	l3618
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;funcs.c: 68: MonthDays = 28;
  7652  00248C  0E1C               	movlw	28
  7653  00248E  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7654  002490                     l3618:
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;funcs.c: 69: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
  7658  002490  0E02               	movlw	2
  7659  002492  1981               	xorwf	(DecreaseByADay@dt+6)& (0+255),w,b
  7660  002494  1182               	iorwf	(DecreaseByADay@dt+7)& (0+255),w,b
  7661  002496  E109               	bnz	l639
  7662                           
  7663                           ; BSR set to: 0
  7664  002498  D827               	call	PL150	;call to abstracted procedure
  7665  00249A  D821               	call	PL144	;call to abstracted procedure
  7666  00249C  ECDD  F019         	call	___lwmod	;wreg free
  7667  0024A0  5160               	movf	?___lwmod& (0+255),w,b
  7668  0024A2  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7669  0024A4  E102               	bnz	l639
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;funcs.c: 70: MonthDays = 29;
  7673  0024A6  0E1D               	movlw	29
  7674  0024A8  6F87               	movwf	DecreaseByADay@MonthDays& (0+255),b
  7675  0024AA                     l639:
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;funcs.c: 71: dt.DATE.Day = MonthDays;
  7679  0024AA  5187               	movf	DecreaseByADay@MonthDays& (0+255),w,b
  7680  0024AC  6F7F               	movwf	(DecreaseByADay@dt+4)& (0+255),b
  7681  0024AE  6B80               	clrf	(DecreaseByADay@dt+5)& (0+255),b
  7682  0024B0  BF7F               	btfsc	(DecreaseByADay@dt+4)& (0+255),7,b
  7683  0024B2  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  7684                           
  7685                           ;funcs.c: 72: } else
  7686  0024B4  D003               	goto	l3626
  7687  0024B6                     l3624:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;funcs.c: 73: dt.DATE.Day--;
  7691  0024B6  077F               	decf	(DecreaseByADay@dt+4)& (0+255),f,b
  7692  0024B8  A0D8               	btfss	status,0,c
  7693  0024BA  0780               	decf	(DecreaseByADay@dt+5)& (0+255),f,b
  7694  0024BC                     l3626:
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;funcs.c: 74: return dt;
  7698  0024BC  EE20  F07B         	lfsr	2,DecreaseByADay@dt
  7699  0024C0  EE00  F07B         	lfsr	0,?_DecreaseByADay
  7700  0024C4  0E0A               	movlw	10
  7701  0024C6                     u3191:
  7702  0024C6  CFDB FFEB          	movff	plusw2,plusw0
  7703  0024CA  06E8               	decf	wreg,f,c
  7704  0024CC  E2FC               	bc	u3191
  7705                           
  7706                           ; BSR set to: 0
  7707  0024CE  0012               	return		;funcret
  7708  0024D0                     __end_of_DecreaseByADay:
  7709                           	opt stack 0
  7710  0024D0                     PL76:
  7711                           	opt stack 16
  7712  0024D0  6EDA               	movwf	fsr2h,c
  7713  0024D2  0E42               	movlw	low (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  7714  0024D4  26D9               	addwf	fsr2l,f,c
  7715  0024D6  0E01               	movlw	high (projMain@NO_OF_DAYS_IN_A_MONTH+65534)
  7716  0024D8  22DA               	addwfc	fsr2h,f,c
  7717  0024DA  50DF               	movf	indf2,w,c
  7718  0024DC  0012               	return	
  7719  0024DE                     __end_ofPL76:
  7720                           	opt stack 0
  7721  0024DE                     PL144:
  7722                           	opt stack 16
  7723  0024DE  0E01               	movlw	1
  7724  0024E0  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  7725  0024E2  0E90               	movlw	144
  7726  0024E4  6F62               	movwf	___lwmod@divisor& (0+255),b
  7727  0024E6  0C90               	retlw	144
  7728  0024E8                     __end_ofPL144:
  7729                           	opt stack 0
  7730  0024E8                     PL150:
  7731                           	opt stack 16
  7732  0024E8  C084  F060         	movff	DecreaseByADay@dt+9,___lwmod@dividend
  7733  0024EC  C085  F061         	movff	DecreaseByADay@dt+10,___lwmod@dividend+1
  7734  0024F0  0012               	return	
  7735  0024F2                     __end_ofPL150:
  7736                           	opt stack 0
  7737                           tosu	equ	0xFFF
  7738                           tosh	equ	0xFFE
  7739                           tosl	equ	0xFFD
  7740                           pclath	equ	0xFFA
  7741                           tblptru	equ	0xFF8
  7742                           tblptrh	equ	0xFF7
  7743                           tblptrl	equ	0xFF6
  7744                           tablat	equ	0xFF5
  7745                           prodh	equ	0xFF4
  7746                           prodl	equ	0xFF3
  7747                           intcon	equ	0xFF2
  7748                           postinc0	equ	0xFEE
  7749                           plusw0	equ	0xFEB
  7750                           wreg	equ	0xFE8
  7751                           indf1	equ	0xFE7
  7752                           postinc1	equ	0xFE6
  7753                           postdec1	equ	0xFE5
  7754                           plusw1	equ	0xFE3
  7755                           fsr1h	equ	0xFE2
  7756                           fsr1l	equ	0xFE1
  7757                           indf2	equ	0xFDF
  7758                           postinc2	equ	0xFDE
  7759                           postdec2	equ	0xFDD
  7760                           plusw2	equ	0xFDB
  7761                           fsr2h	equ	0xFDA
  7762                           fsr2l	equ	0xFD9
  7763                           status	equ	0xFD8
  7764                           
  7765 ;; *************** function _DecreaseByAMonth *****************
  7766 ;; Defined at:
  7767 ;;		line 77 in file "libs/funcs.c"
  7768 ;; Parameters:    Size  Location     Type
  7769 ;;  dt             11   16[BANK0 ] struct _GSK_DATE_TIME
  7770 ;; Auto vars:     Size  Location     Type
  7771 ;;		None
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  11   16[BANK0 ] struct _GSK_DATE_TIME
  7774 ;; Registers used:
  7775 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 3F/0
  7778 ;;		On exit  : 3F/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7781 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7784 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7785 ;;Total ram usage:       11 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:   11
  7788 ;; This function calls:
  7789 ;;		_DecreaseByAYear
  7790 ;; This function is called by:
  7791 ;;		_DecreaseByADay
  7792 ;; This function uses a non-reentrant model
  7793 ;;
  7794                           
  7795                           	psect	text31
  7796  0031C8                     __ptext31:
  7797                           	opt stack 0
  7798  0031C8                     _DecreaseByAMonth:
  7799                           	opt stack 16
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;funcs.c: 78: if (dt.DATE.Month == 1) {
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;incstack = 0
  7806  0031C8  0576               	decf	(DecreaseByAMonth@dt+6)& (0+255),w,b
  7807  0031CA  1177               	iorwf	(DecreaseByAMonth@dt+7)& (0+255),w,b
  7808  0031CC  E116               	bnz	l3460
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;funcs.c: 79: dt.DATE.Month = 12;
  7812  0031CE  6B77               	clrf	(DecreaseByAMonth@dt+7)& (0+255),b
  7813  0031D0  0E0C               	movlw	12
  7814  0031D2  6F76               	movwf	(DecreaseByAMonth@dt+6)& (0+255),b
  7815                           
  7816                           ; BSR set to: 0
  7817                           ;funcs.c: 80: dt = DecreaseByAYear(dt);
  7818  0031D4  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7819  0031D8  EE00  F065         	lfsr	0,DecreaseByAYear@dt
  7820  0031DC  0E0A               	movlw	10
  7821  0031DE                     u2701:
  7822  0031DE  CFDB FFEB          	movff	plusw2,plusw0
  7823  0031E2  06E8               	decf	wreg,f,c
  7824  0031E4  E2FC               	bc	u2701
  7825  0031E6  EC87  F01A         	call	_DecreaseByAYear	;wreg free
  7826  0031EA  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7827  0031EE  0E0A               	movlw	10
  7828  0031F0                     u2711:
  7829  0031F0  CFEB FFDB          	movff	plusw0,plusw2
  7830  0031F4  06E8               	decf	wreg,f,c
  7831  0031F6  E2FC               	bc	u2711
  7832                           
  7833                           ;funcs.c: 81: } else
  7834  0031F8  D003               	goto	l3462
  7835  0031FA                     l3460:
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;funcs.c: 82: dt.DATE.Month--;
  7839  0031FA  0776               	decf	(DecreaseByAMonth@dt+6)& (0+255),f,b
  7840  0031FC  A0D8               	btfss	status,0,c
  7841  0031FE  0777               	decf	(DecreaseByAMonth@dt+7)& (0+255),f,b
  7842  003200                     l3462:
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;funcs.c: 83: return dt;
  7846  003200  EE20  F070         	lfsr	2,DecreaseByAMonth@dt
  7847  003204  EE00  F070         	lfsr	0,?_DecreaseByAMonth
  7848  003208  0E0A               	movlw	10
  7849  00320A                     u2721:
  7850  00320A  CFDB FFEB          	movff	plusw2,plusw0
  7851  00320E  06E8               	decf	wreg,f,c
  7852  003210  E2FC               	bc	u2721
  7853                           
  7854                           ; BSR set to: 0
  7855  003212  0012               	return		;funcret
  7856  003214                     __end_of_DecreaseByAMonth:
  7857                           	opt stack 0
  7858                           tosu	equ	0xFFF
  7859                           tosh	equ	0xFFE
  7860                           tosl	equ	0xFFD
  7861                           pclath	equ	0xFFA
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           postinc0	equ	0xFEE
  7870                           plusw0	equ	0xFEB
  7871                           wreg	equ	0xFE8
  7872                           indf1	equ	0xFE7
  7873                           postinc1	equ	0xFE6
  7874                           postdec1	equ	0xFE5
  7875                           plusw1	equ	0xFE3
  7876                           fsr1h	equ	0xFE2
  7877                           fsr1l	equ	0xFE1
  7878                           indf2	equ	0xFDF
  7879                           postinc2	equ	0xFDE
  7880                           postdec2	equ	0xFDD
  7881                           plusw2	equ	0xFDB
  7882                           fsr2h	equ	0xFDA
  7883                           fsr2l	equ	0xFD9
  7884                           status	equ	0xFD8
  7885                           
  7886 ;; *************** function _DecreaseByAYear *****************
  7887 ;; Defined at:
  7888 ;;		line 86 in file "libs/funcs.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  dt             11    5[BANK0 ] struct _GSK_DATE_TIME
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;		None
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  11    5[BANK0 ] struct _GSK_DATE_TIME
  7895 ;; Registers used:
  7896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  7897 ;; Tracked objects:
  7898 ;;		On entry : 3F/0
  7899 ;;		On exit  : 3F/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7902 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7905 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7906 ;;Total ram usage:       11 bytes
  7907 ;; Hardware stack levels used:    1
  7908 ;; Hardware stack levels required when called:   10
  7909 ;; This function calls:
  7910 ;;		___lwmod
  7911 ;; This function is called by:
  7912 ;;		_DecreaseByAMonth
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text32
  7917  00350E                     __ptext32:
  7918                           	opt stack 0
  7919  00350E                     _DecreaseByAYear:
  7920                           	opt stack 16
  7921                           
  7922                           ; BSR set to: 0
  7923                           ;funcs.c: 87: if (dt.YEAR % 100 == 0)
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;incstack = 0
  7927  00350E  C06E  F060         	movff	DecreaseByAYear@dt+9,___lwmod@dividend
  7928  003512  C06F  F061         	movff	DecreaseByAYear@dt+10,___lwmod@dividend+1
  7929  003516  EC6A  F01A         	call	PL134	;call to abstracted procedure
  7930  00351A  ECDD  F019         	call	___lwmod	;wreg free
  7931  00351E  5160               	movf	?___lwmod& (0+255),w,b
  7932  003520  1161               	iorwf	(?___lwmod+1)& (0+255),w,b
  7933  003522  E101               	bnz	l649
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;funcs.c: 88: CENTURY--;
  7937  003524  07FE               	decf	_CENTURY& (0+255),f,b
  7938  003526                     l649:
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;funcs.c: 89: dt.YEAR--;
  7942  003526  076E               	decf	(DecreaseByAYear@dt+9)& (0+255),f,b
  7943  003528  A0D8               	btfss	status,0,c
  7944  00352A  076F               	decf	(DecreaseByAYear@dt+10)& (0+255),f,b
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;funcs.c: 90: return dt;
  7948  00352C  EE20  F065         	lfsr	2,DecreaseByAYear@dt
  7949  003530  EE00  F065         	lfsr	0,?_DecreaseByAYear
  7950  003534  0E0A               	movlw	10
  7951  003536                     u2601:
  7952  003536  CFDB FFEB          	movff	plusw2,plusw0
  7953  00353A  06E8               	decf	wreg,f,c
  7954  00353C  E2FC               	bc	u2601
  7955                           
  7956                           ; BSR set to: 0
  7957  00353E  0012               	return		;funcret
  7958  003540                     __end_of_DecreaseByAYear:
  7959                           	opt stack 0
  7960                           tosu	equ	0xFFF
  7961                           tosh	equ	0xFFE
  7962                           tosl	equ	0xFFD
  7963                           pclath	equ	0xFFA
  7964                           tblptru	equ	0xFF8
  7965                           tblptrh	equ	0xFF7
  7966                           tblptrl	equ	0xFF6
  7967                           tablat	equ	0xFF5
  7968                           prodh	equ	0xFF4
  7969                           prodl	equ	0xFF3
  7970                           intcon	equ	0xFF2
  7971                           postinc0	equ	0xFEE
  7972                           plusw0	equ	0xFEB
  7973                           wreg	equ	0xFE8
  7974                           indf1	equ	0xFE7
  7975                           postinc1	equ	0xFE6
  7976                           postdec1	equ	0xFE5
  7977                           plusw1	equ	0xFE3
  7978                           fsr1h	equ	0xFE2
  7979                           fsr1l	equ	0xFE1
  7980                           indf2	equ	0xFDF
  7981                           postinc2	equ	0xFDE
  7982                           postdec2	equ	0xFDD
  7983                           plusw2	equ	0xFDB
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function ___lwmod *****************
  7989 ;; Defined at:
  7990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  dividend        2    0[BANK0 ] unsigned int 
  7993 ;;  divisor         2    2[BANK0 ] unsigned int 
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  counter         1    4[BANK0 ] unsigned char 
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  2    0[BANK0 ] unsigned int 
  7998 ;; Registers used:
  7999 ;;		wreg, status,2, status,0
  8000 ;; Tracked objects:
  8001 ;;		On entry : 3F/0
  8002 ;;		On exit  : 3F/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8005 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8009 ;;Total ram usage:        5 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:    9
  8012 ;; This function calls:
  8013 ;;		Nothing
  8014 ;; This function is called by:
  8015 ;;		_IncreaseByADay
  8016 ;;		_IncreaseByAYear
  8017 ;;		_DecreaseByADay
  8018 ;;		_DecreaseByAYear
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           	psect	text33
  8023  0033BA                     __ptext33:
  8024                           	opt stack 0
  8025  0033BA                     ___lwmod:
  8026                           	opt stack 18
  8027                           
  8028                           ; BSR set to: 0
  8029                           
  8030                           ; BSR set to: 0
  8031                           ;incstack = 0
  8032  0033BA  5162               	movf	___lwmod@divisor& (0+255),w,b
  8033  0033BC  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8034  0033BE  E017               	bz	l1591
  8035                           
  8036                           ; BSR set to: 0
  8037  0033C0  0E01               	movlw	1
  8038  0033C2  6F64               	movwf	___lwmod@counter& (0+255),b
  8039  0033C4  D004               	goto	l3392
  8040  0033C6                     l3390:
  8041                           
  8042                           ; BSR set to: 0
  8043  0033C6  90D8               	bcf	status,0,c
  8044  0033C8  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  8045  0033CA  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8046  0033CC  2B64               	incf	___lwmod@counter& (0+255),f,b
  8047  0033CE                     l3392:
  8048                           
  8049                           ; BSR set to: 0
  8050  0033CE  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8051  0033D0  D7FA               	goto	l3390
  8052  0033D2                     l3394:
  8053                           
  8054                           ; BSR set to: 0
  8055  0033D2  5162               	movf	___lwmod@divisor& (0+255),w,b
  8056  0033D4  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  8057  0033D6  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8058  0033D8  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8059  0033DA  E304               	bnc	l3398
  8060                           
  8061                           ; BSR set to: 0
  8062  0033DC  5162               	movf	___lwmod@divisor& (0+255),w,b
  8063  0033DE  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  8064  0033E0  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8065  0033E2  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8066  0033E4                     l3398:
  8067                           
  8068                           ; BSR set to: 0
  8069  0033E4  90D8               	bcf	status,0,c
  8070  0033E6  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8071  0033E8  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  8072                           
  8073                           ; BSR set to: 0
  8074  0033EA  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  8075  0033EC  D7F2               	goto	l3394
  8076  0033EE                     l1591:
  8077                           
  8078                           ; BSR set to: 0
  8079  0033EE  C060  F060         	movff	___lwmod@dividend,?___lwmod
  8080  0033F2  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  8081                           
  8082                           ; BSR set to: 0
  8083  0033F6  0012               	return		;funcret
  8084  0033F8                     __end_of___lwmod:
  8085                           	opt stack 0
  8086                           tosu	equ	0xFFF
  8087                           tosh	equ	0xFFE
  8088                           tosl	equ	0xFFD
  8089                           pclath	equ	0xFFA
  8090                           tblptru	equ	0xFF8
  8091                           tblptrh	equ	0xFF7
  8092                           tblptrl	equ	0xFF6
  8093                           tablat	equ	0xFF5
  8094                           prodh	equ	0xFF4
  8095                           prodl	equ	0xFF3
  8096                           intcon	equ	0xFF2
  8097                           postinc0	equ	0xFEE
  8098                           plusw0	equ	0xFEB
  8099                           wreg	equ	0xFE8
  8100                           indf1	equ	0xFE7
  8101                           postinc1	equ	0xFE6
  8102                           postdec1	equ	0xFE5
  8103                           plusw1	equ	0xFE3
  8104                           fsr1h	equ	0xFE2
  8105                           fsr1l	equ	0xFE1
  8106                           indf2	equ	0xFDF
  8107                           postinc2	equ	0xFDE
  8108                           postdec2	equ	0xFDD
  8109                           plusw2	equ	0xFDB
  8110                           fsr2h	equ	0xFDA
  8111                           fsr2l	equ	0xFD9
  8112                           status	equ	0xFD8
  8113                           
  8114 ;; *************** function _LoadAllFromEeprom *****************
  8115 ;; Defined at:
  8116 ;;		line 179 in file "libs/eeprom.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;		None
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 3F/0
  8127 ;;		On exit  : 3F/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8134 ;;Total ram usage:        0 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:   11
  8137 ;; This function calls:
  8138 ;;		_LoadCyclesFromEeprom
  8139 ;;		_LoadEventsFromEeprom
  8140 ;;		_LoadSettingsFromEeprom
  8141 ;;		_LoadStatesFromEeprom
  8142 ;; This function is called by:
  8143 ;;		_main
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           	psect	text34
  8148  003660                     __ptext34:
  8149                           	opt stack 0
  8150  003660                     _LoadAllFromEeprom:
  8151                           	opt stack 19
  8152                           
  8153                           ; BSR set to: 0
  8154                           ;eeprom.c: 180: LoadSettingsFromEeprom ();
  8155                           
  8156                           ; BSR set to: 0
  8157                           ;incstack = 0
  8158  003660  EC44  F00B         	call	_LoadSettingsFromEeprom	;wreg free
  8159                           
  8160                           ; BSR set to: 0
  8161                           ;eeprom.c: 181: LoadEventsFromEeprom ();
  8162  003664  ECE7  F00D         	call	_LoadEventsFromEeprom	;wreg free
  8163                           
  8164                           ; BSR set to: 0
  8165                           ;eeprom.c: 182: LoadStatesFromEeprom();
  8166  003668  EC11  F00D         	call	_LoadStatesFromEeprom	;wreg free
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;eeprom.c: 183: LoadCyclesFromEeprom();
  8170  00366C  EF48  F00F         	goto	_LoadCyclesFromEeprom	;wreg free
  8171  003670                     __end_of_LoadAllFromEeprom:
  8172                           	opt stack 0
  8173                           tosu	equ	0xFFF
  8174                           tosh	equ	0xFFE
  8175                           tosl	equ	0xFFD
  8176                           pclath	equ	0xFFA
  8177                           tblptru	equ	0xFF8
  8178                           tblptrh	equ	0xFF7
  8179                           tblptrl	equ	0xFF6
  8180                           tablat	equ	0xFF5
  8181                           prodh	equ	0xFF4
  8182                           prodl	equ	0xFF3
  8183                           intcon	equ	0xFF2
  8184                           postinc0	equ	0xFEE
  8185                           plusw0	equ	0xFEB
  8186                           wreg	equ	0xFE8
  8187                           indf1	equ	0xFE7
  8188                           postinc1	equ	0xFE6
  8189                           postdec1	equ	0xFE5
  8190                           plusw1	equ	0xFE3
  8191                           fsr1h	equ	0xFE2
  8192                           fsr1l	equ	0xFE1
  8193                           indf2	equ	0xFDF
  8194                           postinc2	equ	0xFDE
  8195                           postdec2	equ	0xFDD
  8196                           plusw2	equ	0xFDB
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _LoadStatesFromEeprom *****************
  8202 ;; Defined at:
  8203 ;;		line 128 in file "libs/eeprom.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;		None
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;  j               2   22[BANK0 ] int 
  8208 ;;  j               2   20[BANK0 ] int 
  8209 ;;  i               2   26[BANK0 ] int 
  8210 ;;  AddStates       2   24[BANK0 ] struct _WORD_VAL
  8211 ;;  TempSpecialA    2   17[BANK0 ] struct _WORD_VAL
  8212 ;;  TempNormalAd    2   15[BANK0 ] struct _WORD_VAL
  8213 ;;  AddAudioSpec    2   13[BANK0 ] struct _WORD_VAL
  8214 ;;  AddAudioNorm    2   11[BANK0 ] struct _WORD_VAL
  8215 ;;  AudAddInc       1   19[BANK0 ] unsigned char 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  1    wreg      void 
  8218 ;; Registers used:
  8219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 3F/0
  8222 ;;		On exit  : 3F/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8226 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8227 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8228 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8229 ;;Total ram usage:       20 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:   10
  8232 ;; This function calls:
  8233 ;;		_ReadEeprom
  8234 ;;		___awdiv
  8235 ;;		___wmul
  8236 ;; This function is called by:
  8237 ;;		_LoadAllFromEeprom
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241                           	psect	text35
  8242  001A22                     __ptext35:
  8243                           	opt stack 0
  8244  001A22                     _LoadStatesFromEeprom:
  8245                           	opt stack 19
  8246                           
  8247                           ; BSR set to: 0
  8248                           ;eeprom.c: 129: WORD_VAL AddStates, AddAudioNormal, AddAudioSpecial, TempNormalAdd, Temp
      +                          SpecialAdd;
  8249                           ;eeprom.c: 130: UINT8 AudAddInc;
  8250                           ;eeprom.c: 131: AddStates.Val = 0xE0;
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;incstack = 0
  8254  001A22  6B79               	clrf	(LoadStatesFromEeprom@AddStates+1)& (0+255),b
  8255  001A24  0EE0               	movlw	224
  8256  001A26  6F78               	movwf	LoadStatesFromEeprom@AddStates& (0+255),b
  8257                           
  8258                           ;eeprom.c: 132: AddAudioNormal.Val = 0x17;
  8259  001A28  6B6C               	clrf	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),b
  8260  001A2A  0E17               	movlw	23
  8261  001A2C  6F6B               	movwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),b
  8262                           
  8263                           ;eeprom.c: 133: AddAudioSpecial.Val = 0x2B;
  8264  001A2E  6B6E               	clrf	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),b
  8265  001A30  0E2B               	movlw	43
  8266  001A32  6F6D               	movwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),b
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;eeprom.c: 134: for (int i=0; i<160; i++) {
  8270  001A34  6B7A               	clrf	LoadStatesFromEeprom@i& (0+255),b
  8271  001A36  6B7B               	clrf	(LoadStatesFromEeprom@i+1)& (0+255),b
  8272  001A38                     l4414:
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;eeprom.c: 135: STATES[i].PERIOD = ReadEeprom(AddStates);
  8276  001A38  D8A3               	call	PL14	;call to abstracted procedure
  8277  001A3A  ECB8  F01A         	call	___wmul	;wreg free
  8278  001A3E  0EF0               	movlw	low _STATES
  8279  001A40  2560               	addwf	?___wmul& (0+255),w,b
  8280  001A42  6ED9               	movwf	fsr2l,c
  8281  001A44  0E06               	movlw	high _STATES
  8282  001A46  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8283  001A48  D8B3               	call	PL100	;call to abstracted procedure
  8284  001A4A  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8285  001A4E  6EDF               	movwf	indf2,c
  8286                           
  8287                           ;eeprom.c: 136: AddStates.Val++;
  8288  001A50  0100               	movlb	0	; () banked
  8289  001A52  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8290  001A54  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;eeprom.c: 137: for (int j=0; j<2; j++) {
  8294  001A56  6B74               	clrf	LoadStatesFromEeprom@j& (0+255),b
  8295  001A58  6B75               	clrf	(LoadStatesFromEeprom@j+1)& (0+255),b
  8296  001A5A                     l4424:
  8297                           
  8298                           ; BSR set to: 0
  8299                           ;eeprom.c: 138: STATES[i].ON[j] = ReadEeprom(AddStates);
  8300  001A5A  D892               	call	PL14	;call to abstracted procedure
  8301  001A5C  ECB8  F01A         	call	___wmul	;wreg free
  8302  001A60  D8AD               	call	PL136	;call to abstracted procedure
  8303  001A62  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  8304  001A64  0E00               	movlw	0
  8305  001A66  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8306  001A68  5160               	movf	?___wmul& (0+255),w,b
  8307  001A6A  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8308  001A6C  5161               	movf	(?___wmul+1)& (0+255),w,b
  8309  001A6E  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8310  001A70  5174               	movf	LoadStatesFromEeprom@j& (0+255),w,b
  8311  001A72  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  8312  001A74  6ED9               	movwf	fsr2l,c
  8313  001A76  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  8314  001A78  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8315  001A7A  D89A               	call	PL100	;call to abstracted procedure
  8316  001A7C  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8317  001A80  6EDF               	movwf	indf2,c
  8318                           
  8319                           ;eeprom.c: 139: AddStates.Val++;
  8320  001A82  0100               	movlb	0	; () banked
  8321  001A84  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8322  001A86  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8323                           
  8324                           ; BSR set to: 0
  8325  001A88  4B74               	infsnz	LoadStatesFromEeprom@j& (0+255),f,b
  8326  001A8A  2B75               	incf	(LoadStatesFromEeprom@j+1)& (0+255),f,b
  8327                           
  8328                           ; BSR set to: 0
  8329  001A8C  BF75               	btfsc	(LoadStatesFromEeprom@j+1)& (0+255),7,b
  8330  001A8E  D7E5               	goto	l4424
  8331  001A90  5175               	movf	(LoadStatesFromEeprom@j+1)& (0+255),w,b
  8332  001A92  E103               	bnz	u4320
  8333  001A94  0E02               	movlw	2
  8334  001A96  5D74               	subwf	LoadStatesFromEeprom@j& (0+255),w,b
  8335  001A98  E3E0               	bnc	l4424
  8336  001A9A                     u4320:
  8337                           
  8338                           ; BSR set to: 0
  8339                           ;eeprom.c: 140: }
  8340                           ;eeprom.c: 141: for (int j=0; j<2; j++) {
  8341  001A9A  6B76               	clrf	LoadStatesFromEeprom@j_1402& (0+255),b
  8342  001A9C  6B77               	clrf	(LoadStatesFromEeprom@j_1402+1)& (0+255),b
  8343  001A9E                     l4436:
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;eeprom.c: 142: STATES[i].BLINK[j] = ReadEeprom(AddStates);
  8347  001A9E  D870               	call	PL14	;call to abstracted procedure
  8348  001AA0  ECB8  F01A         	call	___wmul	;wreg free
  8349  001AA4  D88B               	call	PL136	;call to abstracted procedure
  8350  001AA6  0E03               	movlw	3
  8351  001AA8  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8352  001AAA  0E00               	movlw	0
  8353  001AAC  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8354  001AAE  5160               	movf	?___wmul& (0+255),w,b
  8355  001AB0  2768               	addwf	??_LoadStatesFromEeprom& (0+255),f,b
  8356  001AB2  5161               	movf	(?___wmul+1)& (0+255),w,b
  8357  001AB4  2369               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8358  001AB6  5176               	movf	LoadStatesFromEeprom@j_1402& (0+255),w,b
  8359  001AB8  2568               	addwf	??_LoadStatesFromEeprom& (0+255),w,b
  8360  001ABA  6ED9               	movwf	fsr2l,c
  8361  001ABC  5177               	movf	(LoadStatesFromEeprom@j_1402+1)& (0+255),w,b
  8362  001ABE  2169               	addwfc	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8363  001AC0  D877               	call	PL100	;call to abstracted procedure
  8364  001AC2  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8365  001AC6  6EDF               	movwf	indf2,c
  8366                           
  8367                           ;eeprom.c: 143: AddStates.Val++;
  8368  001AC8  0100               	movlb	0	; () banked
  8369  001ACA  4B78               	infsnz	LoadStatesFromEeprom@AddStates& (0+255),f,b
  8370  001ACC  2B79               	incf	(LoadStatesFromEeprom@AddStates+1)& (0+255),f,b
  8371                           
  8372                           ; BSR set to: 0
  8373  001ACE  4B76               	infsnz	LoadStatesFromEeprom@j_1402& (0+255),f,b
  8374  001AD0  2B77               	incf	(LoadStatesFromEeprom@j_1402+1)& (0+255),f,b
  8375                           
  8376                           ; BSR set to: 0
  8377  001AD2  BF77               	btfsc	(LoadStatesFromEeprom@j_1402+1)& (0+255),7,b
  8378  001AD4  D7E4               	goto	l4436
  8379  001AD6  5177               	movf	(LoadStatesFromEeprom@j_1402+1)& (0+255),w,b
  8380  001AD8  E103               	bnz	u4330
  8381  001ADA  0E02               	movlw	2
  8382  001ADC  5D76               	subwf	LoadStatesFromEeprom@j_1402& (0+255),w,b
  8383  001ADE  E3DF               	bnc	l4436
  8384  001AE0                     u4330:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;eeprom.c: 144: }
  8388                           ;eeprom.c: 145: AudAddInc = i/8;
  8389  001AE0  C07A  F060         	movff	LoadStatesFromEeprom@i,___awdiv@dividend
  8390  001AE4  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___awdiv@dividend+1
  8391  001AE8  6B63               	clrf	(___awdiv@divisor+1)& (0+255),b
  8392  001AEA  0E08               	movlw	8
  8393  001AEC  6F62               	movwf	___awdiv@divisor& (0+255),b
  8394  001AEE  ECE0  F017         	call	___awdiv	;wreg free
  8395  001AF2  5160               	movf	?___awdiv& (0+255),w,b
  8396  001AF4  6F73               	movwf	LoadStatesFromEeprom@AudAddInc& (0+255),b
  8397                           
  8398                           ; BSR set to: 0
  8399                           ;eeprom.c: 146: TempNormalAdd.Val = AddAudioNormal.Val + AudAddInc;
  8400  001AF6  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  8401  001AF8  256B               	addwf	LoadStatesFromEeprom@AddAudioNormal& (0+255),w,b
  8402  001AFA  6F6F               	movwf	LoadStatesFromEeprom@TempNormalAdd& (0+255),b
  8403  001AFC  0E00               	movlw	0
  8404  001AFE  216C               	addwfc	(LoadStatesFromEeprom@AddAudioNormal+1)& (0+255),w,b
  8405  001B00  6F70               	movwf	(LoadStatesFromEeprom@TempNormalAdd+1)& (0+255),b
  8406                           
  8407                           ; BSR set to: 0
  8408                           ;eeprom.c: 147: TempSpecialAdd.Val = AddAudioSpecial.Val + AudAddInc;
  8409  001B02  5173               	movf	LoadStatesFromEeprom@AudAddInc& (0+255),w,b
  8410  001B04  256D               	addwf	LoadStatesFromEeprom@AddAudioSpecial& (0+255),w,b
  8411  001B06  6F71               	movwf	LoadStatesFromEeprom@TempSpecialAdd& (0+255),b
  8412  001B08  0E00               	movlw	0
  8413  001B0A  216E               	addwfc	(LoadStatesFromEeprom@AddAudioSpecial+1)& (0+255),w,b
  8414  001B0C  6F72               	movwf	(LoadStatesFromEeprom@TempSpecialAdd+1)& (0+255),b
  8415                           
  8416                           ;eeprom.c: 148: if (ReadEeprom(TempNormalAdd) & ((0x80)>>(i%8)))
  8417  001B0E  D847               	call	PL92	;call to abstracted procedure
  8418  001B10  D001               	goto	u4344
  8419  001B12                     u4345:
  8420  001B12  D859               	call	PL162	;call to abstracted procedure
  8421  001B14                     u4344:
  8422  001B14  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  8423  001B16  D7FD               	goto	u4345
  8424  001B18  C06F  F060         	movff	LoadStatesFromEeprom@TempNormalAdd,ReadEeprom@Address
  8425  001B1C  C070  F061         	movff	LoadStatesFromEeprom@TempNormalAdd+1,ReadEeprom@Address+1
  8426  001B20  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8427  001B24  0100               	movlb	0	; () banked
  8428  001B26  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8429  001B28  E006               	bz	l4452
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;eeprom.c: 149: STATES[i].AUDIO = AUDIO_NORMAL;
  8433  001B2A  D82A               	call	PL14	;call to abstracted procedure
  8434  001B2C  ECB8  F01A         	call	___wmul	;wreg free
  8435  001B30  D82F               	call	PL80	;call to abstracted procedure
  8436  001B32  0E01               	movlw	1
  8437  001B34  D019               	goto	L7
  8438  001B36                     l4452:
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;eeprom.c: 150: else if (ReadEeprom(TempSpecialAdd) & ((0x80)>>(i%8)))
  8442  001B36  D833               	call	PL92	;call to abstracted procedure
  8443  001B38  D001               	goto	u4364
  8444  001B3A                     u4365:
  8445  001B3A  D845               	call	PL162	;call to abstracted procedure
  8446  001B3C                     u4364:
  8447  001B3C  2F68               	decfsz	??_LoadStatesFromEeprom& (0+255),f,b
  8448  001B3E  D7FD               	goto	u4365
  8449  001B40  C071  F060         	movff	LoadStatesFromEeprom@TempSpecialAdd,ReadEeprom@Address
  8450  001B44  C072  F061         	movff	LoadStatesFromEeprom@TempSpecialAdd+1,ReadEeprom@Address+1
  8451  001B48  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8452  001B4C  0100               	movlb	0	; () banked
  8453  001B4E  1569               	andwf	(??_LoadStatesFromEeprom+1)& (0+255),w,b
  8454  001B50  E006               	bz	l4456
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;eeprom.c: 151: STATES[i].AUDIO = AUDIO_SPECIAL;
  8458  001B52  D816               	call	PL14	;call to abstracted procedure
  8459  001B54  ECB8  F01A         	call	___wmul	;wreg free
  8460  001B58  D81B               	call	PL80	;call to abstracted procedure
  8461  001B5A  0E02               	movlw	2
  8462  001B5C  D005               	goto	L7
  8463  001B5E                     l4456:
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;eeprom.c: 152: else
  8467                           ;eeprom.c: 153: STATES[i].AUDIO = AUDIO_OFF;
  8468  001B5E  D810               	call	PL14	;call to abstracted procedure
  8469  001B60  ECB8  F01A         	call	___wmul	;wreg free
  8470  001B64  D815               	call	PL80	;call to abstracted procedure
  8471  001B66  0E00               	movlw	0
  8472  001B68                     L7:
  8473  001B68  6EDF               	movwf	indf2,c
  8474                           
  8475                           ; BSR set to: 0
  8476  001B6A  4B7A               	infsnz	LoadStatesFromEeprom@i& (0+255),f,b
  8477  001B6C  2B7B               	incf	(LoadStatesFromEeprom@i+1)& (0+255),f,b
  8478                           
  8479                           ; BSR set to: 0
  8480  001B6E  BF7B               	btfsc	(LoadStatesFromEeprom@i+1)& (0+255),7,b
  8481  001B70  D763               	goto	l4414
  8482  001B72  517B               	movf	(LoadStatesFromEeprom@i+1)& (0+255),w,b
  8483  001B74  E104               	bnz	u4380
  8484  001B76  0EA0               	movlw	160
  8485  001B78  5D7A               	subwf	LoadStatesFromEeprom@i& (0+255),w,b
  8486  001B7A  E201 D75D          	bnc	l4414
  8487  001B7E                     u4380:
  8488                           
  8489                           ; BSR set to: 0
  8490  001B7E  0012               	return		;funcret
  8491  001B80                     __end_of_LoadStatesFromEeprom:
  8492                           	opt stack 0
  8493  001B80                     PL14:
  8494                           	opt stack 19
  8495  001B80  C07A  F060         	movff	LoadStatesFromEeprom@i,___wmul@multiplier
  8496  001B84  C07B  F061         	movff	LoadStatesFromEeprom@i+1,___wmul@multiplier+1
  8497  001B88  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8498  001B8A  0E06               	movlw	6
  8499  001B8C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8500  001B8E  0C06               	retlw	6
  8501  001B90                     __end_ofPL14:
  8502                           	opt stack 0
  8503  001B90                     PL80:
  8504                           	opt stack 19
  8505  001B90  0EF5               	movlw	low (_STATES+5)
  8506  001B92  2560               	addwf	?___wmul& (0+255),w,b
  8507  001B94  6ED9               	movwf	fsr2l,c
  8508  001B96  0E06               	movlw	high (_STATES+5)
  8509  001B98  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8510  001B9A  6EDA               	movwf	fsr2h,c
  8511  001B9C  0012               	return	
  8512  001B9E                     __end_ofPL80:
  8513                           	opt stack 0
  8514  001B9E                     PL92:
  8515                           	opt stack 19
  8516  001B9E  C07A  F068         	movff	LoadStatesFromEeprom@i,??_LoadStatesFromEeprom
  8517  001BA2  0E07               	movlw	7
  8518  001BA4  1768               	andwf	??_LoadStatesFromEeprom& (0+255),f,b
  8519  001BA6  0E80               	movlw	128
  8520  001BA8  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  8521  001BAA  6B6A               	clrf	(??_LoadStatesFromEeprom+2)& (0+255),b
  8522  001BAC  2B68               	incf	??_LoadStatesFromEeprom& (0+255),f,b
  8523  001BAE  0C80               	retlw	128
  8524  001BB0                     __end_ofPL92:
  8525                           	opt stack 0
  8526  001BB0                     PL100:
  8527                           	opt stack 19
  8528  001BB0  6EDA               	movwf	fsr2h,c
  8529  001BB2  C078  F060         	movff	LoadStatesFromEeprom@AddStates,ReadEeprom@Address
  8530  001BB6  C079  F061         	movff	LoadStatesFromEeprom@AddStates+1,ReadEeprom@Address+1
  8531  001BBA  0012               	return	
  8532  001BBC                     __end_ofPL100:
  8533                           	opt stack 0
  8534  001BBC                     PL136:
  8535                           	opt stack 19
  8536  001BBC  0EF0               	movlw	low _STATES
  8537  001BBE  6F68               	movwf	??_LoadStatesFromEeprom& (0+255),b
  8538  001BC0  0E06               	movlw	high _STATES
  8539  001BC2  6F69               	movwf	(??_LoadStatesFromEeprom+1)& (0+255),b
  8540  001BC4  0012               	return	
  8541  001BC6                     __end_ofPL136:
  8542                           	opt stack 0
  8543  001BC6                     PL162:
  8544                           	opt stack 19
  8545  001BC6  356A               	rlcf	(??_LoadStatesFromEeprom+2)& (0+255),w,b
  8546  001BC8  336A               	rrcf	(??_LoadStatesFromEeprom+2)& (0+255),f,b
  8547  001BCA  3369               	rrcf	(??_LoadStatesFromEeprom+1)& (0+255),f,b
  8548  001BCC  0012               	return	
  8549  001BCE                     __end_ofPL162:
  8550                           	opt stack 0
  8551                           tosu	equ	0xFFF
  8552                           tosh	equ	0xFFE
  8553                           tosl	equ	0xFFD
  8554                           pclath	equ	0xFFA
  8555                           tblptru	equ	0xFF8
  8556                           tblptrh	equ	0xFF7
  8557                           tblptrl	equ	0xFF6
  8558                           tablat	equ	0xFF5
  8559                           prodh	equ	0xFF4
  8560                           prodl	equ	0xFF3
  8561                           intcon	equ	0xFF2
  8562                           postinc0	equ	0xFEE
  8563                           plusw0	equ	0xFEB
  8564                           wreg	equ	0xFE8
  8565                           indf1	equ	0xFE7
  8566                           postinc1	equ	0xFE6
  8567                           postdec1	equ	0xFE5
  8568                           plusw1	equ	0xFE3
  8569                           fsr1h	equ	0xFE2
  8570                           fsr1l	equ	0xFE1
  8571                           indf2	equ	0xFDF
  8572                           postinc2	equ	0xFDE
  8573                           postdec2	equ	0xFDD
  8574                           plusw2	equ	0xFDB
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function ___awdiv *****************
  8580 ;; Defined at:
  8581 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;  dividend        2    0[BANK0 ] int 
  8584 ;;  divisor         2    2[BANK0 ] int 
  8585 ;; Auto vars:     Size  Location     Type
  8586 ;;  quotient        2    6[BANK0 ] int 
  8587 ;;  sign            1    5[BANK0 ] unsigned char 
  8588 ;;  counter         1    4[BANK0 ] unsigned char 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  2    0[BANK0 ] int 
  8591 ;; Registers used:
  8592 ;;		wreg, status,2, status,0
  8593 ;; Tracked objects:
  8594 ;;		On entry : 3F/0
  8595 ;;		On exit  : 3F/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8598 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8599 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8601 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8602 ;;Total ram usage:        8 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:    9
  8605 ;; This function calls:
  8606 ;;		Nothing
  8607 ;; This function is called by:
  8608 ;;		_GetDay
  8609 ;;		_LoadStatesFromEeprom
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text36
  8614  002FC0                     __ptext36:
  8615                           	opt stack 0
  8616  002FC0                     ___awdiv:
  8617                           	opt stack 18
  8618                           
  8619                           ; BSR set to: 0
  8620                           
  8621                           ; BSR set to: 0
  8622                           ;incstack = 0
  8623  002FC0  6B65               	clrf	___awdiv@sign& (0+255),b
  8624                           
  8625                           ; BSR set to: 0
  8626  002FC2  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8627  002FC4  D006               	goto	l3732
  8628                           
  8629                           ; BSR set to: 0
  8630  002FC6  6D62               	negf	___awdiv@divisor& (0+255),b
  8631  002FC8  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8632  002FCA  B0D8               	btfsc	status,0,c
  8633  002FCC  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8634                           
  8635                           ; BSR set to: 0
  8636  002FCE  0E01               	movlw	1
  8637  002FD0  6F65               	movwf	___awdiv@sign& (0+255),b
  8638  002FD2                     l3732:
  8639                           
  8640                           ; BSR set to: 0
  8641  002FD2  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8642  002FD4  D006               	goto	l3738
  8643                           
  8644                           ; BSR set to: 0
  8645  002FD6  6D60               	negf	___awdiv@dividend& (0+255),b
  8646  002FD8  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8647  002FDA  B0D8               	btfsc	status,0,c
  8648  002FDC  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8649                           
  8650                           ; BSR set to: 0
  8651  002FDE  0E01               	movlw	1
  8652  002FE0  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  8653  002FE2                     l3738:
  8654                           
  8655                           ; BSR set to: 0
  8656  002FE2  6B66               	clrf	___awdiv@quotient& (0+255),b
  8657  002FE4  6B67               	clrf	(___awdiv@quotient+1)& (0+255),b
  8658                           
  8659                           ; BSR set to: 0
  8660  002FE6  5162               	movf	___awdiv@divisor& (0+255),w,b
  8661  002FE8  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8662  002FEA  E01B               	bz	l3760
  8663                           
  8664                           ; BSR set to: 0
  8665  002FEC  0E01               	movlw	1
  8666  002FEE  6F64               	movwf	___awdiv@counter& (0+255),b
  8667  002FF0  D004               	goto	l3746
  8668  002FF2                     l3744:
  8669                           
  8670                           ; BSR set to: 0
  8671  002FF2  90D8               	bcf	status,0,c
  8672  002FF4  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  8673  002FF6  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8674  002FF8  2B64               	incf	___awdiv@counter& (0+255),f,b
  8675  002FFA                     l3746:
  8676                           
  8677                           ; BSR set to: 0
  8678  002FFA  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8679  002FFC  D7FA               	goto	l3744
  8680  002FFE                     l3748:
  8681                           
  8682                           ; BSR set to: 0
  8683  002FFE  90D8               	bcf	status,0,c
  8684  003000  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  8685  003002  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8686                           
  8687                           ; BSR set to: 0
  8688  003004  5162               	movf	___awdiv@divisor& (0+255),w,b
  8689  003006  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  8690  003008  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8691  00300A  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8692  00300C  E305               	bnc	l3756
  8693                           
  8694                           ; BSR set to: 0
  8695  00300E  5162               	movf	___awdiv@divisor& (0+255),w,b
  8696  003010  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  8697  003012  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8698  003014  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8699                           
  8700                           ; BSR set to: 0
  8701  003016  8166               	bsf	___awdiv@quotient& (0+255),0,b
  8702  003018                     l3756:
  8703                           
  8704                           ; BSR set to: 0
  8705  003018  90D8               	bcf	status,0,c
  8706  00301A  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8707  00301C  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  8708                           
  8709                           ; BSR set to: 0
  8710  00301E  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  8711  003020  D7EE               	goto	l3748
  8712  003022                     l3760:
  8713                           
  8714                           ; BSR set to: 0
  8715  003022  5165               	movf	___awdiv@sign& (0+255),w,b
  8716  003024  E004               	bz	l3764
  8717                           
  8718                           ; BSR set to: 0
  8719  003026  6D66               	negf	___awdiv@quotient& (0+255),b
  8720  003028  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8721  00302A  B0D8               	btfsc	status,0,c
  8722  00302C  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8723  00302E                     l3764:
  8724                           
  8725                           ; BSR set to: 0
  8726  00302E  C066  F060         	movff	___awdiv@quotient,?___awdiv
  8727  003032  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  8728                           
  8729                           ; BSR set to: 0
  8730  003036  0012               	return		;funcret
  8731  003038                     __end_of___awdiv:
  8732                           	opt stack 0
  8733                           tosu	equ	0xFFF
  8734                           tosh	equ	0xFFE
  8735                           tosl	equ	0xFFD
  8736                           pclath	equ	0xFFA
  8737                           tblptru	equ	0xFF8
  8738                           tblptrh	equ	0xFF7
  8739                           tblptrl	equ	0xFF6
  8740                           tablat	equ	0xFF5
  8741                           prodh	equ	0xFF4
  8742                           prodl	equ	0xFF3
  8743                           intcon	equ	0xFF2
  8744                           postinc0	equ	0xFEE
  8745                           plusw0	equ	0xFEB
  8746                           wreg	equ	0xFE8
  8747                           indf1	equ	0xFE7
  8748                           postinc1	equ	0xFE6
  8749                           postdec1	equ	0xFE5
  8750                           plusw1	equ	0xFE3
  8751                           fsr1h	equ	0xFE2
  8752                           fsr1l	equ	0xFE1
  8753                           indf2	equ	0xFDF
  8754                           postinc2	equ	0xFDE
  8755                           postdec2	equ	0xFDD
  8756                           plusw2	equ	0xFDB
  8757                           fsr2h	equ	0xFDA
  8758                           fsr2l	equ	0xFD9
  8759                           status	equ	0xFD8
  8760                           
  8761 ;; *************** function _LoadSettingsFromEeprom *****************
  8762 ;; Defined at:
  8763 ;;		line 33 in file "libs/eeprom.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;		None
  8766 ;; Auto vars:     Size  Location     Type
  8767 ;;  Temp32          4    6[BANK0 ] struct _DWORD_VAL
  8768 ;;  Address         2   12[BANK0 ] struct _WORD_VAL
  8769 ;;  Temp16          2   10[BANK0 ] struct _WORD_VAL
  8770 ;; Return value:  Size  Location     Type
  8771 ;;                  1    wreg      void 
  8772 ;; Registers used:
  8773 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8774 ;; Tracked objects:
  8775 ;;		On entry : 3F/0
  8776 ;;		On exit  : 3F/0
  8777 ;;		Unchanged: 0/0
  8778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8780 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8782 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8783 ;;Total ram usage:        8 bytes
  8784 ;; Hardware stack levels used:    1
  8785 ;; Hardware stack levels required when called:   10
  8786 ;; This function calls:
  8787 ;;		_ReadEeprom
  8788 ;;		___wmul
  8789 ;; This function is called by:
  8790 ;;		_LoadAllFromEeprom
  8791 ;; This function uses a non-reentrant model
  8792 ;;
  8793                           
  8794                           	psect	text37
  8795  001688                     __ptext37:
  8796                           	opt stack 0
  8797  001688                     _LoadSettingsFromEeprom:
  8798                           	opt stack 19
  8799                           
  8800                           ; BSR set to: 0
  8801                           ;eeprom.c: 34: WORD_VAL Temp16, Address;
  8802                           ;eeprom.c: 35: DWORD_VAL Temp32;
  8803                           ;eeprom.c: 37: Address.Val = 0x00;
  8804                           
  8805                           ; BSR set to: 0
  8806                           ;incstack = 0
  8807  001688  6B6C               	clrf	LoadSettingsFromEeprom@Address& (0+255),b
  8808  00168A  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8809                           
  8810                           ; BSR set to: 0
  8811                           ;eeprom.c: 38: Temp16.v[0] = ReadEeprom(Address);
  8812  00168C  D8E3               	call	PL8	;call to abstracted procedure
  8813  00168E  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8814  001692  0100               	movlb	0	; () banked
  8815  001694  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;eeprom.c: 39: Address.Val++;
  8819  001696  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8820  001698  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8821                           
  8822                           ; BSR set to: 0
  8823                           ;eeprom.c: 40: Temp16.v[1] = ReadEeprom(Address);
  8824  00169A  D8DC               	call	PL8	;call to abstracted procedure
  8825  00169C  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8826  0016A0  0100               	movlb	0	; () banked
  8827  0016A2  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;eeprom.c: 41: TIME_ZONE = (INT16) 60*Temp16.Val;
  8831  0016A4  C06A  F060         	movff	LoadSettingsFromEeprom@Temp16,___wmul@multiplier
  8832  0016A8  C06B  F061         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier+1
  8833  0016AC  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8834  0016AE  0E3C               	movlw	60
  8835  0016B0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8836  0016B2  ECB8  F01A         	call	___wmul	;wreg free
  8837  0016B6  C060  F0E4         	movff	?___wmul,_TIME_ZONE
  8838  0016BA  C061  F0E5         	movff	?___wmul+1,_TIME_ZONE+1
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;eeprom.c: 43: Address.Val = 0x02;
  8842  0016BE  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8843  0016C0  0E02               	movlw	2
  8844  0016C2  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8845                           
  8846                           ; BSR set to: 0
  8847                           ;eeprom.c: 44: DAY_LIGHT_START.Day = ReadEeprom (Address);
  8848  0016C4  D8C7               	call	PL8	;call to abstracted procedure
  8849  0016C6  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8850  0016CA  0100               	movlb	0	; () banked
  8851  0016CC  6FDC               	movwf	_DAY_LIGHT_START& (0+255),b
  8852  0016CE  6BDD               	clrf	(_DAY_LIGHT_START+1)& (0+255),b
  8853                           
  8854                           ; BSR set to: 0
  8855                           ;eeprom.c: 45: Address.Val++;
  8856  0016D0  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8857  0016D2  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;eeprom.c: 46: DAY_LIGHT_START.Month = ReadEeprom (Address);
  8861  0016D4  D8BF               	call	PL8	;call to abstracted procedure
  8862  0016D6  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8863  0016DA  0100               	movlb	0	; () banked
  8864  0016DC  6FDE               	movwf	(_DAY_LIGHT_START+2)& (0+255),b
  8865  0016DE  6BDF               	clrf	(_DAY_LIGHT_START+3)& (0+255),b
  8866                           
  8867                           ; BSR set to: 0
  8868                           ;eeprom.c: 48: Address.Val = 0x04;
  8869  0016E0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8870  0016E2  0E04               	movlw	4
  8871  0016E4  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8872                           
  8873                           ; BSR set to: 0
  8874                           ;eeprom.c: 49: DAY_LIGHT_END.Day = ReadEeprom (Address);
  8875  0016E6  D8B6               	call	PL8	;call to abstracted procedure
  8876  0016E8  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8877  0016EC  0100               	movlb	0	; () banked
  8878  0016EE  6FD8               	movwf	_DAY_LIGHT_END& (0+255),b
  8879  0016F0  6BD9               	clrf	(_DAY_LIGHT_END+1)& (0+255),b
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;eeprom.c: 50: Address.Val++;
  8883  0016F2  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8884  0016F4  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8885                           
  8886                           ; BSR set to: 0
  8887                           ;eeprom.c: 51: DAY_LIGHT_END.Month = ReadEeprom (Address);
  8888  0016F6  D8AE               	call	PL8	;call to abstracted procedure
  8889  0016F8  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8890  0016FC  0100               	movlb	0	; () banked
  8891  0016FE  6FDA               	movwf	(_DAY_LIGHT_END+2)& (0+255),b
  8892  001700  6BDB               	clrf	(_DAY_LIGHT_END+3)& (0+255),b
  8893                           
  8894                           ; BSR set to: 0
  8895                           ;eeprom.c: 53: Address.Val = 0x06;
  8896  001702  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8897  001704  0E06               	movlw	6
  8898  001706  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;eeprom.c: 54: CENTURY = ReadEeprom(Address);
  8902  001708  D8A5               	call	PL8	;call to abstracted procedure
  8903  00170A  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8904  00170E  0100               	movlb	0	; () banked
  8905  001710  6FFE               	movwf	_CENTURY& (0+255),b
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;eeprom.c: 56: Address.Val = 0x07;
  8909  001712  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8910  001714  0E07               	movlw	7
  8911  001716  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;eeprom.c: 57: Temp16.v[0] = ReadEeprom(Address);
  8915  001718  D89D               	call	PL8	;call to abstracted procedure
  8916  00171A  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8917  00171E  0100               	movlb	0	; () banked
  8918  001720  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  8919                           
  8920                           ; BSR set to: 0
  8921                           ;eeprom.c: 58: Address.Val++;
  8922  001722  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  8923  001724  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;eeprom.c: 60: CYCLE_DELAY = (INT16) Temp16.Val;
  8927  001726  D896               	call	PL8	;call to abstracted procedure
  8928  001728  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8929  00172C  0100               	movlb	0	; () banked
  8930  00172E  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;eeprom.c: 62: Address.Val = 0x09;
  8934  001730  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8935  001732  0E09               	movlw	9
  8936  001734  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;eeprom.c: 63: BLINK_ON_TIME = ReadEeprom(Address);
  8940  001736  D88E               	call	PL8	;call to abstracted procedure
  8941  001738  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8942  00173C  6E5C               	movwf	_BLINK_ON_TIME,c
  8943                           
  8944                           ;eeprom.c: 65: Address.Val = 0x0A;
  8945  00173E  0100               	movlb	0	; () banked
  8946  001740  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8947  001742  0E0A               	movlw	10
  8948  001744  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;eeprom.c: 66: BLINK_OFF_TIME = ReadEeprom(Address);
  8952  001746  D886               	call	PL8	;call to abstracted procedure
  8953  001748  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8954  00174C  6E5B               	movwf	_BLINK_OFF_TIME,c
  8955                           
  8956                           ;eeprom.c: 68: Address.Val = 0x0B;
  8957  00174E  0100               	movlb	0	; () banked
  8958  001750  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8959  001752  0E0B               	movlw	11
  8960  001754  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8961                           
  8962                           ; BSR set to: 0
  8963                           ;eeprom.c: 69: BLINK_LAST_X_SECONDS = ReadEeprom(Address);
  8964  001756  D87E               	call	PL8	;call to abstracted procedure
  8965  001758  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8966  00175C  6E5A               	movwf	_BLINK_LAST_X_SECONDS,c
  8967                           
  8968                           ;eeprom.c: 71: Address.Val = 0x0C;
  8969  00175E  0100               	movlb	0	; () banked
  8970  001760  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8971  001762  0E0C               	movlw	12
  8972  001764  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8973                           
  8974                           ; BSR set to: 0
  8975                           ;eeprom.c: 72: AUDIO_NORMAL_ON_TIME = ReadEeprom(Address);
  8976  001766  D876               	call	PL8	;call to abstracted procedure
  8977  001768  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8978  00176C  6E59               	movwf	_AUDIO_NORMAL_ON_TIME,c
  8979                           
  8980                           ;eeprom.c: 74: Address.Val = 0x0D;
  8981  00176E  0100               	movlb	0	; () banked
  8982  001770  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8983  001772  0E0D               	movlw	13
  8984  001774  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8985                           
  8986                           ; BSR set to: 0
  8987                           ;eeprom.c: 75: AUDIO_NORMAL_OFF_TIME = ReadEeprom(Address);
  8988  001776  D86E               	call	PL8	;call to abstracted procedure
  8989  001778  EC0A  F01B         	call	_ReadEeprom	;wreg free
  8990  00177C  6E58               	movwf	_AUDIO_NORMAL_OFF_TIME,c
  8991                           
  8992                           ;eeprom.c: 77: Address.Val = 0x0E;
  8993  00177E  0100               	movlb	0	; () banked
  8994  001780  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  8995  001782  0E0E               	movlw	14
  8996  001784  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  8997                           
  8998                           ; BSR set to: 0
  8999                           ;eeprom.c: 78: AUDIO_SPECIAL_ON_TIME = ReadEeprom(Address);
  9000  001786  D866               	call	PL8	;call to abstracted procedure
  9001  001788  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9002  00178C  6E57               	movwf	_AUDIO_SPECIAL_ON_TIME,c
  9003                           
  9004                           ;eeprom.c: 80: Address.Val = 0x0F;
  9005  00178E  0100               	movlb	0	; () banked
  9006  001790  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9007  001792  0E0F               	movlw	15
  9008  001794  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9009                           
  9010                           ; BSR set to: 0
  9011                           ;eeprom.c: 81: AUDIO_SPECIAL_OFF_TIME = ReadEeprom(Address);
  9012  001796  D85E               	call	PL8	;call to abstracted procedure
  9013  001798  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9014  00179C  6E56               	movwf	_AUDIO_SPECIAL_OFF_TIME,c
  9015                           
  9016                           ;eeprom.c: 83: Address.Val = 0x10;
  9017  00179E  0100               	movlb	0	; () banked
  9018  0017A0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9019  0017A2  0E10               	movlw	16
  9020  0017A4  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;eeprom.c: 84: SPECIAL_AUDIO_LAST_X_SECONDS = ReadEeprom(Address);
  9024  0017A6  D856               	call	PL8	;call to abstracted procedure
  9025  0017A8  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9026  0017AC  6E55               	movwf	_SPECIAL_AUDIO_LAST_X_SECONDS,c
  9027                           
  9028                           ;eeprom.c: 86: Address.Val = 0x11;
  9029  0017AE  0100               	movlb	0	; () banked
  9030  0017B0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9031  0017B2  0E11               	movlw	17
  9032  0017B4  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9033                           
  9034                           ; BSR set to: 0
  9035                           ;eeprom.c: 87: GPS_SYNC_AT_START = ReadEeprom(Address);
  9036  0017B6  D84E               	call	PL8	;call to abstracted procedure
  9037  0017B8  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9038  0017BC  0100               	movlb	0	; () banked
  9039  0017BE  6FEB               	movwf	_GPS_SYNC_AT_START& (0+255),b
  9040                           
  9041                           ; BSR set to: 0
  9042                           ;eeprom.c: 89: Address.Val = 0x12;
  9043  0017C0  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9044  0017C2  0E12               	movlw	18
  9045  0017C4  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9046                           
  9047                           ; BSR set to: 0
  9048                           ;eeprom.c: 90: Temp32.Val = 0;
  9049  0017C6  6B66               	clrf	LoadSettingsFromEeprom@Temp32& (0+255),b
  9050  0017C8  6B67               	clrf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  9051  0017CA  6B68               	clrf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  9052  0017CC  6B69               	clrf	(LoadSettingsFromEeprom@Temp32+3)& (0+255),b
  9053                           
  9054                           ; BSR set to: 0
  9055                           ;eeprom.c: 91: Temp32.v[0] = ReadEeprom(Address);
  9056  0017CE  D842               	call	PL8	;call to abstracted procedure
  9057  0017D0  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9058  0017D4  0100               	movlb	0	; () banked
  9059  0017D6  6F66               	movwf	LoadSettingsFromEeprom@Temp32& (0+255),b
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;eeprom.c: 92: Address.Val++;
  9063  0017D8  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9064  0017DA  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;eeprom.c: 93: Temp32.v[1] = ReadEeprom(Address);
  9068  0017DC  D83B               	call	PL8	;call to abstracted procedure
  9069  0017DE  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9070  0017E2  0100               	movlb	0	; () banked
  9071  0017E4  6F67               	movwf	(LoadSettingsFromEeprom@Temp32+1)& (0+255),b
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;eeprom.c: 94: Address.Val++;
  9075  0017E6  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9076  0017E8  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9077                           
  9078                           ; BSR set to: 0
  9079                           ;eeprom.c: 95: Temp32.v[2] = ReadEeprom(Address);
  9080  0017EA  D834               	call	PL8	;call to abstracted procedure
  9081  0017EC  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9082  0017F0  0100               	movlb	0	; () banked
  9083  0017F2  6F68               	movwf	(LoadSettingsFromEeprom@Temp32+2)& (0+255),b
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;eeprom.c: 96: GPS_SYNC_EVERY_x_SECONDS = Temp32.Val;
  9087  0017F4  C066  F0D4         	movff	LoadSettingsFromEeprom@Temp32,_GPS_SYNC_EVERY_x_SECONDS
  9088  0017F8  C067  F0D5         	movff	LoadSettingsFromEeprom@Temp32+1,_GPS_SYNC_EVERY_x_SECONDS+1
  9089  0017FC  C068  F0D6         	movff	LoadSettingsFromEeprom@Temp32+2,_GPS_SYNC_EVERY_x_SECONDS+2
  9090  001800  C069  F0D7         	movff	LoadSettingsFromEeprom@Temp32+3,_GPS_SYNC_EVERY_x_SECONDS+3
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;eeprom.c: 98: Address.Val = 0x15;
  9094  001804  6B6D               	clrf	(LoadSettingsFromEeprom@Address+1)& (0+255),b
  9095  001806  0E15               	movlw	21
  9096  001808  6F6C               	movwf	LoadSettingsFromEeprom@Address& (0+255),b
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;eeprom.c: 99: Temp16.v[0] = ReadEeprom(Address);
  9100  00180A  D824               	call	PL8	;call to abstracted procedure
  9101  00180C  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9102  001810  0100               	movlb	0	; () banked
  9103  001812  6F6A               	movwf	LoadSettingsFromEeprom@Temp16& (0+255),b
  9104                           
  9105                           ; BSR set to: 0
  9106                           ;eeprom.c: 100: Address.Val++;
  9107  001814  4B6C               	infsnz	LoadSettingsFromEeprom@Address& (0+255),f,b
  9108  001816  2B6D               	incf	(LoadSettingsFromEeprom@Address+1)& (0+255),f,b
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;eeprom.c: 101: Temp16.v[1] = ReadEeprom(Address);
  9112  001818  D81D               	call	PL8	;call to abstracted procedure
  9113  00181A  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9114  00181E  0100               	movlb	0	; () banked
  9115  001820  6F6B               	movwf	(LoadSettingsFromEeprom@Temp16+1)& (0+255),b
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;eeprom.c: 102: GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME = Temp16.v[1]*60*60 + Temp16.v[0]*60;
  9119  001822  C06B  F060         	movff	LoadSettingsFromEeprom@Temp16+1,___wmul@multiplier
  9120  001826  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9121  001828  0E0E               	movlw	14
  9122  00182A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9123  00182C  0E10               	movlw	16
  9124  00182E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9125  001830  ECB8  F01A         	call	___wmul	;wreg free
  9126  001834  516A               	movf	LoadSettingsFromEeprom@Temp16& (0+255),w,b
  9127  001836  0D3C               	mullw	60
  9128  001838  5160               	movf	?___wmul& (0+255),w,b
  9129  00183A  26F3               	addwf	prodl,f,c
  9130  00183C  5161               	movf	(?___wmul+1)& (0+255),w,b
  9131  00183E  22F4               	addwfc	prodh,f,c
  9132  001840  CFF3 F0D0          	movff	prodl,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME
  9133  001844  CFF4 F0D1          	movff	prodh,_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1
  9134  001848  0E00               	movlw	0
  9135  00184A  BFD1               	btfsc	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+1)& (0+255),7,b
  9136  00184C  0EFF               	movlw	-1
  9137  00184E  6FD2               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+2)& (0+255),b
  9138  001850  6FD3               	movwf	(_GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME+3)& (0+255),b
  9139                           
  9140                           ; BSR set to: 0
  9141  001852  0012               	return		;funcret
  9142  001854                     __end_of_LoadSettingsFromEeprom:
  9143                           	opt stack 0
  9144  001854                     PL8:
  9145                           	opt stack 19
  9146  001854  C06C  F060         	movff	LoadSettingsFromEeprom@Address,ReadEeprom@Address
  9147  001858  C06D  F061         	movff	LoadSettingsFromEeprom@Address+1,ReadEeprom@Address+1
  9148  00185C  0012               	return	
  9149  00185E                     __end_ofPL8:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclath	equ	0xFFA
  9155                           tblptru	equ	0xFF8
  9156                           tblptrh	equ	0xFF7
  9157                           tblptrl	equ	0xFF6
  9158                           tablat	equ	0xFF5
  9159                           prodh	equ	0xFF4
  9160                           prodl	equ	0xFF3
  9161                           intcon	equ	0xFF2
  9162                           postinc0	equ	0xFEE
  9163                           plusw0	equ	0xFEB
  9164                           wreg	equ	0xFE8
  9165                           indf1	equ	0xFE7
  9166                           postinc1	equ	0xFE6
  9167                           postdec1	equ	0xFE5
  9168                           plusw1	equ	0xFE3
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           plusw2	equ	0xFDB
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _LoadEventsFromEeprom *****************
  9180 ;; Defined at:
  9181 ;;		line 105 in file "libs/eeprom.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;  i               2   20[BANK0 ] int 
  9186 ;;  Temp16          2   24[BANK0 ] struct _WORD_VAL
  9187 ;;  Address         2   22[BANK0 ] struct _WORD_VAL
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  1    wreg      void 
  9190 ;; Registers used:
  9191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 3F/0
  9194 ;;		On exit  : 3F/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9198 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9199 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9200 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9201 ;;Total ram usage:       14 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:   10
  9204 ;; This function calls:
  9205 ;;		_ReadEeprom
  9206 ;;		___lmul
  9207 ;;		___wmul
  9208 ;; This function is called by:
  9209 ;;		_LoadAllFromEeprom
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           	psect	text38
  9214  001BCE                     __ptext38:
  9215                           	opt stack 0
  9216  001BCE                     _LoadEventsFromEeprom:
  9217                           	opt stack 19
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;eeprom.c: 106: WORD_VAL Temp16, Address;
  9221                           ;eeprom.c: 107: Address.Val = 0x50;
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;incstack = 0
  9225  001BCE  6B77               	clrf	(LoadEventsFromEeprom@Address+1)& (0+255),b
  9226  001BD0  0E50               	movlw	80
  9227  001BD2  6F76               	movwf	LoadEventsFromEeprom@Address& (0+255),b
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;eeprom.c: 108: for (int i=0; i<24; i++) {
  9231  001BD4  6B74               	clrf	LoadEventsFromEeprom@i& (0+255),b
  9232  001BD6  6B75               	clrf	(LoadEventsFromEeprom@i+1)& (0+255),b
  9233  001BD8                     l4378:
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;eeprom.c: 109: Temp16.v[0] = ReadEeprom(Address);
  9237  001BD8  D8AD               	call	PL70	;call to abstracted procedure
  9238  001BDA  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9239  001BDE  0100               	movlb	0	; () banked
  9240  001BE0  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  9241                           
  9242                           ; BSR set to: 0
  9243                           ;eeprom.c: 110: Address.Val++;
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;eeprom.c: 111: Temp16.v[1] = ReadEeprom(Address);
  9247  001BE2  D896               	call	PL48	;call to abstracted procedure
  9248  001BE4  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9249                           
  9250                           ; BSR set to: 0
  9251                           ;eeprom.c: 112: EVENTS[i].START_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  9252                           ;eeprom.c: 113: + (INT32)((INT8)Temp16.v[0])*60;
  9253  001BE8  D88F               	call	PL34	;call to abstracted procedure
  9254  001BEA  D880               	call	PL32	;call to abstracted procedure
  9255  001BEC  EC0A  F019         	call	___lmul	;wreg free
  9256  001BF0  D84B               	call	PL20	;call to abstracted procedure
  9257  001BF2  EC0A  F019         	call	___lmul	;wreg free
  9258  001BF6  D85E               	call	PL24	;call to abstracted procedure
  9259  001BF8  ECB8  F01A         	call	___wmul	;wreg free
  9260  001BFC  EC77  F011         	call	PL78	;call to abstracted procedure
  9261  001C00  0E02               	movlw	high _EVENTS
  9262  001C02  D88D               	call	PL68	;call to abstracted procedure
  9263                           
  9264                           ; BSR set to: 0
  9265                           ;eeprom.c: 114: Address.Val++;
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;eeprom.c: 115: Temp16.v[0] = ReadEeprom(Address);
  9269  001C04  D885               	call	PL48	;call to abstracted procedure
  9270  001C06  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9271  001C0A  0100               	movlb	0	; () banked
  9272  001C0C  6F78               	movwf	LoadEventsFromEeprom@Temp16& (0+255),b
  9273                           
  9274                           ; BSR set to: 0
  9275                           ;eeprom.c: 116: Address.Val++;
  9276                           
  9277                           ; BSR set to: 0
  9278                           ;eeprom.c: 117: Temp16.v[1] = ReadEeprom(Address);
  9279  001C0E  D880               	call	PL48	;call to abstracted procedure
  9280  001C10  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;eeprom.c: 118: EVENTS[i].END_TIME = (INT32)((INT8)Temp16.v[1])*60*60
  9284                           ;eeprom.c: 119: + (INT32)((INT8)Temp16.v[0])*60;
  9285  001C14  D879               	call	PL34	;call to abstracted procedure
  9286  001C16  D86A               	call	PL32	;call to abstracted procedure
  9287  001C18  EC0A  F019         	call	___lmul	;wreg free
  9288  001C1C  D835               	call	PL20	;call to abstracted procedure
  9289  001C1E  EC0A  F019         	call	___lmul	;wreg free
  9290  001C22  D848               	call	PL24	;call to abstracted procedure
  9291  001C24  ECB8  F01A         	call	___wmul	;wreg free
  9292  001C28  EC7B  F011         	call	PL82	;call to abstracted procedure
  9293  001C2C  D878               	call	PL68	;call to abstracted procedure
  9294                           
  9295                           ;eeprom.c: 120: Address.Val++;
  9296  001C2E  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9297  001C30  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9298                           
  9299                           ; BSR set to: 0
  9300                           ;eeprom.c: 121: EVENTS[i].CYCLE = ReadEeprom(Address);
  9301  001C32  D854               	call	PL30	;call to abstracted procedure
  9302  001C34  ECB8  F01A         	call	___wmul	;wreg free
  9303  001C38  0E08               	movlw	low (_EVENTS+8)
  9304  001C3A  2560               	addwf	?___wmul& (0+255),w,b
  9305  001C3C  6ED9               	movwf	fsr2l,c
  9306  001C3E  0E02               	movlw	high (_EVENTS+8)
  9307  001C40  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9308  001C42  6EDA               	movwf	fsr2h,c
  9309  001C44  D877               	call	PL70	;call to abstracted procedure
  9310  001C46  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9311  001C4A  6EDF               	movwf	indf2,c
  9312                           
  9313                           ;eeprom.c: 122: Address.Val++;
  9314  001C4C  0100               	movlb	0	; () banked
  9315                           
  9316                           ;eeprom.c: 123: EVENTS[i].SELECTED_WEEKS.Val = ReadEeprom(Address);
  9317  001C4E  D860               	call	PL48	;call to abstracted procedure
  9318  001C50  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9319  001C54  0100               	movlb	0	; () banked
  9320  001C56  6F6C               	movwf	??_LoadEventsFromEeprom& (0+255),b
  9321  001C58  D841               	call	PL30	;call to abstracted procedure
  9322  001C5A  ECB8  F01A         	call	___wmul	;wreg free
  9323  001C5E  EC80  F011         	call	PL120	;call to abstracted procedure
  9324  001C62  476C               	rlncf	??_LoadEventsFromEeprom& (0+255),f,b
  9325  001C64  50DF               	movf	223,w,c
  9326  001C66  0100               	movlb	0	; () banked
  9327  001C68  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  9328  001C6A  0B01               	andlw	-255
  9329  001C6C  196C               	xorwf	??_LoadEventsFromEeprom& (0+255),w,b
  9330  001C6E  6EDF               	movwf	223,c
  9331                           
  9332                           ; BSR set to: 2
  9333                           ;eeprom.c: 124: Address.Val++;
  9334  001C70  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9335  001C72  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9336                           
  9337                           ; BSR set to: 0
  9338  001C74  4B74               	infsnz	LoadEventsFromEeprom@i& (0+255),f,b
  9339  001C76  2B75               	incf	(LoadEventsFromEeprom@i+1)& (0+255),f,b
  9340                           
  9341                           ; BSR set to: 0
  9342  001C78  BF75               	btfsc	(LoadEventsFromEeprom@i+1)& (0+255),7,b
  9343  001C7A  D7AE               	goto	l4378
  9344  001C7C  5175               	movf	(LoadEventsFromEeprom@i+1)& (0+255),w,b
  9345  001C7E  E103               	bnz	u4310
  9346  001C80  0E18               	movlw	24
  9347  001C82  5D74               	subwf	LoadEventsFromEeprom@i& (0+255),w,b
  9348  001C84  E3A9               	bnc	l4378
  9349  001C86                     u4310:
  9350                           
  9351                           ; BSR set to: 0
  9352  001C86  0012               	return		;funcret
  9353  001C88                     __end_of_LoadEventsFromEeprom:
  9354                           	opt stack 0
  9355  001C88                     PL20:
  9356                           	opt stack 19
  9357  001C88  C060  F06C         	movff	?___lmul,??_LoadEventsFromEeprom
  9358  001C8C  C061  F06D         	movff	?___lmul+1,??_LoadEventsFromEeprom+1
  9359  001C90  C062  F06E         	movff	?___lmul+2,??_LoadEventsFromEeprom+2
  9360  001C94  C063  F06F         	movff	?___lmul+3,??_LoadEventsFromEeprom+3
  9361  001C98  5178               	movf	LoadEventsFromEeprom@Temp16& (0+255),w,b
  9362  001C9A  6F60               	movwf	___lmul@multiplier& (0+255),b
  9363  001C9C  0E00               	movlw	0
  9364  001C9E  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  9365  001CA0  0EFF               	movlw	-1
  9366  001CA2  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  9367  001CA4  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  9368  001CA6  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  9369  001CA8  0E3C               	movlw	60
  9370  001CAA  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9371  001CAC  6B65               	clrf	(___lmul@multiplicand+1)& (0+255),b
  9372  001CAE  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  9373  001CB0  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  9374  001CB2  0C3C               	retlw	60
  9375  001CB4                     __end_ofPL20:
  9376                           	opt stack 0
  9377  001CB4                     PL24:
  9378                           	opt stack 19
  9379  001CB4  5160               	movf	?___lmul& (0+255),w,b
  9380  001CB6  256C               	addwf	??_LoadEventsFromEeprom& (0+255),w,b
  9381  001CB8  6F70               	movwf	(??_LoadEventsFromEeprom+4)& (0+255),b
  9382  001CBA  5161               	movf	(?___lmul+1)& (0+255),w,b
  9383  001CBC  216D               	addwfc	(??_LoadEventsFromEeprom+1)& (0+255),w,b
  9384  001CBE  6F71               	movwf	(??_LoadEventsFromEeprom+5)& (0+255),b
  9385  001CC0  5162               	movf	(?___lmul+2)& (0+255),w,b
  9386  001CC2  216E               	addwfc	(??_LoadEventsFromEeprom+2)& (0+255),w,b
  9387  001CC4  6F72               	movwf	(??_LoadEventsFromEeprom+6)& (0+255),b
  9388  001CC6  5163               	movf	(?___lmul+3)& (0+255),w,b
  9389  001CC8  216F               	addwfc	(??_LoadEventsFromEeprom+3)& (0+255),w,b
  9390  001CCA  6F73               	movwf	(??_LoadEventsFromEeprom+7)& (0+255),b
  9391  001CCC  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  9392  001CD0  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  9393  001CD4  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9394  001CD6  0E0A               	movlw	10
  9395  001CD8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9396  001CDA  0C0A               	retlw	10
  9397  001CDC                     __end_ofPL24:
  9398                           	opt stack 0
  9399  001CDC                     PL30:
  9400                           	opt stack 19
  9401  001CDC  C074  F060         	movff	LoadEventsFromEeprom@i,___wmul@multiplier
  9402  001CE0  C075  F061         	movff	LoadEventsFromEeprom@i+1,___wmul@multiplier+1
  9403  001CE4  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9404  001CE6  0E0A               	movlw	10
  9405  001CE8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9406  001CEA  0C0A               	retlw	10
  9407  001CEC                     __end_ofPL30:
  9408                           	opt stack 0
  9409  001CEC                     PL32:
  9410                           	opt stack 19
  9411  001CEC  6F60               	movwf	___lmul@multiplier& (0+255),b
  9412  001CEE  0E00               	movlw	0
  9413  001CF0  BF60               	btfsc	___lmul@multiplier& (0+255),7,b
  9414  001CF2  0EFF               	movlw	-1
  9415  001CF4  6F61               	movwf	(___lmul@multiplier+1)& (0+255),b
  9416  001CF6  6F62               	movwf	(___lmul@multiplier+2)& (0+255),b
  9417  001CF8  6F63               	movwf	(___lmul@multiplier+3)& (0+255),b
  9418  001CFA  0E10               	movlw	16
  9419  001CFC  6F64               	movwf	___lmul@multiplicand& (0+255),b
  9420  001CFE  0E0E               	movlw	14
  9421  001D00  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
  9422  001D02  6B66               	clrf	(___lmul@multiplicand+2)& (0+255),b
  9423  001D04  6B67               	clrf	(___lmul@multiplicand+3)& (0+255),b
  9424  001D06  0C0E               	retlw	14
  9425  001D08                     __end_ofPL32:
  9426                           	opt stack 0
  9427  001D08                     PL34:
  9428                           	opt stack 19
  9429  001D08  0100               	movlb	0	; () banked
  9430  001D0A  6F79               	movwf	(LoadEventsFromEeprom@Temp16+1)& (0+255),b
  9431  001D0C  5179               	movf	(LoadEventsFromEeprom@Temp16+1)& (0+255),w,b
  9432  001D0E  0012               	return	
  9433  001D10                     __end_ofPL34:
  9434                           	opt stack 0
  9435  001D10                     PL48:
  9436                           	opt stack 19
  9437  001D10  4B76               	infsnz	LoadEventsFromEeprom@Address& (0+255),f,b
  9438  001D12  2B77               	incf	(LoadEventsFromEeprom@Address+1)& (0+255),f,b
  9439  001D14  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  9440  001D18  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  9441  001D1C  0012               	return	
  9442  001D1E                     __end_ofPL48:
  9443                           	opt stack 0
  9444  001D1E                     PL68:
  9445                           	opt stack 19
  9446  001D1E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9447  001D20  6EDA               	movwf	fsr2h,c
  9448  001D22  C070  FFDE         	movff	??_LoadEventsFromEeprom+4,postinc2
  9449  001D26  C071  FFDE         	movff	??_LoadEventsFromEeprom+5,postinc2
  9450  001D2A  C072  FFDE         	movff	??_LoadEventsFromEeprom+6,postinc2
  9451  001D2E  C073  FFDE         	movff	??_LoadEventsFromEeprom+7,postinc2
  9452  001D32  0012               	return	
  9453  001D34                     __end_ofPL68:
  9454                           	opt stack 0
  9455  001D34                     PL70:
  9456                           	opt stack 19
  9457  001D34  C076  F060         	movff	LoadEventsFromEeprom@Address,ReadEeprom@Address
  9458  001D38  C077  F061         	movff	LoadEventsFromEeprom@Address+1,ReadEeprom@Address+1
  9459  001D3C  0012               	return	
  9460  001D3E                     __end_ofPL70:
  9461                           	opt stack 0
  9462                           tosu	equ	0xFFF
  9463                           tosh	equ	0xFFE
  9464                           tosl	equ	0xFFD
  9465                           pclath	equ	0xFFA
  9466                           tblptru	equ	0xFF8
  9467                           tblptrh	equ	0xFF7
  9468                           tblptrl	equ	0xFF6
  9469                           tablat	equ	0xFF5
  9470                           prodh	equ	0xFF4
  9471                           prodl	equ	0xFF3
  9472                           intcon	equ	0xFF2
  9473                           postinc0	equ	0xFEE
  9474                           plusw0	equ	0xFEB
  9475                           wreg	equ	0xFE8
  9476                           indf1	equ	0xFE7
  9477                           postinc1	equ	0xFE6
  9478                           postdec1	equ	0xFE5
  9479                           plusw1	equ	0xFE3
  9480                           fsr1h	equ	0xFE2
  9481                           fsr1l	equ	0xFE1
  9482                           indf2	equ	0xFDF
  9483                           postinc2	equ	0xFDE
  9484                           postdec2	equ	0xFDD
  9485                           plusw2	equ	0xFDB
  9486                           fsr2h	equ	0xFDA
  9487                           fsr2l	equ	0xFD9
  9488                           status	equ	0xFD8
  9489                           
  9490 ;; *************** function ___lmul *****************
  9491 ;; Defined at:
  9492 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  multiplier      4    0[BANK0 ] unsigned long 
  9495 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  product         4    8[BANK0 ] unsigned long 
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  4    0[BANK0 ] unsigned long 
  9500 ;; Registers used:
  9501 ;;		wreg, status,2, status,0
  9502 ;; Tracked objects:
  9503 ;;		On entry : 3F/0
  9504 ;;		On exit  : 3F/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9507 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9508 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9510 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9511 ;;Total ram usage:       12 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    9
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_WriteLongInt
  9518 ;;		_LoadEventsFromEeprom
  9519 ;;		_TimeTextToSecond
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text39
  9524  003214                     __ptext39:
  9525                           	opt stack 0
  9526  003214                     ___lmul:
  9527                           	opt stack 20
  9528                           
  9529                           ; BSR set to: 0
  9530                           
  9531                           ; BSR set to: 0
  9532                           ;incstack = 0
  9533  003214  6B68               	clrf	___lmul@product& (0+255),b
  9534  003216  6B69               	clrf	(___lmul@product+1)& (0+255),b
  9535  003218  6B6A               	clrf	(___lmul@product+2)& (0+255),b
  9536  00321A  6B6B               	clrf	(___lmul@product+3)& (0+255),b
  9537  00321C                     l1190:
  9538                           
  9539                           ; BSR set to: 0
  9540  00321C  A160               	btfss	___lmul@multiplier& (0+255),0,b
  9541  00321E  D008               	goto	l3640
  9542                           
  9543                           ; BSR set to: 0
  9544  003220  5164               	movf	___lmul@multiplicand& (0+255),w,b
  9545  003222  2768               	addwf	___lmul@product& (0+255),f,b
  9546  003224  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  9547  003226  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
  9548  003228  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  9549  00322A  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
  9550  00322C  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  9551  00322E  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
  9552  003230                     l3640:
  9553                           
  9554                           ; BSR set to: 0
  9555  003230  90D8               	bcf	status,0,c
  9556  003232  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
  9557  003234  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  9558  003236  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  9559  003238  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  9560                           
  9561                           ; BSR set to: 0
  9562  00323A  90D8               	bcf	status,0,c
  9563  00323C  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  9564  00323E  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  9565  003240  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  9566  003242  3360               	rrcf	___lmul@multiplier& (0+255),f,b
  9567  003244  5160               	movf	___lmul@multiplier& (0+255),w,b
  9568  003246  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  9569  003248  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  9570  00324A  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  9571  00324C  E1E7               	bnz	l1190
  9572                           
  9573                           ; BSR set to: 0
  9574  00324E  C068  F060         	movff	___lmul@product,?___lmul
  9575  003252  C069  F061         	movff	___lmul@product+1,?___lmul+1
  9576  003256  C06A  F062         	movff	___lmul@product+2,?___lmul+2
  9577  00325A  C06B  F063         	movff	___lmul@product+3,?___lmul+3
  9578                           
  9579                           ; BSR set to: 0
  9580  00325E  0012               	return		;funcret
  9581  003260                     __end_of___lmul:
  9582                           	opt stack 0
  9583                           tosu	equ	0xFFF
  9584                           tosh	equ	0xFFE
  9585                           tosl	equ	0xFFD
  9586                           pclath	equ	0xFFA
  9587                           tblptru	equ	0xFF8
  9588                           tblptrh	equ	0xFF7
  9589                           tblptrl	equ	0xFF6
  9590                           tablat	equ	0xFF5
  9591                           prodh	equ	0xFF4
  9592                           prodl	equ	0xFF3
  9593                           intcon	equ	0xFF2
  9594                           postinc0	equ	0xFEE
  9595                           plusw0	equ	0xFEB
  9596                           wreg	equ	0xFE8
  9597                           indf1	equ	0xFE7
  9598                           postinc1	equ	0xFE6
  9599                           postdec1	equ	0xFE5
  9600                           plusw1	equ	0xFE3
  9601                           fsr1h	equ	0xFE2
  9602                           fsr1l	equ	0xFE1
  9603                           indf2	equ	0xFDF
  9604                           postinc2	equ	0xFDE
  9605                           postdec2	equ	0xFDD
  9606                           plusw2	equ	0xFDB
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function _LoadCyclesFromEeprom *****************
  9612 ;; Defined at:
  9613 ;;		line 157 in file "libs/eeprom.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;		None
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;  j               2   15[BANK0 ] int 
  9618 ;;  i               2   19[BANK0 ] int 
  9619 ;;  i               2   17[BANK0 ] int 
  9620 ;;  Address         2   13[BANK0 ] struct _WORD_VAL
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 3F/0
  9627 ;;		On exit  : 3F/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9631 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9632 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9633 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9634 ;;Total ram usage:       15 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:   10
  9637 ;; This function calls:
  9638 ;;		_ReadEeprom
  9639 ;;		___wmul
  9640 ;; This function is called by:
  9641 ;;		_LoadAllFromEeprom
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text40
  9646  001E90                     __ptext40:
  9647                           	opt stack 0
  9648  001E90                     _LoadCyclesFromEeprom:
  9649                           	opt stack 19
  9650                           
  9651                           ; BSR set to: 0
  9652                           ;eeprom.c: 158: WORD_VAL Address;
  9653                           ;eeprom.c: 159: Address.Val = 0x3F;
  9654                           
  9655                           ; BSR set to: 0
  9656                           ;incstack = 0
  9657  001E90  6B6E               	clrf	(LoadCyclesFromEeprom@Address+1)& (0+255),b
  9658  001E92  0E3F               	movlw	63
  9659  001E94  6F6D               	movwf	LoadCyclesFromEeprom@Address& (0+255),b
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;eeprom.c: 161: for (int i=0; i<17; i++) {
  9663  001E96  6B71               	clrf	LoadCyclesFromEeprom@i& (0+255),b
  9664  001E98  6B72               	clrf	(LoadCyclesFromEeprom@i+1)& (0+255),b
  9665  001E9A                     l4470:
  9666                           
  9667                           ; BSR set to: 0
  9668                           ;eeprom.c: 162: CYCLES[i].END_STATE = ReadEeprom(Address);
  9669  001E9A  D898               	call	PL6	;call to abstracted procedure
  9670  001E9C  0E03               	movlw	3
  9671  001E9E  D892               	call	PL4	;call to abstracted procedure
  9672  001EA0  90D8               	bcf	status,0,c
  9673  001EA2  3571               	rlcf	LoadCyclesFromEeprom@i& (0+255),w,b
  9674  001EA4  6ED9               	movwf	fsr2l,c
  9675  001EA6  3572               	rlcf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  9676  001EA8  6EDA               	movwf	fsr2h,c
  9677  001EAA  90D8               	bcf	status,0,c
  9678  001EAC  36D9               	rlcf	fsr2l,f,c
  9679  001EAE  36DA               	rlcf	fsr2h,f,c
  9680  001EB0  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  9681  001EB2  26D9               	addwf	fsr2l,f,c
  9682  001EB4  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  9683  001EB6  22DA               	addwfc	fsr2h,f,c
  9684  001EB8  C06D  F060         	movff	LoadCyclesFromEeprom@Address,ReadEeprom@Address
  9685  001EBC  C06E  F061         	movff	LoadCyclesFromEeprom@Address+1,ReadEeprom@Address+1
  9686  001EC0  EC0A  F01B         	call	_ReadEeprom	;wreg free
  9687  001EC4  6EDF               	movwf	indf2,c
  9688                           
  9689                           ;eeprom.c: 163: Address.Val++;
  9690  001EC6  0100               	movlb	0	; () banked
  9691  001EC8  4B6D               	infsnz	LoadCyclesFromEeprom@Address& (0+255),f,b
  9692  001ECA  2B6E               	incf	(LoadCyclesFromEeprom@Address+1)& (0+255),f,b
  9693                           
  9694                           ; BSR set to: 0
  9695  001ECC  4B71               	infsnz	LoadCyclesFromEeprom@i& (0+255),f,b
  9696  001ECE  2B72               	incf	(LoadCyclesFromEeprom@i+1)& (0+255),f,b
  9697                           
  9698                           ; BSR set to: 0
  9699  001ED0  BF72               	btfsc	(LoadCyclesFromEeprom@i+1)& (0+255),7,b
  9700  001ED2  D7E3               	goto	l4470
  9701  001ED4  5172               	movf	(LoadCyclesFromEeprom@i+1)& (0+255),w,b
  9702  001ED6  E103               	bnz	u4390
  9703  001ED8  0E11               	movlw	17
  9704  001EDA  5D71               	subwf	LoadCyclesFromEeprom@i& (0+255),w,b
  9705  001EDC  E3DE               	bnc	l4470
  9706  001EDE                     u4390:
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;eeprom.c: 164: }
  9710                           ;eeprom.c: 166: for (int i=0; i<17; i++) {
  9711  001EDE  6B73               	clrf	LoadCyclesFromEeprom@i_1467& (0+255),b
  9712  001EE0  6B74               	clrf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),b
  9713  001EE2                     l4482:
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;eeprom.c: 167: if (i==0)
  9717  001EE2  5173               	movf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9718  001EE4  1174               	iorwf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9719  001EE6  E106               	bnz	l4486
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;eeprom.c: 168: CYCLES[i].START_STATE = 0;
  9723  001EE8  D871               	call	PL6	;call to abstracted procedure
  9724  001EEA  0E02               	movlw	2
  9725  001EEC  D86B               	call	PL4	;call to abstracted procedure
  9726  001EEE  D85D               	call	PL2	;call to abstracted procedure
  9727  001EF0  6ADF               	clrf	indf2,c
  9728  001EF2  D01E               	goto	l4488
  9729  001EF4                     l4486:
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;eeprom.c: 169: else
  9733                           ;eeprom.c: 172: CYCLES[i].START_STATE = CYCLES[i-1].END_STATE+1;
  9734  001EF4  D86B               	call	PL6	;call to abstracted procedure
  9735  001EF6  0E02               	movlw	2
  9736  001EF8  D865               	call	PL4	;call to abstracted procedure
  9737  001EFA  D857               	call	PL2	;call to abstracted procedure
  9738  001EFC  6968               	setf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  9739  001EFE  6969               	setf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  9740  001F00  0E00               	movlw	low _CYCLES
  9741  001F02  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  9742  001F04  0E01               	movlw	high _CYCLES
  9743  001F06  6F6B               	movwf	(??_LoadCyclesFromEeprom+5)& (0+255),b
  9744  001F08  5168               	movf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  9745  001F0A  276A               	addwf	(??_LoadCyclesFromEeprom+4)& (0+255),f,b
  9746  001F0C  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  9747  001F0E  236B               	addwfc	(??_LoadCyclesFromEeprom+5)& (0+255),f,b
  9748  001F10  90D8               	bcf	status,0,c
  9749  001F12  3573               	rlcf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9750  001F14  6EE1               	movwf	fsr1l,c
  9751  001F16  3574               	rlcf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9752  001F18  6EE2               	movwf	fsr1h,c
  9753  001F1A  90D8               	bcf	status,0,c
  9754  001F1C  36E1               	rlcf	fsr1l,f,c
  9755  001F1E  36E2               	rlcf	fsr1h,f,c
  9756  001F20  516A               	movf	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  9757  001F22  26E1               	addwf	fsr1l,f,c
  9758  001F24  516B               	movf	(??_LoadCyclesFromEeprom+5)& (0+255),w,b
  9759  001F26  22E2               	addwfc	fsr1h,f,c
  9760  001F28  50E7               	movf	indf1,w,c
  9761  001F2A  6F6C               	movwf	(??_LoadCyclesFromEeprom+6)& (0+255),b
  9762  001F2C  296C               	incf	(??_LoadCyclesFromEeprom+6)& (0+255),w,b
  9763  001F2E  6EDF               	movwf	indf2,c
  9764  001F30                     l4488:
  9765                           
  9766                           ; BSR set to: 0
  9767                           ;eeprom.c: 173: CYCLES[i].PERIOD = 0;
  9768  001F30  D84D               	call	PL6	;call to abstracted procedure
  9769  001F32  D83B               	call	PL2	;call to abstracted procedure
  9770  001F34  6ADE               	clrf	postinc2,c
  9771  001F36  6ADD               	clrf	postdec2,c
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;eeprom.c: 174: for (int j=CYCLES[i].START_STATE; j<=CYCLES[i].END_STATE; j++ )
  9775  001F38  D849               	call	PL6	;call to abstracted procedure
  9776  001F3A  0E02               	movlw	2
  9777  001F3C  D843               	call	PL4	;call to abstracted procedure
  9778  001F3E  D835               	call	PL2	;call to abstracted procedure
  9779  001F40  50DF               	movf	indf2,w,c
  9780  001F42  6F6F               	movwf	LoadCyclesFromEeprom@j& (0+255),b
  9781  001F44  6B70               	clrf	(LoadCyclesFromEeprom@j+1)& (0+255),b
  9782  001F46  D017               	goto	l4496
  9783  001F48                     l4492:
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;eeprom.c: 175: CYCLES[i].PERIOD += STATES[j].PERIOD;
  9787  001F48  D841               	call	PL6	;call to abstracted procedure
  9788  001F4A  D82F               	call	PL2	;call to abstracted procedure
  9789  001F4C  C06F  F060         	movff	LoadCyclesFromEeprom@j,___wmul@multiplier
  9790  001F50  C070  F061         	movff	LoadCyclesFromEeprom@j+1,___wmul@multiplier+1
  9791  001F54  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
  9792  001F56  0E06               	movlw	6
  9793  001F58  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9794  001F5A  ECB8  F01A         	call	___wmul	;wreg free
  9795  001F5E  0EF0               	movlw	low _STATES
  9796  001F60  2560               	addwf	?___wmul& (0+255),w,b
  9797  001F62  6EE1               	movwf	fsr1l,c
  9798  001F64  0E06               	movlw	high _STATES
  9799  001F66  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9800  001F68  6EE2               	movwf	fsr1h,c
  9801  001F6A  50E7               	movf	indf1,w,c
  9802  001F6C  26DE               	addwf	postinc2,f,c
  9803  001F6E  0E00               	movlw	0
  9804  001F70  22DD               	addwfc	postdec2,f,c
  9805                           
  9806                           ; BSR set to: 0
  9807  001F72  4B6F               	infsnz	LoadCyclesFromEeprom@j& (0+255),f,b
  9808  001F74  2B70               	incf	(LoadCyclesFromEeprom@j+1)& (0+255),f,b
  9809  001F76                     l4496:
  9810                           
  9811                           ; BSR set to: 0
  9812  001F76  D82A               	call	PL6	;call to abstracted procedure
  9813  001F78  0E03               	movlw	3
  9814  001F7A  D824               	call	PL4	;call to abstracted procedure
  9815  001F7C  D816               	call	PL2	;call to abstracted procedure
  9816  001F7E  50DF               	movf	indf2,w,c
  9817  001F80  6F68               	movwf	(??_LoadCyclesFromEeprom+2)& (0+255),b
  9818  001F82  6B69               	clrf	(??_LoadCyclesFromEeprom+3)& (0+255),b
  9819  001F84  516F               	movf	LoadCyclesFromEeprom@j& (0+255),w,b
  9820  001F86  5D68               	subwf	(??_LoadCyclesFromEeprom+2)& (0+255),w,b
  9821  001F88  5169               	movf	(??_LoadCyclesFromEeprom+3)& (0+255),w,b
  9822  001F8A  0A80               	xorlw	128
  9823  001F8C  6F6A               	movwf	(??_LoadCyclesFromEeprom+4)& (0+255),b
  9824  001F8E  5170               	movf	(LoadCyclesFromEeprom@j+1)& (0+255),w,b
  9825  001F90  0A80               	xorlw	128
  9826  001F92  596A               	subwfb	(??_LoadCyclesFromEeprom+4)& (0+255),w,b
  9827  001F94  E2D9               	bc	l4492
  9828                           
  9829                           ; BSR set to: 0
  9830  001F96  4B73               	infsnz	LoadCyclesFromEeprom@i_1467& (0+255),f,b
  9831  001F98  2B74               	incf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),f,b
  9832                           
  9833                           ; BSR set to: 0
  9834  001F9A  BF74               	btfsc	(LoadCyclesFromEeprom@i_1467+1)& (0+255),7,b
  9835  001F9C  D7A2               	goto	l4482
  9836  001F9E  5174               	movf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9837  001FA0  E103               	bnz	u4420
  9838  001FA2  0E11               	movlw	17
  9839  001FA4  5D73               	subwf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9840  001FA6  E39D               	bnc	l4482
  9841  001FA8                     u4420:
  9842                           
  9843                           ; BSR set to: 0
  9844  001FA8  0012               	return		;funcret
  9845  001FAA                     __end_of_LoadCyclesFromEeprom:
  9846                           	opt stack 0
  9847  001FAA                     PL2:
  9848                           	opt stack 19
  9849  001FAA  90D8               	bcf	status,0,c
  9850  001FAC  3573               	rlcf	LoadCyclesFromEeprom@i_1467& (0+255),w,b
  9851  001FAE  6ED9               	movwf	fsr2l,c
  9852  001FB0  3574               	rlcf	(LoadCyclesFromEeprom@i_1467+1)& (0+255),w,b
  9853  001FB2  6EDA               	movwf	fsr2h,c
  9854  001FB4  90D8               	bcf	status,0,c
  9855  001FB6  36D9               	rlcf	fsr2l,f,c
  9856  001FB8  36DA               	rlcf	fsr2h,f,c
  9857  001FBA  5166               	movf	??_LoadCyclesFromEeprom& (0+255),w,b
  9858  001FBC  26D9               	addwf	fsr2l,f,c
  9859  001FBE  5167               	movf	(??_LoadCyclesFromEeprom+1)& (0+255),w,b
  9860  001FC0  22DA               	addwfc	fsr2h,f,c
  9861  001FC2  0012               	return	
  9862  001FC4                     __end_ofPL2:
  9863                           	opt stack 0
  9864  001FC4                     PL4:
  9865                           	opt stack 19
  9866  001FC4  2766               	addwf	??_LoadCyclesFromEeprom& (0+255),f,b
  9867  001FC6  0E00               	movlw	0
  9868  001FC8  2367               	addwfc	(??_LoadCyclesFromEeprom+1)& (0+255),f,b
  9869  001FCA  0C00               	retlw	0
  9870  001FCC                     __end_ofPL4:
  9871                           	opt stack 0
  9872  001FCC                     PL6:
  9873                           	opt stack 19
  9874  001FCC  0E00               	movlw	low _CYCLES
  9875  001FCE  6F66               	movwf	??_LoadCyclesFromEeprom& (0+255),b
  9876  001FD0  0E01               	movlw	high _CYCLES
  9877  001FD2  6F67               	movwf	(??_LoadCyclesFromEeprom+1)& (0+255),b
  9878  001FD4  0012               	return	
  9879  001FD6                     __end_ofPL6:
  9880                           	opt stack 0
  9881                           tosu	equ	0xFFF
  9882                           tosh	equ	0xFFE
  9883                           tosl	equ	0xFFD
  9884                           pclath	equ	0xFFA
  9885                           tblptru	equ	0xFF8
  9886                           tblptrh	equ	0xFF7
  9887                           tblptrl	equ	0xFF6
  9888                           tablat	equ	0xFF5
  9889                           prodh	equ	0xFF4
  9890                           prodl	equ	0xFF3
  9891                           intcon	equ	0xFF2
  9892                           postinc0	equ	0xFEE
  9893                           plusw0	equ	0xFEB
  9894                           wreg	equ	0xFE8
  9895                           indf1	equ	0xFE7
  9896                           postinc1	equ	0xFE6
  9897                           postdec1	equ	0xFE5
  9898                           plusw1	equ	0xFE3
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           plusw2	equ	0xFDB
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _ReadEeprom *****************
  9910 ;; Defined at:
  9911 ;;		line 3 in file "libs/eeprom.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  Address         2    0[BANK0 ] struct _WORD_VAL
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      unsigned char 
  9918 ;; Registers used:
  9919 ;;		wreg, status,2
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9929 ;;Total ram usage:        2 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    9
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_LoadSettingsFromEeprom
  9936 ;;		_LoadEventsFromEeprom
  9937 ;;		_LoadStatesFromEeprom
  9938 ;;		_LoadCyclesFromEeprom
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           	psect	text41
  9943  003614                     __ptext41:
  9944                           	opt stack 0
  9945  003614                     _ReadEeprom:
  9946                           	opt stack 19
  9947                           
  9948                           ;eeprom.c: 6: NVMCON1bits.NVMREG = 00;
  9949                           
  9950                           ; BSR set to: 0
  9951                           ;incstack = 0
  9952  003614  0E3F               	movlw	-193
  9953  003616  1681               	andwf	3969,f,c	;volatile
  9954                           
  9955                           ;eeprom.c: 7: NVMADRL = Address.v[0];
  9956  003618  C060  FF7E         	movff	ReadEeprom@Address,3966	;volatile
  9957                           
  9958                           ;eeprom.c: 8: NVMADRH = Address.v[1];
  9959  00361C  C061  FF7F         	movff	ReadEeprom@Address+1,3967	;volatile
  9960                           
  9961                           ;eeprom.c: 9: NVMCON1bits.RD = 1;
  9962  003620  8081               	bsf	3969,0,c	;volatile
  9963                           
  9964                           ;eeprom.c: 11: NVMCON1bits.NVMREG1 = 1;
  9965  003622  8E81               	bsf	3969,7,c	;volatile
  9966                           
  9967                           ;eeprom.c: 12: return NVMDAT;
  9968  003624  5080               	movf	3968,w,c	;volatile
  9969  003626  0012               	return		;funcret
  9970  003628                     __end_of_ReadEeprom:
  9971                           	opt stack 0
  9972                           tosu	equ	0xFFF
  9973                           tosh	equ	0xFFE
  9974                           tosl	equ	0xFFD
  9975                           pclath	equ	0xFFA
  9976                           tblptru	equ	0xFF8
  9977                           tblptrh	equ	0xFF7
  9978                           tblptrl	equ	0xFF6
  9979                           tablat	equ	0xFF5
  9980                           prodh	equ	0xFF4
  9981                           prodl	equ	0xFF3
  9982                           intcon	equ	0xFF2
  9983                           postinc0	equ	0xFEE
  9984                           plusw0	equ	0xFEB
  9985                           wreg	equ	0xFE8
  9986                           indf1	equ	0xFE7
  9987                           postinc1	equ	0xFE6
  9988                           postdec1	equ	0xFE5
  9989                           plusw1	equ	0xFE3
  9990                           fsr1h	equ	0xFE2
  9991                           fsr1l	equ	0xFE1
  9992                           indf2	equ	0xFDF
  9993                           postinc2	equ	0xFDE
  9994                           postdec2	equ	0xFDD
  9995                           plusw2	equ	0xFDB
  9996                           fsr2h	equ	0xFDA
  9997                           fsr2l	equ	0xFD9
  9998                           status	equ	0xFD8
  9999                           
 10000 ;; *************** function _Lcd_Init *****************
 10001 ;; Defined at:
 10002 ;;		line 17 in file "libs/HD44780.c"
 10003 ;; Parameters:    Size  Location     Type
 10004 ;;		None
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  data            1    3[BANK0 ] unsigned char 
 10007 ;; Return value:  Size  Location     Type
 10008 ;;                  1    wreg      void 
 10009 ;; Registers used:
 10010 ;;		wreg, status,2, status,0, cstack
 10011 ;; Tracked objects:
 10012 ;;		On entry : 3F/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10019 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10020 ;;Total ram usage:        1 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:   11
 10023 ;; This function calls:
 10024 ;;		_Lcd_Command
 10025 ;;		_Lcd_Delay5500us
 10026 ;;		_Lcd_Delay5us
 10027 ;; This function is called by:
 10028 ;;		_main
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           	psect	text42
 10033  002E00                     __ptext42:
 10034                           	opt stack 0
 10035  002E00                     _Lcd_Init:
 10036                           	opt stack 19
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;HD44780.c: 23: unsigned char data;
 10040                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
 10041                           
 10042                           ;incstack = 0
 10043  002E00  9A88               	bcf	3976,5,c	;volatile
 10044  002E02  9888               	bcf	3976,4,c	;volatile
 10045  002E04  9688               	bcf	3976,3,c	;volatile
 10046  002E06  9488               	bcf	3976,2,c	;volatile
 10047  002E08  9288               	bcf	3976,1,c	;volatile
 10048  002E0A  9088               	bcf	3976,0,c	;volatile
 10049                           
 10050                           ;HD44780.c: 25: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 0; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10051  002E0C  9A83               	bcf	3971,5,c	;volatile
 10052  002E0E  9883               	bcf	3971,4,c	;volatile
 10053  002E10  9683               	bcf	3971,3,c	;volatile
 10054  002E12  9483               	bcf	3971,2,c	;volatile
 10055  002E14  9283               	bcf	3971,1,c	;volatile
 10056  002E16  9083               	bcf	3971,0,c	;volatile
 10057                           
 10058                           ; BSR set to: 0
 10059                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
 10060  002E18  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10061  002E1C  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10062  002E20  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10063                           
 10064                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
 10065  002E24  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10066  002E28  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10067  002E2C  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10068                           
 10069                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
 10070  002E30  0E01               	movlw	1
 10071  002E32  0100               	movlb	0	; () banked
 10072  002E34  6F63               	movwf	Lcd_Init@data& (0+255),b
 10073  002E36                     l274:
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;HD44780.c: 29: {
 10077                           ;HD44780.c: 30: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10078  002E36  D82F               	call	PL128	;call to abstracted procedure
 10079  002E38  9283               	bcf	3971,1,c	;volatile
 10080  002E3A  9083               	bcf	3971,0,c	;volatile
 10081                           
 10082                           ;HD44780.c: 31: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
 10083  002E3C  D82C               	call	PL128	;call to abstracted procedure
 10084  002E3E  8283               	bsf	3971,1,c	;volatile
 10085  002E40  9083               	bcf	3971,0,c	;volatile
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;HD44780.c: 32: Lcd_Delay5us();
 10089  002E42  EC4B  F01B         	call	_Lcd_Delay5us	;wreg free
 10090                           
 10091                           ;HD44780.c: 33: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 1; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10092  002E46  D827               	call	PL128	;call to abstracted procedure
 10093  002E48  9283               	bcf	3971,1,c	;volatile
 10094  002E4A  9083               	bcf	3971,0,c	;volatile
 10095                           
 10096                           ;HD44780.c: 34: Lcd_Delay5500us();
 10097  002E4C  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10098  002E50  0100               	movlb	0	; () banked
 10099  002E52  2B63               	incf	Lcd_Init@data& (0+255),f,b
 10100  002E54  0E03               	movlw	3
 10101  002E56  6563               	cpfsgt	Lcd_Init@data& (0+255),b
 10102  002E58  D7EE               	goto	l274
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;HD44780.c: 35: }
 10106                           ;HD44780.c: 36: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10107  002E5A  D818               	call	PL126	;call to abstracted procedure
 10108  002E5C  9283               	bcf	3971,1,c	;volatile
 10109  002E5E  9083               	bcf	3971,0,c	;volatile
 10110                           
 10111                           ;HD44780.c: 37: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 1; LATAbits.LA0 = 0;
 10112  002E60  D815               	call	PL126	;call to abstracted procedure
 10113  002E62  8283               	bsf	3971,1,c	;volatile
 10114  002E64  9083               	bcf	3971,0,c	;volatile
 10115                           
 10116                           ; BSR set to: 0
 10117                           ;HD44780.c: 38: Lcd_Delay5us();
 10118  002E66  EC4B  F01B         	call	_Lcd_Delay5us	;wreg free
 10119                           
 10120                           ;HD44780.c: 39: LATAbits.LA5 = 0; LATAbits.LA4 = 0; LATAbits.LA3 = 1; LATAbits.LA2 = 0; 
      +                          LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10121  002E6A  D810               	call	PL126	;call to abstracted procedure
 10122  002E6C  9283               	bcf	3971,1,c	;volatile
 10123  002E6E  9083               	bcf	3971,0,c	;volatile
 10124                           
 10125                           ;HD44780.c: 40: Lcd_Delay5500us();
 10126  002E70  EC27  F01B         	call	_Lcd_Delay5500us	;wreg free
 10127  002E74  0E28               	movlw	40
 10128  002E76  EC62  F013         	call	_Lcd_Command
 10129  002E7A  0E10               	movlw	16
 10130  002E7C  EC62  F013         	call	_Lcd_Command
 10131  002E80  0E01               	movlw	1
 10132  002E82  EC62  F013         	call	_Lcd_Command
 10133  002E86  0E0F               	movlw	15
 10134  002E88  EF62  F013         	goto	_Lcd_Command
 10135  002E8C                     __end_of_Lcd_Init:
 10136                           	opt stack 0
 10137  002E8C                     PL126:
 10138                           	opt stack 19
 10139  002E8C  9A83               	bcf	3971,5,c	;volatile
 10140  002E8E  9883               	bcf	3971,4,c	;volatile
 10141  002E90  8683               	bsf	3971,3,c	;volatile
 10142  002E92  9483               	bcf	3971,2,c	;volatile
 10143  002E94  0012               	return	
 10144  002E96                     __end_ofPL126:
 10145                           	opt stack 0
 10146  002E96                     PL128:
 10147                           	opt stack 19
 10148  002E96  9A83               	bcf	3971,5,c	;volatile
 10149  002E98  9883               	bcf	3971,4,c	;volatile
 10150  002E9A  8683               	bsf	3971,3,c	;volatile
 10151  002E9C  8483               	bsf	3971,2,c	;volatile
 10152  002E9E  0012               	return	
 10153  002EA0                     __end_ofPL128:
 10154                           	opt stack 0
 10155                           tosu	equ	0xFFF
 10156                           tosh	equ	0xFFE
 10157                           tosl	equ	0xFFD
 10158                           pclath	equ	0xFFA
 10159                           tblptru	equ	0xFF8
 10160                           tblptrh	equ	0xFF7
 10161                           tblptrl	equ	0xFF6
 10162                           tablat	equ	0xFF5
 10163                           prodh	equ	0xFF4
 10164                           prodl	equ	0xFF3
 10165                           intcon	equ	0xFF2
 10166                           postinc0	equ	0xFEE
 10167                           plusw0	equ	0xFEB
 10168                           wreg	equ	0xFE8
 10169                           indf1	equ	0xFE7
 10170                           postinc1	equ	0xFE6
 10171                           postdec1	equ	0xFE5
 10172                           plusw1	equ	0xFE3
 10173                           fsr1h	equ	0xFE2
 10174                           fsr1l	equ	0xFE1
 10175                           indf2	equ	0xFDF
 10176                           postinc2	equ	0xFDE
 10177                           postdec2	equ	0xFDD
 10178                           plusw2	equ	0xFDB
 10179                           fsr2h	equ	0xFDA
 10180                           fsr2l	equ	0xFD9
 10181                           status	equ	0xFD8
 10182                           
 10183 ;; *************** function _Lcd_Delay5500us *****************
 10184 ;; Defined at:
 10185 ;;		line 153 in file "libs/HD44780.c"
 10186 ;; Parameters:    Size  Location     Type
 10187 ;;		None
 10188 ;; Auto vars:     Size  Location     Type
 10189 ;;		None
 10190 ;; Return value:  Size  Location     Type
 10191 ;;                  1    wreg      void 
 10192 ;; Registers used:
 10193 ;;		wreg
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10203 ;;Total ram usage:        1 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; Hardware stack levels required when called:    9
 10206 ;; This function calls:
 10207 ;;		Nothing
 10208 ;; This function is called by:
 10209 ;;		_Lcd_Init
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           	psect	text43
 10214  00364E                     __ptext43:
 10215                           	opt stack 0
 10216  00364E                     _Lcd_Delay5500us:
 10217                           	opt stack 20
 10218                           
 10219                           ;HD44780.c: 154: _delay((unsigned long)((5500)*(4000000/4000000.0)));
 10220                           
 10221                           ;incstack = 0
 10222  00364E  0E08               	movlw	8
 10223  003650  0100               	movlb	0	; () banked
 10224  003652  6F60               	movwf	??_Lcd_Delay5500us& (0+255),b
 10225  003654  0E23               	movlw	35
 10226  003656                     u5007:
 10227  003656  2EE8               	decfsz	wreg,f,c
 10228  003658  D7FE               	bra	u5007
 10229  00365A  2F60               	decfsz	??_Lcd_Delay5500us& (0+255),f,b
 10230  00365C  D7FC               	bra	u5007
 10231  00365E  0012               	return		;funcret
 10232  003660                     __end_of_Lcd_Delay5500us:
 10233                           	opt stack 0
 10234                           tosu	equ	0xFFF
 10235                           tosh	equ	0xFFE
 10236                           tosl	equ	0xFFD
 10237                           pclath	equ	0xFFA
 10238                           tblptru	equ	0xFF8
 10239                           tblptrh	equ	0xFF7
 10240                           tblptrl	equ	0xFF6
 10241                           tablat	equ	0xFF5
 10242                           prodh	equ	0xFF4
 10243                           prodl	equ	0xFF3
 10244                           intcon	equ	0xFF2
 10245                           postinc0	equ	0xFEE
 10246                           plusw0	equ	0xFEB
 10247                           wreg	equ	0xFE8
 10248                           indf1	equ	0xFE7
 10249                           postinc1	equ	0xFE6
 10250                           postdec1	equ	0xFE5
 10251                           plusw1	equ	0xFE3
 10252                           fsr1h	equ	0xFE2
 10253                           fsr1l	equ	0xFE1
 10254                           indf2	equ	0xFDF
 10255                           postinc2	equ	0xFDE
 10256                           postdec2	equ	0xFDD
 10257                           plusw2	equ	0xFDB
 10258                           fsr2h	equ	0xFDA
 10259                           fsr2l	equ	0xFD9
 10260                           status	equ	0xFD8
 10261                           
 10262 ;; *************** function _Lcd_Command *****************
 10263 ;; Defined at:
 10264 ;;		line 133 in file "libs/HD44780.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;  command         1    wreg     unsigned char 
 10267 ;; Auto vars:     Size  Location     Type
 10268 ;;  command         1    2[BANK0 ] unsigned char 
 10269 ;; Return value:  Size  Location     Type
 10270 ;;                  1    wreg      void 
 10271 ;; Registers used:
 10272 ;;		wreg, status,2, status,0, cstack
 10273 ;; Tracked objects:
 10274 ;;		On entry : 0/0
 10275 ;;		On exit  : 0/0
 10276 ;;		Unchanged: 0/0
 10277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10281 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10282 ;;Total ram usage:        3 bytes
 10283 ;; Hardware stack levels used:    1
 10284 ;; Hardware stack levels required when called:   10
 10285 ;; This function calls:
 10286 ;;		_Lcd_Delay5us
 10287 ;; This function is called by:
 10288 ;;		_Lcd_Init
 10289 ;;		_Lcd_WriteChar
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           	psect	text44
 10294  0026C4                     __ptext44:
 10295                           	opt stack 0
 10296  0026C4                     _Lcd_Command:
 10297                           	opt stack 18
 10298                           
 10299                           ;incstack = 0
 10300                           ;Lcd_Command@command stored from wreg
 10301  0026C4  0100               	movlb	0	; () banked
 10302  0026C6  6F62               	movwf	Lcd_Command@command& (0+255),b
 10303                           
 10304                           ;HD44780.c: 134: LATAbits.LA1 = 0; LATAbits.LA0 = 0;
 10305  0026C8  9283               	bcf	3971,1,c	;volatile
 10306  0026CA  9083               	bcf	3971,0,c	;volatile
 10307                           
 10308                           ;HD44780.c: 135: LATAbits.LA5 = (command & 0b10000000)>>7; LATAbits.LA4 = (command & 0b0
      +                          1000000)>>6;
 10309  0026CC  6B60               	clrf	??_Lcd_Command& (0+255),b
 10310  0026CE  AF62               	btfss	Lcd_Command@command& (0+255),7,b
 10311  0026D0  D001               	bra	u3835
 10312  0026D2  2B60               	incf	??_Lcd_Command& (0+255),f,b
 10313  0026D4                     u3835:
 10314  0026D4  D843               	call	PL56	;call to abstracted procedure
 10315  0026D6  0E06               	movlw	6
 10316  0026D8  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
 10317  0026DA                     u3845:
 10318  0026DA  90D8               	bcf	status,0,c
 10319  0026DC  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10320  0026DE  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
 10321  0026E0  D7FC               	goto	u3845
 10322  0026E2  D84D               	call	PL74	;call to abstracted procedure
 10323                           
 10324                           ;HD44780.c: 136: LATAbits.LA3 = (command & 0b00100000)>>5; LATAbits.LA2 = (command & 0b0
      +                          0010000)>>4;
 10325  0026E4  D847               	call	PL66	;call to abstracted procedure
 10326  0026E6  0E05               	movlw	5
 10327  0026E8  6F61               	movwf	(??_Lcd_Command+1)& (0+255),b
 10328  0026EA                     u3855:
 10329  0026EA  90D8               	bcf	status,0,c
 10330  0026EC  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10331  0026EE  2F61               	decfsz	(??_Lcd_Command+1)& (0+255),f,b
 10332  0026F0  D7FC               	goto	u3855
 10333  0026F2  0E01               	movlw	1
 10334  0026F4  D827               	call	PL54	;call to abstracted procedure
 10335  0026F6  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10336  0026F8  0E0F               	movlw	15
 10337  0026FA  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10338  0026FC  0E01               	movlw	1
 10339  0026FE  D846               	call	PL86	;call to abstracted procedure
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;HD44780.c: 137: _delay(10);
 10343  002700  0E03               	movlw	3
 10344  002702                     u5017:
 10345  002702  2EE8               	decfsz	wreg,f,c
 10346  002704  D7FE               	bra	u5017
 10347  002706  F000               	nop	
 10348                           
 10349                           ;HD44780.c: 138: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
 10350  002708  8283               	bsf	3971,1,c	;volatile
 10351  00270A  EC4B  F01B         	call	_Lcd_Delay5us	;wreg free
 10352  00270E  9283               	bcf	3971,1,c	;volatile
 10353                           
 10354                           ;HD44780.c: 139: LATAbits.LA5 = (command & 0b00001000)>>3; LATAbits.LA4 = (command & 0b0
      +                          0000100)>>2;
 10355  002710  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10356  002714  0100               	movlb	0	; () banked
 10357  002716  90D8               	bcf	status,0,c
 10358  002718  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10359  00271A  D841               	call	PL104	;call to abstracted procedure
 10360                           
 10361                           ; BSR set to: 0
 10362  00271C  D81F               	call	PL56	;call to abstracted procedure
 10363  00271E  D83F               	call	PL104	;call to abstracted procedure
 10364  002720  D82E               	call	PL74	;call to abstracted procedure
 10365                           
 10366                           ; BSR set to: 0
 10367                           ;HD44780.c: 140: LATAbits.LA3 = (command & 0b00000010)>>1; LATAbits.LA2 = (command & 0b0
      +                          0000001);
 10368  002722  D828               	call	PL66	;call to abstracted procedure
 10369  002724  90D8               	bcf	status,0,c
 10370  002726  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10371  002728  0E01               	movlw	1
 10372                           
 10373                           ; BSR set to: 0
 10374  00272A  D80C               	call	PL54	;call to abstracted procedure
 10375  00272C  0E01               	movlw	1
 10376  00272E  D82E               	call	PL86	;call to abstracted procedure
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;HD44780.c: 141: _delay(10);
 10380  002730  0E03               	movlw	3
 10381  002732                     u5027:
 10382  002732  2EE8               	decfsz	wreg,f,c
 10383  002734  D7FE               	bra	u5027
 10384  002736  F000               	nop	
 10385                           
 10386                           ;HD44780.c: 142: LATAbits.LA1 = 1; Lcd_Delay5us(); LATAbits.LA1 = 0;
 10387  002738  8283               	bsf	3971,1,c	;volatile
 10388  00273A  EC4B  F01B         	call	_Lcd_Delay5us	;wreg free
 10389  00273E  9283               	bcf	3971,1,c	;volatile
 10390                           
 10391                           ;HD44780.c: 144: Lcd_Delay5us();
 10392  002740  EF4B  F01B         	goto	_Lcd_Delay5us	;wreg free
 10393  002744                     __end_of_Lcd_Command:
 10394                           	opt stack 0
 10395  002744                     PL54:
 10396                           	opt stack 18
 10397  002744  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10398  002746  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10399  002748  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10400  00274A  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10401  00274C  5083               	movf	3971,w,c	;volatile
 10402  00274E  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10403  002750  0BF7               	andlw	-9
 10404  002752  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10405  002754  6E83               	movwf	3971,c	;volatile
 10406  002756  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10407  00275A  0012               	return	
 10408  00275C                     __end_ofPL54:
 10409                           	opt stack 0
 10410  00275C                     PL56:
 10411                           	opt stack 18
 10412  00275C  0E01               	movlw	1
 10413  00275E  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10414  002760  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10415  002762  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10416  002764  5083               	movf	3971,w,c	;volatile
 10417  002766  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10418  002768  0BDF               	andlw	-33
 10419  00276A  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10420  00276C  6E83               	movwf	3971,c	;volatile
 10421  00276E  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10422  002772  0012               	return	
 10423  002774                     __end_ofPL56:
 10424                           	opt stack 0
 10425  002774                     PL66:
 10426                           	opt stack 18
 10427  002774  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10428  002776  6E83               	movwf	3971,c	;volatile
 10429  002778  C062  F060         	movff	Lcd_Command@command,??_Lcd_Command
 10430  00277C  0012               	return	
 10431  00277E                     __end_ofPL66:
 10432                           	opt stack 0
 10433  00277E                     PL74:
 10434                           	opt stack 18
 10435  00277E  0E01               	movlw	1
 10436  002780  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10437  002782  3B60               	swapf	??_Lcd_Command& (0+255),f,b
 10438  002784  5083               	movf	3971,w,c	;volatile
 10439  002786  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10440  002788  0BEF               	andlw	-17
 10441  00278A  0012               	return	
 10442  00278C                     __end_ofPL74:
 10443                           	opt stack 0
 10444  00278C                     PL86:
 10445                           	opt stack 18
 10446  00278C  1760               	andwf	??_Lcd_Command& (0+255),f,b
 10447  00278E  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10448  002790  4760               	rlncf	??_Lcd_Command& (0+255),f,b
 10449  002792  5083               	movf	3971,w,c	;volatile
 10450  002794  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10451  002796  0BFB               	andlw	-5
 10452  002798  1960               	xorwf	??_Lcd_Command& (0+255),w,b
 10453  00279A  6E83               	movwf	3971,c	;volatile
 10454  00279C  0012               	return	
 10455  00279E                     __end_ofPL86:
 10456                           	opt stack 0
 10457  00279E                     PL104:
 10458                           	opt stack 18
 10459  00279E  90D8               	bcf	status,0,c
 10460  0027A0  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10461  0027A2  90D8               	bcf	status,0,c
 10462  0027A4  3360               	rrcf	??_Lcd_Command& (0+255),f,b
 10463  0027A6  0012               	return	
 10464  0027A8                     __end_ofPL104:
 10465                           	opt stack 0
 10466                           tosu	equ	0xFFF
 10467                           tosh	equ	0xFFE
 10468                           tosl	equ	0xFFD
 10469                           pclath	equ	0xFFA
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           prodh	equ	0xFF4
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           postinc0	equ	0xFEE
 10478                           plusw0	equ	0xFEB
 10479                           wreg	equ	0xFE8
 10480                           indf1	equ	0xFE7
 10481                           postinc1	equ	0xFE6
 10482                           postdec1	equ	0xFE5
 10483                           plusw1	equ	0xFE3
 10484                           fsr1h	equ	0xFE2
 10485                           fsr1l	equ	0xFE1
 10486                           indf2	equ	0xFDF
 10487                           postinc2	equ	0xFDE
 10488                           postdec2	equ	0xFDD
 10489                           plusw2	equ	0xFDB
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function _Lcd_Delay5us *****************
 10495 ;; Defined at:
 10496 ;;		line 150 in file "libs/HD44780.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		None
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10514 ;;Total ram usage:        0 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    9
 10517 ;; This function calls:
 10518 ;;		Nothing
 10519 ;; This function is called by:
 10520 ;;		_Lcd_Init
 10521 ;;		_Lcd_CharCP
 10522 ;;		_Lcd_Command
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text45
 10527  003696                     __ptext45:
 10528                           	opt stack 0
 10529  003696                     _Lcd_Delay5us:
 10530                           	opt stack 18
 10531                           
 10532                           ;HD44780.c: 151: _delay((unsigned long)((5)*(4000000/4000000.0)));
 10533                           
 10534                           ;incstack = 0
 10535  003696  D000               	nop2		;2 cycle nop
 10536  003698  D000               	nop2		;2 cycle nop
 10537  00369A  F000               	nop	
 10538  00369C  0012               	return		;funcret
 10539  00369E                     __end_of_Lcd_Delay5us:
 10540                           	opt stack 0
 10541                           tosu	equ	0xFFF
 10542                           tosh	equ	0xFFE
 10543                           tosl	equ	0xFFD
 10544                           pclath	equ	0xFFA
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           prodh	equ	0xFF4
 10550                           prodl	equ	0xFF3
 10551                           intcon	equ	0xFF2
 10552                           postinc0	equ	0xFEE
 10553                           plusw0	equ	0xFEB
 10554                           wreg	equ	0xFE8
 10555                           indf1	equ	0xFE7
 10556                           postinc1	equ	0xFE6
 10557                           postdec1	equ	0xFE5
 10558                           plusw1	equ	0xFE3
 10559                           fsr1h	equ	0xFE2
 10560                           fsr1l	equ	0xFE1
 10561                           indf2	equ	0xFDF
 10562                           postinc2	equ	0xFDE
 10563                           postdec2	equ	0xFDD
 10564                           plusw2	equ	0xFDB
 10565                           fsr2h	equ	0xFDA
 10566                           fsr2l	equ	0xFD9
 10567                           status	equ	0xFD8
 10568                           
 10569 ;; *************** function _GetThisCycle *****************
 10570 ;; Defined at:
 10571 ;;		line 229 in file "libs/funcs.c"
 10572 ;; Parameters:    Size  Location     Type
 10573 ;;		None
 10574 ;; Auto vars:     Size  Location     Type
 10575 ;;		None
 10576 ;; Return value:  Size  Location     Type
 10577 ;;                  1    wreg      unsigned char 
 10578 ;; Registers used:
 10579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10580 ;; Tracked objects:
 10581 ;;		On entry : 3F/0
 10582 ;;		On exit  : 3F/0
 10583 ;;		Unchanged: 3F/0
 10584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10589 ;;Total ram usage:        0 bytes
 10590 ;; Hardware stack levels used:    1
 10591 ;; Hardware stack levels required when called:    9
 10592 ;; This function calls:
 10593 ;;		Nothing
 10594 ;; This function is called by:
 10595 ;;		_main
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text46
 10600  00369E                     __ptext46:
 10601                           	opt stack 0
 10602  00369E                     _GetThisCycle:
 10603                           	opt stack 21
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;funcs.c: 230: if (PRESENT_EVENT <0)
 10607                           
 10608                           ;incstack = 0
 10609  00369E  BE5E               	btfsc	_PRESENT_EVENT,7,c
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;funcs.c: 231: return 0;
 10613  0036A0  0C00               	retlw	0
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;funcs.c: 232: else
 10617                           ;funcs.c: 233: return EVENTS[PRESENT_EVENT].CYCLE;
 10618  0036A2  EFFD  F00A         	goto	PL38	;call to abstracted procedure
 10619  0036A6                     __end_of_GetThisCycle:
 10620                           	opt stack 0
 10621                           tosu	equ	0xFFF
 10622                           tosh	equ	0xFFE
 10623                           tosl	equ	0xFFD
 10624                           pclath	equ	0xFFA
 10625                           tblptru	equ	0xFF8
 10626                           tblptrh	equ	0xFF7
 10627                           tblptrl	equ	0xFF6
 10628                           tablat	equ	0xFF5
 10629                           prodh	equ	0xFF4
 10630                           prodl	equ	0xFF3
 10631                           intcon	equ	0xFF2
 10632                           postinc0	equ	0xFEE
 10633                           plusw0	equ	0xFEB
 10634                           wreg	equ	0xFE8
 10635                           indf1	equ	0xFE7
 10636                           postinc1	equ	0xFE6
 10637                           postdec1	equ	0xFE5
 10638                           plusw1	equ	0xFE3
 10639                           fsr1h	equ	0xFE2
 10640                           fsr1l	equ	0xFE1
 10641                           indf2	equ	0xFDF
 10642                           postinc2	equ	0xFDE
 10643                           postdec2	equ	0xFDD
 10644                           plusw2	equ	0xFDB
 10645                           fsr2h	equ	0xFDA
 10646                           fsr2l	equ	0xFD9
 10647                           status	equ	0xFD8
 10648                           
 10649 ;; *************** function _GetEventNumber *****************
 10650 ;; Defined at:
 10651 ;;		line 210 in file "libs/funcs.c"
 10652 ;; Parameters:    Size  Location     Type
 10653 ;;		None
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  i               2   15[BANK0 ] unsigned int 
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      char 
 10658 ;; Registers used:
 10659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10660 ;; Tracked objects:
 10661 ;;		On entry : 3F/0
 10662 ;;		On exit  : 3F/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10666 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10667 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10668 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10669 ;;Total ram usage:       11 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:   10
 10672 ;; This function calls:
 10673 ;;		___wmul
 10674 ;; This function is called by:
 10675 ;;		_main
 10676 ;; This function uses a non-reentrant model
 10677 ;;
 10678                           
 10679                           	psect	text47
 10680  00220A                     __ptext47:
 10681                           	opt stack 0
 10682  00220A                     _GetEventNumber:
 10683                           	opt stack 20
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;funcs.c: 211: for (UINT i=0; i<24; i++) {
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;incstack = 0
 10690  00220A  6B6F               	clrf	GetEventNumber@i& (0+255),b
 10691  00220C  6B70               	clrf	(GetEventNumber@i+1)& (0+255),b
 10692  00220E                     l4804:
 10693                           
 10694                           ; BSR set to: 0
 10695                           ;funcs.c: 212: if (DATE_TIME.DAY.Val & EVENTS[i].SELECTED_WEEKS.Val & 0x7F) {
 10696  00220E  D857               	call	PL12	;call to abstracted procedure
 10697  002210  ECB8  F01A         	call	___wmul	;wreg free
 10698  002214  D875               	call	PL120	;call to abstracted procedure
 10699  002216  30DF               	rrcf	223,w,c
 10700  002218  0B7F               	andlw	127
 10701  00221A  0100               	movlb	0	; () banked
 10702  00221C  6F66               	movwf	??_GetEventNumber& (0+255),b
 10703  00221E  31C5               	rrcf	(_DATE_TIME+8)& (0+255),w,b
 10704  002220  0B7F               	andlw	127
 10705  002222  1566               	andwf	??_GetEventNumber& (0+255),w,b
 10706  002224  6F67               	movwf	(??_GetEventNumber+1)& (0+255),b
 10707  002226  0E7F               	movlw	127
 10708  002228  1767               	andwf	(??_GetEventNumber+1)& (0+255),f,b
 10709  00222A  E041               	bz	l4824
 10710                           
 10711                           ; BSR set to: 0
 10712                           ;funcs.c: 213: if (EVENTS[i].START_TIME < EVENTS[i].END_TIME) {
 10713  00222C  D848               	call	PL12	;call to abstracted procedure
 10714  00222E  ECB8  F01A         	call	___wmul	;wreg free
 10715  002232  D861               	call	PL82	;call to abstracted procedure
 10716  002234  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10717  002236  6EDA               	movwf	fsr2h,c
 10718  002238  D842               	call	PL12	;call to abstracted procedure
 10719  00223A  ECB8  F01A         	call	___wmul	;wreg free
 10720  00223E  0E00               	movlw	low _EVENTS
 10721  002240  2560               	addwf	?___wmul& (0+255),w,b
 10722  002242  6EE1               	movwf	fsr1l,c
 10723  002244  0E02               	movlw	high _EVENTS
 10724  002246  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10725  002248  6EE2               	movwf	fsr1h,c
 10726  00224A  50DE               	movf	postinc2,w,c
 10727  00224C  5CE6               	subwf	postinc1,w,c
 10728  00224E  50DE               	movf	postinc2,w,c
 10729  002250  58E6               	subwfb	postinc1,w,c
 10730  002252  50DE               	movf	postinc2,w,c
 10731  002254  58E6               	subwfb	postinc1,w,c
 10732  002256  50E6               	movf	postinc1,w,c
 10733  002258  0A80               	xorlw	128
 10734  00225A  6F6E               	movwf	(??_GetEventNumber+8)& (0+255),b
 10735  00225C  50DE               	movf	postinc2,w,c
 10736  00225E  0A80               	xorlw	128
 10737  002260  596E               	subwfb	(??_GetEventNumber+8)& (0+255),w,b
 10738  002262  E21B               	bc	l4816
 10739                           
 10740                           ; BSR set to: 0
 10741                           ;funcs.c: 214: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
 10742                           ;funcs.c: 215: && (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
 10743  002264  D82C               	call	PL12	;call to abstracted procedure
 10744  002266  ECB8  F01A         	call	___wmul	;wreg free
 10745  00226A  D841               	call	PL78	;call to abstracted procedure
 10746  00226C  D830               	call	PL40	;call to abstracted procedure
 10747  00226E  E21F               	bc	l4824
 10748                           
 10749                           ; BSR set to: 0
 10750  002270  D826               	call	PL12	;call to abstracted procedure
 10751  002272  ECB8  F01A         	call	___wmul	;wreg free
 10752  002276  D83F               	call	PL82	;call to abstracted procedure
 10753  002278  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10754  00227A  6EDA               	movwf	fsr2h,c
 10755  00227C  50DE               	movf	postinc2,w,c
 10756  00227E  5DBD               	subwf	_DATE_TIME& (0+255),w,b
 10757  002280  50DE               	movf	postinc2,w,c
 10758  002282  59BE               	subwfb	(_DATE_TIME+1)& (0+255),w,b
 10759  002284  50DE               	movf	postinc2,w,c
 10760  002286  59BF               	subwfb	(_DATE_TIME+2)& (0+255),w,b
 10761  002288  51C0               	movf	(_DATE_TIME+3)& (0+255),w,b
 10762  00228A  0A80               	xorlw	128
 10763  00228C  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
 10764  00228E  50DE               	movf	postinc2,w,c
 10765  002290  0A80               	xorlw	128
 10766  002292  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
 10767  002294  E20C               	bc	l4824
 10768  002296                     l4812:
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;funcs.c: 216: return i;
 10772  002296  516F               	movf	GetEventNumber@i& (0+255),w,b
 10773  002298  0012               	return	
 10774  00229A                     l4816:
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;funcs.c: 219: if ((DATE_TIME.SECOND > EVENTS[i].START_TIME)
 10778                           ;funcs.c: 220: || (DATE_TIME.SECOND < EVENTS[i].END_TIME)) {
 10779  00229A  D811               	call	PL12	;call to abstracted procedure
 10780  00229C  ECB8  F01A         	call	___wmul	;wreg free
 10781  0022A0  D826               	call	PL78	;call to abstracted procedure
 10782  0022A2  D815               	call	PL40	;call to abstracted procedure
 10783  0022A4  E3F8               	bnc	l4812
 10784                           
 10785                           ; BSR set to: 0
 10786  0022A6  D80B               	call	PL12	;call to abstracted procedure
 10787  0022A8  ECB8  F01A         	call	___wmul	;wreg free
 10788  0022AC  D7E4               	goto	L8
 10789  0022AE                     l4824:
 10790                           
 10791                           ; BSR set to: 0
 10792  0022AE  4B6F               	infsnz	GetEventNumber@i& (0+255),f,b
 10793  0022B0  2B70               	incf	(GetEventNumber@i+1)& (0+255),f,b
 10794                           
 10795                           ; BSR set to: 0
 10796  0022B2  5170               	movf	(GetEventNumber@i+1)& (0+255),w,b
 10797  0022B4  E103               	bnz	u4870
 10798  0022B6  0E18               	movlw	24
 10799  0022B8  5D6F               	subwf	GetEventNumber@i& (0+255),w,b
 10800  0022BA  E3A9               	bnc	l4804
 10801  0022BC                     u4870:
 10802                           
 10803                           ; BSR set to: 0
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;funcs.c: 222: }
 10807                           ;funcs.c: 223: }
 10808                           ;funcs.c: 224: }
 10809                           ;funcs.c: 225: }
 10810                           ;funcs.c: 226: return -1;
 10811  0022BC  0CFF               	retlw	255	;funcret
 10812  0022BE                     __end_of_GetEventNumber:
 10813                           	opt stack 0
 10814  0022BE                     PL12:
 10815                           	opt stack 20
 10816  0022BE  C06F  F060         	movff	GetEventNumber@i,___wmul@multiplier
 10817  0022C2  C070  F061         	movff	GetEventNumber@i+1,___wmul@multiplier+1
 10818  0022C6  6B63               	clrf	(___wmul@multiplicand+1)& (0+255),b
 10819  0022C8  0E0A               	movlw	10
 10820  0022CA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10821  0022CC  0C0A               	retlw	10
 10822  0022CE                     __end_ofPL12:
 10823                           	opt stack 0
 10824  0022CE                     PL40:
 10825                           	opt stack 20
 10826  0022CE  0E02               	movlw	high _EVENTS
 10827  0022D0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10828  0022D2  6EDA               	movwf	fsr2h,c
 10829  0022D4  51BD               	movf	_DATE_TIME& (0+255),w,b
 10830  0022D6  5CDE               	subwf	postinc2,w,c
 10831  0022D8  51BE               	movf	(_DATE_TIME+1)& (0+255),w,b
 10832  0022DA  58DE               	subwfb	postinc2,w,c
 10833  0022DC  51BF               	movf	(_DATE_TIME+2)& (0+255),w,b
 10834  0022DE  58DE               	subwfb	postinc2,w,c
 10835  0022E0  50DE               	movf	postinc2,w,c
 10836  0022E2  0A80               	xorlw	128
 10837  0022E4  6F6A               	movwf	(??_GetEventNumber+4)& (0+255),b
 10838  0022E6  51C0               	movf	(_DATE_TIME+3)& (0+255),w,b
 10839  0022E8  0A80               	xorlw	128
 10840  0022EA  596A               	subwfb	(??_GetEventNumber+4)& (0+255),w,b
 10841  0022EC  0012               	return	
 10842  0022EE                     __end_ofPL40:
 10843                           	opt stack 0
 10844  0022EE                     PL78:
 10845                           	opt stack 19
 10846  0022EE  0E00               	movlw	low _EVENTS
 10847  0022F0  2560               	addwf	?___wmul& (0+255),w,b
 10848  0022F2  6ED9               	movwf	fsr2l,c
 10849  0022F4  0012               	return	
 10850  0022F6                     __end_ofPL78:
 10851                           	opt stack 0
 10852  0022F6                     PL82:
 10853                           	opt stack 19
 10854  0022F6  0E04               	movlw	low (_EVENTS+4)
 10855  0022F8  2560               	addwf	?___wmul& (0+255),w,b
 10856  0022FA  6ED9               	movwf	fsr2l,c
 10857  0022FC  0E02               	movlw	high (_EVENTS+4)
 10858  0022FE  0012               	return	
 10859  002300                     __end_ofPL82:
 10860                           	opt stack 0
 10861  002300                     PL120:
 10862                           	opt stack 19
 10863  002300  0E09               	movlw	low (_EVENTS+9)
 10864  002302  2560               	addwf	?___wmul& (0+255),w,b
 10865  002304  6ED9               	movwf	fsr2l,c
 10866  002306  0E02               	movlw	high (_EVENTS+9)
 10867  002308  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10868  00230A  6EDA               	movwf	fsr2h,c
 10869  00230C  0012               	return	
 10870  00230E                     __end_ofPL120:
 10871                           	opt stack 0
 10872                           tosu	equ	0xFFF
 10873                           tosh	equ	0xFFE
 10874                           tosl	equ	0xFFD
 10875                           pclath	equ	0xFFA
 10876                           tblptru	equ	0xFF8
 10877                           tblptrh	equ	0xFF7
 10878                           tblptrl	equ	0xFF6
 10879                           tablat	equ	0xFF5
 10880                           prodh	equ	0xFF4
 10881                           prodl	equ	0xFF3
 10882                           intcon	equ	0xFF2
 10883                           postinc0	equ	0xFEE
 10884                           plusw0	equ	0xFEB
 10885                           wreg	equ	0xFE8
 10886                           indf1	equ	0xFE7
 10887                           postinc1	equ	0xFE6
 10888                           postdec1	equ	0xFE5
 10889                           plusw1	equ	0xFE3
 10890                           fsr1h	equ	0xFE2
 10891                           fsr1l	equ	0xFE1
 10892                           indf2	equ	0xFDF
 10893                           postinc2	equ	0xFDE
 10894                           postdec2	equ	0xFDD
 10895                           plusw2	equ	0xFDB
 10896                           fsr2h	equ	0xFDA
 10897                           fsr2l	equ	0xFD9
 10898                           status	equ	0xFD8
 10899                           
 10900 ;; *************** function ___wmul *****************
 10901 ;; Defined at:
 10902 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10905 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;  product         2    4[BANK0 ] unsigned int 
 10908 ;; Return value:  Size  Location     Type
 10909 ;;                  2    0[BANK0 ] unsigned int 
 10910 ;; Registers used:
 10911 ;;		wreg, status,2, status,0, prodl, prodh
 10912 ;; Tracked objects:
 10913 ;;		On entry : 3F/0
 10914 ;;		On exit  : 3F/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10917 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10920 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10921 ;;Total ram usage:        6 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    9
 10924 ;; This function calls:
 10925 ;;		Nothing
 10926 ;; This function is called by:
 10927 ;;		_LoadSettingsFromEeprom
 10928 ;;		_LoadEventsFromEeprom
 10929 ;;		_LoadStatesFromEeprom
 10930 ;;		_LoadCyclesFromEeprom
 10931 ;;		_AdjustDayLightSaving
 10932 ;;		_GetEventNumber
 10933 ;; This function uses a non-reentrant model
 10934 ;;
 10935                           
 10936                           	psect	text48
 10937  003570                     __ptext48:
 10938                           	opt stack 0
 10939  003570                     ___wmul:
 10940                           	opt stack 18
 10941                           
 10942                           ; BSR set to: 0
 10943                           
 10944                           ; BSR set to: 0
 10945                           ;incstack = 0
 10946  003570  5160               	movf	___wmul@multiplier& (0+255),w,b
 10947  003572  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10948  003574  CFF3 F064          	movff	prodl,___wmul@product
 10949  003578  CFF4 F065          	movff	prodh,___wmul@product+1
 10950  00357C  5160               	movf	___wmul@multiplier& (0+255),w,b
 10951  00357E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10952  003580  50F3               	movf	prodl,w,c
 10953  003582  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10954  003584  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10955  003586  0362               	mulwf	___wmul@multiplicand& (0+255),b
 10956  003588  50F3               	movf	prodl,w,c
 10957  00358A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 10958                           
 10959                           ; BSR set to: 0
 10960  00358C  C064  F060         	movff	___wmul@product,?___wmul
 10961  003590  C065  F061         	movff	___wmul@product+1,?___wmul+1
 10962                           
 10963                           ; BSR set to: 0
 10964  003594  0012               	return		;funcret
 10965  003596                     __end_of___wmul:
 10966                           	opt stack 0
 10967                           tosu	equ	0xFFF
 10968                           tosh	equ	0xFFE
 10969                           tosl	equ	0xFFD
 10970                           pclath	equ	0xFFA
 10971                           tblptru	equ	0xFF8
 10972                           tblptrh	equ	0xFF7
 10973                           tblptrl	equ	0xFF6
 10974                           tablat	equ	0xFF5
 10975                           prodh	equ	0xFF4
 10976                           prodl	equ	0xFF3
 10977                           intcon	equ	0xFF2
 10978                           postinc0	equ	0xFEE
 10979                           plusw0	equ	0xFEB
 10980                           wreg	equ	0xFE8
 10981                           indf1	equ	0xFE7
 10982                           postinc1	equ	0xFE6
 10983                           postdec1	equ	0xFE5
 10984                           plusw1	equ	0xFE3
 10985                           fsr1h	equ	0xFE2
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           plusw2	equ	0xFDB
 10991                           fsr2h	equ	0xFDA
 10992                           fsr2l	equ	0xFD9
 10993                           status	equ	0xFD8
 10994                           
 10995 ;; *************** function _INTERRUPT_InterruptManager *****************
 10996 ;; Defined at:
 10997 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;		None
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;		None
 11002 ;; Return value:  Size  Location     Type
 11003 ;;                  1    wreg      void 
 11004 ;; Registers used:
 11005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11013 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11014 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11015 ;;Total ram usage:       10 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    8
 11018 ;; This function calls:
 11019 ;;		_TMR0_ISR
 11020 ;; This function is called by:
 11021 ;;		Interrupt level 2
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           	psect	intcode
 11026  000008                     __pintcode:
 11027                           	opt stack 0
 11028  000008                     _INTERRUPT_InterruptManager:
 11029                           	opt stack 15
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;incstack = 0
 11033  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11034  00000A  CFFA F042          	movff	pclath,??_INTERRUPT_InterruptManager
 11035  00000E  CFFB F043          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 11036  000012  CFE9 F044          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 11037  000016  CFEA F045          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 11038  00001A  CFE1 F046          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 11039  00001E  CFE2 F047          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 11040  000022  CFD9 F048          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 11041  000026  CFDA F049          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 11042  00002A  CFF3 F04A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 11043  00002E  CFF4 F04B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 11044                           
 11045                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 11046  000032  010E               	movlb	14	; () banked
 11047  000034  BBC2               	btfsc	194,5,b	;volatile
 11048                           
 11049                           ; BSR set to: 14
 11050  000036  ABCA               	btfss	202,5,b	;volatile
 11051  000038  D002               	goto	i2l772
 11052                           
 11053                           ; BSR set to: 14
 11054                           ;interrupt_manager.c: 61: {
 11055                           ;interrupt_manager.c: 62: TMR0_ISR();
 11056  00003A  EC3F  F01B         	call	_TMR0_ISR	;wreg free
 11057  00003E                     i2l772:
 11058  00003E  C04B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 11059  000042  C04A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 11060  000046  C049  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 11061  00004A  C048  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 11062  00004E  C047  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 11063  000052  C046  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 11064  000056  C045  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 11065  00005A  C044  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 11066  00005E  C043  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 11067  000062  C042  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 11068  000066  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11069  000068  0011               	retfie		f
 11070  00006A                     __end_of_INTERRUPT_InterruptManager:
 11071                           	opt stack 0
 11072                           tosu	equ	0xFFF
 11073                           tosh	equ	0xFFE
 11074                           tosl	equ	0xFFD
 11075                           pclatu	equ	0xFFB
 11076                           pclath	equ	0xFFA
 11077                           tblptru	equ	0xFF8
 11078                           tblptrh	equ	0xFF7
 11079                           tblptrl	equ	0xFF6
 11080                           tablat	equ	0xFF5
 11081                           prodh	equ	0xFF4
 11082                           prodl	equ	0xFF3
 11083                           intcon	equ	0xFF2
 11084                           postinc0	equ	0xFEE
 11085                           plusw0	equ	0xFEB
 11086                           fsr0h	equ	0xFEA
 11087                           fsr0l	equ	0xFE9
 11088                           wreg	equ	0xFE8
 11089                           indf1	equ	0xFE7
 11090                           postinc1	equ	0xFE6
 11091                           postdec1	equ	0xFE5
 11092                           plusw1	equ	0xFE3
 11093                           fsr1h	equ	0xFE2
 11094                           fsr1l	equ	0xFE1
 11095                           indf2	equ	0xFDF
 11096                           postinc2	equ	0xFDE
 11097                           postdec2	equ	0xFDD
 11098                           plusw2	equ	0xFDB
 11099                           fsr2h	equ	0xFDA
 11100                           fsr2l	equ	0xFD9
 11101                           status	equ	0xFD8
 11102                           
 11103 ;; *************** function _TMR0_ISR *****************
 11104 ;; Defined at:
 11105 ;;		line 136 in file "mcc_generated_files/tmr0.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;		None
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      void 
 11112 ;; Registers used:
 11113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11114 ;; Tracked objects:
 11115 ;;		On entry : 3F/E
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11123 ;;Total ram usage:        0 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    7
 11126 ;; This function calls:
 11127 ;;		_TMR0_CallBack
 11128 ;; This function is called by:
 11129 ;;		_INTERRUPT_InterruptManager
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           	psect	text50
 11134  00367E                     __ptext50:
 11135                           	opt stack 0
 11136  00367E                     _TMR0_ISR:
 11137                           	opt stack 15
 11138                           
 11139                           ; BSR set to: 14
 11140                           ;tmr0.c: 139: PIR0bits.TMR0IF = 0;
 11141                           
 11142                           ;incstack = 0
 11143  00367E  9BCA               	bcf	202,5,b	;volatile
 11144                           
 11145                           ;tmr0.c: 141: TMR0H = timer0ReloadVal16bit >> 8;
 11146  003680  C04D  FFD4         	movff	_timer0ReloadVal16bit+1,4052	;volatile
 11147                           
 11148                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal16bit;
 11149  003684  C04C  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
 11150                           
 11151                           ; BSR set to: 14
 11152                           ;tmr0.c: 146: TMR0_CallBack();
 11153  003688  EFDD  F01A         	goto	_TMR0_CallBack	;wreg free
 11154  00368C                     __end_of_TMR0_ISR:
 11155                           	opt stack 0
 11156                           tosu	equ	0xFFF
 11157                           tosh	equ	0xFFE
 11158                           tosl	equ	0xFFD
 11159                           pclatu	equ	0xFFB
 11160                           pclath	equ	0xFFA
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           intcon	equ	0xFF2
 11168                           postinc0	equ	0xFEE
 11169                           plusw0	equ	0xFEB
 11170                           fsr0h	equ	0xFEA
 11171                           fsr0l	equ	0xFE9
 11172                           wreg	equ	0xFE8
 11173                           indf1	equ	0xFE7
 11174                           postinc1	equ	0xFE6
 11175                           postdec1	equ	0xFE5
 11176                           plusw1	equ	0xFE3
 11177                           fsr1h	equ	0xFE2
 11178                           fsr1l	equ	0xFE1
 11179                           indf2	equ	0xFDF
 11180                           postinc2	equ	0xFDE
 11181                           postdec2	equ	0xFDD
 11182                           plusw2	equ	0xFDB
 11183                           fsr2h	equ	0xFDA
 11184                           fsr2l	equ	0xFD9
 11185                           status	equ	0xFD8
 11186                           
 11187 ;; *************** function _TMR0_CallBack *****************
 11188 ;; Defined at:
 11189 ;;		line 151 in file "mcc_generated_files/tmr0.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;		None
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;		None
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      void 
 11196 ;; Registers used:
 11197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : 3F/E
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11207 ;;Total ram usage:        0 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    6
 11210 ;; This function calls:
 11211 ;;		Absolute function
 11212 ;;		_TMR0_DefaultInterruptHandler
 11213 ;;		_Timer0_10ms
 11214 ;; This function is called by:
 11215 ;;		_TMR0_ISR
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text51
 11220  0035BA                     __ptext51:
 11221                           	opt stack 0
 11222  0035BA                     _TMR0_CallBack:
 11223                           	opt stack 15
 11224                           
 11225                           ; BSR set to: 14
 11226                           ;tmr0.c: 155: if(TMR0_InterruptHandler)
 11227                           
 11228                           ;incstack = 0
 11229  0035BA  0100               	movlb	0	; () banked
 11230  0035BC  51E0               	movf	_TMR0_InterruptHandler& (0+255),w,b
 11231  0035BE  11E1               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 11232  0035C0  B4D8               	btfsc	status,2,c
 11233  0035C2  0012               	return	
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;tmr0.c: 156: {
 11237                           ;tmr0.c: 157: TMR0_InterruptHandler();
 11238  0035C4  0005               	push	
 11239  0035C6  6EFA               	movwf	pclath,c
 11240  0035C8  51E0               	movf	_TMR0_InterruptHandler& (0+255),w,b
 11241  0035CA  6EFD               	movwf	tosl,c
 11242  0035CC  51E1               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 11243  0035CE  6EFE               	movwf	tosh,c
 11244  0035D0  6AFF               	clrf	tosu,c
 11245  0035D2  50FA               	movf	pclath,w,c
 11246  0035D4  0012               	return		;indir
 11247  0035D6                     __end_of_TMR0_CallBack:
 11248                           	opt stack 0
 11249                           tosu	equ	0xFFF
 11250                           tosh	equ	0xFFE
 11251                           tosl	equ	0xFFD
 11252                           pclatu	equ	0xFFB
 11253                           pclath	equ	0xFFA
 11254                           tblptru	equ	0xFF8
 11255                           tblptrh	equ	0xFF7
 11256                           tblptrl	equ	0xFF6
 11257                           tablat	equ	0xFF5
 11258                           prodh	equ	0xFF4
 11259                           prodl	equ	0xFF3
 11260                           intcon	equ	0xFF2
 11261                           postinc0	equ	0xFEE
 11262                           plusw0	equ	0xFEB
 11263                           fsr0h	equ	0xFEA
 11264                           fsr0l	equ	0xFE9
 11265                           wreg	equ	0xFE8
 11266                           indf1	equ	0xFE7
 11267                           postinc1	equ	0xFE6
 11268                           postdec1	equ	0xFE5
 11269                           plusw1	equ	0xFE3
 11270                           fsr1h	equ	0xFE2
 11271                           fsr1l	equ	0xFE1
 11272                           indf2	equ	0xFDF
 11273                           postinc2	equ	0xFDE
 11274                           postdec2	equ	0xFDD
 11275                           plusw2	equ	0xFDB
 11276                           fsr2h	equ	0xFDA
 11277                           fsr2l	equ	0xFD9
 11278                           status	equ	0xFD8
 11279                           
 11280 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11281 ;; Defined at:
 11282 ;;		line 165 in file "mcc_generated_files/tmr0.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;		None
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;		None
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  1    wreg      void 
 11289 ;; Registers used:
 11290 ;;		None
 11291 ;; Tracked objects:
 11292 ;;		On entry : 3F/0
 11293 ;;		On exit  : 3F/0
 11294 ;;		Unchanged: 3F/0
 11295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11300 ;;Total ram usage:        0 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_TMR0_Initialize
 11306 ;;		_TMR0_CallBack
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           	psect	text52
 11311  0036BE                     __ptext52:
 11312                           	opt stack 0
 11313  0036BE                     _TMR0_DefaultInterruptHandler:
 11314                           	opt stack 20
 11315                           
 11316                           ; BSR set to: 0
 11317                           
 11318                           ;incstack = 0
 11319  0036BE  0012               	return		;funcret
 11320  0036C0                     __end_of_TMR0_DefaultInterruptHandler:
 11321                           	opt stack 0
 11322                           tosu	equ	0xFFF
 11323                           tosh	equ	0xFFE
 11324                           tosl	equ	0xFFD
 11325                           pclatu	equ	0xFFB
 11326                           pclath	equ	0xFFA
 11327                           tblptru	equ	0xFF8
 11328                           tblptrh	equ	0xFF7
 11329                           tblptrl	equ	0xFF6
 11330                           tablat	equ	0xFF5
 11331                           prodh	equ	0xFF4
 11332                           prodl	equ	0xFF3
 11333                           intcon	equ	0xFF2
 11334                           postinc0	equ	0xFEE
 11335                           plusw0	equ	0xFEB
 11336                           fsr0h	equ	0xFEA
 11337                           fsr0l	equ	0xFE9
 11338                           wreg	equ	0xFE8
 11339                           indf1	equ	0xFE7
 11340                           postinc1	equ	0xFE6
 11341                           postdec1	equ	0xFE5
 11342                           plusw1	equ	0xFE3
 11343                           fsr1h	equ	0xFE2
 11344                           fsr1l	equ	0xFE1
 11345                           indf2	equ	0xFDF
 11346                           postinc2	equ	0xFDE
 11347                           postdec2	equ	0xFDD
 11348                           plusw2	equ	0xFDB
 11349                           fsr2h	equ	0xFDA
 11350                           fsr2l	equ	0xFD9
 11351                           status	equ	0xFD8
 11352                           
 11353 ;; *************** function _Timer0_10ms *****************
 11354 ;; Defined at:
 11355 ;;		line 3 in file "libs/projMain.c"
 11356 ;; Parameters:    Size  Location     Type
 11357 ;;		None
 11358 ;; Auto vars:     Size  Location     Type
 11359 ;;  i               1   63[COMRAM] unsigned char 
 11360 ;;  i               1   64[COMRAM] unsigned char 
 11361 ;;  ThisCycle       1   57[COMRAM] unsigned char 
 11362 ;;  ThisCycle       1   61[COMRAM] unsigned char 
 11363 ;;  i               1   62[COMRAM] unsigned char 
 11364 ;;  i               1   58[COMRAM] unsigned char 
 11365 ;;  OutForThePor    2   59[COMRAM] unsigned char [2]
 11366 ;; Return value:  Size  Location     Type
 11367 ;;                  1    wreg      void 
 11368 ;; Registers used:
 11369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11370 ;; Tracked objects:
 11371 ;;		On entry : 3F/0
 11372 ;;		On exit  : 3F/0
 11373 ;;		Unchanged: 0/0
 11374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11376 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11377 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11378 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11379 ;;Total ram usage:       13 bytes
 11380 ;; Hardware stack levels used:    1
 11381 ;; Hardware stack levels required when called:    5
 11382 ;; This function calls:
 11383 ;;		_IncreaseByASecond
 11384 ;;		___almod
 11385 ;;		___ftmul
 11386 ;;		___fttol
 11387 ;;		___lbtoft
 11388 ;;		i2_GetThisCycle
 11389 ;; This function is called by:
 11390 ;;		_main
 11391 ;;		_TMR0_CallBack
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           	psect	text53
 11396  00130A                     __ptext53:
 11397                           	opt stack 0
 11398  00130A                     _Timer0_10ms:
 11399                           	opt stack 15
 11400                           
 11401                           ; BSR set to: 0
 11402                           ;projMain.c: 4: if (FLAGS_1.bits.b0) {
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;incstack = 0
 11406  00130A  A04E               	btfss	_FLAGS_1,0,c
 11407  00130C  D006               	goto	i2l4102
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;projMain.c: 5: PRESENT_STATE = NEXT_STATE;
 11411  00130E  C0E9  F0EA         	movff	_NEXT_STATE,_PRESENT_STATE
 11412                           
 11413                           ;projMain.c: 6: STATE_SECONDS = 0;
 11414  001312  6A54               	clrf	_STATE_SECONDS,c
 11415                           
 11416                           ;projMain.c: 7: FLAGS_1.bits.b0 = RESET;
 11417  001314  904E               	bcf	_FLAGS_1,0,c
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;projMain.c: 8: STATE_SECONDS_REMAINING = STATES[PRESENT_STATE].PERIOD;
 11421  001316  D942               	call	PL18	;call to abstracted procedure
 11422  001318  6FE8               	movwf	_STATE_SECONDS_REMAINING& (0+255),b
 11423  00131A                     i2l4102:
 11424                           
 11425                           ; BSR set to: 0
 11426                           ;projMain.c: 9: }
 11427                           ;projMain.c: 10: UINT8 OutForThePorts[2];
 11428                           ;projMain.c: 11: for (UINT8 i =0; i<2; i++) {
 11429  00131A  6A3B               	clrf	Timer0_10ms@i,c
 11430  00131C                     i2l4108:
 11431                           
 11432                           ; BSR set to: 0
 11433                           ;projMain.c: 12: OutForThePorts[i] = 0x00;
 11434  00131C  503B               	movf	Timer0_10ms@i,w,c
 11435  00131E  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11436  001320  6ED9               	movwf	fsr2l,c
 11437  001322  6ADA               	clrf	fsr2h,c
 11438  001324  6ADF               	clrf	indf2,c
 11439                           
 11440                           ; BSR set to: 0
 11441  001326  2A3B               	incf	Timer0_10ms@i,f,c
 11442                           
 11443                           ; BSR set to: 0
 11444  001328  0E01               	movlw	1
 11445  00132A  643B               	cpfsgt	Timer0_10ms@i,c
 11446  00132C  D7F7               	goto	i2l4108
 11447                           
 11448                           ; BSR set to: 0
 11449                           ;projMain.c: 13: }
 11450                           ;projMain.c: 14: for (UINT8 i =0; i<2; i++) {
 11451  00132E  6A3F               	clrf	Timer0_10ms@i_2909,c
 11452  001330                     i2l4118:
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;projMain.c: 15: OutForThePorts[i] = STATES[PRESENT_STATE].ON[i];
 11456  001330  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11457  001332  0D06               	mullw	6
 11458  001334  0EF0               	movlw	low _STATES
 11459  001336  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11460  001338  0E06               	movlw	high _STATES
 11461  00133A  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11462  00133C  2A35               	incf	??_Timer0_10ms,f,c
 11463  00133E  0E00               	movlw	0
 11464  001340  2236               	addwfc	??_Timer0_10ms+1,f,c
 11465  001342  50F3               	movf	prodl,w,c
 11466  001344  2635               	addwf	??_Timer0_10ms,f,c
 11467  001346  50F4               	movf	prodh,w,c
 11468  001348  2236               	addwfc	??_Timer0_10ms+1,f,c
 11469  00134A  503F               	movf	Timer0_10ms@i_2909,w,c
 11470  00134C  2435               	addwf	??_Timer0_10ms,w,c
 11471  00134E  6ED9               	movwf	fsr2l,c
 11472  001350  0E00               	movlw	0
 11473  001352  2036               	addwfc	??_Timer0_10ms+1,w,c
 11474  001354  6EDA               	movwf	fsr2h,c
 11475  001356  503F               	movf	Timer0_10ms@i_2909,w,c
 11476  001358  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11477  00135A  6EE1               	movwf	fsr1l,c
 11478  00135C  6AE2               	clrf	fsr1h,c
 11479  00135E  CFDF FFE7          	movff	indf2,indf1
 11480                           
 11481                           ; BSR set to: 0
 11482  001362  2A3F               	incf	Timer0_10ms@i_2909,f,c
 11483                           
 11484                           ; BSR set to: 0
 11485  001364  0E01               	movlw	1
 11486  001366  643F               	cpfsgt	Timer0_10ms@i_2909,c
 11487  001368  D7E3               	goto	i2l4118
 11488                           
 11489                           ; BSR set to: 0
 11490                           ;projMain.c: 16: }
 11491                           ;projMain.c: 17: if (STATE_SECONDS_REMAINING <= BLINK_LAST_X_SECONDS) {
 11492  00136A  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
 11493  00136C  5C5A               	subwf	_BLINK_LAST_X_SECONDS,w,c
 11494  00136E  E30F               	bnc	i2l1141
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;projMain.c: 18: if (BLINK_STATE_ON_OFF_COUNTER < BLINK_ON_TIME) {
 11498  001370  505C               	movf	_BLINK_ON_TIME,w,c
 11499  001372  5C52               	subwf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 11500  001374  E217               	bc	i2l4150
 11501                           
 11502                           ; BSR set to: 0
 11503                           ;projMain.c: 19: for (UINT8 i =0; i<2; i++)
 11504  001376  6A40               	clrf	Timer0_10ms@i_2910,c
 11505  001378                     i2l4134:
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;projMain.c: 20: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 11509  001378  5040               	movf	Timer0_10ms@i_2910,w,c
 11510  00137A  D925               	call	PL28	;call to abstracted procedure
 11511  00137C  5040               	movf	Timer0_10ms@i_2910,w,c
 11512  00137E  D958               	call	PL112	;call to abstracted procedure
 11513  001380  5040               	movf	Timer0_10ms@i_2910,w,c
 11514  001382  D96C               	call	PL122	;call to abstracted procedure
 11515                           
 11516                           ; BSR set to: 0
 11517  001384  2A40               	incf	Timer0_10ms@i_2910,f,c
 11518                           
 11519                           ; BSR set to: 0
 11520  001386  0E01               	movlw	1
 11521  001388  6440               	cpfsgt	Timer0_10ms@i_2910,c
 11522  00138A  D7F6               	goto	i2l4134
 11523  00138C  D00B               	goto	i2l4150
 11524  00138E                     i2l1141:
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;projMain.c: 23: for (UINT8 i =0; i<2; i++)
 11528  00138E  6A41               	clrf	Timer0_10ms@i_2911,c
 11529  001390                     i2l4144:
 11530                           
 11531                           ; BSR set to: 0
 11532                           ;projMain.c: 24: OutForThePorts[i] = (OutForThePorts[i] | STATES[PRESENT_STATE].BLINK[i]
      +                          );
 11533  001390  5041               	movf	Timer0_10ms@i_2911,w,c
 11534  001392  D919               	call	PL28	;call to abstracted procedure
 11535  001394  5041               	movf	Timer0_10ms@i_2911,w,c
 11536  001396  D94C               	call	PL112	;call to abstracted procedure
 11537  001398  5041               	movf	Timer0_10ms@i_2911,w,c
 11538  00139A  D960               	call	PL122	;call to abstracted procedure
 11539                           
 11540                           ; BSR set to: 0
 11541  00139C  2A41               	incf	Timer0_10ms@i_2911,f,c
 11542                           
 11543                           ; BSR set to: 0
 11544  00139E  0E01               	movlw	1
 11545  0013A0  6441               	cpfsgt	Timer0_10ms@i_2911,c
 11546  0013A2  D7F6               	goto	i2l4144
 11547  0013A4                     i2l4150:
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;projMain.c: 25: }
 11551                           ;projMain.c: 31: if ((STATES[PRESENT_STATE].AUDIO == AUDIO_NORMAL)
 11552                           ;projMain.c: 32: || ((STATES[PRESENT_STATE].AUDIO == AUDIO_SPECIAL)
 11553                           ;projMain.c: 33: && (STATE_SECONDS_REMAINING <= SPECIAL_AUDIO_LAST_X_SECONDS))) {
 11554  0013A4  D934               	call	PL42	;call to abstracted procedure
 11555  0013A6  04DE               	decf	postinc2,w,c
 11556  0013A8  E007               	bz	i2l4156
 11557                           
 11558                           ; BSR set to: 0
 11559  0013AA  D931               	call	PL42	;call to abstracted procedure
 11560  0013AC  0E02               	movlw	2
 11561  0013AE  18DE               	xorwf	postinc2,w,c
 11562  0013B0  E106               	bnz	i2l4160
 11563                           
 11564                           ; BSR set to: 0
 11565  0013B2  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
 11566  0013B4  5C55               	subwf	_SPECIAL_AUDIO_LAST_X_SECONDS,w,c
 11567  0013B6  E303               	bnc	i2l4160
 11568  0013B8                     i2l4156:
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;projMain.c: 34: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_NORMAL_ON_TIME)
 11572  0013B8  5059               	movf	_AUDIO_NORMAL_ON_TIME,w,c
 11573  0013BA  5C51               	subwf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11574  0013BC  D006               	goto	L11
 11575  0013BE                     i2l4160:
 11576                           
 11577                           ; BSR set to: 0
 11578  0013BE  D927               	call	PL42	;call to abstracted procedure
 11579  0013C0  0E02               	movlw	2
 11580  0013C2  18DE               	xorwf	postinc2,w,c
 11581  0013C4  E105               	bnz	i2l1154
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;projMain.c: 39: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER < AUDIO_SPECIAL_ON_TIME)
 11585  0013C6  5057               	movf	_AUDIO_SPECIAL_ON_TIME,w,c
 11586  0013C8  5C50               	subwf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11587  0013CA                     L11:
 11588  0013CA  E202               	bc	i2l1154
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;projMain.c: 40: LATCbits.LC0 = ON;
 11592  0013CC  8085               	bsf	3973,0,c	;volatile
 11593  0013CE  D001               	goto	i2l4166
 11594  0013D0                     i2l1154:
 11595                           
 11596                           ; BSR set to: 0
 11597                           ;projMain.c: 44: LATCbits.LC0 = OFF;
 11598  0013D0  9085               	bcf	3973,0,c	;volatile
 11599  0013D2                     i2l4166:
 11600                           
 11601                           ; BSR set to: 0
 11602                           ;projMain.c: 46: CENTI_SECOND_COUNT++;
 11603  0013D2  2A53               	incf	_CENTI_SECOND_COUNT,f,c
 11604                           
 11605                           ;projMain.c: 47: BLINK_STATE_ON_OFF_COUNTER++;
 11606  0013D4  2A52               	incf	_BLINK_STATE_ON_OFF_COUNTER,f,c
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;projMain.c: 48: if (BLINK_STATE_ON_OFF_COUNTER >= (BLINK_ON_TIME + BLINK_OFF_TIME))
 11610  0013D6  505B               	movf	_BLINK_OFF_TIME,w,c
 11611  0013D8  C05C  F035         	movff	_BLINK_ON_TIME,??_Timer0_10ms
 11612  0013DC  D946               	call	PL124	;call to abstracted procedure
 11613  0013DE  5052               	movf	_BLINK_STATE_ON_OFF_COUNTER,w,c
 11614  0013E0  D8E7               	call	PL26	;call to abstracted procedure
 11615  0013E2  E301               	bnc	i2l4172
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;projMain.c: 49: BLINK_STATE_ON_OFF_COUNTER=0;
 11619  0013E4  6A52               	clrf	_BLINK_STATE_ON_OFF_COUNTER,c
 11620  0013E6                     i2l4172:
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;projMain.c: 50: NORMAL_AUDIO_STATE_ON_OFF_COUNTER++;
 11624  0013E6  2A51               	incf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;projMain.c: 51: if (NORMAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_NORMAL_ON_TIME + AUDIO_
      +                          NORMAL_OFF_TIME))
 11628  0013E8  5058               	movf	_AUDIO_NORMAL_OFF_TIME,w,c
 11629  0013EA  C059  F035         	movff	_AUDIO_NORMAL_ON_TIME,??_Timer0_10ms
 11630  0013EE  D93D               	call	PL124	;call to abstracted procedure
 11631  0013F0  5051               	movf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11632  0013F2  D8DE               	call	PL26	;call to abstracted procedure
 11633  0013F4  E301               	bnc	i2l4178
 11634                           
 11635                           ; BSR set to: 0
 11636                           ;projMain.c: 52: NORMAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 11637  0013F6  6A51               	clrf	_NORMAL_AUDIO_STATE_ON_OFF_COUNTER,c
 11638  0013F8                     i2l4178:
 11639                           
 11640                           ; BSR set to: 0
 11641                           ;projMain.c: 53: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER++;
 11642  0013F8  2A50               	incf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,f,c
 11643                           
 11644                           ; BSR set to: 0
 11645                           ;projMain.c: 54: if (SPECIAL_AUDIO_STATE_ON_OFF_COUNTER >= (AUDIO_SPECIAL_ON_TIME + AUDI
      +                          O_SPECIAL_OFF_TIME))
 11646  0013FA  5056               	movf	_AUDIO_SPECIAL_OFF_TIME,w,c
 11647  0013FC  C057  F035         	movff	_AUDIO_SPECIAL_ON_TIME,??_Timer0_10ms
 11648  001400  D934               	call	PL124	;call to abstracted procedure
 11649  001402  5050               	movf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,w,c
 11650  001404  D8D5               	call	PL26	;call to abstracted procedure
 11651  001406  E301               	bnc	i2l4184
 11652                           
 11653                           ; BSR set to: 0
 11654                           ;projMain.c: 55: SPECIAL_AUDIO_STATE_ON_OFF_COUNTER=0;
 11655  001408  6A50               	clrf	_SPECIAL_AUDIO_STATE_ON_OFF_COUNTER,c
 11656  00140A                     i2l4184:
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;projMain.c: 58: if (CENTI_SECOND_COUNT == 100) {
 11660  00140A  0E64               	movlw	100
 11661  00140C  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 11662  00140E  E120               	bnz	i2l4198
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;projMain.c: 59: CENTI_SECOND_COUNT = 0;
 11666  001410  6A53               	clrf	_CENTI_SECOND_COUNT,c
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;projMain.c: 60: DATE_TIME = IncreaseByASecond(DATE_TIME);
 11670  001412  EE20  F0BD         	lfsr	2,_DATE_TIME
 11671  001416  EE00  F02A         	lfsr	0,IncreaseByASecond@dt
 11672  00141A  0E0A               	movlw	10
 11673  00141C                     i2u415_41:
 11674  00141C  CFDB FFEB          	movff	plusw2,plusw0
 11675  001420  06E8               	decf	wreg,f,c
 11676  001422  E2FC               	bc	i2u415_41
 11677  001424  ECB6  F018         	call	_IncreaseByASecond	;wreg free
 11678  001428  EE20  F0BD         	lfsr	2,_DATE_TIME
 11679  00142C  0E0A               	movlw	10
 11680  00142E                     i2u416_41:
 11681  00142E  CFEB FFDB          	movff	plusw0,plusw2
 11682  001432  06E8               	decf	wreg,f,c
 11683  001434  E2FC               	bc	i2u416_41
 11684                           
 11685                           ;projMain.c: 61: STATE_SECONDS_REMAINING = (STATES[PRESENT_STATE].PERIOD + SECONDS_TO_AD
      +                          JUST_PART) - STATE_SECONDS-1;
 11686  001436  0100               	movlb	0	; () banked
 11687  001438  D8B1               	call	PL18	;call to abstracted procedure
 11688  00143A  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11689  00143C  5054               	movf	_STATE_SECONDS,w,c
 11690  00143E  5C35               	subwf	??_Timer0_10ms,w,c
 11691  001440  244F               	addwf	_SECONDS_TO_ADJUST_PART,w,c
 11692  001442  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 11693  001444  0436               	decf	??_Timer0_10ms+1,w,c
 11694  001446  6FE8               	movwf	_STATE_SECONDS_REMAINING& (0+255),b
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;projMain.c: 62: if (STATE_SECONDS_REMAINING == 0)
 11698  001448  51E8               	movf	_STATE_SECONDS_REMAINING& (0+255),w,b
 11699  00144A  E101               	bnz	i2l4196
 11700                           
 11701                           ; BSR set to: 0
 11702                           ;projMain.c: 63: FLAGS_1.bits.b0 = SET;
 11703  00144C  804E               	bsf	_FLAGS_1,0,c
 11704  00144E                     i2l4196:
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;projMain.c: 64: STATE_SECONDS++;
 11708  00144E  2A54               	incf	_STATE_SECONDS,f,c
 11709  001450                     i2l4198:
 11710                           
 11711                           ; BSR set to: 0
 11712                           ;projMain.c: 65: }
 11713                           ;projMain.c: 66: if (CENTI_SECOND_COUNT == 3) {
 11714  001450  0E03               	movlw	3
 11715  001452  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 11716  001454  E147               	bnz	i2l4220
 11717                           
 11718                           ; BSR set to: 0
 11719                           ;projMain.c: 67: if (STATE_SECONDS == 0) {
 11720  001456  5054               	movf	_STATE_SECONDS,w,c
 11721  001458  E145               	bnz	i2l4220
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;projMain.c: 68: if (SECONDS_TO_ADJUST != 0) {
 11725  00145A  51E2               	movf	_SECONDS_TO_ADJUST& (0+255),w,b
 11726  00145C  11E3               	iorwf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11727  00145E  E041               	bz	i2l1165
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;projMain.c: 69: if (SECONDS_TO_ADJUST > 0) {
 11731  001460  BFE3               	btfsc	(_SECONDS_TO_ADJUST+1)& (0+255),7,b
 11732  001462  D020               	goto	i2l4212
 11733  001464  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11734  001466  E102               	bnz	i2u421_40
 11735  001468  05E2               	decf	_SECONDS_TO_ADJUST& (0+255),w,b
 11736  00146A  E31C               	bnc	i2l4212
 11737  00146C                     i2u421_40:
 11738                           
 11739                           ; BSR set to: 0
 11740                           ;projMain.c: 70: SECONDS_TO_ADJUST_PART = 0.3*STATES[PRESENT_STATE].PERIOD;
 11741  00146C  D908               	call	PL154	;call to abstracted procedure
 11742  00146E  0E3E               	movlw	62
 11743  001470  6E12               	movwf	___ftmul@f2+2,c
 11744  001472  D894               	call	PL18	;call to abstracted procedure
 11745  001474  ECCB  F01A         	call	___lbtoft
 11746  001478  D8E3               	call	PL116	;call to abstracted procedure
 11747  00147A  EC82  F015         	call	___ftmul	;wreg free
 11748  00147E  D8E7               	call	PL118	;call to abstracted procedure
 11749  001480  ECA4  F016         	call	___fttol	;wreg free
 11750  001484  501C               	movf	?___fttol,w,c
 11751  001486  6E4F               	movwf	_SECONDS_TO_ADJUST_PART,c
 11752                           
 11753                           ;projMain.c: 71: if (SECONDS_TO_ADJUST_PART > SECONDS_TO_ADJUST)
 11754  001488  0100               	movlb	0	; () banked
 11755  00148A  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11756  00148C  0A80               	xorlw	128
 11757  00148E  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11758  001490  504F               	movf	_SECONDS_TO_ADJUST_PART,w,c
 11759  001492  5DE2               	subwf	_SECONDS_TO_ADJUST& (0+255),w,b
 11760  001494  0E80               	movlw	128
 11761  001496  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 11762  001498  0E7F               	movlw	127
 11763  00149A  5835               	subwfb	??_Timer0_10ms& (0+255),w,c
 11764  00149C  E21B               	bc	i2l4218
 11765                           
 11766                           ; BSR set to: 0
 11767                           ;projMain.c: 72: SECONDS_TO_ADJUST_PART = SECONDS_TO_ADJUST;
 11768  00149E  C0E2  F04F         	movff	_SECONDS_TO_ADJUST,_SECONDS_TO_ADJUST_PART
 11769  0014A2  D018               	goto	i2l4218
 11770  0014A4                     i2l4212:
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;projMain.c: 74: SECONDS_TO_ADJUST_PART = -0.3*STATES[PRESENT_STATE].PERIOD;
 11774  0014A4  D8EC               	call	PL154	;call to abstracted procedure
 11775  0014A6  0EBE               	movlw	190
 11776  0014A8  6E12               	movwf	___ftmul@f2+2,c
 11777  0014AA  D878               	call	PL18	;call to abstracted procedure
 11778  0014AC  ECCB  F01A         	call	___lbtoft
 11779  0014B0  D8C7               	call	PL116	;call to abstracted procedure
 11780  0014B2  EC82  F015         	call	___ftmul	;wreg free
 11781  0014B6  D8CB               	call	PL118	;call to abstracted procedure
 11782  0014B8  ECA4  F016         	call	___fttol	;wreg free
 11783  0014BC  501C               	movf	?___fttol,w,c
 11784  0014BE  6E4F               	movwf	_SECONDS_TO_ADJUST_PART,c
 11785                           
 11786                           ;projMain.c: 75: if (SECONDS_TO_ADJUST_PART < SECONDS_TO_ADJUST)
 11787  0014C0  0E80               	movlw	128
 11788  0014C2  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 11789  0014C4  0E7F               	movlw	127
 11790  0014C6  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11791  0014C8  0100               	movlb	0	; () banked
 11792  0014CA  51E2               	movf	_SECONDS_TO_ADJUST& (0+255),w,b
 11793  0014CC  5C4F               	subwf	_SECONDS_TO_ADJUST_PART,w,c
 11794  0014CE  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11795  0014D0  0A80               	xorlw	128
 11796  0014D2  D7E3               	goto	L9
 11797  0014D4                     i2l4218:
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;projMain.c: 77: }
 11801                           ;projMain.c: 78: SECONDS_TO_ADJUST -= SECONDS_TO_ADJUST_PART;
 11802  0014D4  504F               	movf	_SECONDS_TO_ADJUST_PART,w,c
 11803  0014D6  5FE2               	subwf	_SECONDS_TO_ADJUST& (0+255),f,b
 11804  0014D8  0E00               	movlw	0
 11805  0014DA  BE4F               	btfsc	_SECONDS_TO_ADJUST_PART,7,c
 11806  0014DC  0EFF               	movlw	255
 11807  0014DE  5BE3               	subwfb	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11808                           
 11809                           ;projMain.c: 79: } else
 11810  0014E0  D001               	goto	i2l4220
 11811  0014E2                     i2l1165:
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;projMain.c: 80: SECONDS_TO_ADJUST_PART = 0;
 11815  0014E2  6A4F               	clrf	_SECONDS_TO_ADJUST_PART,c
 11816  0014E4                     i2l4220:
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;projMain.c: 81: }
 11820                           ;projMain.c: 82: }
 11821                           ;projMain.c: 83: if (CENTI_SECOND_COUNT == 2) {
 11822  0014E4  0E02               	movlw	2
 11823  0014E6  1853               	xorwf	_CENTI_SECOND_COUNT,w,c
 11824  0014E8  E138               	bnz	i2l4236
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;projMain.c: 84: UINT8 ThisCycle = GetThisCycle();
 11828  0014EA  EC53  F01B         	call	i2_GetThisCycle	;wreg free
 11829  0014EE  6E3E               	movwf	Timer0_10ms@ThisCycle,c
 11830                           
 11831                           ; BSR set to: 0
 11832                           ;projMain.c: 85: if ((CYCLES[ThisCycle].START_STATE == PRESENT_STATE) && (STATE_SECONDS=
      +                          =0)) {
 11833  0014F0  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11834  0014F2  D896               	call	PL110	;call to abstracted procedure
 11835  0014F4  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11836  0014F6  18DE               	xorwf	postinc2,w,c
 11837  0014F8  E130               	bnz	i2l4236
 11838                           
 11839                           ; BSR set to: 0
 11840  0014FA  5054               	movf	_STATE_SECONDS,w,c
 11841  0014FC  E12E               	bnz	i2l4236
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;projMain.c: 86: SECONDS_TO_ADJUST = (DATE_TIME.SECOND) % (CYCLES[ThisCycle].PERIOD);
 11845  0014FE  C0BD  F001         	movff	_DATE_TIME,___almod@dividend
 11846  001502  C0BE  F002         	movff	_DATE_TIME+1,___almod@dividend+1
 11847  001506  C0BF  F003         	movff	_DATE_TIME+2,___almod@dividend+2
 11848  00150A  C0C0  F004         	movff	_DATE_TIME+3,___almod@dividend+3
 11849  00150E  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11850  001510  D86C               	call	PL36	;call to abstracted procedure
 11851  001512  D8B0               	call	PL138	;call to abstracted procedure
 11852  001514  C035  F005         	movff	??_Timer0_10ms,___almod@divisor
 11853  001518  C036  F006         	movff	??_Timer0_10ms+1,___almod@divisor+1
 11854  00151C  6A07               	clrf	___almod@divisor+2,c
 11855  00151E  6A08               	clrf	___almod@divisor+3,c
 11856  001520  EC50  F017         	call	___almod	;wreg free
 11857  001524  C001  F0E2         	movff	?___almod,_SECONDS_TO_ADJUST
 11858  001528  C002  F0E3         	movff	?___almod+1,_SECONDS_TO_ADJUST+1
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;projMain.c: 87: if (SECONDS_TO_ADJUST > (CYCLES[ThisCycle].PERIOD)/2)
 11862  00152C  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11863  00152E  D85D               	call	PL36	;call to abstracted procedure
 11864  001530  D8A1               	call	PL138	;call to abstracted procedure
 11865  001532  90D8               	bcf	status,0,c
 11866  001534  3036               	rrcf	??_Timer0_10ms+1,w,c
 11867  001536  6E38               	movwf	(??_Timer0_10ms+3)& (0+255),c
 11868  001538  3035               	rrcf	??_Timer0_10ms,w,c
 11869  00153A  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 11870  00153C  51E2               	movf	_SECONDS_TO_ADJUST& (0+255),w,b
 11871  00153E  5C37               	subwf	??_Timer0_10ms+2,w,c
 11872  001540  51E3               	movf	(_SECONDS_TO_ADJUST+1)& (0+255),w,b
 11873  001542  5838               	subwfb	??_Timer0_10ms+3,w,c
 11874  001544  E206               	bc	i2l4234
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;projMain.c: 88: SECONDS_TO_ADJUST -= CYCLES[ThisCycle].PERIOD;
 11878  001546  503E               	movf	Timer0_10ms@ThisCycle,w,c
 11879  001548  D850               	call	PL36	;call to abstracted procedure
 11880  00154A  50DE               	movf	postinc2,w,c
 11881  00154C  5FE2               	subwf	_SECONDS_TO_ADJUST& (0+255),f,b
 11882  00154E  50DD               	movf	postdec2,w,c
 11883  001550  5BE3               	subwfb	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11884  001552                     i2l4234:
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;projMain.c: 89: SECONDS_TO_ADJUST = -SECONDS_TO_ADJUST;
 11888  001552  6DE2               	negf	_SECONDS_TO_ADJUST& (0+255),b
 11889  001554  1FE3               	comf	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11890  001556  B0D8               	btfsc	status,0,c
 11891  001558  2BE3               	incf	(_SECONDS_TO_ADJUST+1)& (0+255),f,b
 11892  00155A                     i2l4236:
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;projMain.c: 90: }
 11896                           ;projMain.c: 91: }
 11897                           ;projMain.c: 92: if (CENTI_SECOND_COUNT == 1) {
 11898  00155A  0453               	decf	_CENTI_SECOND_COUNT,w,c
 11899  00155C  A4D8               	btfss	status,2,c
 11900  00155E  0012               	return	
 11901                           
 11902                           ; BSR set to: 0
 11903                           ;projMain.c: 93: UINT8 ThisCycle = GetThisCycle();
 11904  001560  EC53  F01B         	call	i2_GetThisCycle	;wreg free
 11905  001564  6E3A               	movwf	Timer0_10ms@ThisCycle_2914,c
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;projMain.c: 94: NEXT_STATE = PRESENT_STATE+1;
 11909  001566  29EA               	incf	_PRESENT_STATE& (0+255),w,b
 11910  001568  6FE9               	movwf	_NEXT_STATE& (0+255),b
 11911                           
 11912                           ; BSR set to: 0
 11913                           ;projMain.c: 95: if (NEXT_STATE > CYCLES[ThisCycle].END_STATE) {
 11914  00156A  503A               	movf	Timer0_10ms@ThisCycle_2914,w,c
 11915  00156C  0D04               	mullw	4
 11916  00156E  0E03               	movlw	low (_CYCLES+3)
 11917  001570  24F3               	addwf	prodl,w,c
 11918  001572  6ED9               	movwf	fsr2l,c
 11919  001574  0E01               	movlw	high (_CYCLES+3)
 11920  001576  20F4               	addwfc	prodh,w,c
 11921  001578  6EDA               	movwf	fsr2h,c
 11922  00157A  51E9               	movf	_NEXT_STATE& (0+255),w,b
 11923  00157C  5CDE               	subwf	postinc2,w,c
 11924  00157E  B0D8               	btfsc	status,0,c
 11925  001580  0012               	return	
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;projMain.c: 96: PRESENT_EVENT = NEXT_EVENT;
 11929  001582  C05D  F05E         	movff	_NEXT_EVENT,_PRESENT_EVENT
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;projMain.c: 97: if (PRESENT_EVENT <0)
 11933  001586  AE5E               	btfss	_PRESENT_EVENT,7,c
 11934  001588  D002               	goto	i2l4250
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;projMain.c: 98: ThisCycle = 0;
 11938  00158A  6A3A               	clrf	Timer0_10ms@ThisCycle_2914,c
 11939  00158C  D002               	goto	i2l1177
 11940  00158E                     i2l4250:
 11941                           
 11942                           ; BSR set to: 0
 11943                           ;projMain.c: 99: else
 11944                           ;projMain.c: 100: ThisCycle = EVENTS[PRESENT_EVENT].CYCLE;
 11945  00158E  D835               	call	PL38	;call to abstracted procedure
 11946  001590  6E3A               	movwf	Timer0_10ms@ThisCycle_2914,c
 11947  001592                     i2l1177:
 11948                           
 11949                           ; BSR set to: 0
 11950                           ;projMain.c: 101: NEXT_STATE = CYCLES[ThisCycle].START_STATE;
 11951  001592  503A               	movf	Timer0_10ms@ThisCycle_2914,w,c
 11952  001594  D845               	call	PL110	;call to abstracted procedure
 11953  001596  50DF               	movf	indf2,w,c
 11954  001598  6FE9               	movwf	_NEXT_STATE& (0+255),b
 11955                           
 11956                           ; BSR set to: 0
 11957  00159A  0012               	return		;funcret
 11958  00159C                     __end_of_Timer0_10ms:
 11959                           	opt stack 0
 11960  00159C                     PL18:
 11961                           	opt stack 15
 11962  00159C  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11963  00159E  0D06               	mullw	6
 11964  0015A0  0EF0               	movlw	low _STATES
 11965  0015A2  24F3               	addwf	prodl,w,c
 11966  0015A4  6ED9               	movwf	fsr2l,c
 11967  0015A6  0E06               	movlw	high _STATES
 11968  0015A8  20F4               	addwfc	prodh,w,c
 11969  0015AA  6EDA               	movwf	fsr2h,c
 11970  0015AC  50DF               	movf	indf2,w,c
 11971  0015AE  0012               	return	
 11972  0015B0                     __end_ofPL18:
 11973                           	opt stack 0
 11974  0015B0                     PL26:
 11975                           	opt stack 15
 11976  0015B0  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 11977  0015B2  6A38               	clrf	(??_Timer0_10ms+3)& (0+255),c
 11978  0015B4  5035               	movf	??_Timer0_10ms,w,c
 11979  0015B6  5C37               	subwf	??_Timer0_10ms+2,w,c
 11980  0015B8  5038               	movf	??_Timer0_10ms+3,w,c
 11981  0015BA  0A80               	xorlw	128
 11982  0015BC  6E39               	movwf	(??_Timer0_10ms+4)& (0+255),c
 11983  0015BE  5036               	movf	??_Timer0_10ms+1,w,c
 11984  0015C0  0A80               	xorlw	128
 11985  0015C2  5839               	subwfb	(??_Timer0_10ms+4)& (0+255),w,c
 11986  0015C4  0012               	return	
 11987  0015C6                     __end_ofPL26:
 11988                           	opt stack 0
 11989  0015C6                     PL28:
 11990                           	opt stack 15
 11991  0015C6  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 11992  0015C8  6ED9               	movwf	fsr2l,c
 11993  0015CA  6ADA               	clrf	fsr2h,c
 11994  0015CC  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 11995  0015CE  0D06               	mullw	6
 11996  0015D0  0EF0               	movlw	low _STATES
 11997  0015D2  6E35               	movwf	??_Timer0_10ms& (0+255),c
 11998  0015D4  0E06               	movlw	high _STATES
 11999  0015D6  6E36               	movwf	(??_Timer0_10ms+1)& (0+255),c
 12000  0015D8  0E03               	movlw	3
 12001  0015DA  2635               	addwf	??_Timer0_10ms,f,c
 12002  0015DC  0E00               	movlw	0
 12003  0015DE  2236               	addwfc	??_Timer0_10ms+1,f,c
 12004  0015E0  50F3               	movf	prodl,w,c
 12005  0015E2  2635               	addwf	??_Timer0_10ms,f,c
 12006  0015E4  50F4               	movf	prodh,w,c
 12007  0015E6  2236               	addwfc	??_Timer0_10ms+1,f,c
 12008  0015E8  0012               	return	
 12009  0015EA                     __end_ofPL28:
 12010                           	opt stack 0
 12011  0015EA                     PL36:
 12012                           	opt stack 15
 12013  0015EA  0D04               	mullw	4
 12014  0015EC  0E00               	movlw	low _CYCLES
 12015  0015EE  24F3               	addwf	prodl,w,c
 12016  0015F0  6ED9               	movwf	fsr2l,c
 12017  0015F2  0E01               	movlw	high _CYCLES
 12018  0015F4  20F4               	addwfc	prodh,w,c
 12019  0015F6  6EDA               	movwf	fsr2h,c
 12020  0015F8  0012               	return	
 12021  0015FA                     __end_ofPL36:
 12022                           	opt stack 0
 12023  0015FA                     PL38:
 12024                           	opt stack 21
 12025  0015FA  505E               	movf	_PRESENT_EVENT,w,c
 12026  0015FC  0D0A               	mullw	10
 12027  0015FE  0E08               	movlw	low (_EVENTS+8)
 12028  001600  24F3               	addwf	prodl,w,c
 12029  001602  6ED9               	movwf	fsr2l,c
 12030  001604  0E02               	movlw	high (_EVENTS+8)
 12031  001606  20F4               	addwfc	prodh,w,c
 12032  001608  6EDA               	movwf	fsr2h,c
 12033  00160A  50DF               	movf	indf2,w,c
 12034  00160C  0012               	return	
 12035  00160E                     __end_ofPL38:
 12036                           	opt stack 0
 12037  00160E                     PL42:
 12038                           	opt stack 15
 12039  00160E  51EA               	movf	_PRESENT_STATE& (0+255),w,b
 12040  001610  0D06               	mullw	6
 12041  001612  0EF5               	movlw	low (_STATES+5)
 12042  001614  24F3               	addwf	prodl,w,c
 12043  001616  6ED9               	movwf	fsr2l,c
 12044  001618  0E06               	movlw	high (_STATES+5)
 12045  00161A  20F4               	addwfc	prodh,w,c
 12046  00161C  6EDA               	movwf	fsr2h,c
 12047  00161E  0012               	return	
 12048  001620                     __end_ofPL42:
 12049                           	opt stack 0
 12050  001620                     PL110:
 12051                           	opt stack 15
 12052  001620  0D04               	mullw	4
 12053  001622  0E02               	movlw	low (_CYCLES+2)
 12054  001624  24F3               	addwf	prodl,w,c
 12055  001626  6ED9               	movwf	fsr2l,c
 12056  001628  0E01               	movlw	high (_CYCLES+2)
 12057  00162A  20F4               	addwfc	prodh,w,c
 12058  00162C  6EDA               	movwf	fsr2h,c
 12059  00162E  0012               	return	
 12060  001630                     __end_ofPL110:
 12061                           	opt stack 0
 12062  001630                     PL112:
 12063                           	opt stack 15
 12064  001630  2435               	addwf	??_Timer0_10ms,w,c
 12065  001632  6EE1               	movwf	fsr1l,c
 12066  001634  0E00               	movlw	0
 12067  001636  2036               	addwfc	??_Timer0_10ms+1,w,c
 12068  001638  6EE2               	movwf	fsr1h,c
 12069  00163A  50E7               	movf	indf1,w,c
 12070  00163C  6E37               	movwf	(??_Timer0_10ms+2)& (0+255),c
 12071  00163E  0012               	return	
 12072  001640                     __end_ofPL112:
 12073                           	opt stack 0
 12074  001640                     PL116:
 12075                           	opt stack 15
 12076  001640  C009  F00D         	movff	?___lbtoft,___ftmul@f1
 12077  001644  C00A  F00E         	movff	?___lbtoft+1,___ftmul@f1+1
 12078  001648  C00B  F00F         	movff	?___lbtoft+2,___ftmul@f1+2
 12079  00164C  0012               	return	
 12080  00164E                     __end_ofPL116:
 12081                           	opt stack 0
 12082  00164E                     PL118:
 12083                           	opt stack 15
 12084  00164E  C00D  F01C         	movff	?___ftmul,___fttol@f1
 12085  001652  C00E  F01D         	movff	?___ftmul+1,___fttol@f1+1
 12086  001656  C00F  F01E         	movff	?___ftmul+2,___fttol@f1+2
 12087  00165A  0012               	return	
 12088  00165C                     __end_ofPL118:
 12089                           	opt stack 0
 12090  00165C                     PL122:
 12091                           	opt stack 15
 12092  00165C  0F3C               	addlw	low Timer0_10ms@OutForThePorts
 12093  00165E  6EE1               	movwf	fsr1l,c
 12094  001660  6AE2               	clrf	fsr1h,c
 12095  001662  50E7               	movf	indf1,w,c
 12096  001664  1037               	iorwf	??_Timer0_10ms+2,w,c
 12097  001666  6EDF               	movwf	indf2,c
 12098  001668  0012               	return	
 12099  00166A                     __end_ofPL122:
 12100                           	opt stack 0
 12101  00166A                     PL124:
 12102                           	opt stack 15
 12103  00166A  6A36               	clrf	(??_Timer0_10ms+1)& (0+255),c
 12104  00166C  2635               	addwf	??_Timer0_10ms,f,c
 12105  00166E  0E00               	movlw	0
 12106  001670  2236               	addwfc	??_Timer0_10ms+1,f,c
 12107  001672  0C00               	retlw	0
 12108  001674                     __end_ofPL124:
 12109                           	opt stack 0
 12110  001674                     PL138:
 12111                           	opt stack 15
 12112  001674  CFDE F035          	movff	postinc2,??_Timer0_10ms
 12113  001678  CFDD F036          	movff	postdec2,??_Timer0_10ms+1
 12114  00167C  0012               	return	
 12115  00167E                     __end_ofPL138:
 12116                           	opt stack 0
 12117  00167E                     PL154:
 12118                           	opt stack 15
 12119  00167E  0E9A               	movlw	154
 12120  001680  6E10               	movwf	___ftmul@f2,c
 12121  001682  0E99               	movlw	153
 12122  001684  6E11               	movwf	___ftmul@f2+1,c
 12123  001686  0C99               	retlw	153
 12124  001688                     __end_ofPL154:
 12125                           	opt stack 0
 12126                           tosu	equ	0xFFF
 12127                           tosh	equ	0xFFE
 12128                           tosl	equ	0xFFD
 12129                           pclatu	equ	0xFFB
 12130                           pclath	equ	0xFFA
 12131                           tblptru	equ	0xFF8
 12132                           tblptrh	equ	0xFF7
 12133                           tblptrl	equ	0xFF6
 12134                           tablat	equ	0xFF5
 12135                           prodh	equ	0xFF4
 12136                           prodl	equ	0xFF3
 12137                           intcon	equ	0xFF2
 12138                           postinc0	equ	0xFEE
 12139                           plusw0	equ	0xFEB
 12140                           fsr0h	equ	0xFEA
 12141                           fsr0l	equ	0xFE9
 12142                           wreg	equ	0xFE8
 12143                           indf1	equ	0xFE7
 12144                           postinc1	equ	0xFE6
 12145                           postdec1	equ	0xFE5
 12146                           plusw1	equ	0xFE3
 12147                           fsr1h	equ	0xFE2
 12148                           fsr1l	equ	0xFE1
 12149                           indf2	equ	0xFDF
 12150                           postinc2	equ	0xFDE
 12151                           postdec2	equ	0xFDD
 12152                           plusw2	equ	0xFDB
 12153                           fsr2h	equ	0xFDA
 12154                           fsr2l	equ	0xFD9
 12155                           status	equ	0xFD8
 12156                           
 12157 ;; *************** function i2_GetThisCycle *****************
 12158 ;; Defined at:
 12159 ;;		line 229 in file "libs/funcs.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;		None
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;		None
 12164 ;; Return value:  Size  Location     Type
 12165 ;;                  1    wreg      unsigned char 
 12166 ;; Registers used:
 12167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12168 ;; Tracked objects:
 12169 ;;		On entry : 3F/0
 12170 ;;		On exit  : 3F/0
 12171 ;;		Unchanged: 3F/0
 12172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12177 ;;Total ram usage:        0 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; This function calls:
 12180 ;;		Nothing
 12181 ;; This function is called by:
 12182 ;;		_Timer0_10ms
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           	psect	text54
 12187  0036A6                     __ptext54:
 12188                           	opt stack 0
 12189  0036A6                     i2_GetThisCycle:
 12190                           	opt stack 19
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;funcs.c: 230: if (PRESENT_EVENT <0)
 12194                           
 12195                           ; BSR set to: 0
 12196                           ;incstack = 0
 12197  0036A6  BE5E               	btfsc	_PRESENT_EVENT,7,c
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;funcs.c: 231: return 0;
 12201  0036A8  0C00               	retlw	0
 12202                           
 12203                           ; BSR set to: 0
 12204                           ;funcs.c: 232: else
 12205                           ;funcs.c: 233: return EVENTS[PRESENT_EVENT].CYCLE;
 12206  0036AA  EFFD  F00A         	goto	PL38	;call to abstracted procedure
 12207  0036AE                     __end_ofi2_GetThisCycle:
 12208                           	opt stack 0
 12209                           tosu	equ	0xFFF
 12210                           tosh	equ	0xFFE
 12211                           tosl	equ	0xFFD
 12212                           pclatu	equ	0xFFB
 12213                           pclath	equ	0xFFA
 12214                           tblptru	equ	0xFF8
 12215                           tblptrh	equ	0xFF7
 12216                           tblptrl	equ	0xFF6
 12217                           tablat	equ	0xFF5
 12218                           prodh	equ	0xFF4
 12219                           prodl	equ	0xFF3
 12220                           intcon	equ	0xFF2
 12221                           postinc0	equ	0xFEE
 12222                           plusw0	equ	0xFEB
 12223                           fsr0h	equ	0xFEA
 12224                           fsr0l	equ	0xFE9
 12225                           wreg	equ	0xFE8
 12226                           indf1	equ	0xFE7
 12227                           postinc1	equ	0xFE6
 12228                           postdec1	equ	0xFE5
 12229                           plusw1	equ	0xFE3
 12230                           fsr1h	equ	0xFE2
 12231                           fsr1l	equ	0xFE1
 12232                           indf2	equ	0xFDF
 12233                           postinc2	equ	0xFDE
 12234                           postdec2	equ	0xFDD
 12235                           plusw2	equ	0xFDB
 12236                           fsr2h	equ	0xFDA
 12237                           fsr2l	equ	0xFD9
 12238                           status	equ	0xFD8
 12239                           
 12240 ;; *************** function ___lbtoft *****************
 12241 ;; Defined at:
 12242 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbtoft.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;  c               1    wreg     unsigned char 
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;  c               1   11[COMRAM] unsigned char 
 12247 ;; Return value:  Size  Location     Type
 12248 ;;                  3    8[COMRAM] float 
 12249 ;; Registers used:
 12250 ;;		wreg, status,2, status,0, cstack
 12251 ;; Tracked objects:
 12252 ;;		On entry : 3F/0
 12253 ;;		On exit  : 0/0
 12254 ;;		Unchanged: 0/0
 12255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12256 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12259 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12260 ;;Total ram usage:        4 bytes
 12261 ;; Hardware stack levels used:    1
 12262 ;; Hardware stack levels required when called:    1
 12263 ;; This function calls:
 12264 ;;		___ftpack
 12265 ;; This function is called by:
 12266 ;;		_Timer0_10ms
 12267 ;; This function uses a non-reentrant model
 12268 ;;
 12269                           
 12270                           	psect	text55
 12271  003596                     __ptext55:
 12272                           	opt stack 0
 12273  003596                     ___lbtoft:
 12274                           	opt stack 18
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;incstack = 0
 12278                           ;___lbtoft@c stored from wreg
 12279  003596  6E0C               	movwf	___lbtoft@c,c
 12280  003598  500C               	movf	___lbtoft@c,w,c
 12281  00359A  6E01               	movwf	___ftpack@arg,c
 12282  00359C  6A02               	clrf	___ftpack@arg+1,c
 12283  00359E  6A03               	clrf	___ftpack@arg+2,c
 12284  0035A0  0E8E               	movlw	142
 12285  0035A2  6E04               	movwf	___ftpack@exp,c
 12286  0035A4  0E00               	movlw	0
 12287  0035A6  6E05               	movwf	___ftpack@sign,c
 12288  0035A8  EC9D  F017         	call	___ftpack	;wreg free
 12289  0035AC  C001  F009         	movff	?___ftpack,?___lbtoft
 12290  0035B0  C002  F00A         	movff	?___ftpack+1,?___lbtoft+1
 12291  0035B4  C003  F00B         	movff	?___ftpack+2,?___lbtoft+2
 12292  0035B8  0012               	return		;funcret
 12293  0035BA                     __end_of___lbtoft:
 12294                           	opt stack 0
 12295                           tosu	equ	0xFFF
 12296                           tosh	equ	0xFFE
 12297                           tosl	equ	0xFFD
 12298                           pclatu	equ	0xFFB
 12299                           pclath	equ	0xFFA
 12300                           tblptru	equ	0xFF8
 12301                           tblptrh	equ	0xFF7
 12302                           tblptrl	equ	0xFF6
 12303                           tablat	equ	0xFF5
 12304                           prodh	equ	0xFF4
 12305                           prodl	equ	0xFF3
 12306                           intcon	equ	0xFF2
 12307                           postinc0	equ	0xFEE
 12308                           plusw0	equ	0xFEB
 12309                           fsr0h	equ	0xFEA
 12310                           fsr0l	equ	0xFE9
 12311                           wreg	equ	0xFE8
 12312                           indf1	equ	0xFE7
 12313                           postinc1	equ	0xFE6
 12314                           postdec1	equ	0xFE5
 12315                           plusw1	equ	0xFE3
 12316                           fsr1h	equ	0xFE2
 12317                           fsr1l	equ	0xFE1
 12318                           indf2	equ	0xFDF
 12319                           postinc2	equ	0xFDE
 12320                           postdec2	equ	0xFDD
 12321                           plusw2	equ	0xFDB
 12322                           fsr2h	equ	0xFDA
 12323                           fsr2l	equ	0xFD9
 12324                           status	equ	0xFD8
 12325                           
 12326 ;; *************** function ___fttol *****************
 12327 ;; Defined at:
 12328 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;  f1              3   27[COMRAM] float 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  lval            4   37[COMRAM] unsigned long 
 12333 ;;  exp1            1   41[COMRAM] unsigned char 
 12334 ;;  sign1           1   36[COMRAM] unsigned char 
 12335 ;; Return value:  Size  Location     Type
 12336 ;;                  4   27[COMRAM] long 
 12337 ;; Registers used:
 12338 ;;		wreg, status,2, status,0
 12339 ;; Tracked objects:
 12340 ;;		On entry : 0/0
 12341 ;;		On exit  : 0/0
 12342 ;;		Unchanged: 0/0
 12343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12344 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12345 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12346 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12347 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12348 ;;Total ram usage:       15 bytes
 12349 ;; Hardware stack levels used:    1
 12350 ;; This function calls:
 12351 ;;		Nothing
 12352 ;; This function is called by:
 12353 ;;		_Timer0_10ms
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           	psect	text56
 12358  002D48                     __ptext56:
 12359                           	opt stack 0
 12360  002D48                     ___fttol:
 12361                           	opt stack 19
 12362                           
 12363                           ;incstack = 0
 12364  002D48  C01E  F020         	movff	___fttol@f1+2,??___fttol
 12365  002D4C  6A21               	clrf	(??___fttol+1)& (0+255),c
 12366  002D4E  6A22               	clrf	(??___fttol+2)& (0+255),c
 12367  002D50  341D               	rlcf	___fttol@f1+1,w,c
 12368  002D52  3620               	rlcf	??___fttol& (0+255),f,c
 12369  002D54  E301               	bnc	u346_41
 12370  002D56  8021               	bsf	(??___fttol+1)& (0+255),0,c
 12371  002D58                     u346_41:
 12372  002D58  5020               	movf	??___fttol,w,c
 12373  002D5A  6E2A               	movwf	___fttol@exp1,c
 12374  002D5C  502A               	movf	___fttol@exp1,w,c
 12375  002D5E  E105               	bnz	i2l3808
 12376  002D60                     i2l3806:
 12377  002D60  6A1C               	clrf	?___fttol,c
 12378  002D62  6A1D               	clrf	?___fttol+1,c
 12379  002D64  6A1E               	clrf	?___fttol+2,c
 12380  002D66  6A1F               	clrf	?___fttol+3,c
 12381  002D68  0012               	return	
 12382  002D6A                     i2l3808:
 12383  002D6A  0E17               	movlw	23
 12384  002D6C  6E20               	movwf	??___fttol& (0+255),c
 12385  002D6E  C01C  F021         	movff	___fttol@f1,??___fttol+1
 12386  002D72  C01D  F022         	movff	___fttol@f1+1,??___fttol+2
 12387  002D76  C01E  F023         	movff	___fttol@f1+2,??___fttol+3
 12388  002D7A  2820               	incf	??___fttol,w,c
 12389  002D7C  6E24               	movwf	(??___fttol+4)& (0+255),c
 12390  002D7E  D004               	goto	i2u348_40
 12391  002D80                     i2u348_45:
 12392  002D80  90D8               	bcf	status,0,c
 12393  002D82  3223               	rrcf	??___fttol+3,f,c
 12394  002D84  3222               	rrcf	??___fttol+2,f,c
 12395  002D86  3221               	rrcf	??___fttol+1,f,c
 12396  002D88                     i2u348_40:
 12397  002D88  2E24               	decfsz	(??___fttol+4)& (0+255),f,c
 12398  002D8A  D7FA               	goto	i2u348_45
 12399  002D8C  5021               	movf	??___fttol+1,w,c
 12400  002D8E  6E25               	movwf	___fttol@sign1,c
 12401  002D90  8E1D               	bsf	___fttol@f1+1,7,c
 12402  002D92  6A1E               	clrf	___fttol@f1+2,c
 12403  002D94  501C               	movf	___fttol@f1,w,c
 12404  002D96  6E26               	movwf	___fttol@lval,c
 12405  002D98  501D               	movf	___fttol@f1+1,w,c
 12406  002D9A  6E27               	movwf	___fttol@lval+1,c
 12407  002D9C  501E               	movf	___fttol@f1+2,w,c
 12408  002D9E  6E28               	movwf	___fttol@lval+2,c
 12409  002DA0  6A29               	clrf	___fttol@lval+3,c
 12410  002DA2  0E8E               	movlw	142
 12411  002DA4  5E2A               	subwf	___fttol@exp1,f,c
 12412  002DA6  AE2A               	btfss	___fttol@exp1,7,c
 12413  002DA8  D00C               	goto	i2l3828
 12414  002DAA  502A               	movf	___fttol@exp1,w,c
 12415  002DAC  0A80               	xorlw	128
 12416  002DAE  0F8F               	addlw	143
 12417  002DB0  E3D7               	bnc	i2l3806
 12418  002DB2                     i2l3824:
 12419  002DB2  90D8               	bcf	status,0,c
 12420  002DB4  3229               	rrcf	___fttol@lval+3,f,c
 12421  002DB6  3228               	rrcf	___fttol@lval+2,f,c
 12422  002DB8  3227               	rrcf	___fttol@lval+1,f,c
 12423  002DBA  3226               	rrcf	___fttol@lval,f,c
 12424  002DBC  3E2A               	incfsz	___fttol@exp1,f,c
 12425  002DBE  D7F9               	goto	i2l3824
 12426  002DC0  D00C               	goto	i2l3836
 12427  002DC2                     i2l3828:
 12428  002DC2  0E17               	movlw	23
 12429  002DC4  642A               	cpfsgt	___fttol@exp1,c
 12430  002DC6  D007               	goto	i2l3834
 12431  002DC8  D7CB               	goto	i2l3806
 12432  002DCA                     i2l3832:
 12433  002DCA  90D8               	bcf	status,0,c
 12434  002DCC  3626               	rlcf	___fttol@lval,f,c
 12435  002DCE  3627               	rlcf	___fttol@lval+1,f,c
 12436  002DD0  3628               	rlcf	___fttol@lval+2,f,c
 12437  002DD2  3629               	rlcf	___fttol@lval+3,f,c
 12438  002DD4  062A               	decf	___fttol@exp1,f,c
 12439  002DD6                     i2l3834:
 12440  002DD6  502A               	movf	___fttol@exp1,w,c
 12441  002DD8  E1F8               	bnz	i2l3832
 12442  002DDA                     i2l3836:
 12443  002DDA  5025               	movf	___fttol@sign1,w,c
 12444  002DDC  E008               	bz	i2l3840
 12445  002DDE  1E29               	comf	___fttol@lval+3,f,c
 12446  002DE0  1E28               	comf	___fttol@lval+2,f,c
 12447  002DE2  1E27               	comf	___fttol@lval+1,f,c
 12448  002DE4  6C26               	negf	___fttol@lval,c
 12449  002DE6  0E00               	movlw	0
 12450  002DE8  2227               	addwfc	___fttol@lval+1,f,c
 12451  002DEA  2228               	addwfc	___fttol@lval+2,f,c
 12452  002DEC  2229               	addwfc	___fttol@lval+3,f,c
 12453  002DEE                     i2l3840:
 12454  002DEE  C026  F01C         	movff	___fttol@lval,?___fttol
 12455  002DF2  C027  F01D         	movff	___fttol@lval+1,?___fttol+1
 12456  002DF6  C028  F01E         	movff	___fttol@lval+2,?___fttol+2
 12457  002DFA  C029  F01F         	movff	___fttol@lval+3,?___fttol+3
 12458  002DFE  0012               	return		;funcret
 12459  002E00                     __end_of___fttol:
 12460                           	opt stack 0
 12461                           tosu	equ	0xFFF
 12462                           tosh	equ	0xFFE
 12463                           tosl	equ	0xFFD
 12464                           pclatu	equ	0xFFB
 12465                           pclath	equ	0xFFA
 12466                           tblptru	equ	0xFF8
 12467                           tblptrh	equ	0xFF7
 12468                           tblptrl	equ	0xFF6
 12469                           tablat	equ	0xFF5
 12470                           prodh	equ	0xFF4
 12471                           prodl	equ	0xFF3
 12472                           intcon	equ	0xFF2
 12473                           postinc0	equ	0xFEE
 12474                           plusw0	equ	0xFEB
 12475                           fsr0h	equ	0xFEA
 12476                           fsr0l	equ	0xFE9
 12477                           wreg	equ	0xFE8
 12478                           indf1	equ	0xFE7
 12479                           postinc1	equ	0xFE6
 12480                           postdec1	equ	0xFE5
 12481                           plusw1	equ	0xFE3
 12482                           fsr1h	equ	0xFE2
 12483                           fsr1l	equ	0xFE1
 12484                           indf2	equ	0xFDF
 12485                           postinc2	equ	0xFDE
 12486                           postdec2	equ	0xFDD
 12487                           plusw2	equ	0xFDB
 12488                           fsr2h	equ	0xFDA
 12489                           fsr2l	equ	0xFD9
 12490                           status	equ	0xFD8
 12491                           
 12492 ;; *************** function ___ftmul *****************
 12493 ;; Defined at:
 12494 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
 12495 ;; Parameters:    Size  Location     Type
 12496 ;;  f1              3   12[COMRAM] float 
 12497 ;;  f2              3   15[COMRAM] float 
 12498 ;; Auto vars:     Size  Location     Type
 12499 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 12500 ;;  sign            1   26[COMRAM] unsigned char 
 12501 ;;  cntr            1   25[COMRAM] unsigned char 
 12502 ;;  exp             1   21[COMRAM] unsigned char 
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  3   12[COMRAM] float 
 12505 ;; Registers used:
 12506 ;;		wreg, status,2, status,0, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12512 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12513 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12514 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12515 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12516 ;;Total ram usage:       15 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    1
 12519 ;; This function calls:
 12520 ;;		___ftpack
 12521 ;; This function is called by:
 12522 ;;		_Timer0_10ms
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           	psect	text57
 12527  002B04                     __ptext57:
 12528                           	opt stack 0
 12529  002B04                     ___ftmul:
 12530                           	opt stack 18
 12531                           
 12532                           ;incstack = 0
 12533  002B04  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 12534  002B08  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12535  002B0A  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12536  002B0C  340E               	rlcf	___ftmul@f1+1,w,c
 12537  002B0E  3613               	rlcf	??___ftmul& (0+255),f,c
 12538  002B10  E301               	bnc	u328_41
 12539  002B12  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12540  002B14                     u328_41:
 12541  002B14  5013               	movf	??___ftmul,w,c
 12542  002B16  6E16               	movwf	___ftmul@exp,c
 12543  002B18  5016               	movf	___ftmul@exp,w,c
 12544  002B1A  E101               	bnz	i2l3684
 12545  002B1C  D053               	goto	PL142	;call to abstracted procedure
 12546  002B1E                     i2l3684:
 12547  002B1E  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 12548  002B22  6A14               	clrf	(??___ftmul+1)& (0+255),c
 12549  002B24  6A15               	clrf	(??___ftmul+2)& (0+255),c
 12550  002B26  3411               	rlcf	___ftmul@f2+1,w,c
 12551  002B28  3613               	rlcf	??___ftmul& (0+255),f,c
 12552  002B2A  E301               	bnc	u330_41
 12553  002B2C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 12554  002B2E                     u330_41:
 12555  002B2E  5013               	movf	??___ftmul,w,c
 12556  002B30  6E1B               	movwf	___ftmul@sign,c
 12557  002B32  501B               	movf	___ftmul@sign,w,c
 12558  002B34  E101               	bnz	i2l3688
 12559  002B36  D046               	goto	PL142	;call to abstracted procedure
 12560  002B38                     i2l3688:
 12561  002B38  501B               	movf	___ftmul@sign,w,c
 12562  002B3A  0F7B               	addlw	123
 12563  002B3C  2616               	addwf	___ftmul@exp,f,c
 12564  002B3E  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 12565  002B42  5012               	movf	___ftmul@f2+2,w,c
 12566  002B44  1A1B               	xorwf	___ftmul@sign,f,c
 12567  002B46  0E80               	movlw	128
 12568  002B48  161B               	andwf	___ftmul@sign,f,c
 12569  002B4A  8E0E               	bsf	___ftmul@f1+1,7,c
 12570  002B4C  8E11               	bsf	___ftmul@f2+1,7,c
 12571  002B4E  0E00               	movlw	0
 12572  002B50  1612               	andwf	___ftmul@f2+2,f,c
 12573  002B52  6A17               	clrf	___ftmul@f3_as_product,c
 12574  002B54  6A18               	clrf	___ftmul@f3_as_product+1,c
 12575  002B56  6A19               	clrf	___ftmul@f3_as_product+2,c
 12576  002B58  0E07               	movlw	7
 12577  002B5A  6E1A               	movwf	___ftmul@cntr,c
 12578  002B5C                     i2l3702:
 12579  002B5C  B00D               	btfsc	___ftmul@f1,0,c
 12580  002B5E  D82B               	call	PL114	;call to abstracted procedure
 12581  002B60                     i2l3706:
 12582  002B60  90D8               	bcf	status,0,c
 12583  002B62  320F               	rrcf	___ftmul@f1+2,f,c
 12584  002B64  320E               	rrcf	___ftmul@f1+1,f,c
 12585  002B66  320D               	rrcf	___ftmul@f1,f,c
 12586  002B68  90D8               	bcf	status,0,c
 12587  002B6A  3610               	rlcf	___ftmul@f2,f,c
 12588  002B6C  3611               	rlcf	___ftmul@f2+1,f,c
 12589  002B6E  3612               	rlcf	___ftmul@f2+2,f,c
 12590  002B70  2E1A               	decfsz	___ftmul@cntr,f,c
 12591  002B72  D7F4               	goto	i2l3702
 12592  002B74  0E09               	movlw	9
 12593  002B76  6E1A               	movwf	___ftmul@cntr,c
 12594  002B78                     i2l3712:
 12595  002B78  B00D               	btfsc	___ftmul@f1,0,c
 12596  002B7A  D81D               	call	PL114	;call to abstracted procedure
 12597  002B7C                     i2l3716:
 12598  002B7C  90D8               	bcf	status,0,c
 12599  002B7E  320F               	rrcf	___ftmul@f1+2,f,c
 12600  002B80  320E               	rrcf	___ftmul@f1+1,f,c
 12601  002B82  320D               	rrcf	___ftmul@f1,f,c
 12602  002B84  90D8               	bcf	status,0,c
 12603  002B86  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 12604  002B88  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 12605  002B8A  3217               	rrcf	___ftmul@f3_as_product,f,c
 12606  002B8C  2E1A               	decfsz	___ftmul@cntr,f,c
 12607  002B8E  D7F4               	goto	i2l3712
 12608  002B90  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 12609  002B94  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 12610  002B98  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 12611  002B9C  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 12612  002BA0  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 12613  002BA4  EC9D  F017         	call	___ftpack	;wreg free
 12614  002BA8  C001  F00D         	movff	?___ftpack,?___ftmul
 12615  002BAC  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 12616  002BB0  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 12617  002BB4  0012               	return		;funcret
 12618  002BB6                     __end_of___ftmul:
 12619                           	opt stack 0
 12620  002BB6                     PL114:
 12621                           	opt stack 18
 12622  002BB6  5010               	movf	___ftmul@f2,w,c
 12623  002BB8  2617               	addwf	___ftmul@f3_as_product,f,c
 12624  002BBA  5011               	movf	___ftmul@f2+1,w,c
 12625  002BBC  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 12626  002BBE  5012               	movf	___ftmul@f2+2,w,c
 12627  002BC0  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 12628  002BC2  0012               	return	
 12629  002BC4                     __end_ofPL114:
 12630                           	opt stack 0
 12631  002BC4                     PL142:
 12632                           	opt stack 18
 12633  002BC4  6A0D               	clrf	?___ftmul,c
 12634  002BC6  6A0E               	clrf	?___ftmul+1,c
 12635  002BC8  6A0F               	clrf	?___ftmul+2,c
 12636  002BCA  0012               	return	
 12637  002BCC                     __end_ofPL142:
 12638                           	opt stack 0
 12639                           tosu	equ	0xFFF
 12640                           tosh	equ	0xFFE
 12641                           tosl	equ	0xFFD
 12642                           pclatu	equ	0xFFB
 12643                           pclath	equ	0xFFA
 12644                           tblptru	equ	0xFF8
 12645                           tblptrh	equ	0xFF7
 12646                           tblptrl	equ	0xFF6
 12647                           tablat	equ	0xFF5
 12648                           prodh	equ	0xFF4
 12649                           prodl	equ	0xFF3
 12650                           intcon	equ	0xFF2
 12651                           postinc0	equ	0xFEE
 12652                           plusw0	equ	0xFEB
 12653                           fsr0h	equ	0xFEA
 12654                           fsr0l	equ	0xFE9
 12655                           wreg	equ	0xFE8
 12656                           indf1	equ	0xFE7
 12657                           postinc1	equ	0xFE6
 12658                           postdec1	equ	0xFE5
 12659                           plusw1	equ	0xFE3
 12660                           fsr1h	equ	0xFE2
 12661                           fsr1l	equ	0xFE1
 12662                           indf2	equ	0xFDF
 12663                           postinc2	equ	0xFDE
 12664                           postdec2	equ	0xFDD
 12665                           plusw2	equ	0xFDB
 12666                           fsr2h	equ	0xFDA
 12667                           fsr2l	equ	0xFD9
 12668                           status	equ	0xFD8
 12669                           
 12670 ;; *************** function ___ftpack *****************
 12671 ;; Defined at:
 12672 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
 12673 ;; Parameters:    Size  Location     Type
 12674 ;;  arg             3    0[COMRAM] unsigned um
 12675 ;;  exp             1    3[COMRAM] unsigned char 
 12676 ;;  sign            1    4[COMRAM] unsigned char 
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;		None
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  3    0[COMRAM] float 
 12681 ;; Registers used:
 12682 ;;		wreg, status,2, status,0
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12688 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12690 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12691 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12692 ;;Total ram usage:        8 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; This function calls:
 12695 ;;		Nothing
 12696 ;; This function is called by:
 12697 ;;		___ftmul
 12698 ;;		___lbtoft
 12699 ;; This function uses a non-reentrant model
 12700 ;;
 12701                           
 12702                           	psect	text58
 12703  002F3A                     __ptext58:
 12704                           	opt stack 0
 12705  002F3A                     ___ftpack:
 12706                           	opt stack 18
 12707                           
 12708                           ;incstack = 0
 12709  002F3A  5004               	movf	___ftpack@exp,w,c
 12710  002F3C  E004               	bz	i2l1391
 12711  002F3E  5001               	movf	___ftpack@arg,w,c
 12712  002F40  1002               	iorwf	___ftpack@arg+1,w,c
 12713  002F42  1003               	iorwf	___ftpack@arg+2,w,c
 12714  002F44  E106               	bnz	i2l3472
 12715  002F46                     i2l1391:
 12716  002F46  6A01               	clrf	?___ftpack,c
 12717  002F48  6A02               	clrf	?___ftpack+1,c
 12718  002F4A  6A03               	clrf	?___ftpack+2,c
 12719  002F4C  0012               	return	
 12720  002F4E                     i2l3470:
 12721  002F4E  2A04               	incf	___ftpack@exp,f,c
 12722  002F50  D82D               	call	PL148	;call to abstracted procedure
 12723  002F52                     i2l3472:
 12724  002F52  6A06               	clrf	??___ftpack& (0+255),c
 12725  002F54  6A07               	clrf	(??___ftpack+1)& (0+255),c
 12726  002F56  0EFE               	movlw	254
 12727  002F58  1403               	andwf	___ftpack@arg+2,w,c
 12728  002F5A  D82D               	call	PL152	;call to abstracted procedure
 12729  002F5C  E007               	bz	i2l3478
 12730  002F5E  D7F7               	goto	i2l3470
 12731  002F60                     i2l3474:
 12732  002F60  2A04               	incf	___ftpack@exp,f,c
 12733  002F62  2A01               	incf	___ftpack@arg,f,c
 12734  002F64  0E00               	movlw	0
 12735  002F66  2202               	addwfc	___ftpack@arg+1,f,c
 12736  002F68  2203               	addwfc	___ftpack@arg+2,f,c
 12737  002F6A  D820               	call	PL148	;call to abstracted procedure
 12738  002F6C                     i2l3478:
 12739  002F6C  6A06               	clrf	??___ftpack& (0+255),c
 12740  002F6E  6A07               	clrf	(??___ftpack+1)& (0+255),c
 12741  002F70  5003               	movf	___ftpack@arg+2,w,c
 12742  002F72  D821               	call	PL152	;call to abstracted procedure
 12743  002F74  E006               	bz	i2l3482
 12744  002F76  D7F4               	goto	i2l3474
 12745  002F78                     i2l3480:
 12746  002F78  0604               	decf	___ftpack@exp,f,c
 12747  002F7A  90D8               	bcf	status,0,c
 12748  002F7C  3601               	rlcf	___ftpack@arg,f,c
 12749  002F7E  3602               	rlcf	___ftpack@arg+1,f,c
 12750  002F80  3603               	rlcf	___ftpack@arg+2,f,c
 12751  002F82                     i2l3482:
 12752  002F82  BE02               	btfsc	___ftpack@arg+1,7,c
 12753  002F84  D003               	goto	i2l1403
 12754  002F86  0E02               	movlw	2
 12755  002F88  6004               	cpfslt	___ftpack@exp,c
 12756  002F8A  D7F6               	goto	i2l3480
 12757  002F8C                     i2l1403:
 12758  002F8C  A004               	btfss	___ftpack@exp,0,c
 12759  002F8E  9E02               	bcf	___ftpack@arg+1,7,c
 12760  002F90  90D8               	bcf	status,0,c
 12761  002F92  3204               	rrcf	___ftpack@exp,f,c
 12762  002F94  5004               	movf	___ftpack@exp,w,c
 12763  002F96  1203               	iorwf	___ftpack@arg+2,f,c
 12764  002F98  5005               	movf	___ftpack@sign,w,c
 12765  002F9A  E001               	bz	i2l3496
 12766  002F9C  8E03               	bsf	___ftpack@arg+2,7,c
 12767  002F9E                     i2l3496:
 12768  002F9E  C001  F001         	movff	___ftpack@arg,?___ftpack
 12769  002FA2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 12770  002FA6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 12771  002FAA  0012               	return		;funcret
 12772  002FAC                     __end_of___ftpack:
 12773                           	opt stack 0
 12774  002FAC                     PL148:
 12775                           	opt stack 18
 12776  002FAC  90D8               	bcf	status,0,c
 12777  002FAE  3203               	rrcf	___ftpack@arg+2,f,c
 12778  002FB0  3202               	rrcf	___ftpack@arg+1,f,c
 12779  002FB2  3201               	rrcf	___ftpack@arg,f,c
 12780  002FB4  0012               	return	
 12781  002FB6                     __end_ofPL148:
 12782                           	opt stack 0
 12783  002FB6                     PL152:
 12784                           	opt stack 18
 12785  002FB6  6E08               	movwf	(??___ftpack+2)& (0+255),c
 12786  002FB8  5006               	movf	??___ftpack,w,c
 12787  002FBA  1007               	iorwf	??___ftpack+1,w,c
 12788  002FBC  1008               	iorwf	??___ftpack+2,w,c
 12789  002FBE  0012               	return	
 12790  002FC0                     __end_ofPL152:
 12791                           	opt stack 0
 12792                           tosu	equ	0xFFF
 12793                           tosh	equ	0xFFE
 12794                           tosl	equ	0xFFD
 12795                           pclatu	equ	0xFFB
 12796                           pclath	equ	0xFFA
 12797                           tblptru	equ	0xFF8
 12798                           tblptrh	equ	0xFF7
 12799                           tblptrl	equ	0xFF6
 12800                           tablat	equ	0xFF5
 12801                           prodh	equ	0xFF4
 12802                           prodl	equ	0xFF3
 12803                           intcon	equ	0xFF2
 12804                           postinc0	equ	0xFEE
 12805                           plusw0	equ	0xFEB
 12806                           fsr0h	equ	0xFEA
 12807                           fsr0l	equ	0xFE9
 12808                           wreg	equ	0xFE8
 12809                           indf1	equ	0xFE7
 12810                           postinc1	equ	0xFE6
 12811                           postdec1	equ	0xFE5
 12812                           plusw1	equ	0xFE3
 12813                           fsr1h	equ	0xFE2
 12814                           fsr1l	equ	0xFE1
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           plusw2	equ	0xFDB
 12819                           fsr2h	equ	0xFDA
 12820                           fsr2l	equ	0xFD9
 12821                           status	equ	0xFD8
 12822                           
 12823 ;; *************** function ___almod *****************
 12824 ;; Defined at:
 12825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;  dividend        4    0[COMRAM] long 
 12828 ;;  divisor         4    4[COMRAM] long 
 12829 ;; Auto vars:     Size  Location     Type
 12830 ;;  sign            1    9[COMRAM] unsigned char 
 12831 ;;  counter         1    8[COMRAM] unsigned char 
 12832 ;; Return value:  Size  Location     Type
 12833 ;;                  4    0[COMRAM] long 
 12834 ;; Registers used:
 12835 ;;		wreg, status,2, status,0
 12836 ;; Tracked objects:
 12837 ;;		On entry : 3F/0
 12838 ;;		On exit  : 3F/0
 12839 ;;		Unchanged: 3F/0
 12840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12841 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12842 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12844 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12845 ;;Total ram usage:       10 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; This function calls:
 12848 ;;		Nothing
 12849 ;; This function is called by:
 12850 ;;		_Timer0_10ms
 12851 ;; This function uses a non-reentrant model
 12852 ;;
 12853                           
 12854                           	psect	text59
 12855  002EA0                     __ptext59:
 12856                           	opt stack 0
 12857  002EA0                     ___almod:
 12858                           	opt stack 19
 12859                           
 12860                           ; BSR set to: 0
 12861                           
 12862                           ;incstack = 0
 12863  002EA0  6A0A               	clrf	___almod@sign,c
 12864                           
 12865                           ; BSR set to: 0
 12866  002EA2  AE04               	btfss	___almod@dividend+3,7,c
 12867  002EA4  D003               	goto	i2l3652
 12868                           
 12869                           ; BSR set to: 0
 12870  002EA6  D840               	call	PL94	;call to abstracted procedure
 12871                           
 12872                           ; BSR set to: 0
 12873  002EA8  0E01               	movlw	1
 12874  002EAA  6E0A               	movwf	___almod@sign,c
 12875  002EAC                     i2l3652:
 12876                           
 12877                           ; BSR set to: 0
 12878  002EAC  AE08               	btfss	___almod@divisor+3,7,c
 12879  002EAE  D008               	goto	i2l3656
 12880                           
 12881                           ; BSR set to: 0
 12882  002EB0  1E08               	comf	___almod@divisor+3,f,c
 12883  002EB2  1E07               	comf	___almod@divisor+2,f,c
 12884  002EB4  1E06               	comf	___almod@divisor+1,f,c
 12885  002EB6  6C05               	negf	___almod@divisor,c
 12886  002EB8  0E00               	movlw	0
 12887  002EBA  2206               	addwfc	___almod@divisor+1,f,c
 12888  002EBC  2207               	addwfc	___almod@divisor+2,f,c
 12889  002EBE  2208               	addwfc	___almod@divisor+3,f,c
 12890  002EC0                     i2l3656:
 12891                           
 12892                           ; BSR set to: 0
 12893  002EC0  5005               	movf	___almod@divisor,w,c
 12894  002EC2  1006               	iorwf	___almod@divisor+1,w,c
 12895  002EC4  1007               	iorwf	___almod@divisor+2,w,c
 12896  002EC6  1008               	iorwf	___almod@divisor+3,w,c
 12897  002EC8  E023               	bz	i2l3672
 12898                           
 12899                           ; BSR set to: 0
 12900  002ECA  0E01               	movlw	1
 12901  002ECC  6E09               	movwf	___almod@counter,c
 12902  002ECE  D006               	goto	i2l3662
 12903  002ED0                     i2l3660:
 12904                           
 12905                           ; BSR set to: 0
 12906  002ED0  90D8               	bcf	status,0,c
 12907  002ED2  3605               	rlcf	___almod@divisor,f,c
 12908  002ED4  3606               	rlcf	___almod@divisor+1,f,c
 12909  002ED6  3607               	rlcf	___almod@divisor+2,f,c
 12910  002ED8  3608               	rlcf	___almod@divisor+3,f,c
 12911  002EDA  2A09               	incf	___almod@counter,f,c
 12912  002EDC                     i2l3662:
 12913                           
 12914                           ; BSR set to: 0
 12915  002EDC  AE08               	btfss	___almod@divisor+3,7,c
 12916  002EDE  D7F8               	goto	i2l3660
 12917  002EE0                     i2l3664:
 12918                           
 12919                           ; BSR set to: 0
 12920  002EE0  5005               	movf	___almod@divisor,w,c
 12921  002EE2  5C01               	subwf	___almod@dividend,w,c
 12922  002EE4  5006               	movf	___almod@divisor+1,w,c
 12923  002EE6  5802               	subwfb	___almod@dividend+1,w,c
 12924  002EE8  5007               	movf	___almod@divisor+2,w,c
 12925  002EEA  5803               	subwfb	___almod@dividend+2,w,c
 12926  002EEC  5008               	movf	___almod@divisor+3,w,c
 12927  002EEE  5804               	subwfb	___almod@dividend+3,w,c
 12928  002EF0  E308               	bnc	i2l3668
 12929                           
 12930                           ; BSR set to: 0
 12931  002EF2  5005               	movf	___almod@divisor,w,c
 12932  002EF4  5E01               	subwf	___almod@dividend,f,c
 12933  002EF6  5006               	movf	___almod@divisor+1,w,c
 12934  002EF8  5A02               	subwfb	___almod@dividend+1,f,c
 12935  002EFA  5007               	movf	___almod@divisor+2,w,c
 12936  002EFC  5A03               	subwfb	___almod@dividend+2,f,c
 12937  002EFE  5008               	movf	___almod@divisor+3,w,c
 12938  002F00  5A04               	subwfb	___almod@dividend+3,f,c
 12939  002F02                     i2l3668:
 12940                           
 12941                           ; BSR set to: 0
 12942  002F02  90D8               	bcf	status,0,c
 12943  002F04  3208               	rrcf	___almod@divisor+3,f,c
 12944  002F06  3207               	rrcf	___almod@divisor+2,f,c
 12945  002F08  3206               	rrcf	___almod@divisor+1,f,c
 12946  002F0A  3205               	rrcf	___almod@divisor,f,c
 12947                           
 12948                           ; BSR set to: 0
 12949  002F0C  2E09               	decfsz	___almod@counter,f,c
 12950  002F0E  D7E8               	goto	i2l3664
 12951  002F10                     i2l3672:
 12952                           
 12953                           ; BSR set to: 0
 12954  002F10  500A               	movf	___almod@sign,w,c
 12955  002F12  E001               	bz	i2l3676
 12956                           
 12957                           ; BSR set to: 0
 12958  002F14  D809               	call	PL94	;call to abstracted procedure
 12959  002F16                     i2l3676:
 12960                           
 12961                           ; BSR set to: 0
 12962  002F16  C001  F001         	movff	___almod@dividend,?___almod
 12963  002F1A  C002  F002         	movff	___almod@dividend+1,?___almod+1
 12964  002F1E  C003  F003         	movff	___almod@dividend+2,?___almod+2
 12965  002F22  C004  F004         	movff	___almod@dividend+3,?___almod+3
 12966                           
 12967                           ; BSR set to: 0
 12968  002F26  0012               	return		;funcret
 12969  002F28                     __end_of___almod:
 12970                           	opt stack 0
 12971  002F28                     PL94:
 12972                           	opt stack 19
 12973  002F28  1E04               	comf	___almod@dividend+3,f,c
 12974  002F2A  1E03               	comf	___almod@dividend+2,f,c
 12975  002F2C  1E02               	comf	___almod@dividend+1,f,c
 12976  002F2E  6C01               	negf	___almod@dividend,c
 12977  002F30  0E00               	movlw	0
 12978  002F32  2202               	addwfc	___almod@dividend+1,f,c
 12979  002F34  2203               	addwfc	___almod@dividend+2,f,c
 12980  002F36  2204               	addwfc	___almod@dividend+3,f,c
 12981  002F38  0C00               	retlw	0
 12982  002F3A                     __end_ofPL94:
 12983                           	opt stack 0
 12984                           tosu	equ	0xFFF
 12985                           tosh	equ	0xFFE
 12986                           tosl	equ	0xFFD
 12987                           pclatu	equ	0xFFB
 12988                           pclath	equ	0xFFA
 12989                           tblptru	equ	0xFF8
 12990                           tblptrh	equ	0xFF7
 12991                           tblptrl	equ	0xFF6
 12992                           tablat	equ	0xFF5
 12993                           prodh	equ	0xFF4
 12994                           prodl	equ	0xFF3
 12995                           intcon	equ	0xFF2
 12996                           postinc0	equ	0xFEE
 12997                           plusw0	equ	0xFEB
 12998                           fsr0h	equ	0xFEA
 12999                           fsr0l	equ	0xFE9
 13000                           wreg	equ	0xFE8
 13001                           indf1	equ	0xFE7
 13002                           postinc1	equ	0xFE6
 13003                           postdec1	equ	0xFE5
 13004                           plusw1	equ	0xFE3
 13005                           fsr1h	equ	0xFE2
 13006                           fsr1l	equ	0xFE1
 13007                           indf2	equ	0xFDF
 13008                           postinc2	equ	0xFDE
 13009                           postdec2	equ	0xFDD
 13010                           plusw2	equ	0xFDB
 13011                           fsr2h	equ	0xFDA
 13012                           fsr2l	equ	0xFD9
 13013                           status	equ	0xFD8
 13014                           
 13015 ;; *************** function _IncreaseByASecond *****************
 13016 ;; Defined at:
 13017 ;;		line 3 in file "libs/funcs.c"
 13018 ;; Parameters:    Size  Location     Type
 13019 ;;  dt             11   41[COMRAM] struct _GSK_DATE_TIME
 13020 ;; Auto vars:     Size  Location     Type
 13021 ;;		None
 13022 ;; Return value:  Size  Location     Type
 13023 ;;                  11   41[COMRAM] struct _GSK_DATE_TIME
 13024 ;; Registers used:
 13025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13026 ;; Tracked objects:
 13027 ;;		On entry : 3F/0
 13028 ;;		On exit  : 0/0
 13029 ;;		Unchanged: 0/0
 13030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13031 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13034 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13035 ;;Total ram usage:       11 bytes
 13036 ;; Hardware stack levels used:    1
 13037 ;; Hardware stack levels required when called:    4
 13038 ;; This function calls:
 13039 ;;		i2_IncreaseByADay
 13040 ;; This function is called by:
 13041 ;;		_Timer0_10ms
 13042 ;; This function uses a non-reentrant model
 13043 ;;
 13044                           
 13045                           	psect	text60
 13046  00316C                     __ptext60:
 13047                           	opt stack 0
 13048  00316C                     _IncreaseByASecond:
 13049                           	opt stack 15
 13050                           
 13051                           ; BSR set to: 0
 13052                           ;funcs.c: 4: dt.SECOND++;
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;incstack = 0
 13056  00316C  2A2A               	incf	IncreaseByASecond@dt,f,c
 13057  00316E  0E00               	movlw	0
 13058  003170  222B               	addwfc	IncreaseByASecond@dt+1,f,c
 13059  003172  222C               	addwfc	IncreaseByASecond@dt+2,f,c
 13060  003174  222D               	addwfc	IncreaseByASecond@dt+3,f,c
 13061                           
 13062                           ;funcs.c: 5: if (dt.SECOND == 86400) {
 13063  003176  0E80               	movlw	128
 13064  003178  182A               	xorwf	IncreaseByASecond@dt,w,c
 13065  00317A  E11C               	bnz	i2l3554
 13066  00317C  0E51               	movlw	81
 13067  00317E  182B               	xorwf	IncreaseByASecond@dt+1,w,c
 13068  003180  E119               	bnz	i2l3554
 13069  003182  042C               	decf	IncreaseByASecond@dt+2,w,c
 13070  003184  102D               	iorwf	IncreaseByASecond@dt+3,w,c
 13071  003186  E116               	bnz	i2l3554
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;funcs.c: 6: dt.SECOND = 0;
 13075  003188  6A2A               	clrf	IncreaseByASecond@dt,c
 13076  00318A  6A2B               	clrf	IncreaseByASecond@dt+1,c
 13077  00318C  6A2C               	clrf	IncreaseByASecond@dt+2,c
 13078  00318E  6A2D               	clrf	IncreaseByASecond@dt+3,c
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;funcs.c: 7: dt = IncreaseByADay(dt);
 13082  003190  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 13083  003194  EE00  F01C         	lfsr	0,i2IncreaseByADay@dt
 13084  003198  0E0A               	movlw	10
 13085  00319A                     i2u295_41:
 13086  00319A  CFDB FFEB          	movff	plusw2,plusw0
 13087  00319E  06E8               	decf	wreg,f,c
 13088  0031A0  E2FC               	bc	i2u295_41
 13089  0031A2  ECEF  F012         	call	i2_IncreaseByADay	;wreg free
 13090  0031A6  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 13091  0031AA  0E0A               	movlw	10
 13092  0031AC                     i2u296_41:
 13093  0031AC  CFEB FFDB          	movff	plusw0,plusw2
 13094  0031B0  06E8               	decf	wreg,f,c
 13095  0031B2  E2FC               	bc	i2u296_41
 13096  0031B4                     i2l3554:
 13097                           
 13098                           ;funcs.c: 8: }
 13099                           ;funcs.c: 9: return dt;
 13100  0031B4  EE20  F02A         	lfsr	2,IncreaseByASecond@dt
 13101  0031B8  EE00  F02A         	lfsr	0,?_IncreaseByASecond
 13102  0031BC  0E0A               	movlw	10
 13103  0031BE                     i2u297_41:
 13104  0031BE  CFDB FFEB          	movff	plusw2,plusw0
 13105  0031C2  06E8               	decf	wreg,f,c
 13106  0031C4  E2FC               	bc	i2u297_41
 13107  0031C6  0012               	return		;funcret
 13108  0031C8                     __end_of_IncreaseByASecond:
 13109                           	opt stack 0
 13110                           tosu	equ	0xFFF
 13111                           tosh	equ	0xFFE
 13112                           tosl	equ	0xFFD
 13113                           pclatu	equ	0xFFB
 13114                           pclath	equ	0xFFA
 13115                           tblptru	equ	0xFF8
 13116                           tblptrh	equ	0xFF7
 13117                           tblptrl	equ	0xFF6
 13118                           tablat	equ	0xFF5
 13119                           prodh	equ	0xFF4
 13120                           prodl	equ	0xFF3
 13121                           intcon	equ	0xFF2
 13122                           postinc0	equ	0xFEE
 13123                           plusw0	equ	0xFEB
 13124                           fsr0h	equ	0xFEA
 13125                           fsr0l	equ	0xFE9
 13126                           wreg	equ	0xFE8
 13127                           indf1	equ	0xFE7
 13128                           postinc1	equ	0xFE6
 13129                           postdec1	equ	0xFE5
 13130                           plusw1	equ	0xFE3
 13131                           fsr1h	equ	0xFE2
 13132                           fsr1l	equ	0xFE1
 13133                           indf2	equ	0xFDF
 13134                           postinc2	equ	0xFDE
 13135                           postdec2	equ	0xFDD
 13136                           plusw2	equ	0xFDB
 13137                           fsr2h	equ	0xFDA
 13138                           fsr2l	equ	0xFD9
 13139                           status	equ	0xFD8
 13140                           
 13141 ;; *************** function i2_IncreaseByADay *****************
 13142 ;; Defined at:
 13143 ;;		line 12 in file "libs/funcs.c"
 13144 ;; Parameters:    Size  Location     Type
 13145 ;;  dt             11   27[COMRAM] struct _GSK_DATE_TIME
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  IncreaseByAD    1   40[COMRAM] char 
 13148 ;; Return value:  Size  Location     Type
 13149 ;;                  11   27[COMRAM] struct _GSK_DATE_TIME
 13150 ;; Registers used:
 13151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13152 ;; Tracked objects:
 13153 ;;		On entry : 3F/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13157 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13158 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13159 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13160 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13161 ;;Total ram usage:       14 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; Hardware stack levels required when called:    3
 13164 ;; This function calls:
 13165 ;;		i2_IncreaseByAMonth
 13166 ;;		i2___lwmod
 13167 ;; This function is called by:
 13168 ;;		_IncreaseByASecond
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           	psect	text61
 13173  0025DE                     __ptext61:
 13174                           	opt stack 0
 13175  0025DE                     i2_IncreaseByADay:
 13176                           	opt stack 15
 13177                           
 13178                           ; BSR set to: 0
 13179                           ;funcs.c: 13: dt.DATE.Day++;
 13180                           
 13181                           ;incstack = 0
 13182  0025DE  4A20               	infsnz	i2IncreaseByADay@dt+4,f,c
 13183  0025E0  2A21               	incf	i2IncreaseByADay@dt+5,f,c
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;funcs.c: 14: if (dt.DAY.Val == 0x01)
 13187  0025E2  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 13188  0025E4  0B7F               	andlw	127
 13189  0025E6  06E8               	decf	wreg,f,c
 13190  0025E8  E104               	bnz	i2l3506
 13191                           
 13192                           ; BSR set to: 0
 13193                           ;funcs.c: 15: dt.DAY.Val = 0x40;
 13194  0025EA  5024               	movf	i2IncreaseByADay@dt+8,w,c
 13195  0025EC  0B01               	andlw	-255
 13196  0025EE  0980               	iorlw	128
 13197  0025F0  D00A               	goto	L10
 13198  0025F2                     i2l3506:
 13199                           
 13200                           ; BSR set to: 0
 13201                           ;funcs.c: 16: else
 13202                           ;funcs.c: 17: dt.DAY.Val >>= 1;
 13203  0025F2  3024               	rrcf	i2IncreaseByADay@dt+8,w,c
 13204  0025F4  0B7F               	andlw	127
 13205  0025F6  6E27               	movwf	??i2_IncreaseByADay& (0+255),c
 13206  0025F8  90D8               	bcf	status,0,c
 13207  0025FA  3227               	rrcf	??i2_IncreaseByADay,f,c
 13208  0025FC  3627               	rlcf	??i2_IncreaseByADay& (0+255),f,c
 13209  0025FE  5024               	movf	i2IncreaseByADay@dt+8,w,c
 13210  002600  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 13211  002602  0B01               	andlw	-255
 13212  002604  1827               	xorwf	??i2_IncreaseByADay& (0+255),w,c
 13213  002606                     L10:
 13214  002606  6E24               	movwf	i2IncreaseByADay@dt+8,c
 13215                           
 13216                           ; BSR set to: 0
 13217                           ;funcs.c: 18: INT8 MonthDays = NO_OF_DAYS_IN_A_MONTH[dt.DATE.Month-1];
 13218  002608  90D8               	bcf	status,0,c
 13219  00260A  3422               	rlcf	i2IncreaseByADay@dt+6,w,c
 13220  00260C  6ED9               	movwf	fsr2l,c
 13221  00260E  3423               	rlcf	i2IncreaseByADay@dt+7,w,c
 13222  002610  EC68  F012         	call	PL76	;call to abstracted procedure
 13223  002614  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13224                           
 13225                           ; BSR set to: 0
 13226                           ;funcs.c: 19: if ((dt.DATE.Month == 2) && (dt.YEAR%4 == 0))
 13227  002616  0E02               	movlw	2
 13228  002618  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 13229  00261A  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 13230  00261C  E107               	bnz	i2l3516
 13231                           
 13232                           ; BSR set to: 0
 13233  00261E  C025  F027         	movff	i2IncreaseByADay@dt+9,??i2_IncreaseByADay
 13234  002622  0E03               	movlw	3
 13235  002624  1627               	andwf	??i2_IncreaseByADay,f,c
 13236  002626  E102               	bnz	i2l3516
 13237                           
 13238                           ; BSR set to: 0
 13239                           ;funcs.c: 20: MonthDays = 29;
 13240  002628  0E1D               	movlw	29
 13241  00262A  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13242  00262C                     i2l3516:
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;funcs.c: 21: if ((dt.DATE.Month == 2) && (dt.YEAR%100 == 0))
 13246  00262C  0E02               	movlw	2
 13247  00262E  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 13248  002630  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 13249  002632  E10A               	bnz	i2l3522
 13250                           
 13251                           ; BSR set to: 0
 13252  002634  D842               	call	PL146	;call to abstracted procedure
 13253  002636  EC4F  F01A         	call	PL160	;call to abstracted procedure
 13254  00263A  ECFC  F019         	call	i2___lwmod	;wreg free
 13255  00263E  5001               	movf	?i2___lwmod,w,c
 13256  002640  1002               	iorwf	?i2___lwmod+1,w,c
 13257  002642  E102               	bnz	i2l3522
 13258                           
 13259                           ;funcs.c: 22: MonthDays = 28;
 13260  002644  0E1C               	movlw	28
 13261  002646  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13262  002648                     i2l3522:
 13263                           
 13264                           ;funcs.c: 23: if ((dt.DATE.Month == 2) && (dt.YEAR%400 == 0))
 13265  002648  0E02               	movlw	2
 13266  00264A  1822               	xorwf	i2IncreaseByADay@dt+6,w,c
 13267  00264C  1023               	iorwf	i2IncreaseByADay@dt+7,w,c
 13268  00264E  E10C               	bnz	i2l3528
 13269  002650  D834               	call	PL146	;call to abstracted procedure
 13270  002652  0E01               	movlw	1
 13271  002654  6E04               	movwf	i2___lwmod@divisor+1,c
 13272  002656  0E90               	movlw	144
 13273  002658  6E03               	movwf	i2___lwmod@divisor,c
 13274  00265A  ECFC  F019         	call	i2___lwmod	;wreg free
 13275  00265E  5001               	movf	?i2___lwmod,w,c
 13276  002660  1002               	iorwf	?i2___lwmod+1,w,c
 13277  002662  E102               	bnz	i2l3528
 13278                           
 13279                           ;funcs.c: 24: MonthDays = 29;
 13280  002664  0E1D               	movlw	29
 13281  002666  6E29               	movwf	i2IncreaseByADay@MonthDays,c
 13282  002668                     i2l3528:
 13283                           
 13284                           ;funcs.c: 25: if (dt.DATE.Day > MonthDays) {
 13285  002668  C029  F027         	movff	i2IncreaseByADay@MonthDays,??i2_IncreaseByADay
 13286  00266C  6A28               	clrf	(??i2_IncreaseByADay+1)& (0+255),c
 13287  00266E  BE27               	btfsc	??i2_IncreaseByADay& (0+255),7,c
 13288  002670  0628               	decf	(??i2_IncreaseByADay+1)& (0+255),f,c
 13289  002672  5020               	movf	i2IncreaseByADay@dt+4,w,c
 13290  002674  5C27               	subwf	??i2_IncreaseByADay,w,c
 13291  002676  5021               	movf	i2IncreaseByADay@dt+5,w,c
 13292  002678  5828               	subwfb	??i2_IncreaseByADay+1,w,c
 13293  00267A  E215               	bc	i2l3534
 13294                           
 13295                           ;funcs.c: 26: dt.DATE.Day = 1;
 13296  00267C  6A21               	clrf	i2IncreaseByADay@dt+5,c
 13297  00267E  0E01               	movlw	1
 13298  002680  6E20               	movwf	i2IncreaseByADay@dt+4,c
 13299                           
 13300                           ;funcs.c: 27: dt = IncreaseByAMonth(dt);
 13301  002682  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 13302  002686  EE00  F011         	lfsr	0,i2IncreaseByAMonth@dt
 13303  00268A  0E0A               	movlw	10
 13304  00268C                     i2u289_41:
 13305  00268C  CFDB FFEB          	movff	plusw2,plusw0
 13306  002690  06E8               	decf	wreg,f,c
 13307  002692  E2FC               	bc	i2u289_41
 13308  002694  EC55  F019         	call	i2_IncreaseByAMonth	;wreg free
 13309  002698  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 13310  00269C  0E0A               	movlw	10
 13311  00269E                     i2u290_41:
 13312  00269E  CFEB FFDB          	movff	plusw0,plusw2
 13313  0026A2  06E8               	decf	wreg,f,c
 13314  0026A4  E2FC               	bc	i2u290_41
 13315  0026A6                     i2l3534:
 13316                           
 13317                           ;funcs.c: 28: }
 13318                           ;funcs.c: 29: return dt;
 13319  0026A6  EE20  F01C         	lfsr	2,i2IncreaseByADay@dt
 13320  0026AA  EE00  F01C         	lfsr	0,?i2_IncreaseByADay
 13321  0026AE  0E0A               	movlw	10
 13322  0026B0                     i2u291_41:
 13323  0026B0  CFDB FFEB          	movff	plusw2,plusw0
 13324  0026B4  06E8               	decf	wreg,f,c
 13325  0026B6  E2FC               	bc	i2u291_41
 13326  0026B8  0012               	return		;funcret
 13327  0026BA                     __end_ofi2_IncreaseByADay:
 13328                           	opt stack 0
 13329  0026BA                     PL146:
 13330                           	opt stack 15
 13331  0026BA  C025  F001         	movff	i2IncreaseByADay@dt+9,i2___lwmod@dividend
 13332  0026BE  C026  F002         	movff	i2IncreaseByADay@dt+10,i2___lwmod@dividend+1
 13333  0026C2  0012               	return	
 13334  0026C4                     __end_ofPL146:
 13335                           	opt stack 0
 13336                           tosu	equ	0xFFF
 13337                           tosh	equ	0xFFE
 13338                           tosl	equ	0xFFD
 13339                           pclatu	equ	0xFFB
 13340                           pclath	equ	0xFFA
 13341                           tblptru	equ	0xFF8
 13342                           tblptrh	equ	0xFF7
 13343                           tblptrl	equ	0xFF6
 13344                           tablat	equ	0xFF5
 13345                           prodh	equ	0xFF4
 13346                           prodl	equ	0xFF3
 13347                           intcon	equ	0xFF2
 13348                           postinc0	equ	0xFEE
 13349                           plusw0	equ	0xFEB
 13350                           fsr0h	equ	0xFEA
 13351                           fsr0l	equ	0xFE9
 13352                           wreg	equ	0xFE8
 13353                           indf1	equ	0xFE7
 13354                           postinc1	equ	0xFE6
 13355                           postdec1	equ	0xFE5
 13356                           plusw1	equ	0xFE3
 13357                           fsr1h	equ	0xFE2
 13358                           fsr1l	equ	0xFE1
 13359                           indf2	equ	0xFDF
 13360                           postinc2	equ	0xFDE
 13361                           postdec2	equ	0xFDD
 13362                           plusw2	equ	0xFDB
 13363                           fsr2h	equ	0xFDA
 13364                           fsr2l	equ	0xFD9
 13365                           status	equ	0xFD8
 13366                           
 13367 ;; *************** function i2_IncreaseByAMonth *****************
 13368 ;; Defined at:
 13369 ;;		line 32 in file "libs/funcs.c"
 13370 ;; Parameters:    Size  Location     Type
 13371 ;;  dt             11   16[COMRAM] struct _GSK_DATE_TIME
 13372 ;; Auto vars:     Size  Location     Type
 13373 ;;		None
 13374 ;; Return value:  Size  Location     Type
 13375 ;;                  11   16[COMRAM] struct _GSK_DATE_TIME
 13376 ;; Registers used:
 13377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13378 ;; Tracked objects:
 13379 ;;		On entry : 0/0
 13380 ;;		On exit  : 0/0
 13381 ;;		Unchanged: 0/0
 13382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13383 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13386 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13387 ;;Total ram usage:       11 bytes
 13388 ;; Hardware stack levels used:    1
 13389 ;; Hardware stack levels required when called:    2
 13390 ;; This function calls:
 13391 ;;		i2_IncreaseByAYear
 13392 ;; This function is called by:
 13393 ;;		i2_IncreaseByADay
 13394 ;; This function uses a non-reentrant model
 13395 ;;
 13396                           
 13397                           	psect	text62
 13398  0032AA                     __ptext62:
 13399                           	opt stack 0
 13400  0032AA                     i2_IncreaseByAMonth:
 13401                           	opt stack 15
 13402                           
 13403                           ;funcs.c: 33: dt.DATE.Month++;
 13404                           
 13405                           ;incstack = 0
 13406  0032AA  4A17               	infsnz	i2IncreaseByAMonth@dt+6,f,c
 13407  0032AC  2A18               	incf	i2IncreaseByAMonth@dt+7,f,c
 13408                           
 13409                           ;funcs.c: 34: if (dt.DATE.Month == 13) {
 13410  0032AE  0E0D               	movlw	13
 13411  0032B0  1817               	xorwf	i2IncreaseByAMonth@dt+6,w,c
 13412  0032B2  1018               	iorwf	i2IncreaseByAMonth@dt+7,w,c
 13413  0032B4  E115               	bnz	i2l3438
 13414                           
 13415                           ;funcs.c: 35: dt.DATE.Month = 1;
 13416  0032B6  6A18               	clrf	i2IncreaseByAMonth@dt+7,c
 13417  0032B8  0E01               	movlw	1
 13418  0032BA  6E17               	movwf	i2IncreaseByAMonth@dt+6,c
 13419                           
 13420                           ;funcs.c: 36: dt = IncreaseByAYear(dt);
 13421  0032BC  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 13422  0032C0  EE00  F006         	lfsr	0,i2IncreaseByAYear@dt
 13423  0032C4  0E0A               	movlw	10
 13424  0032C6                     i2u262_41:
 13425  0032C6  CFDB FFEB          	movff	plusw2,plusw0
 13426  0032CA  06E8               	decf	wreg,f,c
 13427  0032CC  E2FC               	bc	i2u262_41
 13428  0032CE  EC37  F01A         	call	i2_IncreaseByAYear	;wreg free
 13429  0032D2  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 13430  0032D6  0E0A               	movlw	10
 13431  0032D8                     i2u263_41:
 13432  0032D8  CFEB FFDB          	movff	plusw0,plusw2
 13433  0032DC  06E8               	decf	wreg,f,c
 13434  0032DE  E2FC               	bc	i2u263_41
 13435  0032E0                     i2l3438:
 13436                           
 13437                           ;funcs.c: 37: }
 13438                           ;funcs.c: 38: return dt;
 13439  0032E0  EE20  F011         	lfsr	2,i2IncreaseByAMonth@dt
 13440  0032E4  EE00  F011         	lfsr	0,?i2_IncreaseByAMonth
 13441  0032E8  0E0A               	movlw	10
 13442  0032EA                     i2u264_41:
 13443  0032EA  CFDB FFEB          	movff	plusw2,plusw0
 13444  0032EE  06E8               	decf	wreg,f,c
 13445  0032F0  E2FC               	bc	i2u264_41
 13446  0032F2  0012               	return		;funcret
 13447  0032F4                     __end_ofi2_IncreaseByAMonth:
 13448                           	opt stack 0
 13449                           tosu	equ	0xFFF
 13450                           tosh	equ	0xFFE
 13451                           tosl	equ	0xFFD
 13452                           pclatu	equ	0xFFB
 13453                           pclath	equ	0xFFA
 13454                           tblptru	equ	0xFF8
 13455                           tblptrh	equ	0xFF7
 13456                           tblptrl	equ	0xFF6
 13457                           tablat	equ	0xFF5
 13458                           prodh	equ	0xFF4
 13459                           prodl	equ	0xFF3
 13460                           intcon	equ	0xFF2
 13461                           postinc0	equ	0xFEE
 13462                           plusw0	equ	0xFEB
 13463                           fsr0h	equ	0xFEA
 13464                           fsr0l	equ	0xFE9
 13465                           wreg	equ	0xFE8
 13466                           indf1	equ	0xFE7
 13467                           postinc1	equ	0xFE6
 13468                           postdec1	equ	0xFE5
 13469                           plusw1	equ	0xFE3
 13470                           fsr1h	equ	0xFE2
 13471                           fsr1l	equ	0xFE1
 13472                           indf2	equ	0xFDF
 13473                           postinc2	equ	0xFDE
 13474                           postdec2	equ	0xFDD
 13475                           plusw2	equ	0xFDB
 13476                           fsr2h	equ	0xFDA
 13477                           fsr2l	equ	0xFD9
 13478                           status	equ	0xFD8
 13479                           
 13480 ;; *************** function i2_IncreaseByAYear *****************
 13481 ;; Defined at:
 13482 ;;		line 41 in file "libs/funcs.c"
 13483 ;; Parameters:    Size  Location     Type
 13484 ;;  dt             11    5[COMRAM] struct _GSK_DATE_TIME
 13485 ;; Auto vars:     Size  Location     Type
 13486 ;;		None
 13487 ;; Return value:  Size  Location     Type
 13488 ;;                  11    5[COMRAM] struct _GSK_DATE_TIME
 13489 ;; Registers used:
 13490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13491 ;; Tracked objects:
 13492 ;;		On entry : 0/0
 13493 ;;		On exit  : 0/0
 13494 ;;		Unchanged: 0/0
 13495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13496 ;;      Params:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13499 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13500 ;;Total ram usage:       11 bytes
 13501 ;; Hardware stack levels used:    1
 13502 ;; Hardware stack levels required when called:    1
 13503 ;; This function calls:
 13504 ;;		i2___lwmod
 13505 ;; This function is called by:
 13506 ;;		i2_IncreaseByAMonth
 13507 ;; This function uses a non-reentrant model
 13508 ;;
 13509                           
 13510                           	psect	text63
 13511  00346E                     __ptext63:
 13512                           	opt stack 0
 13513  00346E                     i2_IncreaseByAYear:
 13514                           	opt stack 15
 13515                           
 13516                           ;funcs.c: 42: dt.YEAR++;
 13517                           
 13518                           ;incstack = 0
 13519  00346E  4A0F               	infsnz	i2IncreaseByAYear@dt+9,f,c
 13520  003470  2A10               	incf	i2IncreaseByAYear@dt+10,f,c
 13521                           
 13522                           ;funcs.c: 43: if (dt.YEAR % 100 == 0)
 13523  003472  C00F  F001         	movff	i2IncreaseByAYear@dt+9,i2___lwmod@dividend
 13524  003476  C010  F002         	movff	i2IncreaseByAYear@dt+10,i2___lwmod@dividend+1
 13525  00347A  D811               	call	PL160	;call to abstracted procedure
 13526  00347C  ECFC  F019         	call	i2___lwmod	;wreg free
 13527  003480  5001               	movf	?i2___lwmod,w,c
 13528  003482  1002               	iorwf	?i2___lwmod+1,w,c
 13529  003484  E102               	bnz	i2l3408
 13530                           
 13531                           ;funcs.c: 44: CENTURY++;
 13532  003486  0100               	movlb	0	; () banked
 13533  003488  2BFE               	incf	_CENTURY& (0+255),f,b
 13534  00348A                     i2l3408:
 13535                           
 13536                           ;funcs.c: 45: return dt;
 13537  00348A  EE20  F006         	lfsr	2,i2IncreaseByAYear@dt
 13538  00348E  EE00  F006         	lfsr	0,?i2_IncreaseByAYear
 13539  003492  0E0A               	movlw	10
 13540  003494                     i2u256_41:
 13541  003494  CFDB FFEB          	movff	plusw2,plusw0
 13542  003498  06E8               	decf	wreg,f,c
 13543  00349A  E2FC               	bc	i2u256_41
 13544  00349C  0012               	return		;funcret
 13545  00349E                     __end_ofi2_IncreaseByAYear:
 13546                           	opt stack 0
 13547  00349E                     PL160:
 13548                           	opt stack 15
 13549  00349E  6A04               	clrf	i2___lwmod@divisor+1,c
 13550  0034A0  0E64               	movlw	100
 13551  0034A2  6E03               	movwf	i2___lwmod@divisor,c
 13552  0034A4  0C64               	retlw	100
 13553  0034A6                     __end_ofPL160:
 13554                           	opt stack 0
 13555                           tosu	equ	0xFFF
 13556                           tosh	equ	0xFFE
 13557                           tosl	equ	0xFFD
 13558                           pclatu	equ	0xFFB
 13559                           pclath	equ	0xFFA
 13560                           tblptru	equ	0xFF8
 13561                           tblptrh	equ	0xFF7
 13562                           tblptrl	equ	0xFF6
 13563                           tablat	equ	0xFF5
 13564                           prodh	equ	0xFF4
 13565                           prodl	equ	0xFF3
 13566                           intcon	equ	0xFF2
 13567                           postinc0	equ	0xFEE
 13568                           plusw0	equ	0xFEB
 13569                           fsr0h	equ	0xFEA
 13570                           fsr0l	equ	0xFE9
 13571                           wreg	equ	0xFE8
 13572                           indf1	equ	0xFE7
 13573                           postinc1	equ	0xFE6
 13574                           postdec1	equ	0xFE5
 13575                           plusw1	equ	0xFE3
 13576                           fsr1h	equ	0xFE2
 13577                           fsr1l	equ	0xFE1
 13578                           indf2	equ	0xFDF
 13579                           postinc2	equ	0xFDE
 13580                           postdec2	equ	0xFDD
 13581                           plusw2	equ	0xFDB
 13582                           fsr2h	equ	0xFDA
 13583                           fsr2l	equ	0xFD9
 13584                           status	equ	0xFD8
 13585                           
 13586 ;; *************** function i2___lwmod *****************
 13587 ;; Defined at:
 13588 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;  dividend        2    0[COMRAM] unsigned int 
 13591 ;;  divisor         2    2[COMRAM] unsigned int 
 13592 ;; Auto vars:     Size  Location     Type
 13593 ;;  __lwmod         1    4[COMRAM] unsigned char 
 13594 ;; Return value:  Size  Location     Type
 13595 ;;                  2    0[COMRAM] unsigned int 
 13596 ;; Registers used:
 13597 ;;		wreg, status,2, status,0
 13598 ;; Tracked objects:
 13599 ;;		On entry : 0/0
 13600 ;;		On exit  : 0/0
 13601 ;;		Unchanged: 0/0
 13602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13603 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13606 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13607 ;;Total ram usage:        5 bytes
 13608 ;; Hardware stack levels used:    1
 13609 ;; This function calls:
 13610 ;;		Nothing
 13611 ;; This function is called by:
 13612 ;;		i2_IncreaseByADay
 13613 ;;		i2_IncreaseByAYear
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           	psect	text64
 13618  0033F8                     __ptext64:
 13619                           	opt stack 0
 13620  0033F8                     i2___lwmod:
 13621                           	opt stack 17
 13622                           
 13623                           ;incstack = 0
 13624  0033F8  5003               	movf	i2___lwmod@divisor,w,c
 13625  0033FA  1004               	iorwf	i2___lwmod@divisor+1,w,c
 13626  0033FC  E017               	bz	i2l1591
 13627  0033FE  0E01               	movlw	1
 13628  003400  6E05               	movwf	i2___lwmod@counter,c
 13629  003402  D004               	goto	i2l3376
 13630  003404                     i2l3374:
 13631  003404  90D8               	bcf	status,0,c
 13632  003406  3603               	rlcf	i2___lwmod@divisor,f,c
 13633  003408  3604               	rlcf	i2___lwmod@divisor+1,f,c
 13634  00340A  2A05               	incf	i2___lwmod@counter,f,c
 13635  00340C                     i2l3376:
 13636  00340C  AE04               	btfss	i2___lwmod@divisor+1,7,c
 13637  00340E  D7FA               	goto	i2l3374
 13638  003410                     i2l3378:
 13639  003410  5003               	movf	i2___lwmod@divisor,w,c
 13640  003412  5C01               	subwf	i2___lwmod@dividend,w,c
 13641  003414  5004               	movf	i2___lwmod@divisor+1,w,c
 13642  003416  5802               	subwfb	i2___lwmod@dividend+1,w,c
 13643  003418  E304               	bnc	i2l3382
 13644  00341A  5003               	movf	i2___lwmod@divisor,w,c
 13645  00341C  5E01               	subwf	i2___lwmod@dividend,f,c
 13646  00341E  5004               	movf	i2___lwmod@divisor+1,w,c
 13647  003420  5A02               	subwfb	i2___lwmod@dividend+1,f,c
 13648  003422                     i2l3382:
 13649  003422  90D8               	bcf	status,0,c
 13650  003424  3204               	rrcf	i2___lwmod@divisor+1,f,c
 13651  003426  3203               	rrcf	i2___lwmod@divisor,f,c
 13652  003428  2E05               	decfsz	i2___lwmod@counter,f,c
 13653  00342A  D7F2               	goto	i2l3378
 13654  00342C                     i2l1591:
 13655  00342C  C001  F001         	movff	i2___lwmod@dividend,?i2___lwmod
 13656  003430  C002  F002         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13657  003434  0012               	return		;funcret
 13658  003436                     __end_ofi2___lwmod:
 13659                           	opt stack 0
 13660                           tosu	equ	0xFFF
 13661                           tosh	equ	0xFFE
 13662                           tosl	equ	0xFFD
 13663                           pclatu	equ	0xFFB
 13664                           pclath	equ	0xFFA
 13665                           tblptru	equ	0xFF8
 13666                           tblptrh	equ	0xFF7
 13667                           tblptrl	equ	0xFF6
 13668                           tablat	equ	0xFF5
 13669                           prodh	equ	0xFF4
 13670                           prodl	equ	0xFF3
 13671                           intcon	equ	0xFF2
 13672                           postinc0	equ	0xFEE
 13673                           plusw0	equ	0xFEB
 13674                           fsr0h	equ	0xFEA
 13675                           fsr0l	equ	0xFE9
 13676                           wreg	equ	0xFE8
 13677                           indf1	equ	0xFE7
 13678                           postinc1	equ	0xFE6
 13679                           postdec1	equ	0xFE5
 13680                           plusw1	equ	0xFE3
 13681                           fsr1h	equ	0xFE2
 13682                           fsr1l	equ	0xFE1
 13683                           indf2	equ	0xFDF
 13684                           postinc2	equ	0xFDE
 13685                           postdec2	equ	0xFDD
 13686                           plusw2	equ	0xFDB
 13687                           fsr2h	equ	0xFDA
 13688                           fsr2l	equ	0xFD9
 13689                           status	equ	0xFD8
 13690                           tosu	equ	0xFFF
 13691                           tosh	equ	0xFFE
 13692                           tosl	equ	0xFFD
 13693                           pclatu	equ	0xFFB
 13694                           pclath	equ	0xFFA
 13695                           tblptru	equ	0xFF8
 13696                           tblptrh	equ	0xFF7
 13697                           tblptrl	equ	0xFF6
 13698                           tablat	equ	0xFF5
 13699                           prodh	equ	0xFF4
 13700                           prodl	equ	0xFF3
 13701                           intcon	equ	0xFF2
 13702                           postinc0	equ	0xFEE
 13703                           plusw0	equ	0xFEB
 13704                           fsr0h	equ	0xFEA
 13705                           fsr0l	equ	0xFE9
 13706                           wreg	equ	0xFE8
 13707                           indf1	equ	0xFE7
 13708                           postinc1	equ	0xFE6
 13709                           postdec1	equ	0xFE5
 13710                           plusw1	equ	0xFE3
 13711                           fsr1h	equ	0xFE2
 13712                           fsr1l	equ	0xFE1
 13713                           indf2	equ	0xFDF
 13714                           postinc2	equ	0xFDE
 13715                           postdec2	equ	0xFDD
 13716                           plusw2	equ	0xFDB
 13717                           fsr2h	equ	0xFDA
 13718                           fsr2l	equ	0xFD9
 13719                           status	equ	0xFD8
 13720                           
 13721                           	psect	text65
 13722  000000                     __ptext65:
 13723                           	opt stack 0
 13724                           tosu	equ	0xFFF
 13725                           tosh	equ	0xFFE
 13726                           tosl	equ	0xFFD
 13727                           pclatu	equ	0xFFB
 13728                           pclath	equ	0xFFA
 13729                           tblptru	equ	0xFF8
 13730                           tblptrh	equ	0xFF7
 13731                           tblptrl	equ	0xFF6
 13732                           tablat	equ	0xFF5
 13733                           prodh	equ	0xFF4
 13734                           prodl	equ	0xFF3
 13735                           intcon	equ	0xFF2
 13736                           postinc0	equ	0xFEE
 13737                           plusw0	equ	0xFEB
 13738                           fsr0h	equ	0xFEA
 13739                           fsr0l	equ	0xFE9
 13740                           wreg	equ	0xFE8
 13741                           indf1	equ	0xFE7
 13742                           postinc1	equ	0xFE6
 13743                           postdec1	equ	0xFE5
 13744                           plusw1	equ	0xFE3
 13745                           fsr1h	equ	0xFE2
 13746                           fsr1l	equ	0xFE1
 13747                           indf2	equ	0xFDF
 13748                           postinc2	equ	0xFDE
 13749                           postdec2	equ	0xFDD
 13750                           plusw2	equ	0xFDB
 13751                           fsr2h	equ	0xFDA
 13752                           fsr2l	equ	0xFD9
 13753                           status	equ	0xFD8
 13754                           
 13755                           	psect	rparam
 13756  0000                     tosu	equ	0xFFF
 13757                           tosh	equ	0xFFE
 13758                           tosl	equ	0xFFD
 13759                           pclatu	equ	0xFFB
 13760                           pclath	equ	0xFFA
 13761                           tblptru	equ	0xFF8
 13762                           tblptrh	equ	0xFF7
 13763                           tblptrl	equ	0xFF6
 13764                           tablat	equ	0xFF5
 13765                           prodh	equ	0xFF4
 13766                           prodl	equ	0xFF3
 13767                           intcon	equ	0xFF2
 13768                           postinc0	equ	0xFEE
 13769                           plusw0	equ	0xFEB
 13770                           fsr0h	equ	0xFEA
 13771                           fsr0l	equ	0xFE9
 13772                           wreg	equ	0xFE8
 13773                           indf1	equ	0xFE7
 13774                           postinc1	equ	0xFE6
 13775                           postdec1	equ	0xFE5
 13776                           plusw1	equ	0xFE3
 13777                           fsr1h	equ	0xFE2
 13778                           fsr1l	equ	0xFE1
 13779                           indf2	equ	0xFDF
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           plusw2	equ	0xFDB
 13783                           fsr2h	equ	0xFDA
 13784                           fsr2l	equ	0xFD9
 13785                           status	equ	0xFD8
 13786                           
 13787                           	psect	temp
 13788  00005F                     btemp:
 13789                           	opt stack 0
 13790  00005F                     	ds	1
 13791  0000                     int$flags	set	btemp
 13792                           tosu	equ	0xFFF
 13793                           tosh	equ	0xFFE
 13794                           tosl	equ	0xFFD
 13795                           pclatu	equ	0xFFB
 13796                           pclath	equ	0xFFA
 13797                           tblptru	equ	0xFF8
 13798                           tblptrh	equ	0xFF7
 13799                           tblptrl	equ	0xFF6
 13800                           tablat	equ	0xFF5
 13801                           prodh	equ	0xFF4
 13802                           prodl	equ	0xFF3
 13803                           intcon	equ	0xFF2
 13804                           postinc0	equ	0xFEE
 13805                           plusw0	equ	0xFEB
 13806                           fsr0h	equ	0xFEA
 13807                           fsr0l	equ	0xFE9
 13808                           wreg	equ	0xFE8
 13809                           indf1	equ	0xFE7
 13810                           postinc1	equ	0xFE6
 13811                           postdec1	equ	0xFE5
 13812                           plusw1	equ	0xFE3
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           plusw2	equ	0xFDB
 13819                           fsr2h	equ	0xFDA
 13820                           fsr2l	equ	0xFD9
 13821                           status	equ	0xFD8
 13822                           tosu	equ	0xFFF
 13823                           tosh	equ	0xFFE
 13824                           tosl	equ	0xFFD
 13825                           pclatu	equ	0xFFB
 13826                           pclath	equ	0xFFA
 13827                           tblptru	equ	0xFF8
 13828                           tblptrh	equ	0xFF7
 13829                           tblptrl	equ	0xFF6
 13830                           tablat	equ	0xFF5
 13831                           prodh	equ	0xFF4
 13832                           prodl	equ	0xFF3
 13833                           intcon	equ	0xFF2
 13834                           postinc0	equ	0xFEE
 13835                           plusw0	equ	0xFEB
 13836                           fsr0h	equ	0xFEA
 13837                           fsr0l	equ	0xFE9
 13838                           wreg	equ	0xFE8
 13839                           indf1	equ	0xFE7
 13840                           postinc1	equ	0xFE6
 13841                           postdec1	equ	0xFE5
 13842                           plusw1	equ	0xFE3
 13843                           fsr1h	equ	0xFE2
 13844                           fsr1l	equ	0xFE1
 13845                           indf2	equ	0xFDF
 13846                           postinc2	equ	0xFDE
 13847                           postdec2	equ	0xFDD
 13848                           plusw2	equ	0xFDB
 13849                           fsr2h	equ	0xFDA
 13850                           fsr2l	equ	0xFD9
 13851                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    8
    Data        1093
    BSS         1343
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     75      94
    BANK0           160     82     159
    BANK1           256      0     116
    BANK2           256      0     240
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          126      0       0

Pointer List with Targets:

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Timer0_10ms(), Absolute function(), TMR0_DefaultInterruptHandler(), 

    TimeTextToSecond@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    ValidateDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    GetDay@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Date	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Date(BANK0[7]), 

    ReadGPSDateTime@Time	PTR unsigned char  size(1) Largest target is 7
		 -> ReadGPS_DATE_TIME@Time(BANK0[7]), 

    LIGHTS	PTR unsigned char [2] size(2) Largest target is 1
		 -> LATB(SFR_2[1]), LATA(SFR_2[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_CallBack->_Timer0_10ms
    _Timer0_10ms->_IncreaseByASecond
    ___lbtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lbtoft
    _IncreaseByASecond->i2_IncreaseByADay
    i2_IncreaseByADay->i2_IncreaseByAMonth
    i2_IncreaseByAMonth->i2_IncreaseByAYear
    i2_IncreaseByAYear->i2___lwmod

Critical Paths under _main in BANK0

    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___aldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _ReadGPS->_ReadGPS_DATE_TIME
    _ReadGPS_DATE_TIME->_AdjustDayLightSaving
    _TimeTextToSecond->___lmul
    _GetDay->___awmod
    ___awmod->___awdiv
    _AdjustDayLightSaving->_IncreaseByADay
    _IncreaseByADay->_IncreaseByAMonth
    _IncreaseByAMonth->_IncreaseByAYear
    _IncreaseByAYear->___lwmod
    _DecreaseByADay->_DecreaseByAMonth
    _DecreaseByAMonth->_DecreaseByAYear
    _DecreaseByAYear->___lwmod
    _LoadAllFromEeprom->_LoadStatesFromEeprom
    _LoadStatesFromEeprom->___awdiv
    _LoadSettingsFromEeprom->___wmul
    _LoadEventsFromEeprom->___lmul
    _LoadCyclesFromEeprom->___wmul
    _Lcd_Init->_Lcd_Command
    _GetEventNumber->___wmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   70752
                                             78 BANK0      4     4      0
                     _GetEventNumber
                       _GetThisCycle
                           _Lcd_Init
                  _LoadAllFromEeprom
                            _ReadGPS
                  _SYSTEM_Initialize
                            _StopGPS
                        _SwitchOnGPS
           _TMR0_SetInterruptHandler
              _TestGPSStartCondition
                 _VerifyForGPSOnTIme
                        _WriteEeprom
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (1) _WriteLongInt                                         9     2      7    6169
                                             18 BANK0      9     2      7
                       _GetThisCycle (ARG)
                      _Lcd_WriteChar
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     656
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _Lcd_WriteChar                                        4     2      2    1196
                                             14 BANK0      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _Lcd_CharCP                                           3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _WriteEeprom                                          5     2      3     268
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _VerifyForGPSOnTIme                                   4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _TestGPSStartCondition                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SwitchOnGPS                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _StopGPS                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     223
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     200
                                              2 BANK0      2     2      0
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_SetInterruptHandler                             2     0      2     200
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ReadGPS                                              0     0      0   23917
                  _ReadGPS_DATE_TIME
 ---------------------------------------------------------------------------------
 (2) _ReadGPS_DATE_TIME                                   20    20      0   23917
                                             58 BANK0     20    20      0
               _AdjustDayLightSaving
                     _DecreaseByADay
                 _EUSART1_Initialize
                             _GetDay
                     _IncreaseByADay
                    _ReadGPSDateTime
                   _TimeTextToSecond
                   _ValidateDateTime
 ---------------------------------------------------------------------------------
 (3) _ValidateDateTime                                     4     2      2     712
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _TimeTextToSecond                                    24    20      4    1734
                                             12 BANK0     24    20      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _ReadGPSDateTime                                     19    17      2     566
                                              0 BANK0     19    17      2
                       _EUSART1_Read
 ---------------------------------------------------------------------------------
 (4) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetDay                                              11    10      1    1865
                                             14 BANK0     11    10      1
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     474
                                              8 BANK0      6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _AdjustDayLightSaving                                17     6     11   11775
                                             41 BANK0     17     6     11
                     _DecreaseByADay
                     _IncreaseByADay
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _IncreaseByADay                                      14     3     11    3453
                                             27 BANK0     14     3     11
                   _IncreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _IncreaseByAMonth                                    11     0     11    1598
                                             16 BANK0     11     0     11
                    _IncreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _IncreaseByAYear                                     11     0     11    1388
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) _DecreaseByADay                                      13     2     11    3443
                                             27 BANK0     13     2     11
                   _DecreaseByAMonth
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) _DecreaseByAMonth                                    11     0     11    1590
                                             16 BANK0     11     0     11
                    _DecreaseByAYear
 ---------------------------------------------------------------------------------
 (5) _DecreaseByAYear                                     11     0     11    1385
                                              5 BANK0     11     0     11
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4    1227
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) _LoadAllFromEeprom                                    0     0      0   34876
               _LoadCyclesFromEeprom
               _LoadEventsFromEeprom
             _LoadSettingsFromEeprom
               _LoadStatesFromEeprom
 ---------------------------------------------------------------------------------
 (2) _LoadStatesFromEeprom                                20    20      0    9164
                                              8 BANK0     20    20      0
                         _ReadEeprom
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1012
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _LoadSettingsFromEeprom                               8     8      0    8319
                                              6 BANK0      8     8      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _LoadEventsFromEeprom                                14    14      0    9468
                                             12 BANK0     14    14      0
                         _ReadEeprom
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1490
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _LoadCyclesFromEeprom                                15    15      0    7925
                                              6 BANK0     15    15      0
                         _ReadEeprom
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _ReadEeprom                                           2     0      2    3160
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              3 BANK0      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Delay5500us                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Command                                          3     3      0     176
                                              0 BANK0      3     3      0
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (4) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetThisCycle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GetEventNumber                                      11    11      0    4649
                                              6 BANK0     11    11      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    4405
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          10    10      0    9456
                                             65 COMRAM    10    10      0
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    9456
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR0_CallBack                                       0     0      0    9456
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
                        _Timer0_10ms *
 ---------------------------------------------------------------------------------
 (11) _Timer0_10ms                                        13    13      0    9456
                                             52 COMRAM    13    13      0
                  _IncreaseByASecond
                            ___almod
                            ___ftmul
                            ___fttol
                           ___lbtoft
                     i2_GetThisCycle
 ---------------------------------------------------------------------------------
 (12) i2_GetThisCycle                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (12) ___lbtoft                                            4     1      3    2839
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___fttol                                            15    11      4     430
                                             27 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (12) ___ftmul                                            15     9      6    3653
                                             12 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftpack                                            8     3      5    2817
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (12) ___almod                                            10     2      8     474
                                              0 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (12) _IncreaseByASecond                                  11     0     11    1400
                                             41 COMRAM    11     0     11
                   i2_IncreaseByADay
 ---------------------------------------------------------------------------------
 (13) i2_IncreaseByADay                                   14     3     11    1242
                                             27 COMRAM    14     3     11
                 i2_IncreaseByAMonth
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2_IncreaseByAMonth                                 11     0     11     544
                                             16 COMRAM    11     0     11
                  i2_IncreaseByAYear
 ---------------------------------------------------------------------------------
 (15) i2_IncreaseByAYear                                  11     0     11     407
                                              5 COMRAM    11     0     11
                          i2___lwmod
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     315
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (11) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetEventNumber
     ___wmul
   _GetThisCycle
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _LoadAllFromEeprom
     _LoadCyclesFromEeprom
       _ReadEeprom
       ___wmul
     _LoadEventsFromEeprom
       _ReadEeprom
       ___lmul
       ___wmul
     _LoadSettingsFromEeprom
       _ReadEeprom
       ___wmul
     _LoadStatesFromEeprom
       _ReadEeprom
       ___awdiv
       ___wmul
   _ReadGPS
     _ReadGPS_DATE_TIME
       _AdjustDayLightSaving
         _DecreaseByADay
           _DecreaseByAMonth
             _DecreaseByAYear
               ___lwmod
           ___lwmod
         _IncreaseByADay
           _IncreaseByAMonth
             _IncreaseByAYear
               ___lwmod
           ___lwmod
         ___wmul
       _DecreaseByADay
         _DecreaseByAMonth
           _DecreaseByAYear
             ___lwmod
         ___lwmod
       _EUSART1_Initialize
       _GetDay
         ___awdiv
         ___awmod
           ___awdiv (ARG)
       _IncreaseByADay
         _IncreaseByAMonth
           _IncreaseByAYear
             ___lwmod
         ___lwmod
       _ReadGPSDateTime
         _EUSART1_Read
       _TimeTextToSecond
         ___lmul
       _ValidateDateTime
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
   _StopGPS
   _SwitchOnGPS
   _TMR0_SetInterruptHandler
   _TestGPSStartCondition
   _VerifyForGPSOnTIme
   _WriteEeprom
   _WriteLongInt
     _GetThisCycle (ARG)
     _Lcd_WriteChar (ARG)
       _Lcd_CharCP
         _Lcd_Delay5us
       _Lcd_Command
         _Lcd_Delay5us
       ___aldiv (ARG)
     ___aldiv (ARG)
     ___lmul (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_10ms *
         _IncreaseByASecond
           i2_IncreaseByADay
             i2_IncreaseByAMonth
               i2_IncreaseByAYear
                 i2___lwmod
             i2___lwmod
         ___almod
         ___ftmul
           ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lbtoft (ARG)
               ___ftpack
           ___lbtoft (ARG)
             ___ftpack
         ___lbtoft
           ___ftpack
         i2_GetThisCycle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E7D      0     7C0      35       53.5%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F0      10       93.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      74       8       45.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     52      9F       5       99.4%
BITBANK14           7E      0       0      33        0.0%
BANK14              7E      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     4B      5E       1      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     261       6        0.0%
DATA                 0      0     A21       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Aug 07 11:34:27 2017

            __end_of_LoadStatesFromEeprom 1B80                   __end_of_ReadGPSDateTime 2A3A  
           __size_of_AdjustDayLightSaving 0112                               __CFG_CP$OFF 000000  
                                      PL2 1FAA                                        PL4 1FC4  
                                      PL6 1FCC                                        PL8 1854  
                            ___awdiv@sign 0065                       ___wmul@multiplicand 0062  
                    __size_of_WriteEeprom 0032                                       PL10 2594  
                                     PL20 1C88                                       PL12 22BE  
                                     PL30 1CDC                                       PL22 1E74  
                                     PL14 1B80                                       PL40 22CE  
                                     PL32 1CEC                                       PL24 1CB4  
                                     PL16 21EA                                       PL50 2906  
                                     PL42 160E                                       PL34 1D08  
                                     PL26 15B0                                       PL18 159C  
                                     PL60 1E86                                       PL52 291E  
                                     PL44 25A8                                       PL36 15EA  
                                     PL28 15C6                                       PL70 1D34  
                                     PL62 23E4                                       PL54 2744  
                                     PL46 25B2                                       PL38 15FA  
                             __CFG_LVP$ON 000000                                       PL80 1B90  
                                     PL72 25C8                                       PL64 25BC  
                                     PL56 275C                                       PL48 1D10  
                                     PL90 294C                                       PL82 22F6  
                                     PL74 277E                                       PL66 2774  
                                     PL58 2936                                       PL92 1B9E  
                                     PL84 2C70                                       PL76 24D0  
                                     PL68 1D1E                                       PL94 2F28  
                                     PL86 278C                                       PL78 22EE  
                                     PL96 23FA                                       PL88 315A  
                                     PL98 21F4                                       l133 2A38  
                                     l127 2A1C                                       l274 2E36  
                                     l702 346A                                       l457 3502  
                                     l639 24AA                                       l744 363C  
                                     l649 3526                                       l657 2052  
                                     l691 313E                                       l684 3320  
                                     l848 35E6                                       _GIE 007F97  
                            __CFG_CPD$OFF 000000                        DecreaseByAMonth@dt 0070  
                            ___awmod@sign 006D                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                     __end_of_Lcd_Command 2744             projMain@NO_OF_DAYS_IN_A_MONTH 0144  
                                    PL100 1BB0                                      PL110 1620  
                                    PL102 1A16                                      PL120 2300  
                                    PL112 1630                                      PL104 279E  
                                    PL130 2200                                      PL122 165C  
                                    PL114 2BB6                                      PL106 25D4  
                                    PL140 20E8                                      PL132 2C82  
                                    PL124 166A                                      PL116 1640  
                                    PL108 295E                                      PL150 24E8  
                                    PL142 2BC4                                      PL134 34D4  
                                    PL126 2E8C                                      PL118 164E  
                                    PL160 349E                                      PL152 2FB6  
                                    PL144 24DE                                      PL136 1BBC  
                                    PL128 2E96                                      PL162 1BC6  
                                    PL154 167E                                      PL146 26BA  
                                    PL138 1674                                      PL156 2880  
                                    PL148 2FAC                                      PL158 20F2  
                            __CFG_ZCD$OFF 000000                                      l1033 1DB6  
                                    l1034 1DB8                                      l1190 321C  
                                    l4006 2592                                      l4060 203C  
                                    l4062 204C                                      l1591 33EE  
                                    l3600 2412                                      l4072 208A  
                                    l3418 34C0                                      l3450 3296  
                                    l4058 2032                                      l3460 31FA  
                                    l3612 2474                                      l4260 334A  
                                    l4414 1A38                                      l3390 33C6  
                                    l3462 3200                                      l4078 20D4  
                                    l3542 364A                                      l4262 3350  
                                    l3640 3230                                      l4424 1A5A  
                                    l3392 33CE                                      l3624 24B6  
                                    l3800 3096                                      l4520 18AC  
                                    l4256 333E                                      l3394 33D2  
                                    l3626 24BC                                      l3618 2490  
                                    l4514 188A                                      l4258 3344  
                                    l4266 3358                                      l3732 2FD2  
                                    l4452 1B36                                      l4436 1A9E  
                                    l3580 2812                                      l3564 27BC  
                                    l3900 298C                                      l4540 19A4  
                                    l4524 18B4                                      l4268 336C  
                                    l4470 1E9A                                      l3398 33E4  
                                    l3574 27F6                                      l4622 2CA6  
                                    l3744 2FF2                                      l3760 3022  
                                    l4456 1B5E                                      l3592 286C  
                                    l3920 29D6                                      l3912 29BC  
                                    l4482 1EE2                                      l4378 1BD8  
                                    l3746 2FFA                                      l3738 2FE2  
                                    l3586 282E                                      l3930 2A10  
                                    l3914 29C0                                      l4546 19EE  
                                    l4554 1A14                                      l4634 2CD6  
                                    l4650 2D22                                      l4730 2C2A  
                                    l4812 2296                                      l4804 220E  
                                    l4492 1F48                                      l3764 302E  
                                    l3756 3018                                      l3748 2FFE  
                                    l3780 3056                                      l4636 2CE2  
                                    l4628 2CBE                                      l4486 1EF4  
                                    l3934 2A20                                      l4654 2D36  
                                    l4646 2D14                                      l4638 2CE6  
                                    l4816 229A                                      l4824 22AE  
                                    l4496 1F76                                      l4488 1F30  
                                    l3792 3080                                      l3784 3062  
                                    l3776 304A                                      l3928 29EC  
                                    l3936 2A28                                      l4728 2C1A  
                                    l4736 2C68                                      l3786 306A  
                                    l3788 306E                                      l3796 308A  
                                    l3956 250E                                      l3966 2528  
                                    l4790 3156                                      l3976 2542  
                                    l4776 3130                                      l3986 255E  
                                    l4778 3134                                      l3996 2578  
                                    l4788 3154                                      l4876 1D56  
                                    _LATA 000F83                                      _LATB 000F84  
                                    u3111 2438                                      _LATC 000F85  
                                    u3121 244A                                      u3061 2852  
                                    u3071 2864                                      u2601 3536  
                                    u3081 2876                                      u2701 31DE  
                                    u4310 1C86                                      u5007 3656  
                                    u2711 31F0                                      u3191 24C6  
                                    u4320 1A9A                                      u5017 2702  
                                    u2721 320A                                      u4330 1AE0  
                                    u5027 2732                                      u4420 1FA8  
                                    u3700 2162                                      u2581 34CA  
                                    u2661 327C                                      u4501 198A  
                                    u2671 328E                                      u4511 199C  
                                    u4431 186A                                      u4344 1B14  
                                    u4520 19BA                                      u4345 1B12  
                                    u2681 32A0                                      u4441 187C  
                   __size_of_WriteLongInt 00A4                                      u4531 19D4  
                                    u3555 289A                                      u4380 1B7E  
                                    u4364 1B3C                                      u3580 297A  
                                    u4365 1B3A                                      u4541 19E6  
                                    u3565 28A0                                      u4390 1EDE  
                                    u4551 19F8                                      u3575 28AE  
                                    u3921 2070                                      u4561 1A0A  
                                    u3690 2160                                      u4570 3102  
                                    u3835 26D4                                      u3931 2082  
                                    u3691 215C                                      u3940 20A0  
                                    u4484 18F4                                      u4740 3334  
                                    u3845 26DA                                      u4485 18EE  
                                    u3855 26EA                                      u3951 20BA  
                                    u3961 20CC                                      u4761 3118  
                                    u3971 20DE                                      u4870 22BC  
                                    u4790 344E                                      u4977 28C6  
                                    u4987 28F4                                      u4997 2A22  
                                    _PLLR 0076D8                                      _WPUA 000F10  
                                    _WPUB 000F18                                      _WPUC 000F20  
                                    _WPUE 000F2D                            _IncreaseByADay 27A8  
                        _DecreaseByAMonth 31C8                         ??_Lcd_Delay5500us 0060  
                           __CFG_FCMEN$ON 000000                                      _main 1D3E  
                            ___ftpack@arg 0001                             ?_EUSART1_Read 0001  
                            ___ftpack@exp 0004                           _TMR0_StartTimer 36B4  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                      __end_of_Lcd_Delay5us 369E  
                                    fsr2l 000FD9                                      btemp 005F  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 0070                LoadEventsFromEeprom@Temp16 0078  
                           __CFG_CSWEN$ON 000000                  _GPS_SYNC_EVERY_x_SECONDS 00D4  
                            ___ftmul@cntr 001A                              ___param_bank 000000  
                            ___ftmul@sign 001B                           __end_of_ReadGPS 315A  
                              _Lcd_CharCP 288A                             __CFG_SCANE$ON 000000  
                            ___fttol@exp1 002A                              ___fttol@lval 0026  
                  AdjustDayLightSaving@dt 0089                   __end_of_TMR0_Initialize 33BA  
          ??_TMR0_DefaultInterruptHandler 0001            __size_of_OSCILLATOR_Initialize 0016  
                 ?_LoadSettingsFromEeprom 0001             __end_of_OSCILLATOR_Initialize 35EC  
              LoadStatesFromEeprom@j_1402 0076                           __end_of_StopGPS 36B4  
                         __end_of___aldiv 2D48                           __end_of___almod 2F28  
                                   ?_main 0001                      __end_of_GetThisCycle 36A6  
                         __end_of___awdiv 3038                             __CFG_WDTE$OFF 000000  
                         __end_of___awmod 30A0                           __end_of___ftmul 2BB6  
                         ___awdiv@divisor 0062                           __end_of___fttol 2E00  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 33F8  
                                   i2l772 003E                           ___awdiv@counter 0064  
                                   _OSCEN 000EDC                                     _TMR0H 000FD4  
                                   _TMR0L 000FD3                                     _TRISA 000F88  
                                   _TRISB 000F89                                     _TRISC 000F8A  
                            _WriteLongInt 2BCC         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 0064  
               ?_TMR0_SetInterruptHandler 0060                             __CFG_WRT3$OFF 000000  
                         _IncreaseByAYear 34A6                            __CFG_EBTR0$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         IncreaseByAYear@dt 0065  
                        __end_of_TMR0_ISR 368C                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                    __end_of_IncreaseByADay 2880  
               __size_of_ValidateDateTime 00A2                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 0005                                     main@i 00B0  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0060                                     plusw0 000FEB  
                                   plusw1 000FE3                                     plusw2 000FDB  
                __end_ofi2_IncreaseByADay 26BA                                     status 000FD8  
                            __end_ofPL100 1BBC                              __end_ofPL110 1630  
                            __end_ofPL102 1A22                              __end_ofPL120 230E  
                            __end_ofPL112 1640                              __end_ofPL104 27A8  
                            __end_ofPL130 220A                              __end_ofPL122 166A  
                            __end_ofPL114 2BC4                              __end_ofPL106 25DE  
                            __end_ofPL140 20F2                              __end_ofPL132 2C8C  
                            __end_ofPL124 1674                              __end_ofPL116 164E  
                            __end_ofPL108 2968                              __end_ofPL150 24F2  
                            __end_ofPL142 2BCC                              __end_ofPL134 34DC  
                            __end_ofPL126 2E96                              __end_ofPL118 165C  
                            __end_ofPL160 34A6                              __end_ofPL152 2FC0  
                            __end_ofPL144 24E8                              __end_ofPL136 1BC6  
                            __end_ofPL128 2EA0                              __end_ofPL162 1BCE  
                            __end_ofPL154 1688                              __end_ofPL146 26C4  
                            __end_ofPL138 167E                              __end_ofPL156 288A  
                            __end_ofPL148 2FB6                              __end_ofPL158 20FA  
           __size_of_LoadCyclesFromEeprom 011A                        _CENTI_SECOND_COUNT 0053  
                      __size_ofi2___lwmod 003E                  __size_of_DecreaseByAYear 0032  
                        __end_of_Lcd_Init 2E8C                                _ReadEeprom 3614  
                         __initialization 2A3A                __end_of_EUSART1_Initialize 3614  
                            __end_of_main 1E74                          ??_DecreaseByADay 0086  
                        ?_ReadGPSDateTime 0060            __end_of_LoadSettingsFromEeprom 1854  
                __end_of_TimeTextToSecond 23E4               ?_INTERRUPT_InterruptManager 0001  
           LoadStatesFromEeprom@AddStates 0078                               _Lcd_Command 26C4  
                 AdjustDayLightSaving@End 0096                   ReadGPS_DATE_TIME@F11475 00F3  
                 ReadGPS_DATE_TIME@F11477 00EC                                    ??_main 00AE  
                           ___fttol@sign1 0025                             __activetblptr 000003  
                          _GetEventNumber 220A                     _AUDIO_NORMAL_OFF_TIME 0058  
                       Timer0_10ms@i_2910 0040                         Timer0_10ms@i_2911 0041  
                       Timer0_10ms@i_2909 003F             LoadStatesFromEeprom@AudAddInc 0073  
                 __end_of_TMR0_StartTimer 36B8                           ?_IncreaseByADay 007B  
                        ___awdiv@dividend 0060                      _LoadStatesFromEeprom 1A22  
                                  _ANSELA 000F11                                    _ANSELB 000F19  
                                  _ANSELC 000F21                          __end_of___ftpack 2FAC  
                        __end_of___lbtoft 35BA                                    _T0CON0 000FD5  
                                  _T0CON1 000FD6                                    _RC1REG 000F99  
                                  _CYCLES 0100                                    _RC1STA 000F9D  
                                  _ODCONA 000F0F                                    _ODCONB 000F17  
                                  _ODCONC 000F1F                                    _RC6PPS 000EFD  
                                  _EVENTS 0200                                    _LIGHTS 00FA  
                                  i2l1141 138E                                    i2l1154 13D0  
                                  i2l1403 2F8C                                    i2l1165 14E2  
                                  i2l1177 1592                            __CFG_WDTCCS$SC 000000  
                                  i2l4102 131A                                    i2l1391 2F46  
                                  i2l4212 14A4                                    i2l4220 14E4  
                                  i2l4108 131C                                    i2l4134 1378  
                                  i2l4150 13A4                                    i2l4118 1330  
                                  i2l1591 342C                                    i2l3408 348A  
                                  i2l4160 13BE                                    i2l4144 1390  
                                  i2l3522 2648                                    i2l3506 25F2  
                                  i2l4250 158E                                    i2l4234 1552  
                                  i2l4218 14D4                                    i2l3516 262C  
                                  i2l4236 155A                                    i2l4172 13E6  
                                  i2l4156 13B8                                    i2l3382 3422  
                                  i2l3374 3404                                    i2l3438 32E0  
                                  i2l3534 26A6                                    i2l3470 2F4E  
                                  i2l3702 2B5C                                    i2l4166 13D2  
                                  i2l3376 340C                                    i2l3528 2668  
                                  i2l3480 2F78                                    i2l3472 2F52  
                                  i2l3712 2B78                                    i2l4184 140A  
                                  i2l3378 3410                                    i2l3554 31B4  
                                  i2l3482 2F82                                    i2l3474 2F60  
                                  i2l3706 2B60                                    i2l4178 13F8  
                                  i2l3660 2ED0                                    i2l3652 2EAC  
                                  i2l3716 2B7C                                    i2l4196 144E  
                                  i2l3662 2EDC                                    i2l3478 2F6C  
                                  i2l3806 2D60                                    i2l4198 1450  
                                  i2l3664 2EE0                                    i2l3672 2F10  
                                  i2l3656 2EC0                                    i2l3496 2F9E  
                                  i2l3840 2DEE                                    i2l3832 2DCA  
                                  i2l3824 2DB2                                    i2l3808 2D6A  
                                  i2l3834 2DD6                                    i2l3676 2F16  
                                  i2l3668 2F02                                    i2l3684 2B1E  
                                  i2l3836 2DDA                                    i2l3828 2DC2  
                                  i2l3688 2B38                                    u330_41 2B2E  
                                  u328_41 2B14                                    u346_41 2D58  
                        WriteLongInt@Sign 0078                                    _OSCFRQ 000EDE  
                                  _NVMDAT 000F80                                    _TX1STA 000F9E  
                                  _STATES 06F0                             _GPS_DATE_TIME 00B2  
                           ??_Timer0_10ms 0035                          WriteLongInt@size 0077  
                               ??_ReadGPS 00AE                                    _GetDay 20FA  
                        _IncreaseByAMonth 3260                            __CFG_PWRTE$OFF 000000  
                      IncreaseByAMonth@dt 0070                            __CFG_XINST$OFF 000000  
            _SPECIAL_AUDIO_LAST_X_SECONDS 0055                               ?_Lcd_CharCP 0001  
               AdjustDayLightSaving@Start 0094                                 ??_StopGPS 0060  
                                  ___lmul 3214                                 ??___aldiv 0068  
              __end_of_VerifyForGPSOnTIme 333A                                 ??___almod 0009  
                                  ___wmul 3570                                 ??___awdiv 0064  
                          __CFG_STVREN$ON 000000                                 ??___awmod 006C  
                               ??___ftmul 0013                                 ??___fttol 0020  
                               ??___lwmod 0064                          ?_TMR0_Initialize 0001  
                                  clear_0 2ABE                                    clear_1 2AD0  
                                  clear_2 2ADC                                    clear_3 2AE8  
                                  clear_4 2AF4                   __end_of_IncreaseByAYear 34D4  
                        ___awdiv@quotient 0066                           ___awmod@divisor 006A  
                         ___awmod@counter 006C                    __end_of_GetEventNumber 22BE  
                   __end_of_Lcd_WriteChar 337A                     ___ftmul@f3_as_product 0017  
                          WriteEeprom@Add 0060                              __pdataBIGRAM 02F0  
                            __pdataCOMRAM 005D                              __mediumconst 0000  
                       __end_ofi2___lwmod 3436                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                   __end_of_TMR0_CallBack 35D6                     ?_LoadStatesFromEeprom 0001  
TMR0_SetInterruptHandler@InterruptHandler 0060                     __size_of_Lcd_Delay5us 0008  
           __size_of_INTERRUPT_Initialize 0004                        Lcd_Command@command 0062  
                   LoadEventsFromEeprom@i 0074                          DecreaseByADay@dt 007B  
                       _SYSTEM_Initialize 35EC                                __accesstop 0060  
                 __end_of__initialization 2AFA                __end_ofi2_IncreaseByAMonth 32F4  
                         __CFG_FEXTOSC$HS 000000                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001              LoadSettingsFromEeprom@Temp16 006A  
            LoadSettingsFromEeprom@Temp32 0066                                ___lbtoft@c 000C  
                              ___ftmul@f1 000D                                ___ftmul@f2 0010  
                             ?_ReadEeprom 0060                 i2IncreaseByADay@MonthDays 0029  
                              ___fttol@f1 001C                        i2___lwmod@dividend 0001  
                          __pcstackCOMRAM 0001                              __pidataBANK0 3628  
                            __pidataBANK1 3540                       __end_of_Timer0_10ms 159C  
                     ??_SYSTEM_Initialize 0064                     __size_of_GetThisCycle 0008  
                   _TIME_AT_LAST_GPS_SYNC 00C8                                 ?_TMR0_ISR 0001  
                       ??_DecreaseByAYear 0070                                __end_ofPL2 1FC4  
                              __end_ofPL4 1FCC                                __end_ofPL6 1FD6  
                              __end_ofPL8 185E                  __end_of_DecreaseByAMonth 3214  
                         ?_GetEventNumber 0001                      __end_of_EUSART1_Read 364E  
                   _TestGPSStartCondition 3436                              _Lcd_Delay5us 3696  
                         _Lcd_Delay5500us 364E                            Lcd_WriteChar@c 006F  
                          Lcd_WriteChar@x 006E                            Lcd_WriteChar@y 0070  
                               ?_Lcd_Init 0001              __end_of_AdjustDayLightSaving 20E8  
                        ?_TMR0_StartTimer 0001                 __end_of_SYSTEM_Initialize 3600  
                        _ValidateDateTime 24F2                       __size_of_Lcd_CharCP 007C  
           __size_of_LoadEventsFromEeprom 00BA                                __pbssBANK0 00B2  
                              __pbssBANK1 0100                                __pbssBANK2 0200  
                           ??_SwitchOnGPS 0060                              _GetThisCycle 369E  
                                 ?_GetDay 006E                   __size_ofi2_GetThisCycle 0008  
                       ReadEeprom@Address 0060          __end_of_TMR0_SetInterruptHandler 3696  
                                 ?___lmul 0060                                   ?___wmul 0060  
                              ??_TMR0_ISR 0042                             ??_WriteEeprom 0063  
                         __CFG_PPS1WAY$ON 000000                            ___lmul@product 0068  
                    Timer0_10ms@ThisCycle 003E                                 ?___ftpack 0001  
                               ?___lbtoft 0009                          ?_IncreaseByAYear 0065  
                                 _CENTURY 00FE                                   _FLAGS_0 00E6  
                                 _FLAGS_1 004E               LoadCyclesFromEeprom@Address 006D  
                                 GetDay@d 0075                                   GetDay@m 0076  
                                 GetDay@t 015C                                   GetDay@y 0077  
                                 _SP1BRGH 000F9C                                   _SP1BRGL 000F9B  
                                 _OSCCON1 000ED8                                   _OSCCON3 000EDA  
                  ??_LoadStatesFromEeprom 0068                                   _NVMADRH 000F7F  
                                 _NVMADRL 000F7E                                   _OSCTUNE 000EDD  
                                 _NVMCON2 000F82                                ??_Lcd_Init 0063  
                                 _PPSLOCK 000EA0                       __size_of_ReadEeprom 0014  
                ReadGPS_DATE_TIME@TempItr 00AD                       IncreaseByASecond@dt 002A  
                       _IncreaseByASecond 316C                LoadCyclesFromEeprom@i_1467 0073  
                       ?i2_IncreaseByADay 001C                      ValidateDateTime@Date 0060  
                             _Timer0_10ms 130A                                   _ReadGPS 3106  
                    ValidateDateTime@Item 0063                      ValidateDateTime@Time 0061  
                         __size_of_GetDay 00F0                        ?_IncreaseByASecond 002A  
                                 __Hparam 0000                        ??i2_IncreaseByADay 0027  
                                 __Lparam 0000                                 _DATE_TIME 00BD  
             AdjustDayLightSaving@Present 0098                                   _StopGPS 36AE  
                                 ___aldiv 2C8C                                   ___almod 2EA0  
                     __end_of_SwitchOnGPS 367E                         Lcd_WriteChar@data 0071  
                                 ___awdiv 2FC0                           __size_of___lmul 004C  
                                 ___awmod 3038                           __size_of___wmul 0026  
                                 ___ftmul 2B04                                   ___fttol 2D48  
                 __end_of_Lcd_Delay5500us 3660                                   ___lwmod 33BA  
                            __psmallconst 0F00                       ??_IncreaseByASecond 0035  
                                 __pcinit 2A3A                    ?_TestGPSStartCondition 0001  
                              ??___ftpack 0006                                ??___lbtoft 000C  
                       ?_TimeTextToSecond 006C                                   __ramtop 0F00  
                            ?_Lcd_Command 0001                                   __ptext0 1D3E  
                                 __ptext1 2BCC                                   __ptext2 2C8C  
                                 __ptext3 333A                                   __ptext4 288A  
                                 __ptext5 34DC                                   __ptext6 32F4  
                                 __ptext7 3436                                   __ptext8 3670  
                                 __ptext9 36AE              __end_of_LoadCyclesFromEeprom 1FAA  
                      ??_TimeTextToSecond 0070                       __end_of_WriteEeprom 350E  
                        ??_IncreaseByADay 0086                     _OSCILLATOR_Initialize 35D6  
                __end_of_IncreaseByAMonth 32AA                          ___awmod@dividend 0068  
                        ___aldiv@dividend 0060                        _EUSART1_Initialize 3600  
                ??_PIN_MANAGER_Initialize 0060                __size_of_SYSTEM_Initialize 0014  
      LoadStatesFromEeprom@AddAudioNormal 006B                     _AUDIO_SPECIAL_ON_TIME 0057  
                    end_of_initialization 2AFA         _NORMAL_AUDIO_STATE_ON_OFF_COUNTER 0051  
               __end_of_IncreaseByASecond 31C8                       ?_EUSART1_Initialize 0001  
                         WriteEeprom@Data 0062                           _DAY_LIGHT_START 00DC  
                       _SECONDS_TO_ADJUST 00E2                              ??_Lcd_CharCP 0060  
                        ___aldiv@quotient 006A                                   postdec1 000FE5  
                                 postdec2 000FDD          _GPS_SYNC_EVERY_DAY_AT_LOCAL_TIME 00D0  
                                 postinc0 000FEE                                   postinc1 000FE6  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0012  
                    _AdjustDayLightSaving 1FD6                      ??_EUSART1_Initialize 0060  
                               _TIME_ZONE 00E4                     __CFG_WDTCPS$WDTCPS_31 000000  
                _TMR0_SetInterruptHandler 368C                             _BLINK_ON_TIME 005C  
                __size_of_ReadGPSDateTime 00D2                        _VerifyForGPSOnTIme 32F4  
                               _TRISAbits 000F88             LoadSettingsFromEeprom@Address 006C  
                   LoadCyclesFromEeprom@i 0071                     LoadCyclesFromEeprom@j 006F  
                               i2___lwmod 33F8                        __end_of_Lcd_CharCP 2906  
                     ?_VerifyForGPSOnTIme 0001                         DecreaseByAYear@dt 0065  
                       _LoadAllFromEeprom 3660                         _ReadGPS_DATE_TIME 185E  
                            _EUSART1_Read 363C                               _SwitchOnGPS 3670  
                         _DecreaseByAYear 350E                        ?_LoadAllFromEeprom 0001  
                      ?_ReadGPS_DATE_TIME 0001                   DecreaseByADay@MonthDays 0087  
                          __end_of_GetDay 21EA                            i2_GetThisCycle 36A6  
                            ??_ReadEeprom 0062                               ___ftmul@exp 0016  
                    _timer0ReloadVal16bit 004C                          ??_GetEventNumber 0066  
                   ?_AdjustDayLightSaving 0089                          IncreaseByADay@dt 007B  
            __end_of_INTERRUPT_Initialize 36BC                  __end_of_ValidateDateTime 2594  
                     ??_LoadAllFromEeprom 007C                               _WriteEeprom 34DC  
                      i2_IncreaseByAMonth 32AA                            __end_of___lmul 3260  
                     ??_ReadGPS_DATE_TIME 009A                          ?_Lcd_Delay5500us 0001  
                           __pidataBIGRAM 0F0A                            __end_of___wmul 3596  
                    ??_VerifyForGPSOnTIme 0060                             __pidataCOMRAM 36BC  
                       __size_of_TMR0_ISR 000E                         ?_DecreaseByAMonth 0070  
                  ?_OSCILLATOR_Initialize 0001                       ?i2_IncreaseByAMonth 0011  
                      ??_DecreaseByAMonth 007B                               __end_ofPL10 25A8  
                             __end_ofPL20 1CB4                               __end_ofPL12 22CE  
                             __end_ofPL30 1CEC                               __end_ofPL22 1E86  
                             __end_ofPL14 1B90                               __end_ofPL40 22EE  
                             __end_ofPL32 1D08                               __end_ofPL24 1CDC  
                             __end_ofPL16 21F4                               __end_ofPL50 291E  
                             __end_ofPL42 1620                               __end_ofPL34 1D10  
                             __end_ofPL26 15C6                               __end_ofPL18 15B0  
                             __end_ofPL60 1E90                               __end_ofPL52 2936  
                             __end_ofPL44 25B2                               __end_ofPL36 15FA  
                             __end_ofPL28 15EA                               __end_ofPL70 1D3E  
                             __end_ofPL62 23FA                               __end_ofPL54 275C  
                             __end_ofPL46 25BC                               __end_ofPL38 160E  
                             __end_ofPL80 1B9E                               __end_ofPL72 25D4  
                             __end_ofPL64 25C8                               __end_ofPL56 2774  
                             __end_ofPL48 1D1E                               __end_ofPL90 295E  
                             __end_ofPL82 2300                               __end_ofPL74 278C  
                             __end_ofPL66 277E                               __end_ofPL58 294C  
                             __end_ofPL92 1BB0                               __end_ofPL84 2C82  
                             __end_ofPL76 24DE                               __end_ofPL68 1D34  
                             __end_ofPL94 2F3A                               __end_ofPL86 279E  
                             __end_ofPL78 22F6                               __end_ofPL96 2402  
                             __end_ofPL88 316C                               __end_ofPL98 2200  
                     start_initialization 2A3A                   __size_of_DecreaseByADay 00CE  
                           _PRESENT_EVENT 005E                  __size_of_TMR0_Initialize 0040  
         __size_of_PIN_MANAGER_Initialize 0066                             _PRESENT_STATE 00EA  
                    _BLINK_LAST_X_SECONDS 005A             __end_ofReadGPSDateTime@F11468 0F09  
                      __end_of_ReadEeprom 3628                                ?i2___lwmod 0001  
               __end_of_LoadAllFromEeprom 3670                         __size_of_Lcd_Init 008C  
              __size_of_IncreaseByASecond 005C                 __end_of_ReadGPS_DATE_TIME 1A16  
                      WriteEeprom@Address 0063              _TIME_WHEN_GPS_IS_SWITCHED_ON 00CC  
                         WriteLongInt@POS 0079                    __end_ofi2_GetThisCycle 36AE  
                    _AUDIO_NORMAL_ON_TIME 0059                                  ??_GetDay 006F  
                         WriteLongInt@Val 0073                    __size_of_Lcd_WriteChar 0040  
                    _LoadCyclesFromEeprom 1E90                      ??i2_IncreaseByAMonth 001C  
      _SPECIAL_AUDIO_STATE_ON_OFF_COUNTER 0050                  ??_LoadSettingsFromEeprom 0066  
                    i2IncreaseByAMonth@dt 0011                          __CFG_LPBOREN$OFF 000000  
                                ??___lmul 0068              __end_of_LoadEventsFromEeprom 1C88  
                                ??___wmul 0064                    __size_of_TMR0_CallBack 001C  
                             __pdataBANK0 00EC                               __pdataBANK1 0144  
                           _DAY_LIGHT_END 00D8                         __size_of___ftpack 0072  
                       __size_of___lbtoft 0024                               __pbssBIGRAM 06F0  
                           ?_WriteLongInt 0072                      __size_of_Lcd_Command 0080  
                ReadGPSDateTime@StartCode 0066                               __pbssCOMRAM 004C  
                           __pcstackBANK0 0060                         i2___lwmod@divisor 0003  
                       i2___lwmod@counter 0005                   __end_of_DecreaseByAYear 3540  
                       ??_ReadGPSDateTime 0062                             WriteLongInt@x 0072  
                           WriteLongInt@y 007A                VerifyForGPSOnTIme@TimeDiff 0060  
                            ?_Timer0_10ms 0001                     ?_LoadCyclesFromEeprom 0001  
                                ?_ReadGPS 0001                     _TMR0_InterruptHandler 00E0  
                         ?i2_GetThisCycle 0001                  __size_of_TMR0_StartTimer 0004  
       LoadStatesFromEeprom@TempNormalAdd 006F                    _PIN_MANAGER_Initialize 30A0  
                  ??_AdjustDayLightSaving 0094                                 __pintcode 0008  
                 ??_TestGPSStartCondition 0060                                  ?_StopGPS 0001  
                                ?___aldiv 0060                                  ?___almod 0001  
                                ?___awdiv 0060                                  ?___awmod 0068  
                                ?___ftmul 000D                                  ?___fttol 001C  
                                ?___lwmod 0060                         _GPS_SYNC_AT_START 00EB  
                  _NO_OF_TIMES_GPS_FAILED 00E7              ??_INTERRUPT_InterruptManager 0042  
                        ___almod@dividend 0001                 __size_ofi2_IncreaseByADay 00DC  
                          ??_WriteLongInt 0079                                  _BAUD1CON 000F9F  
                           _Lcd_WriteChar 333A                               __smallconst 0F00  
                            Timer0_10ms@i 003B               LoadEventsFromEeprom@Address 0076  
                       ?_IncreaseByAMonth 0070                  __size_of_IncreaseByAYear 002E  
                      ??_IncreaseByAMonth 007B                             _TMR0_CallBack 35BA  
           __size_of_LoadStatesFromEeprom 015E                               ??i2___lwmod 0005  
              __size_of_LoadAllFromEeprom 0010                      _INTERRUPT_Initialize 36B8  
              __size_of_ReadGPS_DATE_TIME 01B8                 __size_of_TimeTextToSecond 00D6  
                         ___aldiv@divisor 0064                         ??_TMR0_Initialize 0062  
                        ReadGPSDateTime@i 006E                           ___aldiv@counter 0068  
                          ___wmul@product 0064                                  _LATAbits 000F83  
                         GetEventNumber@i 006F                                  _LATCbits 000F85  
                                _PIE0bits 000EC2                       __CFG_BORV$VBOR_2P45 000000  
         __size_of_LoadSettingsFromEeprom 01CC       __size_of_INTERRUPT_InterruptManager 0062  
                                i2u421_40 146C                ??_TMR0_SetInterruptHandler 0062  
                                i2u262_41 32C6                                  i2u263_41 32D8  
                                i2u415_41 141C                                  _PIR0bits 000ECA  
                                i2u256_41 3494                                  i2u264_41 32EA  
                                i2u416_41 142E                                  i2u290_41 269E  
                                i2u291_41 26B0                                  i2u348_40 2D88  
                                i2u348_45 2D80                                  _PIR3bits 000ECD  
                                i2u295_41 319A                                  i2u296_41 31AC  
                                i2u289_41 268C                                  i2u297_41 31BE  
                     ReadGPSDateTime@Date 0060                       ReadGPSDateTime@Time 0061  
                                _TMR0_ISR 367E                      TimeTextToSecond@Time 006C  
                            Lcd_Init@data 0063                 Timer0_10ms@ThisCycle_2914 003A  
                          ?_Lcd_WriteChar 006E                         ___wmul@multiplier 0060  
                          _DecreaseByADay 2402                                  _Lcd_Init 2E00  
                          ?_TMR0_CallBack 0001                         i2_IncreaseByAYear 346E  
                             _EE_Settings 02F0                         ___lmul@multiplier 0060  
                               copy_data0 2A4E                                 copy_data1 2A72  
                               copy_data2 2A92                     ?_INTERRUPT_Initialize 0001  
                        ?_DecreaseByAYear 0065                      _LoadEventsFromEeprom 1BCE  
                      ?i2_IncreaseByAYear 0006                    ??_LoadCyclesFromEeprom 0066  
                 _STATE_SECONDS_REMAINING 00E8                              ?_SwitchOnGPS 0001  
                   ReadGPS_DATE_TIME@Date 00A5                          __size_of_ReadGPS 0054  
                           _STATE_SECONDS 0054                                  __Hrparam 0000  
                     ??i2_IncreaseByAYear 0011                     ReadGPS_DATE_TIME@Time 009E  
                 __CFG_RSTOSC$EXTOSC_4PLL 000000                       i2IncreaseByAYear@dt 0006  
                                __Lrparam 0000                   ReadGPSDateTime@TempChar 0071  
                      __CFG_BOREN$SBORDIS 000000                   ??_OSCILLATOR_Initialize 0060  
                            ?_WriteEeprom 0060                          __size_of_StopGPS 0006  
                       ??_TMR0_StartTimer 0060                          __size_of___aldiv 00BC  
                        __size_of___almod 0088                         ?_ValidateDateTime 0060  
                        __size_of___awdiv 0078                          __size_of___awmod 0068  
                        __size_of___ftmul 00B2                          __size_of___fttol 00B8  
             __size_of_EUSART1_Initialize 0014                          __size_of___lwmod 003E  
                                ___ftpack 2F3A                                  ___lbtoft 3596  
                      ??_ValidateDateTime 0062                    __end_of_DecreaseByADay 24D0  
                           ?_Lcd_Delay5us 0001                    _LoadSettingsFromEeprom 1688  
                              _T0CON0bits 000FD5                 __end_ofi2_IncreaseByAYear 349E  
                                __ptext10 35EC                                  __ptext11 337A  
                                __ptext20 230E                                  __ptext12 36B4  
                                __ptext21 2968                                  __ptext13 368C  
                                __ptext30 2402                                  __ptext22 363C  
                                __ptext14 30A0                                  __ptext31 31C8  
                                __ptext23 20FA                                  __ptext15 35D6  
                                __ptext40 1E90                                  __ptext32 350E  
                                __ptext24 3038                                  __ptext16 36B8  
                                __ptext41 3614                                  __ptext33 33BA  
                                __ptext25 3600                                  __ptext17 3106  
                                __ptext50 367E                                  __ptext42 2E00  
                                __ptext34 3660                                  __ptext26 1FD6  
                                __ptext18 185E                                  __ptext51 35BA  
                                __ptext43 364E                                  __ptext35 1A22  
                                __ptext27 27A8                                  __ptext19 24F2  
                                __ptext60 316C                                  __ptext52 36BE  
                                __ptext44 26C4                                  __ptext36 2FC0  
                                __ptext28 3260                                  __ptext61 25DE  
                                __ptext53 130A                                  __ptext45 3696  
                                __ptext37 1688                                  __ptext29 34A6  
                                __ptext62 32AA                                  __ptext54 36A6  
                                __ptext46 369E                                  __ptext38 1BCE  
                                __ptext63 346E                                  __ptext55 3596  
                                __ptext47 220A                                  __ptext39 3214  
                                __ptext64 33F8                                  __ptext56 2D48  
                                __ptext48 3570                                  __ptext65 0000  
                                __ptext57 2B04                                  __ptext58 2F3A  
                                __ptext59 2EA0                     ?_LoadEventsFromEeprom 0001  
                   LoadStatesFromEeprom@i 007A                     LoadStatesFromEeprom@j 0074  
                         ___almod@divisor 0005                           ___almod@counter 0009  
               __size_of_DecreaseByAMonth 004C                               Lcd_CharCP@c 0062  
                 __size_of_IncreaseByADay 00D8                             __size_of_main 0136  
                       ??_IncreaseByAYear 0070                             ?_GetThisCycle 0001  
    __end_of_TMR0_DefaultInterruptHandler 36C0     __size_of_TMR0_DefaultInterruptHandler 0002  
            _TMR0_DefaultInterruptHandler 36BE               ReadGPS_DATE_TIME@IsValidGPS 00AC  
                    __end_of_WriteLongInt 2C70                      __CFG_WDTCWS$WDTCWS_7 000000  
                    __size_of_Timer0_10ms 0292                                _RC1STAbits 000F9D  
                  _AUDIO_SPECIAL_OFF_TIME 0056                        ReadGPSDateTime@Pos 0072  
                                int$flags 005F        __end_of_INTERRUPT_InterruptManager 006A  
              _INTERRUPT_InterruptManager 0008                           ??_Lcd_WriteChar 0070  
             __size_of_VerifyForGPSOnTIme 0046       LoadStatesFromEeprom@AddAudioSpecial 006D  
                          ??_Lcd_Delay5us 0060                          i2_IncreaseByADay 25DE  
               Timer0_10ms@OutForThePorts 003C               PIN_MANAGER_Initialize@state 0060  
                         ?_DecreaseByADay 007B                        i2IncreaseByADay@dt 001C  
                         _ReadGPSDateTime 2968                                _INTCONbits 000FF2  
                         ??_TMR0_CallBack 0042                               _NVMCON1bits 000F81  
                              GetDay@Date 006E                  __size_of_Lcd_Delay5500us 0012  
                 IncreaseByADay@MonthDays 0088                    ??_INTERRUPT_Initialize 0060  
                        ??i2_GetThisCycle 0001                                  intlevel2 0000  
                        _TimeTextToSecond 230E                     ReadGPSDateTime@F11468 0F01  
                          ??_GetThisCycle 0060                          ___lwmod@dividend 0060  
                 ?_PIN_MANAGER_Initialize 0001                         __CFG_CLKOUTEN$OFF 000000  
                              _NEXT_EVENT 005D                               _PPSLOCKbits 000EA0  
             __size_ofi2_IncreaseByAMonth 004A                                _NEXT_STATE 00E9  
      LoadStatesFromEeprom@TempSpecialAdd 0071             ?_TMR0_DefaultInterruptHandler 0001  
          __size_of_TestGPSStartCondition 0038                     ReadGPSDateTime@Commas 0070  
           __end_of_TestGPSStartCondition 346E                             ??_Lcd_Command 0060  
              _BLINK_STATE_ON_OFF_COUNTER 0052                                _RX1PPSbits 000EB5  
                         ___lwmod@divisor 0062                           _TMR0_Initialize 337A  
                         ___lwmod@counter 0064                   __size_of_GetEventNumber 00B4  
              __size_ofi2_IncreaseByAYear 0030                              ___aldiv@sign 0069  
                          _BLINK_OFF_TIME 005B                    ??_LoadEventsFromEeprom 006C  
          __end_of_PIN_MANAGER_Initialize 3106                              ___almod@sign 000A  
                  _SECONDS_TO_ADJUST_PART 004F                    TimeTextToSecond@Second 0080  
               __size_of_IncreaseByAMonth 004A                      __size_of_SwitchOnGPS 000E  
