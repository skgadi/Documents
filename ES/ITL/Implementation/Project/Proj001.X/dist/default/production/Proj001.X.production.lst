

Microchip Technology PIC PRO Macro Assembler V1.38 build -256452561 
                                                                                               Thu Nov 03 13:00:18 2016

Microchip Technology Omniscient Code Generator v1.38 (PRO mode) build 201607010351
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text14,local,class=CODE,merge=1,delta=2
    16                           	psect	text24,local,class=CODE,merge=1,delta=2
    17                           	psect	text26,local,class=CODE,merge=1,delta=2
    18                           	psect	text27,local,class=CODE,merge=1,delta=2
    19                           	psect	text35,local,class=CODE,merge=1,delta=2
    20                           	psect	pa_nodes,global,class=CODE,delta=2
    21                           	dabs	1,0x5A,90,_C_BLINK
    22                           	dabs	1,0x0,90,_C_ON
    23                           	dabs	1,0x7E,2
    24  0000                     	;# 
    25  0001                     	;# 
    26  0002                     	;# 
    27  0003                     	;# 
    28  0004                     	;# 
    29  0005                     	;# 
    30  0006                     	;# 
    31  0007                     	;# 
    32  0009                     	;# 
    33  000A                     	;# 
    34  000B                     	;# 
    35  000C                     	;# 
    36  000D                     	;# 
    37  000E                     	;# 
    38  000E                     	;# 
    39  000F                     	;# 
    40  0010                     	;# 
    41  0011                     	;# 
    42  0012                     	;# 
    43  0013                     	;# 
    44  0014                     	;# 
    45  0015                     	;# 
    46  0015                     	;# 
    47  0016                     	;# 
    48  0017                     	;# 
    49  0018                     	;# 
    50  0019                     	;# 
    51  001A                     	;# 
    52  001B                     	;# 
    53  001B                     	;# 
    54  001C                     	;# 
    55  001D                     	;# 
    56  001E                     	;# 
    57  001F                     	;# 
    58  0081                     	;# 
    59  0085                     	;# 
    60  0086                     	;# 
    61  0087                     	;# 
    62  0089                     	;# 
    63  008C                     	;# 
    64  008D                     	;# 
    65  008E                     	;# 
    66  008F                     	;# 
    67  0090                     	;# 
    68  0091                     	;# 
    69  0092                     	;# 
    70  0093                     	;# 
    71  0093                     	;# 
    72  0093                     	;# 
    73  0094                     	;# 
    74  0095                     	;# 
    75  0096                     	;# 
    76  0097                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009A                     	;# 
    80  009B                     	;# 
    81  009C                     	;# 
    82  009D                     	;# 
    83  009E                     	;# 
    84  009F                     	;# 
    85  0105                     	;# 
    86  0107                     	;# 
    87  0108                     	;# 
    88  0109                     	;# 
    89  010C                     	;# 
    90  010C                     	;# 
    91  010D                     	;# 
    92  010E                     	;# 
    93  010F                     	;# 
    94  0185                     	;# 
    95  0187                     	;# 
    96  0188                     	;# 
    97  0189                     	;# 
    98  018C                     	;# 
    99  018D                     	;# 
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001E                     	;# 
   133  001F                     	;# 
   134  0081                     	;# 
   135  0085                     	;# 
   136  0086                     	;# 
   137  0087                     	;# 
   138  0089                     	;# 
   139  008C                     	;# 
   140  008D                     	;# 
   141  008E                     	;# 
   142  008F                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0092                     	;# 
   146  0093                     	;# 
   147  0093                     	;# 
   148  0093                     	;# 
   149  0094                     	;# 
   150  0095                     	;# 
   151  0096                     	;# 
   152  0097                     	;# 
   153  0098                     	;# 
   154  0099                     	;# 
   155  009A                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  009F                     	;# 
   161  0105                     	;# 
   162  0107                     	;# 
   163  0108                     	;# 
   164  0109                     	;# 
   165  010C                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  0185                     	;# 
   171  0187                     	;# 
   172  0188                     	;# 
   173  0189                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  0000                     	;# 
   177  0001                     	;# 
   178  0002                     	;# 
   179  0003                     	;# 
   180  0004                     	;# 
   181  0005                     	;# 
   182  0006                     	;# 
   183  0007                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  001D                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  0081                     	;# 
   211  0085                     	;# 
   212  0086                     	;# 
   213  0087                     	;# 
   214  0089                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  008F                     	;# 
   219  0090                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0093                     	;# 
   224  0093                     	;# 
   225  0094                     	;# 
   226  0095                     	;# 
   227  0096                     	;# 
   228  0097                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009A                     	;# 
   232  009B                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  009F                     	;# 
   237  0105                     	;# 
   238  0107                     	;# 
   239  0108                     	;# 
   240  0109                     	;# 
   241  010C                     	;# 
   242  010C                     	;# 
   243  010D                     	;# 
   244  010E                     	;# 
   245  010F                     	;# 
   246  0185                     	;# 
   247  0187                     	;# 
   248  0188                     	;# 
   249  0189                     	;# 
   250  018C                     	;# 
   251  018D                     	;# 
   252  0000                     	;# 
   253  0001                     	;# 
   254  0002                     	;# 
   255  0003                     	;# 
   256  0004                     	;# 
   257  0005                     	;# 
   258  0006                     	;# 
   259  0007                     	;# 
   260  0009                     	;# 
   261  000A                     	;# 
   262  000B                     	;# 
   263  000C                     	;# 
   264  000D                     	;# 
   265  000E                     	;# 
   266  000E                     	;# 
   267  000F                     	;# 
   268  0010                     	;# 
   269  0011                     	;# 
   270  0012                     	;# 
   271  0013                     	;# 
   272  0014                     	;# 
   273  0015                     	;# 
   274  0015                     	;# 
   275  0016                     	;# 
   276  0017                     	;# 
   277  0018                     	;# 
   278  0019                     	;# 
   279  001A                     	;# 
   280  001B                     	;# 
   281  001B                     	;# 
   282  001C                     	;# 
   283  001D                     	;# 
   284  001E                     	;# 
   285  001F                     	;# 
   286  0081                     	;# 
   287  0085                     	;# 
   288  0086                     	;# 
   289  0087                     	;# 
   290  0089                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  008F                     	;# 
   295  0090                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0093                     	;# 
   300  0093                     	;# 
   301  0094                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0098                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  009F                     	;# 
   313  0105                     	;# 
   314  0107                     	;# 
   315  0108                     	;# 
   316  0109                     	;# 
   317  010C                     	;# 
   318  010C                     	;# 
   319  010D                     	;# 
   320  010E                     	;# 
   321  010F                     	;# 
   322  0185                     	;# 
   323  0187                     	;# 
   324  0188                     	;# 
   325  0189                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  0000                     	;# 
   329  0001                     	;# 
   330  0002                     	;# 
   331  0003                     	;# 
   332  0004                     	;# 
   333  0005                     	;# 
   334  0006                     	;# 
   335  0007                     	;# 
   336  0009                     	;# 
   337  000A                     	;# 
   338  000B                     	;# 
   339  000C                     	;# 
   340  000D                     	;# 
   341  000E                     	;# 
   342  000E                     	;# 
   343  000F                     	;# 
   344  0010                     	;# 
   345  0011                     	;# 
   346  0012                     	;# 
   347  0013                     	;# 
   348  0014                     	;# 
   349  0015                     	;# 
   350  0015                     	;# 
   351  0016                     	;# 
   352  0017                     	;# 
   353  0018                     	;# 
   354  0019                     	;# 
   355  001A                     	;# 
   356  001B                     	;# 
   357  001B                     	;# 
   358  001C                     	;# 
   359  001D                     	;# 
   360  001E                     	;# 
   361  001F                     	;# 
   362  0081                     	;# 
   363  0085                     	;# 
   364  0086                     	;# 
   365  0087                     	;# 
   366  0089                     	;# 
   367  008C                     	;# 
   368  008D                     	;# 
   369  008E                     	;# 
   370  008F                     	;# 
   371  0090                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0093                     	;# 
   375  0093                     	;# 
   376  0093                     	;# 
   377  0094                     	;# 
   378  0095                     	;# 
   379  0096                     	;# 
   380  0097                     	;# 
   381  0098                     	;# 
   382  0099                     	;# 
   383  009A                     	;# 
   384  009B                     	;# 
   385  009C                     	;# 
   386  009D                     	;# 
   387  009E                     	;# 
   388  009F                     	;# 
   389  0105                     	;# 
   390  0107                     	;# 
   391  0108                     	;# 
   392  0109                     	;# 
   393  010C                     	;# 
   394  010C                     	;# 
   395  010D                     	;# 
   396  010E                     	;# 
   397  010F                     	;# 
   398  0185                     	;# 
   399  0187                     	;# 
   400  0188                     	;# 
   401  0189                     	;# 
   402  018C                     	;# 
   403  018D                     	;# 
   404  0000                     	;# 
   405  0001                     	;# 
   406  0002                     	;# 
   407  0003                     	;# 
   408  0004                     	;# 
   409  0005                     	;# 
   410  0006                     	;# 
   411  0007                     	;# 
   412  0009                     	;# 
   413  000A                     	;# 
   414  000B                     	;# 
   415  000C                     	;# 
   416  000D                     	;# 
   417  000E                     	;# 
   418  000E                     	;# 
   419  000F                     	;# 
   420  0010                     	;# 
   421  0011                     	;# 
   422  0012                     	;# 
   423  0013                     	;# 
   424  0014                     	;# 
   425  0015                     	;# 
   426  0015                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001B                     	;# 
   434  001C                     	;# 
   435  001D                     	;# 
   436  001E                     	;# 
   437  001F                     	;# 
   438  0081                     	;# 
   439  0085                     	;# 
   440  0086                     	;# 
   441  0087                     	;# 
   442  0089                     	;# 
   443  008C                     	;# 
   444  008D                     	;# 
   445  008E                     	;# 
   446  008F                     	;# 
   447  0090                     	;# 
   448  0091                     	;# 
   449  0092                     	;# 
   450  0093                     	;# 
   451  0093                     	;# 
   452  0093                     	;# 
   453  0094                     	;# 
   454  0095                     	;# 
   455  0096                     	;# 
   456  0097                     	;# 
   457  0098                     	;# 
   458  0099                     	;# 
   459  009A                     	;# 
   460  009B                     	;# 
   461  009C                     	;# 
   462  009D                     	;# 
   463  009E                     	;# 
   464  009F                     	;# 
   465  0105                     	;# 
   466  0107                     	;# 
   467  0108                     	;# 
   468  0109                     	;# 
   469  010C                     	;# 
   470  010C                     	;# 
   471  010D                     	;# 
   472  010E                     	;# 
   473  010F                     	;# 
   474  0185                     	;# 
   475  0187                     	;# 
   476  0188                     	;# 
   477  0189                     	;# 
   478  018C                     	;# 
   479  018D                     	;# 
   480  0000                     	;# 
   481  0001                     	;# 
   482  0002                     	;# 
   483  0003                     	;# 
   484  0004                     	;# 
   485  0005                     	;# 
   486  0006                     	;# 
   487  0007                     	;# 
   488  0009                     	;# 
   489  000A                     	;# 
   490  000B                     	;# 
   491  000C                     	;# 
   492  000D                     	;# 
   493  000E                     	;# 
   494  000E                     	;# 
   495  000F                     	;# 
   496  0010                     	;# 
   497  0011                     	;# 
   498  0012                     	;# 
   499  0013                     	;# 
   500  0014                     	;# 
   501  0015                     	;# 
   502  0015                     	;# 
   503  0016                     	;# 
   504  0017                     	;# 
   505  0018                     	;# 
   506  0019                     	;# 
   507  001A                     	;# 
   508  001B                     	;# 
   509  001B                     	;# 
   510  001C                     	;# 
   511  001D                     	;# 
   512  001E                     	;# 
   513  001F                     	;# 
   514  0081                     	;# 
   515  0085                     	;# 
   516  0086                     	;# 
   517  0087                     	;# 
   518  0089                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  008F                     	;# 
   523  0090                     	;# 
   524  0091                     	;# 
   525  0092                     	;# 
   526  0093                     	;# 
   527  0093                     	;# 
   528  0093                     	;# 
   529  0094                     	;# 
   530  0095                     	;# 
   531  0096                     	;# 
   532  0097                     	;# 
   533  0098                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009C                     	;# 
   538  009D                     	;# 
   539  009E                     	;# 
   540  009F                     	;# 
   541  0105                     	;# 
   542  0107                     	;# 
   543  0108                     	;# 
   544  0109                     	;# 
   545  010C                     	;# 
   546  010C                     	;# 
   547  010D                     	;# 
   548  010E                     	;# 
   549  010F                     	;# 
   550  0185                     	;# 
   551  0187                     	;# 
   552  0188                     	;# 
   553  0189                     	;# 
   554  018C                     	;# 
   555  018D                     	;# 
   556                           
   557                           	psect	text0
   558  0000                     __ptext0:	
   559  0013                     _SSPBUF	set	19
   560  0014                     _SSPCON	set	20
   561  00C4                     _CREN	set	196
   562  0028                     _RA0	set	40
   563  0029                     _RA1	set	41
   564  002A                     _RA2	set	42
   565  002B                     _RA3	set	43
   566  002C                     _RA4	set	44
   567  002D                     _RA5	set	45
   568  00C7                     _SPEN	set	199
   569  0099                     _SPBRG	set	153
   570  009A                     _SPBRGH	set	154
   571  0093                     _SSPADD	set	147
   572  0091                     _SSPCON2	set	145
   573  0094                     _SSPSTAT	set	148
   574  0085                     _TRISAbits	set	133
   575  048D                     _ACKDT	set	1165
   576  048C                     _ACKEN	set	1164
   577  04C2                     _BRGH	set	1218
   578  048A                     _PEN	set	1162
   579  048B                     _RCEN	set	1163
   580  0488                     _SEN	set	1160
   581  04C4                     _SYNC	set	1220
   582  043B                     _TRISC3	set	1083
   583  043C                     _TRISC4	set	1084
   584  04C5                     _TXEN	set	1221
   585  010D                     _EEADR	set	269
   586  010C                     _EEDATA	set	268
   587  0188                     _ANSEL	set	392
   588  0189                     _ANSELH	set	393
   589  018C                     _EECON1	set	396
   590  0C3B                     _BRG16	set	3131
   591  0C60                     _RD	set	3168
   592  0C61                     _WR	set	3169
   593                           
   594                           	psect	strings
   595  0800                     __pstrings:	
   596  0800                     stringtab:	
   597  0800                     __stringtab:	
   598  0800                     stringcode:	
   599                           ;	String table - string pointers are 1 byte each
   600                           
   601  0800                     stringdir:	
   602  0800  3008               	movlw	high stringdir
   603  0801  008A               	movwf	10
   604  0802  0804               	movf	4,w
   605  0803  0A84               	incf	4,f
   606  0804  0782               	addwf	2,f
   607  0805                     __stringbase:	
   608  0805  3400               	retlw	0
   609  0806                     __end_of__stringtab:	
   610  0806                     STR_3:	
   611  0806  3453               	retlw	83	;'S'
   612  0807  3455               	retlw	85	;'U'
   613  0808  3452               	retlw	82	;'R'
   614  0809  3445               	retlw	69	;'E'
   615  080A  3453               	retlw	83	;'S'
   616  080B  3448               	retlw	72	;'H'
   617  080C  3400               	retlw	0
   618  080D                     STR_1:	
   619  080D  342D               	retlw	45	;'-'
   620  080E  3420               	retlw	32	;' '
   621  080F  3420               	retlw	32	;' '
   622  0810  342D               	retlw	45	;'-'
   623  0811  3400               	retlw	0
   624  0810                     
   625                           ; #config settings
   626  0000                     
   627                           	psect	cinit
   628  07F5                     start_initialization:	
   629  07F5                     __initialization:	
   630  07F5  30BC               	movlw	low __pbssBANK3
   631                           
   632                           ; Clear objects allocated to BANK3
   633  07F6  1783               	bsf	3,7	;select IRP bank2
   634  07F7  0084               	movwf	4
   635  07F8  30D9               	movlw	low (__pbssBANK3+29)
   636  07F9  120A  158A  241E   	fcall	clear_ram0
   637  07FC                     end_of_initialization:	
   638                           ;End of C runtime variable initialization code
   639                           
   640  07FC                     __end_of__initialization:	
   641  07FC  0183               	clrf	3
   642  07FD  120A  158A  2CD3   	ljmp	_main	;jump to C main() function
   643                           
   644                           	psect	bssBANK3
   645  01BC                     __pbssBANK3:	
   646  01BC                     _C:	
   647  01BC                     	ds	12
   648  01C8                     _S:	
   649  01C8                     	ds	4
   650  01CC                     _S_InUse:	
   651  01CC                     	ds	4
   652  01D0                     _C_S:	
   653  01D0                     	ds	2
   654  01D2                     _C_T:	
   655  01D2                     	ds	2
   656  01D4                     _CONFIG0:	
   657  01D4                     	ds	1
   658  01D5                     _C_D:	
   659  01D5                     	ds	1
   660  01D6                     _Cycle:	
   661  01D6                     	ds	1
   662  01D7                     _Firm_Cycle:	
   663  01D7                     	ds	1
   664  01D8                     _PresentState:	
   665  01D8                     	ds	1
   666                           
   667                           	psect	clrtext
   668  0C1E                     clear_ram0:	
   669                           ;	Called with FSR containing the base address, and
   670                           ;	W with the last address+1
   671                           
   672  0C1E  0064               	clrwdt	;clear the watchdog before getting into this loop
   673  0C1F                     clrloop0:	
   674  0C1F  0180               	clrf	0	;clear RAM location pointed to by FSR
   675  0C20  0A84               	incf	4,f	;increment pointer
   676  0C21  0604               	xorwf	4,w	;XOR with final address
   677  0C22  1903               	btfsc	3,2	;have we reached the end yet?
   678  0C23  3400               	retlw	0	;all done for this memory range, return
   679  0C24  0604               	xorwf	4,w	;XOR again to restore value
   680  0C25  2C1F               	goto	clrloop0	;do the next byte
   681                           
   682                           	psect	cstackBANK3
   683  0190                     __pcstackBANK3:	
   684  0190                     ??___fttol:	
   685                           
   686                           ; 1 bytes @ 0x0
   687  0190                     	ds	3
   688  0193                     ___fttol@sign1:	
   689                           
   690                           ; 1 bytes @ 0x3
   691  0193                     	ds	1
   692  0194                     ___fttol@lval:	
   693                           
   694                           ; 4 bytes @ 0x4
   695  0194                     	ds	4
   696  0198                     ___fttol@exp1:	
   697                           
   698                           ; 1 bytes @ 0x8
   699  0198                     	ds	1
   700  0199                     ?_trunc:	
   701  0199                     trunc@x:	
   702                           ; 3 bytes @ 0x9
   703                           
   704                           
   705                           ; 3 bytes @ 0x9
   706  0199                     	ds	3
   707  019C                     trunc@i:	
   708                           
   709                           ; 3 bytes @ 0xC
   710  019C                     	ds	3
   711  019F                     trunc@expon:	
   712                           
   713                           ; 2 bytes @ 0xF
   714  019F                     	ds	2
   715  01A1                     ?___ftsub:	
   716  01A1                     ___ftsub@f2:	
   717                           ; 3 bytes @ 0x11
   718                           
   719                           
   720                           ; 3 bytes @ 0x11
   721  01A1                     	ds	3
   722  01A4                     ___ftsub@f1:	
   723                           
   724                           ; 3 bytes @ 0x14
   725  01A4                     	ds	3
   726  01A7                     ?_round:	
   727  01A7                     round@x:	
   728                           ; 3 bytes @ 0x17
   729                           
   730                           
   731                           ; 3 bytes @ 0x17
   732  01A7                     	ds	3
   733  01AA                     round@f:	
   734                           
   735                           ; 3 bytes @ 0x1A
   736  01AA                     	ds	3
   737  01AD                     ?_UART_Init:	
   738  01AD                     UART_Init@baudrate:	
   739                           ; 1 bytes @ 0x1D
   740                           
   741                           
   742                           ; 4 bytes @ 0x1D
   743  01AD                     	ds	4
   744  01B1                     _UART_Init$935:	
   745                           
   746                           ; 3 bytes @ 0x21
   747  01B1                     	ds	3
   748  01B4                     _UART_Init$936:	
   749                           
   750                           ; 3 bytes @ 0x24
   751  01B4                     	ds	3
   752  01B7                     UART_Init@x:	
   753                           
   754                           ; 2 bytes @ 0x27
   755  01B7                     	ds	2
   756  01B9                     ??_main:	
   757                           
   758                           ; 1 bytes @ 0x29
   759  01B9                     	ds	3
   760                           
   761                           	psect	cstackBANK1
   762  00B4                     __pcstackBANK1:	
   763  00B4                     ??_eeprom_read:	
   764  00B4                     ??_Lcd_Delay5500us:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  00B4                     ??_Lcd_Delay5us:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  00B4                     ?_ReadVars:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  00B4                     ?_Lcd_Init:	
   774                           ; 1 bytes @ 0x0
   775                           
   776  00B4                     ?_I2C_Master_Wait:	
   777                           ; 1 bytes @ 0x0
   778                           
   779  00B4                     ??_I2C_Master_Wait:	
   780                           ; 1 bytes @ 0x0
   781                           
   782  00B4                     ?_I2C_Master_Start:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  00B4                     ??_I2C_Master_Start:	
   786                           ; 1 bytes @ 0x0
   787                           
   788  00B4                     ?_I2C_Master_Stop:	
   789                           ; 1 bytes @ 0x0
   790                           
   791  00B4                     ??_I2C_Master_Stop:	
   792                           ; 1 bytes @ 0x0
   793                           
   794  00B4                     ?_I2C_Master_Write:	
   795                           ; 1 bytes @ 0x0
   796                           
   797  00B4                     ?_DetermineCycleChange:	
   798                           ; 1 bytes @ 0x0
   799                           
   800  00B4                     ?_ChangeTheCycle:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  00B4                     ?_main:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  00B4                     ?_I2C_Master_Read:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  00B4                     ?___wmul:	
   810                           ; 2 bytes @ 0x0
   811                           
   812  00B4                     ?___ftpack:	
   813                           ; 2 bytes @ 0x0
   814                           
   815  00B4                     ?_frexp:	
   816                           ; 3 bytes @ 0x0
   817                           
   818  00B4                     ?___lmul:	
   819                           ; 3 bytes @ 0x0
   820                           
   821  00B4                     ?___aldiv:	
   822                           ; 4 bytes @ 0x0
   823                           
   824  00B4                     ?___lldiv:	
   825                           ; 4 bytes @ 0x0
   826                           
   827  00B4                     eeprom_read@addr:	
   828                           ; 4 bytes @ 0x0
   829                           
   830  00B4                     I2C_Master_Write@d:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  00B4                     I2C_Master_Read@a:	
   834                           ; 2 bytes @ 0x0
   835                           
   836  00B4                     ___wmul@multiplier:	
   837                           ; 2 bytes @ 0x0
   838                           
   839  00B4                     ___ftpack@arg:	
   840                           ; 2 bytes @ 0x0
   841                           
   842  00B4                     frexp@value:	
   843                           ; 3 bytes @ 0x0
   844                           
   845  00B4                     ___lmul@multiplier:	
   846                           ; 3 bytes @ 0x0
   847                           
   848  00B4                     ___aldiv@divisor:	
   849                           ; 4 bytes @ 0x0
   850                           
   851  00B4                     ___lldiv@divisor:	
   852                           ; 4 bytes @ 0x0
   853                           
   854                           
   855                           ; 4 bytes @ 0x0
   856  00B4                     	ds	2
   857  00B6                     ??_Lcd_Command:	
   858  00B6                     ??_Lcd_CharCP:	
   859                           ; 1 bytes @ 0x2
   860                           
   861  00B6                     ??_I2C_Master_Write:	
   862                           ; 1 bytes @ 0x2
   863                           
   864  00B6                     ??_I2C_Master_Read:	
   865                           ; 1 bytes @ 0x2
   866                           
   867  00B6                     I2C_Master_Read@temp:	
   868                           ; 1 bytes @ 0x2
   869                           
   870  00B6                     ___wmul@multiplicand:	
   871                           ; 2 bytes @ 0x2
   872                           
   873                           
   874                           ; 2 bytes @ 0x2
   875  00B6                     	ds	1
   876  00B7                     Lcd_CharCP@c:	
   877  00B7                     Lcd_Command@command:	
   878                           ; 1 bytes @ 0x3
   879                           
   880  00B7                     ___ftpack@exp:	
   881                           ; 1 bytes @ 0x3
   882                           
   883  00B7                     frexp@eptr:	
   884                           ; 1 bytes @ 0x3
   885                           
   886                           
   887                           ; 1 bytes @ 0x3
   888  00B7                     	ds	1
   889  00B8                     ??_frexp:	
   890  00B8                     ??_Lcd_Init:	
   891                           ; 1 bytes @ 0x4
   892                           
   893  00B8                     ?_Lcd_Text:	
   894                           ; 1 bytes @ 0x4
   895                           
   896  00B8                     ?_I2C_ReadAtAddress:	
   897                           ; 1 bytes @ 0x4
   898                           
   899  00B8                     ??___wmul:	
   900                           ; 1 bytes @ 0x4
   901                           
   902  00B8                     Lcd_Init@data:	
   903                           ; 1 bytes @ 0x4
   904                           
   905  00B8                     Lcd_Text@x:	
   906                           ; 1 bytes @ 0x4
   907                           
   908  00B8                     I2C_ReadAtAddress@IntAdd:	
   909                           ; 1 bytes @ 0x4
   910                           
   911  00B8                     ___ftpack@sign:	
   912                           ; 1 bytes @ 0x4
   913                           
   914  00B8                     ___wmul@product:	
   915                           ; 1 bytes @ 0x4
   916                           
   917  00B8                     ___lmul@multiplicand:	
   918                           ; 2 bytes @ 0x4
   919                           
   920  00B8                     ___aldiv@dividend:	
   921                           ; 4 bytes @ 0x4
   922                           
   923  00B8                     ___lldiv@dividend:	
   924                           ; 4 bytes @ 0x4
   925                           
   926                           
   927                           ; 4 bytes @ 0x4
   928  00B8                     	ds	1
   929  00B9                     ??___ftpack:	
   930  00B9                     ??_I2C_ReadAtAddress:	
   931                           ; 1 bytes @ 0x5
   932                           
   933  00B9                     Lcd_Text@buffer:	
   934                           ; 1 bytes @ 0x5
   935                           
   936  00B9                     I2C_ReadAtAddress@data:	
   937                           ; 1 bytes @ 0x5
   938                           
   939                           
   940                           ; 1 bytes @ 0x5
   941  00B9                     	ds	1
   942  00BA                     ??_Lcd_Text:	
   943  00BA                     Lcd_Text@y:	
   944                           ; 1 bytes @ 0x6
   945                           
   946  00BA                     I2C_ReadAtAddress@DevID:	
   947                           ; 1 bytes @ 0x6
   948                           
   949                           
   950                           ; 1 bytes @ 0x6
   951  00BA                     	ds	1
   952  00BB                     Lcd_Text@data:	
   953                           
   954                           ; 1 bytes @ 0x7
   955  00BB                     	ds	1
   956  00BC                     ??___lmul:	
   957  00BC                     ??___aldiv:	
   958                           ; 1 bytes @ 0x8
   959                           
   960  00BC                     ??___lldiv:	
   961                           ; 1 bytes @ 0x8
   962                           
   963  00BC                     ?___altoft:	
   964                           ; 1 bytes @ 0x8
   965                           
   966  00BC                     ___aldiv@counter:	
   967                           ; 3 bytes @ 0x8
   968                           
   969  00BC                     ___lmul@product:	
   970                           ; 1 bytes @ 0x8
   971                           
   972  00BC                     ___altoft@c:	
   973                           ; 4 bytes @ 0x8
   974                           
   975  00BC                     ___lldiv@quotient:	
   976                           ; 4 bytes @ 0x8
   977                           
   978                           
   979                           ; 4 bytes @ 0x8
   980  00BC                     	ds	1
   981  00BD                     ___aldiv@sign:	
   982                           
   983                           ; 1 bytes @ 0x9
   984  00BD                     	ds	1
   985  00BE                     ___aldiv@quotient:	
   986                           
   987                           ; 4 bytes @ 0xA
   988  00BE                     	ds	2
   989  00C0                     ??___altoft:	
   990  00C0                     ?_ReadRTCAsSec:	
   991                           ; 1 bytes @ 0xC
   992                           
   993  00C0                     ___altoft@exp:	
   994                           ; 4 bytes @ 0xC
   995                           
   996  00C0                     ___lldiv@counter:	
   997                           ; 1 bytes @ 0xC
   998                           
   999                           
  1000                           ; 1 bytes @ 0xC
  1001  00C0                     	ds	1
  1002  00C1                     ?_I2C_Master_Init:	
  1003  00C1                     ___altoft@sign:	
  1004                           ; 1 bytes @ 0xD
  1005                           
  1006  00C1                     I2C_Master_Init@c:	
  1007                           ; 1 bytes @ 0xD
  1008                           
  1009                           
  1010                           ; 4 bytes @ 0xD
  1011  00C1                     	ds	1
  1012  00C2                     ?___bmul:	
  1013  00C2                     ?___ftmul:	
  1014                           ; 1 bytes @ 0xE
  1015                           
  1016  00C2                     ___bmul@multiplicand:	
  1017                           ; 3 bytes @ 0xE
  1018                           
  1019  00C2                     ___ftmul@f1:	
  1020                           ; 1 bytes @ 0xE
  1021                           
  1022                           
  1023                           ; 3 bytes @ 0xE
  1024  00C2                     	ds	1
  1025  00C3                     ??___bmul:	
  1026  00C3                     ___bmul@product:	
  1027                           ; 1 bytes @ 0xF
  1028                           
  1029                           
  1030                           ; 1 bytes @ 0xF
  1031  00C3                     	ds	1
  1032  00C4                     ??_ReadRTCAsSec:	
  1033  00C4                     ___bmul@multiplier:	
  1034                           ; 1 bytes @ 0x10
  1035                           
  1036                           
  1037                           ; 1 bytes @ 0x10
  1038  00C4                     	ds	1
  1039  00C5                     ??_GetCyclePeriod:	
  1040  00C5                     ??_ReadVars:	
  1041                           ; 1 bytes @ 0x11
  1042                           
  1043  00C5                     ?_Lcd_WriteChar:	
  1044                           ; 1 bytes @ 0x11
  1045                           
  1046  00C5                     ??_I2C_Master_Init:	
  1047                           ; 1 bytes @ 0x11
  1048                           
  1049  00C5                     Lcd_WriteChar@x:	
  1050                           ; 1 bytes @ 0x11
  1051                           
  1052  00C5                     ___ftmul@f2:	
  1053                           ; 1 bytes @ 0x11
  1054                           
  1055                           
  1056                           ; 3 bytes @ 0x11
  1057  00C5                     	ds	1
  1058  00C6                     Lcd_WriteChar@c:	
  1059  00C6                     GetCyclePeriod@i:	
  1060                           ; 1 bytes @ 0x12
  1061                           
  1062                           
  1063                           ; 1 bytes @ 0x12
  1064  00C6                     	ds	1
  1065  00C7                     ??_Lcd_WriteChar:	
  1066  00C7                     ??_ChangeTheCycle:	
  1067                           ; 1 bytes @ 0x13
  1068                           
  1069  00C7                     Lcd_WriteChar@y:	
  1070                           ; 1 bytes @ 0x13
  1071                           
  1072                           
  1073                           ; 1 bytes @ 0x13
  1074  00C7                     	ds	1
  1075  00C8                     ??___ftmul:	
  1076  00C8                     Lcd_WriteChar@data:	
  1077                           ; 1 bytes @ 0x14
  1078                           
  1079                           
  1080                           ; 1 bytes @ 0x14
  1081  00C8                     	ds	1
  1082  00C9                     ?_WriteLongInt:	
  1083  00C9                     WriteLongInt@x:	
  1084                           ; 1 bytes @ 0x15
  1085                           
  1086                           
  1087                           ; 1 bytes @ 0x15
  1088  00C9                     	ds	1
  1089  00CA                     WriteLongInt@Val:	
  1090                           
  1091                           ; 4 bytes @ 0x16
  1092  00CA                     	ds	1
  1093  00CB                     ___ftmul@exp:	
  1094  00CB                     _ReadRTCAsSec$937:	
  1095                           ; 1 bytes @ 0x17
  1096                           
  1097                           
  1098                           ; 2 bytes @ 0x17
  1099  00CB                     	ds	1
  1100  00CC                     ___ftmul@f3_as_product:	
  1101                           
  1102                           ; 3 bytes @ 0x18
  1103  00CC                     	ds	1
  1104  00CD                     ReadRTCAsSec@Out:	
  1105                           
  1106                           ; 4 bytes @ 0x19
  1107  00CD                     	ds	1
  1108  00CE                     WriteLongInt@size:	
  1109                           
  1110                           ; 1 bytes @ 0x1A
  1111  00CE                     	ds	1
  1112  00CF                     WriteLongInt@Sign:	
  1113  00CF                     ___ftmul@cntr:	
  1114                           ; 1 bytes @ 0x1B
  1115                           
  1116                           
  1117                           ; 1 bytes @ 0x1B
  1118  00CF                     	ds	1
  1119  00D0                     ??_WriteLongInt:	
  1120  00D0                     ___ftmul@sign:	
  1121                           ; 1 bytes @ 0x1C
  1122                           
  1123                           
  1124                           ; 1 bytes @ 0x1C
  1125  00D0                     	ds	1
  1126  00D1                     ?___ftdiv:	
  1127  00D1                     WriteLongInt@POS:	
  1128                           ; 3 bytes @ 0x1D
  1129                           
  1130  00D1                     ReadRTCAsSec@TempVar000:	
  1131                           ; 1 bytes @ 0x1D
  1132                           
  1133  00D1                     ___ftdiv@f2:	
  1134                           ; 1 bytes @ 0x1D
  1135                           
  1136                           
  1137                           ; 3 bytes @ 0x1D
  1138  00D1                     	ds	1
  1139  00D2                     WriteLongInt@y:	
  1140                           
  1141                           ; 1 bytes @ 0x1E
  1142  00D2                     	ds	1
  1143  00D3                     ??_DetermineCycleChange:	
  1144                           
  1145                           ; 1 bytes @ 0x1F
  1146  00D3                     	ds	1
  1147  00D4                     ReadVars@i:	
  1148  00D4                     ___ftdiv@f1:	
  1149                           ; 1 bytes @ 0x20
  1150                           
  1151                           
  1152                           ; 3 bytes @ 0x20
  1153  00D4                     	ds	1
  1154  00D5                     ReadVars@i_34:	
  1155                           
  1156                           ; 1 bytes @ 0x21
  1157  00D5                     	ds	1
  1158  00D6                     ReadVars@j:	
  1159                           
  1160                           ; 1 bytes @ 0x22
  1161  00D6                     	ds	1
  1162  00D7                     ??___ftdiv:	
  1163  00D7                     ReadVars@k:	
  1164                           ; 1 bytes @ 0x23
  1165                           
  1166                           
  1167                           ; 1 bytes @ 0x23
  1168  00D7                     	ds	3
  1169  00DA                     ___ftdiv@cntr:	
  1170                           
  1171                           ; 1 bytes @ 0x26
  1172  00DA                     	ds	1
  1173  00DB                     ___ftdiv@f3:	
  1174                           
  1175                           ; 3 bytes @ 0x27
  1176  00DB                     	ds	2
  1177  00DD                     DetermineCycleChange@MinPos:	
  1178                           
  1179                           ; 1 bytes @ 0x29
  1180  00DD                     	ds	1
  1181  00DE                     DetermineCycleChange@PrevCycle:	
  1182  00DE                     ___ftdiv@exp:	
  1183                           ; 1 bytes @ 0x2A
  1184                           
  1185                           
  1186                           ; 1 bytes @ 0x2A
  1187  00DE                     	ds	1
  1188  00DF                     DetermineCycleChange@i:	
  1189  00DF                     ___ftdiv@sign:	
  1190                           ; 1 bytes @ 0x2B
  1191                           
  1192                           
  1193                           ; 1 bytes @ 0x2B
  1194  00DF                     	ds	1
  1195  00E0                     ?___ftadd:	
  1196  00E0                     ___ftadd@f1:	
  1197                           ; 3 bytes @ 0x2C
  1198                           
  1199                           
  1200                           ; 3 bytes @ 0x2C
  1201  00E0                     	ds	3
  1202  00E3                     ___ftadd@f2:	
  1203                           
  1204                           ; 3 bytes @ 0x2F
  1205  00E3                     	ds	3
  1206  00E6                     ??___ftadd:	
  1207                           
  1208                           ; 1 bytes @ 0x32
  1209  00E6                     	ds	3
  1210  00E9                     ___ftadd@sign:	
  1211                           
  1212                           ; 1 bytes @ 0x35
  1213  00E9                     	ds	1
  1214  00EA                     ___ftadd@exp2:	
  1215                           
  1216                           ; 1 bytes @ 0x36
  1217  00EA                     	ds	1
  1218  00EB                     ___ftadd@exp1:	
  1219                           
  1220                           ; 1 bytes @ 0x37
  1221  00EB                     	ds	1
  1222  00EC                     ?___fttol:	
  1223  00EC                     ___fttol@f1:	
  1224                           ; 4 bytes @ 0x38
  1225                           
  1226                           
  1227                           ; 3 bytes @ 0x38
  1228  00EC                     	ds	4
  1229  00F0                     ??_round:	
  1230  00F0                     ??_trunc:	
  1231                           ; 1 bytes @ 0x3C
  1232                           
  1233  00F0                     ??_UART_Init:	
  1234                           ; 1 bytes @ 0x3C
  1235                           
  1236  00F0                     ??___ftsub:	
  1237                           ; 1 bytes @ 0x3C
  1238                           
  1239                           
  1240                           	psect	cstackCOMMON
  1241  0000                     __pcstackCOMMON:	
  1242                           ; 1 bytes @ 0x3C
  1243                           
  1244  0000                     ?_eeprom_read:	
  1245  0000                     ?_Lcd_Delay5500us:	
  1246                           ; 1 bytes @ 0x0
  1247                           
  1248  0000                     ?_Lcd_Delay5us:	
  1249                           ; 1 bytes @ 0x0
  1250                           
  1251  0000                     ?_Lcd_Command:	
  1252                           ; 1 bytes @ 0x0
  1253                           
  1254  0000                     ?_Lcd_CharCP:	
  1255                           ; 1 bytes @ 0x0
  1256                           
  1257  0000                     ?_GetCyclePeriod:	
  1258                           ; 1 bytes @ 0x0
  1259                           
  1260                           
  1261                           	psect	maintext
  1262  0CD3                     __pmaintext:	
  1263                           ; 1 bytes @ 0x0
  1264 ;;
  1265 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1266 ;;
  1267 ;; *************** function _main *****************
  1268 ;; Defined at:
  1269 ;;		line 47 in file "main.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;  Firm_Cicle      1    0        unsigned char 
  1274 ;;  TempValue       1    0        unsigned char 
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : B00/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:      BANK1   BANK3   BANK2
  1284 ;;      Params:         0       0       0
  1285 ;;      Locals:         0       0       0
  1286 ;;      Temps:          0       3       0
  1287 ;;      Totals:         0       3       0
  1288 ;;Total ram usage:        3 bytes
  1289 ;; Hardware stack levels required when called:    5
  1290 ;; This function calls:
  1291 ;;		_ChangeTheCycle
  1292 ;;		_DetermineCycleChange
  1293 ;;		_GetCyclePeriod
  1294 ;;		_I2C_Master_Init
  1295 ;;		_Lcd_Init
  1296 ;;		_Lcd_Text
  1297 ;;		_ReadRTCAsSec
  1298 ;;		_ReadVars
  1299 ;;		_UART_Init
  1300 ;; This function is called by:
  1301 ;;		Startup code after reset
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           
  1306                           ;psect for function _main
  1307  0CD3                     _main:	
  1308                           
  1309                           ;main.c: 50: Lcd_Init();
  1310                           
  1311                           ;incstack = 0
  1312                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1313  0CD3  120A  118A  22ED  120A  158A  	fcall	_Lcd_Init
  1314                           
  1315                           ;main.c: 51: Lcd_Text(1,11,"-  -");
  1316  0CD8  300B               	movlw	11
  1317  0CD9  1683               	bsf	3,5	;RP0=1, select bank1
  1318  0CDA  1303               	bcf	3,6	;RP1=0, select bank1
  1319  0CDB  00B8               	movwf	Lcd_Text@x^(0+128)
  1320  0CDC  3008               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1321  0CDD  00B9               	movwf	Lcd_Text@buffer^(0+128)
  1322  0CDE  3001               	movlw	1
  1323  0CDF  120A  118A  2216  120A  158A  	fcall	_Lcd_Text
  1324                           
  1325                           ;main.c: 52: Lcd_Text(2,14,"-");
  1326  0CE4  300E               	movlw	14
  1327  0CE5  00B8               	movwf	Lcd_Text@x^(0+128)
  1328  0CE6  300B               	movlw	(low (((STR_1+3)-__stringbase)| (0+32768)))& (0+255)
  1329  0CE7  00B9               	movwf	Lcd_Text@buffer^(0+128)
  1330  0CE8  3002               	movlw	2
  1331  0CE9  120A  118A  2216  120A  158A  	fcall	_Lcd_Text
  1332                           
  1333                           ;main.c: 54: I2C_Master_Init(400000);
  1334  0CEE  3000               	movlw	0
  1335  0CEF  00C4               	movwf	(I2C_Master_Init@c+3)^(0+128)
  1336  0CF0  3006               	movlw	6
  1337  0CF1  00C3               	movwf	(I2C_Master_Init@c+2)^(0+128)
  1338  0CF2  301A               	movlw	26
  1339  0CF3  00C2               	movwf	(I2C_Master_Init@c+1)^(0+128)
  1340  0CF4  3080               	movlw	128
  1341  0CF5  00C1               	movwf	I2C_Master_Init@c^(0+128)
  1342  0CF6  120A  158A  245F  120A  158A  	fcall	_I2C_Master_Init
  1343                           
  1344                           ;main.c: 55: UART_Init(9600);
  1345  0CFB  3000               	movlw	0
  1346  0CFC  1703               	bsf	3,6	;RP1=1, select bank3
  1347  0CFD  00B0               	movwf	(UART_Init@baudrate+3)^(0+384)
  1348  0CFE  00AF               	movwf	(UART_Init@baudrate+2)^(0+384)
  1349  0CFF  3025               	movlw	37
  1350  0D00  00AE               	movwf	(UART_Init@baudrate+1)^(0+384)
  1351  0D01  3080               	movlw	128
  1352  0D02  00AD               	movwf	UART_Init@baudrate^(0+384)
  1353  0D03  120A  118A  2429  120A  158A  	fcall	_UART_Init
  1354                           
  1355                           ;main.c: 56: char TempValue;
  1356                           ;main.c: 58: ReadVars();
  1357  0D08  120A  158A  25A5  120A  158A  	fcall	_ReadVars
  1358                           
  1359                           ;main.c: 60: S = ReadRTCAsSec()+C_D;
  1360  0D0D  120A  158A  269A  120A  158A  	fcall	_ReadRTCAsSec
  1361  0D12  0843               	movf	(?_ReadRTCAsSec+3)^(0+128),w
  1362  0D13  1703               	bsf	3,6	;RP1=1, select bank3
  1363  0D14  00CB               	movwf	(_S+3)^(0+384)	;volatile
  1364  0D15  1303               	bcf	3,6	;RP1=0, select bank1
  1365  0D16  0842               	movf	(?_ReadRTCAsSec+2)^(0+128),w
  1366  0D17  1703               	bsf	3,6	;RP1=1, select bank3
  1367  0D18  00CA               	movwf	(_S+2)^(0+384)	;volatile
  1368  0D19  1303               	bcf	3,6	;RP1=0, select bank1
  1369  0D1A  0841               	movf	(?_ReadRTCAsSec+1)^(0+128),w
  1370  0D1B  1703               	bsf	3,6	;RP1=1, select bank3
  1371  0D1C  00C9               	movwf	(_S+1)^(0+384)	;volatile
  1372  0D1D  1303               	bcf	3,6	;RP1=0, select bank1
  1373  0D1E  0840               	movf	?_ReadRTCAsSec^(0+128),w
  1374  0D1F  1703               	bsf	3,6	;RP1=1, select bank3
  1375  0D20  00C8               	movwf	_S^(0+384)	;volatile
  1376  0D21  0855               	movf	_C_D^(0+384),w	;volatile
  1377  0D22  07C8               	addwf	_S^(0+384),f	;volatile
  1378  0D23  3001               	movlw	1
  1379  0D24  1803               	skipnc
  1380  0D25  07C9               	addwf	(_S+1)^(0+384),f	;volatile
  1381  0D26  1803               	skipnc
  1382  0D27  07CA               	addwf	(_S+2)^(0+384),f	;volatile
  1383  0D28  1803               	skipnc
  1384  0D29  07CB               	addwf	(_S+3)^(0+384),f	;volatile
  1385                           
  1386                           ;main.c: 61: if (S>86400)
  1387  0D2A  1BCB               	btfsc	(_S+3)^(0+384),7	;volatile
  1388  0D2B  2D43               	goto	l2709
  1389  0D2C  084B               	movf	(_S+3)^(0+384),w	;volatile
  1390  0D2D  1D03               	btfss	3,2
  1391  0D2E  2D3B               	goto	l2707
  1392  0D2F  3001               	movlw	1
  1393  0D30  024A               	subwf	(_S+2)^(0+384),w	;volatile
  1394  0D31  1D03               	skipz
  1395  0D32  2D39               	goto	u3063
  1396  0D33  3051               	movlw	81
  1397  0D34  0249               	subwf	(_S+1)^(0+384),w	;volatile
  1398  0D35  1D03               	skipz
  1399  0D36  2D39               	goto	u3063
  1400  0D37  3081               	movlw	129
  1401  0D38  0248               	subwf	_S^(0+384),w	;volatile
  1402  0D39                     u3063:	
  1403  0D39  1C03               	btfss	3,0
  1404  0D3A  2D43               	goto	l2709
  1405  0D3B                     l2707:	
  1406                           
  1407                           ;main.c: 62: S=-86400;
  1408  0D3B  30FF               	movlw	255
  1409  0D3C  00CB               	movwf	(_S+3)^(0+384)	;volatile
  1410  0D3D  30FE               	movlw	254
  1411  0D3E  00CA               	movwf	(_S+2)^(0+384)	;volatile
  1412  0D3F  30AE               	movlw	174
  1413  0D40  00C9               	movwf	(_S+1)^(0+384)	;volatile
  1414  0D41  3080               	movlw	128
  1415  0D42  00C8               	movwf	_S^(0+384)	;volatile
  1416  0D43                     l2709:	
  1417                           
  1418                           ;main.c: 64: DetermineCycleChange();
  1419  0D43  120A  118A  2008  120A  158A  	fcall	_DetermineCycleChange
  1420                           
  1421                           ;main.c: 65: ChangeTheCycle();
  1422  0D48  120A  158A  2576  120A  158A  	fcall	_ChangeTheCycle
  1423                           
  1424                           ;main.c: 69: char Firm_Cicle = 0x00;
  1425  0D4D  120A  158A  2586  120A  158A  	fcall	_GetCyclePeriod
  1426                           
  1427                           ;main.c: 72: S_InUse = S;
  1428  0D52  1703               	bsf	3,6	;RP1=1, select bank3
  1429  0D53  084B               	movf	(_S+3)^(0+384),w	;volatile
  1430  0D54  00CF               	movwf	(_S_InUse+3)^(0+384)	;volatile
  1431  0D55  084A               	movf	(_S+2)^(0+384),w	;volatile
  1432  0D56  00CE               	movwf	(_S_InUse+2)^(0+384)	;volatile
  1433  0D57  0849               	movf	(_S+1)^(0+384),w	;volatile
  1434  0D58  00CD               	movwf	(_S_InUse+1)^(0+384)	;volatile
  1435  0D59  0848               	movf	_S^(0+384),w	;volatile
  1436  0D5A  00CC               	movwf	_S_InUse^(0+384)	;volatile
  1437  0D5B                     l2717:	
  1438                           
  1439                           ;main.c: 88: Lcd_Text(1,1,"SURESH");
  1440  0D5B  1683               	bsf	3,5	;RP0=1, select bank1
  1441  0D5C  1303               	bcf	3,6	;RP1=0, select bank1
  1442  0D5D  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1443  0D5E  01B8               	clrf	Lcd_Text@x^(0+128)
  1444  0D5F  0AB8               	incf	Lcd_Text@x^(0+128),f
  1445  0D60  00B9               	movwf	Lcd_Text@buffer^(0+128)
  1446  0D61  3001               	movlw	1
  1447  0D62  120A  118A  2216  120A  158A  	fcall	_Lcd_Text
  1448                           
  1449                           ;main.c: 113: _delay((unsigned long)((1000)*(4000000/4000.0)));
  1450  0D67  3006               	movlw	6
  1451  0D68  1703               	bsf	3,6	;RP1=1, select bank3
  1452  0D69  00BB               	movwf	(??_main^(0+384)+2)
  1453  0D6A  3013               	movlw	19
  1454  0D6B  00BA               	movwf	(??_main^(0+384)+1)
  1455  0D6C  30B1               	movlw	177
  1456  0D6D  00B9               	movwf	??_main^(0+384)
  1457  0D6E                     u3077:	
  1458  0D6E  0BB9               	decfsz	??_main^(0+384),f
  1459  0D6F  2D6E               	goto	u3077
  1460  0D70  0BBA               	decfsz	(??_main^(0+384)+1),f
  1461  0D71  2D6E               	goto	u3077
  1462  0D72  0BBB               	decfsz	(??_main^(0+384)+2),f
  1463  0D73  2D6E               	goto	u3077
  1464  0D74  2D75               	nop2
  1465  0D75  2D5B               	goto	l2717
  1466  0D76                     __end_of_main:	
  1467                           
  1468                           	psect	text1
  1469  0429                     __ptext1:	
  1470 ;; *************** function _UART_Init *****************
  1471 ;; Defined at:
  1472 ;;		line 3 in file "libs/gsk_usart.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;  baudrate        4   29[BANK3 ] const long 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  x               2   39[BANK3 ] unsigned int 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      unsigned char 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 300/300
  1483 ;;		On exit  : 300/100
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:      BANK1   BANK3   BANK2
  1486 ;;      Params:         0       4       0
  1487 ;;      Locals:         0       8       0
  1488 ;;      Temps:          0       0       0
  1489 ;;      Totals:         0      12       0
  1490 ;;Total ram usage:       12 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    4
  1493 ;; This function calls:
  1494 ;;		___altoft
  1495 ;;		___ftadd
  1496 ;;		___ftdiv
  1497 ;;		___ftmul
  1498 ;;		___fttol
  1499 ;;		_round
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           
  1506                           ;psect for function _UART_Init
  1507  0429                     _UART_Init:	
  1508                           
  1509                           ;gsk_usart.c: 4: uint16_t x;
  1510                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  1511                           
  1512                           ;incstack = 0
  1513                           ; Regs used in _UART_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1514  0429  3024               	movlw	36
  1515  042A  1303               	bcf	3,6	;RP1=0, select bank1
  1516  042B  00D4               	movwf	___ftdiv@f1^(0+128)
  1517  042C  3074               	movlw	116
  1518  042D  00D5               	movwf	(___ftdiv@f1+1)^(0+128)
  1519  042E  304A               	movlw	74
  1520  042F  00D6               	movwf	(___ftdiv@f1+2)^(0+128)
  1521  0430  1703               	bsf	3,6	;RP1=1, select bank3
  1522  0431  0830               	movf	(UART_Init@baudrate+3)^(0+384),w
  1523  0432  1303               	bcf	3,6	;RP1=0, select bank1
  1524  0433  00BF               	movwf	(___altoft@c+3)^(0+128)
  1525  0434  1703               	bsf	3,6	;RP1=1, select bank3
  1526  0435  082F               	movf	(UART_Init@baudrate+2)^(0+384),w
  1527  0436  1303               	bcf	3,6	;RP1=0, select bank1
  1528  0437  00BE               	movwf	(___altoft@c+2)^(0+128)
  1529  0438  1703               	bsf	3,6	;RP1=1, select bank3
  1530  0439  082E               	movf	(UART_Init@baudrate+1)^(0+384),w
  1531  043A  1303               	bcf	3,6	;RP1=0, select bank1
  1532  043B  00BD               	movwf	(___altoft@c+1)^(0+128)
  1533  043C  1703               	bsf	3,6	;RP1=1, select bank3
  1534  043D  082D               	movf	UART_Init@baudrate^(0+384),w
  1535  043E  1303               	bcf	3,6	;RP1=0, select bank1
  1536  043F  00BC               	movwf	___altoft@c^(0+128)
  1537  0440  25FC  120A  118A   	fcall	___altoft
  1538  0443  083C               	movf	?___altoft^(0+128),w
  1539  0444  00C5               	movwf	___ftmul@f2^(0+128)
  1540  0445  083D               	movf	(?___altoft+1)^(0+128),w
  1541  0446  00C6               	movwf	(___ftmul@f2+1)^(0+128)
  1542  0447  083E               	movf	(?___altoft+2)^(0+128),w
  1543  0448  00C7               	movwf	(___ftmul@f2+2)^(0+128)
  1544  0449  3080               	movlw	128
  1545  044A  01C2               	clrf	___ftmul@f1^(0+128)
  1546  044B  00C3               	movwf	(___ftmul@f1+1)^(0+128)
  1547  044C  3040               	movlw	64
  1548  044D  00C4               	movwf	(___ftmul@f1+2)^(0+128)
  1549  044E  273F  120A  118A   	fcall	___ftmul
  1550  0451  0842               	movf	?___ftmul^(0+128),w
  1551  0452  00D1               	movwf	___ftdiv@f2^(0+128)
  1552  0453  0843               	movf	(?___ftmul+1)^(0+128),w
  1553  0454  00D2               	movwf	(___ftdiv@f2+1)^(0+128)
  1554  0455  0844               	movf	(?___ftmul+2)^(0+128),w
  1555  0456  00D3               	movwf	(___ftdiv@f2+2)^(0+128)
  1556  0457  26D7  120A  118A   	fcall	___ftdiv
  1557  045A  0851               	movf	?___ftdiv^(0+128),w
  1558  045B  1703               	bsf	3,6	;RP1=1, select bank3
  1559  045C  00B1               	movwf	_UART_Init$935^(0+384)
  1560  045D  1303               	bcf	3,6	;RP1=0, select bank1
  1561  045E  0852               	movf	(?___ftdiv+1)^(0+128),w
  1562  045F  1703               	bsf	3,6	;RP1=1, select bank3
  1563  0460  00B2               	movwf	(_UART_Init$935+1)^(0+384)
  1564  0461  1303               	bcf	3,6	;RP1=0, select bank1
  1565  0462  0853               	movf	(?___ftdiv+2)^(0+128),w
  1566  0463  1703               	bsf	3,6	;RP1=1, select bank3
  1567  0464  00B3               	movwf	(_UART_Init$935+2)^(0+384)
  1568                           
  1569                           ;gsk_usart.c: 4: uint16_t x;
  1570                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  1571  0465  0831               	movf	_UART_Init$935^(0+384),w
  1572  0466  00A7               	movwf	round@x^(0+384)
  1573  0467  0832               	movf	(_UART_Init$935+1)^(0+384),w
  1574  0468  00A8               	movwf	(round@x+1)^(0+384)
  1575  0469  0833               	movf	(_UART_Init$935+2)^(0+384),w
  1576  046A  00A9               	movwf	(round@x+2)^(0+384)
  1577  046B  24A8  120A  118A   	fcall	_round
  1578  046E  0827               	movf	?_round^(0+384),w
  1579  046F  00B4               	movwf	_UART_Init$936^(0+384)
  1580  0470  0828               	movf	(?_round+1)^(0+384),w
  1581  0471  00B5               	movwf	(_UART_Init$936+1)^(0+384)
  1582  0472  0829               	movf	(?_round+2)^(0+384),w
  1583  0473  00B6               	movwf	(_UART_Init$936+2)^(0+384)
  1584                           
  1585                           ;gsk_usart.c: 4: uint16_t x;
  1586                           ;gsk_usart.c: 5: x = round(4000000/(baudrate*4.0))-1;
  1587  0474  0834               	movf	_UART_Init$936^(0+384),w
  1588  0475  1303               	bcf	3,6	;RP1=0, select bank1
  1589  0476  00E3               	movwf	___ftadd@f2^(0+128)
  1590  0477  1703               	bsf	3,6	;RP1=1, select bank3
  1591  0478  0835               	movf	(_UART_Init$936+1)^(0+384),w
  1592  0479  1303               	bcf	3,6	;RP1=0, select bank1
  1593  047A  00E4               	movwf	(___ftadd@f2+1)^(0+128)
  1594  047B  1703               	bsf	3,6	;RP1=1, select bank3
  1595  047C  0836               	movf	(_UART_Init$936+2)^(0+384),w
  1596  047D  1303               	bcf	3,6	;RP1=0, select bank1
  1597  047E  00E5               	movwf	(___ftadd@f2+2)^(0+128)
  1598  047F  3080               	movlw	128
  1599  0480  01E0               	clrf	___ftadd@f1^(0+128)
  1600  0481  00E1               	movwf	(___ftadd@f1+1)^(0+128)
  1601  0482  30BF               	movlw	191
  1602  0483  00E2               	movwf	(___ftadd@f1+2)^(0+128)
  1603  0484  253C  120A  118A   	fcall	___ftadd
  1604  0487  0860               	movf	?___ftadd^(0+128),w
  1605  0488  00EC               	movwf	___fttol@f1^(0+128)
  1606  0489  0861               	movf	(?___ftadd+1)^(0+128),w
  1607  048A  00ED               	movwf	(___fttol@f1+1)^(0+128)
  1608  048B  0862               	movf	(?___ftadd+2)^(0+128),w
  1609  048C  00EE               	movwf	(___fttol@f1+2)^(0+128)
  1610  048D  262B               	fcall	___fttol
  1611  048E  086D               	movf	(?___fttol^(0+128)+1),w
  1612  048F  1703               	bsf	3,6	;RP1=1, select bank3
  1613  0490  00B8               	movwf	(UART_Init@x+1)^(0+384)
  1614  0491  1303               	bcf	3,6	;RP1=0, select bank1
  1615  0492  086C               	movf	?___fttol^(0+128),w
  1616  0493  1703               	bsf	3,6	;RP1=1, select bank3
  1617  0494  00B7               	movwf	UART_Init@x^(0+384)
  1618                           
  1619                           ;gsk_usart.c: 6: SPBRG = x;
  1620  0495  1303               	bcf	3,6	;RP1=0, select bank1
  1621  0496  0099               	movwf	25	;volatile
  1622                           
  1623                           ;gsk_usart.c: 7: SPBRGH = (x>>8);
  1624  0497  1703               	bsf	3,6	;RP1=1, select bank3
  1625  0498  0838               	movf	(UART_Init@x^(0+384)+1),w
  1626  0499  1303               	bcf	3,6	;RP1=0, select bank1
  1627  049A  009A               	movwf	26	;volatile
  1628                           
  1629                           ;gsk_usart.c: 8: BRGH = 1;
  1630  049B  1518               	bsf	24,2	;volatile
  1631                           
  1632                           ;gsk_usart.c: 9: BRG16 = 1;
  1633  049C  1703               	bsf	3,6	;RP1=1, select bank3
  1634  049D  1587               	bsf	7,3	;volatile
  1635                           
  1636                           ;gsk_usart.c: 10: CREN = 1;
  1637  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1638  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1639  04A0  1618               	bsf	24,4	;volatile
  1640                           
  1641                           ;gsk_usart.c: 11: SYNC = 0;
  1642  04A1  1683               	bsf	3,5	;RP0=1, select bank1
  1643  04A2  1218               	bcf	24,4	;volatile
  1644                           
  1645                           ;gsk_usart.c: 12: SPEN = 1;
  1646  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  1647  04A4  1798               	bsf	24,7	;volatile
  1648                           
  1649                           ;gsk_usart.c: 15: TXEN = 1;
  1650  04A5  1683               	bsf	3,5	;RP0=1, select bank1
  1651  04A6  1698               	bsf	24,5	;volatile
  1652  04A7  0008               	return
  1653  04A8                     __end_of_UART_Init:	
  1654  04A8                     __ptext2:	
  1655 ;; *************** function _round *****************
  1656 ;; Defined at:
  1657 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\round.c"
  1658 ;; Parameters:    Size  Location     Type
  1659 ;;  x               3   23[BANK3 ] unsigned char 
  1660 ;; Auto vars:     Size  Location     Type
  1661 ;;  f               3   26[BANK3 ] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  3   23[BANK3 ] unsigned char 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1666 ;; Tracked objects:
  1667 ;;		On entry : 300/300
  1668 ;;		On exit  : 300/300
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:      BANK1   BANK3   BANK2
  1671 ;;      Params:         0       3       0
  1672 ;;      Locals:         0       3       0
  1673 ;;      Temps:          0       0       0
  1674 ;;      Totals:         0       6       0
  1675 ;;Total ram usage:        6 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    3
  1678 ;; This function calls:
  1679 ;;		___ftadd
  1680 ;;		___ftsub
  1681 ;;		_trunc
  1682 ;; This function is called by:
  1683 ;;		_UART_Init
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           
  1688                           ;psect for function _round
  1689  04A8                     _round:	
  1690                           
  1691                           ;incstack = 0
  1692                           ; Regs used in _round: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1693  04A8  27EE  120A  118A   	fcall	PL20	;call to abstracted procedure
  1694  04AB  24F3  120A  118A   	fcall	_trunc
  1695  04AE  0819               	movf	?_trunc^(0+384),w
  1696  04AF  00A1               	movwf	___ftsub@f2^(0+384)
  1697  04B0  081A               	movf	(?_trunc+1)^(0+384),w
  1698  04B1  00A2               	movwf	(___ftsub@f2+1)^(0+384)
  1699  04B2  081B               	movf	(?_trunc+2)^(0+384),w
  1700  04B3  00A3               	movwf	(___ftsub@f2+2)^(0+384)
  1701  04B4  0827               	movf	round@x^(0+384),w
  1702  04B5  00A4               	movwf	___ftsub@f1^(0+384)
  1703  04B6  0828               	movf	(round@x+1)^(0+384),w
  1704  04B7  00A5               	movwf	(___ftsub@f1+1)^(0+384)
  1705  04B8  0829               	movf	(round@x+2)^(0+384),w
  1706  04B9  00A6               	movwf	(___ftsub@f1+2)^(0+384)
  1707  04BA  27AC  120A  118A   	fcall	___ftsub
  1708  04BD  0821               	movf	?___ftsub^(0+384),w
  1709  04BE  00AA               	movwf	round@f^(0+384)
  1710  04BF  0822               	movf	(?___ftsub+1)^(0+384),w
  1711  04C0  00AB               	movwf	(round@f+1)^(0+384)
  1712  04C1  0823               	movf	(?___ftsub+2)^(0+384),w
  1713  04C2  00AC               	movwf	(round@f+2)^(0+384)
  1714  04C3  082A               	movf	round@f^(0+384),w
  1715  04C4  1303               	bcf	3,6	;RP1=0, select bank1
  1716  04C5  00E0               	movwf	___ftadd@f1^(0+128)
  1717  04C6  1703               	bsf	3,6	;RP1=1, select bank3
  1718  04C7  082B               	movf	(round@f+1)^(0+384),w
  1719  04C8  1303               	bcf	3,6	;RP1=0, select bank1
  1720  04C9  00E1               	movwf	(___ftadd@f1+1)^(0+128)
  1721  04CA  1703               	bsf	3,6	;RP1=1, select bank3
  1722  04CB  082C               	movf	(round@f+2)^(0+384),w
  1723  04CC  1303               	bcf	3,6	;RP1=0, select bank1
  1724  04CD  00E2               	movwf	(___ftadd@f1+2)^(0+128)
  1725  04CE  1703               	bsf	3,6	;RP1=1, select bank3
  1726  04CF  0827               	movf	round@x^(0+384),w
  1727  04D0  1303               	bcf	3,6	;RP1=0, select bank1
  1728  04D1  00E3               	movwf	___ftadd@f2^(0+128)
  1729  04D2  1703               	bsf	3,6	;RP1=1, select bank3
  1730  04D3  0828               	movf	(round@x+1)^(0+384),w
  1731  04D4  1303               	bcf	3,6	;RP1=0, select bank1
  1732  04D5  00E4               	movwf	(___ftadd@f2+1)^(0+128)
  1733  04D6  1703               	bsf	3,6	;RP1=1, select bank3
  1734  04D7  0829               	movf	(round@x+2)^(0+384),w
  1735  04D8  1303               	bcf	3,6	;RP1=0, select bank1
  1736  04D9  00E5               	movwf	(___ftadd@f2+2)^(0+128)
  1737  04DA  253C  120A  118A   	fcall	___ftadd
  1738  04DD  0860               	movf	?___ftadd^(0+128),w
  1739  04DE  1703               	bsf	3,6	;RP1=1, select bank3
  1740  04DF  00A7               	movwf	round@x^(0+384)
  1741  04E0  1303               	bcf	3,6	;RP1=0, select bank1
  1742  04E1  0861               	movf	(?___ftadd+1)^(0+128),w
  1743  04E2  1703               	bsf	3,6	;RP1=1, select bank3
  1744  04E3  00A8               	movwf	(round@x+1)^(0+384)
  1745  04E4  1303               	bcf	3,6	;RP1=0, select bank1
  1746  04E5  0862               	movf	(?___ftadd+2)^(0+128),w
  1747  04E6  1703               	bsf	3,6	;RP1=1, select bank3
  1748  04E7  00A9               	movwf	(round@x+2)^(0+384)
  1749  04E8  27EE  120A  118A   	fcall	PL20	;call to abstracted procedure
  1750  04EB  24F3               	fcall	_trunc
  1751  04EC  0819               	movf	?_trunc^(0+384),w
  1752  04ED  00A7               	movwf	?_round^(0+384)
  1753  04EE  081A               	movf	(?_trunc+1)^(0+384),w
  1754  04EF  00A8               	movwf	(?_round+1)^(0+384)
  1755  04F0  081B               	movf	(?_trunc+2)^(0+384),w
  1756  04F1  00A9               	movwf	(?_round+2)^(0+384)
  1757  04F2  0008               	return
  1758  04F3                     __end_of_round:	
  1759  04F3                     __ptext3:	
  1760 ;; *************** function _trunc *****************
  1761 ;; Defined at:
  1762 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\trunc.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  x               3    9[BANK3 ] unsigned char 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  i               3   12[BANK3 ] unsigned char 
  1767 ;;  expon           2   15[BANK3 ] int 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  3    9[BANK3 ] int 
  1770 ;; Registers used:
  1771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1772 ;; Tracked objects:
  1773 ;;		On entry : 300/300
  1774 ;;		On exit  : 300/300
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:      BANK1   BANK3   BANK2
  1777 ;;      Params:         0       3       0
  1778 ;;      Locals:         0       5       0
  1779 ;;      Temps:          0       0       0
  1780 ;;      Totals:         0       8       0
  1781 ;;Total ram usage:        8 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    2
  1784 ;; This function calls:
  1785 ;;		___altoft
  1786 ;;		___fttol
  1787 ;;		_frexp
  1788 ;; This function is called by:
  1789 ;;		_round
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           
  1794                           ;psect for function _trunc
  1795  04F3                     _trunc:	
  1796                           
  1797                           ;incstack = 0
  1798                           ; Regs used in _trunc: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1799  04F3  0819               	movf	trunc@x^(0+384),w
  1800  04F4  1303               	bcf	3,6	;RP1=0, select bank1
  1801  04F5  00B4               	movwf	frexp@value^(0+128)
  1802  04F6  1703               	bsf	3,6	;RP1=1, select bank3
  1803  04F7  081A               	movf	(trunc@x+1)^(0+384),w
  1804  04F8  1303               	bcf	3,6	;RP1=0, select bank1
  1805  04F9  00B5               	movwf	(frexp@value+1)^(0+128)
  1806  04FA  1703               	bsf	3,6	;RP1=1, select bank3
  1807  04FB  081B               	movf	(trunc@x+2)^(0+384),w
  1808  04FC  1303               	bcf	3,6	;RP1=0, select bank1
  1809  04FD  00B6               	movwf	(frexp@value+2)^(0+128)
  1810  04FE  309F               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  1811  04FF  00B7               	movwf	frexp@eptr^(0+128)
  1812  0500  120A  158A  2426  120A  118A  	fcall	_frexp
  1813  0505  1703               	bsf	3,6	;RP1=1, select bank3
  1814  0506  1FA0               	btfss	(trunc@expon+1)^(0+384),7
  1815  0507  2D0C               	goto	l2219
  1816  0508  0199               	clrf	?_trunc^(0+384)
  1817  0509  019A               	clrf	(?_trunc+1)^(0+384)
  1818  050A  019B               	clrf	(?_trunc+2)^(0+384)
  1819  050B  0008               	return
  1820  050C                     l2219:	
  1821  050C  3000               	movlw	0
  1822  050D  0220               	subwf	(trunc@expon+1)^(0+384),w
  1823  050E  3015               	movlw	21
  1824  050F  1903               	skipnz
  1825  0510  021F               	subwf	trunc@expon^(0+384),w
  1826  0511  1803               	btfsc	3,0
  1827  0512  0008               	return
  1828  0513  0819               	movf	trunc@x^(0+384),w
  1829  0514  1303               	bcf	3,6	;RP1=0, select bank1
  1830  0515  00EC               	movwf	___fttol@f1^(0+128)
  1831  0516  1703               	bsf	3,6	;RP1=1, select bank3
  1832  0517  081A               	movf	(trunc@x+1)^(0+384),w
  1833  0518  1303               	bcf	3,6	;RP1=0, select bank1
  1834  0519  00ED               	movwf	(___fttol@f1+1)^(0+128)
  1835  051A  1703               	bsf	3,6	;RP1=1, select bank3
  1836  051B  081B               	movf	(trunc@x+2)^(0+384),w
  1837  051C  1303               	bcf	3,6	;RP1=0, select bank1
  1838  051D  00EE               	movwf	(___fttol@f1+2)^(0+128)
  1839  051E  262B  120A  118A   	fcall	___fttol
  1840  0521  086F               	movf	(?___fttol+3)^(0+128),w
  1841  0522  00BF               	movwf	(___altoft@c+3)^(0+128)
  1842  0523  086E               	movf	(?___fttol+2)^(0+128),w
  1843  0524  00BE               	movwf	(___altoft@c+2)^(0+128)
  1844  0525  086D               	movf	(?___fttol+1)^(0+128),w
  1845  0526  00BD               	movwf	(___altoft@c+1)^(0+128)
  1846  0527  086C               	movf	?___fttol^(0+128),w
  1847  0528  00BC               	movwf	___altoft@c^(0+128)
  1848  0529  25FC               	fcall	___altoft
  1849  052A  083C               	movf	?___altoft^(0+128),w
  1850  052B  1703               	bsf	3,6	;RP1=1, select bank3
  1851  052C  009C               	movwf	trunc@i^(0+384)
  1852  052D  1303               	bcf	3,6	;RP1=0, select bank1
  1853  052E  083D               	movf	(?___altoft+1)^(0+128),w
  1854  052F  1703               	bsf	3,6	;RP1=1, select bank3
  1855  0530  009D               	movwf	(trunc@i+1)^(0+384)
  1856  0531  1303               	bcf	3,6	;RP1=0, select bank1
  1857  0532  083E               	movf	(?___altoft+2)^(0+128),w
  1858  0533  1703               	bsf	3,6	;RP1=1, select bank3
  1859  0534  009E               	movwf	(trunc@i+2)^(0+384)
  1860  0535  081C               	movf	trunc@i^(0+384),w
  1861  0536  0099               	movwf	?_trunc^(0+384)
  1862  0537  081D               	movf	(trunc@i+1)^(0+384),w
  1863  0538  009A               	movwf	(?_trunc+1)^(0+384)
  1864  0539  081E               	movf	(trunc@i+2)^(0+384),w
  1865  053A  009B               	movwf	(?_trunc+2)^(0+384)
  1866  053B  0008               	return
  1867  053C                     __end_of_trunc:	
  1868  053C                     __ptext8:	
  1869 ;; *************** function ___ftadd *****************
  1870 ;; Defined at:
  1871 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  f1              3   44[BANK1 ] float 
  1874 ;;  f2              3   47[BANK1 ] float 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  exp1            1   55[BANK1 ] unsigned char 
  1877 ;;  exp2            1   54[BANK1 ] unsigned char 
  1878 ;;  sign            1   53[BANK1 ] unsigned char 
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  3   44[BANK1 ] float 
  1881 ;; Registers used:
  1882 ;;		wreg, status,2, status,0, pclath, cstack
  1883 ;; Tracked objects:
  1884 ;;		On entry : 300/100
  1885 ;;		On exit  : 300/100
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:      BANK1   BANK3   BANK2
  1888 ;;      Params:         6       0       0
  1889 ;;      Locals:         3       0       0
  1890 ;;      Temps:          3       0       0
  1891 ;;      Totals:        12       0       0
  1892 ;;Total ram usage:       12 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; Hardware stack levels required when called:    1
  1895 ;; This function calls:
  1896 ;;		___ftpack
  1897 ;; This function is called by:
  1898 ;;		_UART_Init
  1899 ;;		___ftsub
  1900 ;;		_round
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function ___ftadd
  1906  053C                     ___ftadd:	
  1907                           
  1908                           ;incstack = 0
  1909                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  1910  053C  0860               	movf	___ftadd@f1^(0+128),w
  1911  053D  00E6               	movwf	??___ftadd^(0+128)
  1912  053E  0861               	movf	(___ftadd@f1+1)^(0+128),w
  1913  053F  00E7               	movwf	(??___ftadd^(0+128)+1)
  1914  0540  0862               	movf	(___ftadd@f1+2)^(0+128),w
  1915  0541  00E8               	movwf	(??___ftadd^(0+128)+2)
  1916  0542  1003               	clrc
  1917  0543  0D67               	rlf	(??___ftadd^(0+128)+1),w
  1918  0544  0D68               	rlf	(??___ftadd^(0+128)+2),w
  1919  0545  00EB               	movwf	___ftadd@exp1^(0+128)
  1920  0546  0863               	movf	___ftadd@f2^(0+128),w
  1921  0547  00E6               	movwf	??___ftadd^(0+128)
  1922  0548  0864               	movf	(___ftadd@f2+1)^(0+128),w
  1923  0549  00E7               	movwf	(??___ftadd^(0+128)+1)
  1924  054A  0865               	movf	(___ftadd@f2+2)^(0+128),w
  1925  054B  00E8               	movwf	(??___ftadd^(0+128)+2)
  1926  054C  1003               	clrc
  1927  054D  0D67               	rlf	(??___ftadd^(0+128)+1),w
  1928  054E  0D68               	rlf	(??___ftadd^(0+128)+2),w
  1929  054F  00EA               	movwf	___ftadd@exp2^(0+128)
  1930  0550  086B               	movf	___ftadd@exp1^(0+128),w
  1931  0551  1903               	btfsc	3,2
  1932  0552  2D5F               	goto	l1969
  1933  0553  086A               	movf	___ftadd@exp2^(0+128),w
  1934  0554  026B               	subwf	___ftadd@exp1^(0+128),w
  1935  0555  086A               	movf	___ftadd@exp2^(0+128),w
  1936  0556  1803               	skipnc
  1937  0557  2D67               	goto	L1
  1938  0558  00E6               	movwf	??___ftadd^(0+128)
  1939  0559  086B               	movf	___ftadd@exp1^(0+128),w
  1940  055A  02E6               	subwf	??___ftadd^(0+128),f
  1941  055B  3019               	movlw	25
  1942  055C  0266               	subwf	??___ftadd^(0+128),w
  1943  055D  1C03               	skipc
  1944  055E  2D66               	goto	l1973
  1945  055F                     l1969:	
  1946  055F  0863               	movf	___ftadd@f2^(0+128),w
  1947  0560  00E0               	movwf	?___ftadd^(0+128)
  1948  0561  0864               	movf	(___ftadd@f2+1)^(0+128),w
  1949  0562  00E1               	movwf	(?___ftadd+1)^(0+128)
  1950  0563  0865               	movf	(___ftadd@f2+2)^(0+128),w
  1951  0564  00E2               	movwf	(?___ftadd+2)^(0+128)
  1952  0565  0008               	return
  1953  0566                     l1973:	
  1954  0566  086A               	movf	___ftadd@exp2^(0+128),w
  1955  0567                     L1:	
  1956  0567  1903               	btfsc	3,2
  1957  0568  0008               	return
  1958  0569  086B               	movf	___ftadd@exp1^(0+128),w
  1959  056A  026A               	subwf	___ftadd@exp2^(0+128),w
  1960  056B  1803               	skipnc
  1961  056C  2D75               	goto	l1979
  1962  056D  086B               	movf	___ftadd@exp1^(0+128),w
  1963  056E  00E6               	movwf	??___ftadd^(0+128)
  1964  056F  086A               	movf	___ftadd@exp2^(0+128),w
  1965  0570  02E6               	subwf	??___ftadd^(0+128),f
  1966  0571  3019               	movlw	25
  1967  0572  0266               	subwf	??___ftadd^(0+128),w
  1968  0573  1803               	btfsc	3,0
  1969  0574  0008               	return
  1970  0575                     l1979:	
  1971  0575  3006               	movlw	6
  1972  0576  00E9               	movwf	___ftadd@sign^(0+128)
  1973  0577  1BE2               	btfsc	(___ftadd@f1+2)^(0+128),7
  1974  0578  17E9               	bsf	___ftadd@sign^(0+128),7
  1975  0579  1BE5               	btfsc	(___ftadd@f2+2)^(0+128),7
  1976  057A  1769               	bsf	___ftadd@sign^(0+128),6
  1977  057B  17E1               	bsf	(___ftadd@f1^(0+128)+1),7
  1978  057C  01E2               	clrf	(___ftadd@f1+2)^(0+128)
  1979  057D  17E4               	bsf	(___ftadd@f2^(0+128)+1),7
  1980  057E  01E5               	clrf	(___ftadd@f2+2)^(0+128)
  1981  057F  086A               	movf	___ftadd@exp2^(0+128),w
  1982  0580  026B               	subwf	___ftadd@exp1^(0+128),w
  1983  0581  1803               	skipnc
  1984  0582  2D9C               	goto	l2001
  1985  0583                     l1991:	
  1986  0583  1003               	clrc
  1987  0584  0DE3               	rlf	___ftadd@f2^(0+128),f
  1988  0585  0DE4               	rlf	(___ftadd@f2+1)^(0+128),f
  1989  0586  0DE5               	rlf	(___ftadd@f2+2)^(0+128),f
  1990  0587  03EA               	decf	___ftadd@exp2^(0+128),f
  1991  0588  086A               	movf	___ftadd@exp2^(0+128),w
  1992  0589  066B               	xorwf	___ftadd@exp1^(0+128),w
  1993  058A  1903               	skipnz
  1994  058B  2D97               	goto	l1999
  1995  058C  03E9               	decf	___ftadd@sign^(0+128),f
  1996  058D  0869               	movf	___ftadd@sign^(0+128),w
  1997  058E  3907               	andlw	7
  1998  058F  1903               	btfsc	3,2
  1999  0590  2D97               	goto	l1999
  2000  0591  2D83               	goto	l1991
  2001  0592                     l1997:	
  2002  0592  1003               	clrc
  2003  0593  0CE2               	rrf	(___ftadd@f1+2)^(0+128),f
  2004  0594  0CE1               	rrf	(___ftadd@f1+1)^(0+128),f
  2005  0595  0CE0               	rrf	___ftadd@f1^(0+128),f
  2006  0596  0AEB               	incf	___ftadd@exp1^(0+128),f
  2007  0597                     l1999:	
  2008  0597  086B               	movf	___ftadd@exp1^(0+128),w
  2009  0598  066A               	xorwf	___ftadd@exp2^(0+128),w
  2010  0599  1903               	btfsc	3,2
  2011  059A  2DB8               	goto	l775
  2012  059B  2D92               	goto	l1997
  2013  059C                     l2001:	
  2014  059C  086B               	movf	___ftadd@exp1^(0+128),w
  2015  059D  026A               	subwf	___ftadd@exp2^(0+128),w
  2016  059E  1803               	skipnc
  2017  059F  2DB8               	goto	l775
  2018  05A0                     l2003:	
  2019  05A0  1003               	clrc
  2020  05A1  0DE0               	rlf	___ftadd@f1^(0+128),f
  2021  05A2  0DE1               	rlf	(___ftadd@f1+1)^(0+128),f
  2022  05A3  0DE2               	rlf	(___ftadd@f1+2)^(0+128),f
  2023  05A4  03EB               	decf	___ftadd@exp1^(0+128),f
  2024  05A5  086A               	movf	___ftadd@exp2^(0+128),w
  2025  05A6  066B               	xorwf	___ftadd@exp1^(0+128),w
  2026  05A7  1903               	skipnz
  2027  05A8  2DB4               	goto	l2011
  2028  05A9  03E9               	decf	___ftadd@sign^(0+128),f
  2029  05AA  0869               	movf	___ftadd@sign^(0+128),w
  2030  05AB  3907               	andlw	7
  2031  05AC  1903               	btfsc	3,2
  2032  05AD  2DB4               	goto	l2011
  2033  05AE  2DA0               	goto	l2003
  2034  05AF                     l2009:	
  2035  05AF  1003               	clrc
  2036  05B0  0CE5               	rrf	(___ftadd@f2+2)^(0+128),f
  2037  05B1  0CE4               	rrf	(___ftadd@f2+1)^(0+128),f
  2038  05B2  0CE3               	rrf	___ftadd@f2^(0+128),f
  2039  05B3  0AEA               	incf	___ftadd@exp2^(0+128),f
  2040  05B4                     l2011:	
  2041  05B4  086B               	movf	___ftadd@exp1^(0+128),w
  2042  05B5  066A               	xorwf	___ftadd@exp2^(0+128),w
  2043  05B6  1D03               	skipz
  2044  05B7  2DAF               	goto	l2009
  2045  05B8                     l775:	
  2046  05B8  1FE9               	btfss	___ftadd@sign^(0+128),7
  2047  05B9  2DC3               	goto	l2017
  2048  05BA  30FF               	movlw	255
  2049  05BB  06E0               	xorwf	___ftadd@f1^(0+128),f
  2050  05BC  06E1               	xorwf	(___ftadd@f1+1)^(0+128),f
  2051  05BD  06E2               	xorwf	(___ftadd@f1+2)^(0+128),f
  2052  05BE  0AE0               	incf	___ftadd@f1^(0+128),f
  2053  05BF  1903               	skipnz
  2054  05C0  0AE1               	incf	(___ftadd@f1+1)^(0+128),f
  2055  05C1  1903               	skipnz
  2056  05C2  0AE2               	incf	(___ftadd@f1+2)^(0+128),f
  2057  05C3                     l2017:	
  2058  05C3  1F69               	btfss	___ftadd@sign^(0+128),6
  2059  05C4  2DCE               	goto	l2023
  2060  05C5  30FF               	movlw	255
  2061  05C6  06E3               	xorwf	___ftadd@f2^(0+128),f
  2062  05C7  06E4               	xorwf	(___ftadd@f2+1)^(0+128),f
  2063  05C8  06E5               	xorwf	(___ftadd@f2+2)^(0+128),f
  2064  05C9  0AE3               	incf	___ftadd@f2^(0+128),f
  2065  05CA  1903               	skipnz
  2066  05CB  0AE4               	incf	(___ftadd@f2+1)^(0+128),f
  2067  05CC  1903               	skipnz
  2068  05CD  0AE5               	incf	(___ftadd@f2+2)^(0+128),f
  2069  05CE                     l2023:	
  2070  05CE  01E9               	clrf	___ftadd@sign^(0+128)
  2071  05CF  0860               	movf	___ftadd@f1^(0+128),w
  2072  05D0  07E3               	addwf	___ftadd@f2^(0+128),f
  2073  05D1  0861               	movf	(___ftadd@f1+1)^(0+128),w
  2074  05D2  1103               	clrz
  2075  05D3  1803               	skipnc
  2076  05D4  0A61               	incf	(___ftadd@f1+1)^(0+128),w
  2077  05D5  1D03               	btfss	3,2
  2078  05D6  07E4               	addwf	(___ftadd@f2+1)^(0+128),f
  2079  05D7  0862               	movf	(___ftadd@f1+2)^(0+128),w
  2080  05D8  1103               	clrz
  2081  05D9  1803               	skipnc
  2082  05DA  0A62               	incf	(___ftadd@f1+2)^(0+128),w
  2083  05DB  1D03               	btfss	3,2
  2084  05DC  07E5               	addwf	(___ftadd@f2+2)^(0+128),f
  2085  05DD  1FE5               	btfss	(___ftadd@f2+2)^(0+128),7
  2086  05DE  2DEA               	goto	l2035
  2087  05DF  30FF               	movlw	255
  2088  05E0  06E3               	xorwf	___ftadd@f2^(0+128),f
  2089  05E1  06E4               	xorwf	(___ftadd@f2+1)^(0+128),f
  2090  05E2  06E5               	xorwf	(___ftadd@f2+2)^(0+128),f
  2091  05E3  0AE3               	incf	___ftadd@f2^(0+128),f
  2092  05E4  1903               	skipnz
  2093  05E5  0AE4               	incf	(___ftadd@f2+1)^(0+128),f
  2094  05E6  1903               	skipnz
  2095  05E7  0AE5               	incf	(___ftadd@f2+2)^(0+128),f
  2096  05E8  01E9               	clrf	___ftadd@sign^(0+128)
  2097  05E9  0AE9               	incf	___ftadd@sign^(0+128),f
  2098  05EA                     l2035:	
  2099  05EA  0863               	movf	___ftadd@f2^(0+128),w
  2100  05EB  00B4               	movwf	___ftpack@arg^(0+128)
  2101  05EC  0864               	movf	(___ftadd@f2+1)^(0+128),w
  2102  05ED  00B5               	movwf	(___ftpack@arg+1)^(0+128)
  2103  05EE  0865               	movf	(___ftadd@f2+2)^(0+128),w
  2104  05EF  00B6               	movwf	(___ftpack@arg+2)^(0+128)
  2105  05F0  086B               	movf	___ftadd@exp1^(0+128),w
  2106  05F1  00B7               	movwf	___ftpack@exp^(0+128)
  2107  05F2  0869               	movf	___ftadd@sign^(0+128),w
  2108  05F3  00B8               	movwf	___ftpack@sign^(0+128)
  2109  05F4  2695               	fcall	___ftpack
  2110  05F5  0834               	movf	?___ftpack^(0+128),w
  2111  05F6  00E0               	movwf	?___ftadd^(0+128)
  2112  05F7  0835               	movf	(?___ftpack+1)^(0+128),w
  2113  05F8  00E1               	movwf	(?___ftadd+1)^(0+128)
  2114  05F9  0836               	movf	(?___ftpack+2)^(0+128),w
  2115  05FA  00E2               	movwf	(?___ftadd+2)^(0+128)
  2116  05FB  0008               	return
  2117  05FC                     __end_of___ftadd:	
  2118  05FC                     __ptext6:	
  2119 ;; *************** function ___altoft *****************
  2120 ;; Defined at:
  2121 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;  c               4    8[BANK1 ] long 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  sign            1   13[BANK1 ] unsigned char 
  2126 ;;  exp             1   12[BANK1 ] unsigned char 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  3    8[BANK1 ] float 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0, pclath, cstack
  2131 ;; Tracked objects:
  2132 ;;		On entry : 300/100
  2133 ;;		On exit  : 300/100
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:      BANK1   BANK3   BANK2
  2136 ;;      Params:         4       0       0
  2137 ;;      Locals:         2       0       0
  2138 ;;      Temps:          0       0       0
  2139 ;;      Totals:         6       0       0
  2140 ;;Total ram usage:        6 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    1
  2143 ;; This function calls:
  2144 ;;		___ftpack
  2145 ;; This function is called by:
  2146 ;;		_UART_Init
  2147 ;;		_trunc
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           
  2152                           ;psect for function ___altoft
  2153  05FC                     ___altoft:	
  2154  05FC  308E               	movlw	142
  2155                           
  2156                           ;incstack = 0
  2157                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  2158  05FD  01C1               	clrf	___altoft@sign^(0+128)
  2159  05FE  00C0               	movwf	___altoft@exp^(0+128)
  2160  05FF  1FBF               	btfss	(___altoft@c+3)^(0+128),7
  2161  0600  2E0E               	goto	l1957
  2162  0601  09BC               	comf	___altoft@c^(0+128),f
  2163  0602  09BD               	comf	(___altoft@c+1)^(0+128),f
  2164  0603  09BE               	comf	(___altoft@c+2)^(0+128),f
  2165  0604  09BF               	comf	(___altoft@c+3)^(0+128),f
  2166  0605  0ABC               	incf	___altoft@c^(0+128),f
  2167  0606  1903               	skipnz
  2168  0607  0ABD               	incf	(___altoft@c+1)^(0+128),f
  2169  0608  1903               	skipnz
  2170  0609  0ABE               	incf	(___altoft@c+2)^(0+128),f
  2171  060A  1903               	skipnz
  2172  060B  0ABF               	incf	(___altoft@c+3)^(0+128),f
  2173  060C  01C1               	clrf	___altoft@sign^(0+128)
  2174  060D  0AC1               	incf	___altoft@sign^(0+128),f
  2175  060E                     l1957:	
  2176  060E  30FF               	movlw	255
  2177  060F  053F               	andwf	(___altoft@c+3)^(0+128),w
  2178  0610  1903               	btfsc	3,2
  2179  0611  2E19               	goto	l1959
  2180  0612  1003               	clrc
  2181  0613  0CBF               	rrf	(___altoft@c+3)^(0+128),f
  2182  0614  0CBE               	rrf	(___altoft@c+2)^(0+128),f
  2183  0615  0CBD               	rrf	(___altoft@c+1)^(0+128),f
  2184  0616  0CBC               	rrf	___altoft@c^(0+128),f
  2185  0617  0AC0               	incf	___altoft@exp^(0+128),f
  2186  0618  2E0E               	goto	l1957
  2187  0619                     l1959:	
  2188  0619  083C               	movf	___altoft@c^(0+128),w
  2189  061A  00B4               	movwf	___ftpack@arg^(0+128)
  2190  061B  083D               	movf	(___altoft@c+1)^(0+128),w
  2191  061C  00B5               	movwf	(___ftpack@arg+1)^(0+128)
  2192  061D  083E               	movf	(___altoft@c+2)^(0+128),w
  2193  061E  00B6               	movwf	(___ftpack@arg+2)^(0+128)
  2194  061F  0840               	movf	___altoft@exp^(0+128),w
  2195  0620  00B7               	movwf	___ftpack@exp^(0+128)
  2196  0621  0841               	movf	___altoft@sign^(0+128),w
  2197  0622  00B8               	movwf	___ftpack@sign^(0+128)
  2198  0623  2695               	fcall	___ftpack
  2199  0624  0834               	movf	?___ftpack^(0+128),w
  2200  0625  00BC               	movwf	?___altoft^(0+128)
  2201  0626  0835               	movf	(?___ftpack+1)^(0+128),w
  2202  0627  00BD               	movwf	(?___altoft+1)^(0+128)
  2203  0628  0836               	movf	(?___ftpack+2)^(0+128),w
  2204  0629  00BE               	movwf	(?___altoft+2)^(0+128)
  2205  062A  0008               	return
  2206  062B                     __end_of___altoft:	
  2207  062B                     __ptext5:	
  2208 ;; *************** function ___fttol *****************
  2209 ;; Defined at:
  2210 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
  2211 ;; Parameters:    Size  Location     Type
  2212 ;;  f1              3   56[BANK1 ] float 
  2213 ;; Auto vars:     Size  Location     Type
  2214 ;;  lval            4    4[BANK3 ] unsigned long 
  2215 ;;  exp1            1    8[BANK3 ] unsigned char 
  2216 ;;  sign1           1    3[BANK3 ] unsigned char 
  2217 ;; Return value:  Size  Location     Type
  2218 ;;                  4   56[BANK1 ] long 
  2219 ;; Registers used:
  2220 ;;		wreg, status,2, status,0
  2221 ;; Tracked objects:
  2222 ;;		On entry : 300/100
  2223 ;;		On exit  : 300/100
  2224 ;;		Unchanged: 0/0
  2225 ;; Data sizes:      BANK1   BANK3   BANK2
  2226 ;;      Params:         4       0       0
  2227 ;;      Locals:         0       6       0
  2228 ;;      Temps:          0       3       0
  2229 ;;      Totals:         4       9       0
  2230 ;;Total ram usage:       13 bytes
  2231 ;; Hardware stack levels used:    1
  2232 ;; This function calls:
  2233 ;;		Nothing
  2234 ;; This function is called by:
  2235 ;;		_UART_Init
  2236 ;;		_trunc
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           
  2241                           ;psect for function ___fttol
  2242  062B                     ___fttol:	
  2243                           
  2244                           ;incstack = 0
  2245                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  2246  062B  27D7  120A  118A   	fcall	PL4	;call to abstracted procedure
  2247  062E  1003               	clrc
  2248  062F  0D11               	rlf	(??___fttol^(0+384)+1),w
  2249  0630  0D12               	rlf	(??___fttol^(0+384)+2),w
  2250  0631  0098               	movwf	___fttol@exp1^(0+384)
  2251  0632  0818               	movf	___fttol@exp1^(0+384),w
  2252  0633  1D03               	btfss	3,2
  2253  0634  2E3B               	goto	l2043
  2254  0635                     l2041:	
  2255  0635  1303               	bcf	3,6	;RP1=0, select bank1
  2256  0636  01EC               	clrf	?___fttol^(0+128)
  2257  0637  01ED               	clrf	(?___fttol+1)^(0+128)
  2258  0638  01EE               	clrf	(?___fttol+2)^(0+128)
  2259  0639  01EF               	clrf	(?___fttol+3)^(0+128)
  2260  063A  0008               	return
  2261  063B                     l2043:	
  2262  063B  1303               	bcf	3,6	;RP1=0, select bank1
  2263  063C  27D7  120A  118A   	fcall	PL4	;call to abstracted procedure
  2264  063F  3017               	movlw	23
  2265  0640                     u2275:	
  2266  0640  1003               	clrc
  2267  0641  0C92               	rrf	(??___fttol^(0+384)+2),f
  2268  0642  0C91               	rrf	(??___fttol^(0+384)+1),f
  2269  0643  0C90               	rrf	??___fttol^(0+384),f
  2270  0644  3EFF               	addlw	-1
  2271  0645  1D03               	skipz
  2272  0646  2E40               	goto	u2275
  2273  0647  0810               	movf	??___fttol^(0+384),w
  2274  0648  0093               	movwf	___fttol@sign1^(0+384)
  2275  0649  1303               	bcf	3,6	;RP1=0, select bank1
  2276  064A  17ED               	bsf	(___fttol@f1^(0+128)+1),7
  2277  064B  01EE               	clrf	(___fttol@f1+2)^(0+128)
  2278  064C  086C               	movf	___fttol@f1^(0+128),w
  2279  064D  1703               	bsf	3,6	;RP1=1, select bank3
  2280  064E  0094               	movwf	___fttol@lval^(0+384)
  2281  064F  1303               	bcf	3,6	;RP1=0, select bank1
  2282  0650  086D               	movf	(___fttol@f1+1)^(0+128),w
  2283  0651  1703               	bsf	3,6	;RP1=1, select bank3
  2284  0652  0095               	movwf	(___fttol@lval^(0+384)+1)
  2285  0653  1303               	bcf	3,6	;RP1=0, select bank1
  2286  0654  086E               	movf	(___fttol@f1+2)^(0+128),w
  2287  0655  1703               	bsf	3,6	;RP1=1, select bank3
  2288  0656  0096               	movwf	(___fttol@lval^(0+384)+2)
  2289  0657  308E               	movlw	142
  2290  0658  0197               	clrf	(___fttol@lval^(0+384)+3)
  2291  0659  0298               	subwf	___fttol@exp1^(0+384),f
  2292  065A  1F98               	btfss	___fttol@exp1^(0+384),7
  2293  065B  2E69               	goto	l2063
  2294  065C  0818               	movf	___fttol@exp1^(0+384),w
  2295  065D  3A80               	xorlw	128
  2296  065E  3E8F               	addlw	143
  2297  065F  1C03               	btfss	3,0
  2298  0660  2E35               	goto	l2041
  2299  0661                     l2059:	
  2300  0661  1003               	clrc
  2301  0662  0C97               	rrf	(___fttol@lval+3)^(0+384),f
  2302  0663  0C96               	rrf	(___fttol@lval+2)^(0+384),f
  2303  0664  0C95               	rrf	(___fttol@lval+1)^(0+384),f
  2304  0665  0C94               	rrf	___fttol@lval^(0+384),f
  2305  0666  0F98               	incfsz	___fttol@exp1^(0+384),f
  2306  0667  2E61               	goto	l2059
  2307  0668  2E77               	goto	l2071
  2308  0669                     l2063:	
  2309  0669  3018               	movlw	24
  2310  066A  0218               	subwf	___fttol@exp1^(0+384),w
  2311  066B  1803               	btfsc	3,0
  2312  066C  2E35               	goto	l2041
  2313  066D                     l2069:	
  2314  066D  0818               	movf	___fttol@exp1^(0+384),w
  2315  066E  1903               	btfsc	3,2
  2316  066F  2E77               	goto	l2071
  2317  0670  1003               	clrc
  2318  0671  0D94               	rlf	___fttol@lval^(0+384),f
  2319  0672  0D95               	rlf	(___fttol@lval+1)^(0+384),f
  2320  0673  0D96               	rlf	(___fttol@lval+2)^(0+384),f
  2321  0674  0D97               	rlf	(___fttol@lval+3)^(0+384),f
  2322  0675  0398               	decf	___fttol@exp1^(0+384),f
  2323  0676  2E6D               	goto	l2069
  2324  0677                     l2071:	
  2325  0677  0813               	movf	___fttol@sign1^(0+384),w
  2326  0678  1903               	btfsc	3,2
  2327  0679  2E85               	goto	l2075
  2328  067A  0994               	comf	___fttol@lval^(0+384),f
  2329  067B  0995               	comf	(___fttol@lval+1)^(0+384),f
  2330  067C  0996               	comf	(___fttol@lval+2)^(0+384),f
  2331  067D  0997               	comf	(___fttol@lval+3)^(0+384),f
  2332  067E  0A94               	incf	___fttol@lval^(0+384),f
  2333  067F  1903               	skipnz
  2334  0680  0A95               	incf	(___fttol@lval+1)^(0+384),f
  2335  0681  1903               	skipnz
  2336  0682  0A96               	incf	(___fttol@lval+2)^(0+384),f
  2337  0683  1903               	skipnz
  2338  0684  0A97               	incf	(___fttol@lval+3)^(0+384),f
  2339  0685                     l2075:	
  2340  0685  0817               	movf	(___fttol@lval+3)^(0+384),w
  2341  0686  1303               	bcf	3,6	;RP1=0, select bank1
  2342  0687  00EF               	movwf	(?___fttol+3)^(0+128)
  2343  0688  1703               	bsf	3,6	;RP1=1, select bank3
  2344  0689  0816               	movf	(___fttol@lval+2)^(0+384),w
  2345  068A  1303               	bcf	3,6	;RP1=0, select bank1
  2346  068B  00EE               	movwf	(?___fttol+2)^(0+128)
  2347  068C  1703               	bsf	3,6	;RP1=1, select bank3
  2348  068D  0815               	movf	(___fttol@lval+1)^(0+384),w
  2349  068E  1303               	bcf	3,6	;RP1=0, select bank1
  2350  068F  00ED               	movwf	(?___fttol+1)^(0+128)
  2351  0690  1703               	bsf	3,6	;RP1=1, select bank3
  2352  0691  0814               	movf	___fttol@lval^(0+384),w
  2353  0692  1303               	bcf	3,6	;RP1=0, select bank1
  2354  0693  00EC               	movwf	?___fttol^(0+128)
  2355  0694  0008               	return
  2356  0695                     __end_of___fttol:	
  2357  0695                     __ptext11:	
  2358 ;; *************** function ___ftpack *****************
  2359 ;; Defined at:
  2360 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  arg             3    0[BANK1 ] unsigned um
  2363 ;;  exp             1    3[BANK1 ] unsigned char 
  2364 ;;  sign            1    4[BANK1 ] unsigned char 
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  3    0[BANK1 ] float 
  2369 ;; Registers used:
  2370 ;;		wreg, status,2, status,0
  2371 ;; Tracked objects:
  2372 ;;		On entry : 300/100
  2373 ;;		On exit  : 300/100
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:      BANK1   BANK3   BANK2
  2376 ;;      Params:         5       0       0
  2377 ;;      Locals:         0       0       0
  2378 ;;      Temps:          3       0       0
  2379 ;;      Totals:         8       0       0
  2380 ;;Total ram usage:        8 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; This function calls:
  2383 ;;		Nothing
  2384 ;; This function is called by:
  2385 ;;		___altoft
  2386 ;;		___ftadd
  2387 ;;		___ftdiv
  2388 ;;		___ftmul
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           
  2393                           ;psect for function ___ftpack
  2394  0695                     ___ftpack:	
  2395                           
  2396                           ;incstack = 0
  2397                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  2398  0695  0837               	movf	___ftpack@exp^(0+128),w
  2399  0696  1903               	btfsc	3,2
  2400  0697  2E9D               	goto	l739
  2401  0698  0836               	movf	(___ftpack@arg+2)^(0+128),w
  2402  0699  0435               	iorwf	(___ftpack@arg+1)^(0+128),w
  2403  069A  0434               	iorwf	___ftpack@arg^(0+128),w
  2404  069B  1D03               	skipz
  2405  069C  2EA6               	goto	l1869
  2406  069D                     l739:	
  2407  069D  01B4               	clrf	?___ftpack^(0+128)
  2408  069E  01B5               	clrf	(?___ftpack+1)^(0+128)
  2409  069F  01B6               	clrf	(?___ftpack+2)^(0+128)
  2410  06A0  0008               	return
  2411  06A1                     l1867:	
  2412  06A1  0AB7               	incf	___ftpack@exp^(0+128),f
  2413  06A2  1003               	clrc
  2414  06A3  0CB6               	rrf	(___ftpack@arg+2)^(0+128),f
  2415  06A4  0CB5               	rrf	(___ftpack@arg+1)^(0+128),f
  2416  06A5  0CB4               	rrf	___ftpack@arg^(0+128),f
  2417  06A6                     l1869:	
  2418  06A6  30FE               	movlw	254
  2419  06A7  0536               	andwf	(___ftpack@arg+2)^(0+128),w
  2420  06A8  1903               	btfsc	3,2
  2421  06A9  2EB5               	goto	l1873
  2422  06AA  2EA1               	goto	l1867
  2423  06AB                     l1871:	
  2424  06AB  0AB7               	incf	___ftpack@exp^(0+128),f
  2425  06AC  0AB4               	incf	___ftpack@arg^(0+128),f
  2426  06AD  1903               	skipnz
  2427  06AE  0AB5               	incf	(___ftpack@arg+1)^(0+128),f
  2428  06AF  1903               	skipnz
  2429  06B0  0AB6               	incf	(___ftpack@arg+2)^(0+128),f
  2430  06B1  1003               	clrc
  2431  06B2  0CB6               	rrf	(___ftpack@arg+2)^(0+128),f
  2432  06B3  0CB5               	rrf	(___ftpack@arg+1)^(0+128),f
  2433  06B4  0CB4               	rrf	___ftpack@arg^(0+128),f
  2434  06B5                     l1873:	
  2435  06B5  30FF               	movlw	255
  2436  06B6  0536               	andwf	(___ftpack@arg+2)^(0+128),w
  2437  06B7  1903               	btfsc	3,2
  2438  06B8  2EC3               	goto	l1877
  2439  06B9  2EAB               	goto	l1871
  2440  06BA                     l1879:	
  2441  06BA  3002               	movlw	2
  2442  06BB  0237               	subwf	___ftpack@exp^(0+128),w
  2443  06BC  1C03               	btfss	3,0
  2444  06BD  2EC5               	goto	l751
  2445  06BE  03B7               	decf	___ftpack@exp^(0+128),f
  2446  06BF  1003               	clrc
  2447  06C0  0DB4               	rlf	___ftpack@arg^(0+128),f
  2448  06C1  0DB5               	rlf	(___ftpack@arg+1)^(0+128),f
  2449  06C2  0DB6               	rlf	(___ftpack@arg+2)^(0+128),f
  2450  06C3                     l1877:	
  2451  06C3  1FB5               	btfss	(___ftpack@arg+1)^(0+128),7
  2452  06C4  2EBA               	goto	l1879
  2453  06C5                     l751:	
  2454  06C5  1C37               	btfss	___ftpack@exp^(0+128),0
  2455  06C6  13B5               	bcf	(___ftpack@arg^(0+128)+1),7
  2456  06C7  1003               	clrc
  2457  06C8  0CB7               	rrf	___ftpack@exp^(0+128),f
  2458  06C9  0837               	movf	___ftpack@exp^(0+128),w
  2459  06CA  00BB               	movwf	(??___ftpack^(0+128)+2)
  2460  06CB  01BA               	clrf	(??___ftpack^(0+128)+1)
  2461  06CC  01B9               	clrf	??___ftpack^(0+128)
  2462  06CD  0839               	movf	??___ftpack^(0+128),w
  2463  06CE  04B4               	iorwf	___ftpack@arg^(0+128),f
  2464  06CF  083A               	movf	(??___ftpack+1)^(0+128),w
  2465  06D0  04B5               	iorwf	(___ftpack@arg+1)^(0+128),f
  2466  06D1  083B               	movf	(??___ftpack+2)^(0+128),w
  2467  06D2  04B6               	iorwf	(___ftpack@arg+2)^(0+128),f
  2468  06D3  0838               	movf	___ftpack@sign^(0+128),w
  2469  06D4  1D03               	btfss	3,2
  2470  06D5  17B6               	bsf	(___ftpack@arg^(0+128)+2),7
  2471  06D6  0008               	return
  2472  06D7                     __end_of___ftpack:	
  2473  06D7                     __ptext10:	
  2474 ;; *************** function ___ftdiv *****************
  2475 ;; Defined at:
  2476 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;  f2              3   29[BANK1 ] float 
  2479 ;;  f1              3   32[BANK1 ] float 
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  f3              3   39[BANK1 ] float 
  2482 ;;  sign            1   43[BANK1 ] unsigned char 
  2483 ;;  exp             1   42[BANK1 ] unsigned char 
  2484 ;;  cntr            1   38[BANK1 ] unsigned char 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  3   29[BANK1 ] float 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2, status,0, pclath, cstack
  2489 ;; Tracked objects:
  2490 ;;		On entry : 300/100
  2491 ;;		On exit  : 300/100
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:      BANK1   BANK3   BANK2
  2494 ;;      Params:         6       0       0
  2495 ;;      Locals:         6       0       0
  2496 ;;      Temps:          3       0       0
  2497 ;;      Totals:        15       0       0
  2498 ;;Total ram usage:       15 bytes
  2499 ;; Hardware stack levels used:    1
  2500 ;; Hardware stack levels required when called:    1
  2501 ;; This function calls:
  2502 ;;		___ftpack
  2503 ;; This function is called by:
  2504 ;;		_UART_Init
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           
  2509                           ;psect for function ___ftdiv
  2510  06D7                     ___ftdiv:	
  2511                           
  2512                           ;incstack = 0
  2513                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  2514  06D7  0854               	movf	___ftdiv@f1^(0+128),w
  2515  06D8  00D7               	movwf	??___ftdiv^(0+128)
  2516  06D9  0855               	movf	(___ftdiv@f1+1)^(0+128),w
  2517  06DA  00D8               	movwf	(??___ftdiv^(0+128)+1)
  2518  06DB  0856               	movf	(___ftdiv@f1+2)^(0+128),w
  2519  06DC  00D9               	movwf	(??___ftdiv^(0+128)+2)
  2520  06DD  1003               	clrc
  2521  06DE  0D58               	rlf	(??___ftdiv^(0+128)+1),w
  2522  06DF  0D59               	rlf	(??___ftdiv^(0+128)+2),w
  2523  06E0  00DE               	movwf	___ftdiv@exp^(0+128)
  2524  06E1  085E               	movf	___ftdiv@exp^(0+128),w
  2525  06E2  1D03               	btfss	3,2
  2526  06E3  2EE8               	goto	l2301
  2527  06E4  01D1               	clrf	?___ftdiv^(0+128)
  2528  06E5  01D2               	clrf	(?___ftdiv+1)^(0+128)
  2529  06E6  01D3               	clrf	(?___ftdiv+2)^(0+128)
  2530  06E7  0008               	return
  2531  06E8                     l2301:	
  2532  06E8  0851               	movf	___ftdiv@f2^(0+128),w
  2533  06E9  00D7               	movwf	??___ftdiv^(0+128)
  2534  06EA  0852               	movf	(___ftdiv@f2+1)^(0+128),w
  2535  06EB  00D8               	movwf	(??___ftdiv^(0+128)+1)
  2536  06EC  0853               	movf	(___ftdiv@f2+2)^(0+128),w
  2537  06ED  00D9               	movwf	(??___ftdiv^(0+128)+2)
  2538  06EE  1003               	clrc
  2539  06EF  0D58               	rlf	(??___ftdiv^(0+128)+1),w
  2540  06F0  0D59               	rlf	(??___ftdiv^(0+128)+2),w
  2541  06F1  00DF               	movwf	___ftdiv@sign^(0+128)
  2542  06F2  085F               	movf	___ftdiv@sign^(0+128),w
  2543  06F3  1D03               	btfss	3,2
  2544  06F4  2EF9               	goto	l793
  2545  06F5  01D1               	clrf	?___ftdiv^(0+128)
  2546  06F6  01D2               	clrf	(?___ftdiv+1)^(0+128)
  2547  06F7  01D3               	clrf	(?___ftdiv+2)^(0+128)
  2548  06F8  0008               	return
  2549  06F9                     l793:	
  2550  06F9  3089               	movlw	137
  2551  06FA  01DB               	clrf	___ftdiv@f3^(0+128)
  2552  06FB  01DC               	clrf	(___ftdiv@f3+1)^(0+128)
  2553  06FC  01DD               	clrf	(___ftdiv@f3+2)^(0+128)
  2554  06FD  075F               	addwf	___ftdiv@sign^(0+128),w
  2555  06FE  00D7               	movwf	??___ftdiv^(0+128)
  2556  06FF  02DE               	subwf	___ftdiv@exp^(0+128),f
  2557  0700  0856               	movf	(___ftdiv@f1^(0+128)+2),w
  2558  0701  00DF               	movwf	___ftdiv@sign^(0+128)
  2559  0702  0853               	movf	(___ftdiv@f2^(0+128)+2),w
  2560  0703  06DF               	xorwf	___ftdiv@sign^(0+128),f
  2561  0704  3080               	movlw	128
  2562  0705  05DF               	andwf	___ftdiv@sign^(0+128),f
  2563  0706  3018               	movlw	24
  2564  0707  17D5               	bsf	(___ftdiv@f1^(0+128)+1),7
  2565  0708  01D6               	clrf	(___ftdiv@f1+2)^(0+128)
  2566  0709  17D2               	bsf	(___ftdiv@f2^(0+128)+1),7
  2567  070A  01D3               	clrf	(___ftdiv@f2+2)^(0+128)
  2568  070B  00DA               	movwf	___ftdiv@cntr^(0+128)
  2569  070C                     l2323:	
  2570  070C  1003               	clrc
  2571  070D  0DDB               	rlf	___ftdiv@f3^(0+128),f
  2572  070E  0DDC               	rlf	(___ftdiv@f3+1)^(0+128),f
  2573  070F  0DDD               	rlf	(___ftdiv@f3+2)^(0+128),f
  2574  0710  0853               	movf	(___ftdiv@f2+2)^(0+128),w
  2575  0711  0256               	subwf	(___ftdiv@f1+2)^(0+128),w
  2576  0712  1D03               	skipz
  2577  0713  2F1A               	goto	u2615
  2578  0714  0852               	movf	(___ftdiv@f2+1)^(0+128),w
  2579  0715  0255               	subwf	(___ftdiv@f1+1)^(0+128),w
  2580  0716  1D03               	skipz
  2581  0717  2F1A               	goto	u2615
  2582  0718  0851               	movf	___ftdiv@f2^(0+128),w
  2583  0719  0254               	subwf	___ftdiv@f1^(0+128),w
  2584  071A                     u2615:	
  2585  071A  1C03               	skipc
  2586  071B  2F28               	goto	L2
  2587  071C  0851               	movf	___ftdiv@f2^(0+128),w
  2588  071D  02D4               	subwf	___ftdiv@f1^(0+128),f
  2589  071E  0852               	movf	(___ftdiv@f2+1)^(0+128),w
  2590  071F  1C03               	skipc
  2591  0720  0F52               	incfsz	(___ftdiv@f2+1)^(0+128),w
  2592  0721  02D5               	subwf	(___ftdiv@f1+1)^(0+128),f
  2593  0722  0853               	movf	(___ftdiv@f2+2)^(0+128),w
  2594  0723  1C03               	skipc
  2595  0724  0A53               	incf	(___ftdiv@f2+2)^(0+128),w
  2596  0725  02D6               	subwf	(___ftdiv@f1+2)^(0+128),f
  2597  0726  145B               	bsf	___ftdiv@f3^(0+128),0
  2598  0727  1003               	clrc
  2599  0728                     L2:	
  2600  0728  0DD4               	rlf	___ftdiv@f1^(0+128),f
  2601  0729  0DD5               	rlf	(___ftdiv@f1+1)^(0+128),f
  2602  072A  0DD6               	rlf	(___ftdiv@f1+2)^(0+128),f
  2603  072B  0BDA               	decfsz	___ftdiv@cntr^(0+128),f
  2604  072C  2F0C               	goto	l2323
  2605  072D  085B               	movf	___ftdiv@f3^(0+128),w
  2606  072E  00B4               	movwf	___ftpack@arg^(0+128)
  2607  072F  085C               	movf	(___ftdiv@f3+1)^(0+128),w
  2608  0730  00B5               	movwf	(___ftpack@arg+1)^(0+128)
  2609  0731  085D               	movf	(___ftdiv@f3+2)^(0+128),w
  2610  0732  00B6               	movwf	(___ftpack@arg+2)^(0+128)
  2611  0733  085E               	movf	___ftdiv@exp^(0+128),w
  2612  0734  00B7               	movwf	___ftpack@exp^(0+128)
  2613  0735  085F               	movf	___ftdiv@sign^(0+128),w
  2614  0736  00B8               	movwf	___ftpack@sign^(0+128)
  2615  0737  2695               	fcall	___ftpack
  2616  0738  0834               	movf	?___ftpack^(0+128),w
  2617  0739  00D1               	movwf	?___ftdiv^(0+128)
  2618  073A  0835               	movf	(?___ftpack+1)^(0+128),w
  2619  073B  00D2               	movwf	(?___ftdiv+1)^(0+128)
  2620  073C  0836               	movf	(?___ftpack+2)^(0+128),w
  2621  073D  00D3               	movwf	(?___ftdiv+2)^(0+128)
  2622  073E  0008               	return
  2623  073F                     __end_of___ftdiv:	
  2624  073F                     __ptext9:	
  2625 ;; *************** function ___ftmul *****************
  2626 ;; Defined at:
  2627 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;  f1              3   14[BANK1 ] float 
  2630 ;;  f2              3   17[BANK1 ] float 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  f3_as_produc    3   24[BANK1 ] unsigned um
  2633 ;;  sign            1   28[BANK1 ] unsigned char 
  2634 ;;  cntr            1   27[BANK1 ] unsigned char 
  2635 ;;  exp             1   23[BANK1 ] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  3   14[BANK1 ] float 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, status,0, pclath, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 300/100
  2642 ;;		On exit  : 300/100
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:      BANK1   BANK3   BANK2
  2645 ;;      Params:         6       0       0
  2646 ;;      Locals:         6       0       0
  2647 ;;      Temps:          3       0       0
  2648 ;;      Totals:        15       0       0
  2649 ;;Total ram usage:       15 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:    1
  2652 ;; This function calls:
  2653 ;;		___ftpack
  2654 ;; This function is called by:
  2655 ;;		_UART_Init
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function ___ftmul
  2661  073F                     ___ftmul:	
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  2665  073F  0842               	movf	___ftmul@f1^(0+128),w
  2666  0740  00C8               	movwf	??___ftmul^(0+128)
  2667  0741  0843               	movf	(___ftmul@f1+1)^(0+128),w
  2668  0742  00C9               	movwf	(??___ftmul^(0+128)+1)
  2669  0743  0844               	movf	(___ftmul@f1+2)^(0+128),w
  2670  0744  00CA               	movwf	(??___ftmul^(0+128)+2)
  2671  0745  1003               	clrc
  2672  0746  0D49               	rlf	(??___ftmul^(0+128)+1),w
  2673  0747  0D4A               	rlf	(??___ftmul^(0+128)+2),w
  2674  0748  00CB               	movwf	___ftmul@exp^(0+128)
  2675  0749  084B               	movf	___ftmul@exp^(0+128),w
  2676  074A  1D03               	btfss	3,2
  2677  074B  2F50               	goto	l2341
  2678  074C  01C2               	clrf	?___ftmul^(0+128)
  2679  074D  01C3               	clrf	(?___ftmul+1)^(0+128)
  2680  074E  01C4               	clrf	(?___ftmul+2)^(0+128)
  2681  074F  0008               	return
  2682  0750                     l2341:	
  2683  0750  0845               	movf	___ftmul@f2^(0+128),w
  2684  0751  00C8               	movwf	??___ftmul^(0+128)
  2685  0752  0846               	movf	(___ftmul@f2+1)^(0+128),w
  2686  0753  00C9               	movwf	(??___ftmul^(0+128)+1)
  2687  0754  0847               	movf	(___ftmul@f2+2)^(0+128),w
  2688  0755  00CA               	movwf	(??___ftmul^(0+128)+2)
  2689  0756  1003               	clrc
  2690  0757  0D49               	rlf	(??___ftmul^(0+128)+1),w
  2691  0758  0D4A               	rlf	(??___ftmul^(0+128)+2),w
  2692  0759  00D0               	movwf	___ftmul@sign^(0+128)
  2693  075A  0850               	movf	___ftmul@sign^(0+128),w
  2694  075B  1D03               	btfss	3,2
  2695  075C  2F61               	goto	l2345
  2696  075D  01C2               	clrf	?___ftmul^(0+128)
  2697  075E  01C3               	clrf	(?___ftmul+1)^(0+128)
  2698  075F  01C4               	clrf	(?___ftmul+2)^(0+128)
  2699  0760  0008               	return
  2700  0761                     l2345:	
  2701  0761  0850               	movf	___ftmul@sign^(0+128),w
  2702  0762  3E7B               	addlw	123
  2703  0763  07CB               	addwf	___ftmul@exp^(0+128),f
  2704  0764  0844               	movf	(___ftmul@f1^(0+128)+2),w
  2705  0765  00D0               	movwf	___ftmul@sign^(0+128)
  2706  0766  0847               	movf	(___ftmul@f2^(0+128)+2),w
  2707  0767  06D0               	xorwf	___ftmul@sign^(0+128),f
  2708  0768  3080               	movlw	128
  2709  0769  05D0               	andwf	___ftmul@sign^(0+128),f
  2710  076A  3007               	movlw	7
  2711  076B  17C3               	bsf	(___ftmul@f1^(0+128)+1),7
  2712  076C  17C6               	bsf	(___ftmul@f2^(0+128)+1),7
  2713  076D  01C7               	clrf	(___ftmul@f2+2)^(0+128)
  2714  076E  01CC               	clrf	___ftmul@f3_as_product^(0+128)
  2715  076F  01CD               	clrf	(___ftmul@f3_as_product+1)^(0+128)
  2716  0770  01CE               	clrf	(___ftmul@f3_as_product+2)^(0+128)
  2717  0771  00CF               	movwf	___ftmul@cntr^(0+128)
  2718  0772                     l2363:	
  2719  0772  1C42               	btfss	___ftmul@f1^(0+128),0
  2720  0773  2F7B               	goto	l2367
  2721  0774  27E3  120A  118A   	fcall	PL6	;call to abstracted procedure
  2722  0777  1803               	skipnc
  2723  0778  0A47               	incf	(___ftmul@f2+2)^(0+128),w
  2724  0779  1D03               	btfss	3,2
  2725  077A  07CE               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  2726  077B                     l2367:	
  2727  077B  1003               	clrc
  2728  077C  0CC4               	rrf	(___ftmul@f1+2)^(0+128),f
  2729  077D  0CC3               	rrf	(___ftmul@f1+1)^(0+128),f
  2730  077E  0CC2               	rrf	___ftmul@f1^(0+128),f
  2731  077F  1003               	clrc
  2732  0780  0DC5               	rlf	___ftmul@f2^(0+128),f
  2733  0781  0DC6               	rlf	(___ftmul@f2+1)^(0+128),f
  2734  0782  0DC7               	rlf	(___ftmul@f2+2)^(0+128),f
  2735  0783  0BCF               	decfsz	___ftmul@cntr^(0+128),f
  2736  0784  2F72               	goto	l2363
  2737  0785  3009               	movlw	9
  2738  0786  00CF               	movwf	___ftmul@cntr^(0+128)
  2739  0787                     l2375:	
  2740  0787  1C42               	btfss	___ftmul@f1^(0+128),0
  2741  0788  2F90               	goto	l2379
  2742  0789  27E3  120A  118A   	fcall	PL6	;call to abstracted procedure
  2743  078C  1803               	skipnc
  2744  078D  0A47               	incf	(___ftmul@f2+2)^(0+128),w
  2745  078E  1D03               	btfss	3,2
  2746  078F  07CE               	addwf	(___ftmul@f3_as_product+2)^(0+128),f
  2747  0790                     l2379:	
  2748  0790  1003               	clrc
  2749  0791  0CC4               	rrf	(___ftmul@f1+2)^(0+128),f
  2750  0792  0CC3               	rrf	(___ftmul@f1+1)^(0+128),f
  2751  0793  0CC2               	rrf	___ftmul@f1^(0+128),f
  2752  0794  1003               	clrc
  2753  0795  0CCE               	rrf	(___ftmul@f3_as_product+2)^(0+128),f
  2754  0796  0CCD               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  2755  0797  0CCC               	rrf	___ftmul@f3_as_product^(0+128),f
  2756  0798  0BCF               	decfsz	___ftmul@cntr^(0+128),f
  2757  0799  2F87               	goto	l2375
  2758  079A  084C               	movf	___ftmul@f3_as_product^(0+128),w
  2759  079B  00B4               	movwf	___ftpack@arg^(0+128)
  2760  079C  084D               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  2761  079D  00B5               	movwf	(___ftpack@arg+1)^(0+128)
  2762  079E  084E               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  2763  079F  00B6               	movwf	(___ftpack@arg+2)^(0+128)
  2764  07A0  084B               	movf	___ftmul@exp^(0+128),w
  2765  07A1  00B7               	movwf	___ftpack@exp^(0+128)
  2766  07A2  0850               	movf	___ftmul@sign^(0+128),w
  2767  07A3  00B8               	movwf	___ftpack@sign^(0+128)
  2768  07A4  2695               	fcall	___ftpack
  2769  07A5  0834               	movf	?___ftpack^(0+128),w
  2770  07A6  00C2               	movwf	?___ftmul^(0+128)
  2771  07A7  0835               	movf	(?___ftpack+1)^(0+128),w
  2772  07A8  00C3               	movwf	(?___ftmul+1)^(0+128)
  2773  07A9  0836               	movf	(?___ftpack+2)^(0+128),w
  2774  07AA  00C4               	movwf	(?___ftmul+2)^(0+128)
  2775  07AB  0008               	return
  2776  07AC                     __end_of___ftmul:	
  2777  07AC                     __ptext7:	
  2778 ;; *************** function ___ftsub *****************
  2779 ;; Defined at:
  2780 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;  f2              3   17[BANK3 ] float 
  2783 ;;  f1              3   20[BANK3 ] float 
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  3   17[BANK3 ] float 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, pclath, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 300/300
  2792 ;;		On exit  : 300/300
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:      BANK1   BANK3   BANK2
  2795 ;;      Params:         0       6       0
  2796 ;;      Locals:         0       0       0
  2797 ;;      Temps:          0       0       0
  2798 ;;      Totals:         0       6       0
  2799 ;;Total ram usage:        6 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    2
  2802 ;; This function calls:
  2803 ;;		___ftadd
  2804 ;; This function is called by:
  2805 ;;		_round
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           
  2810                           ;psect for function ___ftsub
  2811  07AC                     ___ftsub:	
  2812                           
  2813                           ;incstack = 0
  2814                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  2815  07AC  0823               	movf	(___ftsub@f2+2)^(0+384),w
  2816  07AD  0422               	iorwf	(___ftsub@f2+1)^(0+384),w
  2817  07AE  0421               	iorwf	___ftsub@f2^(0+384),w
  2818  07AF  1903               	skipnz
  2819  07B0  2FB3               	goto	l2209
  2820  07B1  3080               	movlw	128
  2821  07B2  06A3               	xorwf	(___ftsub@f2+2)^(0+384),f
  2822  07B3                     l2209:	
  2823  07B3  0824               	movf	___ftsub@f1^(0+384),w
  2824  07B4  1303               	bcf	3,6	;RP1=0, select bank1
  2825  07B5  00E0               	movwf	___ftadd@f1^(0+128)
  2826  07B6  1703               	bsf	3,6	;RP1=1, select bank3
  2827  07B7  0825               	movf	(___ftsub@f1+1)^(0+384),w
  2828  07B8  1303               	bcf	3,6	;RP1=0, select bank1
  2829  07B9  00E1               	movwf	(___ftadd@f1+1)^(0+128)
  2830  07BA  1703               	bsf	3,6	;RP1=1, select bank3
  2831  07BB  0826               	movf	(___ftsub@f1+2)^(0+384),w
  2832  07BC  1303               	bcf	3,6	;RP1=0, select bank1
  2833  07BD  00E2               	movwf	(___ftadd@f1+2)^(0+128)
  2834  07BE  1703               	bsf	3,6	;RP1=1, select bank3
  2835  07BF  0821               	movf	___ftsub@f2^(0+384),w
  2836  07C0  1303               	bcf	3,6	;RP1=0, select bank1
  2837  07C1  00E3               	movwf	___ftadd@f2^(0+128)
  2838  07C2  1703               	bsf	3,6	;RP1=1, select bank3
  2839  07C3  0822               	movf	(___ftsub@f2+1)^(0+384),w
  2840  07C4  1303               	bcf	3,6	;RP1=0, select bank1
  2841  07C5  00E4               	movwf	(___ftadd@f2+1)^(0+128)
  2842  07C6  1703               	bsf	3,6	;RP1=1, select bank3
  2843  07C7  0823               	movf	(___ftsub@f2+2)^(0+384),w
  2844  07C8  1303               	bcf	3,6	;RP1=0, select bank1
  2845  07C9  00E5               	movwf	(___ftadd@f2+2)^(0+128)
  2846  07CA  253C               	fcall	___ftadd
  2847  07CB  0860               	movf	?___ftadd^(0+128),w
  2848  07CC  1703               	bsf	3,6	;RP1=1, select bank3
  2849  07CD  00A1               	movwf	?___ftsub^(0+384)
  2850  07CE  1303               	bcf	3,6	;RP1=0, select bank1
  2851  07CF  0861               	movf	(?___ftadd+1)^(0+128),w
  2852  07D0  1703               	bsf	3,6	;RP1=1, select bank3
  2853  07D1  00A2               	movwf	(?___ftsub+1)^(0+384)
  2854  07D2  1303               	bcf	3,6	;RP1=0, select bank1
  2855  07D3  0862               	movf	(?___ftadd+2)^(0+128),w
  2856  07D4  1703               	bsf	3,6	;RP1=1, select bank3
  2857  07D5  00A3               	movwf	(?___ftsub+2)^(0+384)
  2858  07D6  0008               	return
  2859  07D7                     __end_of___ftsub:	
  2860  07D7                     PL4:	
  2861  07D7  086C               	movf	___fttol@f1^(0+128),w
  2862  07D8  1703               	bsf	3,6	;RP1=1, select bank3
  2863  07D9  0090               	movwf	??___fttol^(0+384)
  2864  07DA  1303               	bcf	3,6	;RP1=0, select bank1
  2865  07DB  086D               	movf	(___fttol@f1+1)^(0+128),w
  2866  07DC  1703               	bsf	3,6	;RP1=1, select bank3
  2867  07DD  0091               	movwf	(??___fttol^(0+384)+1)
  2868  07DE  1303               	bcf	3,6	;RP1=0, select bank1
  2869  07DF  086E               	movf	(___fttol@f1+2)^(0+128),w
  2870  07E0  1703               	bsf	3,6	;RP1=1, select bank3
  2871  07E1  0092               	movwf	(??___fttol^(0+384)+2)
  2872  07E2  0008               	return
  2873  07E3                     __end_ofPL4:	
  2874  07E3                     PL6:	
  2875  07E3  0845               	movf	___ftmul@f2^(0+128),w
  2876  07E4  07CC               	addwf	___ftmul@f3_as_product^(0+128),f
  2877  07E5  0846               	movf	(___ftmul@f2+1)^(0+128),w
  2878  07E6  1103               	clrz
  2879  07E7  1803               	skipnc
  2880  07E8  0A46               	incf	(___ftmul@f2+1)^(0+128),w
  2881  07E9  1D03               	btfss	3,2
  2882  07EA  07CD               	addwf	(___ftmul@f3_as_product+1)^(0+128),f
  2883  07EB  0847               	movf	(___ftmul@f2+2)^(0+128),w
  2884  07EC  1103               	clrz
  2885  07ED  0008               	return
  2886  07EE                     __end_ofPL6:	
  2887  07EE                     PL20:	
  2888  07EE  0827               	movf	round@x^(0+384),w
  2889  07EF  0099               	movwf	trunc@x^(0+384)
  2890  07F0  0828               	movf	(round@x+1)^(0+384),w
  2891  07F1  009A               	movwf	(trunc@x+1)^(0+384)
  2892  07F2  0829               	movf	(round@x+2)^(0+384),w
  2893  07F3  009B               	movwf	(trunc@x+2)^(0+384)
  2894  07F4  0008               	return
  2895  07F5                     __end_ofPL20:	
  2896                           
  2897                           	psect	text4
  2898  0C26                     __ptext4:	
  2899 ;; *************** function _frexp *****************
  2900 ;; Defined at:
  2901 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\frexp.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  value           3    0[BANK1 ] int 
  2904 ;;  eptr            1    3[BANK1 ] PTR int 
  2905 ;;		 -> trunc@expon(2), 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  3    0[BANK1 ] PTR int 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2912 ;; Tracked objects:
  2913 ;;		On entry : 300/100
  2914 ;;		On exit  : B00/900
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:      BANK1   BANK3   BANK2
  2917 ;;      Params:         4       0       0
  2918 ;;      Locals:         0       0       0
  2919 ;;      Temps:          2       0       0
  2920 ;;      Totals:         6       0       0
  2921 ;;Total ram usage:        6 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; This function calls:
  2924 ;;		Nothing
  2925 ;; This function is called by:
  2926 ;;		_trunc
  2927 ;; This function uses a non-reentrant model
  2928 ;;
  2929                           
  2930                           
  2931                           ;psect for function _frexp
  2932  0C26                     _frexp:	
  2933                           
  2934                           ;incstack = 0
  2935                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  2936  0C26  0836               	movf	(frexp@value+2)^(0+128),w
  2937  0C27  0435               	iorwf	(frexp@value+1)^(0+128),w
  2938  0C28  0434               	iorwf	frexp@value^(0+128),w
  2939  0C29  1D03               	skipz
  2940  0C2A  2C32               	goto	l2085
  2941  0C2B  0837               	movf	frexp@eptr^(0+128),w
  2942  0C2C  0084               	movwf	4
  2943  0C2D  1783               	bsf	3,7	;select IRP bank2
  2944  0C2E  0180               	clrf	0
  2945  0C2F  0A84               	incf	4,f
  2946  0C30  0180               	clrf	0
  2947  0C31  0008               	return
  2948  0C32                     l2085:	
  2949  0C32  0836               	movf	(frexp@value^(0+128)+2),w
  2950  0C33  397F               	andlw	127
  2951  0C34  00B8               	movwf	??_frexp^(0+128)
  2952  0C35  01B9               	clrf	(??_frexp^(0+128)+1)
  2953  0C36  1003               	clrc
  2954  0C37  0DB8               	rlf	??_frexp^(0+128),f
  2955  0C38  0DB9               	rlf	(??_frexp^(0+128)+1),f
  2956  0C39  0837               	movf	frexp@eptr^(0+128),w
  2957  0C3A  0084               	movwf	4
  2958  0C3B  0838               	movf	??_frexp^(0+128),w
  2959  0C3C  1783               	bsf	3,7	;select IRP bank2
  2960  0C3D  0080               	movwf	0
  2961  0C3E  0A84               	incf	4,f
  2962  0C3F  0839               	movf	(??_frexp+1)^(0+128),w
  2963  0C40  0080               	movwf	0
  2964  0C41  0D35               	rlf	(frexp@value^(0+128)+1),w
  2965  0C42  0D35               	rlf	(frexp@value^(0+128)+1),w
  2966  0C43  3901               	andlw	1
  2967  0C44  00B8               	movwf	??_frexp^(0+128)
  2968  0C45  01B9               	clrf	(??_frexp^(0+128)+1)
  2969  0C46  0837               	movf	frexp@eptr^(0+128),w
  2970  0C47  0084               	movwf	4
  2971  0C48  0838               	movf	??_frexp^(0+128),w
  2972  0C49  0480               	iorwf	0,f
  2973  0C4A  0A84               	incf	4,f
  2974  0C4B  0839               	movf	(??_frexp+1)^(0+128),w
  2975  0C4C  0480               	iorwf	0,f
  2976  0C4D  0837               	movf	frexp@eptr^(0+128),w
  2977  0C4E  0084               	movwf	4
  2978  0C4F  3082               	movlw	130
  2979  0C50  0780               	addwf	0,f
  2980  0C51  0F84               	incfsz	4,f
  2981  0C52  0800               	movf	0,w
  2982  0C53  1803               	skipnc
  2983  0C54  0A00               	incf	0,w
  2984  0C55  00FF               	movwf	127
  2985  0C56  3EFF               	addlw	255
  2986  0C57  0080               	movwf	0
  2987  0C58  0384               	decf	4,f
  2988  0C59  0836               	movf	(frexp@value^(0+128)+2),w
  2989  0C5A  3980               	andlw	-128
  2990  0C5B  383F               	iorlw	63
  2991  0C5C  00B6               	movwf	(frexp@value^(0+128)+2)
  2992  0C5D  13B5               	bcf	(frexp@value^(0+128)+1),7
  2993  0C5E  0008               	return
  2994  0C5F                     __end_of_frexp:	
  2995                           
  2996                           	psect	text14
  2997  0E9A                     __ptext14:	
  2998 ;; *************** function _ReadRTCAsSec *****************
  2999 ;; Defined at:
  3000 ;;		line 27 in file "libs/gsk_RTC_GPS.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  Out             4   25[BANK1 ] unsigned long 
  3005 ;;  TempVar000      1   29[BANK1 ] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  4   12[BANK1 ] unsigned long 
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0, pclath, cstack
  3010 ;; Tracked objects:
  3011 ;;		On entry : B00/100
  3012 ;;		On exit  : 300/100
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:      BANK1   BANK3   BANK2
  3015 ;;      Params:         4       0       0
  3016 ;;      Locals:         7       0       0
  3017 ;;      Temps:          7       0       0
  3018 ;;      Totals:        18       0       0
  3019 ;;Total ram usage:       18 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    3
  3022 ;; This function calls:
  3023 ;;		_I2C_ReadAtAddress
  3024 ;;		___lmul
  3025 ;;		___wmul
  3026 ;; This function is called by:
  3027 ;;		_main
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _ReadRTCAsSec
  3033  0E9A                     _ReadRTCAsSec:	
  3034                           
  3035                           ;gsk_RTC_GPS.c: 30: TempVar000 = I2C_ReadAtAddress(0xde, 0x02);
  3036                           
  3037                           ;incstack = 0
  3038                           ; Regs used in _ReadRTCAsSec: [wreg+status,2+status,0+pclath+cstack]
  3039  0E9A  3002               	movlw	2
  3040  0E9B  00B8               	movwf	I2C_ReadAtAddress@IntAdd^(0+128)
  3041  0E9C  30DE               	movlw	222
  3042  0E9D  2766  120A  158A   	fcall	_I2C_ReadAtAddress
  3043  0EA0  00D1               	movwf	ReadRTCAsSec@TempVar000^(0+128)
  3044                           
  3045                           ;gsk_RTC_GPS.c: 31: Out = ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x03)*10);
  3046  0EA1  390F               	andlw	15
  3047  0EA2  00C4               	movwf	??_ReadRTCAsSec^(0+128)
  3048  0EA3  0E51               	swapf	ReadRTCAsSec@TempVar000^(0+128),w
  3049  0EA4  390F               	andlw	15
  3050  0EA5  3903               	andlw	3
  3051  0EA6  00B4               	movwf	___wmul@multiplier^(0+128)
  3052  0EA7  300A               	movlw	10
  3053  0EA8  01B5               	clrf	(___wmul@multiplier+1)^(0+128)
  3054  0EA9  00B6               	movwf	___wmul@multiplicand^(0+128)
  3055  0EAA  01B7               	clrf	(___wmul@multiplicand+1)^(0+128)
  3056  0EAB  274D  120A  158A   	fcall	___wmul
  3057  0EAE  0844               	movf	??_ReadRTCAsSec^(0+128),w
  3058  0EAF  0734               	addwf	?___wmul^(0+128),w
  3059  0EB0  00CD               	movwf	ReadRTCAsSec@Out^(0+128)
  3060  0EB1  3000               	movlw	0
  3061  0EB2  1803               	skipnc
  3062  0EB3  3001               	movlw	1
  3063  0EB4  0735               	addwf	(?___wmul+1)^(0+128),w
  3064  0EB5  00CE               	movwf	(ReadRTCAsSec@Out+1)^(0+128)
  3065  0EB6  01CF               	clrf	(ReadRTCAsSec@Out^(0+128)+2)
  3066  0EB7  1BCE               	btfsc	(ReadRTCAsSec@Out^(0+128)+1),7
  3067  0EB8  03CF               	decf	(ReadRTCAsSec@Out+2)^(0+128),f
  3068  0EB9  084F               	movf	(ReadRTCAsSec@Out^(0+128)+2),w
  3069  0EBA  00D0               	movwf	(ReadRTCAsSec@Out+3)^(0+128)
  3070                           
  3071                           ;gsk_RTC_GPS.c: 32: Out = Out*3600;
  3072  0EBB  300E               	movlw	14
  3073  0EBC  01B7               	clrf	(___lmul@multiplier+3)^(0+128)
  3074  0EBD  01B6               	clrf	(___lmul@multiplier+2)^(0+128)
  3075  0EBE  00B5               	movwf	(___lmul@multiplier+1)^(0+128)
  3076  0EBF  3010               	movlw	16
  3077  0EC0  00B4               	movwf	___lmul@multiplier^(0+128)
  3078  0EC1  0850               	movf	(ReadRTCAsSec@Out+3)^(0+128),w
  3079  0EC2  00BB               	movwf	(___lmul@multiplicand+3)^(0+128)
  3080  0EC3  084F               	movf	(ReadRTCAsSec@Out+2)^(0+128),w
  3081  0EC4  00BA               	movwf	(___lmul@multiplicand+2)^(0+128)
  3082  0EC5  084E               	movf	(ReadRTCAsSec@Out+1)^(0+128),w
  3083  0EC6  00B9               	movwf	(___lmul@multiplicand+1)^(0+128)
  3084  0EC7  084D               	movf	ReadRTCAsSec@Out^(0+128),w
  3085  0EC8  00B8               	movwf	___lmul@multiplicand^(0+128)
  3086  0EC9  27C4  120A  158A   	fcall	___lmul
  3087  0ECC  0837               	movf	(?___lmul+3)^(0+128),w
  3088  0ECD  00D0               	movwf	(ReadRTCAsSec@Out+3)^(0+128)
  3089  0ECE  0836               	movf	(?___lmul+2)^(0+128),w
  3090  0ECF  00CF               	movwf	(ReadRTCAsSec@Out+2)^(0+128)
  3091  0ED0  0835               	movf	(?___lmul+1)^(0+128),w
  3092  0ED1  00CE               	movwf	(ReadRTCAsSec@Out+1)^(0+128)
  3093  0ED2  0834               	movf	?___lmul^(0+128),w
  3094  0ED3  00CD               	movwf	ReadRTCAsSec@Out^(0+128)
  3095  0ED4  30DE               	movlw	222
  3096                           
  3097                           ;gsk_RTC_GPS.c: 34: TempVar000 = I2C_ReadAtAddress(0xde, 0x01);
  3098  0ED5  01B8               	clrf	I2C_ReadAtAddress@IntAdd^(0+128)
  3099  0ED6  0AB8               	incf	I2C_ReadAtAddress@IntAdd^(0+128),f
  3100  0ED7  2766  120A  158A   	fcall	_I2C_ReadAtAddress
  3101  0EDA  00D1               	movwf	ReadRTCAsSec@TempVar000^(0+128)
  3102                           
  3103                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  3104  0EDB  27F7  120A  158A   	fcall	PL8	;call to abstracted procedure
  3105  0EDE  274D  120A  158A   	fcall	___wmul
  3106  0EE1  0835               	movf	(?___wmul+1)^(0+128),w
  3107  0EE2  00CC               	movwf	(_ReadRTCAsSec$937+1)^(0+128)
  3108  0EE3  0834               	movf	?___wmul^(0+128),w
  3109  0EE4  00CB               	movwf	_ReadRTCAsSec$937^(0+128)
  3110  0EE5  0851               	movf	ReadRTCAsSec@TempVar000^(0+128),w
  3111  0EE6  390F               	andlw	15
  3112  0EE7  07CB               	addwf	_ReadRTCAsSec$937^(0+128),f
  3113  0EE8  1803               	skipnc
  3114  0EE9  0ACC               	incf	(_ReadRTCAsSec$937+1)^(0+128),f
  3115                           
  3116                           ;gsk_RTC_GPS.c: 35: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10)*60;
  3117  0EEA  084C               	movf	(_ReadRTCAsSec$937+1)^(0+128),w
  3118  0EEB  00B5               	movwf	(___wmul@multiplier+1)^(0+128)
  3119  0EEC  084B               	movf	_ReadRTCAsSec$937^(0+128),w
  3120  0EED  00B4               	movwf	___wmul@multiplier^(0+128)
  3121  0EEE  303C               	movlw	60
  3122  0EEF  00B6               	movwf	___wmul@multiplicand^(0+128)
  3123  0EF0  01B7               	clrf	(___wmul@multiplicand+1)^(0+128)
  3124  0EF1  274D  120A  158A   	fcall	___wmul
  3125  0EF4  0834               	movf	?___wmul^(0+128),w
  3126  0EF5  00C4               	movwf	??_ReadRTCAsSec^(0+128)
  3127  0EF6  0835               	movf	(?___wmul+1)^(0+128),w
  3128  0EF7  00C5               	movwf	(??_ReadRTCAsSec^(0+128)+1)
  3129  0EF8  3000               	movlw	0
  3130  0EF9  1BC5               	btfsc	(??_ReadRTCAsSec^(0+128)+1),7
  3131  0EFA  30FF               	movlw	255
  3132  0EFB  00C6               	movwf	(??_ReadRTCAsSec^(0+128)+2)
  3133  0EFC  00C7               	movwf	(??_ReadRTCAsSec^(0+128)+3)
  3134  0EFD  0844               	movf	??_ReadRTCAsSec^(0+128),w
  3135  0EFE  07CD               	addwf	ReadRTCAsSec@Out^(0+128),f
  3136  0EFF  0845               	movf	(??_ReadRTCAsSec+1)^(0+128),w
  3137  0F00  1103               	clrz
  3138  0F01  1803               	skipnc
  3139  0F02  3E01               	addlw	1
  3140  0F03  1D03               	btfss	3,2
  3141  0F04  07CE               	addwf	(ReadRTCAsSec@Out+1)^(0+128),f
  3142  0F05  0846               	movf	(??_ReadRTCAsSec+2)^(0+128),w
  3143  0F06  1103               	clrz
  3144  0F07  1803               	skipnc
  3145  0F08  3E01               	addlw	1
  3146  0F09  1D03               	btfss	3,2
  3147  0F0A  07CF               	addwf	(ReadRTCAsSec@Out+2)^(0+128),f
  3148  0F0B  0847               	movf	(??_ReadRTCAsSec+3)^(0+128),w
  3149  0F0C  1103               	clrz
  3150  0F0D  1803               	skipnc
  3151  0F0E  3E01               	addlw	1
  3152  0F0F  1D03               	btfss	3,2
  3153  0F10  07D0               	addwf	(ReadRTCAsSec@Out+3)^(0+128),f
  3154  0F11  30DE               	movlw	222
  3155                           
  3156                           ;gsk_RTC_GPS.c: 37: TempVar000 = I2C_ReadAtAddress(0xde, 0x00);
  3157  0F12  01B8               	clrf	I2C_ReadAtAddress@IntAdd^(0+128)
  3158  0F13  2766  120A  158A   	fcall	_I2C_ReadAtAddress
  3159  0F16  00D1               	movwf	ReadRTCAsSec@TempVar000^(0+128)
  3160                           
  3161                           ;gsk_RTC_GPS.c: 38: Out = Out + ((TempVar000 & 0x0f) + (TempVar000>>4 & 0x07)*10);
  3162  0F17  390F               	andlw	15
  3163  0F18  00C4               	movwf	??_ReadRTCAsSec^(0+128)
  3164  0F19  27F7  120A  158A   	fcall	PL8	;call to abstracted procedure
  3165  0F1C  274D  120A  158A   	fcall	___wmul
  3166  0F1F  0844               	movf	??_ReadRTCAsSec^(0+128),w
  3167  0F20  0734               	addwf	?___wmul^(0+128),w
  3168  0F21  00C5               	movwf	(??_ReadRTCAsSec+1)^(0+128)
  3169  0F22  3000               	movlw	0
  3170  0F23  1803               	skipnc
  3171  0F24  3001               	movlw	1
  3172  0F25  0735               	addwf	(?___wmul+1)^(0+128),w
  3173  0F26  00C6               	movwf	(??_ReadRTCAsSec+2)^(0+128)
  3174  0F27  0845               	movf	(??_ReadRTCAsSec+1)^(0+128),w
  3175  0F28  00C7               	movwf	(??_ReadRTCAsSec+3)^(0+128)
  3176  0F29  0846               	movf	(??_ReadRTCAsSec+2)^(0+128),w
  3177  0F2A  00C8               	movwf	((??_ReadRTCAsSec+3)^(0+128)+1)
  3178  0F2B  3000               	movlw	0
  3179  0F2C  1BC8               	btfsc	((??_ReadRTCAsSec+3)^(0+128)+1),7
  3180  0F2D  30FF               	movlw	255
  3181  0F2E  00C9               	movwf	((??_ReadRTCAsSec+3)^(0+128)+2)
  3182  0F2F  00CA               	movwf	((??_ReadRTCAsSec+3)^(0+128)+3)
  3183  0F30  0847               	movf	(??_ReadRTCAsSec+3)^(0+128),w
  3184  0F31  07CD               	addwf	ReadRTCAsSec@Out^(0+128),f
  3185  0F32  0848               	movf	(??_ReadRTCAsSec+4)^(0+128),w
  3186  0F33  1103               	clrz
  3187  0F34  1803               	skipnc
  3188  0F35  3E01               	addlw	1
  3189  0F36  1D03               	btfss	3,2
  3190  0F37  07CE               	addwf	(ReadRTCAsSec@Out+1)^(0+128),f
  3191  0F38  0849               	movf	(??_ReadRTCAsSec+5)^(0+128),w
  3192  0F39  1103               	clrz
  3193  0F3A  1803               	skipnc
  3194  0F3B  3E01               	addlw	1
  3195  0F3C  1D03               	btfss	3,2
  3196  0F3D  07CF               	addwf	(ReadRTCAsSec@Out+2)^(0+128),f
  3197  0F3E  084A               	movf	(??_ReadRTCAsSec+6)^(0+128),w
  3198  0F3F  1103               	clrz
  3199  0F40  1803               	skipnc
  3200  0F41  3E01               	addlw	1
  3201  0F42  1D03               	btfss	3,2
  3202  0F43  07D0               	addwf	(ReadRTCAsSec@Out+3)^(0+128),f
  3203                           
  3204                           ;gsk_RTC_GPS.c: 39: return Out;
  3205  0F44  0850               	movf	(ReadRTCAsSec@Out+3)^(0+128),w
  3206  0F45  00C3               	movwf	(?_ReadRTCAsSec+3)^(0+128)
  3207  0F46  084F               	movf	(ReadRTCAsSec@Out+2)^(0+128),w
  3208  0F47  00C2               	movwf	(?_ReadRTCAsSec+2)^(0+128)
  3209  0F48  084E               	movf	(ReadRTCAsSec@Out+1)^(0+128),w
  3210  0F49  00C1               	movwf	(?_ReadRTCAsSec+1)^(0+128)
  3211  0F4A  084D               	movf	ReadRTCAsSec@Out^(0+128),w
  3212  0F4B  00C0               	movwf	?_ReadRTCAsSec^(0+128)
  3213  0F4C  0008               	return
  3214  0F4D                     __end_of_ReadRTCAsSec:	
  3215  0F4D                     __ptext15:	
  3216 ;; *************** function ___wmul *****************
  3217 ;; Defined at:
  3218 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3221 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  product         2    4[BANK1 ] unsigned int 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  2    0[BANK1 ] unsigned int 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0
  3228 ;; Tracked objects:
  3229 ;;		On entry : 300/100
  3230 ;;		On exit  : 300/100
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:      BANK1   BANK3   BANK2
  3233 ;;      Params:         4       0       0
  3234 ;;      Locals:         2       0       0
  3235 ;;      Temps:          0       0       0
  3236 ;;      Totals:         6       0       0
  3237 ;;Total ram usage:        6 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; This function calls:
  3240 ;;		Nothing
  3241 ;; This function is called by:
  3242 ;;		_ReadRTCAsSec
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           
  3247                           ;psect for function ___wmul
  3248  0F4D                     ___wmul:	
  3249                           
  3250                           ;incstack = 0
  3251                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3252  0F4D  01B8               	clrf	___wmul@product^(0+128)
  3253  0F4E  01B9               	clrf	(___wmul@product+1)^(0+128)
  3254  0F4F                     l2283:	
  3255  0F4F  1C34               	btfss	___wmul@multiplier^(0+128),0
  3256  0F50  2F57               	goto	l2287
  3257  0F51  0836               	movf	___wmul@multiplicand^(0+128),w
  3258  0F52  07B8               	addwf	___wmul@product^(0+128),f
  3259  0F53  1803               	skipnc
  3260  0F54  0AB9               	incf	(___wmul@product+1)^(0+128),f
  3261  0F55  0837               	movf	(___wmul@multiplicand+1)^(0+128),w
  3262  0F56  07B9               	addwf	(___wmul@product+1)^(0+128),f
  3263  0F57                     l2287:	
  3264  0F57  1003               	clrc
  3265  0F58  0DB6               	rlf	___wmul@multiplicand^(0+128),f
  3266  0F59  0DB7               	rlf	(___wmul@multiplicand+1)^(0+128),f
  3267  0F5A  1003               	clrc
  3268  0F5B  0CB5               	rrf	(___wmul@multiplier+1)^(0+128),f
  3269  0F5C  0CB4               	rrf	___wmul@multiplier^(0+128),f
  3270  0F5D  0834               	movf	___wmul@multiplier^(0+128),w
  3271  0F5E  0435               	iorwf	(___wmul@multiplier+1)^(0+128),w
  3272  0F5F  1D03               	btfss	3,2
  3273  0F60  2F4F               	goto	l2283
  3274  0F61  0839               	movf	(___wmul@product+1)^(0+128),w
  3275  0F62  00B5               	movwf	(?___wmul+1)^(0+128)
  3276  0F63  0838               	movf	___wmul@product^(0+128),w
  3277  0F64  00B4               	movwf	?___wmul^(0+128)
  3278  0F65  0008               	return
  3279  0F66                     __end_of___wmul:	
  3280  0F66                     __ptext16:	
  3281 ;; *************** function _I2C_ReadAtAddress *****************
  3282 ;; Defined at:
  3283 ;;		line 55 in file "libs/gsk_i2c.c"
  3284 ;; Parameters:    Size  Location     Type
  3285 ;;  DevID           1    wreg     unsigned char 
  3286 ;;  IntAdd          1    4[BANK1 ] unsigned char 
  3287 ;; Auto vars:     Size  Location     Type
  3288 ;;  DevID           1    6[BANK1 ] unsigned char 
  3289 ;;  data            1    5[BANK1 ] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      unsigned char 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0, pclath, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 300/100
  3296 ;;		On exit  : 300/100
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:      BANK1   BANK3   BANK2
  3299 ;;      Params:         1       0       0
  3300 ;;      Locals:         2       0       0
  3301 ;;      Temps:          0       0       0
  3302 ;;      Totals:         3       0       0
  3303 ;;Total ram usage:        3 bytes
  3304 ;; Hardware stack levels used:    1
  3305 ;; Hardware stack levels required when called:    2
  3306 ;; This function calls:
  3307 ;;		_I2C_Master_Read
  3308 ;;		_I2C_Master_Start
  3309 ;;		_I2C_Master_Stop
  3310 ;;		_I2C_Master_Write
  3311 ;; This function is called by:
  3312 ;;		_ReadRTCAsSec
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _I2C_ReadAtAddress
  3318  0F66                     _I2C_ReadAtAddress:	
  3319                           
  3320                           ;incstack = 0
  3321                           ; Regs used in _I2C_ReadAtAddress: [wreg+status,2+status,0+pclath+cstack]
  3322                           ;I2C_ReadAtAddress@DevID stored from wreg
  3323  0F66  00BA               	movwf	I2C_ReadAtAddress@DevID^(0+128)
  3324                           
  3325                           ;gsk_i2c.c: 57: I2C_Master_Start();
  3326  0F67  2796  120A  158A   	fcall	_I2C_Master_Start
  3327                           
  3328                           ;gsk_i2c.c: 58: I2C_Master_Write(DevID);
  3329  0F6A  083A               	movf	I2C_ReadAtAddress@DevID^(0+128),w
  3330  0F6B  00B4               	movwf	I2C_Master_Write@d^(0+128)
  3331  0F6C  01B5               	clrf	(I2C_Master_Write@d+1)^(0+128)
  3332  0F6D  2791  120A  158A   	fcall	_I2C_Master_Write
  3333                           
  3334                           ;gsk_i2c.c: 59: I2C_Master_Write(IntAdd);
  3335  0F70  1683               	bsf	3,5	;RP0=1, select bank1
  3336  0F71  0838               	movf	I2C_ReadAtAddress@IntAdd^(0+128),w
  3337  0F72  00B4               	movwf	I2C_Master_Write@d^(0+128)
  3338  0F73  01B5               	clrf	(I2C_Master_Write@d+1)^(0+128)
  3339  0F74  2791  120A  158A   	fcall	_I2C_Master_Write
  3340                           
  3341                           ;gsk_i2c.c: 60: I2C_Master_Stop();
  3342  0F77  27C1  120A  158A   	fcall	_I2C_Master_Stop
  3343                           
  3344                           ;gsk_i2c.c: 62: I2C_Master_Start();
  3345  0F7A  2796  120A  158A   	fcall	_I2C_Master_Start
  3346                           
  3347                           ;gsk_i2c.c: 63: I2C_Master_Write(DevID+1);
  3348  0F7D  083A               	movf	I2C_ReadAtAddress@DevID^(0+128),w
  3349  0F7E  00B4               	movwf	I2C_Master_Write@d^(0+128)
  3350  0F7F  01B5               	clrf	(I2C_Master_Write@d+1)^(0+128)
  3351  0F80  0AB4               	incf	I2C_Master_Write@d^(0+128),f
  3352  0F81  1903               	skipnz
  3353  0F82  0AB5               	incf	(I2C_Master_Write@d+1)^(0+128),f
  3354  0F83  2791  120A  158A   	fcall	_I2C_Master_Write
  3355                           
  3356                           ;gsk_i2c.c: 64: char data = I2C_Master_Read(0);
  3357  0F86  1683               	bsf	3,5	;RP0=1, select bank1
  3358  0F87  01B4               	clrf	I2C_Master_Read@a^(0+128)
  3359  0F88  01B5               	clrf	(I2C_Master_Read@a+1)^(0+128)
  3360  0F89  2799  120A  158A   	fcall	_I2C_Master_Read
  3361  0F8C  0834               	movf	?_I2C_Master_Read^(0+128),w
  3362  0F8D  00B9               	movwf	I2C_ReadAtAddress@data^(0+128)
  3363                           
  3364                           ;gsk_i2c.c: 65: I2C_Master_Stop();
  3365  0F8E  27C1               	fcall	_I2C_Master_Stop
  3366                           
  3367                           ;gsk_i2c.c: 66: return data;
  3368  0F8F  0839               	movf	I2C_ReadAtAddress@data^(0+128),w
  3369  0F90  0008               	return
  3370  0F91                     __end_of_I2C_ReadAtAddress:	
  3371  0F91                     __ptext17:	
  3372 ;; *************** function _I2C_Master_Write *****************
  3373 ;; Defined at:
  3374 ;;		line 36 in file "libs/gsk_i2c.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  d               2    0[BANK1 ] unsigned int 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, status,2, status,0, pclath, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 300/100
  3385 ;;		On exit  : 300/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:      BANK1   BANK3   BANK2
  3388 ;;      Params:         2       0       0
  3389 ;;      Locals:         0       0       0
  3390 ;;      Temps:          0       0       0
  3391 ;;      Totals:         2       0       0
  3392 ;;Total ram usage:        2 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    1
  3395 ;; This function calls:
  3396 ;;		_I2C_Master_Wait
  3397 ;; This function is called by:
  3398 ;;		_I2C_ReadAtAddress
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           
  3403                           ;psect for function _I2C_Master_Write
  3404  0F91                     _I2C_Master_Write:	
  3405                           
  3406                           ;gsk_i2c.c: 38: I2C_Master_Wait();
  3407                           
  3408                           ;incstack = 0
  3409                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  3410  0F91  27B9               	fcall	_I2C_Master_Wait
  3411                           
  3412                           ;gsk_i2c.c: 39: SSPBUF = d;
  3413  0F92  0834               	movf	I2C_Master_Write@d^(0+128),w
  3414  0F93  1283               	bcf	3,5	;RP0=0, select bank0
  3415  0F94  0093               	movwf	19	;volatile
  3416  0F95  0008               	return
  3417  0F96                     __end_of_I2C_Master_Write:	
  3418  0F96                     __ptext19:	
  3419 ;; *************** function _I2C_Master_Start *****************
  3420 ;; Defined at:
  3421 ;;		line 18 in file "libs/gsk_i2c.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, status,2, status,0, pclath, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 300/100
  3432 ;;		On exit  : 300/100
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:      BANK1   BANK3   BANK2
  3435 ;;      Params:         0       0       0
  3436 ;;      Locals:         0       0       0
  3437 ;;      Temps:          0       0       0
  3438 ;;      Totals:         0       0       0
  3439 ;;Total ram usage:        0 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:    1
  3442 ;; This function calls:
  3443 ;;		_I2C_Master_Wait
  3444 ;; This function is called by:
  3445 ;;		_I2C_ReadAtAddress
  3446 ;; This function uses a non-reentrant model
  3447 ;;
  3448                           
  3449                           
  3450                           ;psect for function _I2C_Master_Start
  3451  0F96                     _I2C_Master_Start:	
  3452                           
  3453                           ;gsk_i2c.c: 20: I2C_Master_Wait();
  3454                           
  3455                           ;incstack = 0
  3456                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  3457  0F96  27B9               	fcall	_I2C_Master_Wait
  3458                           
  3459                           ;gsk_i2c.c: 21: SEN = 1;
  3460  0F97  1411               	bsf	17,0	;volatile
  3461  0F98  0008               	return
  3462  0F99                     __end_of_I2C_Master_Start:	
  3463  0F99                     __ptext20:	
  3464 ;; *************** function _I2C_Master_Read *****************
  3465 ;; Defined at:
  3466 ;;		line 42 in file "libs/gsk_i2c.c"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;  a               2    0[BANK1 ] unsigned short 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  temp            2    2[BANK1 ] unsigned short 
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  2    0[BANK1 ] unsigned short 
  3473 ;; Registers used:
  3474 ;;		wreg, status,2, status,0, pclath, cstack
  3475 ;; Tracked objects:
  3476 ;;		On entry : 300/100
  3477 ;;		On exit  : 300/100
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:      BANK1   BANK3   BANK2
  3480 ;;      Params:         2       0       0
  3481 ;;      Locals:         2       0       0
  3482 ;;      Temps:          0       0       0
  3483 ;;      Totals:         4       0       0
  3484 ;;Total ram usage:        4 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    1
  3487 ;; This function calls:
  3488 ;;		_I2C_Master_Wait
  3489 ;; This function is called by:
  3490 ;;		_I2C_ReadAtAddress
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           
  3495                           ;psect for function _I2C_Master_Read
  3496  0F99                     _I2C_Master_Read:	
  3497                           
  3498                           ;gsk_i2c.c: 44: unsigned short temp;
  3499                           ;gsk_i2c.c: 45: I2C_Master_Wait();
  3500                           
  3501                           ;incstack = 0
  3502                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  3503  0F99  27B9  120A  158A   	fcall	_I2C_Master_Wait
  3504                           
  3505                           ;gsk_i2c.c: 46: RCEN = 1;
  3506  0F9C  1591               	bsf	17,3	;volatile
  3507                           
  3508                           ;gsk_i2c.c: 47: I2C_Master_Wait();
  3509  0F9D  27B9  120A  158A   	fcall	_I2C_Master_Wait
  3510                           
  3511                           ;gsk_i2c.c: 48: temp = SSPBUF;
  3512  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  3513  0FA1  0813               	movf	19,w	;volatile
  3514  0FA2  1683               	bsf	3,5	;RP0=1, select bank1
  3515  0FA3  00B6               	movwf	I2C_Master_Read@temp^(0+128)
  3516  0FA4  01B7               	clrf	(I2C_Master_Read@temp+1)^(0+128)
  3517                           
  3518                           ;gsk_i2c.c: 49: I2C_Master_Wait();
  3519  0FA5  27B9  120A  158A   	fcall	_I2C_Master_Wait
  3520                           
  3521                           ;gsk_i2c.c: 50: ACKDT = (a)?0:1;
  3522  0FA8  0834               	movf	I2C_Master_Read@a^(0+128),w
  3523  0FA9  0435               	iorwf	(I2C_Master_Read@a+1)^(0+128),w
  3524  0FAA  1D03               	btfss	3,2
  3525  0FAB  2FB0               	goto	u2350
  3526  0FAC  1683               	bsf	3,5	;RP0=1, select bank1
  3527  0FAD  1303               	bcf	3,6	;RP1=0, select bank1
  3528  0FAE  1691               	bsf	17,5	;volatile
  3529  0FAF  2FB3               	goto	l2133
  3530  0FB0                     u2350:	
  3531  0FB0  1683               	bsf	3,5	;RP0=1, select bank1
  3532  0FB1  1303               	bcf	3,6	;RP1=0, select bank1
  3533  0FB2  1291               	bcf	17,5	;volatile
  3534  0FB3                     l2133:	
  3535                           
  3536                           ;gsk_i2c.c: 51: ACKEN = 1;
  3537  0FB3  1611               	bsf	17,4	;volatile
  3538                           
  3539                           ;gsk_i2c.c: 52: return temp;
  3540  0FB4  0837               	movf	(I2C_Master_Read@temp+1)^(0+128),w
  3541  0FB5  00B5               	movwf	(?_I2C_Master_Read+1)^(0+128)
  3542  0FB6  0836               	movf	I2C_Master_Read@temp^(0+128),w
  3543  0FB7  00B4               	movwf	?_I2C_Master_Read^(0+128)
  3544  0FB8  0008               	return
  3545  0FB9                     __end_of_I2C_Master_Read:	
  3546  0FB9                     __ptext21:	
  3547 ;; *************** function _I2C_Master_Wait *****************
  3548 ;; Defined at:
  3549 ;;		line 13 in file "libs/gsk_i2c.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;		None
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;		None
  3554 ;; Return value:  Size  Location     Type
  3555 ;;                  1    wreg      void 
  3556 ;; Registers used:
  3557 ;;		wreg, status,2
  3558 ;; Tracked objects:
  3559 ;;		On entry : 200/100
  3560 ;;		On exit  : 300/100
  3561 ;;		Unchanged: 0/0
  3562 ;; Data sizes:      BANK1   BANK3   BANK2
  3563 ;;      Params:         0       0       0
  3564 ;;      Locals:         0       0       0
  3565 ;;      Temps:          0       0       0
  3566 ;;      Totals:         0       0       0
  3567 ;;Total ram usage:        0 bytes
  3568 ;; Hardware stack levels used:    1
  3569 ;; This function calls:
  3570 ;;		Nothing
  3571 ;; This function is called by:
  3572 ;;		_I2C_Master_Start
  3573 ;;		_I2C_Master_Stop
  3574 ;;		_I2C_Master_Write
  3575 ;;		_I2C_Master_Read
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           
  3580                           ;psect for function _I2C_Master_Wait
  3581  0FB9                     _I2C_Master_Wait:	
  3582  0FB9                     l159:	
  3583                           ;gsk_i2c.c: 15: while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  3587                           
  3588  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  3589  0FBA  1914               	btfsc	20,2	;volatile
  3590  0FBB  2FB9               	goto	l159
  3591  0FBC  0811               	movf	17,w	;volatile
  3592  0FBD  391F               	andlw	31
  3593  0FBE  1903               	btfsc	3,2
  3594  0FBF  0008               	return
  3595  0FC0  2FB9               	goto	l159
  3596  0FC1                     __end_of_I2C_Master_Wait:	
  3597  0FC1                     __ptext18:	
  3598 ;; *************** function _I2C_Master_Stop *****************
  3599 ;; Defined at:
  3600 ;;		line 30 in file "libs/gsk_i2c.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 200/0
  3611 ;;		On exit  : 300/100
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:      BANK1   BANK3   BANK2
  3614 ;;      Params:         0       0       0
  3615 ;;      Locals:         0       0       0
  3616 ;;      Temps:          0       0       0
  3617 ;;      Totals:         0       0       0
  3618 ;;Total ram usage:        0 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    1
  3621 ;; This function calls:
  3622 ;;		_I2C_Master_Wait
  3623 ;; This function is called by:
  3624 ;;		_I2C_ReadAtAddress
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _I2C_Master_Stop
  3630  0FC1                     _I2C_Master_Stop:	
  3631                           
  3632                           ;gsk_i2c.c: 32: I2C_Master_Wait();
  3633                           
  3634                           ;incstack = 0
  3635                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  3636  0FC1  27B9               	fcall	_I2C_Master_Wait
  3637                           
  3638                           ;gsk_i2c.c: 33: PEN = 1;
  3639  0FC2  1511               	bsf	17,2	;volatile
  3640  0FC3  0008               	return
  3641  0FC4                     __end_of_I2C_Master_Stop:	
  3642  0FC4                     __ptext28:	
  3643 ;; *************** function ___lmul *****************
  3644 ;; Defined at:
  3645 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;  multiplier      4    0[BANK1 ] unsigned long 
  3648 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;  product         4    8[BANK1 ] unsigned long 
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  4    0[BANK1 ] unsigned long 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2, status,0
  3655 ;; Tracked objects:
  3656 ;;		On entry : 300/100
  3657 ;;		On exit  : 300/100
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:      BANK1   BANK3   BANK2
  3660 ;;      Params:         8       0       0
  3661 ;;      Locals:         4       0       0
  3662 ;;      Temps:          0       0       0
  3663 ;;      Totals:        12       0       0
  3664 ;;Total ram usage:       12 bytes
  3665 ;; Hardware stack levels used:    1
  3666 ;; This function calls:
  3667 ;;		Nothing
  3668 ;; This function is called by:
  3669 ;;		_WriteLongInt
  3670 ;;		_ReadRTCAsSec
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           
  3675                           ;psect for function ___lmul
  3676  0FC4                     ___lmul:	
  3677                           
  3678                           ;incstack = 0
  3679                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3680  0FC4  01BC               	clrf	___lmul@product^(0+128)
  3681  0FC5  01BD               	clrf	(___lmul@product+1)^(0+128)
  3682  0FC6  01BE               	clrf	(___lmul@product+2)^(0+128)
  3683  0FC7  01BF               	clrf	(___lmul@product+3)^(0+128)
  3684  0FC8                     l594:	
  3685  0FC8  1C34               	btfss	___lmul@multiplier^(0+128),0
  3686  0FC9  2FDE               	goto	l2143
  3687  0FCA  0838               	movf	___lmul@multiplicand^(0+128),w
  3688  0FCB  07BC               	addwf	___lmul@product^(0+128),f
  3689  0FCC  0839               	movf	(___lmul@multiplicand+1)^(0+128),w
  3690  0FCD  1103               	clrz
  3691  0FCE  1803               	skipnc
  3692  0FCF  3E01               	addlw	1
  3693  0FD0  1D03               	btfss	3,2
  3694  0FD1  07BD               	addwf	(___lmul@product+1)^(0+128),f
  3695  0FD2  083A               	movf	(___lmul@multiplicand+2)^(0+128),w
  3696  0FD3  1103               	clrz
  3697  0FD4  1803               	skipnc
  3698  0FD5  3E01               	addlw	1
  3699  0FD6  1D03               	btfss	3,2
  3700  0FD7  07BE               	addwf	(___lmul@product+2)^(0+128),f
  3701  0FD8  083B               	movf	(___lmul@multiplicand+3)^(0+128),w
  3702  0FD9  1103               	clrz
  3703  0FDA  1803               	skipnc
  3704  0FDB  3E01               	addlw	1
  3705  0FDC  1D03               	btfss	3,2
  3706  0FDD  07BF               	addwf	(___lmul@product+3)^(0+128),f
  3707  0FDE                     l2143:	
  3708  0FDE  1003               	clrc
  3709  0FDF  0DB8               	rlf	___lmul@multiplicand^(0+128),f
  3710  0FE0  0DB9               	rlf	(___lmul@multiplicand+1)^(0+128),f
  3711  0FE1  0DBA               	rlf	(___lmul@multiplicand+2)^(0+128),f
  3712  0FE2  0DBB               	rlf	(___lmul@multiplicand+3)^(0+128),f
  3713  0FE3  1003               	clrc
  3714  0FE4  0CB7               	rrf	(___lmul@multiplier+3)^(0+128),f
  3715  0FE5  0CB6               	rrf	(___lmul@multiplier+2)^(0+128),f
  3716  0FE6  0CB5               	rrf	(___lmul@multiplier+1)^(0+128),f
  3717  0FE7  0CB4               	rrf	___lmul@multiplier^(0+128),f
  3718  0FE8  0837               	movf	(___lmul@multiplier+3)^(0+128),w
  3719  0FE9  0436               	iorwf	(___lmul@multiplier+2)^(0+128),w
  3720  0FEA  0435               	iorwf	(___lmul@multiplier+1)^(0+128),w
  3721  0FEB  0434               	iorwf	___lmul@multiplier^(0+128),w
  3722  0FEC  1D03               	skipz
  3723  0FED  2FC8               	goto	l594
  3724  0FEE  083F               	movf	(___lmul@product+3)^(0+128),w
  3725  0FEF  00B7               	movwf	(?___lmul+3)^(0+128)
  3726  0FF0  083E               	movf	(___lmul@product+2)^(0+128),w
  3727  0FF1  00B6               	movwf	(?___lmul+2)^(0+128)
  3728  0FF2  083D               	movf	(___lmul@product+1)^(0+128),w
  3729  0FF3  00B5               	movwf	(?___lmul+1)^(0+128)
  3730  0FF4  083C               	movf	___lmul@product^(0+128),w
  3731  0FF5  00B4               	movwf	?___lmul^(0+128)
  3732  0FF6  0008               	return
  3733  0FF7                     __end_of___lmul:	
  3734  0FF7                     PL8:	
  3735  0FF7  0E51               	swapf	ReadRTCAsSec@TempVar000^(0+128),w
  3736  0FF8  390F               	andlw	15
  3737  0FF9  3907               	andlw	7
  3738  0FFA  00B4               	movwf	___wmul@multiplier^(0+128)
  3739  0FFB  300A               	movlw	10
  3740  0FFC  01B5               	clrf	(___wmul@multiplier+1)^(0+128)
  3741  0FFD  00B6               	movwf	___wmul@multiplicand^(0+128)
  3742  0FFE  01B7               	clrf	(___wmul@multiplicand+1)^(0+128)
  3743  0FFF  0008               	return
  3744  1000                     __end_ofPL8:	
  3745                           
  3746                           	psect	text24
  3747  0C5F                     __ptext24:	
  3748 ;; *************** function _I2C_Master_Init *****************
  3749 ;; Defined at:
  3750 ;;		line 3 in file "libs/gsk_i2c.c"
  3751 ;; Parameters:    Size  Location     Type
  3752 ;;  c               4   13[BANK1 ] const unsigned long 
  3753 ;; Auto vars:     Size  Location     Type
  3754 ;;		None
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, status,2, status,0, pclath, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 300/100
  3761 ;;		On exit  : 300/100
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:      BANK1   BANK3   BANK2
  3764 ;;      Params:         4       0       0
  3765 ;;      Locals:         0       0       0
  3766 ;;      Temps:          4       0       0
  3767 ;;      Totals:         8       0       0
  3768 ;;Total ram usage:        8 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    1
  3771 ;; This function calls:
  3772 ;;		___lldiv
  3773 ;; This function is called by:
  3774 ;;		_main
  3775 ;; This function uses a non-reentrant model
  3776 ;;
  3777                           
  3778                           
  3779                           ;psect for function _I2C_Master_Init
  3780  0C5F                     _I2C_Master_Init:	
  3781                           
  3782                           ;gsk_i2c.c: 5: SSPCON = 0b00101000;
  3783                           
  3784                           ;incstack = 0
  3785                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  3786  0C5F  3028               	movlw	40
  3787  0C60  1283               	bcf	3,5	;RP0=0, select bank0
  3788  0C61  0094               	movwf	20	;volatile
  3789                           
  3790                           ;gsk_i2c.c: 6: SSPCON2 = 0;
  3791  0C62  1683               	bsf	3,5	;RP0=1, select bank1
  3792  0C63  0191               	clrf	17	;volatile
  3793                           
  3794                           ;gsk_i2c.c: 7: SSPADD = (4000000/(4*c))-1;
  3795  0C64  0841               	movf	I2C_Master_Init@c^(0+128),w
  3796  0C65  00C5               	movwf	??_I2C_Master_Init^(0+128)
  3797  0C66  0842               	movf	(I2C_Master_Init@c+1)^(0+128),w
  3798  0C67  00C6               	movwf	(??_I2C_Master_Init^(0+128)+1)
  3799  0C68  0843               	movf	(I2C_Master_Init@c+2)^(0+128),w
  3800  0C69  00C7               	movwf	(??_I2C_Master_Init^(0+128)+2)
  3801  0C6A  0844               	movf	(I2C_Master_Init@c+3)^(0+128),w
  3802  0C6B  00C8               	movwf	(??_I2C_Master_Init^(0+128)+3)
  3803  0C6C  3002               	movlw	2
  3804  0C6D                     u2845:	
  3805  0C6D  1003               	clrc
  3806  0C6E  0DC5               	rlf	??_I2C_Master_Init^(0+128),f
  3807  0C6F  0DC6               	rlf	(??_I2C_Master_Init^(0+128)+1),f
  3808  0C70  0DC7               	rlf	(??_I2C_Master_Init^(0+128)+2),f
  3809  0C71  0DC8               	rlf	(??_I2C_Master_Init^(0+128)+3),f
  3810  0C72  3EFF               	addlw	-1
  3811  0C73  1D03               	skipz
  3812  0C74  2C6D               	goto	u2845
  3813  0C75  0848               	movf	(??_I2C_Master_Init+3)^(0+128),w
  3814  0C76  00B7               	movwf	(___lldiv@divisor+3)^(0+128)
  3815  0C77  0847               	movf	(??_I2C_Master_Init+2)^(0+128),w
  3816  0C78  00B6               	movwf	(___lldiv@divisor+2)^(0+128)
  3817  0C79  0846               	movf	(??_I2C_Master_Init+1)^(0+128),w
  3818  0C7A  00B5               	movwf	(___lldiv@divisor+1)^(0+128)
  3819  0C7B  0845               	movf	??_I2C_Master_Init^(0+128),w
  3820  0C7C  00B4               	movwf	___lldiv@divisor^(0+128)
  3821  0C7D  303D               	movlw	61
  3822  0C7E  01BB               	clrf	(___lldiv@dividend+3)^(0+128)
  3823  0C7F  00BA               	movwf	(___lldiv@dividend+2)^(0+128)
  3824  0C80  3009               	movlw	9
  3825  0C81  00B9               	movwf	(___lldiv@dividend+1)^(0+128)
  3826  0C82  01B8               	clrf	___lldiv@dividend^(0+128)
  3827  0C83  248B               	fcall	___lldiv
  3828  0C84  0834               	movf	?___lldiv^(0+128),w
  3829  0C85  3EFF               	addlw	255
  3830  0C86  0093               	movwf	19	;volatile
  3831                           
  3832                           ;gsk_i2c.c: 8: SSPSTAT = 0;
  3833  0C87  0194               	clrf	20	;volatile
  3834                           
  3835                           ;gsk_i2c.c: 9: TRISC3 = 1;
  3836  0C88  1587               	bsf	7,3	;volatile
  3837                           
  3838                           ;gsk_i2c.c: 10: TRISC4 = 1;
  3839  0C89  1607               	bsf	7,4	;volatile
  3840  0C8A  0008               	return
  3841  0C8B                     __end_of_I2C_Master_Init:	
  3842  0C8B                     __ptext25:	
  3843 ;; *************** function ___lldiv *****************
  3844 ;; Defined at:
  3845 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  divisor         4    0[BANK1 ] unsigned long 
  3848 ;;  dividend        4    4[BANK1 ] unsigned long 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  quotient        4    8[BANK1 ] unsigned long 
  3851 ;;  counter         1   12[BANK1 ] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;                  4    0[BANK1 ] unsigned long 
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : 300/100
  3858 ;;		On exit  : 300/100
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:      BANK1   BANK3   BANK2
  3861 ;;      Params:         8       0       0
  3862 ;;      Locals:         5       0       0
  3863 ;;      Temps:          0       0       0
  3864 ;;      Totals:        13       0       0
  3865 ;;Total ram usage:       13 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_I2C_Master_Init
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874                           
  3875                           ;psect for function ___lldiv
  3876  0C8B                     ___lldiv:	
  3877                           
  3878                           ;incstack = 0
  3879                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  3880  0C8B  01BC               	clrf	___lldiv@quotient^(0+128)
  3881  0C8C  01BD               	clrf	(___lldiv@quotient+1)^(0+128)
  3882  0C8D  01BE               	clrf	(___lldiv@quotient+2)^(0+128)
  3883  0C8E  01BF               	clrf	(___lldiv@quotient+3)^(0+128)
  3884  0C8F  0837               	movf	(___lldiv@divisor+3)^(0+128),w
  3885  0C90  0436               	iorwf	(___lldiv@divisor+2)^(0+128),w
  3886  0C91  0435               	iorwf	(___lldiv@divisor+1)^(0+128),w
  3887  0C92  0434               	iorwf	___lldiv@divisor^(0+128),w
  3888  0C93  1903               	skipnz
  3889  0C94  2CCA               	goto	l2411
  3890  0C95  01C0               	clrf	___lldiv@counter^(0+128)
  3891  0C96                     L7:	
  3892  0C96  0AC0               	incf	___lldiv@counter^(0+128),f
  3893  0C97  1BB7               	btfsc	(___lldiv@divisor+3)^(0+128),7
  3894  0C98  2C9F               	goto	l2399
  3895  0C99  1003               	clrc
  3896  0C9A  0DB4               	rlf	___lldiv@divisor^(0+128),f
  3897  0C9B  0DB5               	rlf	(___lldiv@divisor+1)^(0+128),f
  3898  0C9C  0DB6               	rlf	(___lldiv@divisor+2)^(0+128),f
  3899  0C9D  0DB7               	rlf	(___lldiv@divisor+3)^(0+128),f
  3900  0C9E  2C96               	goto	L7
  3901  0C9F                     l2399:	
  3902  0C9F  1003               	clrc
  3903  0CA0  0DBC               	rlf	___lldiv@quotient^(0+128),f
  3904  0CA1  0DBD               	rlf	(___lldiv@quotient+1)^(0+128),f
  3905  0CA2  0DBE               	rlf	(___lldiv@quotient+2)^(0+128),f
  3906  0CA3  0DBF               	rlf	(___lldiv@quotient+3)^(0+128),f
  3907  0CA4  0837               	movf	(___lldiv@divisor+3)^(0+128),w
  3908  0CA5  023B               	subwf	(___lldiv@dividend+3)^(0+128),w
  3909  0CA6  1D03               	skipz
  3910  0CA7  2CB2               	goto	u2735
  3911  0CA8  0836               	movf	(___lldiv@divisor+2)^(0+128),w
  3912  0CA9  023A               	subwf	(___lldiv@dividend+2)^(0+128),w
  3913  0CAA  1D03               	skipz
  3914  0CAB  2CB2               	goto	u2735
  3915  0CAC  0835               	movf	(___lldiv@divisor+1)^(0+128),w
  3916  0CAD  0239               	subwf	(___lldiv@dividend+1)^(0+128),w
  3917  0CAE  1D03               	skipz
  3918  0CAF  2CB2               	goto	u2735
  3919  0CB0  0834               	movf	___lldiv@divisor^(0+128),w
  3920  0CB1  0238               	subwf	___lldiv@dividend^(0+128),w
  3921  0CB2                     u2735:	
  3922  0CB2  1C03               	skipc
  3923  0CB3  2CC4               	goto	L8
  3924  0CB4  0834               	movf	___lldiv@divisor^(0+128),w
  3925  0CB5  02B8               	subwf	___lldiv@dividend^(0+128),f
  3926  0CB6  0835               	movf	(___lldiv@divisor+1)^(0+128),w
  3927  0CB7  1C03               	skipc
  3928  0CB8  0F35               	incfsz	(___lldiv@divisor+1)^(0+128),w
  3929  0CB9  02B9               	subwf	(___lldiv@dividend+1)^(0+128),f
  3930  0CBA  0836               	movf	(___lldiv@divisor+2)^(0+128),w
  3931  0CBB  1C03               	skipc
  3932  0CBC  0F36               	incfsz	(___lldiv@divisor+2)^(0+128),w
  3933  0CBD  02BA               	subwf	(___lldiv@dividend+2)^(0+128),f
  3934  0CBE  0837               	movf	(___lldiv@divisor+3)^(0+128),w
  3935  0CBF  1C03               	skipc
  3936  0CC0  0F37               	incfsz	(___lldiv@divisor+3)^(0+128),w
  3937  0CC1  02BB               	subwf	(___lldiv@dividend+3)^(0+128),f
  3938  0CC2  143C               	bsf	___lldiv@quotient^(0+128),0
  3939  0CC3  1003               	clrc
  3940  0CC4                     L8:	
  3941  0CC4  0CB7               	rrf	(___lldiv@divisor+3)^(0+128),f
  3942  0CC5  0CB6               	rrf	(___lldiv@divisor+2)^(0+128),f
  3943  0CC6  0CB5               	rrf	(___lldiv@divisor+1)^(0+128),f
  3944  0CC7  0CB4               	rrf	___lldiv@divisor^(0+128),f
  3945  0CC8  0BC0               	decfsz	___lldiv@counter^(0+128),f
  3946  0CC9  2C9F               	goto	l2399
  3947  0CCA                     l2411:	
  3948  0CCA  083F               	movf	(___lldiv@quotient+3)^(0+128),w
  3949  0CCB  00B7               	movwf	(?___lldiv+3)^(0+128)
  3950  0CCC  083E               	movf	(___lldiv@quotient+2)^(0+128),w
  3951  0CCD  00B6               	movwf	(?___lldiv+2)^(0+128)
  3952  0CCE  083D               	movf	(___lldiv@quotient+1)^(0+128),w
  3953  0CCF  00B5               	movwf	(?___lldiv+1)^(0+128)
  3954  0CD0  083C               	movf	___lldiv@quotient^(0+128),w
  3955  0CD1  00B4               	movwf	?___lldiv^(0+128)
  3956  0CD2  0008               	return
  3957  0CD3                     __end_of___lldiv:	
  3958                           
  3959                           	psect	text26
  3960  0008                     __ptext26:	
  3961 ;; *************** function _DetermineCycleChange *****************
  3962 ;; Defined at:
  3963 ;;		line 14 in file "libs/gsk_app_funcs.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;		None
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  i               1   43[BANK1 ] unsigned char 
  3968 ;;  MinDiffCycle    4    0        unsigned long 
  3969 ;;  DiffCycleTim    4    0        unsigned long 
  3970 ;;  PrevCycle       1   42[BANK1 ] unsigned char 
  3971 ;;  MinPos          1   41[BANK1 ] unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 300/300
  3978 ;;		On exit  : 300/300
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:      BANK1   BANK3   BANK2
  3981 ;;      Params:         0       0       0
  3982 ;;      Locals:         3       0       0
  3983 ;;      Temps:         10       0       0
  3984 ;;      Totals:        13       0       0
  3985 ;;Total ram usage:       13 bytes
  3986 ;; Hardware stack levels used:    1
  3987 ;; Hardware stack levels required when called:    4
  3988 ;; This function calls:
  3989 ;;		_WriteLongInt
  3990 ;; This function is called by:
  3991 ;;		_main
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994                           
  3995                           
  3996                           ;psect for function _DetermineCycleChange
  3997  0008                     _DetermineCycleChange:	
  3998                           
  3999                           ;gsk_app_funcs.c: 15: if ((CONFIG0.bits.b0) == 0) {
  4000                           
  4001                           ;incstack = 0
  4002                           ; Regs used in _DetermineCycleChange: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstac
      +                          k]
  4003  0008  1854               	btfsc	_CONFIG0^(0+384),0	;volatile
  4004  0009  0008               	return
  4005                           
  4006                           ;gsk_app_funcs.c: 16: uint32_t DiffCycleTime;
  4007                           ;gsk_app_funcs.c: 17: uint32_t MinDiffCycleTime;
  4008                           ;gsk_app_funcs.c: 18: char PrevCycle;
  4009                           ;gsk_app_funcs.c: 19: if (Cycle > 0)
  4010  000A  0856               	movf	_Cycle^(0+384),w	;volatile
  4011                           
  4012                           ;gsk_app_funcs.c: 23: char MinPos=3;
  4013  000B  3003               	movlw	3
  4014  000C  1303               	bcf	3,6	;RP1=0, select bank1
  4015  000D  00DD               	movwf	DetermineCycleChange@MinPos^(0+128)
  4016                           
  4017                           ;gsk_app_funcs.c: 24: for (char i = 0; i < 3; i++) {
  4018  000E  01DF               	clrf	DetermineCycleChange@i^(0+128)
  4019  000F                     l2639:	
  4020                           
  4021                           ;gsk_app_funcs.c: 25: if (i > 0)
  4022  000F  085F               	movf	DetermineCycleChange@i^(0+128),w
  4023  0010  1903               	btfsc	3,2
  4024  0011  2815               	goto	l2643
  4025                           
  4026                           ;gsk_app_funcs.c: 26: PrevCycle = i - 1;
  4027  0012  085F               	movf	DetermineCycleChange@i^(0+128),w
  4028  0013  3EFF               	addlw	255
  4029  0014  2816               	goto	L14
  4030  0015                     l2643:	
  4031                           
  4032                           ;gsk_app_funcs.c: 27: else
  4033                           ;gsk_app_funcs.c: 28: PrevCycle = 3 - 1;
  4034  0015  3002               	movlw	2
  4035  0016                     L14:	
  4036  0016  00DE               	movwf	DetermineCycleChange@PrevCycle^(0+128)
  4037                           
  4038                           ;gsk_app_funcs.c: 29: if (C[PrevCycle] < C[i]) {
  4039  0017  085F               	movf	DetermineCycleChange@i^(0+128),w
  4040  0018  00D3               	movwf	??_DetermineCycleChange^(0+128)
  4041  0019  3001               	movlw	1
  4042  001A  1003               	clrc
  4043  001B                     L9:	
  4044  001B  0DD3               	rlf	??_DetermineCycleChange^(0+128),f
  4045  001C  3EFF               	addlw	-1
  4046  001D  1003               	clrc
  4047  001E  1D03               	skipz
  4048  001F  281B               	goto	L9
  4049  0020  0D53               	rlf	??_DetermineCycleChange^(0+128),w
  4050  0021  3EBC               	addlw	(low (_C| (0+256)))& (0+255)
  4051  0022  0084               	movwf	4
  4052  0023  1783               	bsf	3,7	;select IRP bank3
  4053  0024  0800               	movf	0,w
  4054  0025  00D4               	movwf	(??_DetermineCycleChange+1)^(0+128)
  4055  0026  0A84               	incf	4,f
  4056  0027  0800               	movf	0,w
  4057  0028  00D5               	movwf	((??_DetermineCycleChange+1)^(0+128)+1)
  4058  0029  0A84               	incf	4,f
  4059  002A  0800               	movf	0,w
  4060  002B  00D6               	movwf	((??_DetermineCycleChange+1)^(0+128)+2)
  4061  002C  0A84               	incf	4,f
  4062  002D  0800               	movf	0,w
  4063  002E  00D7               	movwf	((??_DetermineCycleChange+1)^(0+128)+3)
  4064  002F  085E               	movf	DetermineCycleChange@PrevCycle^(0+128),w
  4065  0030  00D8               	movwf	(??_DetermineCycleChange+5)^(0+128)
  4066  0031  3001               	movlw	1
  4067  0032  1003               	clrc
  4068  0033                     L10:	
  4069  0033  0DD8               	rlf	(??_DetermineCycleChange+5)^(0+128),f
  4070  0034  3EFF               	addlw	-1
  4071  0035  1003               	clrc
  4072  0036  1D03               	skipz
  4073  0037  2833               	goto	L10
  4074  0038  0D58               	rlf	(??_DetermineCycleChange+5)^(0+128),w
  4075  0039  3EBC               	addlw	(low (_C| (0+256)))& (0+255)
  4076  003A  0084               	movwf	4
  4077  003B  0800               	movf	0,w
  4078  003C  00D9               	movwf	(??_DetermineCycleChange+6)^(0+128)
  4079  003D  0A84               	incf	4,f
  4080  003E  0800               	movf	0,w
  4081  003F  00DA               	movwf	((??_DetermineCycleChange+6)^(0+128)+1)
  4082  0040  0A84               	incf	4,f
  4083  0041  0800               	movf	0,w
  4084  0042  00DB               	movwf	((??_DetermineCycleChange+6)^(0+128)+2)
  4085  0043  0A84               	incf	4,f
  4086  0044  0800               	movf	0,w
  4087  0045  00DC               	movwf	((??_DetermineCycleChange+6)^(0+128)+3)
  4088  0046  085C               	movf	(??_DetermineCycleChange+9)^(0+128),w
  4089  0047  3A80               	xorlw	128
  4090  0048  00FF               	movwf	127
  4091  0049  0857               	movf	(??_DetermineCycleChange+4)^(0+128),w
  4092  004A  3A80               	xorlw	128
  4093  004B  027F               	subwf	127,w
  4094  004C  1D03               	skipz
  4095  004D  2858               	goto	u2923
  4096  004E  0856               	movf	(??_DetermineCycleChange+3)^(0+128),w
  4097  004F  025B               	subwf	(??_DetermineCycleChange+8)^(0+128),w
  4098  0050  1D03               	skipz
  4099  0051  2858               	goto	u2923
  4100  0052  0855               	movf	(??_DetermineCycleChange+2)^(0+128),w
  4101  0053  025A               	subwf	(??_DetermineCycleChange+7)^(0+128),w
  4102  0054  1D03               	skipz
  4103  0055  2858               	goto	u2923
  4104  0056  0854               	movf	(??_DetermineCycleChange+1)^(0+128),w
  4105  0057  0259               	subwf	(??_DetermineCycleChange+6)^(0+128),w
  4106  0058                     u2923:	
  4107                           
  4108                           ;gsk_app_funcs.c: 30: if ((S>C[PrevCycle]) && (S<=C[i])) {
  4109  0058  085E               	movf	DetermineCycleChange@PrevCycle^(0+128),w
  4110  0059  00D3               	movwf	??_DetermineCycleChange^(0+128)
  4111  005A  3001               	movlw	1
  4112  005B  1803               	skipnc
  4113  005C  289B               	goto	L15
  4114  005D  1003               	clrc
  4115  005E                     L11:	
  4116  005E  0DD3               	rlf	??_DetermineCycleChange^(0+128),f
  4117  005F  3EFF               	addlw	-1
  4118  0060  1003               	clrc
  4119  0061  1D03               	skipz
  4120  0062  285E               	goto	L11
  4121  0063  20F9  120A  118A   	fcall	PL2	;call to abstracted procedure
  4122  0066  1D03               	skipz
  4123  0067  2878               	goto	u2943
  4124  0068  1703               	bsf	3,6	;RP1=1, select bank3
  4125  0069  084A               	movf	(_S+2)^(0+384),w	;volatile
  4126  006A  1303               	bcf	3,6	;RP1=0, select bank1
  4127  006B  0256               	subwf	(??_DetermineCycleChange+3)^(0+128),w
  4128  006C  1D03               	skipz
  4129  006D  2878               	goto	u2943
  4130  006E  1703               	bsf	3,6	;RP1=1, select bank3
  4131  006F  0849               	movf	(_S+1)^(0+384),w	;volatile
  4132  0070  1303               	bcf	3,6	;RP1=0, select bank1
  4133  0071  0255               	subwf	(??_DetermineCycleChange+2)^(0+128),w
  4134  0072  1D03               	skipz
  4135  0073  2878               	goto	u2943
  4136  0074  1703               	bsf	3,6	;RP1=1, select bank3
  4137  0075  0848               	movf	_S^(0+384),w	;volatile
  4138  0076  1303               	bcf	3,6	;RP1=0, select bank1
  4139  0077  0254               	subwf	(??_DetermineCycleChange+1)^(0+128),w
  4140  0078                     u2943:	
  4141  0078  1803               	skipnc
  4142  0079  28DF               	goto	l2661
  4143  007A  085F               	movf	DetermineCycleChange@i^(0+128),w
  4144  007B  00D3               	movwf	??_DetermineCycleChange^(0+128)
  4145  007C  3001               	movlw	1
  4146  007D  1003               	clrc
  4147  007E                     L12:	
  4148  007E  0DD3               	rlf	??_DetermineCycleChange^(0+128),f
  4149  007F  3EFF               	addlw	-1
  4150  0080  1003               	clrc
  4151  0081  1D03               	skipz
  4152  0082  287E               	goto	L12
  4153  0083  20F9  120A  118A   	fcall	PL2	;call to abstracted procedure
  4154  0086  1D03               	skipz
  4155  0087  2898               	goto	u2963
  4156  0088  1703               	bsf	3,6	;RP1=1, select bank3
  4157  0089  084A               	movf	(_S+2)^(0+384),w	;volatile
  4158  008A  1303               	bcf	3,6	;RP1=0, select bank1
  4159  008B  0256               	subwf	(??_DetermineCycleChange+3)^(0+128),w
  4160  008C  1D03               	skipz
  4161  008D  2898               	goto	u2963
  4162  008E  1703               	bsf	3,6	;RP1=1, select bank3
  4163  008F  0849               	movf	(_S+1)^(0+384),w	;volatile
  4164  0090  1303               	bcf	3,6	;RP1=0, select bank1
  4165  0091  0255               	subwf	(??_DetermineCycleChange+2)^(0+128),w
  4166  0092  1D03               	skipz
  4167  0093  2898               	goto	u2963
  4168  0094  1703               	bsf	3,6	;RP1=1, select bank3
  4169  0095  0848               	movf	_S^(0+384),w	;volatile
  4170  0096  1303               	bcf	3,6	;RP1=0, select bank1
  4171  0097  0254               	subwf	(??_DetermineCycleChange+1)^(0+128),w
  4172  0098                     u2963:	
  4173  0098  1803               	btfsc	3,0
  4174  0099  28DC               	goto	l2651
  4175  009A  28DF               	goto	l2661
  4176  009B                     L15:	
  4177                           ;gsk_app_funcs.c: 34: if (((S>C[PrevCycle]) && (S<=86400)) || (S<=86400)) {
  4178                           
  4179  009B  1003               	clrc
  4180  009C                     L13:	
  4181  009C  0DD3               	rlf	??_DetermineCycleChange^(0+128),f
  4182  009D  3EFF               	addlw	-1
  4183  009E  1003               	clrc
  4184  009F  1D03               	skipz
  4185  00A0  289C               	goto	L13
  4186  00A1  20F9  120A  118A   	fcall	PL2	;call to abstracted procedure
  4187  00A4  1D03               	skipz
  4188  00A5  28B6               	goto	u2983
  4189  00A6  1703               	bsf	3,6	;RP1=1, select bank3
  4190  00A7  084A               	movf	(_S+2)^(0+384),w	;volatile
  4191  00A8  1303               	bcf	3,6	;RP1=0, select bank1
  4192  00A9  0256               	subwf	(??_DetermineCycleChange+3)^(0+128),w
  4193  00AA  1D03               	skipz
  4194  00AB  28B6               	goto	u2983
  4195  00AC  1703               	bsf	3,6	;RP1=1, select bank3
  4196  00AD  0849               	movf	(_S+1)^(0+384),w	;volatile
  4197  00AE  1303               	bcf	3,6	;RP1=0, select bank1
  4198  00AF  0255               	subwf	(??_DetermineCycleChange+2)^(0+128),w
  4199  00B0  1D03               	skipz
  4200  00B1  28B6               	goto	u2983
  4201  00B2  1703               	bsf	3,6	;RP1=1, select bank3
  4202  00B3  0848               	movf	_S^(0+384),w	;volatile
  4203  00B4  1303               	bcf	3,6	;RP1=0, select bank1
  4204  00B5  0254               	subwf	(??_DetermineCycleChange+1)^(0+128),w
  4205  00B6                     u2983:	
  4206  00B6  1803               	skipnc
  4207  00B7  28CA               	goto	l2657
  4208  00B8  1703               	bsf	3,6	;RP1=1, select bank3
  4209  00B9  1BCB               	btfsc	(_S+3)^(0+384),7	;volatile
  4210  00BA  28DC               	goto	l2651
  4211  00BB  084B               	movf	(_S+3)^(0+384),w	;volatile
  4212  00BC  1D03               	btfss	3,2
  4213  00BD  28CA               	goto	l2657
  4214  00BE  3001               	movlw	1
  4215  00BF  024A               	subwf	(_S+2)^(0+384),w	;volatile
  4216  00C0  1D03               	skipz
  4217  00C1  28C8               	goto	u2993
  4218  00C2  3051               	movlw	81
  4219  00C3  0249               	subwf	(_S+1)^(0+384),w	;volatile
  4220  00C4  1D03               	skipz
  4221  00C5  28C8               	goto	u2993
  4222  00C6  3081               	movlw	129
  4223  00C7  0248               	subwf	_S^(0+384),w	;volatile
  4224  00C8                     u2993:	
  4225  00C8  1C03               	btfss	3,0
  4226  00C9  28DC               	goto	l2651
  4227  00CA                     l2657:	
  4228  00CA  1703               	bsf	3,6	;RP1=1, select bank3
  4229  00CB  1BCB               	btfsc	(_S+3)^(0+384),7	;volatile
  4230  00CC  28DC               	goto	l2651
  4231  00CD  084B               	movf	(_S+3)^(0+384),w	;volatile
  4232  00CE  1D03               	btfss	3,2
  4233  00CF  28DF               	goto	l2661
  4234  00D0  3001               	movlw	1
  4235  00D1  024A               	subwf	(_S+2)^(0+384),w	;volatile
  4236  00D2  1D03               	skipz
  4237  00D3  28DA               	goto	u3003
  4238  00D4  3051               	movlw	81
  4239  00D5  0249               	subwf	(_S+1)^(0+384),w	;volatile
  4240  00D6  1D03               	skipz
  4241  00D7  28DA               	goto	u3003
  4242  00D8  3081               	movlw	129
  4243  00D9  0248               	subwf	_S^(0+384),w	;volatile
  4244  00DA                     u3003:	
  4245  00DA  1803               	btfsc	3,0
  4246  00DB  28DF               	goto	l2661
  4247  00DC                     l2651:	
  4248                           
  4249                           ;gsk_app_funcs.c: 31: MinPos = i;
  4250  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  4251  00DD  085F               	movf	DetermineCycleChange@i^(0+128),w
  4252  00DE  00DD               	movwf	DetermineCycleChange@MinPos^(0+128)
  4253  00DF                     l2661:	
  4254  00DF  1303               	bcf	3,6	;RP1=0, select bank1
  4255  00E0  3003               	movlw	3
  4256  00E1  0ADF               	incf	DetermineCycleChange@i^(0+128),f
  4257  00E2  025F               	subwf	DetermineCycleChange@i^(0+128),w
  4258  00E3  1C03               	skipc
  4259  00E4  280F               	goto	l2639
  4260                           
  4261                           ;gsk_app_funcs.c: 36: }
  4262                           ;gsk_app_funcs.c: 37: }
  4263                           ;gsk_app_funcs.c: 38: }
  4264                           ;gsk_app_funcs.c: 39: WriteLongInt(1,5,MinPos,2,0);
  4265  00E5  3005               	movlw	5
  4266  00E6  00C9               	movwf	WriteLongInt@x^(0+128)
  4267  00E7  085D               	movf	DetermineCycleChange@MinPos^(0+128),w
  4268  00E8  00CA               	movwf	WriteLongInt@Val^(0+128)
  4269  00E9  3002               	movlw	2
  4270  00EA  01CB               	clrf	(WriteLongInt@Val+1)^(0+128)
  4271  00EB  01CC               	clrf	(WriteLongInt@Val+2)^(0+128)
  4272  00EC  01CD               	clrf	(WriteLongInt@Val+3)^(0+128)
  4273  00ED  00CE               	movwf	WriteLongInt@size^(0+128)
  4274  00EE  3001               	movlw	1
  4275  00EF  01CF               	clrf	WriteLongInt@Sign^(0+128)
  4276  00F0  120A  118A  2110   	fcall	_WriteLongInt
  4277                           
  4278                           ;gsk_app_funcs.c: 40: if (MinPos != Cycle)
  4279  00F3  085D               	movf	DetermineCycleChange@MinPos^(0+128),w
  4280  00F4  1703               	bsf	3,6	;RP1=1, select bank3
  4281  00F5  0656               	xorwf	_Cycle^(0+384),w	;volatile
  4282  00F6  1D03               	btfss	3,2
  4283                           
  4284                           ;gsk_app_funcs.c: 41: CONFIG0.bits.b0 = 1;
  4285  00F7  1454               	bsf	_CONFIG0^(0+384),0	;volatile
  4286  00F8  0008               	return
  4287  00F9                     __end_of_DetermineCycleChange:	
  4288  00F9                     PL2:	
  4289  00F9  0D53               	rlf	??_DetermineCycleChange^(0+128),w
  4290  00FA  3EBC               	addlw	(low (_C| (0+256)))& (0+255)
  4291  00FB  0084               	movwf	4
  4292  00FC  0800               	movf	0,w
  4293  00FD  00D4               	movwf	(??_DetermineCycleChange+1)^(0+128)
  4294  00FE  0A84               	incf	4,f
  4295  00FF  0800               	movf	0,w
  4296  0100  00D5               	movwf	((??_DetermineCycleChange+1)^(0+128)+1)
  4297  0101  0A84               	incf	4,f
  4298  0102  0800               	movf	0,w
  4299  0103  00D6               	movwf	((??_DetermineCycleChange+1)^(0+128)+2)
  4300  0104  0A84               	incf	4,f
  4301  0105  0800               	movf	0,w
  4302  0106  00D7               	movwf	((??_DetermineCycleChange+1)^(0+128)+3)
  4303  0107  0857               	movf	(??_DetermineCycleChange+4)^(0+128),w
  4304  0108  3A80               	xorlw	128
  4305  0109  00FF               	movwf	127
  4306  010A  1703               	bsf	3,6	;RP1=1, select bank3
  4307  010B  084B               	movf	(_S+3)^(0+384),w	;volatile
  4308  010C  3A80               	xorlw	128
  4309  010D  027F               	subwf	127,w
  4310  010E  1303               	bcf	3,6	;RP1=0, select bank1
  4311  010F  0008               	return
  4312  0110                     __end_ofPL2:	
  4313                           
  4314                           	psect	text27
  4315  0110                     __ptext27:	
  4316 ;; *************** function _WriteLongInt *****************
  4317 ;; Defined at:
  4318 ;;		line 182 in file "libs/HD44780.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  y               1    wreg     unsigned char 
  4321 ;;  x               1   21[BANK1 ] unsigned char 
  4322 ;;  Val             4   22[BANK1 ] long 
  4323 ;;  size            1   26[BANK1 ] char 
  4324 ;;  Sign            1   27[BANK1 ] unsigned char 
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;  y               1   30[BANK1 ] unsigned char 
  4327 ;;  POS             1   29[BANK1 ] char 
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4332 ;; Tracked objects:
  4333 ;;		On entry : 300/900
  4334 ;;		On exit  : 300/100
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:      BANK1   BANK3   BANK2
  4337 ;;      Params:         7       0       0
  4338 ;;      Locals:         2       0       0
  4339 ;;      Temps:          1       0       0
  4340 ;;      Totals:        10       0       0
  4341 ;;Total ram usage:       10 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; Hardware stack levels required when called:    3
  4344 ;; This function calls:
  4345 ;;		_Lcd_WriteChar
  4346 ;;		___aldiv
  4347 ;;		___bmul
  4348 ;;		___lmul
  4349 ;; This function is called by:
  4350 ;;		_DetermineCycleChange
  4351 ;; This function uses a non-reentrant model
  4352 ;;
  4353                           
  4354                           
  4355                           ;psect for function _WriteLongInt
  4356  0110                     _WriteLongInt:	
  4357                           
  4358                           ;incstack = 0
  4359                           ; Regs used in _WriteLongInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4360                           ;WriteLongInt@y stored from wreg
  4361  0110  00D2               	movwf	WriteLongInt@y^(0+128)
  4362                           
  4363                           ;HD44780.c: 183: int8_t POS = 0;
  4364  0111  01D1               	clrf	WriteLongInt@POS^(0+128)
  4365                           
  4366                           ;HD44780.c: 184: if (Sign) {
  4367  0112  084F               	movf	WriteLongInt@Sign^(0+128),w
  4368  0113  1903               	btfsc	3,2
  4369  0114  2942               	goto	l2253
  4370                           
  4371                           ;HD44780.c: 185: POS++;
  4372  0115  0AD1               	incf	WriteLongInt@POS^(0+128),f
  4373                           
  4374                           ;HD44780.c: 186: if (Val<0) {
  4375  0116  1FCD               	btfss	(WriteLongInt@Val+3)^(0+128),7
  4376  0117  293A               	goto	l2245
  4377                           
  4378                           ;HD44780.c: 187: Lcd_WriteChar (y, x, 0x2D);
  4379  0118  0849               	movf	WriteLongInt@x^(0+128),w
  4380  0119  00C5               	movwf	Lcd_WriteChar@x^(0+128)
  4381  011A  302D               	movlw	45
  4382  011B  00C6               	movwf	Lcd_WriteChar@c^(0+128)
  4383  011C  0852               	movf	WriteLongInt@y^(0+128),w
  4384  011D  217C               	fcall	_Lcd_WriteChar
  4385                           
  4386                           ;HD44780.c: 188: Val=-1*Val;
  4387  011E  30FF               	movlw	255
  4388  011F  1683               	bsf	3,5	;RP0=1, select bank1
  4389  0120  1303               	bcf	3,6	;RP1=0, select bank1
  4390  0121  00B4               	movwf	___lmul@multiplier^(0+128)
  4391  0122  00B5               	movwf	(___lmul@multiplier+1)^(0+128)
  4392  0123  00B6               	movwf	(___lmul@multiplier+2)^(0+128)
  4393  0124  00B7               	movwf	(___lmul@multiplier+3)^(0+128)
  4394  0125  084D               	movf	(WriteLongInt@Val+3)^(0+128),w
  4395  0126  00BB               	movwf	(___lmul@multiplicand+3)^(0+128)
  4396  0127  084C               	movf	(WriteLongInt@Val+2)^(0+128),w
  4397  0128  00BA               	movwf	(___lmul@multiplicand+2)^(0+128)
  4398  0129  084B               	movf	(WriteLongInt@Val+1)^(0+128),w
  4399  012A  00B9               	movwf	(___lmul@multiplicand+1)^(0+128)
  4400  012B  084A               	movf	WriteLongInt@Val^(0+128),w
  4401  012C  00B8               	movwf	___lmul@multiplicand^(0+128)
  4402  012D  120A  158A  27C4  120A  118A  	fcall	___lmul
  4403  0132  0837               	movf	(?___lmul+3)^(0+128),w
  4404  0133  00CD               	movwf	(WriteLongInt@Val+3)^(0+128)
  4405  0134  0836               	movf	(?___lmul+2)^(0+128),w
  4406  0135  00CC               	movwf	(WriteLongInt@Val+2)^(0+128)
  4407  0136  0835               	movf	(?___lmul+1)^(0+128),w
  4408  0137  00CB               	movwf	(WriteLongInt@Val+1)^(0+128)
  4409  0138  0834               	movf	?___lmul^(0+128),w
  4410  0139  297A               	goto	L16
  4411  013A                     l2245:	
  4412                           ;HD44780.c: 189: } else
  4413                           
  4414                           
  4415                           ;HD44780.c: 190: Lcd_WriteChar (y, x, 0x2B);
  4416  013A  0849               	movf	WriteLongInt@x^(0+128),w
  4417  013B  00C5               	movwf	Lcd_WriteChar@x^(0+128)
  4418  013C  302B               	movlw	43
  4419  013D  00C6               	movwf	Lcd_WriteChar@c^(0+128)
  4420  013E  0852               	movf	WriteLongInt@y^(0+128),w
  4421  013F  217C  120A  118A   	fcall	_Lcd_WriteChar
  4422  0142                     l2253:	
  4423  0142  1683               	bsf	3,5	;RP0=1, select bank1
  4424  0143  1303               	bcf	3,6	;RP1=0, select bank1
  4425  0144  084E               	movf	WriteLongInt@size^(0+128),w
  4426  0145  1903               	btfsc	3,2
  4427  0146  0008               	return
  4428                           
  4429                           ;HD44780.c: 193: size--;
  4430  0147  03CE               	decf	WriteLongInt@size^(0+128),f
  4431                           
  4432                           ;HD44780.c: 194: Lcd_WriteChar (y, x+size+POS, ((Val - ((Val/10)*10))+0x30));
  4433  0148  0851               	movf	WriteLongInt@POS^(0+128),w
  4434  0149  074E               	addwf	WriteLongInt@size^(0+128),w
  4435  014A  00D0               	movwf	??_WriteLongInt^(0+128)
  4436  014B  0849               	movf	WriteLongInt@x^(0+128),w
  4437  014C  0750               	addwf	??_WriteLongInt^(0+128),w
  4438  014D  00C5               	movwf	Lcd_WriteChar@x^(0+128)
  4439  014E  30F6               	movlw	246
  4440  014F  00C2               	movwf	___bmul@multiplicand^(0+128)
  4441  0150  2409  120A  118A   	fcall	PL10	;call to abstracted procedure
  4442  0153  300A               	movlw	10
  4443  0154  00B4               	movwf	___aldiv@divisor^(0+128)
  4444  0155  01B5               	clrf	(___aldiv@divisor+1)^(0+128)
  4445  0156  01B6               	clrf	(___aldiv@divisor+2)^(0+128)
  4446  0157  01B7               	clrf	(___aldiv@divisor+3)^(0+128)
  4447  0158  21A1               	fcall	___aldiv
  4448  0159  0834               	movf	?___aldiv^(0+128),w
  4449  015A  120A  158A  267C  120A  118A  	fcall	___bmul
  4450  015F  074A               	addwf	WriteLongInt@Val^(0+128),w
  4451  0160  3E30               	addlw	48
  4452  0161  00C6               	movwf	Lcd_WriteChar@c^(0+128)
  4453  0162  0852               	movf	WriteLongInt@y^(0+128),w
  4454  0163  217C  120A  118A   	fcall	_Lcd_WriteChar
  4455                           
  4456                           ;HD44780.c: 195: Val = Val/10;
  4457  0166  300A               	movlw	10
  4458  0167  1683               	bsf	3,5	;RP0=1, select bank1
  4459  0168  1303               	bcf	3,6	;RP1=0, select bank1
  4460  0169  00B4               	movwf	___aldiv@divisor^(0+128)
  4461  016A  01B5               	clrf	(___aldiv@divisor+1)^(0+128)
  4462  016B  01B6               	clrf	(___aldiv@divisor+2)^(0+128)
  4463  016C  01B7               	clrf	(___aldiv@divisor+3)^(0+128)
  4464  016D  2409  120A  118A   	fcall	PL10	;call to abstracted procedure
  4465  0170  21A1  120A  118A   	fcall	___aldiv
  4466  0173  0837               	movf	(?___aldiv+3)^(0+128),w
  4467  0174  00CD               	movwf	(WriteLongInt@Val+3)^(0+128)
  4468  0175  0836               	movf	(?___aldiv+2)^(0+128),w
  4469  0176  00CC               	movwf	(WriteLongInt@Val+2)^(0+128)
  4470  0177  0835               	movf	(?___aldiv+1)^(0+128),w
  4471  0178  00CB               	movwf	(WriteLongInt@Val+1)^(0+128)
  4472  0179  0834               	movf	?___aldiv^(0+128),w
  4473  017A                     L16:	
  4474  017A  00CA               	movwf	WriteLongInt@Val^(0+128)
  4475  017B  2942               	goto	l2253
  4476  017C                     __end_of_WriteLongInt:	
  4477  017C                     __ptext30:	
  4478 ;; *************** function _Lcd_WriteChar *****************
  4479 ;; Defined at:
  4480 ;;		line 99 in file "libs/HD44780.c"
  4481 ;; Parameters:    Size  Location     Type
  4482 ;;  y               1    wreg     unsigned char 
  4483 ;;  x               1   17[BANK1 ] unsigned char 
  4484 ;;  c               1   18[BANK1 ] unsigned char 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  y               1   19[BANK1 ] unsigned char 
  4487 ;;  data            1   20[BANK1 ] unsigned char 
  4488 ;; Return value:  Size  Location     Type
  4489 ;;                  1    wreg      void 
  4490 ;; Registers used:
  4491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4492 ;; Tracked objects:
  4493 ;;		On entry : 300/900
  4494 ;;		On exit  : 0/0
  4495 ;;		Unchanged: 0/0
  4496 ;; Data sizes:      BANK1   BANK3   BANK2
  4497 ;;      Params:         2       0       0
  4498 ;;      Locals:         2       0       0
  4499 ;;      Temps:          0       0       0
  4500 ;;      Totals:         4       0       0
  4501 ;;Total ram usage:        4 bytes
  4502 ;; Hardware stack levels used:    1
  4503 ;; Hardware stack levels required when called:    2
  4504 ;; This function calls:
  4505 ;;		_Lcd_CharCP
  4506 ;;		_Lcd_Command
  4507 ;; This function is called by:
  4508 ;;		_WriteLongInt
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           
  4513                           ;psect for function _Lcd_WriteChar
  4514  017C                     _Lcd_WriteChar:	
  4515                           
  4516                           ;incstack = 0
  4517                           ; Regs used in _Lcd_WriteChar: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4518                           ;Lcd_WriteChar@y stored from wreg
  4519  017C  00C7               	movwf	Lcd_WriteChar@y^(0+128)
  4520                           
  4521                           ;HD44780.c: 100: unsigned char data;
  4522                           ;HD44780.c: 101: switch(y){
  4523  017D  298B               	goto	l2107
  4524  017E                     l2097:	
  4525  017E  0845               	movf	Lcd_WriteChar@x^(0+128),w
  4526  017F  3E7F               	addlw	127
  4527  0180  2989               	goto	L21
  4528  0181                     l2099:	
  4529  0181  0845               	movf	Lcd_WriteChar@x^(0+128),w
  4530  0182  3EBF               	addlw	191
  4531  0183  2989               	goto	L21
  4532  0184                     l2101:	
  4533  0184  0845               	movf	Lcd_WriteChar@x^(0+128),w
  4534  0185  3E93               	addlw	147
  4535  0186  2989               	goto	L21
  4536  0187                     l2103:	
  4537  0187  0845               	movf	Lcd_WriteChar@x^(0+128),w
  4538  0188  3ED3               	addlw	211
  4539  0189                     L21:	
  4540  0189  00C8               	movwf	Lcd_WriteChar@data^(0+128)
  4541  018A  2999               	goto	l2109
  4542  018B                     l2107:	
  4543  018B  0847               	movf	Lcd_WriteChar@y^(0+128),w
  4544                           
  4545                           ; Switch size 1, requested type "space"
  4546                           ; Number of cases is 4, Range of values is 1 to 4
  4547                           ; switch strategies available:
  4548                           ; Name         Instructions Cycles
  4549                           ; simple_byte           13     7 (average)
  4550                           ; direct_byte           23    11 (fixed)
  4551                           ; jumptable            263     9 (fixed)
  4552                           ;	Chosen strategy is simple_byte
  4553  018C  3A01               	xorlw	1	; case 1
  4554  018D  1903               	skipnz
  4555  018E  297E               	goto	l2097
  4556  018F  3A03               	xorlw	3	; case 2
  4557  0190  1903               	skipnz
  4558  0191  2981               	goto	l2099
  4559  0192  3A01               	xorlw	1	; case 3
  4560  0193  1903               	skipnz
  4561  0194  2984               	goto	l2101
  4562  0195  3A07               	xorlw	7	; case 4
  4563  0196  1903               	skipnz
  4564  0197  2987               	goto	l2103
  4565  0198  2999               	goto	l2109
  4566  0199                     l2109:	
  4567                           
  4568                           ;HD44780.c: 107: Lcd_Command(data);
  4569  0199  0848               	movf	Lcd_WriteChar@data^(0+128),w
  4570  019A  2365  120A  118A   	fcall	_Lcd_Command
  4571                           
  4572                           ;HD44780.c: 108: Lcd_CharCP(c);
  4573  019D  1683               	bsf	3,5	;RP0=1, select bank1
  4574  019E  1303               	bcf	3,6	;RP1=0, select bank1
  4575  019F  0846               	movf	Lcd_WriteChar@c^(0+128),w
  4576  01A0  2A4F               	ljmp	_Lcd_CharCP
  4577  01A1                     __end_of_Lcd_WriteChar:	
  4578  01A1                     __ptext29:	
  4579 ;; *************** function ___aldiv *****************
  4580 ;; Defined at:
  4581 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  divisor         4    0[BANK1 ] long 
  4584 ;;  dividend        4    4[BANK1 ] long 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  quotient        4   10[BANK1 ] long 
  4587 ;;  sign            1    9[BANK1 ] unsigned char 
  4588 ;;  counter         1    8[BANK1 ] unsigned char 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;                  4    0[BANK1 ] long 
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0
  4593 ;; Tracked objects:
  4594 ;;		On entry : 300/900
  4595 ;;		On exit  : 300/100
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:      BANK1   BANK3   BANK2
  4598 ;;      Params:         8       0       0
  4599 ;;      Locals:         6       0       0
  4600 ;;      Temps:          0       0       0
  4601 ;;      Totals:        14       0       0
  4602 ;;Total ram usage:       14 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_WriteLongInt
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           
  4612                           ;psect for function ___aldiv
  4613  01A1                     ___aldiv:	
  4614                           
  4615                           ;incstack = 0
  4616                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4617  01A1  01BD               	clrf	___aldiv@sign^(0+128)
  4618  01A2  1FB7               	btfss	(___aldiv@divisor+3)^(0+128),7
  4619  01A3  29B1               	goto	l638
  4620  01A4  09B4               	comf	___aldiv@divisor^(0+128),f
  4621  01A5  09B5               	comf	(___aldiv@divisor+1)^(0+128),f
  4622  01A6  09B6               	comf	(___aldiv@divisor+2)^(0+128),f
  4623  01A7  09B7               	comf	(___aldiv@divisor+3)^(0+128),f
  4624  01A8  0AB4               	incf	___aldiv@divisor^(0+128),f
  4625  01A9  1903               	skipnz
  4626  01AA  0AB5               	incf	(___aldiv@divisor+1)^(0+128),f
  4627  01AB  1903               	skipnz
  4628  01AC  0AB6               	incf	(___aldiv@divisor+2)^(0+128),f
  4629  01AD  1903               	skipnz
  4630  01AE  0AB7               	incf	(___aldiv@divisor+3)^(0+128),f
  4631  01AF  01BD               	clrf	___aldiv@sign^(0+128)
  4632  01B0  0ABD               	incf	___aldiv@sign^(0+128),f
  4633  01B1                     l638:	
  4634  01B1  1FBB               	btfss	(___aldiv@dividend+3)^(0+128),7
  4635  01B2  29C0               	goto	l2175
  4636  01B3  09B8               	comf	___aldiv@dividend^(0+128),f
  4637  01B4  09B9               	comf	(___aldiv@dividend+1)^(0+128),f
  4638  01B5  09BA               	comf	(___aldiv@dividend+2)^(0+128),f
  4639  01B6  09BB               	comf	(___aldiv@dividend+3)^(0+128),f
  4640  01B7  0AB8               	incf	___aldiv@dividend^(0+128),f
  4641  01B8  1903               	skipnz
  4642  01B9  0AB9               	incf	(___aldiv@dividend+1)^(0+128),f
  4643  01BA  1903               	skipnz
  4644  01BB  0ABA               	incf	(___aldiv@dividend+2)^(0+128),f
  4645  01BC  1903               	skipnz
  4646  01BD  0ABB               	incf	(___aldiv@dividend+3)^(0+128),f
  4647  01BE  3001               	movlw	1
  4648  01BF  06BD               	xorwf	___aldiv@sign^(0+128),f
  4649  01C0                     l2175:	
  4650  01C0  01BE               	clrf	___aldiv@quotient^(0+128)
  4651  01C1  01BF               	clrf	(___aldiv@quotient+1)^(0+128)
  4652  01C2  01C0               	clrf	(___aldiv@quotient+2)^(0+128)
  4653  01C3  01C1               	clrf	(___aldiv@quotient+3)^(0+128)
  4654  01C4  0837               	movf	(___aldiv@divisor+3)^(0+128),w
  4655  01C5  0436               	iorwf	(___aldiv@divisor+2)^(0+128),w
  4656  01C6  0435               	iorwf	(___aldiv@divisor+1)^(0+128),w
  4657  01C7  0434               	iorwf	___aldiv@divisor^(0+128),w
  4658  01C8  1903               	skipnz
  4659  01C9  29FF               	goto	l2197
  4660  01CA  01BC               	clrf	___aldiv@counter^(0+128)
  4661  01CB                     L17:	
  4662  01CB  0ABC               	incf	___aldiv@counter^(0+128),f
  4663  01CC  1BB7               	btfsc	(___aldiv@divisor+3)^(0+128),7
  4664  01CD  29D4               	goto	l2185
  4665  01CE  1003               	clrc
  4666  01CF  0DB4               	rlf	___aldiv@divisor^(0+128),f
  4667  01D0  0DB5               	rlf	(___aldiv@divisor+1)^(0+128),f
  4668  01D1  0DB6               	rlf	(___aldiv@divisor+2)^(0+128),f
  4669  01D2  0DB7               	rlf	(___aldiv@divisor+3)^(0+128),f
  4670  01D3  29CB               	goto	L17
  4671  01D4                     l2185:	
  4672  01D4  1003               	clrc
  4673  01D5  0DBE               	rlf	___aldiv@quotient^(0+128),f
  4674  01D6  0DBF               	rlf	(___aldiv@quotient+1)^(0+128),f
  4675  01D7  0DC0               	rlf	(___aldiv@quotient+2)^(0+128),f
  4676  01D8  0DC1               	rlf	(___aldiv@quotient+3)^(0+128),f
  4677  01D9  0837               	movf	(___aldiv@divisor+3)^(0+128),w
  4678  01DA  023B               	subwf	(___aldiv@dividend+3)^(0+128),w
  4679  01DB  1D03               	skipz
  4680  01DC  29E7               	goto	u2465
  4681  01DD  0836               	movf	(___aldiv@divisor+2)^(0+128),w
  4682  01DE  023A               	subwf	(___aldiv@dividend+2)^(0+128),w
  4683  01DF  1D03               	skipz
  4684  01E0  29E7               	goto	u2465
  4685  01E1  0835               	movf	(___aldiv@divisor+1)^(0+128),w
  4686  01E2  0239               	subwf	(___aldiv@dividend+1)^(0+128),w
  4687  01E3  1D03               	skipz
  4688  01E4  29E7               	goto	u2465
  4689  01E5  0834               	movf	___aldiv@divisor^(0+128),w
  4690  01E6  0238               	subwf	___aldiv@dividend^(0+128),w
  4691  01E7                     u2465:	
  4692  01E7  1C03               	skipc
  4693  01E8  29F9               	goto	L18
  4694  01E9  0834               	movf	___aldiv@divisor^(0+128),w
  4695  01EA  02B8               	subwf	___aldiv@dividend^(0+128),f
  4696  01EB  0835               	movf	(___aldiv@divisor+1)^(0+128),w
  4697  01EC  1C03               	skipc
  4698  01ED  0F35               	incfsz	(___aldiv@divisor+1)^(0+128),w
  4699  01EE  02B9               	subwf	(___aldiv@dividend+1)^(0+128),f
  4700  01EF  0836               	movf	(___aldiv@divisor+2)^(0+128),w
  4701  01F0  1C03               	skipc
  4702  01F1  0F36               	incfsz	(___aldiv@divisor+2)^(0+128),w
  4703  01F2  02BA               	subwf	(___aldiv@dividend+2)^(0+128),f
  4704  01F3  0837               	movf	(___aldiv@divisor+3)^(0+128),w
  4705  01F4  1C03               	skipc
  4706  01F5  0F37               	incfsz	(___aldiv@divisor+3)^(0+128),w
  4707  01F6  02BB               	subwf	(___aldiv@dividend+3)^(0+128),f
  4708  01F7  143E               	bsf	___aldiv@quotient^(0+128),0
  4709  01F8  1003               	clrc
  4710  01F9                     L18:	
  4711  01F9  0CB7               	rrf	(___aldiv@divisor+3)^(0+128),f
  4712  01FA  0CB6               	rrf	(___aldiv@divisor+2)^(0+128),f
  4713  01FB  0CB5               	rrf	(___aldiv@divisor+1)^(0+128),f
  4714  01FC  0CB4               	rrf	___aldiv@divisor^(0+128),f
  4715  01FD  0BBC               	decfsz	___aldiv@counter^(0+128),f
  4716  01FE  29D4               	goto	l2185
  4717  01FF                     l2197:	
  4718  01FF  083D               	movf	___aldiv@sign^(0+128),w
  4719  0200  1903               	btfsc	3,2
  4720  0201  2A0D               	goto	l2201
  4721  0202  09BE               	comf	___aldiv@quotient^(0+128),f
  4722  0203  09BF               	comf	(___aldiv@quotient+1)^(0+128),f
  4723  0204  09C0               	comf	(___aldiv@quotient+2)^(0+128),f
  4724  0205  09C1               	comf	(___aldiv@quotient+3)^(0+128),f
  4725  0206  0ABE               	incf	___aldiv@quotient^(0+128),f
  4726  0207  1903               	skipnz
  4727  0208  0ABF               	incf	(___aldiv@quotient+1)^(0+128),f
  4728  0209  1903               	skipnz
  4729  020A  0AC0               	incf	(___aldiv@quotient+2)^(0+128),f
  4730  020B  1903               	skipnz
  4731  020C  0AC1               	incf	(___aldiv@quotient+3)^(0+128),f
  4732  020D                     l2201:	
  4733  020D  0841               	movf	(___aldiv@quotient+3)^(0+128),w
  4734  020E  00B7               	movwf	(?___aldiv+3)^(0+128)
  4735  020F  0840               	movf	(___aldiv@quotient+2)^(0+128),w
  4736  0210  00B6               	movwf	(?___aldiv+2)^(0+128)
  4737  0211  083F               	movf	(___aldiv@quotient+1)^(0+128),w
  4738  0212  00B5               	movwf	(?___aldiv+1)^(0+128)
  4739  0213  083E               	movf	___aldiv@quotient^(0+128),w
  4740  0214  00B4               	movwf	?___aldiv^(0+128)
  4741  0215  0008               	return
  4742  0216                     __end_of___aldiv:	
  4743  0216                     __ptext22:	
  4744 ;; *************** function _Lcd_Text *****************
  4745 ;; Defined at:
  4746 ;;		line 76 in file "libs/HD44780.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  y               1    wreg     unsigned char 
  4749 ;;  x               1    4[BANK1 ] unsigned char 
  4750 ;;  buffer          1    5[BANK1 ] PTR unsigned char 
  4751 ;;		 -> STR_3(7), STR_2(2), STR_1(5), 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;  y               1    6[BANK1 ] unsigned char 
  4754 ;;  data            1    7[BANK1 ] unsigned char 
  4755 ;; Return value:  Size  Location     Type
  4756 ;;                  1    wreg      void 
  4757 ;; Registers used:
  4758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4759 ;; Tracked objects:
  4760 ;;		On entry : 300/100
  4761 ;;		On exit  : 300/100
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:      BANK1   BANK3   BANK2
  4764 ;;      Params:         2       0       0
  4765 ;;      Locals:         2       0       0
  4766 ;;      Temps:          0       0       0
  4767 ;;      Totals:         4       0       0
  4768 ;;Total ram usage:        4 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; Hardware stack levels required when called:    2
  4771 ;; This function calls:
  4772 ;;		_Lcd_CharCP
  4773 ;;		_Lcd_Command
  4774 ;; This function is called by:
  4775 ;;		_main
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           
  4780                           ;psect for function _Lcd_Text
  4781  0216                     _Lcd_Text:	
  4782                           
  4783                           ;incstack = 0
  4784                           ; Regs used in _Lcd_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4785                           ;Lcd_Text@y stored from wreg
  4786  0216  00BA               	movwf	Lcd_Text@y^(0+128)
  4787                           
  4788                           ;HD44780.c: 77: unsigned char data;
  4789                           ;HD44780.c: 78: switch(y){
  4790  0217  2A25               	goto	l2563
  4791  0218                     l2553:	
  4792  0218  0838               	movf	Lcd_Text@x^(0+128),w
  4793  0219  3E7F               	addlw	127
  4794  021A  2A23               	goto	L6
  4795  021B                     l2555:	
  4796  021B  0838               	movf	Lcd_Text@x^(0+128),w
  4797  021C  3EBF               	addlw	191
  4798  021D  2A23               	goto	L6
  4799  021E                     l2557:	
  4800  021E  0838               	movf	Lcd_Text@x^(0+128),w
  4801  021F  3E93               	addlw	147
  4802  0220  2A23               	goto	L6
  4803  0221                     l2559:	
  4804  0221  0838               	movf	Lcd_Text@x^(0+128),w
  4805  0222  3ED3               	addlw	211
  4806  0223                     L6:	
  4807  0223  00BB               	movwf	Lcd_Text@data^(0+128)
  4808  0224  2A33               	goto	l2565
  4809  0225                     l2563:	
  4810  0225  083A               	movf	Lcd_Text@y^(0+128),w
  4811                           
  4812                           ; Switch size 1, requested type "space"
  4813                           ; Number of cases is 4, Range of values is 1 to 4
  4814                           ; switch strategies available:
  4815                           ; Name         Instructions Cycles
  4816                           ; simple_byte           13     7 (average)
  4817                           ; direct_byte           23    11 (fixed)
  4818                           ; jumptable            263     9 (fixed)
  4819                           ;	Chosen strategy is simple_byte
  4820  0226  3A01               	xorlw	1	; case 1
  4821  0227  1903               	skipnz
  4822  0228  2A18               	goto	l2553
  4823  0229  3A03               	xorlw	3	; case 2
  4824  022A  1903               	skipnz
  4825  022B  2A1B               	goto	l2555
  4826  022C  3A01               	xorlw	1	; case 3
  4827  022D  1903               	skipnz
  4828  022E  2A1E               	goto	l2557
  4829  022F  3A07               	xorlw	7	; case 4
  4830  0230  1903               	skipnz
  4831  0231  2A21               	goto	l2559
  4832  0232  2A33               	goto	l2565
  4833  0233                     l2565:	
  4834                           
  4835                           ;HD44780.c: 84: Lcd_Command(data);
  4836  0233  083B               	movf	Lcd_Text@data^(0+128),w
  4837  0234  2365               	fcall	_Lcd_Command
  4838  0235                     l2571:	
  4839                           ;HD44780.c: 85: while(*buffer)
  4840                           
  4841  0235  1683               	bsf	3,5	;RP0=1, select bank1
  4842  0236  1303               	bcf	3,6	;RP1=0, select bank1
  4843  0237  0839               	movf	Lcd_Text@buffer^(0+128),w
  4844  0238  0084               	movwf	4
  4845  0239  120A  158A  2000  120A  118A  	fcall	stringdir
  4846  023E  3A00               	xorlw	0
  4847  023F  1903               	btfsc	3,2
  4848  0240  0008               	return
  4849                           
  4850                           ;HD44780.c: 86: {
  4851                           ;HD44780.c: 87: Lcd_CharCP(*buffer);
  4852  0241  0839               	movf	Lcd_Text@buffer^(0+128),w
  4853  0242  0084               	movwf	4
  4854  0243  120A  158A  2000  120A  118A  	fcall	stringdir
  4855  0248  224F  120A  118A   	fcall	_Lcd_CharCP
  4856                           
  4857                           ;HD44780.c: 88: buffer++;
  4858  024B  1683               	bsf	3,5	;RP0=1, select bank1
  4859  024C  1303               	bcf	3,6	;RP1=0, select bank1
  4860  024D  0AB9               	incf	Lcd_Text@buffer^(0+128),f
  4861  024E  2A35               	goto	l2571
  4862  024F                     __end_of_Lcd_Text:	
  4863  024F                     __ptext32:	
  4864 ;; *************** function _Lcd_CharCP *****************
  4865 ;; Defined at:
  4866 ;;		line 115 in file "libs/HD44780.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  c               1    wreg     unsigned char 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;  c               1    3[BANK1 ] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2, status,0, pclath, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 300/100
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:      BANK1   BANK3   BANK2
  4880 ;;      Params:         0       0       0
  4881 ;;      Locals:         1       0       0
  4882 ;;      Temps:          1       0       0
  4883 ;;      Totals:         2       0       0
  4884 ;;Total ram usage:        2 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    1
  4887 ;; This function calls:
  4888 ;;		_Lcd_Delay5500us
  4889 ;;		_Lcd_Delay5us
  4890 ;; This function is called by:
  4891 ;;		_Lcd_Text
  4892 ;;		_Lcd_WriteChar
  4893 ;; This function uses a non-reentrant model
  4894 ;;
  4895                           
  4896                           
  4897                           ;psect for function _Lcd_CharCP
  4898  024F                     _Lcd_CharCP:	
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _Lcd_CharCP: [wreg+status,2+status,0+pclath+cstack]
  4902                           ;Lcd_CharCP@c stored from wreg
  4903  024F  00B7               	movwf	Lcd_CharCP@c^(0+128)
  4904                           
  4905                           ;HD44780.c: 116: RA1 = 0; RA0 = 1;
  4906  0250  1283               	bcf	3,5	;RP0=0, select bank0
  4907  0251  1085               	bcf	5,1	;volatile
  4908  0252  1405               	bsf	5,0	;volatile
  4909                           
  4910                           ;HD44780.c: 117: RA5 = (c & 0b10000000)>>7; RA4 = (c & 0b01000000)>>6;
  4911  0253  1683               	bsf	3,5	;RP0=1, select bank1
  4912  0254  0837               	movf	Lcd_CharCP@c^(0+128),w
  4913  0255  00B6               	movwf	??_Lcd_CharCP^(0+128)
  4914  0256  3007               	movlw	7
  4915  0257                     u1825:	
  4916  0257  1003               	clrc
  4917  0258  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  4918  0259  3EFF               	addlw	-1
  4919  025A  1D03               	skipz
  4920  025B  2A57               	goto	u1825
  4921  025C  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  4922  025D  2A62               	goto	u1830
  4923  025E  1283               	bcf	3,5	;RP0=0, select bank0
  4924  025F  1303               	bcf	3,6	;RP1=0, select bank0
  4925  0260  1685               	bsf	5,5	;volatile
  4926  0261  2A65               	goto	u1844
  4927  0262                     u1830:	
  4928  0262  1283               	bcf	3,5	;RP0=0, select bank0
  4929  0263  1303               	bcf	3,6	;RP1=0, select bank0
  4930  0264  1285               	bcf	5,5	;volatile
  4931  0265                     u1844:	
  4932  0265  1683               	bsf	3,5	;RP0=1, select bank1
  4933  0266  0837               	movf	Lcd_CharCP@c^(0+128),w
  4934  0267  00B6               	movwf	??_Lcd_CharCP^(0+128)
  4935  0268  3006               	movlw	6
  4936  0269                     u1855:	
  4937  0269  1003               	clrc
  4938  026A  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  4939  026B  3EFF               	addlw	-1
  4940  026C  1D03               	skipz
  4941  026D  2A69               	goto	u1855
  4942  026E  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  4943  026F  2A74               	goto	u1860
  4944  0270  1283               	bcf	3,5	;RP0=0, select bank0
  4945  0271  1303               	bcf	3,6	;RP1=0, select bank0
  4946  0272  1605               	bsf	5,4	;volatile
  4947  0273  2A77               	goto	u1874
  4948  0274                     u1860:	
  4949  0274  1283               	bcf	3,5	;RP0=0, select bank0
  4950  0275  1303               	bcf	3,6	;RP1=0, select bank0
  4951  0276  1205               	bcf	5,4	;volatile
  4952  0277                     u1874:	
  4953                           
  4954                           ;HD44780.c: 118: RA3 = (c & 0b00100000)>>5; RA2 = (c & 0b00010000)>>4;
  4955  0277  1683               	bsf	3,5	;RP0=1, select bank1
  4956  0278  0837               	movf	Lcd_CharCP@c^(0+128),w
  4957  0279  00B6               	movwf	??_Lcd_CharCP^(0+128)
  4958  027A  3005               	movlw	5
  4959  027B                     u1885:	
  4960  027B  1003               	clrc
  4961  027C  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  4962  027D  3EFF               	addlw	-1
  4963  027E  1D03               	skipz
  4964  027F  2A7B               	goto	u1885
  4965  0280  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  4966  0281  2A86               	goto	u1890
  4967  0282  1283               	bcf	3,5	;RP0=0, select bank0
  4968  0283  1303               	bcf	3,6	;RP1=0, select bank0
  4969  0284  1585               	bsf	5,3	;volatile
  4970  0285  2A89               	goto	u1904
  4971  0286                     u1890:	
  4972  0286  1283               	bcf	3,5	;RP0=0, select bank0
  4973  0287  1303               	bcf	3,6	;RP1=0, select bank0
  4974  0288  1185               	bcf	5,3	;volatile
  4975  0289                     u1904:	
  4976  0289  1683               	bsf	3,5	;RP0=1, select bank1
  4977  028A  0837               	movf	Lcd_CharCP@c^(0+128),w
  4978  028B  00B6               	movwf	??_Lcd_CharCP^(0+128)
  4979  028C  3004               	movlw	4
  4980  028D                     u1915:	
  4981  028D  1003               	clrc
  4982  028E  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  4983  028F  3EFF               	addlw	-1
  4984  0290  1D03               	skipz
  4985  0291  2A8D               	goto	u1915
  4986  0292  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  4987  0293  2A98               	goto	u1920
  4988  0294  1283               	bcf	3,5	;RP0=0, select bank0
  4989  0295  1303               	bcf	3,6	;RP1=0, select bank0
  4990  0296  1505               	bsf	5,2	;volatile
  4991  0297  2A9B               	goto	l1919
  4992  0298                     u1920:	
  4993  0298  1283               	bcf	3,5	;RP0=0, select bank0
  4994  0299  1303               	bcf	3,6	;RP1=0, select bank0
  4995  029A  1105               	bcf	5,2	;volatile
  4996  029B                     l1919:	
  4997                           
  4998                           ;HD44780.c: 119: _delay(10);
  4999  029B  3003               	movlw	3
  5000  029C  1683               	bsf	3,5	;RP0=1, select bank1
  5001  029D  00B6               	movwf	??_Lcd_CharCP^(0+128)
  5002  029E                     u3107:	
  5003  029E  0BB6               	decfsz	??_Lcd_CharCP^(0+128),f
  5004  029F  2A9E               	goto	u3107
  5005                           
  5006                           ;HD44780.c: 120: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  5007  02A0  1283               	bcf	3,5	;RP0=0, select bank0
  5008  02A1  1303               	bcf	3,6	;RP1=0, select bank0
  5009  02A2  1485               	bsf	5,1	;volatile
  5010  02A3  2402  120A  118A   	fcall	_Lcd_Delay5us
  5011  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  5012  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  5013  02A8  1085               	bcf	5,1	;volatile
  5014                           
  5015                           ;HD44780.c: 121: RA5 = (c & 0b00001000)>>3; RA4 = (c & 0b00000100)>>2;
  5016  02A9  2412  120A  118A   	fcall	PL14	;call to abstracted procedure
  5017  02AC  1003               	clrc
  5018  02AD  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  5019  02AE  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  5020  02AF  2AB4               	goto	u1940
  5021  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  5022  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  5023  02B2  1685               	bsf	5,5	;volatile
  5024  02B3  2AB7               	goto	l1929
  5025  02B4                     u1940:	
  5026  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  5027  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  5028  02B6  1285               	bcf	5,5	;volatile
  5029  02B7                     l1929:	
  5030  02B7  2412  120A  118A   	fcall	PL14	;call to abstracted procedure
  5031  02BA  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  5032  02BB  2AC0               	goto	u1960
  5033  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  5034  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  5035  02BE  1605               	bsf	5,4	;volatile
  5036  02BF  2AC3               	goto	l1931
  5037  02C0                     u1960:	
  5038  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  5039  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  5040  02C2  1205               	bcf	5,4	;volatile
  5041  02C3                     l1931:	
  5042                           
  5043                           ;HD44780.c: 122: RA3 = (c & 0b00000010)>>1; RA2 = (c & 0b00000001);
  5044  02C3  1683               	bsf	3,5	;RP0=1, select bank1
  5045  02C4  0837               	movf	Lcd_CharCP@c^(0+128),w
  5046  02C5  00B6               	movwf	??_Lcd_CharCP^(0+128)
  5047  02C6  1003               	clrc
  5048  02C7  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  5049  02C8  1C36               	btfss	??_Lcd_CharCP^(0+128),0
  5050  02C9  2ACE               	goto	u1980
  5051  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  5052  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  5053  02CC  1585               	bsf	5,3	;volatile
  5054  02CD  2AD1               	goto	l1933
  5055  02CE                     u1980:	
  5056  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  5057  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  5058  02D0  1185               	bcf	5,3	;volatile
  5059  02D1                     l1933:	
  5060  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  5061  02D2  1C37               	btfss	Lcd_CharCP@c^(0+128),0
  5062  02D3  2AD8               	goto	u2000
  5063  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  5064  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  5065  02D6  1505               	bsf	5,2	;volatile
  5066  02D7  2ADB               	goto	l1935
  5067  02D8                     u2000:	
  5068  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  5069  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  5070  02DA  1105               	bcf	5,2	;volatile
  5071  02DB                     l1935:	
  5072                           
  5073                           ;HD44780.c: 123: _delay(10);
  5074  02DB  3003               	movlw	3
  5075  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  5076  02DD  00B6               	movwf	??_Lcd_CharCP^(0+128)
  5077  02DE                     u3117:	
  5078  02DE  0BB6               	decfsz	??_Lcd_CharCP^(0+128),f
  5079  02DF  2ADE               	goto	u3117
  5080                           
  5081                           ;HD44780.c: 124: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  5082  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  5083  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  5084  02E2  1485               	bsf	5,1	;volatile
  5085  02E3  2402  120A  118A   	fcall	_Lcd_Delay5us
  5086  02E6  1283               	bcf	3,5	;RP0=0, select bank0
  5087  02E7  1303               	bcf	3,6	;RP1=0, select bank0
  5088  02E8  1085               	bcf	5,1	;volatile
  5089                           
  5090                           ;HD44780.c: 125: Lcd_Delay5us(); Lcd_Delay5500us();
  5091  02E9  2402  120A  118A   	fcall	_Lcd_Delay5us
  5092  02EC  2B5A               	ljmp	l1859
  5093  02ED                     __end_of_Lcd_CharCP:	
  5094  02ED                     __ptext23:	
  5095 ;; *************** function _Lcd_Init *****************
  5096 ;; Defined at:
  5097 ;;		line 17 in file "libs/HD44780.c"
  5098 ;; Parameters:    Size  Location     Type
  5099 ;;		None
  5100 ;; Auto vars:     Size  Location     Type
  5101 ;;  data            1    4[BANK1 ] unsigned char 
  5102 ;; Return value:  Size  Location     Type
  5103 ;;                  1    wreg      void 
  5104 ;; Registers used:
  5105 ;;		wreg, status,2, status,0, pclath, cstack
  5106 ;; Tracked objects:
  5107 ;;		On entry : B00/0
  5108 ;;		On exit  : 0/0
  5109 ;;		Unchanged: 0/0
  5110 ;; Data sizes:      BANK1   BANK3   BANK2
  5111 ;;      Params:         0       0       0
  5112 ;;      Locals:         1       0       0
  5113 ;;      Temps:          0       0       0
  5114 ;;      Totals:         1       0       0
  5115 ;;Total ram usage:        1 bytes
  5116 ;; Hardware stack levels used:    1
  5117 ;; Hardware stack levels required when called:    2
  5118 ;; This function calls:
  5119 ;;		_Lcd_Command
  5120 ;;		_Lcd_Delay5500us
  5121 ;;		_Lcd_Delay5us
  5122 ;; This function is called by:
  5123 ;;		_main
  5124 ;; This function uses a non-reentrant model
  5125 ;;
  5126                           
  5127                           
  5128                           ;psect for function _Lcd_Init
  5129  02ED                     _Lcd_Init:	
  5130                           
  5131                           ;HD44780.c: 19: ANSEL = 0x00;
  5132                           
  5133                           ;incstack = 0
  5134                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5135  02ED  1683               	bsf	3,5	;RP0=1, select bank3
  5136  02EE  1703               	bsf	3,6	;RP1=1, select bank3
  5137  02EF  0188               	clrf	8	;volatile
  5138                           
  5139                           ;HD44780.c: 20: ANSELH = 0x00;
  5140  02F0  0189               	clrf	9	;volatile
  5141                           
  5142                           ;HD44780.c: 23: unsigned char data;
  5143                           ;HD44780.c: 24: TRISAbits.TRISA5 = 0; TRISAbits.TRISA4 = 0; TRISAbits.TRISA3 = 0; TRISAb
      +                          its.TRISA2 = 0; TRISAbits.TRISA1 = 0; TRISAbits.TRISA0 = 0;
  5144  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  5145  02F2  2422  120A  118A   	fcall	PL22	;call to abstracted procedure
  5146                           
  5147                           ;HD44780.c: 25: RA5 = 0; RA4 = 0; RA3 = 0; RA2 = 0; RA1 = 0; RA0 = 0;
  5148  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  5149  02F6  2422  120A  118A   	fcall	PL22	;call to abstracted procedure
  5150                           
  5151                           ;HD44780.c: 26: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  5152  02F9  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5153  02FC  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5154  02FF  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5155                           
  5156                           ;HD44780.c: 27: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us();
  5157  0302  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5158  0305  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5159  0308  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5160                           
  5161                           ;HD44780.c: 28: for(data = 1; data < 4; data ++)
  5162  030B  1683               	bsf	3,5	;RP0=1, select bank1
  5163  030C  1303               	bcf	3,6	;RP1=0, select bank1
  5164  030D  01B8               	clrf	Lcd_Init@data^(0+128)
  5165  030E  0AB8               	incf	Lcd_Init@data^(0+128),f
  5166  030F                     l52:	
  5167                           
  5168                           ;HD44780.c: 29: {
  5169                           ;HD44780.c: 30: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  5170  030F  1283               	bcf	3,5	;RP0=0, select bank0
  5171  0310  1285               	bcf	5,5	;volatile
  5172  0311  1205               	bcf	5,4	;volatile
  5173  0312  1585               	bsf	5,3	;volatile
  5174  0313  1505               	bsf	5,2	;volatile
  5175  0314  1085               	bcf	5,1	;volatile
  5176  0315  1005               	bcf	5,0	;volatile
  5177                           
  5178                           ;HD44780.c: 31: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 1; RA0 = 0;
  5179  0316  1285               	bcf	5,5	;volatile
  5180  0317  1205               	bcf	5,4	;volatile
  5181  0318  1585               	bsf	5,3	;volatile
  5182  0319  1505               	bsf	5,2	;volatile
  5183  031A  1485               	bsf	5,1	;volatile
  5184  031B  1005               	bcf	5,0	;volatile
  5185                           
  5186                           ;HD44780.c: 32: Lcd_Delay5us();
  5187  031C  2402  120A  118A   	fcall	_Lcd_Delay5us
  5188                           
  5189                           ;HD44780.c: 33: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 1; RA1 = 0; RA0 = 0;
  5190  031F  1283               	bcf	3,5	;RP0=0, select bank0
  5191  0320  1303               	bcf	3,6	;RP1=0, select bank0
  5192  0321  1285               	bcf	5,5	;volatile
  5193  0322  1205               	bcf	5,4	;volatile
  5194  0323  1585               	bsf	5,3	;volatile
  5195  0324  1505               	bsf	5,2	;volatile
  5196  0325  1085               	bcf	5,1	;volatile
  5197  0326  1005               	bcf	5,0	;volatile
  5198                           
  5199                           ;HD44780.c: 34: Lcd_Delay5500us();
  5200  0327  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5201  032A  1683               	bsf	3,5	;RP0=1, select bank1
  5202  032B  1303               	bcf	3,6	;RP1=0, select bank1
  5203  032C  3004               	movlw	4
  5204  032D  0AB8               	incf	Lcd_Init@data^(0+128),f
  5205  032E  0238               	subwf	Lcd_Init@data^(0+128),w
  5206  032F  1C03               	skipc
  5207  0330  2B0F               	goto	l52
  5208                           
  5209                           ;HD44780.c: 35: }
  5210                           ;HD44780.c: 36: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  5211  0331  1283               	bcf	3,5	;RP0=0, select bank0
  5212  0332  1285               	bcf	5,5	;volatile
  5213  0333  1205               	bcf	5,4	;volatile
  5214  0334  1585               	bsf	5,3	;volatile
  5215  0335  1105               	bcf	5,2	;volatile
  5216  0336  1085               	bcf	5,1	;volatile
  5217  0337  1005               	bcf	5,0	;volatile
  5218                           
  5219                           ;HD44780.c: 37: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 1; RA0 = 0;
  5220  0338  1285               	bcf	5,5	;volatile
  5221  0339  1205               	bcf	5,4	;volatile
  5222  033A  1585               	bsf	5,3	;volatile
  5223  033B  1105               	bcf	5,2	;volatile
  5224  033C  1485               	bsf	5,1	;volatile
  5225  033D  1005               	bcf	5,0	;volatile
  5226                           
  5227                           ;HD44780.c: 38: Lcd_Delay5us();
  5228  033E  2402  120A  118A   	fcall	_Lcd_Delay5us
  5229                           
  5230                           ;HD44780.c: 39: RA5 = 0; RA4 = 0; RA3 = 1; RA2 = 0; RA1 = 0; RA0 = 0;
  5231  0341  1283               	bcf	3,5	;RP0=0, select bank0
  5232  0342  1303               	bcf	3,6	;RP1=0, select bank0
  5233  0343  1285               	bcf	5,5	;volatile
  5234  0344  1205               	bcf	5,4	;volatile
  5235  0345  1585               	bsf	5,3	;volatile
  5236  0346  1105               	bcf	5,2	;volatile
  5237  0347  1085               	bcf	5,1	;volatile
  5238  0348  1005               	bcf	5,0	;volatile
  5239                           
  5240                           ;HD44780.c: 40: Lcd_Delay5500us();
  5241  0349  235A  120A  118A   	fcall	_Lcd_Delay5500us
  5242  034C  3028               	movlw	40
  5243  034D  2365  120A  118A   	fcall	_Lcd_Command
  5244  0350  3010               	movlw	16
  5245  0351  2365  120A  118A   	fcall	_Lcd_Command
  5246  0354  3001               	movlw	1
  5247  0355  2365  120A  118A   	fcall	_Lcd_Command
  5248  0358  300F               	movlw	15
  5249  0359  2B65               	ljmp	_Lcd_Command
  5250  035A                     __end_of_Lcd_Init:	
  5251  035A                     __ptext34:	
  5252 ;; *************** function _Lcd_Delay5500us *****************
  5253 ;; Defined at:
  5254 ;;		line 152 in file "libs/HD44780.c"
  5255 ;; Parameters:    Size  Location     Type
  5256 ;;		None
  5257 ;; Auto vars:     Size  Location     Type
  5258 ;;		None
  5259 ;; Return value:  Size  Location     Type
  5260 ;;                  1    wreg      void 
  5261 ;; Registers used:
  5262 ;;		wreg
  5263 ;; Tracked objects:
  5264 ;;		On entry : 0/0
  5265 ;;		On exit  : 0/0
  5266 ;;		Unchanged: 0/0
  5267 ;; Data sizes:      BANK1   BANK3   BANK2
  5268 ;;      Params:         0       0       0
  5269 ;;      Locals:         0       0       0
  5270 ;;      Temps:          2       0       0
  5271 ;;      Totals:         2       0       0
  5272 ;;Total ram usage:        2 bytes
  5273 ;; Hardware stack levels used:    1
  5274 ;; This function calls:
  5275 ;;		Nothing
  5276 ;; This function is called by:
  5277 ;;		_Lcd_Init
  5278 ;;		_Lcd_CharCP
  5279 ;;		_Lcd_Command
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           
  5284                           ;psect for function _Lcd_Delay5500us
  5285  035A                     _Lcd_Delay5500us:	
  5286  035A                     l1859:	
  5287                           ;incstack = 0
  5288                           ; Regs used in _Lcd_Delay5500us: [wreg]
  5289                           
  5290                           
  5291                           ;HD44780.c: 153: _delay((unsigned long)((5500)*(4000000/4000000.0)));
  5292  035A  3008               	movlw	8
  5293  035B  1683               	bsf	3,5	;RP0=1, select bank1
  5294  035C  1303               	bcf	3,6	;RP1=0, select bank1
  5295  035D  00B5               	movwf	(??_Lcd_Delay5500us^(0+128)+1)
  5296  035E  3023               	movlw	35
  5297  035F  00B4               	movwf	??_Lcd_Delay5500us^(0+128)
  5298  0360                     u3127:	
  5299  0360  0BB4               	decfsz	??_Lcd_Delay5500us^(0+128),f
  5300  0361  2B60               	goto	u3127
  5301  0362  0BB5               	decfsz	(??_Lcd_Delay5500us^(0+128)+1),f
  5302  0363  2B60               	goto	u3127
  5303  0364  0008               	return
  5304  0365                     __end_of_Lcd_Delay5500us:	
  5305  0365                     __ptext31:	
  5306 ;; *************** function _Lcd_Command *****************
  5307 ;; Defined at:
  5308 ;;		line 132 in file "libs/HD44780.c"
  5309 ;; Parameters:    Size  Location     Type
  5310 ;;  command         1    wreg     unsigned char 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  command         1    3[BANK1 ] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  1    wreg      void 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0, pclath, cstack
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/100
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:      BANK1   BANK3   BANK2
  5322 ;;      Params:         0       0       0
  5323 ;;      Locals:         1       0       0
  5324 ;;      Temps:          1       0       0
  5325 ;;      Totals:         2       0       0
  5326 ;;Total ram usage:        2 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    1
  5329 ;; This function calls:
  5330 ;;		_Lcd_Delay5500us
  5331 ;;		_Lcd_Delay5us
  5332 ;; This function is called by:
  5333 ;;		_Lcd_Init
  5334 ;;		_Lcd_Text
  5335 ;;		_Lcd_WriteChar
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _Lcd_Command
  5341  0365                     _Lcd_Command:	
  5342                           
  5343                           ;incstack = 0
  5344                           ; Regs used in _Lcd_Command: [wreg+status,2+status,0+pclath+cstack]
  5345                           ;Lcd_Command@command stored from wreg
  5346  0365  1683               	bsf	3,5	;RP0=1, select bank1
  5347  0366  1303               	bcf	3,6	;RP1=0, select bank1
  5348  0367  00B7               	movwf	Lcd_Command@command^(0+128)
  5349                           
  5350                           ;HD44780.c: 133: RA1 = 0; RA0 = 0;
  5351  0368  1283               	bcf	3,5	;RP0=0, select bank0
  5352  0369  1085               	bcf	5,1	;volatile
  5353  036A  1005               	bcf	5,0	;volatile
  5354                           
  5355                           ;HD44780.c: 134: RA5 = (command & 0b10000000)>>7; RA4 = (command & 0b01000000)>>6;
  5356  036B  1683               	bsf	3,5	;RP0=1, select bank1
  5357  036C  0837               	movf	Lcd_Command@command^(0+128),w
  5358  036D  00B6               	movwf	??_Lcd_Command^(0+128)
  5359  036E  3007               	movlw	7
  5360  036F                     u1625:	
  5361  036F  1003               	clrc
  5362  0370  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5363  0371  3EFF               	addlw	-1
  5364  0372  1D03               	skipz
  5365  0373  2B6F               	goto	u1625
  5366  0374  1C36               	btfss	??_Lcd_Command^(0+128),0
  5367  0375  2B7A               	goto	u1630
  5368  0376  1283               	bcf	3,5	;RP0=0, select bank0
  5369  0377  1303               	bcf	3,6	;RP1=0, select bank0
  5370  0378  1685               	bsf	5,5	;volatile
  5371  0379  2B7D               	goto	u1644
  5372  037A                     u1630:	
  5373  037A  1283               	bcf	3,5	;RP0=0, select bank0
  5374  037B  1303               	bcf	3,6	;RP1=0, select bank0
  5375  037C  1285               	bcf	5,5	;volatile
  5376  037D                     u1644:	
  5377  037D  1683               	bsf	3,5	;RP0=1, select bank1
  5378  037E  0837               	movf	Lcd_Command@command^(0+128),w
  5379  037F  00B6               	movwf	??_Lcd_Command^(0+128)
  5380  0380  3006               	movlw	6
  5381  0381                     u1655:	
  5382  0381  1003               	clrc
  5383  0382  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5384  0383  3EFF               	addlw	-1
  5385  0384  1D03               	skipz
  5386  0385  2B81               	goto	u1655
  5387  0386  1C36               	btfss	??_Lcd_Command^(0+128),0
  5388  0387  2B8C               	goto	u1660
  5389  0388  1283               	bcf	3,5	;RP0=0, select bank0
  5390  0389  1303               	bcf	3,6	;RP1=0, select bank0
  5391  038A  1605               	bsf	5,4	;volatile
  5392  038B  2B8F               	goto	u1674
  5393  038C                     u1660:	
  5394  038C  1283               	bcf	3,5	;RP0=0, select bank0
  5395  038D  1303               	bcf	3,6	;RP1=0, select bank0
  5396  038E  1205               	bcf	5,4	;volatile
  5397  038F                     u1674:	
  5398                           
  5399                           ;HD44780.c: 135: RA3 = (command & 0b00100000)>>5; RA2 = (command & 0b00010000)>>4;
  5400  038F  1683               	bsf	3,5	;RP0=1, select bank1
  5401  0390  0837               	movf	Lcd_Command@command^(0+128),w
  5402  0391  00B6               	movwf	??_Lcd_Command^(0+128)
  5403  0392  3005               	movlw	5
  5404  0393                     u1685:	
  5405  0393  1003               	clrc
  5406  0394  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5407  0395  3EFF               	addlw	-1
  5408  0396  1D03               	skipz
  5409  0397  2B93               	goto	u1685
  5410  0398  1C36               	btfss	??_Lcd_Command^(0+128),0
  5411  0399  2B9E               	goto	u1690
  5412  039A  1283               	bcf	3,5	;RP0=0, select bank0
  5413  039B  1303               	bcf	3,6	;RP1=0, select bank0
  5414  039C  1585               	bsf	5,3	;volatile
  5415  039D  2BA1               	goto	u1704
  5416  039E                     u1690:	
  5417  039E  1283               	bcf	3,5	;RP0=0, select bank0
  5418  039F  1303               	bcf	3,6	;RP1=0, select bank0
  5419  03A0  1185               	bcf	5,3	;volatile
  5420  03A1                     u1704:	
  5421  03A1  1683               	bsf	3,5	;RP0=1, select bank1
  5422  03A2  0837               	movf	Lcd_Command@command^(0+128),w
  5423  03A3  00B6               	movwf	??_Lcd_Command^(0+128)
  5424  03A4  3004               	movlw	4
  5425  03A5                     u1715:	
  5426  03A5  1003               	clrc
  5427  03A6  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5428  03A7  3EFF               	addlw	-1
  5429  03A8  1D03               	skipz
  5430  03A9  2BA5               	goto	u1715
  5431  03AA  1C36               	btfss	??_Lcd_Command^(0+128),0
  5432  03AB  2BB0               	goto	u1720
  5433  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  5434  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  5435  03AE  1505               	bsf	5,2	;volatile
  5436  03AF  2BB3               	goto	l1891
  5437  03B0                     u1720:	
  5438  03B0  1283               	bcf	3,5	;RP0=0, select bank0
  5439  03B1  1303               	bcf	3,6	;RP1=0, select bank0
  5440  03B2  1105               	bcf	5,2	;volatile
  5441  03B3                     l1891:	
  5442                           
  5443                           ;HD44780.c: 136: _delay(10);
  5444  03B3  3003               	movlw	3
  5445  03B4  1683               	bsf	3,5	;RP0=1, select bank1
  5446  03B5  00B6               	movwf	??_Lcd_Command^(0+128)
  5447  03B6                     u3087:	
  5448  03B6  0BB6               	decfsz	??_Lcd_Command^(0+128),f
  5449  03B7  2BB6               	goto	u3087
  5450                           
  5451                           ;HD44780.c: 137: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  5452  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  5453  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  5454  03BA  1485               	bsf	5,1	;volatile
  5455  03BB  2402  120A  118A   	fcall	_Lcd_Delay5us
  5456  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  5457  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  5458  03C0  1085               	bcf	5,1	;volatile
  5459                           
  5460                           ;HD44780.c: 138: RA5 = (command & 0b00001000)>>3; RA4 = (command & 0b00000100)>>2;
  5461  03C1  241A  120A  118A   	fcall	PL16	;call to abstracted procedure
  5462  03C4  1003               	clrc
  5463  03C5  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5464  03C6  1C36               	btfss	??_Lcd_Command^(0+128),0
  5465  03C7  2BCC               	goto	u1740
  5466  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  5467  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  5468  03CA  1685               	bsf	5,5	;volatile
  5469  03CB  2BCF               	goto	l1901
  5470  03CC                     u1740:	
  5471  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  5472  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  5473  03CE  1285               	bcf	5,5	;volatile
  5474  03CF                     l1901:	
  5475  03CF  241A  120A  118A   	fcall	PL16	;call to abstracted procedure
  5476  03D2  1C36               	btfss	??_Lcd_Command^(0+128),0
  5477  03D3  2BD8               	goto	u1760
  5478  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  5479  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  5480  03D6  1605               	bsf	5,4	;volatile
  5481  03D7  2BDB               	goto	l1903
  5482  03D8                     u1760:	
  5483  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  5484  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  5485  03DA  1205               	bcf	5,4	;volatile
  5486  03DB                     l1903:	
  5487                           
  5488                           ;HD44780.c: 139: RA3 = (command & 0b00000010)>>1; RA2 = (command & 0b00000001);
  5489  03DB  1683               	bsf	3,5	;RP0=1, select bank1
  5490  03DC  0837               	movf	Lcd_Command@command^(0+128),w
  5491  03DD  00B6               	movwf	??_Lcd_Command^(0+128)
  5492  03DE  1003               	clrc
  5493  03DF  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5494  03E0  1C36               	btfss	??_Lcd_Command^(0+128),0
  5495  03E1  2BE6               	goto	u1780
  5496  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  5497  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  5498  03E4  1585               	bsf	5,3	;volatile
  5499  03E5  2BE9               	goto	l1905
  5500  03E6                     u1780:	
  5501  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  5502  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  5503  03E8  1185               	bcf	5,3	;volatile
  5504  03E9                     l1905:	
  5505  03E9  1683               	bsf	3,5	;RP0=1, select bank1
  5506  03EA  1C37               	btfss	Lcd_Command@command^(0+128),0
  5507  03EB  2BF0               	goto	u1800
  5508  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  5509  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  5510  03EE  1505               	bsf	5,2	;volatile
  5511  03EF  2BF3               	goto	l1907
  5512  03F0                     u1800:	
  5513  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  5514  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  5515  03F2  1105               	bcf	5,2	;volatile
  5516  03F3                     l1907:	
  5517                           
  5518                           ;HD44780.c: 140: _delay(10);
  5519  03F3  3003               	movlw	3
  5520  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  5521  03F5  00B6               	movwf	??_Lcd_Command^(0+128)
  5522  03F6                     u3097:	
  5523  03F6  0BB6               	decfsz	??_Lcd_Command^(0+128),f
  5524  03F7  2BF6               	goto	u3097
  5525                           
  5526                           ;HD44780.c: 141: RA1 = 1; Lcd_Delay5us(); RA1 = 0;
  5527  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  5528  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  5529  03FA  1485               	bsf	5,1	;volatile
  5530  03FB  2402  120A  118A   	fcall	_Lcd_Delay5us
  5531  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  5532  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  5533  0400  1085               	bcf	5,1	;volatile
  5534                           
  5535                           ;HD44780.c: 142: Lcd_Delay5500us();
  5536  0401  2B5A               	ljmp	l1859
  5537  0402                     __end_of_Lcd_Command:	
  5538  0402                     __ptext33:	
  5539 ;; *************** function _Lcd_Delay5us *****************
  5540 ;; Defined at:
  5541 ;;		line 148 in file "libs/HD44780.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  1    wreg      void 
  5548 ;; Registers used:
  5549 ;;		None
  5550 ;; Tracked objects:
  5551 ;;		On entry : 300/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:      BANK1   BANK3   BANK2
  5555 ;;      Params:         0       0       0
  5556 ;;      Locals:         0       0       0
  5557 ;;      Temps:          0       0       0
  5558 ;;      Totals:         0       0       0
  5559 ;;Total ram usage:        0 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; This function calls:
  5562 ;;		Nothing
  5563 ;; This function is called by:
  5564 ;;		_Lcd_Init
  5565 ;;		_Lcd_CharCP
  5566 ;;		_Lcd_Command
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           
  5571                           ;psect for function _Lcd_Delay5us
  5572  0402                     _Lcd_Delay5us:	
  5573                           
  5574                           ;HD44780.c: 149: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5575                           
  5576                           ;incstack = 0
  5577                           ; Regs used in _Lcd_Delay5us: []
  5578  0402  2C03               	nop2	;2 cycle nop
  5579  0403  2C04               	nop2	;2 cycle nop
  5580  0404  0000               	nop
  5581                           
  5582                           ;HD44780.c: 150: _delay((unsigned long)((5)*(4000000/4000000.0)));
  5583  0405  2C06               	nop2	;2 cycle nop
  5584  0406  2C07               	nop2	;2 cycle nop
  5585  0407  0000               	nop
  5586  0408  0008               	return
  5587  0409                     __end_of_Lcd_Delay5us:	
  5588  0409                     PL10:	
  5589  0409  084D               	movf	(WriteLongInt@Val+3)^(0+128),w
  5590  040A  00BB               	movwf	(___aldiv@dividend+3)^(0+128)
  5591  040B  084C               	movf	(WriteLongInt@Val+2)^(0+128),w
  5592  040C  00BA               	movwf	(___aldiv@dividend+2)^(0+128)
  5593  040D  084B               	movf	(WriteLongInt@Val+1)^(0+128),w
  5594  040E  00B9               	movwf	(___aldiv@dividend+1)^(0+128)
  5595  040F  084A               	movf	WriteLongInt@Val^(0+128),w
  5596  0410  00B8               	movwf	___aldiv@dividend^(0+128)
  5597  0411  0008               	return
  5598  0412                     __end_ofPL10:	
  5599  0412                     PL14:	
  5600  0412  1683               	bsf	3,5	;RP0=1, select bank1
  5601  0413  0837               	movf	Lcd_CharCP@c^(0+128),w
  5602  0414  00B6               	movwf	??_Lcd_CharCP^(0+128)
  5603  0415  1003               	clrc
  5604  0416  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  5605  0417  1003               	clrc
  5606  0418  0CB6               	rrf	??_Lcd_CharCP^(0+128),f
  5607  0419  0008               	return
  5608  041A                     __end_ofPL14:	
  5609  041A                     PL16:	
  5610  041A  1683               	bsf	3,5	;RP0=1, select bank1
  5611  041B  0837               	movf	Lcd_Command@command^(0+128),w
  5612  041C  00B6               	movwf	??_Lcd_Command^(0+128)
  5613  041D  1003               	clrc
  5614  041E  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5615  041F  1003               	clrc
  5616  0420  0CB6               	rrf	??_Lcd_Command^(0+128),f
  5617  0421  0008               	return
  5618  0422                     __end_ofPL16:	
  5619  0422                     PL22:	
  5620  0422  1285               	bcf	5,5	;volatile
  5621  0423  1205               	bcf	5,4	;volatile
  5622  0424  1185               	bcf	5,3	;volatile
  5623  0425  1105               	bcf	5,2	;volatile
  5624  0426  1085               	bcf	5,1	;volatile
  5625  0427  1005               	bcf	5,0	;volatile
  5626  0428  0008               	return
  5627  0429                     __end_ofPL22:	
  5628                           
  5629                           	psect	text35
  5630  0D76                     __ptext35:	
  5631 ;; *************** function _ChangeTheCycle *****************
  5632 ;; Defined at:
  5633 ;;		line 45 in file "libs/gsk_app_funcs.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;		None
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;		None
  5638 ;; Return value:  Size  Location     Type
  5639 ;;                  1    wreg      unsigned char 
  5640 ;; Registers used:
  5641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5642 ;; Tracked objects:
  5643 ;;		On entry : 300/300
  5644 ;;		On exit  : 100/100
  5645 ;;		Unchanged: 0/0
  5646 ;; Data sizes:      BANK1   BANK3   BANK2
  5647 ;;      Params:         0       0       0
  5648 ;;      Locals:         0       0       0
  5649 ;;      Temps:          0       0       0
  5650 ;;      Totals:         0       0       0
  5651 ;;Total ram usage:        0 bytes
  5652 ;; Hardware stack levels used:    1
  5653 ;; Hardware stack levels required when called:    2
  5654 ;; This function calls:
  5655 ;;		_GetCyclePeriod
  5656 ;; This function is called by:
  5657 ;;		_main
  5658 ;; This function uses a non-reentrant model
  5659 ;;
  5660                           
  5661                           
  5662                           ;psect for function _ChangeTheCycle
  5663  0D76                     _ChangeTheCycle:	
  5664                           
  5665                           ;gsk_app_funcs.c: 46: if ((CONFIG0.bits.b0 == 1) && (C_S == 0)) {
  5666                           
  5667                           ;incstack = 0
  5668                           ; Regs used in _ChangeTheCycle: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5669  0D76  1C54               	btfss	_CONFIG0^(0+384),0	;volatile
  5670  0D77  3400               	retlw	0
  5671  0D78  0850               	movf	_C_S^(0+384),w	;volatile
  5672  0D79  0451               	iorwf	(_C_S+1)^(0+384),w	;volatile
  5673  0D7A  1D03               	btfss	3,2
  5674  0D7B  3400               	retlw	0
  5675                           
  5676                           ;gsk_app_funcs.c: 47: CONFIG0.bits.b0 = 0;
  5677  0D7C  1054               	bcf	_CONFIG0^(0+384),0	;volatile
  5678                           
  5679                           ;gsk_app_funcs.c: 48: Cycle = Cycle + 1;
  5680  0D7D  0856               	movf	_Cycle^(0+384),w	;volatile
  5681  0D7E  3E01               	addlw	1
  5682  0D7F  00D6               	movwf	_Cycle^(0+384)	;volatile
  5683                           
  5684                           ;gsk_app_funcs.c: 49: if (Cycle >= 0x03)
  5685  0D80  3003               	movlw	3
  5686  0D81  0256               	subwf	_Cycle^(0+384),w	;volatile
  5687  0D82  1803               	btfsc	3,0
  5688                           
  5689                           ;gsk_app_funcs.c: 50: Cycle = 0;
  5690  0D83  01D6               	clrf	_Cycle^(0+384)	;volatile
  5691                           
  5692                           ;gsk_app_funcs.c: 51: GetCyclePeriod();
  5693  0D84  2586               	fcall	_GetCyclePeriod
  5694                           
  5695                           ;gsk_app_funcs.c: 52: return 1;
  5696  0D85  3401               	retlw	1
  5697  0D86                     __end_of_ChangeTheCycle:	
  5698                           ;gsk_app_funcs.c: 53: }
  5699                           ;gsk_app_funcs.c: 54: return 0;
  5700                           
  5701  0D86                     __ptext36:	
  5702 ;; *************** function _GetCyclePeriod *****************
  5703 ;; Defined at:
  5704 ;;		line 57 in file "libs/gsk_app_funcs.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;		None
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  i               1   18[BANK1 ] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 100/300
  5715 ;;		On exit  : B00/100
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:      BANK1   BANK3   BANK2
  5718 ;;      Params:         0       0       0
  5719 ;;      Locals:         1       0       0
  5720 ;;      Temps:          1       0       0
  5721 ;;      Totals:         2       0       0
  5722 ;;Total ram usage:        2 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:    1
  5725 ;; This function calls:
  5726 ;;		___bmul
  5727 ;; This function is called by:
  5728 ;;		_ChangeTheCycle
  5729 ;;		_main
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           
  5734                           ;psect for function _GetCyclePeriod
  5735  0D86                     _GetCyclePeriod:	
  5736                           
  5737                           ;gsk_app_funcs.c: 58: C_T = 0;
  5738                           
  5739                           ;incstack = 0
  5740                           ; Regs used in _GetCyclePeriod: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5741  0D86  1703               	bsf	3,6	;RP1=1, select bank3
  5742  0D87  01D2               	clrf	_C_T^(0+384)	;volatile
  5743  0D88  01D3               	clrf	(_C_T+1)^(0+384)	;volatile
  5744                           
  5745                           ;gsk_app_funcs.c: 59: for (char i=0; i < 10; i++) {
  5746  0D89  1303               	bcf	3,6	;RP1=0, select bank1
  5747  0D8A  01C6               	clrf	GetCyclePeriod@i^(0+128)
  5748  0D8B                     l2275:	
  5749                           
  5750                           ;gsk_app_funcs.c: 60: C_T=C_T + (C_ON[Cycle][i][0]);
  5751  0D8B  0846               	movf	GetCyclePeriod@i^(0+128),w
  5752  0D8C  0746               	addwf	GetCyclePeriod@i^(0+128),w
  5753  0D8D  0746               	addwf	GetCyclePeriod@i^(0+128),w
  5754  0D8E  00C5               	movwf	??_GetCyclePeriod^(0+128)
  5755  0D8F  301E               	movlw	30
  5756  0D90  00C2               	movwf	___bmul@multiplicand^(0+128)
  5757  0D91  1703               	bsf	3,6	;RP1=1, select bank3
  5758  0D92  0856               	movf	_Cycle^(0+384),w
  5759  0D93  267C  120A  158A   	fcall	___bmul
  5760  0D96  0745               	addwf	??_GetCyclePeriod^(0+128),w
  5761  0D97  0084               	movwf	4
  5762  0D98  1383               	bcf	3,7	;select IRP bank0
  5763  0D99  0800               	movf	0,w
  5764  0D9A  1703               	bsf	3,6	;RP1=1, select bank3
  5765  0D9B  07D2               	addwf	_C_T^(0+384),f	;volatile
  5766  0D9C  1803               	skipnc
  5767  0D9D  0AD3               	incf	(_C_T+1)^(0+384),f	;volatile
  5768  0D9E  1303               	bcf	3,6	;RP1=0, select bank1
  5769  0D9F  300A               	movlw	10
  5770  0DA0  0AC6               	incf	GetCyclePeriod@i^(0+128),f
  5771  0DA1  0246               	subwf	GetCyclePeriod@i^(0+128),w
  5772  0DA2  1803               	btfsc	3,0
  5773  0DA3  0008               	return
  5774  0DA4  2D8B               	goto	l2275
  5775  0DA5                     __end_of_GetCyclePeriod:	
  5776  0DA5                     __ptext12:	
  5777 ;; *************** function _ReadVars *****************
  5778 ;; Defined at:
  5779 ;;		line 9 in file "libs/eeprom.c"
  5780 ;; Parameters:    Size  Location     Type
  5781 ;;		None
  5782 ;; Auto vars:     Size  Location     Type
  5783 ;;  k               1   35[BANK1 ] unsigned char 
  5784 ;;  j               1   34[BANK1 ] unsigned char 
  5785 ;;  i               1   33[BANK1 ] unsigned char 
  5786 ;;  i               1   32[BANK1 ] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 300/100
  5793 ;;		On exit  : B00/100
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:      BANK1   BANK3   BANK2
  5796 ;;      Params:         0       0       0
  5797 ;;      Locals:         4       0       0
  5798 ;;      Temps:         15       0       0
  5799 ;;      Totals:        19       0       0
  5800 ;;Total ram usage:       19 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; Hardware stack levels required when called:    1
  5803 ;; This function calls:
  5804 ;;		___bmul
  5805 ;;		_eeprom_read
  5806 ;; This function is called by:
  5807 ;;		_main
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           
  5812                           ;psect for function _ReadVars
  5813  0DA5                     _ReadVars:	
  5814                           
  5815                           ;eeprom.c: 10: C_D = eeprom_read(0X00);
  5816                           
  5817                           ;incstack = 0
  5818                           ; Regs used in _ReadVars: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5819  0DA5  3000               	movlw	0
  5820  0DA6  2663  120A  158A   	fcall	_eeprom_read
  5821  0DA9  1683               	bsf	3,5	;RP0=1, select bank3
  5822  0DAA  00D5               	movwf	_C_D^(0+384)	;volatile
  5823                           
  5824                           ;eeprom.c: 11: for (char i = 0; i<3; i++)
  5825  0DAB  1303               	bcf	3,6	;RP1=0, select bank1
  5826  0DAC  01D4               	clrf	ReadVars@i^(0+128)
  5827  0DAD                     l2423:	
  5828                           
  5829                           ;eeprom.c: 12: C[i] = (uint32_t)eeprom_read(0X01 + 3*i)*256*256 + (uint16_t)eeprom_read(
      +                          0x02 + 3*i)*256 + eeprom_read(0x03 + 3*i);
  5830  0DAD  0854               	movf	ReadVars@i^(0+128),w
  5831  0DAE  0754               	addwf	ReadVars@i^(0+128),w
  5832  0DAF  0754               	addwf	ReadVars@i^(0+128),w
  5833  0DB0  3E03               	addlw	3
  5834  0DB1  2663  120A  158A   	fcall	_eeprom_read
  5835  0DB4  1683               	bsf	3,5	;RP0=1, select bank1
  5836  0DB5  1303               	bcf	3,6	;RP1=0, select bank1
  5837  0DB6  00C5               	movwf	??_ReadVars^(0+128)
  5838  0DB7  01C6               	clrf	(??_ReadVars^(0+128)+1)
  5839  0DB8  01C7               	clrf	(??_ReadVars^(0+128)+2)
  5840  0DB9  01C8               	clrf	(??_ReadVars^(0+128)+3)
  5841  0DBA  0854               	movf	ReadVars@i^(0+128),w
  5842  0DBB  0754               	addwf	ReadVars@i^(0+128),w
  5843  0DBC  0754               	addwf	ReadVars@i^(0+128),w
  5844  0DBD  3E02               	addlw	2
  5845  0DBE  2663  120A  158A   	fcall	_eeprom_read
  5846  0DC1  1683               	bsf	3,5	;RP0=1, select bank1
  5847  0DC2  1303               	bcf	3,6	;RP1=0, select bank1
  5848  0DC3  00C9               	movwf	(??_ReadVars+4)^(0+128)
  5849  0DC4  01CA               	clrf	((??_ReadVars+4)^(0+128)+1)
  5850  0DC5  00CA               	movwf	((??_ReadVars+4)^(0+128)+1)
  5851  0DC6  01C9               	clrf	(??_ReadVars+4)^(0+128)
  5852  0DC7  0849               	movf	(??_ReadVars+4)^(0+128),w
  5853  0DC8  00CB               	movwf	(??_ReadVars+6)^(0+128)
  5854  0DC9  084A               	movf	(??_ReadVars+5)^(0+128),w
  5855  0DCA  00CC               	movwf	((??_ReadVars+6)^(0+128)+1)
  5856  0DCB  01CD               	clrf	((??_ReadVars+6)^(0+128)+2)
  5857  0DCC  01CE               	clrf	((??_ReadVars+6)^(0+128)+3)
  5858  0DCD  0854               	movf	ReadVars@i^(0+128),w
  5859  0DCE  0754               	addwf	ReadVars@i^(0+128),w
  5860  0DCF  0754               	addwf	ReadVars@i^(0+128),w
  5861  0DD0  3E01               	addlw	1
  5862  0DD1  2663  120A  158A   	fcall	_eeprom_read
  5863  0DD4  1683               	bsf	3,5	;RP0=1, select bank1
  5864  0DD5  1303               	bcf	3,6	;RP1=0, select bank1
  5865  0DD6  00CF               	movwf	(??_ReadVars+10)^(0+128)
  5866  0DD7  01D0               	clrf	((??_ReadVars+10)^(0+128)+1)
  5867  0DD8  01D1               	clrf	((??_ReadVars+10)^(0+128)+2)
  5868  0DD9  01D2               	clrf	((??_ReadVars+10)^(0+128)+3)
  5869  0DDA  0850               	movf	((??_ReadVars+10)^(0+128)+1),w
  5870  0DDB  00D2               	movwf	((??_ReadVars+10)^(0+128)+3)
  5871  0DDC  084F               	movf	(??_ReadVars+10)^(0+128),w
  5872  0DDD  00D1               	movwf	((??_ReadVars+10)^(0+128)+2)
  5873  0DDE  01D0               	clrf	((??_ReadVars+10)^(0+128)+1)
  5874  0DDF  01CF               	clrf	(??_ReadVars+10)^(0+128)
  5875  0DE0  084F               	movf	(??_ReadVars+10)^(0+128),w
  5876  0DE1  07CB               	addwf	(??_ReadVars+6)^(0+128),f
  5877  0DE2  0850               	movf	(??_ReadVars+11)^(0+128),w
  5878  0DE3  1803               	skipnc
  5879  0DE4  0F50               	incfsz	(??_ReadVars+11)^(0+128),w
  5880  0DE5  07CC               	addwf	((??_ReadVars+6)^(0+128)+1),f
  5881  0DE6  0851               	movf	(??_ReadVars+12)^(0+128),w
  5882  0DE7  1803               	skipnc
  5883  0DE8  0F51               	incfsz	(??_ReadVars+12)^(0+128),w
  5884  0DE9  07CD               	addwf	((??_ReadVars+6)^(0+128)+2),f
  5885  0DEA  0852               	movf	(??_ReadVars+13)^(0+128),w
  5886  0DEB  1803               	skipnc
  5887  0DEC  0A52               	incf	(??_ReadVars+13)^(0+128),w
  5888  0DED  07CE               	addwf	((??_ReadVars+6)^(0+128)+3),f
  5889  0DEE  084B               	movf	(??_ReadVars+6)^(0+128),w
  5890  0DEF  07C5               	addwf	??_ReadVars^(0+128),f
  5891  0DF0  084C               	movf	(??_ReadVars+7)^(0+128),w
  5892  0DF1  1803               	skipnc
  5893  0DF2  0F4C               	incfsz	(??_ReadVars+7)^(0+128),w
  5894  0DF3  07C6               	addwf	(??_ReadVars^(0+128)+1),f
  5895  0DF4  084D               	movf	(??_ReadVars+8)^(0+128),w
  5896  0DF5  1803               	skipnc
  5897  0DF6  0F4D               	incfsz	(??_ReadVars+8)^(0+128),w
  5898  0DF7  07C7               	addwf	(??_ReadVars^(0+128)+2),f
  5899  0DF8  084E               	movf	(??_ReadVars+9)^(0+128),w
  5900  0DF9  1803               	skipnc
  5901  0DFA  0A4E               	incf	(??_ReadVars+9)^(0+128),w
  5902  0DFB  07C8               	addwf	(??_ReadVars^(0+128)+3),f
  5903  0DFC  0854               	movf	ReadVars@i^(0+128),w
  5904  0DFD  00D3               	movwf	(??_ReadVars+14)^(0+128)
  5905  0DFE  3001               	movlw	1
  5906  0DFF  1003               	clrc
  5907  0E00                     L3:	
  5908  0E00  0DD3               	rlf	(??_ReadVars+14)^(0+128),f
  5909  0E01  3EFF               	addlw	-1
  5910  0E02  1003               	clrc
  5911  0E03  1D03               	skipz
  5912  0E04  2E00               	goto	L3
  5913  0E05  0D53               	rlf	(??_ReadVars+14)^(0+128),w
  5914  0E06  3EBC               	addlw	(low (_C| (0+256)))& (0+255)
  5915  0E07  0084               	movwf	4
  5916  0E08  0845               	movf	??_ReadVars^(0+128),w
  5917  0E09  1783               	bsf	3,7	;select IRP bank3
  5918  0E0A  0080               	movwf	0
  5919  0E0B  0A84               	incf	4,f
  5920  0E0C  0846               	movf	(??_ReadVars+1)^(0+128),w
  5921  0E0D  0080               	movwf	0
  5922  0E0E  0A84               	incf	4,f
  5923  0E0F  0847               	movf	(??_ReadVars+2)^(0+128),w
  5924  0E10  0080               	movwf	0
  5925  0E11  0A84               	incf	4,f
  5926  0E12  0848               	movf	(??_ReadVars+3)^(0+128),w
  5927  0E13  0080               	movwf	0
  5928  0E14  3003               	movlw	3
  5929  0E15  0AD4               	incf	ReadVars@i^(0+128),f
  5930  0E16  0254               	subwf	ReadVars@i^(0+128),w
  5931  0E17  1C03               	skipc
  5932  0E18  2DAD               	goto	l2423
  5933                           
  5934                           ;eeprom.c: 13: for (char i = 0; i < 3; i++)
  5935  0E19  01D5               	clrf	ReadVars@i_34^(0+128)
  5936  0E1A                     l2435:	
  5937                           
  5938                           ;eeprom.c: 14: for (char j = 0; j < 10; j++)
  5939  0E1A  01D6               	clrf	ReadVars@j^(0+128)
  5940  0E1B                     l2441:	
  5941                           
  5942                           ;eeprom.c: 15: for (char k = 0; k< 3 ; k++) {
  5943  0E1B  01D7               	clrf	ReadVars@k^(0+128)
  5944  0E1C                     l2447:	
  5945                           
  5946                           ;eeprom.c: 16: C_ON[i][j][k] = eeprom_read(0X0A + i*10*3 + j*3 + k);
  5947  0E1C  301E               	movlw	30
  5948  0E1D  00C2               	movwf	___bmul@multiplicand^(0+128)
  5949  0E1E  0855               	movf	ReadVars@i_34^(0+128),w
  5950  0E1F  267C  120A  158A   	fcall	___bmul
  5951  0E22  00C5               	movwf	??_ReadVars^(0+128)
  5952  0E23  0856               	movf	ReadVars@j^(0+128),w
  5953  0E24  0756               	addwf	ReadVars@j^(0+128),w
  5954  0E25  0756               	addwf	ReadVars@j^(0+128),w
  5955  0E26  268B  120A  158A   	fcall	PL12	;call to abstracted procedure
  5956  0E29  267C  120A  158A   	fcall	___bmul
  5957  0E2C  2693  120A  158A   	fcall	PL18	;call to abstracted procedure
  5958  0E2F  3E0A               	addlw	10
  5959  0E30  2663  120A  158A   	fcall	_eeprom_read
  5960  0E33  1383               	bcf	3,7	;select IRP bank0
  5961  0E34  0080               	movwf	0
  5962                           
  5963                           ;eeprom.c: 17: C_BLINK[i][j][k] = eeprom_read(0X64 + i*10*3 + j*3 + k);
  5964  0E35  301E               	movlw	30
  5965  0E36  1683               	bsf	3,5	;RP0=1, select bank1
  5966  0E37  1303               	bcf	3,6	;RP1=0, select bank1
  5967  0E38  00C2               	movwf	___bmul@multiplicand^(0+128)
  5968  0E39  0855               	movf	ReadVars@i_34^(0+128),w
  5969  0E3A  267C  120A  158A   	fcall	___bmul
  5970  0E3D  00C5               	movwf	??_ReadVars^(0+128)
  5971  0E3E  0856               	movf	ReadVars@j^(0+128),w
  5972  0E3F  0756               	addwf	ReadVars@j^(0+128),w
  5973  0E40  0756               	addwf	ReadVars@j^(0+128),w
  5974  0E41  3E5A               	addlw	90
  5975  0E42  268B  120A  158A   	fcall	PL12	;call to abstracted procedure
  5976  0E45  267C  120A  158A   	fcall	___bmul
  5977  0E48  2693  120A  158A   	fcall	PL18	;call to abstracted procedure
  5978  0E4B  3E64               	addlw	100
  5979  0E4C  2663  120A  158A   	fcall	_eeprom_read
  5980  0E4F  1383               	bcf	3,7	;select IRP bank0
  5981  0E50  0080               	movwf	0
  5982  0E51  1683               	bsf	3,5	;RP0=1, select bank1
  5983  0E52  1303               	bcf	3,6	;RP1=0, select bank1
  5984  0E53  3003               	movlw	3
  5985  0E54  0AD7               	incf	ReadVars@k^(0+128),f
  5986  0E55  0257               	subwf	ReadVars@k^(0+128),w
  5987  0E56  1C03               	skipc
  5988  0E57  2E1C               	goto	l2447
  5989  0E58  300A               	movlw	10
  5990  0E59  0AD6               	incf	ReadVars@j^(0+128),f
  5991  0E5A  0256               	subwf	ReadVars@j^(0+128),w
  5992  0E5B  1C03               	skipc
  5993  0E5C  2E1B               	goto	l2441
  5994  0E5D  3003               	movlw	3
  5995  0E5E  0AD5               	incf	ReadVars@i_34^(0+128),f
  5996  0E5F  0255               	subwf	ReadVars@i_34^(0+128),w
  5997  0E60  1803               	btfsc	3,0
  5998  0E61  0008               	return
  5999  0E62  2E1A               	goto	l2435
  6000  0E63                     __end_of_ReadVars:	
  6001  0E63                     __ptext13:	
  6002 ;; *************** function _eeprom_read *****************
  6003 ;; Defined at:
  6004 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\pic\eeread.c"
  6005 ;; Parameters:    Size  Location     Type
  6006 ;;  addr            1    wreg     unsigned char 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;  addr            1    0[BANK1 ] unsigned char 
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0
  6013 ;; Tracked objects:
  6014 ;;		On entry : 300/100
  6015 ;;		On exit  : 300/200
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:      BANK1   BANK3   BANK2
  6018 ;;      Params:         0       0       0
  6019 ;;      Locals:         1       0       0
  6020 ;;      Temps:          0       0       0
  6021 ;;      Totals:         1       0       0
  6022 ;;Total ram usage:        1 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_ReadVars
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           
  6032                           ;psect for function _eeprom_read
  6033  0E63                     _eeprom_read:	
  6034                           
  6035                           ;incstack = 0
  6036                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  6037                           ;eeprom_read@addr stored from wreg
  6038  0E63  00B4               	movwf	eeprom_read@addr^(0+128)
  6039  0E64  2E66               	goto	l497
  6040  0E65                     u2521:	
  6041  0E65  1303               	bcf	3,6	;RP1=0, select bank1
  6042  0E66                     l497:	
  6043  0E66  0064               	clrwdt	;# 
  6044  0E67  1683               	bsf	3,5	;RP0=1, select bank3
  6045  0E68  1703               	bsf	3,6	;RP1=1, select bank3
  6046  0E69  188C               	btfsc	12,1	;volsfr
  6047  0E6A  2E65               	goto	u2521
  6048  0E6B  1303               	bcf	3,6	;RP1=0, select bank1
  6049  0E6C  0834               	movf	eeprom_read@addr^(0+128),w
  6050  0E6D  1283               	bcf	3,5	;RP0=0, select bank2
  6051  0E6E  1703               	bsf	3,6	;RP1=1, select bank2
  6052  0E6F  008D               	movwf	13	;volatile
  6053  0E70  303F               	movlw	63
  6054  0E71  1683               	bsf	3,5	;RP0=1, select bank3
  6055  0E72  058C               	andwf	12,f	;volsfr
  6056  0E73  140C               	bsf	12,0	;volsfr
  6057  0E74  1003               	clrc
  6058  0E75  180C               	btfsc	12,0	;volsfr
  6059  0E76  1403               	setc
  6060  0E77  1803               	skipnc
  6061  0E78  3001               	movlw	1
  6062  0E79  1283               	bcf	3,5	;RP0=0, select bank2
  6063  0E7A  080C               	movf	12,w	;volatile
  6064  0E7B  0008               	return
  6065  0E7C                     __end_of_eeprom_read:	
  6066  0E7C                     __ptext37:	
  6067 ;; *************** function ___bmul *****************
  6068 ;; Defined at:
  6069 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  6070 ;; Parameters:    Size  Location     Type
  6071 ;;  multiplier      1    wreg     unsigned char 
  6072 ;;  multiplicand    1   14[BANK1 ] unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  multiplier      1   16[BANK1 ] unsigned char 
  6075 ;;  product         1   15[BANK1 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;                  1    wreg      unsigned char 
  6078 ;; Registers used:
  6079 ;;		wreg, status,2, status,0
  6080 ;; Tracked objects:
  6081 ;;		On entry : 100/900
  6082 ;;		On exit  : 300/100
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:      BANK1   BANK3   BANK2
  6085 ;;      Params:         1       0       0
  6086 ;;      Locals:         2       0       0
  6087 ;;      Temps:          0       0       0
  6088 ;;      Totals:         3       0       0
  6089 ;;Total ram usage:        3 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; This function calls:
  6092 ;;		Nothing
  6093 ;; This function is called by:
  6094 ;;		_ReadVars
  6095 ;;		_WriteLongInt
  6096 ;;		_GetCyclePeriod
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function ___bmul
  6102  0E7C                     ___bmul:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6106                           ;___bmul@multiplier stored from wreg
  6107  0E7C  1303               	bcf	3,6	;RP1=0, select bank1
  6108  0E7D  00C4               	movwf	___bmul@multiplier^(0+128)
  6109  0E7E  01C3               	clrf	___bmul@product^(0+128)
  6110  0E7F                     l2153:	
  6111  0E7F  0842               	movf	___bmul@multiplicand^(0+128),w
  6112  0E80  1844               	btfsc	___bmul@multiplier^(0+128),0
  6113  0E81  07C3               	addwf	___bmul@product^(0+128),f
  6114  0E82  1003               	clrc
  6115  0E83  0DC2               	rlf	___bmul@multiplicand^(0+128),f
  6116  0E84  1003               	clrc
  6117  0E85  0CC4               	rrf	___bmul@multiplier^(0+128),f
  6118  0E86  0844               	movf	___bmul@multiplier^(0+128),w
  6119  0E87  1D03               	btfss	3,2
  6120  0E88  2E7F               	goto	l2153
  6121  0E89  0843               	movf	___bmul@product^(0+128),w
  6122  0E8A  0008               	return
  6123  0E8B                     __end_of___bmul:	
  6124  007E                     btemp	set	126	;btemp
  6125  007E                     wtemp	set	126
  6126  007E                     wtemp0	set	126
  6127  0080                     wtemp1	set	128
  6128  0082                     wtemp2	set	130
  6129  0084                     wtemp3	set	132
  6130  0086                     wtemp4	set	134
  6131  0088                     wtemp5	set	136
  6132  007F                     wtemp6	set	127
  6133  007E                     ttemp	set	126
  6134  007E                     ttemp0	set	126
  6135  0081                     ttemp1	set	129
  6136  0084                     ttemp2	set	132
  6137  0087                     ttemp3	set	135
  6138  007F                     ttemp4	set	127
  6139  007E                     ltemp	set	126
  6140  007E                     ltemp0	set	126
  6141  0082                     ltemp1	set	130
  6142  0086                     ltemp2	set	134
  6143  0080                     ltemp3	set	128
  6144  0E8B                     PL12:	
  6145  0E8B  0745               	addwf	??_ReadVars^(0+128),w
  6146  0E8C  0757               	addwf	ReadVars@k^(0+128),w
  6147  0E8D  00C6               	movwf	(??_ReadVars+1)^(0+128)
  6148  0E8E  0084               	movwf	4
  6149  0E8F  301E               	movlw	30
  6150  0E90  00C2               	movwf	___bmul@multiplicand^(0+128)
  6151  0E91  0855               	movf	ReadVars@i_34^(0+128),w
  6152  0E92  0008               	return
  6153  0E93                     __end_ofPL12:	
  6154  0E93                     PL18:	
  6155  0E93  00C7               	movwf	(??_ReadVars+2)^(0+128)
  6156  0E94  0856               	movf	ReadVars@j^(0+128),w
  6157  0E95  0756               	addwf	ReadVars@j^(0+128),w
  6158  0E96  0756               	addwf	ReadVars@j^(0+128),w
  6159  0E97  0747               	addwf	(??_ReadVars+2)^(0+128),w
  6160  0E98  0757               	addwf	ReadVars@k^(0+128),w
  6161  0E99  0008               	return
  6162  0E9A                     __end_ofPL18:	


Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    BANK1            60     60      60
    BANK3            96     44      73
    BANK2            96      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK3[2]), 

    Lcd_Text@buffer	PTR unsigned char  size(1) Largest target is 7
		 -> STR_3(CODE[7]), STR_2(CODE[2]), STR_1(CODE[5]), 


Critical Paths under _main in BANK1

    _UART_Init->___fttol
    _trunc->___fttol
    ___fttol->___ftadd
    ___altoft->___ftpack
    ___ftadd->___ftdiv
    ___ftmul->___altoft
    ___ftdiv->___ftmul
    _ReadVars->___bmul
    _ReadRTCAsSec->___lmul
    _I2C_ReadAtAddress->_I2C_Master_Read
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_Init->_Lcd_Command
    _I2C_Master_Init->___lldiv
    _DetermineCycleChange->_WriteLongInt
    _WriteLongInt->_Lcd_WriteChar
    _Lcd_WriteChar->___bmul
    _Lcd_Command->_Lcd_Delay5500us
    _Lcd_CharCP->_Lcd_Delay5500us
    _ChangeTheCycle->_GetCyclePeriod
    _GetCyclePeriod->___bmul
    ___bmul->___aldiv

Critical Paths under _main in BANK3

    _main->_UART_Init
    _UART_Init->_round
    _round->___ftsub
    _trunc->___fttol
    ___ftsub->_trunc

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   29002
                                             41 BANK3      3     3      0
                     _ChangeTheCycle
               _DetermineCycleChange
                     _GetCyclePeriod
                    _I2C_Master_Init
                           _Lcd_Init
                           _Lcd_Text
                       _ReadRTCAsSec
                           _ReadVars
                          _UART_Init
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           12     8      4   18737
                                             29 BANK3     12     8      4
                           ___altoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                6     3      3    9040
                                             23 BANK3      6     3      3
                            ___ftadd
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftsub
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                                8     5      3    2932
                                              9 BANK3      8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                6     2      4     314
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             13     9      4     398
                                             56 BANK1      4     0      4
                                              0 BANK3      9     9      0
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___altoft                                             6     2      4    1951
                                              8 BANK1      6     2      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    3038
                                             17 BANK3      6     0      6
                            ___ftadd
                              _trunc (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    2865
                                             44 BANK1     12     6      6
                           ___altoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    2221
                                             14 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2095
                                             29 BANK1     15     9      6
                           ___altoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadVars                                            19    19      0    1032
                                             17 BANK1     19    19      0
                             ___bmul
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (2) _eeprom_read                                          1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadRTCAsSec                                        18    14      4    3041
                                             12 BANK1     18    14      4
                  _I2C_ReadAtAddress
                             ___lmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1460
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadAtAddress                                    3     2      1     829
                                              4 BANK1      3     2      1
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     323
                                              0 BANK1      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      4     2      2      98
                                              0 BANK1      4     2      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             4     2      2     851
                                              4 BANK1      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     314
                                              4 BANK1      1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     343
                                             13 BANK1      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     268
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (1) _DetermineCycleChange                                21    21      0    3600
                                             31 BANK1     13    13      0
                       _WriteLongInt
 ---------------------------------------------------------------------------------
 (2) _WriteLongInt                                        10     3      7    3305
                                             21 BANK1     10     3      7
                      _Lcd_WriteChar
                            ___aldiv
                             ___bmul
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     544
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8     592
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _Lcd_WriteChar                                        4     2      2     828
                                             17 BANK1      4     2      2
                         _Lcd_CharCP
                        _Lcd_Command
                            ___aldiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          2     2      0     176
                                              2 BANK1      2     2      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_CharCP                                           2     2      0     176
                                              2 BANK1      2     2      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Delay5500us                                      2     2      0       0
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ChangeTheCycle                                       0     0      0     542
                     _GetCyclePeriod
 ---------------------------------------------------------------------------------
 (1) _GetCyclePeriod                                       2     2      0     542
                                             17 BANK1      2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     474
                                             14 BANK1      3     2      1
                            ___aldiv (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ChangeTheCycle
     _GetCyclePeriod
       ___bmul
         ___aldiv (ARG)
   _DetermineCycleChange
     _WriteLongInt
       _Lcd_WriteChar
         _Lcd_CharCP
           _Lcd_Delay5500us
           _Lcd_Delay5us
         _Lcd_Command
           _Lcd_Delay5500us
           _Lcd_Delay5us
         ___aldiv (ARG)
         ___bmul (ARG)
           ___aldiv (ARG)
       ___aldiv
       ___bmul
         ___aldiv (ARG)
       ___lmul
   _GetCyclePeriod
     ___bmul
       ___aldiv (ARG)
   _I2C_Master_Init
     ___lldiv
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
   _ReadRTCAsSec
     _I2C_ReadAtAddress
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     ___lmul
     ___wmul
   _ReadVars
     ___bmul
       ___aldiv (ARG)
     _eeprom_read
   _UART_Init
     ___altoft
       ___ftpack
     ___ftadd
       ___altoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     _round
       ___ftadd
         ___altoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         _trunc (ARG)
           ___altoft
             ___ftpack
           ___fttol
             ___altoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___altoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           _frexp
       _trunc (ARG)
         ___altoft
           ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
STACK                0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
ABS                  0      0      85       1        0.0%
BITBANK1            3C      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BANK1               3C     3C      3C       3      100.0%
BITBANK3            60      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK3               60     2C      49       5       76.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            60      0       0       6        0.0%
BANK2               60      0       0       7        0.0%
DATA                 0      0      85       8        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Thu Nov 03 13:00:18 2016

                 ___altoft@exp 00C0                              _C 01BC                              _S 01C8  
                            pc 0002                 ___bmul@product 00C3                    __CFG_CP$OFF 0000  
                           PL2 00F9                             PL4 07D7                             PL6 07E3  
                           PL8 0FF7                  ___altoft@sign 00C1                             l52 030F  
                           _RD 0C60                             _WR 0C61                             fsr 0004  
          ___wmul@multiplicand 00B6                   ___ftadd@exp1 00EB                   ___ftadd@exp2 00EA  
                          PL10 0409                            PL20 07EE                            PL12 0E8B  
                          PL22 0422                            PL14 0412                            PL16 041A  
                          PL18 0E93                   ___ftadd@sign 00E9                            l159 0FB9  
                          l638 01B1                            l751 06C5                            l497 0E66  
                          l594 0FC8                            l739 069D                            l775 05B8  
                          l793 06F9                            _RA0 0028                            _RA1 0029  
                          _RA2 002A                            _RA3 002B                            _RA4 002C  
                          _RA5 002D                            _C_D 01D5                            _PEN 048A  
                 __CFG_CPD$OFF 0000                            _C_S 01D0                            _C_T 01D2  
                          _SEN 0488                            fsr0 0004                            indf 0000  
                 __CFG_IESO$ON 0000                   __CFG_FOSC$HS 0000            __end_of_Lcd_Command 0402  
                ?_ReadRTCAsSec 00C0                   __CFG_LVP$OFF 0000                   ___ftdiv@cntr 00DA  
                 ___ftdiv@sign 00DF                           l2001 059C                           l2011 05B4  
                         l2003 05A0                           l2101 0184                           l2103 0187  
                         l2023 05CE                           l2201 020D                           l2017 05C3  
                         l2009 05AF                           l2041 0635                           l2107 018B  
                         l2035 05EA                           l2043 063B                           l2109 0199  
                         l2133 0FB3                           l2301 06E8                           l2143 0FDE  
                         l2071 0677                           l2063 0669                           l2153 0E7F  
                         l2209 07B3                           l2411 0CCA                           l2323 070C  
                         l2075 0685                           l2059 0661                           l2219 050C  
                         l2245 013A                           l2253 0142                           l2341 0750  
                         l2069 066D                           l2085 0C32                           l2175 01C0  
                         l2423 0DAD                           l2097 017E                           l2185 01D4  
                         l2441 0E1B                           l2345 0761                           l2275 0D8B  
                         l2099 0181                           l2283 0F4F                           l2435 0E1A  
                         l2363 0772                           l1901 03CF                           l2197 01FF  
                         l1903 03DB                           l2287 0F57                           l2447 0E1C  
                         l2375 0787                           l2367 077B                           l1905 03E9  
                         l2553 0218                           l1931 02C3                           l1907 03F3  
                         l2651 00DC                           l2643 0015                           l2571 0235  
                         l2555 021B                           l2563 0225                           l2379 0790  
                         l2707 0D3B                           l1933 02D1                           l2661 00DF  
                         l2557 021E                           l2565 0233                           l2717 0D5B  
                         l2709 0D43                           l1935 02DB                           l1919 029B  
                         l2639 000F                           l2399 0C9F                           l2559 0221  
                         l1871 06AB                           l1929 02B7                           l2657 00CA  
                         l1873 06B5                           l1859 035A                           l1891 03B3  
                         l1867 06A1                           l1877 06C3                           l1869 06A6  
                         l1973 0566                           l1957 060E                           l1879 06BA  
                         l1991 0583                           l1959 0619                           l1969 055F  
                         l1979 0575                           l1997 0592                           l1999 0597  
                         STR_1 080D                           STR_2 0810                           STR_3 0806  
                         _BRGH 04C2                           _CREN 00C4                           u2000 02D8  
                         u3003 00DA                           u3107 029E                           u3117 02DE  
                         u1630 037A                           u2350 0FB0                           u3127 0360  
                         u3063 0D39                           u1800 03F0                           u1720 03B0  
                         u1704 03A1                           u1625 036F                           u2521 0E65  
                         u1715 03A5                           u2275 0640                           u1740 03CC  
                         u1660 038C                           u1644 037D                           u3077 0D6E  
                         u1830 0262                           u3087 03B6                           u1655 0381  
                         u2615 071A                           u1920 0298                           u1904 0289  
                         u1760 03D8                           u1825 0257                           u3097 03F6  
                         u2465 01E7                           u1690 039E                           u1674 038F  
                         u1915 028D                           u1940 02B4                           u1860 0274  
                         u1844 0265                           u1780 03E6                           u1685 0393  
                         u1855 0269                           u2735 0CB2                           u1960 02C0  
                         u1890 0286                           u1874 0277          __size_of_WriteLongInt 006C  
                         u2923 0058                           u1980 02CE                           u1885 027B  
                         u2845 0C6D                           u2943 0078                           u2963 0098  
                         _RCEN 048B                           u2983 00B6                           u2993 00C8  
                         _C_ON 0000                           _SPEN 00C7                           _TXEN 04C5  
                         _SYNC 04C4              ??_Lcd_Delay5500us 00B4                   __CFG_WRT$OFF 0000  
                __CFG_FCMEN$ON 0000                           _main 0CD3                   ___ftpack@arg 00B4  
                 ___ftpack@exp 00B7           __end_of_Lcd_Delay5us 0409                           btemp 007E  
             ??_ChangeTheCycle 00C7                           ltemp 007E                           start 0000  
       ??_DetermineCycleChange 00D3                           ttemp 007E                           wtemp 007E  
             _ReadRTCAsSec$937 00CB              ___bmul@multiplier 00C4                  __CFG_MCLRE$ON 0000  
                 ___ftmul@cntr 00CF                   ___ftmul@sign 00D0                     _Lcd_CharCP 024F  
                 ___fttol@exp1 0198                   ___fttol@lval 0194               ?_I2C_Master_Init 00C1  
             ?_I2C_Master_Read 00B4               ?_I2C_Master_Wait 00B4               ?_I2C_Master_Stop 00B4  
              __end_of___aldiv 0216                          ?_main 00B4                          _ACKEN 048C  
                        _ACKDT 048D                          _EEADR 010D                __end_of___ftadd 05FC  
                        _BRG16 0C3B                  __CFG_WDTE$OFF 0000                __end_of___ftdiv 073F  
                        _ANSEL 0188                __end_of___lldiv 0CD3                __end_of___ftmul 07AC  
              __end_of___ftsub 07D7                __end_of___fttol 0695                          _SPBRG 0099  
                 _WriteLongInt 0110            ___lmul@multiplicand 00B8                          _Cycle 01D6  
                   _Firm_Cycle 01D7                 ??_ReadRTCAsSec 00C4             __size_of_UART_Init 007F  
                        _frexp 0C26                  ___ftpack@sign 00B8                          _round 04A8  
                        _trunc 04F3                 __CFG_BOREN$OFF 0000                          pclath 000A  
                        ltemp0 007E                          ltemp1 0082                          ltemp2 0086  
                        ltemp3 0080                          ttemp0 007E                          ttemp1 0081  
                        ttemp2 0084                          ttemp3 0087                          ttemp4 007F  
                        status 0003                          wtemp0 007E                          wtemp1 0080  
                        wtemp2 0082                          wtemp3 0084                          wtemp4 0086  
                        wtemp5 0088                          wtemp6 007F                 _GetCyclePeriod 0D86  
             __end_of_Lcd_Init 035A               __end_of_Lcd_Text 024F                __initialization 07F5  
                 __end_of_main 0D76               __end_of_ReadVars 0E63                    _Lcd_Command 0365  
              ReadRTCAsSec@Out 00CD                         ??_main 01B9                  ___fttol@sign1 0193  
            ?_I2C_Master_Start 00B4              ?_I2C_Master_Write 00B4             ??_I2C_Master_Start 00B4  
           ??_I2C_Master_Write 00B6                         ?_frexp 00B4               __end_of___altoft 062B  
                       _EEDATA 010C                         _EECON1 018C               __end_of___ftpack 06D7  
                       ?_round 01A7                         _ANSELH 0189                         ?_trunc 0199  
            _I2C_ReadAtAddress 0F66         __end_of_GetCyclePeriod 0DA5               WriteLongInt@Sign 00CF  
                       _SPBRGH 009A                 Lcd_Text@buffer 00B9             ?_I2C_ReadAtAddress 00B8  
                       _SSPADD 0093                         _TRISC3 043B                         _TRISC4 043C  
                       _SSPCON 0014                         _SSPBUF 0013               WriteLongInt@size 00CE  
               __CFG_PWRTE$OFF 0000           __size_of_eeprom_read 0019            ??_I2C_ReadAtAddress 00B9  
            __end_of_UART_Init 04A8                         ___bmul 0E7C                    ?_Lcd_CharCP 0000  
                       ___lmul 0FC4                      ??___aldiv 00BC                         ___wmul 0F4D  
                    ??___ftadd 00E6                      ??___ftdiv 00D7                      ??___lldiv 00BC  
                    ??___ftmul 00C8                      ??___ftsub 00F0                      ??___fttol 0190  
        __end_of_Lcd_WriteChar 01A1          ___ftmul@f3_as_product 00CC      __end_of_I2C_ReadAtAddress 0F91  
                       round@f 01AA                         round@x 01A7                         trunc@i 019C  
        __size_of_Lcd_Delay5us 0007                         trunc@x 0199             Lcd_Command@command 00B7  
              ?_GetCyclePeriod 0000        __end_of__initialization 07FC                     ___altoft@c 00BC  
                 ReadVars@i_34 00D5                eeprom_read@addr 00B4                     ___ftadd@f1 00E0  
                   ___ftadd@f2 00E3                     ___ftdiv@f1 00D4                     ___ftdiv@f2 00D1  
                   ___ftdiv@f3 00DB            ___bmul@multiplicand 00C2                     ___ftmul@f1 00C2  
                   ___ftmul@f2 00C5                     ___ftsub@f1 01A4                     ___ftsub@f2 01A1  
                   ___fttol@f1 00EC                 __pcstackCOMMON 0000           __end_of_ReadRTCAsSec 0F4D  
                __end_of_frexp 0C5F                  __end_of_round 04F3                  __end_of_trunc 053C  
                   __end_ofPL2 0110                     __end_ofPL4 07E3                     __end_ofPL6 07EE  
                   __end_ofPL8 1000                   _Lcd_Delay5us 0402                _Lcd_Delay5500us 035A  
               Lcd_WriteChar@c 00C6                 Lcd_WriteChar@x 00C5                 Lcd_WriteChar@y 00C7  
                    ?_Lcd_Init 00B4                      ?_Lcd_Text 00B8                        ??_frexp 00B8  
          __size_of_Lcd_CharCP 009E                        ??_round 00F0                        ??_trunc 00F0  
                   __pbssBANK3 01BC                      ?_ReadVars 00B4        I2C_ReadAtAddress@IntAdd 00B8  
                   __pmaintext 0CD3                        ?___bmul 00C2                        ?___lmul 00B4  
                      ?___wmul 00B4                      ?___altoft 00BC                 ___lmul@product 00BC  
                    ?___ftpack 00B4                        _CONFIG0 01D4                        _C_BLINK 005A  
                   ??_Lcd_Init 00B8     __size_of_I2C_ReadAtAddress 002B                     ??_Lcd_Text 00BA  
                      _SSPCON2 0091                        _SSPSTAT 0094                     __stringtab 0800  
                   ??_ReadVars 00C5                        _S_InUse 01CC         ReadRTCAsSec@TempVar000 00D1  
__size_of_DetermineCycleChange 00F1                        ___aldiv 01A1                __size_of___bmul 000F  
            Lcd_WriteChar@data 00C8                __size_of___lmul 0033                        ___ftadd 053C  
                      ___ftdiv 06D7                        ___lldiv 0C8B                __size_of___wmul 0019  
                      ___ftmul 073F                        ___ftsub 07AC                        ___fttol 062B  
      __end_of_Lcd_Delay5500us 0365                     ??___altoft 00C0                     ??___ftpack 00B9  
                 ?_Lcd_Command 0000                        __ptext0 0000                        __ptext1 0429  
                      __ptext2 04A8                        __ptext3 04F3                        __ptext4 0C26  
                      __ptext5 062B                        __ptext6 05FC                        __ptext7 07AC  
                      __ptext8 053C                        __ptext9 073F               ___aldiv@dividend 00B8  
     __size_of_I2C_Master_Init 002C       __size_of_I2C_Master_Read 0020       __size_of_I2C_Master_Wait 0008  
     __size_of_I2C_Master_Stop 0003                        clrloop0 0C1F           end_of_initialization 07FC  
        __size_of_ReadRTCAsSec 00B3      __size_of_I2C_Master_Start 0003      __size_of_I2C_Master_Write 0005  
              ___lldiv@divisor 00B4                ___lldiv@counter 00C0                   ??_Lcd_CharCP 00B6  
             ___aldiv@quotient 00BE               I2C_Master_Init@c 00C1               I2C_Master_Read@a 00B4  
                    Lcd_Text@x 00B8                      Lcd_Text@y 00BA        __size_of_ChangeTheCycle 0010  
                    _UART_Init 0429                      _TRISAbits 0085               ??_GetCyclePeriod 00C5  
                 _ReadRTCAsSec 0E9A             __end_of_Lcd_CharCP 02ED                    ___ftdiv@exp 00DE  
                ??_eeprom_read 00B4                      ReadVars@i 00D4                      ReadVars@j 00D6  
                    ReadVars@k 00D7                    ___ftmul@exp 00CB                 __end_of___bmul 0E8B  
               __end_of___lmul 0FF7               ?_Lcd_Delay5500us 0000                 __end_of___wmul 0F66  
                   ?_UART_Init 01AD                    __end_ofPL10 0412                    __end_ofPL20 07F5  
                  __end_ofPL12 0E93                    __end_ofPL22 0429                    __end_ofPL14 041A  
                  __end_ofPL16 0422                    __end_ofPL18 0E9A            start_initialization 07F5  
              GetCyclePeriod@i 00C6              __size_of_Lcd_Init 006D              __size_of_Lcd_Text 0039  
                   frexp@value 00B4              ??_I2C_Master_Init 00C5              ??_I2C_Master_Read 00B6  
            ??_I2C_Master_Wait 00B4              ??_I2C_Master_Stop 00B4                WriteLongInt@POS 00D1  
              WriteLongInt@Val 00CA         __size_of_Lcd_WriteChar 0025              __size_of_ReadVars 00BE  
                     ??___bmul 00C3                       ??___lmul 00BC                       ??___wmul 00B8  
          __end_of_eeprom_read 0E7C          DetermineCycleChange@i 00DF              __size_of___altoft 002F  
            __size_of___ftpack 0042                  ?_WriteLongInt 00C9           __size_of_Lcd_Command 009D  
                    ___latbits 0002                  __pcstackBANK1 00B4                  __pcstackBANK3 0190  
                WriteLongInt@x 00C9                  WriteLongInt@y 00D2         I2C_ReadAtAddress@DevID 00BA  
             _I2C_Master_Start 0F96               _I2C_Master_Write 0F91                       ?___aldiv 00B4  
                     ?___ftadd 00E0                       ?___ftdiv 00D1                       ?___lldiv 00B4  
                     ?___ftmul 00C2                       ?___ftsub 01A1                       ?___fttol 00EC  
               _ChangeTheCycle 0D76                    ??_UART_Init 00F0                      __pstrings 0800  
               ??_WriteLongInt 00D0                  _Lcd_WriteChar 017C                  _UART_Init$935 01B1  
                _UART_Init$936 01B4   __end_of_DetermineCycleChange 00F9                 __size_of_frexp 0039  
                   UART_Init@x 01B7                 __size_of_round 004B                 __size_of_trunc 0049  
              ___aldiv@divisor 00B4                ___aldiv@counter 00BC                 ___wmul@product 00B8  
                    clear_ram0 0C1E                    _eeprom_read 0E63     DetermineCycleChange@MinPos 00DD  
       __end_of_ChangeTheCycle 0D86              UART_Init@baudrate 01AD                   Lcd_Init@data 00B8  
                  __stringbase 0805                 ?_Lcd_WriteChar 00C5              ___wmul@multiplier 00B4  
                     _Lcd_Init 02ED                       _Lcd_Text 0216            I2C_Master_Read@temp 00B6  
            ___lmul@multiplier 00B4                       _ReadVars 0DA5                      frexp@eptr 00B7  
                 Lcd_Text@data 00BB                ?_ChangeTheCycle 00B4               __size_of___aldiv 0075  
             __size_of___ftadd 00C0               __size_of___ftdiv 0068               __size_of___lldiv 0048  
                     ___altoft 05FC               __size_of___ftmul 006D               __size_of___ftsub 002B  
             __size_of___fttol 006A                       ___ftpack 0695             __end_of__stringtab 0806  
                ?_Lcd_Delay5us 0000                _I2C_Master_Init 0C5F                _I2C_Master_Read 0F99  
              _I2C_Master_Wait 0FB9                _I2C_Master_Stop 0FC1          I2C_ReadAtAddress@data 00B9  
                     __ptext10 06D7                       __ptext11 0695                       __ptext20 0F99  
                     __ptext12 0DA5                       __ptext21 0FB9                       __ptext13 0E63  
                     __ptext30 017C                       __ptext22 0216                       __ptext14 0E9A  
                     __ptext31 0365                       __ptext23 02ED                       __ptext15 0F4D  
                     __ptext32 024F                       __ptext24 0C5F                       __ptext16 0F66  
                     __ptext33 0402                       __ptext25 0C8B                       __ptext17 0F91  
                     __ptext34 035A                       __ptext26 0008                       __ptext18 0FC1  
                     __ptext35 0D76                       __ptext27 0110                       __ptext19 0F96  
                     __ptext36 0D86                       __ptext28 0FC4                       __ptext37 0E7C  
                     __ptext29 01A1              __CFG_BOR4V$BOR21V 0000                    Lcd_CharCP@c 00B7  
                   trunc@expon 019F                  __size_of_main 00A3                   _PresentState 01D8  
DetermineCycleChange@PrevCycle 00DE           __end_of_WriteLongInt 017C           _DetermineCycleChange 0008  
              ??_Lcd_WriteChar 00C7                 ??_Lcd_Delay5us 00B4       __end_of_I2C_Master_Start 0F99  
     __end_of_I2C_Master_Write 0F96       __size_of_Lcd_Delay5500us 000B               ___lldiv@dividend 00B8  
      __size_of_GetCyclePeriod 001F                      stringcode 0800          ?_DetermineCycleChange 00B4  
      __end_of_I2C_Master_Init 0C8B        __end_of_I2C_Master_Read 0FB9        __end_of_I2C_Master_Wait 0FC1  
      __end_of_I2C_Master_Stop 0FC4                  ??_Lcd_Command 00B6               ___lldiv@quotient 00BC  
            I2C_Master_Write@d 00B4                       stringdir 0800                       stringtab 0800  
                 ___aldiv@sign 00BD                   ?_eeprom_read 0000  
