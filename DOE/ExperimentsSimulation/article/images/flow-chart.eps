%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: flow-chart.pdf
%%Creator: Adobe Acrobat 17.9.0
%%For: gadis
%%CreationDate: 13-05-2017, 08:31:34
%%BoundingBox: 0 0 282 417
%%HiResBoundingBox: 0 0 281.2500 417
%%CropBox: 0 0 281.2500 417
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 957 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-05-13T08:31:09-05:00"
   xmp:CreatorTool="Microsoft® Visio® 2016"
   xmp:ModifyDate="2017-05-13T08:31:09-05:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2016">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Suresh Kumar Gadi</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -417 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 417 li
281.25 417 li
281.25 0 li
cp
clp
gsave
0 417 mo
282 417 li
282 0 li
0 0 li
cp
clp
173.81 363.991 mo
213.21 334.44 li
173.81 304.89 li
134.4 334.44 li
173.81 363.991 li
cp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
173.81 363.991 mo
213.21 334.44 li
173.81 304.89 li
134.4 334.44 li
173.81 363.991 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif Initial
ct_T42Dict begin
-1.133 -0.387 1.492 1.094
 256 array 0 1 255 {1 index exch /.notdef put} for  /HAAAAA+CMU#20Serif
Type42DictBegin
[<00010000000c000c000c000c4f532f3245b1958d000000cc000000566376
742005bb07cd000001240000005a6670676d6d042d570000018000000205
676c796630b7003c00003fa00000290868656164ed5a419d000003880000
00366868656105da0c00000003c000000024686d74785efa06a5000003e4
000022fe6c6f63612a8c209a000026e4000011ce6d6178700a01025c0000
38b4000000206e616d655f842d79000038d4000005d670726570437738a8
00003eac000000f167646972000000000000000000000000000101b901f4
00050000028a02bc0000008c028a02bc000001e000310102000002000603
000000000000e10002ff5201e9eb02020004000000005066456400400000
ffff0320ff3800c803a700fa0000019f000000000000ff3dff5e000001ae
029802a6001f00000016001a00460019001c001e00280046004b00540059
00670036005600500049001400600052003c004300390041003000260021
002a003f0023005c0033000c002c000f0012004e002e0000b0002cb00013
4bb01c5058b04a7659b000233f18b0062b583d594bb01c50587d5920d4b0
01132e182db0012c20dab00c2b2db0022c4b5258452359212db0032c6918
20b040505821b040592db0042cb0062b582123217a58dd1bcd591b4b5258
58fd1bed591b2321b0052b58b046765958dd1bcd595959182db0052c0d5c
5a2db0062cb12201885058b020885c5c1bb000592db0072cb12401885058
b040885c5c1bb000592db0082c121120392f2db0092c207db0062b58c41b
cd5920b00325492320b004264ab00050588a658a6120b0005058381b2121
591b8a8a6120b0005258381b21215959182db00a2cb0062b5821101b1021
592db00b2c20d2b00c2b2db00c2c202fb0072b5c582020472346616a2058
206462381b2121591b21592db00d2c12112020392f208a20478a4661238a
208a234ab000505823b0005258b040381b21591b23b0005058b04065381b
2159592db00e2cb0062b583dd61821211b20d68a4b5258208a234920b000
5558381b2121591b212159592db00f2c2320d6202fb0072b5c582320584b
531b21b00159588ab0042649238a23208a498a2361381b21212121591b21
21212121592db0102c20dab0122b2db0112c20d2b0122b2db0122c202fb0
072b5c582020472346616a8a2047234623616a602058206462381b212159
1b2121592db0132c208a208a8720b003254a64238a07b02050583c1bc059
2d000000000100000000b333d0d871345f0f3cf5001f03e800000000c65f
a56100000000c65fa561fb91fe7d05d70446000000080002000000000000
0001000003a7ff0600c805fffb91fe6105d7000100000000000000000000
00000000089902f8000a00000000014d0000014d00000116005501f40077
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000001f40059
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000030a00390000000001d8003800000000
02ee00200000000002d2003802fb002302a80021028c0021000000000000
00000169001c0000000000000000000000000394002502ee002103090038
02a800230000000002e00023022b003802d2002402ee0021000000000000
00000000000002ee000b0000000000000000000000000000000000000000
0000000000000000000000000000000000000000022b0022000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000187001c00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
01f4005a0000000000000000000000000000000000000000000000000000
0000000000000265002200000000024f00330270002b022e002a0217002a
00000000000000000000000000000000000000000000000002ea002e0265
002a027b0033022e002b00000000025a002b01ca0033024f00230265002a
000000000000000000000000026500130000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000a6
00a600a600a600fe01400140014001400140014001400140014001400140
014001400140014001940194019401940194019401940194019401940194
019401c001c00256025602ee02ee037203c6046404ec04ec04ec053e053e
053e053e05fc06a206f6076c076c082e090209820a0a0a0a0a0a0a0a0a98
0a980a980a980a980a980a980a980a980a980a980b100b100b100b100b10
0b100b100b100b100b100b100b100b100b100b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960b960b960b960b960b960b960b960b960b960b96
0b960b960b960b960b960bee0bee0bee0bee0bee0bee0bee0bee0bee0cbc
0cbc0d360d900e1c0ea20ea20ea20ea20ea20ea20ea20f94105a10a8111a
111a11da128c1306138c138c138c138c1484148414841484148414841484
148414841484148414841484148414841484148414841484148414841484
148414841484148414841484148414841484148414841484148414841484
148414841484148414841484148414841484148414841484148414841484
148414841484148414841484148414841484148414841484148414841484
148414841484148414841484148414841484148414841484000000010000
08e600550005000000000002000100000014000001000205000000000000
001400f60001000000000000006800000001000000000001000900780001
000000000002000500820001000000000003002b00680001000000000004
000f00780001000000000005000e00930001000000000006000e00a10001
00000000000c002200af000100000000000d00cf00d1000100000000000e
001a0186000300010409000000d001a00003000104090001001202900003
000104090002000a02a40003000104090003005602700003000104090004
001e02900003000104090005001c02c60003000104090006001c02e20003
00010409000c004402fe000300010409000d019e0342000300010409000e
003404ac436f6e76657274656420627920416e6472657920562e2050616e
6f762066726f6d2054655820666f6e74732e20536f6d6520676c79706873
2061726520636f706965642066726f6d20426c756520536b7920666f6e74
732072656c656173656420627920414d532e466f6e74466f72676520322e
30203a20434d5520536572696620526f6d616e203a2031382d362d323030
3956657273696f6e20302e372e3020434d5553657269662d526f6d616e68
7474703a2f2f636d2d756e69636f64652e736f75726365666f7267652e6e
65742f5468697320466f6e7420536f667477617265206973206c6963656e
73656420756e646572207468652053494c204f70656e20466f6e74204c69
63656e73652c2056657273696f6e20312e312e0a54686973206c6963656e
736520697320636f7069656420746f676574686572207769746820746869
7320666f6e74207061636b61676520696e204f464c2e7478742c0a616e64
20697320616c736f20617661696c61626c65207769746820612046415120
61743a20687474703a2f2f736372697074732e73696c2e6f72672f4f464c
0043006f006e00760065007200740065006400200062007900200041006e
006400720065007900200056002e002000500061006e006f007600200066
0072006f006d002000540065005800200066006f006e00740073002e0020
0053006f006d006500200067006c00790070006800730020006100720065
00200063006f0070006900650064002000660072006f006d00200042006c
0075006500200053006b007900200066006f006e00740073002000720065
006c0065006100730065006400200062007900200041004d0053002e0046
006f006e00740046006f00720067006500200032002e00300020003a0020
0043004d005500200053006500720069006600200052006f006d0061006e
0020003a002000310038002d0036002d0032003000300039005600650072
00730069006f006e00200030002e0037002e003000200043004d00550053
0065007200690066002d0052006f006d0061006e0068007400740070003a
002f002f0063006d002d0075006e00690063006f00640065002e0073006f
00750072006300650066006f007200670065002e006e00650074002f0054
00680069007300200046006f006e007400200053006f0066007400770061
007200650020006900730020006c006900630065006e0073006500640020
0075006e0064006500720020007400680065002000530049004c0020004f
00700065006e00200046006f006e00740020004c006900630065006e0073
0065002c002000560065007200730069006f006e00200031002e0031002e
000a00540068006900730020006c006900630065006e0073006500200069
007300200063006f007000690065006400200074006f0067006500740068
00650072002000770069007400680020007400680069007300200066006f
006e00740020007000610063006b00610067006500200069006e0020004f
0046004c002e007400780074002c000a0061006e00640020006900730020
0061006c0073006f00200061007600610069006c00610062006c00650020
0077006900740068002000610020004600410051002000610074003a0020
0068007400740070003a002f002f0073006300720069007000740073002e
00730069006c002e006f00720067002f004f0046004c0000b801ff85b001
8d004bb0085058b101018e59b146062b5821b010594bb014525821b08059
1db0062b5c5800b0062045b0032b44b0092045b20671022bb0032b44b008
2045b20951022bb0032b44b0072045b20831022bb0032b4401b00a2045b0
032b44b00e2045b20a16022bb10346762b44b00d2045b20e5e022bb10346
762b44b00c2045b20d45022bb10346762b44b00b2045ba000c011500022b
b10346762b44b00f2045ba000a7fff00022bb10346762b44b0102045b20f
6b022bb10346762b44b0112045b21030022bb10346762b44b0122045b211
22022bb10346762b44b0132045b21214022bb10346762b445900000000>
[10505 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1500 38 <00010038ffea029902c10031007b00b22f02002bb12206e9b2222f0a2bb3
00222a092bb20305002bb00933b11606e9b216030a2bb3401610092b01b0
322fb000d6b11c13e9b01c10b20013102bb10b0de9b02c32b00b10b1270b
e9b0272fb033d6b1131c1112b30703242f241739b02711b02539b00b12b1
0a10393900b116221112b100073939303113343633321e0117373632161d
011406232226272e0123220e0315141e033332363736343e013332151406
23222638ce8e2c4e241a32081003040c0a04020f785318354d3b2b2b3b4d
3618568406010205040d92738ece015697d4201c1a4a0c090fed1008060b
6c810b29448055548143290b7a6705040502115fa0d30000>HAAAAA+CMU#20Serif AddT42Char 
1 1932 40 <000100210000028c02a8003100b600b23102002bb12806e9b00132b20c05
002bb11306e9b00932b41823310c0d2bb11806e9b223180a2bb340231f09
2bb218230a2bb340181c092b01b0322fb005d6b12412e9b01732b205240a
2bb3400500092bb00a32b02410b2051f102bb01c32b11e0be9b033d6b036
1ab1313087b0312e04b030c0b12d0bf9b02fc0b32e2d2f132bb22e2d2f20
8a208a23060e11123900b32f302d2e2e2e2e2e01b42f30312d2e2e2e2e2e
2eb0401a0100b113181112b00d3930313335333236351134262b01352117
232e032b0122061d013332363533112334262b011114163b01323e043733
032118361919361802331c1907122b473981220f5a4527191927455a0f22
852b3f2c1e150c07192a1f121d020c1d121fe1394233140e1af03045fef7
4431fef51a0e0b1c203a362cfefe0000>HAAAAA+CMU#20Serif AddT42Char 
1 2520 44 <0001001c0000014d02ab001d005000b20002002bb10106e9b01832b20b05
002bb10a06e9b0103201b01e2fb005d6b11512e9b215050a2bb340151909
2bb00f32b205150a2bb3400501092bb00a32b01fd6b115051112b10d1c39
390030313335333236351134262b01351633323715232206151114163b01
152623221c1a381a1a381a237675231a381a1a381a2376751f121d020f1d
121f03031f121dfdf11d121f0300>HAAAAA+CMU#20Serif AddT42Char 
1 3064 49 <00010021000002cc02ab003500b100b20002002bb02733b10106e9b03232
b20e05002bb01a33b10d06e9b1191e323201b0362fb006d6b12d0ce9b22d
060a2bb3402d32092bb2062d0a2bb3400601092bb00d32b02d10b2061310
2bb1240ce9b224130a2bb340241e092bb213240a2bb3401319092bb037d6
b0361ab112138704b0132e05b012c0b12916f9b02ac00300b31213292a2e
2e2e2e01b212292a2e2e2eb0401ab124131112b01c3900b101001112b024
39b00d11b1232c393930313335323e023511342627262b01353332161701
11342e02233516323715220e021511140623222701262711141e02331526
2221242e110407111e141daa0e0807016104112e24691869242e1104040a
070afe68040604112e2469181f0e1b120f020a0e0702021f0409fdf901ab
0f121b0e1f03031f0e1b120ffdd8100a0d02580606fdf80f121b0e1f0300
0000>HAAAAA+CMU#20Serif AddT42Char 
1 3396 50 <00020038ffea02d102c1000b0020004400b20902002bb11109e9b2030500
2bb11c09e901b0212fb000d6b10c13e9b00c10b20016102bb10613e9b022
d6b1160c1112b10903393900b11c111112b1060039393031133436333216
15140623222637141e0233323e0235342e0323220e0238c48889c4c48987
c5672c474c27264b472d1f313f3b1c23494a2f015399d5d69897d2d1a65d
8e4d25244c8f5e4976472f121f4587000000>HAAAAA+CMU#20Serif AddT42Char 
1 4612 55 <00010024000002ad02a5002e007c00b21b02002bb11c06e9b01532b20205
002bb40b06006c042bb02732b3031b02082bb0003301b02f2fb000d6b12e
0be9b02e10b20021102bb11112e9b211210a2bb3401116092bb221110a2b
b340211c092bb01110b22104102bb1030be9b030d6b12e001112b00139b1
11211112b01939b103041112b0023900303113372117232e052322070e01
1511141e013b0115262322073533323e013511342e0223220e0407241302
631319040711152834272e0b0c06082e33282995942928332e080209142c
2734281511070401c4e1e12d343118130502031112fdf114100c1f03031f
0c1014020f0e0c0a0405131831342d00>HAAAAA+CMU#20Serif AddT42Char 
1 4868 56 <00010021ffea02cc02ab0031008400b22a02002bb11006e9b20105002bb0
1a33b10006e9b206191f32323201b0322fb02dd6b10b12e9b20b2d0a2bb3
400b06092bb22d0b0a2bb3402d00092bb00b10b22d13102bb1250de9b225
130a2bb340251f092bb213250a2bb3401319092bb033d6b10b2d1112b003
39b01311b02a39b02512b01c3900b100101112b1252d3939303113351633
3237152322061511141e023332363511342e0223351633323715220e0215
1114070e0123222635113426232123717023183619253a2f174c7404112e
246c0b0a6c242e1104030d7c5567951936028c1f03031f121dfe83435c29
0f7965015b0f121b0e1f03031f0d1c1411fec031145778916901791d1200
0000>HAAAAA+CMU#20Serif AddT42Char 
1 0 0 <0005000a000a02ee02fd000300060009000c000f00f400b20a05002bb00c
33b401060022042bb0002fb407060022042bb0083201b0102fb000d6b404
0a0032042bb00632b00410b2000e102bb00f32b4030a0032042bb011d6b0
361ab1040c8704b0042e05b00cc0b10714f904b00fc0b106088705b0082e
04b006c0b10e14f905b00ac0b00610b3050608132bb1060808b00410b305
040c132b05b00610b3090608132bb1060808b00710b309070f132b05b00a
10b30b0a0e132bb10a0e08b00410b30b040c132b05b00a10b30d0a0e132b
b10a0e08b00710b30d070f132b00b7040506090b0d0e0f2e2e2e2e2e2e2e
2e01b7050708090a0b0c0d2e2e2e2e2e2e2e2eb0401a0100303137112111
250901132109030301110a02e4fd580114feec230226feedfeed01130113
f101140a02f3fd0d6601140113fdaf01140167feec0114fec3feec022700
0000>HAAAAA+CMU#20Serif AddT42Char 
HAAAAA+CMU#20Serif /CharStrings get begin
/g38 38 def
/g40 40 def
/g44 44 def
/g49 49 def
/g50 50 def
/g55 55 def
/g56 56 def
end
HAAAAA+CMU#20Serif /Encoding get
dup 67 /g38 put
dup 69 /g40 put
dup 73 /g44 put
dup 78 /g49 put
dup 79 /g50 put
dup 84 /g55 put
dup 85 /g56 put
pop
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif /HAAAAA+CMU#20Serif findfont ct_VMDictPut
/IZFJQW+CMU#20Serif*1 
[67{/.notdef}rp /g38 /.notdef /g40 3{/.notdef}rp /g44 4{/.notdef}rp /g49 
/g50 4{/.notdef}rp /g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
144.3 338.05 mo
(CONTINUE)
[7.51692 7.52667 7.51698 7.51697 3.0204 7.51697 7.51691 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 896 34 <000200380000019f02c100290031009e00b23102002bb42d060013042bb2
0305002bb12008e9b220030a2bb300200f092bb422270f030d2bb4220600
16042b01b0322fb000d6b12412e9b02410b20012102bb10b0be9b00b10b3
140b2f0e2bb12b13e9b02b2fb12f13e9b00b10b2121a102bb10611e9b033
d6b124001112b02239b1122b1112b03139b00b11b103203939b02f12b02d
39b01a11b01639b00612b0083900b122271112b000393031133436333216
151407061d01140e012322263d013436373e0235342e0323220732151406
2322261234363216140622385d4d6558308401060608042a2e0b0c0b010c
152c1f5b28381915131b711f2c1f1f2c023c345152353e24627d230b0907
090f2d357a320b11271c1114221410442d141a18fdfb2c1f1f2c1f000000
>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g34 34 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 63 /g34 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[63{/.notdef}rp /g34 3{/.notdef}rp /g38 /.notdef /g40 3{/.notdef}rp /g44 
4{/.notdef}rp /g49 /g50 4{/.notdef}rp /g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
199.55 338.05 mo
(?)sh
152.14 32.11 mo
195.47 32.11 li
199.16 32.11 202.15 29.12 202.15 25.43 cv
202.15 25.43 li
202.15 21.74 199.16 18.75 195.47 18.75 cv
195.47 18.75 li
152.14 18.75 li
148.45 18.75 145.46 21.74 145.46 25.43 cv
145.46 25.43 li
145.46 29.12 148.45 32.11 152.14 32.11 cv
152.14 32.11 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
152.14 32.11 mo
195.47 32.11 li
199.16 32.11 202.15 29.12 202.15 25.43 cv
202.15 25.43 li
202.15 21.74 199.16 18.75 195.47 18.75 cv
195.47 18.75 li
152.14 18.75 li
148.45 18.75 145.46 21.74 145.46 25.43 cv
145.46 25.43 li
145.46 29.12 148.45 32.11 152.14 32.11 cv
152.14 32.11 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 1196 36 <00020020000002cd02cc0027002a00b100b20002002bb01233b10106e9b2
101723323232b20705002bb20405002bb20c05002bb41d2800070d2bb029
33b11d06e9b01c3201b02b2fb02cd6b0361ab1030487b0042e04b003c0b1
2a06f9b01ec0b10c0d8705b00c2eb00dc0b11e2a08b12a15f905b01bc0b3
1c2a1b132bb01e10b31d1e2a132bb3281e2a132bb02a10b3292a1b132b03
00b4030d1b1e2a2e2e2e2e2e01400b03040c0d1b1c1d1e28292a2e2e2e2e
2e2e2e2e2e2e2eb0401a00303133353637133e0133321e0217131e013b01
1526232207353235342f012307061514163315262322133303205917cf04
090b0607050203d808202d123f446c24530335f72e02272460132184e171
1f024102560c0802070407fd8f190f1f03031f1e020c9983040b151e1f03
01000145>IZFJQW+CMU#20Serif AddT42Char 
1 3800 53 <00020023ffea02dc02ab003c005000af00b22802002bb11c08e9b21c280a
2bb3001c21092bb20002002bb10106e9b03832b20b05002bb10a06e9b04a
32b43d34280b0d2bb13d08e901b0512fb005d6b13511e9b03d32b235050a
2bb3403539092bb205350a2bb3400501092bb00a32b03510b20543102bb1
0f13e9b00f10b2431f102bb1230be9b052d6b143351112b12c123939b00f
11b114163939b01f12b11c28393900b134011112b214162e393939b03d11
b01239b00a12b00f3930313335333236351134262b013521321615140607
161f011e053332363736333215140e022322272e0235342627262b011514
163b011526221333323e0235342e042322070e021523183619193618013a
6d98634c63170d040509090e120c172704020a0d0813291b4e301412030c
1a233a7319361824dc996f3548220d10222235241d310a0b09021f121d02
0f1d121f6b493858132252501d1d28131407293010110d21261a2a122f25
293a331922fd1d121f03015e1a2f2f1e23351f14080202010b0c0e00>IZFJQW+CMU#20Serif AddT42Char 
1 4188 54 <00010038ffea01f302c1004600e000b23c02002bb04433b10b06e9b20b3c
0a2bb3400b05092bb21c05002bb02333b12f09e9b22f1c0a2bb3402f2b09
2b01b0472fb019d6b00032b1320ae9b1070be9b03210b2190e102bb1390a
e9b32d390e082bb1290be9b048d6b0361ab1161287b0162eb012c0b13519
f9b036c0b01610b3131612132bb3141612132bb2141612208a208a23060e
111239b0133900b51416353612132e2e2e2e2e2e01b51416353612132e2e
2e2e2e2eb0401a01b107191112b04439b03211b03f39b00e12b40b1c202f
3c241739b1292d1112b0233900b12f0b1112b31920393f24173930313735
343e013332171617163332363534272e022726272e0135343633321e0117
37363332161d01140e01232227262322061514161f011e01151406232226
27060f0106232226380106060b01033b3a643c4a1f0d2114137c083b4871
5229451c1623080708030106060a021ca7394b372e8040566f563e601a14
0d030807080302c80b08060a63373656393626111607051e0314653e5072
1a1715390d090fc90b08050cd14d362c480b1f0f714a557b291d2113050d
0a000000>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g36 36 def
/g53 53 def
/g54 54 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 65 /g36 put
dup 82 /g53 put
dup 83 /g54 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[63{/.notdef}rp /g34 /.notdef /g36 /.notdef /g38 /.notdef /g40 
3{/.notdef}rp /g44 4{/.notdef}rp /g49 /g50 2{/.notdef}rp /g53 /g54 
/g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
156.78 28.48 mo
(START)
[5.27855 7.51697 7.51698 7.51698 0 ]xsh
134.4 68.56 mo
213.203 68.56 li
213.203 45.883 li
134.4 45.883 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
134.4 68.56 mo
213.203 68.56 li
213.203 45.883 li
134.4 45.883 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 1764 39 <00020023000002c302ab00120024003e00b20002002bb10106e9b01632b2
0b05002bb10a06e9b0203201b0252fb005d6b11311e9b01310b2051c102b
b10f13e9b026d600b10a011112b00f3930313335333236351134262b0135
213216151406232714163b0132363736353427262b012206152318361919
3618016e80b2b37fb10f22654259173734437364220f1f121d020f1d121f
cc8f8cc4471a0e361f4b9198475d0e1a0000>IZFJQW+CMU#20Serif AddT42Char 
1 2248 41 <000100210000026202a8002d009800b20002002bb10106e9b02832b20c05
002bb11306e9b00932b41823000c0d2bb11806e9b223180a2bb340231f09
2bb218230a2bb340181c092b01b02e2fb005d6b12412e9b01732b224050a
2bb3402429092bb205240a2bb3400501092bb00a32b02410b2051f102bb0
1c32b11e0be9b01e10b21f0d102bb02fd6b124051112b02c39b10d1e1112
b10c0e393900b113181112b00d3930313335333236351134262b01352117
232e032b0122061d013332363533112334262b0115141e013b0115262322
2118361919361802251c19071229453878220f5644261919264456072a2e
212484751f121d020c1d121fe1394134140e1afd3144fef74530f615100b
1f03>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g39 39 def
/g41 41 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 68 /g39 put
dup 70 /g41 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[63{/.notdef}rp /g34 /.notdef /g36 /.notdef /g38 /g39 /g40 
/g41 2{/.notdef}rp /g44 4{/.notdef}rp /g49 /g50 2{/.notdef}rp /g53 
/g54 /g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.75 0 0 -9.75 0 0 ]msf
154.8 54.33 mo
(DEFINE)
[7.51718 6.76643 6.76643 3.74393 7.51724 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic Initial
ct_T42Dict begin
-1 -0.352 1.457 1.109
 256 array 0 1 255 {1 index exch /.notdef put} for  /JAAAAA+CMU#20Serif,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f323d3292f3000000cc000000566376
7420073f074000000124000000586670676d6b042d570000017c00000205
676c796633558cb300002f5000001f5868656164edbc4610000003840000
003668686561064e097c000003bc00000024686d747837a108cd000003e0
000018146c6f6361e0e6e87400001bf400000c406d617870073a026d0000
2834000000206e616d658a07504800002854000005dc70726570d69cdb8b
00002e300000011e67646972000000000000000000000000000101b601f4
00050000028a02bc0021008c028a02bcff8c01e000310102000002000603
000000000000e10002ff5201e1eb00020004000000005066456400010000
ffff0320ff3800c803a200fa0000011f000000000000ff3e000001ae029a
02a5001f00000017001e004600180021003000350038003d0046004e0056
005b0063006b00290042003f00580033001b00510049004c0054003b0015
002700610013005e00110023002e002c0025000eb0002cb000134bb01b50
58b04a7659b000233f18b0062b583d594bb01b50587d5920d4b001132e18
2db0012c20dab00c2b2db0022c4b5258452359212db0032c691820b04050
5821b040592db0042cb0062b582123217a58dd1bcd591b4b525858fd1bed
591b2321b0052b58b046765958dd1bcd595959182db0052c0d5c5a2db006
2cb12201885058b020885c5c1bb000592db0072cb12401885058b040885c
5c1bb000592db0082c121120392f2db0092c207db0062b58c41bcd5920b0
0325492320b004264ab00050588a658a6120b0005058381b2121591b8a8a
6120b0005258381b21215959182db00a2cb0062b5821101b1021592db00b
2c20d2b00c2b2db00c2c202fb0072b5c582020472346616a205820646238
1b2121591b21592db00d2c12112020392f208a20478a4661238a208a234a
b000505823b0005258b040381b21591b23b0005058b04065381b2159592d
b00e2cb0062b583dd61821211b20d68a4b5258208a234920b0005558381b
2121591b212159592db00f2c2320d6202fb0072b5c582320584b531b21b0
0159588ab0042649238a23208a498a2361381b21212121591b2121212121
592db0102c20dab0122b2db0112c20d2b0122b2db0122c202fb0072b5c58
2020472346616a8a2047234623616a602058206462381b2121591b212159
2db0132c208a208a8720b003254a64238a07b02050583c1bc0592d000000
000100000000b333b253b66f5f0f3cf5001f03e800000000c65fa7820000
0000c65fa782fc15fe9e05b3045600020008000200000000000000010000
03a2ff0600c805a5fc15fe8205b300640019000000000000000000000000
05eb02f8000a00000000014d0000016600000133007001ff00fe00000000
000000000000000000000000000000000000000000000000000000000000
00000132004900000000000000000000000001ff00750000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002fe007400000000000000000000000002e7003b
0000000002cb00960000000002a6003e028c003e00000000000000000000
000000000000000000000273003e03800042000000000000000000000000
0000000002d9003f0232004a02cb00af02e700ca00000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000001ff006c00000000000000000000
000000000000013200530000000000000000000000000000000002320053
00000000000000000000000001a500530000000000000000000000000000
00000000000001cf00350000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000022b00560000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001ff00640000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000a200a200a200a200ee0140
014001400140014001400140014001400140018001800180018001e201e2
01e201e201e201e201e201e201e201e201e201e201e20218021802180218
0338033803be03be04ec05ca05ca05ca05ca05ca05ca06a0078407840784
07840784087e097e0a3c0ada0ada0ada0ada0ada0ada0ada0ada0ada0ada
0ada0ada0ada0ada0ada0baa0baa0baa0baa0baa0c6a0c6a0c6a0c6a0c6a
0d480d480d480d480de00de00de00de00de00de00eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0fac0fac0fac0fac0fac0fac0fac0fac
0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac
0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac
0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac
0fac00010000061f00660005000000000002000100000014000001000205
000000000000001400f60001000000000000006800000001000000000001
000900780001000000000002000600820001000000000003002c00680001
000000000004001000780001000000000005000e00940001000000000006
000f00a2000100000000000c002200b1000100000000000d00cf00d30001
00000000000e001a0188000300010409000000d001a20003000104090001
001202920003000104090002000c02a60003000104090003005802720003
000104090004002002920003000104090005001c02ca0003000104090006
001e02e6000300010409000c00440304000300010409000d019e03480003
00010409000e003404b2436f6e76657274656420627920416e6472657920
562e2050616e6f762066726f6d2054655820666f6e74732e20536f6d6520
676c797068732061726520636f706965642066726f6d20426c756520536b
7920666f6e74732072656c656173656420627920414d532e466f6e74466f
72676520322e30203a20434d55205365726966204974616c6963203a2031
382d362d3230303956657273696f6e20302e372e3020434d555365726966
2d4974616c6963687474703a2f2f636d2d756e69636f64652e736f757263
65666f7267652e6e65742f5468697320466f6e7420536f66747761726520
6973206c6963656e73656420756e646572207468652053494c204f70656e
20466f6e74204c6963656e73652c2056657273696f6e20312e312e0a5468
6973206c6963656e736520697320636f7069656420746f67657468657220
77697468207468697320666f6e74207061636b61676520696e204f464c2e
7478742c0a616e6420697320616c736f20617661696c61626c6520776974
682061204641512061743a20687474703a2f2f736372697074732e73696c
2e6f72672f4f464c0043006f006e00760065007200740065006400200062
007900200041006e006400720065007900200056002e002000500061006e
006f0076002000660072006f006d002000540065005800200066006f006e
00740073002e00200053006f006d006500200067006c0079007000680073
002000610072006500200063006f0070006900650064002000660072006f
006d00200042006c0075006500200053006b007900200066006f006e0074
0073002000720065006c0065006100730065006400200062007900200041
004d0053002e0046006f006e00740046006f00720067006500200032002e
00300020003a00200043004d005500200053006500720069006600200049
00740061006c006900630020003a002000310038002d0036002d00320030
0030003900560065007200730069006f006e00200030002e0037002e0030
00200043004d005500530065007200690066002d004900740061006c0069
00630068007400740070003a002f002f0063006d002d0075006e00690063
006f00640065002e0073006f00750072006300650066006f007200670065
002e006e00650074002f005400680069007300200046006f006e00740020
0053006f0066007400770061007200650020006900730020006c00690063
0065006e00730065006400200075006e0064006500720020007400680065
002000530049004c0020004f00700065006e00200046006f006e00740020
004c006900630065006e00730065002c002000560065007200730069006f
006e00200031002e0031002e000a00540068006900730020006c00690063
0065006e0073006500200069007300200063006f00700069006500640020
0074006f0067006500740068006500720020007700690074006800200074
00680069007300200066006f006e00740020007000610063006b00610067
006500200069006e0020004f0046004c002e007400780074002c000a0061
006e006400200069007300200061006c0073006f00200061007600610069
006c00610062006c00650020007700690074006800200061002000460041
0051002000610074003a00200068007400740070003a002f002f00730063
00720069007000740073002e00730069006c002e006f00720067002f004f
0046004cb801ff85b0018d004bb0085058b101018e59b146062b5821b010
594bb014525821b080591db0062b5c5800b0052045b0032b44b0082045ba
000501f400022bb0032b44b0072045b20851022bb0032b44b0062045b207
31022bb0032b4401b0092045b0032b44b00f2045b20941022bb10346762b
44b00e2045b20f32022bb10346762b44b00d2045b20e24022bb10346762b
44b00c2045b20da5022bb10346762b44b00b2045b20c16022bb10346762b
44b00a2045b20b72022bb10346762b44b0102045ba00097fff00022bb103
46762b44b0112045b2104d022bb10346762b44b0122045b21123022bb103
46762b44b0132045b21221022bb10346762b44b0142045b21315022bb103
46762b44b0152045b21413022bb10346762b4459000000>
[8025 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 2520 41 <0001003e000002db02a8005a00c800b25901002bb10305e9b04c32b21604
002bb10c05e9b02732b42c4559160d2bb12c05e901b05b2fb030d6b1350b
e9b03510b23021102bb11d0be9b01d10b3071d180e2bb400150007042bb0
002fb418150007042bb05cd6b0361ab106078704b0062eb007c0b14611f9
b02bc005b32c462b132bb345462b132b0300b306072b462e2e2e2e01b506
072b2c45462e2e2e2e2e2eb0401ab130001112b2113b51393939b11d2111
12b0243900b145031112b03b39b10c2c1112b31b1f3335241739b01611b0
1a39303137343633323637133635342e0123222e013534363321321e0106
17070e0223223537363534262b0122060703333236373e01333215140f01
0e012322353437363534262b01070615141e013b01321e01151423222623
220623223e0c0f311b068604041b1b0c09060c0f01c70a060a0301170102
07070f0106344d751a1006404e3b2c0e0406090f02370406090f03081c2e
533f040521230a0a080715165d171452140e0c0d060f1b02180f08060605
0106060c0601050a0ab10a08040c102e14372d0a18fefd27390e070b0608
dc0e060c040a20111614fc0f060807060105061303030000>JAAAAA+CMU#20Serif,Italic AddT42Char 
1 0 0 <0005000a000a02ee02fd000300060009000c000f00ee00b20a04002bb00c
33b401050022042bb0002fb407050022042bb0083201b0102fb000d6b104
0fe9b00632b00410b2000e102bb00f32b1030fe9b011d6b0361ab1040c87
04b0042e05b00cc0b1070df904b00fc0b106088705b0082e04b006c0b10e
0df905b00ac0b00610b3050608132bb1060808b00410b305040c132b05b0
0610b3090608132bb1060808b00710b309070f132b05b00a10b30b0a0e13
2bb10a0e08b00410b30b040c132b05b00a10b30d0a0e132bb10a0e08b007
10b30d070f132b00b7040506090b0d0e0f2e2e2e2e2e2e2e2e01b7050708
090a0b0c0d2e2e2e2e2e2e2e2eb0401a0100303137112111250901132109
030301110a02e4fd580114feec230226feedfeed01130113f101140a02f3
fd0d6601140113fdaf01140167feec0114fec3feec022700>JAAAAA+CMU#20Serif,Italic AddT42Char 
JAAAAA+CMU#20Serif,Italic /CharStrings get begin
/g41 41 def
end
JAAAAA+CMU#20Serif,Italic /Encoding get
dup 70 /g41 put
pop
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic /JAAAAA+CMU#20Serif,Italic findfont ct_VMDictPut
/IZFJQX+CMU#20Serif,Italic*1 
[70{/.notdef}rp /g41 185{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
143.38 66.35 mo
(F)sh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 2964 47 <0001003e0000027002ab003f00fb00b23c01002bb10305e9b02832b21204
002bb10c05e9b01d3201b0402fb000d6b435150007042bb041d6b0361ab1
06078704b0062eb007c0b12411f9b021c0b12d3087b02d2eb030c0b13805
f9b034c0b02410b3222421132bb3232421132bb02d10b32e2d30132bb32f
2d30132bb03810b3353834132bb3373834132bb2232421208a208a23060e
111239b02239b22e2d30208a208a23060e111239b02f39b2373834111239
00400e060721222f3435373823242d2e302e2e2e2e2e2e2e2e2e2e2e2e2e
2e01400d060721222f34373823242d2e302e2e2e2e2e2e2e2e2e2e2e2e2e
b0401a01b135001112b1101a393900b10c031112b0323930313734363332
3637133635342623222e01353433321633323633321514062b0122060703
1406141e013b01323e03373e01333215070615070e012321222e013e0c0f
311b0687041c1e0b090713145215175d160f0c100a3a1f078804020e0f51
2d482c28110d0605090f02024c050810fe540a08070c0d060f1b021f0e05
0b060105061303030c0d06111cfde001110804021c234129240f070c0606
01d70d0501050000>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g47 47 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 76 /g47 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[70{/.notdef}rp /g41 5{/.notdef}rp /g47 179{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
149.95 67.75 mo
(L)sh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if

1 0 3 <> IZFJQX+CMU#20Serif,Italic AddT42Char 
1 640 15 <00010049ff3f00e0006a0012004200b20601002bb40b050013042bb20e01
002bb21100002b01b0132fb008d6b10d15e9b014d6b10d081112b1030439
3900b106111112b00339b00b11b1040d3939303117343736370623223534
36333215140e012322490d5c1413162c251c2e40420b0ab7040d4e670f2a
18283b3676440000>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g3 3 def
/g15 15 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 32 /g3 put
dup 44 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 25{/.notdef}rp /g41 5{/.notdef}rp /g47 
179{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
154.15 66.35 mo
(, )
[3 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
160.8 66.35 mo
(F)sh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 5240 56 <000100caffea035402ab003d009000b23b01002bb12005e9b21204002bb0
2c33b11705e9b208283532323201b03e2fb000d6b11d11e9b03fd6b0361a
b102038704b0022eb003c0b11b11f9b01ac0b1232487b0232eb024c0b138
05f9b037c002b702031a1b232437382e2e2e2e2e2e2e2e01b702031a1b23
2437382e2e2e2e2e2e2e2eb0401a01b11d001112b2080c0e39393900b117
201112b000393031373437133635342623222e0135343216323633321514
062322060703061514163332363713363534272235343332163236333215
14230607030e01232226ca0860041c1e0b09072651284f130e0c122e1b06
640a3f2c48891759043c12120f41203f0f0d0f55105b16995a4a68a62020
01820e050b060105061303030d0c060f19fe6e2c203f3e7d5f0164100829
020c1303030d120341fe925997660000>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g56 56 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 85 /g56 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 25{/.notdef}rp /g41 5{/.notdef}rp /g47 
8{/.notdef}rp /g56 170{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
167.38 67.75 mo
(U)sh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
172.35 66.35 mo
(, )
[3 0 ]xsh
%ADOBeginSubsetFont: LAAAAA+CMU#20Serif,Italic Initial
ct_T42Dict begin
-1 -0.352 1.457 1.109
 256 array 0 1 255 {1 index exch /.notdef put} for  /LAAAAA+CMU#20Serif,Italic
Type42DictBegin
[<00010000000c000c000c000c4f532f323d3292f3000000cc000000566376
7420073f074000000124000000586670676d6b042d570000017c00000205
676c796633558cb300002f5000001f5868656164edbc4610000003840000
003668686561064e097c000003bc00000024686d747837a108cd000003e0
000018146c6f6361e0e6e87400001bf400000c406d617870073a026d0000
2834000000206e616d658a07504800002854000005dc70726570d69cdb8b
00002e300000011e67646972000000000000000000000000000101b601f4
00050000028a02bc0021008c028a02bcff8c01e000310102000002000603
000000000000e10002ff5201e1eb00020004000000005066456400010000
ffff0320ff3800c803a200fa0000011f000000000000ff3e000001ae029a
02a5001f00000017001e004600180021003000350038003d0046004e0056
005b0063006b00290042003f00580033001b00510049004c0054003b0015
002700610013005e00110023002e002c0025000eb0002cb000134bb01b50
58b04a7659b000233f18b0062b583d594bb01b50587d5920d4b001132e18
2db0012c20dab00c2b2db0022c4b5258452359212db0032c691820b04050
5821b040592db0042cb0062b582123217a58dd1bcd591b4b525858fd1bed
591b2321b0052b58b046765958dd1bcd595959182db0052c0d5c5a2db006
2cb12201885058b020885c5c1bb000592db0072cb12401885058b040885c
5c1bb000592db0082c121120392f2db0092c207db0062b58c41bcd5920b0
0325492320b004264ab00050588a658a6120b0005058381b2121591b8a8a
6120b0005258381b21215959182db00a2cb0062b5821101b1021592db00b
2c20d2b00c2b2db00c2c202fb0072b5c582020472346616a205820646238
1b2121591b21592db00d2c12112020392f208a20478a4661238a208a234a
b000505823b0005258b040381b21591b23b0005058b04065381b2159592d
b00e2cb0062b583dd61821211b20d68a4b5258208a234920b0005558381b
2121591b212159592db00f2c2320d6202fb0072b5c582320584b531b21b0
0159588ab0042649238a23208a498a2361381b21212121591b2121212121
592db0102c20dab0122b2db0112c20d2b0122b2db0122c202fb0072b5c58
2020472346616a8a2047234623616a602058206462381b2121591b212159
2db0132c208a208a8720b003254a64238a07b02050583c1bc0592d000000
000100000000b333b253b66f5f0f3cf5001f03e800000000c65fa7820000
0000c65fa782fc15fe9e05b3045600020008000200000000000000010000
03a2ff0600c805a5fc15fe8205b300640019000000000000000000000000
05eb02f8000a00000000014d0000016600000133007001ff00fe00000000
000000000000000000000000000000000000000000000000000000000000
00000132004900000000000000000000000001ff00750000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000002fe007400000000000000000000000002e7003b
0000000002cb00960000000002a6003e028c003e00000000000000000000
000000000000000000000273003e03800042000000000000000000000000
0000000002d9003f0232004a02cb00af02e700ca00000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000001ff006c00000000000000000000
000000000000013200530000000000000000000000000000000002320053
00000000000000000000000001a500530000000000000000000000000000
00000000000001cf00350000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000022b00560000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000001ff00640000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000a200a200a200a200ee0140
014001400140014001400140014001400140018001800180018001e201e2
01e201e201e201e201e201e201e201e201e201e201e20218021802180218
0338033803be03be04ec05ca05ca05ca05ca05ca05ca06a0078407840784
07840784087e097e0a3c0ada0ada0ada0ada0ada0ada0ada0ada0ada0ada
0ada0ada0ada0ada0ada0baa0baa0baa0baa0baa0c6a0c6a0c6a0c6a0c6a
0d480d480d480d480de00de00de00de00de00de00eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca
0eca0eca0eca0eca0eca0eca0eca0eca0eca0eca0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a0f4a
0f4a0f4a0f4a0f4a0f4a0f4a0f4a0fac0fac0fac0fac0fac0fac0fac0fac
0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac
0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac
0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac0fac
0fac00010000061f00660005000000000002000100000014000001000205
000000000000001400f60001000000000000006800000001000000000001
000900780001000000000002000600820001000000000003002c00680001
000000000004001000780001000000000005000e00940001000000000006
000f00a2000100000000000c002200b1000100000000000d00cf00d30001
00000000000e001a0188000300010409000000d001a20003000104090001
001202920003000104090002000c02a60003000104090003005802720003
000104090004002002920003000104090005001c02ca0003000104090006
001e02e6000300010409000c00440304000300010409000d019e03480003
00010409000e003404b2436f6e76657274656420627920416e6472657920
562e2050616e6f762066726f6d2054655820666f6e74732e20536f6d6520
676c797068732061726520636f706965642066726f6d20426c756520536b
7920666f6e74732072656c656173656420627920414d532e466f6e74466f
72676520322e30203a20434d55205365726966204974616c6963203a2031
382d362d3230303956657273696f6e20302e372e3020434d555365726966
2d4974616c6963687474703a2f2f636d2d756e69636f64652e736f757263
65666f7267652e6e65742f5468697320466f6e7420536f66747761726520
6973206c6963656e73656420756e646572207468652053494c204f70656e
20466f6e74204c6963656e73652c2056657273696f6e20312e312e0a5468
6973206c6963656e736520697320636f7069656420746f67657468657220
77697468207468697320666f6e74207061636b61676520696e204f464c2e
7478742c0a616e6420697320616c736f20617661696c61626c6520776974
682061204641512061743a20687474703a2f2f736372697074732e73696c
2e6f72672f4f464c0043006f006e00760065007200740065006400200062
007900200041006e006400720065007900200056002e002000500061006e
006f0076002000660072006f006d002000540065005800200066006f006e
00740073002e00200053006f006d006500200067006c0079007000680073
002000610072006500200063006f0070006900650064002000660072006f
006d00200042006c0075006500200053006b007900200066006f006e0074
0073002000720065006c0065006100730065006400200062007900200041
004d0053002e0046006f006e00740046006f00720067006500200032002e
00300020003a00200043004d005500200053006500720069006600200049
00740061006c006900630020003a002000310038002d0036002d00320030
0030003900560065007200730069006f006e00200030002e0037002e0030
00200043004d005500530065007200690066002d004900740061006c0069
00630068007400740070003a002f002f0063006d002d0075006e00690063
006f00640065002e0073006f00750072006300650066006f007200670065
002e006e00650074002f005400680069007300200046006f006e00740020
0053006f0066007400770061007200650020006900730020006c00690063
0065006e00730065006400200075006e0064006500720020007400680065
002000530049004c0020004f00700065006e00200046006f006e00740020
004c006900630065006e00730065002c002000560065007200730069006f
006e00200031002e0031002e000a00540068006900730020006c00690063
0065006e0073006500200069007300200063006f00700069006500640020
0074006f0067006500740068006500720020007700690074006800200074
00680069007300200066006f006e00740020007000610063006b00610067
006500200069006e0020004f0046004c002e007400780074002c000a0061
006e006400200069007300200061006c0073006f00200061007600610069
006c00610062006c00650020007700690074006800200061002000460041
0051002000610074003a00200068007400740070003a002f002f00730063
00720069007000740073002e00730069006c002e006f00720067002f004f
0046004cb801ff85b0018d004bb0085058b101018e59b146062b5821b010
594bb014525821b080591db0062b5c5800b0052045b0032b44b0082045ba
000501f400022bb0032b44b0072045b20851022bb0032b44b0062045b207
31022bb0032b4401b0092045b0032b44b00f2045b20941022bb10346762b
44b00e2045b20f32022bb10346762b44b00d2045b20e24022bb10346762b
44b00c2045b20da5022bb10346762b44b00b2045b20c16022bb10346762b
44b00a2045b20b72022bb10346762b44b0102045ba00097fff00022bb103
46762b44b0112045b2104d022bb10346762b44b0122045b21123022bb103
46762b44b0132045b21221022bb10346762b44b0142045b21315022bb103
46762b44b0152045b21413022bb10346762b4459000000>
[8025 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 7572 496 <00020056fff5021d01ba00270035006c00b22501002bb01d33b42a0700c1
042bb22501002bb41505001e042bb20302002bb00b33b431070031042b01
b0362fb000d6b1280fe9b02810b20017102bb41a0a0035042bb037d6b117
281112b3031d252f24173900b131151112400a000d08181a1f2223282f24
1739303137343633321e02173e0133321514060706151416333237361615
14062322353436352306232226371433323e02353423220e0256965b1924
1208020a1618192a11201c11301b050a48344101013a503a463d4a2b4729
164b29462a17906fbb13221b13362c180e8829462c1e19450a08081e6553
0206015c542b65456562246742636500>LAAAAA+CMU#20Serif,Italic AddT42Char 
1 0 0 <0005000a000a02ee02fd000300060009000c000f00ee00b20a04002bb00c
33b401050022042bb0002fb407050022042bb0083201b0102fb000d6b104
0fe9b00632b00410b2000e102bb00f32b1030fe9b011d6b0361ab1040c87
04b0042e05b00cc0b1070df904b00fc0b106088705b0082e04b006c0b10e
0df905b00ac0b00610b3050608132bb1060808b00410b305040c132b05b0
0610b3090608132bb1060808b00710b309070f132b05b00a10b30b0a0e13
2bb10a0e08b00410b30b040c132b05b00a10b30d0a0e132bb10a0e08b007
10b30d070f132b00b7040506090b0d0e0f2e2e2e2e2e2e2e2e01b7050708
090a0b0c0d2e2e2e2e2e2e2e2eb0401a0100303137112111250901132109
030301110a02e4fd580114feec230226feedfeed01130113f101140a02f3
fd0d6601140113fdaf01140167feec0114fec3feec022700>LAAAAA+CMU#20Serif,Italic AddT42Char 
LAAAAA+CMU#20Serif,Italic /CharStrings get begin
/g496 496 def
end
LAAAAA+CMU#20Serif,Italic /Encoding get
dup 32 /g496 put
pop
end
%ADOEndSubsetFont
/IZFJQY+CMU#20Serif,Italic /LAAAAA+CMU#20Serif,Italic findfont ct_VMDictPut
/IZFJQY+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g496 223{/.notdef}rp]
IZFJQY+CMU#20Serif,Italic nf
IZFJQY+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
179 66.35 mo
( )sh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
184.58 66.35 mo
(, )
[3 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 7104 91 <00010035fff5020601ba005300f200b25101002bb04c33b10a07e9b03f32
b20a510a2bb3000a45092bb22202002bb02733b11607e9b03632b216220a
2bb300161c092bb300162d092bb4080351450d2bb408050019042b01b054
2fb000d6b10512e9b00510b20030102bb12a12e9b055d6b0361ab10d1187
04b00d2eb011c0b13a0ff9b038c0b00d10b30e0d11132bb30f0d11132bb2
0e0d11208a208a23060e111239b00f3900b50f11383a0d0e2e2e2e2e2e2e
01b50f11383a0d0e2e2e2e2e2e2eb0401a01b105001112b208191e393939
b03011b70a162227363f4c51241739b02a12b234424739393900b1030811
12b2003c4f393939b01611b0243930313734363332151406071633323e02
37363736353426232206070e012322343e023332173e0133321615140623
222635343e013726232207060706151416333236373e01333215140e0223
22262706232226351e14221314111b1521170c080c0b151a162143130404
0a0f15243e2347190c32241e3920111211021412101c3b1d170b131c1322
42130405090f14243e241b370d273b243433181e200e1d050e1832272031
2a56181e21403d0c051430372944172d1d221a1b140c050d1a040e6b6128
5114231d403d0c050a092f382a1e26442200>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g91 91 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 120 /g91 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 25{/.notdef}rp /g41 5{/.notdef}rp /g47 
8{/.notdef}rp /g56 34{/.notdef}rp /g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
191.23 66.35 mo
(x)sh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 5972 76 <00020053fff5014b0290002f003b00da00b21d01002bb11007e9b2101d0a
2bb3001015092bb20602002bb12907e9b229060a2bb300292e092bb0392f
b433050019042b01b03c2fb000d6b12b0be9b02b10b20020102bb10e0ee9
b20e200a2bb3000e17092bb00e10b22027102bb1090ee9b03020d611b136
11e9b03dd6b0361ab122258704b0222eb025c0b10c0ff9b00bc0b02210b3
242225132bb2242225208a208a23060e11123900b40b0c2224252e2e2e2e
2e01b40b0c2224252e2e2e2e2eb0401a01b1270e1112b106293939b10930
1112b03939b03611b0333900b129101112b109203939303113343e033332
1615140f010615143332373e01333215140e03232226353437363f013635
342322070e0123221334363332161514062322265308141c2e1a1f2c0c40
1a163b220305090f08141b2e1a252712180d1e12163b220306090fa11f11
0d151f110d150120031e2f2b1f29271523ab4a161c7d0c050a031d2f2c1f
3020143142215331171c7e0b05014a141c1011141c100000>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g76 76 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 105 /g76 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 25{/.notdef}rp /g41 5{/.notdef}rp /g47 
8{/.notdef}rp /g56 19{/.notdef}rp /g76 14{/.notdef}rp /g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
195.88 67.75 mo
(i)sh
IZFJQX+CMU#20Serif,Italic*1 [6.775 0 0 -6.775 0 0 ]msf
197.93 63.33 mo
(L)sh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
202.13 66.35 mo
(,)sh
1 lw
1 lc
1 lj
173.81 32.11 mo
173.81 40.55 li
@
173.81 45.88 mo
170.29 38.84 li
172.5 39.95 175.11 39.95 177.33 38.84 cv
173.81 45.88 li
cp
ef
134.4 132.14 mo
208.4 132.14 li
213.21 118.77 li
139.21 118.77 li
134.4 132.14 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
2 ml
134.4 132.14 mo
208.4 132.14 li
213.21 118.77 li
139.21 118.77 li
134.4 132.14 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if

1 0 3 <> IZFJQW+CMU#20Serif AddT42Char 
1 3564 51 <000200230000027002ab001c002e006d00b20002002bb10106e9b01732b2
0b05002bb10a06e9b02a32b4131d000b0d2bb11309e901b02f2fb006d6b1
1d11e9b01332b21d060a2bb3401d18092bb2061d0a2bb3400601092bb00a
32b01d10b20624102bb10f13e9b030d6b11d061112b01b3900b10a1d1112
b00f3930313335333236351134262b01352132161514062b011514163b01
152623221333323e0335342e032b01220615231836191936180161658789
5ba91936182371709a8a2d411e110202111e412d59220f1f121d020f1d12
1f6f4b4a6bee1d121f030153191f321c15161c321f180e1a0000>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g3 3 def
/g51 51 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 32 /g3 put
dup 80 /g51 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[32{/.notdef}rp /g3 30{/.notdef}rp /g34 /.notdef /g36 /.notdef /g38 
/g39 /g40 /g41 2{/.notdef}rp /g44 4{/.notdef}rp /g49 /g50 
/g51 /.notdef /g53 /g54 /g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.75 0 0 -9.75 0 0 ]msf
153.45 128.85 mo
(INPUT )
[3.74393 7.51724 6.73726 7.51718 6.74701 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 6356 81 <00010053fff5024a01ba004700f700b22301002bb03633b11607e9b21623
0a2bb300161b092bb20602002bb00d33b14007e9b02c32b240060a2bb300
4046092b01b0482fb000d6b4440a0072042bb04410b20026102bb1140ee9
b214260a2bb300141d092bb01410b2262a102bb1100fe9b049d6b0361ab1
3b3c8704b03b2eb03cc0b1340ff9b030c0b3313430132bb3323430132bb3
333430132bb2333430208a208a23060e111239b03139b0323900b6303334
3b3c31322e2e2e2e2e2e2e01b63033343b3c31322e2e2e2e2e2e2eb0401a
01b144001112b04639b02611b2060939393939b01412b20d282c393939b0
2a11b0123900b140161112b310092639241739303113343e013736333216
173e023332161514070615143332373e01333215140e0323222635343736
353423220706070e010f010623222635343713363534232206070e012322
530810081c2c212e050a1d43252c3c3d121638250305090f08141c2d1a23
29103a2e4d3a110d020c02280a1a0e0e034b071a161f0f04050a0f012002
1f3212352b240f1e2230383da236151d7d0c050a031e2f2b1f2e22162aa6
3742631c350b2b0ba01a100a0509012c1c17283c3b100700>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g81 81 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 110 /g81 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 25{/.notdef}rp /g41 5{/.notdef}rp /g47 
8{/.notdef}rp /g56 19{/.notdef}rp /g76 4{/.notdef}rp /g81 9{/.notdef}rp /g91 
135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
189.48 128.85 mo
(n)sh
138.37 159.27 mo
204.92 159.27 li
209.24 145.9 li
142.69 145.9 li
138.37 159.27 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
138.37 159.27 mo
204.92 159.27 li
209.24 145.9 li
142.69 145.9 li
138.37 159.27 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.75 0 0 -9.75 0 0 ]msf
143.45 156.02 mo
(INPUT )
[3.74393 7.51724 6.76651 7.51718 6.77626 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
179.48 156.02 mo
(x)sh
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
184.13 157.42 mo
(i)sh
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
186.18 153.02 mo
(L)sh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
190.38 156.02 mo
(,)sh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
193.45 156.02 mo
(x)sh
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
198.1 157.42 mo
(i)sh
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
200.15 153.02 mo
(U)sh
1 lw
1 lc
1 lj
173.81 132.14 mo
173.81 140.58 li
@
173.81 145.9 mo
170.29 138.86 li
172.5 139.97 175.11 139.97 177.33 138.86 cv
173.81 145.9 li
cp
ef
18.75 163.92 mo
117.112 163.92 li
117.112 141.243 li
18.75 141.243 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
[1.5015 .75075 ] 0 dsh
18.75 163.92 mo
117.112 163.92 li
117.112 141.243 li
18.75 141.243 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
24.425 149.85 mo
(REPEAT )
[7.48766 6.74468 6.74476 6.74468 7.48765 7.48765 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
70.325 149.85 mo
(n)sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
75.975 149.85 mo
( )sh
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 2684 48 <000100250000036f02ab003c00d400b20002002bb1212f3333b10106e9b2
1f2639323232b21505002bb00c33b12c06e9b10a173232b21505002bb432
06004d042b01b03d2fb006d6b1340ce9b234060a2bb3403439092bb20634
0a2bb3400601092bb00b32b03410b2062a102bb11c11e9b21c2a0a2bb340
1c20092bb01632b22a1c0a2bb3402a26092bb03ed6b0361ab1323187b032
2eb031c0b11017f9b011c0b12d2c87b02c2e04b02dc0b11218f9b1101108
b011c000b41011122d312e2e2e2e2e01b61011122c2d31322e2e2e2e2e2e
2eb0401a01b11c2a1112b023390030313335323e02351134262b01353332
16171b013e013b0115232206151114163b01152623220735333236351123
0306232227032311141e023315262225242e1104193618a9120a07d9db05
0913a9183619193618256a6b2518361901f6070b0c08f10104112e246918
1f0e1b120f01f41d121f0610fdd002330e051f121dfdf11d121f03031f12
1d023efd871316026efde50f121b0e1f03000000>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g48 48 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 77 /g48 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[32{/.notdef}rp /g3 30{/.notdef}rp /g34 /.notdef /g36 /.notdef /g38 
/g39 /g40 /g41 2{/.notdef}rp /g44 3{/.notdef}rp /g48 /g49 
/g50 /g51 /.notdef /g53 /g54 /g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
79.3 149.85 mo
(TIMES )
[7.51698 3.00085 9.76528 6.76423 5.27855 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
30.525 161.87 mo
(FOR )
[6.74468 7.49735 7.48766 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
55.55 161.87 mo
(i )
[3 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 808 32 <00020039008d02cf016700090013001900b0082fb10208e9b0122fb10c08
e901b0142fb015d600303137363321321514232122353433213215142321
2239011302651d1bfda01b1502631e19fd9714980c0b0cce0c0c0b00>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g32 32 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 61 /g32 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[32{/.notdef}rp /g3 28{/.notdef}rp /g32 /.notdef /g34 /.notdef /g36 
/.notdef /g38 /g39 /g40 /g41 2{/.notdef}rp /g44 3{/.notdef}rp 
/g48 /g49 /g50 /g51 /.notdef /g53 /g54 /g55 
/g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
62.2 161.87 mo
(= )
[7.52505 0 ]xsh
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 640 20 <00010059000001a3029a0016006000b20f02002bb11006e9b00a32b20304
002bb101031020c02fb10006e901b0172fb014d6b10710e9b207140a2bb3
40070b092bb214070a2bb3401401092bb018d6b107141112b0033900b100
101112b00739b00111b01539b00312b00639303113353237321615111416
3b01152622073533323635110659783e11061d402023fe23203f1e34023b
1f400812fdcf1e121f03031f121e02061a00>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g20 20 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 49 /g20 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g20 11{/.notdef}rp /g32 /.notdef /g34 
/.notdef /g36 /.notdef /g38 /g39 /g40 /g41 2{/.notdef}rp 
/g44 3{/.notdef}rp /g48 /g49 /g50 /g51 /.notdef /g53 
/g54 /g55 /g56 170{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
73.35 161.87 mo
(1 )
[5.27534 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
81.725 161.87 mo
(TO )
[7.48765 7.49736 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
100.08 161.87 mo
(n)sh
1 lw
1 lc
1 lj
[1 2 ] 0 dsh
117.11 152.59 mo
135.2 152.59 li
@
140.53 152.59 mo
133.49 156.11 li
134.6 153.89 134.6 151.28 133.49 149.07 cv
140.53 152.59 li
cp
ef
134.4 105 mo
213.203 105 li
213.203 82.323 li
134.4 82.323 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
[] 0 dsh
134.4 105 mo
213.203 105 li
213.203 82.323 li
134.4 82.323 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 1072 36 <0002003b000002b202cc004a004d016b00b21c01002bb04233b11805e9b0
2732b20c04002bb20804002bb4314b1c0c0d2bb04c33b13108e9b0303201
b04e2fb04fd6b0361ab1050887b0082e04b005c0b14d1bf9b037c0b14d2d
87b1374d08b04d1005b02dc0b1131cf9b015c004b00510b3060508132bb3
070508132b05b01310b3141315132bb04d10b32e4d2d132bb32f4d2d132b
b3304d2d132bb03710b331374d132b04b332374d132bb333374d132bb334
374d132bb335374d132bb336374d132b05b34b374d132bb04d10b34c4d2d
132bb2060508208a208a23060e111239b00739b236374d111239b03539b0
3439b03339b03239b2141315208a208a23060e111239b22e4d2d111239b0
2f3900401005061314154d072d2e2f3233343536372e2e2e2e2e2e2e2e2e
2e2e2e2e2e2e2e014015050613141530314b4c4d07082d2e2f3233343536
372e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e2eb0401a0100b1181c
1112b2002540393939b03111b1023e3939303137343e0237013e0433321e
03141715131e011732151423222623220e0123223534361636373635342e
0127230e0815141e02151423222e0123220623221333033b162134180147
0105050709050406040202012b01141f1b14053e24223319020f10171e0b
08030503e409150d0f08090405011115111403172817132f0316f8d0160e
0d060127280240010a05080301050208020505fd93170c010e110301020e
0a08010609071406244b281025161a0f110a0b07040e1002070713020103
010401470000>IZFJQX+CMU#20Serif,Italic AddT42Char 
1 1648 38 <00010096ffea032c02c10031008000b22f01002bb12305e9b2232f0a2bb3
002328092bb20404002bb00933b11a05e9b21a040a2bb3401a11092b01b0
322fb000d6b12012e9b02010b20026102bb12a0be9b02a10b22613102bb1
0e0be9b20e130a2bb3400e0b092bb033d6b126201112b21a042f393939b1
0e131112b10617393900b11a231112b100063939303137343e0133321737
36333215140f010e01232235343e01353426232206070e01151416333236
3736333215140e02232226967cc46562353f09070b023d0306090f020345
493c803135346547499723030d0f2a487a446a8bf572d882554a0b0a0608
f30c060a01141d0b4b6c474349c23e63637574080a15525b44920000>IZFJQX+CMU#20Serif,Italic AddT42Char 
1 1916 40 <0001003e000002e702a80065014a00b26201002bb10305e9b04f32b21604
002bb10c05e9b02832b42d4862160d2bb12d05e9b22d480a2bb3402d3509
2b01b0662fb031d6b1370be9b03710b23121102bb11d0be9b01d10b3071d
180e2bb400150007042bb0002fb418150007042bb067d6b0361ab1060787
04b0062eb007c0b14b11f9b02cc0b1404387b0402eb043c0b13a05f9b039
c005b04b10b32d4b2c132b04b04010b3414043132bb3424043132b05b04b
10b3484b2c132b04b3494b2c132bb34a4b2c132bb24a4b2c208a208a2306
0e111239b04939b2414043111239b0423900400b06072c393a424940414a
4b2e2e2e2e2e2e2e2e2e2e2e01400d06072c2d393a42484940414a4b2e2e
2e2e2e2e2e2e2e2e2e2e2eb0401a01b131001112b2113f4c393939b12137
1112b1565b3939b01d11b0253900b148031112b23d595b393939b10c2d11
12b11b1f3939b01611b01a39303137343633323637133635342e0123222e
013534363321321e010617070e022322353437363534262b0122060f0133
323637363736333215140f010e01232235343635363534262b0103140614
1e013b01323e03373e01333215140f010e012321222e013e0c0f311b0686
04041b1b0c09060c0f01d30a060a030117010207070f0205374e7d1a1006
3d513b2d0f060503051003370306091002091c2f574504020e0f7a2f462f
291b140706080f045905080ffe210a08070c0d060f1b02180f0806060501
06060c0601050a0ab10a08040c070a2818382d0a18f626371601010c0409
dc0d070c02080121121714feed0111080402121a39363011070b0408db0b
05010500>IZFJQX+CMU#20Serif,Italic AddT42Char 
1 4860 55 <000100af0000032602a5004b00ac00b23301002bb13805e9b02432b20704
002bb41a05006c042bb04332b21a070a2bb3001a11092b01b04c2fb000d6
b40d150007042bb4470b0034042bb00d10b1170de9b0172fb01320d611b4
0f0a0072042bb04dd6b0361ab13c3d8704b03c2eb03dc0b11f11f9b01ec0
02b31e1f3c3d2e2e2e2e01b31e1f3c3d2e2e2e2eb0401a01b147001112b1
33353939b01311b31a2b3038241739b10f171112b0113900b11a381112b1
004a3939303113343f013e013321321e0115140f010e0123223534373635
34262322070607030615141617321e013b01321514232226232206232235
34363b01323637133635342e012b012206070e012322af053b0409100201
0a0807011e02060a0f020a314e2c08100786040c15011218070f1915196a
1a19681a110d0f103f24078604020a0b226148230a06080f01cf040db30d
050105060904b30e070d040b3b1f2f1d02021ffde60e050b080201010b14
03030c0d06111c02190c0a04040339691a060000>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g36 36 def
/g38 38 def
/g40 40 def
/g55 55 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 65 /g36 put
dup 67 /g38 put
dup 69 /g40 put
dup 84 /g55 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 20{/.notdef}rp /g36 /.notdef /g38 
/.notdef /g40 /g41 5{/.notdef}rp /g47 7{/.notdef}rp /g55 /g56 
19{/.notdef}rp /g76 4{/.notdef}rp /g81 9{/.notdef}rp /g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
142.65 90.83 mo
(CALCULATE)
[7.51701 6.77403 6.76428 6.77411 7.51694 6.7643 7.51694 6.77405 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
168 102.85 mo
(F)sh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 3392 48 <00010042000003ea02ab005d00c300b25c01002bb133453333b10205e9b2
2d3d53323232b21204002bb01b33b10b05e9b0233201b05e2fb05fd6b036
1ab105068704b0052eb006c0b14c0bf9b04bc0b14a498705b04a2eb049c0
b11609f9b017c0b1171887b1161708b0171004b018c0b14307f9b042c0b1
404187b0402eb041c0b12709f9b026c002400f0506161718262740414243
494a4b4c2e2e2e2e2e2e2e2e2e2e2e2e2e2e2e01400f0506161718262740
414243494a4b4c2e2e2e2e2e2e2e2e2e2e2e2e2e2e2eb0401a0100303137
34333e0137133635342623222e013534363b0132161713013e013b01321e
0115140623220607030615141e0133321e01151423222622062322353436
333236371323010623222e01270323030615141e02173215142322262206
2322421327300a80041c1e0b09070c0f85130801380154080b11800a0906
0c122e1b068704041b1b0c090613124f264d120e0c0f311b068d01fe8b0a
0e070702013d018504030a1a1413120f4320400f0d0c13021d2702030e05
0b060105060d060610fdcf02350d050106060c060f19fde30f0806060501
06061203030c0d060f1b0236fd931206070b025efded1009080b0e09010d
120303000000>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g48 48 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 77 /g48 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 20{/.notdef}rp /g36 /.notdef /g38 
/.notdef /g40 /g41 5{/.notdef}rp /g47 /g48 6{/.notdef}rp /g55 
/g56 19{/.notdef}rp /g76 4{/.notdef}rp /g81 9{/.notdef}rp /g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [6.775 0 0 -6.775 0 0 ]msf
174.58 104.25 mo
(M)sh
1 lw
1 lc
1 lj
173.81 68.56 mo
173.81 77 li
@
173.81 82.33 mo
170.29 75.29 li
172.5 76.4 175.11 76.4 177.33 75.29 cv
173.81 82.33 li
cp
ef
173.81 105 mo
173.81 113.44 li
@
173.81 118.77 mo
170.29 111.73 li
172.5 112.84 175.11 112.84 177.33 111.73 cv
173.81 118.77 li
cp
ef
173.81 159.27 mo
173.81 167.71 li
@
173.81 173.04 mo
170.29 166 li
172.5 167.1 175.11 167.1 177.33 166 cv
173.81 173.04 li
cp
ef
134.4 195.71 mo
213.203 195.71 li
213.203 173.033 li
134.4 173.033 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
134.4 195.71 mo
213.203 195.71 li
213.203 173.033 li
134.4 173.033 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
142.65 181.7 mo
(CALCULATE)
[7.51701 6.77403 6.76428 6.77411 7.51694 6.7643 7.51694 6.77405 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
167.92 193.72 mo
(x)sh
IZFJQX+CMU#20Serif,Italic*1 [6.775 0 0 -6.775 0 0 ]msf
172.58 195.12 mo
(i)sh
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
174.63 190.73 mo
(M)sh
18.75 195.71 mo
117.112 195.71 li
117.112 173.033 li
18.75 173.033 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
[1.5015 .75075 ] 0 dsh
18.75 195.71 mo
117.112 195.71 li
117.112 173.033 li
18.75 173.033 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
24.425 181.7 mo
(REPEAT )
[7.48766 6.74468 6.74476 6.74468 7.48765 7.48765 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
70.325 181.7 mo
(n)sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
75.975 181.7 mo
( )sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
79.3 181.7 mo
(TIMES )
[7.51698 3.00085 9.76528 6.76423 5.27855 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
30.525 193.72 mo
(FOR )
[6.74468 7.49735 7.48766 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
55.55 193.72 mo
(i )
[3 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
62.2 193.72 mo
(= )
[7.52505 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
73.35 193.72 mo
(1 )
[5.27534 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
81.725 193.72 mo
(TO )
[7.48765 7.49736 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
100.08 193.72 mo
(n)sh
1 lw
1 lc
1 lj
[1 2 ] 0 dsh
117.11 184.37 mo
129.07 184.37 li
@
134.4 184.37 mo
127.36 187.89 li
128.47 185.68 128.47 183.07 127.36 180.85 cv
134.4 184.37 li
cp
ef
138.37 222.84 mo
204.92 222.84 li
209.24 209.48 li
142.69 209.48 li
138.37 222.84 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
[] 0 dsh
138.37 222.84 mo
204.92 222.84 li
209.24 209.48 li
142.69 209.48 li
138.37 222.84 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.75 0 0 -9.75 0 0 ]msf
152.9 219.73 mo
(INPUT )
[3.76343 7.51724 6.76651 7.51718 6.77626 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
188.95 219.73 mo
(x)sh
IZFJQX+CMU#20Serif,Italic*1 [6.75 0 0 -6.75 0 0 ]msf
193.6 221.12 mo
(i)sh
1 lw
1 lc
1 lj
173.81 195.71 mo
173.81 204.15 li
@
173.81 209.48 mo
170.29 202.44 li
172.5 203.55 175.11 203.55 177.33 202.44 cv
173.81 209.48 li
cp
ef
18.75 227.5 mo
117.112 227.5 li
117.112 204.823 li
18.75 204.823 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
[1.5015 .75075 ] 0 dsh
18.75 227.5 mo
117.112 227.5 li
117.112 204.823 li
18.75 204.823 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
24.425 213.55 mo
(REPEAT )
[7.48766 6.74468 6.74476 6.74468 7.48765 7.48765 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
70.325 213.55 mo
(n)sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
75.975 213.55 mo
( )sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
79.3 213.55 mo
(TIMES )
[7.51698 3.00085 9.76528 6.76423 5.27855 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
30.525 225.57 mo
(FOR )
[6.74468 7.49735 7.48766 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
55.55 225.57 mo
(i )
[3 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
62.2 225.57 mo
(= )
[7.52505 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
73.35 225.57 mo
(1 )
[5.27534 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
81.725 225.57 mo
(TO )
[7.48765 7.49736 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
100.08 225.57 mo
(n)sh
1 lw
1 lc
1 lj
[1 2 ] 0 dsh
117.11 216.16 mo
135.2 216.16 li
@
140.53 216.16 mo
133.49 219.68 li
134.6 217.47 134.6 214.86 133.49 212.64 cv
140.53 216.16 li
cp
ef
[] 0 dsh
173.81 222.84 mo
173.81 231.28 li
@
173.81 236.61 mo
170.29 229.57 li
172.5 230.68 175.11 230.68 177.33 229.57 cv
173.81 236.61 li
cp
ef
134.4 249.98 mo
213.203 249.98 li
213.203 236.617 li
134.4 236.617 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
134.4 249.98 mo
213.203 249.98 li
213.203 236.617 li
134.4 236.617 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 3848 53 <0002003fffea02d302ab004f006100ec00b23201002bb12507e9b225320a
2bb300252c092bb24e01002bb10305e9b04332b21304002bb10c05e9b05d
32b4503d32130d2bb15007e901b0622fb035d6b12113e9b02110b01d20d6
11b13911e9b0392fb11d11e9b02110b23557102bb11713e9b02e32b01710
b42a0b00cd042bb02a2fb063d6b0361ab106078704b0062eb007c0b13e1e
f9b061c005b33d3e61132bb3503e61132b0300b306073e612e2e2e2e01b5
06073d3e50612e2e2e2e2e2eb0401ab139351112b01a39b1571d1112b125
323939b02a11b02839b01712b02c3900b13d031112b21d2135393939b050
11b01a39b00c12b01739303137343633323637133635342623222e013534
3633213216151406071e011514070615141e01333236373e02333215140e
01232226353437363534262b010306141e0133321e011514232226220623
22013332373e0235342e0323220706073f0c0f311b0687041c1e0b09070c
0f01085b6e6d65272f0806040f0e18290d020207060f14382634480f1137
276c4104041b1b0c0906131450264e130e0102655e36181d05171d341f1b
33070f070c0d060f1b021f0e050b060105060d06563e3b6f1a0e3d291b3d
34181316122f290706040d09313836341040440b3127fef90e0c06050106
06120303016134184e280b1b26120a0102041e00>IZFJQX+CMU#20Serif,Italic AddT42Char 
1 4348 54 <0001004affea027802c1004a013200b24301002bb04933b11005e9b21043
0a2bb3401006092bb22004002bb02433b13408e9b234200a2bb340342c09
2b01b04b2fb000d6b10d11e9b20d000a2bb3000d08092bb2090a0b323232
b00d10b2001d102bb13709e9b03710b21d13102bb14009e9b04010b2132e
102bb42a0a0072042bb22a2e0a2bb3402a26092bb04cd6b0361ab10b0987
04b00b2eb0032eb00b10b10205f9b00310b10905f9b11b188705b01b2eb0
18c0b13913f9b03bc004b00b10b30a0b09132b05b01b10b3191b18132bb2
191b18208a208a23060e11123900400a02030b18191b393b090a2e2e2e2e
2e2e2e2e2e2e01b6020318191b393b2e2e2e2e2e2e2eb0401a01b10d0011
12b04539b113371112b2103443393939b04011b02039b12a2e1112b2212c
3139393900b134101112b31d214045241739303117343f013e0133321514
0615061514163332363534272e012f012627263534363217373633321514
0f010e01232235373635342623220615141716171e011716151406232227
06070623224a03340306090f0108573f4166160c1928312407508eb4282d
0a050b02340306090f010539413f63330b2c4b271221905d6a2f1b140a06
0b0c020bd10b060b0104011d20484479462c1c0d0b0c0e0a03255f589644
380c0a0608cf0c060a0e1c1b3f4f6c3f4216040c161216293d61a3452415
0c00>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g53 53 def
/g54 54 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 82 /g53 put
dup 83 /g54 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 20{/.notdef}rp /g36 /.notdef /g38 
/.notdef /g40 /g41 5{/.notdef}rp /g47 /g48 4{/.notdef}rp /g53 
/g54 /g55 /g56 19{/.notdef}rp /g76 4{/.notdef}rp /g81 9{/.notdef}rp 
/g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
145.92 246.75 mo
(RESET F)
[7.5173 6.76649 5.2747 6.76649 7.51723 3.76352 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 964 32 <00020074008e03050166000a0017002100b00a2fb10207e9b0122fb10d07
e901b0182fb019d600b10d121112b00b3930313634332132171e01062321
373433213214232122062b01227419022e100405020815fdd11b14023913
19fdea040e0403188e1602020a08cd0b1601>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g32 32 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 61 /g32 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 16{/.notdef}rp /g32 3{/.notdef}rp /g36 
/.notdef /g38 /.notdef /g40 /g41 5{/.notdef}rp /g47 /g48 
4{/.notdef}rp /g53 /g54 /g55 /g56 19{/.notdef}rp /g76 4{/.notdef}rp 
/g81 9{/.notdef}rp /g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
189.85 246.75 mo
(=)sh
%ADOBeginSubsetFont: JAAAAA+CMU#20Serif,Italic AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQX+CMU#20Serif,Italic gcheck setglobal} if
1 768 19 <00020075ffea022b029a0018002a004400b21201002bb11c07e9b2060300
2bb12507e901b02b2fb000d6b1190fe9b01910b20022102bb10c0fe9b02c
d6b122191112b11206393900b1251c1112b10c0039393031373436373e01
33321e03151406070e0123222e0417141633323637361235342623220607
06027538242b6f3a25351a0f03301f2c7a3b20311b120602402d1e254512
20512c211f45191b539444dd44524f1d263520123cca4663571424222e15
25352d3b27470145382e302e3338feb3>IZFJQX+CMU#20Serif,Italic AddT42Char 
IZFJQX+CMU#20Serif,Italic /CharStrings get begin
/g19 19 def
end
IZFJQX+CMU#20Serif,Italic /Encoding get
dup 48 /g19 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQX+CMU#20Serif,Italic*1 
[32{/.notdef}rp /g3 11{/.notdef}rp /g15 3{/.notdef}rp /g19 12{/.notdef}rp /g32 
3{/.notdef}rp /g36 /.notdef /g38 /.notdef /g40 /g41 5{/.notdef}rp 
/g47 /g48 4{/.notdef}rp /g53 /g54 /g55 /g56 19{/.notdef}rp 
/g76 4{/.notdef}rp /g81 9{/.notdef}rp /g91 135{/.notdef}rp]
IZFJQX+CMU#20Serif,Italic nf
IZFJQX+CMU#20Serif,Italic*1 [9.75 0 0 -9.75 0 0 ]msf
197.52 246.75 mo
(0)sh
1.5 lw
134.4 291.12 mo
213.203 291.12 li
213.203 263.744 li
134.4 263.744 li
cp
@
134.4 263.74 mo
213.203 263.74 li
213.203 291.116 li
134.4 291.116 li
cp
/1 
[/DeviceCMYK] /CSA add_res
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 417 ]ct
[78.803 0 0 -27.376 134.4 153.26 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 218 
/H 76 
/M[218 0 0 -76 0 76 ]
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 218 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 218 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 218 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 218 string /rs cvx /pop cvx] cvx
]
/O 3
>>
%%BeginBinary: 1
img
JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&a8c3Erepi,^]<*h!)3BN!.h6Pli7#Xrc\?WS,`Tj!'L7)
!,Ir%!)*<6!,D6.U]:BXrcJ3Vj8cOerZ(tKdf@DgrZ(tM^]<$f"J3>XBj7b@li7/FBkb/hS,iKf"Gs6q
<D&\["=R8MX/bmoU&Y=OWbPR-joDdh"=[APVl%oC`W-*+iXZ+,!8%8R!WpTdY5mhf!hR+OS,iBc!OfP+
!!8"Z)ts?)!!0!to)PWf!f*cqhuL1c!MlU=!6P9B5i0*Qg&M/]a/]4.!!8b+,a\T2!!0O=QiI2EXW-j3
UAt=mWo=#f!!7qU*7"W*!!/mm^&Zmf!C5MA!:'Uc[E"^9"98Fn^*JsD!OfQ3!2KSrM6.`V!42_,VlJ,E
a8c9sWZ8_QfDkrJVQBjb!!,@AR/m-b!O]t8!!8b+,kV/2!!0O=j8cRf!f=#ud/_,c!N2s5!8.>RLT2>r
!9jIaUo'X^r;Zj`hNS!@[E&"AU&Y7d^*Mb>Z2ap6\^LPu!!8"Z)o)I)!!0!tY5mhf!f*cqS,iBc!MlT[
!!,@Ap&L]b!O]u>!2]_tT"ZK.!4Dk.[^j]aaoDL"XW+nQg&M/OWiH-f!!7qU*1-a*!!/mmQiI.PhXUZA
!!0LJiW-Ff!hR+OcN(uc!OfPQ!8@JTM6._t!:'UcVlH0c"98FWWZ79(!MlUc!2KSq5i1H"ZiC-7a3an.
!!8b+,ea92!!0O=XT7\f!f=#uRK36c!N2rb!!7qU*;'<*!!/mmj8cRf!C5Mg!6"p=[E$&_kl:bd$3U8-
!XD1;q>^Sg^*NXW!sUk[)n5kL$(<F<!!!3"$312,!!0O=VuQl"#6Ol)!X(G"rW)ls!f=#ur;Zp&000fW
!!3@X+nYg8"8`<'!rW*"VlKIkZ2aq,#6Ol)!X(J$q>^SPWZ:s;!sC;>($kqF!!3@W,4tp9"8`<'!rW*"
Uo)T@`W-$)hS0'[!!"q@!!0LJY5nD!!\(^"rW!(b]qg,Yqu?ei^*N[X"r+>U\@S(8\c;dD^J4A$"D+RA
]=S-NU-&;R!OfP;!!47C>lF^*I]SWGqZ$\SXW.6>"qI?.WN1XV\c;d?XZc=W#?-teX/i"T0)YbNVlK=g
[K$@OVd99%"+7).CARu4LT2?n!!Wt*Whu\G#O2<:!!3S054nm\<0X5XW1f,&r;ZkoVU#7q!!1@JrW!$M
gJ\UZ!!,@Aqu?k`h87Gp`;oN1!9WnR"p&GKeC:3dqu?c*a/]4>!!3;8UAb,qXKhnM*;fd<T"ZKL!!e1l
6jFZjW<Km6!YN1Ao)JkG]s\7H!<)s![^i=:!WoE^rW!(iU&e[;qu?eTXW.6>#B$Y$";H'H"9&;7!!3S2
4nAXU,cmmJqZ$YpWo=$!!!35#MuE\ZQ_4@g(]477LT2?n!!dDA2Zsk=P69M=iW'#gX$6+T"!sqB#5\B$
Uo(j+l2Uk69`>"oFdrF9qZ$X^hYdET'BB&l!?Pg_!!)0\!;$6lgUI"Z!O]tG!!fR5!rr=g\dJ?8"98Fn
^*N[X!iNL0rVupVq>^P/No0m=&<Koe!!6_g#kJ#t&\h'3!!3V@Y5/,![^l&2ZN(5uVZHhuJuT(P!!8"Z
)u]g=Pc+Z_!!"MF!!-#Co`4=Y!Xj<Bp](@oF9V79!Xu1oo)Jh!Wh&td!N2sF!7q2UQD=Q^!.h$Qq>^SP
WZ;!<!g0;\rVupKq>^OrGMiH&$[G29!!6,@"nM]q%')S`!!3M*S,**cUo(6oqZ$Y:\,H@.1<]In!C5N?
!!-B=o`,!n+Q!/!,kh9>!?1J.!9WeO"3Z;s!;lft[E#0F#D9]4!!$??1\q(QT"ZKL!!K10&-i77!;um!
M3e>&!!?N9Jk,S9!ar&8oDeq)^J4;"!Y)`Dq>^Q)\`<b/!!dAB)#sY1XXErF!f=#urW!%`W=&k(!!74m
!os@[!!>llCcM1i!_o'eoDeq$XZc7U!Xbruq>^PoWk\Vu!!dA?)?9b4X"!lF!f*cqrW!%^V@*P%!!71k
!oO%\9VlPcp](@kQ3Qs]!Xu+no)Jh!VjmM_!MlTj!!*_fr;Zi[r;ccr!C5N?!!-9Ap&G+21#;m2\IeH7
!,qE.!9WeO!R$,l!!0LJpAhGu#>2a;!!"%RGPV:@T"ZKL!!\@r['?iu.Js/I:9aop!9sOc7(*9m!!/7A
q#CBtr>>Yf^Ld?]!"&E#!Y)`Dq>^Q)\^LQ/!!bQe9E5&.X^_,,!f=#urW!.GXeh_`Hlr7d!^<:ZhZ*^8
V??Pm!W[Xmq#CBrr=T/TX],02!!`2u!Xbruq>^PoWilEu!!bTd:&k81Watr+!f*cqrW!.FX.l5WHQ`4d
!^E7XhZ*^:U]^;j!IJtb!!!*!'*9AY<;dI1#5A0"$E'Bi!!/mmV>pVYr;ZlT#PnE$5i2G>"rua*Q\d'i
qZ$V]h#IG]o`,"@*V073joP#Q!R$,l!!0LJo)Q/u#8+\M!WWA1U\XrlT"ZKL!!b^&BFleY]Mne0!WoN/
nGqtW!Z8Qip&G.4\et8D!&XVe!5JHF!-%]5!Y)`Dq>^Q)\^(9/!!`q7QiR0gV2tHQ!f=#urW!0XX],ZQ
H`TR5!!31l9&9OL&Zc]?!!3h6&c)J-./^.HXo,7#>ke:#$EBZn!!0!tWrW(u#7RVt!<<1qNqr_WLT2?n
!!b9Z<=:'uW'gOa!Wec`h>dTiW##(,!YhOFq>^LEr2B^tWr8ms?2+C$$E'Bl!<)s!Uo(!h!TIno!!0,t
q>^O]hY[?WirK,[-.i(q!<@c-!!(RA!!(4;!<(UQgZI>jg&M9M!!18qq>^Q(a5R*=!!`S4\S(sCVRH=$
!hR+OrW!N3Xg/'0!3*:+!!"IZ%fcS<'`J(5)[5^2!=BYB!!*oA"98E'ZWHf"!Ng;:!!!3$,6Bd<D#GRY
%JTo)%D&_=!!0O=^&[Eu#6CX#;uco^VtpApM6.`r!"f7%U&k;pQ_OQ]!$A6K!!!<8rVus5"7Q9k#8$k7
"q^t<!!/lbo`,#^>P\=""8s/A.]lel)Zgrt$MXT&$EBZn!!0!tVZ6r&U8Coj!0O)T!!E9%LT2?n!"f7"
TE5)nPG&!W!$J0I!!!<9rVus6"7Q9k#87"9"qh%=!!/c`o`,#\>l"F#"8s2@/#uhO)up?@!!3M*S,**c
Uo*ebZ2b*+`W6&>>daD.!C5N>!!.J;rVut1UAY&lc11l#!!&he!!.?IoDepS!qH<lbCfWk!O]tq!8.>Y
'SupmVNkX(Z+9]2!hR+Or;[3J\Xa!+U:CI.!-,4A!!dY\FT?*fWuCL.$Y6u)!)UA2+TM\HO7`JRLnjVC
!YN1Ao)Jh$\utl0!OfP@!;um(%W_]>P(6@<TrRqh!f=#ur;[3CWe^fYNN!$\!*u2q!!cr7@/s9.R1o)j
$W4$E!'mWT)?9l.HM%7=Ef]kn!Xu1oo)Jn#Wgs+iqu?bqWi5t)%rq`;OFL.;T;MGb!f*cqr;['@VM56S
Ml$UZ!!$>qrW!14WaYs.W0S.f!"2`*DZE)&R2Z,.Q[&0'!HO4n!!3S054\aU$E'Bi!!/mmj8d.!#T3V^
=tTgUQc]((!C5N=!!UJ.!!#^2rVus%L].8X#2TOa!S;8Z!!E>['EA+6gNibu!HTIX!!*p6oDemRnGiU5
KDGQK[E$&_kl:umVnA9"S%HG!q>^Sg^*NUV"WjPHWP+Al!!/CWrW!0?4/5WOKc*,F!"0B(S7A7W&k2j5
4!jP"!b\kAp&G.+^J4;"!Y)`Dq>^Q)\YoK68<p9+"GWtZIf9?G!!8"Z)uK[>(R(S[XEsjG!J-+,!!a)g
O$K%M&i/tW$OehH:lTo52ZO7=*;':5;ksHf!!3S24nAXT$EBZn!!0!tpAhK!#YL5YIKY>&X*jaD!f*cq
qu?m;Oe7l;Gl@[DIu""'#nenN6'Q:$1B7FH!"02lKi3hW%6+=r0-0]c!`brqp&G.&X$6+T!Xbipq>^Pl
VUGOq!!cl`/-%][j=:!+!C5N<!!HPpC"jj2!!+`<qu?gp!,328!!>@b8h9E3!rr<%VXsigk4&EPbCfWk
!O]tO!;QU"'/Kjn!$a)uq>^Sg^*NOT!ua*D!WE'"VN1QS!t1d73:-\J#bS\'r;Zm?ZO?I,!_U!0p&G.+
^J4A$":+u:\utl0!OfP:!!`r\"98E@,6I]A!f=#uq>^R1.i\Ee!L%d+!!<LcX=W`=!sOR^55bH_(S_90
!!53]#5/#u%';\c!!EH*$EBZn!!0!to)Q/u#7`0c!!!ua!r;luLT2?j!!3ic*;oj<Oa$^'!sjd_/boD>
!!<C\Va(+[!Z7R9p&G.UV?Z_o!Xu+no`,*u!",Wnq>^PlVU#7b!!,@Anc/\q+Su->8D!/-!CP'-!!&\a
!!(%2!!)0O!!18qq>^Q(a/]4.!!8b+,kD!:Y)E/W!^4:7p](;,qKW&LrW!!L^+B3_!X3$Dp&G.Z\I/$1
!YN1Ap&G7%XCrK`Y5JA"!!0O=QiI2EXW-j3!M+E2!!4jV&GQ5*;u1#)$2so++KZgc!!36u$MFH$1TC]R
!!3S24n\jZ"e/I(X.B(e!N2sW!4Mq0LT2?c!!/O2qZ$[PWtP1-!*/l,!"&W)"!OZg!<)s""&TI"!!5!S
#PJ-!%')Sc!!NOn<>2=#q>^PlVS3&b!!,@Anc/]@*;TX8k4\iU!W!-#!!(mQ!!!&l!!((3!!)0\!;?Hr
G6%]kKDGQK[E"^9"98Fn^*N:M!NM(T!!@/JTEP5o"bF$h!!$[.GlS9P!!?H8TF()f!^X@(p&G.$V).cE
":C7(^TRD5!OfQ3!2KSrM6.`g!!/I1qZ$_&Vi(WU!!-l2"&8gr;u1#)$2so,8u[aRn,NMHWX&4t!XFl9
o`,+"HE=6>q>^PoWmLgf!!7qU*:j.2Q$)s("'hXY!r`0'CSFW*!*/l,!"&W)"&#MK#4MTo25UWP!!3Ce
.J3ZD#C3;LS,**cUo(6oli7&OhXUXICE33O!X#i"r;Zj0VZ$Pq!W!-#!!0r-mJm7-oDekno)Jq>gua4h
!;lft[E"X7!hR+Oo`,'o!1oPU!"<[$WK(/VIglCYHtW]W!"i@!Tpn]OIhWK'=T\X("^P[dqu?e%[KYam
!\^UWq>^Q)\`<au!!8"Z)tO%1M1PU*$s4sFGY!j0$36K,<!2go"%P/,L(-5-C(:YI7fiYj"%uQ5qu?dh
VZZ#\![O2(q>^PoWk\Vf!!7qU*:j.2LOf='$s>'DG=mg/$36B)<<Mpp&P+a:KKP?2%h)9*!WW3&9N3)2
!!5cg"7lNa!!4I4Red!bUo'X^r;Zj`hXUXI5r&<<$N^<>+95+G!!$pF!V69o8iZlR%ep#(!Vucr\)RGh
DgqN_!O]uB!29GpT"ZKA!!.bPr;[*7UpDNNEjdY%!L8l@!"fU1Zo7tt[6k"aL&an1!-Ymbqu?bFXQ'9]
"!m^C!OfPf!6,!?M6.`g!!-u(r;[04OJ<ou?D]"KJ:@+j&I=5h.f`MF2$&AL!'Dq8@B'b8!!<3$B:@i\
!<O5:!!0!tY5mhf!f*cqo)Jf/PPkIg$]^o(!+2NK!.TCg!"fKlU+?:EUG`.*Du`$U!+Vl7qu?b1QfA&H
!Z_%:!MlT[!!,@Ap&P$k!>B,D!!uSu!!!2/!!"W$o)K(^W;lo!Y5eP\(B"46#KciC!=O&(!!0LJo)PWf
!hR+Oo)Jh\[fu^1!<E?&!!WT,!+`;6!;$6k"o\K0"TSO&R/j"k%jSb-qu?bjM:qq1[^j]aaoDL"XW-j3
!]HtZqu?]urW!''!!#lgnc/XlrW!<.!!#E>!0=&c)lseP!!/%#g&M/OWiH-f!!7qU*:j.332H`T!!!*"
!!EB(!)oHZ!!!-#!"/l/!(DJ>NMR"&WYbR5!K(sS!<)s!Uo'LZ!C5N4!!*)3oDemmM<Y'F2#pFa!!(jP
!!,V/g&M/]a5R*.!!8b+,kD!;$+Mea!!4O\&ao`!!!j^N"LFSc#e3Y.!!3A82;/$2[^j*PgAh;3XW-j3
!X>SNo`,%7X:4Fq#T938UkXL*WBU7\!X,MPn,VbS!N2rd!!E9%LT2?c!!3A$.J3ZB+/fV7!!jL5!hk:!
"f4H^!!3;#.bXk'Uo*ebU]:E\hXLRG^@M=)e`m,=LB+,12#tGh!!('m!!0LJd/_5f!hR+Onc/]DT(N'b
9XZ\B!!iY7)8%5h9<!^F!!$I/Wr^oS!OfP@!:0[eM6.`f!!-too`,%UV^Ca1#Q^h9X;d0]QZ;s(!Df-?
!;lftVlH*a!f*cqo`4sk!H*\c!!5<Z.-pp>!MgC-*/m"DEW#k<;3ol8!MlUR!4;e-5i2#2!>@`j!!'Lt
!;ca$[fFqY9`SfBr;Zj!DqP*k[E$&_f`2)F^*N7L!Xl5'p&G-s*ZF>E#GlCM$5Tk1WVul!)7(pb!9jIe
[^cA<$F9W<!2-.gr;ZnUXW-g2!XPDYp&G-q(DH*7#Ei;k#8!PWQi6sd&u6`)!!T:#!!!7urMBUR!29Gp
LT2?b!!3Fs3q`OT!Z2X;!!eTkV?[^(I?a^2!Y_7Pf`22OV>pT$TDbMbM;/*N!!,@An,NHFg].R]"3CNC
N[niC!!*(qfDkr[a8Q&=RJj;h7^rH`!!8b+,k1j9(8l3H!!.GGlMq?CX0DX)C9b;R!'mSKhZ3KQ!OfQ<
!!SCdC2&.#T`>.NXW.!7qZ$[/Q!X.a!G7\a!"<V2T`>'nTrA.p1RTuM!!0!trW!+HSlSj*T)8Sc!!7qU
*:X"1&WpGo!!6es!:0[oC6tOm!*>bh"9:9E1=uR-Uo++k"a?J<<b\&U!6P9B5i1r0!FH$(!!*F<lMq/"
F-ck,!gU_'!!$s:!87DR[E&7H"X&R%!Y'jj!:BggT"ZK=!!"/8!!*63lMq<2^RbE*!iNdu!#u3s!<)s!
[^lA;"UV5>!!"jL!!8"Z)tO(.!!!o1!!*0.lMq;sXbd#X!L0]B!#,Rf!!0!trW!*+RSWta.-glB!!7qU
*:Ek-)YO.3!t"Drr;[41X+pZT!KjE>!#>^h!!/mmrW!*+QVme`.E;GC!!,@AaoDJFj?`bF!F=jP!:'Uc
[E&4G!HS:7!!WE'T"^54Dp87`6r,30!!3p35h>u=5C@ji\buL0'WtjA!2KStM62#8>N>eL!!5#B*rZ-@
&3hu&!!G&iB</'2!!3Y#:"THe!!J(WG@t1*!!5)E+8u6A&O82O!8@JV1M:?uVYpJr&"6;$!:0[g5iNmo
".TAj!!<T:d)Z%a!.LL>!)3B>!,qT3U]:BZrd4]bqu?d6Z<lkt[/^1hrau48df@Gh!&FOd!*oF%!YD)"
a8jln!'U<o!*l]-li7#Arau4:qu?d1TMD9_quH^(!!AVhrX/]/qZ$VdrW%NMWW3)S\iJOGJcO'r![Xm!
\,_*\nc/_<V_426Q2gp1qZ$Ws)#e4L45^)=2Z@Cj*:Ek.Uo)!/XT/C)U&+fi&cPc10&ls2!!"MJ<<*a%
!!/1EScI.<!M#/H!!!Z2<WFf2!!"PK<WEp(!!/+Aq#H!Ho`,#]Mu!GQ!o<qV!q$$h;d.]ORK*A;9)ASk
$_"i:/G9)0!!FRP^RQ#,!!/mmYlMZA"p(AQ!!T^$qZ$a)KWV!mhuEm!Trj%Zp]1'h!K`J(!9O7bM^JK,
Ul,$L":0X\TH`:o"<=#6Kb*VP!KN9*!/gg\M(&E,Tnr[Jr;ZmWk+LQ2!gVn0mJm8d>/UEE!!#Lf!!/l_
q>^R:]qsciqZ$\1^MN<<!MlTc!7LoOL9$?4Yq5_O!Yh_uh>dUUX]Xuk!K`KA!.k4F!!R>0Ga+mFq>^R4
WK5m9!`c:(mJm9JOOjK&!!R>-GEJI@q#CHN<qcUX!!32`!q$$h;d-L-^]4KQD]i>Lp]1?$nc/YjpR;2N
'D_\1,ef?8!;6BnUo'1QirB/a%1`R9!<8kc!!#I^L&ll8q>^R9Xa9C8!K`K0!/LUY!X]89!!)iqs.]&a
!(Q^9!J(aW!!4.?GjYP4Nf_6\X8i>($4?q1!!/srnGr;D!&F<L!T#$g!!-#%U&`(2!h6h?o)JbkpR;2N
'D_\1!k>H%!!/mmr;_ELk5YR;X:k+)!(HX:!J1dW!!32#T'cRZOHS8sNr].Z!edNdo)Jb[pOiQu%f-/,
!Mu:R!!/+A_>p>2!BAd&!;AJR1Aq4N!!0lhmJm8d>+P`7!![,O9`P077H+:OUV%!8!1OVr!!$U/Hi^R\
rHnTYrW!!"!',a\npCFZqZ$h"XZZXa?T-mD#*5hl!!%]^p](:mrFZ/+V#=p+<;Z^r/`:9.B)l?:!!ZH(
4obRj3;NX>!!\I^#ljsY%JTo'<;gG1Tq_Ku!*/ps!%tos]4V+PqZ$Wtk5G>\"lTF^;:YXG!''iUr;Zfu
r<iY#VYpl&!W)ka$f;<l#5\B)-,5j040Fb+!![Y^CHFqs9)&AdSGfSk]"@pD!1s)g!,1u,KWY?T!;lg$
*3FiG/t@@L!!Zo7="ZA33qr[TLAd\CX8SRhM>R>R<6q,6SH,#R!!XIEJhJdGHg(P,!!Zu7=>)V4488dU
L&IJAVl9Q`!/LIP!*-(hbaSTrq>^]]2#mW*.,k41#NPpd!8.#G!'C.3!RT6mK)n7<r;ZfuLP,)K!,)0/
#6MKLVP^o/!VcWp-hgF<:'gXq"usB*VQ%7do)JfeVUkg.!!WJ)XHSjJU&4og!!")75QO%Pq#CUMXeq;K
XEF+7!K`JN!3uS/!N2lYOf"cF!!",85lj1Rq#CUNX.tf@WHA+>p&G,ROH0Cl!!UZu>[5:8i;a&DZ!:qr
)tO%1;d/GdJcPTH#,f!<!#)RNp](;GpUUC9*Vf[>"MLN0!(EgW!!/mm`W2S1#*c+l!"GS2p](;1pT":o
!#GA1"p1lc!!"pAo)JfQP+hrn!!\R_"oo.(&,6,)D"jh.VAK%."p1c^!!#!@o)JfOOSo02!9O7^?,ljD
!06dR!"ntN!64a5!SgBJ!!$<r!!-#%f`7'5r;ZnL^FS.@!j8s7n,NKbVSW>-!!6o;+QNP"!!8^h!q60j
OHQ18`W-'TX!-="!h,ndn,NKLOSJm.!9sOb&*2OH!J%TH!!-#%eGtX1!^XS<r;ZkG$2jkf!!8.o+T;?A
(N8sH!MlTt!4)Y,1p'pZ!!-^:j8]7*XVq*<!>&K7!;HNpOHPS'f)Pk0X'5H%!G;Vt!!7>D)ZB^;&mY)0
!KN9*!.k4I!!23ar;Zg*irB*$hY[?R"8)Wp;d.*>TE#$-^75*%!X65"li?h]!arcErW!!j])hU*!MlU=
!!7kDG5_IE!HafP"5Nsq!!3Y4LAh/S"0=3;!!5ls7fEAg3NMfQ!K`KA!7_&NDh_^!!!?V`?NRb<kPtYp
WeC?O!X#DVj8]6WX%3-h!BR1P!!/+Af)YUH!cNa%r;Zq.KO=kR!!1t;r;ZiNrW)$[!9X1Z!7UT@!E31J
!!3lq#Q4W("uukU!3lM03PN"=Bk`dGG3&]1!e7t`Bk_@`^F&XS!Al[[!!sg\+96R\!$8jWb5g&m#VE0W
=&i7LX^U;k#m"eCPuUgcRB7M'!!+Jsl2]rH#o]i^!+A(l(Tg3*!;QU#/ukaM<`XUKA*![s!G\Zu<`W=g
WZLj6!@]ME!!jOB)?=84!#V^98=fe^hnK'k!\3::mJut]!Y4@$rW3+?j1kWse,TIRrVurVh#P:l!.Od'
!*A7^!#><g!%[O=dJsQV/-)f^'*,Fm\cCjm!,;:R!(Q&M!"\mL!$KJcp&GAi+TS"1%035AUB(5m!,;:P
!(Z,N!"esK!$T/Y#b3(=RACAnUM]u1U&Y0&qAnf#qZ-F4^]4Xq!!%;Y!!',6g&Q^)ec5u@C&kf9QN3MQ
qZ$X##eg:j!;Z[$IoZQLM1GY\PktF]!sP+nT)].G<rf+QJ,k7bqZ$X!"n_kI!5edB/-5gn5VW6u?-*(u
!;HNuM5@&0"9:[cV#XHk!!uu&'>,cj6#a@=rW!*(O1Ms,9WnGe!![M-P'R001B*F:6Mg`h9Sa.Z+-ABa
W<E2#"TitMX.DG3!5SX>EfcB-!WY%UO8qZF!!uDT%]LS32-m'^rW!*'Gc.L04lu`r!9F1_)-BubrW)q"
q#CX`!8.?Q!!C1;!!=Che:k^=M?!_\[_!7Q!!%WP^R"]r#p6N;]`fL\4ME0A!![GXKKEnSGb4u=!!<;#
Wt,+/!c>&jq>^g=UbJkP(nE=^*W?$C?*/#t<MO(#!.k4!!!<:uW"8k-!c=ufq>^g>U+rVL)4E7Z*rZ-D
?E7ut<hX'T!.k4D!!0LTr;Zm3jtHN1#H7^W!!%NLhu*NZ"Q^<t!hot+!1ElgWjhp,![YRGq>^a)[!T1\
!-aG(\mYL;!N3L-!!3IZ"o83!&(CR[$j+EK^&S2$W;Q\t*3F_e!!re(Au5P.@X+qJrVut`Wr;u"#&OJ=
!!!As!94%[#m$b#iW'"EV>UAq*NFSb!!re&B;5G,A9XqIrVut]VZ$Ps#&OJ=!!!DV!!*B,r;_TQ!H#OL
!!<3$hCSI&#Gqj3!!!6Hc2@VC?,lgC!"uF7ScAek\,?:."1YQ1!",L&W;lo$XgsVq!!3/%[IsS%$CH;#
!!3Ui@/'^'=ed%U!5\^:R&Kr`!Wo?mq#C\]R[4!S!h60<rVutgVY0uk#D-[X!:p0l$@#;?!!5ZO(S:]i
!!/@]r;Zm#V478\#`Y17!!!(gVL8@C!LTYU!!3CVC#Asm$?o;@!!5]N)#=5j!!-rMqu?c5L%t]M:N^7J
!!7Ga.fKDKGHpf@!AY,A!!"/8!!#gF!4;e-$_RBo%D'6LV&KC7Uq@$7!!r]*!!8Y)O8]+e286F*!!&V)
V4<*%qZ$^$WFl4h!!?!+HrTk@!]71uZN/YY!=4S]OpnCmP*-LZ!0F8e!!!6%!!7kVH2[dO.BTBO!!%kX
P(ma.qZ$[!QW)cA!^<Sr!(6M]![scSNr]+Y!=4M[O:8%dOH:1W!0=&`!!!6%!!7hSGl@[N.]T3K!!%eS
OG.I,qZ$[!P?$K?"$`Vp7/-``.A.:<!20Am6iC*hbhH6%rVusuebK1H3927]!!1uVrW!'dhH2iNq#CG.
!T!eW^^Ki9!1_".`;gaBYTk85Y.6$`0`V2s^HDPsW'p[d%o?(Fr;[6f:auGFAA<(_K!hg'r;ZkFU[A-P
!!5-i#5/#tI\*86kl;QQTGnadSZ3g%-3+$SXY9_TQ8S^C$:$ior;[6Y5Tg%,;6=(jCo*d?r;Zk1O59j<
/?&dG!!-ejr;_iX$\=ig)B,*B+daYX!"<A<0`V3:2uipd5sZFf!":MH+TML@X'J,0UR`5"!!-_mh>dU/
V?HSm!GR>B!3uS*1QMG7","SnGQ%RC#NYja!+YO!"p*ih!"c8mqu?a);;D3P_Y!m0%7.B%ec6<o[TWY2
Wj_s@#64`_^Sm'N]8,qW#7\58!!!A6VZ$Ps#e)bL!!!W4]-R(M!YW'fOoY=Y&dtU.!!&Cb!"B&2!%Y1;
G'L'-nc/n%Weg]U#H!^a!!3>%/)C7-%BCHA!!3V0)XRNs!"o[88cSjVV#Ur-!!"RNP'(uIEVBJ2!!`k.
LB%;ZUQPNU!X5DOh>dTdW#YL2!Y)%HaT00X!4Vq-!H#OI!!VLp*$E]HnGiU062gibY?_#+!4hOumJm77
oDem7U]BNW"\lH>!33O+!!WV?Z=dsQXmlB+?+sMC!2$_(!!#<p"TSO%M\6"0Q<s%\#"FXj!#Cf5rVuu(
BCu6+WH\E$!!PNa%02corW!3(!!B<s;cf?VnGj:sX\&QnMPpUW!&UVV!!#B0%0.,o9^i#d2gGu8&:RXY
!!/`ko`,#ZA*Euf!!PQ_%KMcjqu?p'WM!6nQ'q4D(B=G/W_3<lLnt1R!&^ST!!#E0%0.2o:@J5f3-Z&9
&Ud^Z!!/Zko`,#WAAnPf!!Kt8!,]FH!!V,I!<R%an,NIFrVusd]DV^0^AS$3*<#p<0D#8A!!"2A!!+SO
rVut\!VHEnBaCC4kl:jUQN4%pqZ$i'[KHR<KE^lG"_tW4EOr1L!!.bPrW!1,Y,hqsX,'O@!"2?#Xpp8m
JmA?[VjR,W!JdNL!0.$^L4K>lW;?PpSHYnm!!mKFnGi_nX+"?TR/R'dDO:>&#=tAR#(r@b54JU\3Lu]J
FeEPD!!AL<o`,#4Ok9Z>!!It*!0sDX!!\pg!WWLE"7Z?p=/UFPVj75]!H+,#!!c,bQNi#-E^0'o$TacH
$?VhT9E50WJb9!DEK@I,ec5h50`Z((qZ$YL[Jg.+'^u)+!mE+sc>EO\!>B&C!!Rgo!&J[5mf3NDK)cjN
&cMb2?S_9S!>edu!;ZZu&[b'-\,-.,NP6M5!!!)j!!EmIM0'=.!!/dXqu?n)PI=Nn"n)Et9:iD)!!WE3
3A'n(!c#%Dli<XX":V.cR&Kl^!dCa`r;ZfupAk'j":S7O?jlr6!KDR+!!PuDVa^Xgmf3YUM4drN"98`[
,4tp;<hof<!5ed>%&5eIV>C5oG,cGY!!!&i!!E^1F(#IU!!/"+qu?mnI&'74"8Dlk!!tcCSll$r!!t8&
o`,%pT`V"ijo>Lg!,K:F!!+.tl2Ukd)@$-?!D4m>!!+RWlMpuOO94kN!<T(r!/ggZ:U6t/qu?g!<52T8
!!3V3!pTadXG$HN!d_Tsp](9tq?Hlu!c#G%r;Zm7YSHj3!`$61gAnDW"$`QIW;?Pr6`ilX!!3Ls!U9Xd
RVr3(!!6`6&GQ5*"8W0!!!63',Q.TD&>0R-!!5?`"LeB[!!>KZPGS-V!^s([rW!!,R/uRQ!LIa%!!6c5
&bl>+"8W0!!!66%,lI]E&Y0L,!!5B]"HriZ!!8a)^%q^/k552ZH0G;0FVO]Q!=IrS!!*/XqZ$VVoDem,
m/WUU!h@!6qZ$[H^QJKq!\qD=q>g$c!O7=T!!6087JHi_TDGko+oVHC6,$S$!!-IAp&G.d\-L.V^An=i
Xf2*s!["OkrW!!HXWZm/!MOH/!!5Qj2Y[7PMu'1K)ZB^<1p'CJ!!,e(p&G.TW<B'uirB.7WhoRm![+Oi
rW!!JWZgX-!M46,!!5Ti3;<IRM#*bE)u]g=26'=I!!,k+p&G.UV$)SS!^#;QrW)ls!Tk^,!!(p@!!/?!
q>^NVpAb1^qOm`d!8m/D!5Rh!T)\p(\[VJ:!sFq)\c/E,[_HDI!;-<mX+^EO%NGJ0U80@H!!"'@"TSN.
q?dK/!#YlhWgu9XnGiVd\-L"R_Z0`GWMo^p!s4%UWrA._Vl`n_!!/O,r;[<B!-sTd+p@rH(I\E+!!W?,
r<ET.!"o?JR#!F!nGiVTW<Apqk5YPkVPX1j!s3tQVuDbZUoRJ[!!/F)r;[<D!-jH`,6\&I(e+T-!!W3(
#QOi<!c"!T0a."H!^NRbr;_`U!Q;\K!!"YQk0![*!k7:ml2Uj+'`.k3+\br&!!3[J54/CN^t8Xj!!+&n
qZ$UTqD\Hnl2UjWQMpjn!+hS0AJh_`)ZZq>S-/Hb&QG70FqLsi.M5?D!<<*)92-K*!!6uC!jr$W!!*c[
qZ$UHqCDU[l2UjCJc,QW;hM)K&Yl??!1B71!qlU$6\_RK%%jOB$p6KJ!!<?c4W""r!a)2uOT>+U!>[$Z
!!"SH/H?LM!!.n*r;[7*Ju;Q\TViM)QBm4+p&GFfKVi5fSYmV>4ZNE@!sC_M)#O@8=eGf^!.k4B!!,MA
r;[3+29Q"#T#q$5EGn#4!!PC"#69V(nGiRkTZ7&"!!.YNqu@'sC'=SUEY\YSF:J0Kp](jmD?^(TE?,4X
KE+Ck!/@uqqu?bSUS@h%!!-l&qu@'c<W`=8?4[+'?jcN+&2dVo!"N9M"-7="2'Ds=W=8\)!HaD%!.k4/
!!-l#qu@'d<s&F:?P*:%@1)W,&2m_q!"WBP"-%0u2^/6@V@<A&!HX:T!/1CS&8M:D!!!*"!!EH*!+uN,
!!!-#!!EE)!)F:,!!*kPqZ$X8;76J(!!5<o"n_irM4a)6#\9"sV6^F]]G:>E!NU7(!6kKF0WG6J!!..u
lMq2fH2s,'"XU5\qu?bc?L7`E!:^$j0r>'G!!.+rlMq2hGlWr!"X^2[qu?b`?c`;5!!(%2!!*s)rW)?d
#6?(M=J,Wog%taME<W0=\c;d9[6F6`!`66,li7;BX9>r+L^^jZr;Zp7\f:^%!8[\W"K!pH!!5E^!pfmm
+drJ/O)bQ-1Aq1S&$$H0!.k4D!!3:u1A(VK6)"GI!!jd8!i(cr$)]TX!!3_0(W?BB!!':q!!'(r!:^$n
FTAO@(]_eW!!(69!5/@5DlNC0![YMsli7:o\/Dn"WAq&/r;ZkTQMUZ6!9!nY>F5!_!Z\9Rli7:mW"Q-I
QRn\@r;Zk>J_'mV!!?Ji!!)`n!Ze9Rli7:mV%]dEPV&>;r;Zk=J$T-T!!*15oDemIl2Ugu"p!-QB`NYl
r;Zj9096+Y!!37sG4kn;6[9U9!!fN>\-XI`R&']]!^s7)l2ZD9nc/^mNa_V]!]=L%lMq0W=/cBDS:cq&
!!5$M%)r:6!!34\A+fm(2J!U$!:KmmPusmf*LVJ=rW!!YSID4m\c;b*#PA&s$0hKqCBD?Q!.6S$r;ZhV
quD<Kh>dT^MM1['!F][-!"=^`YQ+ZNYI4K4A"4=e!.t7O"9EX_p&G+g<9jMmF-iL!!,%n$!<>rN&@;G8
!!3:FDY=&2:fZi^%01F5SH&Y&S>6/c;M>^E!6P9B)\_lE!!2Bc$Q3Z8!!!C^[f?C/46cft!:9ad#5/#t
7XXM%$?!SI!!!5+^Erpa`;l&$!!Muq"#jim!:9an>-3MZ!!Jjp*<628!4Dk-"SMfr3+qOW$<sN`!!!.k
Wu_6CquD<Kbl@_OlMptgi]6u<!JBLn!.k3r!!<:,BJBDc!Zl#N^Aricnc/am8lR,9!!3s95FVY>!!<6p
<@7\F!Z4p&p&K[E\GuU1qu?]td/\auJcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcLB&JcNdj
J,~>

%%EndBinary
grestore
np
1 lw
1 lc
1 lj
173.81 249.98 mo
173.81 258.42 li
1 /0 /CSD get_res sepcs
1 sep
@
173.81 263.74 mo
170.29 256.7 li
172.5 257.81 175.11 257.81 177.33 256.7 cv
173.81 263.74 li
cp
ef
18.75 288.77 mo
117.112 288.77 li
117.112 266.093 li
18.75 266.093 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
[1.5015 .75075 ] 0 dsh
18.75 288.77 mo
117.112 288.77 li
117.112 266.093 li
18.75 266.093 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
24.425 274.92 mo
(REPEAT )
[7.48766 6.74468 6.74476 6.74468 7.48765 7.48765 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
70.325 274.92 mo
(n)sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
75.975 274.92 mo
( )sh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
79.3 274.92 mo
(TIMES )
[7.51698 3.00085 9.76528 6.76423 5.27855 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
30.525 286.95 mo
(FOR )
[6.74468 7.49735 7.48766 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
55.55 286.95 mo
(i )
[3 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
62.2 286.95 mo
(= )
[7.52505 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
73.35 286.95 mo
(1 )
[5.27534 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
81.725 286.95 mo
(TO )
[7.48765 7.49736 0 ]xsh
IZFJQX+CMU#20Serif,Italic*1 [9.775 0 0 -9.775 0 0 ]msf
100.08 286.95 mo
(n)sh
1 lw
1 lc
1 lj
[1 2 ] 0 dsh
117.11 277.43 mo
129.07 277.43 li
@
134.4 277.43 mo
127.36 280.95 li
128.47 278.74 128.47 276.13 127.36 273.91 cv
134.4 277.43 li
cp
ef
[] 0 dsh
173.81 291.12 mo
173.81 299.56 li
@
173.81 304.89 mo
170.29 297.85 li
172.5 298.96 175.11 298.96 177.33 297.85 cv
173.81 304.89 li
cp
ef
173.81 363.991 mo
173.81 379.922 li
@
173.81 385.251 mo
170.29 378.211 li
172.5 379.319 175.11 379.319 177.33 378.211 cv
173.81 385.251 li
cp
ef
152.14 398.614 mo
195.47 398.614 li
199.16 398.614 202.15 395.623 202.15 391.933 cv
202.15 391.933 li
202.15 388.242 199.16 385.251 195.47 385.251 cv
195.47 385.251 li
152.14 385.251 li
148.45 385.251 145.46 388.242 145.46 391.932 cv
145.46 391.932 145.46 391.932 145.46 391.933 cv
145.46 395.623 148.45 398.614 152.14 398.614 cv
152.14 398.614 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
.75075 lw
2 lc
0 lj
152.14 398.614 mo
195.47 398.614 li
199.16 398.614 202.15 395.623 202.15 391.933 cv
202.15 391.933 li
202.15 388.242 199.16 385.251 195.47 385.251 cv
195.47 385.251 li
152.14 385.251 li
148.45 385.251 145.46 388.242 145.46 391.932 cv
145.46 391.932 145.46 391.932 145.46 391.933 cv
145.46 395.623 148.45 398.614 152.14 398.614 cv
152.14 398.614 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
160.55 395.65 mo
(STOP)
[5.24922 7.51697 7.52669 0 ]xsh
1 lw
1 lc
1 lj
243.25 334.44 mo
243.25 200.37 li
179.13 200.37 li
@
173.81 200.37 mo
180.85 196.85 li
179.74 199.07 179.74 201.67 180.85 203.89 cv
173.81 200.37 li
cp
ef
213.21 334.44 mo
237.64 334.44 li
@
242.97 334.44 mo
235.93 337.96 li
237.04 335.744 237.04 333.136 235.93 330.92 cv
242.97 334.44 li
cp
ef
%ADOBeginSubsetFont: HAAAAA+CMU#20Serif AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal IZFJQW+CMU#20Serif gcheck setglobal} if
1 5140 60 <0001000b000002e202ab002f009400b22402002bb12506e9b01f32b20105
002bb01333b10006e9b206121832323201b0302fb02ad6b11b11e9b21b2a
0a2bb3401b20092bb22a1b0a2bb3402a25092bb031d6b0361ab12b2a8704
b02a2e05b02bc0b10c15f9b00bc0b11b1a8704b01b2eb01ac0b10b0c08b1
0c06f904b00dc002b60b0c0d1a1b2a2b2e2e2e2e2e2e2e01b40b0c0d1a2b
2e2e2e2e2eb0401a010030311335163332371522061514171b0136353426
233516333237152207031514163b0115262207353332363d01032e02230b
3f437024252107b5a50a1c1d4e25342e5927c119371724dc24183619d209
0e2421028c1f03031f0a0f070afed9010c0f0f11161f03031f41fec6c11f
121f03031f121dc301560f0d0900>IZFJQW+CMU#20Serif AddT42Char 
IZFJQW+CMU#20Serif /CharStrings get begin
/g60 60 def
end
IZFJQW+CMU#20Serif /Encoding get
dup 89 /g60 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/IZFJQW+CMU#20Serif*1 
[32{/.notdef}rp /g3 16{/.notdef}rp /g20 11{/.notdef}rp /g32 /.notdef /g34 
/.notdef /g36 /.notdef /g38 /g39 /g40 /g41 2{/.notdef}rp 
/g44 3{/.notdef}rp /g48 /g49 /g50 /g51 /.notdef /g53 
/g54 /g55 /g56 3{/.notdef}rp /g60 166{/.notdef}rp]
IZFJQW+CMU#20Serif nf
IZFJQW+CMU#20Serif*1 [9.75 0 0 -9.75 0 0 ]msf
214.9 331.95 mo
(YES)
[7.51726 6.76643 0 ]xsh
IZFJQW+CMU#20Serif*1 [9.775 0 0 -9.775 0 0 ]msf
181.55 374.525 mo
(NO)
[7.52525 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/IZFJQY+CMU#20Serif,Italic*1 uf
/IZFJQY+CMU#20Serif,Italic uf
/LAAAAA+CMU#20Serif,Italic uf
/IZFJQX+CMU#20Serif,Italic*1 uf
/IZFJQX+CMU#20Serif,Italic uf
/JAAAAA+CMU#20Serif,Italic uf
/IZFJQW+CMU#20Serif*1 uf
/IZFJQW+CMU#20Serif uf
/HAAAAA+CMU#20Serif uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
